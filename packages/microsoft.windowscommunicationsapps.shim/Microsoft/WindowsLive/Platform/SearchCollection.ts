// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:39 2021
// </auto-generated>
// --------------------------------------------------

import { CollectionChangedHandler } from "./CollectionChangedHandler";
import { CollectionNotificationHandler } from "./CollectionNotificationHandler";
import { ICollection } from "./ICollection";
import { IDisposable } from "./IDisposable";
import { INotificationCollection } from "./INotificationCollection";
import { IObject } from "./IObject";
import { ISearchCollection } from "./ISearchCollection";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.WindowsLive.Platform.SearchCollection')
export class SearchCollection implements ICollection, IDisposable, ISearchCollection, INotificationCollection { 
    readonly count: number = null;
    readonly totalCount: number = null;
    item(index: number): IObject {
        throw new Error('SearchCollection#item not implemented')
    }
    fetchMoreItems(dwFetchSize: number): void {
        console.warn('SearchCollection#fetchMoreItems not implemented')
    }
    lock(): void {
        console.warn('SearchCollection#lock not implemented')
    }
    unlock(): void {
        console.warn('SearchCollection#unlock not implemented')
    }
    dispose(): void {
        console.warn('SearchCollection#dispose not implemented')
    }
    beginServerSearch(): void {
        console.warn('SearchCollection#beginServerSearch not implemented')
    }
    dispatchEvents(): void {
        console.warn('SearchCollection#dispatchEvents not implemented')
    }
    cancelSynchronousDispatch(): void {
        console.warn('SearchCollection#cancelSynchronousDispatch not implemented')
    }

    private __collectionChanged: Set<CollectionChangedHandler> = new Set();
    @Enumerable(true)
    set oncollectionchanged(handler: CollectionChangedHandler) {
        this.__collectionChanged.add(handler);
    }

    private __notificationReceived: Set<CollectionNotificationHandler> = new Set();
    @Enumerable(true)
    set onnotificationreceived(handler: CollectionNotificationHandler) {
        this.__notificationReceived.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'collectionchanged':
                this.__collectionChanged.add(handler);
                break;
            case 'notificationreceived':
                this.__notificationReceived.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'collectionchanged':
                this.__collectionChanged.delete(handler);
                break;
            case 'notificationreceived':
                this.__notificationReceived.delete(handler);
                break;
        }
    }
}
