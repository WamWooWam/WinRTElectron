// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:39 2021
// </auto-generated>
// --------------------------------------------------

import { IFreeBusyRequest } from "./IFreeBusyRequest";
import { ICollection } from "../ICollection";
import { IDisposable } from "../IDisposable";
import { IObject } from "../IObject";
import { ITransientObjectHolder } from "../ITransientObjectHolder";
import { ObjectChangedHandler } from "../ObjectChangedHandler";
import { SearchStatusCode } from "../SearchStatusCode";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.WindowsLive.Platform.Calendar.FreeBusyRequest')
export class FreeBusyRequest implements IObject, IDisposable, IFreeBusyRequest { 
    readonly canDelete: boolean = null;
    readonly canEdit: boolean = null;
    readonly isObjectValid: boolean = null;
    readonly objectId: string = null;
    readonly objectType: string = null;
    readonly count: number = null;
    readonly results: ICollection = null;
    readonly status: SearchStatusCode = null;
    commit(): void {
        console.warn('FreeBusyRequest#commit not implemented')
    }
    deleteObject(): void {
        console.warn('FreeBusyRequest#deleteObject not implemented')
    }
    getKeepAlive(): ITransientObjectHolder {
        throw new Error('FreeBusyRequest#getKeepAlive not implemented')
    }
    dispose(): void {
        console.warn('FreeBusyRequest#dispose not implemented')
    }

    private __changed: Set<ObjectChangedHandler> = new Set();
    @Enumerable(true)
    set onchanged(handler: ObjectChangedHandler) {
        this.__changed.add(handler);
    }

    private __deleted: Set<ObjectChangedHandler> = new Set();
    @Enumerable(true)
    set ondeleted(handler: ObjectChangedHandler) {
        this.__deleted.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.add(handler);
                break;
            case 'deleted':
                this.__deleted.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.delete(handler);
                break;
            case 'deleted':
                this.__deleted.delete(handler);
                break;
        }
    }
}
