// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:39 2021
// </auto-generated>
// --------------------------------------------------

import { BusyStatus } from "./BusyStatus";
import { DataType } from "./DataType";
import { EventType } from "./EventType";
import { IAttendee } from "./IAttendee";
import { ICalendar } from "./ICalendar";
import { IRecurrence } from "./IRecurrence";
import { MeetingMessageType } from "./MeetingMessageType";
import { MeetingStatus } from "./MeetingStatus";
import { ResponseType } from "./ResponseType";
import { Sensitivity } from "./Sensitivity";
import { ServerCapability } from "./ServerCapability";
import { Status } from "./Status";
import { ICollection } from "../ICollection";
import { IObject } from "../IObject";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";

export interface IEvent extends IObject {
    allDayEvent: boolean;
    busyStatus: BusyStatus;
    readonly calendar: ICalendar;
    readonly capabilities: ServerCapability;
    readonly color: number;
    data: string;
    dataType: DataType;
    disallowNewTime: boolean;
    endDate: Date;
    readonly eventType: EventType;
    readonly exceptions: boolean;
    readonly handle: string;
    readonly id: number;
    readonly isEventTypeValid: boolean;
    readonly isOrganizer: boolean;
    location: string;
    readonly meetingMessageType: MeetingMessageType;
    meetingStatus: MeetingStatus;
    readonly modified: Date;
    readonly occurrenceDeleted: boolean;
    organizerEmail: string;
    organizerName: string;
    readonly recurrence: IRecurrence;
    recurring: boolean;
    reminder: number;
    readonly reminderTime: Date;
    readonly replyTime: Date;
    responseRequested: boolean;
    responseType: ResponseType;
    sensitivity: Sensitivity;
    startDate: Date;
    subject: string;
    timeZoneId: string;
    readonly uid: string;
    getSeries(): IEvent;
    deleteExceptions(): void;
    getOccurrence(start: Date): IEvent;
    getOccurrenceByExceptionStart(dtExceptionStart: Date): IEvent;
    getiCalendar(): string;
    getiCalendarWithAttendees(pAttendees: IVectorView<IAttendee>): string;
    getAttendees(): ICollection;
    addAttendee(name: string, email: string): IAttendee;
    validate(): Status;
    markDirty(): void;
}
