// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:38 2021
// </auto-generated>
// --------------------------------------------------

import { FavoritesFilter } from "./FavoritesFilter";
import { IAccount } from "./IAccount";
import { ICollection } from "./ICollection";
import { IContact } from "./IContact";
import { IPerson } from "./IPerson";
import { IRecipient } from "./IRecipient";
import { IRelevanceEntity } from "./IRelevanceEntity";
import { OnlineStatusFilter } from "./OnlineStatusFilter";
import { PeoplePickerFilter } from "./PeoplePickerFilter";
import { PeopleSearchType } from "./PeopleSearchType";
import { RelevanceAction } from "./RelevanceAction";
import { RelevanceScenario } from "./RelevanceScenario";
import { TemporaryContactData } from "./TemporaryContactData";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";

export interface IPeopleManager {
    nameSortOrder: boolean;
    createContactForDefaultAccount(): IContact;
    createContact(pAccount: IAccount): IContact;
    loadContact(objectId: string): IContact;
    tryLoadContact(objectId: string): IContact;
    tryLoadContactByLaunchArguments(hstrLaunchArguments: string): IContact;
    createTemporaryPerson(pAccount: IAccount, data: TemporaryContactData): IPerson;
    loadPerson(objectId: string): IPerson;
    tryLoadPerson(objectId: string): IPerson;
    tryLoadPersonByCID(cid: number): IPerson;
    tryLoadPersonBySourceIDAndObjectID(sourceId: string, sourceObjectId: string): IPerson;
    tryLoadPersonByMri(mri: string): IPerson;
    tryLoadPersonByTileId(hstrTileId: string): IPerson;
    loadRecipientByEmail(email: string, name: string): IRecipient;
    promoteImplicitContact(pAccount: IAccount, implicitContactObjectId: string): void;
    getFavoritePeople(): ICollection;
    getFavoritePeopleByCustomOrder(): ICollection;
    getRelevantPeople(): ICollection;
    getPeopleNameBetween(onlineFilter: OnlineStatusFilter, hstrLowerBound: string, isLowerBoundInclusive: boolean, hstrUpperBound: string, isUpperBoundInclusive: boolean): ICollection;
    getPeopleNameOrEmailStartWith(hstrSearch: string): ICollection;
    getPeopleByPickerQuery(filter: PeoplePickerFilter, favoritesFilter: FavoritesFilter, onlineFilter: OnlineStatusFilter, hstrLowerBound: string, isLowerBoundInclusive: boolean, hstrUpperBound: string, isUpperBoundInclusive: boolean): ICollection;
    getPeopleNameOrEmailStartWithEx(hstrSearch: string): ICollection;
    getPeopleByHasLocalUserTile(fHasLocalUserTile: boolean, fOnlyFavorites: boolean): ICollection;
    search(searchType: PeopleSearchType, hstrSearchFilter: string, hstrSearchLocale: string, uiPageSize: number): ICollection;
    searchServer(hstrSearch: string, cInitialResultCount: number, pAccount: IAccount, uCachePeriod: number): ICollection;
    searchServerBackground(hstrSearch: string, cInitialResultCount: number, pAccount: IAccount, uCachePeriod: number): ICollection;
    recordRelevanceAction(pAssociatedEntities: IVectorView<IRelevanceEntity>, action: RelevanceAction, pContextualAccount: IAccount, timestamp: Date): void;
    getSuggestions(pAssociatedEntities: IVectorView<IRelevanceEntity>, scenario: RelevanceScenario, pContextualAccount: IAccount, count: number): IVectorView<IRelevanceEntity>;
    addressWellSearchAsync(hstrSearchFilter: string, hstrSearchLocale: string, scenario: RelevanceScenario, pContextualAccount: IAccount, count: number, pExcludeRecipients: IVectorView<IRecipient>): IAsyncOperation<IVectorView<IRecipient>>;
}
