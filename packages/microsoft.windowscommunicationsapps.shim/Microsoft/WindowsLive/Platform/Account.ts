// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:37 2021
// </auto-generated>
// --------------------------------------------------

import { AccountAuthType } from "./AccountAuthType";
import { AccountIconType } from "./AccountIconType";
import { AccountType } from "./AccountType";
import { ApplicationScenario } from "./ApplicationScenario";
import { ConfigureType } from "./ConfigureType";
import { HintState } from "./HintState";
import { IAccount } from "./IAccount";
import { IAccountResource } from "./IAccountResource";
import { IAccountScenarios } from "./IAccountScenarios";
import { IAccountServerConnectionSettings } from "./IAccountServerConnectionSettings";
import { IAccountToken } from "./IAccountToken";
import { ICollection } from "./ICollection";
import { IContact } from "./IContact";
import { IObject } from "./IObject";
import { ITransientObjectHolder } from "./ITransientObjectHolder";
import { IncludeSentItemsInConversationCache } from "./IncludeSentItemsInConversationCache";
import { ObjectChangedHandler } from "./ObjectChangedHandler";
import { ResourceType } from "./ResourceType";
import { ScenarioState } from "./ScenarioState";
import { ServerType } from "./ServerType";
import { SyncType } from "./SyncType";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { AccountResource } from "./AccountResource";
import { uuidv4 } from "winrt/Windows/Foundation/Interop/Utils";
import { Me } from "./Me";
import { PlatformObject } from "./PlatformObject";
import { AccountMailResource } from "./AccountMailResource";
import { AccountCalendarResource } from "./AccountCalendarResource";
import { MailRuleAccountResource } from "./MailRuleAccountResource";
import { AccountServerConnectionSettings } from "./AccountServerConnectionSettings";
import { ImapAccountSettings } from "./ImapAccountSettings";
import { SmtpAccountSettings } from "./SmtpAccountSettings";
import { EasAccountSettings } from "./EasAccountSettings";
import { Vector } from "winrt/Windows/Foundation/Interop/Vector`1";

@GenerateShim('Microsoft.WindowsLive.Platform.Account')
export class Account extends PlatformObject implements IAccount, IAccountScenarios {

    constructor() {
        super("Account");

        this.sourceId = uuidv4();
        this.isDefault = true;
        this.meContact = new Me();
        this.accountType = AccountType.liveId;
        this.iconSmallUrl = "https://cdn.discordapp.com/emojis/422838511553609728.gif";
        this.iconMediumUrl = "https://cdn.discordapp.com/emojis/422838511553609728.gif";
        this.iconType = AccountIconType.outlook;
        this.emailAddress = "wamwoowam@gmail.com";
        this.sendAsAddresses = new Vector(["wamwoowam@gmail.com"]);
        this.displayName = "Wan Kerr Co. Ltd.";
        this.userDisplayName = "Thomas May";
        this.color = 0x0078d7;
        this.syncType = SyncType.push;
        this.mailScenarioState = ScenarioState.connected;
        this.peopleScenarioState = ScenarioState.connected;
        this.calendarScenarioState = ScenarioState.connected;
        this.socialScenarioState = ScenarioState.connected;
    }

    userDisplayName: string = null;
    syncType: SyncType = null;
    settingsSyncTime: Date = null;
    settingsResult: number = null;
    settingsChangedTime: Date = null;
    preferredSendAsAddress: string = null;
    lastAuthResult: number = null;
    pollInterval: number = null;
    protectionEnterpriseId: string = null;
    folderStateResult: number = null;
    filterContactsFromView: boolean = null;
    includeSentItemsInConversationCache: IncludeSentItemsInConversationCache = null;
    displayName: string = null;
    readonly iconType: AccountIconType = null;
    readonly iconSmallUrl: string = null;
    readonly iconMediumUrl: string = null;
    readonly isDefault: boolean = null;
    readonly isEasi: boolean = null;
    readonly meContact: IContact = null;
    readonly peopleViewComplete: boolean = null;
    readonly resources: ICollection = null;
    readonly sendAsAddresses: IVectorView<string> = null;
    readonly servers: ICollection = null;
    readonly serviceContactsName: string = null;
    readonly serviceName: string = null;
    readonly allEmailAddresses: IVectorView<string> = null;
    readonly authType: AccountAuthType = null;
    readonly color: number = null;
    readonly shortLinkLimit: number = null;
    readonly siteUrl: string = null;
    readonly sourceId: string = null;
    readonly statusLimit: number = null;
    readonly summary: string = null;
    readonly supportsOAuth: boolean = null;
    readonly controlChannelId: string = null;
    readonly thirdPartyUserId: string = null;
    readonly createDate: Date = null;
    readonly accountType: AccountType = null;
    readonly editableResources: ICollection = null;
    readonly emailAddress: string = null;
    readonly hintState: HintState = null;
    readonly tokens: ICollection = null;
    readonly calendarScenarioState: ScenarioState = null;
    readonly mailScenarioState: ScenarioState = null;
    readonly peopleScenarioState: ScenarioState = null;
    readonly peopleSearchScenarioState: ScenarioState = null;
    readonly publishScenarioState: ScenarioState = null;
    readonly socialScenarioState: ScenarioState = null;
    getConfigureType(scenario: ApplicationScenario): ConfigureType {
        // throw new Error('Account#getConfigureType not implemented')
        return ConfigureType.editOnClient;
    }
    getOtherConnectableAccounts(scenario: ApplicationScenario): ICollection {
        throw new Error('Account#getOtherConnectableAccounts not implemented')
    }
    getServerScenarios(scenario: ApplicationScenario, reconnect: boolean): string {
        throw new Error('Account#getServerScenarios not implemented')
    }
    getResourceByType(type: ResourceType): IAccountResource {
        // throw new Error('Account#getResourceByType not implemented')
        console.warn(`Account#getResourceByType not implemented: ${ResourceType[type]}`);
        switch (type) {
            case ResourceType.mail:
                return new AccountMailResource();
            case ResourceType.calendar:
                return new AccountCalendarResource();
            // case ResourceType.mailRule:
            //     return new MailRuleAccountResource();
            default:
                return new AccountResource(type);
        }

    }
    getServerByType(type: ServerType): IAccountServerConnectionSettings {
        // throw new Error('Account#getServerByType not implemented')
        switch (type) {
            case ServerType.imap:
                return new ImapAccountSettings();
            case ServerType.smtp:
                return new SmtpAccountSettings();
            case ServerType.eas:
                return new EasAccountSettings();
        }
        return null;
    }
    getTokenByScheme(scheme: string): IAccountToken {
        throw new Error('Account#getTokenByScheme not implemented')
    }
    createConnectedAccount(email: string): IAccount {
        throw new Error('Account#createConnectedAccount not implemented')
    }
    deleteFromLocalDevice(): void {
        console.warn('Account#deleteFromLocalDevice not implemented')
    }
    setAuthTokens(encryptedRefreshToken: string, encryptedAccessToken: string, accessTokenExpiryTime: Date): void {
        console.warn('Account#setAuthTokens not implemented')
    }
    getAccessTokenAsync(): IAsyncOperation<string> {
        return AsyncOperation.from(async () => { throw new Error('Account#getAccessTokenAsync not implemented') });
    }
}

export const DefaultAccount = new Account();