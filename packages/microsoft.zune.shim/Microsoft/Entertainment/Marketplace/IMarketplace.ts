// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { IDownloadResult } from "./IDownloadResult";
import { IGrovelPastPurchasedMusicResult } from "./IGrovelPastPurchasedMusicResult";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { EventHandler } from "winrt/Windows/Foundation/EventHandler`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";

export interface IMarketplace {
    addMedia(serviceMediaIds: IVectorView<string>, mediaTypes: IVectorView<number>, filterToOfferIds: IVectorView<string>, mediaPropertyMap: any, addToCollection: boolean): IAsyncOperation<string>;
    tryAddMedia(serviceMediaIds: IVectorView<string>, mediaTypes: IVectorView<number>, filterToOfferIds: IVectorView<string>, mediaPropertyMap: any, addToCollection: boolean): IAsyncOperation<string>;
    download(ticket: string, mediaIds: IVectorView<number>, mediaTypes: IVectorView<number>, contextMediaId: number, contextMediaTypeId: number, fPreferStandardDef: number): IAsyncOperation<IDownloadResult>;
    getAssetLocationsAsync(ticket: string, serviceMediaIds: IVectorView<string>, mediaInstanceIds: IVectorView<string>, mediaInstanceLicenseRights: IVectorView<number>, fulfillmentTickets: IVectorView<string>, contexts: IVectorView<string>, autoActivateMachine: boolean): IAsyncOperation<string>;
    getMediaEntitlementsAsync(serviceMediaIds: IVectorView<string>): IAsyncOperation<string>;
    grovelPastPurchasedMusic(historyToken: string, aggressiveGrovel: boolean): IAsyncOperation<IGrovelPastPurchasedMusicResult>;
    sendPlaybackDurationAsync(trackingId: string, duration: number): IAsyncAction;
    purchaseFreeOfferAsync(hbiPassportTicket: string, offerId: string, currencyCode: string): IAsyncAction;
    getAlbumsSuggestAsync(albumLibraryId: number): IAsyncOperation<string>;
    getLatestSeasonMetadataAsync(): IAsyncAction;
    generateGuid(): string;
    onmediarightchanged: EventHandler<string>;
    addEventListener(name: string, handler: any)
    removeEventListener(name: string, handler: any)
}
