// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { IAppVolume } from "./IAppVolume";
import { MuteValue } from "./MuteValue";
import { VolumeValue } from "./VolumeValue";
import { EventHandler } from "winrt/Windows/Foundation/EventHandler`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { AsyncOperation, IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.Entertainment.AppVolumeManager.AppVolume')
export class AppVolume implements IAppVolume {
    getVolumeLevelAsync(): IAsyncOperation<VolumeValue> {
        // throw new Error('AppVolume#getVolumeLevelAsync not implemented')
        return AsyncOperation.from(async () => {
            return { value: 0.8 };
        })
    }
    setVolumeLevelAsync(value: number): IAsyncAction {
        throw new Error('AppVolume#setVolumeLevelAsync not implemented')
    }
    getMutedAsync(): IAsyncOperation<MuteValue> {
        throw new Error('AppVolume#getMutedAsync not implemented')
    }
    setMutedAsync(muteValue: boolean): IAsyncAction {
        throw new Error('AppVolume#setMutedAsync not implemented')
    }
    audioRenderDeviceChanged(): void {
        console.warn('AppVolume#audioRenderDeviceChanged not implemented')
    }

    private __audioEndpointChanged: Set<EventHandler<number>> = new Set();
    @Enumerable(true)
    set onaudioendpointchanged(handler: EventHandler<number>) {
        this.__audioEndpointChanged.add(handler);
    }

    private __systemVolumeStateChanged: Set<EventHandler<number>> = new Set();
    @Enumerable(true)
    set onsystemvolumestatechanged(handler: EventHandler<number>) {
        this.__systemVolumeStateChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'audioendpointchanged':
                this.__audioEndpointChanged.add(handler);
                break;
            case 'systemvolumestatechanged':
                this.__systemVolumeStateChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'audioendpointchanged':
                this.__audioEndpointChanged.delete(handler);
                break;
            case 'systemvolumestatechanged':
                this.__systemVolumeStateChanged.delete(handler);
                break;
        }
    }
}
