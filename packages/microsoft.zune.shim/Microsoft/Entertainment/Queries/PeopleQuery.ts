// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:03 2021
// </auto-generated>
// --------------------------------------------------

import { MediaAvailability } from "../Platform/MediaAvailability";
import { ArtistOf } from "./ArtistOf";
import { IPeopleQuery } from "./IPeopleQuery";
import { IQuery } from "./IQuery";
import { IQueryChangedEventArgs } from "./IQueryChangedEventArgs";
import { IQueryPage } from "./IQueryPage";
import { IQueryResult } from "./IQueryResult";
import { PeopleQueryCountOperation } from "./PeopleQueryCountOperation";
import { PeopleSortBy } from "./PeopleSortBy";
import { IIterable } from "winrt/Windows/Foundation/Collections/IIterable`1";
import { EventHandler } from "winrt/Windows/Foundation/EventHandler`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IAsyncOperationWithProgress } from "winrt/Windows/Foundation/IAsyncOperationWithProgress`2";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.Entertainment.Queries.PeopleQuery')
export class PeopleQuery implements IPeopleQuery, IQuery, IClosable { 
    currentPage: IQueryPage = null;
    nextPage: IQueryPage = null;
    previousPage: IQueryPage = null;
    watchAll: number = null;
    primarySortBy: PeopleSortBy = null;
    playlistId: number = null;
    personIds: IIterable<number> = null;
    personId: number = null;
    pageSize: number = null;
    mediaAvailability: MediaAvailability = null;
    keyword: IIterable<string> = null;
    groupsEnabled: number = null;
    getMediaEntitlements: number = null;
    complexFieldsEnabled: number = null;
    artistOf: ArtistOf = null;
    executeAsync(): IAsyncOperationWithProgress<IQueryResult, number> {
        throw new Error('PeopleQuery#executeAsync not implemented')
    }
    getCountAsync(): PeopleQueryCountOperation {
        throw new Error('PeopleQuery#getCountAsync not implemented')
    }
    setCursorPosition(index: number): void {
        console.warn('PeopleQuery#setCursorPosition not implemented')
    }
    getGroupsAsync(): IAsyncOperationWithProgress<IQueryResult, number> {
        throw new Error('PeopleQuery#getGroupsAsync not implemented')
    }
    refreshAsync(): IAsyncAction {
        throw new Error('PeopleQuery#refreshAsync not implemented')
    }
    getItemIndexAsync(objectId: number): IAsyncOperation<number> {
        throw new Error('PeopleQuery#getItemIndexAsync not implemented')
    }
    execute(): IAsyncOperationWithProgress<IQueryResult, number> {
        throw new Error('PeopleQuery#execute not implemented')
    }
    pauseAsync(): IAsyncAction {
        throw new Error('PeopleQuery#pauseAsync not implemented')
    }
    resumeAsync(): IAsyncAction {
        throw new Error('PeopleQuery#resumeAsync not implemented')
    }
    close(): void {
        console.warn('PeopleQuery#close not implemented')
    }

    private __queryChanged: Set<EventHandler<IQueryChangedEventArgs>> = new Set();
    @Enumerable(true)
    set onquerychanged(handler: EventHandler<IQueryChangedEventArgs>) {
        this.__queryChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'querychanged':
                this.__queryChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'querychanged':
                this.__queryChanged.delete(handler);
                break;
        }
    }
}
