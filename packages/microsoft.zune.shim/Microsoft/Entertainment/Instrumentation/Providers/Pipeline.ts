// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { IPipeline } from "./IPipeline";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.Entertainment.Instrumentation.Providers.Pipeline')
export class Pipeline implements IPipeline { 
    isClosedCaptions_DroppedFrameEnabled: boolean = null;
    isClosedCaptions_EnterRenderingLoopEnabled: boolean = null;
    isClosedCaptions_ExitRenderingLoopEnabled: boolean = null;
    isClosedCaptions_OnEnabled: boolean = null;
    isClosedCaptions_RendererGetTTMLFilepathEnabled: boolean = null;
    isClosedCaptions_RendererLoadTTMLFileEnabled: boolean = null;
    isDRM_DeleteLicense_CompletedEnabled: boolean = null;
    isDRM_DeleteLicense_InvokedEnabled: boolean = null;
    isDRM_ReportMetering_AccountEnabled: boolean = null;
    isDRM_ReportMetering_CompletedEnabled: boolean = null;
    isDRM_ReportMetering_InvokedEnabled: boolean = null;
    isDRM_ReportMetering_NoDataToReportEnabled: boolean = null;
    isDRM_RootLicenseRefresh_AccountEnabled: boolean = null;
    isDRM_RootLicenseRefresh_CompletedEnabled: boolean = null;
    isDRM_RootLicenseRefresh_DetailsEnabled: boolean = null;
    isDRM_RootLicenseRefresh_InvokedEnabled: boolean = null;
    isFastStartMediaSource_CreatedEnabled: boolean = null;
    isFastStartMediaSource_PlaybackStartEnabled: boolean = null;
    isFastStartMediaSource_ReceivedUrlEnabled: boolean = null;
    isLEQ_EnabledEnabled: boolean = null;
    isLEQ_Process_CompleteEnabled: boolean = null;
    isLEQ_Process_StartEnabled: boolean = null;
    isLEQ_SetFormatEnabled: boolean = null;
    isMBR_BufferStatusEnabled: boolean = null;
    isMBR_DMO_ProcessInput_ReturnEnabled: boolean = null;
    isMBR_DMO_ProcessOutput_ReturnEnabled: boolean = null;
    isMBR_DropFrameEnabled: boolean = null;
    isMBR_EOSEnabled: boolean = null;
    isMBR_GotNewSampleEnabled: boolean = null;
    isMBR_ManifestStreamEnabled: boolean = null;
    isMBR_NextChunkEnabled: boolean = null;
    isMBR_Pause_EnterEnabled: boolean = null;
    isMBR_Pause_ExitEnabled: boolean = null;
    isMBR_PinBeginFlush_EnterEnabled: boolean = null;
    isMBR_PinBeginFlush_ExitEnabled: boolean = null;
    isMBR_PinDecompress_BeginEnabled: boolean = null;
    isMBR_PinDecompress_CallEnabled: boolean = null;
    isMBR_PinDecompress_EndEnabled: boolean = null;
    isMBR_PinDecompress_ReturnEnabled: boolean = null;
    isMBR_PinEndFlush_EnterEnabled: boolean = null;
    isMBR_PinEndFlush_ExitEnabled: boolean = null;
    isMBR_PinPumpState_ChangedEnabled: boolean = null;
    isMBR_Preroll_ExitEnabled: boolean = null;
    isMBR_Preroll_Forced_ExitEnabled: boolean = null;
    isMBR_Run_EnterEnabled: boolean = null;
    isMBR_Run_ExitEnabled: boolean = null;
    isMBR_Run_LockEnabled: boolean = null;
    isMBR_SamplePushedDownStream_BeginEnabled: boolean = null;
    isMBR_SamplePushedDownStream_EndEnabled: boolean = null;
    isMBR_SamplePushedToPinPumpEnabled: boolean = null;
    isMBR_Seek_EnterEnabled: boolean = null;
    isMBR_Seek_ExitEnabled: boolean = null;
    isMBR_SourceState_ChangedEnabled: boolean = null;
    isMBR_Stop_EnterEnabled: boolean = null;
    isMBR_Stop_ExitEnabled: boolean = null;
    isMBR_Transcrypt_BeginEnabled: boolean = null;
    isMBR_Transcrypt_EndEnabled: boolean = null;
    isPlaybackInterop_PlayerStateChangedEnabled: boolean = null;
    isPlaybackInterop_PositionChangedEnabled: boolean = null;
    isPlaybackInterop_TransportStateChangedEnabled: boolean = null;
    isPlaybackInterop_TrickPlayStateChangedEnabled: boolean = null;
    isPlayback_ControlInitializedEnabled: boolean = null;
    isPlayback_CurrentMediaLoadedEnabled: boolean = null;
    isPlayback_DisableTimeUpdateEnabled: boolean = null;
    isPlayback_EnableTimeUpdateEnabled: boolean = null;
    isPlayback_ErrorOccurredEnabled: boolean = null;
    isPlayback_ForceTimeUpdateEnabled: boolean = null;
    isPlayback_MCPlayerAdapter_CreateInstanceEnabled: boolean = null;
    isPlayback_MFPlayer_CreateInstanceEnabled: boolean = null;
    isPlayback_NextMediaLoadedEnabled: boolean = null;
    isPlayback_NextMediaStartedEnabled: boolean = null;
    isPlayback_PBMSoundLevelChangedEnabled: boolean = null;
    isPlayback_PlayerStateChangedEnabled: boolean = null;
    isPlayback_SessionInitializedEnabled: boolean = null;
    isPlayback_SetMediaEnabled: boolean = null;
    isPlayback_SetNextMediaEnabled: boolean = null;
    isPlayback_SwitchingToNextMediaEnabled: boolean = null;
    isPlayback_TargetTransportStateSetEnabled: boolean = null;
    isPlayback_TransportStateChangedEnabled: boolean = null;
    isPlayback_WPPEnabled: boolean = null;
    isPlaylist_ActivateEnabled: boolean = null;
    isPlaylist_CreatedEnabled: boolean = null;
    isPlaylist_InterpretingDataEnabled: boolean = null;
    isPlaylist_SetDataSourceBeginEnabled: boolean = null;
    isPlaylist_SetDataSourceEndEnabled: boolean = null;
    isPlaylist_SetMediaEnabled: boolean = null;
    isPlaylist_SetNextMediaEnabled: boolean = null;
    isPlaylog_BookmarkLoadEnabled: boolean = null;
    isPlaylog_BookmarkSaveEnabled: boolean = null;
    isPlaylog_PlayCountLoadEnabled: boolean = null;
    isPlaylog_PlayCountSaveEnabled: boolean = null;
    isPlaylog_PlayedLoadEnabled: boolean = null;
    isPlaylog_PlayedSaveEnabled: boolean = null;
    isPresenter_Display_Video_SizeEnabled: boolean = null;
    isPresenter_DownresEnabled: boolean = null;
    isPresenter_FrameDroppedEnabled: boolean = null;
    isPresenter_FrameTimesEnabled: boolean = null;
    isPresenter_Native_Video_SizeEnabled: boolean = null;
    isPresenter_OperationEnabled: boolean = null;
    isPresenter_Target_Video_SizeEnabled: boolean = null;
    isTranscoding_CompleteEnabled: boolean = null;
    isTranscoding_Crash_StatusEnabled: boolean = null;
    isTranscoding_Disable_HW_AccelerationEnabled: boolean = null;
    isTranscoding_JobTypeEnabled: boolean = null;
    isTranscoding_MF_DShow_FallbackEnabled: boolean = null;
    isTranscoding_MF_HW_SW_FallbackEnabled: boolean = null;
    isTranscoding_MF_HW_StatusEnabled: boolean = null;
    isTranscoding_Reenable_HW_AccelerationEnabled: boolean = null;
    isTranscoding_SW_Retranscode_After_CrashEnabled: boolean = null;
    isTranscoding_StartEnabled: boolean = null;
    traceMBR_Pause_Enter(currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_Pause_Enter not implemented')
    }
    traceMBR_Pause_Exit(currentStreamTimeHns: number, hresult: number): void {
        console.warn('Pipeline#traceMBR_Pause_Exit not implemented')
    }
    traceMBR_Run_Enter(startTimeHns: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_Run_Enter not implemented')
    }
    traceMBR_Run_Lock(currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_Run_Lock not implemented')
    }
    traceMBR_Run_Exit(currentStreamTimeHns: number, hresult: number): void {
        console.warn('Pipeline#traceMBR_Run_Exit not implemented')
    }
    traceMBR_Seek_Enter(possitionHns: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_Seek_Enter not implemented')
    }
    traceMBR_Seek_Exit(currentStreamTimeHns: number, hresult: number): void {
        console.warn('Pipeline#traceMBR_Seek_Exit not implemented')
    }
    traceMBR_Stop_Enter(currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_Stop_Enter not implemented')
    }
    traceMBR_Stop_Exit(currentStreamTimeHns: number, hresult: number): void {
        console.warn('Pipeline#traceMBR_Stop_Exit not implemented')
    }
    traceMBR_SourceState_Changed(filterState: number, oldState: number, newState: number): void {
        console.warn('Pipeline#traceMBR_SourceState_Changed not implemented')
    }
    traceMBR_PinPumpState_Changed(streamType: number, oldState: number, newState: number): void {
        console.warn('Pipeline#traceMBR_PinPumpState_Changed not implemented')
    }
    traceMBR_EOS(streamType: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_EOS not implemented')
    }
    traceMBR_Preroll_Exit(streamType: number, initialAudioTimeHns: number, initialVideoTimeHns: number, newStartBaseTimeHns: number): void {
        console.warn('Pipeline#traceMBR_Preroll_Exit not implemented')
    }
    traceMBR_Preroll_Forced_Exit(streamType: number, initialAudioTimeHns: number, initialVideoTimeHns: number, newStartBaseTimeHns: number): void {
        console.warn('Pipeline#traceMBR_Preroll_Forced_Exit not implemented')
    }
    traceMBR_PinBeginFlush_Enter(streamType: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_PinBeginFlush_Enter not implemented')
    }
    traceMBR_PinBeginFlush_Exit(streamType: number, currentStreamTimeHns: number, hresult: number): void {
        console.warn('Pipeline#traceMBR_PinBeginFlush_Exit not implemented')
    }
    traceMBR_PinEndFlush_Enter(streamType: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_PinEndFlush_Enter not implemented')
    }
    traceMBR_PinEndFlush_Exit(streamType: number, currentStreamTimeHns: number, hresult: number): void {
        console.warn('Pipeline#traceMBR_PinEndFlush_Exit not implemented')
    }
    traceMBR_GotNewSample(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_GotNewSample not implemented')
    }
    traceMBR_SamplePushedToPinPump(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_SamplePushedToPinPump not implemented')
    }
    traceMBR_SamplePushedDownStream_Begin(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_SamplePushedDownStream_Begin not implemented')
    }
    traceMBR_SamplePushedDownStream_End(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_SamplePushedDownStream_End not implemented')
    }
    traceMBR_BufferStatus(currentStreamTimeHns: number, bufferSizeMs: number): void {
        console.warn('Pipeline#traceMBR_BufferStatus not implemented')
    }
    traceMBR_DropFrame(totalFramesDropped: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_DropFrame not implemented')
    }
    traceMBR_PinDecompress_Begin(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
        console.warn('Pipeline#traceMBR_PinDecompress_Begin not implemented')
    }
    traceMBR_PinDecompress_End(streamType: number, frameSizeInBytes: number, durationHns: number): void {
        console.warn('Pipeline#traceMBR_PinDecompress_End not implemented')
    }
    traceMBR_PinDecompress_Call(streamType: number): void {
        console.warn('Pipeline#traceMBR_PinDecompress_Call not implemented')
    }
    traceMBR_PinDecompress_Return(streamType: number): void {
        console.warn('Pipeline#traceMBR_PinDecompress_Return not implemented')
    }
    traceMBR_Transcrypt_Begin(streamType: number): void {
        console.warn('Pipeline#traceMBR_Transcrypt_Begin not implemented')
    }
    traceMBR_Transcrypt_End(streamType: number): void {
        console.warn('Pipeline#traceMBR_Transcrypt_End not implemented')
    }
    traceMBR_DMO_ProcessInput_Return(streamType: number, sampleTimeHns: number, hresult: number): void {
        console.warn('Pipeline#traceMBR_DMO_ProcessInput_Return not implemented')
    }
    traceMBR_DMO_ProcessOutput_Return(streamType: number, hresult: number, durationHns: number): void {
        console.warn('Pipeline#traceMBR_DMO_ProcessOutput_Return not implemented')
    }
    traceMBR_NextChunk(streamType: number, chunkIndex: number, bitrateBps: number, sampleTimeHns: number, durationHns: number, sizeInBytes: number, quality: number, targetQuality: number, totalBandwidthBps: number, targetBandwidthBps: number, bufferSizeMs: number): void {
        console.warn('Pipeline#traceMBR_NextChunk not implemented')
    }
    traceMBR_ManifestStream(streamType: number, id: number, bitrate: number, width: number, height: number, channels: number): void {
        console.warn('Pipeline#traceMBR_ManifestStream not implemented')
    }
    traceTranscoding_JobType(jobType: number): void {
        console.warn('Pipeline#traceTranscoding_JobType not implemented')
    }
    traceTranscoding_Start(): void {
        console.warn('Pipeline#traceTranscoding_Start not implemented')
    }
    traceTranscoding_Complete(hresult: number): void {
        console.warn('Pipeline#traceTranscoding_Complete not implemented')
    }
    traceTranscoding_MF_DShow_Fallback(): void {
        console.warn('Pipeline#traceTranscoding_MF_DShow_Fallback not implemented')
    }
    traceTranscoding_MF_HW_SW_Fallback(): void {
        console.warn('Pipeline#traceTranscoding_MF_HW_SW_Fallback not implemented')
    }
    traceTranscoding_MF_HW_Status(hw_Status: boolean): void {
        console.warn('Pipeline#traceTranscoding_MF_HW_Status not implemented')
    }
    traceTranscoding_Crash_Status(crashCount: number, maxCrashCount: number, hw_Status: boolean, isConfirmed: boolean, hresult: number): void {
        console.warn('Pipeline#traceTranscoding_Crash_Status not implemented')
    }
    traceTranscoding_Disable_HW_Acceleration(): void {
        console.warn('Pipeline#traceTranscoding_Disable_HW_Acceleration not implemented')
    }
    traceTranscoding_Reenable_HW_Acceleration(): void {
        console.warn('Pipeline#traceTranscoding_Reenable_HW_Acceleration not implemented')
    }
    traceTranscoding_SW_Retranscode_After_Crash(): void {
        console.warn('Pipeline#traceTranscoding_SW_Retranscode_After_Crash not implemented')
    }
    tracePresenter_Downres(width: number, height: number): void {
        console.warn('Pipeline#tracePresenter_Downres not implemented')
    }
    tracePresenter_Native_Video_Size(width: number, height: number): void {
        console.warn('Pipeline#tracePresenter_Native_Video_Size not implemented')
    }
    tracePresenter_Target_Video_Size(width: number, height: number): void {
        console.warn('Pipeline#tracePresenter_Target_Video_Size not implemented')
    }
    tracePresenter_Display_Video_Size(width: number, height: number): void {
        console.warn('Pipeline#tracePresenter_Display_Video_Size not implemented')
    }
    tracePresenter_FrameTimes(frameNumber: number, timestampStream: number, timestampQPC: number, systime100ns: number, streamtime100ns: number, freqQPC: number): void {
        console.warn('Pipeline#tracePresenter_FrameTimes not implemented')
    }
    tracePresenter_FrameDropped(framesDropped: number): void {
        console.warn('Pipeline#tracePresenter_FrameDropped not implemented')
    }
    tracePresenter_Operation(op: string, lastPTS: number, splashOwnedFrameCount: number, stepCount: number, state: number, connectedState: number): void {
        console.warn('Pipeline#tracePresenter_Operation not implemented')
    }
    traceLEQ_Enabled(enabled: boolean): void {
        console.warn('Pipeline#traceLEQ_Enabled not implemented')
    }
    traceLEQ_SetFormat(format: number, channels: number, samplesPerChannel: number, action: number, hresult: number): void {
        console.warn('Pipeline#traceLEQ_SetFormat not implemented')
    }
    traceLEQ_Process_Start(): void {
        console.warn('Pipeline#traceLEQ_Process_Start not implemented')
    }
    traceLEQ_Process_Complete(passthrough: boolean, hresult: number): void {
        console.warn('Pipeline#traceLEQ_Process_Complete not implemented')
    }
    tracePlaybackInterop_PlayerStateChanged(state: number): void {
        console.warn('Pipeline#tracePlaybackInterop_PlayerStateChanged not implemented')
    }
    tracePlaybackInterop_PositionChanged(position: number, minSeekPosition: number, maxSeekPosition: number, endOfMedia: boolean, canSeek: boolean): void {
        console.warn('Pipeline#tracePlaybackInterop_PositionChanged not implemented')
    }
    tracePlaybackInterop_TransportStateChanged(state: number): void {
        console.warn('Pipeline#tracePlaybackInterop_TransportStateChanged not implemented')
    }
    tracePlaybackInterop_TrickPlayStateChanged(state: number): void {
        console.warn('Pipeline#tracePlaybackInterop_TrickPlayStateChanged not implemented')
    }
    tracePlayback_MCPlayerAdapter_CreateInstance(hresult: number): void {
        console.warn('Pipeline#tracePlayback_MCPlayerAdapter_CreateInstance not implemented')
    }
    tracePlayback_MFPlayer_CreateInstance(hresult: number): void {
        console.warn('Pipeline#tracePlayback_MFPlayer_CreateInstance not implemented')
    }
    tracePlayback_ControlInitialized(): void {
        console.warn('Pipeline#tracePlayback_ControlInitialized not implemented')
    }
    tracePlayback_SessionInitialized(): void {
        console.warn('Pipeline#tracePlayback_SessionInitialized not implemented')
    }
    tracePlayback_PlayerStateChanged(newState: string, oldState: string): void {
        console.warn('Pipeline#tracePlayback_PlayerStateChanged not implemented')
    }
    tracePlayback_TransportStateChanged(newState: string, oldState: string): void {
        console.warn('Pipeline#tracePlayback_TransportStateChanged not implemented')
    }
    tracePlayback_SetMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void {
        console.warn('Pipeline#tracePlayback_SetMedia not implemented')
    }
    tracePlayback_SetNextMedia(readyForNext: boolean, source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void {
        console.warn('Pipeline#tracePlayback_SetNextMedia not implemented')
    }
    tracePlayback_CurrentMediaLoaded(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void {
        console.warn('Pipeline#tracePlayback_CurrentMediaLoaded not implemented')
    }
    tracePlayback_NextMediaLoaded(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void {
        console.warn('Pipeline#tracePlayback_NextMediaLoaded not implemented')
    }
    tracePlayback_SwitchingToNextMedia(source: string): void {
        console.warn('Pipeline#tracePlayback_SwitchingToNextMedia not implemented')
    }
    tracePlayback_NextMediaStarted(source: string): void {
        console.warn('Pipeline#tracePlayback_NextMediaStarted not implemented')
    }
    tracePlayback_ErrorOccurred(errorCode: number, extendedCode: number, context: string): void {
        console.warn('Pipeline#tracePlayback_ErrorOccurred not implemented')
    }
    tracePlayback_EnableTimeUpdate(currentPositionMsec: number): void {
        console.warn('Pipeline#tracePlayback_EnableTimeUpdate not implemented')
    }
    tracePlayback_DisableTimeUpdate(currentPositionMsec: number): void {
        console.warn('Pipeline#tracePlayback_DisableTimeUpdate not implemented')
    }
    tracePlayback_ForceTimeUpdate(currentPositionMsec: number): void {
        console.warn('Pipeline#tracePlayback_ForceTimeUpdate not implemented')
    }
    tracePlayback_PBMSoundLevelChanged(soundLevel: string, currentTransportState: string): void {
        console.warn('Pipeline#tracePlayback_PBMSoundLevelChanged not implemented')
    }
    tracePlayback_TargetTransportStateSet(wannaBe: string, current: string): void {
        console.warn('Pipeline#tracePlayback_TargetTransportStateSet not implemented')
    }
    tracePlaylist_SetDataSourceBegin(): void {
        console.warn('Pipeline#tracePlaylist_SetDataSourceBegin not implemented')
    }
    tracePlaylist_SetDataSourceEnd(): void {
        console.warn('Pipeline#tracePlaylist_SetDataSourceEnd not implemented')
    }
    tracePlaylist_InterpretingData(): void {
        console.warn('Pipeline#tracePlaylist_InterpretingData not implemented')
    }
    tracePlaylist_Activate(index: number, startPosition: number, shuffle: boolean, repeat: boolean): void {
        console.warn('Pipeline#tracePlaylist_Activate not implemented')
    }
    tracePlaylist_SetMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void {
        console.warn('Pipeline#tracePlaylist_SetMedia not implemented')
    }
    tracePlaylist_SetNextMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void {
        console.warn('Pipeline#tracePlaylist_SetNextMedia not implemented')
    }
    tracePlaylist_Created(): void {
        console.warn('Pipeline#tracePlaylist_Created not implemented')
    }
    tracePlaylog_BookmarkLoad(positionMS: number, playFromBookmark: boolean): void {
        console.warn('Pipeline#tracePlaylog_BookmarkLoad not implemented')
    }
    tracePlaylog_BookmarkSave(positionMS: number): void {
        console.warn('Pipeline#tracePlaylog_BookmarkSave not implemented')
    }
    tracePlaylog_PlayCountLoad(playCount: number): void {
        console.warn('Pipeline#tracePlaylog_PlayCountLoad not implemented')
    }
    tracePlaylog_PlayCountSave(playCount: number): void {
        console.warn('Pipeline#tracePlaylog_PlayCountSave not implemented')
    }
    tracePlaylog_PlayedLoad(played: boolean): void {
        console.warn('Pipeline#tracePlaylog_PlayedLoad not implemented')
    }
    tracePlaylog_PlayedSave(played: boolean): void {
        console.warn('Pipeline#tracePlaylog_PlayedSave not implemented')
    }
    traceDRM_RootLicenseRefresh_Account(subscription: boolean, tunerActivated: boolean): void {
        console.warn('Pipeline#traceDRM_RootLicenseRefresh_Account not implemented')
    }
    traceDRM_RootLicenseRefresh_Details(now: string, lastRefresh: string, spanMs: number): void {
        console.warn('Pipeline#traceDRM_RootLicenseRefresh_Details not implemented')
    }
    traceDRM_RootLicenseRefresh_Invoked(): void {
        console.warn('Pipeline#traceDRM_RootLicenseRefresh_Invoked not implemented')
    }
    traceDRM_RootLicenseRefresh_Completed(status: string): void {
        console.warn('Pipeline#traceDRM_RootLicenseRefresh_Completed not implemented')
    }
    traceDRM_ReportMetering_Account(subscription: boolean, tunerActivated: boolean, meteringCertificate: string): void {
        console.warn('Pipeline#traceDRM_ReportMetering_Account not implemented')
    }
    traceDRM_ReportMetering_Invoked(): void {
        console.warn('Pipeline#traceDRM_ReportMetering_Invoked not implemented')
    }
    traceDRM_ReportMetering_Completed(status: string): void {
        console.warn('Pipeline#traceDRM_ReportMetering_Completed not implemented')
    }
    traceDRM_ReportMetering_NoDataToReport(): void {
        console.warn('Pipeline#traceDRM_ReportMetering_NoDataToReport not implemented')
    }
    traceDRM_DeleteLicense_Invoked(kid: string): void {
        console.warn('Pipeline#traceDRM_DeleteLicense_Invoked not implemented')
    }
    traceDRM_DeleteLicense_Completed(kid: string, hresult: number): void {
        console.warn('Pipeline#traceDRM_DeleteLicense_Completed not implemented')
    }
    traceClosedCaptions_RendererGetTTMLFilepath(state: string, smid: string, miid: string, lcid: number, filepath: string): void {
        console.warn('Pipeline#traceClosedCaptions_RendererGetTTMLFilepath not implemented')
    }
    traceClosedCaptions_RendererLoadTTMLFile(state: string, filepath: string): void {
        console.warn('Pipeline#traceClosedCaptions_RendererLoadTTMLFile not implemented')
    }
    traceClosedCaptions_EnterRenderingLoop(currentPosition: number, transportState: string): void {
        console.warn('Pipeline#traceClosedCaptions_EnterRenderingLoop not implemented')
    }
    traceClosedCaptions_ExitRenderingLoop(currentPosition: number, transportState: string, closedCaptionsOn: boolean): void {
        console.warn('Pipeline#traceClosedCaptions_ExitRenderingLoop not implemented')
    }
    traceClosedCaptions_On(enabled: boolean): void {
        console.warn('Pipeline#traceClosedCaptions_On not implemented')
    }
    traceClosedCaptions_DroppedFrame(generatedAt: number, validUntil: number, currentPosition: number): void {
        console.warn('Pipeline#traceClosedCaptions_DroppedFrame not implemented')
    }
    traceFastStartMediaSource_Created(): void {
        console.warn('Pipeline#traceFastStartMediaSource_Created not implemented')
    }
    traceFastStartMediaSource_ReceivedUrl(info: string): void {
        console.warn('Pipeline#traceFastStartMediaSource_ReceivedUrl not implemented')
    }
    traceFastStartMediaSource_PlaybackStart(): void {
        console.warn('Pipeline#traceFastStartMediaSource_PlaybackStart not implemented')
    }
    tracePlayback_WPP(info: string): void {
        console.warn('Pipeline#tracePlayback_WPP not implemented')
    }
}
