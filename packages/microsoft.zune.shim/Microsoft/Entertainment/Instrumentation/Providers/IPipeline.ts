// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------


export interface IPipeline {
    isClosedCaptions_DroppedFrameEnabled: boolean;
    isClosedCaptions_EnterRenderingLoopEnabled: boolean;
    isClosedCaptions_ExitRenderingLoopEnabled: boolean;
    isClosedCaptions_OnEnabled: boolean;
    isClosedCaptions_RendererGetTTMLFilepathEnabled: boolean;
    isClosedCaptions_RendererLoadTTMLFileEnabled: boolean;
    isDRM_DeleteLicense_CompletedEnabled: boolean;
    isDRM_DeleteLicense_InvokedEnabled: boolean;
    isDRM_ReportMetering_AccountEnabled: boolean;
    isDRM_ReportMetering_CompletedEnabled: boolean;
    isDRM_ReportMetering_InvokedEnabled: boolean;
    isDRM_ReportMetering_NoDataToReportEnabled: boolean;
    isDRM_RootLicenseRefresh_AccountEnabled: boolean;
    isDRM_RootLicenseRefresh_CompletedEnabled: boolean;
    isDRM_RootLicenseRefresh_DetailsEnabled: boolean;
    isDRM_RootLicenseRefresh_InvokedEnabled: boolean;
    isFastStartMediaSource_CreatedEnabled: boolean;
    isFastStartMediaSource_PlaybackStartEnabled: boolean;
    isFastStartMediaSource_ReceivedUrlEnabled: boolean;
    isLEQ_EnabledEnabled: boolean;
    isLEQ_Process_CompleteEnabled: boolean;
    isLEQ_Process_StartEnabled: boolean;
    isLEQ_SetFormatEnabled: boolean;
    isMBR_BufferStatusEnabled: boolean;
    isMBR_DMO_ProcessInput_ReturnEnabled: boolean;
    isMBR_DMO_ProcessOutput_ReturnEnabled: boolean;
    isMBR_DropFrameEnabled: boolean;
    isMBR_EOSEnabled: boolean;
    isMBR_GotNewSampleEnabled: boolean;
    isMBR_ManifestStreamEnabled: boolean;
    isMBR_NextChunkEnabled: boolean;
    isMBR_Pause_EnterEnabled: boolean;
    isMBR_Pause_ExitEnabled: boolean;
    isMBR_PinBeginFlush_EnterEnabled: boolean;
    isMBR_PinBeginFlush_ExitEnabled: boolean;
    isMBR_PinDecompress_BeginEnabled: boolean;
    isMBR_PinDecompress_CallEnabled: boolean;
    isMBR_PinDecompress_EndEnabled: boolean;
    isMBR_PinDecompress_ReturnEnabled: boolean;
    isMBR_PinEndFlush_EnterEnabled: boolean;
    isMBR_PinEndFlush_ExitEnabled: boolean;
    isMBR_PinPumpState_ChangedEnabled: boolean;
    isMBR_Preroll_ExitEnabled: boolean;
    isMBR_Preroll_Forced_ExitEnabled: boolean;
    isMBR_Run_EnterEnabled: boolean;
    isMBR_Run_ExitEnabled: boolean;
    isMBR_Run_LockEnabled: boolean;
    isMBR_SamplePushedDownStream_BeginEnabled: boolean;
    isMBR_SamplePushedDownStream_EndEnabled: boolean;
    isMBR_SamplePushedToPinPumpEnabled: boolean;
    isMBR_Seek_EnterEnabled: boolean;
    isMBR_Seek_ExitEnabled: boolean;
    isMBR_SourceState_ChangedEnabled: boolean;
    isMBR_Stop_EnterEnabled: boolean;
    isMBR_Stop_ExitEnabled: boolean;
    isMBR_Transcrypt_BeginEnabled: boolean;
    isMBR_Transcrypt_EndEnabled: boolean;
    isPlaybackInterop_PlayerStateChangedEnabled: boolean;
    isPlaybackInterop_PositionChangedEnabled: boolean;
    isPlaybackInterop_TransportStateChangedEnabled: boolean;
    isPlaybackInterop_TrickPlayStateChangedEnabled: boolean;
    isPlayback_ControlInitializedEnabled: boolean;
    isPlayback_CurrentMediaLoadedEnabled: boolean;
    isPlayback_DisableTimeUpdateEnabled: boolean;
    isPlayback_EnableTimeUpdateEnabled: boolean;
    isPlayback_ErrorOccurredEnabled: boolean;
    isPlayback_ForceTimeUpdateEnabled: boolean;
    isPlayback_MCPlayerAdapter_CreateInstanceEnabled: boolean;
    isPlayback_MFPlayer_CreateInstanceEnabled: boolean;
    isPlayback_NextMediaLoadedEnabled: boolean;
    isPlayback_NextMediaStartedEnabled: boolean;
    isPlayback_PBMSoundLevelChangedEnabled: boolean;
    isPlayback_PlayerStateChangedEnabled: boolean;
    isPlayback_SessionInitializedEnabled: boolean;
    isPlayback_SetMediaEnabled: boolean;
    isPlayback_SetNextMediaEnabled: boolean;
    isPlayback_SwitchingToNextMediaEnabled: boolean;
    isPlayback_TargetTransportStateSetEnabled: boolean;
    isPlayback_TransportStateChangedEnabled: boolean;
    isPlayback_WPPEnabled: boolean;
    isPlaylist_ActivateEnabled: boolean;
    isPlaylist_CreatedEnabled: boolean;
    isPlaylist_InterpretingDataEnabled: boolean;
    isPlaylist_SetDataSourceBeginEnabled: boolean;
    isPlaylist_SetDataSourceEndEnabled: boolean;
    isPlaylist_SetMediaEnabled: boolean;
    isPlaylist_SetNextMediaEnabled: boolean;
    isPlaylog_BookmarkLoadEnabled: boolean;
    isPlaylog_BookmarkSaveEnabled: boolean;
    isPlaylog_PlayCountLoadEnabled: boolean;
    isPlaylog_PlayCountSaveEnabled: boolean;
    isPlaylog_PlayedLoadEnabled: boolean;
    isPlaylog_PlayedSaveEnabled: boolean;
    isPresenter_Display_Video_SizeEnabled: boolean;
    isPresenter_DownresEnabled: boolean;
    isPresenter_FrameDroppedEnabled: boolean;
    isPresenter_FrameTimesEnabled: boolean;
    isPresenter_Native_Video_SizeEnabled: boolean;
    isPresenter_OperationEnabled: boolean;
    isPresenter_Target_Video_SizeEnabled: boolean;
    isTranscoding_CompleteEnabled: boolean;
    isTranscoding_Crash_StatusEnabled: boolean;
    isTranscoding_Disable_HW_AccelerationEnabled: boolean;
    isTranscoding_JobTypeEnabled: boolean;
    isTranscoding_MF_DShow_FallbackEnabled: boolean;
    isTranscoding_MF_HW_SW_FallbackEnabled: boolean;
    isTranscoding_MF_HW_StatusEnabled: boolean;
    isTranscoding_Reenable_HW_AccelerationEnabled: boolean;
    isTranscoding_SW_Retranscode_After_CrashEnabled: boolean;
    isTranscoding_StartEnabled: boolean;
    traceMBR_Pause_Enter(currentStreamTimeHns: number): void;
    traceMBR_Pause_Exit(currentStreamTimeHns: number, hresult: number): void;
    traceMBR_Run_Enter(startTimeHns: number, currentStreamTimeHns: number): void;
    traceMBR_Run_Lock(currentStreamTimeHns: number): void;
    traceMBR_Run_Exit(currentStreamTimeHns: number, hresult: number): void;
    traceMBR_Seek_Enter(possitionHns: number, currentStreamTimeHns: number): void;
    traceMBR_Seek_Exit(currentStreamTimeHns: number, hresult: number): void;
    traceMBR_Stop_Enter(currentStreamTimeHns: number): void;
    traceMBR_Stop_Exit(currentStreamTimeHns: number, hresult: number): void;
    traceMBR_SourceState_Changed(filterState: number, oldState: number, newState: number): void;
    traceMBR_PinPumpState_Changed(streamType: number, oldState: number, newState: number): void;
    traceMBR_EOS(streamType: number, currentStreamTimeHns: number): void;
    traceMBR_Preroll_Exit(streamType: number, initialAudioTimeHns: number, initialVideoTimeHns: number, newStartBaseTimeHns: number): void;
    traceMBR_Preroll_Forced_Exit(streamType: number, initialAudioTimeHns: number, initialVideoTimeHns: number, newStartBaseTimeHns: number): void;
    traceMBR_PinBeginFlush_Enter(streamType: number, currentStreamTimeHns: number): void;
    traceMBR_PinBeginFlush_Exit(streamType: number, currentStreamTimeHns: number, hresult: number): void;
    traceMBR_PinEndFlush_Enter(streamType: number, currentStreamTimeHns: number): void;
    traceMBR_PinEndFlush_Exit(streamType: number, currentStreamTimeHns: number, hresult: number): void;
    traceMBR_GotNewSample(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
    traceMBR_SamplePushedToPinPump(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
    traceMBR_SamplePushedDownStream_Begin(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
    traceMBR_SamplePushedDownStream_End(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
    traceMBR_BufferStatus(currentStreamTimeHns: number, bufferSizeMs: number): void;
    traceMBR_DropFrame(totalFramesDropped: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
    traceMBR_PinDecompress_Begin(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
    traceMBR_PinDecompress_End(streamType: number, frameSizeInBytes: number, durationHns: number): void;
    traceMBR_PinDecompress_Call(streamType: number): void;
    traceMBR_PinDecompress_Return(streamType: number): void;
    traceMBR_Transcrypt_Begin(streamType: number): void;
    traceMBR_Transcrypt_End(streamType: number): void;
    traceMBR_DMO_ProcessInput_Return(streamType: number, sampleTimeHns: number, hresult: number): void;
    traceMBR_DMO_ProcessOutput_Return(streamType: number, hresult: number, durationHns: number): void;
    traceMBR_NextChunk(streamType: number, chunkIndex: number, bitrateBps: number, sampleTimeHns: number, durationHns: number, sizeInBytes: number, quality: number, targetQuality: number, totalBandwidthBps: number, targetBandwidthBps: number, bufferSizeMs: number): void;
    traceMBR_ManifestStream(streamType: number, id: number, bitrate: number, width: number, height: number, channels: number): void;
    traceTranscoding_JobType(jobType: number): void;
    traceTranscoding_Start(): void;
    traceTranscoding_Complete(hresult: number): void;
    traceTranscoding_MF_DShow_Fallback(): void;
    traceTranscoding_MF_HW_SW_Fallback(): void;
    traceTranscoding_MF_HW_Status(hw_Status: boolean): void;
    traceTranscoding_Crash_Status(crashCount: number, maxCrashCount: number, hw_Status: boolean, isConfirmed: boolean, hresult: number): void;
    traceTranscoding_Disable_HW_Acceleration(): void;
    traceTranscoding_Reenable_HW_Acceleration(): void;
    traceTranscoding_SW_Retranscode_After_Crash(): void;
    tracePresenter_Downres(width: number, height: number): void;
    tracePresenter_Native_Video_Size(width: number, height: number): void;
    tracePresenter_Target_Video_Size(width: number, height: number): void;
    tracePresenter_Display_Video_Size(width: number, height: number): void;
    tracePresenter_FrameTimes(frameNumber: number, timestampStream: number, timestampQPC: number, systime100ns: number, streamtime100ns: number, freqQPC: number): void;
    tracePresenter_FrameDropped(framesDropped: number): void;
    tracePresenter_Operation(op: string, lastPTS: number, splashOwnedFrameCount: number, stepCount: number, state: number, connectedState: number): void;
    traceLEQ_Enabled(enabled: boolean): void;
    traceLEQ_SetFormat(format: number, channels: number, samplesPerChannel: number, action: number, hresult: number): void;
    traceLEQ_Process_Start(): void;
    traceLEQ_Process_Complete(passthrough: boolean, hresult: number): void;
    tracePlaybackInterop_PlayerStateChanged(state: number): void;
    tracePlaybackInterop_PositionChanged(position: number, minSeekPosition: number, maxSeekPosition: number, endOfMedia: boolean, canSeek: boolean): void;
    tracePlaybackInterop_TransportStateChanged(state: number): void;
    tracePlaybackInterop_TrickPlayStateChanged(state: number): void;
    tracePlayback_MCPlayerAdapter_CreateInstance(hresult: number): void;
    tracePlayback_MFPlayer_CreateInstance(hresult: number): void;
    tracePlayback_ControlInitialized(): void;
    tracePlayback_SessionInitialized(): void;
    tracePlayback_PlayerStateChanged(newState: string, oldState: string): void;
    tracePlayback_TransportStateChanged(newState: string, oldState: string): void;
    tracePlayback_SetMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void;
    tracePlayback_SetNextMedia(readyForNext: boolean, source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void;
    tracePlayback_CurrentMediaLoaded(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void;
    tracePlayback_NextMediaLoaded(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void;
    tracePlayback_SwitchingToNextMedia(source: string): void;
    tracePlayback_NextMediaStarted(source: string): void;
    tracePlayback_ErrorOccurred(errorCode: number, extendedCode: number, context: string): void;
    tracePlayback_EnableTimeUpdate(currentPositionMsec: number): void;
    tracePlayback_DisableTimeUpdate(currentPositionMsec: number): void;
    tracePlayback_ForceTimeUpdate(currentPositionMsec: number): void;
    tracePlayback_PBMSoundLevelChanged(soundLevel: string, currentTransportState: string): void;
    tracePlayback_TargetTransportStateSet(wannaBe: string, current: string): void;
    tracePlaylist_SetDataSourceBegin(): void;
    tracePlaylist_SetDataSourceEnd(): void;
    tracePlaylist_InterpretingData(): void;
    tracePlaylist_Activate(index: number, startPosition: number, shuffle: boolean, repeat: boolean): void;
    tracePlaylist_SetMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void;
    tracePlaylist_SetNextMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void;
    tracePlaylist_Created(): void;
    tracePlaylog_BookmarkLoad(positionMS: number, playFromBookmark: boolean): void;
    tracePlaylog_BookmarkSave(positionMS: number): void;
    tracePlaylog_PlayCountLoad(playCount: number): void;
    tracePlaylog_PlayCountSave(playCount: number): void;
    tracePlaylog_PlayedLoad(played: boolean): void;
    tracePlaylog_PlayedSave(played: boolean): void;
    traceDRM_RootLicenseRefresh_Account(subscription: boolean, tunerActivated: boolean): void;
    traceDRM_RootLicenseRefresh_Details(now: string, lastRefresh: string, spanMs: number): void;
    traceDRM_RootLicenseRefresh_Invoked(): void;
    traceDRM_RootLicenseRefresh_Completed(status: string): void;
    traceDRM_ReportMetering_Account(subscription: boolean, tunerActivated: boolean, meteringCertificate: string): void;
    traceDRM_ReportMetering_Invoked(): void;
    traceDRM_ReportMetering_Completed(status: string): void;
    traceDRM_ReportMetering_NoDataToReport(): void;
    traceDRM_DeleteLicense_Invoked(kid: string): void;
    traceDRM_DeleteLicense_Completed(kid: string, hresult: number): void;
    traceClosedCaptions_RendererGetTTMLFilepath(state: string, smid: string, miid: string, lcid: number, filepath: string): void;
    traceClosedCaptions_RendererLoadTTMLFile(state: string, filepath: string): void;
    traceClosedCaptions_EnterRenderingLoop(currentPosition: number, transportState: string): void;
    traceClosedCaptions_ExitRenderingLoop(currentPosition: number, transportState: string, closedCaptionsOn: boolean): void;
    traceClosedCaptions_On(enabled: boolean): void;
    traceClosedCaptions_DroppedFrame(generatedAt: number, validUntil: number, currentPosition: number): void;
    traceFastStartMediaSource_Created(): void;
    traceFastStartMediaSource_ReceivedUrl(info: string): void;
    traceFastStartMediaSource_PlaybackStart(): void;
    tracePlayback_WPP(info: string): void;
}
