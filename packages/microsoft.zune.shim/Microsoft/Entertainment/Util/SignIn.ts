// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:03 2021
// </auto-generated>
// --------------------------------------------------

import { IHeader } from "./IHeader";
import { IIdentityInfo } from "./IIdentityInfo";
import { IProvisioningResult } from "./IProvisioningResult";
import { ISignIn } from "./ISignIn";
import { ITicket } from "./ITicket";
import { IXToken } from "./IXToken";
import { SignInChangedEventArgs } from "./SignInChangedEventArgs";
import { SignInCompletedEventArgs } from "./SignInCompletedEventArgs";
import { SignInPromptType } from "./SignInPromptType";
import { SignOutCompletedEventArgs } from "./SignOutCompletedEventArgs";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { AsyncOperation, IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "winrt/Windows/Foundation/TypedEventHandler`2";
import { Ticket } from "./Ticket";
import { uuidv4 } from "winrt/Windows/Foundation/Interop/Utils";
import { UserIdentity } from "winrt/Windows/Security/Authentication/OnlineId/UserIdentity";
import { OnlineIdAuthenticator } from "winrt/Windows/Security/Authentication/OnlineId/OnlineIdAuthenticator";
import { OnlineIdServiceTicketRequest } from "winrt/Windows/Security/Authentication/OnlineId/OnlineIdServiceTicketRequest";
import { XToken } from "./XToken";
import { machineIdSync } from "node-machine-id";
import { getXUID } from "../../../global";

@GenerateShim('Microsoft.Entertainment.Util.SignIn')
export class SignIn implements ISignIn, IIdentityInfo {
    startTime: Date = null;
    isSignInSupported: boolean = null;
    canSignOut: boolean = null;
    cid: string = null;
    firstName: string = null;
    id: string = null;
    lastName: string = null;
    membershipLevel: string = null;
    signInName: string = null;
    subscriptionOfferID: string = getXUID();
    userXuid: string = null;
    explicitPrivilege: boolean = true;
    gamerTag: string = null;
    isSubscription: boolean = null;
    isTunerActivatable: boolean = null;
    isTunerActivated: boolean = null;
    locale: string = null;
    meteringCertificate: string = null;
    name: string = null;
    parentallyControlled: boolean = null;
    usageCollectionAllowed: boolean = null;
    xuid: string = null;

    constructor() {
        this.id = uuidv4();
        this.xuid = getXUID();
        this.userXuid = getXUID();
    }

    signInUser(ticket: string): IAsyncOperation<ISignIn> {
        return AsyncOperation.fromT((async () => {
            let auth = new OnlineIdAuthenticator();
            let ticket = await AsyncOperation.to(auth.authenticateUserAsync(null))

            this.firstName = ticket.firstName;
            this.lastName = ticket.lastName;
            this.name = `${ticket.firstName} ${ticket.lastName}`;
            this.membershipLevel = "Gold";
            this.isSubscription = true;
            this.gamerTag = "WamWooWam";
            this.signInName = "WamWooWam";
            this.locale = "EN";
            this.cid = getXUID();
            this.canSignOut = false;
            this.isTunerActivated = false;
            this.isTunerActivatable = false;

            return this;
        })());
    }
    authenticateUser(ticket: string): IAsyncOperation<ISignIn> {
        throw new Error('SignIn#authenticateUser not implemented')
    }
    signOut(persistUserDB: boolean): IAsyncOperation<ISignIn> {
        throw new Error('SignIn#signOut not implemented')
    }
    forgetUserInformation(): IAsyncOperation<ISignIn> {
        throw new Error('SignIn#forgetUserInformation not implemented')
    }
    getTicket(passportPolicy: string, targetService: string, ignoreSignInState: boolean, promptType: SignInPromptType): IAsyncOperation<ITicket> {
        return AsyncOperation.from(() => new Promise((res) => {
            let ticket = new Ticket()
            ticket.passportTicket = uuidv4();
            res(ticket);
        }))
    }
    getDeviceTicket(passportPolicy: string, targetService: string): IAsyncOperation<ITicket> {
        throw new Error('SignIn#getDeviceTicket not implemented')
    }
    getAuthHeader(): IAsyncOperation<IHeader> {
        throw new Error('SignIn#getAuthHeader not implemented')
    }
    getAuthHeaderForEndpoint(iEndpointId: number, ignoreSignInState: boolean): IAsyncOperation<IHeader> {
        throw new Error('SignIn#getAuthHeaderForEndpoint not implemented')
    }
    getXTokenAsyncOp(iEndpointId: number): IAsyncOperation<IXToken> {
        // throw new Error('SignIn#getXTokenAsyncOp not implemented')
        return AsyncOperation.from(async () => {
            let token = new XToken();
            token.signature = "sig";
            token.token = "token";
            return token;
        })
    }
    getXTokenByRelyingPartyAsyncOp(relyingParty: string): IAsyncOperation<IXToken> {
        throw new Error('SignIn#getXTokenByRelyingPartyAsyncOp not implemented')
    }
    isSignedIn(): boolean {
        return true;
    }
    provisionUserAccount(): IAsyncOperation<IProvisioningResult> {
        throw new Error('SignIn#provisionUserAccount not implemented')
    }
    updatePartnerToken(partnerToken: string): IAsyncAction {
        throw new Error('SignIn#updatePartnerToken not implemented')
    }
    clearTokenMap(): void {
        console.warn('SignIn#clearTokenMap not implemented')
    }
    setUserProperties(cid: string, signInName: string, firstName: string, lastName: string, id: string): void {
        console.warn('SignIn#setUserProperties not implemented')
    }
    getV3TokenFromMap(endpoint: string): { dateExpires: Date, token: string } {
        throw new Error('SignIn#getV3TokenFromMap not implemented')
    }
    removeV3TokenEntry(endpoint: string): void {
        console.warn('SignIn#removeV3TokenEntry not implemented')
    }
    setV3Token(endpoint: string, token: string, dateExpires: Date): void {
        console.warn('SignIn#setV3Token not implemented')
    }
    getTokenFromMap(iEndpointId: number): string {
        throw new Error('SignIn#getTokenFromMap not implemented')
    }
    setToken(iEndpointId: number, token: string): void {
        console.warn('SignIn#setToken not implemented')
    }
    setSignInState(pIdentityInfo: any): void {
        console.warn('SignIn#setSignInState not implemented')
    }
    raiseSignInCompleted(signInResult: number): void {
        console.warn('SignIn#raiseSignInCompleted not implemented')
    }
    raiseSignOutCompleted(signOutResult: number): void {
        console.warn('SignIn#raiseSignOutCompleted not implemented')
    }
    clearSignInState(): void {
        console.warn('SignIn#clearSignInState not implemented')
    }

    private __signInChanged: Set<TypedEventHandler<ISignIn, SignInChangedEventArgs>> = new Set();
    @Enumerable(true)
    set onsigninchanged(handler: TypedEventHandler<ISignIn, SignInChangedEventArgs>) {
        this.__signInChanged.add(handler);
    }

    private __signInCompleted: Set<TypedEventHandler<ISignIn, SignInCompletedEventArgs>> = new Set();
    @Enumerable(true)
    set onsignincompleted(handler: TypedEventHandler<ISignIn, SignInCompletedEventArgs>) {
        this.__signInCompleted.add(handler);
    }

    private __signInStarted: Set<TypedEventHandler<ISignIn, any>> = new Set();
    @Enumerable(true)
    set onsigninstarted(handler: TypedEventHandler<ISignIn, any>) {
        this.__signInStarted.add(handler);
    }

    private __signOutCompleted: Set<TypedEventHandler<ISignIn, SignOutCompletedEventArgs>> = new Set();
    @Enumerable(true)
    set onsignoutcompleted(handler: TypedEventHandler<ISignIn, SignOutCompletedEventArgs>) {
        this.__signOutCompleted.add(handler);
    }

    private __signOutStarted: Set<TypedEventHandler<ISignIn, any>> = new Set();
    @Enumerable(true)
    set onsignoutstarted(handler: TypedEventHandler<ISignIn, any>) {
        this.__signOutStarted.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'signinchanged':
                this.__signInChanged.add(handler);
                break;
            case 'signincompleted':
                this.__signInCompleted.add(handler);
                break;
            case 'signinstarted':
                this.__signInStarted.add(handler);
                break;
            case 'signoutcompleted':
                this.__signOutCompleted.add(handler);
                break;
            case 'signoutstarted':
                this.__signOutStarted.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'signinchanged':
                this.__signInChanged.delete(handler);
                break;
            case 'signincompleted':
                this.__signInCompleted.delete(handler);
                break;
            case 'signinstarted':
                this.__signInStarted.delete(handler);
                break;
            case 'signoutcompleted':
                this.__signOutCompleted.delete(handler);
                break;
            case 'signoutstarted':
                this.__signOutStarted.delete(handler);
                break;
        }
    }
}
