// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:03 2021
// </auto-generated>
// --------------------------------------------------

import { IBlockSyncOperation } from "./IBlockSyncOperation";
import { ISyncManager } from "./ISyncManager";
import { RequestSyncOption } from "./RequestSyncOption";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { EventHandler } from "winrt/Windows/Foundation/EventHandler`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { MediaStore } from "../Platform/MediaStore";
import { CollectionBuildingManager } from "../Platform/CollectionBuildingManager";
import { InvokeEvent } from "winrt/Windows/Foundation/Interop/InvokeEvent";
import { CollectionBuildingSource } from "../Platform/CollectionBuildingSource";
import { Indexer } from "../Database/Indexer";

@GenerateShim('Microsoft.Entertainment.Sync.SyncManager')
export class SyncManager implements ISyncManager { 
    requestSync(requestSyncOption: RequestSyncOption): void {
        console.warn('SyncManager#requestSync not implemented')
        Indexer.indexAsync();
    }
    
    syncAsync(requestSyncOption: RequestSyncOption): IAsyncAction {
        throw new Error('SyncManager#syncAsync not implemented')
    }
    blockSyncAsync(): IAsyncOperation<IBlockSyncOperation> {
        throw new Error('SyncManager#blockSyncAsync not implemented')
    }
    requestOfflineStoreUpdate(): void {
        console.warn('SyncManager#requestOfflineStoreUpdate not implemented')
    }

    private __collectionSyncEnd: Set<EventHandler<IVectorView<number>>> = new Set();
    @Enumerable(true)
    set oncollectionsyncend(handler: EventHandler<IVectorView<number>>) {
        this.__collectionSyncEnd.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'collectionsyncend':
                this.__collectionSyncEnd.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'collectionsyncend':
                this.__collectionSyncEnd.delete(handler);
                break;
        }
    }
}
