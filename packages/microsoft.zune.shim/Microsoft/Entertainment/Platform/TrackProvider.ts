// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { GetBookmarkReturnValue } from "./GetBookmarkReturnValue";
import { GetFileCountsReturnValue } from "./GetFileCountsReturnValue";
import { GetLibraryIdFromMediaIdReturnValue } from "./GetLibraryIdFromMediaIdReturnValue";
import { GetPlaycountReturnValue } from "./GetPlaycountReturnValue";
import { GetPlayedStatusReturnValue } from "./GetPlayedStatusReturnValue";
import { IAlbumMetadata } from "./IAlbumMetadata";
import { IPlayableMediaData } from "./IPlayableMediaData";
import { ITrackProvider } from "./ITrackProvider";
import { MatchedCountsReturnValue } from "./MatchedCountsReturnValue";
import { PreferredFileUrlReturnValue } from "./PreferredFileUrlReturnValue";
import { RequestType } from "./RequestType";
import { AsyncAction, IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { AsyncOperation, IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { MediaStore } from "./MediaStore";
import { dbPromise, DBTrack } from "../Database/Utils";
import { FileUrlType } from "./FileUrlType";
import { FileProtectionStatus } from "winrt/Windows/Security/EnterpriseData/FileProtectionStatus";
import { ProtectionState } from "./ProtectionState";

@GenerateShim('Microsoft.Entertainment.Platform.TrackProvider')
export class TrackProvider implements ITrackProvider {
    getBookmarkAsync(libraryId: number): IAsyncOperation<GetBookmarkReturnValue> {
        return AsyncOperation.from(async () => {
            return { value: 0 }
        })
    }
    setBookmarkAsync(libraryId: number, value: number): IAsyncAction {
        //throw new Error('TrackProvider#setBookmarkAsync not implemented')
        return AsyncAction.default();
    }
    getPlaycountAsync(libraryId: number): IAsyncOperation<GetPlaycountReturnValue> {
        return AsyncOperation.from(async () => {
            return { value: 0 }
        })
    }
    setPlaycountAsync(libraryId: number, value: number): IAsyncAction {
        //throw new Error('TrackProvider#setPlaycountAsync not implemented')
        return AsyncAction.default();
    }
    getPlayedStatusAsync(libraryId: number): IAsyncOperation<GetPlayedStatusReturnValue> {
        return AsyncOperation.from(async () => {
            return { value: 0 }
        })
    }
    setPlayedStatusAsync(libraryId: number, value: number): IAsyncAction {
        //throw new Error('TrackProvider#setPlayedStatusAsync not implemented')
        return AsyncAction.default();
    }
    getPreferredFileUrlAsync(libraryId: number): IAsyncOperation<PreferredFileUrlReturnValue> {
        // throw new Error('TrackProvider#getPreferredFileUrlAsync not implemented')        
        return AsyncOperation.from(async () => {
            let instance = MediaStore.instance;
            await AsyncAction.to(instance.ensureDatabaseOpenedAsync());

            let db = instance.database;
            let transact = db.transaction('track', 'readonly');
            let trackStore = transact.objectStore('track');
            let track = await dbPromise(trackStore.get(libraryId)) as DBTrack;

            return { url: track.filePath, type: FileUrlType.localFileUrl, protection: ProtectionState.unprotected, mediaInstanceId: "00000000-0000-0000-0000-000000000000" };
        })
    }
    getPlayabilityByLibraryIdAsync(nLibraryId: number): IAsyncOperation<IPlayableMediaData> {
        // throw new Error('TrackProvider#getPlayabilityByLibraryIdAsync not implemented')
        return AsyncOperation.from(async () => {
            return { cloudStreamable: false, isDownloading: false, locallyPlayable: true, libraryId: 0, mediaId: "?", mediaType: 0 };
        })
    }
    getFileCountsByLibraryIdAsync(libraryId: number): IAsyncOperation<GetFileCountsReturnValue> {
        throw new Error('TrackProvider#getFileCountsByLibraryIdAsync not implemented')
    }
    getFileCountsByMediaIdAsync(mediaId: string): IAsyncOperation<GetFileCountsReturnValue> {
        throw new Error('TrackProvider#getFileCountsByMediaIdAsync not implemented')
    }
    getLibraryIdFromMediaIdAsync(mediaId: string): IAsyncOperation<GetLibraryIdFromMediaIdReturnValue> {
        return AsyncOperation.from(async () => ({ libraryId: -1 }));
    }
    getLibraryTrackInfoAsync(guidServiceMediaId: string): IAsyncOperation<string> {
        // throw new Error('TrackProvider#getLibraryTrackInfoAsync not implemented')
        return AsyncOperation.from(async () => "{}");
    }
    getMatchedCountsAsync(): IAsyncOperation<MatchedCountsReturnValue> {
        throw new Error('TrackProvider#getMatchedCountsAsync not implemented')
    }
    updateTracksMetadataAsync(pIAlbumMetadata: IAlbumMetadata, requestType: RequestType): IAsyncAction {
        throw new Error('TrackProvider#updateTracksMetadataAsync not implemented')
    }
    setBlockMusicVideoAsync(libraryId: number, fBlockMusicVideo: boolean): IAsyncAction {
        throw new Error('TrackProvider#setBlockMusicVideoAsync not implemented')
    }
    uploadAsync(libraryId: number): IAsyncAction {
        throw new Error('TrackProvider#uploadAsync not implemented')
    }
}
