// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { CreatePlaylistReturnValue } from "./CreatePlaylistReturnValue";
import { GetPlaylistCountsReturnValue } from "./GetPlaylistCountsReturnValue";
import { HasPlaylistBeenSyncedReturnValue } from "./HasPlaylistBeenSyncedReturnValue";
import { IPlayableMediaData } from "./IPlayableMediaData";
import { ImportPlaylistCountsReturnValue } from "./ImportPlaylistCountsReturnValue";
import { MediaAvailability } from "./MediaAvailability";
import { PlaylistType } from "./PlaylistType";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";

export interface IPlaylistProvider {
    createPlaylistAsync(type: PlaylistType, title: string, overwriteExisting: boolean): IAsyncOperation<CreatePlaylistReturnValue>;
    appendPlaylistItemsAsync(playlistId: number, libraryIds: IVectorView<number>, serviceMediaIds: IVectorView<string>, libraryTypeIds: IVectorView<number>, availabilityFilter: MediaAvailability): IAsyncAction;
    appendPlaylistItemsAsync2(playlistId: number, libraryIds: IVectorView<number>, serviceMediaIds: IVectorView<string>, libraryTypeIds: IVectorView<number>, availabilityFilter: MediaAvailability, acquisitionContextTypes: IVectorView<number>, acquisitionContexts: IVectorView<number>, acquisitionContextIds: IVectorView<string>, acquisitionAdditionalContexts: IVectorView<string>): IAsyncAction;
    appendMarketplaceTrackPlaylistItemAsync(playlistId: number, libraryIds: IVectorView<number>, albumTitles: IVectorView<string>, albumArtists: IVectorView<string>, trackTitles: IVectorView<string>, trackArtists: IVectorView<string>, genres: IVectorView<string>, durations: IVectorView<number>, albumArtistSmids: IVectorView<string>, trackArtistSmids: IVectorView<string>, serviceMediaIds: IVectorView<string>, libraryTypeId: number): IAsyncAction;
    appendMarketplaceTrackPlaylistItemAsync2(playlistId: number, libraryIds: IVectorView<number>, albumTitles: IVectorView<string>, albumArtists: IVectorView<string>, trackTitles: IVectorView<string>, trackArtists: IVectorView<string>, genres: IVectorView<string>, durations: IVectorView<number>, albumArtistSmids: IVectorView<string>, trackArtistSmids: IVectorView<string>, serviceMediaIds: IVectorView<string>, libraryTypeId: number, acquisitionContextTypes: IVectorView<number>, acquisitionContexts: IVectorView<number>, acquisitionContextIds: IVectorView<string>, acquisitionAdditionalContexts: IVectorView<string>): IAsyncAction;
    appendMarketplaceVideoPlaylistItemAsync(playlistId: number, libraryIds: IVectorView<number>, titles: IVectorView<string>, imageUrls: IVectorView<string>, genres: IVectorView<string>, durations: IVectorView<number>, serviceMediaIds: IVectorView<string>, libraryTypeId: number): IAsyncAction;
    appendMarketplaceVideoPlaylistItemAsync2(playlistId: number, libraryIds: IVectorView<number>, titles: IVectorView<string>, imageUrls: IVectorView<string>, genres: IVectorView<string>, durations: IVectorView<number>, serviceMediaIds: IVectorView<string>, libraryTypeId: number, acquisitionContextTypes: IVectorView<number>, acquisitionContexts: IVectorView<number>, acquisitionContextIds: IVectorView<string>, acquisitionAdditionalContexts: IVectorView<string>): IAsyncAction;
    deletePlaylistAsync(piPlaylistIds: IVectorView<number>, availabilityFilter: MediaAvailability): IAsyncAction;
    renamePlaylistAsync(nPlaylistId: number, bstrNewTitle: string): IAsyncAction;
    setPlayedStatusAsync(libraryId: number, value: number): IAsyncAction;
    removePlaylistItemsAsync(nPlaylistId: number, piIndexes: IVectorView<number>, availabilityFilter: MediaAvailability): IAsyncAction;
    reorderPlaylistItemsAsync(nPlaylistId: number, piIndexes: IVectorView<number>, nIndexToInsertBefore: number, availabilityFilter: MediaAvailability): IAsyncAction;
    savePlaylistAsync(nPlaylistId: number, fullpathFilename: string): IAsyncAction;
    importPlaylistsAsync(): IAsyncOperation<ImportPlaylistCountsReturnValue>;
    resumeImportPlaylistsAsync(): IAsyncOperation<ImportPlaylistCountsReturnValue>;
    getPlayabilityByLibraryIdAsync(nLibraryId: number, availabilityFilter: MediaAvailability): IAsyncOperation<IVectorView<IPlayableMediaData>>;
    setPlaylistDateEditedToNowAsync(nPlaylistId: number): IAsyncAction;
    setPlaylistKeepOfflineAsync(nPlaylistId: number, fKeepOffline: boolean): IAsyncAction;
    savePlaylistRadioSeedAsync(nPlaylistId: number, smartDjSeed: string): IAsyncAction;
    savePlaylistCurrentItemIndexAsync(nPlaylistId: number, currentItemIndex: number): IAsyncAction;
    saveNowPlayingPlaylistAsync(playlistName: string): IAsyncAction;
    getPlaylistItemCountsAsync(nPlaylistId: number): IAsyncOperation<GetPlaylistCountsReturnValue>;
    hasPlaylistBeenSyncedAsync(nPlaylistId: number): IAsyncOperation<HasPlaylistBeenSyncedReturnValue>;
}
