// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:03 2021
// </auto-generated>
// --------------------------------------------------

import { ISharingManager } from "./ISharingManager";
import { RequestShareEventHandlerArgs } from "./RequestShareEventHandlerArgs";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "winrt/Windows/Foundation/TypedEventHandler`2";

@GenerateShim('Microsoft.Entertainment.Share.SharingManager')
export class SharingManager implements ISharingManager { 
    share(): void {
        console.warn('SharingManager#share not implemented')
    }
    invokeShareEvent(): void {
        console.warn('SharingManager#invokeShareEvent not implemented')
    }
    setEmptyMessage(value: string): void {
        console.warn('SharingManager#setEmptyMessage not implemented')
    }
    encodeComplete(): void {
        console.warn('SharingManager#encodeComplete not implemented')
    }

    private __requestShareEvent: Set<TypedEventHandler<ISharingManager, RequestShareEventHandlerArgs>> = new Set();
    @Enumerable(true)
    set onrequestshareevent(handler: TypedEventHandler<ISharingManager, RequestShareEventHandlerArgs>) {
        this.__requestShareEvent.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'requestshareevent':
                this.__requestShareEvent.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'requestshareevent':
                this.__requestShareEvent.delete(handler);
                break;
        }
    }
}
