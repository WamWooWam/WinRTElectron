// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { IFileDownload } from "./IFileDownload";
import { IFileTransferQuery } from "./IFileTransferQuery";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { EventHandler } from "winrt/Windows/Foundation/EventHandler`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { AsyncOperation, IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { Vector } from "winrt/Windows/Foundation/Interop/Vector`1";

@GenerateShim('Microsoft.Entertainment.FileTransferManager')
export class FileTransferManager {
    static getFileDownloadsAsync(): IAsyncOperation<IVectorView<IFileDownload>> {
        throw new Error('FileTransferManager#getFileDownloadsAsync not implemented')
    }
    static getFileDownloadByIdAsync(taskId: number): IAsyncOperation<IFileDownload> {
        throw new Error('FileTransferManager#getFileDownloadByIdAsync not implemented')
    }
    static getFileDownloadsByQueryAsync(query: IFileTransferQuery): IAsyncOperation<IVectorView<IFileDownload>> {
        // throw new Error('FileTransferManager#getFileDownloadsByQueryAsync not implemented')
        return AsyncOperation.from(async () => new Vector([]))
    }
    static cancelAllDownloadsAsync(): IAsyncAction {
        throw new Error('FileTransferManager#cancelAllDownloadsAsync not implemented')
    }
    static scheduleProgressCheck(): void {
        console.warn('FileTransferManager#scheduleProgressCheck not implemented')
    }
    static initializeEvents(): void {
        console.warn('FileTransferManager#initializeEvents not implemented')
    }

    private static __downloadsChanged: Set<EventHandler<IVectorView<IFileDownload>>> = new Set();
    @Enumerable(true)
    static set ondownloadschanged(handler: EventHandler<IVectorView<IFileDownload>>) {
        FileTransferManager.__downloadsChanged.add(handler);
    }

    static addEventListener(name: string, handler: any) {
        switch (name) {
            case 'downloadschanged':
                FileTransferManager.__downloadsChanged.add(handler);
                break;
        }
    }

    static removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'downloadschanged':
                FileTransferManager.__downloadsChanged.delete(handler);
                break;
        }
    }
}
