// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Media.AdaptiveStreaming 255.255.255.255 at Mon Mar 29 16:23:05 2021
// </auto-generated>
// --------------------------------------------------

import { AdaptiveSourceClosedEventHandler } from "./AdaptiveSourceClosedEventHandler";
import { AdaptiveSourceFailedEventHandler } from "./AdaptiveSourceFailedEventHandler";
import { AdaptiveSourceManagerFailedEventHandler } from "./AdaptiveSourceManagerFailedEventHandler";
import { AdaptiveSourceOpenedEventHandler } from "./AdaptiveSourceOpenedEventHandler";
import { AdaptiveSourceStatusUpdatedEventHandler } from "./AdaptiveSourceStatusUpdatedEventHandler";
import { IAdaptiveSource } from "./IAdaptiveSource";
import { IAdaptiveSourceManager } from "./IAdaptiveSourceManager";
import { IDownloaderPlugin } from "./IDownloaderPlugin";
import { ManifestReadyEventHandler } from "./ManifestReadyEventHandler";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.Media.AdaptiveStreaming.AdaptiveSourceManager')
export class AdaptiveSourceManager implements IAdaptiveSourceManager { 
    adaptiveSources: IVectorView<IAdaptiveSource> = null;
    setDownloaderPlugin(pPlugin: IDownloaderPlugin): void {
        console.warn('AdaptiveSourceManager#setDownloaderPlugin not implemented')
    }
    setDownloadBufferSec(bufferSec: number): void {
        console.warn('AdaptiveSourceManager#setDownloadBufferSec not implemented')
    }
    setBufferDelaySec(bufferDelaySec: number): void {
        console.warn('AdaptiveSourceManager#setBufferDelaySec not implemented')
    }
    setLiveBackoffSec(liveBackOffSec: number): void {
        console.warn('AdaptiveSourceManager#setLiveBackoffSec not implemented')
    }
    setPlaybackOffsetSec(playbackOffsetSec: number): void {
        console.warn('AdaptiveSourceManager#setPlaybackOffsetSec not implemented')
    }
    setLiveBeginOffsetSec(liveBeginOffsetSec: number): void {
        console.warn('AdaptiveSourceManager#setLiveBeginOffsetSec not implemented')
    }
    sendExtendedCommand(cmd: string, parameter: string): void {
        console.warn('AdaptiveSourceManager#sendExtendedCommand not implemented')
    }
    static getDefault(): IAdaptiveSourceManager {
        return new AdaptiveSourceManager();
    }

    private __adaptiveSourceClosedEvent: Set<AdaptiveSourceClosedEventHandler> = new Set();
    @Enumerable(true)
    set onadaptivesourceclosedevent(handler: AdaptiveSourceClosedEventHandler) {
        this.__adaptiveSourceClosedEvent.add(handler);
    }

    private __adaptiveSourceFailedEvent: Set<AdaptiveSourceFailedEventHandler> = new Set();
    @Enumerable(true)
    set onadaptivesourcefailedevent(handler: AdaptiveSourceFailedEventHandler) {
        this.__adaptiveSourceFailedEvent.add(handler);
    }

    private __adaptiveSourceManagerFailedEvent: Set<AdaptiveSourceManagerFailedEventHandler> = new Set();
    @Enumerable(true)
    set onadaptivesourcemanagerfailedevent(handler: AdaptiveSourceManagerFailedEventHandler) {
        this.__adaptiveSourceManagerFailedEvent.add(handler);
    }

    private __adaptiveSourceOpenedEvent: Set<AdaptiveSourceOpenedEventHandler> = new Set();
    @Enumerable(true)
    set onadaptivesourceopenedevent(handler: AdaptiveSourceOpenedEventHandler) {
        this.__adaptiveSourceOpenedEvent.add(handler);
    }

    private __adaptiveSourceStatusUpdatedEvent: Set<AdaptiveSourceStatusUpdatedEventHandler> = new Set();
    @Enumerable(true)
    set onadaptivesourcestatusupdatedevent(handler: AdaptiveSourceStatusUpdatedEventHandler) {
        this.__adaptiveSourceStatusUpdatedEvent.add(handler);
    }

    private __manifestReadyEvent: Set<ManifestReadyEventHandler> = new Set();
    @Enumerable(true)
    set onmanifestreadyevent(handler: ManifestReadyEventHandler) {
        this.__manifestReadyEvent.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'adaptivesourceclosedevent':
                this.__adaptiveSourceClosedEvent.add(handler);
                break;
            case 'adaptivesourcefailedevent':
                this.__adaptiveSourceFailedEvent.add(handler);
                break;
            case 'adaptivesourcemanagerfailedevent':
                this.__adaptiveSourceManagerFailedEvent.add(handler);
                break;
            case 'adaptivesourceopenedevent':
                this.__adaptiveSourceOpenedEvent.add(handler);
                break;
            case 'adaptivesourcestatusupdatedevent':
                this.__adaptiveSourceStatusUpdatedEvent.add(handler);
                break;
            case 'manifestreadyevent':
                this.__manifestReadyEvent.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'adaptivesourceclosedevent':
                this.__adaptiveSourceClosedEvent.delete(handler);
                break;
            case 'adaptivesourcefailedevent':
                this.__adaptiveSourceFailedEvent.delete(handler);
                break;
            case 'adaptivesourcemanagerfailedevent':
                this.__adaptiveSourceManagerFailedEvent.delete(handler);
                break;
            case 'adaptivesourceopenedevent':
                this.__adaptiveSourceOpenedEvent.delete(handler);
                break;
            case 'adaptivesourcestatusupdatedevent':
                this.__adaptiveSourceStatusUpdatedEvent.delete(handler);
                break;
            case 'manifestreadyevent':
                this.__manifestReadyEvent.delete(handler);
                break;
        }
    }
}
