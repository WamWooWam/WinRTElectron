/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* >>>>>>/components/inlinedetails/actionbuttonscontrol.js:2 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {DownloadActionBase: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function downloadActionBase() {
            this.base()
        }, {
            executed: function executed(param) {
                MS.Entertainment.UI.Actions.fail("DownloadActionBase.executed must be implemented in derived classes.")
            }, canExecute: function canExecute(param) {
                    return true
                }, _extractMediaItem: function _extractMediaItem(param) {
                    var mediaItem;
                    if ("mediaItem" in param)
                        mediaItem = param.mediaItem;
                    else
                        mediaItem = param;
                    if (MS.Entertainment.Data.List.isList(mediaItem))
                        return MS.Entertainment.Data.List.listToArray(mediaItem).then(function gotArray(mediaItemsArray) {
                                MS.Entertainment.UI.Actions.assert(mediaItemsArray.length === 1, "DownloadActionBase Action only accepts one mediaItem");
                                mediaItem = mediaItemsArray[0];
                                return WinJS.Promise.wrap(mediaItem)
                            });
                    return WinJS.Promise.wrap(mediaItem)
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        Purchase: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function purchase() {
            this.base()
        }, {
            eventHandlers: null, subTitle: null, dialogToHide: null, hideDialogIfNeeded: function hideDialogIfNeeded() {
                    if (this.dialogToHide) {
                        this.dialogToHide.hide();
                        this.dialogToHide = null
                    }
                }, executed: function executed(param) {
                    var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var target = (param) ? param.target : null;
                    var purchaseType = (param) ? param.purchaseType : null;
                    this.eventHandlers = {onMediaAddedEvent: function onMediaAddedEvent() {
                            var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                            if (mediaContext)
                                mediaContext.dispatchEvent(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase)
                        }};
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).done(function launchPurchaseFlow(mediaItem) {
                        if (param && param.hydrateMediaItem)
                            mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                        var mediaIsTVSeason = MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem);
                        var productGuid = mediaIsTVSeason ? mediaItem.edsId || mediaItem.canonicalId : mediaItem.serviceId || mediaItem.zuneId;
                        var correlationId = MS.Entertainment.Utilities.Telemetry.findCorrelationIdForMediaItem(mediaItem);
                        if (!correlationId)
                            MS.Entertainment.Utilities.Telemetry.setCorrelationId(productGuid);
                        var telemetryParameterArray = [{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: correlationId || MS.Entertainment.Utilities.Telemetry.getCorrelationId(productGuid)
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: productGuid || String.empty
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ParentProductGuid, parameterValue: MS.Entertainment.Utilities.Telemetry.getParentProductGuid(mediaItem)
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AutomationId, parameterValue: param.automationId || String.empty
                                }];
                        if (param && param.offer)
                            telemetryParameterArray.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignedOfferGuid, parameterValue: param.offer.offerId || String.empty
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DeliveryFormat, parameterValue: param.offer.deliveryFormat || String.empty
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DistributionRight, parameterValue: param.offer.licenseRight || String.empty
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: WinJS.Utilities.getMember("referenceContainer.domElement.parentElement.parentElement", this)}, {
                            uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Details
                        }, null, telemetryParameterArray);
                        if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                            MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem);
                        var getRentalOptionPromise = WinJS.Promise.wrap();
                        var signedOffer = param && param.offer && param.offer.signedOffer;
                        var offerId = param && param.offer && param.offer.offerId;
                        var offer = param && param.offer;
                        if (param && !param.offer && param.streamingOffer && param.downloadOffer) {
                            if (!MS.Entertainment.UI.NetworkStatusService.isOnline()) {
                                var error = MS.Entertainment.Platform.Playback.Error.NS_E_WMPIM_USEROFFLINE;
                                MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_FAILED_PANEL_HEADER), error.code);
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, parameterValue: error.code
                                });
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: error.name
                                });
                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                                return
                            }
                            this.eventHandlers.onMessageEvent = this.hideDialogIfNeeded.bind(this);
                            this.eventHandlers.onFinishedEvent = this.hideDialogIfNeeded.bind(this);
                            this.eventHandlers.onCancelEvent = this.hideDialogIfNeeded.bind(this);
                            this.eventHandlers.onErrorEvent = this.hideDialogIfNeeded.bind(this);
                            this.eventHandlers.onShowWebHostDialogComplete = this.hideDialogIfNeeded.bind(this);
                            this.eventHandlers.onShowWebHostDialogError = this.hideDialogIfNeeded.bind(this);
                            getRentalOptionPromise = MS.Entertainment.UI.Controls.RentalOptionsDialog.showRentalOptionsDialog(param.mediaItem, param.streamingOffer, param.downloadOffer).then(function(rentalOptionsDialogResult) {
                                signedOffer = rentalOptionsDialogResult.offer.signedOffer;
                                offerId = rentalOptionsDialogResult.offer.offerId;
                                offer = rentalOptionsDialogResult.offer;
                                this.dialogToHide = rentalOptionsDialogResult.dialog;
                                if (this.dialogToHide && this.dialogToHide.buttons && this.dialogToHide.buttons[0])
                                    this.dialogToHide.buttons[0].isEnabled = false
                            }.bind(this))
                        }
                        getRentalOptionPromise.done(function showPurchaseFlowDialog() {
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            MS.Entertainment.Platform.PurchaseHelpers.launchPurchaseFlow(mediaItem, target, purchaseType, this.eventHandlers, offerId, null, signedInUser.gamerTag, signedOffer, offer)
                        }.bind(this))
                    }.bind(this), function getDataFailed() {
                        MS.Entertainment.UI.Actions.assert(false, "Execute purchase failed")
                    })
                }, canExecute: function canExecute(param) {
                    return this.isEnabled
                }
        }), PinToStartScreen: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function pinToStartScreen() {
                this.base()
            }, {
                executed: function executed(param) {
                    var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).done(function getData_complete(media) {
                        return pinToStartScreenService.pinMediaAsync(media)
                    })
                }, canExecute: function canExecute(param) {
                        return this.isEnabled
                    }
            }), UnpinFromStartScreen: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function unpinFromStartScreen() {
                this.base()
            }, {
                executed: function executed(param) {
                    var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).done(function getData_complete(media) {
                        return pinToStartScreenService.unpinMediaAsync(media)
                    })
                }, canExecute: function canExecute(param) {
                        return this.isEnabled
                    }
            }), AddRemoveItemWatchlist: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function addRemoveItemWatchlist() {
                this.base()
            }, {
                executed: function executed(param) {
                    var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var button = MS.Entertainment.UI.Actions.extractButtonFromParam(param);
                    var media;
                    var watchlistService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.watchlistService);
                    MS.Entertainment.Data.List.getData(mediaItem, 0).then(function getData_complete(_media) {
                        media = _media;
                        return watchlistService.isItemInWatchlist(media)
                    }).then(function(isInWatchlist) {
                        if (!isInWatchlist) {
                            param.button.title = String.load(String.id.IDS_VIDEO2_WISHLIST_ADDING_TITLE);
                            return watchlistService.addItemToWatchlist(media)
                        }
                        else {
                            param.button.title = String.load(String.id.IDS_VIDEO2_WISHLIST_REMOVING_TITLE);
                            return watchlistService.removeItemFromWatchlist(media)
                        }
                    }).then(function() {
                        return watchlistService.isItemInWatchlist(media)
                    }).done(function(isInWatchlist) {
                        button.refreshHelper(isInWatchlist, button)
                    })
                }, canExecute: function canExecute(param) {
                        return this.isEnabled
                    }, refreshHelper: function refreshHelper(isMediaItemInWatchlist, button) {
                        if (!isMediaItemInWatchlist) {
                            button.title = String.load(String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_TITLE_VUI_GUI);
                            button.voicePhraseStringId = String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_TITLE_VUI_ALM;
                            button.voicePhoneticPhraseStringId = String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_VUI_PRON;
                            button.voiceConfidenceStringId = String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_VUI_CONF
                        }
                        else {
                            button.title = String.load(String.id.IDS_VIDEO2_WISHLIST_REMOVE_BUTTON_TITLE_VUI_GUI);
                            button.voicePhraseStringId = String.id.IDS_VIDEO2_WISHLIST_REMOVE_BUTTON_TITLE_VUI_ALM;
                            button.voicePhoneticPhraseStringId = String.id.IDS_VIDEO2_WISHLIST_REMOVE_BUTTON_VUI_PRON;
                            button.voiceConfidenceStringId = String.id.IDS_VIDEO2_WISHLIST_REMOVE_BUTTON_VUI_CONF
                        }
                    }, refresh: function refresh(mediaItem) {
                        var watchlistService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.watchlistService);
                        MS.Entertainment.Data.List.getData(mediaItem, 0).then(function getData_complete(media) {
                            return watchlistService.isItemInWatchlist(media)
                        }).done(function(isItemInWatchlist) {
                            this.refreshHelper(isItemInWatchlist, this)
                        }.bind(this))
                    }
            }), PlayFreeOffer: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function playFreeOffer() {
                this.base()
            }, {
                freeOffer: null, freeOfferId: null, freeOfferCurrencyCode: null, freeOfferPurchaseType: null, freeOfferSignedOffer: null, startPlayback: true, subTitle: null, inPurchaseFlow: false, playbackSource: null, executed: function executed(param) {
                        if (this.inPurchaseFlow)
                            return;
                        this.inPurchaseFlow = true;
                        MS.Entertainment.UI.Actions.assert(this.freeOfferId, "freeOfferId required");
                        MS.Entertainment.UI.Actions.assert(this.freeOfferCurrencyCode, "freeOfferCurrencyCode required");
                        MS.Entertainment.UI.Actions.assert(this.freeOfferSignedOffer, "freeOfferSignedOffer required");
                        var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                        MS.Entertainment.Data.List.getData(listOrMediaItem, 0).done(function launchPurchaseFlow(mediaItem) {
                            if (mediaItem) {
                                if (param && param.hydrateMediaItem)
                                    mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                                var mediaIsTVSeason = MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem);
                                var productGuid = mediaIsTVSeason ? mediaItem.edsId || mediaItem.canonicalId : mediaItem.serviceId || mediaItem.zuneId;
                                var correlationId = MS.Entertainment.Utilities.Telemetry.findCorrelationIdForMediaItem(mediaItem);
                                if (!correlationId)
                                    MS.Entertainment.Utilities.Telemetry.setCorrelationId(productGuid);
                                var telemetryParameterArray = [{
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: correlationId || MS.Entertainment.Utilities.Telemetry.getCorrelationId(productGuid)
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: productGuid || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignedOfferGuid, parameterValue: this.freeOfferId || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DeliveryFormat, parameterValue: "Streaming"
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DistributionRight, parameterValue: this.freeOfferPurchaseType || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AutomationId, parameterValue: WinJS.Utilities.getMember("automationId", param) || String.empty
                                        }];
                                MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: WinJS.Utilities.getMember("referenceContainer.domElement.parentElement.parentElement", this)}, {
                                    uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Details
                                }, null, telemetryParameterArray);
                                if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                                    MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem);
                                MS.Entertainment.Platform.PurchaseHelpers.freePurchaseFlow(mediaItem, this.freeOfferId, this.freeOfferCurrencyCode, this.freeOfferPurchaseType, this.startPlayback, this.freeOfferSignedOffer, this.freeOffer, this.playbackSource).then(function freePurchaseFlowDone() {
                                    this.inPurchaseFlow = false
                                }.bind(this))
                            }
                        }.bind(this))
                    }, canExecute: function canExecute(param) {
                        return this.isEnabled
                    }
            }), LaunchInteractiveApp: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function launchInteractiveApp() {
                this.base()
            }, {
                executed: function executed(param) {
                    var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).done(function getUriFromMedia(mediaItem) {
                        MS.Entertainment.Components.Video.InteractiveAppHelper.getInteractiveUrlFromMedia(mediaItem).done(function launchApp(deepLinkUrl) {
                            var uri = new Windows.Foundation.Uri(deepLinkUrl);
                            var options = new Windows.System.LauncherOptions;
                            options.displayApplicationPicker = false;
                            options.treatAsUntrusted = false;
                            Windows.System.Launcher.launchUriAsync(uri, options).done(function launchSuccess() {
                                var correlationId = MS.Entertainment.Utilities.Telemetry.findCorrelationIdForMediaItem(mediaItem);
                                if (!correlationId)
                                    MS.Entertainment.Utilities.Telemetry.setCorrelationId(mediaItem.serviceId);
                                var telemetryParameterArray = [{
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: correlationId || MS.Entertainment.Utilities.Telemetry.getCorrelationId(mediaItem.serviceId)
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: mediaItem.zuneId || mediaItem.serviceId || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AutomationId, parameterValue: MS.Entertainment.UI.AutomationIds.smartButtonLaunchInteractiveApp || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.InteractiveUri, parameterValue: WinJS.Utilities.getMember("rawUri", uri) || String.empty
                                        }];
                                MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: WinJS.Utilities.getMember("referenceContainer.domElement.parentElement.parentElement", this)}, {
                                    uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.WebPage
                                }, null, telemetryParameterArray)
                            }.bind(this), function launchFailure(){})
                        }.bind(this))
                    }.bind(this))
                }, canExecute: function canExecute(param) {
                        return this.isEnabled
                    }
            }), WatchOnXbox: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function watchOnXbox() {
                this.base()
            }, {
                executed: function executed(param) {
                    var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).then(function watchOnXbox(mediaItem) {
                        if (param && param.hydrateMediaItem)
                            mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                        if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                            MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem);
                        MS.Entertainment.Platform.PlaybackHelpers.playToXboxPauseLocalPlayback(mediaItem)
                    }.bind(this))
                }, canExecute: function canExecute(param) {
                        return MS.Entertainment.Platform.PlaybackHelpers.isPlayToXboxFeatureEnabled()
                    }
            }), PlayOnXbox: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function playOnXbox() {
                this.base()
            }, {
                executed: function executed(param) {
                    var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    if (param && param.hydrateMediaItem)
                        mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                    if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                        MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem);
                    MS.Entertainment.Platform.PlaybackHelpers.playToXboxPauseLocalPlayback(mediaItem, null)
                }, canExecute: function canExecute(param) {
                        return MS.Entertainment.Platform.PlaybackHelpers.isPlayToXboxFeatureEnabled()
                    }
            }), SwitchVideoDefinition: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function switchVideoDefinition() {
                this.base()
            }, {
                purchaseOptions: null, enabled: true, executed: function executed(param) {
                        if (this.enabled) {
                            this.purchaseOptions.toggleVideoDefinition();
                            if (this.isVoiceEnabled)
                                WinJS.Promise.timeout().done(function delay() {
                                    XboxJS.UI.Voice.refreshVoiceElements()
                                })
                        }
                    }, canExecute: function canExecute(param) {
                        return true
                    }, updateTitleForMediaResolution: function updateTitleForMediaResolution() {
                        var videoDefinition = MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition;
                        var useSdStrings = (this.purchaseOptions.selectedDefinition === videoDefinition.hd);
                        if (this.isVoiceEnabled) {
                            this.title = useSdStrings ? String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_GUI) : String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_HD_BUTTON_VUI_GUI);
                            this.voicePhrase = useSdStrings ? String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_ALM) : String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_HD_BUTTON_VUI_ALM);
                            this.voicePhoneticPhrase = useSdStrings ? String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_PRON) : String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_HD_BUTTON_VUI_PRON);
                            this.voiceConfidence = useSdStrings ? String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_CONF) : String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_HD_BUTTON_VUI_CONF)
                        }
                        else
                            this.title = useSdStrings ? String.load(String.id.IDS_VIDEO_PRICE_SWITCH_SD) : String.load(String.id.IDS_VIDEO_PRICE_SWITCH_HD)
                    }
            }), SwitchLanguage: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function switchLanguage() {
                this.base()
            }, {
                purchaseOptions: null, subTitle: null, executed: function executed(param) {
                        this.purchaseOptions.toggleVideoLanguage();
                        this.updateTitleForLanguageAndCount()
                    }, canExecute: function canExecute(param) {
                        return true
                    }, updateTitleForLanguageAndCount: function updateTitleForLanguageAndCount() {
                        var languageCode = this.purchaseOptions.selectedLanguageCode;
                        var count = this.purchaseOptions.languageCodes.length;
                        if (this.isVoiceEnabled) {
                            this.title = String.load(String.id.IDS_VIDEO2_L3_SWITCH_LANGUAGE_BUTTON_VUI_GUI);
                            this.voicePhrase = String.load(String.id.IDS_VIDEO2_L3_SWITCH_LANGUAGE_BUTTON_VUI_ALM);
                            this.voicePhoneticPhrase = String.load(String.id.IDS_VIDEO2_L3_SWITCH_LANGUAGE_BUTTON_VUI_PRON);
                            this.voiceConfidence = String.load(String.id.IDS_VIDEO2_L3_SWITCH_LANGUAGE_BUTTON_VUI_CONF)
                        }
                        var subTitleText;
                        if (languageCode.toUpperCase() === MS.Entertainment.Utilities.VARIOUS_LANGUAGES_CODE.toUpperCase()) {
                            var displayLanguage = String.load(String.id.IDS_VIDEO_BUNDLES_AUDIO_LANGUAGE_METADATA);
                            subTitleText = String.load(String.id.IDS_VIDEO_BUNDLES_AUDIO_LANGUAGE_BUTTON).format(count)
                        }
                        else {
                            var displayLanguage = MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(languageCode);
                            subTitleText = String.load(String.id.IDS_VIDEO_PURCHASE_OPTIONS_CURRENT_LANGUAGE).format(displayLanguage, count)
                        }
                        this.subTitle = subTitleText
                    }
            }), DownloadAgain: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.DownloadActionBase", function downloadAgain() {
                this.base()
            }, {executed: function executed(param) {
                    var mediaItemPromise = this._extractMediaItem(param);
                    mediaItemPromise.done(function getMediaItem(mediaItem) {
                        if (param && param.hydrateMediaItem)
                            mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                        MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(mediaItem).done(function getMarketplaceNativeFileDownloadsAsync_complete(result) {
                            for (var i = 0; i < result.length; i++) {
                                var task = result[i];
                                switch (task.taskStatus) {
                                    case Microsoft.Entertainment.FileTransferStatus.notStarted:
                                    case Microsoft.Entertainment.FileTransferStatus.error:
                                    case Microsoft.Entertainment.FileTransferStatus.canceled:
                                        if (task.canRetry) {
                                            if (MS.Entertainment.Utilities.isVideoApp)
                                                MS.Entertainment.UI.Video.DeviceLimitErrorDialog.listenForDownloadNotification();
                                            try {
                                                task.restart()
                                            }
                                            catch(exception) {}
                                        }
                                        else
                                            task.closeAsync().done(function closeAsync_complete(task){}, function closeAsync_error(error){});
                                        break
                                }
                            }
                        })
                    })
                }}), DownloadPause: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.DownloadActionBase", function downloadPause() {
                this.base()
            }, {executed: function executed(param) {
                    var mediaItemPromise = this._extractMediaItem(param);
                    mediaItemPromise.done(function getMediaItem(mediaItem) {
                        MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(mediaItem).done(function getMarketplaceNativeFileDownloadsAsync_complete(result) {
                            for (var i = 0; i < result.length; i++) {
                                var task = result[i];
                                switch (task.taskStatus) {
                                    case Microsoft.Entertainment.FileTransferStatus.pending:
                                    case Microsoft.Entertainment.FileTransferStatus.notStarted:
                                    case Microsoft.Entertainment.FileTransferStatus.running:
                                        task.pause();
                                        break
                                }
                            }
                        })
                    })
                }}), DownloadResume: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.DownloadActionBase", function downloadResume() {
                this.base()
            }, {executed: function executed(param) {
                    var mediaItemPromise = this._extractMediaItem(param);
                    mediaItemPromise.done(function getMediaItem(mediaItem) {
                        MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(mediaItem).done(function getMarketplaceNativeFileDownloadsAsync_complete(result) {
                            for (var i = 0; i < result.length; i++) {
                                var task = result[i];
                                switch (task.taskStatus) {
                                    case Microsoft.Entertainment.FileTransferStatus.paused:
                                        task.resume();
                                        break
                                }
                            }
                        })
                    })
                }}), DownloadCancel: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.DownloadActionBase", function downloadCancel() {
                this.base()
            }, {executed: function executed(param) {
                    var mediaItemPromise = this._extractMediaItem(param);
                    mediaItemPromise.done(function getMediaItem(mediaItem) {
                        MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(mediaItem).done(function getMarketplaceNativeFileDownloadsAsync_complete(result) {
                            for (var i = 0; i < result.length; i++) {
                                var task = result[i];
                                switch (task.taskStatus) {
                                    case Microsoft.Entertainment.FileTransferStatus.canceled:
                                    case Microsoft.Entertainment.FileTransferStatus.completed:
                                        break;
                                    default:
                                        task.cancel();
                                        break
                                }
                            }
                        })
                    })
                }}), DownloadRemove: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function downloadRemove() {
                this.base()
            }, {
                executed: function executed(param) {
                    var mediaItemPromise = this._extractMediaItem(param);
                    mediaItemPromise.done(function getMediaItem(mediaItem) {
                        if (param && param.hydrateMediaItem)
                            mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                        MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(mediaItem).done(function getMarketplaceNativeFileDownloadsAsync_complete(result) {
                            for (var i = 0; i < result.length; i++) {
                                var task = result[i];
                                switch (task.taskStatus) {
                                    case Microsoft.Entertainment.FileTransferStatus.notStarted:
                                    case Microsoft.Entertainment.FileTransferStatus.error:
                                    case Microsoft.Entertainment.FileTransferStatus.canceled:
                                        task.closeAsync().done(function closeAsync_complete(task){}, function closeAsync_error(error){});
                                        break
                                }
                            }
                        })
                    })
                }, canExecute: function canExecute(param) {
                        return true
                    }, _extractMediaItem: function _extractMediaItem(param) {
                        var mediaItem;
                        if ("mediaItem" in param)
                            mediaItem = param.mediaItem;
                        else
                            mediaItem = param;
                        if (MS.Entertainment.Data.List.isList(mediaItem))
                            return MS.Entertainment.Data.List.listToArray(mediaItem).then(function gotArray(mediaItemsArray) {
                                    MS.Entertainment.UI.Actions.assert(mediaItemsArray.length === 1, "DownloadRemove Action only accepts one mediaItem");
                                    mediaItem = mediaItemsArray[0];
                                    return WinJS.Promise.wrap(mediaItem)
                                });
                        return WinJS.Promise.wrap(mediaItem)
                    }
            }), DownloadDemo: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function downloadDemo() {
                this.base()
            }, {
                executed: function executed(param) {
                    var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    if (param && param.hydrateMediaItem)
                        mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                    if (mediaItem.gameDemo) {
                        var gameMediaItem = {
                                serviceId: mediaItem.gameDemo.id, mediaType: Microsoft.Entertainment.Queries.ObjectType.game
                            };
                        MS.Entertainment.Platform.PurchaseHelpers.launchPurchaseFlow(gameMediaItem)
                    }
                    if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                        MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem)
                }, canExecute: function canExecute(param) {
                        return true
                    }
            }), ActionPassThrough: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function invokeButton() {
                this.base()
            }, {
                executed: function executed(param){}, canExecute: function canExecute(param) {
                        return true
                    }
            })
    });
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, function() {
            return new MS.Entertainment.UI.Actions.Purchase
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.pinToStartScreen))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.pinToStartScreen, function() {
            return new MS.Entertainment.UI.Actions.PinToStartScreen
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.unpinFromStartScreen))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.unpinFromStartScreen, function() {
            return new MS.Entertainment.UI.Actions.UnpinFromStartScreen
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.addRemoveItemWatchlist))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.addRemoveItemWatchlist, function() {
            return new MS.Entertainment.UI.Actions.AddRemoveItemWatchlist
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.playFreeOffer))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.playFreeOffer, function() {
            return new MS.Entertainment.UI.Actions.PlayFreeOffer
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.launchInteractiveApp))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.launchInteractiveApp, function() {
            return new MS.Entertainment.UI.Actions.LaunchInteractiveApp
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.watchOnXbox))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.watchOnXbox, function() {
            return new MS.Entertainment.UI.Actions.WatchOnXbox
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.playOnXbox))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.playOnXbox, function() {
            return new MS.Entertainment.UI.Actions.PlayOnXbox
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.switchVideoDefinition))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.switchVideoDefinition, function() {
            return new MS.Entertainment.UI.Actions.SwitchVideoDefinition
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.switchLanguage))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.switchLanguage, function() {
            return new MS.Entertainment.UI.Actions.SwitchLanguage
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadAgain))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadAgain, function() {
            return new MS.Entertainment.UI.Actions.DownloadAgain
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadCancel))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadCancel, function() {
            return new MS.Entertainment.UI.Actions.DownloadCancel
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadPause))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadPause, function() {
            return new MS.Entertainment.UI.Actions.DownloadPause
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadResume))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadResume, function() {
            return new MS.Entertainment.UI.Actions.DownloadResume
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadRemove))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadRemove, function() {
            return new MS.Entertainment.UI.Actions.DownloadRemove
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadDemo))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadDemo, function() {
            return new MS.Entertainment.UI.Actions.DownloadDemo
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.actionPassThrough))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.actionPassThrough, function() {
            return new MS.Entertainment.UI.Actions.ActionPassThrough
        });
    WinJS.Namespace.define("MS.Entertainment.Pages", {ActionButtonsControl: MS.Entertainment.UI.Framework.defineUserControl("/Components/InlineDetails/ActionButtonsControl.html#actionButtonsControlTemplate", null, {
            replaceInline: false, defaultButtonClass: null, tabIndex: 0, limitFocusMovement: false, _buttonsChangedHandler: null, focusFirstItemOnPageLoad: false, _setDefaultFocusHandler: null, buttons: MS.Entertainment.UI.Framework.observableProperty("buttons", null), currentButtons: MS.Entertainment.UI.Framework.observableProperty("currentButtons", null), orientation: MS.Entertainment.UI.Framework.observableProperty("orientation", "vertical", true), initialize: function initialize() {
                    MS.Entertainment.UI.Actions.assert(this._actionButtons, "this._actionButtons is not valid");
                    MS.Entertainment.UI.Actions.assert(this._actionButtons.domElement, "this._actionButtons.domElement is not valid");
                    this._actionButtons.defaultButtonClass = this.defaultButtonClass;
                    this._actionButtons.tabIndex = this.tabIndex;
                    this.currentButtons = new MS.Entertainment.ObservableArray;
                    this._buttonsChangedHandler = MS.Entertainment.Utilities.addEventHandlers(this, {buttonsChanged: this._buttonsChanged.bind(this)});
                    if (this.focusFirstItemOnPageLoad)
                        this._setDefaultFocusHandler = MS.Entertainment.Utilities.addEventHandlers(this._actionButtons.domElement, {ActionsReady: function setDefaultFocus() {
                                MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(this._actionButtons.domElement, 0)
                            }.bind(this)});
                    this._buttonsChanged({detail: {newValue: this.buttons}});
                    if (this.orientation === "horizontal") {
                        WinJS.Utilities.addClass(this._actionButtons.domElement, "state-orientationHorizontal");
                        WinJS.Utilities.removeClass(this._actionButtons.domElement, "state-orientationVertical")
                    }
                    else {
                        WinJS.Utilities.removeClass(this._actionButtons.domElement, "state-orientationHorizontal");
                        WinJS.Utilities.addClass(this._actionButtons.domElement, "state-orientationVertical")
                    }
                }, unload: function unload() {
                    if (this._buttonsChangedHandler) {
                        this._buttonsChangedHandler.cancel();
                        this._buttonsChangedHandler = null
                    }
                    if (this._setDefaultFocusHandler) {
                        this._setDefaultFocusHandler.cancel();
                        this._setDefaultFocusHandler = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, _setFocusOverrides: function setFocusOverrides(actionButtons) {
                    var actionButtonControls = Array.prototype.map.call(actionButtons, function getWinControl(actionElement) {
                            return actionElement && actionElement.children.length > 0 && actionElement.children[0].winControl
                        });
                    actionButtonControls = actionButtonControls.filter(function filterFalsyElements(actionButtonControl) {
                        return !!actionButtonControl
                    });
                    var noOp = ".currentPage :focus";
                    for (var i = 1; i < actionButtonControls.length - 1; i++)
                        actionButtonControls[i].focusDirections = null;
                    if (actionButtonControls.length === 1)
                        actionButtonControls[0].focusDirections = {
                            down: noOp, up: noOp
                        };
                    else {
                        actionButtonControls[0].focusDirections = {up: noOp};
                        actionButtonControls[actionButtonControls.length - 1].focusDirections = {down: noOp}
                    }
                }, _buttonsChanged: function buttonInfoChanged(e) {
                    var newButtons = e && e.detail && e.detail.newValue;
                    if (!newButtons)
                        return;
                    WinJS.Utilities.removeClass(this._actionButtons.domElement, "hideFromDisplay");
                    if (!this.replaceInline)
                        this.currentButtons = newButtons;
                    else {
                        var i;
                        var enabledActions = {};
                        newButtons.forEach(function addId(action) {
                            MS.Entertainment.UI.assert(action.id, "Missing action Id");
                            enabledActions[action.id] = true
                        });
                        for (i = (this.currentButtons.length - 1); i >= 0; i--) {
                            var action = this.currentButtons.item(i);
                            if (!enabledActions[action.id])
                                this.currentButtons.removeAt(i)
                        }
                        var action;
                        var currentIndex = 0;
                        var actionLength = newButtons.length;
                        for (i = 0; i < actionLength; i++) {
                            action = newButtons[i];
                            if (this.currentButtons.length <= currentIndex)
                                this.currentButtons.push(action);
                            else if (this.currentButtons.item(currentIndex).id !== action.id)
                                this.currentButtons.insert(currentIndex, action);
                            currentIndex++
                        }
                        WinJS.Promise.timeout().then(function raiseReadyEvent() {
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("ActionsReady", true, true);
                            this._actionButtons.domElement.dispatchEvent(domEvent);
                            if (this.limitFocusMovement && this._actionButtons.domElement.children.length > 0)
                                this._setFocusOverrides(this._actionButtons.domElement.children)
                        }.bind(this))
                    }
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Pages", {ActionButtonsListControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ItemsControl", null, function actionButtonsListControl(){}, {
            listViewModel: null, defaultButtonClass: null, tabIndex: 0, controlName: "ActionButtonsControl", initialize: function initialize() {
                    if (!this.itemTemplate)
                        this.itemTemplate = "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate";
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.initialize.apply(this, arguments)
                }, processItemData: function processItemData(itemData, index) {
                    itemData.execute = MS.Entertainment.Utilities.bindAndMarkSupportedForProcessing(itemData.execute, itemData);
                    if (!itemData.className) {
                        var className = this.defaultButtonClass;
                        if (itemData.extendedClassNames)
                            className += " " + itemData.extendedClassNames;
                        itemData.addProperty("className", className);
                        itemData.tabIndex = this.tabIndex
                    }
                    if (this.listViewModel)
                        return new MS.Entertainment.UI.Controls.ItemsControlViewModel(itemData, this.listViewModel, index);
                    else
                        return itemData
                }, itemsRendered: function itemsRendered() {
                    WinJS.Promise.timeout().done(function raiseReadyEvent() {
                        if (this.domElement) {
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("ActionsReady", true, true);
                            this.domElement.dispatchEvent(domEvent)
                        }
                    }.bind(this))
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Pages", {SmartBuyButtonsListControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.ActionButtonsListControl", null, null, {
            _eventProxyHandler: null, _eventProxy: null, controlName: "ActionButtonsControl", eventProxy: {
                    get: function() {
                        return this._eventProxy
                    }, set: function(value) {
                            if (value !== this._eventProxy) {
                                this._eventProxy = value;
                                this._cancelEventHandlers();
                                if (this._eventProxy)
                                    this._eventProxyHandler = MS.Entertainment.Utilities.addEventHandlers(this._eventProxy, {currentButtonsChanged: this._setDataSourceFromEvent.bind(this)})
                            }
                        }
                }, unload: function unload() {
                    MS.Entertainment.Pages.ActionButtonsListControl.prototype.unload.apply(this, arguments);
                    this._cancelEventHandlers()
                }, _cancelEventHandlers: function _cancelEventHandlers() {
                    if (this._eventProxyHandler) {
                        this._eventProxyHandler.cancel();
                        this._eventProxyHandler = null
                    }
                }, _setDataSourceFromEvent: function _setDataSourceFromEvent(args) {
                    if (!this._unloaded)
                        this.dataSource = args.detail.value
                }
        })})
})()
})();
/* >>>>>>/components/shell/apptoolbarservice.js:717 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI");
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI", {
        AppToolbarService: MS.Entertainment.UI.Framework.define(function AppToolbarServiceConstructor() {
            MS.Entertainment.Utilities.assertIfCalledBeforeCriticalWorkCompleted();
            this.currentAppbarActions = new MS.Entertainment.ObservableArray;
            this._mediaContextStack = [];
            this.pushDefaultContext()
        }, {
            __availableActions: null, __defaultActions: null, currentAppbarActions: null, _mediaContextStack: null, _defaultActions: {
                    get: function get_defaultActions() {
                        if (!this.__defaultActions && MS.Entertainment.ViewModels.SmartAppbarActions)
                            this.__defaultActions = MS.Entertainment.ViewModels.SmartAppbarActions.defaultActions;
                        return this.__defaultActions || []
                    }, set: function set_defaultActions(value) {
                            this.__defaultActions = value
                        }
                }, _availableActions: {
                    get: function get_availableActions() {
                        if (!this.__availableActions && MS.Entertainment.ViewModels.SmartAppbarActions && MS.Entertainment.ViewModels.SmartAppbarActions.getAppbarActions)
                            this.__availableActions = MS.Entertainment.ViewModels.SmartAppbarActions.getAppbarActions();
                        return this.__availableActions || []
                    }, set: function set_availableActions(value) {
                            this.__availableActions = value
                        }
                }, _resetActionWithSubActions: function _resetActionWithSubActions(action) {
                    if (!action || !action.hasSubActions)
                        return;
                    action.parameter = {};
                    action.requeryCanExecute();
                    if (action.setSubActions)
                        action.setSubActions([])
                }, pushDefaultContext: function pushDefaultContext(actions) {
                    var actionIds = actions || this._defaultActions;
                    var mediaContext = this.pushMediaContext(null, null, actionIds, null, 0);
                    return mediaContext
                }, currentMediaContext: {get: function() {
                        MS.Entertainment.UI.assert(this._mediaContextStack.length > 0, "currentMediaContext called when we have no stored mediaContext");
                        return this._mediaContextStack[this._mediaContextStack.length - 1]
                    }}, _setToolbarActions: function _setToolbarActions(actionIds, cookie) {
                    MS.Entertainment.UI.assert(actionIds, "Set called without a valid actionIds array");
                    var mediaContext;
                    var isActiveMediaContent = true;
                    for (var i = this._mediaContextStack.length - 1; i >= 0; i--) {
                        if (this._mediaContextStack[i].cookie === cookie) {
                            mediaContext = this._mediaContextStack[i];
                            break
                        }
                        isActiveMediaContent = false
                    }
                    if (mediaContext)
                        mediaContext.actionIds = actionIds;
                    else
                        MS.Entertainment.UI.fail("Couldn't find mediaContext with cookie: " + cookie);
                    if (isActiveMediaContent) {
                        var i;
                        var enabledActions = {};
                        actionIds.forEach(function addId(id) {
                            MS.Entertainment.UI.assert(id, "Missing action Id");
                            enabledActions[id] = true
                        });
                        for (i = (this.currentAppbarActions.length - 1); i >= 0; i--) {
                            var currentItem = this.currentAppbarActions.item(i);
                            var action = null;
                            if (currentItem)
                                action = currentItem.action;
                            if (action && !enabledActions[action.id]) {
                                this.currentAppbarActions.removeAt(i);
                                this._resetActionWithSubActions(action);
                                if (action.wrappedAction)
                                    this._resetActionWithSubActions(action.wrappedAction)
                            }
                        }
                        var action;
                        var actionId;
                        var currentIndex = 0;
                        var actionLength = this._availableActions.length;
                        for (i = 0; i < actionLength; i++) {
                            actionId = this._availableActions[i].id || this._availableActions[i].action.id;
                            if (enabledActions[actionId]) {
                                action = this._availableActions[i].action;
                                if (this.currentAppbarActions.length <= currentIndex)
                                    this.currentAppbarActions.push({action: action});
                                else if (this.currentAppbarActions.item(currentIndex).action.id !== action.id)
                                    this.currentAppbarActions.insert(currentIndex, {action: action});
                                currentIndex++
                            }
                        }
                        for (i = 0; i < this.currentAppbarActions.length; i++) {
                            var action = this.currentAppbarActions.item(i);
                            action = (action && action.action) || {};
                            var unwrappedAction;
                            if (action.requeryCanExecute)
                                action.requeryCanExecute();
                            unwrappedAction = action.wrappedAction || action;
                            if (mediaContext.actionIds.hasSubActions && mediaContext.actionIds.hasSubActions(action.id))
                                unwrappedAction.setSubActions(mediaContext.actionIds.subActions[action.id])
                        }
                    }
                }, getToolbarAction: function getToolbarAction(id) {
                    var action;
                    var toolbarActions = this._availableActions;
                    for (var key in toolbarActions)
                        if (toolbarActions.hasOwnProperty(key)) {
                            action = toolbarActions[key];
                            if (action.action)
                                action = action.action;
                            if (action.id === id)
                                return action
                        }
                    return null
                }, pushMediaContext: function pushMediaContext(mediaItem, eventHandlers, initialActionIds, options, stackPriority) {
                    var mediaContext;
                    var contextCookie = MS.Entertainment.Utilities.getSessionUniqueInteger();
                    var eventSource = new MS.Entertainment.Utilities.EventSource;
                    if (eventHandlers) {
                        eventHandlers = Array.isArray(eventHandlers) ? eventHandlers : [eventHandlers];
                        for (var i = 0; i < eventHandlers.length; i++)
                            eventSource.addEventHandlers(eventHandlers[i])
                    }
                    MS.Entertainment.UI.assert(!stackPriority || stackPriority >= 0, "Negative stackPriorities are not allowed");
                    MS.Entertainment.UI.assert(!stackPriority, "stack priorities are currently only enabled in companion");
                    mediaContext = {
                        mediaItem: mediaItem || {}, collectionFilter: Microsoft.Entertainment.Platform.MediaAvailability.available, actionIds: initialActionIds || this._defaultActions, options: options || {executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas}, stackPriority: stackPriority || 0, _contextRemoved: false, setToolbarActions: function setToolbarActions(actionIds) {
                                this._setToolbarActions(actionIds, mediaContext.cookie)
                            }.bind(this), clearToolbarActions: function clearToolbarActions() {
                                this._setToolbarActions([], mediaContext.cookie)
                            }.bind(this), updateMediaItem: function updateMediaItem(newMediaItem) {
                                mediaContext.mediaItem = newMediaItem
                            }, addEventHandlers: function addEventHandlers(events) {
                                MS.Entertainment.UI.assert(!Array.isArray(events), "Events passed in cannot be an array");
                                return eventSource.addEventHandlers(events)
                            }, dispatchEvent: function dispatchEvent(event, parameters) {
                                MS.Entertainment.UI.assert(event, "event must be defined");
                                eventSource.dispatchEvent(event, parameters)
                            }, clearContext: function clearContext() {
                                if (mediaContext._contextRemoved) {
                                    MS.Entertainment.UI.fail("clearContext called on mediaContext which has already been cleared");
                                    return
                                }
                                MS.Entertainment.UI.assert(this._mediaContextStack.length > 0, "clearContext called when we have no stored mediaContexts");
                                var topRemoved = true;
                                for (var i = this._mediaContextStack.length - 1; i >= 0; i--) {
                                    if (this._mediaContextStack[i].cookie === mediaContext.cookie) {
                                        this._mediaContextStack.splice(i, 1);
                                        mediaContext._contextRemoved = true;
                                        break
                                    }
                                    topRemoved = false
                                }
                                if (topRemoved) {
                                    var newTop = this._mediaContextStack[this._mediaContextStack.length - 1];
                                    newTop.setToolbarActions(newTop.actionIds)
                                }
                                eventSource.dispose()
                            }.bind(this)
                    };
                    Object.defineProperty(mediaContext, "cookie", {get: function() {
                            return contextCookie
                        }});
                    var topItem = this._mediaContextStack[this._mediaContextStack.length - 1] || {stackPriority: 0};
                    if (mediaContext.stackPriority >= topItem.stackPriority)
                        this._mediaContextStack.push(mediaContext);
                    else
                        for (var i = this._mediaContextStack.length - 1; i >= 0; i--)
                            if (mediaContext.stackPriority >= this._mediaContextStack[i].stackPriority) {
                                this._mediaContextStack.splice(i - 1, 0, mediaContext);
                                break
                            }
                    mediaContext.setToolbarActions(mediaContext.actionIds);
                    return mediaContext
                }
        }), ToolbarAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function toolbarActionConstructor() {
                this.base();
                this.isEnabled = true
            }, {
                icon: null, hideOnDisable: false, visibility: null, canExecute: function canExecute(parameter) {
                        return true
                    }
            })
    });
    if (MS.Entertainment.Utilities.isMain)
        MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.appToolbar, function AppToolbarServiceFactory() {
            return new MS.Entertainment.UI.AppToolbarService
        })
})()
})();
/* >>>>>>/components/shell/purchasehelpers.js:909 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.PurchaseHelpers");
    WinJS.Namespace.define("MS.Entertainment.Platform.PurchaseHelpers", {
        CONSOLE_TARGET: "XBox", PC_TARGET: "X8", METRO_TARGET: "Windows", PURCHASE_TYPE_RENT: "Rent", PURCHASE_TYPE_BUY: "Buy", AVATAR_TYPE: "AvatarItem", PDLC_TYPE: "PDLCItem", GAME_ADDON_TYPE: "GameAddon", GAME_DEMO_TYPE: "GameDemo", GAME_VIDEO_TYPE: "GameVideo", GAMER_PICTURE_TYPE: "GamerPic", GAME_THEME_TYPE: "Theme", METRO_GAME_CONSUMABLE: "MetroGameConsumable", METRO_GAME_CONTENT: "MetroGameContent", METRO_GAME_ID: 62, METRO_AVATAR_ITEM_ID: 47, METRO_GAME_CONTENT_ID: 63, METRO_GAME_CONSUMABLE_ID: 64, XBOX_GAME_CONTENT: "Xbox360GameContent", XBOX_GAME: "Xbox360Game", XBOX_GAME_TRIAL: "XboxGameTrial", XBOX_GAME_DEMO: "Xbox360GameDemo", XBOX_THEME: "XboxTheme", XBOX_GAMER_TILE: "XboxGamerTile", XBOX_GAME_VIDEO: "XboxGameVideo", XBOX_GAME_TRAILER: "XboxGameTrailer", XBOX_GAME_CONTENT_ID: 18, XBOX_GAME_ID: 1, XBOX_ARCADE_ID: 23, XBOX_INDIE_ID: 37, XBOX_GAME_TRIAL_ID: 5, XBOX_GAME_DEMO_ID: 19, XBOX_THEME_ID: 20, XBOX_GAMER_TILE_ID: 22, XBOX_GAME_VIDEO_ID: 30, GAME_TYPE: "Game", MOVIE_TYPE: "Movie", TV_EPISODE_TYPE: "TVEpisode", TV_SEASON_TYPE: "TVSeason", ALBUM_TYPE: "Album", TRACK_TYPE: "Track", WATCH_ON_CONSOLE_TARGET: "360", WATCH_ON_PC_TARGET: "X8", DELIVERY_FORMAT_STREAMING: "Streaming", ERROR_CONTENT_ALREADY_OWNED: "CONTENT_ALREADY_OWNED", ERROR_SIGN_IN_FAILED: "SIGN_IN_FAILED", SUCCESS: "SUCCESS", FAILURE: "FAILURE", CANCELLED: "CANCELLED", ERROR_BLOCK_PURCHASE: "BLOCK_PURCHASE", ERROR_NO_PURCHASE_FLOW_PROVIDER: "NO_PURCHASE_FLOW_PROVIDER", ERROR_NO_PURCHASE_FLOW_EXP: "NO_PURCHASE_FLOW_EXP", LicenseRightMap: {
                _scriptLicenseRights: null, _delayLoadScriptLicenseRights: function _delayLoadScriptLicenseRights() {
                        if (!MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._scriptLicenseRights)
                            MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._scriptLicenseRights = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Subscription, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SubscriptionFree, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.TransferToPortableDevice, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PreviewStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Trial, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.FreeStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Download, ]
                    }, toNative: function toNative(licenseRight) {
                        if (typeof(licenseRight) === "number")
                            return licenseRight;
                        if (typeof(licenseRight) !== "string")
                            return Microsoft.Entertainment.Marketplace.MarketplaceMediaRights.unknownMediaRight;
                        MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._delayLoadScriptLicenseRights();
                        return MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._scriptLicenseRights.indexOf(licenseRight)
                    }, toScript: function toScript(licenseRight) {
                        if (typeof(licenseRight) === "string")
                            return licenseRight;
                        MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._delayLoadScriptLicenseRights();
                        if (typeof(licenseRight) !== "number" || licenseRight < 0 || licenseRight >= MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._scriptLicenseRights.length)
                            return null;
                        return MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._scriptLicenseRights[licenseRight]
                    }, ModernLicenseRight: {
                        Invalid: 0, AlbumPurchase: 100, Download: 200, FreeStream: 300, FreeStreamLimitExceeded: 301, Preview: 400, PreviewStream: 500, Purchase: 600, PurchaseStream: 700, Rent: 800, RentStream: 900, Root: 1000, SeasonPurchase: 1100, SeasonPurchaseStream: 1200, Stream: 1300, Subscription: 1400, SubscriptionFree: 1500, TakeDown: 1600, TransferToPortableDevice: 1700, Trial: 1800
                    }, fromModernToNative: function fromModernToNative(licenseRight) {
                        var LicenseRightMap = MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap;
                        var MarketplaceRight = MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight;
                        switch (licenseRight) {
                            case LicenseRightMap.ModernLicenseRight.AlbumPurchase:
                                return LicenseRightMap.toNative(MarketplaceRight.AlbumPurchase);
                            case LicenseRightMap.ModernLicenseRight.Download:
                                return LicenseRightMap.toNative(MarketplaceRight.Download);
                            case LicenseRightMap.ModernLicenseRight.FreeStream:
                                return LicenseRightMap.toNative(MarketplaceRight.FreeStream);
                            case LicenseRightMap.ModernLicenseRight.Preview:
                                return LicenseRightMap.toNative(MarketplaceRight.Preview);
                            case LicenseRightMap.ModernLicenseRight.PreviewStream:
                                return LicenseRightMap.toNative(MarketplaceRight.PreviewStream);
                            case LicenseRightMap.ModernLicenseRight.Purchase:
                                return LicenseRightMap.toNative(MarketplaceRight.Purchase);
                            case LicenseRightMap.ModernLicenseRight.PurchaseStream:
                                return LicenseRightMap.toNative(MarketplaceRight.PurchaseStream);
                            case LicenseRightMap.ModernLicenseRight.Rent:
                                return LicenseRightMap.toNative(MarketplaceRight.Rent);
                            case LicenseRightMap.ModernLicenseRight.RentStream:
                                return LicenseRightMap.toNative(MarketplaceRight.RentStream);
                            case LicenseRightMap.ModernLicenseRight.SeasonPurchase:
                                return LicenseRightMap.toNative(MarketplaceRight.SeasonPurchase);
                            case LicenseRightMap.ModernLicenseRight.SeasonPurchaseStream:
                                return LicenseRightMap.toNative(MarketplaceRight.SeasonPurchaseStream);
                            case LicenseRightMap.ModernLicenseRight.Stream:
                                return LicenseRightMap.toNative(MarketplaceRight.Stream);
                            case LicenseRightMap.ModernLicenseRight.Subscription:
                                return LicenseRightMap.toNative(MarketplaceRight.Subscription);
                            case LicenseRightMap.ModernLicenseRight.SubscriptionFree:
                                return LicenseRightMap.toNative(MarketplaceRight.SubscriptionFree);
                            case LicenseRightMap.ModernLicenseRight.TransferToPortableDevice:
                                return LicenseRightMap.toNative(MarketplaceRight.TransferToPortableDevice);
                            case LicenseRightMap.ModernLicenseRight.Trial:
                                return LicenseRightMap.toNative(MarketplaceRight.Trial);
                            case LicenseRightMap.ModernLicenseRight.Invalid:
                            case LicenseRightMap.ModernLicenseRight.FreeStreamLimitExceeded:
                            case LicenseRightMap.ModernLicenseRight.Root:
                            case LicenseRightMap.ModernLicenseRight.TakeDown:
                            default:
                                throw new Error("Unsupported license right.");
                        }
                    }
            }, Error: {
                NS_E_EXPLICIT_CONTENT_DOWNLOAD_BLOCKED: (0xC00D1393 - 0xFFFFFFFF - 1), NS_E_ERROR_CANCELLED_HR_FROM_WIN32: (0x800704c7 - 0xFFFFFFFF - 1), NS_E_ERROR_NO_SUCH_USER_HR_FROM_WIN32: (0x80070525 - 0xFFFFFFFF - 1)
            }, displayPurchaseBlockingDialog: function displayPurchaseBlockingDialog(mediaItem) {
                if (!MS.Entertainment.Utilities.isVideoApp)
                    return WinJS.Promise.wrap(false);
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.purchaseHistory)) {
                    var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                    if (purchaseHistoryService.inPurchaseFlow)
                        return WinJS.Promise.wrap(true)
                }
                MS.Entertainment.UI.PurchaseHistoryService.enterPurchaseFlowActivity();
                MS.Entertainment.assert(mediaItem, "PurchaseHelpers: Invalid mediaItem passed into displayPurchaseBlockingDialog");
                var displaySL2KCertBlock = WinJS.Promise.wrap(false);
                if (MS.Entertainment.Utilities.isVideoApp2 && !MS.Entertainment.isAppModeOverride && !MS.Entertainment.Utilities.supportsProtectedContent) {
                    var completionSignal = new MS.Entertainment.UI.Framework.Signal;
                    MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_VIDEO2_PURCHASE_WARNING_TITLE), String.load(String.id.IDS_VIDEO2_PURCHASE_WARNING_BODY), {
                        defaultButtonIndex: 1, cancelButtonIndex: 1, autoSetFocus: true, useGoBackForVoice: true, buttons: [{
                                    title: String.load(String.id.IDS_OK_BUTTON), execute: function(dialog) {
                                            dialog.hide();
                                            completionSignal.complete(false)
                                        }
                                }, {
                                    title: String.load(String.id.IDS_CANCEL_BUTTON), execute: function(dialog) {
                                            dialog.hide();
                                            completionSignal.complete(true)
                                        }
                                }, ]
                    });
                    displaySL2KCertBlock = completionSignal.promise
                }
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                return displaySL2KCertBlock.then(function onDisplaySL2KDialog(blockFor2KCert) {
                        if (blockFor2KCert)
                            return {sl2KBlocked: true};
                        var signedInSignal = new MS.Entertainment.UI.Framework.Signal;
                        var signedInBindings;
                        var signInPromise;
                        if (signIn.isSigningIn) {
                            signedInBindings = WinJS.Binding.bind(signIn, {isSignedIn: function onSignedIn() {
                                    if (!signedInBindings)
                                        return;
                                    signedInBindings.cancel();
                                    signedInBindings = null;
                                    signedInSignal.complete()
                                }});
                            signInPromise = signedInSignal.promise
                        }
                        else
                            signInPromise = signIn.signIn();
                        return signInPromise.then(function onSignInComplete(value) {
                                var successfulSignIn = signIn.isSignedIn && !signIn.isSigningOut;
                                var showRegionMismatchDialog = false;
                                var navigationService = MS.Entertainment.Utilities.isVideoApp2 && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                if (MS.Entertainment.Utilities.isVideoApp2)
                                    showRegionMismatchDialog = successfulSignIn && !MS.Entertainment.Utilities.appRegionMatchesMachineRegion();
                                if (showRegionMismatchDialog)
                                    return MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_VIDEO2_REGION_WARNING_TITLE), String.load(String.id.IDS_VIDEO2_REGION_WARNING_BODY), {dismissOnNavigateDelay: 30000}).then(function onDialogDismissed() {
                                            return {regionBlocked: true}
                                        });
                                else if (navigationService && navigationService.checkUserLocation(MS.Entertainment.UI.Monikers.root))
                                    return WinJS.Promise.wrap({navigatedAway: true});
                                else if (successfulSignIn) {
                                    var mediaItemsToCheck = (mediaItem && mediaItem.isBundle) ? mediaItem.bundledItems : [mediaItem];
                                    var purchasePromises = mediaItemsToCheck.map(function checkItem(mediaItem) {
                                            if (!mediaItem)
                                                return WinJS.Promise.as();
                                            return this._getDatabaseAndServiceRights(mediaItem)
                                        }.bind(this));
                                    return WinJS.Promise.join(purchasePromises).then(function onComplete(completedArray) {
                                            if (!completedArray || !Array.isArray(completedArray))
                                                return WinJS.Promise.wrapError(new Error("Invalid result returned from promise chain"));
                                            var totalItems = 0;
                                            var databaseHasAnyRights = 0;
                                            var serviceRights = 0;
                                            var serviceFailures = false;
                                            var aggregatedResults = {
                                                    isFullyOwnedInDb: false, isFullyOwnedInCloud: false, allItemsFoundOnce: true
                                                };
                                            completedArray.forEach(function aggregateResults(completePromise) {
                                                if (!completePromise)
                                                    return;
                                                totalItems += 1;
                                                var completedPromiseDbRights = completePromise.databaseRights;
                                                var hasDatabaseRights = completedPromiseDbRights.canPurchaseDownload || completedPromiseDbRights.canPurchaseStream || completedPromiseDbRights.canRentDownload || completedPromiseDbRights.canRentStream;
                                                databaseHasAnyRights += hasDatabaseRights ? 1 : 0;
                                                serviceRights += WinJS.Utilities.getMember("serviceRights.addedEntitlements", completePromise) ? 1 : 0;
                                                if (WinJS.Utilities.getMember("serviceRights.hasFailures", completePromise)) {
                                                    serviceFailures = true;
                                                    return
                                                }
                                                if (!databaseHasAnyRights && !serviceRights)
                                                    aggregatedResults.allItemsFoundOnce = false
                                            });
                                            aggregatedResults.isFullyOwnedInDb = (databaseHasAnyRights >= totalItems);
                                            aggregatedResults.isFullyOwnedInCloud = (serviceRights >= totalItems);
                                            var telemetryParameterArray = [];
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseTotalItems, parameterValue: totalItems
                                            });
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseDatabaseRights, parameterValue: databaseHasAnyRights
                                            });
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseServicePurchaseRights, parameterValue: serviceRights
                                            });
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseServiceFailure, parameterValue: serviceFailures
                                            });
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseRentalConfigSetting, parameterValue: configurationManager.service.blockVideoRentalsDuringGrovel
                                            });
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseAllItemFoundOnce, parameterValue: aggregatedResults.allItemsFoundOnce
                                            });
                                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseInventoryCheck, mediaItem, null, telemetryParameterArray);
                                            if (serviceFailures)
                                                return WinJS.Promise.wrapError(new Error("RefreshAsync had a service Failure"));
                                            return aggregatedResults
                                        }.bind(this))
                                }
                                else
                                    return WinJS.Promise.wrapError(new Error("User did not sign in during purchase attempt"))
                            }.bind(this))
                    }.bind(this)).then(function onServiceEntitlementsCheck(contentRights) {
                        contentRights = contentRights || {};
                        if (contentRights.regionBlocked) {
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseRegionBlocked, mediaItem);
                            return true
                        }
                        if (contentRights.navigatedAway) {
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseNavigatedAway, mediaItem);
                            return true
                        }
                        if (contentRights.sl2KBlocked) {
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseNoSL2K, mediaItem);
                            return true
                        }
                        var blockPurchaseDialog = false;
                        if (contentRights.isFullyOwnedInDb) {
                            blockPurchaseDialog = true;
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseFullyOwnedInDb, mediaItem)
                        }
                        else if (contentRights.isFullyOwnedInCloud) {
                            this._showNoPurchaseDuringGrovelMessageBox();
                            blockPurchaseDialog = true;
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseFullyOwnedInCloud, mediaItem)
                        }
                        else if (contentRights.allItemsFoundOnce) {
                            this._showNoPurchaseDuringGrovelMessageBox();
                            blockPurchaseDialog = true;
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseAllItemsFoundOnce, mediaItem)
                        }
                        if (!blockPurchaseDialog)
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseAllowed, mediaItem);
                        return blockPurchaseDialog
                    }.bind(this)).then(function returnBlockDialog(blockPurchaseDialog) {
                        if (blockPurchaseDialog)
                            MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false);
                        return blockPurchaseDialog
                    }, function onError(error) {
                        var blockPurchaseOnServiceFailure = configurationManager.service.blockPurchaseOnServiceFailure;
                        var isServiceFailure;
                        if (!WinJS.Promise.isCanceledError(error) && error !== MS.Entertainment.Platform.PurchaseHelpers.Error.NS_E_ERROR_CANCELLED_HR_FROM_WIN32 && error !== MS.Entertainment.Platform.PurchaseHelpers.Error.NS_E_ERROR_NO_SUCH_USER_HR_FROM_WIN32 && !Array.isArray(error)) {
                            MS.Entertainment.fail("displayPurchaseBlockingDialog failed with error: " + ((error && error.message) || error));
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseErrorGeneric, mediaItem, error)
                        }
                        if (error && Array.isArray(error))
                            for (var i = 0; i < error.length; i++) {
                                var serviceRightsQuery = error[i] && error[i].serviceRights;
                                if (serviceRightsQuery instanceof Error && !WinJS.Promise.isCanceledError(serviceRightsQuery)) {
                                    isServiceFailure = true;
                                    MS.Entertainment.fail("Inventory call for purchased items failed with error code: " + serviceRightsQuery.number + " and message: " + serviceRightsQuery.message);
                                    this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseErrorPurchase, mediaItem, serviceRightsQuery)
                                }
                            }
                        if (isServiceFailure && blockPurchaseOnServiceFailure)
                            MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_PURCHASE_ERROR_MESSAGE_TITLE), String.load(String.id.IDS_PURCHASE_ERROR_MESSAGE));
                        var blockPurchase = (!signIn.isSignedIn || signIn.isSigningOut || blockPurchaseOnServiceFailure);
                        if (blockPurchase)
                            MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true);
                        return blockPurchase
                    }.bind(this))
            }, _sendPurchaseBlockTelemetry: function _sendPurchaseBlockTelemetry(telemetryEvent, media, error, telemetryParameterArray) {
                var telemetryParameterArray = telemetryParameterArray || [];
                if (!MS.Entertainment.Utilities.isEmptyGuid(media.canonicalId))
                    telemetryParameterArray.push({
                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BingMediaId, parameterValue: media.canonicalId
                    });
                if (!MS.Entertainment.Utilities.isEmptyGuid(media.zuneId))
                    telemetryParameterArray.push({
                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProviderMediaId, parameterValue: media.zuneId
                    });
                if (error && error.message)
                    telemetryParameterArray.push({
                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Error, parameterValue: error.message
                    });
                if (error && error.number)
                    telemetryParameterArray.push({
                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, parameterValue: error.number
                    });
                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(telemetryEvent, telemetryParameterArray)
            }, freePurchaseFlow: function freePurchaseFlow(mediaItem, offerId, currencyCode, purchaseType, startPlayback, signedOffer, offer, playbackSource) {
                MS.Entertainment.Utilities.assert(mediaItem, "freePurchaseFlow requires a mediaItem");
                if (!playbackSource)
                    playbackSource = MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.details;
                var mediaIsTVSeason = MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem);
                var productGuid = mediaIsTVSeason ? mediaItem.edsId || mediaItem.canonicalId : mediaItem.serviceId || mediaItem.zuneId;
                var commonTelemetryParams = [{
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: MS.Entertainment.Utilities.Telemetry.getCorrelationId(productGuid)
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PurchaseFlowId, parameterValue: Microsoft.Entertainment.Marketplace.Marketplace.generateGuid()
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: productGuid || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ParentProductGuid, parameterValue: MS.Entertainment.Utilities.Telemetry.getParentProductGuid(mediaItem)
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignedOfferGuid, parameterValue: offerId || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DeliveryFormat, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.DELIVERY_FORMAT_STREAMING
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DistributionRight, parameterValue: purchaseType || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DisplayPrice, parameterValue: WinJS.Utilities.getMember("price", offer) || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PageURI, parameterValue: MS.Entertainment.Utilities.getCurrentUserLocation()
                        }];
                var navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                var fullScreenNowPlayingOptions = {
                        mediaItem: mediaItem, showNotifications: false
                    };
                var didNavigate = navigation.navigateTo(MS.Entertainment.UI.Monikers.fullScreenNowPlaying, null, null, fullScreenNowPlayingOptions);
                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                var signInPromise = signIn.signIn();
                return signInPromise.then(function signInComplete(value) {
                        if (value === MS.Entertainment.Utilities.SignIn.SignInResult.success)
                            return MS.Entertainment.Platform.PurchaseHelpers.getItemPurchaseAndRentStateAsync(mediaItem, true).then(function onGetItemPurchaseAndRentState(state) {
                                    var ownItem = (state.canPurchaseDownload || state.canPurchaseStream);
                                    if (ownItem) {
                                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_CONTENT_ALREADY_OWNED
                                                }]);
                                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                                        MS.Entertainment.Platform.PlaybackHelpers.playMedia2(mediaItem, {
                                            doNotNavigate: didNavigate, sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, startPositionMsec: 0, showImmersive: true, playbackSource: playbackSource, immersiveOptions: {
                                                    sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, startFullScreen: true
                                                }
                                        });
                                        return WinJS.Promise.wrapError("Content Already Owned")
                                    }
                                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                    if (signedInUser.isParentallyControlled)
                                        return WinJS.Promise.wrapError("Parental Controlled User");
                                    if (MS.Entertainment.Utilities.isVideoApp2) {
                                        var currentUser = signIn.getAppCurrentUser();
                                        return Windows.Xbox.ApplicationModel.Store.Product.checkPrivilegeAsync(currentUser, 193, false, String.empty).then(function success(result) {
                                                if (result === Windows.Xbox.ApplicationModel.Store.PrivilegeCheckResult.restricted)
                                                    return WinJS.Promise.wrapError("Free Content Blocked User");
                                                return WinJS.Promise.wrap()
                                            }, function error() {
                                                return WinJS.Promise.wrapError("Unexpected Error")
                                            })
                                    }
                                    return WinJS.Promise.wrap()
                                });
                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_SIGN_IN_FAILED
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                        return WinJS.Promise.wrapError("Sign in Failed")
                    }, function signInError(error) {
                        if (didNavigate) {
                            navigation.navigateBack();
                            didNavigate = false
                        }
                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_SIGN_IN_FAILED
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                        return WinJS.Promise.wrapError("Sign in Failed")
                    }).then(function signIn_complete() {
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseReviewStart, commonTelemetryParams);
                        return Microsoft.Entertainment.Fulfillment.Video.Entitlements.purchaseOfferAsync(signedOffer)
                    }).then(function purchaseOfferAsync_complete() {
                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.SUCCESS
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray);
                        MS.Entertainment.Platform.PurchaseHelpers.downloadClosedCaptionFiles(mediaItem);
                        return MS.Entertainment.Platform.PurchaseHelpers.addMedia(mediaItem, [offerId], true)
                    }).then(function addMediaComplete() {
                        if (startPlayback)
                            if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason) {
                                if (mediaItem.episodes && mediaItem.episodes.count > 0)
                                    mediaItem.episodes.itemsFromIndex(0, 0, mediaItem.episodes.count).done(function gotLatestEpisode(latestEpisodes) {
                                        if (latestEpisodes && latestEpisodes.items && latestEpisodes.items.length > 0) {
                                            var firstEpisode = null;
                                            var i = 0;
                                            for (i = 0; i < latestEpisodes.items.length; i++) {
                                                var episode = latestEpisodes.items[i].data;
                                                if (episode.episodeNumber !== 0) {
                                                    firstEpisode = episode;
                                                    break
                                                }
                                            }
                                            if (!firstEpisode)
                                                firstEpisode = latestEpisodes.items[0].data;
                                            if (episode)
                                                MS.Entertainment.Platform.PlaybackHelpers.playMedia2(episode, {
                                                    doNotNavigate: didNavigate, sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, startPositionMsec: 0, showImmersive: true, playbackSource: playbackSource, immersiveOptions: {
                                                            sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, startFullScreen: true
                                                        }
                                                })
                                        }
                                    })
                            }
                            else {
                                var tunerConfigSignal = new MS.Entertainment.UI.Framework.Signal;
                                if (MS.Entertainment.Utilities.isVideoApp2) {
                                    var configuration = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                    var minDate = new Date(Date.now() - 24 * 60 * 60 * 1000);
                                    if (configuration.service.configLastDownload < minDate) {
                                        var tunerConfigDownloaded = function tunerConfigDownloaded() {
                                                tunerConfigSignal.complete();
                                                MS.Entertainment.FeatureEnablement._featureEnablement.removeEventListener("featureschangedevent", tunerConfigDownloaded, false)
                                            };
                                        MS.Entertainment.FeatureEnablement._featureEnablement.addEventListener("featureschangedevent", tunerConfigDownloaded, false);
                                        (new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement).checkForNewFeatures()
                                    }
                                    else
                                        tunerConfigSignal.complete()
                                }
                                else
                                    tunerConfigSignal.complete();
                                tunerConfigSignal.promise.done(function playTheMedia() {
                                    MS.Entertainment.Platform.PlaybackHelpers.playMedia2(mediaItem, {
                                        doNotNavigate: didNavigate, sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, startPositionMsec: 0, showImmersive: true, playbackSource: playbackSource, immersiveOptions: {
                                                sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, startFullScreen: true
                                            }
                                    })
                                })
                            }
                    }, function purchaseFreeOfferError(error) {
                        if (didNavigate) {
                            navigation.navigateBack();
                            didNavigate = false
                        }
                        if (error !== "Sign in Failed" && error !== "Content Already Owned") {
                            var target = MS.Entertainment.Utilities.isApp1 ? MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET : MS.Entertainment.Platform.PurchaseHelpers.CONSOLE_TARGET;
                            MS.Entertainment.Platform.PurchaseHelpers.launchPurchaseFlow(mediaItem, target, purchaseType, null, offerId, null, null, signedOffer)
                        }
                    })
            }, launchPurchaseFlow: function launchPurchaseFlow(mediaItem, target, purchaseType, eventHandlers, offerId, returnUri, gamerTag, signedOffer, offer) {
                if (!offerId || !signedOffer) {
                    MS.Entertainment.fail("PurchaseHelpers: No offerId or signedOffer defined");
                    if (eventHandlers && eventHandlers.onShowWebHostDialogComplete)
                        eventHandlers.onShowWebHostDialogComplete();
                    return
                }
                var mediaIsTVSeason = MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem);
                var productGuid = mediaIsTVSeason ? mediaItem.edsId || mediaItem.canonicalId : mediaItem.serviceId || mediaItem.zuneId;
                var purchaseFlowId = Microsoft.Entertainment.Marketplace.Marketplace.generateGuid();
                var commonTelemetryParams = [{
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: MS.Entertainment.Utilities.Telemetry.getCorrelationId(productGuid)
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PurchaseFlowId, parameterValue: purchaseFlowId
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: productGuid || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ParentProductGuid, parameterValue: MS.Entertainment.Utilities.Telemetry.getParentProductGuid(mediaItem)
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignedOfferGuid, parameterValue: offerId || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DistributionRight, parameterValue: purchaseType || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PageURI, parameterValue: MS.Entertainment.Utilities.getCurrentUserLocation()
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DisplayPrice, parameterValue: WinJS.Utilities.getMember("price", offer) || String.empty
                        }];
                if (!MS.Entertainment.UI.NetworkStatusService.isOnline())
                {
                    var error = MS.Entertainment.Platform.Playback.Error.NS_E_WMPIM_USEROFFLINE;
                    MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_FAILED_PANEL_HEADER), error.code);
                    var telemetryParameterArray = commonTelemetryParams.concat([{
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, parameterValue: error.code
                            }, {
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: error.name
                            }]);
                    MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                    if (eventHandlers && eventHandlers.onShowWebHostDialogComplete)
                        eventHandlers.onShowWebHostDialogComplete();
                    return
                }
                var serviceId = mediaItem.hasZuneId ? mediaItem.zuneId : mediaItem.serviceId;
                var unsnappingPromise;
                if (!target)
                    target = this.PC_TARGET;
                var indivPromise = MS.Entertainment.Utilities.isVideoApp ? MS.Entertainment.Utilities.DRM.individualizationAsync() : WinJS.Promise.as();
                WinJS.Promise.join({
                    blockPurchase: MS.Entertainment.Platform.PurchaseHelpers.displayPurchaseBlockingDialog(mediaItem), indivPromise: indivPromise
                }).done(function(args) {
                    if (args.blockPurchase) {
                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_BLOCK_PURCHASE
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                        if (eventHandlers && eventHandlers.onShowWebHostDialogComplete)
                            eventHandlers.onShowWebHostDialogComplete();
                        return
                    }
                    var flowProvider;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.purchaseFlowProvider))
                        flowProvider = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseFlowProvider);
                    if (flowProvider) {
                        var purchaseFlow = flowProvider.getPurchaseFlow(mediaItem, serviceId, target, purchaseType, offerId, returnUri, gamerTag);
                        if (purchaseFlow && purchaseFlow.purchaseExp) {
                            if (eventHandlers) {
                                purchaseFlow.purchaseExp.onStartEvent = eventHandlers.onStartEvent;
                                purchaseFlow.purchaseExp.onMessageEvent = eventHandlers.onMessageEvent;
                                purchaseFlow.purchaseExp.onErrorEvent = eventHandlers.onErrorEvent;
                                purchaseFlow.purchaseExp.onFinishedEvent = eventHandlers.onFinishedEvent;
                                purchaseFlow.purchaseExp.onCancelEvent = eventHandlers.onCancelEvent;
                                purchaseFlow.purchaseExp.onPageLoadEvent = eventHandlers.onPageLoadEvent;
                                purchaseFlow.purchaseExp.onMediaAddedEvent = eventHandlers.onMediaAddedEvent
                            }
                            if (Windows.UI.ViewManagement.ApplicationView && Windows.UI.ViewManagement.ApplicationView.tryUnsnap())
                                unsnappingPromise = WinJS.Promise.timeout();
                            WinJS.Promise.as(unsnappingPromise).then(function applicationIsUnsnapped() {
                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseReviewStart, commonTelemetryParams);
                                purchaseFlow.purchaseExp.mediaItem = mediaItem;
                                purchaseFlow.purchaseExp.offerIds = [offerId];
                                return MS.Entertainment.UI.Shell.showWebHostDialog(null, {
                                        desiredLeft: "0%", desiredTop: null, desiredHeight: (new Microsoft.Entertainment.Configuration.ConfigurationManager).service.modernWebBlendHeight, showBackButton: false, showCancelButton: false
                                    }, {
                                        sourceUrl: String.empty, authenticatedSourceUrl: purchaseFlow.purchaseUrl, webHostExperience: purchaseFlow.purchaseExp, taskId: purchaseFlow.taskId, isDialog: true, offer: signedOffer, flowId: purchaseFlowId, finishedListener: function purchaseFlowSucceeded() {
                                                var telemetryParameterArray = commonTelemetryParams.concat([{
                                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.SUCCESS
                                                        }]);
                                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray)
                                            }, errorListener: function purchaseFlowError(errorCode) {
                                                var telemetryParameterArray = commonTelemetryParams.concat([{
                                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.FAILURE
                                                        }, {
                                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SystemErrorCode, parameterValue: errorCode
                                                        }]);
                                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray)
                                            }, cancelListener: function purchaseFlowCancelled() {
                                                var telemetryParameterArray = commonTelemetryParams.concat([{
                                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.FAILURE
                                                        }, {
                                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.CANCELLED
                                                        }]);
                                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray)
                                            }
                                    })
                            }).done(function showWebHostDialogComplete() {
                                if (offerId && mediaItem && MS.Entertainment.Utilities.isApp2 && !MS.Entertainment.isAppModeOverride) {
                                    MS.Entertainment.Platform.PurchaseHelpers.addMedia(mediaItem, [offerId], true);
                                    var telemetryParameterArray = commonTelemetryParams.concat([{
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.SUCCESS
                                            }]);
                                    MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray);
                                    MS.Entertainment.Utilities.Telemetry.logVideoPurchaseAttempt(mediaItem, offer, MS.Entertainment.Utilities.Telemetry.PurchaseStates.Succeeded)
                                }
                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false);
                                if (eventHandlers && eventHandlers.onShowWebHostDialogComplete)
                                    eventHandlers.onShowWebHostDialogComplete()
                            }, function showWebHostDialogError(error) {
                                var telemetryParameterArray = commonTelemetryParams.concat([{
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.FAILURE
                                        }]);
                                if (error && error.name)
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: error.name
                                    });
                                if (error && error.number)
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SystemErrorCode, parameterValue: error.number
                                    });
                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray);
                                var canceled = error && error.name === "Canceled";
                                var purchaseState;
                                if (canceled)
                                    purchaseState = MS.Entertainment.Utilities.Telemetry.PurchaseStates.Canceled;
                                else
                                    purchaseState = MS.Entertainment.Utilities.Telemetry.PurchaseStates.Failed;
                                MS.Entertainment.Utilities.Telemetry.logVideoPurchaseAttempt(mediaItem, offer, purchaseState);
                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(!canceled);
                                if (!canceled && eventHandlers && eventHandlers.onShowWebHostDialogError)
                                    eventHandlers.onShowWebHostDialogError()
                            })
                        }
                        else {
                            var telemetryParameterArray = commonTelemetryParams.concat([{
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_NO_PURCHASE_FLOW_EXP
                                    }]);
                            MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                            MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                        }
                    }
                    else {
                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_NO_PURCHASE_FLOW_PROVIDER
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                        MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                    }
                })
            }, getServiceIdAsync: function(fileItem) {
                var extraPropIds = [];
                extraPropIds.push("System.Media.UniqueFileIdentifier");
                return fileItem.properties.retrievePropertiesAsync(extraPropIds).then(function onRetrieveUniqueFileIdentifierSuccess(extraProps) {
                        var uniqueFileIdentifier = extraProps["System.Media.UniqueFileIdentifier"];
                        var serviceId = null;
                        if (uniqueFileIdentifier) {
                            var matched = uniqueFileIdentifier.match(/(X_id=\{[^;]*})/);
                            if (matched) {
                                serviceId = matched[0];
                                serviceId = serviceId.match(/{.+}/)[0];
                                serviceId = serviceId.substring(1, serviceId.length - 1)
                            }
                        }
                        return serviceId
                    }, function onRetrieveUniqueFileIdentifierError() {
                        return null
                    })
            }, queryMediaDetailForCacheItemAsync: function queryMediaDetailForCacheItemAsync(cacheItemWithData, mediaType) {
                if (!cacheItemWithData)
                    return WinJS.Promise.wrapError(new Error("Expected a valid item."));
                var getSmid;
                if (!cacheItemWithData.data.zuneId || MS.Entertainment.Utilities.isEmptyGuid(cacheItemWithData.data.zuneId))
                    if (!cacheItemWithData.data.fileItem)
                        return WinJS.Promise.wrapError(new Error("Expected a valid marketplace service id."));
                if (!mediaType) {
                    mediaType = cacheItemWithData.data.mediaType;
                    if (!mediaType)
                        return WinJS.Promise.wrapError(new Error("Expected a valid media type."))
                }
                var getSmid = WinJS.Promise.as(cacheItemWithData.data.zuneId);
                if (!cacheItemWithData.data.zuneId && cacheItemWithData.data.fileItem)
                    getSmid = this.getServiceIdAsync(cacheItemWithData.data.fileItem);
                return getSmid.then(function(smid) {
                        if (!cacheItemWithData.data.zuneId && !smid)
                            return WinJS.Promise.wrapError(new Error("Expected a valid marketplace service id."));
                        cacheItemWithData.data.zuneId = smid;
                        var detailProperty;
                        var query;
                        if (mediaType === Microsoft.Entertainment.Queries.ObjectType.track) {
                            detailProperty = "Music.SongDetails";
                            query = new MS.Entertainment.Data.Query.Music.SongDetails
                        }
                        else if (mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                            detailProperty = "Video.EdsDetailMovie";
                            query = new MS.Entertainment.Data.Query.Video.EdsDetailMovie
                        }
                        else
                            return WinJS.Promise.wrapError(new Error("The media type is not supported."));
                        if (cacheItemWithData.data[detailProperty])
                            return WinJS.Promise.wrap(cacheItemWithData.data[detailProperty]);
                        query.id = smid;
                        query.idType = cacheItemWithData.data.serviceIdType;
                        query.impressionGuid = cacheItemWithData.data.impressionGuid;
                        query.relevancyTrackingContent = cacheItemWithData.data.relevancyTrackingContent;
                        return query.execute().then(function(detail) {
                                cacheItemWithData.data[detailProperty] = detail;
                                return WinJS.Promise.wrap(detail)
                            })
                    })
            }, getPreferredRight: function getPreferredRight(rights, licenseRightsOrderedByPreference) {
                if (!Array.isArray(rights) || !Array.isArray(licenseRightsOrderedByPreference))
                    return null;
                for (var i = 0; i < licenseRightsOrderedByPreference.length; i++) {
                    var nativeLicenseRight = MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(licenseRightsOrderedByPreference[i]);
                    for (var j = 0; j < rights.length; j++)
                        if (nativeLicenseRight === MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(rights[j].licenseRight))
                            return rights[j]
                }
                return null
            }, filterRights: function filterRights(sourceRights, filterLicenseRights) {
                var rights = [];
                if (!Array.isArray(sourceRights))
                    return rights;
                if (!Array.isArray(filterLicenseRights) || filterLicenseRights.length === 0)
                    return sourceRights;
                for (var i = 0; i < filterLicenseRights.length; i++)
                    for (var j = 0; j < sourceRights.length; j++)
                        if (MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(filterLicenseRights[i]) === MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(sourceRights[j].licenseRight)) {
                            rights.push(sourceRights[j]);
                            break
                        }
                return rights
            }, mapLicenseRightArrayToNative: function mapLicenseRightArrayToNative(licenseRights) {
                var nativeLicenseRights = [];
                if (!Array.isArray(licenseRights))
                    return nativeLicenseRights;
                for (var i = 0; i < licenseRights.length; i++)
                    nativeLicenseRights.push(MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(licenseRights[i]));
                return nativeLicenseRights
            }, getAssetLocationsRequestInfo: function getAssetLocationsRequestInfo(serviceMediaId, rights, filterLicenseRights) {
                var requestInfo = {
                        serviceMediaIds: [], mediaInstanceIds: [], nativeLicenseRights: [], offerIds: []
                    };
                if (serviceMediaId && !MS.Entertainment.Utilities.isEmptyGuid(serviceMediaId)) {
                    var rights = MS.Entertainment.Platform.PurchaseHelpers.filterRights(rights, filterLicenseRights);
                    var mediaInstanceIds = [];
                    for (var i = 0; i < rights.length; i++) {
                        var mediaInstanceId = rights[i].mediaInstanceId;
                        var offerId = rights[i].offerId;
                        if (mediaInstanceId && !MS.Entertainment.Utilities.isEmptyGuid(mediaInstanceId)) {
                            requestInfo.serviceMediaIds.push(serviceMediaId);
                            requestInfo.mediaInstanceIds.push(mediaInstanceId);
                            requestInfo.nativeLicenseRights.push(MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(rights[i].licenseRight));
                            requestInfo.offerIds.push((!offerId || MS.Entertainment.Utilities.isEmptyGuid(offerId)) ? null : offerId)
                        }
                    }
                }
                return requestInfo
            }, getAssetLocationsAsync: function getAssetLocationsAsync(serviceMediaId, rights, filterLicenseRights, autoActivateMachine, context, ticket) {
                var requestInfo = MS.Entertainment.Platform.PurchaseHelpers.getAssetLocationsRequestInfo(serviceMediaId, rights, filterLicenseRights);
                return MS.Entertainment.Platform.PurchaseHelpers.getAssetLocationsUsingRequestInfoAsync(requestInfo, autoActivateMachine, context, ticket)
            }, getAssetLocationsUsingRequestInfoAsync: function getAssetLocationsUsingRequestInfoAsync(requestInfo, autoActivateMachine, context, ticket, skipSubscriptionFiltering) {
                if (!requestInfo || !Array.isArray(requestInfo.mediaInstanceIds) || requestInfo.mediaInstanceIds.length === 0)
                    return WinJS.Promise.wrap([]);
                if (!Array.isArray(requestInfo.nativeLicenseRights) || requestInfo.mediaInstanceIds.length !== requestInfo.nativeLicenseRights.length)
                    return WinJS.Promise.wrapError(new Error("The input mediaInstanceIds and licenseRights must be arrays of equal length."));
                if (!Array.isArray(requestInfo.offerIds) || requestInfo.mediaInstanceIds.length !== requestInfo.offerIds.length)
                    return WinJS.Promise.wrapError(new Error("The input mediaInstanceIds and offerIds must be arrays of equal length."));
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                if (!skipSubscriptionFiltering && (!ticket || !configurationManager.service.lastSignedInUserSubscription))
                    for (var i = 0; i < requestInfo.nativeLicenseRights.length; i++)
                        switch (requestInfo.nativeLicenseRights[i]) {
                            case Microsoft.Entertainment.Marketplace.MarketplaceMediaRights.subscriptionDownload:
                            case Microsoft.Entertainment.Marketplace.MarketplaceMediaRights.subscriptionStream:
                                requestInfo.serviceMediaIds.splice(i, 1);
                                requestInfo.mediaInstanceIds.splice(i, 1);
                                requestInfo.nativeLicenseRights.splice(i, 1);
                                requestInfo.offerIds.splice(i, 1);
                                i--;
                                break
                        }
                if (requestInfo.mediaInstanceIds.length === 0)
                    return WinJS.Promise.wrap([]);
                if (requestInfo.nativeLicenseRights.length === 1 && requestInfo.nativeLicenseRights[0] === Microsoft.Entertainment.Marketplace.MarketplaceMediaRights.freeStream && !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                    ticket = null;
                requestInfo = {
                    serviceMediaIds: [requestInfo.serviceMediaIds[0]], mediaInstanceIds: [requestInfo.mediaInstanceIds[0]], nativeLicenseRights: [requestInfo.nativeLicenseRights[0]], offerIds: [requestInfo.offerIds[0]]
                };
                return Microsoft.Entertainment.Marketplace.Marketplace.getAssetLocationsAsync(ticket ? ticket : String.empty, requestInfo.serviceMediaIds, requestInfo.mediaInstanceIds, requestInfo.nativeLicenseRights, [], context ? [context] : [], !!autoActivateMachine).then(function getAssetLocationsAsync_complete(jsonAssetLocations) {
                        var assetLocations = JSON.parse(jsonAssetLocations).results;
                        assetLocations[0].offerId = requestInfo.offerIds[0];
                        return WinJS.Promise.wrap(assetLocations)
                    }.bind(this))
            }, ensurePreownedMediaAddedAsync: function ensurePreownedMediaAddedAsync(media) {
                var addMediaResult = MS.Entertainment.Platform.PurchaseHelpers.createAddMediaResult();
                if (!media || !media.mediaType || (!MS.Entertainment.Utilities.isMusicApp && !MS.Entertainment.Utilities.isVideoApp))
                    return WinJS.Promise.wrap(addMediaResult);
                var promise = WinJS.Promise.wrap();
                var mediaList = [];
                var zuneIdList = [];
                var virtualMediaList = null;
                switch (media.mediaType) {
                    case Microsoft.Entertainment.Queries.ObjectType.video:
                    case Microsoft.Entertainment.Queries.ObjectType.track:
                        if (media.inCollection)
                            addMediaResult.addMedia(media);
                        else if (media.hasZuneId) {
                            mediaList.push(media);
                            zuneIdList.push(media.zuneId)
                        }
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.album:
                        virtualMediaList = media.tracks;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                        virtualMediaList = media.episodes;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.playlist:
                        virtualMediaList = media.tracks;
                        break;
                    default:
                        return WinJS.Promise.wrap(addMediaResult)
                }
                if (virtualMediaList)
                    promise = virtualMediaList.forEachAll(function itemsFromIndex_complete(args) {
                        var item = args.item.data;
                        if (item)
                            if (item.inCollection)
                                addMediaResult.addMedia(item);
                            else if (item.hasZuneId) {
                                mediaList.push(item);
                                zuneIdList.push(item.zuneId)
                            }
                    });
                return promise.then(function processMediaForAdding() {
                        if (!mediaList.length)
                            return WinJS.Promise.wrap(addMediaResult);
                        return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync(zuneIdList).then(function getMediaEntitlementsAsync_complete(result) {
                                var entitlements = JSON.parse(result).result.entitlements;
                                var promises = [];
                                for (var i = 0; i < mediaList.length; i++)
                                    if (MS.Entertainment.Utilities.isVideoApp) {
                                        var offerIds = [];
                                        if (entitlements[i].purchase.stream.isAvailable)
                                            offerIds.push(entitlements[i].purchase.stream.offerId);
                                        if (entitlements[i].purchase.download.isAvailable)
                                            offerIds.push(entitlements[i].purchase.download.offerId);
                                        if (entitlements[i].rent.stream.isAvailable)
                                            offerIds.push(entitlements[i].rent.stream.offerId);
                                        if (entitlements[i].rent.download.isAvailable)
                                            offerIds.push(entitlements[i].rent.download.offerId);
                                        if (offerIds.length > 0)
                                            promises.push(MS.Entertainment.Platform.PurchaseHelpers.addMedia(mediaList[i], offerIds).then(function addMedia_complete(addMediaResultInner) {
                                                addMediaResult.concat(addMediaResultInner);
                                                return WinJS.Promise.wrap(addMediaResultInner)
                                            }))
                                    }
                                    else if (entitlements[i].purchase.isAvailable || entitlements[i].rent.isAvailable || (entitlements[i].hasPurchase && entitlements[i].canFullyDownload))
                                        promises.push(MS.Entertainment.Platform.PurchaseHelpers.addMedia(mediaList[i]).then(function addMedia_complete(addMediaResultInner) {
                                            addMediaResult.concat(addMediaResultInner);
                                            return WinJS.Promise.wrap(addMediaResultInner)
                                        }));
                                return WinJS.Promise.join(promises).then(function addMedia_joinComplete() {
                                        return WinJS.Promise.wrap(addMediaResult)
                                    })
                            })
                    })
            }, addNonCollectionMediaToLibrary: function addNonCollectionMediaToLibrary(mediaItemsArray) {
                return MS.Entertainment.Platform.PurchaseHelpers._addNonCollectionMediaToLibrary(mediaItemsArray, false)
            }, tryAddNonCollectionMediaToLibrary: function tryAddNonCollectionMediaToLibrary(mediaItemsArray) {
                return MS.Entertainment.Platform.PurchaseHelpers._addNonCollectionMediaToLibrary(mediaItemsArray, true)
            }, _addNonCollectionMediaToLibrary: function _addNonCollectionMediaToLibrary(mediaItemsArray, ignoreErrors) {
                var serviceMediaIds = mediaItemsArray.map(function getServiceMediaId(mediaItem) {
                        return !MS.Entertainment.Utilities.isEmptyGuid(mediaItem.zuneId) ? mediaItem.zuneId : MS.Entertainment.Utilities.EMPTY_GUID
                    });
                var mediaTypes = mediaItemsArray.map(function getMediaType(mediaItem) {
                        return mediaItem.mediaType
                    });
                var mediaPropertySet = new Windows.Foundation.Collections.PropertySet;
                var propertySetPromises = mediaItemsArray.map(function populatePropertySets(mediaItem) {
                        return MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForMedia(mediaPropertySet, mediaItem)
                    });
                var marketplaceService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.marketplace);
                var addMedia = ignoreErrors ? marketplaceService.tryAddMedia : marketplaceService.addMedia;
                return WinJS.Promise.join(propertySetPromises).then(function propertySetPopulationComplete() {
                        return addMedia(serviceMediaIds, mediaTypes, [], mediaPropertySet, false)
                    }).then(function addMediaComplete(addMediaResult) {
                        var result = MS.Entertainment.Platform.PurchaseHelpers.parseJsonAddMediaResult(addMediaResult);
                        return WinJS.Promise.wrap(result)
                    })
            }, _populatePropertySetForArtist: function _populatePropertySetForArtist(artistPropertySet, artist) {
                var artistSimpleProperties = ["name", "hasSmartDJ", "hasSmartVJ", "imageResizeUri"];
                MS.Entertainment.Platform.PurchaseHelpers._addPropertiesToPropertySet(artistPropertySet, artist, artistSimpleProperties);
                if (artist.hasZuneId)
                    artistPropertySet["zuneId"] = artist.zuneId;
                if (artist.serviceIdType === MS.Entertainment.Data.Query.edsIdType.canonical)
                    artistPropertySet["bingId"] = artist.serviceId
            }, _populatePropertySetForAlbum: function _populatePropertySetForAlbum(propertySet, album) {
                MS.Entertainment.Platform.PurchaseHelpers.assert(album.hasZuneId, "Media passed into _populatePropertySetForAlbum does not have a valid zuneId");
                var albumPropertySet;
                var trackList = [];
                var albumSimpleProperties = ["imageResizeUri", "isExplicit", "name", "primaryGenreName", "releaseDate", "trackCount", "zuneId"];
                if (album.hasZuneId) {
                    albumPropertySet = MS.Entertainment.Platform.PurchaseHelpers._getOrCreatePropertySetWithKey(propertySet, album.zuneId);
                    MS.Entertainment.Platform.PurchaseHelpers._addPropertiesToPropertySet(albumPropertySet, album, albumSimpleProperties);
                    if (album.serviceIdType === MS.Entertainment.Data.Query.edsIdType.canonical)
                        albumPropertySet["bingId"] = album.serviceId;
                    if (album.rights)
                        MS.Entertainment.Platform.PurchaseHelpers._populateRightsForMedia(albumPropertySet, album);
                    if (album.artist) {
                        albumPropertySet["Artist"] = new Windows.Foundation.Collections.PropertySet;
                        MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForArtist(albumPropertySet["Artist"], album.artist)
                    }
                    if (album.tracks)
                        return album.tracks.forEachAll(function pushTrack(args) {
                                var track = args.item.data;
                                if (track) {
                                    trackList.push(track.zuneId);
                                    MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForTrack(propertySet, track)
                                }
                            }).then(function trackListPopulated() {
                                albumPropertySet["TrackList"] = trackList
                            }, function trackListError(e) {
                                albumPropertySet["TrackList"] = null
                            });
                    else
                        return WinJS.Promise.wrap()
                }
                return WinJS.Promise.wrap()
            }, _getOrCreatePropertySetWithKey: function _getOrCreatePropertySetWithKey(parentPropertySet, key) {
                if (!parentPropertySet.hasKey(key))
                    parentPropertySet[key] = new Windows.Foundation.Collections.PropertySet;
                return parentPropertySet[key]
            }, _addPropertiesToPropertySet: function _addPropertiesToPropertySet(propertySet, item, itemPropertiesList) {
                for (var itemProperty in itemPropertiesList)
                    propertySet[itemPropertiesList[itemProperty]] = item[itemPropertiesList[itemProperty]]
            }, _populateRightsForMedia: function _populateRightsForMedia(mediaPropertySet, media) {
                MS.Entertainment.Platform.PurchaseHelpers.assert(media.rights, "media did not have rights property");
                var rightsList = [];
                if (media.rights)
                    media.rights.forEach(function addRightToPropertySet(right) {
                        var rightPropertySet = new Windows.Foundation.Collections.PropertySet;
                        rightPropertySet["ProviderId"] = right.providerId;
                        rightPropertySet["LicenseRight"] = right.licenseRight;
                        rightPropertySet["Encoding"] = right.encoding;
                        rightPropertySet["MediaInstanceId"] = right.mediaInstanceId;
                        rightPropertySet["OfferId"] = right.offerId;
                        rightPropertySet["ClientTypes"] = right.clientTypes;
                        if (right.fulfillmentTicket)
                            rightPropertySet["FulfillmentTicket"] = right.fulfillmentTicket;
                        if (right.fulfillmentTicketExpirationDate)
                            rightPropertySet["FulfillmentTicketExpirationDate"] = right.fulfillmentTicketExpirationDate;
                        if (right.signedLicensePolicyTicket)
                            rightPropertySet["SignedLicensePolicyTicket"] = right.signedLicensePolicyTicket;
                        if (right.signedOffer)
                            rightPropertySet["SignedOffer"] = right.signedOffer;
                        rightsList.push(rightPropertySet)
                    });
                mediaPropertySet["Rights"] = rightsList
            }, _populatePropertySetForTrack: function _populatePropertySetForTrack(propertySet, track) {
                MS.Entertainment.Platform.PurchaseHelpers.assert(track.hasZuneId || track.fileItem, "Media passed into _populatePropertySetForMedia does not have a valid zuneId");
                var trackPropertySet;
                var trackSimpleProperties = ["durationSeconds", "genreName", "isExplicit", "imageResizeUri", "name", "releaseDate", "trackNumber", "zuneId"];
                if (track.hasZuneId) {
                    trackPropertySet = MS.Entertainment.Platform.PurchaseHelpers._getOrCreatePropertySetWithKey(propertySet, track.zuneId);
                    MS.Entertainment.Platform.PurchaseHelpers._addPropertiesToPropertySet(trackPropertySet, track, trackSimpleProperties);
                    if (track.artist) {
                        trackPropertySet["Artist"] = new Windows.Foundation.Collections.PropertySet;
                        MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForArtist(trackPropertySet["Artist"], track.artist)
                    }
                    if (track.rights)
                        MS.Entertainment.Platform.PurchaseHelpers._populateRightsForMedia(trackPropertySet, track);
                    if (track.serviceIdType === MS.Entertainment.Data.Query.edsIdType.canonical)
                        trackPropertySet["bingId"] = track.serviceId;
                    else if (track.serviceIdType === MS.Entertainment.Data.Query.edsIdType.amg)
                        trackPropertySet["amgId"] = track.serviceId;
                    if (track.album) {
                        if (track.album.artist) {
                            trackPropertySet["AlbumArtist"] = new Windows.Foundation.Collections.PropertySet;
                            MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForArtist(trackPropertySet["AlbumArtist"], track.album.artist)
                        }
                        trackPropertySet["albumZuneId"] = track.album.zuneId;
                        if (track.album.serviceIdType === MS.Entertainment.Data.Query.edsIdType.canonical)
                            trackPropertySet["albumBingId"] = track.album.serviceId;
                        trackPropertySet["albumName"] = track.album.name
                    }
                }
                return WinJS.Promise.wrap()
            }, _populatePropertySetForMedia: function _populatePropertySetForMedia(propertySet, media) {
                MS.Entertainment.Platform.PurchaseHelpers.assert(media.hasZuneId || media.fileItem, "Media passed into _populatePropertySetForMedia does not have a valid zuneId");
                var populatePromise;
                switch (media.mediaType) {
                    case Microsoft.Entertainment.Queries.ObjectType.album:
                        populatePromise = MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForAlbum(propertySet, media);
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.track:
                        populatePromise = MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForTrack(propertySet, media);
                        break;
                    default:
                        MS.Entertainment.Platform.PurchaseHelpers.assert(false, "Unknown mediaType passed to _populatePropertySetForMedia");
                        populatePromise = WinJS.Promise.wrap();
                        break
                }
                return populatePromise
            }, _showNoPurchaseDuringGrovelMessageBox: function _showNoPurchaseDuringGrovelMessageBox() {
                var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                var purchaseHistoryServiceIsGroveling = !!purchaseHistoryService.isGroveling;
                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.VideoPrePurchaseBlocked, [{
                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PurchaseHistoryServiceIsGroveling, parameterValue: purchaseHistoryServiceIsGroveling
                    }]);
                MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_DIALOG_PURCHASE_DURING_GROVEL_TITLE), String.load(String.id.IDS_DIALOG_PURCHASE_DURING_GROVEL_CAPTION));
                if (!purchaseHistoryServiceIsGroveling)
                    purchaseHistoryService.grovel()
            }, _getDatabaseAndServiceRights: function _getDatabaseAndServiceRights(mediaItem) {
                var i;
                var purchaseOfferIds = [];
                var rentalOfferIds = [];
                var defaultClientTypeFromApp = MS.Entertainment.Utilities.defaultClientTypeFromApp;
                var purchaseRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers.getMatchingRights(mediaItem, defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PurchaseStream, ], {
                        freeOnly: false, excludeFree: false, allowPartialRights: false, includeExpired: true, useUnfilteredRights: true
                    });
                var rentalRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers.getMatchingRights(mediaItem, defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream, ]);
                var filterToOfferIds = [];
                for (i = 0; i < purchaseRights.length; ++i) {
                    var currentRight = purchaseRights[i];
                    if (currentRight && filterToOfferIds.indexOf(currentRight.offerId) === -1) {
                        MS.Entertainment.assert(currentRight.offerId, "PurchaseHelpers: Invalid offerId: " + currentRight.offerId);
                        filterToOfferIds.push(currentRight.offerId)
                    }
                }
                for (i = 0; i < rentalRights.length; ++i) {
                    var currentRight = rentalRights[i];
                    if (currentRight && filterToOfferIds.indexOf(currentRight.offerId) === -1) {
                        MS.Entertainment.assert(currentRight.offerId, "PurchaseHelpers: Invalid offerId: " + currentRight.offerId);
                        filterToOfferIds.push(currentRight.offerId)
                    }
                }
                return WinJS.Promise.join({
                        databaseRights: MS.Entertainment.Platform.PurchaseHelpers.getItemPurchaseAndRentStateAsync(mediaItem, true), serviceRights: MS.Entertainment.UI.PurchaseHistoryService.refreshVideoOffersAsync(filterToOfferIds)
                    })
            }, addSubscriptionMedia: function addSubscriptionMedia(media) {
                MS.Entertainment.Platform.PurchaseHelpers.assert(media, "Invalid media item passed into addSubscriptionMedia");
                var serviceIds = [];
                var mediaTypes = [];
                var mediaItemsToHydrate = null;
                var getServiceIdsPromise = null;
                var populatePromise = null;
                var hasExplicitPrivilege = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).hasExplicitPrivilege;
                if (MS.Entertainment.Data.List.isListOrArray(media))
                    getServiceIdsPromise = MS.Entertainment.Data.List.listToArray(media).then(function _addServiceIdsToArray(mediaItemsArray) {
                        var fileTransferNotifications = null;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.fileTransferNotifications))
                            fileTransferNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransferNotifications);
                        var explicitContentBlocked = false;
                        var propertySetPromises = [];
                        var mediaPropertySet = new Windows.Foundation.Collections.PropertySet;
                        mediaItemsToHydrate = mediaItemsArray;
                        mediaItemsArray.forEach(function _getMediaData(mediaItem) {
                            var hydratePromise = WinJS.Promise.as();
                            if (MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(mediaItem)) {
                                mediaItem = mediaItem.track;
                                hydratePromise = mediaItem.hydrate()
                            }
                            propertySetPromises.push(hydratePromise.then(function _addMediaItem() {
                                MS.Entertainment.Platform.PurchaseHelpers.assert(mediaItem.hasZuneId, "Media passed into addSubscriptionMedia does not have a valid zuneId");
                                if (!hasExplicitPrivilege && mediaItem.isExplicit) {
                                    if (fileTransferNotifications)
                                        fileTransferNotifications.setItemError(mediaItem.zuneId, MS.Entertainment.Platform.PurchaseHelpers.Error.NS_E_EXPLICIT_CONTENT_DOWNLOAD_BLOCKED);
                                    explicitContentBlocked = true
                                }
                                else {
                                    serviceIds.push(mediaItem.zuneId);
                                    mediaTypes.push(mediaItem.mediaType)
                                }
                                if (mediaItem.hydrated)
                                    return MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForMedia(mediaPropertySet, mediaItem)
                            }))
                        });
                        if (!mediaTypes.length && explicitContentBlocked)
                            return WinJS.Promise.wrapError(MS.Entertainment.Platform.PurchaseHelpers.Error.NS_E_EXPLICIT_CONTENT_DOWNLOAD_BLOCKED);
                        return WinJS.Promise.join(propertySetPromises).then(function returnData() {
                                return {
                                        serviceIds: serviceIds, mediaTypes: mediaTypes, mediaPropertySet: (propertySetPromises.length === 0) ? null : mediaPropertySet
                                    }
                            })
                    });
                else {
                    MS.Entertainment.Platform.PurchaseHelpers.assert(media.hasZuneId, "Media passed into addSubscriptionMedia does not have a valid zuneId");
                    serviceIds.push(media.zuneId);
                    mediaTypes.push(media.mediaType);
                    mediaItemsToHydrate = [media];
                    var mediaPropertySet = new Windows.Foundation.Collections.PropertySet;
                    populatePromise = MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForMedia(mediaPropertySet, media);
                    getServiceIdsPromise = populatePromise.then(function returnData() {
                        return {
                                serviceIds: serviceIds, mediaTypes: mediaTypes, mediaPropertySet: mediaPropertySet
                            }
                    })
                }
                return getServiceIdsPromise.then(function addIds(data) {
                        if (data.serviceIds.length)
                            return Microsoft.Entertainment.Marketplace.Marketplace.addMedia(data.serviceIds, data.mediaTypes, [], data.mediaPropertySet, true);
                        else
                            return WinJS.Promise.wrapError()
                    }).then(function addSubscriptionMedia_complete(jsonAddMediaResult) {
                        var addMediaResult = MS.Entertainment.Platform.PurchaseHelpers.parseJsonAddMediaResult(jsonAddMediaResult);
                        return addMediaResult.hydrateLibraryInfoAsync(mediaItemsToHydrate).then(function hydrateLibraryIdsAsync_complete() {
                                return addMediaResult
                            })
                    })
            }, createAddMediaResult: function createAddMediaResult() {
                return {
                        mediaIdentifiers: [], dbMediaIds: [], dbMediaTypes: [], addMedia: function addMedia(media) {
                                this.concat({mediaIdentifiers: [{
                                            libraryId: media.libraryId, libraryType: media.mediaType, mediaId: media.zuneId
                                        }]})
                            }, concat: function concat(addMediaResult) {
                                var countAdded = 0;
                                if (addMediaResult && addMediaResult.mediaIdentifiers)
                                    for (var i = 0; i < addMediaResult.mediaIdentifiers.length; i++)
                                        if (!this.contains(addMediaResult.mediaIdentifiers[i].libraryId, addMediaResult.mediaIdentifiers[i].libraryType)) {
                                            var addMediaResultElement = addMediaResult.mediaIdentifiers[i];
                                            this.mediaIdentifiers.push({
                                                libraryId: addMediaResultElement.libraryId, libraryType: addMediaResultElement.libraryType, mediaId: addMediaResultElement.mediaId
                                            });
                                            this.dbMediaIds.push(addMediaResultElement.libraryId);
                                            this.dbMediaTypes.push(addMediaResultElement.libraryType);
                                            countAdded++
                                        }
                                return countAdded
                            }, contains: function contains(libraryId, libraryType) {
                                for (var i = 0; i < this.mediaIdentifiers.length; i++)
                                    if (this.mediaIdentifiers[i].libraryId === libraryId && this.mediaIdentifiers[i].libraryType === libraryType)
                                        return true;
                                return false
                            }, getLibraryIdFromServiceMediaId: function getLibraryIdFromServiceMediaId(mediaId) {
                                if (mediaId && typeof(mediaId) === "string") {
                                    mediaId = mediaId.toLowerCase();
                                    for (var i = 0; i < this.mediaIdentifiers.length; i++)
                                        if (this.mediaIdentifiers[i].mediaId.toLowerCase() === mediaId)
                                            return this.mediaIdentifiers[i].libraryId
                                }
                                return -1
                            }, _hydrateSingleLibraryInfoAsync: function _hydrateSingleLibraryInfoAsync(mediaItem) {
                                if (!mediaItem || !mediaItem.mediaType)
                                    return WinJS.Promise.as();
                                return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(mediaItem).then(function hydrateLibraryInfoAsyncComplete() {
                                        if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                                            return mediaItem.tracks;
                                        else if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason)
                                            return mediaItem.episodes
                                    }).then(function populateVirtualList(virtualList) {
                                        if (virtualList)
                                            return virtualList.itemsFromIndex(0, 0, virtualList.count)
                                    }).then(function hydrateListItems(list) {
                                        if (list) {
                                            var hydratedListItems = list.items.map(function hydrateListItem(item) {
                                                    return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(item.data)
                                                });
                                            return WinJS.Promise.join(hydratedListItems)
                                        }
                                    })
                            }, hydrateLibraryInfoAsync: function hydrateLibraryInfoAsync(media) {
                                var hydratePromise;
                                if (!MS.Entertainment.Data.List.isListOrArray(media))
                                    hydratePromise = this._hydrateSingleLibraryInfoAsync(media);
                                else
                                    hydratePromise = MS.Entertainment.Data.List.listToArray(media).then(function _gotMediaArray(mediaItemsArray) {
                                        if (mediaItemsArray.length) {
                                            var hydrateLibraryInfoPromises = mediaItemsArray.map(this._hydrateSingleLibraryInfoAsync.bind(this));
                                            return WinJS.Promise.join(hydrateLibraryInfoPromises)
                                        }
                                    }.bind(this)).then(function _absorbResult(){});
                                return WinJS.Promise.as(hydratePromise)
                            }
                    }
            }, parseJsonAddMediaResult: function parseJsonAddMediaResult(jsonAddMediaResult) {
                var addMediaResult = MS.Entertainment.Platform.PurchaseHelpers.createAddMediaResult();
                addMediaResult.concat(JSON.parse(jsonAddMediaResult));
                return addMediaResult
            }, addMedia: function addMedia(media, filterToOfferIds, inPurchaseFlow) {
                var serviceId = null;
                if (media)
                    serviceId = media.zuneId;
                if (!serviceId || MS.Entertainment.Utilities.isEmptyGuid(serviceId))
                    return WinJS.Promise.wrapError(new Error("Cannot add non-marketplace content to the collection."));
                if (inPurchaseFlow)
                    MS.Entertainment.UI.PurchaseHistoryService.enterPurchaseFlowActivity();
                var logPurchaseIngestionFailure = function(media, refreshAsyncResult) {
                        var telemetryParameterArray = [{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: media.mediaType
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaName, parameterValue: media.name
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SMID, parameterValue: media.serviceId
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: MS.Entertainment.Utilities.Telemetry.getCorrelationId(media.serviceId)
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: media.zuneId || media.serviceId || String.empty
                                }];
                        if (refreshAsyncResult) {
                            telemetryParameterArray.push({
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PurchaseEntitlementsFailureHasFailures, parameterValue: refreshAsyncResult.hasFailures
                            });
                            telemetryParameterArray.push({
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PurchaseEntitlementsFailureAddedEntitlements, parameterValue: refreshAsyncResult.addedEntitlements
                            })
                        }
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseEntitlementsNotFound, telemetryParameterArray)
                    };
                MS.Entertainment.Platform.PurchaseHelpers.assert(!MS.Entertainment.Utilities.isVideoApp || (filterToOfferIds && filterToOfferIds.length > 0), "Offer ids are required when not using the add media ingestion flow.");
                if (MS.Entertainment.Utilities.isVideoApp && filterToOfferIds && filterToOfferIds.length > 0) {
                    var addMediaResult = MS.Entertainment.Platform.PurchaseHelpers.createAddMediaResult();
                    return MS.Entertainment.UI.PurchaseHistoryService.refreshVideoOffersAsync(filterToOfferIds).then(function refreshAsync_complete(refreshAsyncResult) {
                            if (refreshAsyncResult.hasFailures || !refreshAsyncResult.addedEntitlements)
                                logPurchaseIngestionFailure(media, refreshAsyncResult);
                            return addMediaResult.hydrateLibraryInfoAsync(media)
                        }).then(function hydrateLibraryInfoAsync_complete() {
                            if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                                return media.tracks.itemsFromIndex(0, 0, media.tracks.count);
                            else if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason)
                                return media.episodes.itemsFromIndex(0, 0, media.episodes.count);
                            else if (media.inCollection)
                                addMediaResult.addMedia(media)
                        }).then(function itemsFromIndex_complete(list) {
                            if (list && list.items)
                                list.items.map(function hydrateListItem(item) {
                                    if (item && item.data && item.data.inCollection)
                                        addMediaResult.addMedia(item.data)
                                });
                            if (inPurchaseFlow)
                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false);
                            return addMediaResult
                        }, function itemsFromIndex_error(error) {
                            if (error && error.number && typeof error.number === "number")
                                error = error.number;
                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_PURCHASE_ERROR_CAPTION), error);
                            if (inPurchaseFlow)
                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                        })
                }
                return new WinJS.Promise(function addMedia_async(c, e, p) {
                        if (!filterToOfferIds)
                            filterToOfferIds = [];
                        var addMediaPromise;
                        try {
                            addMediaPromise = Microsoft.Entertainment.Marketplace.Marketplace.addMedia([serviceId], [media.mediaType], filterToOfferIds, null, true)
                        }
                        catch(ex) {
                            addMediaPromise = WinJS.Promise.wrapError(ex)
                        }
                        addMediaPromise.then(function addMedia_complete(jsonAddMediaResult) {
                            var addMediaResult = MS.Entertainment.Platform.PurchaseHelpers.parseJsonAddMediaResult(jsonAddMediaResult);
                            return addMediaResult.hydrateLibraryInfoAsync(media).then(function hydrateLibraryIdsAsync_complete() {
                                    if (c)
                                        c(addMediaResult);
                                    if (inPurchaseFlow)
                                        MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false)
                                })
                        }, function addMedia_error(error) {
                            if (error && error.number && typeof error.number === "number")
                                error = error.number;
                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_PURCHASE_ERROR_CAPTION), error);
                            if (inPurchaseFlow)
                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                        })
                    })
            }, getClosedCaptionVideos: function getClosedCaptionVideos(media) {
                var mediaWithClosedCaptions = [];
                var getClosedCaptionPromiseVideosPromise = null;
                if (media)
                    if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                        if (media.hasZuneId && media.closedCaptionFiles && media.closedCaptionFiles.length > 0) {
                            mediaWithClosedCaptions.push(media);
                            getClosedCaptionPromiseVideosPromise = WinJS.Promise.wrap(mediaWithClosedCaptions)
                        }
                    }
                    else if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason)
                        getClosedCaptionPromiseVideosPromise = media.episodes.forEachAll(function itemsFromIndex_complete(args) {
                            var episode = args.item.data;
                            if (episode && episode.hasZuneId && episode.closedCaptionFiles && episode.closedCaptionFiles.length > 0)
                                mediaWithClosedCaptions.push(episode)
                        }).then(function gotClosedCaptions() {
                            return WinJS.Promise.wrap(mediaWithClosedCaptions)
                        });
                return getClosedCaptionPromiseVideosPromise
            }, downloadClosedCaptionFiles: function downloadClosedCaptionFiles(media) {
                var getClosedCaptionPromiseVideosPromise = MS.Entertainment.Platform.PurchaseHelpers.getClosedCaptionVideos(media);
                if (getClosedCaptionPromiseVideosPromise)
                    getClosedCaptionPromiseVideosPromise.done(function onGetClosedCaptionPromiseVideosPromise(mediaWithClosedCaptions) {
                        mediaWithClosedCaptions.forEach(function forEachMedia(ccMedia) {
                            if (ccMedia)
                                Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync([ccMedia.zuneId]).done(function getMediaEntitlementsAsync_complete(result) {
                                    try {
                                        var entitlement = JSON.parse(result).result.entitlements[0];
                                        if (entitlement.best.download.isAvailable) {
                                            var bestDownloadServiceMediaInstanceId = entitlement.best.download.serviceMediaInstanceId || MS.Entertainment.Utilities.EMPTY_GUID;
                                            if (bestDownloadServiceMediaInstanceId !== MS.Entertainment.Utilities.EMPTY_GUID) {
                                                bestDownloadServiceMediaInstanceId = bestDownloadServiceMediaInstanceId.toLowerCase();
                                                for (var iClosedCaptionFile = 0; iClosedCaptionFile < ccMedia.closedCaptionFiles.length; iClosedCaptionFile++) {
                                                    var ccFile = ccMedia.closedCaptionFiles[iClosedCaptionFile];
                                                    if (ccFile && ccFile.mediaInstanceId && ccFile.mediaInstanceId.toLowerCase() === bestDownloadServiceMediaInstanceId) {
                                                        var ccServiceMediaId = entitlement.serviceMediaId;
                                                        var ccServiceMediaInstanceId = ccFile.mediaInstanceId;
                                                        var ccFileUri = ccFile.fileUri;
                                                        var ccLCID = ccFile.lcid;
                                                        var ccName = ccFile.name;
                                                        Microsoft.Entertainment.ClosedCaptionDownloader.downloadClosedCaptionFileAsync(ccFileUri, ccServiceMediaId, ccServiceMediaInstanceId, ccName, ccLCID)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    catch(ex) {}
                                }, function failed(info){})
                        })
                    }, function failed(info){})
            }, downloadMedia: function downloadMedia(media, dbMediaIds, dbMediaTypes, isBundleAlbum, inPurchaseFlow, contextMediaId, contextMediaType) {
                if (MS.Entertainment.Utilities.isApp2)
                    return WinJS.Promise.wrap([]);
                if (inPurchaseFlow)
                    MS.Entertainment.UI.PurchaseHistoryService.enterPurchaseFlowActivity();
                var preferStandardDef = false;
                var promptForStandardDef = WinJS.Promise.as();
                var downloadFile = true;
                if (MS.Entertainment.Utilities.isVideoApp) {
                    var storedDownloadPreference = MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference;
                    if (storedDownloadPreference)
                        preferStandardDef = (MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference === MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd);
                    else
                        promptForStandardDef = MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.getAvailableResolutions(media).then(function checkForHD(info) {
                            if (info.hasHD && info.hasSD)
                                return MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.getDialogSizes(media).then(function showDialog(dataSource) {
                                        return MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.show(dataSource).then(function onDialogDismissed(result) {
                                                if (result && result.userControlInstance) {
                                                    downloadFile = result.userControlInstance.downloadFile;
                                                    preferStandardDef = !result.userControlInstance.hdSelected
                                                }
                                                else
                                                    downloadFile = false;
                                                return WinJS.Promise.as()
                                            })
                                    });
                            return WinJS.Promise.as()
                        })
                }
                MS.Entertainment.Platform.PurchaseHelpers.downloadClosedCaptionFiles(media);
                return new WinJS.Promise(function(c, e, p) {
                        if (dbMediaIds && dbMediaIds.length && dbMediaTypes && dbMediaTypes.length) {
                            var signInProvider = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            signInProvider.getPassportTicket(MS.Entertainment.Utilities.SignIn.TicketType.MBI_SSL, MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_Passport)).then(function getPassportTicketComplete(ticket) {
                                promptForStandardDef.done(function doDownload() {
                                    if (downloadFile)
                                        Microsoft.Entertainment.Marketplace.Marketplace.download(ticket, dbMediaIds, dbMediaTypes, contextMediaId || 0, contextMediaType || 0, preferStandardDef).then(function downloadComplete(result) {
                                            var firstErrorCode = 0;
                                            var successfulTaskIds = [];
                                            for (var i = 0; i < result.hresults.size; i++) {
                                                var errorCode = result.hresults[i];
                                                if (isBundleAlbum && errorCode !== 0 && dbMediaTypes[i] === Microsoft.Entertainment.Queries.ObjectType.video)
                                                    errorCode = 0;
                                                if (errorCode === 0) {
                                                    successfulTaskIds.push(result.taskIds[i]);
                                                    MS.Entertainment.Utilities.createMediaItemByLibraryInfo(dbMediaIds[i], dbMediaTypes[i]).then(function mediaItemHydrated(downloadedMedia) {
                                                        if (downloadedMedia)
                                                            MS.Entertainment.Utilities.Telemetry.logDownloadHappened(downloadedMedia)
                                                    })
                                                }
                                                else if (firstErrorCode === 0)
                                                    if (errorCode < 0)
                                                        firstErrorCode = errorCode
                                            }
                                            if (firstErrorCode !== 0)
                                                MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), firstErrorCode);
                                            if (c)
                                                c(successfulTaskIds);
                                            if (inPurchaseFlow)
                                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false)
                                        }, function downloadError(error) {
                                            if (error && error.number && typeof error.number === "number")
                                                error = error.number;
                                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), error);
                                            if (inPurchaseFlow)
                                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                                        })
                                })
                            }, function getPassportTicketError(error) {
                                if (inPurchaseFlow)
                                    MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                            })
                        }
                        else if (inPurchaseFlow)
                            MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false)
                    })
            }, itemSupportsPurchase: function itemSupportsPurchase(mediaItem) {
                if (mediaItem) {
                    var mediaType = mediaItem.mediaType;
                    if (mediaType === Microsoft.Entertainment.Queries.ObjectType.game || mediaType === Microsoft.Entertainment.Queries.ObjectType.video || mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason || mediaType === Microsoft.Entertainment.Queries.ObjectType.album || mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                        return true
                }
                return false
            }, getItemPurchaseAndRentStateAsync: function getItemPurchaseAndRentStateAsync(mediaItem, force) {
                if (!force && mediaItem.canPurchaseStream !== undefined)
                    return WinJS.Promise.wrap({
                            canPurchaseStream: mediaItem.canPurchaseStream, canPurchaseDownload: mediaItem.canPurchaseDownload, canRentStream: mediaItem.canRentStream, canRentDownload: mediaItem.canRentDownload
                        });
                return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync([mediaItem.zuneId]).then(function getMediaEntitlements_complete(result) {
                        result = JSON.parse(result).result.entitlements[0];
                        return WinJS.Promise.wrap({
                                canPurchaseStream: result.purchase.stream.isAvailable, canPurchaseDownload: result.purchase.download.isAvailable, canRentStream: result.rent.stream.isAvailable, canRentDownload: result.rent.download.isAvailable
                            })
                    })
            }, MarketplaceService: WinJS.Class.define(null, {
                addMedia: function addMedia(serviceMediaIds, mediaTypes, filterToOfferIds, mediaPropertyMap, addToCollection) {
                    return Microsoft.Entertainment.Marketplace.Marketplace.addMedia(serviceMediaIds, mediaTypes, filterToOfferIds, mediaPropertyMap, addToCollection)
                }, tryAddMedia: function tryAddMedia(serviceMediaIds, mediaTypes, filterToOfferIds, mediaPropertyMap, addToCollection) {
                        return Microsoft.Entertainment.Marketplace.Marketplace.tryAddMedia(serviceMediaIds, mediaTypes, filterToOfferIds, mediaPropertyMap, addToCollection)
                    }
            }, {createMarketplaceService: function createMarketplaceService() {
                    return new MS.Entertainment.Platform.PurchaseHelpers.MarketplaceService
                }})
    });
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.marketplace, MS.Entertainment.Platform.PurchaseHelpers.MarketplaceService.createMarketplaceService)
})()
})();
/* >>>>>>/components/immersivedetails/showimmersivedetailsaction.js:2269 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {ShowImmersiveDetails: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function showImmersiveDetails() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.showImmersiveDetails, executed: function executed(param) {
                    MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PlayCommand);
                    var listOrMediaItem = this._extractMediaItem(param);
                    var showDetails = (param) ? param.showDetails : undefined;
                    var sessionId = (param && param.sessionId) ? param.sessionId : MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying;
                    var autoPlay = (param) ? param.autoPlay : undefined;
                    var hub = (param) ? param.hub : undefined;
                    var options = (param) ? param.options : {};
                    var startFullScreen = (param) ? param.startFullScreen : false;
                    var appView = Windows.UI.ViewManagement.ApplicationView;
                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    var startPositionMsec = (param) ? param.startPositionMsec : undefined;
                    if (uiStateService.isSnapped && !appView.tryUnsnap())
                        return;
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).then(function showImmersiveDetails(mediaItem) {
                        MS.Entertainment.UI.Actions.assert(mediaItem, "MS.Entertainment.Data.List.getData did not return a valid mediaItem");
                        var automationId = WinJS.Utilities.getMember("automationId", param);
                        if (autoPlay && (automationId === MS.Entertainment.UI.AutomationIds.smartButtonPlay || automationId === MS.Entertainment.UI.AutomationIds.smartButtonRestart || automationId === MS.Entertainment.UI.AutomationIds.smartButtonResume)) {
                            MS.Entertainment.Utilities.Telemetry.setCorrelationId(mediaItem.serviceId);
                            var telemetryParameterArray = [{
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: MS.Entertainment.Utilities.Telemetry.getCorrelationId(mediaItem.serviceId)
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: mediaItem.zuneId || mediaItem.serviceId || String.empty
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AutomationId, parameterValue: param.automationId || String.empty
                                    }];
                            if (mediaItem.seasonServiceId || mediaItem.canonicalSeasonId)
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ParentProductGuid, parameterValue: mediaItem.seasonServiceId || mediaItem.canonicalSeasonId || String.empty
                                });
                            MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: WinJS.Utilities.getMember("referenceContainer.domElement.parentElement.parentElement", this)}, {
                                uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Details
                            }, null, telemetryParameterArray)
                        }
                        if (param && param.playPreviewOnly)
                            mediaItem.playPreviewOnly = true;
                        else if ("playPreviewOnly" in mediaItem)
                            mediaItem.playPreviewOnly = false;
                        if (param && param.hydrateMediaItem)
                            mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                        if (autoPlay && (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.game || !mediaItem.inCollection))
                            MS.Entertainment.Utilities.Telemetry.logPlayPreview(mediaItem, false);
                        if (autoPlay && (((MS.Entertainment.Utilities.isVideoApp) && MS.Entertainment.Platform.PlaybackHelpers.isMovie(mediaItem)) || ((MS.Entertainment.Utilities.isMusicApp) && MS.Entertainment.Platform.PlaybackHelpers.isMusicTrackOrMusicVideo(mediaItem)))) {
                            MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayProtectedInApp();
                            MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayNonProtectedInApp()
                        }
                        if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage()) {
                            var destination = "Details";
                            if (autoPlay)
                                destination = mediaItem.inCollection ? "Play" : "PlayPreview";
                            if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason || MS.Entertainment.Platform.PlaybackHelpers.isTVEpisode(mediaItem)) {
                                var seriesMediaItem = mediaItem;
                                if (seriesMediaItem.seriesId) {
                                    var seriesData = {
                                            libraryId: mediaItem.seriesLibraryId, Name: mediaItem.seriesTitle
                                        };
                                    if (mediaItem.seriesIdType && mediaItem.seriesIdType === MS.Entertainment.Data.Query.edsIdType.zuneCatalog)
                                        seriesData.ZuneId = mediaItem.seriesId;
                                    else
                                        seriesData.ID = mediaItem.seriesId;
                                    seriesMediaItem = MS.Entertainment.Data.augment(seriesData, MS.Entertainment.Data.Augmenter.Marketplace.EdsTVSeries);
                                    seriesMediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(seriesMediaItem)
                                }
                                else if (seriesMediaItem.canonicalSeriesId) {
                                    seriesMediaItem = MS.Entertainment.Data.augment({
                                        ID: mediaItem.canonicalSeriesId, title: {$value: mediaItem.canonicalSeriesTitle}
                                    }, MS.Entertainment.Data.Augmenter.Marketplace.EdsTVSeries);
                                    seriesMediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(seriesMediaItem)
                                }
                                seriesMediaItem.hydrate().then(function logSeasonSearchExit() {
                                    MS.Entertainment.Utilities.Telemetry.logSearchExit(seriesMediaItem)
                                })
                            }
                            else
                                MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem)
                        }
                        if (param.showNowPlaying)
                            MS.Entertainment.Platform.PlaybackHelpers.showImmersive(null, {
                                sessionId: sessionId, startFullScreen: startFullScreen
                            });
                        else
                            MS.Entertainment.Platform.PlaybackHelpers.showImmersiveDetails(mediaItem, showDetails, autoPlay, hub, options, undefined, undefined, undefined, undefined, startPositionMsec)
                    }.bind(this))
                }, canExecute: function canExecute(param) {
                    return true
                }, _extractMediaItem: function _extractMediaItem(param) {
                    var mediaItem;
                    if (param && "mediaItem" in param)
                        mediaItem = param.mediaItem;
                    else if (param && "data" in param)
                        mediaItem = param.data;
                    else if (param)
                        mediaItem = param;
                    else {
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        if (sessionMgr && sessionMgr.nowPlayingSession && sessionMgr.primarySession.currentMedia)
                            mediaItem = sessionMgr.nowPlayingSession.currentMedia
                    }
                    return mediaItem
                }
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails, function() {
        return new MS.Entertainment.UI.Actions.ShowImmersiveDetails
    })
})()
})();
/* >>>>>>/controls/video/choosedownloadquality.js:2388 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ChooseDownloadQualityOverlay: MS.Entertainment.UI.Framework.defineUserControl("/Controls/Video/ChooseDownloadQuality.html#chooseDownloadQualityTemplate", function chooseDownloadQualityOverlayConstructor(element, options) {
            if (options) {
                this._media = options._media;
                this._hdSizeInMBytes = options.hdSizeInMBytes;
                this._sdSizeInMBytes = options.sdSizeInMBytes
            }
        }, {
            _media: null, _hdSizeInMBytes: 0, _sdSizeInMBytes: 0, _dialog: null, _okEnabled: true, _cancelEnabled: true, hdSelected: true, downloadFile: false, initialize: function initialize() {
                    this._downloadHD.checked = this.hdSelected;
                    this._downloadSD.checked = !this.hdSelected;
                    if (this._media && (!this._hdSizeInMBytes || !this._sdSizeInMBytes))
                        MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.getDialogSizes(this._media).then(function updateFileSizes(dataSource) {
                            this._hdSizeInMBytes = dataSource.hdSizeInMBytes;
                            this._sdSizeInMBytes = dataSource.sdSizeInMBytes;
                            this._updateFileSizeStrings()
                        });
                    this._updateFileSizeStrings()
                }, _updateFileSizeStrings: function _updateFileSizeStrings() {
                    if (this._hdSizeInMBytes < 1 || this._sdSizeInMBytes < 1) {
                        this._downloadHDString.textContent = String.load(String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_HD_SIMPLE);
                        this._downloadSDString.textContent = String.load(String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SD_SIMPLE);
                        WinJS.Utilities.addClass(this._downloadDisclaimer, "removeFromDisplay");
                        return
                    }
                    this._downloadHDString.textContent = MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.getDialogSizeString(this._hdSizeInMBytes, String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_HD);
                    this._downloadSDString.textContent = MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.getDialogSizeString(this._sdSizeInMBytes, String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SD);
                    WinJS.Utilities.removeClass(this._downloadDisclaimer, "removeFromDisplay")
                }, setOverlay: function setOverlay(overlay) {
                    this._dialog = overlay;
                    this._setOKEnabled(this._okEnabled);
                    this._setCanceledEnabled(this._cancelEnabled)
                }, submit: function submit() {
                    this._setOKEnabled(false);
                    this._setCanceledEnabled(false);
                    this.downloadFile = true;
                    if (this._neverPrompt.checked)
                        MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference = this.hdSelected ? MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd : MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd;
                    this._hide()
                }, hdClicked: function hdClicked() {
                    this.hdSelected = true
                }, sdClicked: function sdClicked() {
                    this.hdSelected = false
                }, neverPromptClicked: function neverPromptClicked(){}, _hide: function _hide() {
                    if (this._dialog)
                        this._dialog.hide()
                }, _setOKEnabled: function _setOKEnabled(enabled) {
                    if (this._dialog && this._dialog.buttons && (this._dialog.buttons.length > 0))
                        this._dialog.buttons[0].isEnabled = enabled;
                    this._okEnabled = enabled
                }, _setCanceledEnabled: function _setCanceledEnabled(enabled) {
                    if (this._dialog && this._dialog.buttons && (this._dialog.buttons.length > 1))
                        this._dialog.buttons[1].isEnabled = enabled;
                    this._cancelEnabled = enabled
                }
        }, {}, {
            _isChooseDownloadQualityOverlayOpen: false, storedDownloadPreference: {
                    get: function() {
                        try {
                            return Windows.Storage.ApplicationData.current.localSettings.values["preferredDownloadQuality"]
                        }
                        catch(e) {
                            MS.Entertainment.Platform.fail("Failure to read preferredDownloadQuality from localSettings: " + (e && e.message) ? e.message : String.empty)
                        }
                    }, set: function(value) {
                            try {
                                Windows.Storage.ApplicationData.current.localSettings.values["preferredDownloadQuality"] = value;
                                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.videoDetailsUiState)) {
                                    var videoDetailsUiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.videoDetailsUiState);
                                    videoDetailsUiStateService.fireDownloadQualityChangeSignal()
                                }
                            }
                            catch(e) {
                                MS.Entertainment.Platform.fail("Failure to set preferredDownloadQuality from localSettings: " + (e && e.message) ? e.message : String.empty)
                            }
                        }
                }, show: function show(dataSource) {
                    if (MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay._isChooseDownloadQualityOverlayOpen)
                        return WinJS.Promise.wrap();
                    MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay._isChooseDownloadQualityOverlayOpen = true;
                    return MS.Entertainment.UI.Shell.showDialog(String.load(String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_TITLE), "MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay", {
                            userControlOptions: dataSource, width: "40%", height: "310px", buttons: [WinJS.Binding.as({
                                        isEnabled: true, title: String.load(String.id.IDS_DETAILS_DOWNLOAD_LABEL), execute: function execute_submit(dialog) {
                                                WinJS.Promise.as(dialog.userControlInstance.submit()).done(null, function(error) {
                                                    MS.Entertainment.UI.Controls.fail("Submit failed in the choose download quality dialog. Error message: " + error && error.message)
                                                })
                                            }
                                    }), WinJS.Binding.as({
                                        isEnabled: true, title: String.load(String.id.IDS_CANCEL_BUTTON_TC), execute: function execute_cancel(dialog) {
                                                dialog.hide()
                                            }
                                    })], defaultButtonIndex: 0, cancelButtonIndex: 1
                        }).then(function onDismiss(overlay) {
                            if (overlay)
                                MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay._isChooseDownloadQualityOverlayOpen = false;
                            return overlay
                        })
                }, sizeInMBFromDefinition: function sizeInMBFromDefinition(media, definition, rented) {
                    var offerType = rented ? MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent : MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase;
                    var offer = MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.getDefaultOffer(media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [offerType], false, false, MS.Entertainment.Data.Augmenter.Marketplace.edsDeliveryFormat.download, definition);
                    return offer ? offer.videoFileSizeInBytes / (1024 * 1024) : 0
                }, getDialogSizes: function getDialogSizes(media) {
                    var sizesRet = {
                            hdSizeInMBytes: 0, sdSizeInMBytes: 0
                        };
                    var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (config.video.videoDownloadQualityDialogUsesSizes) {
                        var hdSizeInMBytes = 0;
                        var sdSizeInMBytes = 0;
                        return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(media).then(function onHydrateLibraryInfo() {
                                if (!MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(media))
                                    return WinJS.Promise.wrap([media]);
                                else {
                                    if (media.libraryId === -1)
                                        return WinJS.Promise.wrap([]);
                                    var query = new MS.Entertainment.Data.Query.libraryVideoTV;
                                    query.seriesId = media.seriesLibraryId;
                                    query.seasonId = media.libraryId;
                                    query.sort = Microsoft.Entertainment.Queries.VideosSortBy.seriesTitleSeasonNumberEpisodeNumber;
                                    query.isLive = false;
                                    query.chunkSize = 1000;
                                    return query.execute().then(function queryComplete(q) {
                                            if (q && q.result && q.result.items)
                                                return WinJS.Promise.wrap(MS.Entertainment.Data.List.listToArray(q.result.items))
                                        }.bind(this), function queryFailed(q) {
                                            return WinJS.Promise.wrap([])
                                        })
                                }
                            }.bind(this)).then(function onVideoList(mediaItemsArray) {
                                if (!mediaItemsArray || !mediaItemsArray.length)
                                    return [];
                                return WinJS.Promise.join(mediaItemsArray.map(MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.hydrateMedia))
                            }.bind(this)).then(function sumFilesSizes(results) {
                                if (results)
                                    for (var i = 0; i < results.length; i++) {
                                        var result = results[i];
                                        if (result && result.length > 1) {
                                            var video = result[0];
                                            var entitlements = result[1];
                                            if (entitlements && entitlements.length > 1) {
                                                var marketplaceInfo = entitlements[0];
                                                var playability = entitlements[1];
                                                var hasHD = false;
                                                if (playability.local || marketplaceInfo.canDownload === MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None || !marketplaceInfo.libraryDefinitions)
                                                    continue;
                                                if (marketplaceInfo.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd] || marketplaceInfo.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p])
                                                    hasHD = true;
                                                var rented = (marketplaceInfo.exclusivelyRented === MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.All);
                                                var videoSdSizeInMBytes = MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.sizeInMBFromDefinition(video, MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd, rented);
                                                var videoHdSizeInMBytes = hasHD ? MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.sizeInMBFromDefinition(video, MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd, rented) : videoSdSizeInMBytes;
                                                hdSizeInMBytes += videoHdSizeInMBytes;
                                                sdSizeInMBytes += videoSdSizeInMBytes
                                            }
                                        }
                                    }
                                sizesRet.hdSizeInMBytes = hdSizeInMBytes;
                                sizesRet.sdSizeInMBytes = sdSizeInMBytes;
                                return sizesRet
                            })
                    }
                    return WinJS.Promise.wrap(sizesRet)
                }, getDialogSizeString: function getDialogSizeString(sizeInMBytes, stringId) {
                    var sizeString = sizeInMBytes >= 1024 ? String.load(String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SIZE_GB).format((sizeInMBytes / 1024).toFixed(1)) : String.load(String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SIZE_MB).format(sizeInMBytes.toFixed(0));
                    var durationHours = (sizeInMBytes * 8 / 1.5) / 3600;
                    var durationString = String.load(String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SIZE_HOURS).format(durationHours.toFixed(1));
                    return String.load(stringId).format(sizeString, durationString)
                }, hydrateMedia: function hydrateMedia(media) {
                    var hydratePromise = media.hydrate();
                    var fetchMediaStatesPromise = MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.fetchMediaStates(media);
                    return WinJS.Promise.join([hydratePromise, fetchMediaStatesPromise])
                }, getAvailableResolutions: function getAvailableResolutions(media) {
                    if (!media)
                        return WinJS.Promise.wrap({
                                hasHD: false, hasSD: false
                            });
                    return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(media).then(function onHydrateLibraryInfo() {
                            if (!MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(media))
                                return WinJS.Promise.wrap([media]);
                            else {
                                if (media.libraryId === -1)
                                    return WinJS.Promise.wrap([]);
                                var query = new MS.Entertainment.Data.Query.libraryVideoTV;
                                query.seriesId = media.seriesLibraryId;
                                query.seasonId = media.libraryId;
                                query.sort = Microsoft.Entertainment.Queries.VideosSortBy.seriesTitleSeasonNumberEpisodeNumber;
                                query.isLive = false;
                                query.chunkSize = 1000;
                                return query.execute().then(function queryComplete(q) {
                                        if (q && q.result && q.result.items)
                                            return WinJS.Promise.wrap(MS.Entertainment.Data.List.listToArray(q.result.items))
                                    }.bind(this), function queryFailed(q) {
                                        return WinJS.Promise.wrap([])
                                    })
                            }
                        }.bind(this)).then(function onVideoList(mediaItemsArray) {
                            if (!mediaItemsArray || !mediaItemsArray.length)
                                return [];
                            return WinJS.Promise.join(mediaItemsArray.map(MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.fetchMediaStates))
                        }.bind(this)).then(function checkForHD(stateInfos) {
                            if (stateInfos)
                                for (var i = 0; i < stateInfos.length; i++) {
                                    var stateInfo = stateInfos[i];
                                    var hasHD = false;
                                    if (stateInfo.length === 2) {
                                        var marketplaceInfo = stateInfo[0];
                                        var playability = stateInfo[1];
                                        if (playability.local || marketplaceInfo.canDownload === MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None || !marketplaceInfo.libraryDefinitions)
                                            continue;
                                        if (marketplaceInfo.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd] || marketplaceInfo.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p])
                                            hasHD = true;
                                        if (marketplaceInfo.exclusivelyRented === MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.All)
                                            return {
                                                    hasHD: hasHD, hasSD: !hasHD
                                                };
                                        if (hasHD || (MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(media) && marketplaceInfo.hasPurchasedSeason))
                                            return {
                                                    hasHD: hasHD, hasSD: hasHD
                                                }
                                    }
                                }
                            return {
                                    hasHD: false, hasSD: true
                                }
                        }.bind(this))
                }, fetchMediaStates: function fetchMediaStates(media) {
                    var marketplacePromise = MS.Entertainment.ViewModels.SmartBuyStateEngine.getMarketplaceFileAccessAsync(media).then(function queryMediaStateAsync_complete(stateInfo) {
                            return stateInfo
                        });
                    var playabilityPromise = MS.Entertainment.ViewModels.SmartBuyStateEngine.getPlayabilityAsync(media).then(function queryMediaStateAsync_complete(playability) {
                            return playability
                        });
                    return WinJS.Promise.join([marketplacePromise, playabilityPromise])
                }
        })})
})()
})();
/* >>>>>>/framework/deleteaction.js:2630 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {DeleteMedia: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function deleteMedia() {
            this.base()
        }, {
            executed: function executed(param) {
                var mediaItems = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                var collectionFilter = mediaContext.collectionFilter;
                var options = mediaContext.options || {};
                if (!mediaItems)
                    mediaItems = mediaContext.mediaItem;
                return MS.Entertainment.UI.Controls.RemoveOverlay.show(mediaItems, collectionFilter, param.deleteLocalFilesOnly).then(function overlayClosed(overlay) {
                        var deleteSucceeded = overlay && overlay.userControlInstance && overlay.userControlInstance.removed;
                        if (mediaContext && overlay)
                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.deleteMedia, {
                                deleted: deleteSucceeded, removedItem: mediaItems
                            });
                        if (deleteSucceeded) {
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.mediaDeleted).mediaDeleted(mediaItems);
                            if (MS.Entertainment.Utilities.isVideoApp1 && mediaItems) {
                                var clearFilePath = function(videoItem) {
                                        if (videoItem && videoItem.filePath)
                                            videoItem.filePath = null
                                    };
                                if (MS.Entertainment.Data.List.isList(mediaItems))
                                    MS.Entertainment.Data.List.listToArray(mediaItems).done(function gotArray(mediaItemsArray) {
                                        mediaItemsArray.map(clearFilePath)
                                    });
                                else if (Array.isArray(mediaItems))
                                    mediaItems.map(clearFilePath);
                                else if (mediaItems && mediaItems.filePath)
                                    mediaItems.filePath = null
                            }
                            else if (MS.Entertainment.Utilities.isMusicApp) {
                                var getMediaItemPromise = WinJS.Promise.as();
                                if (MS.Entertainment.Data.List.isListOrArray(mediaItems)) {
                                    if (mediaItems.count === 1)
                                        getMediaItemPromise = MS.Entertainment.Data.List.getData(mediaItems, 0)
                                }
                                else
                                    getMediaItemPromise = WinJS.Promise.as(mediaItems);
                                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.pinToStartScreen)) {
                                    var deletedItem;
                                    var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                                    return getMediaItemPromise.then(function getMediaItemCompleted(mediaItem) {
                                            if (mediaItem) {
                                                deletedItem = mediaItem;
                                                return pinToStartScreenService.getTileForMediaAsync(mediaItem)
                                            }
                                            return null
                                        }).then(function getTileForMediaAsyncComplete(startScreenTile) {
                                            if (startScreenTile)
                                                return pinToStartScreenService.unpinMediaAsync(deletedItem)
                                        })
                                }
                                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.pinnedList))
                                    return getMediaItemPromise.then(function getMediaItemCompleted(mediaItem) {
                                            if (mediaItem && mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist) {
                                                var pinnedList = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinnedList);
                                                if (pinnedList.hasPin(mediaItem))
                                                    return pinnedList.deletePin(mediaItem)
                                            }
                                            return null
                                        })
                            }
                        }
                    })
            }, canExecute: function canExecute(param) {
                    return !MS.Entertainment.Utilities.getRetailExperienceState()
                }
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, function() {
        return new MS.Entertainment.UI.Actions.DeleteMedia
    });
    WinJS.Namespace.define("MS.Entertainment", {MediaDeleted: MS.Entertainment.UI.Framework.define(function MediaDeletedConstructor(){}, {mediaDeleted: function mediaDeleted(deletedItems) {
                this.dispatchEvent(MS.Entertainment.MediaDeleted.events.mediaDeleted, deletedItems)
            }}, {events: {mediaDeleted: "mediaDeleted"}})});
    WinJS.Class.mix(MS.Entertainment.MediaDeleted, WinJS.Utilities.eventMixin);
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.mediaDeleted, function getMediaDeletedService() {
        return new MS.Entertainment.MediaDeleted
    }, true)
})()
})();
/* >>>>>>/components/moreaction.js:2720 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Actions) {
                var MoreAction = (function(_super) {
                        __extends(MoreAction, _super);
                        function MoreAction() {
                            _super.call(this);
                            this.hasSubActions = true
                        }
                        MoreAction.prototype.executed = function(param, referenceElement) {
                            if (referenceElement)
                                MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: referenceElement}, {
                                    uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                                })
                        };
                        MoreAction.prototype.canExecute = function(param) {
                            return true
                        };
                        return MoreAction
                    })(MS.Entertainment.UI.Actions.Action);
                Actions.MoreAction = MoreAction
            })(UI.Actions || (UI.Actions = {}));
            var Actions = UI.Actions
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));
(function() {
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.more, function() {
        return new MS.Entertainment.UI.Actions.MoreAction
    })
})()
})();
/* >>>>>>/framework/downloadaction.js:2770 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {Download: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function download() {
            this.base()
        }, {
            executed: function executed(param) {
                var mediaItem = this._extractMediaItem(param);
                MS.Entertainment.Platform.PurchaseHelpers.ensurePreownedMediaAddedAsync(mediaItem).then(function ensurePreownedMediaAddedAsync_complete(dbItems) {
                    if (MS.Entertainment.Utilities.isVideoApp)
                        MS.Entertainment.UI.Video.DeviceLimitErrorDialog.listenForDownloadNotification();
                    MS.Entertainment.Platform.PurchaseHelpers.downloadMedia(mediaItem, dbItems.dbMediaIds, dbItems.dbMediaTypes)
                }, function ensurePreownedMediaAddedAsync_error(errorCode) {
                    var fileTransferNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransferNotifications);
                    if (mediaItem.hasServiceId)
                        fileTransferNotifications.setItemError(mediaItem.serviceId, errorCode);
                    if (mediaItem.inCollection)
                        fileTransferNotifications.setItemError(mediaItem.libraryId, errorCode)
                })
            }, canExecute: function canExecute(param) {
                    var mediaItem = this._extractMediaItem(param);
                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    return (signIn.isSignedIn && !mediaItem.hasLocalContent)
                }, _extractMediaItem: function _extractMediaItem(param) {
                    var mediaItem;
                    if (param && param.mediaItem)
                        mediaItem = param.mediaItem;
                    else
                        mediaItem = param;
                    if (MS.Entertainment.Data.List.isList(mediaItem))
                        MS.Entertainment.Data.List.listToArray(mediaItem).then(function gotArray(mediaItemsArray) {
                            MS.Entertainment.UI.Actions.assert(mediaItemsArray.length === 1, "Download Action only accepts one mediaItem");
                            mediaItem = mediaItemsArray[0]
                        });
                    return mediaItem
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {DownloadSeason: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Download", function downloadSeason() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownloadSeason, canExecute: function canExecute(param) {
                    return true
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {SubscriptionDownload: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function subscriptionDownload() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.subscriptionDownload, _executing: false, _reEnableAction: function _reEnableAction() {
                    this._executing = false;
                    this.requeryCanExecute()
                }, executed: function executed(param) {
                    this._executing = true;
                    this.requeryCanExecute();
                    var mediaItems = this._extractMediaItems(param);
                    var mediaContext;
                    if (!mediaItems) {
                        mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        mediaItems = this._ensureListOrArray(mediaContext.mediaItem)
                    }
                    var downloadPromise = WinJS.Promise.wrap();
                    if (mediaItems)
                        downloadPromise = MS.Entertainment.UI.SubscriptionDownload.verifyMachineActivationIsNotAtLimit().then(function verifyMachineActivationIsNotAtLimit() {
                            return MS.Entertainment.UI.SubscriptionDownload.subscriptionDownload(mediaItems)
                        }).then(function downloadMedia_complete(addedItems) {
                            if (mediaContext)
                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.subscriptionDownload, {addedItems: addedItems});
                            return WinJS.Promise.timeout()
                        }, function errorOccurred(errorCode) {
                            return MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), errorCode)
                        });
                    downloadPromise.done(this._reEnableAction.bind(this), this._reEnableAction.bind(this))
                }, canExecute: function canExecute(param) {
                    this.useOverrideTitleIfExists();
                    return !this._executing
                }, _extractMediaItems: function _extractMediaItem(param) {
                    var mediaItems;
                    if (param && param.mediaItem)
                        mediaItems = param.mediaItem;
                    else
                        mediaItems = param;
                    return MS.Entertainment.Data.List.isListOrArray(mediaItems) ? mediaItems : [mediaItems]
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {SubscriptionAddToMyMusic: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function subscriptionAddToMyMusic() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.smartButtonAddToMyMusic, _executing: false, _appStateLoaded: false, _dtoMarketplace: false, _marketplaceEnabled: false, _refreshAppState: function _refreshAppState() {
                    var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    var featureEnablementService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.featureEnablement);
                    var marketplaceEnabled = !!featureEnablementService.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace);
                    var freeStreamEnabled = !!featureEnablementService.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                    var userCanSubscriptionStream = marketplaceEnabled && signedInUserService && signedInUserService.isSubscription;
                    this._dtoMarketplace = marketplaceEnabled && !freeStreamEnabled && !userCanSubscriptionStream;
                    this._marketplaceEnabled = marketplaceEnabled
                }, _reEnableAction: function _reEnableAction() {
                    this._executing = false;
                    this.requeryCanExecute()
                }, _showCloudGrovelInfoDialog: function _showCloudGrovelInfoDialog() {
                    MS.Entertainment.Music.cloudGrovelInfoDialog.show()
                }, _showErrorNotification: function _showErrorNotification() {
                    if (MS.Entertainment.UI.Controls.CommandingPopOver && MS.Entertainment.UI.Controls.CommandingPopOver.popoverOpen) {
                        var notificationText = String.load(String.id.IDS_MUSIC2_PANEL_ADD_ERROR);
                        MS.Entertainment.UI.Controls.CommandingPopOver.displayPopoverNotification(notificationText, false)
                    }
                }, _showNotification: function _showNotification(addedItems, baseMediaItem) {
                    var count = addedItems && addedItems.dbMediaIds && addedItems.dbMediaIds.length;
                    var isCloudEnabled = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection).isEnabled;
                    var action = isCloudEnabled && count >= 1 ? this._showCloudGrovelInfoDialog : null;
                    if (MS.Entertainment.UI.Controls.CommandingPopOver && MS.Entertainment.UI.Controls.CommandingPopOver.popoverOpen) {
                        var notificationText = String.empty;
                        switch (baseMediaItem && baseMediaItem[0] && baseMediaItem[0].mediaType) {
                            case Microsoft.Entertainment.Queries.ObjectType.video:
                            case Microsoft.Entertainment.Queries.ObjectType.track:
                                notificationText = String.load(String.id.IDS_MUSIC2_PANEL_ADD_1_ITEM).format(String.load(String.id.IDS_MUSIC2_PANEL_ADD_SONG), String.load(String.id.IDS_MUSIC2_PANEL_ADD_COLLECTION));
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.album:
                                notificationText = String.load(String.id.IDS_MUSIC2_PANEL_ADD_1_ITEM).format(String.load(String.id.IDS_MUSIC2_PANEL_ADD_ALBUM), String.load(String.id.IDS_MUSIC2_PANEL_ADD_COLLECTION));
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.person:
                                notificationText = String.load(String.id.IDS_MUSIC2_PANEL_ADD_N_ITEMS).format(String.load(String.id.IDS_MUSIC2_PANEL_ADD_TOP_SONGS), String.load(String.id.IDS_MUSIC2_PANEL_ADD_COLLECTION));
                                break;
                            default:
                                MS.Entertainment.UI.Actions.fail("Unexpected media type added to collection.")
                        }
                        MS.Entertainment.UI.Controls.CommandingPopOver.displayPopoverNotification(notificationText, true)
                    }
                    else if (MS.Entertainment.Services.appNotification) {
                        var title = String.empty;
                        var subTitle = String.empty;
                        if (count < 1)
                            title = String.load(String.id.IDS_MUSIC_NOTIFICATION_ADD_ERROR);
                        else if (isCloudEnabled) {
                            switch (addedItems && addedItems.dbMediaTypes[0]) {
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    title = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_CLOUD_SONGS_ADDED_NOTIFICATION_LINE1_PLURAL);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    title = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_CLOUD_ALBUMS_ADDED_NOTIFICATION_LINE1_PLURAL);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    title = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_CLOUD_ARTISTS_ADDED_NOTIFICATION_LINE1_PLURAL);
                                    break;
                                default:
                                    MS.Entertainment.UI.Actions.fail("Unexpected media type added to collection.")
                            }
                            subTitle = String.load(String.id.IDS_MUSIC_CLOUD_SONGS_ADDED_NOTIFICATION_LINE2)
                        }
                        else {
                            title = String.load(String.id.IDS_MUSIC_NOTIFICATION_ADDED_TO_MY_MUSIC);
                            switch (addedItems && addedItems.dbMediaTypes[0]) {
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    subTitle = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_NOTIFICATION_TRACKS_ADDED_PLURAL);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    subTitle = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_NOTIFICATION_ALBUMS_ADDED_PLURAL);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    subTitle = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_NOTIFICATION_ARTISTS_ADDED_PLURAL);
                                    break
                            }
                        }
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification).send(new MS.Entertainment.UI.Notification({
                            notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: title, subTitle: subTitle, moreDetails: null, icon: MS.Entertainment.UI.Icon.musicInCollection, action: action, category: null, isPersistent: false
                        }));
                        MS.Entertainment.UI.CollectionChangeNotifierService.blockGlobalCollectionChangeEvents = false;
                        MS.Entertainment.UI.CollectionChangeNotifierService.blockGlobalCollectionUpSyncEvents = false
                    }
                }, translateDragAndDropParams: function translateDragAndDropParams(source) {
                    return {mediaItem: source && source.data}
                }, executed: function executed(param) {
                    param = param || {};
                    var mediaItems = this._extractMediaItems(param);
                    var mediaContext;
                    var completeAction = param.completeAction;
                    if (!mediaItems) {
                        mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        completeAction = function completeAction(addedItems) {
                            if (mediaContext)
                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.addToMyMusic, {addedItems: addedItems})
                        };
                        if (!mediaContext.mediaItem)
                            return;
                        mediaItems = MS.Entertainment.Data.List.isListOrArray(mediaContext.mediaItem) ? mediaContext.mediaItem : [mediaContext.mediaItem]
                    }
                    this._executing = true;
                    this.requeryCanExecute();
                    var downloadMedia = false;
                    if (MS.Entertainment.Utilities.isMusicApp1) {
                        var cloudCollectionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
                        downloadMedia = cloudCollectionService && cloudCollectionService.shouldDownloadOnAdd;
                        var cloudEnabled = cloudCollectionService.isEnabled;
                        MS.Entertainment.UI.CollectionChangeNotifierService.blockGlobalCollectionChangeEvents = cloudEnabled;
                        MS.Entertainment.UI.CollectionChangeNotifierService.blockGlobalCollectionUpSyncEvents = cloudEnabled
                    }
                    var mediaToDownload = param.containerItem || mediaItems;
                    return this._addToMyMusicNoDownload(mediaItems, param.containerItem, param.suppressNotification || downloadMedia, completeAction).then(function download() {
                            return downloadMedia ? this._downloadMediaItems(mediaToDownload, param.containerItem, completeAction) : WinJS.Promise.wrap()
                        }.bind(this)).then(this._signalDone.bind(this), this._signalError.bind(this)).then(this._reEnableAction.bind(this))
                }, canExecute: function canExecute(param) {
                    this._refreshAppState();
                    return !this._executing && !this._dtoMarketplace && this._marketplaceEnabled
                }, _addToMyMusicNoDownload: function _addToMyMusicNoDownload(mediaItems, containerItem, suppressNotification, completeAction) {
                    var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    var executePromise;
                    var addMedia = function addMedia(mediaItems, containerItem) {
                            return MS.Entertainment.Platform.PurchaseHelpers.addSubscriptionMedia(mediaItems, containerItem).then(function addSubscriptionMediaComplete(addedItems) {
                                    if (containerItem)
                                        return addMedia.call(this, containerItem);
                                    else {
                                        if (!suppressNotification)
                                            this._showNotification(addedItems, mediaItems);
                                        if (completeAction)
                                            return completeAction(addedItems)
                                    }
                                }.bind(this), function addSubscriptionMediaError(errorCode) {
                                    var showErrorPromise;
                                    if (MS.Entertainment.Utilities.isMusicApp2) {
                                        this._showErrorNotification();
                                        showErrorPromise = WinJS.Promise.as()
                                    }
                                    else
                                        showErrorPromise = (typeof errorCode === "number") ? MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_MEDIA_ERROR_CAPTION), errorCode) : WinJS.Promise.as();
                                    return showErrorPromise.then(function showErrorPromiseComplete() {
                                            return WinJS.Promise.wrapError()
                                        })
                                }.bind(this))
                        }.bind(this);
                    if (signInService.isSignedIn)
                        executePromise = addMedia(mediaItems, containerItem);
                    else
                        executePromise = new WinJS.Promise(function init(signInComplete) {
                            MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_ADD_TO_MY_MUSIC_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], signInComplete)
                        }).then(function signInComplete(result) {
                            if (result === MS.Entertainment.Utilities.SignIn.SignInResult.success)
                                return addMedia(mediaItems, containerItem)
                        });
                    return executePromise
                }, _downloadMediaItems: function _downloadMediaItems(mediaToDownload, containerItem, completeAction) {
                    return MS.Entertainment.UI.SubscriptionDownload.verifyMachineActivationIsNotAtLimit().then(function subscriptionDownloadAllowed() {
                            return MS.Entertainment.UI.SubscriptionDownload.subscriptionDownload(mediaToDownload)
                        }, function subscriptionDownloadNotAllowed(errorCode) {
                            if (errorCode !== MS.Entertainment.UI.SubscriptionDownload.deviceActivationLimitExceededErrorCode)
                                return MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), errorCode);
                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), errorCode);
                            var addToMyMusicPromise = this._addToMyMusicNoDownload(mediaToDownload, containerItem);
                            (Microsoft.Entertainment.Configuration.ConfigurationManager()).music.musicPassDownloadEnabled = false;
                            var cloudCollectionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
                            if (cloudCollectionService)
                                cloudCollectionService.autoDownloadEnabled = false;
                            return addToMyMusicPromise
                        }.bind(this)).then(function downloadMedia_complete(addedItems) {
                            if (completeAction)
                                return completeAction(addedItems);
                            return null
                        }, function downloadMedia_error(error) {
                            return MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), error)
                        })
                }, _signalError: function _signalError(error) {
                    var errorMessage = (error && error.message);
                    if (errorMessage)
                        MS.Entertainment.UI.Actions.fail("Failed to add to music. Error message: " + errorMessage);
                    this._signalDone()
                }, _signalDone: function _signalDone() {
                    var referenceContainer = WinJS.Binding.unwrap(this.referenceContainer);
                    if (referenceContainer && referenceContainer.domElement) {
                        var domEvent = document.createEvent("Event");
                        domEvent.initEvent("iconButtonClicked", true, true);
                        domEvent.automationId = this.automationId;
                        domEvent.id = this.id;
                        referenceContainer.domElement.dispatchEvent(domEvent)
                    }
                }, _extractMediaItems: function _extractMediaItems(param) {
                    var mediaItems;
                    if (param && param.mediaItem)
                        mediaItems = param.mediaItem;
                    else
                        mediaItems = param;
                    if (MS.Entertainment.Platform.PlaybackHelpers.isMusicPlaylist(mediaItems))
                        mediaItems = mediaItems.tracks;
                    return this._ensureListOrArray(mediaItems)
                }, _ensureListOrArray: function _ensureListOrArray(mediaItems) {
                    var result = mediaItems;
                    if (!MS.Entertainment.Data.List.isListOrArray(mediaItems) && mediaItems)
                        result = [mediaItems];
                    return result
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI", {SubscriptionDownload: {
            _getTrackLibraryId: function _getTrackLibraryId(mediaItem) {
                var libraryItems = [{
                            libraryId: mediaItem.libraryId, libraryType: mediaItem.mediaType
                        }];
                return WinJS.Promise.wrap(libraryItems)
            }, _getMediaContainerLibraryIds: function _getMediaContainerLibraryIds(mediaContainer) {
                    var libraryItems = [];
                    var tracksPromise = WinJS.Promise.wrap();
                    if (mediaContainer)
                        if (mediaContainer.tracks)
                            tracksPromise = WinJS.Promise.wrap(mediaContainer.tracks);
                        else {
                            MS.Entertainment.UI.Actions.assert(mediaContainer.mediaType === Microsoft.Entertainment.Queries.ObjectType.album, "Expected to expand an album if tracks are missing.");
                            var query = new MS.Entertainment.Data.Query.libraryTracks;
                            var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                            var collectionFilter = mediaContext.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                            query.albumId = mediaContainer.libraryId;
                            query.mediaAvailability = collectionFilter;
                            tracksPromise = query.getItemsAndIgnoreErrors()
                        }
                    return tracksPromise.then(function _gotTracks(tracks) {
                            if (tracks)
                                return tracks.forEachAll(function _getItemLibraryId(arg) {
                                        if (arg.item.data && arg.item.data.hasZuneId)
                                            libraryItems.push({
                                                libraryId: arg.item.data.libraryId, libraryType: arg.item.data.mediaType
                                            })
                                    })
                        }).then(function _gotItemsArray(array) {
                            return libraryItems
                        })
                }, _canDownloadCollectionMedia: function _canDownloadCollectionMedia(stateInfo) {
                    if (stateInfo.download.hasFailed && stateInfo.download.hasRetryable)
                        return true;
                    var hasDownloads = false;
                    var playabilityItems = stateInfo.collection.playability.items;
                    var entitlements = stateInfo.marketplace.entitlements;
                    if (playabilityItems && playabilityItems.length > 0 && entitlements && entitlements.length > 0) {
                        var hasNonLocalMedia = false;
                        var nonLocalMedia = {};
                        for (var i = 0; i < playabilityItems.length; i++) {
                            var playabilityItem = playabilityItems[i];
                            if (playabilityItem && playabilityItem.mediaId && !playabilityItem.isDownloading && !playabilityItem.locallyPlayable) {
                                nonLocalMedia[playabilityItem.mediaId.toLowerCase()] = playabilityItem;
                                hasNonLocalMedia = true
                            }
                        }
                        if (hasNonLocalMedia)
                            for (var i = 0; i < entitlements.length; i++) {
                                var entitlement = entitlements[i];
                                if (entitlement && entitlement.canFullyDownload && nonLocalMedia[entitlement.serviceMediaId.toLowerCase()])
                                    return true
                            }
                    }
                    return false
                }, subscriptionDownload: function subscriptionDownload(mediaItems) {
                    var downloadableMediaItems = [];
                    var downloadStatePromises = [];
                    var downloadabilityCheckPromise = WinJS.Promise.wrap();
                    downloadabilityCheckPromise = MS.Entertainment.Data.List.listToArray(mediaItems).then(function _gotArray(mediaItemsArray) {
                        mediaItemsArray.forEach(function _getDownloadInfo(mediaItem) {
                            var hydratePromise = mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track ? WinJS.Promise.wrap(mediaItem) : mediaItem.hydrate();
                            downloadStatePromises.push(hydratePromise.then(function checkState() {
                                var singleDownloadabilityCheckPromise;
                                if (mediaItem.fromCollection && mediaItem.canSubscriptionDownload)
                                    downloadableMediaItems.push(mediaItem);
                                else if (mediaItem.fromCollection && mediaItem.inCollection)
                                    singleDownloadabilityCheckPromise = MS.Entertainment.ViewModels.SmartBuyStateEngine.queryMediaStateAsync(mediaItem).then(function _getMediaStateComplete(stateInfo) {
                                        if (MS.Entertainment.UI.SubscriptionDownload._canDownloadCollectionMedia(stateInfo))
                                            downloadableMediaItems.push(mediaItem)
                                    });
                                else
                                    singleDownloadabilityCheckPromise = MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getMusicRights(mediaItem).then(function _getMusicRightsComplete(rights) {
                                        if (rights && rights.subscriptionDownload)
                                            downloadableMediaItems.push(mediaItem)
                                    });
                                return singleDownloadabilityCheckPromise
                            }).then(null, function ignoreError(error) {
                                MS.Entertainment.UI.Actions.fail("Failed to get subscription downloadability for media item. error: " + (error && error.message))
                            }))
                        });
                        return WinJS.Promise.join(downloadStatePromises)
                    });
                    return downloadabilityCheckPromise.then(function _gotDownloadableItems() {
                            var hydrateLibraryInfoPromises = [];
                            downloadableMediaItems.forEach(function notifyDownloadAndHydrateLibraryId(mediaItem) {
                                if (mediaItem.contentNotifications) {
                                    var notification = new MS.Entertainment.UI.ContentNotification.Notification(WinJS.UI.AppBarIcon.download, String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_SHORT), String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_LONG));
                                    if (!mediaItem.allTracksLocal)
                                        mediaItem.contentNotifications.sendNotification(MS.Entertainment.UI.ContentNotification.NotificationType.marketplaceDownloadStatus, notification)
                                }
                                hydrateLibraryInfoPromises.push(MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(mediaItem))
                            });
                            return WinJS.Promise.join(hydrateLibraryInfoPromises)
                        }).then(function _gotLibraryIds() {
                            if (!downloadableMediaItems || !downloadableMediaItems.length)
                                return WinJS.Promise.wrap();
                            var collectionMediaItems = [];
                            var marketplaceMediaItems = [];
                            var downloadMediaPromises = [];
                            downloadableMediaItems.forEach(function _splitDownloadableMediaItems(mediaItem) {
                                if ((mediaItem.fromCollection && mediaItem.inCollection) || mediaItem.isFromPlaylist)
                                    collectionMediaItems.push(mediaItem);
                                else
                                    marketplaceMediaItems.push(mediaItem)
                            });
                            MS.Entertainment.UI.Actions.assert((collectionMediaItems.length + marketplaceMediaItems.length) === downloadableMediaItems.length, "Expected all downloadable items to be categorized as either collection or marketplace items.");
                            var result = {itemsAddedToCollection: null};
                            if (marketplaceMediaItems.length)
                                downloadMediaPromises.push(MS.Entertainment.UI.SubscriptionDownload._downloadMarketplaceMedia(marketplaceMediaItems, result));
                            if (collectionMediaItems.length)
                                downloadMediaPromises.push(MS.Entertainment.UI.SubscriptionDownload._downloadCollectionMedia(collectionMediaItems));
                            return WinJS.Promise.join(downloadMediaPromises).then(function downloadsCompleted() {
                                    return result.itemsAddedToCollection
                                })
                        })
                }, _downloadMarketplaceMedia: function _downloadMarketplaceMedia(marketplaceMediaItems, result) {
                    return MS.Entertainment.Platform.PurchaseHelpers.addSubscriptionMedia(marketplaceMediaItems).then(function addSubscriptionMedia_complete(dbItems) {
                            result.itemsAddedToCollection = dbItems;
                            return MS.Entertainment.Platform.PurchaseHelpers.downloadMedia(null, dbItems.dbMediaIds, dbItems.dbMediaTypes)
                        }, function addSubscriptionMedia_error(errorCode) {
                            marketplaceMediaItems.forEach(function _clearNotifications(mediaItem) {
                                if (mediaItem && mediaItem.contentNotifications)
                                    mediaItem.contentNotifications.clear();
                                if (typeof errorCode === "number") {
                                    var fileTransferNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransferNotifications);
                                    if (mediaItem.serviceId && mediaItem.serviceId !== MS.Entertainment.Utilities.EMPTY_GUID)
                                        fileTransferNotifications.setItemError(mediaItem.serviceId, errorCode);
                                    if (mediaItem.libraryId && mediaItem.libraryId >= 0)
                                        fileTransferNotifications.setItemError(mediaItem.libraryId, errorCode)
                                }
                            });
                            return WinJS.Promise.wrapError(errorCode)
                        })
                }, _downloadCollectionMedia: function _downloadCollectionMedia(collectionMediaItems) {
                    var getCollectionTrackPromises = collectionMediaItems.map(function _getTracksToDownload(mediaItem) {
                            switch (mediaItem.mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    return MS.Entertainment.UI.SubscriptionDownload._getTrackLibraryId(mediaItem);
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    return MS.Entertainment.UI.SubscriptionDownload._getMediaContainerLibraryIds(mediaItem);
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                    return mediaItem.hydrate().then(MS.Entertainment.UI.SubscriptionDownload._getMediaContainerLibraryIds);
                                default:
                                    MS.Entertainment.ViewModels.fail("SubscriptionDownloadAction received an invalid media type");
                                    return WinJS.Promise.wrapError()
                            }
                        });
                    return WinJS.Promise.join(getCollectionTrackPromises).then(function downloadItemsArray(downloadItemLists) {
                            if (downloadItemLists) {
                                var downloadItems = [].concat.apply([], downloadItemLists);
                                var libraryIds = downloadItems.map(function _getLibraryId(item) {
                                        return item.libraryId
                                    });
                                var libraryTypes = downloadItems.map(function _getLibraryType(item) {
                                        return item.libraryType
                                    });
                                return MS.Entertainment.Platform.PurchaseHelpers.downloadMedia(null, libraryIds, libraryTypes, false, false)
                            }
                        })
                }, verifyMachineActivationIsNotAtLimit: function verifyMachineActivationIsNotAtLimit() {
                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    if (signIn && signIn.isSignedIn && signedInUser) {
                        var allowSubscriptionDownload = (signedInUser.isTunerActivated || signedInUser.isTunerActivatable);
                        if (allowSubscriptionDownload)
                            return WinJS.Promise.wrap();
                        else {
                            var refreshSignInStateCompletedOrError = function refreshSignInStateCompletedOrError() {
                                    if (signIn.isSignedIn) {
                                        var allowSubscriptionDownload = (signedInUser.isTunerActivated || signedInUser.isTunerActivatable);
                                        if (allowSubscriptionDownload || !signedInUser.isSubscription)
                                            return WinJS.Promise.wrap();
                                        else
                                            return WinJS.Promise.wrapError(MS.Entertainment.UI.SubscriptionDownload.deviceActivationLimitExceededErrorCode)
                                    }
                                    else
                                        return WinJS.Promise.wrapError(MS.Entertainment.Utilities.SignInErrors.ZEST_E_SIGNIN_REQUIRED)
                                };
                            return signIn.refreshSignInState().then(refreshSignInStateCompletedOrError, refreshSignInStateCompletedOrError)
                        }
                    }
                    else
                        return WinJS.Promise.wrapError(MS.Entertainment.Utilities.SignInErrors.ZEST_E_SIGNIN_REQUIRED)
                }, deviceActivationLimitExceededErrorCode: 0xC1010008 - 0xFFFFFFFF - 1
        }});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.download, function() {
        return new MS.Entertainment.UI.Actions.Download
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadSeason, function() {
        return new MS.Entertainment.UI.Actions.DownloadSeason
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionDownload, function() {
        return new MS.Entertainment.UI.Actions.SubscriptionDownload
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionAddToMyMusic, function() {
        return new MS.Entertainment.UI.Actions.SubscriptionAddToMyMusic
    })
})()
})();
/* >>>>>>/components/playback/concurrentstreamingrestriction.js:3263 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.Playback");
    WinJS.Namespace.define("MS.Entertainment.Platform.Playback", {ConcurrentStreamingRestriction: MS.Entertainment.UI.Framework.define(function ConcurrentStreamingRestriction_constructor(playbackControl) {
            this._playbackControl = playbackControl;
            this._observe(playbackControl)
        }, {
            _playbackControl: null, _transportState: null, _currentMedia: null, _concurrentStreamingRestrictionModel: null, _mapStartToResume: false, _playToSenderConnectionState: Windows.Media.PlayTo.PlayToConnectionState.disconnected, _concurrentStreamingRestrictionModelInitialized: false, _blockStreamingCallback: null, _observe: function observe(playbackControl) {
                    var that = this;
                    this._playbackControl = playbackControl;
                    playbackControl.bind("currentMedia", function(newMediaInstance) {
                        that._onCurrentMediaChanged(newMediaInstance)
                    });
                    playbackControl.bind("currentTransportState", function(newTransportState) {
                        that._onCurrentTransportStateChanged(newTransportState)
                    });
                    playbackControl.bind("playToSenderConnectionState", function(newPlayToSenderConnectionState) {
                        that._onCurrentDlnaStateChanged(newPlayToSenderConnectionState)
                    })
                }, _onCurrentMediaChanged: function onCurrentMediaChanged(newMediaInstance) {
                    if (this._blockStreamingCallback) {
                        this._blockStreamingCallback.cancel();
                        this._blockStreamingCallback = null
                    }
                    this._concurrentStreamingRestrictionModel = null;
                    this._transportState = null;
                    this._currentMedia = null;
                    this._mapStartToResume = false;
                    if (newMediaInstance) {
                        this._currentMedia = newMediaInstance;
                        if (this._shouldEnforceVideoConcurrentStreamingRestriction(newMediaInstance)) {
                            this._concurrentStreamingRestrictionModel = new Microsoft.Entertainment.Util.ConcurrentStreamingRestriction;
                            this._concurrentStreamingRestrictionModelInitialized = false;
                            this._blockStreamingCallback = MS.Entertainment.Utilities.addEvents(this._concurrentStreamingRestrictionModel, {blockstreaming: this._blockStreaming.bind(this)})
                        }
                    }
                }, _onCurrentTransportStateChanged: function onCurrentTransportStateChanged(newTransportState) {
                    this._transportState = newTransportState;
                    var initializationPromise;
                    if (this._transportState === MS.Entertainment.Platform.Playback.TransportState.playing && this._concurrentStreamingRestrictionModel && (!this._concurrentStreamingRestrictionModelInitialized))
                        initializationPromise = this._concurrentStreamingRestrictionModel.initializeAsync(this._currentMedia.initialLease ? this._currentMedia.initialLease.url : "", this._currentMedia.serviceIdSafe, this._currentMedia.licenseKeyId, this._currentMedia.offerId).then(function initializeAsync_complete() {
                            this._concurrentStreamingRestrictionModelInitialized = true
                        }.bind(this));
                    else
                        initializationPromise = WinJS.Promise.as();
                    initializationPromise.done(function initialize_complete() {
                        this._reportStreamingState()
                    }.bind(this), function initialize_error(error) {
                        this._blockStreaming(error)
                    }.bind(this))
                }, _onCurrentDlnaStateChanged: function _onCurrentDlnaStateChanged(newPlayToSenderConnectionState) {
                    if (this._playToSenderConnectionState !== newPlayToSenderConnectionState) {
                        this._playToSenderConnectionState = newPlayToSenderConnectionState;
                        switch (newPlayToSenderConnectionState) {
                            case Windows.Media.PlayTo.PlayToConnectionState.connected:
                                break;
                            case Windows.Media.PlayTo.PlayToConnectionState.rendering:
                                if (this._concurrentStreamingRestrictionModel && this._concurrentStreamingRestrictionModelInitialized) {
                                    this._concurrentStreamingRestrictionModel.reportStreamingAction(Microsoft.Entertainment.Util.EStreamingActionType.eStreamingActionTypeStop);
                                    this._concurrentStreamingRestrictionModel = null;
                                    this._concurrentStreamingRestrictionModelInitialized = false
                                }
                                break;
                            case Windows.Media.PlayTo.PlayToConnectionState.disconnected:
                                if (this._currentMedia && this._shouldEnforceVideoConcurrentStreamingRestriction(this._currentMedia)) {
                                    this._onCurrentMediaChanged(this._currentMedia);
                                    if (this._currentMedia.initialLease && this._concurrentStreamingRestrictionModel && !this._concurrentStreamingRestrictionModelInitialized)
                                        this._concurrentStreamingRestrictionModel.initializeAsync(this._currentMedia.initialLease ? this._currentMedia.initialLease.url : "", this._currentMedia.serviceIdSafe, this._currentMedia.licenseKeyId, this._currentMedia.offerId).done(function initializeAsync_complete() {
                                            this._concurrentStreamingRestrictionModelInitialized = true
                                        }.bind(this))
                                }
                                break;
                            default:
                                MS.Entertainment.UI.Controls.assert(false, "unknown playto sender state: " + newPlayToSenderConnectionState.toString());
                                break
                        }
                    }
                }, _reportStreamingState: function reportStreamingState() {
                    if (this._concurrentStreamingRestrictionModel && this._concurrentStreamingRestrictionModelInitialized && this._playToSenderConnectionState === Windows.Media.PlayTo.PlayToConnectionState.disconnected) {
                        var reportState = null;
                        switch (this._transportState) {
                            case MS.Entertainment.Platform.Playback.TransportState.playing:
                                if (this._mapStartToResume)
                                    reportState = Microsoft.Entertainment.Util.EStreamingActionType.eStreamingActionTypeResume;
                                else {
                                    reportState = Microsoft.Entertainment.Util.EStreamingActionType.eStreamingActionTypeStart;
                                    this._mapStartToResume = true
                                }
                                break;
                            case MS.Entertainment.Platform.Playback.TransportState.paused:
                                reportState = Microsoft.Entertainment.Util.EStreamingActionType.eStreamingActionTypePause;
                                break;
                            case MS.Entertainment.Platform.Playback.TransportState.stopped:
                                reportState = Microsoft.Entertainment.Util.EStreamingActionType.eStreamingActionTypeStop;
                                break;
                            default:
                                break
                        }
                        if (reportState !== null)
                            this._concurrentStreamingRestrictionModel.reportStreamingAction(reportState)
                    }
                }, _blockStreaming: function _blockStreaming(errorCode)
                {
                    var error = {
                            code: parseInt(errorCode), innerError: errorCode
                        };
                    if (isNaN(error.code))
                        error = errorCode;
                    this._playbackControl.forceError(error)
                }, _shouldEnforceVideoConcurrentStreamingRestriction: function _shouldEnforceVideoConcurrentStreamingRestriction(mediaInstance) {
                    if (mediaInstance && mediaInstance.isVideo() && mediaInstance.hasOwnProperty("protectionState") && mediaInstance.protectionState === MS.Entertainment.Platform.Playback.ProtectionState.drmProtected && this._playToSenderConnectionState === Windows.Media.PlayTo.PlayToConnectionState.disconnected) {
                        var uri = new Windows.Foundation.Uri(mediaInstance.source);
                        if (uri.schemeName.toLocaleLowerCase() === "http" || uri.schemeName.toLocaleLowerCase() === "https")
                            if (!MS.Entertainment.Utilities.isEmptyGuid(mediaInstance.licenseKeyId) && !MS.Entertainment.Utilities.isEmptyGuid(mediaInstance.serviceIdSafe))
                                return true;
                            else {
                                MS.Entertainment.Platform.Playback.assert(false, "drmProtected content must have a media id and license key id");
                                this._blockStreaming(MS.Entertainment.Platform.Playback.Error.NS_E_NO_PLAYABLE_MEDIA);
                                return true
                            }
                    }
                    return false
                }
        }, {})})
})()
})();
/* >>>>>>/components/playback/playbackerrors.js:3393 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var MSEPlatform = WinJS.Namespace.define("MS.Entertainment.Platform", null);
    WinJS.Namespace.defineWithParent(MSEPlatform, "Playback", {
        initPlaybackError: function PlaybackError(message, context) {
            this.message = message;
            if (context)
                this.context = context;
            var d = this.name + (message ? ": " + message : String.empty);
            if (context)
                d += " (" + context + ")";
            this.description = d;
            if (arguments.length > 0)
                this.trace();
            return []
        }, initUnplayableItemError: function initUnplayableItemError(mediaItem, ordinal) {
                return [(mediaItem && mediaItem.data && mediaItem.data.title) ? " Title@" + ordinal + ": " + mediaItem.data.title + " ID = " + mediaItem.data.assetLocationId : undefined, (ordinal === +ordinal) ? ordinal.toString() : ((typeof ordinal == "string") ? ordinal : undefined)]
            }
    });
    var Playback = MSEPlatform.Playback;
    function deriveError(definitionNamespace, name, baseError) {
        var proto = Object.getPrototypeOf(new baseError);
        var fullName = name;
        if ("name" in proto)
            fullName += "." + proto.name;
        var shortName = name + "Error";
        var predicateName = "is" + shortName;
        var initFunctionName = "init" + shortName;
        var initFunction = definitionNamespace[initFunctionName];
        definitionNamespace[shortName] = function() {
            var baseArgs = initFunction ? initFunction.apply(this, arguments) : arguments;
            proto.constructor.apply(this, baseArgs)
        };
        var errorConstructor = definitionNamespace[shortName];
        var baseProto = new baseError;
        errorConstructor.prototype = baseProto;
        errorConstructor.prototype.constructor = errorConstructor;
        baseProto[predicateName] = true;
        baseProto.name = fullName;
        baseProto.shortName = shortName;
        baseProto.namespace = definitionNamespace;
        return baseProto
    }
    var playbackErrorTrace = function playbackErrorTrace() {
            if (MSEPlatform.Playback.Etw && "traceString" in MSEPlatform.Playback.Etw)
                MSEPlatform.Playback.Etw.traceString(this.toString())
        };
    deriveError(Playback, "Playback", Error);
    Playback.PlaybackError.prototype.trace = playbackErrorTrace;
    deriveError(Playback, "UnplayableItem", Playback.PlaybackError);
    deriveError(Playback, "SkipFwdOutOfRange", Playback.PlaybackError);
    deriveError(Playback, "SkipBkwdOutOfRange", Playback.PlaybackError);
    (function() {
        function _hresult(hex) {
            return hex >= 0x80000000 ? hex - 0x100000000 : hex
        }
        var errorGroups = {
                DeviceGroupError: {
                    DEVICEGROUP_E_UNEXPECTED: 0xC3380000, DEVICEGROUP_MAX_DEVICES_REACHED: 0xC3380262, DEVICEGROUP_MAX_ADDED_PER_MONTH_REACHED: 0xC338026C, DEVICEGROUP_MAX_PCS_REACHED: 0xC3380263, DEVICEGROUP_MAX_PHONES_REACHED: 0xC3380264, DEVICEGROUP_MAX_TABLETS_REACHED: 0xC3380265, DEVICEGROUP_MAX_CONSOLES_REACHED: 0xC3380266, DEVICEGROUP_MAX_REMOVED_PER_MONTH_REACHED: 0xC338026D, MARKETPLACE_LICENSING_DEVICE_NOT_IN_DEVICEGROUP: 0xC33601F4
                }, Error: {
                        NS_E_EXPLICIT_CONTENT_SIGNIN_REQUIRED: 0xC00D1354, NS_E_EXPLICIT_CONTENT_PLAY_BLOCKED: 0xC00D1355, NS_E_EXPLICIT_CONTENT_DOWNLOAD_BLOCKED: 0xC00D1393, NS_E_NO_PLAYABLE_MEDIA: 0xC00D10DE, NS_E_WMP_ACCESS_DENIED: 0xC00D11D2, NS_E_WMP_NETWORK_ERROR: 0xC00D11C0, NS_E_SIGNIN_NOT_SUPPORTED_REGION: 0xC00D1388, NS_E_DRM_NEEDS_INDIVIDUALIZATION: 0xC00D2728, NS_E_WMPIM_USEROFFLINE: 0xC00D1126, NS_E_WMP_DRM_LICENSE_NOTACQUIRED: 0xc00d1204, NS_E_COMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED: 0xC00D2098, NS_E_UNCOMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED: 0xC00D2099, NS_E_DRM_DRIVER_AUTH_FAILURE: 0xC00D274D, NS_E_DRM_UNABLE_TO_INITIALIZE: 0xC00D271D, NS_E_WMP_AUDIO_HW_PROBLEM: 0xC00D11BA, NS_E_WMP_OUTOFMEMORY: 0xC00D11C6, NS_E_WMP_BAD_DRIVER: 0xC00D11D1, NS_E_WMP_MULTIPLE_ERROR_IN_PLAYLIST: 0xC00D11DF, NS_E_WMPCORE_BUSY: 0xC00D10B7, NS_E_WMP_DRM_GENERIC_LICENSE_FAILURE: 0xC00D11DA, NS_E_DRM_INVALID_LICENSE: 0xC00D2718, ZEST_E_UNAUTHENTICATED: 0xC101A004, ZEST_E_SIGNIN_REQUIRED: 0xC101A24B, ZEST_E_DEVICE_ACTIVATION_LIMIT_EXCEEDED: 0xC101A411, ZEST_E_ASSET_ITEM_NOT_PURCHASED: 0xC101A7D1, ZEST_E_ASSET_LICENSE_RIGHT_NOT_OWNED: 0xC101A7D4, ZEST_E_ASSET_LICENSE_SUBSCRIPTION_DOWNLOAD_ONLY: 0xC101A7DC, ZEST_E_MULTITUNER_CONCURRENTSTREAMING_DETECTED: 0xC101A7D8, ZEST_E_MEDIAINSTANCE_STREAMING_OCCUPIED: 0xC101A7E1, ZEST_E_MW_CONCURRENT_STREAM: 0xC101A9CA, ZEST_E_MW_CONTENT_REVOKED_ON_LABEL_TAKEDOWN: 0xC101A9D6, ZEST_E_UNSUPPORTED_DRM_COMPONENT: 0xC101A3F5, ZEST_E_UNSUPPORTED_DRM_COMPONENT_STREAM: 0xC101A419, ZUNE_E_PASSPORT_TICKET_SIGNIN_REQUIRED: 0xC1010036, ZUNE_E_NO_SUBSCRIPTION_DOWNLOAD_RIGHTS: 0xC1010029, ZUNE_E_DOWNLOAD_LIBRARY_DISK_FULL: 0xC1010039, ZUNE_E_DOWNLOAD_SYSTEM_DISK_FULL: 0xC1010038, ZUNE_E_MAXIMUM_PLAYLIST_LENGTH_EXCEEDED: 0xc10100c9, E_MDS_UNAUTHENTICATED_TRACK_LIMIT: 0xC101AB55, E_MDS_AUTHENTICATED_TRACK_LIMIT: 0xC101AB56, E_MDS_INDIVIDUAL_TRACK_LIMIT: 0xC101AB59, E_MDS_CANNOT_PLAY: 0xC101AB57, E_MDS_ROAMING_LIMIT: 0xC101AB58, E_ENHANCED_STORAGE: 0x8004b896, E_ABORT: 0x80004004, E_NOTIMPL: 0x80004001, E_FILE_NOT_FOUND: 0x80070002, E_FAIL: 0x80004005, ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED: 0xC0262500, X8_E_PLAYBACK_MEDIA_ERR_ABORTED: 0xC101008D, X8_E_PLAYBACK_MEDIA_ERR_NETWORK: 0xC101008E, X8_E_PLAYBACK_MEDIA_ERR_DECODE: 0xC101008F, X8_E_PLAYBACK_MEDIA_ERR_SRC_NOT_SUPPORTED: 0xC1010090, X8_E_PLAYBACK_MEDIA_GENERIC: 0xC1010091, X8_E_PLAYBACK_MEDIA_CANT_PLAYTO: 0xC1010092, X8_E_PLAYBACK_MEDIA_CANT_PLAYTO_PREMIUM: 0xC1010093, X8_E_PLAYBACK_FREESTREAMING_NO_RIGHTS: 0xC1010094, X8_E_PLAYBACK_PLAYTO_ERR_DECODE: 0xC1010095, X8_E_PLAYBACK_LOGON_TO_PLAY_EXPLICIT_CONTENT: 0xC1010096, X8_E_PLAYBACK_LOGON_TO_PLAY_EXPLICIT_CONTENT_PRE_ASSET_LOCATION: 0xC1010097, X8_E_PLAYBACK_EXPLICIT_CONTENT_PLAY_BLOCKED_PRE_ASSET_LOCATION: 0xC1010098, X8_E_PLAYBACK_PROTECTED_MEDIA_NOT_IDENTIFIED: 0xC1010099, X8_E_PLAYBACK_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED: 0xC101009A, X8_E_PLAYBACK_PLAYLIST_FILE_CORRUPT: 0xC101009C, X8_E_PLAYBACK_REMOTE_DESKTOP_NOT_SUPPORTED: 0xC101009D, X8_E_PLAYBACK_MEDIA_ERR_NOT_LOCAL: 0xC101009E, X8_E_PLAYBACK_HDMI_OUTPUT_LOST: 0xC101009F, X8_E_PLAYBACK_PLAYLIST_PATH_NOT_SUPPORTED: 0xC10100A0, X8_E_PLAYBACK_PLAYTO_UNEXPECTED_ERR: 0xC10100A1, X8_E_PLAYBACK_COMPONENT_LOAD_FAILURE: 0xC10100A2, X8_E_PLAYBACK_NO_ASSET_LOCATION: 0xC101010A, X8_E_PREVIEW_ONLY_DONOT_PLAY_IN_PLAYLIST: 0xC101010D, X8_E_OPLOCK_HANDLE_CLOSED: 0xC101010F, X8_E_PLAYBACK_STOPPED_DATA_LIMIT_EXCEEDED: 0xC10101C2, X8_E_PLAYBACK_STOPPED_DATA_LIMIT_APPROACHING: 0xC10101C3, X8_E_PLAYBACK_STOPPED_SWITCHED_TO_METERED_NETWORK: 0xC10101C4, X8_E_UNSUPPORTED_FORMAT: 0xC1010103, MF_E_DRM_UNSUPPORTED: 0xC00D3700, MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED: 0XC00D4E86, MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM: 0xC00D7186, MF_E_INVALIDMEDIATYPE: 0xC00D36B4, MF_E_CANNOT_CREATE_SINK: 0xC00D36FA, MF_E_DEBUGGING_NOT_ALLOWED: 0xC00D715D, MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED: 0xC00D7178, MF_E_INVALIDREQUEST: 0xC00D36B2, MF_E_UNSUPPORTED_SCHEME: 0xC00D36C3, MF_E_UNSUPPORTED_BYTESTREAM: 0xC00D36C4, MF_E_UNSUPPORTED_RATE: 0xC00D36D0, MF_E_TOPO_CODEC_NOT_FOUND: 0xC00D5212, MF_E_NO_PMP_HOST: 0xC00D717F, MF_E_UNAUTHORIZED: 0xC00D3701, INET_E_CONNECTION_TIMEOUT: 0x800C000b, INET_E_DOWNLOAD_FAILURE: 0x800C0008, INET_E_RESOURCE_NOT_FOUND: 0x800C0005, SL_E_LICENSE_FILE_NOT_INSTALLED: 0xC004F011
                    }, MediaTagError: {
                        MEDIA_ENGINE_ERR_NOERROR: 0, MEDIA_ERR_ABORTED: 1, MEDIA_ERR_NETWORK: 2, MEDIA_ERR_DECODE: 3, MEDIA_ERR_SRC_NOT_SUPPORTED: 4
                    }
            };
        var errorCodeNameLookupTable = {};
        function _adjustCodeUINT32(code)
        {
            return code < 0 ? (code += 0x100000000) : (code & 0xFFFFFFFF)
        }
        var codeToString = {
                DeviceGroupError: function(code, codeName) {
                    return (codeName + "(0x" + _adjustCodeUINT32(code).toString(16) + ")")
                }, Error: function(code, codeName) {
                        return (codeName + "(0x" + _adjustCodeUINT32(code).toString(16) + ")")
                    }, MediaTagError: function(code, codeName) {
                        return (codeName + "(" + code + ")")
                    }, unknownError: function(code) {
                        return "(0x" + _adjustCodeUINT32(code).toString(16) + ")".toString()
                    }
            };
        for (var groupName in errorGroups) {
            var errorGroup = errorGroups[groupName];
            for (var codeName in errorGroup) {
                var code = _hresult(errorGroup[codeName]);
                if (codeToString[groupName])
                    errorCodeNameLookupTable[code] = codeToString[groupName](_hresult(code), codeName)
            }
        }
        {};
        function _hydrateErrorTable(errorGroups) {
            var _hydratedTable = {};
            for (var groupName in errorGroups) {
                var errorGroup = errorGroups[groupName];
                Object.defineProperty(_hydratedTable, groupName, {
                    value: {}, writable: false, enumerable: true, configurable: false
                });
                for (var codeName in errorGroup) {
                    var code = _hresult(errorGroup[codeName]);
                    Object.defineProperty(_hydratedTable[groupName], codeName, {
                        value: {
                            code: _hresult(errorGroup[codeName]), name: codeName
                        }, writable: false, enumerable: true, configurable: false
                    })
                }
            }
            {};
            return _hydratedTable
        }
        function _errorToString(code) {
            var codeName = errorCodeNameLookupTable[code];
            return codeName || codeToString.unknownError(code)
        }
        function _mediaErrorToString(error) {
            return ("error.code = " + _errorToString(error.code) + ", error.msExtendedCode = " + _errorToString(error.msExtendedCode))
        }
        function _codeOf(errorName) {
            for (var groupName in errorGroups) {
                var errorGroup = errorGroups[groupName];
                var code = errorGroup[errorName];
                if (code === +code)
                    return _hresult(code)
            }
            {};
            throw new Error("Invalid Error name: " + errorName);
        }
        WinJS.Namespace.defineWithParent(MSEPlatform, "Playback", _hydrateErrorTable(errorGroups));
        WinJS.Namespace.defineWithParent(MSEPlatform, "Playback", {
            errorToString: _errorToString, mediaErrorToString: _mediaErrorToString, codeOfError: _codeOf
        })
    })();
    WinJS.Namespace.define("MS.Entertainment.Platform.Playback", {
        makePlaybackError: function makePlaybackError(error, context, postPendedText) {
            if (error instanceof Error)
                MSEPlatform.Playback.Etw.traceString("+PlaybackError::makePlaybackError InnerError: " + MSEPlatform.Playback.errorToString(error.code));
            else
                MSEPlatform.Playback.Etw.traceString("+PlaybackError::makePlaybackError InnerError" + ", " + MSEPlatform.Playback.mediaErrorToString(error) + ", context = " + context);
            var playbackError = {};
            var errorCode = 0;
            if (!error) {
                errorCode = MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_MEDIA_GENERIC.code;
                MS.Entertainment.Utilities.Telemetry.logPlaybackErrorConvertedToGeneric(0, 0, "makePlaybackError, error is NULL - " + context)
            }
            else if (typeof(error) === "object") {
                postPendedText = postPendedText || error.postPendedText;
                if (error.code)
                    errorCode = MS.Entertainment.Platform.Playback._mapMediaElementErrorCodes(error.code, error.msExtendedCode);
                else if (error.number)
                    errorCode = MS.Entertainment.Platform.Playback._mapMediaElementErrorCodes(error.number);
                else if (error.msExtendedCode)
                    errorCode = error.msExtendedCode;
                else
                    try {
                        var s = error.toString();
                        if (s && s !== String.empty) {
                            errorCode = MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_MEDIA_GENERIC.code;
                            MS.Entertainment.Utilities.Telemetry.logPlaybackErrorConvertedToGeneric(0, 0, "makePlaybackError, string object = " + s + " - " + context)
                        }
                    }
                    catch(ex) {}
            }
            else if (typeof(error) === "string") {
                errorCode = MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_MEDIA_GENERIC.code;
                MS.Entertainment.Utilities.Telemetry.logPlaybackErrorConvertedToGeneric(0, 0, "makePlaybackError, string literal = " + error + " - " + context)
            }
            else if (isNaN(error)) {
                errorCode = MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_MEDIA_GENERIC.code;
                MS.Entertainment.Utilities.Telemetry.logPlaybackErrorConvertedToGeneric(0, 0, "makePlaybackError, error isNaN - " + context)
            }
            else
                errorCode = error;
            playbackError.innerError = error;
            playbackError.isCritical = (error && error.isCritical);
            playbackError.code = errorCode;
            playbackError.msExtendedCode = errorCode;
            playbackError.context = context;
            playbackError.postPendedText = postPendedText;
            if (error && error.name)
                playbackError[error.name] = errorCode;
            MSEPlatform.Playback.Etw.traceString("-PlaybackError::makePlaybackError OuterError" + ", code = " + MSEPlatform.Playback.errorToString(errorCode));
            return playbackError
        }, firePlaybackError: function firePlaybackError(callback, error, context, mediaItem, postPendedText) {
                if (callback) {
                    var eventObject = {
                            type: "error", target: {error: {
                                        code: 0, innerError: null, isCritical: false, msExtendedCode: 0, mediaItem: null, context: context, postPendedText: null
                                    }}
                        };
                    eventObject.target.error = MS.Entertainment.Platform.Playback.makePlaybackError(error, context, postPendedText);
                    if (mediaItem !== undefined)
                        eventObject.target.error.mediaItem = mediaItem;
                    MSEPlatform.Playback.Etw.traceString("PlaybackErrors::firePlaybackError" + ", code = " + MSEPlatform.Playback.errorToString(eventObject.target.error.code) + ", msExtendedCode = " + MSEPlatform.Playback.errorToString(eventObject.target.error.msExtendedCode) + ", context = " + context);
                    callback(eventObject)
                }
                MS.Entertainment.Instrumentation.PerfTrack.disableAllStartupScenarios();
                MS.Entertainment.Instrumentation.PerfTrack.disableScenarioPlayProtectedInApp();
                MS.Entertainment.Instrumentation.PerfTrack.disableScenarioPlayNonProtectedInApp()
            }, makeParentallyBlockedError: function makeParentallyBlockedError() {
                return MS.Entertainment.Utilities.isVideoApp ? MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_EXPLICIT_CONTENT_PLAY_BLOCKED_PRE_ASSET_LOCATION : MS.Entertainment.Platform.Playback.Error.NS_E_EXPLICIT_CONTENT_PLAY_BLOCKED
            }, _mapMediaElementErrorCodes: function _mapMediaElementErrorCodes(code, msExtendedCode) {
                if (code < MSEPlatform.Playback.MediaTagError.MEDIA_ERR_ABORTED.code || code > MSEPlatform.Playback.MediaTagError.MEDIA_ERR_SRC_NOT_SUPPORTED.code)
                    return code;
                var errorCode;
                switch (code) {
                    case MSEPlatform.Playback.MediaTagError.MEDIA_ERR_ABORTED.code:
                        if (msExtendedCode)
                            errorCode = msExtendedCode;
                        else
                            errorCode = MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_ABORTED.code;
                        break;
                    case MSEPlatform.Playback.MediaTagError.MEDIA_ERR_NETWORK.code:
                        if (msExtendedCode)
                            errorCode = msExtendedCode;
                        else
                            errorCode = MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_NETWORK.code;
                        break;
                    case MSEPlatform.Playback.MediaTagError.MEDIA_ERR_DECODE.code:
                        if (msExtendedCode)
                            errorCode = msExtendedCode;
                        else
                            errorCode = MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_DECODE.code;
                        break;
                    case MSEPlatform.Playback.MediaTagError.MEDIA_ERR_SRC_NOT_SUPPORTED.code:
                        if (msExtendedCode)
                            if (msExtendedCode === MSEPlatform.Playback.Error.MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM.code)
                                errorCode = MSEPlatform.Playback.Error.NS_E_WMP_DRM_LICENSE_NOTACQUIRED.code;
                            else
                                errorCode = msExtendedCode;
                        else
                            errorCode = MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_SRC_NOT_SUPPORTED.code;
                        break;
                    default:
                        errorCode = MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_GENERIC.code;
                        MS.Entertainment.Utilities.Telemetry.logPlaybackErrorConvertedToGeneric(code, msExtendedCode, "_mapMediaElementErrorCodes");
                        break
                }
                return errorCode
            }
    })
})()
})();
/* >>>>>>/components/playback/playlist/playlist.js:3638 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(playlistNamespace) {
    "use strict";
    var MSEPlatform = WinJS.Namespace.define("MS.Entertainment.Platform", null);
    var Playback = WinJS.Namespace.define("MS.Entertainment.Platform.Playback", null);
    var ArrayDataAdapter = WinJS.Class.define(function(array, options) {
            if (typeof array === "string")
                array = JSON.parse(array);
            if (!Array.isArray(array) && !array.getAt)
                array = [array];
            this._array = array;
            if (options) {
                if (options.keyOf)
                    this._keyOf = options.keyOf;
                if (options.compareByIdentity)
                    this.compareByIdentity = true
            }
            if (this._keyOf)
                this._keyMap = {};
            else
                this._items = new Array(array.length)
        }, {
            setNotificationHandler: function(notificationHandler) {
                if (this._array.onvectorchanged !== undefined) {
                    var CollectionChange = Windows.Foundation.Collections.CollectionChange;
                    var that = this;
                    this._array.addEventListener("vectorchanged", function(ev) {
                        var index = ev.index;
                        switch (ev.collectionChange) {
                            case CollectionChange.reset:
                                notificationHandler.invalidateAll();
                                break;
                            case CollectionChange.itemInserted:
                                notificationHandler.inserted(that._item(index), that._itemKey(index - 1), that._itemKey(index + 1), index);
                                break;
                            case CollectionChange.itemChanged:
                                notificationHandler.changed(that._item(index));
                                break;
                            case CollectionChange.itemRemoved:
                                notificationHandler.removed(null, index);
                                break
                        }
                    })
                }
            }, itemsFromEnd: function(count) {
                    var len = this._array.length;
                    return (len === 0 ? errorDoesNotExist() : this.itemsFromIndex(len - 1, Math.min(count - 1, len - 1), 0))
                }, itemsFromKey: function(key, countBefore, countAfter) {
                    this._ensureItems();
                    if (!this._keyToIndexMap) {
                        this._keyToIndexMap = {};
                        var len = this._array.length;
                        for (var i = 0; i < len; i++)
                            this._keyToIndexMap[this._itemKey(i)] = i
                    }
                    var index = this._keyToIndexMap[key];
                    return (typeof index === "number" ? this.itemsFromIndex(index, Math.min(countBefore, index), countAfter) : errorDoesNotExist())
                }, itemsFromIndex: function(index, countBefore, countAfter) {
                    var len = this._array.length;
                    if (index >= len)
                        return errorDoesNotExist();
                    else {
                        var first = index - countBefore;
                        var last = Math.min(index + countAfter, len - 1);
                        var items = new Array(last - first + 1);
                        for (var i = first; i <= last; i++)
                            items[i - first] = this._item(i);
                        return WinJS.Promise.wrap({
                                items: items, offset: countBefore, totalCount: len, absoluteIndex: index
                            })
                    }
                }, getCount: function() {
                    return WinJS.Promise.wrap(this._array.length)
                }, insertAtStart: function(key, data) {
                    return this._insert(0, data)
                }, insertBefore: function(key, data, nextKey, nextIndexHint) {
                    return this._insert(this._indexFromKeyAndHint(nextKey, nextIndexHint), data)
                }, insertAfter: function(key, data, previousKey, previousIndexHint) {
                    return this._insert(this._indexFromKeyAndHint(previousKey, previousIndexHint) + 1, data)
                }, insertAtEnd: function(key, data) {
                    return this._insert(this._array.length, data)
                }, change: function(key, newData, indexHint) {
                    var index = this._indexFromKeyAndHint(key, indexHint);
                    if (isNaN(index))
                        return errorNoLongerMeaningful();
                    this._setAt(index, newData);
                    return WinJS.Promise.wrap()
                }, moveToStart: function(key, indexHint) {
                    return this._move(this._indexFromKeyAndHint(key, indexHint), 0)
                }, moveBefore: function(key, nextKey, indexHint, nextIndexHint) {
                    return this._move(this._indexFromKeyAndHint(key, indexHint), this._indexFromKeyAndHint(nextKey, nextIndexHint))
                }, moveAfter: function(key, previousKey, indexHint, previousIndexHint) {
                    return this._move(this._indexFromKeyAndHint(key, indexHint), this._indexFromKeyAndHint(previousKey, previousIndexHint) + 1)
                }, moveToEnd: function(key, indexHint) {
                    return this._move(this._indexFromKeyAndHint(key, indexHint), this._array.length)
                }, remove: function(key, indexHint) {
                    var index = this._indexFromKeyAndHint(key, indexHint);
                    if (isNaN(index))
                        return errorNoLongerMeaningful();
                    if (!this._keyOf) {
                        this._ensureItems();
                        this._items.splice(index, 1)
                    }
                    this._removeAt(index);
                    if (this._keyOf)
                        delete this._keyMap[key];
                    return WinJS.Promise.wrap()
                }, keyFromIndex: function keyFromIndex(index) {
                    return this._itemKey(index)
                }, _itemKey: function(index) {
                    if (index < 0 || index >= this._array.length)
                        return null;
                    else if (this._keyOf)
                        return this._keyOf(this._array[index]);
                    else {
                        var item = this._items[index];
                        if (item)
                            return item.key;
                        else
                            return index.toString()
                    }
                }, _newItem: function(index) {
                    return {
                            key: this._itemKey(index), data: this._array[index]
                        }
                }, _ensureItems: function() {
                    if (typeof this._nextAvailableKey !== "number") {
                        var len = this._array.length;
                        for (var i = 0; i < len; i++)
                            if (!this._items[i])
                                this._items[i] = this._newItem(i);
                        this._nextAvailableKey = len
                    }
                }, _item: function(index) {
                    var item;
                    if (this._keyOf) {
                        var data = this._array[index],
                            key = this._keyOf(data);
                        item = this._keyMap[key];
                        if (!item)
                            item = this._keyMap[key] = {
                                key: key, data: data
                            }
                    }
                    else {
                        item = this._items[index];
                        if (!item)
                            item = this._items[index] = this._newItem(index)
                    }
                    return item
                }, _indexFromKeyAndHint: function(key, indexHint) {
                    var i,
                        min,
                        max;
                    for (i = indexHint, max = Math.min(i + keySearchRange, this._array.length - 1); i <= max; i++)
                        if (this._itemKey(i) === key)
                            return i;
                    for (i = indexHint - 1, min = Math.max(indexHint - keySearchRange, 0); i >= min; i--)
                        if (this._itemKey(i) === key)
                            return i;
                    return NaN
                }, _insert: function(index, data) {
                    if (isNaN(index))
                        return errorNoLongerMeaningful();
                    if (!this._keyOf)
                        this._ensureItems();
                    this._insertAt(index, data);
                    var item;
                    if (this._keyOf) {
                        var key = this._keyOf(data);
                        item = {
                            key: key, data: data
                        };
                        this._keyMap[key] = item
                    }
                    else {
                        item = {
                            key: (this._nextAvailableKey++).toString(), data: data
                        };
                        this._items.splice(index, 0, item)
                    }
                    return WinJS.Promise.wrap(item)
                }, _move: function(indexFrom, indexTo) {
                    if (isNaN(indexFrom) || isNaN(indexTo))
                        return errorNoLongerMeaningful();
                    var item,
                        data;
                    if (this._keyOf)
                        data = this._array[indexFrom];
                    else {
                        this._ensureItems();
                        item = this._items.splice(indexFrom, 1)[0];
                        data = item.data
                    }
                    this._removeAt(indexFrom);
                    if (indexFrom < indexTo)
                        indexTo--;
                    this._insertAt(indexTo, data);
                    if (!this._keyOf)
                        this._items.splice(indexTo, 0, item);
                    return WinJS.Promise.wrap()
                }, _insertAt: function(index, data) {
                    if (this._array.insertAt)
                        this._array.insertAt(index, data);
                    else
                        this._array.splice(index, 0, data)
                }, _setAt: function(index, data) {
                    if (this._array.setAt)
                        this._array.setAt(index, data);
                    else
                        this._array[index] = data
                }, _removeAt: function(index) {
                    if (this._array.removeAt)
                        this._array.removeAt(index);
                    else
                        this._array.splice(index, 1)
                }
        });
    var ArrayDataSource = WinJS.Class.derive(WinJS.UI.VirtualizedDataSource, function(array, options) {
            this._baseDataSourceConstructor(new ArrayDataAdapter(array, options))
        });
    var playlistProvider;
    var mySpace = WinJS.Namespace.define(playlistNamespace, null);
    var Playback = WinJS.Namespace.define("MS.Entertainment.Platform.Playback");
    var Factory = WinJS.Namespace.define("MS.Entertainment.Data.Factory");
    var Query = WinJS.Namespace.define("MS.Entertainment.Data.Query");
    var Shell = WinJS.Namespace.define("MS.Entertainment.UI.Shell");
    var converterByMediaType;
    function initializeConverterByMediaType() {
        if (converterByMediaType)
            return;
        converterByMediaType = {};
        converterByMediaType[Microsoft.Entertainment.Queries.ObjectType.track] = "track";
        converterByMediaType[Microsoft.Entertainment.Queries.ObjectType.video] = "video";
        converterByMediaType[Microsoft.Entertainment.Queries.ObjectType.game] = "gameTrailer";
        if (MS.Entertainment.Data.MediaBrowser)
            converterByMediaType[MS.Entertainment.Data.MediaBrowser.ItemType.music] = "musicFile"
    }
    var expanderByMediaType;
    function initializeExpanderByMediaType() {
        if (expanderByMediaType)
            return;
        expanderByMediaType = {};
        expanderByMediaType[Microsoft.Entertainment.Queries.ObjectType.album] = "album";
        expanderByMediaType[Microsoft.Entertainment.Queries.ObjectType.person] = "artist";
        expanderByMediaType[Microsoft.Entertainment.Queries.ObjectType.genre] = "genre";
        expanderByMediaType[Microsoft.Entertainment.Queries.ObjectType.playlist] = "playlist";
        if (MS.Entertainment.Data.MediaBrowser)
            expanderByMediaType[MS.Entertainment.Data.MediaBrowser.ItemType.folder] = "folder"
    }
    function localPathToUrl(path, mediaInstanceId) {
        if (!path)
            return WinJS.Promise.wrap(null);
        if (!mediaInstanceId || mediaInstanceId === MS.Entertainment.Utilities.EMPTY_GUID)
            mediaInstanceId = null;
        else
            mediaInstanceId = ("{" + mediaInstanceId + "}").toUpperCase();
        return Windows.Storage.StorageFile.getFileFromPathAsync(path).then(function(loadedFile) {
                var url = URL.createObjectURL(loadedFile, {oneTimeOnly: false});
                return {
                        url: url, mediaInstanceId: mediaInstanceId
                    }
            })
    }
    function servicePathToUrl(path) {
        if (!path)
            return WinJS.Promise.wrapError("servicePathToUrl is called with null url");
        var request = null;
        var url = path;
        return new WinJS.Promise(function(c, e, p) {
                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                var hostName = (new Windows.Foundation.Uri(url)).host;
                signIn.getPassportTicket(MS.Entertainment.Utilities.SignIn.TicketType.MBI_SSL, hostName, false).then(function getTicketCompleted(passportTicket) {
                    request = new XMLHttpRequest;
                    request.onreadystatechange = function() {
                        if (request.readyState === 4) {
                            if (request.status >= 200 && request.status < 300) {
                                var responseHeader = request.getAllResponseHeaders();
                                var response = request.response;
                                var stream = response.msRandomAccessStream;
                                var blob = msWWA.createBlobFromRandomAccessStream(response.type, stream);
                                var url = URL.createObjectURL(blob, {oneTimeOnly: false});
                                if (c)
                                    c({
                                        url: url, mediaInstanceId: null
                                    })
                            }
                            else if (e)
                                e(request);
                            request.onreadystatechange = function(){}
                        }
                        else if (p)
                            p(request)
                    };
                    request.open("GET", url, false);
                    request.responseType = "blob";
                    request.setRequestHeader("Authorization", "WLID1.1 " + passportTicket);
                    request.send(null)
                })
            }, function() {
                if (request)
                    request.abort()
            })
    }
    function waitForSignIn() {
        var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
        if (signInService.isSignedIn)
            return WinJS.Promise.wrap();
        else if (signInService.isSigningIn)
            return new WinJS.Promise(function(c, e, p) {
                    function onIsSigningInChanged(newValue, oldValue) {
                        if (!newValue) {
                            signInService.unbind("isSigningIn", onIsSigningInChanged);
                            if (signInService.isSignedIn)
                                c();
                            else
                                e("sign in failed or canceled")
                        }
                    }
                    signInService.bind("isSigningIn", onIsSigningInChanged)
                });
        else
            return WinJS.Promise.wrapError(Playback.Error.ZEST_E_SIGNIN_REQUIRED)
    }
    function getPassportTicket() {
        var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
        return waitForSignIn().then(function signedIn() {
                return signInService.getPassportTicket(MS.Entertainment.Utilities.SignIn.TicketType.MBI_SSL, MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_Passport))
            })
    }
    function shouldRetryForFailure(failure) {
        var retry = false;
        var Error = MS.Entertainment.Platform.Playback.Error;
        if (failure && (failure.number == Error.INET_E_CONNECTION_TIMEOUT.code || failure.number == Error.INET_E_DOWNLOAD_FAILURE.code || failure.number == Error.INET_E_RESOURCE_NOT_FOUND.code))
            retry = true;
        return retry
    }
    function getValidServiceMediaId(item) {
        if (!item) {
            MS.Entertainment.Platform.Playback.fail("Attempted to acquire SMID from null item.");
            return MS.Entertainment.Utilities.EMPTY_GUID
        }
        var serviceMediaId;
        if (MS.Entertainment.Utilities.isValidServiceId(item.zuneId))
            serviceMediaId = item.zuneId;
        else if (MS.Entertainment.Utilities.isValidServiceId(item.serviceId) && item.serviceIdType === MS.Entertainment.Data.Query.edsIdType.zuneCatalog)
            serviceMediaId = item.serviceId;
        else
            MS.Entertainment.Platform.Playback.fail("Failed to acquire a valid SMID from this item: " + "item.zuneId = " + item.zuneId + "item.serviceId = " + item.serviceId + "item.serviceIdType = " + item.serviceIdType);
        return serviceMediaId || MS.Entertainment.Utilities.EMPTY_GUID
    }
    function getPreferredStream(item, context, mediaEntitlements, retriesAttempted) {
        if (!retriesAttempted)
            retriesAttempted = 0;
        return getPreferredStreamInternal(item, context, mediaEntitlements).then(function success(result) {
                Playback.Etw.traceString("PLST->getPreferredStream: success ");
                MS.Entertainment.Utilities.Telemetry.logGetPreferredStreamSucceeded(retriesAttempted);
                return result
            }, function fail(result) {
                if (WinJS.Promise.isCanceledError(result)) {
                    Playback.Etw.traceString("PLST->getPreferredStream: canceled");
                    return WinJS.Promise.wrapError(result)
                }
                Playback.Etw.traceString("PLST->getPreferredStream: failed with error : " + result);
                MS.Entertainment.Utilities.Telemetry.logGetPreferredStreamFailed(result, retriesAttempted);
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                if (retriesAttempted < configurationManager.playback.getPreferredStreamRetries && shouldRetryForFailure(result)) {
                    Playback.Etw.traceString("PLST->getPreferredStream: waiting and trying again");
                    return WinJS.Promise.timeout(configurationManager.playback.getPreferredStreamRetryDelayMS).then(function delayedRetry() {
                            return getPreferredStream(item, context, mediaEntitlements, retriesAttempted + 1)
                        })
                }
                else {
                    Playback.Etw.traceString("PLST->getPreferredStream: attempt failed but not retrying");
                    return WinJS.Promise.wrapError(result)
                }
            })
    }
    function getPreferredStreamInternal(item, context, mediaEntitlements, retryCount) {
        function doGetAssetLocationsAsync() {
            return MS.Entertainment.Platform.PurchaseHelpers.getAssetLocationsAsync(getValidServiceMediaId(item), item.rights, rightsFilter, false, context, "USE HEADER AUTH NOT PASSPORT TICKET")
        }
        function onTrackingIdObtained(id, obtained) {
            if (id) {
                var trackingIdState = MS.Entertainment.Platform.SessionManager.trackingIdState;
                trackingIdState[id] = "obtained";
                Playback.Etw.traceString("OBTAINED tracking id: " + id)
            }
        }
        Playback.Etw.traceString("PLST->getPreferredStreamInternal, context: " + context);
        if (Debug.testHookSimulateGetPreferredStreamFailure) {
            Playback.Etw.traceString("PLST->getPreferredStreamInternal, simulating failure: " + Debug.testHookSimulateGetPreferredStreamFailure);
            return WinJS.Promise.wrapError(Debug.testHookSimulateGetPreferredStreamFailure)
        }
        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
        if (sessionMgr._primarySession.isRemoteSessionRunning)
            context = "User";
        if (item.mediaType === Microsoft.Entertainment.Queries.ObjectType.track) {
            var assetLocationRequestPromise = null;
            if (mediaEntitlements && mediaEntitlements.canFullyStream && mediaEntitlements.best.stream.isAvailable) {
                var requestInfo = {
                        serviceMediaIds: [mediaEntitlements.serviceMediaId], mediaInstanceIds: [mediaEntitlements.best.stream.serviceMediaInstanceId], nativeLicenseRights: [MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.fromModernToNative(mediaEntitlements.best.stream.licenseRight)], offerIds: [null]
                    };
                assetLocationRequestPromise = MS.Entertainment.Platform.PurchaseHelpers.getAssetLocationsUsingRequestInfoAsync(requestInfo, false, context, "USE HEADER AUTH NOT PASSPORT TICKET", true)
            }
            else {
                var rightsFilter = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.FreeStream];
                assetLocationRequestPromise = waitForSignIn().then(doGetAssetLocationsAsync, doGetAssetLocationsAsync)
            }
            return assetLocationRequestPromise.then(function getAssetLocationsAsync_complete(assetLocations) {
                    if (assetLocations.length === 0) {
                        var error = Playback.Error.X8_E_PLAYBACK_NO_ASSET_LOCATION;
                        if (error === Playback.Error.X8_E_PLAYBACK_NO_ASSET_LOCATION && mediaEntitlements && mediaEntitlements.hasTakeDown)
                            error = Playback.Error.ZEST_E_MW_CONTENT_REVOKED_ON_LABEL_TAKEDOWN;
                        if (error === Playback.Error.X8_E_PLAYBACK_NO_ASSET_LOCATION && mediaEntitlements && mediaEntitlements.subscription && (mediaEntitlements.subscription.isAvailable && !mediaEntitlements.subscription.stream.isAvailable))
                            error = Playback.Error.ZEST_E_ASSET_LICENSE_SUBSCRIPTION_DOWNLOAD_ONLY;
                        if (error === Playback.Error.X8_E_PLAYBACK_NO_ASSET_LOCATION && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.freePlayLimits) && MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(item)) {
                            var freePlayLimits = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.freePlayLimits);
                            if (item.isFreeStreamRestrictedByIndividualLimit)
                                error = Playback.Error.E_MDS_INDIVIDUAL_TRACK_LIMIT;
                            else if (freePlayLimits.isMonthlyFreeLimitExceeded || item.isFreeStreamRestrictedByMonthlyLimit)
                                error = Playback.Error.E_MDS_AUTHENTICATED_TRACK_LIMIT
                        }
                        if (error === Playback.Error.X8_E_PLAYBACK_NO_ASSET_LOCATION) {
                            MS.Entertainment.Platform.Playback.assert(item && item.mediaType && item.mediaType === Microsoft.Entertainment.Queries.ObjectType.track, "expected a track media type");
                            var canBuy = false;
                            var canPreview = false;
                            if (item && item.rights)
                                for (var i = 0; i < item.rights.length; i++) {
                                    var right = item.rights[i];
                                    if (right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase)
                                        canBuy = true;
                                    if (right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview)
                                        canPreview = true;
                                    if (canBuy && canPreview)
                                        break
                                }
                            if (canBuy)
                                error = Playback.Error.ZEST_E_ASSET_LICENSE_RIGHT_NOT_OWNED;
                            else if (canPreview)
                                error = Playback.Error.X8_E_PREVIEW_ONLY_DONOT_PLAY_IN_PLAYLIST
                        }
                        Playback.Etw.traceString("PLST->getAssetLocationsAsync_complete with error: " + error.name);
                        return WinJS.Promise.wrapError(error)
                    }
                    Playback.Etw.traceString("PLST<-getPreferredStreamInternal");
                    onTrackingIdObtained(assetLocations[0].trackingId);
                    return WinJS.Promise.wrap({
                            url: assetLocations[0].assetUrl, mediaInstanceId: assetLocations[0].mediaInstanceId, nativeLicenseRight: assetLocations[0].nativeLicenseRight, offerId: assetLocations[0].offerId, trackingId: assetLocations[0].trackingId
                        })
                }, function getAssetLocationsAsync_error(error) {
                    Playback.Etw.traceString("PLST->getAssetLocationsAsync_error: " + error);
                    if (!isNetworkAvailable() && !WinJS.Promise.isCanceledError(error))
                        error = Playback.Error.NS_E_WMPIM_USEROFFLINE;
                    else if (error && error.number && error.number === MS.Entertainment.Platform.Playback.Error.ZUNE_E_PASSPORT_TICKET_SIGNIN_REQUIRED.code)
                        if (!retryCount) {
                            Playback.Etw.traceString("PLST->getAssetLocationsAsync sign-in error - wait for sign-in and retry");
                            return waitForSignIn().then(function retry() {
                                    return getPreferredStreamInternal(item, context, mediaEntitlements, 1)
                                })
                        }
                    return WinJS.Promise.wrapError(error)
                })
        }
        else
            return getPassportTicket().then(function got_ticket(ticket) {
                    function getPreferredStreamInfoAsync(ticket, serviceId) {
                        var assetLocationRequest = new Microsoft.Entertainment.Service.Requests.Mds.Video.AssetLocationRequest;
                        assetLocationRequest.serviceMediaId = serviceId;
                        assetLocationRequest.intendedUse = Microsoft.Entertainment.Service.Requests.Mds.Video.IntendedUse.stream;
                        return assetLocationRequest.sendAsync().then(function getAssetLocationAsync_complete(assetLocationResponse) {
                                var videoEncoding = Microsoft.Entertainment.Marketplace.VideoEncoding.unknown;
                                if (assetLocationResponse.body.encoding === Microsoft.Entertainment.Service.Requests.Mds.Video.Encoding.h264)
                                    videoEncoding = Microsoft.Entertainment.Marketplace.VideoEncoding.h264;
                                else if (assetLocationResponse.body.encoding === Microsoft.Entertainment.Service.Requests.Mds.Video.Encoding.vc1)
                                    videoEncoding = Microsoft.Entertainment.Marketplace.VideoEncoding.vc1;
                                return WinJS.Promise.wrap({
                                        url: assetLocationResponse.body.url, licenseKeyId: assetLocationResponse.body.licenseKeyId, signedLicensePolicyTicket: assetLocationResponse.body.signedLicensePolicyTicket, mediaInstanceId: assetLocationResponse.body.serviceMediaInstanceId, offerId: assetLocationResponse.body.offerId, videoEncoding: videoEncoding
                                    })
                            })
                    }
                    var serviceId = getValidServiceMediaId(item);
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync([serviceId]).then(function onComplete(mediaEntitlementResult) {
                            try {
                                mediaEntitlements = JSON.parse(mediaEntitlementResult).result.entitlements[0]
                            }
                            catch(e) {
                                mediaEntitlements = null
                            }
                            if (mediaEntitlements && mediaEntitlements.canFullyStream)
                                return getPreferredStreamInfoAsync(ticket, serviceId);
                            else if (item.rights) {
                                var offerIds = [];
                                for (var i = 0; i < item.rights.length; i++)
                                    if (item.rights[i].offerId)
                                        offerIds.push(item.rights[i].offerId);
                                return MS.Entertainment.UI.PurchaseHistoryService.refreshVideoOffersAsync(offerIds).then(function onComplete(result) {
                                        return getPreferredStreamInfoAsync(ticket, serviceId)
                                    }, function onError(error) {
                                        Playback.Etw.traceString("PLST->refreshAsync() error = " + MS.Entertainment.Utilities.stringify(error));
                                        return getPreferredStreamInfoAsync(ticket, serviceId)
                                    })
                            }
                            else
                                return WinJS.Promise.wrapError(Playback.Error.ZEST_E_ASSET_ITEM_NOT_PURCHASED)
                        }, function onError(error) {
                            return WinJS.Promise.wrapError(error)
                        })
                })
    }
    function isNetworkAvailable() {
        try {
            return MS.Entertainment.UI.NetworkStatusService.isOnline()
        }
        catch(ex) {
            MS.Entertainment.Platform.Playback.fail("Exception in isNetworkAvailable, make sure uiState service has been registered prior playback attempt: " + MS.Entertainment.Utilities.stringify(ex));
            return true
        }
    }
    function itemToUrl(item, context) {
        Playback.Etw.traceString("PLST->itemToUrl");
        if (!item)
            return WinJS.Promise.wrap(null);
        var mediaStore = null;
        var provider = null;
        var preferredFile;
        switch (item.mediaType) {
            case Microsoft.Entertainment.Queries.ObjectType.video:
                mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                provider = mediaStore.videoProvider;
                break;
            case Microsoft.Entertainment.Queries.ObjectType.track:
                mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                provider = mediaStore.trackProvider;
                break;
            default:
                return WinJS.Promise.wrapError("Unexpected media type")
        }
        var mediaEntitlements = null;
        function internalItemToUrl() {
            var urlPromise;
            var localPath = null;
            var protectionState = Playback.ProtectionState.unknown;
            if (preferredFile)
                switch (preferredFile.type) {
                    case Microsoft.Entertainment.Platform.FileUrlType.localFileUrl:
                        urlPromise = localPathToUrl(preferredFile.url, preferredFile.mediaInstanceId);
                        localPath = preferredFile.url;
                        if (preferredFile.protection) {
                            switch (preferredFile.protection) {
                                case Microsoft.Entertainment.Platform.ProtectionState.protected:
                                    protectionState = Playback.ProtectionState.drmProtected;
                                    break;
                                case Microsoft.Entertainment.Platform.ProtectionState.unprotected:
                                    protectionState = Playback.ProtectionState.unprotected;
                                    break;
                                case Microsoft.Entertainment.Platform.ProtectionState.unknown:
                                    protectionState = Playback.ProtectionState.unknown;
                                    break;
                                default:
                                    MS.Entertainment.Platform.Playback.assert(false, "getPreferredFileUrlAsync returned invalid protectionState");
                                    break
                            }
                            if (MS.Entertainment.Utilities.isVideoApp1 && !MS.Entertainment.Utilities.isWindowsBlue)
                                protectionState = Playback.ProtectionState.drmProtected
                        }
                        break;
                    case Microsoft.Entertainment.Platform.FileUrlType.serviceFileUrl:
                        MS.Entertainment.Platform.Playback.assert(!!preferredFile.url, "Fix it: provider.getPreferredFileUrlAsync returned null serviceFileUrl in success completion");
                        urlPromise = servicePathToUrl(preferredFile.url);
                        protectionState = Playback.ProtectionState.unprotected;
                        break;
                    case Microsoft.Entertainment.Platform.FileUrlType.marketPlaceFileUrl:
                        urlPromise = getPreferredStream(item, context, mediaEntitlements);
                        protectionState = Playback.ProtectionState.unknown;
                        break;
                    case Microsoft.Entertainment.Platform.FileUrlType.remoteMachineFileUrl:
                        urlPromise = WinJS.Promise.wrapError(Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_NOT_LOCAL);
                        protectionState = Playback.ProtectionState.unknown;
                        break;
                    default:
                        urlPromise = getPreferredStream(item, context, mediaEntitlements);
                        protectionState = Playback.ProtectionState.drmProtected;
                        item.filePath = null;
                        break
                }
            else if (item.filePath && item.filePath.substr(0, 5) === "zest:") {
                urlPromise = getPreferredStream(item, context, mediaEntitlements);
                protectionState = Playback.ProtectionState.drmProtected
            }
            else if (item.filePath) {
                urlPromise = localPathToUrl(item.filePath);
                localPath = item.filePath;
                protectionState = Playback.ProtectionState.unknown
            }
            else {
                urlPromise = getPreferredStream(item, context, mediaEntitlements);
                protectionState = Playback.ProtectionState.drmProtected
            }
            Playback.Etw.traceString("PLST->computeURL");
            return urlPromise.then(function urlPromiseComplete(result) {
                    Playback.Etw.traceString("PLST<-computeURL");
                    if (localPath) {
                        if (!(item.filePath && item.filePath === localPath))
                            item.filePath = localPath;
                        if (protectionState !== Playback.ProtectionState.unknown) {
                            Playback.Etw.traceString("PLST-localPath protection state returned from DB: " + protectionState);
                            return WinJS.Promise.wrap({
                                    url: result.url, mediaInstanceId: result.mediaInstanceId, nativeLicenseRight: null, offerId: null, isLocal: true, trackingId: result.trackingId, protectionState: protectionState
                                })
                        }
                        else {
                            Playback.Etw.traceString("PLST->localPath protection state");
                            return Windows.Storage.StorageFile.getFileFromPathAsync(localPath).then(function getFileFromPathAsync(storageFile) {
                                    var extraProps = [];
                                    extraProps.push("System.DRM.IsProtected");
                                    return storageFile.properties.retrievePropertiesAsync(extraProps).then(function retrievePropertiesAsync(extraPropsResult) {
                                            var isProtected = extraPropsResult.lookup("System.DRM.IsProtected");
                                            if (isProtected)
                                                protectionState = Playback.ProtectionState.drmProtected;
                                            else
                                                protectionState = Playback.ProtectionState.unprotected;
                                            Playback.Etw.traceString("PLST<-localPath protection state");
                                            return WinJS.Promise.wrap({
                                                    url: result.url, mediaInstanceId: result.mediaInstanceId, nativeLicenseRight: null, offerId: null, isLocal: true, trackingId: result.trackingId, protectionState: protectionState
                                                })
                                        })
                                })
                        }
                    }
                    else {
                        MS.Entertainment.Platform.Playback.assert(!!result, "Fix it: urlPromise in itemToUrl should not call into success handler with null or undefined result! Check corresponding urlPromise returning function behavior");
                        if (!result)
                            return WinJS.Promise.wrapError("itemToUrl: unexpected failure in urlPromise sucessful completion");
                        if (protectionState === Playback.ProtectionState.unknown)
                            if (result.url && result.url.toLowerCase().indexOf(".mp3") !== -1)
                                protectionState = Playback.ProtectionState.unprotected;
                            else
                                protectionState = Playback.ProtectionState.drmProtected;
                        return WinJS.Promise.wrap({
                                url: result.url, mediaInstanceId: result.mediaInstanceId, nativeLicenseRight: result.nativeLicenseRight, licenseKeyId: result.licenseKeyId, signedLicensePolicyTicket: result.signedLicensePolicyTicket, offerId: result.offerId, isLocal: false, trackingId: result.trackingId, protectionState: protectionState, videoEncoding: result.videoEncoding
                            })
                    }
                }, function urlPromiseError(error) {
                    Playback.Etw.traceString("PLST<-computeURLError");
                    return WinJS.Promise.wrapError(error)
                })
        }
        var getMediaEntitlementsPromise = function itemToUrl_getMediaEntitlements() {
                if (!item.canPlayLocally && (item.hasZuneId && item.mediaType === Microsoft.Entertainment.Queries.ObjectType.track))
                    return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync([item.zuneId]).then(function itemToUrl_getMediaEntitlementsAsync_complete(result) {
                            mediaEntitlements = JSON.parse(result).result.entitlements[0];
                            return internalItemToUrl()
                        }, function itemToUrl_getMediaEntitlementsAsync_error() {
                            return internalItemToUrl()
                        });
                else
                    return internalItemToUrl()
            };
        var hydrationPromise = function itemToUrl_hydrate() {
                var shouldHydrate = (!item.hydrated || item.isFailed) && isNetworkAvailable();
                if (shouldHydrate && item.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                    if (preferredFile.type === Microsoft.Entertainment.Platform.FileUrlType.localFileUrl) {
                        Playback.Etw.traceString("PLST::itemToUrl_hydrate skipping hydrate for local track");
                        shouldHydrate = false
                    }
                    else if (preferredFile.type === Microsoft.Entertainment.Platform.FileUrlType.marketPlaceFileUrl && item.inCollection && item.hasZuneId) {
                        Playback.Etw.traceString("PLST::itemToUrl_hydrate skipping hydrate for in collection marketplace track");
                        shouldHydrate = false
                    }
                if (shouldHydrate) {
                    item = MS.Entertainment.ViewModels.MediaItemModel.augment(item);
                    return item.hydrate({forceUpdate: true}).then(getMediaEntitlementsPromise, getMediaEntitlementsPromise)
                }
                else
                    return getMediaEntitlementsPromise()
            };
        Playback.Etw.traceString("PLST->getPreferredFileUrlAsync.  item.libraryId = " + item.libraryId);
        return provider.getPreferredFileUrlAsync(item.libraryId).then(function(result) {
                Playback.Etw.traceString("PLST<-getPreferredFileUrlAsync");
                preferredFile = result;
                return hydrationPromise()
            }, function handleError(e) {
                var s = "PLST<-getPreferredFileUrlAsync Error : " + e + "   hr = " + Playback.errorToString(e.number);
                Playback.Etw.traceString(s);
                return WinJS.Promise.wrapError(e)
            })
    }
    function createMediaInstance(itemData) {
        return Playback.MediaInstance.createInstanceAsync(itemData)
    }
    function queryPreviewRights(item, mediaType) {
        var queryDetailPromise = WinJS.Promise.wrap(null);
        if (!item.data.rights)
            queryDetailPromise = MS.Entertainment.Platform.PurchaseHelpers.queryMediaDetailForCacheItemAsync(item, mediaType);
        return queryDetailPromise.then(function queryMediaDetailForCacheItemAsync_complete(detail) {
                var rights = (detail && detail.result && detail.result.item) ? detail.result.item.rights : item.data.rights;
                var zuneId = (detail && detail.result && detail.result.zuneId) ? detail.result.item.zuneId : item.data.zuneId;
                if (!zuneId)
                    zuneId = (detail && detail.result && detail.result.serviceId) ? detail.result.item.serviceId : item.data.serviceId;
                var right;
                if (rights)
                    right = MS.Entertainment.Platform.PurchaseHelpers.getPreferredRight(rights, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PreviewStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview]);
                if (right)
                    if (mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                        right.previewUrl = right.videoFileUrl;
                        return WinJS.Promise.wrap(right)
                    }
                    else
                        return MS.Entertainment.Platform.PurchaseHelpers.getAssetLocationsAsync(zuneId, [right]).then(function getAssetLocationsAsync_complete(assetLocations) {
                                if (assetLocations.length === 0)
                                    return WinJS.Promise.wrapError("No PreviewStream or Preview license right found for " + ((item.data) ? item.data.name : item.name));
                                right.previewUrl = assetLocations[0].assetUrl;
                                return WinJS.Promise.wrap(right)
                            }, function getAssetLocations_error(error) {
                                if (!WinJS.Promise.isCanceledError(error))
                                    if (!isNetworkAvailable())
                                        error = MS.Entertainment.Platform.Playback.makePlaybackError(Playback.Error.NS_E_WMPIM_USEROFFLINE, "getAssetLocations_error");
                                return WinJS.Promise.wrapError(error)
                            });
                else
                    return WinJS.Promise.wrapError("No PreviewStream or Preview license right found for this item")
            })
    }
    function createMusicVideoInstanceAsync(item, ordinal, startPosition, context, playPreviewOnly) {
        if (!item.data.musicVideo)
            return WinJS.Promise.wrapError("No music video available to hydrate");
        return waitForSignIn().then(function signed_in() {
                return item.data.musicVideo.hydrate().then(function gotMusicVideo(musicVideo) {
                        var dynamicItem = {
                                key: item.key, data: musicVideo, trackItem: item
                            };
                        return mediaInstanceFactory.musicVideo(dynamicItem, ordinal, startPosition, context, playPreviewOnly)
                    }, function got_MusicVideoDetailsError(error) {
                        if (!WinJS.Promise.isCanceledError(error))
                            return WinJS.Promise.wrapError(new Error("MusicVideo hydration failure " + MS.Entertainment.Utilities.stringify(error)));
                        else
                            return WinJS.Promise.wrapError(error)
                    })
            })
    }
    var audioVideoInstanceFactory = function audioVideoInstanceFactory(item, ordinal, startPosition, mediaType, context, playPreviewOnly, ignoreMusicVideos) {
            if (MS.Entertainment.Utilities.isMusicApp2 && MS.Entertainment.Platform.Playback._isMusicVideoModeInEffect && !ignoreMusicVideos && mediaType === Microsoft.Entertainment.Queries.ObjectType.track && item.data.hasMusicVideoId)
                return createMusicVideoInstanceAsync(item, ordinal, startPosition, context, playPreviewOnly).then(function createMusicVideoInstanceAsync_success(instance) {
                        return instance
                    }, function createMusicVideoInstanceAsync_error(error) {
                        Playback.Etw.traceString("audioVideoInstanceFactory::createMusicVideoInstanceAsync failed: " + MS.Entertainment.Utilities.stringify(error));
                        if (!WinJS.Promise.isCanceledError(error))
                            return audioVideoInstanceFactory(item, ordinal, startPosition, mediaType, context, playPreviewOnly, true);
                        else
                            return WinJS.Promise.wrapError(error)
                    });
            function createPreviewMediaInstance() {
                Playback.Etw.traceString("+PLST::audioVideoInstanceFactory():createPreviewMediaInstance");
                function GetPreviewMediaInstanceUrl() {
                    return item.data.videoPreviewUrl;
                    Playback.Etw.traceString("-PLST::audioVideoInstanceFactory():createPreviewMediaInstance")
                }
                if (item.data.hasCanonicalId && item.data.videoPreviewUrl) {
                    Playback.Etw.traceString("-PLST::audioVideoInstanceFactory():createPreviewMediaInstance for video preview");
                    return createMediaInstance({
                            source: GetPreviewMediaInstanceUrl(), isLocal: false, mediaInstanceId: null, nativeLicenseRight: null, offerId: null, cookie: ordinal, mediaItem: item, mediaType: mediaType, protectionState: Playback.ProtectionState.unprotected, startPosition: startPosition
                        })
                }
                else
                    return queryPreviewRights(item, mediaType).then(function gotPreview(right) {
                            if (!right) {
                                Playback.Etw.traceString("-PLST::audioVideoInstanceFactory():createPreviewMediaInstance::gotPreview returning null");
                                return null
                            }
                            Playback.Etw.traceString("-PLST::audioVideoInstanceFactory():createPreviewMediaInstance::gotPreview");
                            return createMediaInstance({
                                    source: right.previewUrl, isLocal: false, mediaInstanceId: right.mediaInstanceId, nativeLicenseRight: MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(right.licenseRight), offerId: null, cookie: ordinal, mediaItem: item, mediaType: mediaType, protectionState: Playback.ProtectionState.unprotected, startPosition: startPosition
                                })
                        }, function gotNoPreview(error) {
                            Playback.Etw.traceString("-PLST::audioVideoInstanceFactory():createPreviewMediaInstance.  gotNoPreview");
                            return WinJS.Promise.wrapError(error)
                        })
            }
            function handleErrorMediaInstance(error, context) {
                if (WinJS.Promise.isCanceledError(error)) {
                    Playback.Etw.traceString("Playlist::handleErrorMediaInstance:  mediaInstance conversion canceled");
                    return WinJS.Promise.wrapError(error)
                }
                var playbackError = Playback.makePlaybackError(error, context);
                return createMediaInstance({
                        cookie: ordinal, error: playbackError, mediaItem: item, mediaType: mediaType
                    })
            }
            if (playPreviewOnly)
                return createPreviewMediaInstance();
            else if (item.data.inCollection) {
                Playback.Etw.traceString("PLST->audioVideoInstanceFactory(): Item is in user's collection. Following collection resolution path (itemToUrl)");
                return itemToUrl(item.data, context).then(function foundInYourCollection(result) {
                        Playback.Etw.traceString("PLST<-itemToUrl");
                        return createMediaInstance({
                                source: result.url, mediaInstanceId: result.mediaInstanceId, nativeLicenseRight: result.nativeLicenseRight, licenseKeyId: result.licenseKeyId, signedLicensePolicyTicket: result.signedLicensePolicyTicket, offerId: result.offerId, isLocal: result.isLocal, cookie: ordinal, mediaItem: item, mediaType: mediaType, protectionState: result.protectionState, trackingId: result.trackingId, startPosition: startPosition, videoEncoding: result.videoEncoding
                            })
                    }, function notFoundInYourCollection(error) {
                        Playback.Etw.traceString("PLST<-itemToUrl error: " + error);
                        return handleErrorMediaInstance(error, "itemToUrl")
                    })
            }
            else if (item.data.filePath && item.data.filePath !== String.empty) {
                Playback.Etw.traceString("PLST->audioVideoInstanceFactory():  item.data.filePath is non-null");
                return createMediaInstance({
                        source: item.data.filePath, mediaInstanceId: null, nativeLicenseRight: null, offerId: null, isLocal: true, cookie: ordinal, mediaItem: item, mediaType: mediaType, protectionState: Playback.ProtectionState.unknown, startPosition: startPosition
                    })
            }
            else if (MS.Entertainment.Utilities.isAmsterdamApp) {
                var isMediaLocal = function isMediaLocal(fileItem) {
                        var result = true;
                        if (fileItem.path && fileItem.path.toUpperCase().indexOf("\\\\?\\STORAGE") !== 0)
                            result = false;
                        return result
                    };
                var isLocal = true;
                var mediaSource = null;
                if (item.data.mediaType === MS.Entertainment.Data.MediaBrowser.ItemType.music) {
                    isLocal = isMediaLocal(item.data);
                    mediaSource = URL.createObjectURL(MS.Entertainment.Data.deflate(item.data), {oneTimeOnly: false})
                }
                else {
                    isLocal = isMediaLocal(item.data.fileItem);
                    mediaSource = URL.createObjectURL(item.data.fileItem, {oneTimeOnly: false})
                }
                return createMediaInstance({
                        source: mediaSource, mediaInstanceId: null, nativeLicenseRight: null, offerId: null, isLocal: isLocal, cookie: ordinal, mediaItem: item, mediaType: mediaType, protectionState: Playback.ProtectionState.unprotected, startPosition: startPosition
                    })
            }
            else if (item.data.fileItem) {
                Playback.Etw.traceString("PLST->audioVideoInstanceFactory():  item.data.fileItem is non-null");
                return createMediaInstance({
                        source: URL.createObjectURL(item.data.fileItem, {oneTimeOnly: false}), mediaInstanceId: null, nativeLicenseRight: null, offerId: null, isLocal: true, cookie: ordinal, mediaItem: item, mediaType: mediaType, protectionState: Playback.ProtectionState.unknown, startPosition: startPosition
                    })
            }
            else {
                Playback.Etw.traceString("PLST->audioVideoInstanceFactory(): Item is not in the user's collection. Following non-collection resolution path.");
                var getMediaEntitlementsPromise = (!item.data.hasZuneId || item.data.mediaType !== Microsoft.Entertainment.Queries.ObjectType.track) ? WinJS.Promise.wrap(null) : Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync([item.data.zuneId]).then(function audioVideoInstanceFactory_getMediaEntitlementsAsync_complete(result) {
                        return JSON.parse(result).result.entitlements[0]
                    }, function audioVideoInstanceFactory_getMediaEntitlementsAsync_error() {
                        return null
                    });
                return getMediaEntitlementsPromise.then(function audioVideoInstanceFactory_getMediaEntitlementsPromise_complete(mediaEntitlements) {
                        if (item.data.isExplicit && !item.data.inCollection) {
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            if (!signedInUser.xuid) {
                                var error = MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_LOGON_TO_PLAY_EXPLICIT_CONTENT_PRE_ASSET_LOCATION;
                                Playback.Etw.traceString("PLST<-getPreferredStream error: " + error);
                                return handleErrorMediaInstance(error, "audioVideoInstanceFactory_getMediaEntitlementsPromise_complete_notSignedInExplicit")
                            }
                            else if (!signedInUser.hasExplicitPrivilege) {
                                var error = MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_EXPLICIT_CONTENT_PLAY_BLOCKED_PRE_ASSET_LOCATION;
                                Playback.Etw.traceString("PLST<-getPreferredStream error: " + error);
                                return handleErrorMediaInstance(error, "audioVideoInstanceFactory_getMediaEntitlementsPromise_complete_noExplicitPrivilege")
                            }
                        }
                        return getPreferredStream(item.data, context, mediaEntitlements).then(function gotStream(result) {
                                var streamProtection = Playback.ProtectionState.drmProtected;
                                var uri = new Windows.Foundation.Uri(result.url);
                                if (uri.extension === ".mp3")
                                    streamProtection = Playback.ProtectionState.unprotected;
                                return createMediaInstance({
                                        source: result.url, mediaInstanceId: result.mediaInstanceId, nativeLicenseRight: result.nativeLicenseRight, licenseKeyId: result.licenseKeyId, signedLicensePolicyTicket: result.signedLicensePolicyTicket, offerId: result.offerId, trackingId: result.trackingId, isLocal: false, cookie: ordinal, mediaItem: item, mediaType: mediaType, protectionState: streamProtection, startPosition: startPosition
                                    })
                            }, function noStreamForYou(error) {
                                if (item.data.enableFallbackToPreview) {
                                    Playback.Etw.traceString("PLST<-getPreferredStream falls back to preview: " + error);
                                    return createPreviewMediaInstance()
                                }
                                else {
                                    Playback.Etw.traceString("PLST<-getPreferredStream error: " + error);
                                    return handleErrorMediaInstance(error, "getPreferredStream")
                                }
                            })
                    }, function noStreamForYou(error) {
                        Playback.Etw.traceString("PLST<-getPreferredStream error: " + error);
                        return handleErrorMediaInstance(error, "getMediaEntitlementsPromise")
                    })
            }
        };
    function isPreviewOnly(item) {
        var playPreviewOnly = false;
        if (item && item.data)
            playPreviewOnly = item.data.playPreviewOnly;
        if (item && MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(item.data) && MS.Entertainment.Utilities.isMusicApp2 && !MS.Entertainment.isAppModeOverride) {
            var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
            if (configurationManager.playback.previewOnly) {
                playPreviewOnly = playPreviewOnly || (Microsoft.Media.PlayReadyClient.PlayReadyStatics.playReadyCertificateSecurityLevel !== 2000);
                if (playPreviewOnly && item && item.data && ((item.data.fromCollection && item.data.canPurchaseStream) || item.data.hasPurchased || (item.data.filePath && (item.data.filePath.indexOf("blob:") === 0))))
                    playPreviewOnly = false
            }
        }
        return playPreviewOnly
    }
    {};
    var mediaInstanceFactory = {
            track: function mediaInstanceFactory_track(item, ordinal, startPosition, context) {
                var hydrateCompleted = function hydrateCompleted(error) {
                        if (WinJS.Promise.isCanceledError(error)) {
                            Playback.Etw.traceString("mediaInstanceFactory::Track:  hydration canceled");
                            return WinJS.Promise.wrapError(error)
                        }
                        Playback.Etw.traceString("PLST::mediaInstanceFactory::Track:  <-MediaItemModel.hydrateLibraryInfoAsync()");
                        var playPreviewOnly = isPreviewOnly(item);
                        if ((!item.data.hasRights && item.data.hasAssetLocationId && (!item.data.inCollection || playPreviewOnly)) || (item.data.hasAssetLocationId && MS.Entertainment.Utilities.isMusicApp2 && !item.data.hasMusicVideoId)) {
                            if (!isNetworkAvailable())
                                return WinJS.Promise.wrapError(Playback.Error.NS_E_WMPIM_USEROFFLINE);
                            var q = new Query.Music.SongDetails;
                            q.id = item.data.assetLocationId;
                            q.idType = item.data.serviceIdType;
                            q.impressionGuid = item.data.impressionGuid;
                            if (item.data.acquisitionData && item.data.acquisitionData.acquisitionContext && item.data.acquisitionData.acquisitionContextType) {
                                var acquisitionAdditionalContext = item.data.acquisitionData.acquisitionAdditionalContext || item.data.playlistName || String.empty;
                                q.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(item.data.acquisitionData.acquisitionContext, item.data.acquisitionData.acquisitionContextType, item.data.acquisitionData.acquisitionContextID, acquisitionAdditionalContext)
                            }
                            Playback.Etw.traceString("PLST::mediaInstanceFactory::track:  ->q.execute()");
                            return q.execute().then(function trackQueryCompleted(completedQuery) {
                                    Playback.Etw.traceString("PLST::mediaInstanceFactory::track:  <-q.execute()");
                                    var marketplaceItem = null;
                                    if (completedQuery && completedQuery.result) {
                                        marketplaceItem = completedQuery.result;
                                        if (marketplaceItem.data && item && item.data) {
                                            marketplaceItem.data.enableFallbackToPreview = item.data.enableFallbackToPreview;
                                            marketplaceItem.data.playPreviewOnly = item.data.playPreviewOnly;
                                            if (item.data.playlistId >= 0) {
                                                marketplaceItem.data.playlistId = item.data.playlistId;
                                                marketplaceItem.data.playlistName = item.data.playlistName;
                                                marketplaceItem.data.playlistCloudSyncId = item.data.playlistCloudSyncId
                                            }
                                            else if (item.data.acquisitionData && item.data.acquisitionData.acquisitionContextType === Microsoft.Entertainment.Platform.AcquisitionContextType.playlist) {
                                                marketplaceItem.data.playlistName = item.data.acquisitionData.acquisitionAdditionalContext;
                                                marketplaceItem.data.playlistCloudSyncId = item.data.acquisitionData.acquisitionContextID
                                            }
                                        }
                                        else {
                                            Playback.Etw.traceString("PLST:mediaInstanceFactory_track details call failed for " + (item && item.data ? item.data.assetLocationId : "undefined"));
                                            marketplaceItem = item
                                        }
                                    }
                                    return audioVideoInstanceFactory(marketplaceItem, ordinal, startPosition, Microsoft.Entertainment.Queries.ObjectType.track, context, playPreviewOnly)
                                })
                        }
                        else
                            return audioVideoInstanceFactory(item, ordinal, startPosition, Microsoft.Entertainment.Queries.ObjectType.track, context, playPreviewOnly)
                    };
                Playback.Etw.traceString("PLST::mediaInstanceFactory::Track:  ->MediaItemModel.hydrateLibraryInfoAsync()");
                return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(item.data).then(hydrateCompleted, hydrateCompleted)
            }, video: function mediaInstanceFactory_video(item, ordinal, startPosition, context) {
                    if (MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(item.data || item))
                        return mediaInstanceFactory.musicVideo(item, ordinal, startPosition, context);
                    var playPreviewOnly = false;
                    if (item && item.data)
                        playPreviewOnly = item.data.playPreviewOnly;
                    Playback.Etw.traceString("PLST::mediaInstanceFactory::Video:  playPreviewOnly = [" + playPreviewOnly + "]");
                    return audioVideoInstanceFactory(item, ordinal, startPosition, Microsoft.Entertainment.Queries.ObjectType.video, context, playPreviewOnly)
                }, musicVideo: function mediaInstanceFactory_musicVideo(item, ordinal, startPosition, context, playPreviewOnlySet) {
                    Playback.Etw.traceString("PLST::mediaInstanceFactory::MusicVideo:  playPreviewOnlySet = [" + playPreviewOnlySet || false + "]");
                    return waitForSignIn().then(function musicVideo_goodToGo() {
                            var playPreviewOnly = !!playPreviewOnlySet;
                            var rightsFilter;
                            if (item && item.data && !playPreviewOnly)
                                playPreviewOnly = isPreviewOnly(item);
                            rightsFilter = playPreviewOnly ? [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview] : [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview];
                            return item.data.hydrate({forceUpdate: item.data.fromCollection}).then(function musicVideoHydrationCompleted(musicVideo) {
                                    var rights = musicVideo.rights;
                                    return MS.Entertainment.Platform.PurchaseHelpers.getAssetLocationsAsync(musicVideo.canonicalId, rights, rightsFilter, false, context, "USE HEADER AUTH NOT PASSPORT TICKET")
                                }).then(function createMusicVideoMediaInstance(result) {
                                    if (!result || (Array.isArray(result) && (result.length === 0 || !result[0].assetUrl)))
                                        return WinJS.Promise.wrapError(new Error("Music Video getAssetLocationsAsync failure"));
                                    return createMediaInstance({
                                            source: result[0].assetUrl, isLocal: false, mediaInstanceId: result[0].mediaInstanceId, nativeLicenseRight: result[0].nativeLicenseRight, offerId: null, cookie: ordinal, mediaItem: item, mediaType: Microsoft.Entertainment.Queries.ObjectType.video, protectionState: !result[0].nativeLicenseRight ? Playback.ProtectionState.unprotected : Playback.ProtectionState.unknown, startPosition: !startPosition ? 0 : startPosition
                                        })
                                })
                        })
                }, playlistMediaItem: function mediaInstanceFactory_playlistMediaItem(item, ordinal, startPosition, context) {
                    var converterFn = null;
                    switch (item.data.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            converterFn = this.track;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            converterFn = this.video;
                            break
                    }
                    if (converterFn)
                        return converterFn(item, ordinal, startPosition);
                    else
                        return WinJS.Promise.wrapError("No support for this mediaType yet - " + item.data.mediaType)
                }, musicFile: function mediaInstanceFactory_file(item, ordinal, startPosition, context) {
                    return audioVideoInstanceFactory(item, ordinal, startPosition, Microsoft.Entertainment.Queries.ObjectType.track, context, false)
                }
        };
    var mediaItemExpansion = {
            album: function(data) {
                var q;
                if (data.inCollection && data.fromCollection) {
                    q = new Query.libraryTracks;
                    q.albumId = data.libraryId;
                    q.mediaAvailability = data._mediaAvailability;
                    q.sort = Microsoft.Entertainment.Queries.TracksSortBy.numberAscending;
                    q.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.album, MS.Entertainment.Utilities.isValidServiceId(data.canonicalId) ? data.canonicalId : String.empty);
                    return WinJS.Promise.wrap(q)
                }
                else {
                    q = new Query.Music.AlbumWithTracks;
                    if (data.hasCanonicalId) {
                        q.id = data.canonicalId;
                        q.idType = MS.Entertainment.Data.Query.edsIdType.canonical
                    }
                    else {
                        q.id = data.serviceId;
                        q.idType = data.serviceIdType
                    }
                    q.impressionGuid = data.impressionGuid;
                    q.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.album, MS.Entertainment.Utilities.isValidServiceId(data.canonicalId) ? data.canonicalId : String.empty);
                    return q.execute().then(function albumQueryCompleted(queryResult) {
                            if (!queryResult.result)
                                return WinJS.Promise.wrapError("query null results");
                            var tracks = queryResult.result.item.tracks;
                            if (tracks) {
                                tracks.playPreviewOnly = !!data.playPreviewOnly;
                                tracks.enableFallbackToPreview = !!data.enableFallbackToPreview;
                                return tracks.forEachAll(function(){}).then(function() {
                                        return tracks
                                    }, function handlerError(error) {
                                        MS.Entertainment.Platform.Playback.fail("track.forEachAll has failed during album expansion. error " + (error && error.message));
                                        return []
                                    })
                            }
                            else
                                return tracks
                        })
                }
            }, artist: function(data) {
                    var q;
                    if (data.inCollection && data.fromCollection) {
                        q = new Query.libraryTracks;
                        q.artistId = data.libraryId;
                        q.mediaAvailability = data._mediaAvailability;
                        q.sort = Microsoft.Entertainment.Queries.TracksSortBy.artistAscendingAlbumReleaseYearDescendingNumberAscending;
                        q.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist, MS.Entertainment.Utilities.isValidServiceId(data.canonicalId) ? data.canonicalId : String.empty);
                        return WinJS.Promise.wrap(q)
                    }
                    else {
                        q = new Query.Music.ArtistTopSongs;
                        q.hasTotalCount = true;
                        if (data.hasCanonicalId) {
                            q.id = data.canonicalId;
                            q.idType = MS.Entertainment.Data.Query.edsIdType.canonical
                        }
                        else {
                            q.id = data.serviceId;
                            q.idType = data.serviceIdType
                        }
                        q.impressionGuid = data.impressionGuid;
                        q.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.artist, MS.Entertainment.Utilities.isValidServiceId(data.canonicalId) ? data.canonicalId : String.empty);
                        return q.execute().then(function artistQueryCompleted(queryResult) {
                                var tracks = queryResult.result.items;
                                if (tracks) {
                                    tracks.playPreviewOnly = !!data.playPreviewOnly;
                                    tracks.enableFallbackToPreview = !!data.enableFallbackToPreview;
                                    return tracks.forEachAll(function(){}, 0, 99).then(function() {
                                            return tracks
                                        }, function handlerError(error) {
                                            MS.Entertainment.Platform.Playback.fail("track.forEachAll has failed during artist expansion. error " + (error && error.message));
                                            return []
                                        })
                                }
                                else
                                    return tracks
                            })
                    }
                }, genre: function(data) {
                    if (data.inCollection) {
                        var q = new Query.libraryVideos;
                        q.genreId = data.libraryId;
                        return WinJS.Promise.wrap(q)
                    }
                    return null
                }, playlist: function(data) {
                    if (data.fromCollection) {
                        var q = new MS.Entertainment.Data.Query.libraryPlaylistMediaItems;
                        q.playlistId = data.libraryId;
                        q.mediaAvailability = data._mediaAvailability;
                        q.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playlist, MS.Entertainment.Utilities.isValidServiceId(data.cloudSyncItemId) ? data.cloudSyncItemId : String.empty);
                        return WinJS.Promise.wrap(q)
                    }
                    else {
                        var q = new MS.Entertainment.Data.Query.Music.CloudPlaylist;
                        q.id = data.serviceId;
                        q.idType = data.serviceIdType;
                        q.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.playlist, data.serviceId, data.name);
                        return WinJS.Promise.wrap(q)
                    }
                }, folder: function(data) {
                    var q = new MS.Entertainment.Data.Query.MediaBrowserFileQuery(MS.Entertainment.Data.deflate(data), [MS.Entertainment.Data.MediaBrowser.ItemType.music]);
                    return q.execute().then(function folderQueryCompleted(queryResult) {
                            var files = WinJS.Utilities.getMember("result.items", queryResult);
                            if (files)
                                return files.toArrayAll();
                            else
                                return []
                        })
                }
        };
    function expandMediaItem(mediaItem) {
        var converter;
        initializeExpanderByMediaType();
        if ("mediaType" in mediaItem)
            converter = expanderByMediaType[mediaItem.mediaType];
        if (converter && converter in mediaItemExpansion) {
            Playback.Etw.traceString("PLST:mediaItemExpansion for " + converter + ": start");
            return mediaItemExpansion[converter](mediaItem)
        }
        else
            return null
    }
    function _mediaItemToMediaInstance(item, ordinal, startPosition, context) {
        var converter;
        Playback.Etw.traceString("PLST::mediaItemToMediaInstance:  item.data.mediaType = " + item.data.mediaType);
        initializeConverterByMediaType();
        if ("mediaType" in item.data)
            converter = converterByMediaType[item.data.mediaType];
        if (converter && converter in mediaInstanceFactory)
            return WinJS.Promise.as(mediaInstanceFactory[converter](item, ordinal, startPosition, context));
        else {
            Playback.Etw.traceString("PLST::mediaItemToMediaInstance:  returning null");
            return WinJS.Promise.as(null)
        }
    }
    {};
    function mediaItemToMediaInstance(item, ordinal, startPosition, context) {
        if (MS.Entertainment.Utilities.isMusicApp)
            return MS.Entertainment.Utilities.playabilityTestAsync(item.data, {
                    mediaRights: MS.Entertainment.Utilities.isApp1, checkExplicit: MS.Entertainment.Utilities.isApp1
                }).then(function onPlayabilityTest(playability) {
                    if (!playability.isPlayable) {
                        Playback.Etw.traceString("-PLST::convertToMediaInstance:  unavailable : " + item.data.title);
                        return WinJS.Promise.wrapError(new Playback.UnplayableItemError(item, ordinal))
                    }
                    else
                        return _mediaItemToMediaInstance(item, ordinal, startPosition, context)
                });
        return _mediaItemToMediaInstance(item, ordinal, startPosition, context)
    }
    {};
    function convertToMediaInstance(item, ordinal, startPosition, context) {
        var Playback = MS.Entertainment.Platform.Playback;
        var Err = MS.Entertainment.Utilities.Error;
        Playback.Etw.traceString("+PLST::convertToMediaInstance");
        if (item === null || item === undefined) {
            Playback.Etw.traceString("PLST::convertToMediaInstance:  invalid item accessed from collection - out of range access?");
            return WinJS.Promise.wrapError("null item accessed from collection - out of range access?")
        }
        if (item.data && "source" in item.data) {
            var itemData = {};
            Object.keys(WinJS.Binding.expandProperties(item.data)).forEach(function(k) {
                itemData[k] = item.data[k]
            });
            itemData.startPosition = startPosition;
            itemData.cookie = ordinal;
            itemData.mediaItem = item;
            Playback.Etw.traceString("-PLST::convertToMediaInstance:  source: " + itemData.source);
            return createMediaInstance(itemData)
        }
        if (item.data && ("mediaType" in item.data)) {
            var promise = mediaItemToMediaInstance(item, ordinal, startPosition, context);
            if (promise !== null) {
                Playback.Etw.traceString("-PLST::convertToMediaInstance");
                return promise
            }
            Playback.Etw.traceString("-PLST::convertToMediaInstance:   unknown factory for mediaInstance conversion");
            return WinJS.Promise.wrapError("unknown factory for mediaInstance conversion")
        }
        Playback.Etw.traceString("-PLST::convertToMediaInstance:  unknown media type");
        return WinJS.Promise.wrapError("unknown media type")
    }
    {};
    var ObservableDataSourceBase = WinJS.Binding.define({
            size: 0, orderVersion: 0, mediaCollection: null
        });
    var PlaylistSourceNotificationHandler = WinJS.Class.define(function(onSizeChanged, onOrderChanged) {
            this._onSizeChanged = onSizeChanged;
            this._onOrderChanged = onOrderChanged
        }, {
            _orderChangeCount: 0, _orderVersion: 0, _removeCount: 0, _sizeCount: 0, _newSize: 0, beginNotifications: function() {
                    this._orderChangeCount = 0;
                    this._removeCount = 0;
                    this._sizeCount = 0
                }, inserted: function(item, previousRequestID, nextRequestID){}, changed: function(newItem, oldItem){}, moved: function(requestID, previousRequestID, nextRequestID) {
                    this._orderChangeCount++
                }, removed: function(requestID, mirage) {
                    this._removeCount++
                }, countChanged: function(newCount, oldCount) {
                    if (newCount < oldCount)
                        this._removeCount++;
                    this._newSize = newCount;
                    this._sizeCount++
                }, indexChanged: function(requestID, newIndex, oldIndex) {
                    this._orderChangeCount++
                }, endNotifications: function() {
                    if (this._sizeCount || this._removeCount)
                        this._onSizeChanged(this._newSize);
                    if (this._orderChangeCount || this._removeCount) {
                        this._orderVersion++;
                        this._onOrderChanged(this._orderVersion)
                    }
                }, reload: function() {
                    return
                }
        });
    function FlatListAdaptor(adaptorOptions) {
        var options = adaptorOptions || {};
        var sources = [];
        var countPromise = new WinJS.Promise.wrap(0);
        var uniqueKey = 0;
        var notificationHandler = null;
        this.compareByIdentity = true;
        function errorNoLongerMeaningful() {
            var error = new WinJS.ErrorFromName(WinJS.UI.EditError.noLongerMeaningful);
            error.Name = error.name;
            return WinJS.Promise.wrapError(error)
        }
        function mapFlatIndex(i) {
            var x = 0;
            var source = null;
            if (sources)
                for (var j = 0; j < sources.length; j++) {
                    var entry = sources[j];
                    if (i >= x && i < x + entry.size)
                        return {
                                source: entry, index: entry.start + i - x
                            };
                    else
                        x += entry.size
                }
            return null
        }
        function dispose() {
            for (var i = 0; i < sources.length; i++) {
                var entrySource = sources[i].source;
                if (entrySource && "release" in entrySource)
                    entrySource.release();
                sources[i].source = null;
                var entryOrigin = sources[i].origin;
                if (entryOrigin && "addReference" in entryOrigin && "release" in entryOrigin)
                    entryOrigin.release();
                sources[i].origin = null
            }
            sources = null
        }
        function currentSize() {
            var size = 0;
            for (var i = 0; i < sources.length; i++)
                size += sources[i].size;
            return size
        }
        function insertAtEnd(key, dataBlock) {
            if (key === null)
                key = (uniqueKey++).toString();
            var origin = null;
            var data = dataBlock;
            if (dataBlock && "sourceOrigin" in dataBlock) {
                origin = dataBlock.sourceOrigin;
                data = dataBlock.data
            }
            origin = origin || {
                playPreviewOnly: data && !!data.playPreviewOnly, enableFallbackToPreview: data && !!data.enableFallbackToPreview, adapter: data
            };
            if (data && data.playPreviewOnly)
                data.playPreviewOnly = false;
            if (Array.isArray(data))
                return insertSourceAtEnd(key, new ArrayDataSource(data, {
                        compareByIdentity: true, keyOf: options.keyOf
                    }), origin, data.length);
            else if (isNaN(data) && "itemsFromIndex" in data && "getCount" in data) {
                if (origin && "addReference" in origin && "release" in origin)
                    origin.addReference();
                return insertSourceAtEnd(key, new MS.Entertainment.Utilities.VirtualizedDataSource(data), origin)
            }
            else if (isNaN(data) && "createListBinding" in data)
                return insertSourceAtEnd(key, data, origin);
            else {
                if (data) {
                    data.playPreviewOnly = !!origin.playPreviewOnly;
                    data.enableFallbackToPreview = !!origin.enableFallbackToPreview
                }
                return insertItemAtEnd(key, data)
            }
        }
        function remove(key) {
            try {
                var keyObject = JSON.parse(key)
            }
            catch(ex) {
                return errorNoLongerMeaningful()
            }
            var itemKey = (typeof keyObject === "object") ? keyObject.itemKey : key;
            var removePromise;
            if (typeof keyObject === "object" && "listKey" in keyObject) {
                if (typeof itemKey == "string")
                    itemKey = parseInt(keyObject.itemKey);
                removePromise = removeListItem(keyObject.listKey, itemKey)
            }
            else
                removePromise = removeTopItem(itemKey);
            return removePromise.then(function successful_removal() {
                    countPromise = countPromise.then(function(count) {
                        return WinJS.Promise.wrap(count - 1)
                    });
                    return removePromise
                })
        }
        function findTopEntryByItsKey(key) {
            for (var j = 0; j < sources.length; j++)
                if (sources[j].key === key)
                    return {
                            index: j, entry: sources[j]
                        };
            return null
        }
        function findEntryByListItemKey(listKey, itemKey) {
            for (var j = 0; j < sources.length; j++)
                if (sources[j].key === listKey && sources[j].start <= itemKey && (sources[j].start + sources[j].size > itemKey))
                    return {
                            index: j, entry: sources[j]
                        };
            return null
        }
        function findEntryByKey(key) {
            var keyObject = JSON.parse(key);
            var itemKey = keyObject.itemKey;
            if ("listKey" in keyObject) {
                if (typeof itemKey == "string")
                    itemKey = parseInt(keyObject.itemKey);
                return findEntryByListItemKey(keyObject.listKey, itemKey)
            }
            else
                return findTopEntryByItsKey(itemKey)
        }
        function pullOutItem(key) {
            var keyObject = JSON.parse(key);
            var itemKey = keyObject.itemKey;
            if ("listKey" in keyObject) {
                if (typeof itemKey == "string")
                    itemKey = parseInt(keyObject.itemKey);
                return pullOutListElement(findEntryByListItemKey(keyObject.listKey, itemKey), itemKey)
            }
            else
                return pullOutTopElement(findTopEntryByItsKey(itemKey))
        }
        function pullOutTopElement(itemSource) {
            if (itemSource === null)
                return null;
            var entry = itemSource.entry;
            sources.splice(itemSource.index, 1);
            return entry
        }
        function pullOutListElement(itemSource, itemKey) {
            if (itemSource === null)
                return null;
            var entry = itemSource.entry;
            var extracted = {
                    origin: entry.origin, source: entry.source, key: entry.key, start: itemKey, size: 1, isItem: false
                };
            var x = itemSource.index;
            if (itemKey === entry.start) {
                sources[x].start++;
                sources[x].size--;
                if (sources[x].size === 0)
                    sources.splice(x, 1)
            }
            else {
                var size = entry.size;
                var start = entry.start;
                sources[x].size = itemKey - start;
                if (itemKey - start < size - 1)
                    sources.splice(x + 1, 0, {
                        origin: entry.origin, source: entry.source, key: entry.key, start: itemKey + 1, size: size - (itemKey - start + 1), isItem: false
                    })
            }
            return extracted
        }
        function removeTopItem(key) {
            var itemSource = findTopEntryByItsKey(key);
            if (itemSource === null || !itemSource.entry.isItem || itemSource.entry.size !== 1)
                return WinJS.Promise.wrapError("remove error: invalid key");
            pullOutTopElement(itemSource);
            return WinJS.Promise.as()
        }
        function removeListItem(listKey, itemKey) {
            var itemSource = findEntryByListItemKey(listKey, itemKey);
            if (itemSource === null)
                return WinJS.Promise.wrapError("remove error: invalid key");
            pullOutListElement(itemSource, itemKey);
            return WinJS.Promise.as()
        }
        function lastKeyInEntry(entry) {
            if (entry.isItem)
                return entry.key;
            return subItemKey(entry.key, entry.start + entry.size - 1)
        }
        function firstKeyInEntry(entry) {
            if (entry.isItem)
                return entry.key;
            return subItemKey(entry.key, entry.start)
        }
        function promiseForFirstItemInEntry(entry) {
            if (entry.isItem)
                return WinJS.Promise.wrap({
                        key: JSON.stringify({itemKey: entry.key}), data: entry.source
                    });
            else {
                var item = {key: subItemKey(entry.key, entry.start)};
                return entry.source.fromIndex(entry.start).then(function(value) {
                        item.data = value.data;
                        return item
                    })
            }
        }
        function insertEntryAtKey(entry, before, targetKey) {
            var targetSource = findEntryByKey(targetKey);
            var x = targetSource && targetSource.index;
            var previousKey = null;
            var nextKey = null;
            if (targetSource == null)
                throw"Datasource move error: target key is not is not in collection";
            if (targetSource.entry.size === 1) {
                if (x > 0)
                    previousKey = lastKeyInEntry(before ? sources[x - 1] : entry);
                if (x < entry.start + entry.size - 1)
                    nextKey = firstKeyInEntry(before ? entry : sources[x + 1]);
                sources.splice(before ? targetSource.index : targetSource.index + 1, 0, entry);
                return promiseForFirstItemInEntry(entry).then(function(value) {
                        return {
                                item: value, previousKey: previousKey, nextKey: nextKey
                            }
                    })
            }
            else
                return splitInsertAtTarget(entry, before, targetKey, targetSource)
        }
        function insertEntryAtEnd(entry, atStart) {
            var previousKey = null;
            var nextKey = null;
            if (atStart)
                nextKey = firstKeyInEntry(sources[0]);
            else
                previousKey = lastKeyInEntry(sources[sources.length - 1]);
            sources.splice(atStart ? 0 : sources.length, 0, entry);
            return promiseForFirstItemInEntry(entry).then(function(value) {
                    return {
                            item: value, previousKey: previousKey, nextKey: nextKey
                        }
                })
        }
        function splitInsertAtTarget(sourceEntry, before, targetKey, targetSource) {
            var itemKey = parseInt(JSON.parse(targetKey).itemKey);
            var entry = targetSource.entry;
            var x = targetSource.index;
            var previousKey = null;
            var nextKey = null;
            if (before && itemKey === entry.start) {
                nextKey = firstKeyInEntry(targetSource.entry);
                if (x > 0)
                    previousKey = lastKeyInEntry(sources[x - 1]);
                sources.splice(x, 0, entry);
                return promiseForFirstItemInEntry(sourceEntry).then(function(value) {
                        return {
                                item: value, previousKey: previousKey, nextKey: nextKey
                            }
                    })
            }
            if (!before && itemKey === entry.start + entry.size - 1) {
                previousKey = lastKeyInEntry(entry);
                if (x < sources.length - 1)
                    nextKey = fistKeyInEntry(sources[x + 1]);
                sources.splice(x + 1, 0, entry);
                return promiseForFirstItemInEntry(sourceEntry).then(function(value) {
                        return {
                                item: value, previousKey: previousKey, nextKey: nextKey
                            }
                    })
            }
            var leftSplit = {
                    origin: entry.origin, source: entry.source, key: entry.key, start: entry.start, size: before ? itemKey - entry.start : itemKey - entry.start + 1, isItem: false
                };
            var rightSplit = {
                    origin: entry.origin, source: entry.source, key: entry.key, start: leftSplit.start + leftSplit.size, size: entry.size - leftSplit.size, isItem: false
                };
            previousKey = lastKeyInEntry(leftSplit);
            nextKey = firstKeyInEntry(rightSplit);
            sources.splice(x, 1, leftSplit, sourceEntry, rightSplit);
            return promiseForFirstItemInEntry(sourceEntry).then(function(value) {
                    return {
                            item: value, previousKey: previousKey, nextKey: nextKey
                        }
                })
        }
        function moveToPosition(key, before, targetKey) {
            try {
                var itemSource = pullOutItem(key);
                if (itemSource === null)
                    return WinJS.Promise.wrapError("Datasource move error: source key is not in collection");
                return insertEntryAtKey(itemSource, before, targetKey).then(function moveDone(moveResult) {
                        return moveResult.item
                    })
            }
            catch(e) {
                return errorNoLongerMeaningful()
            }
        }
        function moveToEnd(key, atStart) {
            try {
                var itemSource = pullOutItem(key);
                if (itemSource === null)
                    return WinJS.Promise.wrapError("Datasource move error: source key is not in collection");
                return insertEntryAtEnd(itemSource, atStart).then(function(moveResult) {
                        return moveResult.item
                    })
            }
            catch(e) {
                return errorNoLongerMeaningful()
            }
        }
        function insertItemAtEnd(key, data) {
            if (data === null || data === undefined)
                return WinJS.Promise.wrapError("Attempt to append null or undefined item rejected");
            var newIndex = currentSize();
            var lastEntry = sources.length > 0 ? sources[sources.length - 1] : null;
            var entry = {
                    source: data, key: key, start: 0, size: 1, isItem: true, origin: null
                };
            sources.push(entry);
            countPromise = countPromise.then(function(c) {
                return WinJS.Promise.wrap(c + 1)
            });
            if (notificationHandler)
                if (lastEntry === null || lastEntry.size <= 0)
                    notificationHandler.inserted({
                        key: key, data: data
                    }, null, null, 0);
                else if (lastEntry.isItem)
                    notificationHandler.inserted({
                        key: key, data: data
                    }, lastEntry.key, null, newIndex);
                else
                    lastEntry.source.fromIndex(lastEntry.size - 1).then(function(e) {
                        notificationHandler.inserted({
                            key: key, data: data
                        }, subItemKey(lastEntry.key, e.key), null, newIndex)
                    });
            return WinJS.Promise.wrap({
                    key: key, data: data, insertCount: newIndex + 1
                })
        }
        function insertSourceAtEnd(key, data, origin, knownCount) {
            var getCount = isNaN(knownCount) ? data.getCount() : WinJS.Promise.as(knownCount);
            return getCount.then(function(c) {
                    if (c === 0)
                        return WinJS.Promise.as();
                    var list = data.createListBinding();
                    var entry = {
                            origin: origin, source: list, key: key, start: 0, size: c, isItem: false
                        };
                    sources.push(entry);
                    countPromise = countPromise.then(function(count) {
                        return WinJS.Promise.wrap(count + c)
                    });
                    if (notificationHandler)
                        notificationHandler.invalidateAll();
                    return {
                            key: key, data: data, insertCount: c
                        }
                })
        }
        function subItemKey(listKey, elementKey)
        {
            elementKey = elementKey.toString();
            return JSON.stringify({
                    listKey: listKey, itemKey: elementKey
                })
        }
        function itemsFromIndex(index, countBefore, countAfter) {
            if (index === undefined) {
                index = 0;
                countBefore = 0
            }
            var items = [],
                first = index - countBefore,
                last = index + countAfter,
                offset = countBefore;
            for (var i = first; i <= last; i++) {
                var indexMap = mapFlatIndex(i);
                if (indexMap === null)
                    if (items.length === 0 && first < last) {
                        offset--;
                        continue
                    }
                    else
                        break;
                if (indexMap.source.isItem)
                    items.push(WinJS.Promise.wrap({
                        key: indexMap.source.key, data: indexMap.source.source
                    }));
                else
                    items.push(indexMap.source.source.fromIndex(indexMap.index).then(function listItemRetrieved(item) {
                        if (this.origin && item && item.data) {
                            item.data.playPreviewOnly = this.origin.playPreviewOnly;
                            item.data.enableFallbackToPreview = this.origin.enableFallbackToPreview
                        }
                        return WinJS.Promise.wrap({
                                key: subItemKey(this.key, item ? item.key : ("nullSubSourceItem" + indexMap.index)), data: item ? item.data : {
                                        adaptorError: "nullSubSourceItem@" + indexMap.index, errorOriginQuery: !this.origin ? "Nullified Query " : {
                                                debugId: this.origin.debugInstanceId, refCount: this.origin._referenceCount, isDisposed: this.origin.isDisposed, size: this.origin.totalCount
                                            }
                                    }
                            })
                    }.bind(indexMap.source)))
            }
            if (items.length === 0)
                return countPromise.then(function(c) {
                        return WinJS.Promise.wrap({
                                items: [], offset: offset, totalCount: c, absoluteIndex: index
                            })
                    });
            else
                return WinJS.Promise.join(items).then(function(i) {
                        return countPromise.then(function(c) {
                                return WinJS.Promise.wrap({
                                        items: i, offset: offset, totalCount: c, absoluteIndex: index
                                    })
                            })
                    })
        }
        this.dispose = dispose;
        this.remove = remove;
        this.moveToStart = function(key) {
            return moveToEnd(key, true)
        };
        this.moveToEnd = function(key) {
            return moveToEnd(key, false)
        };
        this.moveBefore = function(key, nextKey) {
            return moveToPosition(key, true, nextKey)
        };
        this.moveAfter = function(key, previousKey) {
            return moveToPosition(key, false, previousKey)
        };
        this.itemsFromIndex = itemsFromIndex;
        this.insertAtEnd = function FlatListAdaptor_insertAtEnd(key, data) {
            return insertAtEnd(key, data)
        };
        this.getCount = function FlatListAdaptor_getCount() {
            return countPromise
        };
        this.setNotificationHandler = function FlatListAdaptor_setNotificationHandler(handler) {
            notificationHandler = handler
        }
    }
    WinJS.Namespace.define(playlistNamespace, {AccessSerializer: function AccessSerializer() {
            var waitingList = [];
            this.enter = function AccessSerializer_enter(serializedPromise) {
                var synchronouslyExecuted = false;
                var pushedPromise = false;
                var promise = WinJS.Promise.join(waitingList).then(function processNext() {
                        return serializedPromise().then(function synchronous(arg) {
                                synchronouslyExecuted = !pushedPromise;
                                return arg
                            })
                    }).then(function cleanupQueue(arg) {
                        if (!synchronouslyExecuted)
                            waitingList.shift();
                        return arg
                    });
                if (!synchronouslyExecuted) {
                    pushedPromise = true;
                    waitingList.push(promise)
                }
                return promise
            };
            this.reset = function AccessSerializer_reset() {
                for (var i = 0; i < waitingList.length; i++)
                    waitingList[i].cancel();
                waitingList = []
            }
        }});
    function CompoundDataSource() {
        var adaptor = new FlatListAdaptor;
        CompoundDataSource.prototype.constructor = CompoundDataSource;
        Object.getPrototypeOf(new MS.Entertainment.Utilities.VirtualizedDataSource(new FlatListAdaptor))._baseDataSourceConstructor.call(this, adaptor);
        var that = this;
        this._lock = new MS.Entertainment.Platform.Playback.Playlist.AccessSerializer;
        this.dispose = function CompoundDataSource_dispose() {
            adaptor.dispose();
            if (this._lock) {
                MS.Entertainment.Platform.Playback.Etw.traceString("PLST: PlaylistCore::Dispose - Calling reset() on the _lock");
                this._lock.reset();
                this._lock = null
            }
            adaptor = null
        };
        this.insertAtEnd = function CompoundDataSource_insertAtEnd(key, data) {
            this.beginEdits();
            var promise = adaptor.insertAtEnd(key, data);
            this.endEdits();
            this.invalidateAll();
            return promise
        };
        function implemented() {
            var listOfMethods = arguments;
            for (var i = 0; i < arguments.length; i++)
                (function define_implemented_method() {
                    var method = listOfMethods[i];
                    var _super = that[method];
                    that[method] = function() {
                        var opArguments = arguments;
                        return this._lock.enter(function doEdit() {
                                try {
                                    return _super.apply(that, opArguments)
                                }
                                catch(e) {
                                    var args = "(" + arguments[0];
                                    for (var j = 1; j < arguments.length; j++)
                                        args += ", " + arguments[j];
                                    args += ")";
                                    return WinJS.Promise.wrapError(new Error(e + " in " + method + args + ". Invalid key in arguments"))
                                }
                            })
                    }
                })();
            {}
        }
        implemented("remove", "moveToStart", "moveToEnd", "moveBefore", "moveAfter")
    }
    CompoundDataSource.prototype = Object.create(WinJS.Utilities.eventMixin);
    function clearCachedPermissions() {
        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.contentRestrictionService)) {
            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionService).clearPermissionCache();
            var playbackEventNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playbackEventNotifications);
            playbackEventNotifications.clearErrors()
        }
    }
    function PlaylistMediaCollection() {
        CompoundDataSource.call(this);
        PlaylistMediaCollection.prototype.constructor = PlaylistMediaCollection;
        var _insertAtEnd = this.insertAtEnd;
        this.insertAtEnd = function PlaylistMediaCollection_insertAtEnd(key, data) {
            var that = this;
            clearCachedPermissions();
            function isListAdapter(data) {
                return isNaN(data) && "itemsFromIndex" in data && "getCount" in data
            }
            function interpretData(data) {
                var item = WinJS.Promise.wrap(data);
                var expandedItem = null;
                MS.Entertainment.Platform.Playback.Etw.tracePlaylistInterpretingData();
                if ((data && "mediaType" in data) || isListAdapter(data)) {
                    expandedItem = expandMediaItem(data);
                    if (expandedItem !== null)
                        item = expandedItem
                }
                return item.then(function(data) {
                        if (expandedItem)
                            Playback.Etw.traceString("item expanded");
                        if (MS.Entertainment.Data.MainQuery.isQuery(data)) {
                            var traceHeader = "interpretData: queryExecute ";
                            Playback.Etw.traceString(traceHeader + "start");
                            return data.execute().then(function querySuccess(q) {
                                    Playback.Etw.traceString(traceHeader + "done");
                                    Playback.Etw.traceString(traceHeader + "itemCount: " + q.result.items.count);
                                    return WinJS.Promise.wrap({
                                            sourceOrigin: q, data: q.result.items
                                        })
                                })
                        }
                        else
                            return WinJS.Promise.wrap(data)
                    })
            }
            return this._lock.enter(function expandAndAppend() {
                    return interpretData(data).then(function interpretDataCompleted(interpretedData) {
                            Playback.Etw.traceString("playlist item interpreted");
                            return _insertAtEnd.call(that, key, interpretedData)
                        }, function interpretedDataFailed(error) {
                            Playback.Etw.traceString("playlist item interpret failed. error: " + error);
                            if (data && data.debugInstanceId && "dispose" in data)
                                data.dispose();
                            return WinJS.Promise.wrapError(error)
                        })
                })
        }
    }
    PlaylistMediaCollection.prototype = Object.create(WinJS.UI.VirtualizedDataSource.prototype);
    var PlaylistDataSource = WinJS.Class.derive(ObservableDataSourceBase, function(datasource, completePromise, knownCount) {
            ObservableDataSourceBase.prototype.constructor.call(this, {
                size: 0, orderVersion: 0, mediaCollection: datasource
            });
            var that = this;
            this._activationPromise = null;
            this._activationOrdinal = null;
            var getCount = isNaN(knownCount) ? this.mediaCollection.getCount() : WinJS.Promise.as(knownCount);
            getCount.then(function(sz) {
                that.updateProperty("size", sz).then(function(v) {
                    completePromise(sz)
                })
            });
            this._listBinding = this.mediaCollection.createListBinding(new PlaylistSourceNotificationHandler(function onSizeChanged(sz) {
                if (sz > that.size)
                    clearCachedPermissions();
                that.size = sz
            }, function onOrderChanged(v) {
                that.orderVersion = v
            }))
        }, {
            isDisposed: false, dispose: function dispose() {
                    if (!this.isDisposed) {
                        if (this._activationPromise)
                            this._activationPromise.cancel();
                        if (this._nextActivationPromise)
                            this._nextActivationPromise.cancel();
                        if (this._listBinding) {
                            this._listBinding.release();
                            this._listBinding = null
                        }
                        if (this.mediaCollection) {
                            this.mediaCollection.dispose();
                            this.mediaCollection = null
                        }
                        this.isDisposed = true
                    }
                }, itemAt: function itemAt(ordinal) {
                    if (ordinal === null || this.isDisposed || !this._listBinding)
                        return WinJS.Promise.as();
                    var itemPromise = this._listBinding.fromIndex(ordinal);
                    itemPromise.retain();
                    return itemPromise
                }, getPlaybackMedia: function getPlaybackMedia(ordinal, startPosition, context, resetPreviewFlag) {
                    if (ordinal === undefined || ordinal === null || isNaN(ordinal))
                        return WinJS.Promise.as();
                    return this.itemAt(ordinal).then(function(v) {
                            if (resetPreviewFlag)
                                v.data.playPreviewOnly = false;
                            return convertToMediaInstance(v, ordinal, startPosition, context)
                        })
                }, ordinalOf: function ordinalOf(media) {
                    return media != null ? media.cookie : null
                }
        });
    WinJS.Namespace.define(playlistNamespace, {ListSequencer: WinJS.Class.define(function(){}, {
            _size: null, setSize: function setSize(s) {
                    this._size = s
                }, repeat: false, initialize: function initialize(ds) {
                    this.setSize(ds ? ds.size : null)
                }, position: function ListSequencer_position(ordinal) {
                    if (!this._size || ordinal < 0 || ordinal >= this._size)
                        return NaN;
                    return ordinal
                }, first: 0, before: function before(ordinal) {
                    if (ordinal === null || ordinal === undefined)
                        return null;
                    return (ordinal === this.first) ? (this.repeat ? this._size - 1 : null) : --ordinal
                }, after: function after(ordinal) {
                    if (ordinal === null || ordinal === undefined)
                        return null;
                    return (ordinal < this._size - 1) ? ++ordinal : (this.repeat ? this.first : null)
                }
        })});
    WinJS.Namespace.define(playlistNamespace, {IncrementalShuffleGenerator: WinJS.Class.define(function(n) {
            this._size = n;
            this._spanStart = [0];
            this._spanLength = [n];
            if (arguments.length === 2 && arguments[1] !== null)
                this.remove(arguments[1])
        }, {
            _size: 0, _rand: function IncrementalShuffleGenerator__rand() {
                    return Math.floor(Math.random() * this._size)
                }, _spanStart: [], _spanLength: [], generate: function IncrementalShuffleGenerator_generate() {
                    var k = this._rand();
                    for (var i = 0; i < this._spanStart.length; i++) {
                        var start = this._spanStart[i];
                        var length = this._spanLength[i];
                        if (k < length) {
                            var g = start + k;
                            this._markSpan(i, g, start, length);
                            return g
                        }
                        k -= length
                    }
                    return null
                }, remove: function IncrementalShuffleGenerator_remove(ordinal) {
                    for (var i = 0; i < this._spanStart.length; i++) {
                        var start = this._spanStart[i];
                        var length = this._spanLength[i];
                        if (ordinal >= start && ordinal < start + length) {
                            this._markSpan(i, ordinal, start, length);
                            return
                        }
                    }
                }, _markSpan: function IncrementalShuffleGenerator__markSpan(i, g, start, length) {
                    if (g === start)
                        if (--length === 0) {
                            this._spanStart.splice(i, 1);
                            this._spanLength.splice(i, 1)
                        }
                        else {
                            this._spanStart[i] = start + 1;
                            this._spanLength[i] = length
                        }
                    else if (g === (start + length - 1))
                        this._spanLength[i] = length - 1;
                    else {
                        this._spanStart.splice(i, 1, start, g + 1);
                        this._spanLength.splice(i, 1, g - start, length - (g - start) - 1)
                    }
                    this._size--;
                    return
                }
        })});
    function QuantumShuffleSequencer() {
        var shuffler;
        var shuffleFwd;
        var shuffleBkwd;
        var positions;
        var _first;
        var size;
        var initialized = false;
        var that = this;
        function using(namespace, functionName) {
            return namespace[functionName].bind(namespace)
        }
        var assert = function QuantumShuffleSequencer_assert(condition, text) {
                if (!condition)
                    throw(new Error("QuantumShuffleSequencer: " + text));
            };
        var fail = using(MS.Entertainment.Platform.Playback, "fail");
        var trace = using(MS.Entertainment.Platform.Playback.Etw, "traceString");
        function extendFwd(ordinal) {
            positions[ordinal] = shuffleFwd.length;
            shuffleFwd.push(ordinal);
            shuffler.remove(ordinal)
        }
        function extendBkwd(ordinal) {
            shuffleBkwd.push(ordinal);
            positions[ordinal] = -shuffleBkwd.length;
            shuffler.remove(ordinal)
        }
        function extendAt(position, ordinal) {
            if (position < 0)
                extendBkwd(ordinal);
            else
                extendFwd(ordinal)
        }
        function getShuffle(position) {
            if (position >= 0)
                return shuffleFwd[position];
            else
                return shuffleBkwd[-(1 + position)]
        }
        function initialize(sz, first) {
            assert(sz > 0, "Initialize shuffle with positive sizes only");
            if (initialized)
                trace("Warning: re-initializing initialized shuffler");
            shuffler = new mySpace.IncrementalShuffleGenerator(sz || 0, first);
            shuffleFwd = [];
            shuffleBkwd = [];
            positions = {};
            if (first === +first)
                that.first = first;
            that.size = sz;
            initialized = true
        }
        function rollOverCut(step) {
            var fName = step > 0 ? "After" : "Before";
            assert(shuffleFwd.length + shuffleBkwd.length === that.size, fName + " Rollover initiated on partial sequence");
            trace(fName + "Rollover");
            var toArray = step > 0 ? shuffleBkwd : shuffleFwd;
            var thisArray = step > 0 ? shuffleFwd : shuffleBkwd;
            return toArray.length ? toArray[toArray.length - 1] : thisArray[0]
        }
        function position(ordinal) {
            var p = positions[ordinal];
            if (p !== +p)
                return NaN;
            return p
        }
        function shuffleIterator(step, ordinal) {
            var name = step > 0 ? "after" : "before";
            var fName = "ShuffleSequencer_" + name + "(" + ordinal + "): ";
            trace(fName + "repeat =  " + that.repeat);
            if (ordinal !== +ordinal) {
                trace(fName + " argument is not a number: return null");
                return null
            }
            if (step < 0 && ordinal === that.first)
                if (!that.repeat) {
                    trace(fName + "Reached end of shuffle in before(first) : return null");
                    return null
                }
            var position = positions[ordinal];
            if (position === undefined) {
                assert(ordinal >= 0 && ordinal < that.size, "Invalid jump in ordinal value");
                if (that._isFirstSet())
                    extendAt(step, ordinal);
                else
                    that.first = ordinal;
                return shuffleIterator(step, ordinal)
            }
            else {
                var nextOrdinal = getShuffle(position + step);
                if (nextOrdinal === undefined) {
                    assert(step > 0 ? (position + step >= 0) : (position + step < 0), fName + "encountered undefined value in directional part of shuffle");
                    trace(fName + "Extending");
                    var newOrdinal = shuffler.generate();
                    if (newOrdinal !== null) {
                        trace(fName + "generated " + newOrdinal);
                        extendAt(position + step, newOrdinal);
                        return newOrdinal
                    }
                    else
                        nextOrdinal = rollOverCut(step)
                }
                if (step > 0)
                    if (nextOrdinal === that.first)
                        if (!that.repeat) {
                            trace(fName + "Reached end of shuffle");
                            nextOrdinal = null
                        }
                trace(fName + "returns " + nextOrdinal);
                return nextOrdinal
            }
        }
        this.repeat = false;
        Object.defineProperty(this, "first", {
            set: function QuantumShuffleSequencer_set_first(value) {
                if (!that._isFirstSet() && (value === +value)) {
                    extendAt(0, value);
                    _first = value;
                    assert(shuffler, "QuantumShuffleSequencer_set_first : shuffler has not been initialized")
                }
                else {
                    assert(that._isFirstSet(), "QuantumShuffleSequencer_set_first : \"first\" is already set");
                    assert(value !== +value, "QuantumShuffleSequencer_set_first : Invalid value for \"first\"")
                }
            }, get: function QuantumShuffleSequencer_get_first() {
                    if (!that._isFirstSet()) {
                        assert(shuffler, "QuantumShuffleSequencer_get_first : shufler has not been initialized");
                        _first = shuffler.generate();
                        trace("Setting shuffle first to " + _first);
                        assert(that._isFirstSet, "QuantumShuffleSequencer_get_first : shuffler is empty");
                        extendFwd(_first)
                    }
                    return _first
                }, enumerable: true, configurable: false
        });
        this._isFirstSet = function QuantumShuffleSequencer__isFirstSet() {
            return _first === +_first
        };
        this.initialize = function QuantumShuffleSequencer_initialize(datasource, first) {
            initialize((datasource && datasource.size) || 0, first)
        };
        this.initializeSize = function QuantumShuffleSequencer_initializeSize(size, first) {
            initialize(size || 0, first)
        };
        this.before = shuffleIterator.bind(this, -1);
        this.after = shuffleIterator.bind(this, 1);
        this.position = position
    }
    {};
    WinJS.Namespace.define(playlistNamespace, {QuantumShuffleSequencer: QuantumShuffleSequencer});
    function createPlaylistDataSource(arg, promise) {
        var playlistDataSource = new PlaylistMediaCollection;
        return playlistDataSource.insertAtEnd(null, arg).then(function(insertResult) {
                return WinJS.Promise.wrap(new PlaylistDataSource(playlistDataSource, promise, !insertResult ? insertResult : insertResult.insertCount))
            })
    }
    function makeEmptyPromise() {
        var completePromise;
        var newPromise = new WinJS.Promise(function(c, e, p) {
                completePromise = c
            });
        return {
                completePromise: completePromise, promise: newPromise
            }
    }
    function findOrdinal(core, startingOrdinal, nowPlayingKey) {
        var datasource = core._dataSource;
        var list;
        var size = datasource.size;
        if (size === 0)
            return -1;
        list = datasource.mediaCollection.createListBinding();
        return list.fromIndex(startingOrdinal).then(function findOrdinal_current(mediaItem) {
                if (!nowPlayingKey || (mediaItem && mediaItem.key === nowPlayingKey)) {
                    list.release();
                    return null
                }
                var neighborPromises = [];
                var candidateIndices = [startingOrdinal - 1, startingOrdinal + 1, 0, size - 1];
                neighborPromises.push(startingOrdinal > 0 ? list.fromIndex(startingOrdinal - 1) : WinJS.Promise.wrap(null));
                neighborPromises.push(startingOrdinal < size - 1 ? list.fromIndex(startingOrdinal + 1) : WinJS.Promise.wrap(null));
                neighborPromises.push(list.fromIndex(0));
                neighborPromises.push(list.fromIndex(size - 1));
                return WinJS.Promise.join(neighborPromises).then(function findOrdinal_heuristic1(neighbor) {
                        for (var i = 0; i < neighbor.length; i++)
                            if (neighbor[i] !== null && neighbor[i].key === nowPlayingKey) {
                                list.release();
                                return candidateIndices[i]
                            }
                        list.release();
                        return -1
                    })
            })
    }
    function expandingSearch(core, startingOrdinal, fCompare, maxDistance) {
        var datasource = core._dataSource;
        var list = datasource.mediaCollection.createListBinding();
        var size = datasource.size;
        MS.Entertainment.Platform.Playback.Etw.traceString("PLST:expandingSearch start@" + startingOrdinal);
        function internalExpandingSearch(distance) {
            function pairSearch() {
                function found(i) {
                    return list.fromIndex(i).then(function got_list_element(mediaItemEntry) {
                            return fCompare.call(mediaItemEntry) ? i : null
                        })
                }
                var search = [];
                var forwardIndex = startingOrdinal + distance;
                if (forwardIndex < size)
                    search.push(found(forwardIndex));
                if (distance !== 0) {
                    var backwardIndex = startingOrdinal - distance;
                    if (backwardIndex >= 0)
                        search.push(found(backwardIndex))
                }
                return WinJS.Promise.join(search).then(function pair_evaluated(searchResult) {
                        switch (searchResult.length) {
                            case 0:
                                return undefined;
                            case 1:
                                return searchResult[0];
                            case 2:
                                return (searchResult[0] !== null) ? searchResult[0] : searchResult[1];
                            default:
                                return null
                        }
                    })
            }
            return pairSearch().then(function next_pair(foundOrdinal) {
                    if (foundOrdinal === undefined) {
                        MS.Entertainment.Platform.Playback.Etw.traceString("PLST:expandingSearch: No match in a whole list (" + distance + ")");
                        return null
                    }
                    if (foundOrdinal !== null) {
                        MS.Entertainment.Platform.Playback.Etw.traceString("PLST:expandingSearch: match found at distance = " + distance);
                        return foundOrdinal
                    }
                    if (maxDistance === undefined || distance < maxDistance)
                        return WinJS.Promise.timeout().then(internalExpandingSearch.bind(this, distance + 1));
                    else {
                        MS.Entertainment.Platform.Playback.Etw.traceString("PLST:expandingSearch: no match at max distance " + distance);
                        return null
                    }
                })
        }
        function cleanup(arg) {
            list.release();
            return arg
        }
        return internalExpandingSearch(0).then(cleanup, cleanup)
    }
    WinJS.Namespace.define(playlistNamespace, {PlaylistCore: WinJS.Class.derive(MS.Entertainment.UI.Framework.ObservableBase, function(element, options) {
            this._listSequencer = new mySpace.ListSequencer;
            this._sequenceGenerator = this._listSequencer;
            this.setOptions(options);
            var that = this;
            this.bind("shuffle", function(v) {
                that.onSetShuffleMode(v)
            });
            this.bind("repeat", function(v) {
                that.onSetRepeatMode(v)
            })
        }, {
            _dataSource: null, _playbackControlEventHandlers: null, _currentMediaKey: null, settingDataSource: false, currentOrdinal: MS.Entertainment.UI.Framework.observableProperty("currentOrdinal", null), currentNowPlayingPlaylistLibraryId: MS.Entertainment.UI.Framework.observableProperty("currentNowPlayingPlaylistLibraryId", null), pendingOrdinal: MS.Entertainment.UI.Framework.observableProperty("pendingOrdinal", null), currentMedia: MS.Entertainment.UI.Framework.observableProperty("currentMedia", null), canSkipBackward: MS.Entertainment.UI.Framework.observableProperty("canSkipBackward", false), canSkipForward: MS.Entertainment.UI.Framework.observableProperty("canSkipForward", false), shuffle: MS.Entertainment.UI.Framework.observableProperty("shuffle", false), repeat: MS.Entertainment.UI.Framework.observableProperty("repeat", false), canShuffle: MS.Entertainment.UI.Framework.observableProperty("canShuffle", true), canRepeat: MS.Entertainment.UI.Framework.observableProperty("canRepeat", true), smartDJSeed: MS.Entertainment.UI.Framework.observableProperty("smartDJSeed", null), mediaCollection: MS.Entertainment.UI.Framework.observableProperty("mediaCollection", null), lastTrackPlaying: MS.Entertainment.UI.Framework.observableProperty("lastTrackPlaying", false), setDataSource: function PlaylistCore_setDataSource(value) {
                    this.settingDataSource = true;
                    MS.Entertainment.Platform.Playback.Etw.tracePlaylistSetDataSourceBegin();
                    var that = this;
                    var datasource = this._dataSource;
                    if (this._readyToSetDataSource)
                        this._readyToSetDataSource.cancel();
                    if (this.smartDJSeed) {
                        this.canShuffle = false;
                        this.canRepeat = false
                    }
                    else {
                        this.canShuffle = true;
                        this.canRepeat = true
                    }
                    var createPromise = makeEmptyPromise();
                    that._dataSourceSetPromise = makeEmptyPromise();
                    var readyToSetDataSource = createPlaylistDataSource(value, createPromise.completePromise).then(function(newDataSource) {
                            if (datasource) {
                                for (var promiseTitle in that._savePlaylistInProgressPromise)
                                    if (that._savePlaylistInProgressPromise[promiseTitle]) {
                                        that._savePlaylistInProgressPromise[promiseTitle].cancel();
                                        Playback.Etw.traceString("PLST::setDataSource_onCreatePlaylistDataSourceComplete: pending savePlaylist promises cancelled.")
                                    }
                                if (that._dataSourceBindings)
                                    that._dataSourceBindings.cancel();
                                datasource.dispose()
                            }
                            that._setMedia(null, null);
                            that._dataSource = newDataSource;
                            that._dataSourceBindings = WinJS.Binding.bind(that._dataSource, {
                                size: function(v) {
                                    MS.Entertainment.Platform.Playback.Etw.traceString("PLST::binding: new size: " + v);
                                    that._onSizeChanged(v);
                                    that._dataSourceSetPromise.completePromise(v)
                                }, orderVersion: function(v) {
                                        that._onOrderChanged()
                                    }, mediaCollection: function(v) {
                                        that.updateAndNotify("currentOrdinal", null).then(function() {
                                            that.updateAndNotify("mediaCollection", v)
                                        })
                                    }
                            });
                            return WinJS.Promise.join([that._dataSourceSetPromise.promise, createPromise.promise]).then(function() {
                                    that.settingDataSource = false;
                                    MS.Entertainment.Platform.Playback.Etw.tracePlaylistSetDataSourceEnd();
                                    that.onSetShuffleMode(that.shuffle);
                                    return newDataSource ? WinJS.Promise.wrap(WinJS.Binding.unwrap(newDataSource.mediaCollection)) : WinJS.Promise.as()
                                })
                        }, function handleError(error) {
                            that.settingDataSource = false;
                            Playback.Etw.traceString("PLST::setDataSource_onCreatePlaylistDataSourceError: " + MS.Entertainment.Utilities.stringify(error));
                            if (datasource) {
                                for (var promiseTitle in that._savePlaylistInProgressPromise)
                                    if (that._savePlaylistInProgressPromise[promiseTitle]) {
                                        that._savePlaylistInProgressPromise[promiseTitle].cancel();
                                        Playback.Etw.traceString("PLST::setDataSource_onCreatePlaylistDataSourceError: pending savePlaylist promises cancelled.")
                                    }
                                datasource.dispose();
                                if (that._dataSourceBindings)
                                    that._dataSourceBindings.cancel()
                            }
                            that._setMedia(null, null);
                            that._dataSource = null
                        });
                    function markDataSourcePromiseCompleted() {
                        that._readyToSetDataSource = null;
                        return readyToSetDataSource
                    }
                    {};
                    this._readyToSetDataSource = readyToSetDataSource;
                    return readyToSetDataSource.then(markDataSourcePromiseCompleted, markDataSourcePromiseCompleted)
                }, _dispose: function PlayListCore_dispose() {
                    MS.Entertainment.Platform.Playback.Etw.traceString("PLST: PlaylistCore::Dispose");
                    if (this._lock) {
                        MS.Entertainment.Platform.Playback.Etw.traceString("PLST: PlaylistCore::Dispose - Calling reset() on the _lock");
                        this._lock.reset()
                    }
                    if (this._dataSource) {
                        this._dataSource.dispose();
                        this._dataSource = null
                    }
                    if (this._dataSourceBindings) {
                        this._dataSourceBindings.cancel();
                        this._dataSourceBindings = null
                    }
                    if (this._dataSourceSetPromise) {
                        if (this._dataSourceSetPromise.promise)
                            this._dataSourceSetPromise.promise.cancel();
                        this._dataSourceSetPromise = null
                    }
                    this.currentMedia = null;
                    this._currentMediaKey = null;
                    this._currentMediaInstance = null
                }, _dataSourceSetPromise: makeEmptyPromise(), _playbackControlReadyPromise: null, _readyToSetDataSource: null, _lock: new MS.Entertainment.Platform.Playback.Playlist.AccessSerializer, insertAtEnd: function PlayListCore_insertAt(key, data) {
                    var that = this;
                    this.lastTrackPlaying = false;
                    function insertAtEndInternal() {
                        return that._lock.enter(function serializedInsert() {
                                that.flushPreroll(true);
                                if (!that._dataSource)
                                    return that.setDataSource(data);
                                var insert = that._dataSource.mediaCollection.insertAtEnd(key, data).then(function verifyCount(count) {
                                        if (!count)
                                            that._dataSourceSetPromise.completePromise();
                                        return count
                                    });
                                that._dataSourceSetPromise = makeEmptyPromise();
                                return WinJS.Promise.join([insert, that._dataSourceSetPromise.promise]).then(function(joinArray) {
                                        MS.Entertainment.Platform.Playback.Etw.traceString("Playlist top  level insertAtEnd: completed");
                                        return WinJS.Promise.wrap(joinArray[0])
                                    })
                            })
                    }
                    if (that._playbackControlReadyPromise)
                        return that._playbackControlReadyPromise.promise.then(function onPlaybackControlReady() {
                                return insertAtEndInternal()
                            });
                    else
                        return insertAtEndInternal()
                }, _options: null, setOptions: function PlaylistCore_setOptions(options) {
                    if (!options)
                        return;
                    this._options = options;
                    if (this._options.hasOwnProperty("src"))
                        if (this._options.src.hasOwnProperty("winControl"))
                            this.setDataSource(this._options.src.winControl);
                        else
                            this.setDataSource(this._options.src);
                    if (this._options.hasOwnProperty("player"))
                        if (this._options.player.hasOwnProperty("winControl"))
                            this.setPlaybackControl(this._options.player.winControl);
                        else
                            this.setPlaybackControl(this._options.player)
                }, _playbackControl: null, _currentMediaInstance: null, _prerollOrdinal: null, _userActionOrdinal: null, _activationPromise: null, _savePlaylistInProgressPromise: {}, _onPrerollCallback: function PlaylistCore_onPrerollCallback(newValue, oldValue) {
                    if (this._playbackControlReadyPromise)
                        this._playbackControlReadyPromise.completePromise();
                    if (!oldValue && newValue && this._dataSource)
                        this._setNext(this._dataSource)
                }, _setCurrentOrdinal: function PlaylistCore_setCurrentOrdinal(ordinal) {
                    this.currentOrdinal = ordinal;
                    this._prerollOrdinal = ordinal
                }, _computeNextToPreroll: function PlaylistCore_computeNextToPreroll() {
                    if (this._prerollOrdinal === null && this.currentOrdinal != null)
                        this._prerollOrdinal = this.currentOrdinal;
                    if (this._prerollOrdinal !== null)
                        this._prerollOrdinal = this.after(this._prerollOrdinal);
                    this._updateCommandStatus();
                    return this._prerollOrdinal
                }, _onCurrentItemCallback: function PlaylistCore_onCurrentItemCallback(v) {
                    this._currentMediaInstance = v;
                    if (v && this._dataSource) {
                        var i = this._dataSource.ordinalOf(v);
                        var originalMediaItem = v._mediaItem.data;
                        this._setCurrentOrdinal(i);
                        if (originalMediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video && originalMediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo && v._mediaItem.trackItem) {
                            this.currentMedia = originalMediaItem;
                            this._currentMediaKey = v._mediaItem.trackItem.key
                        }
                        else {
                            var list = this._dataSource.mediaCollection.createListBinding();
                            list.fromIndex(i).then(function got_media_item(item) {
                                if (!item) {
                                    this._setMedia(null, null);
                                    this._currentMediaKey = null
                                }
                                else {
                                    this.currentMedia = item.data;
                                    this._currentMediaKey = item.key
                                }
                                list.release()
                            }.bind(this), function fromIndexError() {
                                list.release();
                                Playback.Etw.traceString("PLST->_onCurrentItemCallback->fromIndex")
                            })
                        }
                    }
                    else {
                        this._setCurrentOrdinal(null);
                        if (!v) {
                            this.currentMedia = null;
                            this._currentMediaKey = null
                        }
                    }
                    this._updateCommandStatus()
                }, itemAt: function PlaylistCore_itemAt(datasource, ordinal) {
                    return datasource ? datasource.itemAt(ordinal) : WinJS.Promise.as()
                }, setPlaybackControl: function PlaylistCore_setPlaybackControl(value) {
                    if (this._playbackControlEventHandlers != null) {
                        this._playbackControlEventHandlers.cancel();
                        this._playbackControlEventHandlers = null
                    }
                    this._playbackControl = value;
                    this._playbackControlEventHandlers = MS.Entertainment.Utilities.addEvents(this._playbackControl, {
                        currentMediaChanged: function(v) {
                            this._onCurrentItemCallback(v.detail.newValue)
                        }.bind(this), readyForNextMediaChanged: function(e) {
                                this._onPrerollCallback(e.detail.newValue, e.detail.oldValue)
                            }.bind(this)
                    })
                }, _setMediaByIndex: function PlaylistCore__setMediaByIndex(ordinal, startPosition, resetPreviewFlag) {
                    var datasource = this._dataSource;
                    this._userActionOrdinal = ordinal;
                    this._prerollOrdinal = ordinal;
                    Playback.Etw.traceString("PLST->getPlaybackMedia");
                    if (datasource._activationPromise)
                        if (datasource._activationOrdinal == ordinal)
                            return;
                        else
                            datasource._activationPromise.cancel();
                    datasource._activationOrdinal = ordinal;
                    var activationPromise = datasource.getPlaybackMedia(ordinal, startPosition, Playback.UsageContext.user, resetPreviewFlag).then(function getPlaybackMedia_success(mediaInstance) {
                            Playback.Etw.traceString("PLST<-getPlaybackMedia");
                            this._setMedia(datasource, mediaInstance)
                        }.bind(this), function getPlaybackMedia_error(error) {
                            if (!WinJS.Promise.isCanceledError(error)) {
                                Playback.Etw.traceString("PLST:getPlaybackMediaError " + error);
                                if (error && error.isUnplayableItemError)
                                    return WinJS.Promise.wrapError(error);
                                return this.itemAt(datasource, ordinal).then(function getPlaybackMedia_error_itemAt(mediaItem) {
                                        return createMediaInstance({
                                                cookie: ordinal, error: Playback.makePlaybackError(error, "PLST->getPlaybackMedia_error"), mediaItem: mediaItem
                                            }).then(function(errorMediaInstance) {
                                                this._setMedia(datasource, errorMediaInstance)
                                            }.bind(this))
                                    }.bind(this))
                            }
                            else
                                Playback.Etw.traceString("Playlist::_setMediaByIndex::getPlaybackMedia: activation canceled")
                        }.bind(this));
                    function markActivationCompleted(error) {
                        datasource._activationPromise = null;
                        if (error && error.isUnplayableItemError)
                            return WinJS.Promise.wrapError(error)
                    }
                    datasource._activationPromise = activationPromise;
                    return activationPromise.then(markActivationCompleted, markActivationCompleted)
                }, _findPlayable: function(advanceOrdinalFun, ordinal, originalOrdinal, complete) {
                    var seqNext = advanceOrdinalFun(ordinal);
                    if (seqNext === null || !this.mediaCollection)
                        return WinJS.Promise.as(null);
                    var startOrdinal = originalOrdinal === undefined ? ordinal : originalOrdinal;
                    if (MS.Entertainment.Utilities.isMusicApp)
                        return new WinJS.Promise(function(c, e, p) {
                                var topComplete = complete === undefined ? c : complete;
                                this.mediaCollection.itemFromIndex(seqNext).done(function checkPlayability(mediaItem) {
                                    if (!mediaItem) {
                                        topComplete(null);
                                        return
                                    }
                                    MS.Entertainment.Utilities.playabilityTestAsync(mediaItem.data, {
                                        mediaRights: MS.Entertainment.Utilities.isApp1, checkExplicit: MS.Entertainment.Utilities.isApp1
                                    }).done(function onPlayability(playability) {
                                        if (playability.isPlayable)
                                            topComplete(seqNext);
                                        else {
                                            if (seqNext === startOrdinal) {
                                                topComplete(null);
                                                return
                                            }
                                            MS.Entertainment.Utilities.schedulePromiseNormal().done(function() {
                                                this._findPlayable(advanceOrdinalFun, seqNext, startOrdinal, topComplete).done(function _findPlayable_complete(seqNext) {
                                                    topComplete(seqNext)
                                                }, function _findPlayable_error(error) {
                                                    topComplete(null)
                                                })
                                            }.bind(this))
                                        }
                                    }.bind(this))
                                }.bind(this), function error() {
                                    topComplete(null)
                                })
                            }.bind(this));
                    else
                        return WinJS.Promise.wrap(seqNext)
                }, nextPlayable: function PlaylistCore_nextPlayable(ordinal) {
                    if (this._nextPlayablePromise)
                        this._nextPlayablePromise.cancel();
                    this._nextPlayablePromise = this._findPlayable(this.after.bind(this), ordinal);
                    return this._nextPlayablePromise
                }, previousPlayable: function PlaylistCore_previousPlayable(ordinal) {
                    if (this._previousPlayablePromise)
                        this._previousPlayablePromise.cancel();
                    this._previousPlayablePromise = this._findPlayable(this.before.bind(this), ordinal);
                    return this._previousPlayablePromise
                }, activate: function PlaylistCore_activate(index, startPosition, searchFor, maxSearchDistance) {
                    MS.Entertainment.Platform.Playback.Etw.traceString("PLST::activate at " + index);
                    if (this._nextPlayablePromise) {
                        this._nextPlayablePromise.cancel();
                        this._nextPlayablePromise = null
                    }
                    if (this._previousPlayablePromise) {
                        this._previousPlayablePromise.cancel();
                        this._previousPlayablePromise = null
                    }
                    return this._dataSourceSetPromise.promise.then(function synchronized_activate() {
                            return this._activate(index, startPosition, searchFor, maxSearchDistance)
                        }.bind(this))
                }, _activate: function PlaylistCore__activate(index, startPosition, searchFor, maxSearchDistance) {
                    if (!this._playbackControl) {
                        var err = "Cannot activate playlist : playbackControl is not set";
                        Playback.Etw.traceString("PLST:" + err);
                        throw err;
                    }
                    if (!this._dataSource) {
                        var err = "Cannot activate playlist : datasource is not set";
                        Playback.Etw.traceString("PLST:" + err);
                        throw err;
                    }
                    MS.Entertainment.Platform.Playback.Etw.tracePlaylistActivate(index, startPosition, this.shuffle, this.repeat);
                    this._playbackControl.activating = true;
                    if (this._dataSource.size === 0) {
                        this._setMedia(null);
                        return
                    }
                    if (this._playbackControlReadyPromise && this._playbackControlReadyPromise.promise)
                        this._playbackControlReadyPromise.promise.cancel();
                    this._playbackControlReadyPromise = makeEmptyPromise();
                    var ordinal = index;
                    if (ordinal === undefined)
                        ordinal = this.first;
                    else if (index === +index && this.shuffle && !this._sequenceGenerator._isFirstSet())
                        this._sequenceGenerator.first = index;
                    function isValidNumber(n) {
                        return +n === n
                    }
                    if (!isNaN(ordinal) && ordinal >= 0 && ordinal < this._dataSource.size)
                        if (!!searchFor)
                            return expandingSearch(this, ordinal, searchFor, maxSearchDistance || 0).then(function found(foundIndex) {
                                    if (isValidNumber(foundIndex))
                                        return this._setMediaByIndex(foundIndex, startPosition);
                                    else if (searchFor.track)
                                        return this.setDataSource(searchFor.track).then(function playSingleTrack() {
                                                this.activate()
                                            }.bind(this));
                                    else {
                                        MS.Entertainment.Platform.Playback.assert(false, "Search functionality requested in activation w/o specifying backup track to play");
                                        Playback.Etw.traceString("Playlist::activate aborted. Track not found and no alternate track specified");
                                        return WinJS.Promise.as()
                                    }
                                }.bind(this));
                        else
                            return this._setMediaByIndex(ordinal, startPosition)
                }, skipFwd: function PlaylistCore_skipFwd() {
                    if (this._playbackControl.hasPrerolledMedia()) {
                        this._userActionOrdinal = this._prerollOrdinal;
                        this._playbackControl.skipToNextPrerolled(true);
                        return WinJS.Promise.as()
                    }
                    else
                        return this.nextPlayable(this.currentOrdinal).then(function(atOrdinal) {
                                if (atOrdinal != null)
                                    return this.activate(atOrdinal).then(null, function failedToActivate(error) {
                                            if (error && error.isUnplayableItemError)
                                                return WinJS.Promise.wrapError(new Playback.SkipFwdOutOfRangeError)
                                        }.bind(this));
                                else {
                                    if (this._playbackControlReadyPromise && this._playbackControlReadyPromise.promise) {
                                        this._playbackControlReadyPromise.promise.cancel();
                                        this._playbackControlReadyPromise = null
                                    }
                                    return WinJS.Promise.wrapError(new Playback.SkipFwdOutOfRangeError)
                                }
                            }.bind(this))
                }, skipBack: function PlaylistCore_skipBack() {
                    return this.previousPlayable(this.currentOrdinal).then(function(atOrdinal) {
                            if (atOrdinal != null)
                                return this.activate(atOrdinal).then(null, function failedToActivate(error) {
                                        if (error && error.isUnplayableItemError)
                                            if (error && error.isUnplayableItemError)
                                                return WinJS.Promise.wrapError(new Playback.SkipBkwdOutOfRangeError)
                                    }.bind(this));
                            else {
                                this._updateCommandStatus();
                                return WinJS.Promise.wrapError(new Playback.SkipBkwdOutOfRangeError)
                            }
                        }.bind(this))
                }, flushPreroll: function PlaylistCore_flushPreroll(doNotResetFirst) {
                    if (this._dataSource) {
                        if (this._playbackControl && this._playbackControl._player)
                            this._playbackControl._player.reset(true);
                        this._prerollOrdinal = null;
                        this._setNext(this._dataSource);
                        if (this.firstTrackPlaying && !doNotResetFirst)
                            delete this.firstTrackPlaying;
                        this.lastTrackPlaying = false;
                        this._updateCommandStatus()
                    }
                }, _updateCommandStatus: function PlaylistCore__updateCommandStatus() {
                    this.canSkipForward = (this._prerollOrdinal != null) && !this.lastTrackPlaying;
                    this.canSkipBackward = this.repeat || (this.currentOrdinal != null && this.firstTrackPlaying !== this.currentOrdinal && this.before(this.currentOrdinal) != null)
                }, onSetShuffleMode: function PlaylistCore_onSetShuffleMode(v) {
                    this._sequenceGenerator = v ? new mySpace.QuantumShuffleSequencer : this._listSequencer;
                    this._initializeFromSource();
                    this.flushPreroll(true)
                }, onSetRepeatMode: function PlaylistCore_onSetRepeatMode(v) {
                    this._sequenceGenerator.repeat = v;
                    if (this.currentOrdinal != null) {
                        this._userActionOrdinal = this.currentOrdinal;
                        this._prerollOrdinal = this.currentOrdinal;
                        this._setNext(this._dataSource)
                    }
                    this._updateCommandStatus()
                }, _onSizeChanged: function PlaylistCore__onSizeChanged(sz) {
                    if (sz > this._dataSource ? this._dataSource.size : 0)
                        clearCachedPermissions();
                    if (sz)
                        this.onSetShuffleMode(this.shuffle)
                }, _reactivateAt: function _reactivateAt(newOrdinal) {
                    if (newOrdinal === null)
                        return;
                    this.activate(newOrdinal).done(function activated() {
                        this._setCurrentOrdinal(newOrdinal)
                    }.bind(this), function errorToActivate(error) {
                        if (error && error.isUnplayableItemError)
                            return this.nextPlayable(+error.context).done(function gotNextPlayable(atOrdinal) {
                                    if (atOrdinal !== null) {
                                        this.activate(atOrdinal).done(null, function errorOnFound() {
                                            if (error && error.isUnplayableItemError) {
                                                this._reactivateAt(atOrdinal);
                                                return
                                            }
                                            this._setMedia(null, null);
                                            this._setCurrentOrdinal(null)
                                        });
                                        this._setCurrentOrdinal(atOrdinal)
                                    }
                                    else {
                                        this._playbackControl.errorDescriptor = MSEPlatform.Playback.makePlaybackError(MSEPlatform.Playback.Error.NS_E_WMP_MULTIPLE_ERROR_IN_PLAYLIST, "No playable media in the playlist");
                                        this._playbackControl.errorDescriptor.isCritical = true;
                                        this._playbackControl._observableNoLossAssign("playerState", MS.Entertainment.Platform.Playback.PlayerState.error);
                                        this._setMedia(null, null);
                                        this._setCurrentOrdinal(null)
                                    }
                                }.bind(this), function notExpectedToErrorOut(){})
                    }.bind(this))
                }, _onOrderChanged: function PlaylistCore__onOrderChanged() {
                    if (this.currentOrdinal !== undefined && this.currentOrdinal !== null && this._currentMediaInstance !== null) {
                        var datasource = this._dataSource;
                        findOrdinal(this, this.currentOrdinal, this._currentMediaKey).then(function adjust_playback(newOrdinal) {
                            if (newOrdinal !== null) {
                                var reactivate = false;
                                if (newOrdinal === -1) {
                                    reactivate = true;
                                    if (this.currentOrdinal >= this._dataSource.size) {
                                        newOrdinal = this.after(this.currentOrdinal);
                                        if (newOrdinal === this.currentOrdinal)
                                            newOrdinal = null
                                    }
                                    else
                                        newOrdinal = this.currentOrdinal
                                }
                                if (newOrdinal !== null) {
                                    if (reactivate)
                                        this._reactivateAt(newOrdinal)
                                }
                                else {
                                    this._setMedia(null, null);
                                    this._setCurrentOrdinal(null)
                                }
                            }
                            this.flushPreroll(true)
                        }.bind(this))
                    }
                }, first: {get: function PlaylistCore_getFirst() {
                        try {
                            return this._sequenceGenerator.first
                        }
                        catch(ex) {
                            Playback.Etw.traceString("PlaylistCore: Exception " + MS.Entertainment.Utilities.stringify(ex) + " in .first");
                            return 0
                        }
                    }}, after: function PlaylistCore_after(ordinal) {
                    if (ordinal !== +ordinal)
                        return null;
                    try {
                        return this._sequenceGenerator.after(ordinal)
                    }
                    catch(ex) {
                        Playback.Etw.traceString("PlaylistCore: Exception " + MS.Entertainment.Utilities.stringify(ex) + " in after: " + ordinal);
                        return null
                    }
                }, before: function PlaylistCore_before(ordinal) {
                    if (ordinal !== +ordinal)
                        return null;
                    try {
                        return this._sequenceGenerator.before(ordinal)
                    }
                    catch(ex) {
                        Playback.Etw.traceString("PlaylistCore: Exception " + MS.Entertainment.Utilities.stringify(ex) + " in before: " + ordinal);
                        return null
                    }
                }, position: function PlaylistCore_position(ordinal) {
                    if (ordinal !== +ordinal)
                        return NaN;
                    return this._sequenceGenerator.position(ordinal)
                }, _initializeFromSource: function PlaylistCore__initializeFromSource() {
                    if (this._dataSource) {
                        var c = this.currentOrdinal;
                        this._sequenceGenerator.initialize(this._dataSource, c)
                    }
                    this._sequenceGenerator.repeat = this.repeat
                }, _setNext: function PlaylistCore__setNext(datasource) {
                    if (this.isDisposed)
                        return WinJS.Promise.as();
                    if (datasource._nextActivationPromise) {
                        datasource._nextActivationPromise.cancel();
                        this._prerollOrdinal = null
                    }
                    var next = this._computeNextToPreroll();
                    return this._setNextInternal(datasource, next).then(null, function errorInSetNext(error) {
                            if (error && error.isUnplayableItemError)
                                this.nextPlayable(next).done(function foundPlayable(foundOrdinal) {
                                    this._setNextInternal(datasource, foundOrdinal)
                                }.bind(this))
                        }.bind(this))
                }, _setNextInternal: function PlaylistCore__setNextInternal(datasource, next) {
                    if (next === null)
                        return WinJS.Promise.as(this._setNextMedia(null));
                    return this.itemAt(datasource, next).then(this._setNextMedia.bind(this))
                }, _setMedia: function PlaylistCore__setMedia(datasource, item) {
                    var currentOrdinal = null;
                    if (datasource && item && !this.isDisposed) {
                        currentOrdinal = datasource.ordinalOf(item);
                        MS.Entertainment.Platform.Playback.Etw.tracePlaylistSetMedia(item)
                    }
                    else
                        this.currentMedia = null;
                    this._setCurrentOrdinal(currentOrdinal);
                    if (this._playbackControl)
                        this._playbackControl.currentMedia = item
                }, _setNextMedia: function PlaylistCore__setNextMedia(item) {
                    if (this._playbackControl) {
                        var nextMedia;
                        if (item) {
                            this.lastTrackPlaying = false;
                            nextMedia = item
                        }
                        else {
                            if (this._playbackControl.nextMedia === undefined)
                                nextMedia = null;
                            else
                                nextMedia = undefined;
                            if (this.currentOrdinal !== null)
                                this.lastTrackPlaying = true
                        }
                        this._updateCommandStatus();
                        return this._playbackControl.prerollMediaItem(nextMedia)
                    }
                }, savePlaylist: function savePlaylist(title, overwrite, waitForCreationOnly) {
                    Playback.Etw.traceString("PLST::savePlaylist started " + (new Date).toTimeString());
                    var that = this;
                    var playlistId = -1;
                    var overwriteNamed = !!overwrite;
                    var datasource = this._dataSource;
                    var promiseTitle = title || "NowPlaying";
                    var acquisitionContextType = -1;
                    var acquisitionContext = -1;
                    var acquisitionContextId = MS.Entertainment.Utilities.EMPTY_GUID;
                    var acquisitionAdditionalContext = String.empty;
                    var signInService = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn) ? MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn) : null;
                    var signedInUserService = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signedInUser) ? MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser) : null;
                    var hasExplicitPrivilege = signInService && signInService.isSignedIn && signedInUserService && signedInUserService.hasExplicitPrivilege;
                    if (this._savePlaylistInProgressPromise[promiseTitle]) {
                        this._savePlaylistInProgressPromise[promiseTitle].cancel();
                        Playback.Etw.traceString("PLST::savePlaylist previous cancelled")
                    }
                    if (!playlistProvider) {
                        var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        playlistProvider = mediaStore.playlistProvider
                    }
                    function appendItem(item) {
                        if (!item || !item.data)
                            return WinJS.Promise.wrapError("Cannot save the undefined or null playlist item");
                        var mediaItem = item.data;
                        var hydrateMediaItemIfRequired = WinJS.Promise.as(mediaItem);
                        if (item.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video)
                            if (item.data.hasTrackId && title) {
                                hydrateMediaItemIfRequired = item.data.track.hydrate();
                                mediaItem = item.data.track
                            }
                            else
                                return WinJS.Promise.as();
                        return hydrateMediaItemIfRequired.then(function mediaItemHydrated(mediaItem) {
                                return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(mediaItem)
                            }).then(function gotLibraryInfo() {
                                if (MS.Entertainment.Utilities.isAmsterdamApp)
                                    return WinJS.Promise.as(null);
                                var libraryMediaPromise;
                                if (mediaItem && mediaItem.acquisitionData) {
                                    acquisitionContextType = mediaItem.acquisitionData.acquisitionContextType || -1;
                                    acquisitionContext = mediaItem.acquisitionData.acquisitionContext || -1;
                                    acquisitionContextId = MS.Entertainment.Utilities.isValidGuid(mediaItem.acquisitionData.acquisitionContextID) ? mediaItem.acquisitionData.acquisitionContextID : MS.Entertainment.Utilities.EMPTY_GUID;
                                    if (!mediaItem.acquisitionData.acquisitionAdditionalContext)
                                        mediaItem.acquisitionData.acquisitionAdditionalContext = mediaItem.playlistName || title;
                                    acquisitionAdditionalContext = mediaItem.acquisitionData.acquisitionAdditionalContext
                                }
                                if (mediaItem.mediaType && mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && mediaItem.libraryId === -1)
                                    if (hasExplicitPrivilege || !mediaItem.isExplicit)
                                        libraryMediaPromise = MS.Entertainment.Platform.PurchaseHelpers.addNonCollectionMediaToLibrary([mediaItem]);
                                    else
                                        libraryMediaPromise = WinJS.Promise.wrapError(MS.Entertainment.Platform.Playback.makeParentallyBlockedError());
                                else
                                    libraryMediaPromise = WinJS.Promise.wrap({mediaIdentifiers: [{
                                                libraryId: mediaItem.libraryId, libraryType: mediaItem.mediaType, mediaId: mediaItem.serviceId || MS.Entertainment.Utilities.EMPTY_GUID
                                            }]});
                                return libraryMediaPromise
                            }).then(function mediaAddedToLibrary(result) {
                                if (!result || !result.mediaIdentifiers || !result.mediaIdentifiers.length)
                                    return WinJS.Promise.as();
                                var libraryIds = result.mediaIdentifiers.map(function mapLibraryId(item) {
                                        return item.libraryId
                                    });
                                var mediaTypes = result.mediaIdentifiers.map(function mapLibraryType(item) {
                                        return item.libraryType
                                    });
                                var serviceMediaIds = result.mediaIdentifiers.map(function mapServiceId(item) {
                                        return item.mediaId || MS.Entertainment.Utilities.EMPTY_GUID
                                    });
                                if (acquisitionContextType && acquisitionContext && acquisitionContextId && !MS.Entertainment.Utilities.isEmptyGuid(acquisitionContextId))
                                    return playlistProvider.appendPlaylistItemsAsync(playlistId, libraryIds, serviceMediaIds, mediaTypes, Microsoft.Entertainment.Platform.MediaAvailability.undefined, [acquisitionContextType], [acquisitionContext], [acquisitionContextId], [acquisitionAdditionalContext]);
                                else
                                    return playlistProvider.appendPlaylistItemsAsync(playlistId, libraryIds, serviceMediaIds, mediaTypes, Microsoft.Entertainment.Platform.MediaAvailability.undefined)
                            }, function mediaNotAddedToLibrary(error) {
                                if (mediaItem.fileItem || error === Playback.Error.NS_E_EXPLICIT_CONTENT_PLAY_BLOCKED)
                                    return WinJS.Promise.wrap();
                                var trackArtistName = String.empty;
                                var trackArtistServiceId = MS.Entertainment.Utilities.EMPTY_GUID;
                                if (mediaItem.artist) {
                                    trackArtistName = mediaItem.artist.name;
                                    trackArtistServiceId = mediaItem.artist.serviceId || MS.Entertainment.Utilities.EMPTY_GUID
                                }
                                var albumName = String.empty;
                                var albumArtistName = trackArtistName;
                                var albumArtistServiceId = trackArtistServiceId;
                                if (mediaItem.album) {
                                    albumName = mediaItem.album.name;
                                    if (mediaItem.album.artist) {
                                        albumArtistName = mediaItem.album.artist.name;
                                        albumArtistServiceId = mediaItem.album.artist.serviceId || MS.Entertainment.Utilities.EMPTY_GUID
                                    }
                                }
                                var duration = !mediaItem.duration ? 0 : mediaItem.duration.getMinutes ? (((mediaItem.duration.getMinutes() * 60) + mediaItem.duration.getSeconds()) * 1000) : mediaItem.duration;
                                return playlistProvider.appendMarketplaceTrackPlaylistItemAsync(playlistId, [mediaItem.libraryId], [albumName], [albumArtistName], [mediaItem.name], [trackArtistName], [item.data.genreName], [duration], [albumArtistServiceId], [trackArtistServiceId], [item.data.serviceId ? item.data.serviceId : MS.Entertainment.Utilities.EMPTY_GUID], item.data.mediaType, [acquisitionContextType], [acquisitionContext], [acquisitionContextId], [acquisitionAdditionalContext])
                            })
                    }
                    function cleanup(arg) {
                        that._savePlaylistInProgressPromise[promiseTitle] = null;
                        var cancel = String.empty;
                        if (WinJS.Promise.isCanceledError(arg))
                            cancel = " (canceled) ";
                        Playback.Etw.traceString("PLST::savePlaylist cleanup: " + cancel + (new Date).toTimeString());
                        return arg
                    }
                    function progressReport(index) {
                        if (index % 100 === 0)
                            Playback.Etw.traceString("PLST::savePlaylist @" + index)
                    }
                    try {
                        if (datasource) {
                            var listCreationPromise = null;
                            if (!title) {
                                Playback.Etw.traceString("PLST::savePlaylist create nowplaying playlist");
                                listCreationPromise = playlistProvider.createPlaylistAsync(Microsoft.Entertainment.Platform.PlaylistType.nowPlaying, "NowPlaying", true)
                            }
                            else {
                                Playback.Etw.traceString("PLST::savePlaylist create named playlist, title= " + title + ", overwriteNamed=" + overwriteNamed);
                                listCreationPromise = playlistProvider.createPlaylistAsync(Microsoft.Entertainment.Platform.PlaylistType.static, title, overwriteNamed)
                            }
                            that._savePlaylistInProgressPromise[promiseTitle] = listCreationPromise;
                            return listCreationPromise.then(function createPlaylist_complete(createPlaylistReturnValue) {
                                    Playback.Etw.traceString("PLST::savePlaylist createPlaylist_complete");
                                    this.currentNowPlayingPlaylistLibraryId = createPlaylistReturnValue.playlistId;
                                    playlistId = createPlaylistReturnValue.playlistId;
                                    if (this.smartDJSeed && MS.Entertainment.Utilities.isValidGuid(this.smartDJSeed.canonicalId) && !title)
                                        return playlistProvider.savePlaylistRadioSeedAsync(playlistId, this.smartDJSeed.canonicalId).then(function returnPlaylist() {
                                                return playlistId
                                            });
                                    else {
                                        playlistProvider.savePlaylistCurrentItemIndexAsync(playlistId, this.currentOrdinal);
                                        var listWritePromise = MS.Entertainment.Platform.Playback.Playlist.PlaylistCore.forEachItemSequentially(datasource.mediaCollection, appendItem, null, progressReport).then(function savingTracks(count) {
                                                return count
                                            }, function savingTracksError(error) {
                                                if (WinJS.Promise.isCanceledError(error))
                                                    Playback.Etw.traceString("PLST::savePlaylist cancelled");
                                                else
                                                    Playback.Etw.traceString("PLST::savePlaylist terminated with error " + Playback.errorToString(error.number))
                                            });
                                        that._savePlaylistInProgressPromise[promiseTitle] = listWritePromise;
                                        if (!waitForCreationOnly)
                                            return listWritePromise.then(function saved_all(count) {
                                                    return WinJS.Promise.wrap(playlistId)
                                                });
                                        else
                                            return playlistId
                                    }
                                }.bind(this), function onError(e) {
                                    Playback.Etw.traceString("PLST::savePlaylist creation error: " + MS.Entertainment.Utilities.stringify(e));
                                    cleanup(e);
                                    return WinJS.Promise.wrapError(e)
                                }).then(cleanup)
                        }
                    }
                    catch(e) {
                        return WinJS.Promise.wrapError(e)
                    }
                }
        }, {
            forEachItemSequentially: function forEachItemSequentially(collection, asyncOp, maxItems, progress) {
                return collection.getCount().then(function forEachItemSequentially_listCounted(count) {
                        var list = collection.createListBinding();
                        var completed,
                            error;
                        function _iterationError(err) {
                            Playback.Etw.traceString("PLST::forEachItemSequentially iteration error: " + MS.Entertainment.Utilities.stringify(err));
                            list.release();
                            error(err)
                        }
                        {};
                        function _forEachItemSequentially(startingWith) {
                            if (progress)
                                progress(startingWith);
                            if (startingWith === count || (maxItems && maxItems === startingWith)) {
                                list.release();
                                completed(startingWith);
                                return
                            }
                            list.fromIndex(startingWith).done(function forEachItemSequentially_gotItem(item) {
                                WinJS.Promise.timeout().done(function forEachItemSequentially_processItem() {
                                    asyncOp(item).done(_forEachItemSequentially.bind(this, startingWith + 1), _iterationError)
                                })
                            })
                        }
                        return new WinJS.Promise(function(c, e) {
                                completed = c;
                                error = e;
                                _forEachItemSequentially(0)
                            })
                    })
            }, convertMediaItemToMediaInstance: function convertMediaItemToMediaInstance(mediaItem, startPosition, context) {
                    return convertToMediaInstance(mediaItem, mediaItem.index, startPosition, context)
                }
        })})
})("MS.Entertainment.Platform.Playback.Playlist")
})();
/* >>>>>>/components/playback/playbackeventnotifications.js:6571 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.Playback");
    WinJS.Namespace.define("MS.Entertainment.Platform.Playback", {PlaybackEventNotifications: MS.Entertainment.UI.Framework.define(function playbackEventNotifierConstructor(){}, {
            _listeners: {}, _listenerCount: 0, _errors: {}, _nowPlayingId: 0, _bindings: null, _oldMedia: null, setError: function setError(mediaId, errorCode) {
                    MS.Entertainment.Platform.Playback.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.Platform.Playback.assert(errorCode <= 0, "invalid errorCode param");
                    if (errorCode === 0)
                        delete this._errors[mediaId];
                    else
                        this._errors[mediaId] = errorCode;
                    this._sendEvent(mediaId, MS.Entertainment.Platform.Playback.PlaybackEventNotifications.Event.error, errorCode)
                }, clearErrors: function clearErrors() {
                    for (var mediaId in this._errors)
                        this._sendEvent(mediaId, MS.Entertainment.Platform.Playback.PlaybackEventNotifications.Event.error, 0);
                    this._errors = {}
                }, getError: function getError(mediaId) {
                    var errorCode = this._errors[mediaId];
                    return errorCode
                }, attachListener: function attachListener(mediaId, listener) {
                    MS.Entertainment.Platform.Playback.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.Platform.Playback.assert(listener instanceof Function, "listener param is not a function");
                    var listeners = this._listeners[mediaId];
                    if (!listeners)
                        this._listeners[mediaId] = [listener];
                    else
                        listeners.push(listener);
                    if (this._listenerCount === 0) {
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        this._bindings = WinJS.Binding.bind(sessionManager, {nowPlayingSession: {
                                currentOrdinal: this._handleCurrentOrdinalChange.bind(this), currentMedia: this._handleCurrentMediaChange.bind(this)
                            }})
                    }
                    this._listenerCount++;
                    var errorCode = this._errors[mediaId];
                    if (errorCode && !this._shouldIgnoreError(errorCode))
                        listener(mediaId, MS.Entertainment.Platform.Playback.PlaybackEventNotifications.Event.error, errorCode);
                    if (this._isValidMediaId(mediaId) && (mediaId === this._nowPlayingId))
                        listener(mediaId, MS.Entertainment.Platform.Playback.PlaybackEventNotifications.Event.nowPlaying, true)
                }, detachListener: function detachListener(mediaId, listener) {
                    MS.Entertainment.Platform.Playback.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.Platform.Playback.assert(listener instanceof Function, "listener param is not a function");
                    var listeners = this._listeners[mediaId];
                    if (listeners)
                        if (listeners.length === 1) {
                            MS.Entertainment.Platform.Playback.assert(listeners[0] === listener, "listener not attached");
                            if (listeners[0] === listener)
                                delete this._listeners[mediaId]
                        }
                        else {
                            var index = listeners.indexOf(listener);
                            MS.Entertainment.Platform.Playback.assert(index >= 0, "listener not attached");
                            if (index >= 0)
                                listeners.splice(index, 1)
                        }
                    this._listenerCount--;
                    this._listenerCount = Math.max(0, this._listenerCount);
                    if (this._listenerCount === 0 && this._bindings) {
                        this._bindings.cancel();
                        this._bindings = null;
                        this._oldMedia = null;
                        this._nowPlayingId = 0
                    }
                }, _handleCurrentMediaChange: function _handleCurrentMediaChange(newMedia) {
                    if (this._oldMedia)
                        this._setNowPlaying(this._oldMedia, false);
                    if (newMedia)
                        this._setNowPlaying(newMedia, true);
                    this._oldMedia = newMedia
                }, _handleCurrentOrdinalChange: function _handleCurrentOrdinalChange(newOrdinal) {
                    var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                    var session = sessionManager.nowPlayingSession;
                    var collection = session ? session.mediaCollection : null;
                    if (collection && newOrdinal === +newOrdinal)
                        collection.itemFromIndex(newOrdinal).done(function _handleCurrentOrdinalChange_gotItem(item) {
                            if (item && item.data)
                                this._handleCurrentMediaChange(item.data)
                        }.bind(this), function _handleCurrentOrdinalChange_errorOnItemGet(error) {
                            MS.Entertainment.Platform.Playback.fail("unexpected: _handleCurrentOrdinalChange_errorOnItemGet " + newOrdinal)
                        });
                    else
                        this._handleCurrentMediaChange(null)
                }, _setNowPlaying: function _setNowPlaying(media, isNowPlaying, isSecondaryMedia) {
                    this._setNowPlayingInternal(media, isNowPlaying, isSecondaryMedia);
                    if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video && media.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo && media.hasTrackId)
                        this._setNowPlayingInternal(media.track, isNowPlaying, isSecondaryMedia)
                }, _setNowPlayingInternal: function _sendNowPlayingEvent(media, isNowPlaying, isSecondaryMedia) {
                    var mediaId = MS.Entertainment.Platform.Playback.PlaybackEventNotifications.getEventingMediaId(media);
                    this._sendEvent(mediaId, MS.Entertainment.Platform.Playback.PlaybackEventNotifications.Event.nowPlaying, isNowPlaying);
                    this._nowPlayingId = (isNowPlaying && !isSecondaryMedia) ? mediaId : 0
                }, _sendEvent: function _sendEvent(mediaId, event, value) {
                    var listeners = this._listeners[mediaId];
                    if (listeners && !this._shouldIgnoreError(value))
                        listeners.forEach(function(listener) {
                            listener(mediaId, event, value)
                        })
                }, _isValidMediaId: function _isValidMediaId(mediaId) {
                    return ((typeof mediaId === "number" && mediaId >= 0) || (typeof mediaId === "string" && !MS.Entertainment.Utilities.isEmptyGuid(mediaId)))
                }, _shouldIgnoreError: function _shouldIgnoreError(errorCode) {
                    return (errorCode === MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_NOT_LOCAL.code)
                }
        }, {
            Event: {
                error: "error", nowPlaying: "nowPlaying"
            }, getEventingMediaId: function getEventingMediaId(mediaItem) {
                    var mediaId = MS.Entertainment.Utilities.EMPTY_GUID;
                    if (mediaItem)
                        if (MS.Entertainment.Utilities.isValidServiceId(mediaItem.assetLocationId))
                            mediaId = mediaItem.assetLocationId;
                        else if (MS.Entertainment.Utilities.isValidServiceId(mediaItem.serviceId))
                            mediaId = mediaItem.serviceId;
                        else if (mediaItem.libraryId && (typeof mediaItem.libraryId === "number") && mediaItem.libraryId >= 0)
                            mediaId = mediaItem.libraryId;
                        else if (mediaItem.activationFilePath)
                            mediaId = mediaItem.activationFilePath;
                        else if (mediaItem.folderRelativeId)
                            mediaId = mediaItem.folderRelativeId;
                        else if (mediaItem.track)
                            mediaId = mediaItem.track.serviceId;
                        else
                            MS.Entertainment.Utilities.fail("mediaItem did not contain a serviceId, libraryId or activation path. Eventing will fail. " + MS.Entertainment.Utilities.stringify(mediaItem));
                    return mediaId
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.playbackEventNotifications, function playbackEventNotifierFactory() {
        return new MS.Entertainment.Platform.Playback.PlaybackEventNotifications
    }, true)
})()
})();
/* >>>>>>/components/playback/controls/xplayer.js:6704 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.Playback");
(function() {
    "use strict";
    var MSEPlatform = WinJS.Namespace.define("MS.Entertainment.Platform", null);
    WinJS.Namespace.defineWithParent(MSEPlatform, "Playback", {
        shouldDisableDlnaPlayTo: function shouldDisableDlnaPlayTo(mediaInstance) {
            var mediaType = mediaInstance.mediaType;
            var disable = false;
            if (mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                if (!MS.Entertainment.Utilities.isWindowsBlue && mediaInstance.protectionState === MSEPlatform.Playback.ProtectionState.drmProtected && MS.Entertainment.Utilities.isValidServiceId(mediaInstance.serviceIdSafe))
                    disable = true
            }
            else if (!MS.Entertainment.Utilities.isWindowsBlue && !mediaInstance.isLocal && mediaInstance.protectionState === MSEPlatform.Playback.ProtectionState.drmProtected)
                disable = true;
            return disable
        }, XPlayer: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function XPlayer_constructor(playerContainer) {
                this._playerContainer = playerContainer;
                this._setupDlnaPlayToMgr();
                if (MS.Entertainment.Utilities.SignIn)
                    MS.Entertainment.Utilities.SignIn.addEventListener("signInComplete", function() {
                        this._createFastStartAudioTag()
                    }.bind(this));
                this._onAppResume = this._onAppResume.bind(this);
                this._onAppSuspending = this._onAppSuspending.bind(this);
                Windows.UI.WebUI.WebUIApplication.addEventListener("resuming", this._onAppResume);
                Windows.UI.WebUI.WebUIApplication.addEventListener("suspending", this._onAppSuspending);
                if (MS.Entertainment.Utilities.isMusicApp1) {
                    this._volumeController = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.volumeService);
                    this._volumeControllerBindings = WinJS.Binding.bind(this._volumeController, {
                        volume: this._onVolumeValueStateChange.bind(this), mute: this._onVolumeValueStateChange.bind(this)
                    });
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.uiState)) {
                        var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                        MS.Entertainment.UI.Framework.addEventHandlers(uiStateService, {isAppVisibleChanged: this._onAppVisibleChanged.bind(this)})
                    }
                }
            }, {
                _contentRestrictionService: {get: (function() {
                        var contentRestrictionServiceHolder = null;
                        return function _contentRestrictionServiceGetter() {
                                if (contentRestrictionServiceHolder === null && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.contentRestrictionService))
                                    contentRestrictionServiceHolder = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionService);
                                return contentRestrictionServiceHolder
                            }
                    })()}, dispose: function dispose() {
                        this._cleanupDlnaPlayToMgr();
                        if (MS.Entertainment.Utilities.SignIn)
                            MS.Entertainment.Utilities.SignIn.removeEventListener("signInComplete");
                        Windows.UI.WebUI.WebUIApplication.removeEventListener("resuming", this._onAppResume);
                        Windows.UI.WebUI.WebUIApplication.removeEventListener("suspending", this._onAppSuspending);
                        if (this._volumeControllerBindings) {
                            this._volumeControllerBindings.cancel();
                            this._volumeControllerBindings = null
                        }
                        this._playerContainer = null
                    }, autoPlay: {
                        get: function autoPlay_get() {
                            return this._autoPlay
                        }, set: function autoPlay_set(value) {
                                this._autoPlay = value
                            }
                    }, currentMedia: {
                        get: function currentMedia_get() {
                            return this._currentMedia
                        }, set: function currentMedia_set(value) {
                                this._setMedia(value)
                            }
                    }, nextMedia: {
                        get: function nextMedia_get() {
                            return this._nextMedia
                        }, set: function nextMedia_set(value) {
                                this._setNextMedia(value)
                            }
                    }, _volume: {
                        get: function volume_get() {
                            this._ensurePipeline();
                            return this._currentPlayer.volume
                        }, set: function volume_set(value) {
                                this._ensurePipeline();
                                this._currentPlayer.volume = value
                            }
                    }, muted: {
                        get: function muted_get() {
                            this._ensurePipeline();
                            return this._currentPlayer.muted
                        }, set: function muted_set(value) {
                                this._ensurePipeline();
                                this._currentPlayer.muted = value
                            }
                    }, playbackRate: {
                        get: function playbackRate_get() {
                            this._ensurePipeline();
                            return this._currentPlayer.playbackRate
                        }, set: function playbackRate_set(value) {
                                this._ensurePipeline();
                                this._currentPlayer.playbackRate = value
                            }
                    }, videoStreamStatistics: {get: function videoStreamStatistics_get() {
                            if (this._currentPlayer && this._currentPlayer.videoStreamStatistics)
                                return this._currentPlayer.videoStreamStatistics;
                            return null
                        }}, retryableError: {get: function retryableError_get() {
                            if (this._currentPlayer && this._currentPlayer.retryableError)
                                return this._currentPlayer.retryableError;
                            return false
                        }}, play: function play() {
                        MSEPlatform.Playback.Etw.traceString("XPlayer::Play()");
                        this._ensurePipeline();
                        this._currentPlayer.play()
                    }, pause: function pause() {
                        this._ensurePipeline();
                        this._currentPlayer.pause()
                    }, stop: function stop() {
                        this._ensurePipeline();
                        this._currentPlayer.stop();
                        if (this.currentMedia)
                            this.currentMedia.stopPosition = this.forceTimeUpdate()
                    }, seekToPosition: function seekToPosition(positionMsec) {
                        this._ensurePipeline();
                        try {
                            this._currentMedia.maxPosition = this._currentPlayer.currentTime;
                            this._currentPlayer.seekToPosition(positionMsec);
                            this._currentMedia.maxPosition = positionMsec / 1000
                        }
                        catch(e) {
                            MSEPlatform.Playback.Etw.tracePlaybackError(e.code, e.msExtendedCode, "XPlayer::seekToPosition")
                        }
                    }, fastFwd: function fastFwd(){}, rewind: function rewind(){}, slowFwd: function slowFwd(){}, slowRewind: function slowRewind(){}, selectVideoBitrate: function selectVideoBitrate(requestedBitrate) {
                        this._ensurePipeline();
                        this._currentPlayer.selectVideoBitrate(requestedBitrate)
                    }, getAudioTracks: function getAudioTracks() {
                        this._ensurePipeline();
                        return this._currentPlayer.getAudioTracks()
                    }, getSelectedAudioTrack: function getSelectedAudioTrack() {
                        this._ensurePipeline();
                        return this._currentPlayer.getSelectedAudioTrack()
                    }, selectAudioTrack: function selectAudioTrack(trackIndex) {
                        this._ensurePipeline();
                        this._currentPlayer.selectAudioTrack(trackIndex)
                    }, _removePlayerFromDOM: function _removePlayerFromDOM(player) {
                        var playerElement = player.getElement();
                        if (this._playerContainer && this._playerContainer.contains(playerElement))
                            this._playerContainer.removeChild(playerElement);
                        if (playerElement.parentNode && playerElement.parentNode.contains(playerElement))
                            playerElement.parentNode.removeChild(playerElement)
                    }, _removePlayerSrc: function _removePlayerSrc(player, removeFromDOM) {
                        if (player) {
                            if (removeFromDOM)
                                this._removePlayerFromDOM(player);
                            if (player.media && !player.media._errorDescriptor)
                                if (player.media.source && player.media.source.match && player.media.source.match(/^blob*:/i))
                                    URL.revokeObjectURL(player.media.source);
                            player.dispose()
                        }
                    }, reset: function reset(resetNext) {
                        MSEPlatform.Playback.Etw.traceString("XPlayer::_reset:  resetNext = " + resetNext);
                        if (resetNext) {
                            if (this._nextPlayer) {
                                this._unhookNextMediaEvents();
                                this._nextMedia = null;
                                this._removePlayerSrc(this._nextPlayer, false);
                                this._nextPlayer = null
                            }
                        }
                        else if (this._currentPlayer && !this._isDlnaConnectionPresent()) {
                            this._unhookCurrentMediaEvents();
                            this._currentMedia = null;
                            this._removePlayerSrc(this._currentPlayer, true);
                            this._currentPlayer = null
                        }
                    }, enableTimeUpdate: function enableTimeUpdate() {
                        if (this._currentMediaEventsCallback && this._currentPlayer) {
                            this._currentPlayer.removeEventListener("timeupdate", this._currentMediaEventsCallback);
                            this._currentPlayer.addEventListener("timeupdate", this._currentMediaEventsCallback, false)
                        }
                    }, disableTimeUpdate: function disableTimeUpdate() {
                        if (this._currentMediaEventsCallback && this._currentPlayer)
                            this._currentPlayer.removeEventListener("timeupdate", this._currentMediaEventsCallback)
                    }, forceTimeUpdate: function forceTimeUpdate() {
                        if (this._currentPlayer)
                            return this._currentPlayer.currentTime * 1000
                    }, isRemoteSession: function isRemoteSession() {
                        return this._isDlnaConnectionPresent()
                    }, _prePlayAsync: function _prePlay_Async(mediaInstance) {
                        function fireExplicitContentBlockedErrorAndFail(error, context, message) {
                            if (error) {
                                message += " Details: ";
                                try {
                                    message += JSON.stringify(error)
                                }
                                catch(ex) {
                                    message += error.toString()
                                }
                            }
                            MSEPlatform.Playback.Etw.traceString("XPlayer::_fireExplicitContentBlockedErrorAndFail: explicit content blocked.  context: " + context + ", message: " + message);
                            MSEPlatform.Playback.fail(message);
                            var playbackError = MS.Entertainment.Platform.Playback.makePlaybackError(MSEPlatform.Playback.makeParentallyBlockedError(), context);
                            playbackError.innerError = error;
                            return WinJS.Promise.wrapError(playbackError)
                        }
                        if (!mediaInstance || !mediaInstance._ratedContentDescriptionPromise)
                            return WinJS.Promise.as();
                        return mediaInstance._ratedContentDescriptionPromise.then(function gotRatedContentDescription(ratedContentDescription) {
                                return this._contentRestrictionService.requestContentAccessAsync(ratedContentDescription)
                            }.bind(this), function gotRatedContentDescription_failed(error) {
                                var msg = "_ratedContentDescriptionPromise retuned an unexpected async error.";
                                return fireExplicitContentBlockedErrorAndFail(error, "gotRatedContentDescription_failed", msg)
                            }).then(function requestContentAccessAsync_complete(canPlay) {
                                if (canPlay)
                                    return;
                                var itemName = "No title";
                                try {
                                    itemName = mediaInstance._mediaItem.data.name
                                }
                                catch(ex) {
                                    {}
                                }
                                MS.Entertainment.Platform.Playback.Etw.traceString("RESTRICTED ITEM: " + itemName);
                                var errorCode = MSEPlatform.Playback.makeParentallyBlockedError();
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                if (!signedInUser.xuid)
                                    errorCode = MSEPlatform.Playback.Error.X8_E_PLAYBACK_LOGON_TO_PLAY_EXPLICIT_CONTENT;
                                return WinJS.Promise.wrapError(MSEPlatform.Playback.makePlaybackError(errorCode, "ParentalControl"))
                            }, function requestContentAccessAsync_failed(error) {
                                var msg = "requestContentAccessAsync retuned an unexpected async error.";
                                return fireExplicitContentBlockedErrorAndFail(error, "requestContentAccessAsync_failed", msg)
                            })
                    }, _setMedia: function _setMedia(mediaInstance) {
                        if (!mediaInstance) {
                            MSEPlatform.Playback.Etw.traceString("XPlayer::setMedia():  null mediaInstance!");
                            throw"XPlayer::setMedia(): null mediaInstance!";
                        }
                        this._nextMediaStarted = false;
                        this._prePlayAsync(mediaInstance).done(function _prePlayAsync_set_media_completed() {
                            var name = (mediaInstance._mediaItem && mediaInstance._mediaItem.data) ? mediaInstance._mediaItem.data.name : String.empty;
                            MSEPlatform.Playback.Etw.traceString("+XPlayer::_setMedia: name=[" + name + "], source=[" + mediaInstance.source + "]");
                            if (this._isDlnaConnectionPresent()) {
                                var dlnaNextPlayer;
                                if (!MSEPlatform.Playback.shouldDisableDlnaPlayTo(mediaInstance)) {
                                    this._unhookCurrentMediaEvents();
                                    try {
                                        dlnaNextPlayer = this._createMediaPlayer(mediaInstance, false);
                                        if (!dlnaNextPlayer.msPlayToDisabled) {
                                            MSEPlatform.Playback.Etw.traceString("XPlayer::_setMedia, set PlayToSource.next on current player and start playto");
                                            this._configurePlayToByRefMediaPlayer(dlnaNextPlayer, mediaInstance);
                                            this._setVolumeValueAndStateOnTag(dlnaNextPlayer);
                                            this._currentPlayer.msPlayToSource.next = dlnaNextPlayer.msPlayToSource;
                                            if (MS.Entertainment.Utilities.isVideoApp1 && mediaInstance.startPosition) {
                                                var startTime = Math.floor((+mediaInstance.startPosition) / 1000) + 1;
                                                dlnaNextPlayer.currentTime = startTime
                                            }
                                            this._currentPlayer.msPlayToSource.playNext()
                                        }
                                        this._currentMedia = null;
                                        this._removePlayerSrc(this._currentPlayer, true);
                                        this._currentPlayer = dlnaNextPlayer;
                                        this._currentMedia = mediaInstance;
                                        this._hookupCurrentMediaEvents();
                                        this._playerContainer.appendChild(this._currentPlayer.getElement())
                                    }
                                    catch(ex) {
                                        MS.Entertainment.Platform.Playback.Etw.traceString("XPlayer::_setMedia: Exception thrown when configuring dlnaNextPlayer: " + ex);
                                        var playbackError = MS.Entertainment.Platform.Playback.makePlaybackError(MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_PLAYTO_UNEXPECTED_ERR, "XPlayer::_setMedia() threw exception when configuring dlnaNextPlayer");
                                        this._firePlaybackError(playbackError, playbackError.context);
                                        this._currentMedia = null;
                                        this._removePlayerSrc(this._currentPlayer, true)
                                    }
                                }
                                if (!dlnaNextPlayer || dlnaNextPlayer.msPlayToDisabled)
                                    if (this._currentPlayer && this._currentMedia) {
                                        this._nextMedia = mediaInstance;
                                        this._nextMediaLoaded = false;
                                        this._nextMediaStarted = false;
                                        this._nextMediaError = false;
                                        this._fireNextMediaError(MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_SRC_NOT_SUPPORTED, "XPlayer::_setMedia, playTo is disabled for media. Current media playing, treat this as next media")
                                    }
                                    else
                                        this._firePlaybackError(MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_SRC_NOT_SUPPORTED, "XPlayer::_setMedia, playTo is disabled for media");
                                dlnaNextPlayer = null
                            }
                            else {
                                if (this._currentPlayer)
                                    this.reset(false);
                                this._currentMedia = mediaInstance;
                                this._currentPlayer = this._createMediaPlayer(mediaInstance, this._autoPlay);
                                this._configurePlayToByRefMediaPlayer(this._currentPlayer, this._currentMedia);
                                this._hookupCurrentMediaEvents();
                                this._setVolumeValueAndStateOnTag(this._currentPlayer);
                                MSEPlatform.Playback.Etw.traceString("XPlayer::_setMedia: audio/video tag appending");
                                this._playerContainer.appendChild(this._currentPlayer.getElement())
                            }
                            MSEPlatform.Playback.Etw.traceString("-XPlayer::_setMedia:")
                        }.bind(this), function _prePlayAsync_set_media_failed(error) {
                            MSEPlatform.Playback.Etw.traceString("-XPlayer::_setMedia: _prePlayAsync_set_media_failed");
                            this._currentMedia = mediaInstance;
                            var playbackError = error;
                            if (!error || !error.code || !error.context)
                                playbackError = MSEPlatform.Playback.makePlaybackError(MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_GENERIC, "XPlayer::_setMedia() failed");
                            return this._firePlaybackError(playbackError, playbackError.context)
                        }.bind(this))
                    }, _setNextMedia: function _setNextMedia(mediaInstance) {
                        if (mediaInstance) {
                            var name = WinJS.Utilities.getMember("_mediaItem.data.name", mediaInstance) || String.empty;
                            MSEPlatform.Playback.Etw.traceString("+XPlayer::_setNextMedia: name=[" + name + "], source=[" + mediaInstance.source + "]")
                        }
                        else
                            MSEPlatform.Playback.Etw.traceString("+XPlayer::_setNextMedia: null, prerolled media is disposed");
                        if (this._nextPlayer)
                            this.reset(true);
                        if (!mediaInstance)
                            return;
                        else if (!this._isDlnaConnectionPresent() || !MSEPlatform.Playback.shouldDisableDlnaPlayTo(mediaInstance))
                            this._nextPlayer = this._createMediaPlayer(mediaInstance, false);
                        this._nextMedia = mediaInstance;
                        this._nextMediaLoaded = false;
                        this._nextMediaStarted = false;
                        this._nextMediaError = false;
                        var succeeded = true;
                        if (this._isDlnaConnectionPresent())
                            if (!this._nextPlayer || this._nextPlayer.msPlayToDisabled) {
                                this._fireNextMediaError(MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_SRC_NOT_SUPPORTED, "XPlayer::_setNextMedia, playTo is disabled for media");
                                succeeded = false
                            }
                        if (succeeded)
                            this._hookupNextMediaEvents();
                        MSEPlatform.Playback.Etw.traceString("-XPlayer::_setNextMedia")
                    }, _fireNextMediaError: function _fireNextMediaError(error, context) {
                        MSEPlatform.Playback.firePlaybackError(this._handleNextMediaEvents.bind(this), this._remapErrorForPlayTo(error), context)
                    }, _firePlaybackError: function _firePlaybackError(error, context, postPendedText) {
                        MSEPlatform.Playback.firePlaybackError(this._currentMediaEventsCallback, this._remapErrorForPlayTo(error), context, null, postPendedText)
                    }, _remapErrorForPlayTo: function _remapErrorForPlayTo(error) {
                        var mappedError = error;
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        var isSubscription = signedInUser && signedInUser.isSubscription;
                        MSEPlatform.Playback.Etw.traceString("XPlayer::_remapErrorForPlayTo: user is " + isSubscription ? "MUSIC PASS user" : "NON-MusicPass user");
                        if (this._isDlnaConnectionPresent() && error && (typeof(error) === "object") && (error.code === MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_SRC_NOT_SUPPORTED.code))
                            if (isSubscription)
                                mappedError = MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_CANT_PLAYTO_PREMIUM;
                            else
                                mappedError = MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_CANT_PLAYTO;
                        return mappedError
                    }, _createMediaPlayer: function _createMediaPlayer(mediaInstance, autoPlay) {
                        MSEPlatform.Playback.Etw.traceString("XPlayer::_createMediaPlayer: creating audio/video player.  mediaInstance.source = " + mediaInstance.source);
                        var Playback = MSEPlatform.Playback;
                        var mediaPlayer;
                        if (mediaInstance.mediaType === Microsoft.Entertainment.Queries.ObjectType.video)
                            mediaPlayer = new Playback.VideoPlayer(mediaInstance, autoPlay);
                        else {
                            mediaPlayer = new Playback.AudioPlayer(mediaInstance, autoPlay);
                            var mediaElement = mediaPlayer.getElement();
                            if (mediaPlayer.isFastStartSource) {
                                WinJS.Promise.timeout().then(function fastStartSimulateMediaLoaded() {
                                    if (!mediaPlayer.error) {
                                        mediaElement.durationOverrideMS = mediaPlayer.getMediaDurationMS();
                                        this._currentMediaEventsCallback({
                                            srcElement: mediaElement, type: "loadedmetadata"
                                        })
                                    }
                                    else {
                                        var target = {error: mediaPlayer.error};
                                        this._currentMediaEventsCallback({
                                            srcElement: mediaElement, type: "error", target: target
                                        })
                                    }
                                }.bind(this));
                                MSEPlatform.Playback.assert(autoPlay, "fast start tag should only be used with autoplay");
                                mediaPlayer.play()
                            }
                            else if (mediaPlayer.isPreActivatedSource) {
                                var mediaElement = mediaPlayer.getElement();
                                Playback.Etw.traceString("XPlayer::_CreateMediaPlayer() pre created audioTag or videoTag");
                                WinJS.Promise.timeout().then(function preCreatedHtmlTagSimulateEvents() {
                                    if (!mediaPlayer.error) {
                                        if (this._currentMedia && this._currentMedia._mediaItem && this._currentMedia._mediaItem.data)
                                            if (!this._currentMedia._mediaItem.data.duration || this._currentMedia._mediaItem.data.duration <= 0)
                                                this._currentMedia._mediaItem.data.duration = Math.round(this._currentPlayer.duration * 1000);
                                        this._currentMediaEventsCallback({
                                            srcElement: mediaElement, type: "loadedmetadata"
                                        });
                                        this._currentMediaEventsCallback({
                                            srcElement: mediaElement, type: "playing"
                                        });
                                        if (mediaPlayer.ended)
                                            this._currentMediaEventsCallback({
                                                srcElement: mediaElement, type: "ended"
                                            })
                                    }
                                    else if (MS.Entertainment.Utilities.isVideoApp1)
                                        this._currentMediaEventsCallback({
                                            srcElement: mediaElement, target: mediaElement, type: "error"
                                        })
                                }.bind(this))
                            }
                        }
                        return mediaPlayer
                    }, _errorFilterHandler: null, _hookupCurrentMediaEvents: function _hookupCurrentMediaEvents() {
                        var currentPlayer = this._currentPlayer;
                        if (!this._errorFilterHandler)
                            this._errorFilterHandler = function errorFilter(e) {
                                var primarySession;
                                var shouldSkipForApp2 = false;
                                var shouldSimulateEnded = false;
                                var shouldRetryPlayback = false;
                                var isPlayToReceiverSessionRunning = false;
                                if (MS.Entertainment.Utilities.isApp2) {
                                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.sessionManager)) {
                                        primarySession = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).primarySession;
                                        isPlayToReceiverSessionRunning = primarySession && primarySession.isPlayToReceiverSessionRunning
                                    }
                                    shouldSkipForApp2 = e.target.endOfStream || isPlayToReceiverSessionRunning || (e.target.error.msExtendedCode === MSEPlatform.Playback.Error.E_ENHANCED_STORAGE.code) || (e.target.error.msExtendedCode === MSEPlatform.Playback.Error.E_ABORT.code) || (e.target.error.msExtendedCode === MSEPlatform.Playback.Error.E_FILE_NOT_FOUND.code) || (e.target.error.msExtendedCode === MSEPlatform.Playback.Error.MF_E_UNSUPPORTED_RATE.code) || (e.target.error.msExtendedCode === MSEPlatform.Playback.MediaTagError.MEDIA_ENGINE_ERR_NOERROR.code);
                                    if (shouldSkipForApp2)
                                        if (e.target.endOfStream)
                                            MSEPlatform.Playback.Etw.traceString("XPlayer::_errorFilter() Error after EOS, msExtendedCode = " + e.target.error.msExtendedCode);
                                        else {
                                            MSEPlatform.Playback.Etw.traceString("XPlayer::_errorFilter() Errors on Video2 ignored, msExtendedCode = " + e.target.error.msExtendedCode);
                                            if (e.target.error.msExtendedCode === MSEPlatform.Playback.Error.E_ENHANCED_STORAGE.code) {
                                                MSEPlatform.Playback.Etw.traceString("XPlayer::_errorFilter() Received PlayReady decryptor error. Set retry flag.");
                                                shouldRetryPlayback = true
                                            }
                                            else if (primarySession) {
                                                var currentPosition = primarySession.currentPosition;
                                                var duration = +(primarySession.duration);
                                                if (!isPlayToReceiverSessionRunning && (duration !== 0) && ((currentPosition / duration) >= 0.95))
                                                    shouldSimulateEnded = true
                                            }
                                        }
                                }
                                var shouldSkipThisError = ((currentPlayer && currentPlayer.skipThisError) || shouldSkipForApp2) && !shouldRetryPlayback;
                                if (currentPlayer)
                                    currentPlayer.skipThisError = false;
                                if (!shouldSkipThisError) {
                                    MSEPlatform.Playback.Etw.traceString("XPlayer::_errorFilter() Forwarding error to other subscribers.");
                                    this._currentMediaEventsCallback(e)
                                }
                                else if (shouldSimulateEnded) {
                                    MSEPlatform.Playback.Etw.traceString("XPlayer::_errorFilter() Simulating ended event.");
                                    this._currentMediaEventsCallback({
                                        srcElement: e.target, type: "ended", target: e.target
                                    })
                                }
                            }.bind(this);
                        if (this._currentMediaEventsCallback) {
                            currentPlayer.addEventListener("loadedmetadata", this._currentMediaEventsCallback, false);
                            currentPlayer.addEventListener("playing", this._currentMediaEventsCallback, false);
                            currentPlayer.addEventListener("ended", this._currentMediaEventsCallback, false);
                            currentPlayer.addEventListener("pause", this._currentMediaEventsCallback, false);
                            currentPlayer.addEventListener("error", this._errorFilterHandler, false);
                            currentPlayer.addEventListener("seeked", this._currentMediaEventsCallback, false);
                            currentPlayer.addEventListener("durationchange", this._currentMediaEventsCallback, false);
                            currentPlayer.addEventListener("ratechange", this._currentMediaEventsCallback, false)
                        }
                        this.enableTimeUpdate();
                        var currentMediahandler = this._handleCurrentMediaEvents.bind(this);
                        currentPlayer.addEventListener("ended", currentMediahandler, false);
                        currentPlayer.addEventListener("playing", currentMediahandler, false);
                        currentPlayer.addEventListener("pause", currentMediahandler, false);
                        currentPlayer.addEventListener("error", currentMediahandler, false);
                        currentPlayer.addEventListener("progress", currentMediahandler, false);
                        if (currentPlayer && !currentPlayer.msPlayToDisabled)
                            try {
                                if (currentPlayer.msPlayToSource && currentPlayer.msPlayToSource.connection) {
                                    var dlnaHandler = this._handleDlnaConnectionEvents.bind(this);
                                    currentPlayer.msPlayToSource.connection.addEventListener("error", dlnaHandler, false);
                                    currentPlayer.msPlayToSource.connection.addEventListener("statechanged", dlnaHandler, false);
                                    currentPlayer.msPlayToSource.connection.addEventListener("transferred", dlnaHandler, false)
                                }
                            }
                            catch(ex) {
                                MS.Entertainment.UI.Debug.writeLine("Failed to hook up DLNA Connection events: " + ex)
                            }
                        this._unhookCurrentMediaEvents = function() {
                            if (currentPlayer) {
                                currentPlayer.removeEventListener("ended", currentMediahandler, false);
                                currentPlayer.removeEventListener("playing", currentMediahandler, false);
                                currentPlayer.removeEventListener("pause", currentMediahandler, false);
                                currentPlayer.removeEventListener("error", currentMediahandler, false);
                                currentPlayer.removeEventListener("progress", currentMediahandler, false);
                                if (this._currentMediaEventsCallback) {
                                    currentPlayer.removeEventListener("loadedmetadata", this._currentMediaEventsCallback);
                                    currentPlayer.removeEventListener("playing", this._currentMediaEventsCallback);
                                    currentPlayer.removeEventListener("ended", this._currentMediaEventsCallback);
                                    currentPlayer.removeEventListener("pause", this._currentMediaEventsCallback);
                                    currentPlayer.removeEventListener("error", this._errorFilterHandler);
                                    currentPlayer.removeEventListener("seeked", this._currentMediaEventsCallback);
                                    currentPlayer.removeEventListener("durationchange", this._currentMediaEventsCallback);
                                    currentPlayer.removeEventListener("ratechange", this._currentMediaEventsCallback)
                                }
                                this.disableTimeUpdate();
                                if (currentPlayer && !currentPlayer.msPlayToDisabled)
                                    try {
                                        if (currentPlayer.msPlayToSource && currentPlayer.msPlayToSource.connection) {
                                            currentPlayer.msPlayToSource.connection.removeEventListener("error", dlnaHandler);
                                            currentPlayer.msPlayToSource.connection.removeEventListener("statechanged", dlnaHandler);
                                            currentPlayer.msPlayToSource.connection.removeEventListener("transferred", dlnaHandler)
                                        }
                                    }
                                    catch(ex) {
                                        MS.Entertainment.UI.Debug.writeLine("Failed to unhook DLNA Connection events: " + ex)
                                    }
                            }
                        }
                    }, _configurePlayToByRefMediaPlayer: function _configurePlayToByRefMediaPlayer(player, media) {
                        if (MS.Entertainment.Utilities.isWindowsBlue)
                            if (player && !player.msPlayToDisabled)
                                try {
                                    if (player.msPlayToSource) {
                                        MSEPlatform.Playback.Etw.traceString("XPlayer::_configurePlayToByRefMediaPlayer - Hooking up DLNA PlayToByRef");
                                        var mediaIsProtected = false;
                                        var mediaIdExists = false;
                                        var playToUrl = MS.Entertainment.Utilities.isMusicApp ? "ms-playtoapp-xboxmusic://media?" : "ms-playtoapp-xboxvideo://media?";
                                        if (media) {
                                            mediaIsProtected = (media.protectionState !== MSEPlatform.Playback.ProtectionState.unprotected);
                                            if (media._mediaItem && media._mediaItem.data)
                                                if (MS.Entertainment.Utilities.isValidServiceId(media._mediaItem.data.zuneId)) {
                                                    mediaIdExists = true;
                                                    playToUrl = this._appendParamToUrl(playToUrl, "X_id={" + MS.Entertainment.Utilities.trimGuid(media._mediaItem.data.zuneId) + "}")
                                                }
                                                else if (MS.Entertainment.Utilities.isValidServiceId(media.serviceId)) {
                                                    mediaIdExists = true;
                                                    playToUrl = this._appendParamToUrl(playToUrl, "X_id={" + MS.Entertainment.Utilities.trimGuid(media.serviceId) + "}")
                                                }
                                        }
                                        if (mediaIdExists && mediaIsProtected) {
                                            var playToUri = new Windows.Foundation.Uri(playToUrl);
                                            MSEPlatform.Playback.Etw.traceString("XPlayer::_configurePlayToByRefMediaPlayer - setting this._currentPlayer.msPlayToSource.preferredSourceUri");
                                            player.msPlayToSource.preferredSourceUri = playToUri
                                        }
                                    }
                                }
                                catch(ex) {
                                    MSEPlatform.Playback.Etw.traceString("XPlayer::_configurePlayToByRefMediaPlayer - this._currentPlayer.msPlayToSource.preferredSourceUri exception", ex.toString())
                                }
                    }, _appendParamToUrl: function _appendParamToUrl(url, param) {
                        var newUrl = url;
                        if (newUrl[newUrl.length - 1] !== '?')
                            newUrl += '&';
                        newUrl += param;
                        return newUrl
                    }, _unhookCurrentMediaEvents: function _unhookCurrentMediaEvents(){}, _hookupNextMediaEvents: function _hookupNextMediaEvents() {
                        var handler = this._handleNextMediaEvents.bind(this);
                        var nextPlayer = this._nextPlayer;
                        this._unhookNextMediaEvents();
                        nextPlayer.addEventListener("loadedmetadata", handler, false);
                        nextPlayer.addEventListener("error", handler, false);
                        nextPlayer.addEventListener("progress", handler, false);
                        this._unhookNextMediaEvents = function() {
                            nextPlayer.removeEventListener("loadedmetadata", handler);
                            nextPlayer.removeEventListener("error", handler);
                            nextPlayer.removeEventListener("progress", handler)
                        }
                    }, _unhookNextMediaEvents: function _unhookNextMediaEvents(){}, _onSwitchPlayerError: function _onSwitchPlayerError(error) {
                        var msg = "Async errors should have been handled by  _switchPlayerAsync: ";
                        try {
                            msg += JSON.stringify(error)
                        }
                        catch(ex) {
                            {}
                        }
                        MSEPlatform.Playback.fail(msg);
                        MSEPlatform.Playback.Etw.traceString("XPlayer::_onSwitchPlayerError.  " + MSEPlatform.Playback.mediaErrorToString(error))
                    }, _handleCurrentMediaEvents: function _handleCurrentMediaEvents(event) {
                        var traceInfo = String.empty;
                        if (event.type === "error" && event.target && event.target.error)
                            traceInfo = MSEPlatform.Playback.mediaErrorToString(event.target.error);
                        if (event.type !== "progress")
                            MSEPlatform.Playback.Etw.traceString("XPlayer::_handleCurrentMediaEvents event from audio/video tag: " + event.type + " " + traceInfo);
                        if (this._currentMedia) {
                            if (event.type != "ended")
                                this._currentMedia.maxPosition = this._currentPlayer ? this._currentPlayer.currentTime : 0;
                            else
                                this._currentMedia.maxPosition = this._currentPlayer.duration;
                            this._currentMedia._lastStateChangeEvent = event
                        }
                        switch (event.type) {
                            case"ended":
                                if (event.target.tagName === "VIDEO" && this._currentPlayer && (this._currentPlayer.currentTime / this._currentPlayer.duration) <= 0.25)
                                    MSEPlatform.Playback.Etw.traceString("XPlayer::_handleCurrentMediaEvents : playback ended at the start of the media. Ignoring ended event");
                                else {
                                    event.target.endOfStream = true;
                                    if (this.controlIsProcessingNextMedia)
                                        MSEPlatform.Playback.Etw.traceString("XPlayer::_handleCurrentMediaEvents : playback ended before preroll completed");
                                    else
                                        this._switchPlayerAsync().done(function _switchPlayerAsync_completed(succeeded) {
                                            this._nextMediaStarted = false;
                                            if (succeeded)
                                                this._currentPlayer.play()
                                        }.bind(this), this._onSwitchPlayerError.bind(this))
                                }
                                break;
                            case"playing":
                                if (!MSEPlatform.Playback.AudioPlayer.hasValidFastStartTag() && MS.Entertainment.Utilities.isMusicApp1)
                                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.uiState)) {
                                        var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                                        if (uiStateService.isAppVisible) {
                                            MSEPlatform.Playback.Etw.traceString("XPlayer::_handleCurrentMediaEvents : _createFastStartAudioTag on playing event and app is visible");
                                            this._createFastStartAudioTag()
                                        }
                                    }
                                break;
                            case"progress":
                                MS.Entertainment.Utilities.Telemetry.logPlayerBufferState(this._currentPlayer.buffered, this._currentPlayer.currentTime, this._currentPlayer.duration, "currentPlayer");
                                break;
                            default:
                                break
                        }
                    }, _handleNextMediaEvents: function _handleNextMediaEvents(event) {
                        if (this._nextMedia)
                            this._nextMedia._lastStateChangeEvent = event;
                        switch (event.type) {
                            case"loadedmetadata":
                                MSEPlatform.Playback.Etw.traceString("XPlayer::_handleNextMediaEvents - loadedmetadata");
                                if (this._nextMedia) {
                                    MSEPlatform.Playback.Etw.traceString("XPlayer::_handleNextMediaEvents - loadedmetadata, resetting errorDescriptor");
                                    this._nextMedia._errorDescriptor = null;
                                    this._nextMediaError = false;
                                    this._nextMediaLoaded = true;
                                    if (this._currentPlayer && (this._currentPlayer.ended || this._currentMedia._errorDescriptor)) {
                                        MSEPlatform.Playback.Etw.traceString("XPlayer::_handleNextMediaEvents - preroll completed after previous track ended. Calling switchPlayer.");
                                        this._switchPlayerAsync().done(function _switchPlayerAsync_completed(succeeded) {
                                            if (succeeded)
                                                this._currentPlayer.play()
                                        }.bind(this), this._onSwitchPlayerError.bind(this))
                                    }
                                }
                                else
                                    MSEPlatform.Playback.Etw.traceString("XPlayer::_handleNextMediaEvents - loadedmetadata, nextMedia null?");
                                break;
                            case"error":
                                MSEPlatform.Playback.Etw.traceString("XPlayer::_handleNextMediaEvents - error");
                                MSEPlatform.Playback.Etw.traceString("XPlayer::_handleNextMediaEvents - error," + " src = " + (event.target.src ? event.target.src : "null") + ", currentsrc = " + (event.target.currentSrc ? event.target.currentSrc : "null") + ", " + MSEPlatform.Playback.mediaErrorToString(event.target.error));
                                if (event.target.error.msExtendedCode === MSEPlatform.Playback.Error.MF_E_UNSUPPORTED_RATE.code) {
                                    MSEPlatform.Playback.Etw.traceString("MF_E_UNSUPPORTED_RATE ignored in a prerolled item");
                                    break
                                }
                                if (this._nextMedia) {
                                    this._nextMedia._errorDescriptor = event.target.error;
                                    this._nextMediaError = true
                                }
                                else
                                    MSEPlatform.Playback.Etw.traceString("XPlayer::_handleNextMediaEvents - error, nextMedia null?");
                                break;
                            case"progress":
                                MS.Entertainment.Utilities.Telemetry.logPlayerBufferState(this._nextPlayer.buffered, this._nextPlayer.currentTime, this._nextPlayer.duration, "nextPlayer");
                                break;
                            default:
                                break
                        }
                    }, _handleDlnaConnectionEvents: function _handleDlnaConnectionEvents(event) {
                        switch (event.type) {
                            case"error":
                                if (this._currentMedia && this._currentMedia.alternateVideoEncoding !== null) {
                                    this._firePlaybackError(MSEPlatform.Playback.Error.MF_E_UNSUPPORTED_BYTESTREAM, "Dlna translated error. Not subject to DLNA telemetry.");
                                    break
                                }
                                var telemetryParameter = [{
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, parameterValue: event.code ? event.code : 0
                                        }];
                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PlayToSenderError, telemetryParameter);
                                var errorString = MSEPlatform.Playback.errorToString(event.code);
                                MSEPlatform.Playback.Etw.traceString("XPlayer::_handleDlnaConnectionEvents - Error = " + errorString);
                                MS.Entertainment.UI.Debug.writeLine("DLNA ConnectionError: " + errorString);
                                break;
                            case"statechanged":
                                if (this._currentPlayer && !this._currentPlayer.msPlayToDisabled && this._currentPlayer.msPlayToSource && this._currentPlayer.msPlayToSource.connection) {
                                    MS.Entertainment.UI.Debug.writeLine("_currentPlayer connection state: " + this._currentPlayer.msPlayToSource.connection.state);
                                    this.playToSenderConnectionState = this._currentPlayer.msPlayToSource.connection.state;
                                    if (MS.Entertainment.Utilities.isWindowsBlue && this._currentMedia)
                                        this._currentMedia._remoteTrackingMode = true;
                                    MSEPlatform.Playback.Etw.traceString("XPlayer::_handleDlnaConnectionEvents - _currentPlayer Connection StateChanged = " + this.playToSenderConnectionState)
                                }
                                else {
                                    MS.Entertainment.UI.Debug.writeLine("DLNA Connection StateChanged: " + event.currentState);
                                    this.playToSenderConnectionState = event.currentState;
                                    MSEPlatform.Playback.Etw.traceString("XPlayer::_handleDlnaConnectionEvents - DLNA Connection StateChanged = " + this.playToSenderConnectionState)
                                }
                                if (this._currentMedia && !this._currentMedia._telemetryDataSent && this.playToSenderConnectionState === Windows.Media.PlayTo.PlayToConnectionState.rendering) {
                                    var currentMediaIsProtected = (this._currentMedia.protectionState !== MS.Entertainment.Platform.Playback.ProtectionState.unprotected);
                                    var currentMediaHasSmid = MS.Entertainment.Utilities.isValidServiceId(this._currentMedia.serviceIdSafe);
                                    var playToType = (currentMediaHasSmid && currentMediaIsProtected) ? MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.PlayToByRef : MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.PlayToUGC;
                                    MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PlayToSenderPlaybackHappened, [{
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PlayToType, parameterValue: playToType
                                        }]);
                                    this._currentMedia._telemetryDataSent = true
                                }
                                if (this.playToSenderConnectionState === Windows.Media.PlayTo.PlayToConnectionState.disconnected) {
                                    this.dmrName = "";
                                    this.isRemoteSessionRunning = false;
                                    if (MS.Entertainment.Utilities.isWindowsBlue && this._currentMedia)
                                        this._currentMedia._remoteTrackingMode = false;
                                    if (this._currentPlayer)
                                        this._setVolumeValueAndStateOnTag(this._currentPlayer);
                                    if (this._currentMedia)
                                        this._currentMedia.startPosition = 0;
                                    if (this._currentPlayer && this._currentPlayer.msPlayToDisabled)
                                        this._firePlaybackError(MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_SRC_NOT_SUPPORTED, "DLNA actual device error");
                                    if (MS.Entertainment.Utilities.isVideoApp1 && !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).nowPlayingVisible)
                                        this.reset(false);
                                    if (this._currentPlayer && this._currentPlayer.isFastStartSource && MSEPlatform.Playback.AudioPlayer.hasValidFastStartTag) {
                                        this._nextPlayer = this._createMediaPlayer(this._currentMedia, false);
                                        this._nextMedia = this._currentMedia;
                                        this._configurePlayToByRefMediaPlayer(this._nextPlayer, this._nextMedia);
                                        this._destroyCurrentAndPromoteNextPlayer()
                                    }
                                }
                                break;
                            case"transferred":
                                MSEPlatform.Playback.Etw.traceString("XPlayer::_handleDlnaConnectionEvents - DLNA Connection Transferred");
                                MS.Entertainment.UI.Debug.writeLine("DLNA Connection Transferred");
                                break
                        }
                    }, _isDlnaConnectionPresent: function _isDlnaConnectionPresent() {
                        return (this._dlnaPlayToMgr && this.playToSenderConnectionState !== Windows.Media.PlayTo.PlayToConnectionState.disconnected)
                    }, _switchPlayerAsync: function _switchPlayerAsync() {
                        return this._prePlayAsync(this._nextMedia).then(function _prePlayAsync_succeeded() {
                                MSEPlatform.Playback.Etw.traceString("+XPlayer:_switchPlayer.  this._nextPlayer = " + this._nextPlayer);
                                if (this._nextPlayer) {
                                    MSEPlatform.Playback.Etw.traceSwitchingToNextMedia(this._nextMedia.source);
                                    this._unhookCurrentMediaEvents();
                                    if (this._isDlnaConnectionPresent()) {
                                        if (this._currentPlayer && this._currentPlayer.msPlayToSource)
                                            if (this._currentPlayer.msPlayToSource.next) {
                                                MSEPlatform.Playback.Etw.traceString("Xplayer::_switchPlayer, PlayToSource.next already exists, start playto");
                                                this._setVolumeValueAndStateOnTag(this._nextPlayer);
                                                this._currentPlayer.msPlayToSource.playNext()
                                            }
                                            else if (this._nextPlayer.msPlayToDisabled)
                                                this._fireNextMediaError(MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_SRC_NOT_SUPPORTED, "XPlayer::_switchPlayer, playTo is disabled for media");
                                            else
                                                try {
                                                    MSEPlatform.Playback.Etw.traceString("Xplayer::_switchPlayer, PlayToSource.next does not exist, set PlayToSource.next on current player and start playto");
                                                    this._configurePlayToByRefMediaPlayer(this._nextPlayer, this._nextMedia);
                                                    this._setVolumeValueAndStateOnTag(this._nextPlayer);
                                                    this._currentPlayer.msPlayToSource.next = this._nextPlayer.msPlayToSource;
                                                    this._currentPlayer.msPlayToSource.playNext()
                                                }
                                                catch(ex) {
                                                    MSEPlatform.Playback.Etw.traceString("XPlayer::_switchPlayer.  Caught exception in _configurePlayToByRefMediaPlayer");
                                                    this._currentPlayer.msPlayToSource = null
                                                }
                                    }
                                    else
                                        this._configurePlayToByRefMediaPlayer(this._nextPlayer, this._nextMedia)
                                }
                                if (this._nextPlayer === null)
                                    if (this.controlIsProcessingNextMedia || (this.controlIsProcessingNextMedia === undefined && MS.Entertainment.Utilities.isMusicApp)) {
                                        MSEPlatform.Playback.Etw.traceString("-XPlayer::_switchPlayer.  returning false");
                                        return false
                                    }
                                    else if (!(this.isRemoteSessionRunning || MS.Entertainment.Utilities.isVideoApp1)) {
                                        this._destroyCurrentAndPromoteNextPlayer();
                                        MSEPlatform.Playback.Etw.traceString("-XPlayer:_switchPlayer, setting _nextMediaStarted with currentPlayer  " + !!this._currentPlayer);
                                        this._nextMediaStarted = true
                                    }
                                    else {
                                        MSEPlatform.Playback.Etw.traceString("-XPlayer:_switchPlayer.  returning false");
                                        return false
                                    }
                                else {
                                    this._destroyCurrentAndPromoteNextPlayer();
                                    this._nextMediaStarted = true
                                }
                                var success = !!this._currentPlayer;
                                MSEPlatform.Playback.Etw.traceString("-XPlayer::_switchPlayer, switchSucceeded: returning " + success);
                                return success
                            }.bind(this), function _prePlayAsync_switch_player_failed(error) {
                                MSEPlatform.Playback.Etw.traceString("-XPlayer::_prePlayAsync_switch_player_failed");
                                if (error && error.code && error.context)
                                    this._fireNextMediaError(error.code, error.context);
                                else {
                                    var playbackError = MSEPlatform.Playback.makePlaybackError(MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_GENERIC, "_prePlayAsync failed without an error code");
                                    this._fireNextMediaError(playbackError.error, playbackError.context)
                                }
                                return false
                            }.bind(this))
                    }, _destroyCurrentAndPromoteNextPlayer: function _destroyCurrentAndPromoteNextPlayer() {
                        MSEPlatform.Playback.Etw.traceString("+XPlayer::_destroyCurrentAndPromoteNextPlayer");
                        try {
                            if (this._currentPlayer)
                                this._removePlayerSrc(this._currentPlayer, true)
                        }
                        catch(ex) {
                            MSEPlatform.Playback.assert(ex, "Error in media tag removal");
                            MS.Entertainment.Utilities.Telemetry.logErrorInMediaTagRemoval(ex)
                        }
                        this._currentPlayer = this._nextPlayer;
                        this._currentMedia = this._nextMedia;
                        if (this._currentPlayer) {
                            this._setVolumeValueAndStateOnTag(this._currentPlayer);
                            this._playerContainer.appendChild(this._currentPlayer.getElement());
                            this._hookupCurrentMediaEvents()
                        }
                        this._unhookNextMediaEvents();
                        this._nextPlayer = null;
                        this._nextMedia = null;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.playbackErrorDisplayService)) {
                            var displayService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playbackErrorDisplayService);
                            if (displayService)
                                displayService.showDialogForNonCriticalErrors = false
                        }
                        MSEPlatform.Playback.Etw.traceString("-XPlayer::_destroyCurrentAndPromoteNextPlayer")
                    }, _onSourceRequested: function _onSourceRequested(event) {
                        if (this._currentPlayer && this._currentPlayer.msPlayToDisabled)
                            return;
                        try {
                            var sourceRequest = event.sourceRequest;
                            var deferral = sourceRequest.getDeferral();
                            if (this._currentPlayer) {
                                sourceRequest.setSource(this._currentPlayer.msPlayToSource);
                                if (this._nextMedia && MSEPlatform.Playback.shouldDisableDlnaPlayTo(this._nextMedia))
                                    this._fireNextMediaError(MSEPlatform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_SRC_NOT_SUPPORTED, "XPlayer::_onSourceRequested, playTo is disabled for next media")
                            }
                            else
                                sourceRequest.setSource(null);
                            deferral.complete()
                        }
                        catch(ex) {
                            this._firePlaybackError(ex.number, "DLNA SourceRequested")
                        }
                    }, _onSourceSelected: function _onSourceSelected(event) {
                        if (event && event.friendlyName) {
                            var telemetryParameter = [{
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DMRFriendlyName, parameterValue: event.friendlyName
                                    }];
                            MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PlayToSenderAttempted, telemetryParameter);
                            MSEPlatform.Playback.Etw.traceString("Xplayer::_onSourceSelected, PlayTo DMR Selected: " + event.friendlyName);
                            MS.Entertainment.UI.Debug.writeLine("DLNA SourceSelected: DMR = " + event.friendlyName);
                            this.isRemoteSessionRunning = true;
                            this.dmrName = event.friendlyName
                        }
                    }, _setupDlnaPlayToMgr: function _setupDlnaPlayToMgr() {
                        this.playToSenderConnectionState = Windows.Media.PlayTo.PlayToConnectionState.disconnected;
                        try {
                            this._dlnaPlayToMgr = Windows.Media.PlayTo.PlayToManager.getForCurrentView();
                            if (this._dlnaPlayToMgr) {
                                this._dlnaPlayToMgr.defaultSourceSelection = false;
                                this._dlnaPlayToMgr.addEventListener("sourcerequested", this._onSourceRequested.bind(this), false);
                                this._dlnaPlayToMgr.addEventListener("sourceselected", this._onSourceSelected.bind(this), false)
                            }
                        }
                        catch(ex) {
                            this._dlnaPlayToMgr = null
                        }
                    }, _cleanupDlnaPlayToMgr: function _cleanupDlnaPlayToMgr() {
                        if (this._dlnaPlayToMgr) {
                            this._dlnaPlayToMgr.removeEventListener("sourcerequested", this._onSourceRequested);
                            this._dlnaPlayToMgr.removeEventListener("sourceselected", this._onSourceSelected);
                            this._dlnaPlayToMgr = null
                        }
                    }, _createFastStartAudioTag: function _createFastStartAudioTag() {
                        MSEPlatform.Playback.Etw.traceString("+XPlayer:_createFastStartAudioTag");
                        if (MS.Entertainment.Utilities.isMusicApp1) {
                            var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            if (!signIn.isSignedIn) {
                                MSEPlatform.Playback.Etw.traceString("-XPlayer:_createFastStartAudioTag.  signIn.isSignedIn = false");
                                return
                            }
                            MSEPlatform.Playback.AudioPlayer.createFastStartTag()
                        }
                    }, _ensurePipeline: function _ensurePipeline() {
                        if (this._currentPlayer === undefined || this._currentPlayer === null || this._currentPlayer.isDisposed) {
                            MSEPlatform.Playback.Etw.traceString("XPlayer::_ensurePipeline() error! AV pipeline not set yet.");
                            throw"XPlayer::_ensurePipeline() error! AV pipeline not set yet.";
                        }
                    }, _onAppResume: function _onAppResume() {
                        if (MSEPlatform.Playback.AudioPlayer.hasValidFastStartTag)
                            try {
                                MSEPlatform.Playback.Etw.traceString("XPlayer::_onAppResume: Destroying FastStart tag on resume. Windows invalidates inactive DRM pipelines on suspend");
                                MSEPlatform.Playback.AudioPlayer.disposeFastStartTag()
                            }
                            catch(e) {
                                MSEPlatform.Playback.Etw.traceString("XPlayer::_onAppResume: error! AV pipeline not set yet.");
                                MSEPlatform.Playback.assert(false, "failed to destroy fast start tag on resume. exception:" + e)
                            }
                    }, _onAppSuspending: function _onAppSuspending() {
                        try {
                            MSEPlatform.Playback.Etw.traceString("XPlayer::_onAppSuspending: close out tracking items");
                            for (var trackingId in this._trackingIdUsage) {
                                var media = this._mediaByTrackingId(trackingId);
                                this._closeTrackingTransaction(media);
                                delete this._trackingIdUsage[trackingId];
                                this._globalDeleteTrackingIdState[trackingId]
                            }
                        }
                        catch(e) {
                            MSEPlatform.Playback.Etw.traceString("XPlayer::_onAppSuspending: failed to close out tracking items on suspend.  exception: " + e);
                            MSEPlatform.Playback.assert(false, "XPlayer::_onAppSuspending: failed to close out tracking items on suspend. exception: " + e)
                        }
                    }, _onAppVisibleChanged: function _onAppVisibleChanged() {
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.uiState)) {
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            if (uiStateService.isAppVisible)
                                this._createFastStartAudioTag();
                            else if (MSEPlatform.Playback.AudioPlayer.hasValidFastStartTag)
                                MSEPlatform.Playback.AudioPlayer.disposeFastStartTag()
                        }
                    }, _onGlobalTrackingIdState: function _onGlobalTrackingIdState(id, state) {
                        if (id) {
                            var trackingIdState = MSEPlatform.SessionManager.trackingIdState;
                            MSEPlatform.Playback.Etw.traceString("Was: " + trackingIdState[id] + " tracking id: " + id);
                            trackingIdState[id] = state;
                            MSEPlatform.Playback.Etw.traceString("Now:" + state + ": " + id)
                        }
                    }, _globalDeleteTrackingIdState: function _globalDeleteTrackingIdState(id) {
                        if (id) {
                            var trackingIdState = MSEPlatform.SessionManager.trackingIdState;
                            MSEPlatform.Playback.Etw.traceString("Deleted " + trackingIdState[id] + " tracking id: " + id);
                            delete trackingIdState[id]
                        }
                    }, _mediaByTrackingId: function _mediaByTrackingId(trackingId) {
                        if (this._trackingIdUsage[trackingId] & MSEPlatform.Playback.XPlayer._mediaBitmask.current)
                            return this._currentMedia;
                        if (this._trackingIdUsage[trackingId] & MSEPlatform.Playback.XPlayer._mediaBitmask.next)
                            return this._nextMedia;
                        return null
                    }, _releaseTrackingRef: function _releaseTrackingRef(media, mediaBitmask) {
                        if (media && media.hasOwnProperty("trackingId") && !!media.trackingId) {
                            if (!this._trackingIdUsage[media.trackingId])
                                this._trackingIdUsage[media.trackingId] = 0;
                            this._trackingIdUsage[media.trackingId] &= ~mediaBitmask
                        }
                    }, _addTrackingRef: function _addTrackingRef(media, mediaBitmask) {
                        if (media && media.hasOwnProperty("trackingId") && !!media.trackingId) {
                            if (!this._trackingIdUsage[media.trackingId])
                                this._trackingIdUsage[media.trackingId] = 0;
                            this._trackingIdUsage[media.trackingId] |= mediaBitmask
                        }
                    }, _checkTracking: function _checkTracking(media, mediaBitmask) {
                        if (media && media.hasOwnProperty("trackingId") && !!media.trackingId && this._trackingIdUsage[media.trackingId] === 0) {
                            if (mediaBitmask === MSEPlatform.Playback.XPlayer._mediaBitmask.current && media._lastStateChangeEvent && media._lastStateChangeEvent.type != "ended")
                                media.maxPosition = this._currentPlayer ? this._currentPlayer.currentTime : 0;
                            this._onTrackedMediaOutOfScope(media);
                            delete this._trackingIdUsage[media.trackingId];
                            this._globalDeleteTrackingIdState(media.trackingId)
                        }
                    }, _onTrackedMediaOutOfScope: function _onTrackedMediaOutOfScope(media) {
                        this._closeTrackingTransaction(media)
                    }, _closeTrackingTransaction: function _closeTrackingTransaction(media) {
                        if (!media)
                            return;
                        Microsoft.Entertainment.Marketplace.Marketplace.sendPlaybackDurationAsync(media.trackingId, media.maxPosition);
                        this._onGlobalTrackingIdState(media.trackingId, "Reported");
                        MSEPlatform.Playback.Etw.traceString("XPlayer::_closeTrackingTransaction(" + media.trackingId + ", " + media.maxPosition + ")")
                    }, _overwriteMediaRefCount: function _overwriteMediaRefCount(destinationMedia, sourceMedia, mediaBitmask) {
                        this._releaseTrackingRef(destinationMedia, mediaBitmask);
                        this._addTrackingRef(sourceMedia, mediaBitmask);
                        this._checkTracking(destinationMedia, mediaBitmask)
                    }, _overwriteCurrentMedia: function _overwriteCurrentMedia(value) {
                        if (value)
                            this._onGlobalTrackingIdState(value.trackingId, "Current");
                        this._overwriteMediaRefCount(this._currentMediaValueHolder, value, MSEPlatform.Playback.XPlayer._mediaBitmask.current);
                        this._currentMediaValueHolder = value
                    }, _overwriteNextMedia: function _overwriteNextMedia(value) {
                        if (value)
                            this._onGlobalTrackingIdState(value.trackingId, "Next");
                        this._overwriteMediaRefCount(this._nextMediaValueHolder, value, MSEPlatform.Playback.XPlayer._mediaBitmask.next);
                        this._nextMediaValueHolder = value
                    }, _currentMedia: {
                        get: function internal_currentMedia_get() {
                            return this._currentMediaValueHolder
                        }, set: function internal_currentMedia_set(value) {
                                this._overwriteCurrentMedia(value)
                            }
                    }, _nextMedia: {
                        get: function internal_nextMedia_get() {
                            return this._nextMediaValueHolder
                        }, set: function internal_nextMedia_set(value) {
                                this._overwriteNextMedia(value)
                            }
                    }, _onVolumeValueStateChange: function VolumeValueStateChange(arg) {
                        if (this._currentPlayer)
                            this._setVolumeValueAndStateOnTag(this._currentPlayer)
                    }, _setVolumeValueAndStateOnTag: function setVolumeValueAndStateOnTag(tag) {
                        try {
                            if (tag && MS.Entertainment.Utilities.isMusicApp1 && this._volumeController) {
                                tag.volume = applyVolumeCurve(this._volumeController.volume);
                                tag.muted = this._volumeController.mute
                            }
                            else if (tag && MS.Entertainment.Utilities.isMusicApp2)
                                tag.volume = (tag.playerType === "AUDIO") ? (Microsoft.Entertainment.Configuration.ConfigurationManager().playback.music2VolumeValue) / 100 : 1.0
                        }
                        catch(e) {
                            MSEPlatform.Playback.Etw.traceString("XPlayer::SetVolumeValueAndStateOnTag threw an error" + e.toString())
                        }
                        function applyVolumeCurve(value)
                        {
                            var curvedVolume = 0;
                            if (value)
                                curvedVolume = Math.pow(value, 7.0 / 4.0);
                            return curvedVolume
                        }
                    }, _currentPlayer: {
                        get: function _currentPlayer_get() {
                            return this._currentMediaPlayer
                        }, set: function _currentPlayer_set(mediaPlayer) {
                                if (this._currentMediaPlayer !== mediaPlayer) {
                                    this._currentMediaPlayer = mediaPlayer;
                                    if (this._currentMediaPlayer)
                                        this.mediaElement = this._currentMediaPlayer.getElement();
                                    else
                                        this.mediaElement = null;
                                    if (!!mediaPlayer)
                                        this._currentMediaPlayer.firePlaybackError = this._firePlaybackError.bind(this)
                                }
                            }
                    }, _nextPlayer: {
                        get: function _nextPlayer_get() {
                            return this._nextMediaPlayer
                        }, set: function _nextPlayer_set(mediaPlayer) {
                                if (this._nextMediaPlayer !== mediaPlayer) {
                                    this._nextMediaPlayer = mediaPlayer;
                                    if (!!mediaPlayer)
                                        this._nextMediaPlayer.firePlaybackError = this._fireNextMediaError.bind(this)
                                }
                            }
                    }, _playerContainer: null, _currentMediaPlayer: null, _nextMediaPlayer: null, _currentMediaValueHolder: null, _currentMediaEventsCallback: null, _nextMediaValueHolder: null, _dlnaPlayToMgr: null, _trackingIdUsage: {}, _volumeController: null, _volumeControllerBindings: null, _lastTimeSeparationId: null, _usingFastStartTag: false, _nextMediaLoaded: MS.Entertainment.UI.Framework.observableProperty("_nextMediaLoaded", false), _nextMediaStarted: MS.Entertainment.UI.Framework.observableProperty("_nextMediaStarted", false), _nextMediaError: MS.Entertainment.UI.Framework.observableProperty("_nextMediaError", false), dmrName: MS.Entertainment.UI.Framework.observableProperty("dmrName", String.empty), isRemoteSessionRunning: MS.Entertainment.UI.Framework.observableProperty("isRemoteSessionRunning", false), playToSenderConnectionState: MS.Entertainment.UI.Framework.observableProperty("playToSenderConnectionState", Windows.Media.PlayTo.PlayToConnectionState.disconnected), mediaElement: MS.Entertainment.UI.Framework.observableProperty("mediaElement", null)
            }, {
                createInstance: function XPlayer_createInstance(playerContainer) {
                    var isWWA = true;
                    var player = null;
                    if (isWWA)
                        player = new MSEPlatform.Playback.XPlayer(playerContainer);
                    return player
                }, createMediaTag: function createMediaTag(type) {
                        return MSEPlatform.Playback.MediaPlayer.createMediaTag(type)
                    }, audioTagForFileActivation: {
                        get: function audioTagForFileActivation_get() {
                            return MSEPlatform.Playback.AudioPlayer.audioTagForFileActivation
                        }, set: function audioTagForFileActivation_set(tag) {
                                MSEPlatform.Playback.AudioPlayer.audioTagForFileActivation = tag
                            }
                    }, _mediaBitmask: {
                        current: 1, next: 2
                    }
            })
    })
})()
})();
/* >>>>>>/components/playback/playbackhelpers.js:7746 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.PlaybackHelpers");
    WinJS.Namespace.define("MS.Entertainment.Platform", {PlayAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function playAction() {
            this.base()
        }, {
            _executing: false, executed: function executed(param) {
                    if (MS.Entertainment.Utilities.isApp2 && this._executing)
                        return;
                    this._executing = true;
                    this.requeryCanExecute();
                    var mediaQueued = WinJS.Promise.as(this.executedPlay(param));
                    mediaQueued.done(function waitForPlayback(wasMediaQueued) {
                        if (wasMediaQueued)
                            MS.Entertainment.Platform.PlaybackHelpers.waitForTransportState(MS.Entertainment.Platform.Playback.TransportState.playing).then(null, function ignoreError(){}).done(function enableAction() {
                                this._executing = false;
                                this.requeryCanExecute()
                            }.bind(this));
                        else {
                            this._executing = false;
                            this.requeryCanExecute()
                        }
                    }.bind(this), function ignoreError(){});
                    return mediaQueued
                }, executedPlay: function executedPlay(param) {
                    return false
                }, canExecute: function canExecute(param) {
                    return this.canExecutePlay(param) && (MS.Entertainment.Utilities.isApp2 || !this._executing)
                }, canExecutePlay: function canExecutePlay(param) {
                    return false
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Platform.PlaybackHelpers", {
        _getFeatureEnablement: (function _getFeatureEnablement_closure() {
            var featureEnablement = null;
            return function _getFeatureEnablement_getter() {
                    if (!featureEnablement)
                        featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    return featureEnablement
                }
        })(), waitForTransportState: function waitForTransportState(transportStates) {
                var bindings;
                var completed;
                var failed;
                var promise;
                var playbackSession = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).nowPlayingSession;
                if (transportStates && !Array.isArray(transportStates))
                    transportStates = [transportStates];
                function onPlaybackChanged() {
                    if (!bindings)
                        return;
                    if (playbackSession.playerState === MS.Entertainment.Platform.Playback.PlayerState.error)
                        failed();
                    else if (transportStates.indexOf(playbackSession.currentTransportState) >= 0)
                        completed()
                }
                if (transportStates)
                    promise = new WinJS.Promise(function initializePromise(c, f) {
                        completed = c;
                        failed = f;
                        bindings = WinJS.Binding.bind(playbackSession, {
                            currentTransportState: onPlaybackChanged, playerState: onPlaybackChanged
                        })
                    }, function canceled(){});
                else
                    promise = WinJS.Promise.wrap();
                promise.then(null, function ignoreError(){}).done(function clearBindings() {
                    if (bindings) {
                        bindings.cancel();
                        bindings = null
                    }
                });
                return promise
            }, getMediaByServiceId: function getMediaByServiceId(serviceId, idType) {
                return MS.Entertainment.Utilities.getMediaByServiceId(serviceId, idType)
            }, getGameMediaByTitleId: function getGameMediaByTitleId(titleId) {
                titleId = parseInt(titleId);
                if (!titleId)
                    return WinJS.Promise.wrapError(null);
                var edsMediaItem = MS.Entertainment.Data.augment({TitleId: titleId}, MS.Entertainment.Data.Augmenter.Marketplace.XboxGame);
                MS.Entertainment.ViewModels.MediaItemModel.augment(edsMediaItem);
                if (edsMediaItem.hydrate)
                    return edsMediaItem.hydrate().then(function hydrateSuccess() {
                            return edsMediaItem
                        }, function hydrateFailed() {
                            return edsMediaItem
                        });
                else
                    return WinJS.Promise.wrap(edsMediaItem)
            }, getMusicMediaByServiceId: function _getArtistMediaByServiceId(serviceId, serviceIdType, mediaType) {
                var featureEnablement = this._getFeatureEnablement();
                return new WinJS.Promise(function(c, e, p) {
                        if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace) && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus).isEnabled(MS.Entertainment.UI.NetworkStatusService.NetworkedFeature.musicMarketplace)) {
                            var useCanonicalId = true;
                            if (serviceIdType) {
                                var idType = serviceIdType.toLocaleLowerCase();
                                if (idType === MS.Entertainment.Data.Query.edsIdType.canonical.toLocaleLowerCase())
                                    useCanonicalId = true;
                                else if (idType.toLocaleLowerCase() === MS.Entertainment.Data.Query.edsIdType.zuneCatalog.toLocaleLowerCase())
                                    useCanonicalId = false;
                                else
                                    MS.Entertainment.UI.Components.Shell.fail("Unknown media ID type.")
                            }
                            var item = useCanonicalId ? {ID: serviceId} : {ZuneId: serviceId};
                            item.location = MS.Entertainment.Data.ItemLocation.marketplace;
                            switch (mediaType.toLocaleLowerCase()) {
                                case MS.Entertainment.Data.Query.edsMediaType.musicArtist.toLocaleLowerCase():
                                    var artist = MS.Entertainment.Data.augment(item, MS.Entertainment.Data.Augmenter.Marketplace.EDSArtist);
                                    if (artist) {
                                        MS.Entertainment.ViewModels.MediaItemModel.augment(artist);
                                        artist.hydrate().done(function completeHydrate(media) {
                                            c(media)
                                        }, function hydrateError(error) {
                                            e(error)
                                        })
                                    }
                                    else {
                                        error = new Error("Failed to augment artist");
                                        e(error)
                                    }
                                    break;
                                case MS.Entertainment.Data.Query.edsMediaType.album.toLocaleLowerCase():
                                    var album = MS.Entertainment.Data.augment(item, MS.Entertainment.Data.Augmenter.Marketplace.EDSAlbum);
                                    if (album) {
                                        MS.Entertainment.ViewModels.MediaItemModel.augment(album);
                                        album.hydrate().done(function completeHydrate(media) {
                                            c(media)
                                        }, function hydrateError(error) {
                                            e(error)
                                        })
                                    }
                                    else {
                                        error = new Error("Failed to augment album");
                                        e(error)
                                    }
                                    break;
                                case MS.Entertainment.Data.Query.edsMediaType.track.toLocaleLowerCase():
                                    var track = MS.Entertainment.Data.augment(item, MS.Entertainment.Data.Augmenter.Marketplace.EDSTrack);
                                    if (track) {
                                        MS.Entertainment.ViewModels.MediaItemModel.augment(track);
                                        track.hydrate({forceUpdate: true}).done(function completeHydrate(media) {
                                            c(media)
                                        }, function hydrateError(error) {
                                            e(error)
                                        })
                                    }
                                    else {
                                        error = new Error("Failed to augment track");
                                        e(error)
                                    }
                                    break;
                                case MS.Entertainment.Data.Query.edsMediaType.musicPlaylist.toLocaleLowerCase():
                                    var error;
                                    if (serviceId) {
                                        error = new Error("Marketplace playlists not implemented");
                                        e(error)
                                    }
                                    else {
                                        error = new Error("No service id given");
                                        e(error)
                                    }
                                    break;
                                case MS.Entertainment.Data.Query.edsMediaType.musicVideo.toLocaleLowerCase():
                                    var musicVideo = MS.Entertainment.Data.augment(item, MS.Entertainment.Data.Augmenter.Marketplace.EDSMusicVideo);
                                    if (musicVideo) {
                                        MS.Entertainment.ViewModels.MediaItemModel.augment(musicVideo);
                                        musicVideo.hydrate({forceUpdate: true}).done(function completeHydrate(media) {
                                            c(media)
                                        }, function hydrateError(error) {
                                            e(error)
                                        })
                                    }
                                    else {
                                        error = new Error("Failed to augment musicVideo");
                                        e(error)
                                    }
                                    break;
                                default:
                                    MS.Entertainment.UI.Components.Shell.fail("Unknown desired media type.");
                                    break
                            }
                        }
                        else
                            e(MS.Entertainment.Platform.Playback.Error.NS_E_WMPIM_USEROFFLINE.code)
                    })
            }, isXboxConsoleAvailableInRegion: function _isXboxConsoleAvailableInRegion() {
                var result = true;
                result = this._getFeatureEnablement().isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.xbox360ConsoleRegions);
                return result
            }, isPlayToXboxFeatureEnabled: function _isPlayToXboxFeatureEnabled(mediaItem) {
                var result = this.isXboxConsoleAvailableInRegion();
                if (result)
                    if (MS.Entertainment.Utilities.isVideoApp) {
                        var featureEnablement = this._getFeatureEnablement();
                        if (mediaItem)
                            if (this.isTVEpisode(mediaItem))
                                result = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace);
                            else if (this.isMusicVideo(mediaItem))
                                result = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicVideosMarketplace);
                            else
                                result = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace);
                        else
                            result = (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace) || featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace) || featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicVideosMarketplace))
                    }
                return result
            }, isClosedCaptionFeatureEnabled: function _isClosedCaptionFeatureEnabled() {
                return this._getFeatureEnablement().isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.closedCaptionsEnabled) && MS.Entertainment.Utilities.isVideoApp
            }, playMedia: function playMedia(mediaItem, showDetails, startPositionMsec) {
                this.playMedia2(mediaItem, {
                    sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, startPositionMsec: startPositionMsec, showImmersive: true, immersiveOptions: {
                            sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, startFullScreen: !showDetails
                        }
                })
            }, playMediaOnXbox: function playMediaOnXbox(mediaItem, titleId, deepLinkInfo, startPositionMsec) {
                this.playMedia2(mediaItem, {
                    sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.remoteLRC, titleId: titleId, autoPlay: true, deepLinkInfo: deepLinkInfo, startPositionMsec: startPositionMsec, showImmersive: true, showSmartGlassActivity: true, showAppBar: false, appBarHideTimeoutMS: MS.Entertainment.UI.Controls.BottomAppBar.defaultCompanionHideTimeoutMS, immersiveOptions: {
                            sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.remoteLRC, startFullScreen: false
                        }
                })
            }, showImmersiveDetails: function showImmersiveDetails(mediaItem, showDetails, autoPlay, hub, options, sessionId, completeCallBack, titleId, deepLink, startPositionMsec) {
                var immersiveOptions = {
                        startFullScreen: !showDetails, hub: hub, panelOptions: options, sessionId: sessionId
                    };
                var playPreviewOnly = (mediaItem && mediaItem.playPreviewOnly) ? mediaItem.playPreviewOnly : false;
                var playOptions = {
                        autoPlay: autoPlay, showImmersive: true, immersiveOptions: immersiveOptions, sessionId: sessionId, titleId: titleId, deepLink: deepLink, playPreviewOnly: playPreviewOnly, startPositionMsec: startPositionMsec, playbackSource: MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.details
                    };
                if (autoPlay)
                    this.playMedia2(mediaItem, playOptions);
                else
                    this.showImmersive(mediaItem, immersiveOptions)
            }, addToNowPlaying: function addToNowPlaying(mediaItem, collectionFilter, preventPlay) {
                this.playMedia2(mediaItem, {
                    autoPlay: true, showAppBar: true, queueMedia: true, showImmersive: false, preservePlayContext: true, collectionFilter: collectionFilter, preventPlay: preventPlay
                })
            }, waitForTransportStateOrTimeout: function waitForTransportStateOrTimeout(tsToWaitFor, tmoMsec) {
                MS.Entertainment.Platform.Playback.Etw.traceString("+PlaybackHelpers::waitForTransportStateOrTimeout(" + tsToWaitFor + ", " + tmoMsec + ")");
                var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                var playbackSession = sessionMgr.primarySession;
                var uberPromise = new WinJS.Promise(function _uberPromise(c, e, p) {
                        var tmoPromise = null;
                        var tsChanged = function _tsChanged(transportState) {
                                if (transportState === tsToWaitFor) {
                                    MS.Entertainment.Platform.Playback.Etw.traceString("PlaybackHelpers::waitForTransportStateOrTimeout, tsChanged : " + transportState);
                                    playbackSession.unbind("currentTransportState", tsChanged);
                                    if (tmoPromise)
                                        tmoPromise.cancel();
                                    c()
                                }
                                else if (playbackSession.playerState === MS.Entertainment.Platform.Playback.PlayerState.error && playbackSession.errorDescriptor) {
                                    MS.Entertainment.Platform.Playback.Etw.traceString("PlaybackHelpers::waitForTransportStateOrTimeout, playerState error");
                                    playbackSession.unbind("currentTransportState", tsChanged);
                                    if (tmoPromise)
                                        tmoPromise.cancel();
                                    c()
                                }
                            };
                        var tmoExpired = function _tmoExpired() {
                                MS.Entertainment.Platform.Playback.Etw.traceString("PlaybackHelpers::waitForTransportStateOrTimeout, timed out");
                                playbackSession.unbind("currentTransportState", tsChanged);
                                c()
                            };
                        tmoPromise = WinJS.Promise.timeout(tmoMsec).then(tmoExpired);
                        playbackSession.bind("currentTransportState", tsChanged)
                    });
                MS.Entertainment.Platform.Playback.Etw.traceString("-PlaybackHelpers::waitForTransportStateOrTimeout");
                return uberPromise
            }, playMedia2: function playMedia2(mediaItem, options) {
                var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                sessionMgr.nowPlayingSession.isPlayToReceiverSessionRunning = !!options.isPlayToReceiverSessionRunning;
                var playOptions = options || {};
                if (!mediaItem.activationFilePath) {
                    MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayProtectedInApp();
                    MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayNonProtectedInApp()
                }
                if (playOptions.playContext) {
                    MS.Entertainment.Platform.PlaybackHelpers.assert(!playOptions.preservePlayContext, "preservePlayContext and playContext both supplied; the session playContext will not be changed.");
                    MS.Entertainment.Platform.PlaybackHelpers.assert(!playOptions.playContext.isSmartDJ || playOptions.playContext.artistSeed, "isSmartDJ parameter is set in the playback context, but no SmartDJ seed was specified.")
                }
                playOptions.autoPlay = (playOptions.autoPlay !== undefined) ? playOptions.autoPlay : true;
                playOptions.showImmersive = (playOptions.showImmersive !== undefined) ? playOptions.showImmersive : false;
                MS.Entertainment.Platform.PlaybackHelpers.playActionInitiated = true;
                MS.Entertainment.Platform.PlaybackHelpers.lastPlaybackSource = playOptions.playbackSource || String.empty;
                MS.Entertainment.Platform.Playback.Etw.traceString("+PlaybackHelpers::playMedia2" + ", autoPlay=" + playOptions.autoPlay + ", showImmersive=" + playOptions.showImmersive + ", showAppbar=" + playOptions.showAppBar + ", preventNavigateToDefault=" + playOptions.preventNavigateToDefault + ", callback=" + (playOptions.completeCallBack ? true : false));
                var immersiveOptions = playOptions.immersiveOptions ? playOptions.immersiveOptions : {};
                if (!playOptions.sessionId)
                    playOptions.sessionId = sessionMgr.primarySession.sessionId;
                if (!playOptions.setOnly && !options.queueMedia && !playOptions.doNotNavigate && this.forceFullScreenNowPlaying) {
                    playOptions.showImmersive = true;
                    playOptions.showAppBar = false
                }
                if (mediaItem && mediaItem.playPreviewOnly)
                    playOptions.sessionId = MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying;
                immersiveOptions.sessionId = playOptions.sessionId;
                var validateExplicitPrivilege = true;
                var doPlay = function doPlay(userCancelled) {
                        if (userCancelled)
                            return;
                        var navigationService;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                            navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        MS.Entertainment.Platform.Playback.Etw.traceString("+PlaybackHelpers::doPlay");
                        this._validateMediaItem(mediaItem, validateExplicitPrivilege).then(function validateMediaItem_completed() {
                            MS.Entertainment.Platform.PlaybackHelpers._play(mediaItem, playOptions);
                            if (playOptions.navigateToDetailsPage)
                                MS.Entertainment.Platform.PlaybackHelpers.navigateToDetailsPage(playOptions.album ? playOptions.album : mediaItem);
                            if (playOptions.showImmersive)
                                MS.Entertainment.Platform.PlaybackHelpers.waitForTransportStateOrTimeout(MS.Entertainment.Platform.Playback.TransportState.starting, 2500).then(function _delayedShowImmersive() {
                                    var playbackSession = sessionMgr.nowPlayingSession;
                                    if (playbackSession.playerState !== MS.Entertainment.Platform.Playback.PlayerState.error)
                                        MS.Entertainment.Platform.PlaybackHelpers.showImmersive(mediaItem, immersiveOptions);
                                    else if (navigationService && !navigationService.currentPage)
                                        navigationService.navigateToDefaultPage()
                                });
                            else if (!playOptions.preventNavigateToDefault)
                                if (navigationService && !navigationService.currentPage)
                                    navigationService.navigateToDefaultPage();
                            if (!MS.Entertainment.Utilities.isApp2 && playOptions.showAppBar && !window.onNewMusicPage) {
                                var playbackSession = sessionMgr.nowPlayingSession;
                                var showPromise = null;
                                var appBarShown = false;
                                var showPromiseTimeoutMS = 1200;
                                var onPlaybackStarted = function showAppBarOnPlaybackStart(currentPlaybackState) {
                                        if (currentPlaybackState === MS.Entertainment.Platform.Playback.TransportState.starting || currentPlaybackState === MS.Entertainment.Platform.Playback.TransportState.playing) {
                                            if (showPromise)
                                                showPromise.cancel();
                                            showAppBar()
                                        }
                                        else if (playbackSession.errorDescriptor)
                                            playbackSession.unbind("currentTransportState", onPlaybackStarted)
                                    };
                                var showAppBar = function showAppBar() {
                                        if (appBarShown)
                                            return;
                                        appBarShown = true;
                                        playbackSession.unbind("currentTransportState", onPlaybackStarted);
                                        showPromise = null;
                                        var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                                        if (appBarControl)
                                            appBarControl.show((isNaN(playOptions.appBarHideTimeoutMS) ? MS.Entertainment.UI.Controls.BottomAppBar.defaultHideTimeoutMS : playOptions.appBarHideTimeoutMS))
                                    };
                                showPromise = WinJS.Promise.timeout(showPromiseTimeoutMS).done(showAppBar);
                                playbackSession.bind("currentTransportState", onPlaybackStarted)
                            }
                            if (playOptions.completeCallBack)
                                playOptions.completeCallBack();
                            {}
                        }.bind(this));
                        MS.Entertainment.Platform.Playback.Etw.traceString("-PlaybackHelpers::doPlay")
                    }.bind(this);
                doPlay();
                MS.Entertainment.Platform.Playback.Etw.traceString("-PlaybackHelpers::playMedia2")
            }, navigateToDetailsPage: function navigateToDetailsPage(mediaItem) {
                if (MS.Entertainment.Utilities.isApp1 && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation)) {
                    var actionId;
                    var actionParameter = {
                            data: mediaItem, isTrack: false
                        };
                    switch (mediaItem.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            actionId = MS.Entertainment.UI.Actions.ActionIdentifiers.artistDetailsNavigate;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            actionId = MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            actionId = MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate;
                            actionParameter.isTrack = true;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            actionId = MS.Entertainment.UI.Actions.ActionIdentifiers.playlistDetailsNavigate;
                            break;
                        default:
                            MS.Entertainment.UI.fail("Not a supported media type. Type: " + mediaItem.mediaType)
                    }
                    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                    var actionToExecute = actionService.getAction(actionId);
                    if (actionToExecute) {
                        actionToExecute.parameter = actionParameter;
                        actionToExecute.execute()
                    }
                }
            }, showImmersive: function showImmersive(mediaItem, immersiveOptions) {
                var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                immersiveOptions = immersiveOptions ? immersiveOptions : {};
                immersiveOptions.startFullScreen = (immersiveOptions.startFullScreen !== undefined) ? immersiveOptions.startFullScreen : false;
                if (!immersiveOptions.startFullScreen)
                    if (MS.Entertainment.Platform.PlaybackHelpers.isMovie(mediaItem)) {
                        mediaItem.hydrate();
                        MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.MovieDetailsRequest)
                    }
                    else if (MS.Entertainment.Platform.PlaybackHelpers.isTVEpisode(mediaItem) || MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem) || MS.Entertainment.Platform.PlaybackHelpers.isTVSeries(mediaItem)) {
                        mediaItem.hydrate();
                        MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.TVDetailsRequest)
                    }
                if (!MS.Entertainment.Data.List.isListOrArray(mediaItem) && !MS.Entertainment.Data.MainQuery.isQuery(mediaItem))
                    immersiveOptions.mediaItem = mediaItem;
                if (immersiveOptions.sessionId) {
                    if (!immersiveOptions.mediaItem) {
                        var playbackSession = sessionMgr.getSession(immersiveOptions.sessionId);
                        immersiveOptions.mediaItem = playbackSession.currentMedia
                    }
                    if (this.useFullScreenNowPlaying || this.forceFullScreenNowPlaying) {
                        var fullScreenNowPlayingOptions = null;
                        if (MS.Entertainment.Utilities.isVideoApp)
                            fullScreenNowPlayingOptions = {
                                mediaItem: immersiveOptions.mediaItem, showNotifications: false
                            };
                        immersiveOptions.startFullScreen = true;
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.fullScreenNowPlaying, null, null, fullScreenNowPlayingOptions);
                        if (immersiveOptions.completeCallback)
                            immersiveOptions.completeCallback(true);
                        {};
                        return
                    }
                }
                if (immersiveOptions.mediaItem) {
                    var forcePageChange = true;
                    var currentPageIsSameImmersive = false;
                    if (immersiveOptions.overridePageChange !== undefined)
                        forcePageChange = immersiveOptions.overridePageChange;
                    else {
                        var currentLocation = MS.Entertainment.Utilities.getCurrentUserLocation();
                        if (WinJS.Utilities.getMember("MS.Entertainment.UI.Monikers") && currentLocation === MS.Entertainment.UI.Monikers.immersiveDetails) {
                            var currentPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage;
                            if (currentPage.options.mediaItem.isEqual && immersiveOptions.mediaItem.isChildOf && immersiveOptions.mediaItem.sharesParentWith) {
                                currentPageIsSameImmersive = currentPage.options.mediaItem.isEqual(immersiveOptions.mediaItem) || immersiveOptions.mediaItem.isChildOf(currentPage.options.mediaItem) || immersiveOptions.mediaItem.sharesParentWith(currentPage.options.mediaItem);
                                forcePageChange = !currentPageIsSameImmersive
                            }
                        }
                    }
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    if (MS.Entertainment.Utilities.isMusicApp && featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace) && immersiveOptions.sessionId)
                        immersiveOptions.hideBackButtonOnNavigate = true;
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.immersiveDetails, null, null, immersiveOptions, forcePageChange);
                    if (currentPageIsSameImmersive && immersiveOptions.completeCallback)
                        immersiveOptions.completeCallback(false)
                }
                else if (immersiveOptions.forceNavigate)
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.immersiveDetails, null, null, immersiveOptions, false);
                else {
                    var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                    if (!navigationService.currentPage)
                        navigationService.navigateToDefaultPage();
                    if (immersiveOptions.completeCallback)
                        immersiveOptions.completeCallback(false);
                    {}
                }
            }, playToXbox: function playToXbox(mediaItem, provider, startPositionMsec) {
                if (!mediaItem)
                    return;
                var mediaItemModel = mediaItem;
                var _getInfoAndLaunchCompanion = function _getInfoAndLaunchCompanion() {
                        var titleId = provider ? provider.partnerApplicationLaunchInfoList[0].TitleId : MS.Entertainment.Platform.LivingRoomCompanion.WellKnownTitleId.ze;
                        var deepLinkInfo = provider ? provider.partnerApplicationLaunchInfoList[0].deepLinkInfo : null;
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        var session = sessionMgr.primarySession;
                        if (mediaItemModel.mediaType === Microsoft.Entertainment.Queries.ObjectType.game)
                            titleId = mediaItemModel.titleId;
                        var launchInfo = "xboxsmartglass://launchTitle/?";
                        launchInfo += "titleId=" + titleId + "&mediaType=" + mediaItemModel.mediaType;
                        if (mediaItemModel.hasZuneId)
                            launchInfo += "&serviceId=" + mediaItemModel.zuneId;
                        else if (mediaItemModel.hasServiceId)
                            launchInfo += "&serviceId=" + mediaItemModel.serviceId;
                        if (deepLinkInfo)
                            launchInfo += "&deepLinkInfo=" + encodeURIComponent(deepLinkInfo);
                        if (startPositionMsec)
                            launchInfo += "&startPositionMsec=" + startPositionMsec;
                        launchInfo += "&firstAction=playnow";
                        var appAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.launchApp);
                        appAction.automationId = MS.Entertainment.UI.AutomationIds.launchAppPlayToXbox;
                        appAction.parameter = {
                            uri: launchInfo, appendSource: true, appendGamerTag: true
                        };
                        appAction.execute()
                    }.bind(this);
                if (!mediaItem.hydrated) {
                    var mediaItemModel = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                    if (mediaItemModel.hydrate)
                        mediaItemModel.hydrate().then(function _hydrated() {
                            _getInfoAndLaunchCompanion()
                        })
                }
                else
                    _getInfoAndLaunchCompanion()
            }, playToXboxPauseLocalPlayback: function _playToXboxPauseLocalPlayback(mediaItem, provider, startPositionMsec) {
                var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                if (sessionManager && sessionManager.primarySession.sessionId === MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying)
                    switch (sessionManager.primarySession.targetTransportState) {
                        case MS.Entertainment.Platform.Playback.TransportState.playing:
                        case MS.Entertainment.Platform.Playback.TransportState.starting:
                        case MS.Entertainment.Platform.Playback.TransportState.buffering:
                            sessionManager.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.paused;
                            break
                    }
                this.playToXbox(mediaItem, provider, startPositionMsec)
            }, playFromXbox: function playFromXbox(mediaItem, startPositionMsec) {
                if (!mediaItem)
                    return;
                MS.Entertainment.Platform.PlaybackHelpers.assert(mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video, "playFromXbox: only video can be transfered to X8");
                var mediaItemModel = mediaItem;
                function _getInfoAndLaunchX8() {
                    var launchInfo = "microsoftvideo://play/?id=" + mediaItemModel.serviceId;
                    if (startPositionMsec)
                        launchInfo += "&startPositionMsec=" + startPositionMsec;
                    var appAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.launchApp);
                    appAction.automationId = MS.Entertainment.UI.AutomationIds.launchAppVideoApp;
                    appAction.parameter = {
                        uri: launchInfo, appendSource: true, appendGamerTag: true
                    };
                    appAction.execute()
                }
                if (!mediaItem.hydrated && !mediaItem.hasServiceId) {
                    var mediaItemModel = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                    if (mediaItemModel.hydrate)
                        mediaItemModel.hydrate().then(function _hydrated() {
                            _getInfoAndLaunchX8()
                        })
                }
                else
                    _getInfoAndLaunchX8()
            }, showPlaybackError: function showPlaybackError(error) {
                var title = String.load(String.id.IDS_PLAYBACK_ERROR_MESSAGE_TITLE);
                return MS.Entertainment.UI.Shell.showError(title, error.code)
            }, showItemDetails: function showItemDetails(popOverOptions, immersiveOptions) {
                var checkOffline = false;
                var mediaItem = null;
                var location = null;
                var initialPreferences = null;
                immersiveOptions = immersiveOptions || {};
                var forceDetails = immersiveOptions.forceDetails || false;
                var completeCallback = immersiveOptions.completeCallback || null;
                var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                if (popOverOptions && popOverOptions.dataContext) {
                    mediaItem = popOverOptions.dataContext.data;
                    location = popOverOptions.dataContext.location;
                    initialPreferences = popOverOptions.dataContext.preferences
                }
                MS.Entertainment.Platform.PlaybackHelpers.assert(mediaItem, "popOverOptions.dataContext.data required to show item details");
                if (mediaItem) {
                    if (mediaItem.hasServiceId)
                        MS.Entertainment.Utilities.Telemetry.setCorrelationId(mediaItem.serviceId);
                    if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                        MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem);
                    var showImmersive = false;
                    if (MS.Entertainment.Utilities.isVideoApp) {
                        showImmersive = this.isMovie(mediaItem) || this.isTVSeries(mediaItem) || this.isTVSeason(mediaItem) || (this.isTVEpisode(mediaItem) && forceDetails);
                        checkOffline = true
                    }
                    else if (MS.Entertainment.Utilities.isMusicApp2)
                        if (this.isMusicArtist(mediaItem)) {
                            showImmersive = true;
                            mediaItem.fromCollection = popOverOptions.dataContext.location === MS.Entertainment.Pages.BaseMediaInlineDetails.Location.collection
                        }
                    if (checkOffline && !MS.Entertainment.UI.NetworkStatusService.isOnline() && showImmersive && location === MS.Entertainment.Data.ItemLocation.marketplace) {
                        var errorCode = MS.Entertainment.Platform.Playback.Error.NS_E_WMPIM_USEROFFLINE.code;
                        MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_FAILED_PANEL_HEADER), errorCode)
                    }
                    else if (this.isMovie(mediaItem) && MS.Entertainment.Utilities.isVideoApp2)
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.movieDetailsPage, null, null, {
                            mediaItem: mediaItem, completeCallback: completeCallback || null, initialPreferences: initialPreferences
                        }, true);
                    else if ((this.isTVSeries(mediaItem) || this.isTVSeason(mediaItem) || (this.isTVEpisode(mediaItem) && forceDetails)) && MS.Entertainment.Utilities.isVideoApp2) {
                        var model = new MS.Entertainment.Components.Video.TvDetailsModel;
                        model.start(mediaItem);
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.tvDetailsPage, null, null, {
                            mediaItem: mediaItem, model: model, completeCallback: completeCallback || null
                        }, true)
                    }
                    else if (showImmersive)
                        MS.Entertainment.Platform.PlaybackHelpers.showImmersive(mediaItem, immersiveOptions);
                    else
                        MS.Entertainment.UI.Controls.PopOver.showPopOver(popOverOptions)
                }
            }, shouldDisplayRatingImage: function shouldDisplayRatingImage() {
                var playbackSession = null;
                var displayRatingImage = false;
                var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                if (sessionMgr && sessionMgr.nowPlayingSession && sessionMgr.primarySession)
                    playbackSession = sessionMgr.nowPlayingSession;
                var globalizationManager = new Microsoft.Entertainment.Util.GlobalizationManager;
                var currentRegion = globalizationManager.getRegion().toLowerCase();
                var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                var supportedRegions = config.playback.videoRatingAvailable;
                if ((supportedRegions.toLowerCase().indexOf(currentRegion.toLowerCase()) >= 0) && playbackSession && playbackSession.getProtectionState() !== MS.Entertainment.Platform.Playback.ProtectionState.unprotected)
                    displayRatingImage = true;
                return displayRatingImage
            }, getVideoRatingImageAsync: function getVideoRatingImageAsync() {
                var playbackSession = null;
                var ratingImage = String.empty;
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.sessionManager))
                    playbackSession = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).nowPlayingSession;
                if (playbackSession && playbackSession.currentMedia && playbackSession.currentMedia.hasServiceId && playbackSession.currentMedia.ratingImage) {
                    ratingImage = playbackSession.currentMedia.ratingImage;
                    return WinJS.Promise.wrap(ratingImage)
                }
                else if (playbackSession.currentMedia.activationFilePath && playbackSession.getProtectionState() !== MS.Entertainment.Platform.Playback.ProtectionState.unprotected) {
                    var query = new MS.Entertainment.Data.Query.libraryVideos;
                    query.videoUrl = playbackSession.currentMedia.activationFilePath;
                    return query.execute().then(function getVideoComplete(q) {
                            return WinJS.Utilities.getMember("result.firstItem", q)
                        }, function getVideoError() {
                            return WinJS.Promise.as(ratingImage)
                        })
                }
                else
                    return WinJS.Promise.wrap(ratingImage)
            }, _validateMediaItem: function _validateMediaItem(mediaItem, validateExplicitPrivilege) {
                var validateAccountHasExplicitPrivilege = function validateAccountHasExplicitPrivilege() {
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        if (!validateExplicitPrivilege || signedInUser.hasExplicitPrivilege)
                            return WinJS.Promise.wrap();
                        else
                            return this.showPlaybackError(MS.Entertainment.Platform.Playback.makeParentallyBlockedError()).then(function() {
                                    return WinJS.Promise.wrapError(error)
                                })
                    }.bind(this);
                var validateGameMediaItem = function validateGameMediaItem() {
                        var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        if (signInService.isSignedIn)
                            return validateAccountHasExplicitPrivilege();
                        else
                            return signInService.signIn().then(function signin_completed() {
                                    if (signInService.isSignedIn)
                                        return validateAccountHasExplicitPrivilege();
                                    else
                                        return this.showPlaybackError(MS.Entertainment.Platform.Playback.Error.NS_E_EXPLICIT_CONTENT_SIGNIN_REQUIRED).then(function() {
                                                return WinJS.Promise.wrapError(error)
                                            })
                                }.bind(this))
                    }.bind(this);
                if (mediaItem && mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.game)
                    return validateGameMediaItem();
                else
                    return WinJS.Promise.wrap()
            }, _setProperty: function _setProperty(item, propertyName, propertyValue) {
                if (propertyName in item)
                    item[propertyName] = propertyValue;
                else
                    item.addProperty(propertyName, propertyValue)
            }, _setMediaAvailability: function _setMediaAvailability(mediaItem, mediaAvailabilty) {
                var mediaItems = Array.isArray(mediaItem) ? mediaItem : [mediaItem];
                mediaItems.forEach(function setMediaAvailability(mediaItem) {
                    if (mediaItem.inCollection && mediaItem.fromCollection && (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.person || mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist))
                        if (mediaAvailabilty || mediaItem._mediaAvailability)
                            this._setProperty(mediaItem, "_mediaAvailability", mediaAvailabilty)
                }, this)
            }, _play: function _play(mediaItem, options) {
                MS.Entertainment.UI.Controls.assert(mediaItem, "PlayAction::_play.  mediaItem argument is invalid");
                MS.Entertainment.UI.Controls.assert(options, "PlayAction::_play.  options argument is invalid");
                if (mediaItem && options) {
                    var trackToSearchFor = options.track;
                    if (trackToSearchFor)
                        trackToSearchFor.playPreviewOnly = options.playPreviewOnly ? options.playPreviewOnly : false;
                    var compareTrackItem = function compareTrackItem() {
                            return this.data.isEqual(trackToSearchFor)
                        };
                    compareTrackItem.track = trackToSearchFor;
                    mediaItem.playPreviewOnly = !!options.playPreviewOnly;
                    mediaItem.enableFallbackToPreview = !!options.enableFallbackToPreview;
                    MS.Entertainment.Platform.Playback.Etw.traceString("+PlaybackHelpers::_play");
                    var ensurePreownedMediaAddedAsyncPromise = WinJS.Promise.wrap();
                    if (MS.Entertainment.Utilities.isVideoApp && mediaItem && !mediaItem.playPreviewOnly)
                        ensurePreownedMediaAddedAsyncPromise = MS.Entertainment.Platform.PurchaseHelpers.ensurePreownedMediaAddedAsync(mediaItem);
                    MS.Entertainment.Platform.Playback.Etw.traceString("+PlaybackHelpers::ensurePreownedMediaAddedAsyncPromise");
                    return ensurePreownedMediaAddedAsyncPromise.then(function ensurePreownedMediaAddedAsync_complete(dbResult) {
                            MS.Entertainment.Platform.Playback.Etw.traceString("-PlaybackHelpers::ensurePreownedMediaAddedAsyncPromise");
                            var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                            var playbackSession = sessionMgr.setPrimarySession(options.sessionId);
                            playbackSession._ensureSession().done(function verifiedSessionIsInitialized() {
                                playbackSession.shuffle = options.shuffle !== undefined ? options.shuffle : playbackSession.shuffle;
                                playbackSession.smartDJSeed = options.smartDJSeed !== undefined ? options.smartDJSeed : null;
                                var startPositionMsec = 0 | options.startPositionMsec;
                                var autoPlay = (typeof options.autoPlay) === "boolean" ? options.autoPlay : playbackSession.autoPlay;
                                playbackSession.autoPlay = autoPlay;
                                if (options.sessionId === MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying) {
                                    this._setMediaAvailability(mediaItem, options.collectionFilter);
                                    if (options.queueMedia && !options.setOnly) {
                                        MS.Entertainment.Platform.Playback.Etw.traceString("PlaybackHelpers queueItem: appending");
                                        var getCountPromise = playbackSession.mediaCollection ? playbackSession.mediaCollection.getCount() : WinJS.Promise.wrap(0);
                                        getCountPromise.done(function insertNewMedia(currentCount) {
                                            playbackSession.insertAtEnd(null, mediaItem).done(function playIfPaused() {
                                                MS.Entertainment.Platform.Playback.Etw.traceString("PlaybackHelpers queueItem: append complete");
                                                if (options.autoPlay && !options.preventPlay && (playbackSession.currentTransportState === MS.Entertainment.Platform.Playback.TransportState.paused || playbackSession.currentTransportState === MS.Entertainment.Platform.Playback.TransportState.stopped || playbackSession.currentTransportState === MS.Entertainment.Platform.Playback.TransportState.unInitialize))
                                                    playbackSession.playAt(currentCount)
                                            }, function errorWhileAppending(error) {
                                                MS.Entertainment.Platform.Playback.Etw.traceString("PlaybackHelpers queueItem: error while appending " + JSON.stringify(error))
                                            })
                                        })
                                    }
                                    else {
                                        playbackSession.setDataSource(mediaItem).done(function dataSourceSet(mediaCollection) {
                                            if (!!options.setOnly) {
                                                if (mediaCollection) {
                                                    var list = mediaCollection.createListBinding();
                                                    var index = options.offset || 0;
                                                    list.fromIndex(index).then(function first_in_collection(item) {
                                                        if (item) {
                                                            if (!item.data.hydrate) {
                                                                item.data.location = MS.Entertainment.Data.ItemLocation.marketplace;
                                                                MS.Entertainment.ViewModels.MediaItemModel.augment(item.data)
                                                            }
                                                            var setCurrentMedia = function setCurrentMedia() {
                                                                    playbackSession.autoPlay = false;
                                                                    playbackSession.playAt(index)
                                                                };
                                                            if (!item.data.hydrated)
                                                                item.data.hydrate({forceUpdate: true}).done(setCurrentMedia, setCurrentMedia);
                                                            else
                                                                setCurrentMedia()
                                                        }
                                                        list.release()
                                                    })
                                                }
                                                return
                                            }
                                            if (typeof(options.offset) !== "number" && options.offset < 0)
                                                options.offset = null;
                                            if (startPositionMsec > 0)
                                                playbackSession.playAt(options.offset || 0, startPositionMsec);
                                            else {
                                                playbackSession.autoPlay = autoPlay;
                                                if (options.offset === null)
                                                    playbackSession.activate(document.createElement("div"));
                                                else if (!trackToSearchFor)
                                                    playbackSession.playAt(options.offset);
                                                else
                                                    playbackSession.playAt(options.offset, 0, compareTrackItem)
                                            }
                                        }.bind(this), function dataSourceSetFailed(error){});
                                        if (!options.preservePlayContext && !options.queueMedia)
                                            sessionMgr.playContext = options.playContext || {}
                                    }
                                    var isPlaylist = mediaItem.execute !== undefined || this.isMusicTrack(mediaItem) || this.isMusicAlbum(mediaItem) || this.isPerson(mediaItem) || this.isMusicPlaylist(mediaItem) || this.isMusicVideo(mediaItem) || (Array.isArray(mediaItem) && mediaItem.length > 0) || (MS.Entertainment.Data.List.isList(mediaItem) && mediaItem.count > 0) || (mediaItem.source && mediaItem.source.length > 1);
                                    if ((options.saveNowPlaying === undefined || options.saveNowPlaying) && isPlaylist && !options.playPreviewOnly) {
                                        if (MS.Entertainment.Platform.PlaybackHelpers._saveNowPlayingPromise) {
                                            MS.Entertainment.Platform.PlaybackHelpers._saveNowPlayingPromise.cancel();
                                            MS.Entertainment.Platform.PlaybackHelpers._saveNowPlayingPromise = null
                                        }
                                        MS.Entertainment.Platform.PlaybackHelpers._saveNowPlayingPromise = WinJS.Promise.timeout(MS.Entertainment.Platform.PlaybackHelpers._saveNowPlayingTimeout).then(function saveNowPlaying() {
                                            playbackSession.savePlaylist(null, true);
                                            MS.Entertainment.Platform.PlaybackHelpers._saveNowPlayingPromise = null
                                        })
                                    }
                                }
                                else if (options.sessionId === MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.remoteLRC) {
                                    if (!options.titleId)
                                        options.titleId = MS.Entertainment.Platform.LivingRoomCompanion.WellKnownTitleId.ze;
                                    sessionMgr.nowPlayingSession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.stopped;
                                    MS.Entertainment.UI.Controls.ActivityOverlay.lastAutoLaunchId = null;
                                    if (options.queueMedia)
                                        playbackSession.insertAtEnd(null, mediaItem);
                                    else
                                        playbackSession.setDataSource(mediaItem, options.deepLinkInfo).then(function dataSourceSet() {
                                            playbackSession.playAt(options.titleId, startPositionMsec, MS.Entertainment.Platform.LivingRoomCompanion.LaunchFirstAction.playNow)
                                        }.bind(this))
                                }
                                MS.Entertainment.Platform.Playback.Etw.traceString("-PlaybackHelpers::_play")
                            }.bind(this), function sessionCannotBeInitialized(errorObj) {
                                MS.Entertainment.UI.Controls.assert(false, "Session initialization failure: " + JSON.stringify(errorObj))
                            })
                        }.bind(this), function ensurePreownedMediaAddedAsync_error(e) {
                            MS.Entertainment.UI.Controls.assert(false, "ensurePreownedMediaAddedAsync invoked the error handler.")
                        })
                }
            }, reloadNowPlaying: function reloadNowPlaying(startOnLoad) {
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                var isSubscription = configurationManager.service.lastSignedInUserSubscription;
                var firstFreeStringsLaunch = configurationManager.music.firstFreeStringsLaunch && !isSubscription;
                var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                if (startOnLoad || (!firstFreeStringsLaunch && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind === Windows.ApplicationModel.Activation.ActivationKind.launch && !MS.Entertainment.Platform.PlaybackHelpers.playActionInitiated) && (!sessionMgr.nowPlayingSession || sessionMgr.nowPlayingSession.currentMedia === null)) {
                    var query = new MS.Entertainment.Data.Query.libraryPlaylists;
                    query.playlistType = Microsoft.Entertainment.Platform.PlaylistType.nowPlaying;
                    query.chunkSize = 1;
                    query.execute().then(function loadPlaylist(query) {
                        if (query.result.totalCount > 0)
                            query.result.items.toArray(0, 1).then(function playPlaylist(playlist) {
                                if (playlist.length >= 1 && (startOnLoad || !MS.Entertainment.Platform.PlaybackHelpers.playActionInitiated) && (!sessionMgr.nowPlayingSession || sessionMgr.nowPlayingSession.currentMedia === null)) {
                                    var queryPromise = WinJS.Promise.as();
                                    var mediaItemsQuery = null;
                                    var playOptions = null;
                                    if (playlist[0].count > 0) {
                                        mediaItemsQuery = new MS.Entertainment.Data.Query.libraryPlaylistMediaItems;
                                        mediaItemsQuery.playlistId = playlist[0].libraryId;
                                        playOptions = {
                                            autoPlay: true, setOnly: !startOnLoad, saveNowPlaying: false, showAppBar: false, queueMedia: !startOnLoad, showImmersive: false, doNotNavigate: true, offset: Math.max((playlist[0].currentItemIndex || 0), 0)
                                        };
                                        sessionMgr.nowPlayingSession.pendingOrdinal = playOptions.offset
                                    }
                                    else if (playlist[0].smartDjSeed && MS.Entertainment.Utilities.isValidGuid(playlist[0].smartDjSeed))
                                        queryPromise = MS.Entertainment.Platform.PlaybackHelpers.getMusicMediaByServiceId(playlist[0].smartDjSeed, MS.Entertainment.Data.Query.edsIdType.canonical, MS.Entertainment.Data.Query.edsMediaType.musicArtist).then(function loadMedia(media) {
                                            if (media) {
                                                mediaItemsQuery = new MS.Entertainment.Data.Query.Music.SmartDJ;
                                                mediaItemsQuery.id = media.canonicalId;
                                                mediaItemsQuery.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.smartDJ, Microsoft.Entertainment.Platform.AcquisitionContextType.artist, media.canonicalId);
                                                playOptions = {
                                                    autoPlay: true, setOnly: !startOnLoad, saveNowPlaying: false, showAppBar: false, queueMedia: !startOnLoad, showImmersive: false, playbackSource: MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.radio, smartDJSeed: media, doNotNavigate: true, playContext: {
                                                            artistSeed: media, isSmartDJ: true
                                                        }
                                                }
                                            }
                                        });
                                    var onPlayerStateChanged = function onPlayerStateChanged(currentPlayerState) {
                                            if (!currentPlayerState)
                                                return;
                                            if (currentPlayerState === MS.Entertainment.Platform.Playback.PlayerState.notReady) {
                                                if (!MS.Entertainment.Platform.PlaybackHelpers.playActionInitiated) {
                                                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.adService))
                                                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.adService).skipAudioAdForNextTrack = true;
                                                    if (mediaItemsQuery && playOptions)
                                                        MS.Entertainment.Platform.PlaybackHelpers.playMedia2(mediaItemsQuery, playOptions);
                                                    else
                                                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).engageVisible = true
                                                }
                                            }
                                            else if (currentPlayerState === MS.Entertainment.Platform.Playback.PlayerState.error)
                                                MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playbackErrorDisplayService).suppressNextPlaybackErrorDialog = true;
                                            sessionMgr.primarySession.unbind("playerState", onPlayerStateChanged)
                                        };
                                    var primarySessionIdChanged = function primarySessionIdChanged() {
                                            if (sessionMgr.primarySession) {
                                                sessionMgr.primarySession.bind("playerState", onPlayerStateChanged);
                                                MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).unbind("primarySessionId", primarySessionIdChanged)
                                            }
                                        };
                                    queryPromise.done(function initializeBinding() {
                                        if (mediaItemsQuery && playOptions)
                                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).bind("primarySessionId", primarySessionIdChanged);
                                        else
                                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).engageVisible = true
                                    }, function onError(e) {
                                        MS.Entertainment.fail("Error loading smartDj playlist: " + e.toString())
                                    })
                                }
                                else
                                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).engageVisible = true
                            });
                        else
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).engageVisible = true
                    })
                }
                else
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).engageVisible = true;
                if (firstFreeStringsLaunch)
                    configurationManager.music.firstFreeStringsLaunch = false
            }, isMovie: function MediaInstance_isMovie(mediaItem) {
                return MS.Entertainment.Utilities.isMovie(mediaItem)
            }, isTVEpisode: function MediaInstance_isTVEpisode(mediaItem) {
                return MS.Entertainment.Utilities.isTVEpisode(mediaItem)
            }, isTVSeason: function MediaInstance_isTVSeason(mediaItem) {
                return MS.Entertainment.Utilities.isTVSeason(mediaItem)
            }, isTVSeries: function MediaInstance_isTVSeries(mediaItem) {
                return MS.Entertainment.Utilities.isTVSeries(mediaItem)
            }, isAnyTV: function MediaInstance_isTV(mediaItem) {
                return MS.Entertainment.Utilities.isAnyTV(mediaItem)
            }, isVideo: function MediaInstance_isVideo(mediaItem) {
                return MS.Entertainment.Utilities.isVideo(mediaItem)
            }, isMusicArtist: function MediaInstance_isMusicArtist(mediaItem) {
                var isType = false;
                if (mediaItem)
                    isType = (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.person);
                return isType
            }, isMusicVideo: function MediaInstance_isMusicVideo(mediaItem) {
                var isType = false;
                if (mediaItem)
                    isType = (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video && mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo);
                return isType
            }, isMusicTrack: function MediaInstance_isMusicTrack(mediaItem) {
                var isType = false;
                if (mediaItem)
                    isType = (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track) || (MS.Entertainment.Data.MediaBrowser && (mediaItem.mediaType === MS.Entertainment.Data.MediaBrowser.ItemType.music));
                return isType
            }, isMusicTrackOrMusicVideo: function MediaInstance_isMusicTrackOrMusicVideo(mediaItem) {
                var isType = false;
                if (mediaItem)
                    isType = (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrack(mediaItem) || MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(mediaItem));
                return isType
            }, isMusicAlbum: function MediaInstance_isMusicAlbum(mediaItem) {
                if (mediaItem)
                    return (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
            }, isMusicPlaylist: function MediaInstance_isMusicPlaylist(mediaItem) {
                if (mediaItem)
                    return (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist)
            }, isMusicOrMusicVideo: function MediaInstance_isMusicOrMusicVideo(mediaItem) {
                if (mediaItem)
                    return this.isMusicTrack(mediaItem) || this.isMusicAlbum(mediaItem) || this.isMusicVideo(mediaItem) || this.isMusicPlaylist(mediaItem)
            }, isAnyMusic: function MediaInstance_isAnyMusic(mediaItem) {
                if (mediaItem)
                    return this.isMusicTrack(mediaItem) || this.isMusicAlbum(mediaItem) || this.isMusicVideo(mediaItem) || this.isMusicArtist(mediaItem) || this.isMusicPlaylist(mediaItem)
            }, isGame: function MediaInstance_isGame(mediaItem) {
                if (mediaItem)
                    return (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.game)
            }, isPerson: function MediaInstance_isPerson(mediaItem) {
                var isType = false;
                if (mediaItem)
                    isType = (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.person);
                return isType
            }, forceFullScreenNowPlaying: {get: function() {
                    var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    return (!uiState.isSnapped && MS.Entertainment.Utilities.isMusicApp2) || MS.Entertainment.Utilities.isVideoApp
                }}, useFullScreenNowPlaying: {get: function() {
                    return MS.Entertainment.Utilities.isMusicApp2 || MS.Entertainment.Utilities.isVideoApp
                }}, PlaybackSource: {
                fileActivation: "fileActivation", details: "details", radio: "radio", playlist: "playlist", playTo: "playTo", deeplink: "deeplink", postRoll: "postRoll", resumeApp: "resumeApp"
            }, _saveNowPlayingTimeout: 10000, _saveNowPlayingPromise: null, deferredUpdateTimeout: 100, playActionInitiated: false, lastPlaybackSource: ""
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        RemoveFromPlaybackSession: MS.Entertainment.deferredDerive("MS.Entertainment.UI.ToolbarAction", function RemoveFromPlaybackSession() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.playlistRemoveFromNowPlaying, executed: function executed(param) {
                    param = this.transformParameter(param);
                    var keyPromise;
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    if (param && param.mediaItem && param.mediaItem.mediaCollection)
                        if (param.key)
                            keyPromise = WinJS.Promise.wrap(param.key);
                        else if (param.mediaItem.mediaCollection.itemFromIndex)
                            keyPromise = param.mediaItem.mediaCollection.itemFromIndex(param.offset).then(function gotItem(item) {
                                return item.key
                            });
                    if (keyPromise)
                        keyPromise.then(function gotKey(key) {
                            if (mediaContext)
                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.removeFromNowPlaying, param);
                            param.mediaItem.mediaCollection.remove(key)
                        }, function failedToGetKey(error) {
                            if (mediaContext)
                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.removeFromNowPlaying, param);
                            MS.Entertainment.Platform.PlaybackHelpers.fail("Failed to remove item from now playing. Error message " + error && error.message)
                        })
                }, transformParameter: function transformParameter(parameter) {
                    return parameter
                }, canExecute: function canExecute(param) {
                    param = this.transformParameter(param);
                    var canExecute = !!param && MS.Entertainment.Platform.Playback.PlaybackSession.isPlaybackSession(param.mediaItem) && !!param.mediaItem.mediaCollection && (!!param.key || (typeof param.offset === "number" & param.offset >= 0));
                    return canExecute
                }
        }), PlayMedia: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function PlayMedia() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.playMedia, executed: function executed(param) {
                        MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PlayCommand);
                        var isImmersive = false;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            isImmersive = navigationService.checkUserLocation(MS.Entertainment.UI.Monikers.immersiveDetails)
                        }
                        var playContext = {};
                        if (param.artistSeed) {
                            playContext.artistSeed = param.artistSeed;
                            playContext.isSmartDJ = param.isSmartDJ
                        }
                        else if (param.playlist)
                            playContext.playlist = param.playlist;
                        else if (param.mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist)
                            playContext.playlist = param.mediaItem;
                        var playbackSource = String.empty;
                        if (playContext.isSmartDJ)
                            playbackSource = MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.radio;
                        else if (playContext.playlist)
                            playbackSource = MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.playlist;
                        if (MS.Entertainment.Platform.Playback.PlaybackSession.isPlaybackSession(param.mediaItem)) {
                            var playbackEventNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playbackEventNotifications);
                            playbackEventNotifications.clearErrors();
                            var playbackSession = param.mediaItem;
                            playbackSession.autoPlay = true;
                            playbackSession.playAt(param.offset || 0)
                        }
                        else {
                            if (param.playPreviewOnly)
                                param.mediaItem.playPreviewOnly = param.playPreviewOnly;
                            else
                                param.mediaItem.playPreviewOnly = false;
                            var mediaItem;
                            if (param.playMusicVideo)
                                mediaItem = param.mediaItem.musicVideo;
                            else {
                                mediaItem = param.mediaItem;
                                mediaItem.mediaAvailability = param.collectionFilter
                            }
                            var isFilteredCollection = !!param.collectionFilter && param.collectionFilter !== Microsoft.Entertainment.Platform.MediaAvailability.available && param.collectionFilter !== Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                            MS.Entertainment.UI.Actions.assert(!(mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album && isFilteredCollection && param.playPreviewOnly), "Applying a filter and requesting preview only on an album hasn't been validated to work. You are attempting to do this. Please verify this works");
                            var album;
                            if (!isFilteredCollection && mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album && !param.dontUseTrackListForPlayback && mediaItem.tracks) {
                                album = mediaItem;
                                mediaItem = mediaItem.tracks
                            }
                            MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayProtectedInApp();
                            MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayNonProtectedInApp();
                            MS.Entertainment.Platform.PlaybackHelpers.playMedia2(mediaItem, {
                                sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, saveNowPlaying: true, startPositionMsec: param.startPositionMS, showImmersive: !!param.showImmersive, showAppBar: (!!param.showAppBar && !isImmersive), shuffle: param.shuffle, queueMedia: !!param.queueMedia, playbackSource: playbackSource, immersiveOptions: {
                                        sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, startFullScreen: !param.showDetails, overridePageChange: param.overridePageChange
                                    }, offset: param.offset, track: param.track, playContext: playContext, playPreviewOnly: param.playPreviewOnly, preservePlayContext: param.preservePlayContext, collectionFilter: param.collectionFilter, album: album, navigateToDetailsPage: param.navigateToDetailsPage, enableFallbackToPreview: !!param.enableFallbackToPreview
                            })
                        }
                    }.bind(this), canExecute: function canExecute(param) {
                        return param && param.mediaItem && (!param.playMusicVideo || param.mediaItem.hasMusicVideoId)
                    }
            }), ShuffleNowPlaying: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function ShuffleNowPlaying() {
                this.base()
            }, {
                forceTitleChange: true, automationId: MS.Entertainment.UI.AutomationIds.transportShuffle, executed: function executed(param) {
                        var playbackSession = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).nowPlayingSession;
                        playbackSession.shuffle = !playbackSession.shuffle;
                        if (!param || !param.ignoreLabel)
                            this.title = playbackSession.shuffle ? String.load(String.id.IDS_TRANSPORT_CONTROLS_SHUFFLE_ON_BUTTON) : String.load(String.id.IDS_TRANSPORT_CONTROLS_SHUFFLE_OFF_BUTTON)
                    }, canExecute: function canExecute(param) {
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        return !!(sessionMgr && sessionMgr.nowPlayingSession && sessionMgr.nowPlayingSession.canShuffle)
                    }
            }), RepeatNowPlaying: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function RepeatNowPlaying() {
                this.base()
            }, {
                forceTitleChange: true, automationId: MS.Entertainment.UI.AutomationIds.transportRepeat, executed: function executed(param) {
                        var playbackSession = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).nowPlayingSession;
                        playbackSession.repeat = !playbackSession.repeat;
                        this.title = playbackSession.repeat ? String.load(String.id.IDS_TRANSPORT_CONTROLS_REPEAT_ON_BUTTON) : String.load(String.id.IDS_TRANSPORT_CONTROLS_REPEAT_OFF_BUTTON)
                    }, canExecute: function canExecute(param) {
                        return true
                    }
            }), ShowItemDetails: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function showItemDetails() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.showItemDetails, executed: function executed(popOverParameters) {
                        if (popOverParameters && popOverParameters.clearBackStack && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            if (navigationService)
                                navigationService.clearBackStackOnNextNavigate(true)
                        }
                        MS.Entertainment.Platform.PlaybackHelpers.showItemDetails(popOverParameters)
                    }, canExecute: function canExecute(param) {
                        return true
                    }
            }), SkipBackward: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function skipBackward() {
                this.base();
                this.executed = this.executed.bind(this);
                this.canExecute = this.canExecute.bind(this)
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.playbackSkipBackward, executed: function executed() {
                        var session = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).primarySession;
                        if (session)
                            session.skipBack()
                    }, canExecute: function canExecute() {
                        var session = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).primarySession;
                        return !!(session && session.canSkipBackward)
                    }
            }), SkipForward: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function skipForward() {
                this.base();
                this.executed = this.executed.bind(this);
                this.canExecute = this.canExecute.bind(this)
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.playbackSkipForward, executed: function executed() {
                        var session = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).primarySession;
                        if (session)
                            session.skipFwd()
                    }, canExecute: function canExecute() {
                        var session = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).primarySession;
                        return !!(session && session.canSkipForward)
                    }
            }), ToggleMusicVideoPlayback: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function toggleMusicVideoPlayback() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.toggleMusicVideoPlayback, executed: function executed() {
                        var session = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).primarySession;
                        if (session)
                            session.musicVideosEnabled = !session.musicVideosEnabled
                    }, canExecute: function canExecute() {
                        var session = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).primarySession;
                        return !!(session)
                    }
            })
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, function() {
        return new MS.Entertainment.UI.Actions.PlayMedia
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.removeFromPlaybackSession, function() {
        return new MS.Entertainment.UI.Actions.RemoveFromPlaybackSession
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.shuffleNowPlaying, function() {
        return new MS.Entertainment.UI.Actions.ShuffleNowPlaying
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.repeatNowPlaying, function() {
        return new MS.Entertainment.UI.Actions.RepeatNowPlaying
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.showItemDetails, function() {
        return new MS.Entertainment.UI.Actions.ShowItemDetails
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.skipBackward, function() {
        return new MS.Entertainment.UI.Actions.SkipBackward
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.skipForward, function() {
        return new MS.Entertainment.UI.Actions.SkipForward
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.toggleMusicVideoPlayback, function() {
        return new MS.Entertainment.UI.Actions.ToggleMusicVideoPlayback
    })
})()
})();
/* >>>>>>/components/playback/volumecontroller.js:8850 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {VolumeService: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function VolumeServiceConstructor() {
            if (MS.Entertainment.Utilities.isMusicApp) {
                this._configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                this.updateAndNotify("volume", (this._configurationManager.playback.musicVolumeValue) / 100);
                this.updateAndNotify("mute", this._configurationManager.playback.musicMuteState)
            }
            else
                try {
                    this._volumeManager = new Microsoft.Entertainment.AppVolumeManager.AppVolume;
                    this._volumeManager.addEventListener("systemvolumestatechanged", this._systemVolumeStateChanged.bind(this));
                    this._volumeManager.addEventListener("audioendpointchanged", this._audioEndpointChanged.bind(this));
                    this._initializeStates()
                }
                catch(e) {
                    this.updateAndNotify("isAudioEndpointAvailable", false)
                }
        }, {
            _systemVolumeStateChangedBindingMethod: null, _volumeManager: null, _volume: 0.80, _mute: false, _isAudioEndpointAvailable: true, _configurationManager: null, volume: {
                    get: function getVolume() {
                        return this._volume
                    }, set: function setVolume(newValue) {
                            if (MS.Entertainment.Utilities.isMusicApp)
                                this._configurationManager.playback.musicVolumeValue = newValue * 100;
                            else
                                try {
                                    if (this._volumeManager)
                                        this._volumeManager.setVolumeLevelAsync(newValue)
                                }
                                catch(e) {
                                    MS.Entertainment.UI.Controls.fail(e && e.toString())
                                }
                            if (this._volume !== newValue)
                                this.updateAndNotify("volume", newValue)
                        }
                }, mute: {
                    get: function getMute() {
                        return this._mute
                    }, set: function setMute(newValue) {
                            if (MS.Entertainment.Utilities.isMusicApp)
                                this._configurationManager.playback.musicMuteState = newValue;
                            else
                                try {
                                    if (this._volumeManager)
                                        this._volumeManager.setMutedAsync(newValue)
                                }
                                catch(e) {
                                    MS.Entertainment.UI.Controls.fail(e && e.toString())
                                }
                            if (this._mute !== newValue)
                                this.updateAndNotify("mute", newValue)
                        }
                }, isAudioEndpointAvailable: {
                    get: function getIsAudioEndpointAvailable() {
                        return this._isAudioEndpointAvailable
                    }, set: function setIsAudioEndpointAvailable(newState) {
                            this.updateAndNotify("isAudioEndpointAvailable", newValue)
                        }
                }, _systemVolumeStateChanged: function systemVolumeStateChanged() {
                    this._updateSystemVolumeStates()
                }, _initializeStates: function initializeStates() {
                    this._updateSystemVolumeStates()
                }, _updateSystemVolumeStates: function updateSystemVolumeStates() {
                    try {
                        if (this._volumeManager) {
                            this._volumeManager.getVolumeLevelAsync().done(function getVolumeLevelAsync_complete(volume) {
                                if (this._volume !== volume.value)
                                    this.updateAndNotify("volume", volume.value)
                            }.bind(this), function getVolumeLevelAsync_error(error) {
                                MS.Entertainment.UI.Controls.fail("Failed to get system volume level with error:" + (error && error.toString()))
                            });
                            this._volumeManager.getMutedAsync().done(function getMutedAsync_complete(muteState) {
                                if (this._mute !== muteState.value)
                                    this.updateAndNotify("mute", muteState.value)
                            }.bind(this), function getMutedAsync_error(error) {
                                MS.Entertainment.UI.Controls.fail("Failed to get system mute level with error:" + (error && error.toString()))
                            })
                        }
                    }
                    catch(e) {
                        MS.Entertainment.UI.Controls.fail(e && e.toString())
                    }
                }, _audioEndpointChanged: function _audioEndpointChanged(newState) {
                    if (newState.detail.length > 0)
                        if (newState.detail[0] === 1) {
                            this.updateAndNotify("isAudioEndpointAvailable", true);
                            this._updateSystemVolumeStates()
                        }
                        else
                            this.updateAndNotify("isAudioEndpointAvailable", false)
                }
        }, {factory: function factory() {
                return new MS.Entertainment.UI.Controls.VolumeService
            }})});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.volumeService, MS.Entertainment.UI.Controls.VolumeService.factory)
})()
})();
/* >>>>>>/components/playback/playlog.js:8952 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.Playback");
    WinJS.Namespace.define("MS.Entertainment.Platform.Playback", {_getPlayLogTickInterval: (function _getPlayLogTickInterval_Closure() {
            var _playLogTickInterval = {};
            _playLogTickInterval[Microsoft.Entertainment.Application.AppMode.music] = 15000;
            _playLogTickInterval[Microsoft.Entertainment.Application.AppMode.music2] = 15000;
            _playLogTickInterval[Microsoft.Entertainment.Application.AppMode.video] = 120000;
            _playLogTickInterval[Microsoft.Entertainment.Application.AppMode.video2] = 30000;
            _playLogTickInterval[Microsoft.Entertainment.Application.AppMode.amsterdam] = 15000;
            _playLogTickInterval[Microsoft.Entertainment.Application.AppMode.games] = -1;
            _playLogTickInterval[Microsoft.Entertainment.Application.AppMode.companion] = -1;
            _playLogTickInterval[Microsoft.Entertainment.Application.AppMode.test] = -1;
            _playLogTickInterval["X8_Test_PlayLog"] = 500;
            return function _getPlayLogTickInterval(appMode) {
                    return _playLogTickInterval[appMode]
                }
        })()});
    WinJS.Namespace.define("MS.Entertainment.Platform.Playback", {
        _Bookmark: MS.Entertainment.UI.Framework.define(function _bookmark_constructor(){}, {
            _lastSavePosition: 0, _shouldSaveOnMediaInstance: function _shouldSaveOnMediaInstance(mediaInstance) {
                    var save = false;
                    if (mediaInstance)
                        save = (!mediaInstance.isMusicVideo() && (mediaInstance.isTVEpisode() || mediaInstance.isMovie() || mediaInstance.isVideo()));
                    return save
                }, shouldSaveOnPosition: function shouldSaveOnPosition(mediaInstance, position) {
                    var save = false;
                    var saveThreshold = MS.Entertainment.Platform.Playback._getPlayLogTickInterval(MS.Entertainment.appMode);
                    if (this._shouldSaveOnMediaInstance(mediaInstance))
                        save = (this._lastSavePosition + saveThreshold <= position);
                    return save
                }, shouldSaveOnTransportState: function shouldSaveOnTransportState(mediaInstance, transportState) {
                    var save = false;
                    if (this._shouldSaveOnMediaInstance(mediaInstance))
                        save = (transportState === MS.Entertainment.Platform.Playback.TransportState.paused || transportState === MS.Entertainment.Platform.Playback.TransportState.stopped);
                    return save
                }, save: function save(mediaInstance, position) {
                    if (mediaInstance) {
                        mediaInstance.bookmark = position;
                        this._lastSavePosition = position
                    }
                }, clear: function clear(mediaInstance) {
                    this.save(mediaInstance, 0)
                }
        }), _PlayedState: MS.Entertainment.UI.Framework.define(function _PlayedState_constructor(){}, {
                saved: false, _videoThreshold: 95, _otherMediaThreshold: MS.Entertainment.Utilities.isMusicApp2 ? 0 : 90, shouldSaveOnProgress: function shouldSaveOnProgress(mediaInstance, percentage) {
                        var threshold = 101;
                        if (mediaInstance)
                            if (mediaInstance.isTVEpisode() || mediaInstance.isMovie() || mediaInstance.isVideo())
                                threshold = this._videoThreshold;
                            else
                                threshold = this._otherMediaThreshold;
                        return (percentage > threshold)
                    }, save: function save(mediaInstance) {
                        if (mediaInstance) {
                            mediaInstance.played = true;
                            this.saved = true
                        }
                    }, clear: function clear(mediaInstance) {
                        if (mediaInstance)
                            mediaInstance.played = false
                    }
            }), _Playcount: MS.Entertainment.UI.Framework.define(function _Playcount_constructor(){}, {
                saved: false, _trackThreshold: 20, _otherMediaThreshold: 95, shouldSaveOnProgress: function shouldSaveOnProgress(mediaInstance, percentage) {
                        var threshold = 101;
                        if (mediaInstance)
                            if (mediaInstance.isMusicTrack())
                                threshold = this._trackThreshold;
                            else
                                threshold = this._otherMediaThreshold;
                        return (percentage > threshold)
                    }, save: function save(mediaInstance) {
                        if (mediaInstance) {
                            mediaInstance.playcount++;
                            this.saved = true
                        }
                    }
            }), _PlayLogTimer: MS.Entertainment.UI.Framework.define(function _PlayLogTimer_constructor(callback) {
                this._timerCallback = callback
            }, {
                _timerId: null, _timerCallback: null, _timerIntervalMsec: null, start: function _PlayLogTimer_start() {
                        if (this._timerId) {
                            this._timerId.cancel();
                            this._timerId = null
                        }
                        this._tick()
                    }, stop: function _PlayLogTimer_stop() {
                        if (this._timerId) {
                            this._timerId.cancel();
                            this._timerId = null
                        }
                    }, _tick: function _PlayLogTimer_tick() {
                        var tickInterval = MS.Entertainment.Platform.Playback._getPlayLogTickInterval(MS.Entertainment.appMode);
                        if (tickInterval === -1)
                            return;
                        MS.Entertainment.Platform.Playback.assert(!isNaN(tickInterval), "Invalid tickInterval of: " + tickInterval);
                        this._timerId = WinJS.Promise.timeout(tickInterval).then(function _PlayLogTimer_ring_ring() {
                            if (this._timerCallback)
                                this._timerCallback();
                            WinJS.Promise.timeout().then(function _tick_tock() {
                                this._tick()
                            }.bind(this))
                        }.bind(this))
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Platform.Playback", {PlayLog: MS.Entertainment.UI.Framework.define(function PlayLog_constructor(playbackControl) {
            this._observe(playbackControl)
        }, {
            _currentMediaInstance: null, _currentPosition: 0, _currentDuration: 0, _bookmark: null, _playedState: null, _playcount: null, _playLogTimer: null, _playbackControl: null, _observe: function PlayLog_observe(playbackControl) {
                    this._playbackControl = playbackControl;
                    playbackControl.bind("currentMedia", this._onCurrentMediaChanged.bind(this));
                    playbackControl.bind("currentTransportState", this._onCurrentTransportStateChanged.bind(this));
                    playbackControl.bind("duration", this._onDurationChanged.bind(this));
                    playbackControl.bind("seekedPosition", this._onSeekedPositionChanged.bind(this))
                }, _onCurrentMediaChanged: function PlayLog_onCurrentMediaChanged(newMediaInstance) {
                    if (newMediaInstance) {
                        this._currentMediaInstance = newMediaInstance;
                        this._currentDuration = this._playbackControl.duration;
                        this._currentPosition = 0;
                        this._bookmark = new MS.Entertainment.Platform.Playback._Bookmark;
                        this._playedState = new MS.Entertainment.Platform.Playback._PlayedState;
                        this._playcount = new MS.Entertainment.Platform.Playback._Playcount;
                        this._playedState.clear(this._currentMediaInstance);
                        if (!this._playLogTimer)
                            this._playLogTimer = new MS.Entertainment.Platform.Playback._PlayLogTimer(this._onCurrentPositionChanged.bind(this));
                        if (this._playLogTimer)
                            this._playLogTimer.start()
                    }
                    else
                        this._currentMediaInstance = null
                }, _onDurationChanged: function PlayLog_onDurationChanged(newDuration) {
                    this._currentDuration = newDuration
                }, _onCurrentPositionChanged: function PlayLog_onCurrentPositionChanged() {
                    var progress = 0;
                    var newPosition = this._playbackControl.forceTimeUpdate();
                    this._currentPosition = newPosition;
                    if (this._currentMediaInstance && this._currentMediaInstance.playlogEnabled) {
                        if (this._currentDuration !== 0)
                            progress = this._currentPosition * 100 / this._currentDuration;
                        if (!this._playedState.saved && this._bookmark.shouldSaveOnPosition(this._currentMediaInstance, newPosition))
                            this._bookmark.save(this._currentMediaInstance, newPosition);
                        if (!this._playedState.saved && this._playedState.shouldSaveOnProgress(this._currentMediaInstance, progress)) {
                            this._playedState.save(this._currentMediaInstance);
                            this._bookmark.clear(this._currentMediaInstance)
                        }
                        if (this._currentDuration - (this._currentMediaInstance.maxPosition * 1000) < 1000)
                            this._bookmark.clear(this._currentMediaInstance);
                        if (!this._playcount.saved && this._playcount.shouldSaveOnProgress(this._currentMediaInstance, progress))
                            this._playcount.save(this._currentMediaInstance)
                    }
                }, _onCurrentTransportStateChanged: function PlayLog_onCurrentTransportStateChanged(newTransportState) {
                    if (this._currentMediaInstance && this._currentMediaInstance.playlogEnabled && newTransportState !== MS.Entertainment.Platform.Playback.TransportState.starting) {
                        this._onCurrentPositionChanged();
                        if (!this._playedState.saved && this._bookmark.shouldSaveOnTransportState(this._currentMediaInstance, newTransportState)) {
                            if (newTransportState === MS.Entertainment.Platform.Playback.TransportState.stopped && this._currentMediaInstance && this._currentMediaInstance.stopPosition)
                                this._currentPosition = this._currentMediaInstance.stopPosition;
                            else
                                this._currentPosition = this._playbackControl.forceTimeUpdate();
                            if (this._currentPosition > 0)
                                this._bookmark.save(this._currentMediaInstance, this._currentPosition)
                        }
                        if (newTransportState === MS.Entertainment.Platform.Playback.TransportState.playing)
                            this._playLogTimer.start();
                        else
                            this._playLogTimer.stop()
                    }
                }, _onSeekedPositionChanged: function PlayLog_onSeekedPositionChanged() {
                    if (this._currentMediaInstance && this._currentMediaInstance.playlogEnabled) {
                        this._onCurrentPositionChanged();
                        if (this._bookmark._shouldSaveOnMediaInstance(this._currentMediaInstance) && this._currentPosition >= 0) {
                            this._bookmark.save(this._currentMediaInstance, this._currentPosition);
                            this._playLogTimer.start()
                        }
                    }
                }
        }, {})})
})()
})();
/* >>>>>>/components/playback/playbackstates.js:9135 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.Playback");
(function() {
    "use strict";
    var MSEPlatform = WinJS.Namespace.define("MS.Entertainment.Platform", null);
    WinJS.Namespace.defineWithParent(MSEPlatform, "Playback", {
        TransportState: {
            unInitialize: "unInitialize", playing: "playing", paused: "paused", stopped: "stopped", starting: "starting", buffering: "buffering"
        }, SessionState: {
                notActivated: "notActivated", activated: "activated", ended: "ended", endedWithError: "endedWithError"
            }, ProtectionState: {
                unknown: "unknown", drmProtected: "drmProtected", unprotected: "unprotected"
            }, PlayerState: {
                ready: "ready", notReady: "notReady", error: "error"
            }, PlayerMode: {
                local: "local", remote: "remote"
            }, UsageContext: {
                user: "User", automatic: "Automatic"
            }
    })
})()
})();
/* >>>>>>/components/playback/session/playbacksession.js:9160 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.Playback");
(function() {
    "use strict";
    var MSEPlatform = WinJS.Namespace.define("MS.Entertainment.Platform", null);
    var playbackControlMixin = {
            _playbackControlCreateInstance: function _playbackControlCreateInstance() {
                if (!this._playbackControl) {
                    var parkedPlaybackHost = document.createElement("div");
                    WinJS.Utilities.addClass(parkedPlaybackHost, "removeFromDisplay");
                    document.body.appendChild(parkedPlaybackHost);
                    this._parkedPlaybackHost = parkedPlaybackHost;
                    this._playbackControlContainer = document.createElement("div");
                    this._playbackControlContainer.setAttribute("data-win-control", "MS.Entertainment.Platform.Playback.PlaybackControl");
                    this._parkedPlaybackHost.appendChild(this._playbackControlContainer);
                    if (!this._playbackControlContainer)
                        throw"_playbackControlCreateInstance: Error! Cannot create playbackControlContainer. Out of memory?";
                    this._playbackControl = new MSEPlatform.Playback.PlaybackControl(this._playbackControlContainer, {});
                    if (!this._playbackControl)
                        throw"_playbackControlCreateInstance: Error! Cannot create playbackControl. Out of memory?";
                }
            }, _parkedPlaybackHost: null, _playbackControlHost: null, _playbackControlContainer: null, _playbackControl: null, _playbackControlEvents: null, _iPlayback: null
        };
    var playlistMixin = {
            _playlistCreateInstance: function _playlistCreateInstance() {
                if (!this._playlist)
                    this._playlist = new MSEPlatform.Playback.Playlist.PlaylistCore(null, {});
                if (!this._playlist)
                    throw"_playlistCreateInstance: Error! Cannot create playlist. Out of memory?";
                this._playlist.addEventListener("shuffleChanged", function _shuffleChanged(e) {
                    if (e.detail && e.detail.oldValue !== undefined)
                        try {
                            if (this.smartDJSeed) {
                                if (e.detail.newValue)
                                    MS.Entertainment.Platform.Playback.assert(!e.detail.newValue, "Shuffle should not be set to on while playing Radio")
                            }
                            else {
                                if (!MS.Entertainment.Utilities.isAmsterdamApp)
                                    this._saveSessionStateValue("shuffle", e.detail.newValue);
                                this._playlist.shuffle = e.detail.newValue
                            }
                        }
                        catch(ex) {
                            MSEPlatform.Playback.Etw.traceString("PlaybackSession_shuffleChanged: ignored non-fatal exception: " + e)
                        }
                }.bind(this));
                this._playlist.addEventListener("repeatChanged", function _repeatChanged(e) {
                    if (e.detail && e.detail.oldValue !== undefined)
                        try {
                            if (this.smartDJSeed) {
                                if (e.detail.newValue)
                                    MS.Entertainment.Platform.Playback.assert(!e.detail.newValue, "Repeat should not be set to on while playing Radio")
                            }
                            else {
                                if (!MS.Entertainment.Utilities.isAmsterdamApp)
                                    this._saveSessionStateValue("repeat", e.detail.newValue);
                                this._playlist.repeat = e.detail.newValue
                            }
                        }
                        catch(ex) {
                            MSEPlatform.Playback.Etw.traceString("PlaybackSession_repeatChanged: ignored non-fatal exception: " + ex)
                        }
                }.bind(this));
                this._playlist.addEventListener("lastTrackPlayingChanged", function _lastTrackPlayingChanged(e) {
                    if (e.detail)
                        this.lastTrackPlaying = e.detail.newValue
                }.bind(this))
            }, _playlist: null
        };
    var ccRendererMixin = {
            _ccRendererCreateInstance: function _ccRendererCreateInstance(playbackControl, rendererContainer) {
                if (!this._ccRenderer)
                    this._ccRenderer = new MSEPlatform.Playback.ClosedCaptions.Renderer(playbackControl, rendererContainer)
            }, _ccRenderer: null
        };
    var videoNetstatsMixin = {
            enableVideoNetstats: {
                get: function enableVideoNetstats_get()
                {
                    return this._enableVideoNetstats
                }, set: function enableVideoNetstats_set(value)
                    {
                        this._enableVideoNetstats = value;
                        if (this._videoNetstats && this._videoNetstats.domElement) {
                            if (this._enableVideoNetstats)
                                WinJS.Utilities.removeClass(this._videoNetstats.domElement, "hideFromDisplay");
                            else
                                WinJS.Utilities.addClass(this._videoNetstats.domElement, "hideFromDisplay");
                            this._videoNetstats.drawOverlay = this._enableVideoNetstats
                        }
                    }
            }, _videoNetstats: null, _enableVideoNetstats: false
        };
    WinJS.Namespace.define("MS.Entertainment.Platform.Playback", {
        _musicVideosEnabled: false, _musicVideosParentalBlockSet: false, _isMusicVideoModeInEffect: {get: function Playback_isMusicVideoModeInEffect() {
                    return MS.Entertainment.Platform.Playback._musicVideosEnabled && !MS.Entertainment.Platform.Playback._musicVideosParentalBlockSet
                }}
    });
    var playbackSessionMixin = {
            sessionId: {get: function PlaybackSession_sessionId_get() {
                    return this._sessionId
                }}, isPlayingVideo: {get: function PlaybackSession_isPlayingVideo_get() {
                        return this.mediaElement && this.mediaElement.tagName === "VIDEO"
                    }}, _setMusicVideosEnabled: function _playbackSessionMixin_setMusicVideoEnabled(value, isPersistedValue) {
                    function hasMusicVideoIdAsync(item) {
                        var q = new MS.Entertainment.Data.Query.Music.SongDetails;
                        q.id = item.serviceId;
                        q.idType = item.serviceIdType;
                        q.impressionGuid = item.impressionGuid;
                        if (item.acquisitionData && item.acquisitionData.acquisitionContext && item.acquisitionData.acquisitionContextType) {
                            var acquisitionAdditionalContext = item.acquisitionData.acquisitionAdditionalContext || item.playlistName || String.empty;
                            q.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(item.acquisitionData.acquisitionContext, item.acquisitionData.acquisitionContextType, item.acquisitionData.acquisitionContextID, acquisitionAdditionalContext)
                        }
                        return q.execute().then(function trackQueryCompleted(completedQuery) {
                                var marketplaceItem = null;
                                if (completedQuery && completedQuery.result) {
                                    marketplaceItem = completedQuery.result;
                                    if (marketplaceItem && marketplaceItem.data)
                                        return marketplaceItem.data.hasMusicVideoId
                                }
                                return false
                            }, function trackQueryError() {
                                return false
                            })
                    }
                    MS.Entertainment.Platform.Playback.assert(MS.Entertainment.Utilities.isMusicApp2, "At this time this property is expected to be manipulated by Music2App only. Remove the assert if this is no longer true " + "or check if unintended call happened and remove it");
                    var oldValue = MS.Entertainment.Platform.Playback._isMusicVideoModeInEffect;
                    if (isPersistedValue) {
                        MS.Entertainment.Platform.Playback._musicVideosEnabled = value;
                        this._saveSessionStateValue("musicVideosEnabled", value)
                    }
                    else
                        MS.Entertainment.Platform.Playback._musicVideosParentalBlockSet = value;
                    if (!this.currentMedia)
                        return;
                    value = MS.Entertainment.Platform.Playback._isMusicVideoModeInEffect;
                    if (oldValue === !value)
                        if ((value && this.currentMedia.hasMusicVideoId) || (!value && !this.currentMedia.hasMusicVideoId && !this.currentMedia.hasServiceId))
                            this._playlist.activate(this.currentOrdinal);
                        else if (value && !this.currentMedia.hasMusicVideoId && this.currentMedia.hasServiceId && !MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(this.currentMedia))
                            hasMusicVideoIdAsync(this.currentMedia).done(function hasMusicVideoIdAsync_completes(hasMusicVideoId) {
                                if (hasMusicVideoId)
                                    this._playlist.activate(this.currentOrdinal)
                            }.bind(this), function ignoreError() {
                                MS.Entertainment.Platform.Playback.fail("hasMusicVideoIdAsync should not return on async error path. True or False only. Ignored.")
                            })
                }, musicVideosEnabled: {
                    get: function PlaybackSession_musicVideosEnabled_get() {
                        return MS.Entertainment.Platform.Playback._musicVideosEnabled
                    }, set: function PlaybackSession_musicVideosEnabled_set(value) {
                            this._setMusicVideosEnabled(value, true)
                        }
                }, musicVideosParentalBlockSet: {
                    get: function PlaybackSession_musicVideosParentalBlockSet() {
                        return MS.Entertainment.Platform.Playback._musicVideosParentalBlockSet
                    }, set: function PlaybackSession_musicVideosParentalBlockSet(value) {
                            if (value !== MS.Entertainment.Platform.Playback._musicVideosParentalBlockSet)
                                this._setMusicVideosEnabled(value, false)
                        }
                }, isMusicVideoModeInEffect: {get: function PlaybackSession_isMusicVideoModeInEffect() {
                        return MS.Entertainment.Platform.Playback._isMusicVideoModeInEffect
                    }}, playbackControlDom: {
                    get: function PlaybackSession_playbackControlDom_get() {
                        return this._playbackControlContainer
                    }, set: function PlaybackSession_playbackControlDom_set() {
                            throw"Error! playbackControlDom property is not settable";
                        }
                }, setDataSource: function PlaybackSession_setDataSource(dataSource) {
                    var that = this;
                    this._setDataSourcePromise = this._ensureSession().then(function _setDataSource2() {
                        that._iPlayback.reset(true);
                        return that._playlist.setDataSource(dataSource).then(function(mediaCollection) {
                                return mediaCollection
                            })
                    });
                    return this._setDataSourcePromise
                }, activate: function PlaybackSession_activate(playbackControlHost, index) {
                    if (!playbackControlHost)
                        return;
                    var that = this;
                    this._ensureSession().then(function _activate2() {
                        that.sessionState = MS.Entertainment.Platform.Playback.SessionState.activated;
                        playbackControlHost.appendChild(that._playbackControlContainer);
                        that._playbackControlHost = playbackControlHost;
                        that.pendingOrdinal = -1;
                        switch (that._iPlayback.currentTransportState) {
                            case MSEPlatform.Playback.TransportState.paused:
                                that._iPlayback.targetTransportState = MSEPlatform.Playback.TransportState.playing;
                                break;
                            case MSEPlatform.Playback.TransportState.stopped:
                                that.playAt(index);
                                break;
                            case MSEPlatform.Playback.TransportState.playing:
                                break;
                            default:
                                break
                        }
                    })
                }, deactivate: function PlaybackSession_deactivate(pausePlayback) {
                    if (!this._playbackControlHost)
                        return;
                    var pause = pausePlayback || false;
                    var that = this;
                    this._ensureSession().then(function _deactivate2() {
                        that.sessionState = MS.Entertainment.Platform.Playback.SessionState.notActivated;
                        if (pause)
                            that._iPlayback.targetTransportState = MSEPlatform.Playback.TransportState.paused;
                        var control = that._playbackControlHost.children[0];
                        that._playbackControlHost = null;
                        that._parkedPlaybackHost.appendChild(control)
                    })
                }, clear: function PlaybackSession_clear() {
                    MSEPlatform.Playback.Etw.traceString("PlaybackSession:: Clear");
                    if (this._iPlayback) {
                        this._iPlayback.targetTransportState = MSEPlatform.Playback.TransportState.stopped;
                        this._iPlayback.reset(true)
                    }
                    if (this._playlist)
                        this._playlist._dispose();
                    this.currentMedia = null;
                    this.pendingOrdinal = null;
                    if (this._setDataSourcePromise) {
                        this._setDataSourcePromise.cancel();
                        this._setDataSourcePromise = null
                    }
                    this.sessionState = MS.Entertainment.Platform.Playback.SessionState.notActivated;
                    MS.Entertainment.Platform.PlaybackHelpers.playActionInitiated = false
                }, relocate: function PlaybackSession_relocate(newHost) {
                    if (!newHost)
                        return;
                    if (typeof(newHost) === "object")
                        this._relocateLocal(newHost)
                }, playAt: function PlaybackSession_playAt(index, startTimeMsec, searchFor, maxSearchDistance) {
                    if (index < 0)
                        return;
                    if (this._playAtStartsWithFirst === undefined)
                        this._playAtStartsWithFirst = (index === undefined || index === this._playlist.first);
                    var that = this;
                    return this._ensureSession().then(function _playAt2() {
                            that._playlist.activate(index, startTimeMsec, searchFor, maxSearchDistance).then(function activated() {
                                if (that._playAtStartsWithFirst) {
                                    that._playlist.firstTrackPlaying = index;
                                    delete that._playAtStartsWithFirst
                                }
                            }, function errorToActivate(error) {
                                if (error && error.isUnplayableItemError)
                                    return that.nextPlayable(+error.context).then(function(atOrdinal) {
                                            if (atOrdinal !== null)
                                                that._playlist.activate(atOrdinal, startTimeMsec, searchFor, maxSearchDistance);
                                            else {
                                                that._playlist._playbackControl.errorDescriptor = MSEPlatform.Playback.makePlaybackError(MSEPlatform.Playback.Error.NS_E_WMP_MULTIPLE_ERROR_IN_PLAYLIST, "No playable media in the playlist");
                                                that._playlist._playbackControl.errorDescriptor.isCritical = true;
                                                that._playlist._playbackControl._observableNoLossAssign("playerState", MS.Entertainment.Platform.Playback.PlayerState.error);
                                                that._playlist._setMedia(null, null);
                                                that._playlist._setCurrentOrdinal(null)
                                            }
                                        })
                            })
                        })
                }, playAtOrdinal: function PlaybackSession_playAtOrdinal(ordinal, forcePlayback) {
                    var _onPlaylistMediaChangeComplete = function _onPlaylistMediaChangeComplete() {
                            if (this.currentTransportState === MS.Entertainment.Platform.Playback.TransportState.paused || this.currentTransportState === MS.Entertainment.Platform.Playback.TransportState.stopped)
                                this.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.playing;
                            this._playlist.removeEventListener("currentMediaChanged", _onPlaylistMediaChangeComplete)
                        }.bind(this);
                    if (forcePlayback)
                        this._playlist.addEventListener("currentMediaChanged", _onPlaylistMediaChangeComplete);
                    return this.playAt(ordinal)
                }, isMediaCurrentlyLoaded: function PlaybackSession_isMediaCurrentlyLoaded(media) {
                    var type = typeof media;
                    var match = false;
                    if (this.currentMedia)
                        switch (type) {
                            case"number":
                                match = MS.Entertainment.Utilities.isValidLibraryId(media) && this.currentMedia.libraryId === media;
                                break;
                            case"string":
                                match = !MS.Entertainment.Utilities.isEmptyGuid(media) && (this.currentMedia.zuneId === media || this.currentMedia.canonicalId === media || this.currentMedia.serviceId === media);
                                break;
                            case"object":
                                match = media && this.currentMedia.isEqual(media);
                                break
                        }
                    return match
                }, getProtectionState: function getProtectionState() {
                    if (this._iPlayback && this._iPlayback._player && this._iPlayback._player._currentMedia)
                        return this._iPlayback._player._currentMedia.protectionState;
                    else
                        return null
                }, filterClosedCaptions: function PlaybackSession_filterClosedCaptions(media) {
                    var closedCaptions = [];
                    var mediaInstanceId = String.empty;
                    if (this.currentMedia && this._iPlayback && this._iPlayback._player && this._iPlayback._player._currentMedia && this._iPlayback._player._currentMedia.mediaInstanceId && !this.currentMedia.mediaInstanceId)
                        mediaInstanceId = this._iPlayback._player._currentMedia.mediaInstanceId;
                    var filterToRelevantClosedCaptionFiles = function filterToRelevantClosedCaptionFiles(closedCaptionFile) {
                            var ccFileMediaInstanceID = closedCaptionFile.mediaInstanceId.toUpperCase();
                            if (!MS.Entertainment.Utilities.isSameGuid(ccFileMediaInstanceID, mediaInstanceId))
                                return false;
                            return true
                        };
                    if (media && media.closedCaptionFiles && media.closedCaptionFiles.length)
                        closedCaptions = media.closedCaptionFiles.filter(filterToRelevantClosedCaptionFiles);
                    return closedCaptions
                }, _relocateLocal: function PlaybackSession_relocateLocal(newHost) {
                    var that = this;
                    this._ensureSession().then(function _relocate2() {
                        newHost.appendChild(that._playbackControlContainer);
                        that._playbackControlHost = newHost
                    })
                }, _restoreSessionState: function PlaybackSession_restoreSessionState() {
                    var shuffle = false;
                    var repeat = false;
                    try {
                        shuffle = MS.Entertainment.Utilities.getUserRoamingSetting("shuffle") || false;
                        repeat = MS.Entertainment.Utilities.getUserRoamingSetting("repeat") || false;
                        MS.Entertainment.Platform.Playback._musicVideosEnabled = MS.Entertainment.Utilities.getUserRoamingSetting("musicVideosEnabled") || false
                    }
                    catch(e) {}
                    if (this.canShuffle)
                        this._playlist.shuffle = shuffle;
                    if (this.canRepeat)
                        this._playlist.repeat = repeat
                }, _saveSessionStateValue: function PlaybackSession_saveSessionStateValue(key, value) {
                    MS.Entertainment.Utilities.setUserRoamingSetting(key, value)
                }, _ensureSession: function PlaybackSession_ensureSession() {
                    if (!this._playbackControl)
                        return WinJS.Promise.wrapError("PlaybackSession_ensureSession: Error! PlaybackControl not created.");
                    return this._sessionInitializedPromise
                }, _repositionOnError: function PlaybackSession__repositionOnError() {
                    if (this._playlist && this._playlist._dataSource && this._playlist._dataSource.size === 1)
                        return null;
                    if (this.error.isCritical)
                        return null;
                    else
                        return this.first;
                    return null
                }, _onPlaylistEnded: function PlaybackSession_onPlaylistEnded()
                {
                    this._iPlayback.waitForNoLossAssignmentsComplete().then(function assignsComplete() {
                        MSEPlatform.Playback.Etw.traceString("PlaybackSession:: _onPlaylistEnded");
                        if (MS.Entertainment.Utilities.isMusicApp && !this.isPlayToReceiverSessionRunning && !this.smartDJSeed) {
                            var repositionOrdinal = this.first;
                            this.pendingOrdinal = repositionOrdinal;
                            if (this.error) {
                                this.sessionState = MS.Entertainment.Platform.Playback.SessionState.endedWithError;
                                var repositionOnErrorOrdinal = this._repositionOnError();
                                if (repositionOnErrorOrdinal === null)
                                    return;
                                else
                                    repositionOrdinal = repositionOnErrorOrdinal
                            }
                            else
                                this.sessionState = MS.Entertainment.Platform.Playback.SessionState.ended;
                            WinJS.Promise.timeout(100).done(function repositionPlayback() {
                                this.autoPlay = false;
                                this.playAt(repositionOrdinal);
                                this.pendingOrdinal = repositionOrdinal
                            }.bind(this))
                        }
                        else
                            this.sessionState = MS.Entertainment.Platform.Playback.SessionState.ended
                    }.bind(this))
                }, _onPlaylistMediaChanged: function PlaybackSession_onPlaylistMediaChanged(e) {
                    var newMediaItem = (e && e.detail) ? e.detail.newValue : null;
                    if (!newMediaItem && !this._playlist.settingDataSource) {
                        this.currentMedia = null;
                        this._onPlaylistEnded();
                        return
                    }
                    this._updateCurrentMedia(newMediaItem);
                    if (!newMediaItem)
                        return;
                    if (MS.Entertainment.Utilities.isMusicApp1)
                        if (!MS.Entertainment.UI.Shell.ImageLoader.isBlobUrl(newMediaItem.imageUri))
                            MS.Entertainment.UI.Shell.ImageLoader.getServiceImageUrl(newMediaItem, 100, 100).then(function gotAlbumArt(uri) {
                                MSEPlatform.Playback.Etw.traceString("PlaybackSession_onPlaylistMediaChanged: albumArtUri = " + uri);
                                var artUri = new Windows.Foundation.Uri(uri);
                                this.assignTrackNameAndAlbumArt(artUri)
                            }.bind(this), function noAlbumArt(error) {
                                this.assignTrackNameAndAlbumArt(null)
                            }.bind(this));
                        else if (MS.Entertainment.Utilities.isMusicApp1)
                            MSEPlatform.Playback.makeLocalImagePromise.done(function assignImageToMTC() {
                                var imagePath = "ms-appdata:///local/" + MS.Entertainment.Activation.localImageFileNameforMTC;
                                var artUri = new Windows.Foundation.Uri(imagePath);
                                this.assignTrackNameAndAlbumArt(artUri)
                            }.bind(this), function assignImageToMTC_error() {
                                this.assignTrackNameAndAlbumArt(null)
                            }.bind(this))
                }, assignTrackNameAndAlbumArt: (function PlaybackSession_assignTrackNameAndAlbumArt_closure() {
                    var mediaControlsAvailable = true;
                    return function assignTrackNameAndAlbumArt(uri) {
                            try {
                                if (mediaControlsAvailable && Windows.Media.MediaControl) {
                                    Windows.Media.MediaControl.albumArt = uri;
                                    if (this.currentMedia) {
                                        Windows.Media.MediaControl.trackName = this.currentMedia.name;
                                        MSEPlatform.Playback.Etw.traceString("PlaybackSession_assignTrackNameAndAlbumArt::Assigned trackname to MTC:" + this.currentMedia.name);
                                        if (this.currentMedia.artistName) {
                                            Windows.Media.MediaControl.artistName = this.currentMedia.artistName;
                                            MSEPlatform.Playback.Etw.traceString("PlaybackSession_assignTrackNameAndAlbumArt::Assigned artistname to MTC:" + this.currentMedia.artistName)
                                        }
                                        else
                                            Windows.Media.MediaControl.artistName = ""
                                    }
                                    else
                                        Windows.Media.MediaControl.trackName = "";
                                    MSEPlatform.Playback.Etw.traceString("PlaybackSession_assignTrackNameAndAlbumArt::Assigned album art uri to MTC")
                                }
                            }
                            catch(ex) {
                                mediaControlsAvailable = false
                            }
                        }
                })(), _onAudioAdChanged: function _onAudioAdChanged() {
                    this.canSeek = !this.isAudioAd;
                    this._updateCanSkipBackward();
                    this._updateCanSkipForward();
                    this._updateCurrentMediaForAudioAdChange()
                }, _onSignedInUserChanged: function _onSignedInUserChanged(newXuid) {
                    if (this._signedInUserXuid !== newXuid) {
                        this._signedInUserXuid = newXuid;
                        this._restoreSessionState()
                    }
                }, _onCurrentPositionChanged: function _onCurrentPositionChanged(value) {
                    if (!this._playlist.canSkipBackward)
                        this._updateCanSkipBackward()
                }, _updateCanSkipBackward: function _updateCanSkipBackward() {
                    var canSkip = !this._iPlayback.isAudioAd && (this._playlist.canSkipBackward || this._iPlayback.currentPosition > this._skipBackThreshold);
                    if (canSkip !== this.canSkipBackward)
                        this.canSkipBackward = canSkip
                }, _updateCanSkipForward: function _updateCanSkipForward() {
                    var canSkip = true;
                    if (MS.Entertainment.Utilities.isMusicApp)
                        canSkip = !this._iPlayback.isAudioAd && this._playlist.canSkipForward;
                    if (canSkip !== this.canSkipForward)
                        this.canSkipForward = canSkip
                }, _updateCanShuffle: function _updateCanShuffle() {
                    this.canShuffle = this._playlist.canShuffle;
                    if (this.canShuffle)
                        this.shuffle = MS.Entertainment.Utilities.getUserRoamingSetting("shuffle") || false;
                    else
                        this.shuffle = false
                }, _updateCanRepeat: function _updateCanRepeat() {
                    this.canRepeat = this._playlist.canRepeat;
                    if (this.canRepeat)
                        this.repeat = MS.Entertainment.Utilities.getUserRoamingSetting("repeat") || false;
                    else
                        this.repeat = false
                }, _onVisibilityChanged: function _onVisibilityChanged() {
                    if (document.hidden)
                        this.disableTimeUpdate();
                    else {
                        this.enableTimeUpdate();
                        this.forceTimeUpdate()
                    }
                }, _updateCurrentMediaForAudioAdChange: function _updateCurrentMediaForAudioAdChange(newMediaItem) {
                    if (MS.Entertainment.Utilities.isApp2)
                        return;
                    if (this._iPlayback._player && this._iPlayback._player._currentMedia && this._iPlayback._player._currentMedia._mediaItem)
                        this.currentMedia = this._iPlayback._player._currentMedia._mediaItem.data;
                    else if (!this._iPlayback._player || !this._iPlayback._player._currentMedia)
                        this.currentMedia = null
                }, _updateCurrentMedia: function _updateCurrentMedia(newMediaItem) {
                    if (MS.Entertainment.Utilities.isApp2 || newMediaItem === null)
                        this.currentMedia = newMediaItem;
                    else
                        this._updateCurrentMediaForAudioAdChange()
                }, _onPlayerStateChanged: function _onPlayerStateChanged(){}, _onRemoteSessionRunningChanged: function _onRemoteSessionRunningChanged(e) {
                    if (e) {
                        this._closedCaptionSavedState = this.closedCaptionsOn;
                        this.closedCaptionsOn = false
                    }
                    else if (this._closedCaptionSavedState !== null)
                        this.closedCaptionsOn = this._closedCaptionSavedState
                }, companionExperience: {get: function PlaybackSession_companionExperience_get() {
                        return this._companionExperience
                    }}, flushPreroll: function PlaybackSession_flushPreroll(networkStatus) {
                    var currentPlayabilityVersion = this.itemsPlayability;
                    this.updateAndNotify("itemsPlayability", currentPlayabilityVersion + 1);
                    if (this._playlist)
                        this._playlist.flushPreroll()
                }, skipFwd: function PlaybackSession_skipFwd() {
                    MS.Entertainment.Platform.Playback.assert(this.canSkipForward, "skipFwd() should not be called if canSkipForward is false");
                    return this._playlist.skipFwd().then(null, function failedToSkip(err) {
                            if (err && err.isSkipFwdOutOfRangeError)
                                if (this.smartDJSeed) {
                                    this._iPlayback.targetTransportState = MSEPlatform.Playback.TransportState.paused;
                                    WinJS.Promise.timeout().then(this._onPlaylistEnded.bind(this))
                                }
                        }.bind(this))
                }, skipBack: function PlaybackSession_skipBack(forcePreviousTrack) {
                    MS.Entertainment.Platform.Playback.assert(this.canSkipBackward, "skipBack() should not be called if canSkipBackward is false");
                    if ((forcePreviousTrack || this.currentPosition <= this._skipBackThreshold) && this._playlist.canSkipBackward)
                        return this._playlist.skipBack().then(null, function failedToSkip(err) {
                                if (err && err.isSkipBkwdOutOfRangeError)
                                    {}
                            }.bind(this));
                    else
                        return WinJS.Promise.as(this._iPlayback.seekToPosition(0))
                }, _sessionId: null, _sessionInitializedPromise: null, _setDataSourcePromise: WinJS.Promise.as(), _companionExperience: null
        };
    WinJS.Namespace.defineWithParent(MSEPlatform, "Playback", {PlaybackSessionBase: WinJS.Class.mix(function mixConstructor(){}, MS.Entertainment.UI.Framework.EventMixin, MS.Entertainment.UI.Framework.UpdatePropertyMixin, playbackSessionMixin, playbackControlMixin, playlistMixin, ccRendererMixin, videoNetstatsMixin, WinJS.Binding.mixin)});
    WinJS.Namespace.defineWithParent(MSEPlatform, "Playback", {
        PlaybackSession: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Platform.Playback.PlaybackSessionBase", function playbackSession_constructor(id) {
            var completePromise;
            this._initObservable({});
            this._sessionInitializedPromise = new WinJS.Promise(function(c, e, p) {
                completePromise = c
            });
            this._sessionId = (!id ? MSEPlatform.SessionManager._createSessionId() : id);
            this._playbackControlCreateInstance();
            this._signOutHandlerBound = this._signOutHandler.bind(this);
            var onPlaybackSessionInitialized = function() {
                    var isInitialized;
                    if (this._playbackControlEvents) {
                        this._playbackControlEvents.cancel();
                        this._playbackControlEvents = null;
                        isInitialized = true
                    }
                    if (isInitialized) {
                        this._playlistCreateInstance();
                        this._iPlayback = this._playbackControl.getPlaybackInterface();
                        this._playlist.setPlaybackControl(this._iPlayback);
                        if (MS.Entertainment.Utilities.isVideoApp)
                            this._ccRendererCreateInstance(this._iPlayback, this._playbackControl.getClosedCaptionsContainer());
                        if (MS.Entertainment.Utilities.isVideoApp) {
                            this._videoNetstats = this._playbackControl.getVideoNetstatsContainer();
                            if (!MS.Entertainment.Utilities.isApp2 && (new Microsoft.Entertainment.Configuration.ConfigurationManager).playback.enableVideoQualitySelector)
                                this.enableVideoNetstats = !!(Windows.Storage.ApplicationData.current.roamingSettings.values["enableVideoNetstats"])
                        }
                        MS.Entertainment.ProxyHelpers.proxyProperties(this, this._iPlayback, ["targetTransportState", "autoPlay", "_volume", "muted", "videoEncoding", "videoStreamStatistics"]);
                        MS.Entertainment.ProxyHelpers.proxyObservables(this, this._iPlayback, ["playerState", "error", "currentTransportState", "isAudioAd", "isPreview", "duration", "currentPosition", "videoWidth", "videoHeight", "seekedPosition", "errorDescriptor", "playbackRate", "minPlaybackRate", "maxPlaybackRate", "isRemoteSessionRunning", "mediaElement", "currentRequestedBitrate"]);
                        MS.Entertainment.ProxyHelpers.delegateFunctions(this, this._iPlayback, ["seekToPosition", "fastFwd", "fastReverse", "slowFwd", "slowReverse", "enableTimeUpdate", "disableTimeUpdate", "forceTimeUpdate", "isRemoteSession", "notifyNetworkConnectionChanged", "selectVideoBitrate", "getAudioTracks", "getSelectedAudioTrack", "selectAudioTrack", "setPlaybackRate"]);
                        MS.Entertainment.ProxyHelpers.proxyProperties(this, this._playlist, ["first"]);
                        MS.Entertainment.ProxyHelpers.proxyObservables(this, this._playlist, ["shuffle", "repeat", "canShuffle", "canRepeat", "canSkipBackward", "canSkipForward", "mediaCollection", "currentOrdinal", "currentNowPlayingPlaylistLibraryId", "smartDJSeed"]);
                        MS.Entertainment.ProxyHelpers.delegateFunctions(this, this._playlist, ["before", "after", "savePlaylist", "insertAtEnd", "position", "nextPlayable", "previousPlayable"]);
                        if (MS.Entertainment.Utilities.isVideoApp) {
                            MS.Entertainment.ProxyHelpers.proxyProperties(this, this._ccRenderer, ["closedCaptionsOn"]);
                            MS.Entertainment.ProxyHelpers.proxyObservables(this, this._ccRenderer, ["ccLcid"])
                        }
                        try {
                            this._playLog = new MS.Entertainment.Platform.Playback.PlayLog(this._iPlayback)
                        }
                        catch(e) {
                            MS.Entertainment.Platform.Playback.fail("PlayLog should always be loaded before PlaybackSession. " + (e && e.toString()))
                        }
                        if (MS.Entertainment.Utilities.isVideoApp)
                            this._concurrentStreamingRestriction = new MS.Entertainment.Platform.Playback.ConcurrentStreamingRestriction(this._iPlayback);
                        this._playlist.addEventListener("currentMediaChanged", this._onPlaylistMediaChanged.bind(this));
                        this._iPlayback.addEventListener("currentPositionChanged", this._onCurrentPositionChanged.bind(this));
                        this._restoreSessionState();
                        MS.Entertainment.Platform.Playback.Etw.traceSessionInitialized();
                        completePromise();
                        this._iPlayback.bind("isAudioAd", this._onAudioAdChanged.bind(this));
                        this._iPlayback.bind("playerState", this._onPlayerStateChanged.bind(this));
                        this._iPlayback.bind("isRemoteSessionRunning", this._onRemoteSessionRunningChanged.bind(this));
                        this._playlist.bind("canSkipBackward", this._updateCanSkipBackward.bind(this));
                        this._playlist.bind("canSkipForward", this._updateCanSkipForward.bind(this));
                        this._playlist.bind("canShuffle", this._updateCanShuffle.bind(this));
                        this._playlist.bind("canRepeat", this._updateCanRepeat.bind(this));
                        this._visibilityChanged = this._onVisibilityChanged.bind(this);
                        document.addEventListener("visibilitychange", this._visibilityChanged, false);
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signedInUser))
                            this._signedInUserBinding = WinJS.Binding.bind(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser), {xuid: this._onSignedInUserChanged.bind(this)});
                        if (this._constructionTime)
                            MSEPlatform.Playback.Etw.traceString("session is initialized " + (new Date - this._constructionTime) + "ms after construction");
                        else
                            MSEPlatform.Playback.Etw.traceString("session is initialized during construction")
                    }
                }.bind(this);
            if (this._playbackControl.controlInitialized)
                onPlaybackSessionInitialized();
            else
                this._playbackControlEvents = MS.Entertainment.Utilities.addEventHandlers(this._playbackControl, {onControlInitialized: onPlaybackSessionInitialized});
            this._constructionTime = new Date;
            MSEPlatform.Playback.Etw.traceString("session constructed")
        }, {
            canShuffle: MS.Entertainment.UI.Framework.observableProperty("canShuffle", true), canRepeat: MS.Entertainment.UI.Framework.observableProperty("canRepeat", true), canControlMedia: MS.Entertainment.UI.Framework.observableProperty("canControlMedia", true), canFastForward: MS.Entertainment.UI.Framework.observableProperty("canFastForward", false), canSlowForward: MS.Entertainment.UI.Framework.observableProperty("canSlowForward", false), canFastReverse: MS.Entertainment.UI.Framework.observableProperty("canFastReverse", false), canSlowReverse: MS.Entertainment.UI.Framework.observableProperty("canSlowReverse", false), canSeek: MS.Entertainment.UI.Framework.observableProperty("canSeek", true), currentMedia: MS.Entertainment.UI.Framework.observableProperty("currentMedia", null), sessionState: MS.Entertainment.UI.Framework.observableProperty("sessionState", MS.Entertainment.Platform.Playback.SessionState.notActivated), canSkipBackward: MS.Entertainment.UI.Framework.observableProperty("canSkipBackward", true), canSkipForward: MS.Entertainment.UI.Framework.observableProperty("canSkipForward", true), lastPlayedMedia: MS.Entertainment.UI.Framework.observableProperty("lastPlayedMedia", null), lastPlayedDuration: MS.Entertainment.UI.Framework.observableProperty("lastPlayedDuration", 0), lastPlayedPosition: MS.Entertainment.UI.Framework.observableProperty("lastPlayedPosition", 0), isPlayToReceiverSessionRunning: MS.Entertainment.UI.Framework.observableProperty("isPlayToReceiverSessionRunning", false), lastTrackPlaying: MS.Entertainment.UI.Framework.observableProperty("lastTrackPlaying", false), itemsPlayability: MS.Entertainment.UI.Framework.observableProperty("itemsPlayability", 0), _skipBackThreshold: 5000, _visibilityChanged: null, _closedCaptionSavedState: null, _signedInUserXuid: null, _signedInUserBinding: null, _signOutHandlerBound: null, _signInBound: false, _signOutHandler: function _signOutHandler() {
                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    if (!signIn.isSignedIn)
                        this.setLastPlayedMedia(null)
                }, currentMediaKey: {get: function get_CurrentMediaKey() {
                        return this._playlist ? this._playlist._currentMediaKey : null
                    }}, setLastPlayedMedia: function setLastPlayedMedia(media) {
                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    if (media && signIn.isSignedIn) {
                        if (!this._signInBound) {
                            signIn.bind("isSignedIn", this._signOutHandlerBound);
                            this._signInBound = true
                        }
                    }
                    else if (this._signInBound) {
                        signIn.unbind("isSignedIn", this._signOutHandlerBound);
                        this._signInBound = false
                    }
                    MS.Entertainment.Platform.Playback.assert(media === null || media === this.currentMedia, "setLastPlayedMedia called with something other than currentMedia");
                    this.lastPlayedMedia = media;
                    this.lastPlayedDuration = (media === null) ? 0 : this.duration;
                    this.lastPlayedPosition = (media === null) ? 0 : this.currentPosition
                }, isVideoAdSupported: {get: function() {
                        return this._playbackControl.isVideoAdSupported
                    }}
        }, {isPlaybackSession: function isPlaybackSession(object) {
                return MS.Entertainment.Platform.Playback.PlaybackSession.prototype.isPrototypeOf(object)
            }}), makeLocalImageFileFromThumbnailPromise: (function PlaybackSession_makeLocalImageFileFromThumbnailPromise_closure() {
                var makeLocalImageFilePromise;
                return function makeLocalImageFileFromThumbnailPromise(thumbnail) {
                        if (makeLocalImageFilePromise) {
                            makeLocalImageFilePromise.cancel();
                            makeLocalImageFilePromise = null
                        }
                        makeLocalImageFilePromise = new WinJS.Promise(function makeLocalImageFile(completed, error) {
                            var timer = function attemptFileCreation(count) {
                                    Windows.Storage.ApplicationData.current.localFolder.createFileAsync(MS.Entertainment.Activation.localImageFileNameforMTC, Windows.Storage.CreationCollisionOption.replaceExisting).done(completed, function createFileAsync_Error(createFileError) {
                                        if (count <= 6)
                                            WinJS.Promise.timeout(500).then(function retryOnError() {
                                                timer(count + 1)
                                            });
                                        else
                                            error(createFileError)
                                    })
                                };
                            timer(0)
                        });
                        var size;
                        var reader;
                        var localFile;
                        var inputStream;
                        makeLocalImageFilePromise = makeLocalImageFilePromise.then(function(file) {
                            inputStream = thumbnail.getInputStreamAt(0);
                            reader = new Windows.Storage.Streams.DataReader(inputStream);
                            size = thumbnail.size;
                            localFile = file;
                            return reader.loadAsync(size)
                        }).then(function loadAsync_success() {
                            var buffer = new Array(size);
                            reader.readBytes(buffer);
                            return Windows.Storage.FileIO.writeBytesAsync(localFile, buffer)
                        }, function loadAsync_error(error) {
                            MS.Entertainment.Platform.Playback.Etw.traceString("imageLoader::_loadBytesAsync_Error")
                        }).then(function() {
                            if (reader)
                                reader.close();
                            if (inputStream)
                                inputStream.close()
                        }).then(function() {
                            makeLocalImageFilePromise = null
                        });
                        return makeLocalImageFilePromise
                    }
            })(), makeLocalImagePromise: null
    })
})()
})();
/* >>>>>>/components/playback/controls/playbackcontrol.js:9818 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.Playback");
(function() {
    "use strict";
    var MSEPlatform = WinJS.Namespace.define("MS.Entertainment.Platform", null);
    WinJS.Namespace.defineWithParent(MSEPlatform, "Playback", {PlaybackControl: MS.Entertainment.UI.Framework.defineUserControl("/Components/Playback/Controls/PlaybackControl.html#playbackControlTemplate", function PlaybackControl_constructor(element, options) {
            MSEPlatform.Playback.Etw.traceString("PlaybackControl::Constructor: ")
        }, {
            initialize: function PlaybackControl_initialize() {
                MS.Entertainment.Platform.Playback.Etw.traceString("PlaybackControl::initialize");
                this._iPlayback = new MS.Entertainment.Platform.Playback.PlaybackController.createInstance;
                this._player = MS.Entertainment.Platform.Playback.XPlayer.createInstance(this._playerContainer);
                if (this._iPlayback === null || this._player === null)
                    throw"PlaybackControl_initialize: Error! failed to create XPlayer";
                this._iPlayback.setPlayer(this._player);
                this.controlInitialized = true;
                MSEPlatform.Playback.Etw.traceControlInitialized();
                this.dispatchEvent("onControlInitialized", {sender: this})
            }, dispose: function PlaybackControl_dispose() {
                    this.release()
                }, release: function release() {
                    if (this._iPlayback) {
                        this._iPlayback.dispose();
                        this._iPlayback = null;
                        this._player.dispose();
                        this._player = null
                    }
                }, getPlaybackInterface: function PlaybackControl_getPlaybackInterface() {
                    if (this._iPlayback === null)
                        throw"PlaybackControl_getPlaybackInterface: Error! iPlayback is null";
                    return this._iPlayback
                }, getClosedCaptionsContainer: function PlaybackControl_getClosedCaptionsContainer() {
                    return this._closedCaptionsContainer
                }, getVideoNetstatsContainer: function PlaybackControl_getVideoNetstatsContainer() {
                    return this._videoNetstatsContainer
                }, isVideoAdSupported: {get: function() {
                        var iPlayback;
                        try {
                            iPlayback = this.getPlaybackInterface()
                        }
                        catch(e) {
                            return false
                        }
                        if (iPlayback._currentMedia)
                            return iPlayback._currentMedia.videoAdSupported;
                        else
                            return false
                    }}, _iPlayback: null, _player: null, _playerContainer: null, _closedCaptionsContainer: null, _videoNetstatsContainer: null
        }, {controlInitialized: false})})
})()
})();
/* >>>>>>/components/session/sessionmgr.js:9872 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform");
    var MSEPlatform = WinJS.Namespace.define("MS.Entertainment.Platform", null);
    var DeviceGroup = WinJS.Namespace.define("Microsoft.Entertainment.Service.Requests.DeviceGroup", null);
    WinJS.Namespace.defineWithParent(MSEPlatform, "LivingRoomCompanion", {
        BrowserUrlState: {
            updated: "updated", updating: "updating"
        }, BrowserInputMode: {
                browser: "browser", dpad: "dpad"
            }, SessionState: {
                unInitialize: "unInitialize", disconnecting: "disconnecting", disconnected: "disconnected", connecting: "connecting", connected: "connected", transferringToRemote: "transferringToRemote", transferringToLocal: "transferringToLocal", error: "error", connectedTemporaryError: "connectedTemporaryError"
            }, AppLifetime: {
                none: "none", suspending: "suspending", resuming: "resuming", running: "running", shutdown: "shutdown"
            }, WellKnownTitleId: {
                ze: 1481115739, hu: 810026961, nx: 960956369, dd: 4294838225, mc: 1480918995, bb: 1481115776
            }, isWellKnownTitle: function isWellKnownTitle(titleId, wellKnownTitleId) {
                if (!titleId || isNaN(titleId))
                    return false;
                return (parseInt(titleId) === wellKnownTitleId)
            }, LaunchFirstAction: {
                playNow: "PlayNow", addNow: "AddNow"
            }
    });
    WinJS.Namespace.defineWithParent(MS.Entertainment, "Platform", {SessionManager: MS.Entertainment.UI.Framework.define(function SessionManager_constructor() {
            this._createMediaControlMethods();
            this._bindMediaControls();
            this._bindSystemMediaTransportControls();
            this._networkStatusBinding = WinJS.Binding.bind(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {networkStatus: this._onNetworkStatusChanged.bind(this)})
        }, {
            nowPlayingSession: {get: function SessionManager_nowPlayingSession_get() {
                    return this._nowPlayingSession
                }}, primarySession: {get: function SessionManager_primarySession_get() {
                        return this._primarySession
                    }}, setPrimarySession: function SessionManager_setPrimarySession(sessionId) {
                    if (!this.sessions || !sessionId)
                        return null;
                    if (this._stopPromise && sessionId === MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying) {
                        this._stopPromise.cancel();
                        this._stopPromise = null
                    }
                    if (this._primarySession && this._primarySession.sessionId === sessionId)
                        return this._primarySession;
                    if (this._primarySession)
                        if (Windows && Windows.Media && Windows.Media.MediaControl) {
                            this._primarySession.unbind("canSkipForward", this._bindMediaControlsNext);
                            this._primarySession.unbind("canSkipBackward", this._bindMediaControlsPrevious)
                        }
                    var activeSession = this.getSession(sessionId);
                    if (activeSession) {
                        this._primarySession = activeSession;
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).primarySessionId = this._primarySession.sessionId;
                        if (Windows && Windows.Media && Windows.Media.MediaControl) {
                            activeSession.bind("canSkipForward", this._bindMediaControlsNext);
                            activeSession.bind("canSkipBackward", this._bindMediaControlsPrevious)
                        }
                    }
                    return activeSession
                }, _stopPromise: null, createSession: function SessionManager_createSession() {
                    this.sessions = this.sessions || {};
                    var session = new MSEPlatform.Playback.PlaybackSession;
                    this.sessions[session.sessionId] = session;
                    return session
                }, getSession: function SessionManager_getSession(sessionId) {
                    var session = null;
                    if (sessionId in this.sessions)
                        session = this.sessions[sessionId];
                    return session
                }, activateSession: function SessionManager_activateSession(controlHost, sessionId) {
                    var session = (!sessionId ? this._nowPlayingSession : this.sessions[sessionId]);
                    if (session)
                        WinJS.Promise.join([session._setDataSourcePromise]).then(function() {
                            session.activate(controlHost)
                        })
                }, deactivateSession: function SessionManager_deactivateSession(pausePlayback, sessionId) {
                    var session = (!sessionId ? this._nowPlayingSession : this.sessions[sessionId]);
                    if (session)
                        session.deactivate(pausePlayback)
                }, relocateSession: function SessionManager_relocateSession(newHost, sessionId) {
                    var session = (!sessionId ? this._nowPlayingSession : this.sessions[sessionId]);
                    if (session)
                        session.relocate(newHost)
                }, displayRequestActive: function SessionManager_displayRequestActive() {
                    if (this._displayRequest) {
                        if (this._isDisplayRequestActive)
                            return;
                        try {
                            this._displayRequest.requestActive();
                            this._isDisplayRequestActive = true
                        }
                        catch(e) {}
                    }
                }, displayRequestRelease: function SessionManager_displayRequestRelease() {
                    if (this._displayRequest) {
                        if (!this._isDisplayRequestActive)
                            return;
                        try {
                            this._displayRequest.requestRelease();
                            this._isDisplayRequestActive = false
                        }
                        catch(e) {}
                    }
                }, clearCachedPBMState: function SessionManager_clearCachedPBMState() {
                    if (this._transportStateBeforePaused !== MS.Entertainment.Platform.Playback.TransportState.unInitialize) {
                        MSEPlatform.Playback.Etw.traceString("Clearing cached state '" + this._transportStateBeforePaused + "' from when we paused due to PBM event");
                        this._transportStateBeforePaused = MS.Entertainment.Platform.Playback.TransportState.unInitialize
                    }
                }, _createMediaControlMethods: function _createMediaControlMethods() {
                    var mediaControls = null;
                    var systemMediaTransportControls = null;
                    if (!MS.Entertainment.Utilities.isApp2)
                        mediaControls = WinJS.Utilities.getMember("Media.MediaControl", Windows);
                    if (WinJS.Utilities.getMember("Media.SystemMediaTransportControls", Windows) && (MS.Entertainment.Utilities.isMusicApp2 || MS.Entertainment.Utilities.isAmsterdamApp))
                        systemMediaTransportControls = Windows.Media.SystemMediaTransportControls.getForCurrentView();
                    this._bindMediaControlsNext = MS.Entertainment.Utilities.bindAndMarkSupportedForProcessing(function SessionManager_bindMediaControlsNext(canSkipForward) {
                        if (mediaControls)
                            if (canSkipForward && !this._nextTrackPressedListener)
                                try {
                                    this._nextTrackPressedListener = MS.Entertainment.UI.Framework.addEventHandlers(mediaControls, {nexttrackpressed: function nextTrackPressed() {
                                            this._mediaControlNext()
                                        }.bind(this)}, false)
                                }
                                catch(ex) {
                                    MSEPlatform.Playback.Etw.traceString("sessionManager::_createMediaControlMethods(): Non-fatal exception caught in addEventListener(nexttrackpressed): " + ex)
                                }
                            else if (!canSkipForward && this._nextTrackPressedListener) {
                                this._nextTrackPressedListener.cancel();
                                this._nextTrackPressedListener = null
                            }
                        if (systemMediaTransportControls) {
                            systemMediaTransportControls.isNextEnabled = canSkipForward;
                            systemMediaTransportControls.displayUpdater.update()
                        }
                    }, this);
                    this._bindMediaControlsPrevious = MS.Entertainment.Utilities.bindAndMarkSupportedForProcessing(function SessionManager_bindMediaControlsPrevious(canSkipBack) {
                        if (mediaControls)
                            if (canSkipBack && !this._previousTrackPressedListener)
                                try {
                                    this._previousTrackPressedListener = MS.Entertainment.UI.Framework.addEventHandlers(mediaControls, {previoustrackpressed: function previousTrackPressed() {
                                            this._mediaControlPrevious()
                                        }.bind(this)}, false)
                                }
                                catch(ex) {
                                    MSEPlatform.Playback.Etw.traceString("sessionManager::_createMediaControlMethods(): Non-fatal exception caught in addEventListener(previoustrackpressed): " + ex)
                                }
                            else if (!canSkipBack && this._previousTrackPressedListener) {
                                this._previousTrackPressedListener.cancel();
                                this._previousTrackPressedListener = null
                            }
                        if (systemMediaTransportControls) {
                            systemMediaTransportControls.isPreviousEnabled = canSkipBack;
                            systemMediaTransportControls.displayUpdater.update()
                        }
                    }, this);
                    this._mediaControlNext = MS.Entertainment.Utilities.bindAndMarkSupportedForProcessing(function SessionManager_mediaControlNext(source) {
                        source = source ? source : "mediaKey";
                        if (this.primarySession)
                            this.primarySession._ensureSession().then(function sessionMgr_doMediaControlNext() {
                                if (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrackOrMusicVideo(this.primarySession.currentMedia))
                                    this.primarySession.skipFwd();
                                else {
                                    var positionMs = this.primarySession.forceTimeUpdate();
                                    this.primarySession.seekToPosition(positionMs + 29000)
                                }
                            }.bind(this));
                        MS.Entertainment.Utilities.Telemetry.logNextClicked(source)
                    }, this);
                    this._mediaControlPrevious = MS.Entertainment.Utilities.bindAndMarkSupportedForProcessing(function SessionManager_mediaControlPrevious(source, forcePreviousTrack) {
                        source = source ? source : "mediaKey";
                        if (this.primarySession)
                            this.primarySession._ensureSession().then(function sessionMgr_doMediaControlPrevious() {
                                if (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrackOrMusicVideo(this.primarySession.currentMedia))
                                    this.primarySession.skipBack(forcePreviousTrack);
                                else {
                                    var positionMs = this.primarySession.forceTimeUpdate();
                                    this.primarySession.seekToPosition(positionMs - 15000)
                                }
                            }.bind(this));
                        MS.Entertainment.Utilities.Telemetry.logPreviousClicked(source)
                    }, this);
                    this._mediaControlPlayPauseToggle = MS.Entertainment.Utilities.bindAndMarkSupportedForProcessing(function SessionManager_mediaControlPlayPauseToggle(source) {
                        source = source ? source : "mediaKey";
                        if (this.primarySession) {
                            this.primarySession._ensureSession().then(function sessionMgr_doMediaControlPlayPauseToggle() {
                                if (this.primarySession.currentTransportState === MS.Entertainment.Platform.Playback.TransportState.playing) {
                                    this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.paused;
                                    MS.Entertainment.Utilities.Telemetry.logPauseClicked(source)
                                }
                                else if (this.primarySession.playerState === MS.Entertainment.Platform.Playback.PlayerState.ready)
                                    this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.playing;
                                else
                                    this.primarySession.playAt(0)
                            }.bind(this));
                            MS.Entertainment.Utilities.Telemetry.logPlayClicked(source)
                        }
                    }, this)
                }, _bindMediaControls: function _bindMediaControls() {
                    if (!Windows || !Windows.Media || !Windows.Media.MediaControl || MS.Entertainment.Utilities.isApp2)
                        return;
                    var mediaControls = Windows.Media.MediaControl;
                    try {
                        mediaControls.addEventListener("playpausetogglepressed", function mediaControlPlayPause() {
                            this._mediaControlPlayPauseToggle()
                        }.bind(this), false);
                        mediaControls.addEventListener("playpressed", function mediaControlPlay() {
                            this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.playing;
                            MS.Entertainment.Utilities.Telemetry.logPlayClicked("mediaKey")
                        }.bind(this), false);
                        mediaControls.addEventListener("stoppressed", function mediaControlStop() {
                            this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.stopped;
                            MS.Entertainment.Utilities.Telemetry.logStopClicked("mediaKey")
                        }.bind(this), false);
                        mediaControls.addEventListener("pausepressed", function mediaControlPause() {
                            this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.paused;
                            MS.Entertainment.Utilities.Telemetry.logPauseClicked("mediaKey")
                        }.bind(this), false);
                        mediaControls.addEventListener("soundlevelchanged", this._onSoundLevelChanged.bind(this), false)
                    }
                    catch(ex) {
                        MSEPlatform.Playback.Etw.traceString("Non-fatal exception caught in mediaControls.addEventListener: " + ex)
                    }
                }, _bindSystemMediaTransportControls: function _bindSystemMediaTransportControls() {
                    if (!WinJS.Utilities.getMember("Media.SystemMediaTransportControls", Windows) || (!MS.Entertainment.Utilities.isMusicApp2 && !MS.Entertainment.Utilities.isAmsterdamApp))
                        return;
                    var systemMediaTransportControls = Windows.Media.SystemMediaTransportControls.getForCurrentView();
                    var systemMediaButtons = Windows.Media.SystemMediaTransportControlsButton;
                    systemMediaTransportControls.addEventListener("buttonpressed", function buttonPressed(evt) {
                        evt.detail.forEach(function eventIterator(event) {
                            switch (event.button) {
                                case systemMediaButtons.stop:
                                    this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.stopped;
                                    MS.Entertainment.Utilities.Telemetry.logStopClicked("voiceCommand");
                                    break;
                                case systemMediaButtons.play:
                                    this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.playing;
                                    MS.Entertainment.Utilities.Telemetry.logPlayClicked("voiceCommand");
                                    break;
                                case systemMediaButtons.pause:
                                    this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.paused;
                                    MS.Entertainment.Utilities.Telemetry.logPauseClicked("voiceCommand");
                                    break;
                                case systemMediaButtons.next:
                                    this._mediaControlNext("voiceCommand");
                                    break;
                                case systemMediaButtons.previous:
                                    this._mediaControlPrevious("voiceCommand", true);
                                    break
                            }
                        }.bind(this))
                    }.bind(this));
                    systemMediaTransportControls.addEventListener("propertychanged", function propertyChanged(event) {
                        var updater = systemMediaTransportControls.displayUpdater;
                        switch (event.property) {
                            case Windows.Media.SystemMediaTransportControlsProperty.playbackPosition:
                                if (updater.type === Windows.Media.MediaPlaybackType.music)
                                    if (isFinite(updater.musicProperties.playbackPosition) && updater.musicProperties.playbackPosition >= 0)
                                        this.primarySession.seekToPosition(updater.musicProperties.playbackPosition);
                                break;
                            default:
                                break
                        }
                    }.bind(this))
                }, _onSoundLevelChanged: function SessionManager_onSoundLevelChanged() {
                    if (this.primarySession && this.primarySession.isRemoteSession && this.primarySession.isRemoteSession())
                        return;
                    try {
                        var soundLevel = Windows.Media.MediaControl.soundLevel;
                        switch (soundLevel) {
                            case Windows.Media.SoundLevel.full:
                                this._onSoundLevelFull();
                                break;
                            case Windows.Media.SoundLevel.low:
                                this._onSoundLevelLow();
                                break;
                            case Windows.Media.SoundLevel.muted:
                                this._onSoundLevelMuted();
                                break;
                            default:
                                MS.Entertainment.Platform.assert(false, "Unexpected value for soundLevel: " + soundLevel);
                                break
                        }
                    }
                    catch(ex) {}
                }, _onSoundLevelFull: function SessionManager_onSoundLevelFull() {
                    var currentTransportState = MS.Entertainment.Platform.Playback.TransportState.unInitialize;
                    MSEPlatform.Playback.Etw.traceString("+PBM Sound Full");
                    if (this.primarySession) {
                        currentTransportState = this.primarySession.currentTransportState;
                        if (this._transportStateBeforePaused && this._transportStateBeforePaused !== MS.Entertainment.Platform.Playback.TransportState.unInitialize) {
                            if (this._transportStateBeforePaused !== MS.Entertainment.Platform.Playback.TransportState.starting) {
                                MSEPlatform.Playback.Etw.traceString("PBM Sound full. Target TransportState to stored value:", this._transportStateBeforePaused);
                                this.primarySession.targetTransportState = this._transportStateBeforePaused
                            }
                            else {
                                MSEPlatform.Playback.Etw.traceString("PBM Sound full. Target TransportState to playing");
                                this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.playing
                            }
                            this._transportStateBeforePaused = MS.Entertainment.Platform.Playback.TransportState.unInitialize
                        }
                    }
                    MSEPlatform.Playback.Etw.tracePlaybackPBMSoundLevelChanged("full", currentTransportState)
                }, _onSoundLevelLow: function SessionManager_onSoundLevelLow() {
                    var currentTransportState = MS.Entertainment.Platform.Playback.TransportState.unInitialize;
                    MSEPlatform.Playback.Etw.traceString("+PBM Sound Low");
                    if (this.primarySession) {
                        currentTransportState = this.primarySession.currentTransportState;
                        if (!MS.Entertainment.Utilities.isMusicApp && currentTransportState !== MS.Entertainment.Platform.Playback.TransportState.stopped) {
                            MSEPlatform.Playback.Etw.traceString("PBM Sound Low pausing from " + this.primarySession.currentTransportState);
                            this._transportStateBeforePaused = this.primarySession.currentTransportState;
                            this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.paused
                        }
                    }
                    MSEPlatform.Playback.Etw.tracePlaybackPBMSoundLevelChanged("low", currentTransportState)
                }, _onSoundLevelMuted: function SessionManager_onSoundLevelMuted() {
                    MSEPlatform.Playback.Etw.traceString("+PBM Sound Muted");
                    if (this.primarySession && this.primarySession.currentTransportState !== MS.Entertainment.Platform.Playback.TransportState.stopped) {
                        this._transportStateBeforePaused = this.primarySession.currentTransportState;
                        this.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.paused
                    }
                    MSEPlatform.Playback.Etw.tracePlaybackPBMSoundLevelChanged("muted", this._transportStateBeforePaused)
                }, _flushPreroll: function SessionManager_flushPreroll(status) {
                    for (var id in this.sessions)
                        if ("flushPreroll" in this.sessions[id])
                            this.sessions[id].flushPreroll(status)
                }, _onNetworkStatusChanged: function SessionManager_onNetworkStatusChanged(newValue) {
                    this._flushPreroll(newValue)
                }, _rootLicenseRefresh: (function SessionManager_rootLicenseRefresh_closure() {
                    var configurationManager;
                    return function SessionManager_rootLicenseRefresh(signIn) {
                            if (!configurationManager)
                                configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            var tunerActivated = (signedInUser && signedInUser.isTunerActivated) ? true : false;
                            var subscription = (signedInUser && signedInUser.isSubscription) ? true : false;
                            MSEPlatform.Playback.Etw.traceDRMRootLicenseRefreshAccount(subscription);
                            if (!(subscription && tunerActivated))
                                return WinJS.Promise.wrap();
                            var now = new Date;
                            var spanMs = configurationManager.drm.timeBetweenRefreshSessionsMins * 60 * 1000;
                            var lastRefresh = configurationManager.drm.lastFullRefresh;
                            MSEPlatform.Playback.Etw.traceDRMRootLicenseRefreshDetails(now, lastRefresh, spanMs);
                            if (now - lastRefresh < spanMs) {
                                MS.Entertainment.Utilities.Telemetry.logRootLicenseAcquisition("skipped");
                                return WinJS.Promise.wrap()
                            }
                            MSEPlatform.Playback.Etw.traceDRMRootLicenseRefreshInvoked();
                            MS.Entertainment.Utilities.Telemetry.logRootLicenseAcquisition("attempted");
                            return signIn.getPassportTicket(MS.Entertainment.Utilities.SignIn.TicketType.MBI_SSL, MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_Passport)).then(function gotTicket(ticket) {
                                    var drmIndividualizationPromise = WinJS.Promise.as(MS.Entertainment.Platform.Playback.drmIndividualizationPromise);
                                    return drmIndividualizationPromise.then(function _doAcquireRootLicense() {
                                            return Microsoft.Entertainment.Util.PlayReadyHandler.acquireRootLicense(ticket)
                                        })
                                }).then(function succeeded() {
                                    configurationManager.drm.lastFullRefresh = now;
                                    MSEPlatform.Playback.Etw.traceDRMRootLicenseRefreshCompleted("succeeded");
                                    MS.Entertainment.Utilities.Telemetry.logRootLicenseAcquisition("succeeded");
                                    return WinJS.Promise.wrap()
                                }, function failed(error) {
                                    var errorCode = (error && error.number) ? error.number : "unknown";
                                    MSEPlatform.Playback.Etw.traceDRMRootLicenseRefreshCompleted(error + " (error code: " + errorCode + ")");
                                    MS.Entertainment.Utilities.Telemetry.logRootLicenseAcquisition("failed", errorCode);
                                    return WinJS.Promise.wrapError(error)
                                })
                        }
                })(), _reportMetering: function SessionManager_reportMetering(signIn) {
                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    var subscription = (signedInUser && signedInUser.isSubscription) ? true : false;
                    var tunerActivated = (signedInUser && signedInUser.isTunerActivated) ? true : false;
                    var meteringCertificate = (signedInUser) ? signedInUser.meteringCertificate : null;
                    MSEPlatform.Playback.Etw.traceDRMReportMeteringAccount(subscription, tunerActivated, meteringCertificate ? "set" : "not set");
                    if (subscription && tunerActivated) {
                        MSEPlatform.Playback.Etw.traceDRMReportMeteringInvoked();
                        signIn.getPassportTicket(MS.Entertainment.Utilities.SignIn.TicketType.MBI_SSL, MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_Passport)).then(function gotTicket(ticket) {
                            return Microsoft.Entertainment.Util.PlayReadyHandler.reportMetering(ticket, meteringCertificate)
                        }).then(function succeeded() {
                            MSEPlatform.Playback.Etw.traceDRMReportMeteringCompleted("succeeded")
                        }, function failed(error) {
                            var errorCode = (error && error.number) ? error.number : "unknown";
                            MSEPlatform.Playback.Etw.traceDRMReportMeteringCompleted(error + "(error code: " + errorCode + ")")
                        })
                    }
                }, getPassportTicketAsync: function SessionManager_getPassportTicketAsync(returnEmptyOnFailure) {
                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    if (!signIn)
                        return WinJS.Promise.wrapError("No SignIn service registered");
                    function getPassportTicketAsync_signedIn(returnEmptyOnFailure) {
                        return signIn.getPassportTicket(MS.Entertainment.Utilities.SignIn.TicketType.MBI_SSL, MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_Passport)).then(function getPassportTicketAsync_success(ticket) {
                                if (!ticket) {
                                    if (returnEmptyOnFailure)
                                        return String.empty;
                                    return WinJS.Promise.wrapError(new Error("Unable to get a valid passport ticket."))
                                }
                                return ticket
                            }, function getPassportTicketAsync_error(e) {
                                if (returnEmptyOnFailure)
                                    return String.empty;
                                return WinJS.Promise.wrapError(e)
                            })
                    }
                    if (signIn.isSignedIn || returnEmptyOnFailure)
                        return getPassportTicketAsync_signedIn(returnEmptyOnFailure);
                    else {
                        var waitForSignIn = new WinJS.Promise(function SessionManager_initWaitForSignIn(c, e, p) {
                                function _waitForSignInAsync_signInComplete() {
                                    MS.Entertainment.Utilities.SignIn.removeEventListener("signInComplete", _waitForSignInAsync_signInComplete, false);
                                    c()
                                }
                                MS.Entertainment.Utilities.SignIn.addEventListener("signInComplete", _waitForSignInAsync_signInComplete, false);
                                if (!signIn.isSigningIn)
                                    signIn.signIn(false, true, true).then(null, function signInError(value) {
                                        this.primarySession.currentTransportState = MS.Entertainment.Platform.Playback.TransportState.stopped
                                    }.bind(this))
                            }.bind(this));
                        return waitForSignIn.then(getPassportTicketAsync_signedIn.bind(this, returnEmptyOnFailure))
                    }
                }, _onSignInCompleted: function SessionManager_onSignInCompleted() {
                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    if (signIn && signIn.isSignedIn) {
                        var retries = 0;
                        var DRMOnSignInActivities = function DRMOnSignIn() {
                                if (MS.Entertainment.Platform.Playback.drmIndividualizationPromise)
                                    MS.Entertainment.Platform.Playback.drmIndividualizationPromise.done(function indivDone(individualized) {
                                        if (individualized) {
                                            if (MS.Entertainment.Utilities.isMusicApp)
                                                this._rootLicenseRefresh(signIn).then(function SessionManager_rootLicenseRefresh_Completed() {
                                                    this._reportMetering(signIn)
                                                }.bind(this));
                                            else if (MS.Entertainment.Utilities.isVideoApp)
                                                return DeviceGroup.DeviceGroupManagement.getDeviceGroupInfoAsync().then(function SessionMgr_deviceStatusRefresh_Completed(deviceGroupInfo) {
                                                        if (deviceGroupInfo.isCurrentDeviceInGroup)
                                                            DeviceGroup.DeviceGroupManagement.setDeviceRegisterationStatus(DeviceGroup.DeviceRegisterationStatus.registered);
                                                        else if (DeviceGroup.DeviceGroupManagement.getDeviceRegisterationStatus() != DeviceGroup.DeviceRegisterationStatus.explicitlyDeregistered)
                                                            DeviceGroup.DeviceGroupManagement.setDeviceRegisterationStatus(DeviceGroup.DeviceRegisterationStatus.notRegistered);
                                                        try {
                                                            Microsoft.Entertainment.Fulfillment.Video.Licensing.refreshLicenses()
                                                        }
                                                        catch(ex) {
                                                            var errorCode = (ex && ex.number) ? ex.number : "unknown";
                                                            MSEPlatform.Playback.Etw.traceString("Video license refresh task failed with " + ex);
                                                            MS.Entertainment.Utilities.Telemetry.logDeviceGroupAction("VideoLicenseRefresh", errorCode)
                                                        }
                                                    }, function SessionMgr_deviceStatusRefresh_Failed(error) {
                                                        var errorCode = (error && error.number) ? error.number : "unknown";
                                                        MSEPlatform.Playback.Etw.traceString("SessionMgr_onSignInCompleted: Failed to get DeviceGroupInfo " + JSON.Stringify(error));
                                                        MS.Entertainment.Utilities.Telemetry.logDeviceGroupAction("getDeviceGroupInfoAsync", errorCode)
                                                    })
                                        }
                                        else {
                                            MS.Entertainment.Utilities.DRM.individualizationAsync();
                                            if (retries < 5) {
                                                retries++;
                                                MSEPlatform.Playback.Etw.traceString("Re-indiv on sign-in. Retry#" + retries);
                                                DRMOnSignInActivities()
                                            }
                                            else
                                                MSEPlatform.Playback.Etw.traceString("Re-indiv on sign-in. Does not work - giving up after " + retries + " retries.")
                                        }
                                    }.bind(this), function uhOh(error) {
                                        MS.Entertainment.Platform.fail("DRM indiv promise should not ever fail: only false/true success is expected")
                                    })
                            }.bind(this);
                        this._flushPreroll();
                        DRMOnSignInActivities()
                    }
                }, _onSignOutCompleted: function SessionManager_onSignOutCompleted() {
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    configurationManager.deviceGroup.lastSignedInUserDeviceRegistrationStatus = DeviceGroup.DeviceRegisterationStatus.notRegistered;
                    this._flushPreroll()
                }, _onApproachingDataLimitChanged: function SessionManager_onApproachingDataLimitChanged(approachingDataLimit) {
                    if (approachingDataLimit)
                        if (this._nowPlayingSession)
                            this._nowPlayingSession.notifyNetworkConnectionChanged(MS.Entertainment.Platform.NetworkConnection.approachingDataLimit)
                }, _initialize: function SessionManager_initialize() {
                    MSEPlatform.Playback.VideoPlayer.initializeVideoExtensions();
                    if (MS.Entertainment.Utilities.SignIn) {
                        MS.Entertainment.Utilities.SignIn.addEventListener("signInComplete", this._onSignInCompleted.bind(this), false);
                        MS.Entertainment.Utilities.SignIn.addEventListener("signOutComplete", this._onSignOutCompleted.bind(this), false)
                    }
                    this.sessions = this.sessions || {};
                    var sessionId = MSEPlatform.Playback.WellKnownPlaybackSessionId.nowPlaying;
                    this.sessions[sessionId] = new MSEPlatform.Playback.PlaybackSession(sessionId);
                    this._nowPlayingSession = this.sessions[sessionId];
                    this._nowPlayingSession.addEventListener("currentOrdinalChanged", this._onPlaylistOrdinalChanged.bind(this));
                    this._nowPlayingSession.addEventListener("currentNowPlayingPlaylistLibraryIdChanged", this._currentNowPlayingPlaylistLibraryIdChanged.bind(this));
                    this._nowPlayingSession.addEventListener("currentTransportStateChanged", this._currentTransportStateChanged.bind(this));
                    this.setPrimarySession(sessionId)
                }, _displayRequest: {get: function get_displayRequest() {
                        if (!this.__displayRequest && Windows && Windows.System && Windows.System.Display)
                            if (Windows && Windows.System && Windows.System.Display)
                                this.__displayRequest = new Windows.System.Display.DisplayRequest;
                        return this.__displayRequest
                    }}, _currentTransportStateChanged: function _currentTransportStateChanged(e) {
                    if (this._mediaStore && this.primarySession && this.primarySession.currentTransportState === MS.Entertainment.Platform.Playback.TransportState.stopped && this.primarySession.currentNowPlayingPlaylistLibraryId && !this.primarySession.canSkipForward)
                        this._onPlaylistOrdinalChanged(this.primarySession.first)
                }, _dataLimitHandler: null, _notifyUpcomingStreaming: function _sessionMgr_notifyUpcomingStreaming(isStream) {
                    if (isStream)
                        if (!this._dataLimitHandler) {
                            this._dataLimitHandler = this._onApproachingDataLimitChanged.bind(this);
                            WinJS.Binding.bind(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus), {approachingDataLimit: this._dataLimitHandler})
                        }
                }, _currentNowPlayingPlaylistLibraryIdChanged: function _currentNowPlayingPlaylistLibraryIdChanged(e) {
                    var newId = (e && e.detail) ? e.detail.newValue : null;
                    this._currentNowPlayingPlaylistLibraryId = newId
                }, _onPlaylistOrdinalChanged: function _onPlaylistOrdinalChanged(e) {
                    var newOrdinal = typeof e === "number" ? e : (e && e.detail) ? e.detail.newValue : null;
                    if (newOrdinal === null)
                        return;
                    if (!this._mediaStore)
                        this._mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                    var provider = this._mediaStore.playlistProvider;
                    if (this._currentNowPlayingPlaylistLibraryId >= 0)
                        provider.savePlaylistCurrentItemIndexAsync(this._currentNowPlayingPlaylistLibraryId, newOrdinal);
                    else {
                        this._updatePendingOrdinal = newOrdinal;
                        if (this._playlistIdLookupPromise)
                            return;
                        var query = new MS.Entertainment.Data.Query.libraryPlaylists;
                        query.playlistType = Microsoft.Entertainment.Platform.PlaylistType.nowPlaying;
                        query.chunkSize = 1;
                        this._playlistIdLookupPromise = query.execute().then(function loadPlaylist(query) {
                            if (query.result.totalCount > 0)
                                query.result.items.toArray(0, 1).then(function updatePlaylist(playlist) {
                                    if (playlist && playlist.length > 0) {
                                        this._currentNowPlayingPlaylistLibraryId = playlist[0].libraryId;
                                        provider.savePlaylistCurrentItemIndexAsync(playlist[0].libraryId, this._updatePendingOrdinal)
                                    }
                                    this._playlistIdLookupPromise = null
                                }.bind(this))
                        }.bind(this))
                    }
                }, requestNetwork: function SessionManager_requestNetwork(requestOwner) {
                    var releaseCount = 0;
                    MS.Entertainment.Platform.assert(MS.Entertainment.Utilities.isMusicApp, "requestNetwork should not be needed outside of the music app");
                    if (!this._networkKeepAliveTag)
                        try {
                            if (!this._extensionManager)
                                this._extensionManager = new Windows.Media.MediaExtensionManager;
                            this._networkKeepAliveSettings = new Windows.Foundation.Collections.PropertySet;
                            this._networkKeepAliveSettings["DoesNotUseNetwork"] = false;
                            this._extensionManager.registerSchemeHandler("Microsoft.Entertainment.Platform.Playback.ConnectedStandbySchemeHandler", "shape:", this._networkKeepAliveSettings);
                            this._networkKeepAliveTag = document.createElement("video");
                            this._networkKeepAliveTag.width = 0;
                            this._networkKeepAliveTag.height = 0;
                            this._networkKeepAliveTag.src = "shape://circle";
                            this._networkKeepAliveTag.autoplay = false
                        }
                        catch(exception) {
                            MSEPlatform.Playback.Etw.traceString("Non-fatal exception caught in requestNetwork: " + exception)
                        }
                    if (this._networkKeepAliveSettings && this._networkKeepAliveRefCount++ === 0)
                        this._networkKeepAliveSettings["DoesNotUseNetwork"] = false;
                    MSEPlatform.Playback.Etw.traceString("requestNetwork from " + requestOwner + ", " + "refCount: " + this._networkKeepAliveRefCount);
                    return {release: function releaseNetwork() {
                                MS.Entertainment.Platform.assert(releaseCount++ === 0, "double release from " + requestOwner);
                                if (this._networkKeepAliveSettings && --this._networkKeepAliveRefCount === 0) {
                                    this._networkKeepAliveSettings["DoesNotUseNetwork"] = true;
                                    this._networkKeepAliveTag.removeAttribute("src");
                                    this._networkKeepAliveTag = null
                                }
                                MSEPlatform.Playback.Etw.traceString("releaseNetwork from " + requestOwner + ", " + "refCount: " + this._networkKeepAliveRefCount)
                            }.bind(this)}
                }, requestNetworkAndDelay: function sessionManager_requestNetworkAndDelay(requestOwner) {
                    var networkReleaseHandle = this.requestNetwork(requestOwner);
                    return WinJS.Promise.timeout(this._networkRequestDelay).then(function onNetworkRequestDelayed() {
                            return networkReleaseHandle
                        })
                }, sessions: null, tmfAuthToken: null, __displayRequest: null, _isDisplayRequestActive: false, _nowPlayingSession: null, _primarySession: null, _transportStateBeforePaused: MS.Entertainment.Platform.Playback.TransportState.unInitialize, _networkKeepAliveTag: null, _networkKeepAliveSettings: null, _networkKeepAliveRefCount: 0, _currentNowPlayingPlaylistLibraryId: -1, _updatePendingOrdinal: -1, _playlistIdLookupPromise: null, _mediaStore: null, _networkRequestDelay: 2000
        }, {
            trackingIdState: {}, _createSessionId: (function createSessionId_closure() {
                    var sessionCounter = 0;
                    return function _createSessionId() {
                            sessionCounter++;
                            return ("sessionId_" + sessionCounter)
                        }
                })()
        })});
    WinJS.Namespace.defineWithParent(MSEPlatform, "Playback", {WellKnownPlaybackSessionId: {
            nowPlaying: "nowPlaying", remoteLRC: "remoteLRC"
        }});
    WinJS.Namespace.defineWithParent(MS.Entertainment, "Platform", {NetworkConnection: {
            approachingDataLimit: "approachingDataLimit", overDataLimit: "overDataLimit", switchedToMetered: "switchedToMetered"
        }});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.sessionManager, function sessionManagerFactory() {
        var sessionMgr = new MSEPlatform.SessionManager;
        sessionMgr._initialize();
        return sessionMgr
    }, true)
})()
})();
/* >>>>>>/viewmodels/detailspageviewmodelbase.js:10465 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            var DetailsPageViewModelBase = (function(_super) {
                    __extends(DetailsPageViewModelBase, _super);
                    function DetailsPageViewModelBase() {
                        _super.apply(this, arguments);
                        this._delayInitialized = false;
                        this._delayInitializeSmartBuyEngine = true;
                        this._mediaItemHydratePromise = null;
                        this._viewStateViewModel = null;
                        this._smartBuyStateEngineType = ViewModels.SmartBuyStateEngine;
                        this._smartBuyStateEngineInitialized = false
                    }
                    Object.defineProperty(DetailsPageViewModelBase.prototype, "mediaItem", {
                        get: function() {
                            return this._mediaItem
                        }, set: function(value) {
                                if (value !== this._mediaItem) {
                                    this.updateAndNotify("mediaItem", value);
                                    this._shareMediaItem()
                                }
                                this._refreshDetailString()
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(DetailsPageViewModelBase.prototype, "mediaItemDetails", {
                        get: function() {
                            return this._mediaItemDetails
                        }, set: function(value) {
                                this.updateAndNotify("mediaItemDetails", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(DetailsPageViewModelBase.prototype, "mediaItemPurchaseDetails", {
                        get: function() {
                            return this._mediaItemPurchaseDetails
                        }, set: function(value) {
                                this.updateAndNotify("mediaItemPurchaseDetails", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(DetailsPageViewModelBase.prototype, "collectionFilter", {
                        get: function() {
                            return this._collectionFilter
                        }, set: function(value) {
                                this._collectionFilter = value;
                                this._applyValueToModules("filterValue", value);
                                if (this._mediaContext)
                                    this._mediaContext.collectionFilter = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(DetailsPageViewModelBase.prototype, "inCollection", {
                        get: function() {
                            return this.mediaItem && (this.mediaItem.inCollection || this.mediaItem.hasLibraryId)
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(DetailsPageViewModelBase.prototype, "hasServiceId", {
                        get: function() {
                            return this.mediaItem && this.mediaItem.hasServiceId
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(DetailsPageViewModelBase.prototype, "smartBuyButtons", {
                        get: function() {
                            return this._smartBuyButtons
                        }, set: function(value) {
                                this.updateAndNotify("smartBuyButtons", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(DetailsPageViewModelBase.prototype, "filterDetails", {
                        get: function() {
                            return this._filterDetails
                        }, enumerable: true, configurable: true
                    });
                    DetailsPageViewModelBase.prototype.dispose = function() {
                        _super.prototype.dispose.call(this);
                        this._disposeSmartBuyStateEngine();
                        this._unshareMediaItem();
                        this._cancelMediaItemHydration()
                    };
                    DetailsPageViewModelBase.prototype.delayInitialize = function() {
                        _super.prototype.delayInitialize.call(this);
                        if (this._delayInitializeSmartBuyEngine)
                            this._initializeSmartBuyStateEngine(false);
                        this.modules.forEach(function(detailsModule) {
                            if (detailsModule.delayInitialize)
                                detailsModule.delayInitialize()
                        });
                        this._delayInitialized = true;
                        this._shareMediaItem()
                    };
                    DetailsPageViewModelBase.prototype.clearFilter = function() {
                        this.applyFilter(Microsoft.Entertainment.Platform.MediaAvailability.available)
                    };
                    DetailsPageViewModelBase.prototype.applyFilter = function(newFilter) {
                        this.collectionFilter = newFilter;
                        this._createSmartBuyStateEngine();
                        this._reloadFilteredModules();
                        this._updateFilterDetails();
                        this._reinitializeNotificationList()
                    };
                    DetailsPageViewModelBase.prototype._getContainingMediaContextOptions = function() {
                        return null
                    };
                    DetailsPageViewModelBase.prototype._getSmartBuyEngineAppBarHandlers = function() {
                        ViewModels.fail("_getSmartBuyEngineAppBarHandlers() should be overridden by the subclass.");
                        return null
                    };
                    DetailsPageViewModelBase.prototype._getSmartBuyEngineEventHandler = function() {
                        ViewModels.fail("_getSmartBuyEngineEventHandler() should be overridden by the subclass.");
                        return null
                    };
                    DetailsPageViewModelBase.prototype._getSmartBuyEngineButtons = function() {
                        ViewModels.fail("_getSmartBuyEngineButtons() should be overridden by the subclass.");
                        return null
                    };
                    DetailsPageViewModelBase.prototype._getSmartBuyEngineOptions = function() {
                        return {invokeHandlerAsStatic: true}
                    };
                    DetailsPageViewModelBase.prototype._refreshDetailString = function() {
                        ViewModels.fail("_refreshDetailString() should be overridden by the subclass.")
                    };
                    DetailsPageViewModelBase.prototype._refreshPurchaseDetailsString = function(stateInfo){};
                    DetailsPageViewModelBase.prototype._reloadFilteredModules = function() {
                        ViewModels.fail("_reloadFilteredModules() should be overridden by the subclass.")
                    };
                    DetailsPageViewModelBase.prototype._updateFilterDetails = function() {
                        ViewModels.fail("_updateFilterDetails() should be overridden by the subclass.")
                    };
                    DetailsPageViewModelBase.prototype._updateCatalogDetails = function(){};
                    DetailsPageViewModelBase.prototype._cancelMediaItemHydration = function() {
                        if (this._mediaItemHydratePromise) {
                            this._mediaItemHydratePromise.cancel();
                            this._mediaItemHydratePromise = null
                        }
                    };
                    DetailsPageViewModelBase.prototype._disposeSmartBuyStateEngine = function() {
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                        if (this._smartBuyStateEngineBinding) {
                            this._smartBuyStateEngineBinding.cancel();
                            this._smartBuyStateEngineBinding = null
                        }
                        if (this._smartBuyStateEngine) {
                            this._smartBuyStateEngine.unload();
                            this._smartBuyStateEngine = null;
                            this._smartBuyStateEngineInitialized = false
                        }
                    };
                    DetailsPageViewModelBase.prototype._getGenericSmartBuyButtons = function() {
                        return null
                    };
                    DetailsPageViewModelBase.prototype._createSmartBuyStateEngine = function() {
                        var _this = this;
                        this._disposeSmartBuyStateEngine();
                        if (!this.mediaItem)
                            return;
                        var buttons = this._getGenericSmartBuyButtons();
                        this._smartBuyStateEngine = new this._smartBuyStateEngineType(buttons);
                        this._smartBuyStateEngineBinding = WinJS.Binding.bind(this._smartBuyStateEngine, {
                            currentAppbarActions: function() {
                                return _this._onAppbarActionsChanged()
                            }, currentButtons: function() {
                                    return _this._onButtonsChanged()
                                }
                        })
                    };
                    DetailsPageViewModelBase.prototype._checkCanInitializeSmartBuyStateEngine = function() {
                        return true
                    };
                    DetailsPageViewModelBase.prototype._applyPropertiesToHydratedMedia = function(){};
                    DetailsPageViewModelBase.prototype._initializeSmartBuyStateEngine = function(initializeImmediately) {
                        var _this = this;
                        if (!initializeImmediately && !this._mediaItemHydratePromise || !this._checkCanInitializeSmartBuyStateEngine())
                            return;
                        if (!Entertainment.ServiceLocator.isServiceRegistered(Entertainment.Services.appToolbar)) {
                            ViewModels.fail("DetailsPageViewModelBase::_initializeSmartBuyStateEngine. Appbar service not registered");
                            return
                        }
                        var hydratePromise = this._mediaItemHydratePromise;
                        if (initializeImmediately)
                            hydratePromise = WinJS.Promise.as();
                        hydratePromise.done(function(hydratedMediaItem) {
                            if (_this.disposed)
                                return;
                            _this.mediaItem = hydratedMediaItem;
                            _this._applyPropertiesToHydratedMedia();
                            var appBarService = Entertainment.ServiceLocator.getService(Entertainment.Services.appToolbar);
                            var mediaContext = appBarService.pushMediaContext(_this.mediaItem, _this._getSmartBuyEngineAppBarHandlers(), _this._smartBuyStateEngine.currentAppbarActions, {executeLocation: Entertainment.UI.Actions.ExecutionLocation.canvas});
                            mediaContext.collectionFilter = _this.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.available;
                            var containingMediaContextOptions = _this._getContainingMediaContextOptions();
                            if (containingMediaContextOptions)
                                mediaContext.containingMedia = containingMediaContextOptions;
                            _this._mediaContext = mediaContext;
                            _this._applyValueToModules("mediaContext", mediaContext);
                            _this._smartBuyStateEngine.initialize(_this.mediaItem, _this._getSmartBuyEngineButtons(), _this._getSmartBuyEngineEventHandler(), _this._getSmartBuyEngineOptions());
                            _this._smartBuyStateEngineInitialized = true;
                            _this._updateFilterDetails();
                            _this._updateCatalogDetails()
                        }, function(error) {
                            _this.viewStateViewModel.viewState = -1;
                            ViewModels.fail("DetailsPageViewModelBase::_initializeSmartBuyStateEngine. Hydration failed. Error message: " + (error && error.message))
                        })
                    };
                    DetailsPageViewModelBase.prototype._unshareMediaItem = function() {
                        if (this._shareOperation) {
                            this._shareOperation.cancel();
                            this._shareOperation = null
                        }
                    };
                    DetailsPageViewModelBase.prototype._shareMediaItem = function() {
                        if (!Entertainment.ServiceLocator.isServiceRegistered(Entertainment.Services.shareSender))
                            return;
                        this._unshareMediaItem();
                        if (this.mediaItem && this._delayInitialized) {
                            var sender = Entertainment.ServiceLocator.getService(Entertainment.Services.shareSender);
                            this._shareOperation = sender.pendingShare(this.mediaItem)
                        }
                    };
                    DetailsPageViewModelBase.prototype._applyValueToModules = function(propertyName, newValue) {
                        if (this.disposed || !this.modules)
                            return;
                        this.modules.forEach(function(detailsModule) {
                            var oldValue = WinJS.Utilities.getMember(propertyName, detailsModule);
                            if (oldValue !== undefined)
                                MS.Entertainment.Utilities.BindingAgnostic.setProperty(detailsModule, propertyName, newValue)
                        })
                    };
                    DetailsPageViewModelBase.prototype._onAppbarActionsChanged = function() {
                        if (!this.disposed && this._mediaContext && this._smartBuyStateEngine)
                            this._mediaContext.setToolbarActions(this._smartBuyStateEngine.currentAppbarActions)
                    };
                    DetailsPageViewModelBase.prototype._onButtonsChanged = function() {
                        if (!this.disposed && this._smartBuyStateEngine)
                            this.smartBuyButtons = this._smartBuyStateEngine.currentButtons
                    };
                    DetailsPageViewModelBase.HEADER_BUTTON_LIST_LENGTH = 4;
                    return DetailsPageViewModelBase
                })(ViewModels.PageViewModelBase);
            ViewModels.DetailsPageViewModelBase = DetailsPageViewModelBase
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/video_win/videodetailsviewmodelbase.js:10724 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            var VideoDetailsViewModelBase = (function(_super) {
                    __extends(VideoDetailsViewModelBase, _super);
                    function VideoDetailsViewModelBase(initialPreferences) {
                        var _this = this;
                        _super.call(this);
                        this._smartBuyStateEngineType = ViewModels.VideoSmartBuyStateEngine;
                        initialPreferences = initialPreferences || {
                            preferredVideoResolution: String.empty, preferredLanguage: String.empty
                        };
                        this.purchaseOptions = new ViewModels.PurchaseOptions(initialPreferences.preferredVideoResolution, initialPreferences.preferredLanguage);
                        this.viewStateViewModel.viewState = 1;
                        this._hydrateMedia().done(function() {
                            _this._initializeFromMedia();
                            _this._initializeModules();
                            _this.listenForModuleViewStateChanges();
                            _this.loadModules()
                        })
                    }
                    VideoDetailsViewModelBase.prototype._hydrateMedia = function() {
                        return this.mediaItem.hydrate()
                    };
                    VideoDetailsViewModelBase.prototype._initializeFromMedia = function(){};
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "viewStateViewModel", {
                        get: function() {
                            if (!this._viewStateViewModel) {
                                var viewStateItems = new Array;
                                viewStateItems[-2] = new ViewModels.ViewStateItem(String.load(String.id.IDS_VIDEO_OFFLINE_HEADER), String.load(String.id.IDS_VIDEO_OFFLINE_DETAILS), []);
                                viewStateItems[-1] = new ViewModels.ViewStateItem(String.load(String.id.IDS_VIDEO_ERROR_HEADER), String.load(String.id.IDS_VIDEO_ERROR_DETAILS), []);
                                viewStateItems[0] = new ViewModels.ViewStateItem(String.load(String.id.IDS_VIDEO_ERROR_HEADER), String.load(String.id.IDS_VIDEO_ERROR_DETAILS), []);
                                this._viewStateViewModel = new ViewModels.ViewStateViewModel(viewStateItems)
                            }
                            return this._viewStateViewModel
                        }, enumerable: true, configurable: true
                    });
                    VideoDetailsViewModelBase.prototype.loadModules = function() {
                        var _this = this;
                        this._createSmartBuyStateEngine();
                        if (this.mediaItem)
                            this._mediaItemHydratePromise = this.mediaItem.hydrate();
                        else
                            Trace.fail("VideoDetailsViewModelBase::loadModules(): Unable to initialize smart button engine without a media item.");
                        this.modules.forEach(function(videoDetailsModule, index) {
                            if (videoDetailsModule) {
                                videoDetailsModule.load();
                                Trace.assert(videoDetailsModule.name in _this, "The viewmodel is missing module property accessor {0}. This property is required for data binding".format(videoDetailsModule.name));
                                _this._updateModuleAndNotify(index, videoDetailsModule.name, videoDetailsModule)
                            }
                        })
                    };
                    VideoDetailsViewModelBase.prototype._initializeLocalNotifications = function() {
                        var _this = this;
                        return _super.prototype._initializeLocalNotifications.call(this).then(function(notifications) {
                                if (!_this.isOnline)
                                    notifications.push(_this._createOfflineNotification());
                                return notifications
                            })
                    };
                    VideoDetailsViewModelBase.prototype._formatFileSize = function() {
                        var media = this.mediaItem;
                        var sizeLines = [];
                        if (media.hdFileSizeInMBytes > 0) {
                            var hdFileSizeString = media.hdFileSizeInMBytes >= 1024 ? String.load(String.id.IDS_VIDEO_LX_DETAILS_SIZE_GB_HD_FORMAT).format((media.hdFileSizeInMBytes / 1024).toFixed(1)) : String.load(String.id.IDS_VIDEO_LX_DETAILS_SIZE_MB_HD_FORMAT).format(media.hdFileSizeInMBytes.toFixed(0));
                            sizeLines.push(hdFileSizeString)
                        }
                        if (media.sdFileSizeInMBytes > 0) {
                            var sdFileSizeString = media.sdFileSizeInMBytes >= 1024 ? String.load(String.id.IDS_VIDEO_LX_DETAILS_SIZE_GB_SD_FORMAT).format((media.sdFileSizeInMBytes / 1024).toFixed(1)) : String.load(String.id.IDS_VIDEO_LX_DETAILS_SIZE_MB_SD_FORMAT).format(media.sdFileSizeInMBytes.toFixed(0));
                            sizeLines.push(sdFileSizeString)
                        }
                        return sizeLines.join(String.load(String.id.IDS_VIDEO_LX_DETAILS_SIZE_SEPARATOR))
                    };
                    VideoDetailsViewModelBase.prototype._formatPrimaryAudioLanguage = function(media) {
                        var languages = media && media.hydrated && ViewModels.VideoSmartBuyStateEngine.getLanguagesForRights(media);
                        var languageResultString = String.empty;
                        if (languages && languages.length === 1) {
                            var displayLanguage = String.load(String.id.IDS_DETAILS_AUDIO_LANGUAGE).format(MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(languages[0]));
                            languageResultString = displayLanguage
                        }
                        return languageResultString
                    };
                    VideoDetailsViewModelBase.prototype._formatVideoDefinitions = function(media) {
                        var videoDefinitions = String.empty;
                        if (media.libraryDefinitions)
                            videoDefinitions = media.libraryDefinitions;
                        else if (media.videoDefinitions && media.videoDefinitions !== String.load(String.id.IDS_UNKNOWN_VALUE))
                            videoDefinitions = media.videoDefinitions;
                        return videoDefinitions
                    };
                    VideoDetailsViewModelBase.prototype._getMediaItemForProviderDetails = function() {
                        return this.mediaItem
                    };
                    VideoDetailsViewModelBase.prototype._refreshDetailsStrings = function() {
                        var media = this.mediaItem;
                        if (!media || !media.hydrated)
                            return;
                        this.parentalRating = media.localizedRatingStringLong;
                        this.genre = media.genre ? MS.Entertainment.Formatters.formatGenresListNonConverter(media.genre) : String.empty;
                        this.releaseDate = media.releaseDate ? MS.Entertainment.Formatters.formatShortDateNonConverter(media.releaseDate) : String.empty;
                        this.fileSize = this._formatFileSize();
                        this.duration = media.duration ? Entertainment.Utilities.formatTimeString(media.duration) : String.empty;
                        var mediaItemForProviderDetails = this._getMediaItemForProviderDetails();
                        if (mediaItemForProviderDetails && mediaItemForProviderDetails.hydrated) {
                            this.primaryLanguage = this._formatPrimaryAudioLanguage(mediaItemForProviderDetails);
                            this.subtitles = mediaItemForProviderDetails.formattedSubtitles;
                            this.hasCaptions = mediaItemForProviderDetails.hasCaptions;
                            this.videoDefinitions = this._formatVideoDefinitions(mediaItemForProviderDetails)
                        }
                        this.isFooterVisible = (!!this.parentalRating || !!this.genre || !!this.releaseDate || !!this.fileSize || !!this.duration || !!this.primaryLanguage || !!this.subtitles || !!this.hasCaptions || !!this.videoDefinitions)
                    };
                    VideoDetailsViewModelBase.prototype._createSmartBuyStateEngine = function() {
                        _super.prototype._createSmartBuyStateEngine.call(this);
                        if (!this._smartBuyStateEngine)
                            return;
                        var smartBuyStateEngine = this._smartBuyStateEngine;
                        smartBuyStateEngine.purchaseOptions = this.purchaseOptions
                    };
                    VideoDetailsViewModelBase.prototype._createOfflineNotification = function() {
                        var offlineNotification = Entertainment.UI.ListNotification.createNotification(Entertainment.UI.NotificationCategoryEnum.networkStatus, String.load(String.id.IDS_VIDEO_OFFLINE_HEADER), String.load(String.id.IDS_VIDEO_OFFLINE_DETAILS));
                        offlineNotification.automationId = Entertainment.UI.AutomationIds.offlineHeaderNotification;
                        offlineNotification.icon = Entertainment.UI.Icon.inlineNotification;
                        offlineNotification.dismissIcon = false;
                        return offlineNotification
                    };
                    VideoDetailsViewModelBase.prototype._getSmartBuyEngineAppBarHandlers = function() {
                        return {deleteMedia: this._onMediaItemDeletion.bind(this)}
                    };
                    VideoDetailsViewModelBase.prototype._onMediaItemDeletion = function(deletionEvent) {
                        if (deletionEvent.detail && deletionEvent.detail.deleted && deletionEvent.detail.removedItem && deletionEvent.detail.removedItem.isEqual(this.mediaItem))
                            if (Entertainment.ServiceLocator.isServiceRegistered(Entertainment.Services.winJSNavigation)) {
                                var navigation = Entertainment.ServiceLocator.getService(Entertainment.Services.winJSNavigation);
                                navigation.navigateBack()
                            }
                    };
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "parentalRating", {
                        get: function() {
                            return this._parentalRating
                        }, set: function(value) {
                                this.updateAndNotify("parentalRating", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "genre", {
                        get: function() {
                            return this._genre
                        }, set: function(value) {
                                this.updateAndNotify("genre", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "releaseDate", {
                        get: function() {
                            return this._releaseDate
                        }, set: function(value) {
                                this.updateAndNotify("releaseDate", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "fileSize", {
                        get: function() {
                            return this._fileSize
                        }, set: function(value) {
                                this.updateAndNotify("fileSize", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "duration", {
                        get: function() {
                            return this._duration
                        }, set: function(value) {
                                this.updateAndNotify("duration", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "primaryLanguage", {
                        get: function() {
                            return this._primaryLanguage
                        }, set: function(value) {
                                this.updateAndNotify("primaryLanguage", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "videoDefinitions", {
                        get: function() {
                            return this._videoDefinitions
                        }, set: function(value) {
                                this.updateAndNotify("videoDefinitions", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "subtitles", {
                        get: function() {
                            return this._subtitles
                        }, set: function(value) {
                                this.updateAndNotify("subtitles", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "hasCaptions", {
                        get: function() {
                            return this._hasCaptions
                        }, set: function(value) {
                                this.updateAndNotify("hasCaptions", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "purchaseOptions", {
                        get: function() {
                            return this._purchaseOptions
                        }, set: function(value) {
                                this.updateAndNotify("purchaseOptions", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(VideoDetailsViewModelBase.prototype, "isFooterVisible", {
                        get: function() {
                            return this._isFooterVisible
                        }, set: function(value) {
                                this.updateAndNotify("isFooterVisible", value)
                            }, enumerable: true, configurable: true
                    });
                    return VideoDetailsViewModelBase
                })(ViewModels.DetailsPageViewModelBase);
            ViewModels.VideoDetailsViewModelBase = VideoDetailsViewModelBase
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/components/video/videodetailsuistateservice.js:10959 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(Video) {
            var VideoDetailsUiState = (function(_super) {
                    __extends(VideoDetailsUiState, _super);
                    function VideoDetailsUiState() {
                        _super.call(this)
                    }
                    VideoDetailsUiState.prototype.fireDownloadQualityChangeSignal = function() {
                        this.dispatchEvent("downloadQualityChange")
                    };
                    return VideoDetailsUiState
                })(MS.Entertainment.UI.Framework.ObservableBase);
            Video.VideoDetailsUiState = VideoDetailsUiState
        })(Entertainment.Video || (Entertainment.Video = {}));
        var Video = Entertainment.Video
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));
(function() {
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.videoDetailsUiState, function getService() {
        return new MS.Entertainment.Video.VideoDetailsUiState
    }, true)
})()
})();
/* >>>>>>/controls/showmore.js:10998 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        ShowMoreDefaultHeight: {
            minCollapsed: 100, maxCollapsed: 500, baseResolution: 768, _calculate: function calculate() {
                    var height = (MS.Entertainment.Utilities.getWindowHeight() - this.baseResolution);
                    if (height < this.minCollapsed)
                        height = this.minCollapsed;
                    else if (height > this.maxCollapsed)
                        height = this.maxCollapsed;
                    return height
                }
        }, ShowMore: MS.Entertainment.UI.Framework.defineUserControl("/Controls/ShowMore.html#showMoreTemplate", function showMoreConstructor(){}, {
                _primaryText: String.empty, _isShowingMore: false, _windowResizeHandler: null, _updateStateBindings: null, initialize: function initialize() {
                        if (!this.collapsedHeightCalculator)
                            this.collapsedHeightCalculator = MS.Entertainment.UI.Controls.ShowMoreDefaultHeight;
                        var updateStateBinding = this._updateState.bind(this);
                        this._windowResizeHandler = MS.Entertainment.Utilities.addEventHandlers(window, {resize: updateStateBinding});
                        this._updateStateBindings = WinJS.Binding.bind(this, {
                            primaryText: updateStateBinding, collapsedHeight: updateStateBinding
                        })
                    }, unload: function unload() {
                        if (this._windowResizeHandler) {
                            this._windowResizeHandler.cancel();
                            this._windowResizeHandler = null
                        }
                        if (this._updateStateBindings) {
                            this._updateStateBindings.cancel();
                            this._updateStateBindings = null
                        }
                        MS.Entertainment.UI.Framework._UserControl.prototype.unload.call(this)
                    }, primaryText: {
                        get: function get() {
                            return this._primaryText
                        }, set: function set(value) {
                                var newValue = toStaticHTML(value);
                                if (newValue !== this._primaryText) {
                                    var oldValue = this._primaryText;
                                    this._primaryText = newValue;
                                    this.notify("primaryText", newValue, oldValue)
                                }
                            }
                    }, _updateState: function updateState() {
                        this._changeTextHeight();
                        this._changeButtonVisibility();
                        this._changeButtonText()
                    }, _calculateCollapsedHeight: function calculateCollapsedHeight() {
                        var height = 0;
                        if (this.collapsedHeight > 0)
                            height = this.collapsedHeight;
                        else
                            height = this.collapsedHeightCalculator._calculate();
                        if (height > this._content.scrollHeight)
                            height = this._content.scrollHeight;
                        return height
                    }, _requiresShowMoreButton: function requiresShowMoreButton() {
                        return (this._content.scrollHeight > this._calculateCollapsedHeight())
                    }, _changeTextHeight: function changeTextHeight() {
                        this._content.style.height = this._isShowingMore ? "" : (this._calculateCollapsedHeight() + "px")
                    }, _changeButtonText: function _changeButtonText() {
                        this._showMoreLink.stringId = this._isShowingMore ? String.id.IDS_SEE_LESS_BUTTON : String.id.IDS_SEE_MORE_BUTTON
                    }, _changeButtonVisibility: function changeButtonVisibility() {
                        if (this._requiresShowMoreButton())
                            WinJS.Utilities.removeClass(this._showMoreLink.domElement, "removeFromDisplay");
                        else
                            WinJS.Utilities.addClass(this._showMoreLink.domElement, "removeFromDisplay")
                    }, onShowMoreClicked: function onShowMoreClicked() {
                        this._isShowingMore = !this._isShowingMore;
                        this._updateState()
                    }
            }, {
                collapsedHeight: 0, collapsedHeightCalculator: null
            })
    })
})()
})();
/* >>>>>>/controls/starratingcontrol.js:11078 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {StarRatingControl: MS.Entertainment.UI.Framework.defineUserControl("/Controls/StarRatingControl.html#starRatingControlTemplate", function StarRatingControl(element){}, {
            controlName: "StarRatingControl", allowAnimations: false, preventKeyboardFocus: false, refreshOnThaw: false, _mediaInstanceBinding: null, _mediaInstancePropertyBindings: null, _signedInBinding: null, _requestedCanonicalId: null, _ratingProvider: null, initialize: function initialize() {
                    this._ratingProvider = (new Microsoft.Entertainment.Platform.MediaStore).ratingProvider;
                    if (!this.disabled) {
                        var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        this._signedInBinding = WinJS.Binding.bind(signInService, {isSignedIn: function() {
                                this.disabled = !signInService.isSignedIn
                            }.bind(this)})
                    }
                    if (this.disableTransitionAnimations) {
                        var starNodes = this.domElement.querySelectorAll('div[style^="transition"]');
                        for (var index = 0; index < starNodes.length; index++)
                            starNodes[index].style.animation = null
                    }
                    this._mediaInstanceBinding = WinJS.Binding.bind(this, {mediaInstance: this._setMediaInstancePropertyBindings.bind(this)});
                    if (MS.Entertainment.Utilities.isApp2) {
                        var emptyItem = this.domElement.querySelector(".emptyFocusableItem");
                        if (emptyItem)
                            WinJS.Utilities.removeClass(emptyItem, "win-focusable")
                    }
                    if (this.preventKeyboardFocus)
                        WinJS.Utilities.removeClass(this._ratingsControl.element, "win-focusable")
                }, _setMediaInstancePropertyBindings: function _setMediaInstancePropertyBindings() {
                    if (this.mediaInstance) {
                        if (this._mediaInstancePropertyBindings)
                            this._mediaInstancePropertyBindings.cancel();
                        this._mediaInstancePropertyBindings = WinJS.Binding.bind(this.mediaInstance, {
                            averageRating: this._handleMediaPropertiesChange.bind(this), averageRatingCount: this._handleMediaPropertiesChange.bind(this), userRating: this._handleMediaPropertiesChange.bind(this)
                        })
                    }
                }, unload: function unload() {
                    if (this._mediaInstanceBinding) {
                        this._mediaInstanceBinding.cancel();
                        this._mediaInstanceBinding = null
                    }
                    if (this._signedInBinding) {
                        this._signedInBinding.cancel();
                        this._signedInBinding = null
                    }
                    if (this._mediaInstancePropertyBindings) {
                        this._mediaInstancePropertyBindings.cancel();
                        this._mediaInstancePropertyBindings = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, thaw: function thaw() {
                    if (this.refreshOnThaw) {
                        this._requestedCanonicalId = null;
                        this._handleMediaPropertiesChange()
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this)
                }, _handleMediaPropertiesChange: function _handleMediaPropertiesChange() {
                    if (this.mediaInstance) {
                        if (this.mediaInstance.userRating !== null && this.mediaInstance.userRating !== this.userRating) {
                            this.userRating = this.mediaInstance.userRating;
                            this._ratingsControl.userRating = this.mediaInstance.userRating;
                            this._ratingChangedHandler()
                        }
                        this._updateRatingFromDatabase();
                        if (this.mediaInstance.averageRating !== undefined && this.averageRating !== this.mediaInstance.averageRating)
                            this.averageRating = this.mediaInstance.averageRating;
                        if (this.mediaInstance.averageRatingCount !== undefined && this.averageRatingCount !== this.mediaInstance.averageRatingCount)
                            this.averageRatingCount = this.mediaInstance.averageRatingCount
                    }
                }, _updateRatingFromDatabase: function _getRatingFromDatabase() {
                    if (!this.mediaInstance || !this.mediaInstance.mediaType || !this.mediaInstance.hasCanonicalId)
                        return;
                    var ratingType = MS.Entertainment.Data.Factory.Library.mediaTypeToRatingTypeMappings[this.mediaInstance.mediaType];
                    if (!ratingType) {
                        MS.Entertainment.Framework.fail("Unknown mediaType: " + this.mediaInstance.mediaType);
                        return
                    }
                    if (this._requestedCanonicalId !== this.mediaInstance.canonicalId) {
                        this._requestedCanonicalId = this.mediaInstance.canonicalId;
                        this._ratingProvider.getRatingForMarketplaceItemAsync(this._requestedCanonicalId, ratingType).then(function ratingReturned(ratingItem) {
                            this.userRating = ratingItem.rating
                        }.bind(this))
                    }
                }, _ratingChangedHandler: function _ratingChangedHandler(eventInfo) {
                    if (!this.mediaInstance || !this.mediaInstance.hasCanonicalId)
                        return;
                    var selectedRating = this._ratingsControl.userRating;
                    var ratingType = MS.Entertainment.Data.Factory.Library.mediaTypeToRatingTypeMappings[this.mediaInstance.mediaType];
                    if (!ratingType) {
                        MS.Entertainment.Framework.fail("Unknown mediaType: " + this.mediaInstance.mediaType);
                        return
                    }
                    this._ratingProvider.setMarketplaceItemsRatingAsync([this.mediaInstance.canonicalId], ratingType, selectedRating).then(function ratingSaved() {
                        this.userRating = selectedRating
                    }.bind(this))
                }
        }, {
            averageRating: null, averageRatingCount: null, userRating: null, disabled: false, ratingInfoVisible: true, mediaInstance: null
        })})
})()
})();
/* >>>>>>/controls/video_win/languagepicker.js:11179 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Controls) {
                (function(Video) {
                    var LanguagePicker = (function(_super) {
                            __extends(LanguagePicker, _super);
                            function LanguagePicker(element, options) {
                                this.templateStorage = "/Controls/Video_Win/LanguagePicker.html";
                                this.templateName = "languagePickerTemplate";
                                this.enableDelayInitialization = true;
                                _super.call(this, element, options)
                            }
                            LanguagePicker.prototype.initialize = function() {
                                _super.prototype.initialize.call(this);
                                this._purchaseOptionsBindings = WinJS.Binding.bind(this, {purchaseOptions: {
                                        languageCodes: this._updateSelectionManagerFromPurchaseOptions.bind(this), selectedLanguageCode: this._updateSelectionManagerFromPurchaseOptions.bind(this)
                                    }})
                            };
                            LanguagePicker.prototype.unload = function() {
                                if (this._selectionManagerBindings) {
                                    this._selectionManagerBindings.cancel();
                                    this._selectionManagerBindings = null
                                }
                                if (this._purchaseOptionsBindings) {
                                    this._purchaseOptionsBindings.cancel();
                                    this._purchaseOptionsBindings = null
                                }
                                _super.prototype.unload.call(this)
                            };
                            LanguagePicker.prototype._updateSelectionManagerFromPurchaseOptions = function() {
                                if (!this.purchaseOptions)
                                    return;
                                var languagesCodes = this.purchaseOptions.languageCodes || [];
                                var selectedLanguageCode = this.purchaseOptions.selectedLanguageCode || String.empty;
                                var selectedIndex;
                                var dataSource = languagesCodes.map(function(languageCode, index) {
                                        var isSelected = (languageCode === selectedLanguageCode);
                                        if (isSelected)
                                            selectedIndex = index;
                                        var languageLabel = String.load(String.id.IDS_DETAILS_AUDIO_LANGUAGE).format(MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(languageCode));
                                        return {
                                                label: languageLabel, languageCode: languageCode, selected: isSelected
                                            }
                                    });
                                this.selectionManager = new UI.Framework.SelectionManager(dataSource, selectedIndex)
                            };
                            LanguagePicker.prototype._onSelectedItemChanged = function(selectedItem) {
                                var newLanguage = WinJS.Utilities.getMember("detail.newSelection.item", selectedItem);
                                if (newLanguage)
                                    this._purchaseOptions.selectedLanguageCode = newLanguage.languageCode
                            };
                            Object.defineProperty(LanguagePicker.prototype, "purchaseOptions", {
                                get: function() {
                                    return this._purchaseOptions
                                }, set: function(value) {
                                        this.updateAndNotify("purchaseOptions", value)
                                    }, enumerable: true, configurable: true
                            });
                            Object.defineProperty(LanguagePicker.prototype, "selectionManager", {
                                get: function() {
                                    return this._selectionManager
                                }, set: function(value) {
                                        this.updateAndNotify("selectionManager", value);
                                        if (this._selectionManagerBindings) {
                                            this._selectionManagerBindings.cancel();
                                            this._selectionManagerBindings = null
                                        }
                                        this._selectionManagerBindings = MS.Entertainment.Utilities.addEventHandlers(this.selectionManager, {selectedItemChanged: this._onSelectedItemChanged.bind(this)})
                                    }, enumerable: true, configurable: true
                            });
                            return LanguagePicker
                        })(UI.Framework.UserControl);
                    Video.LanguagePicker = LanguagePicker
                })(Controls.Video || (Controls.Video = {}));
                var Video = Controls.Video
            })(UI.Controls || (UI.Controls = {}));
            var Controls = UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.Video.LanguagePicker)
})();
/* >>>>>>/viewmodels/purchaseflow/smartbuystateengine.js:11278 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {SmartBuyStateEngine: MS.Entertainment.defineOptionalObservable(function SmartBuyStateEngineConstructor(initialButtons) {
            this.currentButtons = initialButtons || [];
            this.currentAppbarActions = [];
            this._currentLocationSpecificButtons = {};
            this._eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell
        }, {
            buttons: null, appbarActions: null, suspendStateChanges: false, options: null, _eventProxy: null, _eventProvider: null, _mediaBindings: null, _mediaDeletedBindingMethod: null, _onStateChanged: null, _uniqueListenerId: null, _mediaRightChangedBindingMethod: null, _updateStateBindingMethod: null, _bindingsComplete: false, _cachedState: null, _lastUpdateStatePromise: null, _lastFireStateChangedPromise: null, _defaultDownloadInfo: null, _currentButtons: null, _currentLocationSpecificButtons: null, _unloaded: false, _queueUpdateStateTimer: null, _queueFireStateChangedTimer: null, currentButtons: {
                    get: function() {
                        return this._currentButtons
                    }, set: function(value) {
                            if (value !== this._currentButtons) {
                                var oldValue = this._currentButtons;
                                this._currentButtons = value;
                                if (this.media)
                                    this._eventProvider.traceMediaStateEngine_ButtonsChanged(this.media.mediaType, this.media.serviceId, this.media.libraryId);
                                this.notify("currentButtons", value, oldValue);
                                this._fireCurrentButtonsChanged()
                            }
                        }
                }, eventProxy: {
                    get: function() {
                        return this._eventProxy
                    }, set: function(value) {
                            if (this._eventProxy !== value) {
                                this._eventProxy = value;
                                if (this.currentButtons && this.currentButtons.length)
                                    this._fireCurrentButtonsChanged()
                            }
                        }
                }, initialize: function initialize(media, buttons, onStateChanged, options) {
                    if (this.media)
                        throw"State engine already initialized.";
                    else if (!media)
                        throw"A valid media object is required.";
                    this.options = options || {};
                    this.media = media;
                    this._onStateChanged = onStateChanged;
                    this.buttons = buttons;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.fileTransfer)) {
                                this._uniqueListenerId = "SmartButtonListener_" + MS.Entertainment.Utilities.getSessionUniqueInteger();
                                var notifier = {
                                        add: this._onFileTransferAdd, pending: this._onFileTransferEvent, update: this._onFileTransferEvent, complete: this._onFileTransferEvent, error: this._onFileTransferEvent, cancel: this._onFileTransferEvent
                                    };
                                var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                                fileTransferService.registerListener(this._uniqueListenerId, MS.Entertainment.Framework.DownloadInfo.getMarketplaceDownloadTaskKeyFunction(media.mediaType), null, notifier, this)
                            }
                            break
                    }
                    this._updateStateBindingMethod = this.updateState.bind(this);
                    this._mediaBindings = WinJS.Binding.bind(this.media, {
                        serviceId: this._updateStateBindingMethod, canonicalId: this._updateStateBindingMethod, isPinnedToStartScreen: this._updateStateBindingMethod, features: this._updateStateBindingMethod, trailerUrl: this._updateStateBindingMethod, defaultPlatformType: this._updateStateBindingMethod, libraryId: this._updateStateBindingMethod, rights: this._updateStateBindingMethod, rightsHydrated: this._updateStateBindingMethod, tracks: this._updateStateBindingMethod, count: this._updateStateBindingMethod, episode: this._updateStateBindingMethod, episodes: this._updateStateBindingMethod, hydrated: this._updateStateBindingMethod, isFreeStreamRestrictedByMonthlyLimit: this._updateStateBindingMethod, isFreeStreamRestrictedByIndividualLimit: this._updateStateBindingMethod
                    });
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).bind("isSignedIn", this._updateStateBindingMethod);
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).bind("isSubscription", this._updateStateBindingMethod);
                    if (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrackOrMusicVideo(this.media))
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).bind("primarySessionId", this._updateStateBindingMethod);
                    if (this.options.updateOnAppVisibilityChange)
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).bind("isAppVisible", this._updateStateBindingMethod);
                    if (this.options.updateOnAppSnappedModeChange)
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).bind("isSnapped", this._updateStateBindingMethod);
                    if (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        var playbackSession = sessionMgr.nowPlayingSession;
                        playbackSession.bind("currentTransportState", this._updateStateBindingMethod);
                        var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                        uiStateService.bind("nowPlayingVisible", this._updateStateBindingMethod);
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.mediaDeleted)) {
                            var deleteService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.mediaDeleted);
                            this._mediaDeletedBindingMethod = MS.Entertainment.Utilities.addEventHandlers(deleteService, {mediaDeleted: this._updateStateBindingMethod})
                        }
                    }
                    else if (this.media.mediaType !== undefined && MS.Entertainment.Utilities.isMusicApp) {
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        this._smartDJBindings = WinJS.Binding.bind(sessionManager.primarySession, {smartDJSeed: this._updateStateBindingMethod})
                    }
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.videoDetailsUiState)) {
                        var videoDetailsUiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.videoDetailsUiState);
                        videoDetailsUiStateService.addEventListener("downloadQualityChange", this._updateStateBindingMethod, false);
                        videoDetailsUiStateService.addEventListener("videoDefinitionChange", this._updateStateBindingMethod, false);
                        videoDetailsUiStateService.addEventListener("videoLanguageChange", this._updateStateBindingMethod, false)
                    }
                    try {
                        this._mediaRightChangedBindingMethod = this._mediaRightChanged.bind(this);
                        Microsoft.Entertainment.Marketplace.Marketplace.addEventListener("mediarightchanged", this._mediaRightChangedBindingMethod)
                    }
                    catch(e) {
                        var message = (e && e.message) || e;
                        var errorCode = e && e.number;
                        MS.Entertainment.ViewModels.fail("Microsoft.Entertainment.Marketplace.Marketplace.addEventListener failed with error:" + errorCode + "; message:" + message);
                        this._mediaRightChangedBindingMethod = null
                    }
                    this._eventProvider.traceMediaStateEngine_Initialized(this.media.mediaType, this.media.serviceId, this.media.libraryId);
                    this.bind("currentAppbarActions", function appbarActionsChanged() {
                        if (!this._bindingsComplete)
                            return;
                        this._eventProvider.traceMediaStateEngine_ActionsChanged(this.media.mediaType, this.media.serviceId, this.media.libraryId)
                    }.bind(this));
                    this._bindingsComplete = true;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.pinToStartScreen)) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            this.media.isPinnedToStartScreen = !!startScreenTile
                        }.bind(this))
                    }
                    this.updateState();
                    if (this.options.updateImmediately)
                        this._queueFireStateChanged()
                }, unload: function unload() {
                    this._unloaded = true;
                    if (this._queueUpdateStateTimer) {
                        this._queueUpdateStateTimer.dispose();
                        this._queueUpdateStateTimer = null
                    }
                    if (this._queueFireStateChangedTimer) {
                        this._queueFireStateChangedTimer.dispose();
                        this._queueFireStateChangedTimer = null
                    }
                    if (this._mediaRightChangedBindingMethod) {
                        Microsoft.Entertainment.Marketplace.Marketplace.removeEventListener("mediarightchanged", this._mediaRightChangedBindingMethod);
                        this._mediaRightChangedBindingMethod = null
                    }
                    if (this._updateStateBindingMethod) {
                        if (this._mediaBindings) {
                            this._mediaBindings.cancel();
                            this._mediaBindings = null
                        }
                        if (this._mediaDeletedBindingMethod) {
                            this._mediaDeletedBindingMethod.cancel();
                            this._mediaDeletedBindingMethod = null
                        }
                        if (this._smartDJBindings) {
                            this._smartDJBindings.cancel();
                            this._smartDJBindings = null
                        }
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).unbind("isSignedIn", this._updateStateBindingMethod);
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).unbind("isSubscription", this._updateStateBindingMethod);
                        if (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrackOrMusicVideo(this.media))
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).unbind("primarySessionId", this._updateStateBindingMethod);
                        if (this.options.updateOnAppVisibilityChange)
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).unbind("isAppVisible", this._updateStateBindingMethod);
                        if (this.options.updateOnAppSnappedModeChange)
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).unbind("isSnapped", this._updateStateBindingMethod);
                        if (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                            var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                            var playbackSession = sessionMgr.nowPlayingSession;
                            playbackSession.unbind("currentTransportState", this._updateStateBindingMethod);
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            uiStateService.unbind("nowPlayingVisible", this._updateStateBindingMethod)
                        }
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.videoDetailsUiState)) {
                            var videoDetailsUiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.videoDetailsUiState);
                            videoDetailsUiStateService.removeEventListener("downloadQualityChange", this._updateStateBindingMethod, false);
                            videoDetailsUiStateService.removeEventListener("videoDefinitionChange", this._updateStateBindingMethod, false);
                            videoDetailsUiStateService.removeEventListener("videoLanguageChange", this._updateStateBindingMethod, false)
                        }
                        this._updateStateBindingMethod = null
                    }
                    if (this._uniqueListenerId) {
                        var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                        fileTransferService.unregisterListener(this._uniqueListenerId);
                        this._uniqueListenerId = null
                    }
                    this.currentButtons = null;
                    this.currentAppbarActions = [];
                    this._clearLocationSpecificButtons();
                    this._currentLocationSpecificButtons = null;
                    this._eventProvider.traceMediaStateEngine_Unloaded(this.media && this.media.mediaType, this.media && this.media.serviceId, this.media && this.media.libraryId)
                }, getCurrentButtonsForLocation: function getCurrentButtonsForLocation(location) {
                    if (!this._currentLocationSpecificButtons[location])
                        this._currentLocationSpecificButtons[location] = new MS.Entertainment.ObservableArray;
                    return this._currentLocationSpecificButtons[location]
                }, _setLocationSpecificButtons: function _setLocationSpecificButtons(newLocationSpecificButtons) {
                    for (var newLocationKey in newLocationSpecificButtons) {
                        var buttonsForLocation = this.getCurrentButtonsForLocation(newLocationKey);
                        var newButtonsForLocation = newLocationSpecificButtons[newLocationKey];
                        if (!newButtonsForLocation)
                            continue;
                        var itemsChanged = newButtonsForLocation.length !== buttonsForLocation.length || newButtonsForLocation.some(function checkForButtonEquality(item, newLocationKey) {
                                return item !== buttonsForLocation.item(newLocationKey)
                            });
                        if (itemsChanged)
                            buttonsForLocation.spliceArray(0, buttonsForLocation.length, newButtonsForLocation)
                    }
                    for (var existingLocationKey in this._currentLocationSpecificButtons)
                        if (!newLocationSpecificButtons || !newLocationSpecificButtons[existingLocationKey])
                            if (this._currentLocationSpecificButtons[existingLocationKey])
                                this._currentLocationSpecificButtons[existingLocationKey].clear()
                }, _clearLocationSpecificButtons: function _clearLocationSpecificButtons() {
                    for (var existingLocationKey in this._currentLocationSpecificButtons)
                        this._currentLocationSpecificButtons[existingLocationKey] = null
                }, updateMediaItemProperties: function updateMediaItemProperties(updatedMedia) {
                    MS.Entertainment.ViewModels.assert(this.media && this.media.isEqual(updatedMedia), "Cannot update the engine's media item with properties from a different media item.");
                    MS.Entertainment.Utilities.copyAugmentedProperties(updatedMedia, this.media);
                    this.updateState()
                }, updateState: function updateState() {
                    if (!this.media || !this._bindingsComplete || this._unloaded || this.suspendStateChanges)
                        return;
                    this._eventProvider.traceMediaStateEngine_UpdateState(this.media.mediaType, this.media.serviceId, this.media.libraryId);
                    var updateStatePromise = function queryMediaStateAsync_complete(state) {
                            if (this._lastUpdateStatePromise === updateStatePromise && !this._unloaded) {
                                this._defaultDownloadInfo = null;
                                this._lastUpdateStatePromise = null;
                                this._cachedState = state;
                                this._queueFireStateChanged()
                            }
                        }.bind(this);
                    this._lastUpdateStatePromise = updateStatePromise;
                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.queryMediaStateAsync(this.media, this._defaultDownloadInfo ? this._defaultDownloadInfo : (this._cachedState ? this._cachedState.download : null)).then(updateStatePromise)
                }, _queueUpdateState: function _queueUpdateState() {
                    if (!this._unloaded) {
                        if (!this._queueUpdateStateTimer) {
                            this._queueUpdateStateTimer = new MS.Entertainment.UI.Framework.BackOffTimer;
                            this._queueUpdateStateTimer.callback = this.updateState.bind(this)
                        }
                        this._queueUpdateStateTimer.execute()
                    }
                }, _fireCurrentButtonsChanged: function _fireCurrentButtonsChanged() {
                    if (this.eventProxy && this.eventProxy.dispatchEvent)
                        this.eventProxy.dispatchEvent("currentButtonsChanged", {
                            sender: this, value: this.currentButtons
                        })
                }, _queueFireStateChanged: function _queueFireStateChanged() {
                    if (this._unloaded)
                        return;
                    if (!this._queueFireStateChangedTimer) {
                        this._queueFireStateChangedTimer = new MS.Entertainment.UI.Framework.BackOffTimer;
                        this._queueFireStateChangedTimer.callback = this._fireStateChanged.bind(this)
                    }
                    this._queueFireStateChangedTimer.execute()
                }, _fireStateChanged: function _fireStateChanged() {
                    if (this._unloaded)
                        return;
                    var stateChangedPromise = WinJS.Promise.wrap();
                    if (this._onStateChanged)
                        if (this.options.invokeHandlerAsStatic)
                            stateChangedPromise = this._onStateChanged(this, this._cachedState) || stateChangedPromise;
                        else
                            stateChangedPromise = this._onStateChanged(this._cachedState) || stateChangedPromise;
                    var fireStateChangedPromise = function _onStateChanged_complete(requestButtons) {
                            if (this._unloaded)
                                return;
                            var subActionsChanged;
                            var newButtons = (requestButtons && requestButtons.smartButtons) || requestButtons;
                            var newActions = requestButtons && requestButtons.appbarActions;
                            var newLocationSpecificButtons = requestButtons && requestButtons.locationSpecificButtons;
                            if (this._lastFireStateChangedPromise === fireStateChangedPromise) {
                                if (!newButtons)
                                    this.currentButtons = [];
                                else if (newButtons.length !== this.currentButtons.length)
                                    this.currentButtons = newButtons;
                                else
                                    for (var i = 0; i < newButtons.length; i++)
                                        if (newButtons[i] !== this.currentButtons[i]) {
                                            this.currentButtons = newButtons;
                                            break
                                        }
                                subActionsChanged = !MS.Entertainment.UI.Actions.ActionArray.areSubActionsEqual(newActions, this.currentAppbarActions);
                                if (!newActions)
                                    this.currentAppbarActions = [];
                                else if (newActions.length !== this.currentAppbarActions.length || subActionsChanged)
                                    this.currentAppbarActions = newActions;
                                else
                                    for (var i = 0; i < newActions.length; i++)
                                        if (newActions[i] !== this.currentAppbarActions[i]) {
                                            this.currentAppbarActions = newActions;
                                            break
                                        }
                                this._setLocationSpecificButtons(newLocationSpecificButtons);
                                if (requestButtons && this.loading)
                                    this.loading = false
                            }
                        }.bind(this);
                    this._lastFireStateChangedPromise = fireStateChangedPromise;
                    stateChangedPromise.then(fireStateChangedPromise)
                }, _mediaRightChanged: function _mediaRightChanged(serviceMediaId) {
                    if (this._unloaded)
                        return;
                    MS.Entertainment.ViewModels.SmartBuyStateEngine.mediaContainsServiceMediaIdAsync(this.media, serviceMediaId).then(function mediaContainsServiceMediaIdAsync_complete(contained) {
                        if (contained)
                            this._queueUpdateState()
                    }.bind(this))
                }, _onFileTransferAdd: function _onFileTransferAdd(notification) {
                    if (this._unloaded)
                        return;
                    if (notification.transferType !== MS.Entertainment.UI.FileTransferType.download || !MS.Entertainment.Framework.DownloadInfo.isFileTransferTaskContainedByMedia(this.media, notification.task))
                        return;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download)
                        MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(this.media).done(function hydrateLibraryInfoAsyncComplete() {
                            this._onFileTransferEvent(notification);
                            this._queueUpdateState()
                        }.bind(this), function hydrateLibraryInfoAsyncError(error) {
                            MS.Entertainment.ViewModels.assert(error.message === "Canceled", "Failed to get library id in the onFileTransferAdd callback. Error message: " + error.message);
                            this._onFileTransferEvent(notification)
                        }.bind(this))
                }, _onFileTransferEvent: function _onFileTransferEvent(notification) {
                    if (this._unloaded)
                        return;
                    if (notification.transferType !== MS.Entertainment.UI.FileTransferType.download || !MS.Entertainment.Framework.DownloadInfo.isFileTransferTaskContainedByMedia(this.media, notification.task))
                        return;
                    if (this._cachedState && this._cachedState.download.update(notification.task))
                        if (notification.task.taskStatus !== Microsoft.Entertainment.FileTransferStatus.completed && !notification.task.isClosed)
                            this._queueFireStateChanged();
                        else
                            this._queueUpdateState()
                }
        }, {
            currentAppbarActions: null, media: null, loading: true
        }, {
            FileContainerAccess: {
                None: "None", Partial: "Partial", All: "All"
            }, getSelectionStateFromMediaItem: function getSelectionStateFromMediaItem(mediaItem) {
                    var handler = null;
                    var selectedItemStateEngine = null;
                    switch (mediaItem && mediaItem.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            handler = MS.Entertainment.ViewModels.MusicStateHandlers.onMusicGalleryPlaylistSelectionStateChanged;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            handler = MS.Entertainment.ViewModels.MusicStateHandlers.onMusicGallerySelectionStateChanged;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                            handler = MS.Entertainment.ViewModels.MusicStateHandlers.onMusicGallerySmartDJSelectionStateChanged;
                            break;
                        case undefined:
                            break;
                        default:
                            MS.Entertainment.UI.Controls.fail("Unsupported media type: " + mediaItem && mediaItem.mediaType);
                            break
                    }
                    if (handler) {
                        if (!selectedItemStateEngine)
                            selectedItemStateEngine = new MS.Entertainment.ViewModels.SmartBuyStateEngine;
                        selectedItemStateEngine.initialize(mediaItem, null, handler)
                    }
                    return selectedItemStateEngine
                }, getMediaServiceIdsInCollectionAsync: function getMediaServiceIdsInCollectionAsync(media, collectionPath) {
                    var promise;
                    var collection = MS.Entertainment.Utilities.valueFromPropertyPath(media, collectionPath);
                    if (!collection || !collection.forEachAll || !media)
                        promise = WinJS.Promise.wrap([]);
                    else if (media.knownChildServiceIdsPromise)
                        promise = media.knownChildServiceIdsPromise;
                    else {
                        var knownChildServiceIds = [];
                        promise = media.knownChildServiceIdsPromise = collection.forEachAll(function iteration(args) {
                            if (args.item.data.hasZuneId)
                                knownChildServiceIds.push(args.item.data.zuneId.toLowerCase());
                            else if (args.item.data.serviceId)
                                knownChildServiceIds.push(args.item.data.serviceId.toLowerCase())
                        }).then(function loadedIds() {
                            return knownChildServiceIds
                        }, function loadedIdsFailed() {
                            return []
                        }).then(function cleanUp(result) {
                            collection = null;
                            knownChildServiceIds = null;
                            promise = null;
                            media = null;
                            return result
                        })
                    }
                    return promise
                }, findMediaServiceIdsInCollectionAsync: function findMediaServiceIdsInCollectionAsync(media, collectionPath, serviceId) {
                    var collection = MS.Entertainment.Utilities.valueFromPropertyPath(media, collectionPath);
                    if (!collection || !collection.forEachAll || !media)
                        return WinJS.Promise.wrap(false);
                    var promise;
                    var found = false;
                    serviceId = serviceId.toLowerCase();
                    if (media.knownChildServiceIdsPromise)
                        promise = media.knownChildServiceIdsPromise.then(function searchForIndex(result) {
                            result = result || [];
                            return (result.indexOf(serviceId) >= 0)
                        });
                    else
                        promise = collection.forEachAll(function iteration(args) {
                            var currentServiceId = args.item.data.serviceId;
                            if (args.item.data.serviceId && args.item.data.serviceId.toLowerCase() === serviceId) {
                                found = true;
                                args.stop = true
                            }
                        }).then(function finishedSearch() {
                            return found
                        }, function failedSearch() {
                            return false
                        });
                    return promise
                }, mediaContainsServiceMediaIdAsync: function mediaContainsServiceMediaIdAsync(media, serviceMediaId) {
                    if (!media || !serviceMediaId || MS.Entertainment.Utilities.isEmptyGuid(serviceMediaId))
                        return WinJS.Promise.wrap(false);
                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.findMediaServiceIdsAsync(media, serviceMediaId)
                }, determineFileContainerAccess: function _determineFileContainerAccess(max, actual) {
                    if (actual === 0)
                        return MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None;
                    else if (actual < max)
                        return MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.Partial;
                    else
                        return MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.All
                }, queryMediaStateAsync: function queryMediaStateAsync(media, downloadInfo) {
                    var promises = [];
                    var state = {};
                    state.marketplace = {};
                    state.collection = {};
                    promises.push(MS.Entertainment.ViewModels.SmartBuyStateEngine.getPlayabilityAsync(media).then(function getPlayabilityAsync_complete(playability) {
                        state.collection.playability = playability;
                        state.collection.canPlayLocally = playability.local;
                        state.collection.canPlayLocallyOrStreamFromCloud = playability.local || playability.cloud;
                        state.collection.canStreamFromCloud = playability.cloud
                    }));
                    if (MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(media) && media.track)
                        promises.push(media.track.hydrate().then(function onHydrate(track) {
                            return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(track)
                        }).then(function hydrateLibraryInfo_complete(track) {
                            state.track = {inCollection: track.inCollection}
                        }));
                    if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeries || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist)
                        promises.push(MS.Entertainment.ViewModels.SmartBuyStateEngine.getMarketplaceFileAccessAsync(media).then(function getMarketplaceFileAccessAsync_complete(marketplace) {
                            state.marketplace.mediaIds = marketplace.mediaIds;
                            state.marketplace.counts = marketplace.counts;
                            state.marketplace.canDownloadState = marketplace.canDownload;
                            state.marketplace.canDownload = (marketplace.canDownload !== MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None);
                            state.marketplace.canStreamState = marketplace.canStream;
                            state.marketplace.canStream = (marketplace.canStream !== MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None);
                            state.marketplace.exclusivelyRentedState = marketplace.exclusivelyRented;
                            state.marketplace.exclusivelyRented = (marketplace.exclusivelyRented === MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.All);
                            state.marketplace.isPresale = marketplace.isPresale;
                            state.marketplace.presaleFulfillmentDate = marketplace.presaleFulfillmentDate;
                            state.marketplace.rentalExpirations = marketplace.rentalExpirations;
                            state.marketplace.entitlements = marketplace.entitlements;
                            state.marketplace.hasPurchased = marketplace.hasPurchased;
                            state.marketplace.hasPurchasedSeason = marketplace.hasPurchasedSeason;
                            state.marketplace.libraryDefinitions = marketplace.libraryDefinitions
                        }));
                    if (downloadInfo)
                        state.download = downloadInfo;
                    else if (MS.Entertainment.Framework.DownloadInfo)
                        promises.push(MS.Entertainment.Framework.DownloadInfo.createAndInitializeAsync(media).then(function createAndInitializeAsync_complete(downloadInfo) {
                            state.download = downloadInfo
                        }));
                    else
                        state.download = {items: []};
                    return WinJS.Promise.join(promises).then(function queryMediaStateAsync_join_complete() {
                            state.canPlay = (state.marketplace && state.marketplace.canStream) || state.collection.canPlayLocallyOrStreamFromCloud;
                            return WinJS.Promise.wrap(state)
                        })
                }, getMediaServiceIdsAsync: function getMediaServiceIdsAsync(media) {
                    if (!media || !media.mediaType)
                        return WinJS.Promise.wrap([]);
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            if (media.hasZuneId)
                                return WinJS.Promise.wrap([media.zuneId]);
                            else if (media.hasServiceId && media.serviceIdType === "ZuneCatalog")
                                return WinJS.Promise.wrap([media.serviceId]);
                            else
                                return WinJS.Promise.wrap([]);
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            if (media.hasZuneId)
                                return WinJS.Promise.wrap([media.zuneId]);
                            else if (media.hasServiceId)
                                return WinJS.Promise.wrap([media.serviceId]);
                            else
                                return WinJS.Promise.wrap([]);
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getArtistTrackServiceIdsInCollectionAsync(media);
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getPlaylistTrackServiceIdsInCollectionAsync(media);
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsInCollectionAsync(media, "tracks");
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            return WinJS.Promise.wrap([]);
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsInCollectionAsync(media, "episodes");
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                        case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            return WinJS.Promise.wrap([]);
                        default:
                            throw"The state engine does not support this media item type.";
                    }
                }, getArtistTrackServiceIdsInCollectionAsync: function getArtistTrackServiceIdsInCollectionAsync(mediaItem) {
                    if (!mediaItem || !mediaItem.libraryId)
                        return WinJS.Promise.wrap([]);
                    var query = new MS.Entertainment.Data.Query.libraryTracks;
                    query.artistId = mediaItem.libraryId;
                    return query.execute().then(function artistQuery_executed(q) {
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsInCollectionAsync(q.result, "items")
                        }, function artistQuery_failed() {
                            return WinJS.Promise.wrap([])
                        })
                }, getPlaylistTrackServiceIdsInCollectionAsync: function getPlaylistTrackServiceIdsInCollectionAsync(mediaItem) {
                    if (!mediaItem || !MS.Entertainment.Utilities.isValidLibraryId(mediaItem.libraryId))
                        return WinJS.Promise.as([]);
                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsInCollectionAsync(mediaItem, "tracks").then(function onMediaServiceIdsRetrieved(mediaServiceIds) {
                            if (mediaServiceIds && mediaServiceIds.length > 0)
                                return mediaServiceIds;
                            else {
                                var query = new MS.Entertainment.Data.Query.libraryPlaylistMediaItems;
                                query.playlistId = mediaItem.libraryId;
                                return query.execute().then(function playlistQuery_executed(q) {
                                        return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsInCollectionAsync(q.result, "items")
                                    }, function playlistQuery_failed() {
                                        return WinJS.Promise.as([])
                                    })
                            }
                        })
                }, findMediaServiceIdsAsync: function findMediaServiceIdsAsync(media, serviceId) {
                    if (!media || !media.mediaType || !serviceId)
                        return WinJS.Promise.wrap(false);
                    var promise;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            promise = WinJS.Promise.wrap(!!media.serviceId && media.serviceId.toLowerCase() === serviceId.toLowerCase());
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            promise = MS.Entertainment.ViewModels.SmartBuyStateEngine.findMediaServiceIdsInCollectionAsync(media, "tracks", serviceId);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            promise = MS.Entertainment.ViewModels.SmartBuyStateEngine.findMediaServiceIdsInCollectionAsync(media, "episodes", serviceId);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                        case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            promise = WinJS.Promise.wrap(false);
                            break;
                        default:
                            throw"The state engine does not support this media item type.";
                    }
                    return promise
                }, _createPlayability: function _createPlayability(nativePlayabilityArray) {
                    var playability = {getItem: function getItem(media) {
                                if (!media || !this.items)
                                    return null;
                                var libraryId = media.inCollection ? media.libraryId : -1;
                                var serviceId = media.inCollection ? null : (media.hasServiceId ? media.serviceId.toLowerCase() : null);
                                if (libraryId === -1 && !serviceId)
                                    return null;
                                for (var i = 0; i < this.items.length; i++) {
                                    var item = this.items[i];
                                    if (libraryId !== -1) {
                                        if (item.libraryId === libraryId)
                                            return item
                                    }
                                    else if (serviceId)
                                        if (item.mediaId === serviceId)
                                            return item
                                }
                                return null
                            }};
                    playability.counts = {};
                    playability.counts.localOnly = 0;
                    playability.counts.localAndCloud = 0;
                    playability.counts.cloudOnly = 0;
                    playability.counts.neitherLocalNorCloud = 0;
                    playability.counts.localOrCloud = 0;
                    playability.counts.downloading = 0;
                    playability.items = [];
                    if (nativePlayabilityArray)
                        for (var i = 0; i < nativePlayabilityArray.length; i++) {
                            var item = nativePlayabilityArray[i];
                            if (item) {
                                playability.items.push({
                                    mediaType: item.mediaType, libraryId: item.libraryId, mediaId: item.mediaId, locallyPlayable: item.locallyPlayable, cloudStreamable: item.cloudStreamable, isDownloading: item.isDownloading
                                });
                                if (item.locallyPlayable)
                                    if (item.cloudStreamable)
                                        ++playability.counts.localAndCloud;
                                    else
                                        ++playability.counts.localOnly;
                                else if (item.cloudStreamable)
                                    ++playability.counts.cloudOnly;
                                else
                                    ++playability.counts.neitherLocalNorCloud;
                                if (item.isDownloading)
                                    ++playability.counts.downloading
                            }
                        }
                    playability.counts.local = playability.counts.localOnly + playability.counts.localAndCloud;
                    playability.counts.cloud = playability.counts.cloudOnly + playability.counts.localAndCloud;
                    playability.counts.localOrCloud = playability.counts.cloudOnly + playability.counts.localOnly + playability.counts.localAndCloud;
                    playability.local = (playability.counts.local > 0);
                    playability.cloud = (playability.counts.cloud > 0);
                    return playability
                }, getPlayabilityAsync: function getPlayabilityAsync(media, collectionFilter) {
                    if (!media || !media.inCollection || !media.mediaType)
                        return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null));
                    collectionFilter = collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                    var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            return mediaStore.videoProvider.getPlayabilityByLibraryIdAsync(media.libraryId).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayability) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability([nativePlayability]))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            return mediaStore.trackProvider.getPlayabilityByLibraryIdAsync(media.libraryId).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayability) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability([nativePlayability]))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            return mediaStore.albumProvider.getPlayabilityByLibraryIdAsync(media.libraryId, collectionFilter).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayabilityArray) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(nativePlayabilityArray))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            return mediaStore.playlistProvider.getPlayabilityByLibraryIdAsync(media.libraryId, collectionFilter).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayabilityArray) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(nativePlayabilityArray))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            return mediaStore.seriesProvider.getPlayabilityByLibraryIdAsync(media.libraryId).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayabilityArray) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(nativePlayabilityArray))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            return mediaStore.seriesProvider.getPlayabilityBySeasonLibraryIdAsync(media.libraryId).then(function getPlayabilityBySeasonLibraryIdAsync_complete(nativePlayabilityArray) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(nativePlayabilityArray))
                                }, function getPlayabilityBySeasonLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            return mediaStore.artistProvider.getPlayabilityByLibraryIdAsync(media.libraryId, collectionFilter).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayabilityArray) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(nativePlayabilityArray))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null));
                        default:
                            throw"The state engine does not support this media item type.";
                    }
                }, getMarketplaceFileAccessAsync: function getMarketplaceFileAccessAsync(media) {
                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsAsync(media).then(function getMediaServiceIdsAsync_complete(serviceIds) {
                            if (!serviceIds || !serviceIds.length)
                                return WinJS.Promise.wrap({
                                        mediaIds: [], isPresale: false, presaleFulfillmentDate: null, entitlements: [], canDownload: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, canStream: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, exclusivelyRented: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, rentalExpirations: [], counts: {
                                                canDownload: 0, canStream: 0, exclusivelyRented: 0
                                            }
                                    });
                            return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync(serviceIds).then(function getMediaEntitlementsAsync_complete(result) {
                                    result = JSON.parse(result).result;
                                    var parsedResult = {
                                            mediaIds: serviceIds, entitlements: result.entitlements, isPresale: result.entitlements.some(function isPresale_some(entitlement) {
                                                    return entitlement.isPresale
                                                }), presaleFulfillmentDate: null, canDownload: MS.Entertainment.ViewModels.SmartBuyStateEngine.determineFileContainerAccess(serviceIds.length, result.counts.canFullyDownload), canStream: MS.Entertainment.ViewModels.SmartBuyStateEngine.determineFileContainerAccess(serviceIds.length, result.counts.canFullyStream), exclusivelyRented: MS.Entertainment.ViewModels.SmartBuyStateEngine.determineFileContainerAccess(serviceIds.length, result.counts.exclusivelyRented), rentalExpirations: [], hasPurchased: result.counts.purchased, hasPurchasedSeason: result.entitlements.some(function hasPurchasedSeason_some(entitlement) {
                                                    return entitlement.hasPurchasedSeason
                                                }), counts: {
                                                    canDownload: result.counts.canFullyDownload, canStream: result.counts.canFullyStream, exclusivelyRented: result.counts.exclusivelyRented
                                                }
                                        };
                                    parsedResult.rentalExpirations.overall = {
                                        isExpired: false, latestDate: null
                                    };
                                    var hasExpiredRental = false;
                                    var hasNonExpiredRental = false;
                                    var hasInfiniteExpiration = false;
                                    function gatherOverallRentalExpiration(rental) {
                                        rental.expiration = MSE.Data.Factory.date(rental.expiration);
                                        if (rental.serviceMediaInstanceId && !MS.Entertainment.Utilities.isEmptyGuid(rental.serviceMediaInstanceId))
                                            if (rental.isExpired)
                                                hasExpiredRental = true;
                                            else {
                                                hasNonExpiredRental = true;
                                                if (!rental.expiration) {
                                                    hasInfiniteExpiration = true;
                                                    parsedResult.rentalExpirations.overall.latestDate = null
                                                }
                                                else if (!hasInfiniteExpiration && rental.expiration > parsedResult.rentalExpirations.overall.latestDate)
                                                    parsedResult.rentalExpirations.overall.latestDate = rental.expiration
                                            }
                                    }
                                    var edsResolutionFormat = MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat;
                                    parsedResult.libraryDefinitions = {};
                                    parsedResult.libraryDefinitions[edsResolutionFormat.xd] = false;
                                    parsedResult.libraryDefinitions[edsResolutionFormat.sd] = false;
                                    parsedResult.libraryDefinitions[edsResolutionFormat.hd] = false;
                                    parsedResult.libraryDefinitions[edsResolutionFormat.hd1080p] = false;
                                    function gatherAvailableVideoQuality(mediaEntitlement) {
                                        if (mediaEntitlement.serviceMediaInstanceId && !MS.Entertainment.Utilities.isEmptyGuid(mediaEntitlement.serviceMediaInstanceId))
                                            if (!mediaEntitlement.isExpired && mediaEntitlement.isAvailable && mediaEntitlement.format)
                                                parsedResult.libraryDefinitions[mediaEntitlement.format] = true
                                    }
                                    function gatherFulfillmentDate(entitlement) {
                                        if (entitlement.isPresale)
                                            if (entitlement.presaleFulfillmentDate && (!parsedResult.presaleFulfillmentDate || entitlement.presaleFulfillmentDate > parsedResult.presaleFulfillmentDate))
                                                parsedResult.presaleFulfillmentDate = MS.Entertainment.Data.Factory.date(entitlement.presaleFulfillmentDate)
                                    }
                                    if (MS.Entertainment.Utilities.isVideoApp) {
                                        for (var i = 0; i < serviceIds.length; i++) {
                                            gatherOverallRentalExpiration(result.entitlements[i].rent.download);
                                            gatherOverallRentalExpiration(result.entitlements[i].rent.stream);
                                            gatherAvailableVideoQuality(result.entitlements[i].purchase.download);
                                            gatherAvailableVideoQuality(result.entitlements[i].purchase.stream);
                                            gatherAvailableVideoQuality(result.entitlements[i].rent.download);
                                            gatherAvailableVideoQuality(result.entitlements[i].rent.stream);
                                            gatherFulfillmentDate(result.entitlements[i]);
                                            parsedResult.rentalExpirations.push({
                                                download: {
                                                    date: result.entitlements[i].rent.download.expiration, isExpired: !!result.entitlements[i].rent.download.isExpired
                                                }, stream: {
                                                        date: result.entitlements[i].rent.stream.expiration, isExpired: !!result.entitlements[i].rent.stream.isExpired
                                                    }
                                            })
                                        }
                                        parsedResult.rentalExpirations.overall.isExpired = hasExpiredRental && !hasNonExpiredRental
                                    }
                                    return WinJS.Promise.wrap(parsedResult)
                                }, function getMediaEntitlements_error(e) {
                                    return WinJS.Promise.wrap({
                                            mediaIds: serviceIds, entitlements: [], isPresale: false, presaleFulfillmentDate: null, canDownload: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, canStream: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, exclusivelyRented: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, rentalExpirations: [], counts: {
                                                    canDownload: 0, canStream: 0, exclusivelyRented: 0
                                                }
                                        })
                                })
                        })
                }
        })})
})()
})();
/* >>>>>>/viewmodels/purchaseflow/smartbuybuttons.js:12030 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
(function() {
    "use strict";
    var _createBasicButton = function _createBasicButton(actionId, titleId, parameter, iconInfo, voiceInfo) {
            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
            var button = actionService.getAction(actionId);
            if (titleId)
                button.title = String.load(titleId);
            if (parameter) {
                button.parameter = parameter;
                button.parameter.actionType = MS.Entertainment.UI.Actions.ActionWrapperType.button
            }
            if (iconInfo)
                button.iconInfo = iconInfo;
            if (button.parameter) {
                if (button.parameter.automationId)
                    button.automationId = button.parameter.automationId;
                if (button.parameter.id)
                    button.id = button.parameter.id
            }
            if (voiceInfo && button.isVoiceEnabled) {
                if (voiceInfo.guiStringId)
                    button.title = String.load(voiceInfo.guiStringId);
                button.voicePhraseStringId = voiceInfo.voicePhraseStringId;
                button.voicePhoneticPhraseStringId = voiceInfo.voicePhoneticPhraseStringId;
                if (voiceInfo.voiceConfidenceStringId)
                    button.voiceConfidenceStringId = voiceInfo.voiceConfidenceStringId;
                if (typeof(voiceInfo.voiceConfidence) === "number")
                    button.voiceConfidence = voiceInfo.voiceConfidence
            }
            return button
        };
    var _createButton = function createButton(actionId, titleId, parameter, iconInfo, voiceInfo) {
            var button = _createBasicButton(actionId, titleId, parameter, iconInfo, voiceInfo);
            if (button.parameter && button.parameter.dismissOverlayOnExecute) {
                var oldExecuted = button.executed.bind(button);
                button.executed = WinJS.Utilities.markSupportedForProcessing(function executed(actionData) {
                    var domEvent = document.createEvent("Event");
                    domEvent.initEvent("dismissoverlay", true, true);
                    var popover = document.querySelector(".overlayAnchor .popOver");
                    if (popover)
                        popover.dispatchEvent(domEvent);
                    oldExecuted(actionData)
                })
            }
            var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
            if (mediaContext.collectionFilter) {
                var previousExecuted = button.executed.bind(button);
                button.executed = WinJS.Utilities.markSupportedForProcessing(function executed(actionData, referenceElement) {
                    var appToolbarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                    actionData.collectionFilter = appToolbarService.currentMediaContext.collectionFilter;
                    previousExecuted(actionData, referenceElement)
                })
            }
            if (button.parameter && button.parameter.preRollVideoAdIfNeeded) {
                var lastExecuted = button.executed.bind(button);
                button.executed = WinJS.Utilities.markSupportedForProcessing(function executed(actionData, referenceElement) {
                    var collectionFilter = mediaContext.collectionFilter;
                    if (referenceElement)
                        MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: referenceElement}, {
                            uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                        });
                    if (collectionFilter === Microsoft.Entertainment.Platform.MediaAvailability.availableOffline || !MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.adService))
                        lastExecuted(actionData);
                    else {
                        var containingMedia = mediaContext.options && mediaContext.options.containingMedia;
                        var invokedMedia = (containingMedia && actionData.mediaItem === containingMedia.playbackItemSource) ? mediaContext.mediaItem : actionData.mediaItem;
                        var adService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.adService);
                        adService.isStreamingBlocked(invokedMedia).done(function isStreamingBlocked_complete(signInNeeded) {
                            var promise;
                            var dialogDismissed;
                            promise = new WinJS.Promise(function(c, e, p) {
                                dialogDismissed = c
                            }).then(function dialogDismissed() {
                                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                var collectionFilter = mediaContext && mediaContext.collectionFilter;
                                return (!signInNeeded || signIn.isSignedIn) ? adService.playVideoAdIfRequired(invokedMedia, collectionFilter) : false
                            }).done(function playVideoAdIfRequired_complete(adPlayedIfNeeded) {
                                if (adPlayedIfNeeded)
                                    lastExecuted(actionData)
                            }, function playVideoAdIfRequired_failed(error) {
                                MS.Entertainment.ViewModels.fail("playVideoAdIfRequired_failed: " + (error && error.message));
                                lastExecuted(actionData)
                            });
                            if (signInNeeded) {
                                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                if (!featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlayAnonymous))
                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed);
                                else if (configurationManager.service.lastSignedInUserXuid)
                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_EXISTING_USER_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForExistingUser, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed);
                                else
                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_NEW_USER_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForNewUser, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed)
                            }
                            else
                                dialogDismissed()
                        }, function isStreamingBlocked_failed(error) {
                            MS.Entertainment.ViewModels.fail("isStreamingBlocked_failed: " + (error && error.message))
                        })
                    }
                })
            }
            return button
        };
    var _isFreeUser = function _isFreeUser() {
            var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
            var isSubscription = configurationManager.service.lastSignedInUserSubscription;
            return !isSubscription
        };
    WinJS.Namespace.define("MS.Entertainment.ViewModels.Actions", {GenericPlayButton: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function genericPlayButtonConstructor() {
            this.base();
            this.id = MS.Entertainment.UI.Actions.ActionIdentifiers.genericPlay;
            this.title = String.load(String.id.IDS_PLAY_BUTTON);
            this.automationId = MS.Entertainment.UI.AutomationIds.genericPlay;
            this.parameter = {
                automationId: this.automationId, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas
            };
            this.iconInfo = {
                icon: MS.Entertainment.UI.Icon.play, isToggleButton: false, isChecked: false, isDisabled: false
            }
        }, {
            _button: null, _executedSignal: null, _executedParam: null, executed: function executed(param) {
                    if (this._button)
                        return this._button.executed(param);
                    else if (!this._executedSignal) {
                        this._executedSignal = new MS.Entertainment.UI.Framework.Signal;
                        this._executedParam = param
                    }
                    return this._executedSignal.promise
                }, canExecute: function canExecute(param) {
                    return this._button ? this._button.canExecute(param) : true
                }, wrap: function wrap(button) {
                    MS.Entertainment.ViewModels.assert(button, "Button param expected");
                    this._button = button;
                    this.id = button.id;
                    this.title = button.title;
                    this.parameter = button.parameter;
                    this.iconInfo = button.iconInfo;
                    this.automationId = button.automationId;
                    if (button.parameter) {
                        if (button.parameter.automationId)
                            this.automationId = button.parameter.automationId;
                        if (button.parameter.id)
                            this.id = button.parameter.id
                    }
                    if (this._executedSignal) {
                        var executedSignal = this._executedSignal;
                        var executedParam = this._executedParam;
                        this._executedSignal = null;
                        this._executedParam = null;
                        WinJS.Promise.as(this.execute(executedParam)).done(function onExecuteComplete() {
                            executedSignal.complete()
                        }, function onExecuteError(error) {
                            executedSignal.error(error)
                        })
                    }
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {SmartBuyButtons: {
            createGenericPlayButton: function createGenericPlayButton() {
                return new MS.Entertainment.ViewModels.Actions.GenericPlayButton
            }, createButtonPlayDisabled: function createButtonPlayDisabled(executeLocation) {
                    var playStringId = MS.Entertainment.Utilities.isMusicApp ? String.id.IDS_PLAY_BUTTON : String.id.IDS_DETAILS_PLAY_NOW_LABEL;
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, playStringId, {
                            automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayDisabled, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {
                            icon: MS.Entertainment.UI.Icon.play, isToggleButton: true, isChecked: false, isDisabled: true
                        })
                }, createButtonDeleteMedia: function createButtonDeleteMedia(media, executeLocation, deleteLocalFilesOnly) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, String.id.IDS_DELETE_LABEL, {
                            mediaItem: media, executeLocation: executeLocation, deleteLocalFilesOnly: deleteLocalFilesOnly, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDelete, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.delete}, {
                            guiStringId: String.id.IDS_DELETE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_DELETE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_DELETE_BUTTON_VUI_PRON, voiceConfidence: MS.Entertainment.Utilities.isApp2 ? MS.Entertainment.UI.App2.VoiceStatics.criticalActionConfidence : 0.0
                        })
                }, createButtonDeleteLocally: function createButtonDeleteLocally(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, String.id.IDS_VIDEO_LX_DELETE_FROM_PC, {
                            mediaItem: media, executeLocation: executeLocation, deleteLocalFilesOnly: true, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDelete, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.delete})
                }, createButtonDeleteFromPcAndCollection: function createButtonDeleteFromPcAndCollection(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, String.id.IDS_VIDEO_LX_DELETE_FROM_PC_AND_COLLECTION, {
                            mediaItem: media, executeLocation: executeLocation, deleteLocalFilesOnly: false, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDelete, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.delete})
                }, createButtonDeleteFromCollection: function createButtonDeleteFromCollection(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, String.id.IDS_VIDEO_LX_DELETE_FROM_COLLECTION, {
                            mediaItem: media, executeLocation: executeLocation, deleteLocalFilesOnly: false, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDelete, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.delete})
                }, createButtonDeleteSubActions: function createButtonDeleteSubActions(media, executeLocation, deleteLocalFilesOnly) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.more, String.id.IDS_DELETE_LABEL, {
                            mediaItem: media, executeLocation: executeLocation, deleteLocalFilesOnly: deleteLocalFilesOnly, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDelete, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.delete})
                }, createButtonTryAgain: function createButtonTryAgain(media, executeLocation, useVerboseDownloadText) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadAgain, useVerboseDownloadText ? String.id.IDS_MUSIC_DETAILS_RETRY_DOWNLOAD_ACTION : MS.Entertainment.Utilities.getTryAgainDynamicText(), {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonTryAgain
                        }, {icon: WinJS.UI.AppBarIcon.download});
                    return button
                }, createButtonPlayOnXbox: function createButtonPlayOnXbox(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playOnXbox, String.id.IDS_DETAILS_PLAY_ON_XBOX_LABEL, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayOnXbox, dismissOverlayOnExecute: true
                        }, {
                            icon: MS.Entertainment.UI.Icon.sendToXbox, adornerMode: MS.Entertainment.UI.Controls.IconButtonMode.Custom, adornerRing: MS.Entertainment.UI.Icon.sendToXboxAdorner, className: "enablePressedState"
                        })
                }, smartBuyButtonTemplateSelector: WinJS.Utilities.markSupportedForProcessing(function smartBuyButtonTemplateSelector(item) {
                    var result;
                    function loadItemTemplate(itemTemplate) {
                        return MS.Entertainment.UI.Framework.loadTemplate(itemTemplate, null, true).then(function(templateControl) {
                                return templateControl
                            })
                    }
                    if (item.parameter && item.parameter.itemTemplate)
                        return loadItemTemplate(item.parameter.itemTemplate);
                    else
                        return loadItemTemplate(this._itemTemplate)
                }), createButtonDownload: function createButtonDownload(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.download, MS.Entertainment.Utilities.getDownloadDynamicText(), {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownload
                        }, {icon: WinJS.UI.AppBarIcon.download});
                    return button
                }, createButtonDownloadSeason: function createButtonDownloadSeason(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadSeason, MS.Entertainment.Utilities.getDownloadDynamicText(), {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownloadSeason
                        }, {icon: WinJS.UI.AppBarIcon.download});
                    return button
                }, createButtonPinToStartScreen: function createButtonPinToStartScreen(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.pinToStartScreen, String.id.IDS_PIN_TO_START_SCREEN_BUTTON, {
                            mediaItem: media, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPinToStartScreen, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: WinJS.UI.AppBarIcon.pin});
                    return button
                }, createButtonUnpinFromStartScreen: function createButtonUnpinFromStartScreen(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.unpinFromStartScreen, String.id.IDS_UNPIN_FROM_START_SCREEN_BUTTON, {
                            mediaItem: media, automationId: MS.Entertainment.UI.AutomationIds.smartButtonUnpinFromStartScreen, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: WinJS.UI.AppBarIcon.unpin});
                    return button
                }, _createButtonPinToDashboardInternal: function _createButtonPinToDashboardInternal(media, executeLocation, strings, blockIfRegionMismatch) {
                    var pinnedItemsList = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinnedList);
                    var hasPin = pinnedItemsList.hasPin(media);
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.pinMediaItem, hasPin ? strings.unpinButtonGuiStringId : strings.pinButtonGuiStringId, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPinToDashboard, strings: strings, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, null, {
                            guiStringId: hasPin ? strings.unpinButtonGuiStringId : strings.pinButtonGuiStringId, voicePhraseStringId: hasPin ? strings.unpinButtonVoicePhraseStringId : strings.pinButtonVoicePhraseStringId, voicePhoneticPhraseStringId: hasPin ? strings.unpinButtonVoicePhoneticPhraseStringId : strings.pinButtonVoicePhoneticPhraseStringId, voiceConfidenceStringId: hasPin ? strings.unpinButtonVoiceConfidenceStringId : strings.pinButtonVoiceConfidenceStringId
                        });
                    button.parameter.button = button;
                    button.parameter.blockIfRegionMismatch = blockIfRegionMismatch;
                    return button
                }, getWatchNextEpisodeButtons: function getWatchNextEpisodeButtons(media, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.canvas;
                    var buttons = {
                            buyEpisode: this.createButtonBuyEpisode(media, location), playFreeOffer: this.createButtonPlayFreeOffer(media, location), play: this.createButtonPlayAndShowNowPlaying(media, location), restart: this.createButtonRestart(media, location), resume: this.createButtonResume(media, location), playDisabled: this.createButtonPlayDisabled(location)
                        };
                    if (MS.Entertainment.Utilities.isVideoApp1) {
                        buttons.downloadAction = this.createButtonDownload(media, location);
                        buttons.deleteSubActions = this.createButtonDeleteSubActions(media, location);
                        buttons.deleteLocally = this.createButtonDeleteLocally(media, location);
                        buttons.deleteFromPcAndCollection = this.createButtonDeleteFromPcAndCollection(media, location);
                        buttons.deleteFromCollection = this.createButtonDeleteFromCollection(media, location);
                        buttons.pinToStartScreen = this.createButtonPinToStartScreen(media, location);
                        buttons.unpinFromStartScreen = this.createButtonUnpinFromStartScreen(media, location)
                    }
                    return buttons
                }, getPostRollEpisodeButtons: function getPostRollEpisodeButtons(media) {
                    var buttons = {buyNextEpisode: this.createButtonBuyEpisodeInPostRoll(media)};
                    return buttons
                }, getPostRollSeasonButtons: function getPostRollSeasonButtons(media) {
                    var buttons = {
                            playFreeOffer: this.createButtonPlayFreeOffer(media, MS.Entertainment.UI.Actions.ExecutionLocation.nowPlaying), buyCurrentSeason: this.createButtonBuyCurrentSeasonInPostRoll(media), buyCurrentSeasonPass: this.createButtonBuyCurrentSeasonPassInPostRoll(media), buyNextSeason: this.createButtonBuyNextSeasonInPostRoll(media), buyNextSeasonPass: this.createButtonBuyNextSeasonPassInPostRoll(media)
                        };
                    return buttons
                }, getVideoDetailsButtons: function getVideoDetailsButtons(media, executeLocation, options) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    var buttons = {
                            play: this.createButtonPlayAndShowNowPlaying(media, location), playTrailer: this.createButtonPlayTrailer(media, location), playFreeOffer: this.createButtonPlayFreeOffer(media, location), restart: this.createButtonRestart(media, location), resume: this.createButtonResume(media, location), watch: this.createButtonWatch(media, location), buy: this.createButtonBuyVideo(media, location), rent: this.createButtonRentVideo(media, location), switchVideoDefinition: this.createButtonSwitchVideoDefinition(media, location), switchLanguage: this.createButtonSwitchLanguage(media, location), playDisabled: this.createButtonPlayDisabled(location)
                        };
                    if (MS.Entertainment.Utilities.isVideoApp1) {
                        buttons.playOnXbox = this.createButtonPlayOnXbox(media, location);
                        buttons.pinToStartScreen = this.createButtonPinToStartScreen(media, location);
                        buttons.unpinFromStartScreen = this.createButtonUnpinFromStartScreen(media, location);
                        buttons.downloadAction = this.createButtonDownload(media, location);
                        buttons.tryAgain = this.createButtonTryAgain(media, location);
                        buttons.showDownloadManager = this.createButtonDownloadManager(media, location);
                        buttons.watchTrailer = this.createButtonWatchTrailer(media, location);
                        buttons.deleteSubActions = this.createButtonDeleteSubActions(media, location);
                        buttons.deleteLocally = this.createButtonDeleteLocally(media, location);
                        buttons.deleteFromPcAndCollection = this.createButtonDeleteFromPcAndCollection(media, location);
                        buttons.deleteFromCollection = this.createButtonDeleteFromCollection(media, location)
                    }
                    else {
                        buttons.ratingPicker = this.createVideoButtonRatingPicker(media, location);
                        buttons.pinToDashboard = this.createVideoButtonPinToDashboard(media, location);
                        buttons.addRemoveItemWatchlist = this.createVideoButtonAddRemoveItemWatchlist(media, location);
                        buttons.launchInteractiveApp = this.createButtonLaunchInteractiveApp(media, location);
                        buttons.viewInCollection = this.createVideoButtonViewInCollection(media, location)
                    }
                    return buttons
                }, getTVDetailsButtons: function getTVDetailsButtons(media, executeLocation, options) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    var buttons = {
                            buySeason: this.createButtonBuySeason(media, location), buyCurrentSeason: this.createButtonBuyCurrentSeason(media, location), playFreeOffer: this.createButtonPlayFreeOffer(media, location), switchVideoDefinition: this.createButtonSwitchVideoDefinition(media, location), switchLanguage: this.createButtonSwitchLanguage(media, location)
                        };
                    if (MS.Entertainment.Utilities.isVideoApp1) {
                        var includeDownloadButtons = options && options.includeDownloadButtons;
                        if (includeDownloadButtons)
                            buttons.downloadSeason = this.createButtonDownloadSeason(media, location);
                        buttons.pinToStartScreen = this.createButtonPinToStartScreen(media, location);
                        buttons.unpinFromStartScreen = this.createButtonUnpinFromStartScreen(media, location);
                        buttons.deleteSubActions = this.createButtonDeleteSubActions(media, location);
                        buttons.deleteLocally = this.createButtonDeleteLocally(media, location);
                        buttons.deleteFromPcAndCollection = this.createButtonDeleteFromPcAndCollection(media, location);
                        buttons.deleteFromCollection = this.createButtonDeleteFromCollection(media, location)
                    }
                    else if (MS.Entertainment.Utilities.isVideoApp2)
                        buttons.launchInteractiveApp = this.createButtonLaunchInteractiveApp(media, location);
                    return buttons
                }, getTVSeriesDetailsButtons: function getTVSeriesDetailsButtons(media, executeLocation, seasonSelectionManager) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    var buttons = {
                            ratingPicker: this.createVideoButtonRatingPicker(media, location), pinToDashboard: this.createVideoButtonPinToDashboard(media, location), addRemoveItemWatchlist: this.createVideoButtonAddRemoveItemWatchlist(media, location), changeSeason: this.createVideoButtonChangeSeason(media, location, seasonSelectionManager)
                        };
                    return buttons
                }, createVideoButtonRatingPicker: function createVideoButtonRatingPicker(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.actionPassThrough, String.id.IDS_VIDEO2_L3_RATE_BUTTON_VUI_GUI, {
                            mediaItem: media, automationId: MS.Entertainment.UI.AutomationIds.smartButtonRatingPicker, executeLocation: executeLocation, itemTemplate: "/Components/Video/VideoMarketplaceTemplates2.html#ratingPickerWrapperTemplate"
                        });
                    button.dataWinVoiceOverride = {
                        phrase: String.load(String.id.IDS_VIDEO2_L3_RATE_BUTTON_VUI_ALM), pronunciation: String.load(String.id.IDS_VIDEO2_L3_RATE_BUTTON_VUI_PRON), confidence: String.load(String.id.IDS_VIDEO2_L3_RATE_BUTTON_VUI_CONF)
                    };
                    button.onChange = WinJS.Utilities.markSupportedForProcessing(function onChange(event) {
                        if (media && event && event.detail && event.detail.hasOwnProperty("tentativeRating"))
                            media.userRating = event.detail.tentativeRating
                    });
                    button.eventHandlers = {onMessageEvent: function(message){}};
                    return button
                }, createVideoButtonChangeSeason: function createVideoButtonChangeSeason(media, executeLocation, selectionManager) {
                    MS.Entertainment.ViewModels.assert(selectionManager, "No selection manager specified for the change season button!");
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.actionPassThrough, String.id.IDS_VIDEO2_TV_CHANGE_SEASON_BUTTON_VUI_GUI, {
                            mediaItem: media, automationId: MS.Entertainment.UI.AutomationIds.smartButtonChangeSeason, executeLocation: executeLocation, itemTemplate: "/Components/Video2/TvDetailsPage.html#changeSeasonButtonTemplate"
                        }, null, {
                            guiStringId: String.id.IDS_VIDEO2_TV_CHANGE_SEASON_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_TV_CHANGE_SEASON_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_TV_CHANGE_SEASON_BUTTON_VUI_PRON, voiceConfidenceStringId: String.id.IDS_VIDEO2_TV_CHANGE_SEASON_BUTTON_VUI_CONF
                        });
                    button.labelOverride = button.title;
                    button.seasonSelectionManager = selectionManager;
                    return button
                }, createVideoButtonPinToDashboard: function createVideoButtonPinToDashboard(media, executeLocation) {
                    if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.pinnedList))
                        return null;
                    var strings = {
                            pinningTitleStringId: String.id.IDS_VIDEO2_PIN_BUTTON_PINNING, unpinningTitleStringId: String.id.IDS_VIDEO2_PIN_BUTTON_UNPINNING, pinButtonGuiStringId: String.id.IDS_VIDEO2_L3_PIN_TO_HOME_BUTTON_VUI_GUI, pinButtonVoicePhraseStringId: String.id.IDS_VIDEO2_L3_PIN_TO_HOME_BUTTON_VUI_ALM, pinButtonVoicePhoneticPhraseStringId: String.id.IDS_VIDEO2_L3_PIN_TO_HOME_BUTTON_VUI_PRON, pinButtonVoiceConfidenceStringId: String.id.IDS_VIDEO2_L3_PIN_TO_HOME_BUTTON_VUI_CONF, unpinButtonGuiStringId: String.id.IDS_VIDEO2_L3_UNPIN_FROM_HOME_BUTTON_VUI_GUI, unpinButtonVoicePhraseStringId: String.id.IDS_VIDEO2_L3_UNPIN_FROM_HOME_BUTTON_VUI_ALM, unpinButtonVoicePhoneticPhraseStringId: String.id.IDS_VIDEO2_L3_UNPIN_FROM_HOME_BUTTON_VUI_PRON, unpinButtonVoiceConfidenceStringId: String.id.IDS_VIDEO2_L3_UNPIN_FROM_HOME_BUTTON_VUI_CONF
                        };
                    return MS.Entertainment.ViewModels.SmartBuyButtons._createButtonPinToDashboardInternal(media, executeLocation, strings)
                }, createVideoButtonAddRemoveItemWatchlist: function createVideoButtonAddToWatchlist(media, executeLocation) {
                    if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.watchlistService))
                        return null;
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.addRemoveItemWatchlist, String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_TITLE_VUI_GUI, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonAddRemoveItemWatchlist, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, null, {
                            guiStringId: String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_TITLE_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_TITLE_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_VUI_PRON, voiceConfidenceStringId: String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_VUI_CONF
                        });
                    button.parameter.button = button;
                    return button
                }, createVideoButtonViewInCollection: function createVideoButtonViewInCollection(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.navigate, String.id.IDS_VIDEO2_L3_BUNDLE_GO_TO_COLLECTION_VUI_GUI, {
                            mediaItem: media, automationId: MS.Entertainment.UI.AutomationIds.smartButtonViewInCollection, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate", page: MS.Entertainment.UI.Monikers.root, args: {selectedIndexName: "collection"}
                        }, null, {
                            guiStringId: String.id.IDS_VIDEO2_L3_BUNDLE_GO_TO_COLLECTION_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_L3_BUNDLE_GO_TO_COLLECTION_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_L3_BUNDLE_GO_TO_COLLECTION_VUI_PRON, voiceConfidenceStringId: String.id.IDS_VIDEO2_L3_BUNDLE_GO_TO_COLLECTION_VUI_CONF
                        });
                    return button
                }, createVideoButtonInCollection: function createVideoButtonInCollection(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.actionPassThrough, String.id.IDS_VIDEO_BUNDLES_DISABLED_BUTTON, {
                            mediaItem: media, automationId: MS.Entertainment.UI.AutomationIds.smartButtonInCollection, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, null, null);
                    return button
                }, createButtonWatch: function createButtonWatch(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_DETAILS_BUY_EPISODE_LABEL, {
                            mediaItem: media, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY, automationId: MS.Entertainment.UI.AutomationIds.smartButtonWatch, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplateWithSubtext"
                        }, {icon: MS.Entertainment.UI.Icon.shop});
                    button.eventHandlers = {onMessageEvent: function(message){}};
                    return button
                }, createButtonBuyVideo: function createButtonBuyVideo(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_BUY_BUTTON_VIDEO, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuyVideo, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplateWithSubtext"
                        }, {
                            icon: MS.Entertainment.UI.Icon.shop, subTextVisibility: true
                        }, {
                            guiStringId: String.id.IDS_VIDEO2_L3_BUY_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_L3_BUY_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_L3_BUY_BUTTON_VUI_PRON
                        });
                    button.eventHandlers = {onMessageEvent: function(message){}};
                    return button
                }, createButtonBuyEpisode: function createButtonBuyEpisode(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_DETAILS_BUY_EPISODE_POPOVER_LABEL, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuyVideo, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplateWithSubtext"
                        }, {
                            icon: MS.Entertainment.UI.Icon.shop, subTextVisibility: true
                        }, {
                            guiStringId: String.id.IDS_VIDEO2_TV_BUY_EPISODE_POPOVER_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_TV_BUY_EPISODE_POPOVER_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_TV_BUY_EPISODE_POPOVER_BUTTON_VUI_PRON
                        });
                    button.eventHandlers = {onMessageEvent: function(message){}};
                    return button
                }, createButtonBuyEpisodeInPostRoll: function createButtonBuyEpisode(media) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_BUTTON_VUI_GUI, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuyVideo, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas
                        }, null, {
                            guiStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_BUTTON_VUI_PRON, voiceConfidenceStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_BUTTON_VUI_CONF
                        });
                    button.eventHandlers = {onMessageEvent: function(message){}};
                    return button
                }, createButtonBuyCurrentSeasonInPostRoll: function createButtonBuySeasonInPostRoll(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_VIDEO2_POSTROLL_BUY_THIS_SEASON_BUTTON_VUI_GUI, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuyCurrentSeason
                        }, null, {
                            guiStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_THIS_SEASON_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_THIS_SEASON_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_THIS_SEASON_BUTTON_VUI_PRON, voiceConfidenceStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_THIS_SEASON_BUTTON_VUI_CONF
                        })
                }, createButtonBuyCurrentSeasonPassInPostRoll: function createButtonBuyCurrentSeasonPassInPostRoll(media) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_VIDEO2_POSTROLL_BUY_THIS_SEASON_PASS_BUTTON_VUI_GUI, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuyCurrentSeasonPass
                        }, null, {
                            guiStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_THIS_SEASON_PASS_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_THIS_SEASON_PASS_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_THIS_SEASON_PASS_BUTTON_VUI_PRON, voiceConfidenceStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_THIS_SEASON_PASS_BUTTON_VUI_CONF
                        })
                }, createButtonBuyNextSeasonInPostRoll: function createButtonBuyNextSeasonInPostRoll(media) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_SEASON_BUTTON_VUI_GUI, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuyNextSeason
                        }, null, {
                            guiStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_SEASON_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_SEASON_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_SEASON_BUTTON_VUI_PRON, voiceConfidenceStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_SEASON_BUTTON_VUI_CONF
                        })
                }, createButtonBuyNextSeasonPassInPostRoll: function createButtonBuyNextSeasonPassInPostRoll(media) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_SEASON_PASS_BUTTON_VUI_GUI, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuyNextSeasonPass
                        }, null, {
                            guiStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_SEASON_PASS_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_SEASON_PASS_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_SEASON_PASS_BUTTON_VUI_PRON, voiceConfidenceStringId: String.id.IDS_VIDEO2_POSTROLL_BUY_NEXT_SEASON_PASS_BUTTON_VUI_CONF
                        })
                }, createButtonRentVideo: function createButtonRentVideo(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_RENT_BUTTON, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_RENT, automationId: MS.Entertainment.UI.AutomationIds.smartButtonRentVideo, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplateWithSubtext"
                        }, {
                            icon: MS.Entertainment.UI.Icon.shop, subTextVisibility: true
                        }, {
                            guiStringId: String.id.IDS_VIDEO2_L3_RENT_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_L3_RENT_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_L3_RENT_BUTTON_VUI_PRON
                        });
                    button.eventHandlers = {onMessageEvent: function(message){}};
                    return button
                }, createButtonPlayFreeOffer: function createButtonPlayFreeOffer(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playFreeOffer, String.id.IDS_PLAY_BUTTON_VIDEO, {
                            mediaItem: media, offer: null, automationId: MS.Entertainment.UI.AutomationIds.smartBuyPlayFreeVideoOffer, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplateWithSubtext"
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_VIDEO2_L3_PLAY_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_L3_PLAY_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_L3_PLAY_BUTTON_VUI_PRON
                        });
                    button.subTitle = String.load(String.id.IDS_VIDEO_PRICE_FREE);
                    button.eventHandlers = {onMessageEvent: function(message){}};
                    return button
                }, getInteractiveAppTextIds: function getInteractiveAppTextIds() {
                    var buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_07_VUI_GUI;
                    var almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_07_VUI_ALM;
                    var pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_07_VUI_PRON;
                    var confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_07_VUI_CONF;
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (configurationManager.video.interactiveAppTextIds)
                        switch (configurationManager.video.interactiveAppTextIds) {
                            case 1:
                                buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_01_VUI_GUI;
                                almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_01_VUI_ALM;
                                pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_01_VUI_PRON;
                                confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_01_VUI_CONF;
                                break;
                            case 2:
                                buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_02_VUI_GUI;
                                almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_02_VUI_ALM;
                                pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_02_VUI_PRON;
                                confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_02_VUI_CONF;
                                break;
                            case 3:
                                buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_03_VUI_GUI;
                                almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_03_VUI_ALM;
                                pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_03_VUI_PRON;
                                confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_03_VUI_CONF;
                                break;
                            case 4:
                                buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_04_VUI_GUI;
                                almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_04_VUI_ALM;
                                pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_04_VUI_PRON;
                                confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_04_VUI_CONF;
                                break;
                            case 5:
                                buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_05_VUI_GUI;
                                almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_05_VUI_ALM;
                                pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_05_VUI_PRON;
                                confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_05_VUI_CONF;
                                break;
                            case 6:
                                buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_06_VUI_GUI;
                                almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_06_VUI_ALM;
                                pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_06_VUI_PRON;
                                confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_06_VUI_CONF;
                                break;
                            case 7:
                                buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_07_VUI_GUI;
                                almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_07_VUI_ALM;
                                pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_07_VUI_PRON;
                                confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_07_VUI_CONF;
                                break;
                            case 8:
                                buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_08_VUI_GUI;
                                almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_08_VUI_ALM;
                                pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_08_VUI_PRON;
                                confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_08_VUI_CONF;
                                break;
                            case 9:
                                buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_09_VUI_GUI;
                                almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_09_VUI_ALM;
                                pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_09_VUI_PRON;
                                confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_09_VUI_CONF;
                                break;
                            case 10:
                                buttonId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_10_VUI_GUI;
                                almId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_10_VUI_ALM;
                                pronId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_10_VUI_PRON;
                                confId = String.id.IDS_VIDEO2_L3_GET_INTERACTIVE_APP_10_VUI_CONF;
                                break
                        }
                    return {
                            buttonId: buttonId, almId: almId, pronId: pronId, confId: confId
                        }
                }, createButtonLaunchInteractiveApp: function createButtonLaunchInteractiveApp(media, executeLocation) {
                    var buttonIds = this.getInteractiveAppTextIds();
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.launchInteractiveApp, buttonIds.buttonId, {
                            mediaItem: media, automationId: MS.Entertainment.UI.AutomationIds.smartButtonLaunchInteractiveApp, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: buttonIds.buttonId, voicePhraseStringId: buttonIds.almId, voicePhoneticPhraseStringId: buttonIds.pronId
                        });
                    button.eventHandlers = {onMessageEvent: function(message){}};
                    return button
                }, createButtonPlayAndShowNowPlaying: function createButtonPlayAndShowNowPlaying(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails, String.id.IDS_DETAILS_PLAY_NOW_LABEL, {
                            mediaItem: media, showDetails: false, autoPlay: true, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlay, executeLocation: executeLocation, dismissOverlayOnExecute: true, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_VIDEO2_L3_PLAY_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_L3_PLAY_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_L3_PLAY_BUTTON_VUI_PRON
                        })
                }, createButtonRestart: function createButtonRestart(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails, String.id.IDS_RESTART_BUTTON, {
                            mediaItem: media, showDetails: false, autoPlay: true, startPositionMsec: 1, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonRestart, dismissOverlayOnExecute: true, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.restart}, {
                            guiStringId: String.id.IDS_VIDEO2_L3_RESTART_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_L3_RESTART_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_L3_RESTART_BUTTON_VUI_PRON
                        })
                }, createButtonResume: function createButtonResume(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails, String.id.IDS_RESUME_BUTTON, {
                            mediaItem: media, showDetails: false, autoPlay: true, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonResume, dismissOverlayOnExecute: true, itemTemplate: MS.Entertainment.Utilities.isVideoApp1 ? "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate" : "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplateWithWatchProgress"
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_VIDEO2_L3_RESUME_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_L3_RESUME_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_L3_RESUME_BUTTON_VUI_PRON
                        })
                }, createButtonDownloadManager: function createButtonDownloadManager(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.showVideoDownloadManager, String.id.IDS_VIDEO_DOWNLOAD_MANAGER_LINK, {
                            executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonShowDownloadManager
                        }, {icon: WinJS.UI.AppBarIcon.download})
                }, createButtonPauseDownload: function createButtonPauseDownload(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadPause, String.id.IDS_VIDEO_DOWNLOAD_MANAGER_PAUSE, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownloadPause
                        }, {icon: MS.Entertainment.UI.Icon.pause});
                    return button
                }, createButtonCancelDownload: function createButtonCancelDownload(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadCancel, String.id.IDS_VIDEO_DOWNLOAD_MANAGER_CANCEL, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownloadCancel
                        }, {icon: MS.Entertainment.UI.Icon.close});
                    return button
                }, createButtonResumeDownload: function createButtonResumeDownload(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadResume, String.id.IDS_VIDEO_DOWNLOAD_MANAGER_RESUME, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownloadResume
                        }, {icon: MS.Entertainment.UI.Icon.play});
                    return button
                }, createButtonRetryDownload: function createButtonRetryDownload(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadAgain, String.id.IDS_VIDEO_DOWNLOAD_MANAGER_RETRY, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownloadRetry
                        }, {icon: MS.Entertainment.UI.Icon.repeat});
                    return button
                }, createButtonPlayTrailer: function createButtonPlayTrailer(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails, String.id.IDS_DETAILS_PLAY_TRAILER_LABEL, {
                            mediaItem: media, showDetails: MS.Entertainment.Utilities.isVideoApp1, autoPlay: true, playPreviewOnly: true, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayTrailer, dismissOverlayOnExecute: true, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_VIDEO2_MOVIES_PLAY_TRAILER_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_MOVIES_PLAY_TRAILER_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_MOVIES_PLAY_TRAILER_BUTTON_VUI_PRON
                        })
                }, createButtonWatchTrailer: function createButtonWatchTrailer(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails, String.id.IDS_DETAILS_WATCH_TRAILER_LABEL, {
                            mediaItem: media, showDetails: MS.Entertainment.Utilities.isVideoApp1, autoPlay: true, playPreviewOnly: true, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonWatchTrailer, dismissOverlayOnExecute: true, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.play})
                }, createButtonSwitchVideoDefinition: function createButtonSwitchVideoDefinition(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.switchVideoDefinition, String.id.IDS_VIDEO_PRICE_SWITCH_SD, {
                            mediaItem: media, executeLocation: executeLocation, initialized: false, automationId: MS.Entertainment.UI.AutomationIds.smartButtonSwitchVideoDefinition, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.switchDefinition}, {
                            guiStringId: String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_PRON
                        });
                    var oldExecuted = button.executed.bind(button);
                    button.executed = WinJS.Utilities.markSupportedForProcessing(function executed(actionData) {
                        oldExecuted(actionData);
                        button.enabled = false;
                        button.updateTitleForMediaResolution()
                    });
                    return button
                }, createButtonSwitchLanguage: function createButtonSwitchLanguage(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.switchLanguage, String.id.IDS_VIDEO_PURCHASE_OPTIONS_LANGUAGE, {
                            mediaItem: media, executeLocation: executeLocation, initialized: false, automationId: MS.Entertainment.UI.AutomationIds.smartButtonSwitchLanguage, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplateWithSubtext"
                        }, {
                            icon: MS.Entertainment.UI.Icon.switchLanguage, subTextVisibility: true
                        });
                    return button
                }, createButtonBuySeason: function createButtonBuySeason(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_DETAILS_BUY_SEASON_LABEL, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuySeason, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplateWithSubtext"
                        }, {
                            icon: MS.Entertainment.UI.Icon.shop, subTextVisibility: true
                        }, {
                            guiStringId: String.id.IDS_VIDEO2_TV_BUY_SEASON_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_TV_BUY_SEASON_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_TV_BUY_SEASON_BUTTON_VUI_PRON
                        })
                }, createButtonBuyCurrentSeason: function createButtonBuyCurrentSeason(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_DETAILS_BUY_SEASON_CURRENT_LABEL, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, purchaseType: MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuyCurrentSeason, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplateWithSubtext"
                        }, {
                            icon: MS.Entertainment.UI.Icon.shop, subTextVisibility: true
                        }, {
                            guiStringId: String.id.IDS_VIDEO2_TV_BUY_SEASON_PASS_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_TV_BUY_SEASON_PASS_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_TV_BUY_SEASON_PASS_BUTTON_VUI_PRON
                        })
                }, getEpisodeDetailsButtons: function getEpisodeDetailsButtons(media, executeLocation, options) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    var buttons = {
                            play: this.createButtonPlayAndShowNowPlaying(media, location), playFreeOffer: this.createButtonPlayFreeOffer(media, location), restart: this.createButtonRestart(media, location), resume: this.createButtonResume(media, location), watch: this.createButtonWatch(media, location), buy: this.createButtonBuyVideo(media, location), buyEpisode: this.createButtonBuyEpisode(media, location), rent: this.createButtonRentVideo(media, location), playTrailer: this.createButtonPlayTrailer(media, location), playDisabled: this.createButtonPlayDisabled(location), switchVideoDefinition: this.createButtonSwitchVideoDefinition(media, location), switchLanguage: this.createButtonSwitchLanguage(media, location)
                        };
                    if (MS.Entertainment.Utilities.isVideoApp1) {
                        buttons.playOnXbox = this.createButtonPlayOnXbox(media, location);
                        buttons.pinToStartScreen = this.createButtonPinToStartScreen(media, location);
                        buttons.unpinFromStartScreen = this.createButtonUnpinFromStartScreen(media, location);
                        buttons.downloadAction = this.createButtonDownload(media, location);
                        buttons.tryAgain = this.createButtonTryAgain(media, location);
                        buttons.showDownloadManager = this.createButtonDownloadManager(media, location);
                        buttons.deleteSubActions = this.createButtonDeleteSubActions(media, location);
                        buttons.deleteLocally = this.createButtonDeleteLocally(media, location);
                        buttons.deleteFromPcAndCollection = this.createButtonDeleteFromPcAndCollection(media, location);
                        buttons.deleteFromCollection = this.createButtonDeleteFromCollection(media, location)
                    }
                    else
                        buttons.launchInteractiveApp = this.createButtonLaunchInteractiveApp(media, location);
                    return buttons
                }, getVideoDownloadItemButtons: function getVideoDownloadItemButtons(media, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    return {
                            pauseDownload: this.createButtonPauseDownload(media, location), resumeDownload: this.createButtonResumeDownload(media, location), cancelDownload: this.createButtonCancelDownload(media, location), retryDownload: this.createButtonRetryDownload(media, location)
                        }
                }
        }});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {SmartBuyStateHandlers: {
            _canXboxAccessMedia: function _canXboxAccessMedia(media, rights) {
                if (!MS.Entertainment.Platform.PlaybackHelpers.isPlayToXboxFeatureEnabled(media))
                    return false;
                else if (!media || !media.hasServiceId)
                    return false;
                else if ((!media.rights || media.rights.length === 0) && media.hasCanonicalId)
                    return true;
                return MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(media, MS.Entertainment.ViewModels.SmartBuyStateHandlers.Tuner.Xbox360, rights)
            }, _mediaHasAnyRight: function _mediaHasAnyRight(media, tuner, rights, filters, sortFunction) {
                    var possibleRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._getMatchingRights(media, tuner, rights, filters, sortFunction);
                    return (possibleRights && possibleRights.length > 0)
                }, mediaHasAnyRight: function mediaHasAnyRight(media, tuner, rights, filters, sortFunction) {
                    return MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(media, tuner, rights, filters, sortFunction)
                }, getMatchingRights: function getMatchingRights(media, tuner, rights, filters, sortFunction) {
                    return MS.Entertainment.ViewModels.SmartBuyStateHandlers._getMatchingRights(media, tuner, rights, filters, sortFunction)
                }, _getMatchingRights: function _getMatchingRights(media, tuner, rights, filters, sortFunction) {
                    if (!media || !media.rights)
                        return null;
                    var freeOnly = !!WinJS.Utilities.getMember("freeOnly", filters);
                    var excludeFree = !!WinJS.Utilities.getMember("excludeFree", filters);
                    var allowPartialRights = !!WinJS.Utilities.getMember("allowPartialRights", filters);
                    var includeExpired = !!WinJS.Utilities.getMember("includeExpired", filters);
                    var useUnfilteredRights = !!WinJS.Utilities.getMember("useUnfilteredRights", filters);
                    var deliveryFormat = WinJS.Utilities.getMember("deliveryFormat", filters);
                    var primaryAudioLanguage = WinJS.Utilities.getMember("primaryAudioLanguage", filters);
                    var possibleRights = [];
                    var rightsToCheck = useUnfilteredRights ? media.unfilteredRights : media.rights;
                    var nowDate = Date.now();
                    if (!MS.Entertainment.Utilities.clientSupportsFreeJustPlays)
                        excludeFree = false;
                    for (var i = 0; i < rightsToCheck.length; i++) {
                        var right = rightsToCheck[i];
                        if (!right)
                            continue;
                        if (!MS.Entertainment.Utilities.rightSupportsTuner(right, tuner))
                            continue;
                        if (!rights || rights.length === 0) {
                            possibleRights.push(right);
                            continue
                        }
                        var foundRight = false;
                        for (var j = 0; j < rights.length; j++)
                            if (right.licenseRight === rights[j] && (MS.Entertainment.ViewModels.SmartBuyStateHandlers._isValidOffer(right, media.mediaType) || (allowPartialRights && !right.isFullRight) || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PreviewStream || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.FreeStream || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Subscription || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream)) {
                                foundRight = true;
                                break
                            }
                        if (!foundRight)
                            continue;
                        if (right.hasOffer && right.startDate && right.endDate)
                            try {
                                if (!includeExpired) {
                                    var startDate = Date.parse(right.startDate);
                                    if (isNaN(startDate))
                                        startDate = parseInt(right.startDate.split("(")[1].split(")")[0]);
                                    var endDate = Date.parse(right.endDate);
                                    if (isNaN(endDate))
                                        endDate = parseInt(right.endDate.split("(")[1].split(")")[0]);
                                    if (startDate > nowDate || nowDate > endDate)
                                        continue
                                }
                            }
                            catch(e) {
                                MS.Entertainment.Data.fail("Invalid start or end date specified on media, service id = " + media.serviceId, null, MS.Entertainment.UI.Debug.errorLevel.low)
                            }
                        if (freeOnly && (!right.hasOffer || !MS.Entertainment.Utilities.isRightFree(right) || right.priceCurrencyCode === "MTK"))
                            continue;
                        if (excludeFree && (!right.hasOffer || MS.Entertainment.Utilities.isRightFree(right)))
                            continue;
                        if (MS.Entertainment.ViewModels.SmartBuyStateHandlers._filterRight(right, media))
                            continue;
                        if (MS.Entertainment.Utilities.isVideoApp) {
                            if (!right.priceCurrencyCode)
                                continue;
                            var localCurrencyFilters = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service.localCurrencyFilters.split(",");
                            if (localCurrencyFilters) {
                                var unwantedCurrencyCode = false;
                                for (var f = 0; f < localCurrencyFilters.length; f++)
                                    if (right.priceCurrencyCode && right.priceCurrencyCode === localCurrencyFilters[f]) {
                                        unwantedCurrencyCode = true;
                                        break
                                    }
                                if (unwantedCurrencyCode)
                                    continue
                            }
                            if (deliveryFormat && right.deliveryFormat !== deliveryFormat)
                                continue;
                            var a = MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(right.primaryAudioLanguage);
                            var b = MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(primaryAudioLanguage);
                            if (a && b && a !== b)
                                continue;
                            var resolutionFormat = MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat;
                            var qualityPreference = [resolutionFormat.hd1080p, resolutionFormat.hd, resolutionFormat.sd, resolutionFormat.xd];
                            for (var j = 0; j < possibleRights.length; j++)
                                if (possibleRights[j].offerId === right.offerId)
                                    if (sortFunction) {
                                        var tempRights = [right, possibleRights[j]];
                                        tempRights.sort(sortFunction);
                                        possibleRights[j] = tempRights[1];
                                        right = null;
                                        break
                                    }
                                    else {
                                        var qualityIndexOld = qualityPreference.indexOf(possibleRights[j].videoDefinition);
                                        var qualityIndexNew = qualityPreference.indexOf(right.videoDefinition);
                                        if (qualityIndexOld > qualityIndexNew) {
                                            possibleRights.splice(j, 1);
                                            j--
                                        }
                                        else {
                                            right = null;
                                            break
                                        }
                                    }
                        }
                        if (right)
                            possibleRights.push(right)
                    }
                    return possibleRights
                }, _filterRight: function _filterRight(right, media) {
                    return (MS.Entertainment.Utilities.isVideoApp2 && right.deliveryFormat === MS.Entertainment.Data.Augmenter.Marketplace.edsDeliveryFormat.download && media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.tvSeason) || (MS.Entertainment.Utilities.isVideoApp1 && !right.signedOffer)
                }, _isValidOffer: function _isValidOffer(right, mediaType) {
                    var isValidOffer = right && right.offerId;
                    var isTrackAlbumPurchaseOffer = mediaType === Microsoft.Entertainment.Queries.ObjectType.track && right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase;
                    if (isValidOffer && !isTrackAlbumPurchaseOffer && (mediaType === Microsoft.Entertainment.Queries.ObjectType.track || mediaType === Microsoft.Entertainment.Queries.ObjectType.album)) {
                        var paymentTypes = right.paymentInstruments;
                        if (paymentTypes)
                            paymentTypes = Array.isArray(paymentTypes) ? paymentTypes : [paymentTypes];
                        isValidOffer = paymentTypes && paymentTypes.length && paymentTypes.some(function doesOfferSupportPurchaseType(paymentType) {
                            return (paymentType === MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentType.creditCard)
                        })
                    }
                    return isValidOffer
                }, Tuner: {
                    All: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.all, Xbox360: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.xbox360, Windows: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.pc, Zune30: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.zuneDevice, ZuneMobile: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.zuneMobile
                }, MarketplaceRight: {
                    Rent: "Rent", RentStream: "RentStream", Purchase: "Purchase", PurchaseStream: "PurchaseStream", AlbumPurchase: "AlbumPurchase", Preview: "Preview", PreviewStream: "PreviewStream", Download: "Download", FreeStream: "FreeStream", SeasonPurchase: "SeasonPurchase", SeasonPurchaseStream: "SeasonPurchaseStream", Stream: "Stream", Subscription: "Subscription", SubscriptionFree: "SubscriptionFree", TransferToPortableDevice: "TransferToPortableDevice", Trial: "Trial"
                }, PaymentTypes: {
                    creditCard: "Credit Card", points: "Microsoft Points", mobileOperator: "Mobile Operator"
                }
        }})
})()
})();
/* >>>>>>/viewmodels/purchaseflow/videosmartbuystateengine.js:12819 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            var VideoDetailsActionLocations = (function() {
                    function VideoDetailsActionLocations(){}
                    VideoDetailsActionLocations.primaryHeader = "primaryHeader";
                    VideoDetailsActionLocations.secondaryHeader = "secondaryHeader";
                    return VideoDetailsActionLocations
                })();
            ViewModels.VideoDetailsActionLocations = VideoDetailsActionLocations;
            var TvDetailsActionLocations = (function() {
                    function TvDetailsActionLocations(){}
                    TvDetailsActionLocations.primaryHeader = "primaryHeader";
                    TvDetailsActionLocations.secondaryHeader = "secondaryHeader";
                    return TvDetailsActionLocations
                })();
            ViewModels.TvDetailsActionLocations = TvDetailsActionLocations;
            var VideoSmartBuyStateEngine = (function(_super) {
                    __extends(VideoSmartBuyStateEngine, _super);
                    function VideoSmartBuyStateEngine() {
                        _super.apply(this, arguments);
                        this._purchaseOptions = null
                    }
                    Object.defineProperty(VideoSmartBuyStateEngine.prototype, "purchaseOptions", {
                        get: function() {
                            return this._purchaseOptions
                        }, set: function(value) {
                                Trace.assert(!this._purchaseOptions, "purchaseOptions should not be set more than once");
                                Trace.assert(!!value, "Not a valid purchaseOptions value");
                                this._purchaseOptions = value;
                                this._purchaseBindings = WinJS.Binding.bind(this.purchaseOptions, {
                                    selectedDefinition: this.updateState.bind(this), selectedLanguageCode: this.updateState.bind(this)
                                })
                            }, enumerable: true, configurable: true
                    });
                    VideoSmartBuyStateEngine.prototype.unload = function() {
                        _super.prototype.unload.call(this);
                        if (this._purchaseBindings) {
                            this._purchaseBindings.cancel();
                            this._purchaseBindings = null
                        }
                    };
                    VideoSmartBuyStateEngine.prototype.onPostRollEpisodeChanged = function(stateInfo) {
                        var buttons = [];
                        if (this.media.hasServiceId && !this.media.hydrated) {
                            if (!this.media.hydrated && this.media.hydrate)
                                this.media.hydrate();
                            return WinJS.Promise.wrap(null)
                        }
                        var videoDefinitionPreference = this.options.videoDefinitionPreference || MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd;
                        var videoLanguagePreference = this.options.videoLanguagePreference;
                        var isOwned = (stateInfo.marketplace.canStream && !stateInfo.marketplace.exclusivelyRented);
                        var buyButtonOffer = VideoSmartBuyStateEngine.getDefaultOffer(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PurchaseStream], false, false, null, videoDefinitionPreference, videoLanguagePreference);
                        if (buyButtonOffer && !isOwned) {
                            this.buttons.buyNextEpisode.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer);
                            this.buttons.buyNextEpisode.parameter.offer = buyButtonOffer;
                            buttons.push(this.buttons.buyNextEpisode)
                        }
                        return WinJS.Promise.wrap({smartButtons: buttons})
                    };
                    VideoSmartBuyStateEngine.prototype.onPostRollSeasonChanged = function(stateInfo) {
                        var _this = this;
                        var returnPromise = null;
                        var buttons = [];
                        var isCurrentSeason = this.options.isCurrentSeason;
                        if (!this.media.hydrated) {
                            if (!this.media.hydrated && this.media.hydrate)
                                this.media.hydrate();
                            return WinJS.Promise.wrap(null)
                        }
                        var firstEpisodePromise;
                        var firstEpisode = this.media.firstEpisode;
                        if (firstEpisode && !this.media.inCollection && !firstEpisode.hydrated && firstEpisode.hydrate)
                            firstEpisodePromise = firstEpisode.hydrate();
                        return WinJS.Promise.as(firstEpisodePromise).then(function() {
                                var entireSeasonIsOwned = stateInfo.marketplace.hasPurchasedSeason || (_this.media.isComplete && stateInfo.marketplace.canStreamState === MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.All && stateInfo.marketplace.exclusivelyRentedState === MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None);
                                var videoDefinitionPreference = _this.options.videoDefinitionPreference || MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd;
                                var videoLanguagePreference = _this.options.videoLanguagePreference;
                                var seasonResolutions = VideoSmartBuyStateEngine.getSeasonResolutionsForRights(_this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp);
                                if (seasonResolutions)
                                    if (seasonResolutions.hasHdRight && !seasonResolutions.hasSdRight)
                                        videoDefinitionPreference = MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd;
                                    else if (seasonResolutions.hasSdRight && !seasonResolutions.hasHdRight)
                                        videoDefinitionPreference = MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd;
                                var bestFreeRight = !entireSeasonIsOwned && VideoSmartBuyStateEngine.getBestFreeSeasonRight(_this.media);
                                if (bestFreeRight) {
                                    _this.buttons.playFreeOffer.freeOffer = bestFreeRight;
                                    _this.buttons.playFreeOffer.freeOfferId = bestFreeRight.offerId;
                                    _this.buttons.playFreeOffer.freeOfferCurrencyCode = bestFreeRight.priceCurrencyCode;
                                    _this.buttons.playFreeOffer.freeOfferPurchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY;
                                    _this.buttons.playFreeOffer.freeOfferSignedOffer = bestFreeRight.signedOffer;
                                    _this.buttons.playFreeOffer.startPlayback = true;
                                    _this.buttons.playFreeOffer.title = String.load(String.id.IDS_DETAILS_PLAY_SEASON_BUTTON);
                                    _this.buttons.playFreeOffer.playbackSource = MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.postRoll;
                                    buttons.push(_this.buttons.playFreeOffer)
                                }
                                var buyButtonOffer = (bestFreeRight || entireSeasonIsOwned) ? null : VideoSmartBuyStateEngine.getDefaultSeasonBuyOffer(_this.media, videoDefinitionPreference, videoLanguagePreference);
                                if (!entireSeasonIsOwned && buyButtonOffer) {
                                    var buySeasonButton = null;
                                    if (isCurrentSeason)
                                        if (_this.media.isComplete)
                                            buySeasonButton = _this.buttons.buyCurrentSeason;
                                        else
                                            buySeasonButton = _this.buttons.buyCurrentSeasonPass;
                                    else if (_this.media.isComplete)
                                        buySeasonButton = _this.buttons.buyNextSeason;
                                    else
                                        buySeasonButton = _this.buttons.buyNextSeasonPass;
                                    buySeasonButton.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer, videoDefinitionPreference);
                                    buySeasonButton.parameter.offer = buyButtonOffer;
                                    var ownedEpisodesCount = WinJS.Utilities.getMember("media.libraryEpisodes.count", _this);
                                    if (ownedEpisodesCount)
                                        buySeasonButton.metadata = String.load(String.id.IDS_VIDEO2_TV_SEASON_EPISODES_OWNED).format(ownedEpisodesCount);
                                    else
                                        buySeasonButton.metadata = String.empty;
                                    buttons.push(buySeasonButton)
                                }
                                return {smartButtons: buttons}
                            })
                    };
                    VideoSmartBuyStateEngine.prototype.onVideoDownloadItemStateChanged = function(stateInfo) {
                        var buttons = [];
                        this._updateFileTransferNotification(stateInfo);
                        if (stateInfo.download.hasPaused) {
                            buttons.push(this.buttons.resumeDownload);
                            buttons.push(this.buttons.cancelDownload)
                        }
                        else if (stateInfo.download.hasRetryable) {
                            buttons.push(this.buttons.retryDownload);
                            buttons.push(this.buttons.cancelDownload)
                        }
                        else if (stateInfo.download.hasFailed)
                            buttons.push(this.buttons.cancelDownload);
                        else if (stateInfo.download.hasActive || stateInfo.download.hasPending) {
                            buttons.push(this.buttons.pauseDownload);
                            buttons.push(this.buttons.cancelDownload)
                        }
                        return WinJS.Promise.wrap({smartButtons: buttons})
                    };
                    VideoSmartBuyStateEngine.prototype.onEpisodeHorizontalDetailsStateChanged = function(stateInfo) {
                        var _this = this;
                        var buttons = [];
                        var returnPromises = [];
                        if (this.media.hasServiceId && !this.media.hydrated) {
                            if (!this.media.hydrated && this.media.hydrate)
                                this.media.hydrate();
                            return WinJS.Promise.wrap(null)
                        }
                        this._initializeSwitchOfferButtons();
                        var isTVEpisode = MS.Entertainment.Platform.PlaybackHelpers.isTVEpisode(this.media);
                        var canPlayLocally = stateInfo.collection.canPlayLocally;
                        var canPlayTrailer = VideoSmartBuyStateEngine.canPlayVideoTrailer(this.media);
                        var canPlayOnXbox = VideoSmartBuyStateEngine.canPlayOnXbox(this.media);
                        var inVideoApp = (MS.Entertainment.Utilities.isVideoApp);
                        var isOwned = (stateInfo.marketplace.canStream && !stateInfo.marketplace.exclusivelyRented);
                        var getOnXbox = inVideoApp && canPlayOnXbox && !isOwned;
                        var showDownloadButton = (stateInfo.marketplace.counts.canDownload > (stateInfo.collection.playability.counts.local + stateInfo.download.items.length)) && MS.Entertainment.Utilities.isApp1;
                        var showDownloadManagerButton = (stateInfo.download.items.length > 0) && MS.Entertainment.Utilities.isApp1;
                        var showDeleteMediaButtonInPopover = (this.media && this.media.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode);
                        if (inVideoApp && canPlayOnXbox)
                            canPlayOnXbox = isOwned;
                        this._updateOfflineAvailabilityNotification(stateInfo);
                        this._updateFileTransferNotification(stateInfo);
                        returnPromises.push(MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.showInteractiveAppButton(this.media).then(function(addInteractiveButton) {
                            var interactiveButtons = [];
                            if (addInteractiveButton)
                                interactiveButtons.push(_this.buttons.launchInteractiveApp);
                            return {
                                    addIndex: 0, addButtons: interactiveButtons
                                }
                        }));
                        if (stateInfo.download.hasFailed) {
                            if (stateInfo.marketplace.canStream)
                                buttons.push(this.buttons.play);
                            else
                                buttons.push(this.buttons.playDisabled);
                            var isVideoMarketplaceNetworkEnabled = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus).isEnabled(1);
                            if (!isTVEpisode && isVideoMarketplaceNetworkEnabled)
                                buttons.push(this.buttons.movieDetails);
                            if (canPlayOnXbox)
                                buttons.push(this.buttons.playOnXbox);
                            if (stateInfo.download.hasRetryable) {
                                if (stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd] || stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p])
                                    this.buttons.tryAgain.title = String.load(MS.Entertainment.Utilities.getTryAgainDynamicText());
                                else
                                    this.buttons.tryAgain.title = String.load(String.id.IDS_DETAILS_TRY_AGAIN_LABEL);
                                buttons.push(this.buttons.tryAgain)
                            }
                        }
                        else if ((!stateInfo.marketplace.exclusivelyRented || (stateInfo.marketplace.rentalExpirations.overall && !stateInfo.marketplace.rentalExpirations.overall.isExpired)) && (stateInfo.download.hasAny || stateInfo.canPlay || stateInfo.marketplace.canDownload)) {
                            if (stateInfo.canPlay)
                                if (this.media.inCollection) {
                                    var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                                    var playbackSession = sessionMgr.getSession(MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying);
                                    var playButtonIndex = buttons.length;
                                    returnPromises.push(this._getPlayButtonStates(this.media).then(function(result) {
                                        var playButtons = [];
                                        if (result.showPlay)
                                            playButtons.push(_this.buttons.play);
                                        if (result.showResume) {
                                            _this.buttons.resume.mediaItem = _this.media;
                                            playButtons.push(_this.buttons.resume)
                                        }
                                        if (result.showRestart)
                                            playButtons.push(_this.buttons.restart);
                                        return {
                                                addIndex: playButtonIndex, addButtons: playButtons
                                            }
                                    }))
                                }
                                else
                                    buttons.push(this.buttons.play);
                            else
                                buttons.push(this.buttons.playDisabled);
                            if (this.media.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode || this.media.videoType === Microsoft.Entertainment.Queries.VideoType.movie) {
                                var isVideoMarketplaceNetworkEnabled = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus).isEnabled(1);
                                if (!isTVEpisode && isVideoMarketplaceNetworkEnabled)
                                    buttons.push(this.buttons.movieDetails)
                            }
                            if (canPlayOnXbox)
                                buttons.push(this.buttons.playOnXbox);
                            if (showDownloadButton) {
                                var downloadAction = this.buttons.downloadAction;
                                if (stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd] || stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p])
                                    if (stateInfo.marketplace.exclusivelyRented)
                                        downloadAction.title = String.load(String.id.IDS_DETAILS_DOWNLOAD_LABEL_HD);
                                    else
                                        downloadAction.title = String.load(MS.Entertainment.Utilities.getDownloadDynamicText());
                                else
                                    downloadAction.title = String.load(String.id.IDS_DETAILS_DOWNLOAD_LABEL_SD);
                                buttons.push(this.buttons.downloadAction)
                            }
                            else if (showDownloadManagerButton)
                                buttons.push(this.buttons.showDownloadManager)
                        }
                        else {
                            if (this.media.type !== MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.MovieTrailer) {
                                var canChangeLanguage = false;
                                if (WinJS.Utilities.getMember("purchaseOptions.languageCodes.length", this) > 1) {
                                    this.buttons.switchLanguage.updateTitleForLanguageAndCount();
                                    canChangeLanguage = true
                                }
                                var bestFreeRight = VideoSmartBuyStateEngine.getBestFreeRight(this.media, false);
                                var buyButtonOffer = bestFreeRight ? null : VideoSmartBuyStateEngine.getDefaultBuyOffer(this.media, false, this.purchaseOptions.selectedDefinition, this.purchaseOptions.selectedLanguageCode);
                                var rentalButtonStreamingOffer = bestFreeRight ? null : VideoSmartBuyStateEngine.getDefaultRentStreamOffer(this.media, this.purchaseOptions.selectedDefinition, this.purchaseOptions.selectedLanguageCode);
                                var rentalButtonDownloadOffer = (MS.Entertainment.Utilities.isVideoApp2 || bestFreeRight) ? null : VideoSmartBuyStateEngine.getDefaultRentDownloadOffer(this.media, this.purchaseOptions.selectedDefinition, this.purchaseOptions.selectedLanguageCode);
                                if (bestFreeRight) {
                                    this.buttons.playFreeOffer.freeOffer = bestFreeRight;
                                    this.buttons.playFreeOffer.freeOfferId = bestFreeRight.offerId;
                                    this.buttons.playFreeOffer.freeOfferCurrencyCode = bestFreeRight.priceCurrencyCode;
                                    this.buttons.playFreeOffer.freeOfferPurchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY;
                                    this.buttons.playFreeOffer.freeOfferSignedOffer = bestFreeRight.signedOffer;
                                    if (bestFreeRight.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent || bestFreeRight.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream)
                                        this.buttons.playFreeOffer.freeOfferPurchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_RENT;
                                    this.buttons.playFreeOffer.startPlayback = true;
                                    this.buttons.playFreeOffer.title = String.load(!isTVEpisode ? String.id.IDS_MOVIE_PLAY_MOVIE_BUTTON : String.id.IDS_TV_PLAY_EPISODE_BUTTON);
                                    this.buttons.playFreeOffer.playbackSource = MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.details;
                                    buttons.push(this.buttons.playFreeOffer)
                                }
                                if (buyButtonOffer)
                                    if (isTVEpisode) {
                                        this.buttons.buyEpisode.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer);
                                        this.buttons.buyEpisode.parameter.offer = buyButtonOffer;
                                        buttons.push(this.buttons.buyEpisode)
                                    }
                                    else {
                                        this.buttons.buy.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer);
                                        this.buttons.buy.parameter.offer = buyButtonOffer;
                                        buttons.push(this.buttons.buy)
                                    }
                                if (rentalButtonStreamingOffer || rentalButtonDownloadOffer) {
                                    this.buttons.rent.subTitle = VideoSmartBuyStateEngine.getPriceString(rentalButtonStreamingOffer || rentalButtonDownloadOffer);
                                    if (!rentalButtonStreamingOffer)
                                        this.buttons.rent.parameter.offer = rentalButtonDownloadOffer;
                                    else if (!rentalButtonDownloadOffer)
                                        this.buttons.rent.parameter.offer = rentalButtonStreamingOffer;
                                    else {
                                        this.buttons.rent.parameter.streamingOffer = rentalButtonStreamingOffer;
                                        this.buttons.rent.parameter.downloadOffer = rentalButtonDownloadOffer
                                    }
                                }
                                var resolutions = VideoSmartBuyStateEngine.getResolutionsForRights(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, false);
                                if (resolutions.hasHdAndSdRights) {
                                    this.buttons.switchVideoDefinition.enabled = true;
                                    buttons.push(this.buttons.switchVideoDefinition)
                                }
                                if (canChangeLanguage)
                                    buttons.push(this.buttons.switchLanguage)
                            }
                            var isVideoMarketplaceNetworkEnabled = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus).isEnabled(1);
                            if (!isTVEpisode && isVideoMarketplaceNetworkEnabled)
                                buttons.push(this.buttons.movieDetails);
                            if (canPlayTrailer && buttons.length < 4)
                                buttons.push(this.buttons.playTrailer);
                            if (canPlayOnXbox && buttons.length < 4)
                                buttons.push(this.buttons.playOnXbox)
                        }
                        if (this.media.isRemovable && (canPlayLocally || !isTVEpisode))
                            if (showDeleteMediaButtonInPopover)
                                buttons.push(this.buttons.deleteMedia);
                        buttons = VideoSmartBuyStateEngine.cutButtonsIfNecessary(buttons, this.buttons);
                        if (returnPromises.length > 0)
                            return WinJS.Promise.join(returnPromises).then(function(results) {
                                    buttons = VideoSmartBuyStateEngine.insertAsyncButtons(results, buttons);
                                    buttons = VideoSmartBuyStateEngine.cutButtonsIfNecessary(buttons, _this.buttons);
                                    return WinJS.Promise.wrap({smartButtons: buttons})
                                });
                        return WinJS.Promise.wrap({smartButtons: buttons})
                    };
                    VideoSmartBuyStateEngine.prototype.onWatchNextStateChanged = function(stateInfo) {
                        var _this = this;
                        var primaryButtons = [];
                        var secondaryButtons = [];
                        var deleteSubActions = [];
                        var returnPromise = null;
                        if (this.media.hasServiceId && !this.media.hydrated) {
                            if (!this.media.hydrated && this.media.hydrate)
                                this.media.hydrate();
                            return WinJS.Promise.wrap(null)
                        }
                        this._initializePurchaseOptions();
                        var canPlayLocally = stateInfo.collection.canPlayLocally;
                        var canPlayTrailer = VideoSmartBuyStateEngine.canPlayVideoTrailer(this.media);
                        var canPlayOnXbox = VideoSmartBuyStateEngine.canPlayOnXbox(this.media);
                        var inVideoApp = (MS.Entertainment.Utilities.isVideoApp);
                        var isOwned = (stateInfo.marketplace.canStream && !stateInfo.marketplace.exclusivelyRented);
                        var getOnXbox = inVideoApp && canPlayOnXbox && !isOwned;
                        var showDownloadButton = false;
                        var showDeleteButtons = false;
                        var showDeleteFromCollectionButton = false;
                        var showDownloadManagerButton = false;
                        if (MS.Entertainment.Utilities.isApp1) {
                            showDownloadButton = stateInfo.marketplace.counts.canDownload > (stateInfo.collection.playability.counts.local + stateInfo.download.items.length);
                            showDeleteButtons = stateInfo.collection.playability.local && stateInfo.collection.playability.counts.local === stateInfo.collection.playability.items.length;
                            showDeleteFromCollectionButton = isOwned && stateInfo.collection.playability.counts.neitherLocalNorCloud && stateInfo.collection.playability.items.length >= 1;
                            showDownloadManagerButton = (stateInfo.download.items.length > 0)
                        }
                        if (inVideoApp && canPlayOnXbox)
                            canPlayOnXbox = isOwned;
                        this._updateOfflineAvailabilityNotification(stateInfo);
                        this._updateFileTransferNotification(stateInfo);
                        if (this.media && this.media.episodeNumber) {
                            var updateTitle = function(button, stringId, voiceInfo) {
                                    if (button)
                                        if (voiceInfo && button.isVoiceEnabled) {
                                            if (voiceInfo.guiStringId)
                                                button.title = String.load(voiceInfo.guiStringId).format(_this.media.episodeNumber);
                                            if (voiceInfo.voicePhraseStringId)
                                                button.voicePhrase = String.load(voiceInfo.voicePhraseStringId).format(_this.media.episodeNumber);
                                            if (voiceInfo.voicePhoneticPhraseStringId) {
                                                var phoneticString = String.load(voiceInfo.voicePhoneticPhraseStringId);
                                                var voiceStatics = WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoiceStatics");
                                                if (phoneticString !== voiceStatics.emptyPronunciationValue)
                                                    button.voicePhoneticPhrase = phoneticString.format(_this.media.episodeNumber)
                                            }
                                            if (typeof(voiceInfo.voiceConfidence) === "number")
                                                button.voiceConfidence = voiceInfo.voiceConfidence
                                        }
                                        else if (stringId)
                                            button.title = String.load(stringId).format(_this.media.episodeNumber)
                                };
                            updateTitle(this.buttons.buyEpisode, String.id.IDS_VIDEO_WATCH_NEXT_BUY_EPISODE_BUTTON, {
                                guiStringId: String.id.IDS_VIDEO2_TV_BUY_EPISODE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_TV_BUY_EPISODE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_TV_BUY_EPISODE_BUTTON_VUI_PRON, voiceConfidence: String.id.IDS_VIDEO2_TV_BUY_EPISODE_BUTTON_VUI_CONF
                            });
                            updateTitle(this.buttons.play, String.id.IDS_VIDEO_WATCH_NEXT_PLAY_EPISODE_BUTTON, {
                                guiStringId: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_PRON, voiceConfidence: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_CONF
                            });
                            updateTitle(this.buttons.playDisabled, String.id.IDS_VIDEO_WATCH_NEXT_PLAY_EPISODE_BUTTON, {
                                guiStringId: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_PRON, voiceConfidence: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_CONF
                            });
                            updateTitle(this.buttons.resume, String.id.IDS_VIDEO_WATCH_NEXT_RESUME_EPISODE_BUTTON, {
                                guiStringId: String.id.IDS_VIDEO2_TV_RESUME_EPISODE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_TV_RESUME_EPISODE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_TV_RESUME_EPISODE_BUTTON_VUI_PRON, voiceConfidence: String.id.IDS_VIDEO2_TV_RESUME_EPISODE_BUTTON_VUI_CONF
                            });
                            updateTitle(this.buttons.restart, String.id.IDS_VIDEO_WATCH_NEXT_RESTART_EPISODE_BUTTON, {
                                guiStringId: String.id.IDS_VIDEO2_TV_RESTART_EPISODE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_TV_RESTART_EPISODE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_TV_RESTART_EPISODE_BUTTON_VUI_PRON, voiceConfidence: String.id.IDS_VIDEO2_TV_RESTART_EPISODE_BUTTON_VUI_CONF
                            });
                            updateTitle(this.buttons.playFreeOffer, String.id.IDS_VIDEO_WATCH_NEXT_PLAY_EPISODE_BUTTON, {
                                guiStringId: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_PRON, voiceConfidence: String.id.IDS_VIDEO2_TV_PLAY_EPISODE_BUTTON_VUI_CONF
                            })
                        }
                        if (stateInfo.download.hasFailed)
                            if (stateInfo.marketplace.canStream)
                                primaryButtons.push(this.buttons.play);
                            else
                                primaryButtons.push(this.buttons.playDisabled);
                        else if (stateInfo.download.hasAny || stateInfo.canPlay || stateInfo.marketplace.canDownload)
                            if (stateInfo.canPlay)
                                if (this.media.inCollection) {
                                    var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                                    var playbackSession = sessionMgr.getSession(MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying);
                                    var playIndex = primaryButtons.length;
                                    returnPromise = this._getPlayButtonStates(this.media).then(function(result) {
                                        var playButtons = [];
                                        if (result.showPlay)
                                            playButtons.push(_this.buttons.play);
                                        if (result.showResume) {
                                            _this.buttons.resume.mediaItem = _this.media;
                                            playButtons.push(_this.buttons.resume)
                                        }
                                        if (result.showRestart && (playButtons.length === 0 || MS.Entertainment.Utilities.isVideoApp1))
                                            playButtons.push(_this.buttons.restart);
                                        primaryButtons.spliceArray(playIndex, 0, playButtons);
                                        return {
                                                smartButtons: primaryButtons, locationSpecificButtons: locationSpecificButtons
                                            }
                                    })
                                }
                                else
                                    primaryButtons.push(this.buttons.play);
                            else
                                primaryButtons.push(this.buttons.playDisabled);
                        else {
                            var bestFreeRight = VideoSmartBuyStateEngine.getBestFreeRight(this.media, false);
                            var buyButtonOffer = bestFreeRight ? null : VideoSmartBuyStateEngine.getDefaultBuyOffer(this.media, false, this.purchaseOptions.selectedDefinition, this.purchaseOptions.selectedLanguageCode);
                            if (bestFreeRight) {
                                this.buttons.playFreeOffer.freeOffer = bestFreeRight;
                                this.buttons.playFreeOffer.freeOfferId = bestFreeRight.offerId;
                                this.buttons.playFreeOffer.freeOfferCurrencyCode = bestFreeRight.priceCurrencyCode;
                                this.buttons.playFreeOffer.freeOfferPurchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY;
                                this.buttons.playFreeOffer.freeOfferSignedOffer = bestFreeRight.signedOffer;
                                this.buttons.playFreeOffer.startPlayback = true;
                                this.buttons.playFreeOffer.playbackSource = MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.details;
                                primaryButtons.push(this.buttons.playFreeOffer)
                            }
                            if (buyButtonOffer) {
                                this.buttons.buyEpisode.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer);
                                this.buttons.buyEpisode.parameter.offer = buyButtonOffer;
                                primaryButtons.push(this.buttons.buyEpisode)
                            }
                        }
                        if (showDownloadButton) {
                            if (stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd] || stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p])
                                if (stateInfo.marketplace.exclusivelyRented)
                                    this.buttons.downloadAction.title = String.load(String.id.IDS_DETAILS_DOWNLOAD_LABEL_HD);
                                else
                                    this.buttons.downloadAction.title = String.load(MS.Entertainment.Utilities.getDownloadDynamicText());
                            else
                                this.buttons.downloadAction.title = String.load(String.id.IDS_DETAILS_DOWNLOAD_LABEL_SD);
                            secondaryButtons.push(this.buttons.downloadAction)
                        }
                        if (showDeleteButtons) {
                            deleteSubActions.push(this.buttons.deleteLocally);
                            deleteSubActions.push(this.buttons.deleteFromPcAndCollection)
                        }
                        else if (showDeleteFromCollectionButton)
                            deleteSubActions.push(this.buttons.deleteFromCollection);
                        if (deleteSubActions.length > 0) {
                            this.setDeleteSubActions(deleteSubActions);
                            secondaryButtons.push(this.buttons.deleteSubActions)
                        }
                        var locationSpecificButtons = {};
                        locationSpecificButtons[TvDetailsActionLocations.primaryHeader] = primaryButtons;
                        locationSpecificButtons[TvDetailsActionLocations.secondaryHeader] = secondaryButtons;
                        if (returnPromise)
                            return returnPromise;
                        return WinJS.Promise.as({
                                smartButtons: primaryButtons, locationSpecificButtons: locationSpecificButtons
                            })
                    };
                    VideoSmartBuyStateEngine.prototype._getPlayButtonStates = function(media) {
                        var ms = new Microsoft.Entertainment.Platform.MediaStore;
                        var pendingBookmarkWriteOperations;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.bookmarkOperationsWatcher)) {
                            var bookmarkWatcher = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.bookmarkOperationsWatcher);
                            pendingBookmarkWriteOperations = bookmarkWatcher.waitForPendingOperations()
                        }
                        return WinJS.Promise.as(pendingBookmarkWriteOperations).then(function() {
                                return WinJS.Promise.join({
                                        bookmark: ms.videoProvider.getBookmarkAsync(media.libraryId), played: ms.videoProvider.getPlayedStatusAsync(media.libraryId)
                                    })
                            }).then(function(result) {
                                var bookmark = result.bookmark.value || 0;
                                var played = result.played.value || 0;
                                return VideoSmartBuyStateEngine.getPlayButtonStatesFromBookmark(bookmark, !!played)
                            })
                    };
                    VideoSmartBuyStateEngine.isCurrentUserGoldSubscriber = function() {
                        var appSignIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        var result;
                        if (MS.Entertainment.isAppModeOverride)
                            return WinJS.Promise.as(true);
                        else if (appSignIn.isApp2UserAvailable) {
                            var currentUser = appSignIn.getAppCurrentUser();
                            if (currentUser)
                                result = Windows.Xbox.ApplicationModel.Store.Product.checkPrivilegeAsync(currentUser, 224, false, String.empty).then(function(resultCode) {
                                    return (resultCode === 0)
                                }, function(e) {
                                    MS.Entertainment.fail("Checking for user privilege failed: " + (e && e.message));
                                    return false
                                });
                            else
                                result = WinJS.Promise.as(false)
                        }
                        else
                            result = WinJS.Promise.as(false);
                        return result
                    };
                    VideoSmartBuyStateEngine.showInteractiveAppButton = function(media) {
                        if (!MS.Entertainment.Utilities.isVideoApp2)
                            return WinJS.Promise.as(false);
                        if (!MS.Entertainment.Platform.PlaybackHelpers.isTVEpisode(media) && !MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(media) && !MS.Entertainment.Platform.PlaybackHelpers.isMovie(media))
                            return WinJS.Promise.as(false);
                        if (!MS.Entertainment.Components.Video.InteractiveAppHelper || !MS.Entertainment.Components.Video.InteractiveAppHelper.hasInteractiveUrlFromMedia(media))
                            return WinJS.Promise.as(false);
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        var appSignIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        if (appSignIn.isSignedIn && configurationManager.video.requireGoldForInteractive)
                            return MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.isCurrentUserGoldSubscriber();
                        return WinJS.Promise.as(true)
                    };
                    VideoSmartBuyStateEngine.prototype.onMovieHorizontalDetailsStateChanged = function(stateInfo) {
                        var _this = this;
                        var buttons = [];
                        var returnPromises = [];
                        if (!this.media.hydrated) {
                            if (!this.media.hydrated && this.media.hydrate)
                                this.media.hydrate();
                            return WinJS.Promise.wrap(null)
                        }
                        this._initializeSwitchOfferButtons();
                        var isBundle = this.media.isBundle;
                        var isPresale = stateInfo.marketplace.isPresale || this.media.isPresale;
                        var isPresaleFulfilled = false;
                        if (isPresale) {
                            var fulfillmentDate = null;
                            if (this.media.presaleFulfillmentDate)
                                fulfillmentDate = this.media.presaleFulfillmentDate;
                            else if (stateInfo.marketplace.presaleFulfillmentDate)
                                fulfillmentDate = stateInfo.marketplace.presaleFulfillmentDate;
                            var now = new Date;
                            isPresaleFulfilled = fulfillmentDate && now >= fulfillmentDate
                        }
                        var isSignedIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn;
                        var canPlayOnXbox = VideoSmartBuyStateEngine.canPlayOnXbox(this.media);
                        var isOwned = (stateInfo.marketplace.canStream && !stateInfo.marketplace.exclusivelyRented) || stateInfo.marketplace.hasPurchased;
                        var isOwnedPresale = isOwned && isPresale;
                        var getOnXbox = canPlayOnXbox && !isOwned;
                        var showDownloadButton = (stateInfo.marketplace.counts.canDownload > (stateInfo.collection.playability.counts.local + stateInfo.download.items.length) && MS.Entertainment.Utilities.isApp1);
                        var showDownloadManagerButton = (stateInfo.download.items.length > 0) && MS.Entertainment.Utilities.isApp1;
                        var canPlayTrailer = VideoSmartBuyStateEngine.canPlayVideoTrailer(this.media);
                        var isTVEpisode = MS.Entertainment.Platform.PlaybackHelpers.isTVEpisode(this.media);
                        var canPinToDashboard = false;
                        var canRate = false;
                        var canAddToWatchlist = false;
                        var featureEnablementService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.featureEnablement);
                        var watchlistEnabled = featureEnablementService.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.videoWatchlist);
                        var rentalStateIsExpired = WinJS.Utilities.getMember("marketplace.rentalExpirations.overall.isExpired", stateInfo);
                        var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                        var hasGrovelEverCompleted = !!(purchaseHistoryService && purchaseHistoryService.hasGrovelEverCompleted);
                        var showCollectionActionsForExpiredRentals = rentalStateIsExpired && !hasGrovelEverCompleted;
                        var canPlayContent = stateInfo.canPlay || showCollectionActionsForExpiredRentals;
                        if (MS.Entertainment.Utilities.isVideoApp2) {
                            if (!isBundle)
                                canPinToDashboard = isSignedIn && MS.Entertainment.Utilities.appRegionMatchesMachineRegion();
                            canRate = isSignedIn
                        }
                        if (watchlistEnabled && MS.Entertainment.Utilities.isVideoApp2 && isSignedIn) {
                            canAddToWatchlist = true;
                            canPinToDashboard = false
                        }
                        if (canPlayOnXbox)
                            canPlayOnXbox = isOwned;
                        this._updateOfflineAvailabilityNotification(stateInfo);
                        this._updateFileTransferNotification(stateInfo);
                        returnPromises.push(MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.showInteractiveAppButton(this.media).then(function(addInteractiveButton) {
                            var interactiveButtons = [];
                            if (addInteractiveButton)
                                interactiveButtons.push(_this.buttons.launchInteractiveApp);
                            return {
                                    addIndex: 0, addButtons: interactiveButtons
                                }
                        }));
                        if (stateInfo.download.hasFailed && stateInfo.download.hasRetryable) {
                            if (stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd] || stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p])
                                this.buttons.tryAgain.title = String.load(MS.Entertainment.Utilities.getTryAgainDynamicText());
                            else
                                this.buttons.tryAgain.title = String.load(String.id.IDS_DETAILS_TRY_AGAIN_LABEL);
                            buttons.push(this.buttons.tryAgain)
                        }
                        if ((!stateInfo.marketplace.exclusivelyRented || !rentalStateIsExpired) && (stateInfo.download.hasAny || canPlayContent)) {
                            if (canPlayContent) {
                                var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                                var playbackSession = sessionMgr.getSession(MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying);
                                var isCurrentlyLoaded = !playbackSession.isPreview && playbackSession.isMediaCurrentlyLoaded(this.media);
                                if (!isCurrentlyLoaded || !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).nowPlayingVisible)
                                    if (this.media.inCollection) {
                                        var playIndex = buttons.length;
                                        returnPromises.push(this._getPlayButtonStates(this.media).then(function(result) {
                                            var playButtons = [];
                                            if (result.showPlay)
                                                playButtons.push(_this.buttons.play);
                                            if (result.showResume) {
                                                _this.buttons.resume.mediaItem = _this.media;
                                                playButtons.push(_this.buttons.resume)
                                            }
                                            if (result.showRestart)
                                                playButtons.push(_this.buttons.restart);
                                            return {
                                                    addIndex: playIndex, addButtons: playButtons
                                                }
                                        }))
                                    }
                                    else
                                        buttons.push(this.buttons.play)
                            }
                            else
                                buttons.push(this.buttons.playDisabled);
                            if (canPlayOnXbox && buttons.length < 2)
                                buttons.push(this.buttons.playOnXbox)
                        }
                        else if (stateInfo.marketplace.canDownload) {
                            if (canPlayOnXbox && buttons.length < 2)
                                buttons.push(this.buttons.playOnXbox)
                        }
                        else {
                            if (this.media.type !== MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.MovieTrailer) {
                                var canChangeLanguage = false;
                                if (WinJS.Utilities.getMember("purchaseOptions.languageCodes.length", this) > 1) {
                                    this.buttons.switchLanguage.updateTitleForLanguageAndCount();
                                    canChangeLanguage = true
                                }
                                var freeWithAds = false;
                                var bestFreeRight = VideoSmartBuyStateEngine.getBestFreeRight(this.media, false);
                                if (bestFreeRight) {
                                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                    var freeVideoWithAds = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.videoFreeWithAds);
                                    if (freeVideoWithAds) {
                                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                        if (configurationManager.video.offerIdsVideoFreeWithAds) {
                                            var freeOfferWithAds = configurationManager.video.offerIdsVideoFreeWithAds.split(',');
                                            var offerId = bestFreeRight.offerId.toLowerCase();
                                            for (var count = 0; count < freeOfferWithAds.length; count++)
                                                if (offerId === freeOfferWithAds[count].toLowerCase()) {
                                                    freeWithAds = true;
                                                    break
                                                }
                                        }
                                    }
                                }
                                var buyButtonOffer = (!freeWithAds && bestFreeRight) ? null : VideoSmartBuyStateEngine.getDefaultBuyOffer(this.media, false, this.purchaseOptions.selectedDefinition, this.purchaseOptions.selectedLanguageCode);
                                var rentalButtonStreamingOffer = bestFreeRight ? null : VideoSmartBuyStateEngine.getDefaultRentStreamOffer(this.media, this.purchaseOptions.selectedDefinition, this.purchaseOptions.selectedLanguageCode);
                                var rentalButtonDownloadOffer = (MS.Entertainment.Utilities.isVideoApp2 || bestFreeRight) ? null : VideoSmartBuyStateEngine.getDefaultRentDownloadOffer(this.media, this.purchaseOptions.selectedDefinition, this.purchaseOptions.selectedLanguageCode);
                                if (bestFreeRight) {
                                    this.buttons.playFreeOffer.freeOffer = bestFreeRight;
                                    this.buttons.playFreeOffer.freeOfferId = bestFreeRight.offerId;
                                    this.buttons.playFreeOffer.freeOfferCurrencyCode = bestFreeRight.priceCurrencyCode;
                                    this.buttons.playFreeOffer.freeOfferPurchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY;
                                    this.buttons.playFreeOffer.freeOfferSignedOffer = bestFreeRight.signedOffer;
                                    if (bestFreeRight.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent || bestFreeRight.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream)
                                        this.buttons.playFreeOffer.freeOfferPurchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_RENT;
                                    this.buttons.playFreeOffer.startPlayback = true;
                                    this.buttons.playFreeOffer.title = String.load(!isTVEpisode ? String.id.IDS_MOVIE_PLAY_MOVIE_BUTTON : String.id.IDS_TV_PLAY_EPISODE_BUTTON);
                                    this.buttons.playFreeOffer.playbackSource = MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.details;
                                    if (freeWithAds)
                                        this.buttons.playFreeOffer.subTitle = String.load(String.id.IDS_VIDEO_PRICE_FREE_WITH_ADS);
                                    buttons.push(this.buttons.playFreeOffer)
                                }
                                if (buyButtonOffer && !isOwnedPresale) {
                                    if (isBundle) {
                                        if (this.buttons.buy.isVoiceEnabled) {
                                            this.buttons.buy.title = String.load(String.id.IDS_VIDEO2_L3_BUY_BUNDLE_BUTTON_VUI_GUI);
                                            this.buttons.buy.voicePhrase = String.load(String.id.IDS_VIDEO2_L3_BUY_BUNDLE_BUTTON_VUI_ALM);
                                            this.buttons.buy.voicePhoneticPhrase = String.load(String.id.IDS_VIDEO2_L3_BUY_BUNDLE_BUTTON_VUI_PRON);
                                            this.buttons.buy.voiceConfidence = String.load(String.id.IDS_VIDEO2_L3_BUY_BUNDLE_BUTTON_VUI_CONF)
                                        }
                                        else
                                            this.buttons.buy.title = String.load(String.id.IDS_DETAILS_BUY_BUNDLE);
                                        this.buttons.buy.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer);
                                        this.buttons.buy.parameter.offer = buyButtonOffer
                                    }
                                    else if (!isPresaleFulfilled && buyButtonOffer.distributionType === MS.Entertainment.Data.Augmenter.Marketplace.edsOfferDistributionType.presale) {
                                        if (this.buttons.buy.isVoiceEnabled) {
                                            this.buttons.buy.title = String.load(String.id.IDS_VIDEO_PREPURCHASE_DETAILS_BUY_VUI_GUI);
                                            this.buttons.buy.voicePhrase = String.load(String.id.IDS_VIDEO_PREPURCHASE_DETAILS_BUY_VUI_ALM);
                                            this.buttons.buy.voicePhoneticPhrase = String.load(String.id.IDS_VIDEO_PREPURCHASE_DETAILS_BUY_VUI_PRON);
                                            this.buttons.buy.voiceConfidence = String.load(String.id.IDS_VIDEO_PREPURCHASE_DETAILS_BUY_VUI_CONF)
                                        }
                                        else
                                            this.buttons.buy.title = String.load(String.id.IDS_VIDEO_PREPURCHASE_DETAILS_BUY);
                                        this.buttons.buy.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer);
                                        this.buttons.buy.parameter.offer = buyButtonOffer
                                    }
                                    else {
                                        this.buttons.buy.title = String.load(String.id.IDS_BUY_BUTTON_VIDEO);
                                        if (this.buttons.buy.isVoiceEnabled) {
                                            this.buttons.buy.voicePhrase = String.load(String.id.IDS_VIDEO2_L3_BUY_BUTTON_VUI_ALM);
                                            this.buttons.buy.voicePhoneticPhrase = String.load(String.id.IDS_VIDEO2_L3_BUY_BUTTON_VUI_PRON);
                                            this.buttons.buy.voiceConfidence = String.load(String.id.IDS_VIDEO2_L3_BUY_BUTTON_VUI_CONF)
                                        }
                                        this.buttons.buy.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer);
                                        this.buttons.buy.parameter.offer = buyButtonOffer
                                    }
                                    if (MS.Entertainment.Utilities.isVideoApp2 && isBundle && this.media.allBundledItemsInCollection)
                                        buttons.push(this.buttons.viewInCollection);
                                    else
                                        buttons.push(this.buttons.buy)
                                }
                                if (!isBundle && !isOwnedPresale && (rentalButtonStreamingOffer || rentalButtonDownloadOffer)) {
                                    this.buttons.rent.subTitle = VideoSmartBuyStateEngine.getPriceString(rentalButtonStreamingOffer || rentalButtonDownloadOffer);
                                    if (!rentalButtonStreamingOffer)
                                        this.buttons.rent.parameter.offer = rentalButtonDownloadOffer;
                                    else if (!rentalButtonDownloadOffer)
                                        this.buttons.rent.parameter.offer = rentalButtonStreamingOffer;
                                    else {
                                        this.buttons.rent.parameter.streamingOffer = rentalButtonStreamingOffer;
                                        this.buttons.rent.parameter.downloadOffer = rentalButtonDownloadOffer
                                    }
                                    buttons.push(this.buttons.rent)
                                }
                                if (canPlayTrailer)
                                    buttons.push(this.buttons.playTrailer)
                            }
                            if (!isBundle || (isBundle && !this.media.allBundledItemsInCollection)) {
                                var resolutions = VideoSmartBuyStateEngine.getResolutionsForRights(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, false);
                                if (resolutions.hasHdAndSdRights && !isOwnedPresale) {
                                    this.buttons.switchVideoDefinition.enabled = true;
                                    buttons.push(this.buttons.switchVideoDefinition)
                                }
                                if (canChangeLanguage)
                                    buttons.push(this.buttons.switchLanguage)
                            }
                            if (canPlayOnXbox && buttons.length < 2)
                                buttons.push(this.buttons.playOnXbox)
                        }
                        if (showDownloadButton) {
                            if (stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd] || stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p])
                                if (stateInfo.marketplace.exclusivelyRented)
                                    this.buttons.downloadAction.title = String.load(String.id.IDS_DETAILS_DOWNLOAD_LABEL_HD);
                                else
                                    this.buttons.downloadAction.title = String.load(MS.Entertainment.Utilities.getDownloadDynamicText());
                            else
                                this.buttons.downloadAction.title = String.load(String.id.IDS_DETAILS_DOWNLOAD_LABEL_SD);
                            buttons.push(this.buttons.downloadAction)
                        }
                        if (canRate)
                            buttons.push(this.buttons.ratingPicker);
                        if (canPinToDashboard) {
                            buttons.push(this.buttons.pinToDashboard);
                            if (this.buttons.pinToDashboard.refresh)
                                this.buttons.pinToDashboard.refresh()
                        }
                        if (canAddToWatchlist) {
                            buttons.push(this.buttons.addRemoveItemWatchlist);
                            if (this.buttons.addRemoveItemWatchlist.refresh)
                                this.buttons.addRemoveItemWatchlist.refresh(this.media)
                        }
                        if (showDownloadManagerButton)
                            buttons.push(this.buttons.showDownloadManager);
                        buttons = VideoSmartBuyStateEngine.cutButtonsIfNecessary(buttons, this.buttons);
                        if (returnPromises.length > 0)
                            return WinJS.Promise.join(returnPromises).then(function(results) {
                                    buttons = VideoSmartBuyStateEngine.insertAsyncButtons(results, buttons);
                                    buttons = VideoSmartBuyStateEngine.cutButtonsIfNecessary(buttons, _this.buttons);
                                    return WinJS.Promise.wrap({smartButtons: buttons})
                                });
                        return WinJS.Promise.wrap({smartButtons: buttons})
                    };
                    VideoSmartBuyStateEngine.prototype.setDeleteSubActions = function(deleteSubActions) {
                        this.buttons.deleteSubActions.setSubActions(deleteSubActions.map(function(item) {
                            return {action: item}
                        }))
                    };
                    VideoSmartBuyStateEngine.prototype.onVideoVerticalDetailsStateChanged = function(stateInfo) {
                        var _this = this;
                        var deleteSubActions = [];
                        var locationSpecificButtons = {};
                        var primaryHeaderButtons = locationSpecificButtons[VideoDetailsActionLocations.primaryHeader] = [];
                        var secondaryHeaderButtons = locationSpecificButtons[VideoDetailsActionLocations.secondaryHeader] = [];
                        var getButtonsPromise = null;
                        var hasAddedPurchaseButton = false;
                        if (!this.media.hydrated) {
                            if (this.media.hydrate)
                                this.media.hydrate();
                            return WinJS.Promise.as()
                        }
                        this._initializeSwitchOfferButtons();
                        var isBundle = this.media.isBundle;
                        var isPresale = stateInfo.marketplace.isPresale || this.media.isPresale;
                        var isPresaleFulfilled = false;
                        if (isPresale) {
                            var fulfillmentDate = null;
                            if (this.media.presaleFulfillmentDate)
                                fulfillmentDate = this.media.presaleFulfillmentDate;
                            else if (stateInfo.marketplace.presaleFulfillmentDate)
                                fulfillmentDate = stateInfo.marketplace.presaleFulfillmentDate;
                            var now = new Date;
                            isPresaleFulfilled = fulfillmentDate && now >= fulfillmentDate
                        }
                        var isSignedIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn;
                        var isOwned = (stateInfo.marketplace.canStream && !stateInfo.marketplace.exclusivelyRented) || stateInfo.marketplace.hasPurchased;
                        var isOwnedPresale = isOwned && isPresale;
                        var showDownloadButton = stateInfo.marketplace.counts.canDownload > (stateInfo.collection.playability.counts.local + stateInfo.download.items.length);
                        var showDeleteButtons = stateInfo.collection.playability.local && stateInfo.collection.playability.counts.local === stateInfo.collection.playability.items.length;
                        var showDownloadManagerButton = stateInfo.download.items.length > 0;
                        var canPlayTrailer = VideoSmartBuyStateEngine.canPlayVideoTrailer(this.media);
                        var isTVEpisode = MS.Entertainment.Platform.PlaybackHelpers.isTVEpisode(this.media);
                        var rentalStateIsExpired = WinJS.Utilities.getMember("marketplace.rentalExpirations.overall.isExpired", stateInfo);
                        var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                        var hasGrovelEverCompleted = !!(purchaseHistoryService && purchaseHistoryService.hasGrovelEverCompleted);
                        var showCollectionActionsForExpiredRentals = rentalStateIsExpired && !hasGrovelEverCompleted;
                        var canPlayContent = stateInfo.canPlay || showCollectionActionsForExpiredRentals;
                        var showDeleteFromCollectionButton = (isOwned || stateInfo.marketplace.exclusivelyRented || rentalStateIsExpired) && (stateInfo.collection.playability.counts.neitherLocalNorCloud && stateInfo.collection.playability.items.length >= 1);
                        this._updateOfflineAvailabilityNotification(stateInfo);
                        this._updateFileTransferNotification(stateInfo);
                        if (stateInfo.download.hasFailed && stateInfo.download.hasRetryable) {
                            if (stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd] || stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p])
                                this.buttons.tryAgain.title = String.load(MS.Entertainment.Utilities.getTryAgainDynamicText());
                            else
                                this.buttons.tryAgain.title = String.load(String.id.IDS_DETAILS_TRY_AGAIN_LABEL);
                            secondaryHeaderButtons.push(this.buttons.tryAgain)
                        }
                        if ((!stateInfo.marketplace.exclusivelyRented || !rentalStateIsExpired) && (stateInfo.download.hasAny || canPlayContent))
                            if (canPlayContent) {
                                var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                                var playbackSession = sessionMgr.getSession(MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying);
                                var isCurrentlyLoaded = !playbackSession.isPreview && playbackSession.isMediaCurrentlyLoaded(this.media);
                                if (!isCurrentlyLoaded || !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).nowPlayingVisible)
                                    if (this.media.inCollection) {
                                        var playButtonIndex = primaryHeaderButtons.length;
                                        getButtonsPromise = this._getPlayButtonStates(this.media).then(function(result) {
                                            var playButtons = [];
                                            if (result.showPlay)
                                                playButtons.push(_this.buttons.play);
                                            if (result.showResume) {
                                                _this.buttons.resume.mediaItem = _this.media;
                                                playButtons.push(_this.buttons.resume)
                                            }
                                            if (result.showRestart)
                                                playButtons.push(_this.buttons.restart);
                                            primaryHeaderButtons.spliceArray(playButtonIndex, 0, playButtons);
                                            primaryHeaderButtons = VideoSmartBuyStateEngine.cutButtonsIfNecessary(primaryHeaderButtons, _this.buttons)
                                        })
                                    }
                                    else
                                        primaryHeaderButtons.push(this.buttons.play)
                            }
                            else
                                primaryHeaderButtons.push(this.buttons.playDisabled);
                        else if (!stateInfo.marketplace.canDownload || isOwnedPresale) {
                            if (this.media.type !== MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.MovieTrailer) {
                                var canChangeLanguage = false;
                                if (WinJS.Utilities.getMember("purchaseOptions.languageCodes.length", this) > 1) {
                                    this.buttons.switchLanguage.updateTitleForLanguageAndCount();
                                    canChangeLanguage = true
                                }
                                var freeWithAds = false;
                                var bestFreeRight = VideoSmartBuyStateEngine.getBestFreeRight(this.media, false);
                                if (bestFreeRight) {
                                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                    var freeVideoWithAds = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.videoFreeWithAds);
                                    if (freeVideoWithAds) {
                                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                        if (configurationManager.video.offerIdsVideoFreeWithAds) {
                                            var freeOfferWithAds = configurationManager.video.offerIdsVideoFreeWithAds.split(',');
                                            var offerId = bestFreeRight.offerId.toLowerCase();
                                            for (var count = 0; count < freeOfferWithAds.length; count++)
                                                if (offerId === freeOfferWithAds[count].toLowerCase()) {
                                                    freeWithAds = true;
                                                    break
                                                }
                                        }
                                    }
                                }
                                var buyButtonOffer = (!freeWithAds && bestFreeRight) ? null : VideoSmartBuyStateEngine.getDefaultBuyOffer(this.media, false, this.purchaseOptions.selectedDefinition, this.purchaseOptions.selectedLanguageCode);
                                var rentalButtonStreamingOffer = bestFreeRight ? null : VideoSmartBuyStateEngine.getDefaultRentStreamOffer(this.media, this.purchaseOptions.selectedDefinition, this.purchaseOptions.selectedLanguageCode);
                                var rentalButtonDownloadOffer = (MS.Entertainment.Utilities.isVideoApp2 || bestFreeRight) ? null : VideoSmartBuyStateEngine.getDefaultRentDownloadOffer(this.media, this.purchaseOptions.selectedDefinition, this.purchaseOptions.selectedLanguageCode);
                                if (bestFreeRight) {
                                    this.buttons.playFreeOffer.freeOffer = bestFreeRight;
                                    this.buttons.playFreeOffer.freeOfferId = bestFreeRight.offerId;
                                    this.buttons.playFreeOffer.freeOfferCurrencyCode = bestFreeRight.priceCurrencyCode;
                                    this.buttons.playFreeOffer.freeOfferPurchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY;
                                    this.buttons.playFreeOffer.freeOfferSignedOffer = bestFreeRight.signedOffer;
                                    if (bestFreeRight.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent || bestFreeRight.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream)
                                        this.buttons.playFreeOffer.freeOfferPurchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_RENT;
                                    this.buttons.playFreeOffer.startPlayback = true;
                                    this.buttons.playFreeOffer.title = String.load(isTVEpisode ? String.id.IDS_TV_PLAY_EPISODE_BUTTON : String.id.IDS_MOVIE_PLAY_MOVIE_BUTTON);
                                    this.buttons.playFreeOffer.playbackSource = MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.details;
                                    if (freeWithAds)
                                        this.buttons.playFreeOffer.subTitle = String.load(String.id.IDS_VIDEO_PRICE_FREE_WITH_ADS);
                                    primaryHeaderButtons.push(this.buttons.playFreeOffer);
                                    hasAddedPurchaseButton = true
                                }
                                if (buyButtonOffer && !isOwnedPresale) {
                                    if (isBundle) {
                                        if (this.buttons.buy.isVoiceEnabled) {
                                            this.buttons.buy.title = String.load(String.id.IDS_VIDEO2_L3_BUY_BUNDLE_BUTTON_VUI_GUI);
                                            this.buttons.buy.voicePhrase = String.load(String.id.IDS_VIDEO2_L3_BUY_BUNDLE_BUTTON_VUI_ALM);
                                            this.buttons.buy.voicePhoneticPhrase = String.load(String.id.IDS_VIDEO2_L3_BUY_BUNDLE_BUTTON_VUI_PRON);
                                            this.buttons.buy.voiceConfidence = String.load(String.id.IDS_VIDEO2_L3_BUY_BUNDLE_BUTTON_VUI_CONF)
                                        }
                                        else
                                            this.buttons.buy.title = String.load(String.id.IDS_DETAILS_BUY_BUNDLE);
                                        this.buttons.buy.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer);
                                        this.buttons.buy.parameter.offer = buyButtonOffer
                                    }
                                    else if (!isPresaleFulfilled && buyButtonOffer.distributionType === MS.Entertainment.Data.Augmenter.Marketplace.edsOfferDistributionType.presale) {
                                        this.buttons.buy.title = String.load(String.id.IDS_VIDEO_PREPURCHASE_DETAILS_BUY);
                                        if (this.buttons.buy.isVoiceEnabled) {
                                            this.buttons.buy.voicePhrase = String.load(String.id.IDS_VIDEO_PREPURCHASE_DETAILS_BUY_VUI_ALM);
                                            this.buttons.buy.voicePhoneticPhrase = String.load(String.id.IDS_VIDEO_PREPURCHASE_DETAILS_BUY_VUI_PRON);
                                            this.buttons.buy.voiceConfidence = String.load(String.id.IDS_VIDEO_PREPURCHASE_DETAILS_BUY_VUI_CONF)
                                        }
                                        this.buttons.buy.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer);
                                        this.buttons.buy.parameter.offer = buyButtonOffer
                                    }
                                    else {
                                        this.buttons.buy.title = String.load(String.id.IDS_BUY_BUTTON_VIDEO);
                                        if (this.buttons.buy.isVoiceEnabled) {
                                            this.buttons.buy.voicePhrase = String.load(String.id.IDS_VIDEO2_L3_BUY_BUTTON_VUI_ALM);
                                            this.buttons.buy.voicePhoneticPhrase = String.load(String.id.IDS_VIDEO2_L3_BUY_BUTTON_VUI_PRON);
                                            this.buttons.buy.voiceConfidence = String.load(String.id.IDS_VIDEO2_L3_BUY_BUTTON_VUI_CONF)
                                        }
                                        this.buttons.buy.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer);
                                        this.buttons.buy.parameter.offer = buyButtonOffer
                                    }
                                    if (!isBundle || (isBundle && !this.media.allBundledItemsInCollection)) {
                                        primaryHeaderButtons.push(this.buttons.buy);
                                        hasAddedPurchaseButton = true
                                    }
                                }
                                if (!isTVEpisode && !isBundle && !isOwnedPresale && (rentalButtonStreamingOffer || rentalButtonDownloadOffer)) {
                                    this.buttons.rent.subTitle = VideoSmartBuyStateEngine.getPriceString(rentalButtonStreamingOffer || rentalButtonDownloadOffer);
                                    if (!rentalButtonStreamingOffer)
                                        this.buttons.rent.parameter.offer = rentalButtonDownloadOffer;
                                    else if (!rentalButtonDownloadOffer)
                                        this.buttons.rent.parameter.offer = rentalButtonStreamingOffer;
                                    else {
                                        this.buttons.rent.parameter.streamingOffer = rentalButtonStreamingOffer;
                                        this.buttons.rent.parameter.downloadOffer = rentalButtonDownloadOffer
                                    }
                                    primaryHeaderButtons.push(this.buttons.rent);
                                    hasAddedPurchaseButton = true
                                }
                            }
                            if (hasAddedPurchaseButton && (!isBundle || (isBundle && !this.media.allBundledItemsInCollection))) {
                                var resolutions = VideoSmartBuyStateEngine.getResolutionsForRights(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, false);
                                if (resolutions.hasHdAndSdRights && !isOwnedPresale) {
                                    this.buttons.switchVideoDefinition.enabled = true;
                                    primaryHeaderButtons.push(this.buttons.switchVideoDefinition)
                                }
                            }
                        }
                        if (canPlayTrailer)
                            primaryHeaderButtons.push(this.buttons.watchTrailer);
                        if (showDownloadButton) {
                            if (stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd] || stateInfo.marketplace.libraryDefinitions[MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p])
                                if (stateInfo.marketplace.exclusivelyRented)
                                    this.buttons.downloadAction.title = String.load(String.id.IDS_DETAILS_DOWNLOAD_LABEL_HD);
                                else
                                    this.buttons.downloadAction.title = String.load(MS.Entertainment.Utilities.getDownloadDynamicText());
                            else
                                this.buttons.downloadAction.title = String.load(String.id.IDS_DETAILS_DOWNLOAD_LABEL_SD);
                            secondaryHeaderButtons.push(this.buttons.downloadAction)
                        }
                        if (showDeleteButtons) {
                            deleteSubActions.push(this.buttons.deleteLocally);
                            deleteSubActions.push(this.buttons.deleteFromPcAndCollection)
                        }
                        else if (showDeleteFromCollectionButton)
                            deleteSubActions.push(this.buttons.deleteFromCollection);
                        if (deleteSubActions.length > 0) {
                            this.setDeleteSubActions(deleteSubActions);
                            secondaryHeaderButtons.push(this.buttons.deleteSubActions)
                        }
                        return WinJS.Promise.as(getButtonsPromise).then(function() {
                                return {locationSpecificButtons: locationSpecificButtons}
                            })
                    };
                    VideoSmartBuyStateEngine.prototype.onSeasonDetailsStateChanged = function(stateInfo) {
                        var _this = this;
                        var primaryButtons = [];
                        var secondaryButtons = [];
                        if (!this.media.hydrated) {
                            if (!this.media.hydrated && this.media.hydrate)
                                this.media.hydrate();
                            return WinJS.Promise.wrap(null)
                        }
                        this._initializeSwitchOfferButtons();
                        var entireSeasonIsOwned = stateInfo.marketplace.hasPurchasedSeason || (this.media.isComplete && stateInfo.marketplace.canStreamState === MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.All && stateInfo.marketplace.exclusivelyRentedState === MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None);
                        var promise;
                        var firstEpisode = this.media.firstEpisode;
                        if (firstEpisode && !entireSeasonIsOwned && !firstEpisode.hydrated && firstEpisode.hydrate)
                            promise = firstEpisode.hydrate();
                        return WinJS.Promise.as(promise).then(function() {
                                var returnPromises = [];
                                var isOwned = (stateInfo.marketplace.canStream && !stateInfo.marketplace.exclusivelyRented);
                                var showDownloadButton = false;
                                var showDownloadManagerButton = false;
                                if (MS.Entertainment.Utilities.isApp1) {
                                    showDownloadButton = stateInfo.marketplace.counts.canDownload > (stateInfo.collection.playability.counts.local + stateInfo.download.items.length);
                                    showDownloadManagerButton = stateInfo.download.items.length > 0
                                }
                                returnPromises.push(MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.showInteractiveAppButton(_this.media).then(function(addInteractiveButton) {
                                    var interactiveButtons = [];
                                    if (addInteractiveButton)
                                        interactiveButtons.push(_this.buttons.launchInteractiveApp);
                                    return {
                                            addIndex: 0, addButtons: interactiveButtons
                                        }
                                }));
                                var bestFreeRight = !entireSeasonIsOwned && VideoSmartBuyStateEngine.getBestFreeSeasonRight(_this.media);
                                var buyButtonOffer = (bestFreeRight || entireSeasonIsOwned) ? null : VideoSmartBuyStateEngine.getDefaultSeasonBuyOffer(_this.media, _this.purchaseOptions.selectedDefinition, _this.purchaseOptions.selectedLanguageCode);
                                if (bestFreeRight) {
                                    _this.buttons.playFreeOffer.freeOffer = bestFreeRight;
                                    _this.buttons.playFreeOffer.freeOfferId = bestFreeRight.offerId;
                                    _this.buttons.playFreeOffer.freeOfferCurrencyCode = bestFreeRight.priceCurrencyCode;
                                    _this.buttons.playFreeOffer.freeOfferPurchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY;
                                    _this.buttons.playFreeOffer.freeOfferSignedOffer = bestFreeRight.signedOffer;
                                    _this.buttons.playFreeOffer.startPlayback = true;
                                    _this.buttons.playFreeOffer.title = String.load(String.id.IDS_DETAILS_PLAY_SEASON_BUTTON);
                                    _this.buttons.playFreeOffer.playbackSource = MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.details;
                                    primaryButtons.push(_this.buttons.playFreeOffer)
                                }
                                var canSwitchDefinition = false;
                                var videoDefinitionPreference = null;
                                var canChangeLanguage = false;
                                if (WinJS.Utilities.getMember("purchaseOptions.languageCodes.length", _this) > 1) {
                                    _this.buttons.switchLanguage.updateTitleForLanguageAndCount();
                                    canChangeLanguage = true
                                }
                                var seasonResolutions = VideoSmartBuyStateEngine.getSeasonResolutionsForRights(_this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp);
                                if (seasonResolutions)
                                    if (seasonResolutions.hasHdRight && seasonResolutions.hasSdRight) {
                                        videoDefinitionPreference = _this.purchaseOptions.selectedDefinition;
                                        canSwitchDefinition = true
                                    }
                                    else if (seasonResolutions.hasHdRight)
                                        videoDefinitionPreference = MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd;
                                    else if (seasonResolutions.hasSdRight)
                                        videoDefinitionPreference = MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd;
                                if (buyButtonOffer) {
                                    if (_this.media.isComplete) {
                                        _this.buttons.buySeason.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer, videoDefinitionPreference);
                                        _this.buttons.buySeason.parameter.offer = buyButtonOffer;
                                        primaryButtons.push(_this.buttons.buySeason)
                                    }
                                    else {
                                        _this.buttons.buyCurrentSeason.subTitle = VideoSmartBuyStateEngine.getPriceString(buyButtonOffer, videoDefinitionPreference);
                                        _this.buttons.buyCurrentSeason.parameter.offer = buyButtonOffer;
                                        primaryButtons.push(_this.buttons.buyCurrentSeason)
                                    }
                                    if (canSwitchDefinition) {
                                        _this.buttons.switchVideoDefinition.enabled = true;
                                        primaryButtons.push(_this.buttons.switchVideoDefinition)
                                    }
                                    if (canChangeLanguage)
                                        primaryButtons.push(_this.buttons.switchLanguage)
                                }
                                if (showDownloadButton && !MS.Entertainment.Utilities.isVideoApp1) {
                                    var downloadSeasonAction = null;
                                    if (_this.buttons.downloadSeason) {
                                        downloadSeasonAction = _this.buttons.downloadSeason;
                                        secondaryButtons.push(downloadSeasonAction)
                                    }
                                    MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.getAvailableResolutions(_this.media).done(function(info) {
                                        if (info.hasHD && info.hasSD)
                                            downloadSeasonAction.title = String.load(MS.Entertainment.Utilities.getDownloadSeasonDynamicText());
                                        else if (info.hasHD)
                                            downloadSeasonAction.title = String.load(String.id.IDS_TV_DOWNLOAD_SEASON_BUTTON_HD);
                                        else
                                            downloadSeasonAction.title = String.load(String.id.IDS_TV_DOWNLOAD_SEASON_BUTTON_SD)
                                    })
                                }
                                return WinJS.Promise.join(returnPromises).then(function(results) {
                                        if (results && results.length > 0)
                                            primaryButtons = VideoSmartBuyStateEngine.insertAsyncButtons(results, primaryButtons);
                                        primaryButtons = VideoSmartBuyStateEngine.cutButtonsIfNecessary(primaryButtons, _this.buttons);
                                        var locationSpecificButtons = {};
                                        locationSpecificButtons[TvDetailsActionLocations.primaryHeader] = primaryButtons;
                                        locationSpecificButtons[TvDetailsActionLocations.secondaryHeader] = secondaryButtons;
                                        return {
                                                smartButtons: primaryButtons, locationSpecificButtons: locationSpecificButtons
                                            }
                                    })
                            })
                    };
                    VideoSmartBuyStateEngine.prototype.onTVSeriesDetailsStateChanged = function(stateInfo) {
                        var buttons = [];
                        if (!this.media.hydrated) {
                            if (!this.media.hydrated && this.media.hydrate)
                                this.media.hydrate();
                            return WinJS.Promise.wrap(null)
                        }
                        var isSignedIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn;
                        var canPinToDashboard = false;
                        var canRate = false;
                        var canAddToWatchlist = false;
                        var featureEnablementService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.featureEnablement);
                        var watchlistEnabled = featureEnablementService.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.videoWatchlist);
                        if (MS.Entertainment.Utilities.isVideoApp2) {
                            canPinToDashboard = isSignedIn && MS.Entertainment.Utilities.appRegionMatchesMachineRegion();
                            canRate = isSignedIn
                        }
                        var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        if (MS.Entertainment.Utilities.isVideoApp2)
                            buttons.push(this.buttons.changeSeason);
                        if (canRate)
                            buttons.push(this.buttons.ratingPicker);
                        if (watchlistEnabled && MS.Entertainment.Utilities.isVideoApp2 && isSignedIn) {
                            canAddToWatchlist = true;
                            canPinToDashboard = false
                        }
                        if (canPinToDashboard) {
                            buttons.push(this.buttons.pinToDashboard);
                            this.buttons.pinToDashboard.refresh()
                        }
                        if (canAddToWatchlist) {
                            buttons.push(this.buttons.addRemoveItemWatchlist);
                            if (this.buttons.addRemoveItemWatchlist.refresh)
                                this.buttons.addRemoveItemWatchlist.refresh(this.media)
                        }
                        return WinJS.Promise.wrap({smartButtons: buttons})
                    };
                    VideoSmartBuyStateEngine.prototype._initializeSwitchOfferButtons = function() {
                        this._initializePurchaseOptions();
                        if (!this.buttons.switchVideoDefinition.purchaseOptions)
                            this.buttons.switchVideoDefinition.purchaseOptions = this.purchaseOptions;
                        if (!this.buttons.switchLanguage.purchaseOptions)
                            this.buttons.switchLanguage.purchaseOptions = this.purchaseOptions
                    };
                    VideoSmartBuyStateEngine.prototype._initializePurchaseOptions = function() {
                        if (!this.purchaseOptions)
                            this.purchaseOptions = new PurchaseOptions;
                        this.purchaseOptions.initializeLanguages(VideoSmartBuyStateEngine.getLanguagesForRights(this.media))
                    };
                    VideoSmartBuyStateEngine.prototype._updateOfflineAvailabilityNotification = function(stateInfo) {
                        var notAvailableOffline = false;
                        if (!stateInfo.collection.canPlayLocally && !stateInfo.download.hasAny)
                            if (this.media.inCollection)
                                notAvailableOffline = true;
                            else
                                notAvailableOffline = stateInfo.marketplace.canStream || stateInfo.marketplace.canDownload;
                        if (notAvailableOffline)
                            if (!this.media.contentNotifications)
                                MS.Entertainment.Utilities.BindingAgnostic.setProperty(this.media, "contentNotifications", new MS.Entertainment.UI.ContentNotification.ObservableNotificationArray);
                            else {
                                var label = String.load(String.id.IDS_NOT_AVAILABLE_OFFLINE);
                                if (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video)
                                    if (stateInfo.marketplace.canStream)
                                        label = stateInfo.marketplace.canDownload ? String.load(String.id.IDS_VIDEO_STREAMING_DOWNLOAD_TO_WATCH_OFFLINE) : String.load(String.id.IDS_VIDEO_STREAMING_NOTIFICATION);
                                    else if (stateInfo.marketplace.canDownload)
                                        label = String.load(String.id.IDS_VIDEO_DOWNLOAD_TO_WATCH_OFFLINE);
                                if (stateInfo.marketplace.canStream)
                                    this.media.contentNotifications.sendNotification(MS.Entertainment.UI.ContentNotification.NotificationType.offlineAvailabilityLabel, new MS.Entertainment.UI.ContentNotification.Notification(MS.Entertainment.UI.Icon.inlineStreaming, null, label))
                            }
                        else if (this.media.contentNotifications)
                            if (stateInfo.collection.canPlayLocally && !stateInfo.download.hasActive)
                                this.media.contentNotifications.sendNotification(MS.Entertainment.UI.ContentNotification.NotificationType.offlineAvailabilityLabel, new MS.Entertainment.UI.ContentNotification.Notification(null, null, String.load(String.id.IDS_VIDEO_AVAILABLE_OFFLINE)));
                            else
                                this.media.contentNotifications.sendNotification(MS.Entertainment.UI.ContentNotification.NotificationType.offlineAvailabilityLabel, null)
                    };
                    VideoSmartBuyStateEngine.prototype._updateFileTransferNotification = function(stateInfo) {
                        if (!stateInfo.download.hasAny)
                            if (this.media.contentNotifications)
                                this.media.contentNotifications.sendNotification(MS.Entertainment.UI.ContentNotification.NotificationType.marketplaceDownloadStatus, null)
                    };
                    VideoSmartBuyStateEngine.getSeasonResolutionsForRights = function(media, tuner) {
                        if (media && media.firstEpisode)
                            return VideoSmartBuyStateEngine.getResolutionsForRights(media.firstEpisode, tuner, true);
                        return null
                    };
                    VideoSmartBuyStateEngine.getSeasonLanguagesForRights = function(media) {
                        if (media && media.firstEpisode)
                            return VideoSmartBuyStateEngine.getLanguagesForRights(media.firstEpisode);
                        return []
                    };
                    VideoSmartBuyStateEngine.getResolutionsForRights = function(media, tuner, isSeason) {
                        var hasHdRight = false;
                        var hasSdRight = false;
                        var rights = null;
                        if (isSeason)
                            rights = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchaseStream];
                        else
                            rights = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream];
                        var matchingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._getMatchingRights(media, tuner, rights, {freeOnly: false});
                        if (matchingRights && matchingRights.length > 0)
                            for (var i = 0; i < matchingRights.length; i++) {
                                if (!matchingRights[i].videoDefinition)
                                    continue;
                                hasSdRight = hasSdRight || matchingRights[i].videoDefinition === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.xd || matchingRights[i].videoDefinition === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.sd;
                                hasHdRight = hasHdRight || matchingRights[i].videoDefinition === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd || matchingRights[i].videoDefinition === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p;
                                if (hasHdRight && hasSdRight)
                                    break
                            }
                        return {
                                hasHdRight: hasHdRight, hasSdRight: hasSdRight, hasHdAndSdRights: hasHdRight && hasSdRight
                            }
                    };
                    VideoSmartBuyStateEngine.getLanguagesForRights = function(media) {
                        var languages = [];
                        var rights = [];
                        if (media && MS.Entertainment.Utilities.isTVSeason(media)) {
                            media = media.firstEpisode;
                            rights = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchaseStream]
                        }
                        else
                            rights = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream];
                        if (!media)
                            return languages;
                        Trace.assert(!!media.hydrated, "Media must be hydrated to get languages");
                        var tuner = MS.Entertainment.Utilities.defaultClientTypeFromApp;
                        var matchingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._getMatchingRights(media, tuner, rights, {freeOnly: false});
                        if (matchingRights && matchingRights.length > 0)
                            for (var i = 0; i < matchingRights.length; i++) {
                                var found = false;
                                for (var j = 0; j < languages.length && !found; j++)
                                    if (languages[j] === matchingRights[i].primaryAudioLanguage)
                                        found = true;
                                if (!found && matchingRights[i].primaryAudioLanguage)
                                    languages.push(matchingRights[i].primaryAudioLanguage)
                            }
                        return languages
                    };
                    VideoSmartBuyStateEngine.findOffer = function(media, offerId) {
                        if (offerId)
                            for (var i = 0; i < media.rights.length; i++)
                                if (media.rights[i].offerId === offerId && media.rights[i].signedOffer)
                                    return media.rights[i];
                        return null
                    };
                    VideoSmartBuyStateEngine.findSeasonOffer = function(season, episodeOffer) {
                        if (episodeOffer)
                            for (var i = 0; i < season.rights.length; i++)
                                if (season.rights[i].offerId === episodeOffer.offerId && season.rights[i].offerInstanceId === episodeOffer.offerInstanceId && season.rights[i].signedOffer)
                                    return season.rights[i];
                        return null
                    };
                    VideoSmartBuyStateEngine.getBestFreeSeasonRight = function(season) {
                        var episode = null;
                        if (season.firstEpisode) {
                            Trace.assert(season.firstEpisode.hydrated, "First episode not hydrated");
                            if (season.firstEpisode.hydrated)
                                episode = season.firstEpisode
                        }
                        var bestOffer = VideoSmartBuyStateEngine.getBestFreeRight((episode !== null) ? episode : season, true);
                        if (bestOffer && episode)
                            bestOffer = MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.findSeasonOffer(season, bestOffer);
                        return bestOffer
                    };
                    VideoSmartBuyStateEngine.getBestFreeRight = function(media, isSeason) {
                        var bestFreeRight = null;
                        if (!MS.Entertainment.Utilities.clientSupportsFreeJustPlays)
                            return bestFreeRight;
                        var tuner = MS.Entertainment.Utilities.defaultClientTypeFromApp;
                        var rights = null;
                        if (isSeason)
                            rights = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchaseStream];
                        else
                            rights = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream];
                        var matchingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._getMatchingRights(media, tuner, rights, {freeOnly: true});
                        if (!matchingRights || matchingRights.length === 0)
                            return null;
                        var edsResolutionFormat = MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat;
                        var highestFreeResolution = String.empty;
                        var i = 0;
                        while (i < matchingRights.length && matchingRights[i]) {
                            if (MS.Entertainment.Utilities.isRightFree(matchingRights[i])) {
                                var videoDefinition = matchingRights[i].videoDefinition;
                                var betterRight = false;
                                switch (videoDefinition) {
                                    case MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.xd:
                                        betterRight = (highestFreeResolution === String.empty);
                                        break;
                                    case MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.sd:
                                        betterRight = (highestFreeResolution === String.empty || highestFreeResolution === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.xd);
                                        break;
                                    case MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd:
                                        betterRight = (highestFreeResolution === String.empty || highestFreeResolution === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.xd || highestFreeResolution === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.sd);
                                        break;
                                    case MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p:
                                        betterRight = (highestFreeResolution === String.empty || highestFreeResolution === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.xd || highestFreeResolution === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.sd || highestFreeResolution === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd);
                                        break
                                }
                                if (!bestFreeRight || betterRight) {
                                    bestFreeRight = matchingRights[i];
                                    highestFreeResolution = bestFreeRight.videoDefinition
                                }
                            }
                            i++
                        }
                        return bestFreeRight
                    };
                    VideoSmartBuyStateEngine.getDefaultSeasonBuyOffer = function(season, videoDefinitionPreference, videoLanguagePreference) {
                        var episode = null;
                        if (season.firstEpisode) {
                            Trace.assert(season.firstEpisode.hydrated, "First episode not hydrated");
                            if (season.firstEpisode.hydrated)
                                episode = season.firstEpisode
                        }
                        var bestOffer = MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.getDefaultBuyOffer((episode !== null) ? episode : season, true, videoDefinitionPreference, videoLanguagePreference);
                        if (bestOffer && episode)
                            bestOffer = MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.findSeasonOffer(season, bestOffer);
                        else if (!bestOffer && episode) {
                            bestOffer = MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.getDefaultBuyOffer(season, true, videoDefinitionPreference, videoLanguagePreference);
                            Trace.assert(!bestOffer, "We have a first episode, but that episode does not have a season pass offer that the season does have. This is likely a programming error on the first episode")
                        }
                        return bestOffer
                    };
                    VideoSmartBuyStateEngine.getDefaultBuyOffer = function(media, isSeason, videoDefinitionPreference, videoLanguagePreference, includeExpired) {
                        var rights;
                        if (isSeason)
                            rights = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchaseStream];
                        else
                            rights = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PurchaseStream];
                        return VideoSmartBuyStateEngine.getDefaultOffer(media, MS.Entertainment.Utilities.defaultClientTypeFromApp, rights, false, MS.Entertainment.Utilities.clientSupportsFreeJustPlays, null, videoDefinitionPreference, videoLanguagePreference, includeExpired)
                    };
                    VideoSmartBuyStateEngine.getDefaultRentStreamOffer = function(media, videoDefinitionPreference, videoLanguagePreference) {
                        return VideoSmartBuyStateEngine.getDefaultOffer(media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream], false, MS.Entertainment.Utilities.clientSupportsFreeJustPlays, MS.Entertainment.Data.Augmenter.Marketplace.edsDeliveryFormat.streaming, videoDefinitionPreference, videoLanguagePreference)
                    };
                    VideoSmartBuyStateEngine.getDefaultRentDownloadOffer = function(media, videoDefinitionPreference, videoLanguagePreference) {
                        return VideoSmartBuyStateEngine.getDefaultOffer(media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream], false, MS.Entertainment.Utilities.clientSupportsFreeJustPlays, MS.Entertainment.Data.Augmenter.Marketplace.edsDeliveryFormat.download, videoDefinitionPreference, videoLanguagePreference)
                    };
                    VideoSmartBuyStateEngine.getDefaultOffer = function(media, tuner, rights, freeOnly, excludeFree, deliveryFormat, videoDefinitionPreference, videoLanguagePreference, includeExpired) {
                        return this.getPreferredQualityWithLowestPriceOffer(media, tuner, rights, freeOnly, excludeFree, deliveryFormat, videoDefinitionPreference, videoLanguagePreference, includeExpired)
                    };
                    VideoSmartBuyStateEngine.getPreferredQualityWithLowestPriceOffer = function(media, tuner, rights, freeOnly, excludeFree, deliveryFormat, videoDefinitionPreference, videoLanguagePreference, includeExpired) {
                        var resolutionFormat = MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat;
                        var preferHigherQuality;
                        if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason)
                            videoLanguagePreference = null;
                        var qualityPreference = [];
                        if (videoDefinitionPreference === MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd) {
                            qualityPreference = [resolutionFormat.hd1080p, resolutionFormat.hd, resolutionFormat.xd, resolutionFormat.sd];
                            preferHigherQuality = false
                        }
                        else {
                            qualityPreference = [resolutionFormat.xd, resolutionFormat.sd, resolutionFormat.hd1080p, resolutionFormat.hd];
                            preferHigherQuality = true
                        }
                        var qualityOrder = {};
                        for (var i = 0; i < qualityPreference.length; i++)
                            qualityOrder[qualityPreference[i]] = i + 1;
                        var sortTypeQualityPriceFunction = function(a, b) {
                                var resolutionA = a ? qualityOrder[a.videoDefinition] : null;
                                var resolutionB = b ? qualityOrder[b.videoDefinition] : null;
                                var priceA = a ? a.price : 0;
                                var priceB = b ? b.price : 0;
                                var offerDistributionTypeA = a ? a.distributionType : null;
                                var offerDistributionTypeB = b ? b.distributionType : null;
                                MS.Entertainment.ViewModels.assert(offerDistributionTypeA && offerDistributionTypeB && ((offerDistributionTypeA === MS.Entertainment.Data.Augmenter.Marketplace.edsOfferDistributionType.full) || (offerDistributionTypeA === MS.Entertainment.Data.Augmenter.Marketplace.edsOfferDistributionType.presale)) && ((offerDistributionTypeB === MS.Entertainment.Data.Augmenter.Marketplace.edsOfferDistributionType.full) || (offerDistributionTypeB === MS.Entertainment.Data.Augmenter.Marketplace.edsOfferDistributionType.presale)), "Both items must be valid and have valid distribution Types");
                                if (offerDistributionTypeA !== offerDistributionTypeB)
                                    return ((offerDistributionTypeA === MS.Entertainment.Data.Augmenter.Marketplace.edsOfferDistributionType.full) ? 1 : -1);
                                if (!resolutionA || !resolutionB)
                                    return preferHigherQuality ? (priceA === priceB) ? 0 : ((priceA > priceB) ? 1 : -1) : (priceA === priceB) ? 0 : ((priceB > priceA) ? 1 : -1);
                                var resolutionOrder = (resolutionA === resolutionB) ? 0 : ((resolutionA > resolutionB) ? 1 : -1);
                                if (resolutionOrder === 0)
                                    if (priceA !== priceB)
                                        return ((priceA < priceB) ? 1 : -1);
                                    else if (a.videoEncoding === MS.Entertainment.Data.Augmenter.Marketplace.edsVideoEncoding.h264)
                                        return (new Microsoft.Entertainment.Configuration.ConfigurationManager).fulfillment.preferH264Content ? 1 : -1;
                                    else
                                        return (new Microsoft.Entertainment.Configuration.ConfigurationManager).fulfillment.preferH264Content ? -1 : 1;
                                else
                                    return resolutionOrder
                            };
                        return this.getOfferWithSortFunction(media, tuner, rights, freeOnly, excludeFree, deliveryFormat, videoLanguagePreference, sortTypeQualityPriceFunction, includeExpired)
                    };
                    VideoSmartBuyStateEngine.getLowestPriceOffer = function(media, tuner, rights, freeOnly, excludeFree) {
                        var sortPriceFunction = function(a, b) {
                                var priceA = a ? a.price : 0;
                                var priceB = b ? b.price : 0;
                                return ((priceA === priceB) ? 0 : ((priceA < priceB) ? 1 : -1))
                            };
                        return this.getOfferWithSortFunction(media, tuner, rights, freeOnly, excludeFree, null, null, sortPriceFunction)
                    };
                    VideoSmartBuyStateEngine.getOfferWithSortFunction = function(media, tuner, rights, freeOnly, excludeFree, deliveryFormat, language, sortFunction, includeExpired) {
                        if (!MS.Entertainment.Utilities.clientSupportsFreeJustPlays)
                            excludeFree = false;
                        MS.Entertainment.ViewModels.assert(MS.Entertainment.Utilities.isApp1 || !deliveryFormat || deliveryFormat === MS.Entertainment.Data.Augmenter.Marketplace.edsDeliveryFormat.streaming, "Streaming is the only acceptable delivery format for Video 2");
                        var filters = {
                                freeOnly: freeOnly, excludeFree: excludeFree, allowPartialRights: false, includeExpired: includeExpired, deliveryFormat: deliveryFormat, primaryAudioLanguage: language
                            };
                        var matchingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._getMatchingRights(media, tuner, rights, filters, sortFunction);
                        if (!matchingRights || matchingRights.length === 0)
                            return null;
                        var possibleRights = [];
                        var foundCurrencyCode = String.empty;
                        for (var i = 0; i < matchingRights.length; i++) {
                            var right = matchingRights[i];
                            if (right.hasOffer && right.priceCurrencyCode) {
                                if (!foundCurrencyCode)
                                    foundCurrencyCode = right.priceCurrencyCode;
                                if (right.priceCurrencyCode !== foundCurrencyCode)
                                    return null;
                                possibleRights.push(right)
                            }
                        }
                        if (!possibleRights || possibleRights.length === 0)
                            return null;
                        else {
                            possibleRights.sort(sortFunction);
                            return possibleRights[possibleRights.length - 1]
                        }
                    };
                    VideoSmartBuyStateEngine.getPriceString = function(offer, videoDefinitionPreference) {
                        if (!offer)
                            return null;
                        var displayPrice = offer.displayPrice;
                        if (displayPrice === "")
                            displayPrice = "0";
                        else if (MS.Entertainment.Utilities.isApp2 && MS.Entertainment.Utilities.isRightFree(offer))
                            displayPrice = String.load(String.id.IDS_VIDEO_PRICE_FREE);
                        var priceString = null;
                        if (MS.Entertainment.Utilities.isRightFree(offer))
                            priceString = String.load(String.id.IDS_VIDEO_PRICE_FREE);
                        else {
                            var videoDefinition = videoDefinitionPreference || offer.videoDefinition;
                            switch (videoDefinition) {
                                case MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd:
                                case MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p:
                                    priceString = String.load(String.id.IDS_VIDEO_PRICE_HD).format(displayPrice);
                                    break;
                                case MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.sd:
                                case MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.xd:
                                    priceString = String.load(String.id.IDS_VIDEO_PRICE_SD).format(displayPrice);
                                    break;
                                case String.empty:
                                    priceString = displayPrice;
                                    break;
                                default:
                                    MS.Entertainment.Framework.fail("SmartBuyStateHandler: Unknown Video Resolution: " + videoDefinition);
                                    break
                            }
                        }
                        return priceString
                    };
                    VideoSmartBuyStateEngine.canPlayVideoTrailer = function(media) {
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        var isTVEpisode = MS.Entertainment.Platform.PlaybackHelpers.isTVEpisode(media);
                        var canPlayTrailer = !isTVEpisode && featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.movieTrailersMarketplace) && ((media.hasCanonicalId && media.videoPreviewUrl) || (media.hasServiceId && MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PreviewStream])));
                        return canPlayTrailer
                    };
                    VideoSmartBuyStateEngine.canPlayOnXbox = function(media) {
                        return media.type !== MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.MovieTrailer && MS.Entertainment.ViewModels.SmartBuyStateHandlers._canXboxAccessMedia(media, null) && MS.Entertainment.Utilities.isApp1 && !MS.Entertainment.Utilities.isWindowsBlue
                    };
                    VideoSmartBuyStateEngine.cutButtonsIfNecessary = function(buttons, buttonSet) {
                        if (MS.Entertainment.Utilities.isVideoApp2 && buttons.length > this.maxVideo2Buttons)
                            buttons = buttons.slice(0, this.maxVideo2Buttons);
                        return buttons
                    };
                    VideoSmartBuyStateEngine.insertAsyncButtons = function(results, buttons) {
                        for (var i = 0; i < results.length; i++)
                            if (results[i].addButtons && results[i].addButtons.length > 0) {
                                var addIndex = results[i].addIndex;
                                for (var j = 0; j < i; j++)
                                    if (addIndex >= results[j].addIndex)
                                        addIndex = addIndex + results[j].addButtons.length;
                                buttons.spliceArray(addIndex, 0, results[i].addButtons)
                            }
                        return buttons
                    };
                    VideoSmartBuyStateEngine.getPlayButtonStatesFromBookmark = function(bookmark, played) {
                        return {
                                showPlay: (bookmark === 0) && !played, showResume: (bookmark > 0) && !played, showRestart: (bookmark === 0 && played) || (bookmark > 0)
                            }
                    };
                    VideoSmartBuyStateEngine.maxVideo2Buttons = 6;
                    return VideoSmartBuyStateEngine
                })(ViewModels.SmartBuyStateEngine);
            ViewModels.VideoSmartBuyStateEngine = VideoSmartBuyStateEngine;
            var PurchaseOptions = (function(_super) {
                    __extends(PurchaseOptions, _super);
                    function PurchaseOptions(selectedDefinition, selectedLanguageCode) {
                        _super.call(this);
                        this._selectedDefinition = String.empty;
                        this._selectedLanguageCode = String.empty;
                        this._languageCodes = [];
                        this.selectedDefinition = selectedDefinition || MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd;
                        this.selectedLanguageCode = selectedLanguageCode || String.empty
                    }
                    Object.defineProperty(PurchaseOptions.prototype, "selectedDefinition", {
                        get: function() {
                            return this._selectedDefinition
                        }, set: function(value) {
                                Trace.assert(value === Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd || value === Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd, "Invalid definition {0} in PurchaseOptions::selectedDefinition".format(value));
                                this.updateAndNotify("selectedDefinition", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PurchaseOptions.prototype, "selectedLanguageCode", {
                        get: function() {
                            return this._selectedLanguageCode
                        }, set: function(value) {
                                this.updateAndNotify("selectedLanguageCode", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PurchaseOptions.prototype, "languageCodes", {
                        get: function() {
                            return this._languageCodes
                        }, set: function(value) {
                                this.updateAndNotify("languageCodes", value)
                            }, enumerable: true, configurable: true
                    });
                    PurchaseOptions.prototype.toggleVideoDefinition = function() {
                        var hd = MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd;
                        var sd = MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd;
                        if (this.selectedDefinition === hd)
                            this.selectedDefinition = sd;
                        else if (this.selectedDefinition === sd)
                            this.selectedDefinition = hd;
                        else
                            Trace.fail("Unrecognized video definition")
                    };
                    PurchaseOptions.prototype.toggleVideoLanguage = function() {
                        var currentLanguage = this.selectedLanguageCode;
                        var i = 0;
                        for (i = 0; i < this.languageCodes.length; i++)
                            if (currentLanguage === this.languageCodes[i])
                                break;
                        i = (i + 1) % this.languageCodes.length;
                        this.selectedLanguageCode = this.languageCodes[i]
                    };
                    PurchaseOptions.prototype.initializeLanguages = function(languages) {
                        if (this.languageCodes.length > 0)
                            return;
                        this.languageCodes = languages;
                        var currentLanguage = MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(MS.Entertainment.Utilities.getAccountLocale());
                        var initialPreferredLanguage = this.selectedLanguageCode;
                        var currentPreferredLanguageMatch;
                        var initialPreferredLanguageMatch;
                        if (languages.length > 0) {
                            this.selectedLanguageCode = languages[0];
                            for (var i = 0; i < languages.length; i++) {
                                var matchLanguage = MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(languages[i]);
                                if (currentLanguage === matchLanguage) {
                                    currentPreferredLanguageMatch = languages[i];
                                    if (!initialPreferredLanguage)
                                        break
                                }
                                if (initialPreferredLanguage && (initialPreferredLanguage === matchLanguage)) {
                                    initialPreferredLanguageMatch = languages[i];
                                    break
                                }
                            }
                        }
                        if (initialPreferredLanguageMatch)
                            this.selectedLanguageCode = initialPreferredLanguageMatch;
                        else if (currentPreferredLanguageMatch)
                            this.selectedLanguageCode = currentPreferredLanguageMatch
                    };
                    return PurchaseOptions
                })(MS.Entertainment.UI.Framework.ObservableBase);
            ViewModels.PurchaseOptions = PurchaseOptions
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/upgradereminderdisplayer.js:14381 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI", {UpgradeReminderDisplayer: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function() {
            this._appNotificationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification)
        }, {
            _appNotificationService: null, upgradeRequired: MS.Entertainment.UI.Framework.observableProperty("upgradeRequired", false), forceUpgradeRequired: false, checkAndRunUpgradeReminder: function checkAndRunUpgradeReminder(showDialog) {
                    var versionSupported = this._checkVersionSupported();
                    var stateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    if (!versionSupported || !stateService.servicesEnabled) {
                        this._showUpgradeNotification();
                        if (showDialog)
                            this.showUpgradeDialog()
                    }
                    if (this.forceUpgradeRequired) {
                        WinJS.Promise.timeout().then(function _delay() {
                            window.location.href = "UpdateApp.html"
                        });
                        MS.Entertainment.Instrumentation.PerfTrack.disableAllStartupScenarios()
                    }
                    return versionSupported
                }, _checkVersionSupported: function _checkVersionSupported() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return true;
                    var currentPackage = Windows.ApplicationModel.Package.current;
                    var currentVersion = currentPackage.id.version;
                    var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var minVersionSupported;
                    var minServiceVersionSupported;
                    var minAppVersionSupported;
                    if (MS.Entertainment.Utilities.isMusicApp1) {
                        minVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.service.minMusicSignInSupportedVersion);
                        minAppVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.fue.minMusicAppSupportedVersion);
                        minServiceVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.service.minMusicServiceSupportedVersion)
                    }
                    else if (MS.Entertainment.Utilities.isVideoApp1) {
                        minVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.service.minVideoSignInSupportedVersion);
                        minAppVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.fue.minVideoAppSupportedVersion);
                        minServiceVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.service.minVideoServiceSupportedVersion)
                    }
                    else {
                        minVersionSupported = MS.Entertainment.Utilities.parseVersionString("1.0.0.0");
                        minAppVersionSupported = MS.Entertainment.Utilities.parseVersionString("1.0.0.0");
                        minServiceVersionSupported = MS.Entertainment.Utilities.parseVersionString("1.0.0.0")
                    }
                    var versionSupported = MS.Entertainment.Utilities.compareVersions(currentVersion, minVersionSupported) >= 0 ? true : false;
                    var stateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    stateService.servicesEnabled = (MS.Entertainment.Utilities.compareVersions(currentVersion, minServiceVersionSupported) >= 0);
                    this.forceUpgradeRequired = (MS.Entertainment.Utilities.compareVersions(currentVersion, minAppVersionSupported) < 0);
                    this.upgradeRequired = !versionSupported || !stateService.servicesEnabled;
                    var appSignIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    appSignIn.setIsSignInSupported(!this.upgradeRequired);
                    return versionSupported
                }, _showUpgradeNotification: function _showUpgradeNotification() {
                    var upgradeAction = WinJS.Utilities.markSupportedForProcessing(function() {
                            this.launchStore();
                            this._appNotificationService.removeNotificationByCategory(MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError);
                            this._appNotificationService.send(new MS.Entertainment.UI.Notification({
                                notificationType: MS.Entertainment.UI.Notification.Type.Critical, title: String.load(String.id.IDS_VERSION_CHECK_SERVICE_TITLE), subTitle: String.load(String.id.IDS_VERSION_CHECK_SIGNIN_TEXT), moreDetails: null, icon: WinJS.UI.AppBarIcon.download, action: upgradeAction, category: MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError, isPersistent: true
                            }))
                        }.bind(this));
                    this._appNotificationService.removeNotificationByCategory(MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError);
                    this._appNotificationService.send(new MS.Entertainment.UI.Notification({
                        notificationType: MS.Entertainment.UI.Notification.Type.Critical, title: String.load(String.id.IDS_VERSION_CHECK_SERVICE_TITLE), subTitle: String.load(String.id.IDS_VERSION_CHECK_SIGNIN_TEXT), moreDetails: null, icon: WinJS.UI.AppBarIcon.download, action: upgradeAction, category: MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError, isPersistent: true
                    }))
                }, showUpgradeDialog: function showUpgradeDialog() {
                    var cancelConfirmDialogButtons = [{
                                title: String.load(String.id.IDS_VERSION_CHECK_UPGRADE_LINK), execute: function onOk(overlay) {
                                        this.launchStore();
                                        overlay.hide()
                                    }.bind(this)
                            }, {
                                title: String.load(String.id.IDS_CANCEL_BUTTON), execute: function onCancel(overlay) {
                                        overlay.hide()
                                    }
                            }];
                    var upgradeTitleStringId = MS.Entertainment.Utilities.isVideoApp1 ? String.id.IDS_VIDEO_LX_VERSION_CHECK_SERVICE_TITLE : String.id.IDS_VERSION_CHECK_SERVICE_TITLE;
                    var upgradeDescriptionStringId = MS.Entertainment.Utilities.isVideoApp1 ? String.id.IDS_VIDEO_LX_VERSION_CHECK_SERVICE_FOR_FEATURES_TEXT : String.id.IDS_VERSION_CHECK_SERVICE_FOR_FEATURES_TEXT;
                    MS.Entertainment.UI.Shell.showMessageBox(String.load(upgradeTitleStringId), String.load(upgradeDescriptionStringId), {
                        persistOnNavigate: MS.Entertainment.Utilities.isVideoApp1, buttons: cancelConfirmDialogButtons, defaultButtonIndex: 0, cancelButtonIndex: 1
                    })
                }, launchStore: function launchStore() {
                    var launchInfo = "ms-windows-store:Updates";
                    var appAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.launchApp);
                    appAction.automationId = MS.Entertainment.UI.AutomationIds.launchAppStoreUpgrade;
                    appAction.parameter = {
                        uri: launchInfo, appendSource: true, appendGamerTag: false
                    };
                    appAction.execute()
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.upgradeReminderDisplayer, function createUpgradeReminderDisplayerService() {
        return new MS.Entertainment.UI.UpgradeReminderDisplayer
    })
})()
})();
/* >>>>>>/components/shell/openfileaction.js:14479 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Components.Shell");
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Components.Shell", {OpenFileAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.ToolbarAction", function() {
            this.base();
            this.id = MS.Entertainment.UI.AppBarActions.openFile;
            this.automationId = MS.Entertainment.UI.AutomationIds.appBarOpenFile;
            this.title = String.load(String.id.IDS_DETAILS_FILE_OPEN_LABEL);
            this.icon = WinJS.UI.AppBarIcon.openfile
        }, {
            executed: function executed(params) {
                this.parameter = {
                    actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas
                };
                var fileOpenPicker = null;
                try {
                    fileOpenPicker = new Windows.Storage.Pickers.FileOpenPicker
                }
                catch(e) {
                    MS.Entertainment.UI.Components.Shell.fail("failed to create file open picker");
                    return
                }
                var openFile = function openFile(file) {
                        if (file && file.size !== 0) {
                            if (MS.Entertainment.Utilities.isVideoApp)
                                file = [file];
                            WinJS.Promise.as(MS.Entertainment.Activation.retrievePropertiesAndPlay(file, 0)).done(null, function(error) {
                                MS.Entertainment.UI.Components.Shell.fail("OpenFileAction::openFile(). Failed to retrieve file properties. Error: " + (error && error.message))
                            })
                        }
                    };
                if (MS.Entertainment.Utilities.isVideoApp)
                    try {
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        var playbackSession = sessionMgr.getSession(MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying);
                        var initialPlaybackState = playbackSession.currentTransportState;
                        if (initialPlaybackState === MS.Entertainment.Platform.Playback.TransportState.playing)
                            playbackSession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.paused;
                        var validFileExtensions = [".3g2", ".3gp", ".3gpp", ".asf", ".avi", ".divx", ".m2ts", ".m2t", ".m4v", ".mod", ".mov", ".mp4", ".mp4v", ".mpe", ".mpeg", ".mpg", ".mpv2", ".mts", ".tod", ".ts", ".tts", ".wm", ".wmv", ".xvid"];
                        if (MS.Entertainment.Utilities.isWindowsBlue)
                            validFileExtensions.push(".mkv");
                        fileOpenPicker.fileTypeFilter.replaceAll(validFileExtensions);
                        fileOpenPicker.suggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.videosLibrary;
                        fileOpenPicker.viewMode = Windows.Storage.Pickers.PickerViewMode.thumbnail;
                        fileOpenPicker.pickSingleFileAsync().then(function fileOpenPickerFunction(file) {
                            if (file && file.size !== 0)
                                openFile(file);
                            else if (initialPlaybackState === MS.Entertainment.Platform.Playback.TransportState.playing)
                                playbackSession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.playing
                        })
                    }
                    catch(e) {
                        MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_MEDIA_ERROR_CAPTION), e.number)
                    }
                else if (MS.Entertainment.Utilities.isMusicApp)
                    try {
                        fileOpenPicker.fileTypeFilter.replaceAll([".aac", ".adt", ".adts", ".m3u", ".m4a", ".mp3", ".mp4", ".mpa", ".wav", ".wma", ".wpl", ".zpl"]);
                        fileOpenPicker.suggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.musicLibrary;
                        fileOpenPicker.viewMode = Windows.Storage.Pickers.PickerViewMode.list;
                        fileOpenPicker.pickMultipleFilesAsync().then(function fileOpenPickerFunction(file) {
                            openFile(file)
                        })
                    }
                    catch(e) {
                        MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_MEDIA_ERROR_CAPTION), e.number)
                    }
            }, canExecute: function canExecute() {
                    return (MS.Entertainment.Utilities.isVideoApp || MS.Entertainment.Utilities.isMusicApp)
                }
        }, {
            getOpenFileAction: function getOpenFileAction() {
                if (!MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction)
                    MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction = new MS.Entertainment.UI.Components.Shell.OpenFileAction;
                return {action: MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction}
            }, openFileAction: null
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.openFile, function() {
        if (!MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction)
            MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction = new MS.Entertainment.UI.Components.Shell.OpenFileAction;
        return MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction
    })
})()
})();
/* >>>>>>/controls/label.js:14567 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {Label: MS.Entertainment.UI.Framework.defineUserControl(null, function labelConstructor(element) {
            MS.Entertainment.Utilities.toggleClassName(this, ["wrap"], this.domElement, "wrap");
            MS.Entertainment.Utilities.toggleClassName(this, ["autoResizeFont"], this.domElement, "autoResizeFont");
            MS.Entertainment.Utilities.toggleClassNameNegate(this, ["clip"], this.domElement, "noClip");
            this.bind("numberOfLines", function setNumberOfLines() {
                if (!this.disableLayoutPass) {
                    this._resizeLabel();
                    this._beginResizeFont()
                }
            }.bind(this))
        }, {
            controlName: "Label", _displayText: "", _text: null, _stringId: 0, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.assert(!this.label, "Label Derivation isn't supported any more")
                }, displayText: {
                    get: function() {
                        return this._displayText
                    }, set: function(value) {
                            if (this._displayText === value)
                                return;
                            this._displayText = value;
                            if (this.domElement)
                                this.domElement.textContent = value
                        }
                }, text: {
                    get: function() {
                        return this._text
                    }, set: function(value) {
                            if (this._text === value)
                                return;
                            var oldValue = this._text;
                            this._text = value;
                            this.notify("text", value, oldValue);
                            this._setDisplayTextByText(value)
                        }
                }, _setDisplayTextByText: function _setDisplayTextByText(newValue) {
                    if (typeof newValue !== "undefined" && newValue !== null) {
                        MS.Entertainment.UI.Controls.assert(!this.stringId, "Mixed usage of raw text and stringId on a label.");
                        this.displayText = newValue;
                        this._beginResizeFont()
                    }
                }, stringId: {
                    get: function() {
                        return this._stringId
                    }, set: function(value) {
                            if (this._stringId === value)
                                return;
                            var oldValue = this._stringId;
                            this._stringId = value;
                            this.notify("stringId", value, oldValue);
                            this._setDisplayTextByStringId(value)
                        }
                }, _setDisplayTextByStringId: function _setDisplayTextByStringId(newValue) {
                    if (newValue) {
                        MS.Entertainment.UI.Controls.assert(!this.text, "Mixed usage of stringId and raw text on a label.");
                        this.displayText = String.load(newValue);
                        this._beginResizeFont()
                    }
                }, _resizeLabel: function _resizeLabel() {
                    var currentFontSize;
                    var currentLineHeight;
                    var unitToUse = null;
                    var lineSpaceValue = 0;
                    var parsedFontSize = null;
                    var parsedLineHeight = null;
                    var adjustedLineHeightMultiplier = this.lineHeightMultiplier;
                    if (this.numberOfLines > 0) {
                        currentFontSize = (this.domElement && this.domElement.currentStyle) ? this.domElement.currentStyle.fontSize : null;
                        if (currentFontSize)
                            parsedFontSize = /^(\d+)\s*(pt|px)$/.exec(currentFontSize);
                        if (parsedFontSize) {
                            currentLineHeight = (this.domElement && this.domElement.currentStyle) ? this.domElement.currentStyle.lineHeight : null;
                            if (currentLineHeight) {
                                parsedLineHeight = /^(\d+)\s*(pt|px)$/.exec(currentLineHeight);
                                if (parsedLineHeight)
                                    adjustedLineHeightMultiplier = parsedLineHeight[1] / parsedFontSize[1]
                            }
                            WinJS.Utilities.addClass(this.domElement, "specificLineCount");
                            this.domElement.style.maxHeight = (parsedFontSize[1] * adjustedLineHeightMultiplier * this.numberOfLines).toString() + parsedFontSize[2]
                        }
                    }
                }, _beginResizeFont: function _beginResizeFont() {
                    if (this.autoResizeFont) {
                        WinJS.Utilities.addClass(this.domElement, "hideFromDisplay");
                        WinJS.Promise.timeout().then(this._resizeFont.bind(this))
                    }
                }, _resizeFont: function _resizeFont() {
                    var labelDomElement = this.domElement;
                    var currentFontSize = this.maxFontSize;
                    var containerWidth = this.domElement.clientWidth;
                    var containerHeight = this.autoResizeHeight ? this.autoResizeHeight : this.domElement.clientHeight;
                    do {
                        labelDomElement.style["font-size"] = currentFontSize + "pt";
                        currentFontSize = currentFontSize - 1
                    } while (currentFontSize >= this.minFontSize && (labelDomElement.scrollWidth > containerWidth || labelDomElement.scrollHeight > containerHeight));
                    WinJS.Utilities.removeClass(labelDomElement, "hideFromDisplay")
                }
        }, {
            wrap: false, clip: true, autoResizeFont: false, autoResizeHeight: 0, maxFontSize: 10, minFontSize: 10, numberOfLines: 0, lineHeightMultiplier: 1.35, disableLayoutPass: false
        })})
})()
})();
/* >>>>>>/controls/popover.js:14675 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    var _currentPopOver = null;
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        PopOver: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Overlay", "/Controls/PopOver.html#overlayTemplate", function PopOver_Constructor(element, options) {
            this.domElement.addEventListener("DetailsReady", this._handleDetailsReady.bind(this));
            this._updatePosition = this._updatePosition.bind(this);
            MS.Entertainment.Utilities.attachResizeEvent(this.domElement, this._updatePosition);
            this.bind("width", this._updatePosition);
            this.bind("height", this._updatePosition);
            this._bindingsComplete = true;
            if (options && options.presetPreOverlayFocus)
                this._presetPreOverlayFocus = options.presetPreOverlayFocus;
            this._updatePosition()
        }, {
            criticalTemplate: false, dontWaitForContent: true, enableKeyboardLightDismiss: true, setFocusToNavigationService: true, _bindingsComplete: false, _lastWidth: 0, _lastHeight: 0, _lastContainerWidth: 0, _lastContainerHeight: 0, _handleDetailsReady: function _handleDetailsReady() {
                    MS.Entertainment.UI.Framework.focusFirstInSubTree(this.domElement, true)
                }, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.Overlay.prototype.initialize.call(this);
                    this._tabConstrainerHelper.includeAppBarOnLastTab = true
                }, unload: function unload() {
                    MS.Entertainment.Utilities.detachResizeEvent(this.domElement, this._updatePosition);
                    MS.Entertainment.UI.Controls.Overlay.prototype.unload.call(this)
                }, _updatePosition: function _updatePosition() {
                    if (!this._bindingsComplete)
                        return;
                    var containerWidth = MS.Entertainment.Utilities.getWindowWidth();
                    var containerHeight = MS.Entertainment.Utilities.getWindowHeight();
                    if (this.width && ((this.width !== this._lastWidth) || (containerWidth !== this._lastContainerWidth))) {
                        MS.Entertainment.UI.Controls.assert(typeof this.width === "string", "Dialog 'width' property is not a string");
                        if (this.width.indexOf("%") > 0)
                            this.left = this.right = (100 - parseInt(this.width)) / 2 + "%";
                        else
                            this.left = this.right = (containerWidth - parseInt(this.width)) / 2 + "px";
                        this._lastWidth = this.width;
                        this._lastContainerWidth = containerWidth
                    }
                    if (this.height && ((this.height !== this._lastHeight) || (containerHeight !== this._lastContainerHeight))) {
                        MS.Entertainment.UI.Controls.assert(typeof this.height === "string", "Dialog 'height' property is not a string");
                        if (this.height.indexOf("%") > 0)
                            this.top = this.bottom = (100 - parseInt(this.height)) / 2 + "%";
                        else
                            this.top = this.bottom = (containerHeight - parseInt(this.height)) / 2 + "px";
                        this._lastHeight = this.height;
                        this._lastContainerHeight = containerHeight
                    }
                    var positionCssText = "top: " + this.top + "; left: " + this.left + "; width: " + this.width + "px; height: " + this.height + "px";
                    this.cssPositionText = positionCssText
                }, showAnimation: function showAnimation(element) {
                    return WinJS.Promise.as()
                }
        }, {
            height: "200px", width: "200px", cssPositionText: ""
        }, {
            showPopOver: function showPopOver(data) {
                var result = WinJS.Promise.wrap();
                var appView = Windows.UI.ViewManagement.ApplicationView;
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                if (_currentPopOver || (uiStateService.isSnapped && !appView.tryUnsnap()))
                    return result;
                MS.Entertainment.UI.Controls.assert(data, "No data object supplied");
                MS.Entertainment.UI.Controls.assert(data.dataContext, "No data context object supplied");
                MS.Entertainment.UI.Controls.assert(data.dataContext.data, "No data supplied on data context object");
                MS.Entertainment.UI.Controls.assert(data.itemConstructor, "No data Constructor supplied");
                if (!data || !data.dataContext || !data.dataContext.data || !data.itemConstructor)
                    return WinJS.Promise.wrapError("Invalid data to show pop-over");
                var size = (data && data.size) || MS.Entertainment.Utilities.popOverDefaultSize;
                var mediaItem = data.dataContext.data;
                if (MS.Entertainment.Utilities.isApp2 && mediaItem.clone)
                    mediaItem = mediaItem.clone();
                if (mediaItem.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem)
                    mediaItem = MS.Entertainment.Utilities.convertEditorialItem(mediaItem);
                else {
                    mediaItem.location = data.dataContext.location;
                    mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem)
                }
                var options = {
                        presetPreOverlayFocus: data.presetPreOverlayFocus, onclose: data.onclose, userControl: data.itemConstructor, userControlOptions: {
                                media: mediaItem, inlineExtraData: data.dataContext.inlineExtraData, originalLocation: data.dataContext.location, collectionFilter: data.dataContext.collectionFilter, dataContext: data.dataContext
                            }, width: size.width ? size.width.toString() : String.empty, height: size.height ? size.height.toString() : String.empty
                    };
                if (mediaItem.hydrate && !mediaItem.hydrated)
                    mediaItem.hydrate().done(null, function error(){});
                MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PopoverRequest);
                if (MS.Entertainment.Utilities.isApp2) {
                    var signal = new MS.Entertainment.UI.Framework.Signal;
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.navigationPopover, null, null, {
                        signal: signal, options: options
                    }, true);
                    result = signal.promise
                }
                else {
                    _currentPopOver = new MS.Entertainment.UI.Controls.PopOver(document.createElement("div"), options);
                    result = _currentPopOver.show().then(function() {
                        _currentPopOver = null
                    })
                }
                return result
            }, showNonMediaPopOver: function showNonMediaPopOver(data) {
                    if (_currentPopOver)
                        return WinJS.Promise.wrap();
                    MS.Entertainment.UI.Controls.assert(data, "No data object supplied");
                    MS.Entertainment.UI.Controls.assert(data.itemConstructor, "No data Constructor supplied");
                    var size = (data && data.size) || MS.Entertainment.Utilities.popOverDefaultSize;
                    var options = {
                            presetPreOverlayFocus: data.presetPreOverlayFocus, onclose: data.onclose, userControl: data.itemConstructor, width: size.width ? size.width.toString() : String.empty, height: size.height ? size.height.toString() : String.empty
                        };
                    MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PopoverRequest);
                    _currentPopOver = new MS.Entertainment.UI.Controls.PopOver(document.createElement("div"), options);
                    return _currentPopOver.show().then(function() {
                            _currentPopOver = null
                        })
                }, dismissCurrentPopOver: function dismissCurrentPopOver() {
                    if (!_currentPopOver)
                        return WinJS.Promise.wrap();
                    return _currentPopOver.hide()
                }, isPopoverOpen: {get: function get_isPopoverOpen() {
                        return !!_currentPopOver
                    }}
        }), NavigationPopover: MS.Entertainment.UI.Framework.defineUserControl(null, function navigationPopoverConstructor(element, options) {
                var page = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage;
                this._options = page.options.options;
                this._signal = page.options.signal
            }, {
                _options: null, _signal: null, initialize: function navigationPopoverInitialize() {
                        var childControl = MS.Entertainment.Utilities.instantiateControl(this._options.userControl, this._options.userControlOptions, this._detailsAnchor);
                        if (childControl && childControl.setOverlay)
                            childControl.setOverlay(this)
                    }, unload: function unload() {
                        MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this);
                        this._signal.complete()
                    }, hide: function hide() {
                        var navigateBackAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.navigate);
                        navigateBackAction.parameter = MS.Entertainment.UI.Actions.navigate.NavigateLocation.back;
                        navigateBackAction.execute()
                    }, processChildren: true
            }, {}, {isPopoverOpen: {get: function get_isPopoverOpen() {
                        var currentLocation = null;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            currentLocation = navigationService.getUserLocation()
                        }
                        return (MS.Entertainment.UI.Monikers) && (currentLocation === MS.Entertainment.UI.Monikers.navigationPopover)
                    }}}), ShowPopOverAction: MS.Entertainment.deferredDerive(MS.Entertainment.UI.Actions.Action, null, {
                canExecute: function canExecute() {
                    return this.parameter && this.parameter.itemConstructor && this.parameter.dataContext
                }, executed: function() {
                        MS.Entertainment.UI.Controls.PopOver.showPopOver(this.parameter)
                    }
            })
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.showPopOver, function() {
        return new MS.Entertainment.UI.Controls.ShowPopOverAction
    })
})()
})();
/* >>>>>>/controls/actionlist.js:14835 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ActionList: MS.Entertainment.UI.Framework.defineUserControl("/Controls/actionList.html#actionListTemplate", function actionListConstructor() {
            this._traceProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
            this.visibleSet = new MS.Entertainment.ObservableArray;
            this.overflowSet = new MS.Entertainment.ObservableArray;
            this.updateActionSets = this.updateActionSets.bind(this);
            this.items = new MS.Entertainment.ObservableArray
        }, {
            _workingVisibleItems: null, _workingOverflowItems: null, _maxItems: 0, _overflowAction: null, _actionListBindings: null, _overflowTitleOverride: String.empty, _items: null, _frozen: false, adjustButtonSizeForSnappedMode: false, items: {
                    get: function() {
                        return this._items
                    }, set: function(v) {
                            if (this._items === v)
                                return;
                            var o = this._items;
                            this._items = v;
                            this._itemsChangedHandler(v);
                            this.notify("items", v, o)
                        }
                }, _getOverflowAction: function _getOverflowAction() {
                    if (this._overflowAction)
                        return this._overflowAction;
                    var action = new MS.Entertainment.UI.ToolbarAction;
                    action.id = "overflowAction";
                    action.automationId = MS.Entertainment.UI.AutomationIds.transportPlaybackOptions;
                    action.title = this._overflowTitleOverride || String.load(String.id.IDS_DETAILS_MORE_ACTION);
                    action._flyoutClassName = this._flyoutClassName;
                    action.hasSubActions = true;
                    action.subActions = this.overflowSet;
                    action.icon = MS.Entertainment.UI.Icon.moreActions;
                    action.executed = WinJS.Utilities.markSupportedForProcessing(function executed(){});
                    action.currentVisibility = MS.Entertainment.UI.Controls.ActionList.actionListVisibility.none;
                    this._overflowAction = {action: action};
                    return this._getOverflowAction()
                }, _pendingOverflow: null, updateActionSets: function updateActionSets() {
                    if (this._pendingOverflow) {
                        this._pendingOverflow.cancel();
                        this._pendingOverflow = null
                    }
                    if (this._frozen)
                        return;
                    var newSets = this._calculateActionLocations();
                    if (newSets.overflowSet.length < 1)
                        this.overflowSet.clear();
                    if (newSets.visibleSet.length < 1) {
                        this.visibleSet.clear();
                        return
                    }
                    var traceProvider = this._traceProvider;
                    function mergeNewSetIntoExistingSet(item, index) {
                        if (index < this.length) {
                            if (this.item(index) === item)
                                return;
                            traceProvider.traceActionListControl_ItemRemoved(item && item.action && item.action.title);
                            this.removeAt(index)
                        }
                        traceProvider.traceActionListControl_ItemAdded(item && item.action && item.action.title);
                        this.insert(index, item)
                    }
                    newSets.visibleSet.forEach(mergeNewSetIntoExistingSet.bind(this.visibleSet));
                    if (this.visibleSet.length > newSets.visibleSet.length)
                        for (var k = this.visibleSet.length - 1; this.visibleSet.length !== newSets.visibleSet.length; k--)
                            this.visibleSet.removeAt(k);
                    this._pendingOverflow = WinJS.Promise.timeout(500).then(function pendingOverflow() {
                        newSets.overflowSet.forEach(mergeNewSetIntoExistingSet.bind(this.overflowSet));
                        if (this.overflowSet.length > newSets.overflowSet.length)
                            for (var m = this.overflowSet.length - 1; this.overflowSet.length !== newSets.overflowSet.length; m--)
                                this.overflowSet.removeAt(m)
                    }.bind(this));
                    this.dispatchEvent("itemCountChanged")
                }, _calculateActionLocations: function _calculateActionLocations() {
                    var visibleSet = [];
                    var overflowSet = [];
                    var cantOverFlow = [];
                    var maxItems = this._maxItems;
                    if (maxItems < 1 || !this.workingItems)
                        return {
                                visibleSet: [], overflowSet: []
                            };
                    if (this.workingItems.length <= maxItems)
                        return {
                                visibleSet: this.workingItems.getArray(), overflowSet: overflowSet
                            };
                    for (var i = 0; i < this.workingItems.length; i++)
                        (function(item) {
                            if (!item)
                                return;
                            var action = item.action;
                            var canGoInOverflow = !(action.subActions && action.subActions.length);
                            if (visibleSet.length < maxItems) {
                                visibleSet.push(item);
                                return
                            }
                            if (canGoInOverflow) {
                                overflowSet.push(item);
                                return
                            }
                            cantOverFlow.push(item)
                        }.bind(this))(this.workingItems.item(i));
                    cantOverFlow.push(this._getOverflowAction());
                    MS.Entertainment.UI.Controls.assert(visibleSet.length <= this._maxItems, "Some how ended up with the wrong number of actions in the visible set");
                    MS.Entertainment.UI.Controls.assert(cantOverFlow.length < 3, "cantOverFlow set: Only support two items in overflows; actual overflow button, and one other");
                    var overage = cantOverFlow.length;
                    var candidates = visibleSet.filter(function(item) {
                            var subMenu = item && item.action.subActions;
                            return !(subMenu && subMenu.length)
                        });
                    MS.Entertainment.UI.Controls.assert(overage <= candidates.length, "Some how we dont have enough items to move");
                    for (var j = candidates.length - overage; j < candidates.length; j++)
                        (function(item) {
                            overflowSet.unshift(item);
                            var index = visibleSet.indexOf(item);
                            visibleSet.splice(index, 1)
                        })(candidates[j]);
                    visibleSet = visibleSet.concat(cantOverFlow);
                    MS.Entertainment.UI.Controls.assert(visibleSet.length <= maxItems, "Visible set wasn't correct");
                    MS.Entertainment.UI.Controls.assert(visibleSet.indexOf(this._getOverflowAction()) > -1, "Couldn't find overflow");
                    return {
                            visibleSet: visibleSet, overflowSet: overflowSet
                        }
                }, initialize: function initialize() {
                    this._maxItems = this._calculateMaxVisibleItems();
                    this._actionListBindings = WinJS.Binding.bind(this, {containerWidth: this._onResize.bind(this)})
                }, freeze: function freeze() {
                    this._frozen = true;
                    MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                }, thaw: function thaw() {
                    this._frozen = false;
                    this.updateActionSets();
                    MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this)
                }, unload: function unload() {
                    if (this.workingItems) {
                        this.workingItems.removeChangeListener(this.updateActionSets);
                        this.workingItems = null
                    }
                    if (this._actionListBindings) {
                        this._actionListBindings.cancel();
                        this._actionListBindings = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, _itemsChangedHandler: function _itemsChangedHandler(newValue) {
                    if (this._unloaded)
                        return;
                    this._traceProvider.traceActionListControl_ItemsChanged(newValue);
                    if (this.workingItems)
                        this.workingItems.removeChangeListener(this.updateActionSets);
                    if (!newValue) {
                        this.workingItems = null;
                        this.updateActionSets();
                        this._traceProvider.traceActionListControl_ItemsChanged(newValue);
                        return
                    }
                    var tempWorkingData = WinJS.Binding.unwrap(newValue);
                    if (!(newValue instanceof MS.Entertainment.ObservableArray))
                        tempWorkingData = new MS.Entertainment.ObservableArray(newValue);
                    if (tempWorkingData)
                        tempWorkingData.addChangeListener(this.updateActionSets);
                    this.workingItems = tempWorkingData;
                    WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
                    this.updateActionSets();
                    WinJS.Promise.timeout().then(function showButtons() {
                        WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay")
                    }.bind(this))
                }, _calculateMaxVisibleItems: function _calculateMaxVisibleItems() {
                    return Math.floor(this.containerWidth / this.buttonWidth)
                }, _onResize: function _onResize() {
                    if (MS.Entertainment.Utilities.isMusicApp1 || !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped) {
                        this._maxItems = this._calculateMaxVisibleItems();
                        if (!this._maxItems)
                            return;
                        this.updateActionSets()
                    }
                }, buttonWidth: {get: function buttonWidth_get() {
                        var isSnapped = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped;
                        if (isSnapped && this.adjustButtonSizeForSnappedMode)
                            return 80;
                        else
                            return 100
                    }}
        }, {
            containerWidth: 0, visibleSet: null, overflowSet: null, workingItems: null, _flyoutClassName: "actionListFlyoutColors"
        }, {
            actionListVisibility: {
                auto: "auto", visible: "visible", overflow: "overflow", none: "none"
            }, getSeparatorAction: function getSeparatorAction() {
                    var action = new MS.Entertainment.UI.ToolbarAction;
                    action.id = "separator";
                    action.title = "";
                    action.executed = WinJS.Utilities.markSupportedForProcessing(function executed(){});
                    action.isSeparator = true;
                    return {action: action}
                }, overflowTemplateSelector: WinJS.Utilities.markSupportedForProcessing(function overflowTemplateSelector(item) {
                    var result;
                    function loadItemTemplate(itemTemplate) {
                        return MS.Entertainment.UI.Framework.loadTemplate(itemTemplate, null, true).then(function(templateControl) {
                                return templateControl
                            })
                    }
                    if (!item)
                        return loadItemTemplate(this.itemTemplate);
                    else if (item.action.isSeparator)
                        return loadItemTemplate(this.separatorTemplate);
                    else if (item.action.isPlaybackOption)
                        return loadItemTemplate(this.playbackOptionsItemTemplate);
                    else if (item.action.isComboPlaybackOption)
                        return loadItemTemplate(this.playbackOptionsComboItemTemplate);
                    else
                        return loadItemTemplate(this.itemTemplate)
                })
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PlaybackOptionsList: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionList", null, function PlaybackOptionsList_constructor() {
            this._flyoutClassName = "playbackOptionListFlyoutColors"
        }, {executeActionUpdateCombo: WinJS.Utilities.markSupportedForProcessing(function executeActionUpdateCombo() {
                WinJS.Promise.timeout(100).then(function delaySelectedIndex() {
                    var comboSelect = document.querySelector(".comboSelect");
                    if (comboSelect && !comboSelect.classList.contains("removeFromDisplay")) {
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        var playbackSession = sessionManager.nowPlayingSession;
                        for (var i = 0; i < comboSelect.options.length; i++)
                            if (playbackSession.closedCaptionsOn && comboSelect.options[i].value === playbackSession.ccLcid) {
                                comboSelect.selectedIndex = i;
                                break
                            }
                    }
                }.bind(this))
            })})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ActionListButton: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButton", "/Controls/actionList.html#actionListItemTemplate", null, {
            _actionListActionsBinds: null, _actionListBinds: null, _flyoutToAppBarGap: 2, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.IconButton.prototype.initialize.call(this);
                    this._actionListBinds = WinJS.Binding.bind(this, {action: this._updateAction.bind(this)});
                    this.accessiblePressed = this.accessiblePressed.bind(this);
                    if (this.isToggleButton && this._button)
                        MS.Entertainment.Utilities.attachPropertyChangeEvent(this._button, this.accessiblePressed)
                }, unload: function unload() {
                    if (this._actionListActionsBinds) {
                        this._actionListActionsBinds.cancel();
                        this._actionListActionsBinds = null
                    }
                    if (this._actionListBinds) {
                        this._actionListBinds.cancel();
                        this._actionListBinds = null
                    }
                    if (this.isToggleButton && this._button)
                        MS.Entertainment.Utilities.detachPropertyChangeEvent(this._button, this.accessiblePressed);
                    MS.Entertainment.UI.Controls.IconButton.prototype.unload.call(this)
                }, _updateFlyoutPosition: function _updateFlyoutPosition() {
                    var flyoutElement = this._flyoutControl && this._flyoutControl.flyout && this._flyoutControl.flyout.element;
                    if (flyoutElement && flyoutElement.style) {
                        flyoutElement.style.top = "auto";
                        var actionList = document.querySelector(".appBarActionList");
                        var actionListHeight = actionList.clientHeight;
                        flyoutElement.style.bottom = actionListHeight + this._flyoutToAppBarGap + "px";
                        WinJS.Utilities.addClass(this._flyoutControl.flyout.element, "appbarActionFlyout");
                        WinJS.Utilities.removeClass(this._flyoutControl.flyout.element, "hideFromDisplay");
                        this._setFocusInFlyout(flyoutElement, true)
                    }
                }, accessiblePressed: function accessiblePressed(evt) {
                    if (this._button && evt && evt.propertyName === "aria-pressed")
                        if (this.isChecked && this._button.getAttribute("aria-pressed") === "false") {
                            this.isChecked = false;
                            this.onClickPreProcess()
                        }
                        else if (!this.isChecked && this._button.getAttribute("aria-pressed") === "true") {
                            this.isChecked = true;
                            this.onClickPreProcess()
                        }
                }, _updateAction: function _updateAction() {
                    if (this._actionListActionsBinds) {
                        this._actionListActionsBinds.cancel();
                        this._actionListActionsBinds = null
                    }
                    if (this.action) {
                        if (!this.text && !this.stringId)
                            this.text = this.action.title;
                        this.icon = this.action.icon;
                        if (this.action.iconPressed)
                            this.iconPressed = this.action.iconPressed;
                        if (this.action.adornerMode)
                            this.adornerMode = this.action.adornerMode;
                        if (this.action.adornerRing)
                            this.adornerRing = this.action.adornerRing;
                        if (this.action.accessibilityText)
                            this.accessibilityText = this.action.accessibilityText;
                        if (this.action.accessibilityStringId)
                            this.accessibilityStringId = this.action.accessibilityStringId;
                        this._button.setAttribute("data-win-automationid", this.action.id);
                        this._actionListActionsBinds = WinJS.Binding.bind(this.action, {
                            title: function updateTitle(newTitle) {
                                this.text = newTitle
                            }.bind(this), isEnabled: function actionIsEnabledChanged() {
                                    if (this.isDisabled === this.action.isEnabled) {
                                        if (this.action.hideOnDisable)
                                            if (!this.action.isEnabled)
                                                WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
                                            else
                                                WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay");
                                        this.isDisabled = !this.action.isEnabled
                                    }
                                }.bind(this)
                        })
                    }
                }, _showFlyout: function _showFlyout() {
                    if (this._flyoutControl && this._flyoutControl.flyout)
                        this._flyoutControl.flyout.show(this.domElement, "top", "left")
                }
        })})
})()
})();
/* >>>>>>/controls/userfeedbackdialog.js:15149 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Controls) {
                MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
                var UserFeedbackDialog = (function(_super) {
                        __extends(UserFeedbackDialog, _super);
                        function UserFeedbackDialog(element, options) {
                            this.templateStorage = "/Controls/UserFeedbackDialog.html";
                            this.templateName = "userFeedbackDialogTemplate";
                            _super.call(this, element, options);
                            this.privacyStatementLabel = String.load(String.id.IDS_SETTINGS_ABOUT_PRIVACY_STATEMENT);
                            if (MS.Entertainment.Utilities.isApp2) {
                                this.provideDetailsLabel = String.load(String.id.IDS_APP_MENU_FEEDBACK_PROVIDE_DETAILS_VUI_GUI);
                                if (WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoiceStatics")) {
                                    this.provideDetailsVoiceConfidence = WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoiceStatics.defaultConfidence");
                                    this.privacyStatementVoiceConfidence = WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoiceStatics.defaultConfidence")
                                }
                            }
                        }
                        UserFeedbackDialog.prototype.initialize = function() {
                            this._issuesTypes = [];
                            this._modifierTypes = [];
                            if (MS.Entertainment.Utilities.isMusicApp)
                                this._addMusicIssueTypes();
                            else if (MS.Entertainment.Utilities.isVideoApp)
                                this._addVideoIssueTypes();
                            else if (MS.Entertainment.Utilities.isAmsterdamApp)
                                this._addAmsterdamIssueTypes();
                            else {
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERRORS), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERROR_DETAILS), value: "GeneralError"
                                });
                                if (MS.Entertainment.Utilities.isApp2)
                                    this._issuesTypes.push({
                                        name: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_DETAILS), value: "Suggestion"
                                    })
                            }
                            this._issuesTypes.forEach(function(item, index) {
                                switch (item.value) {
                                    case"Suggestion":
                                        this._suggestionIssueTypeIndex = index;
                                        break;
                                    case"GeneralError":
                                        this._errorIssueTypeIndex = index;
                                        break;
                                    case"SharePlaylist":
                                        this._shareIssueTypeIndex = index
                                }
                            }.bind(this));
                            if (MS.Entertainment.Utilities.isApp1)
                                this._transferFeedbackToSelectElement();
                            else if (MS.Entertainment.Utilities.isApp2)
                                this._transferFeedbackToModifierElement()
                        };
                        UserFeedbackDialog.prototype.setOverlay = function(instance) {
                            this._overlay = instance;
                            var that = this;
                            this._overlay.buttons = [WinJS.Binding.as({
                                    title: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUBMIT), isEnabled: true, execute: function onSubmit() {
                                            that._onSubmit()
                                        }
                                }), WinJS.Binding.as({
                                    title: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANCEL), isEnabled: true, execute: function onCancel() {
                                            that._onCancel()
                                        }
                                })];
                            this._setInitialState();
                            WinJS.Utilities.addClass(this._contentContainer, "settingsFeedbackContentDialog");
                            WinJS.Utilities.addClass(this._userVoiceContainer, "settingsFeedbackOptionsDialog");
                            WinJS.Utilities.addClass(this._editControl.domElement, "settingsFeedbackCommentBoxDialog");
                            WinJS.Utilities.addClass(this._bottomContainer, "settingsFeedbackBottomDialog");
                            WinJS.Utilities.addClass(this._connectionError.domElement, "settingsFeedbackPanelContentDialog");
                            WinJS.Utilities.addClass(this._commentDescription.domElement, "settingsFeedbackPanelContentDialog");
                            WinJS.Utilities.addClass(this._descriptionLabel.domElement, "settingsFeedbackPanelContentDialog");
                            WinJS.Utilities.addClass(this._feedbackButtonContainers, "removeFromDisplay");
                            if (MS.Entertainment.Utilities.isApp2)
                                this._setApp2Overlay(that)
                        };
                        Object.defineProperty(UserFeedbackDialog.prototype, "userVoiceString", {
                            get: function() {
                                var stringId;
                                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                if (MS.Entertainment.Utilities.isMusicApp)
                                    if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                                        stringId = String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_XBOXMUSIC;
                                    else
                                        stringId = String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_MUSIC;
                                else if (MS.Entertainment.Utilities.isVideoApp)
                                    if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace) || featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                        stringId = String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_XBOXVIDEO;
                                    else
                                        stringId = String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_VIDEO;
                                else if (MS.Entertainment.Utilities.isAmsterdamApp)
                                    stringId = String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_MEDIABROWSER;
                                return String.load(stringId)
                            }, enumerable: true, configurable: true
                        });
                        UserFeedbackDialog.prototype.unload = function() {
                            this._exitFeedback(true);
                            _super.prototype.unload.call(this)
                        };
                        UserFeedbackDialog.prototype._updateModifierIndex = function(index) {
                            if (this._currentSelectedIndex !== index) {
                                this._currentSelectedIndex = index;
                                if (this._currentSelectedIndex >= 0)
                                    this._setWatermarkText(this._issuesTypes[this._currentSelectedIndex].comment)
                            }
                        };
                        UserFeedbackDialog.prototype._onModifierIssueTypeChange = function(event) {
                            var newSelectionMember = WinJS.Utilities.getMember("detail.newSelection", event);
                            if (newSelectionMember)
                                this._updateModifierIndex(newSelectionMember.index)
                        };
                        UserFeedbackDialog.prototype._setWatermarkText = function(watermarkText) {
                            Trace.assert(this._editControl, "The edit control of the UserfeedbackDialog should not be null or undefined");
                            this._editControl.setPlaceholderText(watermarkText);
                            this._editControl.watermarkText = watermarkText;
                            var currentTextValue = this._editControl.value;
                            if (!currentTextValue || currentTextValue.length < 1)
                                this._editControl.reinitialize()
                        };
                        UserFeedbackDialog.prototype._setInitialState = function() {
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            var gamerTag = signedInUser.gamerTag;
                            if (gamerTag)
                                this._descriptionLabel.text = String.load(String.id.IDS_SETTINGS_FEEDBACK_DESCRIPTION_GAMERTAG).format(gamerTag);
                            else
                                this._descriptionLabel.text = String.load(String.id.IDS_SETTINGS_FEEDBACK_DESCRIPTION);
                            if (MS.Entertainment.Utilities.isVideoApp2)
                                this._lowerDescriptionLabel.text = String.load(String.id.IDS_SETTINGS_FEEDBACK_USERVOICE_XBOXVIDEO);
                            WinJS.Utilities.addClass(this._connectionError.domElement, "hidden");
                            if (WinJS.Utilities.getMember("_editControl.clearInput", this))
                                this._editControl.clearInput();
                            var initialIssueIndexToSelect = this._suggestionIssueTypeIndex;
                            if (MS.Entertainment.UI.Controls.UserFeedbackDialog.errorId)
                                initialIssueIndexToSelect = this._errorIssueTypeIndex;
                            else if (MS.Entertainment.Utilities.isMusicApp && MS.Entertainment.UI.Controls.UserFeedbackDialog.shareUrl)
                                initialIssueIndexToSelect = this._shareIssueTypeIndex;
                            if (MS.Entertainment.Utilities.isApp1) {
                                this._issueTypeSelector.options.selectedIndex = initialIssueIndexToSelect;
                                this._onIssueTypeChange()
                            }
                            else if (MS.Entertainment.Utilities.isApp2) {
                                this._issueTypeModifier.selectionManager.selectedIndex = initialIssueIndexToSelect;
                                this._updateModifierIndex(initialIssueIndexToSelect)
                            }
                        };
                        UserFeedbackDialog.prototype._onIssueTypeChange = function() {
                            this._currentSelectedIndex = this._issueTypeSelector.options.selectedIndex;
                            this._setWatermarkText(this._issuesTypes[this._currentSelectedIndex].comment);
                            if (MS.Entertainment.Utilities.isMusicApp && this._currentSelectedIndex === this._shareIssueTypeIndex && MS.Entertainment.UI.Controls.UserFeedbackDialog.shareUrl && this._sharePlaylistURLNote)
                                WinJS.Utilities.removeClass(this._sharePlaylistURLNote.domElement, "removeFromDisplay");
                            else
                                WinJS.Utilities.addClass(this._sharePlaylistURLNote.domElement, "removeFromDisplay")
                        };
                        UserFeedbackDialog.prototype._onSubmit = function() {
                            var currentLocation = String.empty;
                            var telemetryParameterArray = [];
                            var pageOptions = null;
                            if (!window.navigator.onLine)
                                WinJS.Utilities.removeClass(this._connectionError.domElement, "hidden");
                            else {
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AppMode, parameterValue: MS.Entertainment.appMode
                                });
                                currentLocation = MS.Entertainment.Utilities.getCurrentUserLocation();
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.UIPath, parameterValue: currentLocation
                                });
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ContentIssueType, parameterValue: String.empty
                                });
                                if (WinJS.Utilities.getMember("MS.Entertainment.UI.Monikers") && currentLocation === MS.Entertainment.UI.Monikers.immersiveDetails) {
                                    pageOptions = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage.options;
                                    if (pageOptions && pageOptions.mediaItem) {
                                        telemetryParameterArray.push({
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: this._getMediaStringFromItem(pageOptions.mediaItem)
                                        });
                                        telemetryParameterArray.push({
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaItem, parameterValue: pageOptions.mediaItem.serviceId
                                        });
                                        telemetryParameterArray.push({
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaItemInstanceId, parameterValue: pageOptions.mediaItem.id || pageOptions.mediaItem.ID
                                        })
                                    }
                                }
                                if (MS.Entertainment.UI.Controls.UserFeedbackDialog.errorId) {
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.UI.Controls.UserFeedbackDialog.errorId
                                    });
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorTimestamp, parameterValue: MS.Entertainment.UI.Controls.UserFeedbackDialog.timestamp
                                    })
                                }
                                if (MS.Entertainment.UI.Controls.UserFeedbackDialog.shareUrl)
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ShareUrl, parameterValue: MS.Entertainment.UI.Controls.UserFeedbackDialog.shareUrl
                                    });
                                var comment = this._editControl.value;
                                if (comment.length <= 1024) {
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CommentText, parameterValue: comment
                                    });
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.IssueType, parameterValue: this._issuesTypes[this._currentSelectedIndex].value
                                    });
                                    MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SendASmile, telemetryParameterArray);
                                    if (this._overlay)
                                        this._exitFeedback();
                                    else
                                        this._backToSettings()
                                }
                            }
                        };
                        UserFeedbackDialog.prototype._onKeyDown = function(e) {
                            if (MS.Entertainment.Utilities.isApp2)
                                if (e && e.keyCode && e.keyCode === WinJS.Utilities.Key.enter) {
                                    var currentView = Windows.UI.ViewManagement.InputPane.getForCurrentView();
                                    if (currentView) {
                                        currentView.visible = false;
                                        e.preventDefault();
                                        e.stopPropagation()
                                    }
                                }
                        };
                        UserFeedbackDialog.prototype._showPrivacy = function(e) {
                            if (e && e.keyCode && !(e.keyCode === WinJS.Utilities.Key.enter || e.keyCode === WinJS.Utilities.Key.space))
                                return;
                            if (!MS.Entertainment.Utilities.isApp2)
                                e.preventDefault();
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var externalNavigationAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.externalNavigate);
                            externalNavigationAction.parameter = "http://go.microsoft.com/fwlink/?LinkID=259655";
                            externalNavigationAction.automationId = MS.Entertainment.UI.AutomationIds.userFeedbackDialogPrivacyLink;
                            externalNavigationAction.execute()
                        };
                        UserFeedbackDialog.prototype._onCancel = function() {
                            if (this._overlay)
                                this._exitFeedback();
                            else
                                this._backToSettings()
                        };
                        UserFeedbackDialog.prototype._exitFeedback = function(isUnloading) {
                            if (this._overlay && !isUnloading)
                                this._overlay.hide();
                            MS.Entertainment.UI.Controls.UserFeedbackDialog.errorId = null;
                            MS.Entertainment.UI.Controls.UserFeedbackDialog.timestamp = null;
                            MS.Entertainment.UI.Controls.UserFeedbackDialog.shareUrl = null;
                            if (this._inputEventHandlers) {
                                this._inputEventHandlers.cancel();
                                this._inputEventHandlers = null
                            }
                            if (this._modifierEventHandlers) {
                                this._modifierEventHandlers.cancel();
                                this._modifierEventHandlers = null
                            }
                            if (this._settingsFlyoutEventHandlers) {
                                this._settingsFlyoutEventHandlers.cancel();
                                this._settingsFlyoutEventHandlers = null
                            }
                        };
                        UserFeedbackDialog.prototype._backToSettings = function() {
                            try {
                                WinJS.UI.SettingsFlyout.show()
                            }
                            catch(ex) {
                                Trace.fail("WinJS.UI.SettingsFlyout.show() failed with " + ex.toString())
                            }
                        };
                        UserFeedbackDialog.prototype._softKeyboardShown = function() {
                            WinJS.Utilities.addClass(this._lowerDescriptionLabel.domElement, "removeFromDisplay");
                            WinJS.Utilities.addClass(this._issueTypeModifier.domElement, "removeFromDisplay")
                        };
                        UserFeedbackDialog.prototype._softKeyboardHidden = function() {
                            WinJS.Utilities.removeClass(this._lowerDescriptionLabel.domElement, "removeFromDisplay");
                            WinJS.Utilities.removeClass(this._issueTypeModifier.domElement, "removeFromDisplay")
                        };
                        UserFeedbackDialog.prototype._getMediaStringFromItem = function(mediaItem) {
                            if (!mediaItem)
                                return "undefined";
                            var mediaString = null;
                            switch (mediaItem.mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.video:
                                    if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo)
                                        mediaString = "musicVideo";
                                    else if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode)
                                        mediaString = "episode";
                                    else if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.movie)
                                        mediaString = "movie";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                                    mediaString = "series";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                                    mediaString = "season";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    mediaString = "artist";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.genre:
                                    mediaString = "genre";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    mediaString = "album";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    mediaString = "track";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.game:
                                    mediaString = "game";
                                    break;
                                default:
                                    mediaString = "undefined";
                                    break
                            }
                            return mediaString
                        };
                        UserFeedbackDialog.prototype._addMusicIssueTypes = function() {
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_STREAMINGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_STREAMINGMUSIC_DETAILS), value: "MusicStreaming"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERRORS), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERROR_DETAILS), value: "GeneralError"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_MUSICFORMAT), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_MUSICFORMAT_DETAILS), value: "MusicFormat"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC_DETAILS), value: "PlayMusic"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_SYNC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN_DETAILS), value: "SyncCloud"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_WRONGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_WRONGMUSIC_DETAILS), value: "WrongMusicInfo"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_MUSICMETADATA), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_MUSICMETADATA_DETAILS), value: "MusicMetadata"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_DETAILS), value: "Suggestion"
                            });
                            if (MS.Entertainment.Utilities.isMusicApp1) {
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGMUSIC_DETAILS), value: "BuyMusic"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN_DETAILS), value: "CantSignIn"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONNECTED), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONNECTED_DETAILS), value: "ConnectedDevice"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_DOWNLOADINGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGMUSIC_DETAILS), value: "DownloadMusic"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_MUSIC_SHARE_SAS_FEEDBACK_TYPE), comment: String.load(String.id.IDS_MUSIC_SHARE_SAS_FEEDBACK_COMMENTS), value: "SharePlaylist"
                                })
                            }
                            if (MS.Entertainment.Utilities.isMusicApp2) {
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_MUSIC2_SETTINGS_FEEDBACK_MUSICVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "MusicVideo"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONTENTDISCOVERY), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "ContentDiscovery"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_REQUESTCONTENT), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "RequestContent"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_COLLECTIONVIEW), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "ViewCollection"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GREATAPP), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "GreatApp"
                                })
                            }
                        };
                        UserFeedbackDialog.prototype._addVideoIssueTypes = function() {
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGVIDEO_DETAILS), value: "BuyOrRent"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_STREAMINGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_STREAMINGVIDEO_DETAILS), value: "StreamingVideo"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERRORS), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERROR_DETAILS), value: "GeneralError"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO_DETAILS), value: "PlayVideo"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_VIDEOFORMAT), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_VIDEOFORMAT_DETAILS), value: "VideoFormat"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_TRAILER), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_TRAILER_DETAILS), value: "Trailer"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_WRONGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGVIDEO_DETAILS), value: "WrongVideoInfo"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_DETAILS), value: "Suggestion"
                            });
                            if (MS.Entertainment.Utilities.isVideoApp1) {
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN_DETAILS), value: "CantSignIn"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONNECTED), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONNECTED_DETAILS), value: "ConnectedDevice"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_DOWNLOADINGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGVIDEO_DETAILS), value: "DownloadingVideo"
                                })
                            }
                            if (MS.Entertainment.Utilities.isVideoApp2) {
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONTENTDISCOVERY), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "ContentDiscovery"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_REQUESTCONTENT), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "RequestContent"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_COLLECTIONVIEW), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "ViewCollection"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_EPISODEAUTOPLAY), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "NextEpisode"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GREATAPP), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "GreatApp"
                                })
                            }
                        };
                        UserFeedbackDialog.prototype._addAmsterdamIssueTypes = function() {
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERRORS), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERROR_DETAILS), value: "GeneralError"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC_DETAILS), value: "PlayMusic"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO_DETAILS), value: "PlayVideo"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_DETAILS), value: "Suggestion"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GREATAPP), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "GreatApp"
                            })
                        };
                        UserFeedbackDialog.prototype._transferFeedbackToSelectElement = function() {
                            for (var i = 0; i < this._issuesTypes.length; i++) {
                                var opt = document.createElement("option");
                                opt.label = this._issuesTypes[i].name;
                                opt.index = i;
                                this._issueTypeSelector.options.add(opt)
                            }
                            var settingsFlyout = document.getElementById("SettingsFeedback");
                            if (settingsFlyout) {
                                this._setInitialState();
                                this._settingsFlyoutEventHandlers = MS.Entertainment.UI.Framework.addEventHandlers(settingsFlyout.winControl, {beforeshow: this._setInitialState.bind(this)})
                            }
                        };
                        UserFeedbackDialog.prototype._transferFeedbackToModifierElement = function() {
                            for (var i = 0; i < this._issuesTypes.length; i++)
                                this._modifierTypes.push({title: this._issuesTypes[i].name});
                            WinJS.Utilities.removeClass(this._issueTypeModifier, "removeFromDisplay");
                            WinJS.Utilities.addClass(this._optionSASDescriptionLabel, "removeFromDisplay");
                            WinJS.Utilities.addClass(this._issueTypeSelector, "removeFromDisplay");
                            WinJS.Utilities.addClass(this._userVoiceContainer, "removeFromDisplay");
                            if (this._issueTypeModifier)
                                this._issueTypeModifier.items = this._modifierTypes;
                            this._modifierEventHandlers = MS.Entertainment.UI.Framework.addEventHandlers(this._issueTypeModifier.selectionManager, {selectedItemChanged: this._onModifierIssueTypeChange.bind(this)})
                        };
                        UserFeedbackDialog.prototype._setApp2Overlay = function(that) {
                            this._overlay.cancelButtonIndex = 1;
                            this._overlay.buttons.push(WinJS.Binding.as({
                                title: String.load(String.id.IDS_SETTINGS_ABOUT_PRIVACY_STATEMENT), isEnabled: true, execute: function showPrivacy() {
                                        var e = null;
                                        that._showPrivacy(e)
                                    }
                            }));
                            this._editControl.rows = 2;
                            this._editControl.maxLength = 1024;
                            this._editControl.showRemainingChars = false;
                            WinJS.Utilities.removeClass(this._commentDescription.domElement, "settingsFeedbackPanelContentDialog");
                            WinJS.Utilities.addClass(this._commentDescription.domElement, "removeFromDisplay");
                            WinJS.Utilities.removeClass(this._bottomContainer, "settingsFeedbackBottomDialog");
                            WinJS.Utilities.addClass(this._bottomContainer, "removeFromDisplay");
                            WinJS.Utilities.removeClass(this._feedbackPrivacyButton, "removeFromDisplay");
                            var currentView = Windows.UI.ViewManagement.InputPane.getForCurrentView();
                            this._inputEventHandlers = MS.Entertainment.Utilities.addEventHandlers(currentView, {
                                showing: this._softKeyboardShown.bind(this), hiding: this._softKeyboardHidden.bind(this)
                            })
                        };
                        UserFeedbackDialog.prototype._showUserVoice = function(e) {
                            if (e && e.keyCode && !(e.keyCode === WinJS.Utilities.Key.enter || e.keyCode === WinJS.Utilities.Key.space))
                                return;
                            e.preventDefault();
                            var userVoiceUrl;
                            if (MS.Entertainment.Utilities.isMusicApp)
                                userVoiceUrl = "http://go.microsoft.com/fwlink/?LinkID=391683";
                            else if (MS.Entertainment.Utilities.isVideoApp)
                                userVoiceUrl = "http://go.microsoft.com/fwlink/?LinkId=391686";
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var externalNavigationAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.externalNavigate);
                            externalNavigationAction.parameter = userVoiceUrl;
                            externalNavigationAction.automationId = MS.Entertainment.UI.AutomationIds.userFeedbackDialogPrivacyLink;
                            externalNavigationAction.execute()
                        };
                        return UserFeedbackDialog
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.UserFeedbackDialog = UserFeedbackDialog
            })(UI.Controls || (UI.Controls = {}));
            var Controls = UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/purchaseflow/smartappbaractions.js:15683 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {
        DelayLoadAction: MS.Entertainment.UI.Framework.define(function DelayLoadAction(actionId) {
            this.id = actionId
        }, {
            id: null, action: {get: function() {
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        return actionService.isRegistered(this.id) ? actionService.getAction(this.id) : null
                    }}
        }), SmartAppbarActionHost: MS.Entertainment.UI.Framework.define(function SmartAppbarActionHost() {
                this._selectionHandlers = []
            }, {
                _mediaItem: null, _selectedItemBindings: null, _mediaContext: null, _selectedItemStateEngine: null, _shareOperation: null, _selectionHandlers: null, dispose: function dispose() {
                        var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                        if (appBarControl && appBarControl.hide)
                            appBarControl.hide(true);
                        this._releaseMediaContext();
                        this._releaseMediaResources()
                    }, mediaItem: {
                        get: function mediaItem_get() {
                            return this._mediaItem
                        }, set: function mediaItem_set(value) {
                                if (this._mediaItem !== value) {
                                    this._mediaItem = value;
                                    this._updateState()
                                }
                            }
                    }, addSelectionHandlers: function addSelectionHandlers(handlers) {
                        this._selectionHandlers = this._selectionHandlers || [];
                        this._selectionHandlers.push(handlers)
                    }, _releaseMediaResources: function _releaseMediaResources() {
                        if (this._shareOperation) {
                            this._shareOperation.cancel();
                            this._shareOperation = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        if (this._selectedItemBindings) {
                            this._selectedItemBindings.cancel();
                            this._selectedItemBindings = null
                        }
                    }, _releaseMediaContext: function _releaseMediaContext() {
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    }, _updateState: function _updateState() {
                        this._releaseMediaResources();
                        if (!this._mediaItem)
                            this._releaseMediaContext();
                        else {
                            var appBarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                            var sender = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareSender);
                            if (this._mediaContext)
                                this._mediaContext.updateMediaItem(this._mediaItem);
                            else
                                this._mediaContext = appBarService.pushMediaContext(this._mediaItem, this._selectionHandlers, [], {executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.selection});
                            if (this._mediaItem.hydrate)
                                this._mediaItem.hydrate();
                            MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(this._mediaItem);
                            if (!this._selectedItemStateEngine)
                                this._selectedItemStateEngine = MS.Entertainment.ViewModels.SmartBuyStateEngine.getSelectionStateFromMediaItem(this._mediaItem);
                            if (!this._selectedItemBindings)
                                this._selectedItemBindings = WinJS.Binding.bind(this._selectedItemStateEngine, {currentAppbarActions: this._updateAppBarActions.bind(this)});
                            this._shareOperation = sender.pendingShare(this._mediaItem)
                        }
                    }, _updateAppBarActions: function _updateAppBarActions(newActions) {
                        if (this._mediaContext)
                            this._mediaContext.setToolbarActions(newActions);
                        if (newActions.length > 0) {
                            var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                            if (appBarControl)
                                appBarControl.show()
                        }
                    }
            }), SmartAppbarActions: (function SmartAppbarActions() {
                var _actionService;
                return {
                        checkForServiceBlockAsync: function checkForServiceBlockAsync(arrayMediaItems) {
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            arrayMediaItems = arrayMediaItems || [];
                            var firstMediaItem = arrayMediaItems[0] || {};
                            var isFirstItemTrackOrAlbum = (firstMediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || firstMediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album);
                            if (!uiStateService.servicesEnabled && isFirstItemTrackOrAlbum && !firstMediaItem.canPlayLocally)
                                return MS.Entertainment.UI.Shell.showAppUpdateDialog().then(function dialogDismissed() {
                                        return WinJS.Promise.wrapError("Can't play due to medium block")
                                    });
                            else
                                return WinJS.Promise.wrap(arrayMediaItems)
                        }, createPlaySelectionAppbarAction: function createPlaySelectionAppbarAction(actionId) {
                                var playPreviewOnly = (actionId === MS.Entertainment.UI.AppBarActions.previewSelection);
                                var continuous = (actionId === MS.Entertainment.UI.AppBarActions.playSelectionContinuous || actionId === MS.Entertainment.UI.AppBarActions.playContinuous);
                                var playSelectionAction = new MS.Entertainment.UI.ToolbarAction;
                                playSelectionAction.id = actionId;
                                playSelectionAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySelection;
                                var titleId = String.id.IDS_MUSIC_PLAY_SELECTION_ACTION;
                                if (playPreviewOnly)
                                    titleId = String.id.IDS_MUSIC_PREVIEW_SELECTION_ACTION;
                                else if (actionId === MS.Entertainment.UI.AppBarActions.playContinuous)
                                    titleId = String.id.IDS_PLAY_BUTTON;
                                playSelectionAction.title = String.load(titleId);
                                playSelectionAction.icon = MS.Entertainment.UI.Icon.play;
                                playSelectionAction.shouldAutomaticallySendTelemetry = false;
                                if (playSelectionAction.isVoiceEnabled) {
                                    MS.Entertainment.ViewModels.assert(!(playPreviewOnly && MS.Entertainment.Utilities.isMusicApp2), "No VUI strings are available for preview; defaulting to Play strings.");
                                    playSelectionAction.title = String.load(String.id.IDS_PLAY_MUSIC_BUTTON_VUI_GUI);
                                    playSelectionAction.voicePhraseStringId = String.id.IDS_PLAY_MUSIC_BUTTON_VUI_ALM;
                                    playSelectionAction.voicePhoneticPhraseStringId = String.id.IDS_PLAY_MUSIC_BUTTON_VUI_PRON
                                }
                                playSelectionAction.executed = function executed() {
                                    if (!_actionService)
                                        _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia);
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var collectionFilter = mediaContext.collectionFilter;
                                    var options = mediaContext.options || {};
                                    var offset = null;
                                    var key = null;
                                    if (continuous && options && options.containingMedia) {
                                        mediaItems = options.containingMedia.playbackItemSource;
                                        offset = options.containingMedia.playbackOffset;
                                        key = options.containingMedia.playbackKey
                                    }
                                    action.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySelection;
                                    action.parameter = {
                                        mediaItem: mediaItems && mediaItems.copy ? mediaItems.copy() : mediaItems, playPreviewOnly: playPreviewOnly, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: collectionFilter, offset: offset
                                    };
                                    return MS.Entertainment.Data.List.listToArray(mediaItems).then(MS.Entertainment.ViewModels.SmartAppbarActions.checkForServiceBlockAsync).then(function preRollAdIfNeeded(arrayMediaItems) {
                                            var firstMediaItem = arrayMediaItems[0];
                                            var adService;
                                            if (collectionFilter !== Microsoft.Entertainment.Platform.MediaAvailability.availableOffline && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.adService))
                                                adService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.adService);
                                            mediaItems = arrayMediaItems;
                                            return !playPreviewOnly && adService ? adService.playVideoAdIfRequired(firstMediaItem, collectionFilter) : WinJS.Promise.as(true)
                                        }, function handleServiceBlocked() {
                                            return false
                                        }).then(function playVideoAdIfRequired_complete(adPlayedIfNeeded) {
                                            return WinJS.Promise.wrap({
                                                    arrayMediaItems: mediaItems, allowPlayback: adPlayedIfNeeded
                                                })
                                        }, function playVideoAdIfRequired_failed(error) {
                                            MS.Entertainment.ViewModels.fail("playVideoAdIfRequired_failed: " + (error && error.message));
                                            return WinJS.Promise.wrap({
                                                    arrayMediaItems: mediaItems, allowPlayback: true
                                                })
                                        }).then(function playSelectedItems(playData) {
                                            var arrayMediaItems = playData.arrayMediaItems;
                                            var allowPlayback = playData.allowPlayback;
                                            if (!allowPlayback)
                                                return;
                                            if (action.parameter)
                                                action.parameter.mediaItem = arrayMediaItems;
                                            if (arrayMediaItems[0].mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                                                action.execute();
                                            else {
                                                var playContainerAction;
                                                var firstItem = arrayMediaItems.shift();
                                                var isArtistMediaItemArray = ((firstItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.person) && (firstItem.personType === Microsoft.Entertainment.Queries.PersonType.artist));
                                                if (isArtistMediaItemArray) {
                                                    playContainerAction = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist);
                                                    playContainerAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySelection;
                                                    playContainerAction.parameter = {
                                                        showImmersive: false, showAppBar: true, playCollectionItemsOnly: true, mediaItem: firstItem, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: collectionFilter, offset: offset, key: key
                                                    }
                                                }
                                                else {
                                                    playContainerAction = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia);
                                                    playContainerAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySelection;
                                                    playContainerAction.parameter = {
                                                        mediaItem: firstItem, showAppBar: true, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, playPreviewOnly: playPreviewOnly, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: collectionFilter, offset: offset, key: key
                                                    }
                                                }
                                                playContainerAction.execute();
                                                var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                                                var playbackSession = sessionManager.nowPlayingSession;
                                                var onPlaybackStarted = function playContainerItems(currentPlaybackState) {
                                                        if (currentPlaybackState === MS.Entertainment.Platform.Playback.TransportState.starting || currentPlaybackState === MS.Entertainment.Platform.Playback.TransportState.playing) {
                                                            playbackSession.unbind("currentTransportState", onPlaybackStarted);
                                                            if (isArtistMediaItemArray) {
                                                                playContainerAction = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addArtistToNowPlaying);
                                                                playContainerAction.automationId = MS.Entertainment.UI.AutomationIds.appBarAddLocalArtistToNowPlaying;
                                                                playContainerAction.parameter = {
                                                                    mediaItem: arrayMediaItems, playCollectionItemsOnly: true, suppressNotification: true, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: collectionFilter
                                                                }
                                                            }
                                                            else {
                                                                playContainerAction = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addToNowPlaying);
                                                                playContainerAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySelection;
                                                                playContainerAction.parameter = {
                                                                    mediaItem: arrayMediaItems, suppressNotification: true, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: collectionFilter
                                                                }
                                                            }
                                                            playContainerAction.execute()
                                                        }
                                                        else if (playbackSession.errorDescriptor)
                                                            playbackSession.unbind("currentTransportState", onPlaybackStarted)
                                                    };
                                                if (arrayMediaItems.length > 0)
                                                    playbackSession.bind("currentTransportState", onPlaybackStarted)
                                            }
                                            if (mediaContext)
                                                mediaContext.dispatchEvent(actionId)
                                        })
                                };
                                playSelectionAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: playSelectionAction}
                            }, createAddToNowPlayingAppbarAction: function createAddToNowPlayingAppbarAction(actionId) {
                                var addToNowPlayingAction = new MS.Entertainment.UI.ToolbarAction;
                                if (actionId === MS.Entertainment.UI.AppBarActions.addLocalArtistToNowPlaying) {
                                    addToNowPlayingAction.id = MS.Entertainment.UI.AppBarActions.addLocalArtistToNowPlaying;
                                    addToNowPlayingAction.automationId = MS.Entertainment.UI.AutomationIds.appBarAddLocalArtistToNowPlaying
                                }
                                else if (actionId === MS.Entertainment.UI.AppBarActions.addMarketplaceArtistToNowPlaying) {
                                    addToNowPlayingAction.id = MS.Entertainment.UI.AppBarActions.addMarketplaceArtistToNowPlaying;
                                    addToNowPlayingAction.automationId = MS.Entertainment.UI.AutomationIds.appBarAddMarketplaceArtistToNowPlaying
                                }
                                else {
                                    addToNowPlayingAction.id = MS.Entertainment.UI.AppBarActions.addToNowPlaying;
                                    addToNowPlayingAction.automationId = MS.Entertainment.UI.AutomationIds.appBarAddToNowPlaying
                                }
                                addToNowPlayingAction.title = String.load(String.id.IDS_MUSIC_ADD_TO_LIST_NOW_PLAYING_ACTION);
                                addToNowPlayingAction.icon = MS.Entertainment.UI.Icon.addToNowPlaying;
                                addToNowPlayingAction.shouldAutomaticallySendTelemetry = false;
                                if (addToNowPlayingAction.isVoiceEnabled) {
                                    addToNowPlayingAction.title = String.load(String.id.IDS_MUSIC2_ADD_TO_NOW_PLAYING_BUTTON_VUI_GUI);
                                    addToNowPlayingAction.voicePhraseStringId = String.id.IDS_MUSIC2_ADD_TO_NOW_PLAYING_BUTTON_VUI_ALM;
                                    addToNowPlayingAction.voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_ADD_TO_NOW_PLAYING_BUTTON_VUI_PRON
                                }
                                addToNowPlayingAction.executed = function executed(parameter) {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = (parameter && parameter.mediaItem) || mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    var shouldUseTopSongsForArtistAddTo = parameter.shouldUseTopSongsForArtistAddTo;
                                    return MS.Entertainment.Data.List.listToArray(mediaItems).then(MS.Entertainment.ViewModels.SmartAppbarActions.checkForServiceBlockAsync).then(function gotArray(arrayMediaItems) {
                                            if (!_actionService)
                                                _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                            var action;
                                            if (!arrayMediaItems || !arrayMediaItems.length || !arrayMediaItems[0])
                                                return;
                                            var playLocalCollectionTracksOnly;
                                            if (addToNowPlayingAction.id === MS.Entertainment.UI.AppBarActions.addLocalArtistToNowPlaying)
                                                playLocalCollectionTracksOnly = true;
                                            else if (addToNowPlayingAction.id === MS.Entertainment.UI.AppBarActions.addMarketplaceArtistToNowPlaying)
                                                playLocalCollectionTracksOnly = false;
                                            else
                                                playLocalCollectionTracksOnly = arrayMediaItems[0].fromCollection;
                                            if (arrayMediaItems[0].mediaType === Microsoft.Entertainment.Queries.ObjectType.person) {
                                                action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addArtistToNowPlaying);
                                                action.automationId = playLocalCollectionTracksOnly ? MS.Entertainment.UI.AutomationIds.appBarAddLocalArtistToNowPlaying : MS.Entertainment.UI.AutomationIds.appBarAddMarketplaceArtistToNowPlaying;
                                                action.parameter = {
                                                    playCollectionItemsOnly: playLocalCollectionTracksOnly, mediaItem: arrayMediaItems, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, shouldUseTopSongsForArtistAddTo: shouldUseTopSongsForArtistAddTo
                                                }
                                            }
                                            else {
                                                action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addToNowPlaying);
                                                action.automationId = addToNowPlayingAction.automationId;
                                                action.parameter = {
                                                    mediaItem: arrayMediaItems, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                                }
                                            }
                                            action.execute();
                                            if (mediaContext)
                                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.addToNowPlaying)
                                        }.bind(this), function handleServiceBlocked() {
                                            return
                                        })
                                };
                                addToNowPlayingAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: addToNowPlayingAction}
                            }, createTrackPlayPreviewAppbarAction: function createTrackPlayPreviewAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, {
                                        mediaItem: null, showAppBar: true, playPreviewOnly: true
                                    }, MS.Entertainment.UI.AppBarActions.previewTrack, MS.Entertainment.UI.AutomationIds.appBarPreviewTrack, String.id.IDS_DETAILS_PREVIEW_SONG_LABEL, MS.Entertainment.UI.Icon.play, {
                                        guiStringId: String.id.IDS_MUSIC2_PREVIEW_SONG_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC2_PREVIEW_SONG_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC2_PREVIEW_SONG_BUTTON_VUI_PRON
                                    })
                            }, createTrackPlayMusicVideoAppbarAction: function createTrackPlayMusicVideoAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, {
                                        mediaItem: null, showAppBar: true, playMusicVideo: true
                                    }, MS.Entertainment.UI.AppBarActions.playMusicVideoFromTrack, MS.Entertainment.UI.AutomationIds.playMusicVideoFromTrack, String.id.IDS_WATCH_VIDEO_BUTTON_VUI_GUI, MS.Entertainment.UI.Icon.video11, {
                                        guiStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_PRON
                                    })
                            }, createPlayMusicVideoAppbarAction: function createPlayMusicVideoAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, {
                                        mediaItem: null, showAppBar: true
                                    }, MS.Entertainment.UI.AppBarActions.playMusicVideo, MS.Entertainment.UI.AutomationIds.playMusicVideo, String.id.IDS_WATCH_VIDEO_BUTTON_VUI_GUI, MS.Entertainment.UI.Icon.video11, {
                                        guiStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_PRON
                                    })
                            }, createPlayTopSongsAppbarAction: function createPlayTopSongsAppbarAction() {
                                var playTopSongsAction = new MS.Entertainment.UI.ToolbarAction;
                                playTopSongsAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlayTopSongs;
                                playTopSongsAction.id = MS.Entertainment.UI.AppBarActions.playTopSongs;
                                playTopSongsAction.title = String.load(String.id.IDS_MUSIC_PLAY_TOP_SONGS_BUTTON);
                                playTopSongsAction.icon = MS.Entertainment.UI.Icon.play;
                                playTopSongsAction.shouldAutomaticallySendTelemetry = false;
                                playTopSongsAction.executed = function playTopSongsAction_executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    MS.Entertainment.Data.List.listToArray(mediaItems).done(function gotArray(arrayMediaItems) {
                                        var action;
                                        if (!_actionService)
                                            _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                        action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist);
                                        action.automationId = MS.Entertainment.UI.AutomationIds.appBarPlayTopSongs;
                                        action.parameter = {
                                            mediaItem: arrayMediaItems[0], actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.adService))
                                            return action.execute();
                                        var adService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.adService);
                                        adService.isStreamingBlocked(arrayMediaItems[0]).done(function isStreamingBlocked_complete(signInNeeded) {
                                            var promise;
                                            var dialogDismissed;
                                            promise = new WinJS.Promise(function(complete) {
                                                dialogDismissed = complete
                                            }).then(function playVideoAdIfRequired() {
                                                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                                return (!signInNeeded || signIn.isSignedIn) ? adService.playVideoAdIfRequired(arrayMediaItems[0]) : false
                                            }).done(function playVideoAdIfRequired_complete(adPlayedIfNeeded) {
                                                if (adPlayedIfNeeded)
                                                    action.execute()
                                            }, function playVideoAdIfRequired_failed(error) {
                                                MS.Entertainment.ViewModels.fail("playVideoAdIfRequired_failed: " + (error && error.message));
                                                action.execute()
                                            });
                                            if (signInNeeded) {
                                                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                                if (!featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlayAnonymous))
                                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed);
                                                else if (configurationManager.service.lastSignedInUserXuid)
                                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_EXISTING_USER_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForExistingUser, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed);
                                                else
                                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_NEW_USER_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForNewUser, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed)
                                            }
                                            else
                                                dialogDismissed()
                                        }, function isStreamingBlocked_failed(error) {
                                            MS.Entertainment.ViewModels.fail("isStreamingBlocked_failed: " + (error && error.message))
                                        })
                                    }, function failedToGetArray(error) {
                                        MS.Entertainment.ViewModels.fail("Failed to play top songs. Error message: " + error && error.message)
                                    })
                                };
                                playTopSongsAction.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: playTopSongsAction}
                            }, createPlaySmartDJAppbarAction: function createPlaySmartDJAction() {
                                var playSmartDJAction = new MS.Entertainment.UI.ToolbarAction;
                                playSmartDJAction.id = MS.Entertainment.UI.AppBarActions.playSmartDJ;
                                playSmartDJAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySmartDJ;
                                playSmartDJAction.title = String.load(String.id.IDS_DETAILS_PLAY_SMART_DJ_MIX_NOW_LABEL);
                                playSmartDJAction.icon = MS.Entertainment.UI.Icon.smartDjAppbar;
                                playSmartDJAction.iconPressed = MS.Entertainment.UI.Icon.smartDjPressed;
                                playSmartDJAction.hideDefaultRing = true;
                                playSmartDJAction.shouldAutomaticallySendTelemetry = false;
                                playSmartDJAction.iconInfo = {className: "icon-smartDJ"};
                                if (playSmartDJAction.isVoiceEnabled) {
                                    playSmartDJAction.title = String.load(String.id.IDS_MUSIC2_PLAY_RADIO_BUTTON_VUI_GUI);
                                    playSmartDJAction.voicePhraseStringId = String.id.IDS_MUSIC2_PLAY_RADIO_BUTTON_VUI_ALM;
                                    playSmartDJAction.voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_PLAY_RADIO_BUTTON_VUI_PRON
                                }
                                playSmartDJAction.executed = function playSmartDJAction_executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    MS.Entertainment.Data.List.listToArray(mediaItems).done(function gotArray(arrayMediaItems) {
                                        var action;
                                        if (!_actionService)
                                            _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                        action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playSmartDJ);
                                        action.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySmartDJ;
                                        action.parameter = {
                                            showImmersive: false, showAppBar: true, playCollectionItemsOnly: false, mediaItem: arrayMediaItems[0], actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        action.onComplete = function playSmartDJCompleted() {
                                            if (mediaContext)
                                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.playSmartDJ)
                                        };
                                        action.execute()
                                    })
                                };
                                playSmartDJAction.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: playSmartDJAction}
                            }, createDeleteSmartDJAppbarAction: function createDeleteSmartDJAppbarAction() {
                                var deleteAction = new MS.Entertainment.UI.ToolbarAction;
                                deleteAction.id = MS.Entertainment.UI.AppBarActions.deleteSmartDJ;
                                deleteAction.automationId = MS.Entertainment.UI.AutomationIds.appBarDeleteSmartDJ;
                                deleteAction.title = String.load(String.id.IDS_DELETE_LABEL);
                                deleteAction.icon = MS.Entertainment.UI.Icon.delete;
                                deleteAction.shouldAutomaticallySendTelemetry = false;
                                deleteAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    if (!_actionService)
                                        _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteSmartDJ);
                                    action.automationId = MS.Entertainment.UI.AutomationIds.appBarDeleteSmartDJ;
                                    action.parameter = {
                                        mediaItems: mediaItems, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    action.onComplete = function deleteCompleted() {
                                        if (mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.deleteSmartDJ, {
                                                deleted: true, mediaItems: mediaItems
                                            })
                                    };
                                    action.execute()
                                };
                                return {action: deleteAction}
                            }, createAppbarActionFromAction: function createAppbarActionFromAction(actionId, parameter, appBarActionId, automationId, titleId, icon, voiceInfo) {
                                if (!_actionService)
                                    _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                var action = _actionService.getAction(actionId);
                                action.parameter = parameter || {};
                                var appBarAction = new MS.Entertainment.UI.ToolbarAction;
                                appBarAction.id = appBarActionId;
                                appBarAction.automationId = automationId;
                                if (titleId)
                                    appBarAction.title = String.load(titleId);
                                appBarAction.icon = icon;
                                appBarAction.wrappedAction = action;
                                appBarAction.parameter = parameter || {};
                                if (voiceInfo && appBarAction.isVoiceEnabled) {
                                    if (voiceInfo.guiStringId)
                                        appBarAction.title = String.load(voiceInfo.guiStringId);
                                    appBarAction.voicePhraseStringId = voiceInfo.voicePhraseStringId;
                                    appBarAction.voicePhoneticPhraseStringId = voiceInfo.voicePhoneticPhraseStringId;
                                    if (typeof(voiceInfo.voiceConfidence) === "number")
                                        appBarAction.voiceConfidence = voiceInfo.voiceConfidence
                                }
                                appBarAction.executed = function executed(parameter) {
                                    parameter = parameter || {};
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var options = mediaContext.options || {};
                                    appBarAction.parameter.actionType = MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction;
                                    appBarAction.executeLocation = options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection;
                                    appBarAction.shouldAutomaticallySendTelemetry = false;
                                    action.parameter.mediaItem = parameter.mediaItem || mediaContext.mediaItem;
                                    action.parameter.actionType = MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction;
                                    action.parameter.executeLocation = options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection;
                                    action.id = appBarAction.id;
                                    action.automationId = appBarAction.automationId;
                                    action.title = appBarAction.title;
                                    action.referenceContainer = appBarAction.referenceContainer;
                                    action.shouldAutomaticallySendTelemetry = false;
                                    WinJS.Promise.as(action.execute()).done(function actionFinished() {
                                        if (!parameter.skipCompleteHandler && mediaContext)
                                            mediaContext.dispatchEvent(appBarActionId)
                                    }, function handleError(error) {
                                        MS.Entertainment.ViewModels.fail("Executing app bar action has failed. ActionId: " + appBarActionId + " Error: " + (error && error.message))
                                    })
                                };
                                action.bind("isEnabled", function isEnabledChanged(isEnabled) {
                                    appBarAction.isEnabled = isEnabled
                                });
                                if (parameter.hasSubActions)
                                    action.bind("subActions", function subActionsChanged(newItems) {
                                        appBarAction.subActions = newItems
                                    });
                                appBarAction.canExecute = function canExecute(parameter) {
                                    if (!action.parameter.mediaItem || !action.parameter.isFlyoutAction) {
                                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                        action.parameter.mediaItem = mediaContext.mediaItem
                                    }
                                    action.requeryCanExecute();
                                    return action.isEnabled
                                };
                                return {action: appBarAction}
                            }, createPinToStartScreenAction: function createPinToStartScreenAction() {
                                var action = new MS.Entertainment.UI.ToolbarAction;
                                action.id = MS.Entertainment.UI.AppBarActions.pinToStartScreen;
                                action.automationId = MS.Entertainment.UI.AutomationIds.appBarPinToStartScreen;
                                action.title = String.load(String.id.IDS_PIN_TO_START_SCREEN_BUTTON);
                                action.icon = WinJS.UI.AppBarIcon.pin;
                                action.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var mediaItem = Array.isArray(mediaItems) ? (mediaItems.length > 0 ? mediaItems[0] : null) : mediaItems;
                                    if (!mediaItem)
                                        throw new Error("Invalid mediaItems when createPinToStartScreenAction was executed");
                                    var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                                    MS.Entertainment.Data.List.getData(mediaItem, 0).done(function getData_complete(media) {
                                        return pinToStartScreenService.pinMediaAsync(media)
                                    })
                                };
                                action.onComplete = function pinToStartScreenCompleted() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    if (mediaContext)
                                        mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.pinToStartScreen)
                                };
                                return {action: action}
                            }, createUnpinFromStartScreenAction: function createUnpinFromStartScreenAction() {
                                var action = new MS.Entertainment.UI.ToolbarAction;
                                action.id = MS.Entertainment.UI.AppBarActions.unpinFromStartScreen;
                                action.automationId = MS.Entertainment.UI.AutomationIds.appBarUnpinFromStartScreen;
                                action.title = String.load(String.id.IDS_UNPIN_FROM_START_SCREEN_BUTTON);
                                action.icon = WinJS.UI.AppBarIcon.unpin;
                                action.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var mediaItem = Array.isArray(mediaItems) ? (mediaItems.length > 0 ? mediaItems[0] : null) : mediaItems;
                                    if (!mediaItem)
                                        throw new Error("Invalid mediaItems when createUnpinFromStartScreenAction was executed");
                                    var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                                    MS.Entertainment.Data.List.getData(mediaItem, 0).done(function getData_complete(media) {
                                        return pinToStartScreenService.unpinMediaAsync(media)
                                    })
                                };
                                action.onComplete = function unPinToStartScreenCompleted() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    if (mediaContext)
                                        mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.unpinFromStartScreen)
                                };
                                return {action: action}
                            }, createDeleteMediaAppbarAction: function createDeleteMediaAppbarAction(appbarActionId, automationId, titleId) {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, {
                                        mediaItem: null, skipCompleteHandler: true
                                    }, appbarActionId ? appbarActionId : MS.Entertainment.UI.AppBarActions.deleteMedia, automationId ? automationId : MS.Entertainment.UI.AutomationIds.smartButtonDeleteMedia, titleId ? titleId : String.id.IDS_DELETE_LABEL, MS.Entertainment.UI.Icon.delete, {
                                        guiStringId: String.id.IDS_DELETE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_DELETE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_DELETE_BUTTON_VUI_PRON, voiceConfidence: MS.Entertainment.Utilities.isApp2 ? MS.Entertainment.UI.App2.VoiceStatics.criticalActionConfidence : 0.0
                                    })
                            }, createPurchaseAlbumAppbarAction: function createPurchaseAlbumAppbarAction() {
                                var action = new MS.Entertainment.UI.ToolbarAction;
                                action.id = MS.Entertainment.UI.AppBarActions.purchaseAlbumFromMarketplace;
                                action.automationId = MS.Entertainment.UI.AutomationIds.appBarPurchaseAlbumFromMarketplace;
                                action.title = String.load(String.id.IDS_DETAILS_BUY_ALBUM_LABEL);
                                action.icon = MS.Entertainment.UI.Icon.shop;
                                action.shouldAutomaticallySendTelemetry = false;
                                action.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItem = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    action.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    if (!_actionService)
                                        _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var purchaseAction = _actionService.getAction(MS.Entertainment.Utilities.isMusicApp1 ? MS.Entertainment.UI.Actions.ActionIdentifiers.albumPurchase : MS.Entertainment.UI.Actions.ActionIdentifiers.purchase);
                                    var albumToPurchase = Array.isArray(mediaItem) ? mediaItem[0] : mediaItem;
                                    purchaseAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPurchaseAlbumFromMarketplace;
                                    purchaseAction.parameter = {
                                        mediaItem: albumToPurchase, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    purchaseAction.eventHandlers = {onFinishedEvent: function onFinishedEvent() {
                                            purchaseAction.parameter = {};
                                            if (mediaContext)
                                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.purchaseAlbumFromMarketplace)
                                        }};
                                    purchaseAction.execute()
                                };
                                action.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: action}
                            }, createPurchaseTrackAppbarAction: function createPurchaseTrackAppbarAction() {
                                var action = new MS.Entertainment.UI.ToolbarAction;
                                action.id = MS.Entertainment.UI.AppBarActions.purchaseTrackFromMarketplace;
                                action.automationId = MS.Entertainment.UI.AutomationIds.appBarPurchaseTrackFromMarketplace;
                                action.title = String.load(String.id.IDS_DETAILS_BUY_SONG_LABEL);
                                action.icon = MS.Entertainment.UI.Icon.shop;
                                action.shouldAutomaticallySendTelemetry = false;
                                action.executed = function executed() {
                                    var hydratePromise;
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItem = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    mediaItem = Array.isArray(mediaItem) ? mediaItem[0] : mediaItem;
                                    action.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    if (!_actionService)
                                        _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var purchaseAction = _actionService.getAction(MS.Entertainment.Utilities.isMusicApp1 ? MS.Entertainment.UI.Actions.ActionIdentifiers.trackPurchase : MS.Entertainment.UI.Actions.ActionIdentifiers.purchase);
                                    purchaseAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPurchaseTrackFromMarketplace;
                                    if (mediaItem.hydrate)
                                        hydratePromise = mediaItem.hydrate({forceUpdate: true});
                                    else
                                        hydratePromise = WinJS.Promise.wrap(mediaItem);
                                    hydratePromise.done(function hydrated() {
                                        var hasTrackPurchaseRights;
                                        var hasAlbumPurchaseRights;
                                        var mediaItemToPurchase;
                                        if (mediaItem.rights) {
                                            hasTrackPurchaseRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(mediaItem, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase]);
                                            hasAlbumPurchaseRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(mediaItem, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase])
                                        }
                                        mediaItemToPurchase = (!hasTrackPurchaseRights && hasAlbumPurchaseRights) ? mediaItem.album : mediaItem;
                                        purchaseAction.parameter = {
                                            mediaItem: mediaItemToPurchase, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        purchaseAction.eventHandlers = {onFinishedEvent: function onFinishedEvent() {
                                                purchaseAction.parameter = {};
                                                if (mediaContext)
                                                    mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.purchaseTrackFromMarketplace)
                                            }};
                                        purchaseAction.execute()
                                    }, function hydrate_failed(){})
                                };
                                action.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: action}
                            }, createPlayDisabledAppbarAction: function createPlayDisabledAppbarAction(media, eventHandlers) {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, {}, MS.Entertainment.UI.AppBarActions.playDisabled, MS.Entertainment.UI.AutomationIds.appBarPlayDisabled, String.id.IDS_DETAILS_PLAY_NOW_LABEL, MS.Entertainment.UI.Icon.play)
                            }, createDownloadAppbarAction: function createDownloadAppbarAction(appBarActionId, automationId, titleId) {
                                var downloadAction = new MS.Entertainment.UI.ToolbarAction;
                                downloadAction.id = appBarActionId;
                                downloadAction.automationId = automationId;
                                if (titleId)
                                    downloadAction.title = String.load(titleId);
                                downloadAction.icon = WinJS.UI.AppBarIcon.download;
                                downloadAction.shouldAutomaticallySendTelemetry = false;
                                downloadAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var listOrMediaItem = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    downloadAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).then(function showImmersiveDetails(mediaItem) {
                                        MS.Entertainment.Platform.PurchaseHelpers.ensurePreownedMediaAddedAsync(mediaItem).then(function ensurePreownedMediaAddedAsync_complete(dbItems) {
                                            MS.Entertainment.Platform.PurchaseHelpers.downloadMedia(mediaItem, dbItems.dbMediaIds, dbItems.dbMediaTypes).then(function downloadMedia_complete(taskIds) {
                                                if (mediaContext)
                                                    mediaContext.dispatchEvent(appBarActionId)
                                            })
                                        })
                                    })
                                };
                                downloadAction.canExecute = function canExecute(parameter) {
                                    return this.isEnabled
                                };
                                return {action: downloadAction}
                            }, createDownloadFromMarketplaceAppbarAction: function createDownloadFromMarketplaceAppbarAction() {
                                var appBarButton = this.createDownloadAppbarAction(MS.Entertainment.UI.AppBarActions.downloadFromMarketplace, MS.Entertainment.UI.AutomationIds.appBarDownloadFromMarketplace, MS.Entertainment.Utilities.getDownloadDynamicText());
                                return appBarButton
                            }, createTryDownloadAgainAppbarAction: function createTryDownloadAgainAppbarAction() {
                                var appBarButton = this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadAgain, {mediaItem: null}, MS.Entertainment.UI.AppBarActions.tryDownloadAgain, MS.Entertainment.UI.AutomationIds.appBarDownloadAgain, MS.Entertainment.Utilities.getTryAgainDynamicText(), WinJS.UI.AppBarIcon.download);
                                return appBarButton
                            }, createRemoveDownloadAppbarAction: function createRemoveDownloadAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadRemove, {mediaItem: null}, MS.Entertainment.UI.AppBarActions.removeFailedDownload, MS.Entertainment.UI.AutomationIds.appBarRemoveDownload, String.id.IDS_CLEAR_DOWNLOAD_ERROR_BUTTON, WinJS.UI.AppBarIcon.remove)
                            }, createSubscriptionDownloadAppbarAction: function createSubscriptionDownloadAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionDownload, {mediaItem: null}, MS.Entertainment.UI.AppBarActions.subscriptionDownload, MS.Entertainment.UI.AutomationIds.appBarSubscriptionDownload, String.id.IDS_DETAILS_DOWNLOAD_LABEL, WinJS.UI.AppBarIcon.download)
                            }, createAddToMyMusicAppbarAction: function createAddToMyMusicAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionAddToMyMusic, {mediaItem: null}, MS.Entertainment.UI.AppBarActions.addToMyMusic, MS.Entertainment.UI.AutomationIds.appBarAddToMyMusic, String.id.IDS_MUSIC_ADD_TO_MY_MUSIC_BUTTON, MS.Entertainment.UI.Icon.addToCollection, {
                                        guiStringId: String.id.IDS_MUSIC2_ADD_TO_COLLECTION_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC2_ADD_TO_COLLECTION_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC2_ADD_TO_COLLECTION_BUTTON_VUI_PRON
                                    })
                            }, createAddSongToAppbarAction: function createAddSongToAppbarAction() {
                                var appBarAction = this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addTo, {
                                        mediaItem: null, hasSubActions: true
                                    }, MS.Entertainment.UI.AppBarActions.addTo, MS.Entertainment.UI.AutomationIds.appBarAddTo, String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON, WinJS.UI.AppBarIcon.add, {
                                        guiStringId: String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON_VUI_PRON
                                    });
                                appBarAction.action.hasSubActions = true;
                                return appBarAction
                            }, createAddToAppbarAction: function createAddToAppbarAction(stringID) {
                                var appBarAction = this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addTo, {
                                        mediaItem: null, hasSubActions: true
                                    }, MS.Entertainment.UI.AppBarActions.addTo, MS.Entertainment.UI.AutomationIds.appBarAddTo, stringID, WinJS.UI.AppBarIcon.add);
                                appBarAction.action.hasSubActions = true;
                                return appBarAction
                            }, createEditMetadataAppbarAction: function createEditMetadataAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.editMetadata)
                            }, createRemoveFromListAppbarAction: function createRemoveFromListAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.removeFromList)
                            }, createMoveListItemUpAppbarAction: function createMoveListItemUpAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.moveListItemUp)
                            }, createMoveListItemDownAppbarAction: function createMoveListItemDownAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.moveListItemDown)
                            }, createMoveListItemToTopAppbarAction: function createMoveListItemToTopAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.moveListItemToTop)
                            }, createMoveListItemToBottomAppbarAction: function createMoveListItemToBottomAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.moveListItemToBottom)
                            }, createRemoveFromPlaylistAppbarAction: function createRemoveFromPlaylistAppbarAction() {
                                return MS.Entertainment.UI.Actions.Playlists.getRemoveFromPlaylistAction()
                            }, createRemoveFromNowPlayingAppbarAction: function createRemoveFromNowPlayingAppbarAction() {
                                return MS.Entertainment.UI.Actions.Playlists.getRemoveFromNowPlayingAction()
                            }, createShowPlaylistItemInformationAppbarAction: function createShowPlaylistItemInformationAppbarAction() {
                                return MS.Entertainment.UI.Actions.Playlists.getShowPlaylistItemInformationAction()
                            }, createImportPlaylistAppbarAction: function createImportPlaylistAppbarAction() {
                                return MS.Entertainment.UI.Actions.ImportPlaylists.getImportPlaylistsAction()
                            }, createDeletePlaylistAppbarAction: function createDeletePlaylistAppbarAction() {
                                return MS.Entertainment.UI.Actions.Playlists.getDeletePlaylistAction()
                            }, createRenamePlaylistAppbarAction: function createRenamePlaylistAppbarAction() {
                                return MS.Entertainment.UI.Actions.Playlists.getRenamePlaylistAction()
                            }, createSaveNowPlayingPlaylistAppbarAction: function createSaveNowPlayingPlaylistAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.saveNowPlayingPlaylist, {}, MS.Entertainment.UI.AppBarActions.saveNowPlayingPlaylist, MS.Entertainment.UI.AutomationIds.appBarSaveNowPlaying, String.id.IDS_MUSIC_SAVE_NOW_PLAYING_ACTION, WinJS.UI.AppBarIcon.save)
                            }, createClearSelectionAppbarAction: function createClearSelectionAppbarAction() {
                                var clearSelectionAction = new MS.Entertainment.UI.ToolbarAction;
                                clearSelectionAction.id = MS.Entertainment.UI.AppBarActions.clearSelection;
                                clearSelectionAction.automationId = MS.Entertainment.UI.AutomationIds.appBarClearSelection;
                                clearSelectionAction.title = String.load(String.id.IDS_CLEAR_SELECTION);
                                clearSelectionAction.icon = WinJS.UI.AppBarIcon.clear;
                                clearSelectionAction.shouldAutomaticallySendTelemetry = false;
                                clearSelectionAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var options = mediaContext.options || {};
                                    clearSelectionAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    if (mediaContext)
                                        mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.clearSelection)
                                };
                                clearSelectionAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: clearSelectionAction}
                            }, createPlayOnXboxAppbarAction: function createPlayOnXboxAppbarAction(actionId) {
                                if (!_actionService)
                                    _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                var playToXboxAction = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playOnXbox);
                                var action = new MS.Entertainment.UI.ToolbarAction;
                                if (actionId === MS.Entertainment.UI.AppBarActions.playTrackOnXbox360) {
                                    action.id = MS.Entertainment.UI.AppBarActions.playTrackOnXbox360;
                                    playToXboxAction.automationId = action.automationId = MS.Entertainment.UI.AutomationIds.appBarPlayTrackOnXbox360;
                                    action.title = String.load(String.id.IDS_DETAILS_PLAY_SONG_ON_XBOX_APPBAR_LABEL)
                                }
                                else {
                                    action.id = MS.Entertainment.UI.AppBarActions.playOnXbox360;
                                    playToXboxAction.automationId = action.automationId = MS.Entertainment.UI.AutomationIds.appBarPlayOnXbox360;
                                    action.title = String.load(String.id.IDS_DETAILS_PLAY_ON_XBOX_APPBAR_LABEL)
                                }
                                action.icon = MS.Entertainment.UI.Icon.sendToXbox;
                                action.adornerMode = MS.Entertainment.UI.Controls.IconButtonMode.Custom;
                                action.adornerRing = MS.Entertainment.UI.Icon.sendToXboxAdornerAppbar;
                                action.shouldAutomaticallySendTelemetry = false;
                                action.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItem = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    MS.Entertainment.Data.List.getData(mediaItem, 0).done(function getDataSucceeded(listMediaItem) {
                                        action.parameter = {
                                            actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        playToXboxAction.parameter = {
                                            mediaItem: listMediaItem, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        playToXboxAction.eventHandlers = {onFinishedEvent: function onFinishedEvent() {
                                                if (mediaContext)
                                                    mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.playOnXbox360)
                                            }};
                                        playToXboxAction.execute()
                                    }, function getDataFailed(error) {
                                        MS.Entertainment.ViewModels.fail("createPlayOnXboxAppbarAction_getData failed: " + error)
                                    })
                                };
                                action.canExecute = function canExecute() {
                                    return playToXboxAction.isEnabled
                                };
                                return {action: action}
                            }, createCollectionTrackAlbumPopoverAppbarAction: function createCollectionTrackAlbumPopoverAppbarAction(invokeTrack) {
                                var trackAlbumAction = new MS.Entertainment.UI.ToolbarAction;
                                var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                trackAlbumAction.id = MS.Entertainment.UI.AppBarActions.exploreAlbum;
                                trackAlbumAction.automationId = MS.Entertainment.UI.AutomationIds.appBarExploreAlbum;
                                trackAlbumAction.title = String.load(String.id.IDS_MUSIC_COLLECTION_EXPLORE_ALBUM);
                                trackAlbumAction.icon = MS.Entertainment.Utilities.isMusicApp2 ? MS.Entertainment.UI.Icon.info : MS.Entertainment.UI.Icon.details;
                                trackAlbumAction.shouldAutomaticallySendTelemetry = false;
                                trackAlbumAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    MS.Entertainment.Data.List.dataFromIndex(mediaContext.mediaItem, 0).done(function gotMediaItem(mediaItem) {
                                        var albumDetailsNavigateAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate);
                                        albumDetailsNavigateAction.parameter = {
                                            data: mediaItem, location: MS.Entertainment.Data.ItemLocation.collection, invokeTrack: invokeTrack
                                        };
                                        var options = mediaContext.options || {};
                                        trackAlbumAction.parameter = {
                                            actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                                        if (appBarControl)
                                            appBarControl.hide();
                                        albumDetailsNavigateAction.execute();
                                        if (mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.exploreAlbum)
                                    }, function handleError(error) {
                                        MS.Entertainment.ViewModels.fail("Failed to show album popover in createCollectionTrackAlbumPopoverAppbarAction. Error message: " + error && error.message);
                                        if (mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.exploreAlbum)
                                    })
                                };
                                trackAlbumAction.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: trackAlbumAction}
                            }, createArtistDetailsAppbarAction: function createArtistDetailsAppbarAction() {
                                var useImmersiveDetails = !MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation);
                                var artistDetailAction = new MS.Entertainment.UI.ToolbarAction;
                                artistDetailAction.id = MS.Entertainment.UI.AppBarActions.artistDetails;
                                artistDetailAction.automationId = MS.Entertainment.UI.AutomationIds.appBarArtistDetails;
                                artistDetailAction.title = String.load(String.id.IDS_DETAILS_VIEW_FULL_ARTIST_APPBAR);
                                artistDetailAction.icon = (MS.Entertainment.Utilities.isMusicApp2 || !useImmersiveDetails) ? MS.Entertainment.UI.Icon.player : MS.Entertainment.UI.Icon.details;
                                artistDetailAction.shouldAutomaticallySendTelemetry = false;
                                if (artistDetailAction.isVoiceEnabled) {
                                    artistDetailAction.title = String.load(String.id.IDS_MUSIC2_EXPLORE_ARTIST_BUTTON_VUI_GUI);
                                    artistDetailAction.voicePhraseStringId = String.id.IDS_MUSIC2_EXPLORE_ARTIST_BUTTON_VUI_ALM;
                                    artistDetailAction.voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_EXPLORE_ARTIST_BUTTON_VUI_PRON
                                }
                                artistDetailAction.executed = function executed() {
                                    if (!_actionService)
                                        _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    artistDetailAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    var action;
                                    var mediaItem = Array.isArray(mediaItems) ? mediaItems[0] : mediaItems;
                                    if (!useImmersiveDetails)
                                        MS.Entertainment.Data.List.getData(mediaItem, 0).then(function showArtistDetails(item) {
                                            if (item.mediaType !== Microsoft.Entertainment.Queries.ObjectType.person && item.artist)
                                                item = item.artist;
                                            action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.artistDetailsNavigate);
                                            action.parameter = {
                                                data: item, location: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: mediaContext.collectionFilter
                                            };
                                            action.execute()
                                        });
                                    else {
                                        action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails);
                                        action.parameter = {
                                            mediaItem: mediaItem, showDetails: true, autoPlay: false, automationId: MS.Entertainment.UI.AutomationIds.smartButtonArtistDetails, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        action.execute()
                                    }
                                    if (mediaContext)
                                        mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.artistDetails)
                                };
                                artistDetailAction.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: artistDetailAction}
                            }, createFindAlbumInfoAppbarAction: function createFindAlbumInfoAppbarAction() {
                                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                var isCloudV2Enabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.cloudCollectionV2Enabled);
                                var findAlbumInfoAction = new MS.Entertainment.UI.ToolbarAction;
                                findAlbumInfoAction.id = MS.Entertainment.UI.AppBarActions.findAlbumInfo;
                                findAlbumInfoAction.automationId = MS.Entertainment.UI.AutomationIds.appBarFindAlbumInfo;
                                findAlbumInfoAction.title = String.load(isCloudV2Enabled ? String.id.IDS_FIND_ALBUM_INFO_COMMAND : String.id.IDS_MATCH_ALBUM_INFO_COMMAND);
                                findAlbumInfoAction.icon = MS.Entertainment.UI.Icon.search;
                                findAlbumInfoAction.shouldAutomaticallySendTelemetry = false;
                                findAlbumInfoAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var options = mediaContext.options || {};
                                    findAlbumInfoAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    MS.Entertainment.Data.List.getData(mediaContext.mediaItem, 0).then(function showFindAlbumInfoDialog(album) {
                                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                        if (configurationManager.service.lastSignedInUserXuid && !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                                            return MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_ADD_TO_MY_MUSIC_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel]);
                                        return MS.Entertainment.Music.FindAlbumInfoDialog.show(album, MS.Entertainment.Music.FindAlbumInfo.MatchMode.library)
                                    }.bind(this)).done(function findAlbumInfoDialogClosed(dialog) {
                                        if (dialog && dialog.userControlInstance && dialog.userControlInstance.collectionUpdated && mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.findAlbumInfo)
                                    }, function findAlbumInfoDialogError() {
                                        MS.Entertainment.ViewModels.fail("FindAlbumInfo Dialog Failure")
                                    })
                                };
                                findAlbumInfoAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: findAlbumInfoAction}
                            }, createAddToCloudAppbarAction: function createAddToCloudAppbarAction() {
                                var featureEnablement = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.featureEnablement);
                                var addToCloudActionTitle = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.devicesEnabled) ? String.id.IDS_MUSIC_ADD_TO_LIST_DEVICES_ACTION : String.id.IDS_MUSIC_ADD_TO_LIST_CLOUD_ACTION;
                                var addToCloudAction = new MS.Entertainment.UI.ToolbarAction;
                                addToCloudAction.id = MS.Entertainment.UI.AppBarActions.addToCloud;
                                addToCloudAction.automationId = MS.Entertainment.UI.AutomationIds.appBarAddToCloud;
                                addToCloudAction.title = String.load(addToCloudActionTitle);
                                addToCloudAction.icon = MS.Entertainment.UI.Icon.search;
                                addToCloudAction.shouldAutomaticallySendTelemetry = false;
                                addToCloudAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var options = mediaContext.options || {};
                                    var appView = Windows.UI.ViewManagement.ApplicationView;
                                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                                    if (uiStateService.isSnapped && !appView.tryUnsnap())
                                        return;
                                    addToCloudAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    MS.Entertainment.Data.List.getData(mediaContext.mediaItem, 0).then(function showFindAlbumInfoDialog(media) {
                                        var hydratePromise;
                                        var returnValue;
                                        if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                                            media = media.album;
                                        if (media.hydrate && !media.hydrated)
                                            hydratePromise = media.hydrate();
                                        if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                                            returnValue = WinJS.Promise.as(hydratePromise).then(function hydrated() {
                                                return MS.Entertainment.Music.FindAlbumInfoDialog.show(media, MS.Entertainment.Music.FindAlbumInfo.MatchMode.cloud)
                                            }.bind(this));
                                        else
                                            returnValue = MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_ADD_TO_MY_MUSIC_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel]);
                                        return returnValue
                                    }.bind(this)).done(function findAlbumInfoDialogClosed(dialog) {
                                        if (dialog && dialog.userControlInstance && dialog.userControlInstance.collectionUpdated && mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.findAlbumInfo)
                                    }, function findAlbumInfoDialogError() {
                                        MS.Entertainment.ViewModels.assert(false, "AddToCloud Dialog Failure")
                                    })
                                };
                                addToCloudAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: addToCloudAction}
                            }, createMediaPropertiesAppbarAction: function createMediaPropertiesAppbarAction() {
                                var propertiesAction = new MS.Entertainment.UI.ToolbarAction;
                                propertiesAction.id = MS.Entertainment.UI.AppBarActions.mediaProperties;
                                propertiesAction.automationId = MS.Entertainment.UI.AutomationIds.appBarMediaProperties;
                                propertiesAction.title = String.load(String.id.IDS_MUSIC_PROPERTIES_DIALOG_TEXT);
                                propertiesAction.icon = MS.Entertainment.UI.Icon.details;
                                propertiesAction.shouldAutomaticallySendTelemetry = false;
                                propertiesAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var listOrMediaItem = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    var appView = Windows.UI.ViewManagement.ApplicationView;
                                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                                    if (uiStateService.isSnapped && !appView.tryUnsnap())
                                        return;
                                    propertiesAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).then(function showPropertiesDialog(mediaItem) {
                                        if (!this.openPopup) {
                                            this.openPopup = MS.Entertainment.UI.Shell.createOverlay("MS.Entertainment.UI.Controls.MediaPropertiesFlyout", {mediaItem: mediaItem}, {
                                                top: "auto", right: "auto", left: "10px", bottom: "82px"
                                            });
                                            this.openPopup.show().then(function onPopupDismissed() {
                                                this.openPopup = null
                                            }.bind(this))
                                        }
                                        else
                                            this.openPopup.hide();
                                        if (mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.mediaProperties)
                                    }.bind(this))
                                };
                                propertiesAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: propertiesAction}
                            }, createCloseCommandingPopoverAction: function createCloseCommandingPopoverAction() {
                                var closeAction = new MS.Entertainment.UI.ToolbarAction;
                                closeAction.id = MS.Entertainment.UI.AppBarActions.closeDialog;
                                closeAction.automationId = MS.Entertainment.UI.AutomationIds.appBarCloseCommandingPopover;
                                closeAction.title = String.load(String.id.IDS_CLOSE_BUTTON_VUI_GUI);
                                closeAction.icon = WinJS.UI.AppBarIcon.cancel;
                                closeAction.shouldAutomaticallySendTelemetry = false;
                                closeAction.executed = function executed() {
                                    MS.Entertainment.UI.Controls.CommandingPopOver.hideCurrentCommandingPopover()
                                };
                                closeAction.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: closeAction}
                            }, createSubscriptionSignupAction: function createSubscriptionSignupAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup, {}, MS.Entertainment.UI.AppBarActions.subscriptionSignup, MS.Entertainment.UI.AutomationIds.subscriptionSignup, String.id.IDS_MUSIC_STREAMING_PLAY_LIMIT_PREMIUM_ACTION, MS.Entertainment.UI.Icon.xboxXenonLogo)
                            }
                    }
            })()
    })
})()
})();
/* >>>>>>/animations/galleryanimations.js:16666 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.Animations.Gallery", {
        animateListExpandCollapse: function animateListExpandCollapse(unused1, unused2, affectedItems, inserted) {
            var promises = [];
            var view = null;
            var itemKeys = Object.keys(affectedItems);
            if (itemKeys && itemKeys.length > 0)
                view = MS.Entertainment.Utilities.findParentElementByClassName(affectedItems[itemKeys[0]].element, "win-viewport");
            for (var item in affectedItems)
                promises.push(MS.Entertainment.Animations.Gallery.slideElement(affectedItems[item].element, affectedItems[item]));
            for (item in inserted)
                inserted[item].element.style.opacity = 1.0;
            if (view)
                view.animationPromise = WinJS.Promise.join(promises);
            return {getCompletionPromise: function getCompletionPromise() {
                        return WinJS.Promise.join(promises)
                    }}
        }, slide: function slide(element, className) {
                var completion;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                var slideInEnd = function(event) {
                        element.removeEventListener("animationend", slideInEnd, false);
                        WinJS.Utilities.removeClass(element, className);
                        WinJS.Utilities.addClass(element, "visible");
                        completion()
                    };
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    element.addEventListener("animationend", slideInEnd, false);
                    var delay = 0;
                    if (element.parentElement !== null && element.parentElement.offsetParent !== null) {
                        var delayBase = 100;
                        var leftOffSet = element.parentElement.offsetParent.offsetLeft;
                        var itemIndex = leftOffSet / (element.clientWidth + 10);
                        delay = itemIndex * delayBase;
                        if (element.parentElement.offsetParent.offsetTop > 0)
                            delay += delayBase
                    }
                    element.style.msAnimationDelay = delay + "ms";
                    WinJS.Utilities.addClass(element, className)
                }
                else {
                    WinJS.Utilities.addClass(element, "visible");
                    completion()
                }
                return promise
            }, slideIn: function slideIn(element) {
                return MS.Entertainment.Animations.Gallery.slide(element, "thumbnailButtonFadeIn")
            }, slideOut: function slideOut(element) {
                return MS.Entertainment.Animations.Gallery.slide(element, "thumbnailButtonFadeOut")
            }, loadImage: function loadImage(element, container, animationTarget) {
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    container.appendChild(element);
                    if (animationTarget)
                        WinJS.UI.Animation.fadeIn(animationTarget)
                }
                else {
                    container.appendChild(element);
                    if (animationTarget)
                        animationTarget.style.opacity = 1
                }
            }, enableTextContainerFade: function enableTextContainerFade(textContainer) {
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled)
                    WinJS.UI.Animation.enterContent(textContainer, null)
            }, fadeInTextContainer: function fadeInTextContainer(textContainer) {
                return MS.Entertainment.Animations.Gallery._fadeOutTextContainer(textContainer, true)
            }, fadeOutTextContainer: function fadeOutTextContainer(textContainer) {
                return MS.Entertainment.Animations.Gallery._fadeOutTextContainer(textContainer, false)
            }, _fadeOutTextContainer: function _fadeOutTextContainer(textContainer, fadeIn) {
                var completion;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                var transitionEnd = function(event) {
                        textContainer.removeEventListener("transitionend", transitionEnd, false);
                        completion()
                    };
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled)
                    if (fadeIn && WinJS.Utilities.hasClass(textContainer, "fadeOut")) {
                        WinJS.Utilities.removeClass(textContainer, "fadeOut");
                        textContainer.addEventListener("transitionend", transitionEnd, false);
                        WinJS.Utilities.addClass(textContainer, "fadeIn")
                    }
                    else if (!fadeIn && WinJS.Utilities.hasClass(textContainer, "fadeIn")) {
                        WinJS.Utilities.removeClass(textContainer, "fadeIn");
                        textContainer.addEventListener("transitionend", transitionEnd, false);
                        WinJS.Utilities.addClass(textContainer, "fadeOut")
                    }
                    else
                        completion();
                else {
                    if (fadeIn)
                        WinJS.Utilities.removeClass(textContainer, "hidden");
                    else
                        WinJS.Utilities.addClass(textContainer, "hidden");
                    completion()
                }
                return promise
            }, slideElement: function slideElement(element, destination) {
                var completion;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                function animationEnd(event) {
                    if (event.srcElement === element) {
                        element.removeEventListener("transitionend", animationEnd, false);
                        element.animationEnd = null;
                        WinJS.Utilities.removeClass(element, "listViewElementTransition");
                        element.style.msTransform = "";
                        element.style.left = destination.left + "px";
                        element.style.top = destination.top + "px";
                        element.animating = false;
                        completion()
                    }
                }
                {};
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    if (!element.animating) {
                        element.style.left = destination.oldLeft + "px";
                        element.style.top = destination.oldTop + "px";
                        element.animating = true
                    }
                    else {
                        element.removeEventListener("transitionend", element.animationEnd, false);
                        element.animationEnd = null
                    }
                    element.animationEnd = animationEnd;
                    element.addEventListener("transitionend", animationEnd, false);
                    window.getComputedStyle(listView._viewport);
                    requestAnimationFrame(function() {
                        WinJS.Utilities.addClass(element, "listViewElementTransition");
                        var translate = "";
                        if (destination.left !== destination.oldLeft)
                            translate += "translateX(" + (destination.left - destination.oldLeft) + "px) ";
                        if (destination.top !== destination.oldTop)
                            translate += "translateY(" + (destination.top - destination.oldTop) + "px)";
                        element.style.msTransform = translate
                    })
                }
                else {
                    element.style.left = destination.left + "px";
                    element.style.top = destination.top + "px";
                    completion()
                }
                return promise
            }, scrollListView: function scrollListView(listView, destinationOffset) {
                var completion;
                var animationComplete = false;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                function animationEnd(event) {
                    if (event.srcElement === listView._viewport) {
                        listView._viewport.removeEventListener("transitionend", animationEnd, false);
                        listView.animationEnd = null;
                        animationComplete = true;
                        cleanupStrip()
                    }
                }
                {};
                function cleanupStrip() {
                    if (!animationComplete)
                        return;
                    WinJS.Utilities.removeClass(listView._viewport, "listViewScrollTransition");
                    listView._viewport.style.msTransform = "";
                    listView._viewport.style.overflow = "";
                    listView.scrollPosition = destinationOffset;
                    listView.animating = false;
                    animationComplete = false;
                    completion()
                }
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    if (!listView.animating) {
                        var offset = listView.scrollPosition;
                        listView._viewport.style.overflow = "visible";
                        listView._viewport.style.msTransform = "translateX(-" + offset + "px)";
                        listView.animating = true
                    }
                    else {
                        listView._viewport.removeEventListener("transitionend", listView.animationEnd, false);
                        listView.animationEnd = null
                    }
                    listView.animationEnd = animationEnd;
                    listView._viewport.addEventListener("transitionend", animationEnd, false);
                    window.getComputedStyle(listView._viewport);
                    requestAnimationFrame(function() {
                        WinJS.Utilities.addClass(listView._viewport, "listViewScrollTransition");
                        listView._viewport.style.msTransform = "translateX(-" + destinationOffset + "px)"
                    })
                }
                else {
                    listView._viewport.scrollLeft = destinationOffset;
                    completion()
                }
                return promise
            }, _simpleAnimateIn: function simpleAnimate(element, animationClass, hiddenClass) {
                var completion;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                var animationEnd = function(event) {
                        if (event.srcElement === element) {
                            element.removeEventListener("animationend", animationEnd, false);
                            WinJS.Utilities.removeClass(element, animationClass);
                            completion()
                        }
                    };
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    element.addEventListener("animationend", animationEnd, false);
                    WinJS.Utilities.removeClass(element, hiddenClass);
                    WinJS.Utilities.addClass(element, animationClass)
                }
                else
                    completion();
                return promise
            }, _simpleAnimateOut: function simpleAnimateOut(element, animationClass, hiddenClass) {
                var completion;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                var animationEnd = function(event) {
                        if (event.srcElement === element) {
                            element.removeEventListener("animationend", animationEnd, false);
                            WinJS.Utilities.removeClass(element, animationClass);
                            WinJS.Utilities.addClass(element, hiddenClass);
                            completion()
                        }
                    };
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    element.addEventListener("animationend", animationEnd, false);
                    WinJS.Utilities.addClass(element, animationClass)
                }
                else
                    completion();
                return promise
            }, fadeInActionButtons: function fadeInActionButtons(element) {
                return MS.Entertainment.Animations.Gallery._simpleAnimateIn(element, "detailsActionButtonFadeIn", "inlineDetailsHidden")
            }, fadeOutActionButtons: function fadeOutActionButtons(element) {
                return MS.Entertainment.Animations.Gallery._simpleAnimateOut(element, "detailsActionButtonFadeOut", "inlineDetailsHidden")
            }, fadeInActionText: function fadeInActionText(element) {
                return MS.Entertainment.Animations.Gallery._simpleAnimateIn(element, "detailsActionTextFadeIn", "inlineDetailsHidden")
            }, fadeOutActionText: function fadeOutActionText(element) {
                return MS.Entertainment.Animations.Gallery._simpleAnimateOut(element, "detailsActionTextFadeOut", "inlineDetailsHidden")
            }
    })
})()
})();
/* >>>>>>/controls/mediastatusicon.js:16919 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls.Music");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {MediaStatusIcon: MS.Entertainment.UI.Framework.defineUserControl(null, function mediaStatusIconConstructor(element){}, {
            controlName: "MediaStatusIcon", allowAnimations: false, preventHideDuringInitialize: true, hasError: false, index: -1, key: null, inNowPlaying: false, delayHydrateLibraryId: false, showExplicit: false, showMusicVideo: false, showMediaRights: false, _playbackErrorCode: 0, _transferErrorCode: 0, _notLocalErrorCode: false, _isNowPlaying: false, _setIsNowPlayingState: false, _isDownloading: false, _freeTrackLimitExceeded: false, _monthlyFreeLimitExceeded: false, _inCollection: false, _hasMusicVideo: false, _canPlayLocally: true, _isExplicit: false, _hasUsageRightRestrictions: false, _isUnavailable: false, _icon: String.empty, _iconClass: String.empty, _iconContainerDomElement: null, _ariaText: null, _ariaLabelContainerDomElement: null, _visible: false, _setClassFreeStreamLimitExceeded: false, _setCanPlayLocally: true, _setExplicit: false, _notificationText: null, _notificationAction: null, _setUnavailable: false, _bindings: null, _containerElementClickHandler: null, _attachedLibraryId: -1, _attachedServiceId: MS.Entertainment.Utilities.EMPTY_GUID, _attachedActivationFilePath: String.empty, _freePlayLimits: null, _fileTransferNotificationsService: null, _delayInitializePromise: null, _mediaStore: null, _parentWinItemElement: null, iconClass: {
                    get: function() {
                        return this._iconClass
                    }, set: function(value) {
                            if (value !== this._iconClass) {
                                if (this._iconClass && this._iconContainerDomElement)
                                    WinJS.Utilities.removeClass(this._iconContainerDomElement, this._iconClass);
                                this._iconClass = value;
                                if (this._iconClass && this._iconContainerDomElement)
                                    WinJS.Utilities.addClass(this._iconContainerDomElement, this._iconClass)
                            }
                        }
                }, parentWinItemElement: {get: function() {
                        if (!this._parentWinItemElement)
                            this._parentWinItemElement = this._getParentWinItemElement();
                        return this._parentWinItemElement
                    }}, notificationText: {
                    get: function() {
                        return this._notificationText
                    }, set: function(value) {
                            if (value !== this._notificationText)
                                this._notificationText = value
                        }
                }, notificationAction: {
                    get: function() {
                        return this._notificationAction
                    }, set: function(value) {
                            if (value !== this._notificationAction)
                                this._notificationAction = value
                        }
                }, isUnavailable: {
                    get: function() {
                        return this._isUnavailable
                    }, set: function(value) {
                            if (value !== this._isUnavailable)
                                this._isUnavailable = value
                        }
                }, _delayInitialized: function _delayInitialized() {
                    if (!this.domElement)
                        return;
                    this._iconContainerDomElement = this.domElement.querySelector(".mediaStatusIconContainer");
                    MS.Entertainment.UI.Controls.Music.assert(this._iconContainerDomElement, "MediaStatusIcon control is missing required child element of class 'mediaStatusIconContainer'.");
                    this._ariaLabelContainerDomElement = this.domElement.querySelector(".mediaStatusAriaLabelContainer");
                    MS.Entertainment.UI.Controls.Music.assert(this._ariaLabelContainerDomElement, "MediaStatusIcon control is missing required child element of class 'mediaStatusAriaLabelContainer'.");
                    this.domElement.setAttribute("role", "presentation");
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.freePlayLimits))
                        this._freePlayLimits = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.freePlayLimits);
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.fileTransferNotifications))
                        this._fileTransferNotificationsService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransferNotifications);
                    if (this.delayHydrateLibraryId)
                        MS.Entertainment.ViewModels.MediaItemModel.getLibraryIdAsync(this.mediaInstance);
                    this._handleTransferEvent = this._handleTransferEvent.bind(this);
                    this._handlePlaybackEvent = this._handlePlaybackEvent.bind(this);
                    this._handleFreePlayLimitsEvent = this._handleFreePlayLimitsEvent.bind(this);
                    this._handleMediaChange = this._handleMediaChange.bind(this);
                    this._updateFreePlayLimits = this._updateFreePlayLimits.bind(this);
                    this._updateCanPlayLocally = this._updateCanPlayLocally.bind(this);
                    this._delayInitializePromise = MS.Entertainment.Utilities.schedulePromiseBelowNormal(null, "MediaStatusIcon:initializeBindings").then(function initializeBindings() {
                        this._delayInitializePromise = null;
                        if (this._unloaded)
                            return;
                        this._bindings = WinJS.Binding.bind(this, {mediaInstance: {
                                serviceId: this._handleMediaChange, libraryId: this._handleMediaChange, inCollection: this._handleMediaChange, activationFilePath: this._handleMediaChange, musicVideoId: this._handleMediaChange, hasPurchased: this._updateFreePlayLimits, canPlayLocally: this._updateCanPlayLocally, isFreeStreamRestrictedByMonthlyLimit: this._updateFreePlayLimits, isFreeStreamRestrictedByIndividualLimit: this._updateFreePlayLimits
                            }});
                        if (this.domElement) {
                            if (this._containerElementClickHandler)
                                this._containerElementClickHandler.cancel();
                            this._containerElementClickHandler = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                                click: this.mediaStatusIconClicked.bind(this), keydown: this.mediaStatusIconClicked.bind(this)
                            })
                        }
                        this._initializeMediaId(this.mediaInstance);
                        this._updateCanPlayLocally();
                        this._updateFreePlayLimits()
                    }.bind(this), function(error) {
                        this._delayInitializePromise = null;
                        MS.Entertainment.UI.Controls.Music.assert(WinJS.Promise.isCanceledError(error), "Failed to initialize bindings. error: " + (error && error.message))
                    }.bind(this))
                }, unload: function unload() {
                    if (this._bindings) {
                        this._bindings.cancel();
                        this._bindings = null
                    }
                    if (this._delayInitializePromise)
                        this._delayInitializePromise.cancel();
                    var playbackEventNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playbackEventNotifications);
                    if (this._isValidMediaId(this._attachedLibraryId)) {
                        playbackEventNotifications.detachListener(this._attachedLibraryId, this._handlePlaybackEvent);
                        if (this._fileTransferNotificationsService)
                            this._fileTransferNotificationsService.detachListener(this._attachedLibraryId, this._handleTransferEvent);
                        this._detachedMediaId(this._attachedLibraryId)
                    }
                    if (this._isValidMediaId(this._attachedServiceId)) {
                        playbackEventNotifications.detachListener(this._attachedServiceId, this._handlePlaybackEvent);
                        if (this._fileTransferNotificationsService)
                            this._fileTransferNotificationsService.detachListener(this._attachedServiceId, this._handleTransferEvent);
                        if (this._freePlayLimits && MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(this.mediaInstance))
                            this._freePlayLimits.detachListener(this._attachedServiceId, this._handleFreePlayLimitsEvent);
                        this._detachedMediaId(this._attachedServiceId)
                    }
                    if (this._isValidMediaId(this._attachedActivationFilePath)) {
                        playbackEventNotifications.detachListener(this._attachedActivationFilePath, this._handlePlaybackEvent);
                        if (this._fileTransferNotificationsService)
                            this._fileTransferNotificationsService.detachListener(this._attachedActivationFilePath, this._handleTransferEvent);
                        this._detachedMediaId(this._attachedActivationFilePath)
                    }
                    if (this._containerElementClickHandler) {
                        this._containerElementClickHandler.cancel();
                        this._containerElementClickHandler = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, mediaStatusIconClicked: function mediaStatusIconClicked(event) {
                    if (event && event.keyCode && !(event.keyCode === WinJS.Utilities.Key.enter || event.keyCode === WinJS.Utilities.Key.space))
                        return;
                    if (this.hasError) {
                        var handled = this.showError();
                        if (handled)
                            event.cancelBubble = true
                    }
                    else if (this.notificationText) {
                        var notificationFlyout = new MS.Entertainment.UI.Controls.MediaStatusFlyout;
                        notificationFlyout.text = this.notificationText;
                        notificationFlyout.action = this.notificationAction;
                        notificationFlyout.referenceDomElement = this.domElement;
                        notificationFlyout.margin = {
                            top: 13, bottom: 13, left: 22, right: 22
                        };
                        notificationFlyout.showFlyout()
                    }
                }, showError: function showError() {
                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    if (!uiStateService.servicesEnabled) {
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.upgradeReminderDisplayer).showUpgradeDialog();
                        return true
                    }
                    else {
                        var appView = Windows.UI.ViewManagement.ApplicationView;
                        var handled = false;
                        if (!uiStateService.isSnapped || appView.tryUnsnap())
                            if (this._freeTrackLimitExceeded && this._freePlayLimits) {
                                this._freePlayLimits.showFreeTrackLimitExceededDialog(this.mediaInstance);
                                handled = true
                            }
                            else if (this._monthlyFreeLimitExceeded && this._freePlayLimits) {
                                this._freePlayLimits.showMonthlyFreeLimitExceededDialog(this.mediaInstance);
                                handled = true
                            }
                            else if (this._playbackErrorCode) {
                                MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_PLAYBACK_ERROR_MESSAGE_TITLE), this._playbackErrorCode);
                                handled = true
                            }
                            else if (this._transferErrorCode) {
                                MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), this._transferErrorCode);
                                handled = true
                            }
                            else if (this._notLocalErrorCode) {
                                MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_PLAYBACK_ERROR_MESSAGE_TITLE), this._notLocalErrorCode);
                                handled = true
                            }
                        return handled
                    }
                }, _initializeMediaId: function _initializeMediaId(mediaItem) {
                    var mediaId;
                    mediaId = MS.Entertainment.Platform.Playback.PlaybackEventNotifications.getEventingMediaId(mediaItem);
                    this._handleMediaChange(mediaId)
                }, _handleMediaChange: function _handleMediaChange(newMediaId, oldMediaId) {
                    if (!this._bindings)
                        return;
                    var playbackEventNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playbackEventNotifications);
                    if (this._isValidMediaId(oldMediaId) && (this._attachedServiceId === oldMediaId || this._attachedLibraryId === oldMediaId)) {
                        playbackEventNotifications.detachListener(oldMediaId, this._handlePlaybackEvent);
                        if (this._fileTransferNotificationsService)
                            this._fileTransferNotificationsService.detachListener(oldMediaId, this._handleTransferEvent);
                        if (this._freePlayLimits && MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(this.mediaInstance) && this._attachedServiceId === newMediaId)
                            this._freePlayLimits.detachListener(oldMediaId, this._handleFreePlayLimitsEvent);
                        this._detachedMediaId(oldMediaId)
                    }
                    if ((!this._unloaded) && this._isValidMediaId(newMediaId)) {
                        this._attachedMediaId(newMediaId);
                        playbackEventNotifications.attachListener(newMediaId, this._handlePlaybackEvent);
                        if (this._fileTransferNotificationsService)
                            this._fileTransferNotificationsService.attachListener(newMediaId, this._handleTransferEvent);
                        if (this._freePlayLimits && MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(this.mediaInstance) && this._attachedServiceId === newMediaId) {
                            this._freePlayLimits.attachListener(newMediaId, this._handleFreePlayLimitsEvent);
                            this._updateFreePlayLimits()
                        }
                    }
                    var updateState = false;
                    if (this.showInCollectionState && this.mediaInstance && this.mediaInstance.inCollection !== this._inCollection) {
                        this._inCollection = this.mediaInstance.inCollection;
                        updateState = true
                    }
                    if (this.showMusicVideo && this.mediaInstance && this.mediaInstance.hasMusicVideoId !== this._hasMusicVideo) {
                        this._hasMusicVideo = this.mediaInstance.hasMusicVideoId;
                        updateState = true
                    }
                    if (this.showMediaRights)
                        updateState = true;
                    if (updateState)
                        this._updateState()
                }, _updateFreePlayLimits: function _updateFreePlayLimits() {
                    var isFreePlayLimitsExceeded = this._checkIfFreePlayLimitsExceeded();
                    if (isFreePlayLimitsExceeded)
                        this._updateState()
                }, _checkIfFreePlayLimitsExceeded: function _checkIfFreePlayLimitsExceeded() {
                    if (!this._freePlayLimits || !this._bindings)
                        return false;
                    var updateState = false;
                    var isFreeStreamingTrack = MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(this.mediaInstance);
                    var freeTrackLimitExceeded = isFreeStreamingTrack && this.mediaInstance.isFreeStreamRestrictedByIndividualLimit;
                    if (this._freeTrackLimitExceeded !== freeTrackLimitExceeded) {
                        this._freeTrackLimitExceeded = freeTrackLimitExceeded;
                        updateState = true
                    }
                    var monthlyFreeLimitExceeded = isFreeStreamingTrack && (this._freePlayLimits.isMonthlyFreeLimitExceeded || this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit);
                    if (this._monthlyFreeLimitExceeded !== monthlyFreeLimitExceeded) {
                        this._monthlyFreeLimitExceeded = monthlyFreeLimitExceeded;
                        updateState = true
                    }
                    return updateState
                }, _updateCanPlayLocally: function _updateCanPlayLocally() {
                    if (!this.mediaInstance || !this._bindings)
                        return;
                    var updateState = false;
                    if (this._canPlayLocally !== this.mediaInstance.canPlayLocally) {
                        this._canPlayLocally = this.mediaInstance.canPlayLocally;
                        updateState = true
                    }
                    var isFreePlayLimitsExceeded = this._checkIfFreePlayLimitsExceeded();
                    if (updateState || isFreePlayLimitsExceeded)
                        this._updateState()
                }, _isCurrentNowPlayingIndex: {get: function get_isCurrentNowPlayingIndex() {
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        return sessionManager.nowPlayingSession && sessionManager.nowPlayingSession.currentOrdinal === this.index
                    }}, _isCurrentNowPlayingKey: {get: function get_isCurrentNowPlayingKey() {
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        return sessionManager.nowPlayingSession && this.key && sessionManager.nowPlayingSession.currentMediaKey === this.key
                    }}, _isCurrentNowPlayingItem: {get: function get_isCurrentNowPlayingItem() {
                        return this._isCurrentNowPlayingKey || this._isCurrentNowPlayingIndex
                    }}, _hasNowPlayingIndex: {get: function get_hasNowPlayingIndex() {
                        return this.index >= 0 && this.inNowPlaying
                    }}, _hasNowPlayingKey: {get: function get_hasNowPlayingKey() {
                        return this.key && this.inNowPlaying
                    }}, _hasNowPlayingInformation: {get: function get_hasNowPlayingInformation() {
                        return this._hasNowPlayingKey || this._hasNowPlayingIndex
                    }}, _handlePlaybackEvent: function _handlePlaybackEvent(mediaId, event, value) {
                    switch (event) {
                        case MS.Entertainment.Platform.Playback.PlaybackEventNotifications.Event.error:
                            if (value === MS.Entertainment.Platform.Playback.Error.E_MDS_INDIVIDUAL_TRACK_LIMIT.code) {
                                this.mediaInstance.isFreeStreamRestrictedByIndividualLimit = true;
                                this.mediaInstance.canFreeStream = false;
                                this._freeTrackLimitExceeded = true
                            }
                            else if (value === MS.Entertainment.Platform.Playback.Error.E_MDS_AUTHENTICATED_TRACK_LIMIT.code) {
                                this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit = true;
                                this.mediaInstance.canFreeStream = false;
                                this._monthlyFreeLimitExceeded = true
                            }
                            else if (value === MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_NOT_LOCAL.code && MS.Entertainment.Utilities.isMusicApp2)
                                this._notLocalErrorCode = value;
                            else
                                this._playbackErrorCode = value;
                            this._updateState();
                            break;
                        case MS.Entertainment.Platform.Playback.PlaybackEventNotifications.Event.nowPlaying:
                            this._isNowPlaying = value && (!this._hasNowPlayingInformation || this._isCurrentNowPlayingItem);
                            this._updateState();
                            break;
                        default:
                            MS.Entertainment.UI.Controls.Music.fail("Unknown event type");
                            break
                    }
                }, _handleTransferEvent: function _handleTransferEvent(mediaId, event, value) {
                    switch (event) {
                        case MS.Entertainment.UI.FileTransferNotificationService.Event.transferError:
                            this._transferErrorCode = value;
                            this._updateState();
                            break;
                        case MS.Entertainment.UI.FileTransferNotificationService.Event.download:
                            this._isDownloading = value;
                            this._updateState();
                            break;
                        default:
                            MS.Entertainment.UI.Controls.Music.fail("Unknown event type");
                            break
                    }
                }, _handleFreePlayLimitsEvent: function _handleFreePlayLimitsEvent(event) {
                    switch (event) {
                        case MS.Entertainment.Music.Freeplay.Events.monthlyFreeLimitExceeded:
                            this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit = true;
                            this.mediaInstance.canFreeStream = false;
                            this._monthlyFreeLimitExceeded = true;
                            this._updateState();
                            break;
                        case MS.Entertainment.Music.Freeplay.Events.monthlyFreeLimitReset:
                            this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit = false;
                            this.mediaInstance.canFreeStream = !this.mediaInstance.isFreeStreamRestrictedByIndividualLimit;
                            this._monthlyFreeLimitExceeded = false;
                            this._updateState();
                            break;
                        case MS.Entertainment.Music.Freeplay.Events.freeTrackLimitExceeded:
                            this.mediaInstance.isFreeStreamRestrictedByIndividualLimit = true;
                            this.mediaInstance.canFreeStream = false;
                            this._freeTrackLimitExceeded = true;
                            this._updateState();
                            break;
                        case MS.Entertainment.Music.Freeplay.Events.freeTrackLimitReset:
                            this.mediaInstance.isFreeStreamRestrictedByIndividualLimit = false;
                            this.mediaInstance.canFreeStream = !this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit;
                            this._freeTrackLimitExceeded = false;
                            this._updateState();
                            break;
                        case MS.Entertainment.Music.Freeplay.Events.freeTrialStarted:
                        case MS.Entertainment.Music.Freeplay.Events.freeTrialCompleted:
                            this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit = false;
                            this.mediaInstance.isFreeStreamRestrictedByIndividualLimit = false;
                            this.mediaInstance.canFreeStream = true;
                            this._monthlyFreeLimitExceeded = false;
                            this._freeTrackLimitExceeded = false;
                            this._updateState();
                            break;
                        default:
                            MS.Entertainment.UI.Controls.Music.fail("Unknown event type");
                            break
                    }
                }, _setIconAndAriaString: function _setIconAndAriaString() {
                    var icon = String.empty;
                    var iconClass = String.empty;
                    var ariaId = null;
                    var ariaText = null;
                    this._hasUsageRightRestrictions = false;
                    if (this._unloaded)
                        return;
                    if (this._playbackErrorCode) {
                        icon = MS.Entertainment.UI.Icon.inlineError;
                        iconClass = "mediaStatusIconContainer_inlineError";
                        ariaId = String.id.IDS_MEDIA_STATUS_PLAYBACK_ERROR_ICON
                    }
                    else if (this._freeTrackLimitExceeded) {
                        icon = MS.Entertainment.UI.Icon.inlineNotification;
                        iconClass = "mediaStatusIconContainer_inlineNotification";
                        ariaId = String.id.IDS_MEDIA_STATUS_STREAMING_TRACK_LIMIT_HIT_ICON
                    }
                    else if (this._monthlyFreeLimitExceeded) {
                        icon = MS.Entertainment.UI.Icon.inlineNotification;
                        iconClass = "mediaStatusIconContainer_inlineNotification";
                        ariaId = String.id.IDS_MEDIA_STATUS_STREAMING_MONTHLY_LIMIT_HIT_ICON
                    }
                    else if (this._transferErrorCode) {
                        icon = MS.Entertainment.UI.Icon.inlineError;
                        iconClass = "mediaStatusIconContainer_inlineError";
                        ariaId = String.id.IDS_MEDIA_STATUS_DOWNLOAD_ERROR_ICON
                    }
                    else if (this._notLocalErrorCode) {
                        icon = MS.Entertainment.UI.Icon.inlineNotification;
                        iconClass = "mediaStatusIconContainer_inlineNotification"
                    }
                    else if (this._isNowPlaying) {
                        icon = MS.Entertainment.UI.Icon.nowPlaying;
                        iconClass = "mediaStatusIconContainer_nowPlaying";
                        ariaId = String.id.IDS_MEDIA_STATUS_NOW_PLAYING_ICON
                    }
                    else if (this._isDownloading) {
                        icon = WinJS.UI.AppBarIcon.download;
                        iconClass = "mediaStatusIconContainer_download";
                        ariaId = String.id.IDS_MEDIA_STATUS_DOWNLOADING_ICON
                    }
                    else if (this._hasMusicVideo) {
                        icon = MS.Entertainment.UI.Icon.video11;
                        iconClass = "mediaStatusIconContainer_video11";
                        ariaId = String.id.IDS_MUSIC2_MUSIC_VIDEO_NOTE
                    }
                    else if (this._inCollection) {
                        icon = MS.Entertainment.UI.Icon.musicInCollection;
                        iconClass = "mediaStatusIconContainer_musicInCollection";
                        ariaId = String.id.IDS_MARKETPLACE_TOOLTIP_IN_COLLECTION
                    }
                    else if (this.notificationText) {
                        icon = MS.Entertainment.UI.Icon.inlineNotification;
                        iconClass = "mediaStatusIconContainer_inlineNotification";
                        ariaText = this.notificationText;
                        this._hasUsageRightRestrictions = true
                    }
                    if (this._icon !== icon) {
                        this._icon = icon;
                        this._iconContainerDomElement.textContent = icon
                    }
                    if (this.iconClass !== iconClass)
                        this.iconClass = iconClass;
                    if (ariaId)
                        ariaText = String.load(ariaId);
                    if (this._ariaText !== ariaText) {
                        this._ariaText = ariaText;
                        if (ariaText)
                            this._ariaLabelContainerDomElement.textContent = ariaText;
                        else
                            this._ariaLabelContainerDomElement.textContent = String.empty;
                        this.domElement.title = this._ariaLabelContainerDomElement.textContent
                    }
                }, _setVisible: function _setVisible(hasError) {
                    var visible = hasError || this._isNowPlaying || this._isDownloading || this._inCollection || this._hasMusicVideo || this._hasUsageRightRestrictions;
                    if (this._visible !== visible) {
                        this._visible = visible;
                        this.visibility = visible
                    }
                }, _updateFlyoutState: function _updateFlyoutState() {
                    if (this._unloaded || !this.domElement || this.hasError)
                        return;
                    if (this.notificationText) {
                        this.domElement.disabled = MS.Entertainment.Utilities.isMusicApp2;
                        this.domElement.setAttribute("role", "")
                    }
                    else {
                        this._notificationText = null;
                        this.domElement.disabled = true;
                        this.domElement.setAttribute("role", "presentation")
                    }
                }, _updateState: function _updateState() {
                    this._playability = MS.Entertainment.Utilities.playabilityTest(this.mediaInstance, {
                        cloudRights: this.showCloudRights, mediaRights: this.showMediaRights, checkExplicit: this.showExplicit, rights: this._rights
                    });
                    this.isUnavailable = this._playability.isUnavailable;
                    if (this.showExplicit)
                        this._isExplicit = this.mediaInstance.isExplicit;
                    this._updateFlyoutState();
                    this._setIconAndAriaString();
                    var setClassFreeStreamLimitExceeded = this._freeTrackLimitExceeded || (this.mediaInstance && this.mediaInstance.inCollection && this._monthlyFreeLimitExceeded);
                    if (this._setClassFreeStreamLimitExceeded !== setClassFreeStreamLimitExceeded) {
                        this._setClassFreeStreamLimitExceeded = setClassFreeStreamLimitExceeded;
                        var freeStreamLimitExceededClassName = "state_freeStreamLimitExceeded";
                        if (setClassFreeStreamLimitExceeded)
                            MS.Entertainment.Utilities.safeAddClass(this.parentWinItemElement, freeStreamLimitExceededClassName);
                        else
                            MS.Entertainment.Utilities.safeRemoveClass(this.parentWinItemElement, freeStreamLimitExceededClassName)
                    }
                    if (this._setIsNowPlayingState !== this._isNowPlaying) {
                        this._setIsNowPlayingState = this._isNowPlaying;
                        var stateNowplayingClassName = "state_nowPlaying";
                        if (this._setIsNowPlayingState)
                            MS.Entertainment.Utilities.safeAddClass(this.parentWinItemElement, stateNowplayingClassName);
                        else
                            MS.Entertainment.Utilities.safeRemoveClass(this.parentWinItemElement, stateNowplayingClassName)
                    }
                    if (this._setCanPlayLocally !== this._canPlayLocally) {
                        this._setCanPlayLocally = this._canPlayLocally;
                        var streamOnlyClassName = "state_streamingOnly";
                        if (this._setCanPlayLocally)
                            MS.Entertainment.Utilities.safeRemoveClass(this.parentWinItemElement, streamOnlyClassName);
                        else
                            MS.Entertainment.Utilities.safeAddClass(this.parentWinItemElement, streamOnlyClassName)
                    }
                    this._setExplicit = this._isExplicit;
                    var explicitClassName = "state_explicit";
                    if (this._setExplicit && !this._playability.explicitAllowed)
                        MS.Entertainment.Utilities.safeAddClass(this.parentWinItemElement, explicitClassName);
                    else
                        MS.Entertainment.Utilities.safeRemoveClass(this.parentWinItemElement, explicitClassName);
                    if (this._setUnavailable !== this.isUnavailable) {
                        this._setUnavailable = this.isUnavailable;
                        var unavailableClassName = "state_unavailable";
                        if (this._setUnavailable)
                            MS.Entertainment.Utilities.safeAddClass(this.parentWinItemElement, unavailableClassName);
                        else
                            MS.Entertainment.Utilities.safeRemoveClass(this.parentWinItemElement, unavailableClassName)
                    }
                    var hasError = (this._playbackErrorCode || this._transferErrorCode || this._freeTrackLimitExceeded || this._notLocalErrorCode || this._monthlyFreeLimitExceeded) ? true : false;
                    if (this.hasError !== hasError) {
                        this.hasError = hasError;
                        if (this.domElement)
                            if (hasError) {
                                this.domElement.disabled = MS.Entertainment.Utilities.isMusicApp2;
                                this.domElement.setAttribute("role", "")
                            }
                            else {
                                this.domElement.disabled = true;
                                this.domElement.setAttribute("role", "presentation")
                            }
                        if (this._iconContainerDomElement)
                            MS.Entertainment.Utilities.toggleClassOnElement(this._iconContainerDomElement, hasError, "state-mediaError")
                    }
                    var visible = this._setVisible(hasError)
                }, _getParentWinItemElement: function _getParentWinItemElement() {
                    var parentWinItemElement = this.domElement;
                    if (parentWinItemElement && !WinJS.Utilities.hasClass(parentWinItemElement, "win-item"))
                        parentWinItemElement = MS.Entertainment.Utilities.findParentElementByClassName(parentWinItemElement, "win-item");
                    if (!parentWinItemElement) {
                        parentWinItemElement = this.domElement;
                        do
                            parentWinItemElement = MS.Entertainment.Utilities.findParentElementByClassName(parentWinItemElement, "win-template");
                        while (parentWinItemElement && parentWinItemElement.parentElement)
                    }
                    if (!parentWinItemElement)
                        parentWinItemElement = this.domElement;
                    return parentWinItemElement
                }, _attachedMediaId: function _attachedMediaId(mediaId) {
                    if (typeof mediaId === "number")
                        this._attachedLibraryId = mediaId;
                    else if (typeof mediaId === "string")
                        if (this._isFilePath(mediaId))
                            this._attachedActivationFilePath = mediaId;
                        else
                            this._attachedServiceId = mediaId;
                    else
                        MS.Entertainment.UI.Controls.Music.fail("Attached unknown mediaId type")
                }, _detachedMediaId: function _detachedMediaId(mediaId) {
                    if (typeof mediaId === "number")
                        this._attachedLibraryId = -1;
                    else if (typeof mediaId === "string")
                        if (this._isFilePath(mediaId))
                            this._attachedActivationFilePath = String.empty;
                        else
                            this._attachedServiceId = MS.Entertainment.Utilities.EMPTY_GUID;
                    else
                        MS.Entertainment.UI.Controls.Music.fail("Detached unknown mediaId type")
                }, _isFilePath: function _isFilePath(text) {
                    return (text.indexOf("\\") >= 0 || text.indexOf("/") >= 0)
                }, _isValidMediaId: function _isValidMediaId(mediaId) {
                    return ((typeof mediaId === "number" && mediaId >= 0) || (typeof mediaId === "string" && !MS.Entertainment.Utilities.isEmptyGuid(mediaId)))
                }
        }, {
            mediaInstance: null, showInCollectionState: false
        })})
})()
})();
/* >>>>>>/viewmodels/social/sharefactory.js:17451 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Social");
(function(MSE, undefined) {
    "use strict";
    WinJS.Namespace.defineWithParent(MSE, "Social", {
        ShareMetadata: WinJS.Binding.define({
            title: null, description: null, text: null, serviceId: -1, serviceType: null
        }), ShareEncoderFactory: MS.Entertainment.UI.Framework.define(function shareEncoderFactory() {
                this._encoders = []
            }, {
                _encoders: null, encode: function encode(data, result) {
                        var encoder = this.find(data);
                        if (encoder)
                            return encoder(data, result);
                        else
                            MSE.Social.fail("Could not find an encoder that could encode the given data")
                    }, find: function find(data) {
                        var length = this._encoders.length;
                        var encoder;
                        for (var i = 0; i < length; i++)
                            if (this._encoders[i].canEncode(data)) {
                                encoder = this._encoders[i].encoder;
                                break
                            }
                        return encoder
                    }, register: function register(canEncode, encoder) {
                        var hash,
                            exists;
                        if (!canEncode)
                            throw new Error("canEncode callback wasn't defined");
                        if (!encoder)
                            throw new Error("encoder callback wasn't defined");
                        this._encoders.push({
                            canEncode: canEncode, encoder: encoder
                        })
                    }, deregister: function deregister(encoder) {
                        var length = this._encoders.length;
                        var index = -1;
                        for (var i = 0; i < length; i++)
                            if (this._encoders[i].encoder === encoder) {
                                index = i;
                                break
                            }
                        if (index < 0)
                            MSE.Social.assert(false, "Couldn't find the given encoder within the collection");
                        else
                            this._encoders.splice(index, 1)
                    }
            }), ShareDecoderFactory: MS.Entertainment.UI.Framework.define(function shareDecoderFactory() {
                this._decoders = []
            }, {
                _decoders: null, decode: function decode(data) {
                        var length = this._decoders.length;
                        var found = false;
                        var result = null;
                        for (var i = 0; i < length; i++)
                            if (this._decoders[i].canDecode(data)) {
                                result = this._decoders[i].decode(data);
                                found = true;
                                break
                            }
                        MSE.Social.assert(found, "Could not find a decoder that could decode the given data");
                        return result
                    }, register: function register(canDecode, decoder) {
                        if (!canDecode)
                            throw new Error("canDecode callback wasn't defined");
                        if (!decoder)
                            throw new Error("decoder callback wasn't defined");
                        this._decoders.push({
                            canDecode: canDecode, decode: decoder
                        })
                    }, deregister: function deregister(decoder) {
                        var length = this._decoders.length;
                        var index = -1;
                        for (var i = 0; i < length; i++)
                            if (this._decoders[i].decoder === decoder) {
                                index = i;
                                break
                            }
                        if (index < 0)
                            MSE.Social.assert(false, "Couldn't find the given decoder within the collection");
                        else
                            this._decoders.splice(index, 1)
                    }
            })
    });
    MSE.ServiceLocator.register(MSE.Services.shareEncoder, function createShareEncoder() {
        return new MSE.Social.ShareEncoderFactory
    });
    MSE.ServiceLocator.register(MSE.Services.shareDecoder, function createShareDecoder() {
        var shareDecoderFactory = new MSE.Social.ShareDecoderFactory;
        shareDecoderFactory.register(function canDecode(sharePackage) {
            if (sharePackage !== null && sharePackage !== undefined)
                return true;
            else
                return false
        }, function decode(sharePackage) {
            var metadata = new MSE.Social.ShareMetadata;
            metadata.text = sharePackage.text;
            metadata.title = sharePackage.mediaTitle;
            metadata.description = sharePackage.mediaDescription;
            metadata.serviceId = sharePackage.mediaId;
            metadata.serviceType = sharePackage.mediaType;
            if (!metadata.title)
                metadata.title = sharePackage.title || "";
            if (!metadata.description)
                metadata.description = sharePackage.description || "";
            if (!metadata.text)
                metadata.text = metadata.title;
            return metadata
        });
        return shareDecoderFactory
    })
})(WinJS.Namespace.define("MS.Entertainment", null))
})();
/* >>>>>>/viewmodels/social/sharesender.js:17569 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Social");
(function(MSE, undefined) {
    "use strict";
    var shareSenderMixin = {
            _handlerCallback: null, _handlerFactory: null, _shareHistory: null, _shareHistoryRoot: "__shareRoot__", _shareHistoryMax: 100, _sharePageHistoryMax: 5, _initialized: false, _navigationBindings: null, _maxEmptyMessageLength: 247, _currentPage: null, _defaultEmptyMessage: null, initializeOnce: function initializeOnce() {
                    if (!this._initialized) {
                        this._initializeNavigationWatcher();
                        this.setShareHandler(null);
                        this._initialized = true
                    }
                }, setDefaultEmptyMessage: function setDefaultEmptyMessage() {
                    var stringId;
                    if (MS.Entertainment.Utilities.isMusicApp1)
                        stringId = String.id.IDS_SHARE_EMPTY_MESSAGE_MUSIC;
                    else if (MS.Entertainment.Utilities.isVideoApp1)
                        stringId = String.id.IDS_SHARE_EMPTY_MESSAGE_VIDEO;
                    else if (MS.Entertainment.Utilities.isApp2)
                        stringId = String.empty;
                    else if (MS.Entertainment.Utilities.isTestApp);
                    else
                        MSE.Social.assert(false, "This is an unsupported app mode for the share sender");
                    if (stringId) {
                        this._defaultEmptyMessage = String.load(stringId);
                        this._setEmptyMessage()
                    }
                }, share: function share(data, factory) {
                    var shareOperation;
                    var shareManager = this._getShareManager();
                    if (data !== null && data !== undefined) {
                        var temporaryShareCallback = function _temporaryShareCallback(args) {
                                try {
                                    if (args && args.package && args.target && shareOperation)
                                        shareOperation.encode(data).done(function encodeSuccess(encodedData) {
                                            this._copyEncodeResultObject(encodedData, args);
                                            args.target.encodeComplete()
                                        }.bind(this), function encodeFailed(error) {
                                            MS.Entertainment.Social.fail("Failed to encode a share package. error: " + error && error.message);
                                            this._setEmptyMessage(pendingShareOperation && pendingShareOperation.emptyMessage);
                                            args.target.encodeComplete()
                                        }.bind(this))
                                }
                                catch(error) {
                                    MS.Entertainment.Social.fail("Failed to copy share information in temporary callback. error: " + error);
                                    args.target.encodeComplete()
                                }
                                this._getShareManager().removeEventListener("requestshareevent", temporaryShareCallback, false)
                            }.bind(this);
                        shareOperation = new MSE.Social.ShareOperation(this._encode.bind(this), temporaryShareCallback, data, factory);
                        this._getShareManager().addEventListener("requestshareevent", temporaryShareCallback, false);
                        WinJS.Promise.timeout().then(shareManager.share());
                        return shareOperation
                    }
                }, pendingShare: function pendingShare(data, factory) {
                    var shareOperation = null;
                    if (!MS.Entertainment.Utilities.isApp2 && data !== null && data !== undefined)
                        shareOperation = new MSE.Social.ShareOperation(this._encode.bind(this), this._removePageHistory.bind(this), data, factory);
                    this._setPendingShareOperation(shareOperation);
                    return shareOperation
                }, setShareHandler: function setShareHandler(callback, factory) {
                    var that = this;
                    if (!callback) {
                        if (this._peekPageHistory())
                            this._setDefaultShareCallback();
                        else
                            this._clearShareCallback();
                        this._handlerCallback = null;
                        this._handlerFactory = null
                    }
                    else {
                        this._setDefaultShareCallback();
                        this._handlerCallback = callback;
                        this._handlerFactory = factory || null
                    }
                }, _setPendingShareOperation: function _setPendingShareOperation(shareOperation) {
                    if (shareOperation)
                        this._pushPageHistory(shareOperation);
                    else
                        this._clearPageHistory();
                    this.setShareHandler(null, null)
                }, _createEncodeResultObject: function _createEncodeResultObject() {
                    return {package: {}}
                }, _copyEncodeResultObject: function _copyEncodePackage(from, to) {
                    if (from && from.package && to && to.package)
                        for (var key in from.package)
                            if (key in to.package)
                                to.package[key] = from.package[key]
                }, _getShareManager: function _getShareManager() {
                    var shareManager = MSE.ServiceLocator.getService(MSE.Services.shareHost).getManager();
                    MSE.Social.assert(shareManager !== null && shareManager !== undefined, "ShareManager is null inside the ShareSender");
                    return shareManager
                }, _clearShareCallback: function _clearShareCallback() {
                    if (this._defaultShareCallback) {
                        this._getShareManager().removeEventListener("requestshareevent", this._defaultShareCallback, false);
                        this._defaultShareCallback = null
                    }
                }, _setDefaultShareCallback: function _setDefaultShareCallback() {
                    if (!this._defaultShareCallback) {
                        this._defaultShareCallback = function _defaultShareCallback(eventArgs) {
                            if (eventArgs && eventArgs.package && eventArgs.target) {
                                var onSharePackageRequestPromise = null;
                                try {
                                    onSharePackageRequestPromise = this._onSharePackageRequest({package: eventArgs.package})
                                }
                                catch(error) {
                                    onSharePackageRequestPromise = WinJS.Promise.wrapError(new Error("_onSharePackageRequest threw an exception. error: " + (error && error.message)))
                                }
                                onSharePackageRequestPromise.then(null, function ignoreError(error) {
                                    MS.Entertainment.Social.fail("_onSharePackageRequest failed. error: " + (error && error.message))
                                }).done(function signalComplete() {
                                    try {
                                        eventArgs.target.encodeComplete()
                                    }
                                    catch(error) {
                                        MS.Entertainment.Social.fail("Signaling that encoding has completed has failed. error: " + (error && error.message))
                                    }
                                })
                            }
                        }.bind(this);
                        this._getShareManager().addEventListener("requestshareevent", this._defaultShareCallback, false)
                    }
                }, _onSharePackageRequest: function _onSharePackageRequest(result) {
                    var encodePromise = null;
                    var pendingShareOperation = this._peekPageHistory();
                    if (this._handlerCallback)
                        encodePromise = this._encode(this._handlerCallback(), this._handlerFactory);
                    else if (pendingShareOperation)
                        encodePromise = pendingShareOperation.encode(pendingShareOperation.data);
                    return WinJS.Promise.as(encodePromise).then(function encodeSuccess(encodedData) {
                            this._setEmptyMessage(pendingShareOperation && pendingShareOperation.emptyMessage);
                            this._copyEncodeResultObject(encodedData, result);
                            MS.Entertainment.Utilities.Telemetry.logShare(encodedData)
                        }.bind(this), function encodeFailed(error) {
                            MS.Entertainment.Social.fail("Failed to encode a share package. error:" + error && error.message);
                            this._setEmptyMessage(pendingShareOperation && pendingShareOperation.emptyMessage)
                        }.bind(this))
                }, _setEmptyMessage: function _setEmptyMessage(message) {
                    message = message || this._defaultEmptyMessage;
                    MSE.Social.assert(!message || message.length <= this._maxEmptyMessageLength, "The empty message appears to be too long for the share contracts. If the empty message is too long, Windows will fallback to a default empty message. Note, this max maybe wrong. Please verify");
                    var shareManager = this._getShareManager();
                    if (shareManager && shareManager.setEmptyMessage)
                        shareManager.setEmptyMessage(message)
                }, _encode: function _encode(data, factory) {
                    if (data === null || data === undefined) {
                        MSE.Social.assert(false, "Share data is null or undefined");
                        throw"Share data is null or undefined";
                    }
                    var result = this._createEncodeResultObject();
                    if (factory)
                        return factory(data, result);
                    else
                        return MSE.ServiceLocator.getService(MSE.Services.shareEncoder).encode(data, result)
                }, _clearAllHistory: function _clearAllHistory() {
                    this._shareHistory = {}
                }, _getOrCreatePageHistory: function _getOrCreatePageHistory(page, preventCreate) {
                    var pageHistory = [];
                    page = page || this._currentPage || this._shareHistoryRoot;
                    if (page)
                        if (this._shareHistory[page])
                            pageHistory = this._shareHistory[page];
                        else if (!preventCreate)
                            this._shareHistory[page] = pageHistory;
                    var saves = 0;
                    for (var key in this._shareHistory)
                        saves++;
                    MS.Entertainment.Social.assert(saves < this._shareHistoryMax, "The shareSender's history stack has gotten too big. Need to either increase the limit or there could be a corruption somewhere.");
                    return pageHistory
                }, _clearPageHistory: function _clearPageHistory(page) {
                    page = page || this._currentPage;
                    if (page)
                        if (this._shareHistory[page])
                            delete this._shareHistory[page]
                }, _trimPageHistory: function _trimPageHistory(page) {
                    var trimmedOperations;
                    var pageHistory = this._getOrCreatePageHistory(page, true);
                    if (pageHistory.length > this._sharePageHistoryMax)
                        trimmedOperations = pageHistory.splice(0, pageHistory.length - this._sharePageHistoryMax);
                    if (trimmedOperations)
                        trimmedOperations.forEach(function(item) {
                            if (item)
                                item.cancel()
                        }.bind(this))
                }, _pushPageHistory: function _pushPageHistory(operation) {
                    if (operation) {
                        this._getOrCreatePageHistory().push(operation);
                        this._trimPageHistory()
                    }
                }, _peekPageHistory: function _peekPageHistory(page) {
                    var pageHistory = this._getOrCreatePageHistory(page, true);
                    return pageHistory[pageHistory.length - 1]
                }, _popPageHistory: function _popPageHistory(page) {
                    return this._getOrCreatePageHistory(page, true).pop()
                }, _removePageHistory: function _removePageHistory(operation, page) {
                    var itemRemoved,
                        pageHistory,
                        operationIndex;
                    if (!operation)
                        itemRemoved = this._popPageHistory(page);
                    else {
                        pageHistory = this._getOrCreatePageHistory(page, true);
                        operationIndex = pageHistory.indexOf(operation);
                        if (operationIndex >= 0)
                            itemRemoved = pageHistory.splice(operationIndex, 1)[0];
                        if (!itemRemoved && !page)
                            for (page in this._shareHistory) {
                                itemRemoved = this._removePageHistory(operation, page);
                                if (itemRemoved)
                                    break
                            }
                    }
                    return itemRemoved
                }, _handleNavigation: function _handleNavigation(newPage, oldPage) {
                    if (newPage) {
                        this._currentPage = newPage.iaNode.moniker;
                        if (newPage.iaNode.moniker === MS.Entertainment.UI.Monikers.root)
                            this._clearAllHistory()
                    }
                    else
                        this._currentPage = null
                }, _handleJournalNavigation: function _handleJournalNavigation(args) {
                    var journal = MS.Entertainment.UI.Framework.Navigation.getJournal();
                    if (journal)
                        this._currentPage = journal.location;
                    else
                        this._currentPage = null
                }, _initializeNavigationWatcher: function _initializeNavigationWatcher() {
                    this._uninitializeNavigationWatcher();
                    if (!this._shareHistory) {
                        this._shareHistory = {};
                        try {
                            var navigation;
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                                navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            if (navigation)
                                this._navigationBindings = WinJS.Binding.bind(navigation, {currentPage: this._handleNavigation.bind(this)});
                            else if (MS.Entertainment.UI.Framework.Navigation && MS.Entertainment.UI.Framework.Navigation.getJournal) {
                                this._navigationBindings = MS.Entertainment.Utilities.addEventHandlers(MS.Entertainment.UI.Framework.Navigation.getJournal(), {navigated: this._handleJournalNavigation.bind(this)});
                                this._handleJournalNavigation()
                            }
                        }
                        catch(error) {}
                    }
                }, _uninitializeNavigationWatcher: function _uninitializeNavigationWatcher() {
                    if (this._navigationBindings) {
                        this._navigationBindings.cancel();
                        this._navigationBindings = null
                    }
                }
        };
    WinJS.Namespace.defineWithParent(MSE, "Social", {ShareOperation: MS.Entertainment.UI.Framework.define(function ShareOperation(encodeCallback, cancelCallback, data, factory) {
            this._encodeCallback = encodeCallback;
            this._cancelCallback = cancelCallback;
            this._factory = factory;
            this._data = data
        }, {
            _data: null, _encodePromise: null, _encodedData: null, _encodeCallback: null, _cancelCallback: null, _factory: null, cancelled: false, data: {get: function() {
                        return this._data
                    }}, emptyMessage: {get: function() {
                        var message = this._encodedData && this._encodedData.emptyMessage;
                        return message || String.empty
                    }}, encode: function encode(data) {
                    if (this._encodeCallback && !this._encodePromise)
                        this._encodePromise = this._encodeCallback(data, this._factory).then(function encoded(result) {
                            this._encodedData = result;
                            return this._encodedData
                        }.bind(this));
                    return WinJS.Promise.as(this._encodePromise)
                }, cancel: function cancel() {
                    if (this._encodePromise) {
                        this._encodePromise.cancel();
                        this._encodePromise = null
                    }
                    if (this._cancelCallback) {
                        this._cancelCallback(this);
                        this._cancelCallback = null;
                        this._encodeCallback = null;
                        this._factory = null
                    }
                    this.cancelled = true
                }
        })});
    WinJS.Namespace.defineWithParent(MSE, "Social", {ShareSender: WinJS.Class.mix(function shareSender() {
            this.initializeOnce()
        }, shareSenderMixin, WinJS.Utilities.eventMixin)});
    MSE.ServiceLocator.register(MSE.Services.shareSender, function shareSenderFactory() {
        return new MSE.Social.ShareSender
    })
})(WinJS.Namespace.define("MS.Entertainment", null))
})();
/* >>>>>>/viewmodels/social/sharehost.js:17861 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Social");
(function(MSE, undefined) {
    "use strict";
    WinJS.Namespace.defineWithParent(MSE, "Social", {ShareHost: MS.Entertainment.UI.Framework.define(function shareHost() {
            this._shareManager = null;
            this._package = null;
            this._contractActivationContext = null
        }, {
            _shareManager: null, _package: null, getManager: function getManager() {
                    if (!this._shareManager && Microsoft.Entertainment.Share && Microsoft.Entertainment.Share.SharingManager)
                        this._shareManager = new Microsoft.Entertainment.Share.SharingManager;
                    return this._shareManager
                }, getPackage: function getPackage() {
                    if (this._package === null)
                        return this._loadPackage();
                    else
                        return WinJS.Promise.wrap(this._package)
                }, shareCompleted: function shareCompleted() {
                    var that = this;
                    this.getPackage().then(function success(sharePackage) {
                        if (that._contractActivationContext) {
                            that._contractActivationContext.doneTransfer(null);
                            that._contractActivationContext = null;
                            that._package = null
                        }
                    }, function error() {
                        MSE.Social.assert(false, "Failed to compelte share operation")
                    })
                }, _loadPackage: function _loadPackage() {
                    var that = this;
                    return new WinJS.Promise(function promiseInitialization(completed, error) {
                            var activation;
                            var innerException;
                            var timer = null;
                            try {
                                activation = new Windows.Wwa.Activation
                            }
                            catch(exception) {
                                innerException = exception;
                                MSE.Social.assert(false, "Failed to create activate object: " + exception)
                            }
                            if (activation) {
                                activation.onActivated = function onActivate(contractId, contractActivationContext) {
                                    if (contractId === MSE.Social.ShareHost.shareContractId && timer !== null) {
                                        timer.cancel();
                                        timer = null;
                                        if (contractActivationContext) {
                                            that._package = that._createSharePackage(contractActivationContext.sharingData);
                                            that._contractActivationContext = contractActivationContext;
                                            completed(that._package)
                                        }
                                        else
                                            error()
                                    }
                                };
                                timer = WinJS.Promise.timeout(MSE.Social.ShareHost.shareActivateTimeout).then(function timedOut() {
                                    if (timer !== null) {
                                        MSE.Social.assert(true, "Shared activation didn't fire in time");
                                        timer = null;
                                        error();
                                        activation.onActivated = null
                                    }
                                })
                            }
                            else
                                error(innerException)
                        })
                }, _createSharePackage: function _createSharePackage(dataPackage) {
                    var sharePackage = new Microsoft.Entertainment.Share.SharingPackage;
                    sharePackage.mediaTitle = dataPackage.properties.hasKey("MS-Entertaiment-MediaTitle") ? dataPackage.properties.lookup("MS-Entertaiment-MediaTitle").getString() : null;
                    sharePackage.mediaDescription = dataPackage.properties.hasKey("MS-Entertaiment-MediaDescription") ? dataPackage.properties.lookup("MS-Entertaiment-MediaDescription").getString() : null;
                    sharePackage.mediaId = dataPackage.properties.hasKey("MS-Entertaiment-ServiceId") ? dataPackage.properties.lookup("MS-Entertaiment-ServiceId").getString() : null;
                    sharePackage.mediaType = dataPackage.properties.hasKey("MS-Entertaiment-ServiceType") ? dataPackage.properties.lookup("MS-Entertaiment-ServiceType").getString() : null;
                    sharePackage.title = dataPackage.properties.hasKey("Title") ? dataPackage.properties.lookup("Title").getString() : null;
                    sharePackage.description = dataPackage.properties.hasKey("Description") ? dataPackage.properties.lookup("Description").getString() : null;
                    sharePackage.text = dataPackage.text;
                    return sharePackage
                }
        }, {
            shareContractId: "Microsoft.Windows.SharingTarget", shareActivateTimeout: 10000, factory: function factory() {
                    return new MSE.Social.ShareHost
                }
        })});
    MSE.ServiceLocator.register(MSE.Services.shareHost, MSE.Social.ShareHost.factory)
})(WinJS.Namespace.define("MS.Entertainment", null))
})();
/* >>>>>>/components/social/sharetemplates.js:17951 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.Social", {ShareTemplates: (function() {
            var shareTemplates;
            return {get: function() {
                        if (!shareTemplates)
                            shareTemplates = {
                                media: "<div style='float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px; background-color: #ffffff;'>" + "   <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 87px; border-style: none' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/b1/81/b181ee8e-25ce-4a6e-8a59-f079f83ff618.PNG?v=1#music_shadow.PNG' />" + "   </div>" + "   <div style='float: left; vertical-align: top; width: 243px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='max-height: 80px; overflow: hidden;'>{4}</div><br/>" + "       <div>{2}</div>" + "   </div>" + "</div>", tvEpisode: "<div style='float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px; background-color: #ffffff;'>" + "   <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 87px; border-style: none' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/b1/81/b181ee8e-25ce-4a6e-8a59-f079f83ff618.PNG?v=1#music_shadow.PNG' />" + "   </div>" + "   <div style='float: left; vertical-align: top; width: 243px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 18px; color: #333333; margin-bottom: 15px;'>{4}</div>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 14px; color: #333333; margin-bottom: 15px;'>" + String.load(String.id.IDS_TV_SEASON_NAME).format("{5}") + "        </div>" + "       <div style='max-height: 80px; overflow: hidden;'>{6}</div><br/>" + "       <div>{2}</div>" + "   </div>" + "</div>", tvSeason: "<div style='float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px; background-color: #ffffff;'>" + "   <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 87px; border-style: none' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/b1/81/b181ee8e-25ce-4a6e-8a59-f079f83ff618.PNG?v=1#music_shadow.PNG' />" + "   </div>" + "   <div style='float: left; vertical-align: top; width: 243px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 14px; color: #333333; margin-bottom: 15px;'>" + String.load(String.id.IDS_TV_SEASON_NAME).format("{4}") + "       </div>" + "       <div style='max-height: 80px; overflow: hidden;'>{5}</div><br/>" + "       <div>{2}</div>" + "   </div>" + "</div>", game: "<div style='float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px; background-color: #ffffff;'>" + "    <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 63px; border-style: none;' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/50/2d/502d88f0-6e6e-4e20-8d0b-d24609536e1f.PNG?v=1#game_shadow.PNG' />" + "    </div>" + "    <div style='float: left; vertical-align: top; width: 250px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='max-height: 80px; overflow: hidden;'>{4}</div><br/>" + "       <div>{2}</div>" + "    </div>" + "</div>", artist: "<div style='float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px; background-color: #ffffff;'>" + "   <div style='float: left; width: 130px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 113px; border-style: none' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/50/0e/500ed235-d22f-435f-81d9-ad771e4055d9.PNG?v=1#artist_shadow.PNG' />" + "   </div>" + "   <div style='float: left; vertical-align: top; width: 200px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='max-height: 200px; overflow: hidden;'>{4}</div><br/>" + "       <div>{2}</div>" + "   </div>" + "</div>", album: "<div style='background-color: #ffffff; float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px;'>" + "   <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 87px; border-style: none;' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/b1/81/b181ee8e-25ce-4a6e-8a59-f079f83ff618.PNG?v=1#music_shadow.PNG' />" + "   </div>" + "   <div style='float: left; vertical-align: top; width: 243px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='font-family: \"Segoe UI Semibold\";'>{4}</div>" + "       <div>{5}</div><br/>" + "       <div>{2}</div>" + "    </div>" + "</div>", achievement: "<div style='background-color: #ffffff; float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px;'>" + "   <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 63px; border-style: none;' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/50/2d/502d88f0-6e6e-4e20-8d0b-d24609536e1f.PNG?v=1#game_shadow.PNG' />" + "   </div>" + "   <div style='float: left; width: 250px; margin: 20px 20px 20px 0px;'>" + "       <div style='float: left; font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; line-height: 24px;'>{6}</div>" + "       <div style='float: left; vertical-align: top; margin-top: 12px;'>" + "           <img style='float: left; vertical-align: top; margin: 0px 10px 0px 0px; width: 40px; height: 40px' src='{2}'/>" + "           <div style='float: left; width: 200px;'>" + "               <div style='color: #55C105; font-family: \"Segoe UI Semibold\"'>{4}</div>" + "               <div>{5}</div>" + "               <div>{3}</div>" + "           </div>" + "       </div>" + "   </div>" + "</div>", profile: "<div style='background-color: #ffffff; float: left; font-family: \"Segoe UI\",  \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px;'>" + "   <div style='float: left; vertical-align: top; width: 135px; margin: 20px 0px 20px 30px; overflow: hidden; white-space: nowrap;'>" + "     <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333;'>{4}</div>" + "     <div style='float: left; width: 135px; height: 50px;'>" + "       <div style='float: left;'>{5}</div>" + "       <img style='float: left;' src='http://nxeassets.xbox.com/shaxam/0201/10/88/10886c05-8267-48de-af96-aa7b763f1100.PNG?v=1#gamerscore.PNG'/>" + "     </div>" + "     <div>{6}</div>" + "     <div>{7}</div>" + "   </div>" + "   <div style='float: left; margin: 20px 10px 20px 20px; width: 100px; display: {8}'>" + "       <div style='background-color: rgb(51,51,51); color: #ffffff; padding: 6px;'>{3}</div>" + "       <div style='margin-left: 75px;'><img src='http://nxeassets.xbox.com/shaxam/0201/a5/dd/a5dde9b9-dc32-471c-b7a4-0d14caecf746.PNG?v=1#triangle.PNG' /></div>" + "   </div>" + "   <a href='{0}'><img style='float: left; border-style: none; max-height: 200px;' src='{1}'/></a>" + "   <div style='float: left; margin: 0px 0px 20px 20px;'>{2}</div>" + "</div>", leaderBoard: "<div style='background-color: #ffffff; float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px'>" + "   <div style='float: left; margin: 20px 30px 20px 0px; width: 100px;'>" + "       <a href='{0}'><img style='max-width: 63px; margin-left: 20px; border-style: none;' src='{1}'/></a>" + "       <div style='margin: 15px 0px 0px 10px'>" + "       <img src='http://nxeassets.xbox.com/shaxam/0201/50/2d/502d88f0-6e6e-4e20-8d0b-d24609536e1f.PNG?v=1#game_shadow.PNG' />" + "       </div>" + "   </div>" + "   <div style='float: left; width: 250px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; line-height: 24px; margin-bottom: 8px;'>{3}</div>" + "       <div style='width: 100%;'>{4}</div>" + "       <div style='width: 100%'>{5}</div>" + "       <div>{2}</div>" + "   </div>" + "</div>", leaderBoardItem: "<div>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; width: 20px;'>{0}</div>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; width: 180px;'>{1}</div>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; margin-left: 3px;'>{2}</div>" + "</div>", leaderBoardSelectedItem: "<div style='background-color: #55C105; color: #ffffff;'>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; width: 20px;'>{0}</div>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; width: 180px; '>{1}</div>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; margin-left: 3px;'>{2}</div>" + "</div>", createWebLink: function createWebLink(uri, stringIdOverride) {
                                        var href = "<a style='color: #57B846; font-size: 15px;' href='{0}'>".format(uri);
                                        if (!!stringIdOverride)
                                            return String.load(stringIdOverride).format(href, "</a>");
                                        else
                                            return String.load(String.id.IDS_SHARE_MORE_XBOX_DOT_COM).format(href, "</a>")
                                    }
                            };
                        return shareTemplates
                    }}
        })()});
    WinJS.Namespace.define("MS.Entertainment.Social", {EncoderHelper: {
            encode: function(data, dataAugmentation, html, htmlLines, result) {
                if (dataAugmentation) {
                    var htmlArguments;
                    var augmentedData = MS.Entertainment.Data.augment(WinJS.Binding.unwrap(data), dataAugmentation);
                    if (augmentedData.emptyMessage > 0)
                        result.emptyMessage = String.load(augmentedData.emptyMessage);
                    else
                        result.emptyMessage = String.empty;
                    if (Array.isArray(augmentedData.title)) {
                        var newTitle;
                        for (var i = 0; i < augmentedData.title.length; i++)
                            if (augmentedData.title[i] !== String.empty)
                                if (newTitle)
                                    newTitle = String.load(String.id.IDS_COMMA_SEPARATOR).format(newTitle, augmentedData.title[i]);
                                else
                                    newTitle = augmentedData.title[i];
                        result.package.title = newTitle || " "
                    }
                    else
                        result.package.title = augmentedData.title || " ";
                    var oneLineDescription = MS.Entertainment.Data.Factory.stringNoNewLines(augmentedData.description);
                    result.package.description = oneLineDescription || " ";
                    if (!MS.Entertainment.Utilities.isEmptyGuid(augmentedData.mediaId)) {
                        if (Array.isArray(augmentedData.mediaTitle)) {
                            var newMediaTitle;
                            for (var i = 0; i < augmentedData.mediaTitle.length; i++)
                                if (augmentedData.mediaTitle[i] !== String.empty)
                                    if (newMediaTitle)
                                        newMediaTitle = String.load(String.id.IDS_COMMA_SEPARATOR).format(newMediaTitle, augmentedData.mediaTitle[i]);
                                    else
                                        newMediaTitle = augmentedData.mediaTitle[i];
                            result.package.mediaTitle = newMediaTitle
                        }
                        else
                            result.package.mediaTitle = augmentedData.mediaTitle;
                        if (Array.isArray(augmentedData.text)) {
                            var newText;
                            for (var i = 0; i < augmentedData.text.length; i++)
                                if (augmentedData.text[i] !== String.empty)
                                    if (newText)
                                        newText = String.load(String.id.IDS_COMMA_SEPARATOR).format(newText, augmentedData.text[i]);
                                    else
                                        newText = augmentedData.text[i];
                            result.package.text = newText || String.empty
                        }
                        else
                            result.package.text = augmentedData.text || String.empty;
                        result.package.uri = augmentedData.uri || String.empty;
                        result.package.mediaType = augmentedData.mediaType;
                        result.package.mediaId = augmentedData.mediaId;
                        if (html) {
                            htmlArguments = [];
                            htmlArguments.push(augmentedData.uri || String.empty);
                            var imageUri = String.empty;
                            if (augmentedData.htmlImages)
                                augmentedData.htmlImages.forEach(function(item) {
                                    if (!imageUri && item)
                                        imageUri = item
                                });
                            htmlArguments.push(imageUri);
                            var linkUri = String.empty;
                            if (augmentedData.htmlUri !== null && augmentedData.htmlUri !== undefined)
                                linkUri = MS.Entertainment.Social.ShareTemplates.createWebLink(augmentedData.htmlUri, augmentedData.htmlUriStringId) || String.empty;
                            htmlArguments.push(linkUri);
                            if (augmentedData.htmlLines)
                                augmentedData.htmlLines.forEach(function(item) {
                                    htmlArguments.push((item === undefined || item === null) ? String.empty : item)
                                });
                            if (htmlLines)
                                htmlLines.forEach(function(item) {
                                    htmlArguments.push((item === undefined || item === null) ? String.empty : item)
                                });
                            try {
                                result.package.html = html.format.apply(html, htmlArguments)
                            }
                            catch(error) {
                                result.package.html = String.empty
                            }
                        }
                    }
                }
            }, encodeMusicMedia: function encodeMusicMedia(data, result, setTitleAndDescription) {
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicShareToPhone)) {
                        var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        var sharingProvider = mediaStore.sharingProvider;
                        var libraryIds = [];
                        var libraryTypes = [];
                        var shareString = String.empty;
                        var libraryTypeCounts = [];
                        var libraryTypesUnique = [];
                        if (!Array.isArray(data))
                            data = [data];
                        for (var i = 0; i < data.length; i++)
                            switch (data[i].mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    libraryIds.push(data[i].libraryId);
                                    libraryTypes.push(data[i].mediaType);
                                    if (!libraryTypeCounts[data[i].mediaType])
                                        libraryTypeCounts[data[i].mediaType] = 1;
                                    else
                                        libraryTypeCounts[data[i].mediaType]++;
                                    if (libraryTypesUnique.indexOf(data[i].mediaType) === -1)
                                        libraryTypesUnique.push(data[i].mediaType);
                                    break;
                                default:
                                    break
                            }
                        for (var i = 0; i < libraryTypesUnique.length; i++) {
                            var typeCount = libraryTypeCounts[libraryTypesUnique[i]];
                            var toAdd = String.empty;
                            switch (libraryTypesUnique[i]) {
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    toAdd = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_SHARE_MUSIC_SONG_COUNT_PLURAL, typeCount).format(typeCount);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    toAdd = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_SHARE_MUSIC_ALBUM_COUNT_PLURAL, typeCount).format(typeCount);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                    toAdd = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_SHARE_MUSIC_PLAYLIST_COUNT_PLURAL, typeCount).format(typeCount);
                                    break;
                                default:
                                    break
                            }
                            if (toAdd !== String.empty)
                                if (shareString === String.empty)
                                    shareString = toAdd;
                                else
                                    shareString = String.load(String.id.IDS_SHARE_MUSIC_CONCATENATION).format(shareString, toAdd)
                        }
                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        if (setTitleAndDescription) {
                            result.package.title = shareString;
                            result.package.description = String.load(String.id.IDS_SHARE_FILES_MUSIC_DESCRIPTION)
                        }
                        result.package.shouldShareFiles = true;
                        result.package.libraryIds = libraryIds;
                        result.package.libraryTypes = libraryTypes;
                        result.package.mediaAvailabilityFilter = mediaContext.collectionFilter
                    }
                    return WinJS.Promise.wrap(result)
                }, encodeLeaderBoardTable: function encodeLeaderBoardTable(leaderBoardData) {
                    var leadersArray,
                        rowHtml,
                        i,
                        item;
                    var tableHtml = String.empty;
                    if (leaderBoardData.leaders && leaderBoardData.userRow) {
                        if (Array.isArray(leaderBoardData.leaders))
                            leadersArray = leaderBoardData.leaders;
                        else
                            leaderBoardData.leaders.toArray().then(function(array) {
                                leadersArray = array
                            });
                        if (leadersArray)
                            for (i = leadersArray.length - 1; i >= 0; i--) {
                                item = leadersArray[i];
                                if (item.gamerTag === leaderBoardData.userRow.gamerTag)
                                    rowHtml = MS.Entertainment.Social.ShareTemplates.leaderBoardSelectedItem;
                                else
                                    rowHtml = MS.Entertainment.Social.ShareTemplates.leaderBoardItem;
                                tableHtml = rowHtml.format(item.rank, item.gamerTag, item.rating) + tableHtml
                            }
                    }
                    return tableHtml
                }
        }});
    var shareEncoderFactory = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareEncoder);
    shareEncoderFactory.register(function canEncode(data) {
        return data && (data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeries || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.person || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.game || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.folder)
    }, function encode(data, result) {
        var dataAugmentation,
            html;
        if (data.mediaType)
            switch (data.mediaType) {
                case Microsoft.Entertainment.Queries.ObjectType.video:
                    if (data.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode) {
                        dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.TVEpisodeSharePackage;
                        html = MS.Entertainment.Social.ShareTemplates.tvEpisode
                    }
                    else if (data.videoType === Microsoft.Entertainment.Queries.VideoType.movie) {
                        dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.MovieSharePackage;
                        html = MS.Entertainment.Social.ShareTemplates.media
                    }
                    else {
                        dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.OtherVideoSharePackage;
                        html = MS.Entertainment.Social.ShareTemplates.media
                    }
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.folder:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.FolderVideoSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.media;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.TVSeasonSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.tvSeason;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.TVSeriesSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.media;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.MediaSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.media;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.person:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.ArtistSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.artist;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.track:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.TrackSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.media;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.album:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.AlbumSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.album;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.game:
                    switch (data.defaultPlatformType) {
                        case MS.Entertainment.Data.Augmenter.GamePlatform.Modern:
                            dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.MetroGameSharePackage;
                            break;
                        default:
                            dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.GameSharePackage;
                            break
                    }
                    html = MS.Entertainment.Social.ShareTemplates.game;
                    break
            }
        MS.Entertainment.Social.EncoderHelper.encode(data, dataAugmentation, html, null, result);
        if (data.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
            result = MS.Entertainment.Social.EncoderHelper.encodeMusicMedia(data, result, false);
        else if (data.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist)
            result = MS.Entertainment.Social.EncoderHelper.encodeMusicMedia(data, result, true);
        return WinJS.Promise.as(result)
    });
    shareEncoderFactory.register(function canEncode(data) {
        return data && MS.Entertainment.Data.Augmenter.XboxLive && MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType && (data.socialDataType === MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.profile || data.socialDataType === MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.achievement || data.socialDataType === MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.activity || data.socialDataType === MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.leaderBoard)
    }, function encode(data, result) {
        var dataAugmentation,
            html,
            additionalHtmlLines;
        switch (data.socialDataType) {
            case MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.profile:
                dataAugmentation = MS.Entertainment.Data.Augmenter.XboxLive.ProfileSharePackage;
                html = MS.Entertainment.Social.ShareTemplates.profile;
                break;
            case MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.achievement:
                dataAugmentation = MS.Entertainment.Data.Augmenter.XboxLive.AchievementSharePackage;
                html = MS.Entertainment.Social.ShareTemplates.achievement;
                break;
            case MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.activity:
                shareEncoderFactory.encode(data.media, result);
                break;
            case MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.leaderBoard:
                dataAugmentation = MS.Entertainment.Data.Augmenter.XboxLive.LeaderBoardSharePackage;
                html = MS.Entertainment.Social.ShareTemplates.leaderBoard;
                additionalHtmlLines = [MS.Entertainment.Social.EncoderHelper.encodeLeaderBoardTable(data)];
                break
        }
        MS.Entertainment.Social.EncoderHelper.encode(data, dataAugmentation, html, additionalHtmlLines, result);
        return WinJS.Promise.as(result)
    });
    shareEncoderFactory.register(function canEncode(data) {
        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
        if (data && (MS.Entertainment.Data.VirtualList.is(data) || Array.isArray(data)) && MS.Entertainment.Utilities.isMusicApp1 && featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicShareToPhone))
            return true;
        else
            return false
    }, function encode(data, result) {
        var encodePromise = null;
        if (MS.Entertainment.Data.VirtualList.is(data))
            encodePromise = data.toArrayAll().then(function success(items) {
                return MS.Entertainment.Social.EncoderHelper.encodeMusicMedia(items, result, true)
            });
        else
            encodePromise = MS.Entertainment.Social.EncoderHelper.encodeMusicMedia(data, result, true);
        return WinJS.Promise.as(encodePromise)
    })
})()
})();
/* >>>>>>/components/playback/addtonowplayingaction.js:18257 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        AddToNowPlaying: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function addToNowPlaying() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.addToNowPlaying, translateDragAndDropParams: function translateDragAndDropParams(source) {
                    return {mediaItem: source && source.data}
                }, executed: function executed(param) {
                    var executeActionObject = new MS.Entertainment.UI.Actions.AddToNowPlaying.AddToNowPlayingExecution(new MS.Entertainment.UI.Actions.AddToNowPlaying.AddToNowPlayingActionAppState);
                    executeActionObject.execute(param)
                }, canExecute: function canExecute(param) {
                    var canExecuteResult = true;
                    var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var appState = new MS.Entertainment.UI.Actions.AddToNowPlaying.AddToNowPlayingActionAppState;
                    if (!mediaItem)
                        canExecuteResult = false;
                    else if (Array.isArray(mediaItem))
                        canExecuteResult = mediaItem.length > 0;
                    else if (MS.Entertainment.Data.List.isList(mediaItem))
                        canExecuteResult = mediaItem.count > 0;
                    else if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                        canExecuteResult = appState.canAddToNowPlaying(mediaItem);
                    return canExecuteResult
                }
        }), AddArtistToNowPlayingAction: MS.Entertainment.deferredDerive(MS.Entertainment.UI.Actions.Action, function addArtistToNowPlayingAction() {
                this.base()
            }, {
                executed: function executed(param) {
                    var query,
                        id;
                    var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var mediaItems = Array.isArray(mediaItem) ? mediaItem : [mediaItem];
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var collectionFilter = mediaContext.collectionFilter;
                    MS.Entertainment.ViewModels.assert(mediaItems[0].mediaType === Microsoft.Entertainment.Queries.ObjectType.person && mediaItems[0].personType === Microsoft.Entertainment.Queries.PersonType.artist, "Invalid media type. Was expecting an artist media object");
                    mediaItems.forEach(function addMediaItemToNowPlaying(mediaItem) {
                        var itemCollection = null;
                        if (param.playCollectionItemsOnly) {
                            itemCollection = new MS.Entertainment.Data.Query.libraryTracks;
                            itemCollection.mediaAvailability = collectionFilter;
                            itemCollection.artistId = mediaItem.libraryId;
                            itemCollection.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist, MS.Entertainment.Utilities.isValidServiceId(mediaItem.canonicalId) ? mediaItem.canonicalId : String.empty);
                            if (param.librarySort)
                                itemCollection.sort = param.librarySort
                        }
                        else if (param.shouldUseTopSongsForArtistAddTo) {
                            itemCollection = new MS.Entertainment.Data.Query.Music.ArtistTopSongs;
                            itemCollection.id = mediaItem.canonicalId;
                            itemCollection.impressionGuid = mediaItem.impressionGuid;
                            itemCollection.hasTotalCount = true;
                            itemCollection.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist, MS.Entertainment.Utilities.isValidServiceId(mediaItem.canonicalId) ? mediaItem.canonicalId : String.empty)
                        }
                        else
                            itemCollection = mediaItem;
                        if (itemCollection)
                            MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(itemCollection)
                    });
                    if (!param.suppressNotification)
                        MS.Entertainment.UI.Actions.Playlists._showPlaylistNotification(null, mediaItems, mediaItems[0].mediaType, true)
                }, canExecute: function canExecute(param) {
                        return true
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Actions.AddToNowPlaying", {
        AddToNowPlayingActionAppState: MS.Entertainment.UI.Framework.define(function addToNowPlayingActionAppState() {
            var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
            this.primarySessionIsSmartDJ = !!sessionMgr.primarySession.smartDJSeed;
            var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
            var featureEnablement = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.featureEnablement);
            this.marketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace);
            var freeStreamEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
            var freePlayLimits = null;
            if (freeStreamEnabled && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.freePlayLimits))
                freePlayLimits = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.freePlayLimits);
            this.userCanSubscriptionStream = this.marketplaceEnabled && signedInUserService && signedInUserService.isSubscription;
            this.userFreePlayLimitsNotExceeded = !freePlayLimits || !freePlayLimits.isMonthlyFreeLimitExceeded;
            this.userCanFreeStream = this.userFreePlayLimitsNotExceeded && this.marketplaceEnabled && freeStreamEnabled
        }, {
            marketplaceEnabled: false, primarySessionIsSmartDJ: false, purchaseErrors: 0, subscriptionErrors: 0, userCanFreeStream: false, userCanSubscriptionStream: false, userFreePlayLimitsNotExceeded: false, canAddToNowPlaying: function canAddToNowPlaying(track) {
                    var canAddToNowPlaying = false;
                    if (track.inCollection && (track.canPlayLocally || track.roamingViaOneDrive))
                        canAddToNowPlaying = true;
                    else if (this.marketplaceEnabled) {
                        canAddToNowPlaying = (track.canSubscriptionStream && track.hasPurchased) || (track.canSubscriptionStream && this.userCanSubscriptionStream) || (track.canFreeStream && this.userCanFreeStream);
                        if (!canAddToNowPlaying)
                            if (track.canSubscriptionStream && !this.userCanSubscriptionStream)
                                this.subscriptionErrors++;
                            else if (track.canPurchase || track.canPurchaseAlbum)
                                this.purchaseErrors++
                    }
                    return canAddToNowPlaying
                }
        }), AddToNowPlayingExecution: MS.Entertainment.UI.Framework.define(function addToNowPlayingExecution(appState) {
                this._appState = appState || new MS.Entertainment.UI.Actions.AddToNowPlaying.AddToNowPlayingActionAppState;
                this._appNotificationService = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appNotification) && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification)
            }, {
                _appState: null, _appNotificationService: null, _nowPlayingNotificationCategory: "addToNowPlaying", execute: function execute(param) {
                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        var collectionFilter = mediaContext && mediaContext.collectionFilter;
                        var mediaItemParam = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                        var mediaItems = null;
                        var mediaItemType = null;
                        var showNotification = true;
                        var numMediaItemsAdded = 0;
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        if (sessionMgr.primarySession.smartDJSeed) {
                            if (!param.suppressNotification)
                                this._showPlaylistNotification(numMediaItemsAdded, mediaItemType)
                        }
                        else {
                            var sentCompleteNotification = false;
                            if (!param.suppressNotification && this._appNotificationService)
                                WinJS.Promise.timeout(500).done(function updateTrackNotifications() {
                                    if (!sentCompleteNotification)
                                        this._appNotificationService.send(new MS.Entertainment.UI.Notification({
                                            notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: String.load(String.id.IDS_MUSIC_NOTIFICATION_ADDING_TO_NOW_PLAYING), subTitle: String.empty, moreDetails: null, icon: MS.Entertainment.UI.Icon.playlist, iconClassName: "icon-playlist", action: null, category: this._nowPlayingNotificationCategory, isPersistent: false
                                        }))
                                }.bind(this));
                            MS.Entertainment.Data.VirtualList.copy(mediaItemParam).then(function gotVirtualList(mediaItemsVirtualList) {
                                return mediaItemsVirtualList.forEachAll(function addMediaItem(args) {
                                        var returnPromise = null;
                                        var mediaItem = args && args.item.data;
                                        var preventPlay = numMediaItemsAdded > 0;
                                        if (!mediaItem)
                                            return;
                                        mediaItemType = mediaItem.mediaType;
                                        if (MS.Entertainment.Utilities.isApp2) {
                                            MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(mediaItem, collectionFilter, preventPlay);
                                            returnPromise = WinJS.Promise.as(1)
                                        }
                                        else if (mediaItemType === Microsoft.Entertainment.Queries.ObjectType.album)
                                            if (mediaItem.fromCollection && this._appState.userFreePlayLimitsNotExceeded) {
                                                MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(mediaItem, collectionFilter, preventPlay);
                                                returnPromise = WinJS.Promise.as(1)
                                            }
                                            else
                                                returnPromise = this._expandAlbum(mediaItem, collectionFilter, preventPlay);
                                        else if (mediaItemType === Microsoft.Entertainment.Queries.ObjectType.track)
                                            returnPromise = this._addTrackToNowPlaying(mediaItem, collectionFilter, preventPlay);
                                        else if (mediaItem) {
                                            MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(mediaItem, collectionFilter, preventPlay);
                                            returnPromise = WinJS.Promise.as(1)
                                        }
                                        return returnPromise.then(function addTotal(addedCount) {
                                                numMediaItemsAdded += addedCount
                                            })
                                    }.bind(this))
                            }.bind(this)).then(null, function failure(error) {
                                MS.Entertainment.UI.Actions.fail("Add to Now Playing encountered an error. Error message " + error && error.message)
                            }).done(function addMediaCompleted() {
                                if (!param.suppressNotification) {
                                    this._showPlaylistNotification(numMediaItemsAdded, mediaItemType);
                                    sentCompleteNotification = true
                                }
                                if (param.completeAction)
                                    param.completeAction()
                            }.bind(this))
                        }
                    }, _addTrackToNowPlaying: function _addTrackToNowPlaying(track, collectionFilter, preventPlay) {
                        if (!track) {
                            MS.Entertainment.UI.Actions.fail("Attempting to add a null track.");
                            return WinJS.Promise.as(0)
                        }
                        return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(track).then(function libraryInfoHydrated() {
                                var addedCount = 0;
                                if (this._appState.canAddToNowPlaying(track)) {
                                    addedCount = 1;
                                    MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(track, collectionFilter, preventPlay)
                                }
                                return addedCount
                            }.bind(this), function libraryInfoHydrateFailed(error) {
                                MS.Entertainment.UI.Actions.fail("Failed to hydrate media item. Error message " + error && error.message);
                                return 0
                            })
                    }, _expandAlbum: function _expandAlbum(album, collectionFilter, preventPlay) {
                        if (!album)
                            return WinJS.Promise.as(0);
                        var tracksAdded = 0;
                        return this._getTracks(album).then(function handleTracks(tracks) {
                                var tracksPromise = null;
                                if (tracks)
                                    tracksPromise = tracks.forEachAll(function addTracks(track) {
                                        return this._addTrackToNowPlaying(track && track.item && track.item.data, collectionFilter, preventPlay || tracksAdded > 0).then(function addedTrack(addedCount) {
                                                tracksAdded += addedCount
                                            })
                                    }.bind(this));
                                return WinJS.Promise.as(tracksPromise)
                            }.bind(this)).then(function returnTotalAdded() {
                                return tracksAdded > 0 ? 1 : 0
                            })
                    }, _getTracks: function getTracks(album) {
                        var tracks;
                        if (album.tracks && album.tracks.count)
                            tracks = album.tracks;
                        else if (album.hasCanonicalId) {
                            var query = new MS.Entertainment.Data.Query.Music.AlbumSongs;
                            query.id = album.canonicalId;
                            query.impressionGuid = album.impressionGuid;
                            query.acquisitionData = album.acquisitionData;
                            query.relevancyTrackingContent = album.relevancyTrackingContent;
                            tracks = query.getItems()
                        }
                        else {
                            album = album.cloneWithHydration();
                            tracks = album.hydrate().then(function returnTracks() {
                                return album.tracks
                            })
                        }
                        return WinJS.Promise.as(tracks)
                    }, _showPlaylistNotification: function _showPlaylistNotification(numMediaItemsAdded, mediaItemType) {
                        if (this._appNotificationService)
                            this._appNotificationService.removeNotificationByCategory(this._nowPlayingNotificationCategory);
                        if (numMediaItemsAdded)
                            MS.Entertainment.UI.Actions.Playlists._showPlaylistNotification(null, null, mediaItemType, true, null, null, numMediaItemsAdded);
                        else if (this._appNotificationService) {
                            var subTitle = String.empty;
                            if (this._appState.primarySessionIsSmartDJ)
                                subTitle = String.load(String.id.IDS_MUSIC_NOTIFICATION_RADIO_LOCKED);
                            else if (this._appState.subscriptionErrors)
                                subTitle = String.load(String.id.IDS_MUSIC_NOTIFICATION_MUSIC_PASS_ONLY);
                            else
                                subTitle = String.load(String.id.IDS_MUSIC_NOTIFICATION_PURCHASE_ONLY);
                            this._appNotificationService.send(new MS.Entertainment.UI.Notification({
                                notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: String.load(String.id.IDS_MUSIC_NOTIFICATION_ADD_ERROR), subTitle: subTitle, moreDetails: null, icon: MS.Entertainment.UI.Icon.playlist, iconClassName: "icon-playlist", action: null, category: this._nowPlayingNotificationCategory, isPersistent: false
                            }))
                        }
                    }
            })
    });
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.addToNowPlaying, function() {
        return new MS.Entertainment.UI.Actions.AddToNowPlaying
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.addArtistToNowPlaying, function() {
        return new MS.Entertainment.UI.Actions.AddArtistToNowPlayingAction
    })
})()
})();
/* >>>>>>/controls/webhostexperience.js:18502 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {WebHostExperienceObservables: MS.Entertainment.defineObservable(function WebHostExperienceObservables_constructor(){}, {})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {WebHostExperience: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.WebHostExperienceObservables", function webHostExperience() {
            MS.Entertainment.UI.Controls.WebHostExperienceObservables.prototype.constructor.call(this);
            this.eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell
        }, {
            disposed: false, onStartEvent: null, onMessageEvent: null, onErrorEvent: null, onFinishedEvent: null, onCancelEvent: null, onPageLoadEvent: null, eventProvider: null, startListener: function startListener() {
                    if (!this.disposed)
                        if (this.onStartEvent)
                            this.onStartEvent()
                }, messageReceived: function messageReceived(message, webHost, sendMessageFunc) {
                    if (!this.disposed)
                        if (this.onMessageEvent)
                            this.onMessageEvent(message, webHost, sendMessageFunc)
                }, errorReceived: function errorReceived(message, dontShowError) {
                    if (!this.disposed) {
                        var hr = 0x80004005;
                        if (message === "400")
                            hr = 0x80190190;
                        else if (message === "401")
                            hr = 0x80190191;
                        else if (message === "403")
                            hr = 0x80190193;
                        else if (message === "404")
                            hr = 0x80190194;
                        else if (message === "410")
                            hr = 0x8019019A;
                        else if (message === "500")
                            hr = 0x801901F4;
                        else if (message === "501")
                            hr = 0x801901F5;
                        else if (message === "502")
                            hr = 0x801901F6;
                        else if (message === "503")
                            hr = 0x801901F7;
                        else if (message === "504")
                            hr = 0x801901F8;
                        else if (message === 0x80070461)
                            hr = 0x80070461;
                        if (!dontShowError)
                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_SERVICE_UNAVAILABLE_CAPTION), hr);
                        if (this.onErrorEvent)
                            this.onErrorEvent(message);
                        return {hr: hr}
                    }
                    return {hr: null}
                }, finishedReceived: function finishedReceived() {
                    if (!this.disposed)
                        if (this.onFinishedEvent)
                            this.onFinishedEvent()
                }, cancelReceived: function cancelReceived() {
                    if (!this.disposed)
                        if (this.onCancelEvent)
                            this.onCancelEvent()
                }, pageLoadReceived: function pageLoadReceived(message) {
                    if (!this.disposed)
                        if (this.onPageLoadEvent)
                            this.onPageLoadEvent()
                }, dispose: function dispose() {
                    this.disposed = true;
                    this.onStartEvent = null;
                    this.onMessageEvent = null;
                    this.onErrorEvent = null;
                    this.onFinishedEvent = null;
                    this.onCancelEvent = null;
                    this.onPageLoadEvent = null;
                    this.eventProvider = null
                }
        })})
})()
})();
/* >>>>>>/framework/disabled.js:18578 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function(undefined) {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {disabled: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function disabledConstructor() {
            this.base()
        }, {
            executed: function executed(param){}, canExecute: function canExecute(param) {
                    return false
                }, isEnabled: false
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, function() {
        return new MS.Entertainment.UI.Actions.disabled
    })
})()
})();
/* >>>>>>/controls/errordialog.js:18598 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ErrorDialog: MS.Entertainment.UI.Framework.defineUserControl("/Controls/ErrorDialog.html#errorDialogTemplate", function messageBoxConstructor(element, options) {
            this.webLinkText = String.load(String.id.IDS_DIALOG_ERROR_MORE_INFO);
            this.feedbackLinkText = String.load(String.id.IDS_DIALOG_ERROR_FEEDBACKLINK);
            if (WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoiceStatics"))
                this.webLinkVoiceConfidence = MS.Entertainment.UI.App2.VoiceStatics.defaultConfidence
        }, {
            webLinkPromise: null, _parentOverlay: null, additionalButton: null, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.assert(this.errorDialogErrorCode, "Overlay: Element with data-ent-member='errorDialogErrorCode' not found");
                    if (!this.errorCode)
                        this.errorDialogErrorCode.style.visibility = "hidden";
                    if (!this.subTitle)
                        WinJS.Utilities.addClass(this.errorDialogDescription, "text-small")
                }, onFeedbackLinkClick: function onFeedbackLinkClick() {
                    MS.Entertainment.UI.Controls.UserFeedbackDialog.errorId = this.errorCode;
                    MS.Entertainment.UI.Controls.UserFeedbackDialog.timestamp = (new Date).toUTCString();
                    this._parentOverlay.hide();
                    MS.Entertainment.UI.Shell.showFeedbackDialog();
                    MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: this.errorDialogFeedbackLink}, {
                        uri: "errorDialogTemplate", pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Popup
                    }, {
                        uri: "userFeedbackDialogTemplate", pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Popup
                    })
                }, onWebLinkClick: function onWebLinkClick(e) {
                    if (e && e.keyCode && !(e.keyCode === WinJS.Utilities.Key.enter || e.keyCode === WinJS.Utilities.Key.space))
                        return;
                    var webUrlPromise;
                    var onWeblinkPromiseClicked = function onWeblinkPromiseClicked(url) {
                            this._parentOverlay.hide();
                            window.open(url, "_blank");
                            MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: this.errorDialogWebLink}, {
                                uri: "errorDialogTemplate", pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Popup
                            }, {
                                uri: url, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.WebPage
                            })
                        }.bind(this);
                    MS.Entertainment.UI.Controls.assert(this.webLinkPromise, "webLinkPromise was null");
                    webUrlPromise = WinJS.Promise.as(this.webLinkPromise);
                    WinJS.Promise.timeout(500, webUrlPromise).done(onWeblinkPromiseClicked, onWeblinkPromiseClicked);
                    if (e.stopPropagation && e.preventDefault) {
                        e.stopPropagation();
                        e.preventDefault()
                    }
                }, setOverlay: function setOverlay(instance) {
                    this._parentOverlay = instance;
                    if (MS.Entertainment.Utilities.isApp2 && instance && instance.buttons) {
                        instance.cancelButtonIndex = 0;
                        var newButtons = [];
                        if (this.additionalButton) {
                            var cancelButton = instance.buttons[instance.cancelButtonIndex];
                            instance.buttons = [];
                            var dismissBeforeExecute = function() {
                                    this._parentOverlay.hide();
                                    this.additionalButton.execute()
                                }.bind(this);
                            newButtons.push({
                                title: this.additionalButton.title, execute: dismissBeforeExecute
                            }, cancelButton);
                            instance.cancelButtonIndex = 1
                        }
                        newButtons.push({
                            title: String.load(String.id.IDS_DIALOG_ERROR_MORE_INFO_BUTTON_VUI_GUI), execute: this.onWebLinkClick.bind(this)
                        }, {
                            title: String.load(String.id.IDS_DIALOG_ERROR_FEEDBACKBUTTON_VUI_GUI), execute: this.onFeedbackLinkClick.bind(this)
                        });
                        instance.buttons = instance.buttons.concat(newButtons)
                    }
                }
        }, {
            subTitle: null, description: null, errorCode: null, webLinkText: null, feedbackLinkText: null, webLinkVoiceConfidence: 0.2, showLinks: true, showErrorCodeInContent: true
        })})
})()
})();
