/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* >>>>>>/framework/acquisitiondata.js:2 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    (function(Entertainment) {
        (function(Utilities) {
            var AcquisitionContext = (function() {
                    function AcquisitionContext(){}
                    AcquisitionContext.Collection = "Collection";
                    AcquisitionContext.ExplorerFile = "ExplorerFile";
                    AcquisitionContext.SmartDJ = "SmartDJ";
                    AcquisitionContext.Store = "Store";
                    AcquisitionContext.PlayTo = "PlayTo";
                    return AcquisitionContext
                })();
            Utilities.AcquisitionContext = AcquisitionContext;
            var AcquisitionContextType = (function() {
                    function AcquisitionContextType(){}
                    AcquisitionContextType.Album = "Album";
                    AcquisitionContextType.Artist = "MusicArtist";
                    AcquisitionContextType.Genre = "Genre";
                    AcquisitionContextType.PlayAll = "PlayAll";
                    AcquisitionContextType.Playlist = "MusicPlaylist";
                    AcquisitionContextType.Track = "Track";
                    AcquisitionContextType.MusicVideo = "MusicVideo";
                    AcquisitionContextType.Video = "Video";
                    AcquisitionContextType.TVSeries = "TVSeries";
                    return AcquisitionContextType
                })();
            Utilities.AcquisitionContextType = AcquisitionContextType;
            var AcquisitionData = (function() {
                    function AcquisitionData(acquisitionContext, acquisitionContextType, acquisitionContextID, acquisitionAdditionalContext) {
                        this.acquisitionContext = acquisitionContext;
                        this.acquisitionContextType = acquisitionContextType;
                        this.acquisitionContextID = acquisitionContextID;
                        this.acquisitionAdditionalContext = acquisitionAdditionalContext
                    }
                    return AcquisitionData
                })();
            Utilities.AcquisitionData = AcquisitionData;
            function getAcquisitionContextFromEnum(acquisitionContextEnum) {
                var acquisitionContext;
                switch (acquisitionContextEnum) {
                    case Microsoft.Entertainment.Platform.AcquisitionContext.collection:
                        acquisitionContext = MS.Entertainment.Utilities.AcquisitionContext.Collection;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContext.explorerFile:
                        acquisitionContext = MS.Entertainment.Utilities.AcquisitionContext.ExplorerFile;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContext.smartDJ:
                        acquisitionContext = MS.Entertainment.Utilities.AcquisitionContext.SmartDJ;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContext.store:
                        acquisitionContext = MS.Entertainment.Utilities.AcquisitionContext.Store;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContext.playTo:
                        acquisitionContext = MS.Entertainment.Utilities.AcquisitionContext.PlayTo;
                        break;
                    default:
                        MS.Entertainment.fail("Failed to map acquisitionContextEnum to valid AcquisitionContext.  enum: " + acquisitionContextEnum);
                        break
                }
                return acquisitionContext
            }
            Utilities.getAcquisitionContextFromEnum = getAcquisitionContextFromEnum;
            function getAcquisitionContextTypeFromEnum(acquisitionContextTypeEnum) {
                var acquisitionContextType;
                switch (acquisitionContextTypeEnum) {
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.album:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Album;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.artist:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Artist;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.genre:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Genre;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.playAll:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.PlayAll;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.playlist:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Playlist;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.track:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Track;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.musicVideo:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.MusicVideo;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.video:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Video;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.tvSeries:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.TVSeries;
                        break;
                    default:
                        MS.Entertainment.fail("Failed to map acquisitionContextTypeEnum to valid AcquisitionContextType.  enum: " + acquisitionContextTypeEnum);
                        break
                }
                return acquisitionContextType
            }
            Utilities.getAcquisitionContextTypeFromEnum = getAcquisitionContextTypeFromEnum
        })(Entertainment.Utilities || (Entertainment.Utilities = {}));
        var Utilities = Entertainment.Utilities
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/imageidtypes.js:111 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment", {
        ImageRequested: {
            undefinedRequestedImage: Microsoft.Entertainment.RequestedImageType.undefinedRequestedImage, primaryImage: Microsoft.Entertainment.RequestedImageType.primaryImage, backgroundImage: Microsoft.Entertainment.RequestedImageType.backgroundImage, xboxBackgroundImage: Microsoft.Entertainment.RequestedImageType.xboxBackgroundImage, albumImage: Microsoft.Entertainment.RequestedImageType.albumImage
        }, ImageContentType: {
                none: "", jpeg: "image/jpeg", png: "image/png"
            }, ImageFormat: {
                gif: "gif", jpeg: "jpg", png: "png"
            }, ImageSource: {
                noAutoGenerated: "-generated", noUserGenerated: "-usergeneratedcontent", noGenerated: "-generated-usergeneratedcontent"
            }
    })
})()
})();
/* >>>>>>/framework/contentnotification.js:130 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.ContentNotification");
    WinJS.Namespace.define("MS.Entertainment.UI.ContentNotification", {
        NotificationType: {
            error: 0, marketplaceTransferStatus: "100", marketplaceDownloadStatus: "101", serviceTransferStatus: "200", serviceDownloadStatus: "201", gameBeacon: 500, gameFriendsOnline: 501, gameFriendsRecentlyPlayed: 502, offlineAvailabilityLabel: 700
        }, NotificationModification: MS.Entertainment.UI.Framework.define(function notificationModificationConstructor(resultModifier, idGetter) {
                if (!resultModifier)
                    throw new Error("The resultModifier parameter of NotificationModification's constructor is not optional.");
                if (!idGetter)
                    throw new Error("The idGetter parameter of NotificationModification's constructor is not optional.");
                this._notificationArrayTable = {};
                this._resultModifier = resultModifier;
                this._idGetter = idGetter
            }, {
                _notificationArrayTable: null, _resultModifier: null, _idGetter: null, modifyQuery: function modifyQuery(query) {
                        var modification = WinJS.Binding.unwrap(this);
                        MS.Entertainment.UI.ContentNotification.assert(query.status === MS.Entertainment.Data.queryStatus.idle, "modifyQuery() should only be called on queries that have never run.  Results will be unexpected if the query is already in-flight or complete before it is modified.");
                        if (query.status !== MS.Entertainment.Data.queryStatus.idle)
                            return;
                        MS.Entertainment.UI.ContentNotification.assert(query instanceof MS.Entertainment.Data.AugmentQuery || query instanceof MS.Entertainment.Data.AugmentationWrapperQuery, "Non-AugmenterQuery passed into modifyQuery().");
                        if (query instanceof MS.Entertainment.Data.AugmentQuery || query instanceof MS.Entertainment.Data.AugmentationWrapperQuery)
                            query.resultAugmentation = modification._resultModifier(query.resultAugmentation, {contentNotifications: MS.Entertainment.Data.Property.hydratedIfAvailable({
                                    get: function getContentNotifications() {
                                        var id = modification._idGetter(this);
                                        return id ? modification._getNotifications(id) : null
                                    }, set: function setContentNotifications(value) {
                                            var id = modification._idGetter(this);
                                            if (id)
                                                modification._setNotifications(id, value)
                                        }
                                })})
                    }, modifyItem: function modifyItem(item) {
                        var modification = WinJS.Binding.unwrap(this);
                        var propertyDescriptor = {
                                get: function get() {
                                    var id = modification._idGetter(this);
                                    return id ? modification._getNotifications(id) : null
                                }, set: function setContentNotifications(value) {
                                        var id = modification._idGetter(this);
                                        if (id)
                                            this._setNotifications(id, value)
                                    }, enumerable: true, configurable: true
                            };
                        Object.defineProperty(item, "contentNotifications", propertyDescriptor);
                        if (item._backingData)
                            Object.defineProperty(item._backingData, "contentNotifications", propertyDescriptor)
                    }, _getNotifications: function _getNotifications(id) {
                        var unwrappedThis = WinJS.Binding.unwrap(this);
                        if (!unwrappedThis._notificationArrayTable[id])
                            unwrappedThis._notificationArrayTable[id] = new MS.Entertainment.UI.ContentNotification.ObservableNotificationArray;
                        return unwrappedThis._notificationArrayTable[id]
                    }, _setNotifications: function _setNotifications(id, value) {
                        var unwrappedThis = WinJS.Binding.unwrap(this);
                        unwrappedThis._notificationArrayTable[id] = value
                    }, createSender: function createSender() {
                        var unwrappedThis = WinJS.Binding.unwrap(this);
                        return new MS.Entertainment.UI.ContentNotification.NotificationSender(unwrappedThis)
                    }
            }), NotificationSender: MS.Entertainment.UI.Framework.define(function notificationSenderConstructor(modification) {
                this._modification = modification
            }, {
                _modification: null, sendNotification: function sendNotification(id, type, notification) {
                        var unwrappedThis = WinJS.Binding.unwrap(this);
                        unwrappedThis._modification._getNotifications(id).sendNotification(type, notification)
                    }
            }), ObservableNotificationArray: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ObservableArray", function observableNotificationArrayConstructor() {
                MS.Entertainment.ObservableArray.apply(this, arguments)
            }, {
                sendNotification: function sendNotification(type, notification) {
                    if (MS.Entertainment.Utilities.isApp2 && type === MS.Entertainment.UI.ContentNotification.NotificationType.offlineAvailabilityLabel)
                        return;
                    var unwrappedThis = WinJS.Binding.unwrap(this);
                    var i,
                        item;
                    var existingItem = null;
                    for (i = 0; i < unwrappedThis.length; i++) {
                        item = unwrappedThis.item(i);
                        if (item.type === type) {
                            if (notification)
                                existingItem = item;
                            else
                                unwrappedThis.removeAt(i);
                            break
                        }
                        if (item.type >= type)
                            break
                    }
                    if (notification)
                        if (existingItem) {
                            existingItem.shortText = notification.shortText;
                            existingItem.longText = notification.longText;
                            existingItem.icon = notification.icon
                        }
                        else {
                            notification.type = type;
                            unwrappedThis.insert(i, notification)
                        }
                }, clear: function clear() {
                        var unwrappedThis = WinJS.Binding.unwrap(this);
                        unwrappedThis.splice(0, unwrappedThis.length)
                    }
            }), Notification: MS.Entertainment.defineObservable(function notificationConstructor(icon, shortText, longText, params) {
                this.icon = icon;
                this.shortText = shortText;
                this.longText = longText;
                this.params = params
            }, {
                icon: String.empty, shortText: String.empty, longText: String.empty, params: null
            }), directResult: function directResult() {
                return function modifyAugmentationDirectly(augmentation, definition) {
                        return MS.Entertainment.Data.derive(augmentation || null, null, definition)
                    }
            }, propertyResult: function propertyResult(propertyName, source, baseAugmentation) {
                return function modifyAugmentationProperty(augmentation, definition) {
                        var rootDefinition = {};
                        var newAugmentation = MS.Entertainment.Data.derive(baseAugmentation || null, null, definition);
                        rootDefinition[propertyName] = MS.Entertainment.Data.Property.augment(source, newAugmentation);
                        return MS.Entertainment.Data.derive(augmentation, null, rootDefinition)
                    }
            }, listResult: function listResult() {
                return MS.Entertainment.Data.AugmentQuery.modifyListResultAugmentation
            }, idFromProperty: function idFromProperty(propertyName) {
                var propertyNameString = propertyName.toString();
                return function propertyID_getID(media) {
                        return media[propertyNameString]
                    }
            }
    })
})()
})();
/* >>>>>>/framework/urifactory.js:265 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.Utilities", {UriFactory: MS.Entertainment.UI.Framework.define(function uriFactory() {
            throw new Error("UriFactory is a static class");
        }, {}, {
            create: function create(endpointId, suffixes, queryArguments) {
                if (!endpointId)
                    throw new Error("No endpoint was supplied");
                var separator = "/";
                var uri = String.isString(endpointId) ? endpointId : MS.Entertainment.Endpoint.load(endpointId);
                if (Array.isArray(suffixes))
                    suffixes.forEach(function(uriComponent) {
                        if (uriComponent)
                            uri = uri + separator + window.encodeURIComponent(uriComponent)
                    });
                else if (suffixes)
                    if (suffixes[0] === separator)
                        uri = uri + window.encodeURI(suffixes);
                    else
                        uri = uri + separator + window.encodeURI(suffixes);
                return MS.Entertainment.Utilities.UriFactory.appendQuery(uri, queryArguments)
            }, appendQuery: function appendQuery(uri, queryArguments) {
                    if (!uri)
                        throw new Error("No uri was supplied");
                    if (queryArguments) {
                        var key;
                        var separator = uri.indexOf("?") >= 0 ? "&" : "?";
                        for (key in queryArguments)
                            if (queryArguments.hasOwnProperty(key)) {
                                uri = uri + separator + window.encodeURIComponent(key) + "=" + window.encodeURIComponent(queryArguments[key]);
                                separator = "&"
                            }
                    }
                    return uri
                }
        })})
})()
})();
/* >>>>>>/framework/imageloader.js:307 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Shell");
    WinJS.Namespace.define("MS.Entertainment.UI.Shell", {
        ImageLoader: MS.Entertainment.UI.Framework.define(function(imgLoadedCallback) {
            this._imgLoadedCallback = imgLoadedCallback;
            this._imgElement = document.createElement("img");
            this._imgElement.suppressUnload = true;
            this.state = this.states.initial
        }, {
            _imgLoadedCallback: null, _imgElement: null, _imgUrl: null, _loadingDefault: false, states: {
                    value: {
                        initial: -1, loading: 0, error: 1, loaded: 2, loadedDefault: 3, loadedFallback: 4
                    }, writable: false
                }, loadCatalogImage: function loadCatalogImage(defaultImageUrl, imageId, imageIdType, dimensions, forceImageResize, ignoreZeroLengths, requestedImage, imageChildId, imageContentType) {
                    var url = MS.Entertainment.UI.Shell.ImageLoader.makeCatalogImageUri(imageId, imageIdType, dimensions, forceImageResize, ignoreZeroLengths, requestedImage, imageChildId, imageContentType);
                    this.loadImage(url, defaultImageUrl)
                }, loadImage: function loadImage(imageUrl, defaultImageUrl, loadingImageUrl) {
                    this._loadingDefault = false;
                    this.loadImageInternal(imageUrl, defaultImageUrl, loadingImageUrl)
                }, loadImageInternal: function loadImageInternal(imageUrl, defaultImageUrl, loadingImageUrl) {
                    this.state = this.states.initial;
                    if (loadingImageUrl)
                        this._imgUrl = loadingImageUrl;
                    else
                        this._imgUrl = MS.Entertainment.UI.Shell.ImageLoader._commonLoading;
                    this._imgElement.setAttribute("src", this._imgUrl);
                    if (!imageUrl)
                        if (defaultImageUrl) {
                            this.state = this.states.loadedDefault;
                            this.imgUrl = defaultImageUrl
                        }
                        else {
                            this.state = this.states.loadedFallback;
                            this._loadingDefault = false;
                            this.imgUrl = MS.Entertainment.UI.Shell.ImageLoader._commonDefault
                        }
                    else if (imageUrl === MS.Entertainment.UI.Shell.ImageLoader.defaultImage) {
                        this.state = this.states.error;
                        this._loadingDefault = true;
                        this.loadImage(null, defaultImageUrl)
                    }
                    else if (MS.Entertainment.UI.Shell.ImageLoader.isWebUrl(imageUrl))
                        this._loadImageFromWeb(imageUrl, defaultImageUrl);
                    else if (MS.Entertainment.UI.Shell.ImageLoader.isBlobUrl(imageUrl))
                        this._loadImageFromWeb(imageUrl, defaultImageUrl);
                    else if (MS.Entertainment.UI.Shell.ImageLoader.isAppDataUrl(imageUrl))
                        this._loadImageFromWeb(imageUrl, defaultImageUrl);
                    else if (MS.Entertainment.UI.Shell.ImageLoader.isPackageUrl(imageUrl))
                        this._loadImageFromWeb(imageUrl, defaultImageUrl);
                    else
                        this._loadImageFromPath(imageUrl, defaultImageUrl)
                }, state: {
                    get: function getState() {
                        return this._state
                    }, set: function setState(value) {
                            if (this._state !== value)
                                this._state = value
                        }
                }, imgContainer: {get: function getImgContainer() {
                        return this._imgElement
                    }}, imgUrl: {
                    get: function getImgUrl() {
                        return this._imgUrl
                    }, set: function setImgUrl(value) {
                            if (this._imgUrl !== value) {
                                this._imgUrl = value;
                                this._imgElement.setAttribute("src", this._imgUrl);
                                this._fireImgLoaded(this._imgUrl)
                            }
                        }
                }, _fireImgLoaded: function(imageUrl) {
                    if (this._imgLoadedCallback)
                        this._imgLoadedCallback(imageUrl)
                }, _loadImageFromWeb: function(imageUrl, defaultImageUrl) {
                    var that = this;
                    var remoteImage = new Image;
                    remoteImage.addEventListener("load", function imageOnLoad() {
                        if (that._loadingDefault)
                            that.state = that.states.loadedDefault;
                        else
                            that.state = that.states.loaded;
                        that._loadingDefault = false;
                        that.imgUrl = remoteImage.src
                    });
                    remoteImage.addEventListener("error", function imageOnError() {
                        that.state = that.states.error;
                        that._loadingDefault = true;
                        that.loadImageInternal(null, defaultImageUrl)
                    });
                    this.state = this.states.loading;
                    remoteImage.src = imageUrl
                }, _loadImageFromPath: function(imagePath, defaultImageUrl, imageContainer) {
                    var that = this;
                    try {
                        Windows.Storage.StorageFile.getFileFromPathAsync(imagePath).then(function(loadedFile) {
                            var url = URL.createObjectURL(loadedFile, {oneTimeOnly: true});
                            if (that._loadingDefault)
                                that.state = that.states.loadedDefault;
                            else
                                that.state = that.states.loaded;
                            that._loadingDefault = false;
                            that.imgUrl = url
                        }, function() {
                            that.state = that.states.error;
                            that._loadingDefault = true;
                            that.loadImageInternal(null, defaultImageUrl)
                        });
                        this.state = this.states.loading
                    }
                    catch(e) {
                        that.loadImageInternal(null, defaultImageUrl)
                    }
                }
        }, {
            _commonDefault: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.UI.ImagePaths.imageNotFound
            }), _commonLoading: MS.Entertainment.UI.Framework.lazyDefine(function() {
                    return "ms-appx:///Images/loading_image." + MS.Entertainment.Utilities.getPackageImageFileExtension()
                }), _endpointCache: null, _initializeEndpointCache: function _initializeEndpointCache() {
                    if (!MS.Entertainment.UI.Shell.ImageLoader._endpointCache)
                        MS.Entertainment.UI.Shell.ImageLoader._endpointCache = {imageCatalog: MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_ImageCatalog)}
                }, defaultImage: -1, isBlobUrl: function(imageUrl) {
                    return (imageUrl && imageUrl.match && imageUrl.match(/^blob*:/i))
                }, isAppDataUrl: function(imageUrl) {
                    return (imageUrl && imageUrl.match && imageUrl.match(/^ms\-appdata*:\/\//i))
                }, isImageManagerV2Supported: function(mediaType) {
                    var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    return mediaType && configManager.mdlc.albumArtV2Enabled && (mediaType === Microsoft.Entertainment.Queries.ObjectType.track || mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                }, isPackageUrl: function(imageUrl) {
                    return (imageUrl && imageUrl.match && imageUrl.match(/^ms\-appx*:\/\//i))
                }, isFileUrl: function isFileUrl(imageUrl) {
                    return (imageUrl && imageUrl.match && (imageUrl.match(/^file:\/\//i) || imageUrl.match(/^[a-z]:\\/i)))
                }, isWebUrl: function(imageUrl) {
                    return (imageUrl && imageUrl.match && imageUrl.match(/^http[s]*:\/\//i))
                }, isStreamingUrl: function(imageUrl) {
                    return MS.Entertainment.Utilities.isStreamingUrl(imageUrl)
                }, appendResizeParameters: function appendResizeParameters(url, width, height, contentType) {
                    if (url && MS.Entertainment.UI.Shell.ImageLoader.isWebUrl(url)) {
                        var parameters = {contenttype: contentType || MS.Entertainment.ImageContentType.jpeg};
                        var resize = false;
                        if (width > 0) {
                            resize = true;
                            parameters["width"] = width
                        }
                        if (height > 0) {
                            resize = true;
                            parameters["height"] = height
                        }
                        if (resize)
                            parameters["resize"] = true;
                        url = MS.Entertainment.Utilities.UriFactory.appendQuery(url, parameters)
                    }
                    return url
                }, MediaDefaultUrls: MS.Entertainment.UI.Framework.lazyDefine(function() {
                    return {
                            track: MS.Entertainment.UI.ImagePaths.genericMusicSmall, album: MS.Entertainment.Utilities.isApp1 ? MS.Entertainment.UI.ImagePaths.genericMusicSmall : MS.Entertainment.UI.ImagePaths.music2MissingArt320x320, artist: MS.Entertainment.UI.ImagePaths.genericMusicSmall, playlist: MS.Entertainment.Utilities.isApp1 ? MS.Entertainment.UI.ImagePaths.genericMusicSmall : MS.Entertainment.UI.ImagePaths.music2MissingArt158x158, playlistLarge: MS.Entertainment.Utilities.isApp1 ? MS.Entertainment.UI.ImagePaths.genericMusicSmall : MS.Entertainment.UI.ImagePaths.music2MissingArt320x320, movie: MS.Entertainment.UI.ImagePaths.genericVideoSmall, musicVideo: MS.Entertainment.UI.ImagePaths.genericVideoSmall, otherVideo: MS.Entertainment.UI.ImagePaths.genericVideoSmall, tvSeason: MS.Entertainment.UI.ImagePaths.genericVideoSmall, tvSeries: MS.Entertainment.UI.ImagePaths.genericVideoSmall, tvEpisode: MS.Entertainment.UI.ImagePaths.genericVideoSmall
                        }
                }), _defaultImageSize: {
                    x: 320, y: 320
                }, ImageService: {
                    Zune: "Zune", EDS: "EDS"
                }, _getAcceptableValuesArray: function _getAcceptableWidthsArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableValuesZune : ImageLoader._acceptableValuesEDS
                }, _getAcceptableWideValuesArray: function _getAcceptableWideValuesArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableWideValuesZune : ImageLoader._acceptableWideValuesEDS
                }, _getAcceptableSquareValuesArray: function _getAcceptableSquareValuesArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableSquareValuesZune : ImageLoader._acceptableSquareValuesEDS
                }, _getAcceptableTallValuesArray: function _getAcceptableTallValuesArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableTallValuesZune : ImageLoader._acceptableTallValuesEDS
                }, _getAcceptableWidthsArray: function _getAcceptableWidthsArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableWidthsZune : ImageLoader._acceptableWidthsEDS
                }, _getAcceptableHeightsArray: function _getAcceptableHeightsArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableHeightsZune : ImageLoader._acceptableHeightsEDS
                }, _acceptableValuesZune: [{
                        x: 1920, y: 1080
                    }, {
                        x: 1366, y: 768
                    }, {
                        x: 1280, y: 720
                    }, {
                        x: 1012, y: 693
                    }, {
                        x: 854, y: 480
                    }, {
                        x: 853, y: 480
                    }, {
                        x: 800, y: 800
                    }, {
                        x: 584, y: 800
                    }, {
                        x: 480, y: 480
                    }, {
                        x: 480, y: 270
                    }, {
                        x: 420, y: 320
                    }, {
                        x: 395, y: 270
                    }, {
                        x: 347, y: 195
                    }, {
                        x: 320, y: 320
                    }, {
                        x: 285, y: 195
                    }, {
                        x: 267, y: 150
                    }, {
                        x: 258, y: 258
                    }, {
                        x: 258, y: 194
                    }, {
                        x: 243, y: 137
                    }, {
                        x: 240, y: 240
                    }, {
                        x: 234, y: 320
                    }, {
                        x: 219, y: 150
                    }, {
                        x: 213, y: 120
                    }, {
                        x: 175, y: 120
                    }, {
                        x: 172, y: 258
                    }, {
                        x: 160, y: 160
                    }, {
                        x: 160, y: 120
                    }, {
                        x: 150, y: 150
                    }, {
                        x: 144, y: 108
                    }, {
                        x: 112, y: 84
                    }, {
                        x: 108, y: 108
                    }, {
                        x: 108, y: 72
                    }, {
                        x: 107, y: 160
                    }, {
                        x: 100, y: 100
                    }, {
                        x: 84, y: 84
                    }, {
                        x: 84, y: 56
                    }, {
                        x: 80, y: 60
                    }, {
                        x: 72, y: 72
                    }, {
                        x: 64, y: 64
                    }, {
                        x: 64, y: 48
                    }, {
                        x: 60, y: 60
                    }, {
                        x: 60, y: 45
                    }, {
                        x: 60, y: 40
                    }, {
                        x: 56, y: 56
                    }, {
                        x: 52, y: 52
                    }, {
                        x: 50, y: 50
                    }, {
                        x: 44, y: 44
                    }, {
                        x: 43, y: 64
                    }, {
                        x: 40, y: 40
                    }], _acceptableWideValuesZune: [{
                        x: 1920, y: 1080
                    }, {
                        x: 1366, y: 768
                    }, {
                        x: 1280, y: 720
                    }, {
                        x: 1012, y: 693
                    }, {
                        x: 854, y: 480
                    }, {
                        x: 853, y: 480
                    }, {
                        x: 480, y: 270
                    }, {
                        x: 420, y: 320
                    }, {
                        x: 395, y: 270
                    }, {
                        x: 347, y: 195
                    }, {
                        x: 285, y: 195
                    }, {
                        x: 267, y: 150
                    }, {
                        x: 258, y: 194
                    }, {
                        x: 243, y: 137
                    }, {
                        x: 219, y: 150
                    }, {
                        x: 213, y: 120
                    }, {
                        x: 175, y: 120
                    }, {
                        x: 160, y: 120
                    }, {
                        x: 144, y: 108
                    }, {
                        x: 112, y: 84
                    }, {
                        x: 108, y: 72
                    }, {
                        x: 84, y: 56
                    }, {
                        x: 80, y: 60
                    }, {
                        x: 64, y: 48
                    }, {
                        x: 60, y: 45
                    }, {
                        x: 60, y: 40
                    }], _acceptableSquareValuesZune: [{
                        x: 800, y: 800
                    }, {
                        x: 480, y: 480
                    }, {
                        x: 320, y: 320
                    }, {
                        x: 258, y: 258
                    }, {
                        x: 240, y: 240
                    }, {
                        x: 160, y: 160
                    }, {
                        x: 150, y: 150
                    }, {
                        x: 108, y: 108
                    }, {
                        x: 100, y: 100
                    }, {
                        x: 84, y: 84
                    }, {
                        x: 72, y: 72
                    }, {
                        x: 64, y: 64
                    }, {
                        x: 60, y: 60
                    }, {
                        x: 56, y: 56
                    }, {
                        x: 52, y: 52
                    }, {
                        x: 50, y: 50
                    }, {
                        x: 44, y: 44
                    }, {
                        x: 40, y: 40
                    }], _acceptableTallValuesZune: [{
                        x: 584, y: 800
                    }, {
                        x: 234, y: 320
                    }, {
                        x: 172, y: 258
                    }, {
                        x: 107, y: 160
                    }, {
                        x: 43, y: 64
                    }], _acceptableWidthsZune: [1920, 1366, 1280, 1012, 854, 853, 800, 584, 480, 420, 395, 347, 320, 285, 267, 258, 243, 240, 234, 219, 213, 175, 172, 160, 150, 144, 112, 108, 107, 100, 84, 80, 72, 64, 60, 56, 52, 50, 44, 43, 40], _acceptableHeightsZune: [1080, 800, 768, 720, 693, 480, 320, 270, 258, 240, 195, 194, 160, 150, 137, 120, 108, 100, 84, 72, 64, 60, 56, 52, 50, 48, 45, 44, 40], _acceptableValuesEDS: [{
                        x: 2560, y: 1440
                    }, {
                        x: 2471, y: 753
                    }, {
                        x: 2470, y: 2470
                    }, {
                        x: 2399, y: 576
                    }, {
                        x: 2398, y: 2398
                    }, {
                        x: 2398, y: 1642
                    }, {
                        x: 2398, y: 576
                    }, {
                        x: 2100, y: 2100
                    }, {
                        x: 2100, y: 753
                    }, {
                        x: 2048, y: 1536
                    }, {
                        x: 2021, y: 576
                    }, {
                        x: 2020, y: 2020
                    }, {
                        x: 2020, y: 576
                    }, {
                        x: 1920, y: 1080
                    }, {
                        x: 1919, y: 1200
                    }, {
                        x: 1919, y: 1079
                    }, {
                        x: 1831, y: 540
                    }, {
                        x: 1830, y: 1391
                    }, {
                        x: 1830, y: 540
                    }, {
                        x: 1795, y: 448
                    }, {
                        x: 1793, y: 1793
                    }, {
                        x: 1793, y: 448
                    }, {
                        x: 1593, y: 896
                    }, {
                        x: 1562, y: 1562
                    }, {
                        x: 1562, y: 540
                    }, {
                        x: 1561, y: 1561
                    }, {
                        x: 1561, y: 1069
                    }, {
                        x: 1561, y: 540
                    }, {
                        x: 1501, y: 448
                    }, {
                        x: 1499, y: 1028
                    }, {
                        x: 1440, y: 1440
                    }, {
                        x: 1440, y: 1291
                    }, {
                        x: 1440, y: 810
                    }, {
                        x: 1366, y: 768
                    }, {
                        x: 1351, y: 380
                    }, {
                        x: 1350, y: 1350
                    }, {
                        x: 1315, y: 1315
                    }, {
                        x: 1315, y: 448
                    }, {
                        x: 1280, y: 800
                    }, {
                        x: 1280, y: 720
                    }, {
                        x: 1277, y: 320
                    }, {
                        x: 1276, y: 1276
                    }, {
                        x: 1276, y: 320
                    }, {
                        x: 1206, y: 1206
                    }, {
                        x: 1191, y: 320
                    }, {
                        x: 1190, y: 1190
                    }, {
                        x: 1138, y: 640
                    }, {
                        x: 1080, y: 1080
                    }, {
                        x: 1080, y: 789
                    }, {
                        x: 1067, y: 320
                    }, {
                        x: 1066, y: 810
                    }, {
                        x: 1051, y: 1051
                    }, {
                        x: 1024, y: 768
                    }, {
                        x: 1021, y: 1021
                    }, {
                        x: 1021, y: 448
                    }, {
                        x: 1012, y: 693
                    }, {
                        x: 981, y: 320
                    }, {
                        x: 980, y: 980
                    }, {
                        x: 938, y: 938
                    }, {
                        x: 935, y: 320
                    }, {
                        x: 934, y: 934
                    }, {
                        x: 934, y: 320
                    }, {
                        x: 896, y: 896
                    }, {
                        x: 864, y: 864
                    }, {
                        x: 854, y: 480
                    }, {
                        x: 853, y: 480
                    }, {
                        x: 818, y: 818
                    }, {
                        x: 810, y: 1080
                    }, {
                        x: 800, y: 800
                    }, {
                        x: 796, y: 448
                    }, {
                        x: 789, y: 1080
                    }, {
                        x: 788, y: 1080
                    }, {
                        x: 770, y: 770
                    }, {
                        x: 770, y: 485
                    }, {
                        x: 756, y: 756
                    }, {
                        x: 754, y: 424
                    }, {
                        x: 725, y: 320
                    }, {
                        x: 724, y: 560
                    }, {
                        x: 724, y: 320
                    }, {
                        x: 720, y: 1280
                    }, {
                        x: 720, y: 1080
                    }, {
                        x: 720, y: 720
                    }, {
                        x: 672, y: 672
                    }, {
                        x: 672, y: 602
                    }, {
                        x: 666, y: 666
                    }, {
                        x: 648, y: 320
                    }, {
                        x: 640, y: 640
                    }, {
                        x: 640, y: 320
                    }, {
                        x: 598, y: 296
                    }, {
                        x: 594, y: 594
                    }, {
                        x: 592, y: 592
                    }, {
                        x: 588, y: 588
                    }, {
                        x: 584, y: 800
                    }, {
                        x: 580, y: 290
                    }, {
                        x: 576, y: 576
                    }, {
                        x: 562, y: 316
                    }, {
                        x: 556, y: 740
                    }, {
                        x: 553, y: 553
                    }, {
                        x: 540, y: 720
                    }, {
                        x: 526, y: 720
                    }, {
                        x: 518, y: 518
                    }, {
                        x: 496, y: 496
                    }, {
                        x: 480, y: 720
                    }, {
                        x: 480, y: 640
                    }, {
                        x: 480, y: 480
                    }, {
                        x: 480, y: 270
                    }, {
                        x: 470, y: 264
                    }, {
                        x: 467, y: 640
                    }, {
                        x: 464, y: 636
                    }, {
                        x: 464, y: 497
                    }, {
                        x: 464, y: 464
                    }, {
                        x: 448, y: 448
                    }, {
                        x: 441, y: 441
                    }, {
                        x: 430, y: 430
                    }, {
                        x: 426, y: 640
                    }, {
                        x: 424, y: 424
                    }, {
                        x: 423, y: 423
                    }, {
                        x: 420, y: 420
                    }, {
                        x: 420, y: 320
                    }, {
                        x: 420, y: 265
                    }, {
                        x: 420, y: 236
                    }, {
                        x: 420, y: 95
                    }, {
                        x: 402, y: 402
                    }, {
                        x: 400, y: 300
                    }, {
                        x: 395, y: 270
                    }, {
                        x: 380, y: 407
                    }, {
                        x: 380, y: 380
                    }, {
                        x: 380, y: 239
                    }, {
                        x: 380, y: 214
                    }, {
                        x: 380, y: 181
                    }, {
                        x: 370, y: 500
                    }, {
                        x: 370, y: 370
                    }, {
                        x: 370, y: 208
                    }, {
                        x: 367, y: 329
                    }, {
                        x: 366, y: 206
                    }, {
                        x: 361, y: 361
                    }, {
                        x: 347, y: 195
                    }, {
                        x: 343, y: 343
                    }, {
                        x: 336, y: 336
                    }, {
                        x: 329, y: 329
                    }, {
                        x: 327, y: 245
                    }, {
                        x: 320, y: 426
                    }, {
                        x: 320, y: 320
                    }, {
                        x: 320, y: 120
                    }, {
                        x: 318, y: 424
                    }, {
                        x: 316, y: 316
                    }, {
                        x: 313, y: 313
                    }, {
                        x: 313, y: 235
                    }, {
                        x: 310, y: 424
                    }, {
                        x: 307, y: 307
                    }, {
                        x: 300, y: 300
                    }, {
                        x: 296, y: 145
                    }, {
                        x: 290, y: 290
                    }, {
                        x: 290, y: 145
                    }, {
                        x: 288, y: 384
                    }, {
                        x: 288, y: 288
                    }, {
                        x: 285, y: 195
                    }, {
                        x: 282, y: 424
                    }, {
                        x: 280, y: 280
                    }, {
                        x: 278, y: 370
                    }, {
                        x: 275, y: 206
                    }, {
                        x: 270, y: 270
                    }, {
                        x: 267, y: 150
                    }, {
                        x: 265, y: 362
                    }, {
                        x: 265, y: 265
                    }, {
                        x: 262, y: 262
                    }, {
                        x: 262, y: 235
                    }, {
                        x: 260, y: 356
                    }, {
                        x: 258, y: 258
                    }, {
                        x: 258, y: 194
                    }, {
                        x: 253, y: 253
                    }, {
                        x: 248, y: 248
                    }, {
                        x: 245, y: 245
                    }, {
                        x: 243, y: 137
                    }, {
                        x: 240, y: 240
                    }, {
                        x: 237, y: 316
                    }, {
                        x: 235, y: 235
                    }, {
                        x: 234, y: 320
                    }, {
                        x: 234, y: 234
                    }, {
                        x: 230, y: 316
                    }, {
                        x: 224, y: 224
                    }, {
                        x: 219, y: 300
                    }, {
                        x: 219, y: 150
                    }, {
                        x: 215, y: 294
                    }, {
                        x: 215, y: 215
                    }, {
                        x: 213, y: 213
                    }, {
                        x: 213, y: 120
                    }, {
                        x: 210, y: 316
                    }, {
                        x: 210, y: 210
                    }, {
                        x: 210, y: 207
                    }, {
                        x: 210, y: 204
                    }, {
                        x: 210, y: 188
                    }, {
                        x: 208, y: 208
                    }, {
                        x: 207, y: 210
                    }, {
                        x: 200, y: 300
                    }, {
                        x: 200, y: 200
                    }, {
                        x: 181, y: 181
                    }, {
                        x: 181, y: 102
                    }, {
                        x: 180, y: 245
                    }, {
                        x: 180, y: 180
                    }, {
                        x: 178, y: 100
                    }, {
                        x: 177, y: 133
                    }, {
                        x: 175, y: 120
                    }, {
                        x: 173, y: 173
                    }, {
                        x: 172, y: 258
                    }, {
                        x: 170, y: 170
                    }, {
                        x: 164, y: 164
                    }, {
                        x: 164, y: 115
                    }, {
                        x: 160, y: 160
                    }, {
                        x: 160, y: 120
                    }, {
                        x: 156, y: 208
                    }, {
                        x: 154, y: 116
                    }, {
                        x: 152, y: 208
                    }, {
                        x: 151, y: 151
                    }, {
                        x: 150, y: 225
                    }, {
                        x: 150, y: 150
                    }, {
                        x: 150, y: 134
                    }, {
                        x: 150, y: 103
                    }, {
                        x: 150, y: 84
                    }, {
                        x: 148, y: 148
                    }, {
                        x: 147, y: 150
                    }, {
                        x: 145, y: 193
                    }, {
                        x: 144, y: 108
                    }, {
                        x: 138, y: 208
                    }, {
                        x: 136, y: 102
                    }, {
                        x: 135, y: 135
                    }, {
                        x: 132, y: 181
                    }, {
                        x: 132, y: 132
                    }, {
                        x: 131, y: 131
                    }, {
                        x: 128, y: 128
                    }, {
                        x: 124, y: 115
                    }, {
                        x: 120, y: 120
                    }, {
                        x: 120, y: 90
                    }, {
                        x: 112, y: 84
                    }, {
                        x: 110, y: 110
                    }, {
                        x: 108, y: 108
                    }, {
                        x: 108, y: 72
                    }, {
                        x: 107, y: 160
                    }, {
                        x: 105, y: 105
                    }, {
                        x: 100, y: 135
                    }, {
                        x: 100, y: 120
                    }, {
                        x: 100, y: 100
                    }, {
                        x: 99, y: 135
                    }, {
                        x: 99, y: 99
                    }, {
                        x: 95, y: 95
                    }, {
                        x: 86, y: 86
                    }, {
                        x: 85, y: 120
                    }, {
                        x: 85, y: 85
                    }, {
                        x: 84, y: 84
                    }, {
                        x: 84, y: 56
                    }, {
                        x: 80, y: 60
                    }, {
                        x: 75, y: 75
                    }, {
                        x: 72, y: 72
                    }, {
                        x: 68, y: 38
                    }, {
                        x: 64, y: 64
                    }, {
                        x: 64, y: 48
                    }, {
                        x: 60, y: 90
                    }, {
                        x: 60, y: 60
                    }, {
                        x: 60, y: 45
                    }, {
                        x: 60, y: 40
                    }, {
                        x: 56, y: 56
                    }, {
                        x: 52, y: 52
                    }, {
                        x: 50, y: 50
                    }, {
                        x: 46, y: 63
                    }, {
                        x: 46, y: 60
                    }, {
                        x: 44, y: 44
                    }, {
                        x: 43, y: 64
                    }, {
                        x: 40, y: 40
                    }, {
                        x: 38, y: 38
                    }, {
                        x: 34, y: 34
                    }], _acceptableWideValuesEDS: [{
                        x: 2560, y: 1440
                    }, {
                        x: 2471, y: 753
                    }, {
                        x: 2399, y: 576
                    }, {
                        x: 2398, y: 1642
                    }, {
                        x: 2398, y: 576
                    }, {
                        x: 2100, y: 753
                    }, {
                        x: 2048, y: 1536
                    }, {
                        x: 2021, y: 576
                    }, {
                        x: 2020, y: 576
                    }, {
                        x: 1920, y: 1080
                    }, {
                        x: 1919, y: 1200
                    }, {
                        x: 1919, y: 1079
                    }, {
                        x: 1831, y: 540
                    }, {
                        x: 1830, y: 1391
                    }, {
                        x: 1830, y: 540
                    }, {
                        x: 1795, y: 448
                    }, {
                        x: 1793, y: 448
                    }, {
                        x: 1593, y: 896
                    }, {
                        x: 1562, y: 540
                    }, {
                        x: 1561, y: 1069
                    }, {
                        x: 1561, y: 540
                    }, {
                        x: 1501, y: 448
                    }, {
                        x: 1499, y: 1028
                    }, {
                        x: 1440, y: 1291
                    }, {
                        x: 1440, y: 810
                    }, {
                        x: 1366, y: 768
                    }, {
                        x: 1351, y: 380
                    }, {
                        x: 1315, y: 448
                    }, {
                        x: 1280, y: 800
                    }, {
                        x: 1280, y: 720
                    }, {
                        x: 1277, y: 320
                    }, {
                        x: 1276, y: 320
                    }, {
                        x: 1191, y: 320
                    }, {
                        x: 1138, y: 640
                    }, {
                        x: 1080, y: 789
                    }, {
                        x: 1067, y: 320
                    }, {
                        x: 1066, y: 810
                    }, {
                        x: 1024, y: 768
                    }, {
                        x: 1021, y: 448
                    }, {
                        x: 1012, y: 693
                    }, {
                        x: 981, y: 320
                    }, {
                        x: 935, y: 320
                    }, {
                        x: 934, y: 320
                    }, {
                        x: 854, y: 480
                    }, {
                        x: 853, y: 480
                    }, {
                        x: 796, y: 448
                    }, {
                        x: 770, y: 485
                    }, {
                        x: 754, y: 424
                    }, {
                        x: 725, y: 320
                    }, {
                        x: 724, y: 560
                    }, {
                        x: 724, y: 320
                    }, {
                        x: 672, y: 602
                    }, {
                        x: 648, y: 320
                    }, {
                        x: 640, y: 320
                    }, {
                        x: 598, y: 296
                    }, {
                        x: 580, y: 290
                    }, {
                        x: 562, y: 316
                    }, {
                        x: 480, y: 270
                    }, {
                        x: 470, y: 264
                    }, {
                        x: 420, y: 320
                    }, {
                        x: 420, y: 265
                    }, {
                        x: 420, y: 236
                    }, {
                        x: 420, y: 95
                    }, {
                        x: 400, y: 300
                    }, {
                        x: 395, y: 270
                    }, {
                        x: 380, y: 239
                    }, {
                        x: 380, y: 214
                    }, {
                        x: 380, y: 181
                    }, {
                        x: 370, y: 208
                    }, {
                        x: 367, y: 329
                    }, {
                        x: 366, y: 206
                    }, {
                        x: 347, y: 195
                    }, {
                        x: 327, y: 245
                    }, {
                        x: 320, y: 120
                    }, {
                        x: 313, y: 235
                    }, {
                        x: 296, y: 145
                    }, {
                        x: 290, y: 145
                    }, {
                        x: 285, y: 195
                    }, {
                        x: 275, y: 206
                    }, {
                        x: 267, y: 150
                    }, {
                        x: 262, y: 235
                    }, {
                        x: 258, y: 194
                    }, {
                        x: 243, y: 137
                    }, {
                        x: 219, y: 150
                    }, {
                        x: 213, y: 120
                    }, {
                        x: 210, y: 207
                    }, {
                        x: 210, y: 204
                    }, {
                        x: 210, y: 188
                    }, {
                        x: 181, y: 102
                    }, {
                        x: 178, y: 100
                    }, {
                        x: 177, y: 133
                    }, {
                        x: 175, y: 120
                    }, {
                        x: 164, y: 115
                    }, {
                        x: 160, y: 120
                    }, {
                        x: 154, y: 116
                    }, {
                        x: 150, y: 134
                    }, {
                        x: 150, y: 103
                    }, {
                        x: 150, y: 84
                    }, {
                        x: 144, y: 108
                    }, {
                        x: 136, y: 102
                    }, {
                        x: 124, y: 115
                    }, {
                        x: 120, y: 90
                    }, {
                        x: 112, y: 84
                    }, {
                        x: 108, y: 72
                    }, {
                        x: 84, y: 56
                    }, {
                        x: 80, y: 60
                    }, {
                        x: 68, y: 38
                    }, {
                        x: 64, y: 48
                    }, {
                        x: 60, y: 45
                    }, {
                        x: 60, y: 40
                    }], _acceptableSquareValuesEDS: [{
                        x: 2470, y: 2470
                    }, {
                        x: 2398, y: 2398
                    }, {
                        x: 2100, y: 2100
                    }, {
                        x: 2020, y: 2020
                    }, {
                        x: 1793, y: 1793
                    }, {
                        x: 1562, y: 1562
                    }, {
                        x: 1561, y: 1561
                    }, {
                        x: 1440, y: 1440
                    }, {
                        x: 1350, y: 1350
                    }, {
                        x: 1315, y: 1315
                    }, {
                        x: 1276, y: 1276
                    }, {
                        x: 1206, y: 1206
                    }, {
                        x: 1190, y: 1190
                    }, {
                        x: 1080, y: 1080
                    }, {
                        x: 1051, y: 1051
                    }, {
                        x: 1021, y: 1021
                    }, {
                        x: 980, y: 980
                    }, {
                        x: 938, y: 938
                    }, {
                        x: 934, y: 934
                    }, {
                        x: 896, y: 896
                    }, {
                        x: 864, y: 864
                    }, {
                        x: 818, y: 818
                    }, {
                        x: 800, y: 800
                    }, {
                        x: 770, y: 770
                    }, {
                        x: 756, y: 756
                    }, {
                        x: 754, y: 424
                    }, {
                        x: 720, y: 720
                    }, {
                        x: 672, y: 672
                    }, {
                        x: 666, y: 666
                    }, {
                        x: 640, y: 640
                    }, {
                        x: 594, y: 594
                    }, {
                        x: 592, y: 592
                    }, {
                        x: 588, y: 588
                    }, {
                        x: 580, y: 290
                    }, {
                        x: 576, y: 576
                    }, {
                        x: 562, y: 316
                    }, {
                        x: 553, y: 553
                    }, {
                        x: 518, y: 518
                    }, {
                        x: 496, y: 496
                    }, {
                        x: 480, y: 480
                    }, {
                        x: 464, y: 464
                    }, {
                        x: 448, y: 448
                    }, {
                        x: 441, y: 441
                    }, {
                        x: 430, y: 430
                    }, {
                        x: 424, y: 424
                    }, {
                        x: 423, y: 423
                    }, {
                        x: 420, y: 420
                    }, {
                        x: 402, y: 402
                    }, {
                        x: 380, y: 380
                    }, {
                        x: 370, y: 370
                    }, {
                        x: 361, y: 361
                    }, {
                        x: 343, y: 343
                    }, {
                        x: 336, y: 336
                    }, {
                        x: 329, y: 329
                    }, {
                        x: 320, y: 320
                    }, {
                        x: 316, y: 316
                    }, {
                        x: 313, y: 313
                    }, {
                        x: 307, y: 307
                    }, {
                        x: 300, y: 300
                    }, {
                        x: 290, y: 290
                    }, {
                        x: 288, y: 288
                    }, {
                        x: 280, y: 280
                    }, {
                        x: 270, y: 270
                    }, {
                        x: 265, y: 265
                    }, {
                        x: 262, y: 262
                    }, {
                        x: 258, y: 258
                    }, {
                        x: 253, y: 253
                    }, {
                        x: 248, y: 248
                    }, {
                        x: 245, y: 245
                    }, {
                        x: 240, y: 240
                    }, {
                        x: 235, y: 235
                    }, {
                        x: 234, y: 234
                    }, {
                        x: 224, y: 224
                    }, {
                        x: 215, y: 215
                    }, {
                        x: 213, y: 213
                    }, {
                        x: 210, y: 210
                    }, {
                        x: 208, y: 208
                    }, {
                        x: 200, y: 200
                    }, {
                        x: 181, y: 181
                    }, {
                        x: 180, y: 180
                    }, {
                        x: 173, y: 173
                    }, {
                        x: 170, y: 170
                    }, {
                        x: 164, y: 164
                    }, {
                        x: 160, y: 160
                    }, {
                        x: 151, y: 151
                    }, {
                        x: 150, y: 150
                    }, {
                        x: 148, y: 148
                    }, {
                        x: 135, y: 135
                    }, {
                        x: 132, y: 132
                    }, {
                        x: 131, y: 131
                    }, {
                        x: 128, y: 128
                    }, {
                        x: 120, y: 120
                    }, {
                        x: 110, y: 110
                    }, {
                        x: 108, y: 108
                    }, {
                        x: 105, y: 105
                    }, {
                        x: 100, y: 100
                    }, {
                        x: 99, y: 99
                    }, {
                        x: 95, y: 95
                    }, {
                        x: 86, y: 86
                    }, {
                        x: 85, y: 85
                    }, {
                        x: 84, y: 84
                    }, {
                        x: 75, y: 75
                    }, {
                        x: 72, y: 72
                    }, {
                        x: 64, y: 64
                    }, {
                        x: 60, y: 60
                    }, {
                        x: 56, y: 56
                    }, {
                        x: 52, y: 52
                    }, {
                        x: 50, y: 50
                    }, {
                        x: 44, y: 44
                    }, {
                        x: 40, y: 40
                    }, {
                        x: 38, y: 38
                    }, {
                        x: 34, y: 34
                    }], _acceptableTallValuesEDS: [{
                        x: 720, y: 1280
                    }, {
                        x: 810, y: 1080
                    }, {
                        x: 789, y: 1080
                    }, {
                        x: 788, y: 1080
                    }, {
                        x: 720, y: 1080
                    }, {
                        x: 584, y: 800
                    }, {
                        x: 556, y: 740
                    }, {
                        x: 540, y: 720
                    }, {
                        x: 526, y: 720
                    }, {
                        x: 480, y: 720
                    }, {
                        x: 480, y: 640
                    }, {
                        x: 467, y: 640
                    }, {
                        x: 426, y: 640
                    }, {
                        x: 464, y: 636
                    }, {
                        x: 370, y: 500
                    }, {
                        x: 464, y: 497
                    }, {
                        x: 320, y: 426
                    }, {
                        x: 318, y: 424
                    }, {
                        x: 310, y: 424
                    }, {
                        x: 282, y: 424
                    }, {
                        x: 380, y: 407
                    }, {
                        x: 288, y: 384
                    }, {
                        x: 278, y: 370
                    }, {
                        x: 265, y: 362
                    }, {
                        x: 260, y: 356
                    }, {
                        x: 234, y: 320
                    }, {
                        x: 237, y: 316
                    }, {
                        x: 230, y: 316
                    }, {
                        x: 210, y: 316
                    }, {
                        x: 219, y: 300
                    }, {
                        x: 200, y: 300
                    }, {
                        x: 215, y: 294
                    }, {
                        x: 172, y: 258
                    }, {
                        x: 180, y: 245
                    }, {
                        x: 150, y: 225
                    }, {
                        x: 207, y: 210
                    }, {
                        x: 156, y: 208
                    }, {
                        x: 152, y: 208
                    }, {
                        x: 138, y: 208
                    }, {
                        x: 145, y: 193
                    }, {
                        x: 132, y: 181
                    }, {
                        x: 107, y: 160
                    }, {
                        x: 147, y: 150
                    }, {
                        x: 100, y: 135
                    }, {
                        x: 99, y: 135
                    }, {
                        x: 100, y: 120
                    }, {
                        x: 85, y: 120
                    }, {
                        x: 60, y: 90
                    }, {
                        x: 43, y: 64
                    }, {
                        x: 46, y: 63
                    }, {
                        x: 46, y: 60
                    }], _acceptableWidthsEDS: [2560, 2471, 2470, 2399, 2398, 2100, 2048, 2021, 2020, 1920, 1919, 1831, 1830, 1795, 1793, 1593, 1562, 1561, 1501, 1499, 1440, 1366, 1351, 1350, 1315, 1280, 1277, 1276, 1206, 1191, 1190, 1138, 1080, 1067, 1066, 1051, 1024, 1021, 1012, 981, 980, 938, 935, 934, 896, 864, 854, 853, 818, 810, 800, 796, 789, 788, 770, 756, 754, 725, 724, 720, 672, 666, 648, 640, 598, 594, 592, 588, 584, 580, 576, 562, 556, 553, 540, 526, 518, 496, 480, 470, 467, 464, 448, 441, 430, 426, 424, 423, 420, 402, 400, 395, 380, 370, 367, 366, 361, 347, 343, 336, 329, 327, 320, 318, 316, 313, 310, 307, 300, 296, 290, 288, 285, 282, 280, 278, 275, 270, 267, 265, 262, 260, 258, 253, 248, 245, 243, 240, 237, 235, 234, 230, 224, 219, 215, 213, 210, 208, 207, 200, 181, 180, 178, 177, 175, 173, 172, 170, 164, 160, 156, 154, 152, 151, 150, 148, 147, 145, 144, 138, 136, 135, 132, 131, 128, 124, 120, 112, 110, 108, 107, 105, 100, 99, 95, 86, 85, 84, 80, 75, 72, 68, 64, 60, 56, 52, 50, 46, 44, 43, 40, 38, 34], _acceptableHeightsEDS: [2470, 2398, 2100, 2020, 1793, 1642, 1562, 1561, 1536, 1440, 1391, 1350, 1315, 1291, 1280, 1276, 1206, 1200, 1190, 1080, 1079, 1069, 1051, 1028, 1021, 980, 938, 934, 896, 864, 818, 810, 800, 789, 770, 768, 756, 753, 740, 720, 693, 672, 666, 640, 636, 602, 594, 592, 588, 576, 560, 553, 540, 518, 500, 497, 496, 485, 480, 464, 448, 441, 430, 426, 424, 423, 420, 407, 402, 384, 380, 370, 362, 361, 356, 343, 336, 329, 320, 316, 313, 307, 300, 296, 294, 290, 288, 280, 270, 265, 264, 262, 258, 253, 248, 245, 240, 239, 236, 235, 234, 225, 224, 215, 214, 213, 210, 208, 207, 206, 204, 200, 195, 194, 193, 188, 181, 180, 173, 170, 164, 160, 151, 150, 148, 145, 137, 135, 134, 133, 132, 131, 128, 120, 116, 115, 110, 108, 105, 103, 102, 100, 99, 95, 90, 86, 85, 84, 75, 72, 64, 63, 60, 56, 52, 50, 48, 45, 44, 40, 38, 34], makeCatalogImageUri: function makeCatalogImageUri(imageId, imageIdType, dimensions, forceImageResize, ignoreZeroLengths, requestedImage, imageChildId, imageContentType) {
                    var url = null;
                    var idTypes = MS.Entertainment.Data.ImageIdType;
                    var verifiedRequestedImage;
                    var verifiedDimensions;
                    var verifiedImageIdType;
                    var paramArray = [];
                    if (!imageId)
                        throw"Must specify a valid catalog image guid";
                    if (imageContentType === null || imageContentType === undefined)
                        imageContentType = MS.Entertainment.ImageContentType.jpeg;
                    if (imageIdType === null || imageIdType === undefined)
                        verifiedImageIdType = MS.Entertainment.Data.ImageIdType.image;
                    else {
                        MS.Entertainment.Utilities.validateIsMemberOrThrow(imageIdType, MS.Entertainment.Data.ImageIdType);
                        verifiedImageIdType = imageIdType
                    }
                    if (!requestedImage)
                        verifiedRequestedImage = this._getStringFromRequestedImage(MS.Entertainment.ImageRequested.primaryImage);
                    else {
                        MS.Entertainment.Utilities.validateIsMemberOrThrow(requestedImage, MS.Entertainment.ImageRequested);
                        verifiedRequestedImage = this._getStringFromRequestedImage(requestedImage)
                    }
                    verifiedDimensions = {
                        x: 0, y: 0
                    };
                    if (dimensions) {
                        if (dimensions.hasOwnProperty("x") && dimensions.x)
                            verifiedDimensions.x = dimensions.x;
                        if (dimensions.hasOwnProperty("y") && dimensions.y)
                            verifiedDimensions.y = dimensions.y
                    }
                    try {
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        MS.Entertainment.UI.Shell.ImageLoader._initializeEndpointCache();
                        switch (verifiedImageIdType) {
                            case idTypes.movie:
                            case idTypes.editorialMovie:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace))
                                    url = "{0}/movie/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.artist:
                            case idTypes.editorialArtist:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                                    url = "{0}/music/artist/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.album:
                            case idTypes.editorialAlbum:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                                    url = "{0}/music/album/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.track:
                            case idTypes.editorialTrack:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                                    url = "{0}/music/track/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.musicVideo:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicVideosMarketplace))
                                    url = "{0}/music/musicvideo/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.movieTrailer:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.movieTrailersMarketplace))
                                    url = "{0}/movieTrailer/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.playlist:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                                    url = "{0}/music/playlist/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.podcast:
                                url = "{0}/podcast/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.network:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                    url = "{0}/tv/network/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.series:
                            case idTypes.editorialSeries:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                    url = "{0}/tv/series/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.episode:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                    url = "{0}/tv/episode/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.application:
                                url = "{0}/apps/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.season:
                            case idTypes.editorialSeason:
                                if (typeof imageChildId === "undefined")
                                    throw"imageChildId must be specified for seasons";
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                    url = "{0}/tv/series/{1}/seasons/{2}/{3}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, imageChildId, verifiedRequestedImage);
                                break;
                            case idTypes.image:
                                url = "{0}/image/{1}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId);
                                break;
                            case idTypes.studio:
                                if (typeof imageChildId === "undefined")
                                    throw"imageChildId must be specified for studios";
                                url = "{0}/{1}/studio/{2}/{3}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageChildId, imageId, verifiedRequestedImage);
                                break;
                            default:
                                throw"unknown imageidtype";
                        }
                    }
                    catch(error) {
                        return null
                    }
                    if (forceImageResize)
                        paramArray.push({
                            name: "resize", value: "true"
                        });
                    var scaleFactor = this._getCurrentScaleFactor();
                    var calcSize = this._calculateImageUriSize(verifiedDimensions, scaleFactor, MS.Entertainment.UI.Shell.ImageLoader.ImageService.Zune);
                    if (verifiedDimensions.x > 0 || !ignoreZeroLengths)
                        paramArray.push({
                            name: "width", value: calcSize.x.toString()
                        });
                    if (verifiedDimensions.y > 0 || !ignoreZeroLengths)
                        paramArray.push({
                            name: "height", value: calcSize.y.toString()
                        });
                    if (imageContentType)
                        paramArray.push({
                            name: "contenttype", value: imageContentType
                        });
                    if (url && paramArray.length > 0)
                        url = url + this._generateUrlParamSubstring(paramArray);
                    return url
                }, _calculateImageUriSize: function _calculateImageUriSize(size, scaleFactor, imageService) {
                    var calcSize = {
                            x: size.x, y: size.y
                        };
                    if (size.x === 0)
                        if (size.y === 0)
                            calcSize = this._findAcceptableWidthHeight(this._defaultImageSize.x * scaleFactor, this._defaultImageSize.y * scaleFactor, imageService);
                        else
                            calcSize = this._findMatchingWidth(size.y * scaleFactor, imageService);
                    else if (size.y === 0)
                        calcSize = this._findMatchingHeight(size.x * scaleFactor, imageService);
                    else {
                        var scaledX = size.x * scaleFactor;
                        var scaledY = size.y * scaleFactor;
                        calcSize = this._findAcceptableWidthHeight(scaledX, scaledY, imageService)
                    }
                    return calcSize
                }, _findAcceptableWidthHeight: function _findAcceptableWidthHeight(width, height, imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    var calcSize = {
                            x: -1, y: 0
                        };
                    var index = 0;
                    var aspectAcceptableValues = [];
                    var searchSet = [];
                    if (width === height)
                        aspectAcceptableValues = ImageLoader._getAcceptableSquareValuesArray(imageService);
                    else if (width > height)
                        aspectAcceptableValues = ImageLoader._getAcceptableWideValuesArray(imageService);
                    else
                        aspectAcceptableValues = ImageLoader._getAcceptableTallValuesArray(imageService);
                    for (var index = 0; index < aspectAcceptableValues.length; index++)
                        if (calcSize.x > -1)
                            if (calcSize.x === aspectAcceptableValues[index].x)
                                searchSet.push(aspectAcceptableValues[index]);
                            else
                                break;
                        else if (aspectAcceptableValues[index].x <= width) {
                            if ((aspectAcceptableValues[index].x < width) && (index > 0))
                                index--;
                            calcSize.x = aspectAcceptableValues[index].x;
                            searchSet.push(aspectAcceptableValues[index])
                        }
                    for (var index = 0; index < searchSet.length; index++)
                        if (searchSet[index].y <= height) {
                            calcSize.y = searchSet[index].y;
                            break
                        }
                    if (calcSize.x === -1) {
                        var size = aspectAcceptableValues[aspectAcceptableValues.length - 1];
                        calcSize.x = size.x;
                        calcSize.y = size.y
                    }
                    if (calcSize.y === 0)
                        calcSize.y = searchSet[searchSet.length - 1].y;
                    return calcSize
                }, _findMatchingWidth: function _findMatchingWidth(height, imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    var acceptableHeights = ImageLoader._getAcceptableHeightsArray(imageService);
                    var acceptableValues = ImageLoader._getAcceptableValuesArray(imageService);
                    var calcSize = {
                            x: 0, y: height
                        };
                    var index = 0;
                    while (index < acceptableHeights.length - 1 && height < acceptableHeights[index])
                        index = index + 1;
                    calcSize.y = acceptableHeights[index];
                    var i;
                    for (i = 0; i < acceptableValues.length; i++)
                        if (acceptableValues[i].y === calcSize.y) {
                            calcSize.x = acceptableValues[i].x;
                            break
                        }
                    return calcSize
                }, _findMatchingHeight: function _findMatchingHeight(width, imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    var acceptableWidths = ImageLoader._getAcceptableWidthsArray(imageService);
                    var acceptableValues = ImageLoader._getAcceptableValuesArray(imageService);
                    var calcSize = {
                            x: width, y: 0
                        };
                    var index = 0;
                    while (index < acceptableWidths.length - 1 && width < acceptableWidths[index])
                        index = index + 1;
                    calcSize.x = acceptableWidths[index];
                    var i;
                    for (i = 0; i < acceptableValues.length; i++)
                        if (acceptableValues[i].x === calcSize.x) {
                            calcSize.y = acceptableValues[i].y;
                            break
                        }
                    return calcSize
                }, _generateUrlParamSubstring: function _generateUrlParamSubstring(params) {
                    var paramString = "";
                    for (var i = 0; i < params.length; i++) {
                        if (i === 0)
                            paramString = paramString + "?";
                        else
                            paramString = paramString + "&";
                        paramString = paramString + params[i].name.toString();
                        paramString = paramString + "=";
                        paramString = paramString + params[i].value.toString()
                    }
                    return paramString
                }, _getStringFromRequestedImage: function _getStringFromRequestedImage(requestedImage) {
                    for (var k in MS.Entertainment.ImageRequested)
                        if (MS.Entertainment.ImageRequested[k] === requestedImage)
                            return k;
                    MS.Entertainment.UI.Shell.assert(false, "Invalid value for ImageRequested");
                    return null
                }, imageManager: {get: function getImageManager() {
                        if (!this._imageManager)
                            this._imageManager = new Microsoft.Entertainment.ImageManager;
                        return this._imageManager
                    }}, cacheImage: function cacheUrl(url, defaultImage) {
                    return this.imageManager.retrieveImageFromUrlAsync(Microsoft.Entertainment.NetworkUsage.normal, url, String.empty, defaultImage)
                }, calculateScaledSize: function calculateScaledSize(width, height) {
                    var size = {
                            x: 0, y: 0
                        };
                    if (width)
                        size.x = width;
                    if (height)
                        size.y = height;
                    MS.Entertainment.UI.Shell.assert(size.x || (MS.Entertainment.UI.Shell.ImageLoader._acceptableWidthsEDS.indexOf(size.x) > -1), "ImageLoader: pixel width is not an acceptable value");
                    MS.Entertainment.UI.Shell.assert(size.y || (MS.Entertainment.UI.Shell.ImageLoader._acceptableHeightsEDS.indexOf(size.y) > -1), "ImageLoader: pixel height is not an acceptable value");
                    var scaleFactor = this._getCurrentScaleFactor();
                    return this._calculateImageUriSize(size, scaleFactor)
                }, _getCurrentScaleFactor: function _getCurrentScaleFactor() {
                    var scaleFactor = 1.0;
                    switch (MS.Entertainment.Utilities.getDisplayProperties().resolutionScale) {
                        case Windows.Graphics.Display.ResolutionScale.scale180Percent:
                            scaleFactor = 1.4;
                            break;
                        case Windows.Graphics.Display.ResolutionScale.scale140Percent:
                        case Windows.Graphics.Display.ResolutionScale.scale100Percent:
                            scaleFactor = 1.0;
                            break;
                        default:
                            MS.Entertainment.UI.Shell.assert(false, "Unknown scale size requested");
                            scaleFactor = 1.0;
                            break
                    }
                    return scaleFactor
                }, getServiceImageRequestSize: function getServiceImageRequestSize(initialSize) {
                    var scaleFactor = this._getCurrentScaleFactor();
                    return this._calculateImageUriSize(initialSize, scaleFactor)
                }, getServiceImageUrl: function getServiceImageUrl(mediaItem, width, height, requestedImage, imageIdType, defaultImageUri, imageContentType) {
                    var resultPromise;
                    var imageId = null;
                    var data = null;
                    var convertedItem = null;
                    var verifiedRequestedImage;
                    var asyncUri;
                    if (!mediaItem)
                        return WinJS.Promise.wrap();
                    if (width === "screen")
                        width = MS.Entertainment.Utilities.getLandscapeScreenSize().width;
                    if (height === "screen")
                        width = MS.Entertainment.Utilities.getLandscapeScreenSize().height;
                    if (!requestedImage)
                        verifiedRequestedImage = MS.Entertainment.ImageRequested.primaryImage;
                    else {
                        MS.Entertainment.Utilities.validateIsMemberOrThrow(requestedImage, MS.Entertainment.ImageRequested);
                        verifiedRequestedImage = requestedImage
                    }
                    if (mediaItem.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem) {
                        convertedItem = MS.Entertainment.Utilities.convertEditorialItem(mediaItem);
                        mediaItem.mediaType = convertedItem.mediaType;
                        mediaItem.videoType = convertedItem.videoType;
                        imageIdType = imageIdType || convertedItem.serviceImageType;
                        if (!mediaItem.mediaType && MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Hub)
                            mediaItem.mediaType = Microsoft.Entertainment.Queries.ObjectType.editorial
                    }
                    if (mediaItem.serviceId && mediaItem.serviceId !== MS.Entertainment.Utilities.EMPTY_GUID)
                        imageId = mediaItem.serviceId;
                    var mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.defaultImage;
                    height = height || MS.Entertainment.UI.Shell.ImageLoader.DefaultThumbnailSizes.defaultWidth;
                    imageIdType = imageIdType || mediaItem.serviceImageType;
                    switch (mediaItem.mediaType || mediaItem.serviceType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo) {
                                mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.musicVideo;
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.image;
                                width = width || 420
                            }
                            else if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode) {
                                mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.tvEpisode;
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.episode;
                                width = width || height
                            }
                            else {
                                mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.movie;
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.movie;
                                width = width || MS.Entertainment.UI.Shell.ImageLoader.DefaultThumbnailSizes.video
                            }
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.tvSeries;
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.series;
                            width = width || height;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.tvSeason;
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.season;
                            imageId = mediaItem.seriesId || (convertedItem ? convertedItem.seriesId : null);
                            data = mediaItem.seasonNumber;
                            if ((data === null || data === undefined) && convertedItem)
                                data = convertedItem.seasonNumber;
                            width = width || height;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.artist;
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.artist;
                            width = width || 420;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                            mediaItemDefaultImage = "";
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.artist;
                            width = width || 420;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album;
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.album;
                            width = width || height;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            if (mediaItem.hasAlbumServiceId) {
                                mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album;
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.album;
                                imageId = mediaItem.albumServiceId
                            }
                            else {
                                mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.track;
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.track;
                                verifiedRequestedImage = requestedImage || MS.Entertainment.ImageRequested.albumImage
                            }
                            width = width || height;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.game;
                            if (mediaItem.hexTitleId) {
                                imageId = parseInt(mediaItem.hexTitleId);
                                data = parseInt(mediaItem.hexTitleId);
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.xboxGame
                            }
                            width = width || 234;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.playlist;
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.playlist;
                            width = width || height;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.editorial:
                            imageIdType = MS.Entertainment.Data.ImageIdType.image;
                            width = width || height;
                            break;
                        case MS.Entertainment.Data.Augmenter.ServiceTypes.wmis:
                        case MS.Entertainment.Data.Augmenter.ServiceTypes.audioAd:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            width = width || 234;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.genre:
                            width = width || 240;
                            break;
                        default:
                            if (mediaItem.imageResizeUri)
                                width = width || 240;
                            else {
                                MS.Entertainment.UI.Shell.assert(false, "Unknown media type or service type had image requested, MediaType: " + mediaItem.mediaType + " ServiceType: " + mediaItem.serviceType + " ImageIdType: " + imageIdType);
                                width = 240
                            }
                            break
                    }
                    if (imageIdType === MS.Entertainment.Data.ImageIdType.image && mediaItem.imageId && mediaItem.imageId !== MS.Entertainment.Utilities.EMPTY_GUID)
                        imageId = mediaItem.imageId;
                    if (typeof defaultImageUri !== "string")
                        defaultImageUri = mediaItemDefaultImage;
                    var calculatedSize = MS.Entertainment.UI.Shell.ImageLoader.calculateScaledSize(width, height);
                    if (this.isImageManagerV2Supported(mediaItem.mediaType))
                        resultPromise = this.getImageManagerV2Image(mediaItem, calculatedSize.x, calculatedSize.y, defaultImageUri);
                    else {
                        if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.person && MS.Entertainment.Utilities.isValidServiceId(mediaItem.zuneId))
                            asyncUri = MS.Entertainment.UI.Shell.ImageLoader.getNewImageServiceUri(mediaItem, calculatedSize.x, calculatedSize.y);
                        else if (mediaItem.imageResizeUri)
                            asyncUri = MS.Entertainment.UI.Shell.ImageLoader.appendResizeParameters(mediaItem.imageResizeUri, calculatedSize.x, calculatedSize.y);
                        else if (mediaItem.imageUri)
                            asyncUri = mediaItem.imageUri;
                        else if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                            asyncUri = MS.Entertainment.UI.Shell.ImageLoader.getNewImageServiceUri(mediaItem, calculatedSize.x, calculatedSize.y);
                        else if (MS.Entertainment.Utilities.isValidWatchlistId(mediaItem.watchlistId) && mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video)
                            asyncUri = MS.Entertainment.UI.Shell.ImageLoader.getNewImageServiceUri(mediaItem, calculatedSize.x, calculatedSize.y);
                        else if (imageIdType !== null && imageIdType !== undefined && imageId && imageId !== MS.Entertainment.Utilities.EMPTY_GUID) {
                            var sizeUnscaled = {
                                    x: width, y: height
                                };
                            asyncUri = this.makeCatalogImageUri(imageId, imageIdType, sizeUnscaled, true, false, verifiedRequestedImage, data, imageContentType)
                        }
                        if (asyncUri)
                            if (MS.Entertainment.UI.Shell.ImageLoader.isPackageUrl(asyncUri))
                                resultPromise = WinJS.Promise.wrap(asyncUri);
                            else
                                resultPromise = this.imageManager.retrieveImageFromUrlAsync(Microsoft.Entertainment.NetworkUsage.normal, asyncUri, mediaItem.filePath || String.empty, defaultImageUri);
                        else if (mediaItem.filePath && !MS.Entertainment.UI.Shell.ImageLoader.isWebUrl(mediaItem.filePath) && !MS.Entertainment.UI.Shell.ImageLoader.isBlobUrl(mediaItem.filePath) && !MS.Entertainment.UI.Shell.ImageLoader.isStreamingUrl(mediaItem.filePath))
                            resultPromise = this.imageManager.retrieveImageFromUrlAsync(Microsoft.Entertainment.NetworkUsage.normal, String.empty, mediaItem.filePath, defaultImageUri);
                        else if (mediaItem.imageUri)
                            if (mediaItem.filePath && MS.Entertainment.UI.Shell.ImageLoader.isBlobUrl(mediaItem.filePath) && MS.Entertainment.UI.Shell.ImageLoader.isBlobUrl(mediaItem.imageUri))
                                resultPromise = WinJS.Promise.wrap(mediaItem.imageUri);
                            else
                                resultPromise = this.imageManager.retrieveImageFromUrlAsync(Microsoft.Entertainment.NetworkUsage.normal, mediaItem.imageUri, mediaItem.filePath || String.empty, defaultImageUri);
                        else
                            resultPromise = WinJS.Promise.wrap(defaultImageUri)
                    }
                    return resultPromise
                }, getImageManagerV2Image: function getImageManagerV2Image(mediaItem, width, height, defaultImageUri) {
                    MS.Entertainment.UI.Shell.assert(mediaItem, "ImageLoader::getImageManagerV2Image() A media item is required.");
                    MS.Entertainment.UI.Shell.assert(mediaItem && (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track), "ImageLoader::getImageManagerV2Image() Unsupported media type.  The mediaType must be album or track.");
                    var resultPromise;
                    var imageUri = mediaItem.imageResizeUri || mediaItem.imageUri;
                    var cacheType = mediaItem.inCollection ? Microsoft.Entertainment.ImageCacheType.permanent : Microsoft.Entertainment.ImageCacheType.temporary;
                    if (imageUri)
                        resultPromise = this.imageManager.retrieveImageFromBaseUrlAsync(imageUri, width, height, Microsoft.Entertainment.NetworkUsage.normal, Microsoft.Entertainment.ResolutionFallback.betterQuality, cacheType, defaultImageUri);
                    else if (MS.Entertainment.Utilities.isValidServiceId(mediaItem.zuneId))
                        resultPromise = this.imageManager.retrieveImageForMediaAsync(Microsoft.Entertainment.ImageNamespace.music, mediaItem.zuneId, width, height, Microsoft.Entertainment.ImageSourceFilterFlag.none, Microsoft.Entertainment.ImageResizeMode.scale, Microsoft.Entertainment.NetworkUsage.normal, Microsoft.Entertainment.ResolutionFallback.betterQuality, cacheType, defaultImageUri);
                    else
                        resultPromise = WinJS.Promise.wrap(defaultImageUri);
                    return resultPromise
                }, getNewImageServiceUri: function getNewImageServiceUri(mediaItem, width, height, sources) {
                    if (!mediaItem || !MS.Entertainment.Utilities.isValidServiceId(mediaItem.zuneId))
                        return String.empty;
                    var imageServiceNamespace;
                    if (MS.Entertainment.Utilities.isMusicApp)
                        imageServiceNamespace = "music";
                    else if (MS.Entertainment.Utilities.isVideoApp)
                        imageServiceNamespace = "video";
                    else
                        MS.Entertainment.fail("Unknown namespace in getNewImageServiceUri");
                    var uri = "{0}/catalog/{1}.{2}/image".format(MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_MusicImageService), imageServiceNamespace, mediaItem.zuneId);
                    var params = {locale: MS.Entertainment.Endpoint.getCulture()};
                    if (width > 0 && height > 0) {
                        params.w = width;
                        params.h = height
                    }
                    if (sources)
                        params.sources = sources;
                    return MS.Entertainment.Utilities.UriFactory.appendQuery(uri, params)
                }, getMediaItemDefaultImageUrl: function getMediaItemDefaultImageUrl(item) {
                    if (!item)
                        return MS.Entertainment.UI.Shell.ImageLoader._commonDefault;
                    var mediaType = item.mediaType;
                    var videoType = MS.Entertainment.Platform.PlaybackHelpers && MS.Entertainment.Platform.PlaybackHelpers.isVideo(item) ? item.videoType : Microsoft.Entertainment.Queries.VideoType.other;
                    if (item.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem) {
                        var convertedItem = MS.Entertainment.Utilities.convertEditorialItem(item);
                        mediaType = convertedItem.mediaType;
                        videoType = convertedItem.videoType
                    }
                    switch (mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            if (videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo)
                                return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.musicVideo;
                            else if (videoType === Microsoft.Entertainment.Queries.VideoType.movie)
                                return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.movie;
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.otherVideo;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.tvSeries;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.tvSeason;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.artist;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album;
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.game;
                        default:
                            return MS.Entertainment.UI.Shell.ImageLoader._commonDefault
                    }
                }, registerMediaItemImageUrlCallback: function registerMediaItemImageUrlCallback(mediaItem, callback, width, height) {
                    if (!mediaItem.mediaItemImageUrlCallback) {
                        var observable = WinJS.Binding.as(mediaItem);
                        var pendingImageUpdate = true;
                        var mediaItemImageUrlCallback = function calculateNewUrl() {
                                if (!pendingImageUpdate) {
                                    pendingImageUpdate = true;
                                    return MS.Entertainment.UI.Shell.ImageLoader.getServiceImageUrl(mediaItem, width, height).then(function deliverPrimaryUrl(url) {
                                            callback(url);
                                            pendingImageUpdate = false
                                        })
                                }
                            };
                        observable.bind("serviceType", mediaItemImageUrlCallback);
                        observable.bind("mediaType", mediaItemImageUrlCallback);
                        observable.bind("videoType", mediaItemImageUrlCallback);
                        observable.bind("serviceId", mediaItemImageUrlCallback);
                        observable.bind("imageId", mediaItemImageUrlCallback);
                        observable.bind("filePath", mediaItemImageUrlCallback);
                        observable.bind("imageUri", mediaItemImageUrlCallback);
                        pendingImageUpdate = false;
                        WinJS.Promise.timeout().then(function() {
                            mediaItemImageUrlCallback()
                        });
                        return {
                                observable: observable, mediaItemImageUrlCallback: mediaItemImageUrlCallback
                            }
                    }
                }, unregisterMediaItemImageUrlCallback: function unregisterMediaItemImageUrlCallback(token) {
                    var observable = token.observable;
                    var mediaItemImageUrlCallback = token.mediaItemImageUrlCallback;
                    observable.unbind("serviceType", mediaItemImageUrlCallback);
                    observable.unbind("mediaType", mediaItemImageUrlCallback);
                    observable.unbind("videoType", mediaItemImageUrlCallback);
                    observable.unbind("serviceId", mediaItemImageUrlCallback);
                    observable.unbind("imageId", mediaItemImageUrlCallback);
                    observable.unbind("filePath", mediaItemImageUrlCallback);
                    observable.unbind("imageUri", mediaItemImageUrlCallback)
                }, DefaultThumbnailSizes: {
                    defaultWidth: 320, video: 234
                }
        }), ImageControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Framework.ImageControl", null, function(element, options){}, {
                _cachedUrl: null, naturalWidth: null, naturalHeight: null, addLoadedClassToParent: false, _urlToRevoke: null, _urlRevoked: false, loadImage: function loadImage(target) {
                        this.revokeUrlIfNeeded();
                        if (String.isString(target) && (MS.Entertainment.UI.Shell.ImageLoader.isWebUrl(target) || MS.Entertainment.UI.Shell.ImageLoader.isFileUrl(target)))
                            return MS.Entertainment.UI.Shell.ImageLoader.cacheImage(target, String.empty);
                        else if (String.isString(target))
                            return WinJS.Promise.as(target);
                        else if (target.overrideItemUseUrl)
                            return MS.Entertainment.UI.Shell.ImageLoader.cacheImage(target.imagePrimaryUrl, String.empty);
                        else if (MS.Entertainment.Utilities.isAmsterdamApp && (!(target instanceof MS.Entertainment.Data.Augmenter.MediaBrowser.BaseDriveItem) && (target instanceof MS.Entertainment.Data.Augmenter.MediaBrowser.FolderItem || target instanceof MS.Entertainment.Data.Augmenter.MediaBrowser.PhotoItem || target instanceof MS.Entertainment.Data.Augmenter.MediaBrowser.VideoItem || target instanceof MS.Entertainment.Data.Augmenter.MediaBrowser.MusicItem))) {
                            var thumbnailMode = target.thumbnailMode;
                            var size;
                            if (this.desiredImageSize)
                                size = Math.max(this.desiredImageSize.width, this.desiredImageSize.height);
                            if (this.useScreenResolutionImage)
                                return MS.Entertainment.Hydrator.MediaBrowser.getScreenResolutionImage(this.target).then(function(image) {
                                        return this._createObjectUrl(image)
                                    }.bind(this));
                            else
                                return MS.Entertainment.Hydrator.MediaBrowser.hydrateThumbnail(target, thumbnailMode, size).then(function(hydrated) {
                                        return this._createObjectUrl(hydrated && hydrated.thumbnailUri)
                                    }.bind(this))
                        }
                        else if (target.mediaType || target.serviceType && target.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem || target.serviceType && target.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.wmis)
                            return this._loadImageFromTarget(target);
                        else if (target.imageUriOverride)
                            return WinJS.Promise.as(target.imageUriOverride);
                        else
                            return WinJS.Promise.as(target)
                    }, freeze: function freeze() {
                        this.skipImageResetOnThaw = this._urlRevoked;
                        MS.Entertainment.UI.Framework.ImageControl.prototype.freeze.call(this)
                    }, thaw: function thaw() {
                        MS.Entertainment.UI.Framework.ImageControl.prototype.thaw.call(this);
                        if (this._urlRevoked && this.target)
                            this._loadImage(this.target)
                    }, _createObjectUrl: function _createObjectUrl(image) {
                        var url = String.empty;
                        if (image) {
                            var useOneTimeOnly = !this.applyImageAsBackground;
                            var url = URL.createObjectURL(image, {oneTimeOnly: useOneTimeOnly});
                            if (!useOneTimeOnly) {
                                this._urlToRevoke = {
                                    url: url, image: image
                                };
                                this._urlRevoked = false
                            }
                        }
                        else if (this.applyImageAsBackground)
                            this.domElement.style.backgroundImage = this.defaultImagePath;
                        return url
                    }, _handleLoaded: function _handleLoaded(args) {
                        if (this._unloaded)
                            return;
                        this.naturalWidth = 0;
                        this.naturalHeight = 0;
                        if (args && args.target) {
                            this.naturalWidth = args.target.naturalWidth;
                            this.naturalHeight = args.target.naturalHeight
                        }
                        if (this.naturalWidth > this.naturalHeight) {
                            WinJS.Utilities.addClass(this.domElement, "wide");
                            WinJS.Utilities.removeClass(this.domElement, "tall")
                        }
                        else if (this.naturalWidth < this.naturalHeight) {
                            WinJS.Utilities.addClass(this.domElement, "tall");
                            WinJS.Utilities.removeClass(this.domElement, "wide")
                        }
                        else {
                            WinJS.Utilities.removeClass(this.domElement, "tall");
                            WinJS.Utilities.removeClass(this.domElement, "wide")
                        }
                        this.applyCSSClassesOnLoad(this.naturalWidth, this.naturalHeight);
                        if (this.addLoadedClassToParent && this.domElement.parentElement)
                            WinJS.Utilities.addClass(this.domElement.parentElement, "imageControl_loaded");
                        MS.Entertainment.UI.Framework.ImageControl.prototype._handleLoaded.apply(this, arguments);
                        WinJS.Promise.timeout(1).then(function() {
                            this.revokeUrlIfNeeded()
                        }.bind(this))
                    }, _handleError: function _handleError(args) {
                        if (this._unloaded)
                            return;
                        MS.Entertainment.UI.Framework.ImageControl.prototype._handleError.apply(this, arguments)
                    }, applyCSSClassesOnLoad: function applyCSSClassesOnLoad(naturalWidth, naturalHeight){}, _loadImageFromTarget: function _loadImageFromTarget(target) {
                        MS.Entertainment.UI.Controls.assert(this.desiredImageSize && (this.desiredImageSize.width || this.desiredImageSize.height), "We need a desired size (along at least one axis to ensure the service requests the correct image");
                        if (target && target.imageUri && target.imageUri.lastIndexOf("blob:", 0) > -1)
                            return WinJS.Promise.as(target.imageUri);
                        else
                            return MS.Entertainment.UI.Shell.ImageLoader.getServiceImageUrl(this.target, this.desiredImageSize.width, this.desiredImageSize.height, null, this.imageIdType, this.defaultImagePath)
                    }, _setImgSrc: function _setImgSrc(url) {
                        var imageManager;
                        if (MS.Entertainment.UI.Shell.ImageLoader.isAppDataUrl(url) && url !== this._cachedUrl) {
                            imageManager = new Microsoft.Entertainment.ImageManager;
                            if (this._cachedUrl)
                                imageManager.unregisterImageUrl(this._cachedUrl);
                            imageManager.registerImageUrl(url);
                            this._cachedUrl = url
                        }
                        MS.Entertainment.UI.Framework.ImageControl.prototype._setImgSrc.apply(this, arguments)
                    }, revokeUrlIfNeeded: function revokeUrlIfNeeded() {
                        if (this._urlToRevoke) {
                            if (this._urlToRevoke.url)
                                URL.revokeObjectURL(this._urlToRevoke.url);
                            if (this._urlToRevoke.image && this._urlToRevoke.image.close)
                                this._urlToRevoke.image.close();
                            this._urlToRevoke = null;
                            this._urlRevoked = true;
                            if (this.domElement)
                                this.domElement.removeAttribute("imageLoaded")
                        }
                    }, unload: function unload() {
                        var imageManager;
                        if (this._cachedUrl) {
                            imageManager = new Microsoft.Entertainment.ImageManager;
                            imageManager.unregisterImageUrl(this._cachedUrl);
                            this._cachedUrl = null
                        }
                        this.revokeUrlIfNeeded();
                        MS.Entertainment.UI.Framework.ImageControl.prototype.unload.apply(this, arguments)
                    }, hide: function hide(element) {
                        MS.Entertainment.Utilities.hideElement(element)
                    }, show: function show(element) {
                        MS.Entertainment.Utilities.showElement(element)
                    }
            })
    })
})()
})();
/* >>>>>>/framework/navigateaction.js:2451 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function(undefined) {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        navigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function navigateConstructor() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.navigate, offlineMessageTitle: null, executed: function executed(param, referenceElement) {
                    if (referenceElement)
                        MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: referenceElement}, {
                            uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                        });
                    if (param === MS.Entertainment.UI.Actions.navigate.NavigateLocation.back) {
                        if (!MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).overlayVisible || WinJS.Utilities.getMember("MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.allowBackNavigate")) {
                            var navigationService;
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                                var rootNode = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.informationArchitecture).rootNode;
                                navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                var currentPage = WinJS.Binding.unwrap(navigationService.currentPage);
                                if (window.onDXPage && (currentPage.iaNode === rootNode))
                                    navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation)
                            }
                            else if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation))
                                navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                            else
                                Trace.fail("No navigation service registered");
                            navigationService.navigateBack()
                        }
                    }
                    else if (param === MS.Entertainment.UI.Actions.navigate.NavigateLocation.home) {
                        var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        navigationService.navigateToDefaultPage()
                    }
                    else {
                        var location = this._extractLocation(param);
                        var args = this._extractArguments(param);
                        var forcePageChange = WinJS.Utilities.getMember("forcePageChange", param);
                        MS.Entertainment.UI.Actions.assert((location), "the navigate command was expecting a location object, but didn't get one.");
                        MS.Entertainment.UI.Actions.assert((typeof location.page === "string"), "the navigate command was expecting a string page location, but didn't get one.");
                        if (location && location.page)
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(location.page, location.hub, location.panel, args, forcePageChange)
                    }
                }, canExecute: function canExecute(param) {
                    if (this.disableWhenOffline)
                        switch (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).networkStatus) {
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unknown:
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unrestricted:
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.throttled:
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.onDemand:
                                break;
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.localOnly:
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.none:
                                if (this.offlineMessageTitle) {
                                    var errorCode = MS.Entertainment.Platform.Playback.Error.NS_E_WMPIM_USEROFFLINE.code;
                                    MS.Entertainment.UI.Shell.showError(this.offlineMessageTitle, errorCode)
                                }
                                return false
                        }
                    if (this.disableOnServicesDisabled)
                        return MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).servicesEnabled;
                    var location = this._extractLocation(param);
                    return !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped && (location) && ((typeof location.page === "string") || location === MS.Entertainment.UI.Actions.navigate.NavigateLocation.back || location === MS.Entertainment.UI.Actions.navigate.NavigateLocation.home)
                }, _extractLocation: function _extractLocation(param) {
                    var location;
                    if (param === MS.Entertainment.UI.Actions.navigate.NavigateLocation.back)
                        location = param;
                    else if (param === MS.Entertainment.UI.Actions.navigate.NavigateLocation.home)
                        location = param;
                    else if (typeof param === "object")
                        location = param;
                    else
                        location = {page: param};
                    return location
                }, _extractArguments: function _extractArguments(param) {
                    var result = null;
                    var args = null;
                    if (param && param.args) {
                        args = WinJS.Binding.unwrap(param.args);
                        result = {};
                        for (var key in args)
                            result[key] = args[key]
                    }
                    return result
                }
        }, {NavigateLocation: {
                back: "back", home: "home"
            }}), depthGalleryNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function depthGalleryNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.navigate, executed: function executed() {
                        var parameter = this.parameter || {};
                        var page = parameter.page;
                        var hub = parameter.hub;
                        var panel = parameter.panel;
                        var navigationArguments = parameter.args || {};
                        navigationArguments.data = parameter.data;
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(page, hub, panel, navigationArguments)
                    }, canExecute: function canExecute() {
                        return true
                    }
            }), videoCollectionNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function videoCollectionNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.navigate, executed: function executed() {
                        var hub = MS.Entertainment.UI.Monikers.allVideoCollection;
                        var view = MS.Entertainment.ViewModels.VideoCollection.ViewTypes.all;
                        try {
                            view = Windows.Storage.ApplicationData.current.localSettings.values["VideoCollectionView"]
                        }
                        catch(e) {}
                        switch (view) {
                            case MS.Entertainment.ViewModels.VideoCollection.ViewTypes.all:
                                hub = MS.Entertainment.UI.Monikers.allVideoCollection;
                                break;
                            case MS.Entertainment.ViewModels.VideoCollection.ViewTypes.movies:
                                hub = MS.Entertainment.UI.Monikers.movieCollection;
                                break;
                            case MS.Entertainment.ViewModels.VideoCollection.ViewTypes.tv:
                                hub = MS.Entertainment.UI.Monikers.tvCollection;
                                break;
                            case MS.Entertainment.ViewModels.VideoCollection.ViewTypes.other:
                                hub = MS.Entertainment.UI.Monikers.otherVideoCollection;
                                break
                        }
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.videoCollection, hub)
                    }, canExecute: function canExecute() {
                        return true
                    }
            }), videoCollectionMovieNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function videoCollectionMovieNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.navigate, executed: function executed() {
                        var args = {selectHub: true};
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.videoCollection, MS.Entertainment.UI.Monikers.movieCollection, null, args)
                    }, canExecute: function canExecute() {
                        return true
                    }
            }), videoCollectionTvNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function videoCollectionTvNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.navigate, executed: function executed() {
                        var args = {selectHub: true};
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.videoCollection, MS.Entertainment.UI.Monikers.tvCollection, null, args)
                    }, canExecute: function canExecute() {
                        return true
                    }
            }), videoCollectionOtherNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function videoCollectionOtherNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.navigate, executed: function executed() {
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.videoCollection, MS.Entertainment.UI.Monikers.otherVideoCollection)
                    }, canExecute: function canExecute() {
                        return true
                    }
            }), videoPostRollNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function videoPostRollNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.navigate, executed: function executed() {
                        var parameter = this.parameter || {};
                        var page = parameter.page;
                        var hub = parameter.hub;
                        var panel = parameter.panel;
                        var abTestName = parameter.abTestName;
                        var abGroupName = parameter.abGroupName;
                        var videoPostRollAction = parameter.videoPostRollAction;
                        MS.Entertainment.Utilities.Telemetry.logVideoPostRollAction(abTestName, abGroupName, videoPostRollAction);
                        var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        navigationService.clearBackStackOnNextNavigate(true);
                        navigationService.navigateTo(page, hub, panel)
                    }, canExecute: function canExecute() {
                        return true
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        videoMarketplaceNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.navigate", function videoMarketplaceNavigateConstructor() {
            this.base()
        }, {
            moniker: String.empty, executed: function executed(param) {
                    var serviceConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service;
                    var query;
                    var view = String.empty;
                    var movie = true;
                    var hub;
                    param = param || {};
                    var moniker = this.moniker || param.moniker || String.empty;
                    switch (moniker) {
                        case MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases:
                        case MS.Entertainment.UI.Monikers.movieMarketplaceFeatured:
                            view = (moniker === MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases) ? "movieNewReleases" : "movieFeatured";
                            query = new MS.Entertainment.Data.Query.MovieHub;
                            break;
                        case MS.Entertainment.UI.Monikers.movieMarketplaceTopPurchased:
                            view = "movieTopPurchased";
                            query = new MS.Entertainment.Data.Query.Video.EdsBrowseMoviesByGenreStudio;
                            break;
                        case MS.Entertainment.UI.Monikers.movieMarketplaceTopRented:
                            view = "movieTopRentals";
                            query = new MS.Entertainment.Data.Query.Video.EdsBrowseTopRentalMovies;
                            break;
                        case MS.Entertainment.UI.Monikers.tvMarketplaceFeatured:
                            view = "tvFeatured";
                            movie = false;
                            query = new MS.Entertainment.Data.Query.TvHub;
                            break;
                        case MS.Entertainment.UI.Monikers.tvMarketplaceLastNight:
                            view = "tvAiredLastNight";
                            movie = false;
                            query = new MS.Entertainment.Data.Query.browseTVFromLastNight;
                            break;
                        case MS.Entertainment.UI.Monikers.tvMarketplaceNewReleases:
                            view = "tvNewReleases";
                            movie = false;
                            query = new MS.Entertainment.Data.Query.TvHub;
                            break;
                        case MS.Entertainment.UI.Monikers.tvMarketplaceTopPurchased:
                            view = "tvTopPurchased";
                            query = new MS.Entertainment.Data.Query.Video.EdsBrowseTVByGenreNetwork;
                            movie = false;
                            break;
                        case MS.Entertainment.UI.Monikers.browseMoviesByActor:
                        case MS.Entertainment.UI.Monikers.browseTVSeriesByActor:
                            view = MS.Entertainment.UI.Monikers.browseByActor;
                            hub = MS.Entertainment.UI.Monikers.browseByActorHub;
                            query = (moniker === MS.Entertainment.UI.Monikers.browseMoviesByActor) ? new MS.Entertainment.Data.Query.Video.EdsBrowseMoviesByActor : new MS.Entertainment.Data.Query.Video.EdsBrowseTVByActor;
                            query.actor = param.actor;
                            movie = (moniker === MS.Entertainment.UI.Monikers.browseMoviesByActor) ? true : false;
                            MS.Entertainment.ViewModels.VideoMarketplace.defaultPrimaryFilter = (moniker === MS.Entertainment.UI.Monikers.browseMoviesByActor) ? 0 : 1;
                            break;
                        default:
                            Trace.fail("videoMarketplaceNavigate received an unknown view: " + moniker);
                            break
                    }
                    var queryInfo = {};
                    var notificationInfo = MS.Entertainment.ViewModels.VideoMarketplace.getNotificationInfo(view);
                    if (notificationInfo) {
                        var modQueryInfo = MS.Entertainment.ViewModels.VideoMarketplace.modifyQuery(query, notificationInfo.resultModifier, notificationInfo.taskKeyGetter, notificationInfo.notifier);
                        if (modQueryInfo) {
                            queryInfo.notifications = modQueryInfo.notifications;
                            queryInfo.sender = modQueryInfo.sender
                        }
                    }
                    queryInfo.query = query;
                    queryInfo.promise = query.execute();
                    MS.Entertainment.ViewModels.VideoMarketplace.preloadedVideoMarketplaceQueryInfo = queryInfo;
                    if (movie)
                        if (!MS.Entertainment.Utilities.isApp2) {
                            delete Windows.Storage.ApplicationData.current.roamingSettings.values["movieMarketplaceFilter"];
                            delete Windows.Storage.ApplicationData.current.roamingSettings.values["movieMarketplaceSecondaryFilter"]
                        }
                        else {
                            delete Windows.Storage.ApplicationData.current.localSettings.values["movieMarketplaceFilter"];
                            delete Windows.Storage.ApplicationData.current.localSettings.values["movieMarketplaceSecondaryFilter"]
                        }
                    else if (!MS.Entertainment.Utilities.isApp2) {
                        delete Windows.Storage.ApplicationData.current.roamingSettings.values["tvMarketplaceFilter"];
                        delete Windows.Storage.ApplicationData.current.roamingSettings.values["tvMarketplaceSecondaryFilter"]
                    }
                    else {
                        delete Windows.Storage.ApplicationData.current.localSettings.values["tvMarketplaceFilter"];
                        delete Windows.Storage.ApplicationData.current.localSettings.values["tvMarketplaceSecondaryFilter"]
                    }
                    var executed = (new MS.Entertainment.UI.Actions.navigate).executed;
                    executed.apply(this, arguments)
                }
        }), featuredSetsNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.navigate", function featuredSetsNavigateConstructor() {
                this.base()
            }, {
                _getFeaturedSetsMonikers: function _getFeaturedSetsMonikers() {
                    var page = MS.Entertainment.UI.Monikers.flexHubPage;
                    var hub = MS.Entertainment.UI.Monikers.flexHub;
                    if (MS.Entertainment.Utilities.isVideoApp1) {
                        page = MS.Entertainment.UI.Monikers.featuredSetsPage;
                        hub = MS.Entertainment.UI.Monikers.featuredSets
                    }
                    return {
                            page: page, hub: hub
                        }
                }, _getFeaturedSetsFeed: function _getFeaturedSetsFeed() {
                        return WinJS.Utilities.getMember("parameter.targetFeed", this) || "featuredsets"
                    }, canExecute: function canExecute() {
                        var navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        var featuredSetsMonikers = this._getFeaturedSetsMonikers();
                        return navigation.currentPage.iaNode.moniker !== featuredSetsMonikers.page || navigation.currentHub.iaNode.moniker !== featuredSetsMonikers.hub || navigation.currentPage.options.query !== this._getFeaturedSetsFeed()
                    }, executed: function executed() {
                        var query = new MS.Entertainment.Data.Query.MediaDiscoveryVideoFlexHub;
                        query.target = this._getFeaturedSetsFeed();
                        var queryInfo = {};
                        queryInfo.query = query;
                        queryInfo.promise = query.execute();
                        MS.Entertainment.ViewModels.VideoMarketplace.preloadedVideoMarketplaceQueryInfo = queryInfo;
                        var featuredSetsMonikers = this._getFeaturedSetsMonikers();
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(featuredSetsMonikers.page, featuredSetsMonikers.hub, null, {query: query.target}, true)
                    }
            }), studiosAndNetworksGalleryNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.navigate", function studiosAndNetworksGalleryNavigateConstructor() {
                this.base()
            }, {
                canExecute: function canExecute(param) {
                    var location = this._extractLocation(param);
                    var page = location && location.page;
                    var hub = location && location.hub;
                    if (page && hub && page === MS.Entertainment.UI.Monikers.studioAndNetworkGallery && (hub === MS.Entertainment.UI.Monikers.movieStudioGalleryHub || hub === MS.Entertainment.UI.Monikers.tvNetworkGalleryHub))
                        return true;
                    else {
                        MS.Entertainment.UI.Actions.fail("Invalid page and hub combination for studiosAndNetworksGalleryNavigate.");
                        return false
                    }
                }, executed: function executed(param) {
                        var location = this._extractLocation(param);
                        MS.Entertainment.UI.Actions.assert(location, "the navigate command was expecting a location object, but didn't get one.");
                        var hubMoniker = location && location.hub;
                        var query;
                        if (hubMoniker === MS.Entertainment.UI.Monikers.movieStudioGalleryHub)
                            query = new MS.Entertainment.Data.Query.Video.EdsMetadataMovieStudios;
                        else if (hubMoniker === MS.Entertainment.UI.Monikers.tvNetworkGalleryHub)
                            query = new MS.Entertainment.Data.Query.Video.EdsMetadataTvNetworks;
                        else {
                            MS.Entertainment.UI.Actions.fail("the navigate command received an invalid hub for network or studio gallery.");
                            return
                        }
                        var queryInfo = {};
                        queryInfo.query = query;
                        queryInfo.promise = query.execute();
                        MS.Entertainment.ViewModels.VideoMarketplace.preloadedVideoMarketplaceQueryInfo = queryInfo;
                        var args = location.args || {};
                        args.query = query;
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(location.page, location.hub, null, args, true)
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {videoRecommendationsNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.navigate", function videoRecommendationsNavigateConstructor() {
            this.base()
        }, {
            moniker: String.empty, query: null, queryPromise: null, executed: function executed() {
                    var query = this.parameter && this.parameter.query ? this.parameter.query : new MS.Entertainment.Data.Query.EdsVideoRecommendations;
                    var queryInfo = {};
                    queryInfo.query = query;
                    if (this.parameter) {
                        var param = WinJS.Binding.unwrap(this.parameter);
                        if (param.hub === MS.Entertainment.UI.Monikers.movieRecommendations)
                            query.desiredMediaItemTypes = "movies";
                        else if (param.hub === MS.Entertainment.UI.Monikers.tvRecommendations)
                            query.desiredMediaItemTypes = "tv";
                        if (param.queryPromise)
                            queryInfo.promise = param.queryPromise ? param.queryPromise : query.execute()
                    }
                    MS.Entertainment.ViewModels.VideoMarketplace.preloadedVideoMarketplaceQueryInfo = queryInfo;
                    var executed = (new MS.Entertainment.UI.Actions.navigate).executed;
                    executed.apply(this, arguments)
                }, canExecute: function canExecute() {
                    return true
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {videoWatchlistNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.navigate", function videoWatchlistNavigateConstructor() {
            this.base()
        }, {
            moniker: String.empty, query: null, queryPromise: null, executed: function executed() {
                    var watchlistService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.watchlistService);
                    var query = this.parameter && this.parameter.query;
                    if (!query) {
                        query = new MS.Entertainment.Data.Query.libraryWatchlistMediaItems;
                        query.playlistId = watchlistService.watchlistId
                    }
                    var queryInfo = {};
                    queryInfo.query = query;
                    if (this.parameter) {
                        var param = WinJS.Binding.unwrap(this.parameter);
                        if (param.queryPromise)
                            queryInfo.promise = param.queryPromise ? param.queryPromise : query.execute()
                    }
                    MS.Entertainment.ViewModels.VideoMarketplace.preloadedVideoMarketplaceQueryInfo = queryInfo;
                    var executed = (new MS.Entertainment.UI.Actions.navigate).executed;
                    executed.apply(this, arguments)
                }, canExecute: function canExecute() {
                    return true
                }
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.navigate, function() {
        return new MS.Entertainment.UI.Actions.navigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.depthGalleryNavigate, function() {
        return new MS.Entertainment.UI.Actions.depthGalleryNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.videoCollectionNavigate, function() {
        return new MS.Entertainment.UI.Actions.videoCollectionNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.videoCollectionMovieNavigate, function() {
        return new MS.Entertainment.UI.Actions.videoCollectionMovieNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.videoCollectionOtherNavigate, function() {
        return new MS.Entertainment.UI.Actions.videoCollectionOtherNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.videoMarketplaceNavigate, function() {
        return new MS.Entertainment.UI.Actions.videoMarketplaceNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.studiosAndNetworksGalleryNavigate, function() {
        return new MS.Entertainment.UI.Actions.studiosAndNetworksGalleryNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.videoCollectionTvNavigate, function() {
        return new MS.Entertainment.UI.Actions.videoCollectionTvNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.videoPostRollNavigate, function() {
        return new MS.Entertainment.UI.Actions.videoPostRollNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.videoRecommendationsNavigate, function() {
        return new MS.Entertainment.UI.Actions.videoRecommendationsNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.videoWatchlistNavigate, function() {
        return new MS.Entertainment.UI.Actions.videoWatchlistNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.featuredSetsNavigate, function() {
        return new MS.Entertainment.UI.Actions.featuredSetsNavigate
    })
})()
})();
/* >>>>>>/framework/data/augmenters/commonhydrators.js:2871 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Media");
(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Hydrator");
    WinJS.Namespace.define("MS.Entertainment.Hydrator", {
        prepareDetailsQuery: function prepareDetailsQuery(query, queryWatcher, hydrating) {
            if (query) {
                if (hydrating.hasCanonicalId) {
                    query.id = hydrating.canonicalId;
                    query.idType = MS.Entertainment.Data.Query.edsIdType.canonical
                }
                else {
                    query.id = hydrating.serviceId;
                    query.idType = hydrating.serviceIdType
                }
                query.impressionGuid = hydrating.impressionGuid;
                query.acquisitionData = hydrating.acquisitionData;
                query.relevancyTrackingContent = hydrating.relevancyTrackingContent;
                if (queryWatcher)
                    queryWatcher.registerQuery(query)
            }
            return query
        }, sanitizeLibraryIds: function sanitizeLibraryIds(data, hydrating) {
                if (hydrating && MS.Entertainment.Utilities.isValidLibraryId(hydrating.libraryId))
                    data.libraryId = hydrating.libraryId
            }, sanitizeIds: function sanitizeIds(data, hydrating) {
                var result = data;
                hydrating = hydrating || {};
                if (data) {
                    this.sanitizeLibraryIds(data, hydrating);
                    result = MS.Entertainment.ViewModels.MediaItemModel.getLibraryIdAsync(data).then(function gotLibraryId(libraryId) {
                        data.libraryId = libraryId;
                        if (!MS.Entertainment.Utilities.isEmptyGuid(hydrating.zuneId) || MS.Entertainment.Utilities.isEmptyGuid(data.zuneId))
                            data.zuneId = null;
                        if (MS.Entertainment.Utilities.isEmptyGuid(data.canonicalId))
                            data.canonicalId = null;
                        if (MS.Entertainment.Utilities.isEmptyGuid(data.serviceId)) {
                            data.serviceId = null;
                            data.serviceIdType = null
                        }
                    }, function ignoreError(){}).then(function finallyBlock() {
                        return data
                    })
                }
                return WinJS.Promise.as(result)
            }, playlistCollection: function playlistCollection(hydrating, options) {
                options = options || {};
                var result;
                var queryWatcher = new MS.Entertainment.Framework.QueryWatcher("MS.Entertainment.Hydrator.playlistCollection");
                var item = new MS.Entertainment.Data.Augmenter.Library.Playlist;
                var query = new MS.Entertainment.Data.Query.libraryPlaylistMediaItems;
                query.playlistId = hydrating.libraryId;
                queryWatcher.registerQuery(query);
                result = query.execute().then(function querySuccess(q) {
                    item.tracks = q.result.items;
                    return item
                });
                return WinJS.Promise.as(result)
            }, playlist: function playlist(hydrating, options) {
                options = options || {};
                var result;
                var queryWatcher = new MS.Entertainment.Framework.QueryWatcher("MS.Entertainment.Hydrator.playlistCollection");
                var item = new MS.Entertainment.Data.Augmenter.Library.Playlist;
                var query = new MS.Entertainment.Data.Query.libraryPlaylistMediaItems;
                query.cloudSyncItemId = hydrating.cloudSyncItemId;
                var playlistQuery = MS.Entertainment.UI.Actions.Playlists.queryPlaylistById(hydrating.cloudSyncItemId, true);
                result = playlistQuery.then(function querySuccess(playlist) {
                    return playlist
                }, function error() {
                    return null
                });
                return WinJS.Promise.as(result)
            }
    })
})()
})();
/* >>>>>>/framework/data/augmenters/commonaugmenters.js:2950 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MSE, undefined) {
    "use strict";
    var alias = MSE.Data.Property.alias;
    var augment = MSE.Data.Property.augment;
    var convert = MSE.Data.Property.convert;
    var convertNoDeflate = MSE.Data.Property.convertNoDeflate;
    var convertOriginal = MSE.Data.Property.convertOriginal;
    var convertOriginalNoDeflate = MSE.Data.Property.convertOriginalNoDeflate;
    var list = MSE.Data.Property.list;
    var listWithContext = MSE.Data.Property.listWithContext;
    var format = MSE.Data.Property.format;
    var collect = MSE.Data.Property.collect;
    var filter = MSE.Data.Property.filter;
    var filterArray = MSE.Data.Property.filterArray;
    var value = MSE.Data.Property.value;
    var uncachable = MSE.Data.Property.uncachable;
    var hydrated = MSE.Data.Property.hydrated;
    var hydratedRequired = MSE.Data.Property.hydratedRequired;
    var convertFeatureOptionsMusic = {feature: Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace};
    var defaultVoiceConfidence = MSE.Data.Factory.defaultVoiceConfidence;
    var convertFeatureOptionsMusicOrVideo = {feature: [Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace, Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace, Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace]};
    WinJS.Namespace.define("MS.Entertainment.Data", {
        ImageIdType: {
            undefinedImageIdType: Microsoft.Entertainment.ImageIdType.undefinedImageIdType, application: Microsoft.Entertainment.ImageIdType.application, editorialAlbum: Microsoft.Entertainment.ImageIdType.album, editorialArtist: Microsoft.Entertainment.ImageIdType.artist, editorialMovie: Microsoft.Entertainment.ImageIdType.movie, editorialSeason: Microsoft.Entertainment.ImageIdType.season, editorialSeries: Microsoft.Entertainment.ImageIdType.series, editorialTrack: Microsoft.Entertainment.ImageIdType.track, parentalRating: Microsoft.Entertainment.ImageIdType.parentalRating, image: Microsoft.Entertainment.ImageIdType.image, movie: Microsoft.Entertainment.ImageIdType.movie, episode: Microsoft.Entertainment.ImageIdType.episode, series: Microsoft.Entertainment.ImageIdType.series
        }, ItemLocation: {
                unknown: "unknown", collection: "collection", marketplace: "marketplace"
            }, ItemIdType: {
                unknown: "unknown", library: "library", service: "service"
            }, convertFeatureOptionsMusicOrVideo: convertFeatureOptionsMusicOrVideo
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Filter.Marketplace", {filterUnsupportedFlexItems: function filterUnsupportedFlexItems(item) {
            return item && !(item.link.type === MSE.Data.Augmenter.Marketplace.EditorialType.Movie || item.link.type === MSE.Data.Augmenter.Marketplace.EditorialType.Series || item.link.type === MSE.Data.Augmenter.Marketplace.EditorialType.Album || item.link.type === MSE.Data.Augmenter.Marketplace.EditorialType.Artist || item.link.type === MSE.Data.Augmenter.Marketplace.EditorialType.MovieTrailer || item.link.type === MSE.Data.Augmenter.Marketplace.EditorialType.Season || item.link.type === MSE.Data.Augmenter.Marketplace.EditorialType.Episode || item.link.type === MSE.Data.Augmenter.Marketplace.EditorialType.Hub)
        }});
    var xboxCatalogIdPrefix = "66acd000-77fe-1000-9115-d802";
    var classicWindowsCatalogIdPrefix = "66acd000-77fe-1000-9115-d804";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data.Factory.Common");
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Common", {
        createMediaItemFromEditorialItem: function createMediaItemFromEditorialItem(editorialItem) {
            var augmentation = MS.Entertainment.Utilities.getEditorialItemAugmentation(editorialItem && editorialItem.link && editorialItem.link.type);
            return MSE.Data.augment(editorialItem, augmentation)
        }, createMediaItemFromPinnedItem: function createMediaItemFromEditorialItem(pinnedItem) {
                var augmentation = MS.Entertainment.Utilities.getPinnedItemAugmentation(pinnedItem && pinnedItem.Item && pinnedItem.Item.ContentType);
                return MSE.Data.augment(pinnedItem.Item, augmentation)
            }, createMediaItemFromRecentItem: function createMediaItemFromEditorialItem(recentItem) {
                var augmentation = MS.Entertainment.Utilities.getRecentItemAugmentation(recentItem && recentItem.Item && recentItem.Item.ContentType, recentItem && recentItem.Item && recentItem.Item.AcquisitionContext);
                return MSE.Data.augment(recentItem.Item, augmentation)
            }, combineTitleAndSubTitle: function combineTitleAndSubTitle(mediaItem) {
                var result = String.empty;
                if (mediaItem)
                    if (!mediaItem.mainTitle)
                        result = mediaItem.subTitle;
                    else if (!mediaItem.subTitle)
                        result = mediaItem.mainTitle;
                    else
                        result = String.load(String.id.IDS_TITLE_SUBTITLE).format(mediaItem.mainTitle, mediaItem.subTitle);
                return result
            }, hasSmartGlassActivities: function hasSmartGlassActivities(hasActivities) {
                return false
            }, zuneDeviceTypesValidate: function zuneDeviceTypesValidate(deviceTypes) {
                var newDeviceTypes = [];
                if (Array.isArray(deviceTypes))
                    deviceTypes.forEach(function validate(deviceType) {
                        if (deviceType === MS.Entertainment.Data.Augmenter.Marketplace.zuneDeviceType._pc)
                            newDeviceTypes.push(MS.Entertainment.Data.Augmenter.Marketplace.zuneDeviceType.pc);
                        else
                            newDeviceTypes.push(deviceType)
                    });
                return newDeviceTypes
            }, movieWebDetailsUri: function movieWebDetailsUri(id) {
                if (id)
                    return MS.Entertainment.Utilities.UriFactory.create(MS.Entertainment.Endpoint.id.seid_PCMarketplace, ["redirect"], {
                            type: "movie", id: id, target: "web"
                        });
                else
                    return null
            }, tvSeriesWebDetailsUri: function tvSeriesWebDetailsUri(id) {
                if (id)
                    return MS.Entertainment.Utilities.UriFactory.create(MS.Entertainment.Endpoint.id.seid_PCMarketplace, ["redirect"], {
                            type: "tvseries", id: id, target: "web"
                        });
                else
                    return null
            }, tvSeasonWebDetailsUri: function tvSeasonWebDetailsUri(seasonId) {
                if (seasonId)
                    return MS.Entertainment.Utilities.UriFactory.create(MS.Entertainment.Endpoint.id.seid_PCMarketplace, ["redirect"], {
                            type: "tvseries", id: seasonId, target: "web"
                        });
                else
                    return null
            }, tvEpisodeWebDetailsUri: function tvEpisodeWebDetailsUri(id) {
                if (id)
                    return MS.Entertainment.Utilities.UriFactory.create(MS.Entertainment.Endpoint.id.seid_PCMarketplace, ["redirect"], {
                            type: "tvepisode", id: id, target: "web"
                        });
                else
                    return null
            }, videoWebDetailsUri: function videoWebDetailsUri(data) {
                var result = null;
                if (!data)
                    return result;
                switch (data.videoType) {
                    case Microsoft.Entertainment.Queries.VideoType.movie:
                        result = MSE.Data.Factory.Common.movieWebDetailsUri(data.serviceId);
                        break;
                    case Microsoft.Entertainment.Queries.VideoType.tvEpisode:
                        result = MSE.Data.Factory.Common.tvEpisodeWebDetailsUri(data.serviceId);
                        break;
                    case Microsoft.Entertainment.Queries.VideoType.musicVideo:
                    case Microsoft.Entertainment.Queries.VideoType.other:
                        break;
                    default:
                        MS.Entertainment.Data.Factory.Common.assert(false, "Unknown videoType in videoWebDetailsUri");
                        break
                }
                return result
            }, tvSeasonServiceId: function tvSeasonServiceId(season) {
                if (season)
                    return "{0}_s{1}".format(season.seriesId, season.seasonNumber);
                else
                    return null
            }, personWebDetailsUri: function personWebDetailsUri(data) {
                var result = null;
                if (!data)
                    return result;
                switch (data.personType) {
                    case Microsoft.Entertainment.Queries.PersonType.artist:
                    case Microsoft.Entertainment.Queries.PersonType.primaryArtist:
                        result = MSE.Data.Factory.Common.musicArtistWebDetailsUri(data.serviceId);
                        break;
                    case Microsoft.Entertainment.Queries.PersonType.actor:
                    case Microsoft.Entertainment.Queries.PersonType.composer:
                    case Microsoft.Entertainment.Queries.PersonType.conductor:
                    case Microsoft.Entertainment.Queries.PersonType.creator:
                    case Microsoft.Entertainment.Queries.PersonType.director:
                    case Microsoft.Entertainment.Queries.PersonType.influencer:
                    case Microsoft.Entertainment.Queries.PersonType.producer:
                    case Microsoft.Entertainment.Queries.PersonType.writer:
                        break;
                    default:
                        MS.Entertainment.Data.Factory.Common.assert(false, "Unknown personType in personWebDetailsUri");
                        break
                }
                return result
            }, webDetailsUri: function webDetailsUri(data) {
                var result = null;
                if (!data)
                    return result;
                try {
                    switch (data.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            result = MSE.Data.Factory.Common.videoWebDetailsUri(data);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            result = MSE.Data.Factory.Common.personWebDetailsUri(data);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            result = MSE.Data.Factory.Common.tvSeriesWebDetailsUri(data.hasZuneId ? data.zuneId : data.serviceId);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            var seriesId;
                            if (data.seriesIdType === MS.Entertainment.Data.Query.edsIdType.zuneCatalog)
                                seriesId = data.seriesId;
                            else
                                seriesId = data.seriesServiceId;
                            result = MSE.Data.Factory.Common.tvSeasonWebDetailsUri(seriesId + "_s" + data.seasonNumber);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            result = MSE.Data.Factory.Common.musicAlbumWebDetailsUri(data.hasZuneId ? data.zuneId : data.serviceId);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            result = MSE.Data.Factory.Common.musicTrackWebDetailsUri(data.hasZuneId ? data.zuneId : data.serviceId);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.bio:
                        case Microsoft.Entertainment.Queries.ObjectType.editorial:
                        case Microsoft.Entertainment.Queries.ObjectType.genre:
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                        case Microsoft.Entertainment.Queries.ObjectType.review:
                            break;
                        default:
                            MS.Entertainment.Data.Factory.Common.assert(false, "Unknown mediaType in webDetailsUri");
                            break
                    }
                }
                catch(error) {
                    result = null
                }
                return result
            }, imageUri: function imageUri(data) {
                var result;
                var imageType = MS.Entertainment.Data.ImageIdType.undefinedImageIdType;
                var imageId;
                var imageChildId;
                if (!data || data.mediaType === null || data.mediaType === undefined)
                    return result;
                switch (data.mediaType) {
                    case Microsoft.Entertainment.Queries.ObjectType.game:
                        imageType = MS.Entertainment.Data.ImageIdType.xboxGame;
                        imageId = data.titleId;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.video:
                        imageId = data.serviceId;
                        switch (data.videoType) {
                            case Microsoft.Entertainment.Queries.VideoType.movie:
                                imageType = MS.Entertainment.Data.ImageIdType.movie;
                                break;
                            case Microsoft.Entertainment.Queries.VideoType.tvEpisode:
                                imageType = MS.Entertainment.Data.ImageIdType.series;
                                break
                        }
                        {};
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                        imageType = MS.Entertainment.Data.ImageIdType.series;
                        imageId = data.serviceId;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                        imageType = MS.Entertainment.Data.ImageIdType.season;
                        imageId = data.seriesId;
                        imageChildId = data.seasonNumber;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.album:
                        imageType = MS.Entertainment.Data.ImageIdType.album;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.track:
                        imageType = MS.Entertainment.Data.ImageIdType.track;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.person:
                        switch (data.personType) {
                            case Microsoft.Entertainment.Queries.PersonType.artist:
                            case Microsoft.Entertainment.Queries.PersonType.primaryArtist:
                                imageType = MS.Entertainment.Data.ImageIdType.artist;
                                break
                        }
                        break
                }
                if (imageType !== MS.Entertainment.Data.ImageIdType.undefinedImageIdType)
                    if (imageType === MS.Entertainment.Data.ImageIdType.track || imageType === MS.Entertainment.Data.ImageIdType.album || imageType === MS.Entertainment.Data.ImageIdType.artist)
                        result = MS.Entertainment.UI.Shell.ImageLoader.getNewImageServiceUri(data, 100, 100);
                    else if (imageId)
                        result = MS.Entertainment.UI.Shell.ImageLoader.makeCatalogImageUri(imageId, imageType, null, true, null, null, imageChildId);
                return result
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter", {
        GamePlatform: {
            PC: "PC", Xbox: "Xbox", Phone: "Phone", Modern: "Modern", Web: "Web", Unknown: "Unknown"
        }, GameTitleType: {
                game: "Game", application: "App"
            }, GameSupportedPlatform: {
                Xbox360: "Xbox360", WebGames: "WebGames"
            }, ServiceTypes: {
                editorialItem: 1, wmis: 2, audioAd: 3
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {zuneDeviceType: {
            all: "All", pc: "WindowsPC", xblWinClient: "XblWinClient", xbox360: "Xbox360", zuneDevice: "Zune3.0", zuneMobile: "ZuneMobile", _pc: "PC/Windows"
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Library", {scaleGroupHintNumber: function scaleGroupHintNumber(number) {
            var result = 0;
            if (!isNaN(number))
                result = Math.log(number + 1);
            return result
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Library", {
        mediaTypeToSubTypeMappings: (function() {
            var mapping;
            return {get: function mediaTypeToSubTypeMappings_get() {
                        if (mapping)
                            return mapping;
                        mapping = {};
                        mapping[Microsoft.Entertainment.Queries.ObjectType.album] = null;
                        mapping[Microsoft.Entertainment.Queries.ObjectType.game] = [Microsoft.Entertainment.Queries.GameType, Microsoft.Entertainment.Queries.GameTitleType];
                        mapping[Microsoft.Entertainment.Queries.ObjectType.person] = Microsoft.Entertainment.Queries.PersonType;
                        mapping[Microsoft.Entertainment.Queries.ObjectType.playlist] = Microsoft.Entertainment.Platform.PlaylistType;
                        mapping[Microsoft.Entertainment.Queries.ObjectType.smartDJ] = Microsoft.Entertainment.Queries.SmartDJObjectTypes;
                        mapping[Microsoft.Entertainment.Queries.ObjectType.track] = null;
                        mapping[Microsoft.Entertainment.Queries.ObjectType.tvSeason] = null;
                        mapping[Microsoft.Entertainment.Queries.ObjectType.tvSeries] = null;
                        mapping[Microsoft.Entertainment.Queries.ObjectType.video] = Microsoft.Entertainment.Queries.VideoType;
                        return mapping
                    }}
        })(), mediaTypeToSubTypeNameMappings: (function() {
                var mapping;
                return {get: function mediaTypeToSubTypeNameMappings_get() {
                            if (mapping)
                                return mapping;
                            mapping = {};
                            mapping[Microsoft.Entertainment.Queries.ObjectType.album] = null;
                            mapping[Microsoft.Entertainment.Queries.ObjectType.game] = ["gameType", "gameTitleType"];
                            mapping[Microsoft.Entertainment.Queries.ObjectType.person] = "personType";
                            mapping[Microsoft.Entertainment.Queries.ObjectType.playlist] = "playlistType";
                            mapping[Microsoft.Entertainment.Queries.ObjectType.smartDJ] = "smartDJType";
                            mapping[Microsoft.Entertainment.Queries.ObjectType.track] = null;
                            mapping[Microsoft.Entertainment.Queries.ObjectType.tvSeason] = null;
                            mapping[Microsoft.Entertainment.Queries.ObjectType.tvSeries] = null;
                            mapping[Microsoft.Entertainment.Queries.ObjectType.video] = "videoType";
                            return mapping
                        }}
            })(), mediaTypeToRatingTypeMappings: (function() {
                var mapping;
                return {get: function mediaTypeToRatingTypeMappings() {
                            if (mapping)
                                return mapping;
                            mapping = {};
                            if (Microsoft.Entertainment.Platform.RatingType) {
                                mapping[Microsoft.Entertainment.Queries.ObjectType.tvSeries] = Microsoft.Entertainment.Platform.RatingType.tvSeries;
                                mapping[Microsoft.Entertainment.Queries.ObjectType.video] = Microsoft.Entertainment.Platform.RatingType.movie
                            }
                            return mapping
                        }}
            })(), createGroupHintsListItemFactory: function createGroupHintsListItemFactory(augmentation) {
                var innerFactory = MSE.Data.Factory.createListItemAugmentationFactory(augmentation, null, MSE.Data.Factory.GroupHintWrapper);
                var groupHintsListItem = function groupHintsListItem(sourceItem, context) {
                        var result = innerFactory(sourceItem);
                        if (result && result.data && !isNaN(context))
                            result.data.largestTotalCount = context;
                        return result
                    };
                groupHintsListItem.listItemFactory = innerFactory.listItemFactory;
                return groupHintsListItem
            }, localizedYearOrMonthFromDate: function localizedYearOrMonthFromDate(source) {
                var result = String.empty;
                var formatter;
                if (source && source.getFullYear)
                    result = source.getFullYear();
                if ((new Date).getFullYear() === result)
                    formatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).monthYear;
                if (formatter)
                    result = formatter.format(source);
                return MS.Entertainment.Data.Factory.Library.localizedYearOrMonth(result + String.empty)
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Marketplace.Rights", {
        hasRight: function hasRight(rights, rightTypes) {
            var rightTypeIndex,
                rightIndex;
            var foundRight = false;
            if (rights && rightTypes)
                for (rightIndex in rights) {
                    for (rightTypeIndex in rightTypes)
                        if (rights[rightIndex] && rights[rightIndex].licenseRight === rightTypes[rightTypeIndex]) {
                            foundRight = true;
                            break
                        }
                    if (foundRight)
                        break
                }
            return foundRight
        }, hasPreviewRight: function hasPreviewRight(rights) {
                return MSE.Data.Factory.Marketplace.Rights.hasRight(rights, [MSE.Data.Augmenter.Marketplace.RightType.preview])
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter", {MediaItem: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(function MediaItem() {
                    this.base.apply(this, arguments);
                    MS.Entertainment.Utilities.addEventHandlers(this, {libraryIdChanged: function libraryIdChanged() {
                            this.dispatchChangeAndNotify("inCollection", this.inCollection, !this.inCollection)
                        }.bind(this)})
                }, {
                    serviceId: String.empty, serviceIdType: String.empty, zuneId: String.empty, canonicalId: String.empty, libraryId: hydrated(value(-1)), impressionGuid: hydrated(value(null)), localTracksCount: alias("LocalTracksCount", 0), offlineFilesCount: alias("OfflineFilesCount", 0), remoteTracksCount: alias("RemoteTracksCount", 0), remoteFilesCount: alias("RemoteFilesCount", 0), totalTracksCount: alias("TotalTracksCount"), mediaType: -1, name: hydratedRequired(value(String.empty)), title: hydratedRequired(convertNoDeflate("name", MSE.Data.Factory.self)), isPinnedToStartScreen: null, location: null, canPurchaseDownload: alias("CanPurchaseDownload", false), canPurchaseStream: alias("CanPurchaseStream", false), canRentStream: alias("CanRentStream", false), canRentDownload: alias("CanRentDownload", false), canSubscriptionDownload: alias("CanSubscriptionDownload", false), canPlayLocally: alias("CanPlayLocally", false), canPlayStream: alias("CanStream", false), canFreeStream: alias("CanFreeStream", false), canSubscriptionStream: alias("CanSubscriptionStream", false), primaryImageUri: hydrated(convertNoDeflate(String.empty, MSE.Data.Factory.Common.imageUri, String.empty)), webUri: convertNoDeflate(String.empty, MSE.Data.Factory.Common.webDetailsUri, String.empty), parent: null, acquisitionData: null, mediaTypeString: {get: function() {
                                return String.empty
                            }}, expectedMediaTypeString: {get: function() {
                                return String.empty
                            }}, isValid: {get: function() {
                                return this.hasServiceId || this.inCollection || this.hasCanonicalId || this.hasZuneId
                            }}, isValidType: {get: function() {
                                return true
                            }}, inCollection: uncachable(value(function get_inCollection() {
                            return MS.Entertainment.Utilities.isValidLibraryId(this.libraryId)
                        })), hasServiceId: {get: function() {
                                return !MS.Entertainment.Utilities.isEmptyGuid(this.serviceId)
                            }}, hasCanonicalId: {get: function() {
                                return !MS.Entertainment.Utilities.isEmptyGuid(this.canonicalId)
                            }}, hasZuneId: {get: function() {
                                return !MS.Entertainment.Utilities.isEmptyGuid(this.zuneId)
                            }}, isRemovable: {get: function() {
                                return (this.inCollection && (this.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || this.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason || this.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeries || this.mediaType === Microsoft.Entertainment.Queries.ObjectType.video || this.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist || (this.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && !(this.playlistId >= 0))))
                            }}, canTransfer: {get: function get_canTransfer() {
                                switch (this.mediaType) {
                                    case Microsoft.Entertainment.Queries.ObjectType.person:
                                    case Microsoft.Entertainment.Queries.ObjectType.album:
                                        return this.remoteTracksCount < this.totalTracksCount;
                                    case Microsoft.Entertainment.Queries.ObjectType.track:
                                        return this.remoteFilesCount === 0 && this.localFilesCount > 0;
                                    default:
                                        return false
                                }
                            }}, hasRemoteContent: {get: function get_hasRemoteContent() {
                                switch (this.mediaType) {
                                    case Microsoft.Entertainment.Queries.ObjectType.person:
                                    case Microsoft.Entertainment.Queries.ObjectType.album:
                                        return this.remoteTracksCount > 0;
                                    case Microsoft.Entertainment.Queries.ObjectType.track:
                                        return this.remoteFilesCount > 0;
                                    default:
                                        return false
                                }
                            }}, hasLocalContent: {get: function get_hasLocalContent() {
                                switch (this.mediaType) {
                                    case Microsoft.Entertainment.Queries.ObjectType.person:
                                    case Microsoft.Entertainment.Queries.ObjectType.album:
                                        return this.localTracksCount > 0;
                                    case Microsoft.Entertainment.Queries.ObjectType.track:
                                        return (this.localTracksCount + this.offlineFilesCount) > 0;
                                    case Microsoft.Entertainment.Queries.ObjectType.video:
                                        return this.localTracksCount > 0;
                                    default:
                                        return true
                                }
                            }}, isEqual: function MediaItem_GenericComparer(mediaItem2) {
                            var isSame = false;
                            if (mediaItem2 && ((!MS.Entertainment.Utilities.isEmptyGuid(this.serviceId) && mediaItem2.serviceId === this.serviceId) || (!MS.Entertainment.Utilities.isEmptyGuid(this.canonicalId) && mediaItem2.canonicalId === this.canonicalId) || (!MS.Entertainment.Utilities.isEmptyGuid(this.zuneId) && mediaItem2.zuneId === this.zuneId) || (MS.Entertainment.Utilities.isValidLibraryId(this.libraryId) && mediaItem2.libraryId === this.libraryId) || (this.titleId && mediaItem2.titleId === this.titleId) || (this.filePath && mediaItem2.filePath === this.filePath) || (this.activationFilePath && mediaItem2.activationFilePath === this.activationFilePath) || (this.cloudSyncItemId && mediaItem2.cloudSyncItemId === this.cloudSyncItemId)))
                                isSame = true;
                            return isSame
                        }, isChildOf: function isChildOf(mediaItem2) {
                            var isChild = false;
                            if (mediaItem2 && this.parent)
                                if ((!MS.Entertainment.Utilities.isEmptyGuid(mediaItem2.zuneId) && mediaItem2.zuneId === this.parent.zuneId) || (!MS.Entertainment.Utilities.isEmptyGuid(mediaItem2.canonicalId) && mediaItem2.canonicalId === this.parent.canonicalId))
                                    isChild = true;
                                else
                                    isChild = this.parent.isChildOf(mediaItem2);
                            return isChild
                        }, sharesParentWith: function sharesParentWith(mediaItem2) {
                            var sharesParent = false;
                            if (mediaItem2 && mediaItem2.parent && this.parent) {
                                if ((!MS.Entertainment.Utilities.isEmptyGuid(mediaItem2.parent.zuneId) && mediaItem2.parent.zuneId === this.parent.zuneId) || (!MS.Entertainment.Utilities.isEmptyGuid(mediaItem2.parent.canonicalId) && mediaItem2.parent.canonicalId === this.parent.canonicalId))
                                    sharesParent = true;
                                else
                                    sharesParent = this.sharesParentWith(mediaItem2.parent);
                                if (!sharesParent)
                                    sharesParent = this.parent.sharesParentWith(mediaItem2)
                            }
                            return sharesParent
                        }, sharesDirectParentWith: function sharesDirectParentWith(mediaItem2) {
                            var sharesParent = false;
                            if (mediaItem2 && mediaItem2.parent && this.parent && this.parent.isEqual)
                                sharesParent = this.parent.isEqual(mediaItem2.parent);
                            return sharesParent
                        }, canDownload: {get: function get_canDownload() {
                                return this.canPurchaseDownload || this.canRentDownload || this.canSubscriptionDownload
                            }}, canPlay: {get: function get_canPlay() {
                                return this.canPlayLocally || this.canPlayStream
                            }}, canStream: {get: function get_canStream() {
                                return this.canPurchaseStream || this.canRentStream || this.canFreeStream || this.canSubscriptionStream
                            }}
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Common", {
        ErrorCode: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    exactMatches: convert("Envelope.Body.LookupFullParamResponse.LookupFullParamResult.ExactResultsCount", MSE.Data.Factory.intNumber, 0), errorCodeUrl: alias("Envelope.Body.LookupFullParamResponse.LookupFullParamResult.ExactMatch.ErrorArticleUrl", "http://go.microsoft.com/fwlink/?LinkId=246305")
                })
        }), IntroPanelContent: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        title: convertOriginal("Title", MSE.Data.Factory.normalizeTextDirection, String.empty), details: convert("BodyText.p", MSE.Data.Factory.arrayJoinWithNewLines, String.empty), subtitle: convertOriginal("Subtitle", MSE.Data.Factory.normalizeTextDirection, String.empty)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {
        MediaItem: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.MediaItem, null, {
                    libraryId: convert("ObjectId", MSE.Data.Factory.intNumber, -1), serviceId: convert("ServiceMediaId", MSE.Data.Factory.guid, String.empty, convertFeatureOptionsMusicOrVideo), serviceIdType: "ZuneCatalog", zuneId: convert("ServiceMediaId", MSE.Data.Factory.guid, String.empty, convertFeatureOptionsMusicOrVideo), imageUri: hydratedRequired(alias("ImageUrl", null)), imageResizeUri: hydratedRequired(alias("ImageUrl", null)), fromCollection: true, canonicalId: hydrated(convert("BingId", MSE.Data.Factory.guid, String.empty, convertFeatureOptionsMusicOrVideo)), collectionState: alias("CollectionState", null), canSubscriptionDownload: alias("CanSubscriptionDownload", false), inCollection: uncachable(value(function get_inCollection() {
                            return MS.Entertainment.Utilities.isValidLibraryId(this.libraryId) && this.collectionState !== Microsoft.Entertainment.Queries.ItemCollectionState.notInCollection && this.collectionState !== Microsoft.Entertainment.Queries.ItemCollectionState.notInCollectionValidRights && this.collectionState !== Microsoft.Entertainment.Queries.ItemCollectionState.notInCollectionTakenDown && this.collectionState !== Microsoft.Entertainment.Queries.ItemCollectionState.notInCollectionValidRights
                        })), inCloudCollectionV2: uncachable(value(function get_inCloudCollectionV2() {
                            return this.collectionState === Microsoft.Entertainment.Queries.ItemCollectionState.oneDriveOnly || this.collectionState === Microsoft.Entertainment.Queries.ItemCollectionState.oneDriveAndLocal
                        }))
                })
        }), Genre: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.MediaItem, null, {
                        libraryId: convert("ObjectId", MSE.Data.Factory.intNumber, -1), value: convert("ObjectId", MSE.Data.Factory.intNumber, -1), name: alias("Name", String.empty), label: alias("Name", String.empty), mediaType: Microsoft.Entertainment.Queries.ObjectType.genre, type: "genre"
                    })
            }), LibraryResultSet: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {totalCount: alias("TotalCount", -1)})
            }), GroupItemHintBase: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        _title: convert("Name", MSE.Data.Factory.stringOrUnknown), title: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), groupKey: convert([["GroupId", "SortName"]], MSE.Data.Factory.joinStrings, null), firstItemIndexSourceHint: alias("DBOffsetIndex", 0)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {GroupItemHint: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Library.GroupItemHintBase, null, {
                    _title: convert("Name", MSE.Data.Factory.stringOrUnknown), title: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), groupKey: convert("GroupId", MSE.Data.Factory.string, null), description: convert("ItemsCount", MSE.Data.Factory.string, String.empty), totalCount: alias("ItemsCount", 0), largestTotalCount: 0, totalCountScaled: uncachable(convertNoDeflate("totalCount", MSE.Data.Factory.Library.scaleGroupHintNumber, 0)), largestTotalCountScaled: uncachable(convertNoDeflate("largestTotalCount", MSE.Data.Factory.Library.scaleGroupHintNumber, 0)), firstItemIndexSourceHint: alias("DBOffsetIndex", 0), subGroupHints: augment("SubGroups", MSE.Data.Augmenter.Library.GroupItemHintBase, null)
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {Playlist: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Library.MediaItem, null, {
                    count: convert("PlaylistItemsCount", MSE.Data.Factory.intNumber, -1), duration: convert("Duration", MSE.Data.Factory.secondsToMilliseconds, -1), libraryId: convert("ObjectId", MSE.Data.Factory.intNumber, -1), name: convertOriginal("Name", MSE.Data.Factory.normalizeTextDirection, String.empty), type: convert("Type", MSE.Data.Factory.intNumber, -1), dateAdded: convert("DateAdded", MSE.Data.Factory.databaseDate, null), yearOrMonthAdded: convertNoDeflate("dateAdded", MSE.Data.Factory.Library.localizedYearOrMonthFromDate, null), dateEdited: convert("DateEdited", MSE.Data.Factory.databaseDate, null), yearOrMonthEdited: convertNoDeflate("dateEdited", MSE.Data.Factory.Library.localizedYearOrMonthFromDate, null), isExplicit: false, explicitAriaString: String.empty, authorName: String.empty, shortText: String.empty, mediaType: Microsoft.Entertainment.Queries.ObjectType.playlist, tracks: hydratedRequired(value(null)), recentlyPlayedDate: convert("RecentlyPlayedDate", MSE.Data.Factory.databaseDate, null), cloudSyncItemId: convert("CloudSyncItemId", MSE.Data.Factory.guid, String.empty), voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceConfidence: value(defaultVoiceConfidence), smartDjSeed: convert("SmartDjSeed", MSE.Data.Factory.guid, String.empty, convertFeatureOptionsMusic), currentItemIndex: convert("CurrentItemIndex", MSE.Data.Factory.intNumber, -1), localTracksCount: convert("LocalItemsCount", MSE.Data.Factory.intNumber, -1), remoteTracksCount: convert("RemoteItemsCount", MSE.Data.Factory.intNumber, -1), totalTracksCount: convert("PlaylistItemsCount", MSE.Data.Factory.intNumber, -1), allTracksLocal: {get: function get_allTracksLocal() {
                                return this.localTracksCount >= 0 && this.totalTracksCount >= 0 && this.localTracksCount >= this.totalTracksCount
                            }}, allTracksRemote: {get: function get_allTracksRemote() {
                                return this.remoteTracksCount >= 0 && this.totalTracksCount >= 0 && this.remoteTracksCount >= this.totalTracksCount
                            }}, onHydrated: MS.Entertainment.Hydrator.playlistCollection
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {
        MediaItemContainer: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Library.MediaItem, null, {knownChildServiceIdsPromise: null})
        }), GenresResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {
                        items: list("ResultSet", MSE.Data.Augmenter.Library.Genre, null), itemsArray: augment("ResultSet", MSE.Data.Augmenter.Library.Genre, null)
                    })
            }), GroupsAugmentation: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        items: listWithContext("Groups", "LargestGroupItemsCount", MSE.Data.Factory.Library.createGroupHintsListItemFactory(MSE.Data.Augmenter.Library.GroupItemHint)), totalCount: alias("TotalCount")
                    })
            }), PlaylistsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {items: list("ResultSet", MSE.Data.Augmenter.Library.Playlist, null)})
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EditorialType: {
            Movie: "Movie", Series: "Series", Album: "Album", Artist: "Artist", MusicVideo: "MusicVideo", Track: "Track", Playlist: "Playlist", Game: "Game", MovieTrailer: "MovieTrailer", Hub: "Hub", FlexHub: "FlexHub", Season: "Season", Episode: "Episode"
        }, RightType: {
                albumPurchase: "AlbumPurchase", preview: "Preview", purchase: "Purchase", purchaseStream: "PurchaseStream", rent: "Rent", rentStream: "RentStream", stream: "Stream", freeStream: "FreeStream", subscription: "Subscription", subscriptionFree: "SubscriptionFree", seasonPurchase: "SeasonPurchase", seasonPurchaseStream: "SeasonPurchaseStream"
            }, IntroPanelResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {item: augment("ContentManifest.Content", MSE.Data.Augmenter.Common.IntroPanelContent)})
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        MediaItem: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.MediaItem, null, {
                    mediaType: null, serviceIdType: "ZuneCatalog", serviceId: convert("id", MSE.Data.Factory.guid, String.empty), zuneId: convert("id", MSE.Data.Factory.guid, String.empty), canonicalId: convert("id", MSE.Data.Factory.guid, String.empty), contentType: alias("type", String.empty), hasActivities: convert("HasActivities", MSE.Data.Factory.Common.hasSmartGlassActivities, false), collectionState: alias("CollectionState", null)
                })
        }), Right: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        mediaInstanceId: convert("mediaInstanceId", MSE.Data.Factory.guid, String.empty), offerId: convert("offerId", MSE.Data.Factory.guid, String.empty), licenseRight: alias("licenseRight", String.empty), videoDefinition: alias("videoDefinition", String.empty), videoEncoding: alias("videoEncoding", String.empty), videoFileUrl: alias("videoFileUrl", String.empty), clientTypes: convert("clientTypes.clientType", MSE.Data.Factory.Common.zuneDeviceTypesValidate, MSE.Data.Factory.array), paymentInstruments: alias("paymentTypes.paymentType", MSE.Data.Factory.array)
                    })
            }), EditorialImage: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {id: alias("id", null)})
            }), EditorialItem: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        id: alias("id", String.empty), libraryId: hydrated(value(-1)), serviceIdType: "ZuneCatalog", serviceId: convert("link.target", MSE.Data.Factory.guid, String.empty), zuneId: convert("link.target", MSE.Data.Factory.guid, String.empty), canonicalId: MS.Entertainment.Utilities.EMPTY_GUID, type: alias("link.type", String.empty), target: alias("link.target", String.empty), editorialTitle: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), secondaryText: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), title: String.empty, text: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), imageId: convert("image.id", MSE.Data.Factory.guid, String.empty), backgroundImageId: alias("backgroundImage.id", String.empty), serviceType: MSE.Data.Augmenter.ServiceTypes.editorialItem, image: augment("image", MSE.Data.Augmenter.Marketplace.EditorialImage, null)
                    })
            }), EditorialHub: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        mediaType: Microsoft.Entertainment.Queries.ObjectType.editorial, id: alias("id", String.empty), libraryId: hydrated(value(-1)), serviceIdType: "ZuneCatalog", serviceId: convert("link.target", MSE.Data.Factory.guid, String.empty), zuneId: convert("link.target", MSE.Data.Factory.guid, String.empty), canonicalId: MS.Entertainment.Utilities.EMPTY_GUID, type: alias("link.type", String.empty), target: alias("link.target", String.empty), editorialTitle: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), secondaryText: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), title: String.empty, text: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), imageId: convert("image.id", MSE.Data.Factory.guid, String.empty), backgroundImageId: alias("backgroundImage.id", String.empty), serviceType: MSE.Data.Augmenter.ServiceTypes.editorialItem, isNotMedia: true
                    })
            }), GenreQueryOptions: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        genreId: convert("id", MSE.Data.Factory.guid, String.empty), parentGenreId: convert("parentId", MSE.Data.Factory.guid, String.empty)
                    })
            }), ClosedCaption: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        mediaInstanceId: convert("mediaInstanceId", MSE.Data.Factory.guid, String.empty), fileUri: alias("fileUri", String.empty), lcid: alias("lcid", String.empty), name: alias("name", String.empty)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        MediaItemContainer: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Library.MediaItem, null, {knownChildServiceIdsPromise: null})
        }), PrefixData: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.MediaItem, null, {
                        serviceId: convert("id", MSE.Data.Factory.guid, String.empty), zuneId: alias("id", String.empty), name: convertOriginal("title.$value", MSE.Data.Factory.normalizeTextDirection, String.empty), type: alias("type", String.empty), score: convert("score", MSE.Data.Factory.intNumber, 0)
                    })
            }), Genre: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.MediaItem, null, {
                        serviceId: convert("id", MSE.Data.Factory.guid, String.empty), name: alias("title", String.empty), mediaType: Microsoft.Entertainment.Queries.ObjectType.genre
                    })
            }), EditorialItemsEntry: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        id: alias("id", String.empty), editorialItems: augment("editorialItems.editorialItem", MS.Entertainment.Data.Factory.Common.createMediaItemFromEditorialItem, null), catalogId: MS.Entertainment.Utilities.Telemetry.ContentCatalogId.EDS, sourceId: MS.Entertainment.Utilities.Telemetry.ContentSourceId.Compass
                    })
            }), GenrePivotValue: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        queryOptions: augment(String.empty, MSE.Data.Augmenter.Marketplace.GenreQueryOptions, null), itemQueryOptions: augment(String.empty, MSE.Data.Augmenter.Marketplace.GenreQueryOptions, null), itemQuery: {get: function() {
                                    return MS.Entertainment.Data.Query.musicSubGenre
                                }}
                    })
            }), EditorialResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        items: filter("feed.entry[0].editorialItems.editorialItem", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedFlexItems, MS.Entertainment.Data.Factory.Common.createMediaItemFromEditorialItem, null), itemsArray: filterArray("feed.entry[0].editorialItems.editorialItem", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedFlexItems, MS.Entertainment.Data.Factory.Common.createMediaItemFromEditorialItem), name: alias("feed.title.$value", MSE.Data.Factory.normalizeTextDirection, String.empty)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {RichGenre: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.Genre, null, {
                    name: alias(["title.$value", "title"], String.empty), serviceId: alias("id", String.empty), parentServiceId: alias("parentId", String.empty), isRoot: convert("isRoot", MSE.Data.Factory.boolFromString, true), label: alias(["title.$value", "title"], String.empty), value: augment(String.empty, MSE.Data.Augmenter.Marketplace.GenrePivotValue), items: null, selected: false, expanded: false, tabPanelId: null, childIds: null, ariaLevel: 1
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {SubRichGenre: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.RichGenre, null, {
                    items: undefined, expanded: undefined, ariaLevel: 2
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        GenericMediaResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {item: augment("entry", MSE.Data.Augmenter.Marketplace.MediaItem, null)})
        }), PrefixResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("feed.entry", MSE.Data.Augmenter.Marketplace.PrefixData, null)})
            }), GenresResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("feed.entry", MSE.Data.Augmenter.Marketplace.RichGenre, null)})
            }), SubGenresResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("entry.subGenres.genre", MSE.Data.Augmenter.Marketplace.SubRichGenre, null)})
            }), EntriesResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        entries: list("feed.entry", MSE.Data.Augmenter.Marketplace.EditorialItemsEntry, null), entriesArray: augment("feed.entry", MSE.Data.Augmenter.Marketplace.EditorialItemsEntry, null), itemsArray: convertNoDeflate("entriesArray", MSE.Data.Factory.self, null)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {MediaSharePackage: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    mediaId: alias("serviceId", String.empty), mediaType: alias("mediaType", 0), mediaTitle: alias("name", String.empty), title: alias("name", String.empty), description: alias("description", String.empty), text: alias("name", String.empty), uri: alias("webUri", String.empty), htmlUri: alias("webUri", String.empty), htmlImages: collect(["imageUri", "primaryImageUri"], null, String.empty), htmlLines: collect(["name", "description"], null, String.empty)
                })
        })})
})(MS.Entertainment)
})();
/* >>>>>>/framework/data/augmenters/edsaugmenters.js:3559 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MSE, undefined) {
    "use strict";
    var alias = MSE.Data.Property.alias;
    var augment = MSE.Data.Property.augment;
    var convert = MSE.Data.Property.convert;
    var convertNoDeflate = MSE.Data.Property.convertNoDeflate;
    var convertOriginal = MSE.Data.Property.convertOriginal;
    var convertOriginalNoDeflate = MSE.Data.Property.convertOriginalNoDeflate;
    var searchNoDeflate = MSE.Data.Property.searchNoDeflate;
    var list = MSE.Data.Property.list;
    var format = MSE.Data.Property.format;
    var collect = MSE.Data.Property.collect;
    var sortArray = MSE.Data.Property.sortArray;
    var value = MSE.Data.Property.value;
    var hydrated = MSE.Data.Property.hydrated;
    var hydratedRequired = MSE.Data.Property.hydratedRequired;
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data");
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Marketplace", {
        edsDate: function edsDate(data) {
            var returnValue = MS.Entertainment.Data.Factory.date(data);
            if (returnValue)
                returnValue = (returnValue.getFullYear() === 2799) ? null : returnValue;
            return returnValue
        }, edsMediaTypeIntegerToString: function edsMediaTypeIntegerToString(integer) {
                var result;
                if (isNaN(integer) || typeof integer !== "number")
                    result = MSE.Data.Factory.Marketplace.edsMediaTypeValidate(integer);
                else if (integer in MS.Entertainment.Data.Query.edsMediaTypeIntegerToStringMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeIntegerToStringMappings[integer];
                else
                    MS.Entertainment.Data.fail("Invalid integer. Can not find string media type mapping: " + integer, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToDatabaseMediaType: function edsMediaTypeToDatabaseMediaType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToDatabaseMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToDatabaseMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find database media type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeFromDatabaseTypes: function edsMediaTypeFromDatabaseTypes(types) {
                types = types || {};
                var databaseMediaType = types.mediaType;
                var subTypeName = MSE.Data.Factory.Library.mediaTypeToSubTypeNameMappings[types.mediaType];
                var subTypeMappings = MS.Entertainment.Data.Query.databaseMediaTypeToSubTypeMappingMappings[types.mediaType];
                if (Array.isArray(subTypeName)) {
                    databaseMediaType = [];
                    subTypeName.forEach(function(key) {
                        databaseMediaType.push(types[key])
                    })
                }
                else if (subTypeName && subTypeMappings)
                    databaseMediaType = types[subTypeName];
                return MSE.Data.Factory.Marketplace.edsMediaTypeFromDatabaseType(databaseMediaType, subTypeMappings)
            }, edsMediaTypeFromDatabaseType: function edsMediaTypeFromDatabaseType(mediaType, mappings) {
                var key;
                var result;
                var mappingValue;
                var match = false;
                var i = 0;
                mappings = mappings || MS.Entertainment.Data.Query.edsMediaTypeToDatabaseMappings;
                if (Array.isArray(mediaType))
                    for (key in mappings) {
                        match = true;
                        mappingValue = mappings[key];
                        for (i = 0; i < mappingValue.length; i++)
                            if (mappingValue[i] !== mediaType[i]) {
                                match = false;
                                break
                            }
                        if (match) {
                            result = key;
                            break
                        }
                    }
                else
                    for (key in mappings)
                        if (mappings[key] === mediaType) {
                            result = key;
                            break
                        }
                return result
            }, edsMediaTypeToVideoType: function edsMediaTypeToVideoType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToVideoTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToVideoTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find database video type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToGameType: function edsMediaTypeToGameType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToGameTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToGameTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find database game type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToGameTitleType: function edsMediaTypeToGameTitleType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToGameTitleTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToGameTitleTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find database game title type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToPersonType: function edsMediaTypeToPersonType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToPersonTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToPersonTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find database person type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToHcrType: function edsMediaTypeToHcrType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToZuneHcrTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToZuneHcrTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find hcr type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToContentType: function edsMediaTypeToContentType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToContentTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToContentTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find content type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToGamePlatformType: function edsMediaTypeToGamePlatformType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToGamePlatformTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToGamePlatformTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find game platform type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToPurchaseHelperType: function edsMediaTypeToPurchaseHelperType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToPurchaseHelperTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToPurchaseHelperTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find purchase helper type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsPaymentTypeIntegerToString: function edsPaymentTypeIntegerToString(integer) {
                var result;
                if (integer in MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentTypeIntegerToStringMappings)
                    result = MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentTypeIntegerToStringMappings[integer];
                else
                    MS.Entertainment.Data.fail("Invalid integer. Can not find string payment type mapping: " + integer, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsEditorialId: function edsEditorialId(id) {
                id = id.replace(/\//g, "_");
                id = id.replace(/&/g, "!");
                return "xm-" + id
            }, edsServiceIdType: function edsServiceIdType(idHost) {
                var idType;
                if (idHost)
                    if ("ZuneId" in idHost)
                        idType = MS.Entertainment.Data.Query.edsIdType.zuneCatalog;
                    else if ("ID" in idHost || "id" in idHost)
                        idType = MS.Entertainment.Data.Query.edsIdType.canonical;
                return idType
            }, edsServiceIdTypeLegacy: function edsServiceIdTypeLegacy() {
                return MS.Entertainment.Data.Query.edsIdType.zuneCatalog
            }, edsRights: function edsRights(providers, providerId, deviceType, offerAugmenter, includeExpiredOffers) {
                var result = [];
                var currentDate;
                offerAugmenter = offerAugmenter || MSE.Data.Augmenter.Marketplace.EDSModernOfferRight;
                if (Array.isArray(providers)) {
                    currentDate = new Date;
                    providers.forEach(function providerItem(provider) {
                        if (provider && Array.isArray(provider.ProviderContents) && (!providerId || provider.ID === providerId) && (!deviceType || provider.DeviceType === deviceType))
                            provider.ProviderContents.forEach(function augmentItem(content) {
                                if (content && Array.isArray(content.OfferInstances))
                                    content.OfferInstances.forEach(function augmentOffer(offer) {
                                        var endDate = MS.Entertainment.Data.Factory.date(offer.EndDate);
                                        var offerDisplay = offer && offer.OfferDisplay && JSON.parse(offer.OfferDisplay);
                                        if (!endDate || currentDate <= endDate || includeExpiredOffers)
                                            result.push(MSE.Data.augment({
                                                provider: provider, content: content, offer: offer, offerDisplay: offerDisplay
                                            }, offerAugmenter))
                                    })
                            })
                    })
                }
                return result
            }, edsRightsIEBProviders: function edsRightsIEBProviders(providers) {
                return MS.Entertainment.Data.Factory.Marketplace.edsRights(providers)
            }, edsRightsZuneProviders: function edsRightsZuneProviders(providers) {
                return MS.Entertainment.Data.Factory.Marketplace.edsRights(providers, MS.Entertainment.Data.Augmenter.Marketplace.edsProviderId.xboxVideo)
            }, edsRightsCurrentClientProviders: function edsRightsCurrentClientProviders(providers) {
                var deviceType;
                return MS.Entertainment.Data.Factory.Marketplace.edsRights(providers, null, deviceType)
            }, edsUnfilteredRightsCurrentClientProviders: function edsUnfilteredRightsCurrentClientProviders(providers) {
                var deviceType;
                return MS.Entertainment.Data.Factory.Marketplace.edsRights(providers, null, deviceType, null, true)
            }, edsMediaTypeValidate: function edsMediaTypeValidate(mediaType) {
                return mediaType
            }, edsDeviceTypesValidate: function edsDeviceTypesValidate(deviceTypes) {
                if (!Array.isArray(deviceTypes))
                    deviceTypes = [deviceTypes];
                return deviceTypes
            }, edsPaymentTypesValidate: function edsPaymentTypesValidate(paymentTypeContainer) {
                var result;
                if (paymentTypeContainer) {
                    result = paymentTypeContainer.PaymentTypes;
                    if (Array.isArray(result));
                    else if (paymentTypeContainer.DistributionRight === MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchase || paymentTypeContainer.DistributionRight === MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchaseToOwn || paymentTypeContainer.DistributionRight === MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.rent)
                        result = [MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentType.creditCard]
                }
                return result || []
            }, edsResolutionFormatValidate: function edsResolutionFormatValidate(resolutionFormat) {
                return resolutionFormat
            }, edsFriendlyResolutionFormatValidate: function edsFriendlyResolutionFormatValidate(resolutionFormat) {
                resolutionFormat = MSE.Data.Factory.Marketplace.edsResolutionFormatValidate(resolutionFormat);
                if (resolutionFormat === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p)
                    resolutionFormat = MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd;
                return resolutionFormat
            }, edsAudioEncodingValidate: function edsAudioEncodingValidate(audioEncoding) {
                return audioEncoding
            }, edsConvertToRightType: function edsConvertToRightType(distributionRight, mappings) {
                var result = distributionRight;
                mappings = mappings || MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRightToRightTypeMappings;
                if (distributionRight in mappings)
                    result = mappings[distributionRight] || distributionRight;
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find license right type mapping for distribution right. " + distributionRight, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsSetImpressionGuid: function edsSetImpressionGuid(values) {
                var result = null;
                var impressionGuid = null;
                if (values && values.length >= 2) {
                    impressionGuid = values[0];
                    result = values[1]
                }
                return result
            }, edsSetImpressionGuidAndAcquisition: function edsSetImpressionGuidAndAcquisition(values) {
                var result = null;
                var impressionGuid = null;
                var acquisitionData = null;
                if (values && values.length >= 3) {
                    result = values[0];
                    impressionGuid = values[1];
                    acquisitionData = values[2]
                }
                if (result && impressionGuid)
                    result.impressionGuid = impressionGuid;
                if (result && acquisitionData)
                    result.acquisitionData = acquisitionData;
                return result
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Augmenter.Marketplace", {
        edsImagePurpose: {
            background: "Background", backLText: "BackLText", backRText: "BackRText", boxArt: "BoxArt", cover: "Cover", featurePage: "FeaturePage", foreground: "Foreground", icon: "Icon", image: "Image", hero: "Hero", logo: "Logo", mobile: "Mobile", nowPlaying: "NowPlaying", pcBackground: "PCBackground", pcLogo: "PCLogo", sideStage: "SideStage", sellImage: "SellImage", subHero: "SubHero", superHero: "SuperHero", thumbnail: "Thumbnail", weRecommend: "WeRecommend", wideBackground: "WideBackgroundImage", xboxBackground: "XboxBackground"
        }, edsProviderId: {
                cinemaNow: "0x333207D1", vudu: "0x325a07d1", xfinity: "0x473007D1", xboxVideo: "0x3D705025", zune: "0x5848085B"
            }, edsDeviceType: {
                all: "All", pc: "WindowsPC", xblWinClient: "XblWinClient", xbox360: "Xbox360", xboxOne: "XboxOne", zuneDevice: "Zune3.0", zuneMobile: "ZuneMobile"
            }, edsResolutionFormat: {
                hd: "HD", hd1080p: "HD1080p", sd: "SD", xd: "XD"
            }, edsVideoEncoding: {
                h264: "H.264", vc1: "VC-1", vc1mbr: "MBR VC-1 Video"
            }, edsAudioEncoding: {
                ddp: "DolbyDigitalPlus", mp3: "MP3", na: "NA", wma: "WMA", wma10p: "Windows Media Audio 10 Professional"
            }, edsAcceptedPaymentTypes: {
                creditCard: "CreditCard", currencyStoredValue: "CurrencyStoredValue", currencyStoredValueWithCreditCardTopOff: "CurrencyStoredValueWithCreditCardTopOff", none: "None", paypal: "Paypal", tokens: "Tokens"
            }, edsDistributionRight: {
                adSupported: "AdSupported", albumOnlyPurchase: "AlbumOnlyPurchase", albumPurchase: "AlbumPurchase", free: "Free", freeStream: "FreeStream", freeWithAds: "FreeWithAds", freeWithSubscription: "FreeWithSubscription", groupMediaPurchaseToOwn: "GroupMediaPurchaseToOwn", payPerView: "PayPerView", preview: "Preview", purchase: "Purchase", purchaseStream: "PurchaseStream", purchaseToOwn: "PurchaseToOwn", rent: "Rent", rentStream: "RentStream", seasonPurchase: "SeasonPurchase", seasonPurchaseStream: "SeasonPurchaseStream", stream: "Stream", subscription: "Subscription", subscriptionFree: "SubscriptionFree", trackAvailable: "TrackAvailable", trial: "Trial"
            }, edsOfferDistributionType: {
                full: "Full", presale: "Presale"
            }, edsPaymentType: {
                creditCard: "Credit Card", currency: "Currency", mobileOperator: "Mobile Operator", points: "Microsoft Points"
            }, edsCriticReviewSourceType: {
                metaCritic: "Metacritic", rottenTomatoes: "Rotten Tomatoes", rovi: "Rovi"
            }, edsContributorRole: {
                director: "Director", actor: "Actor", writer: "Writer", creator: "Creator"
            }, edsDeliveryFormat: {
                streaming: "Streaming", download: "Progressive"
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Augmenter.Marketplace", {
        Tuner: {
            All: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.all, Xbox360: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.xbox360, XboxOne: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.xboxOne, Windows: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.pc, Zune30: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.zuneDevice, ZuneMobile: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.zuneMobile
        }, edsImagePurposeToRankMappings: (function() {
                var mappings = {};
                mappings[MSE.Data.Augmenter.Marketplace.edsImagePurpose.pcBackground] = 5;
                mappings[MSE.Data.Augmenter.Marketplace.edsImagePurpose.background] = 4;
                mappings[MSE.Data.Augmenter.Marketplace.edsImagePurpose.wideBackground] = 3;
                mappings[MSE.Data.Augmenter.Marketplace.edsImagePurpose.pcLogo] = 2;
                mappings[MSE.Data.Augmenter.Marketplace.edsImagePurpose.logo] = 1;
                return mappings
            })(), edsDistributionRightToRightTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.adSupported] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.albumOnlyPurchase] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.albumPurchase] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.albumPurchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.free] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.freeStream] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.freeWithAds] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.freeWithSubscription] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.payPerView] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.groupMediaPurchaseToOwn] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.seasonPurchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.preview] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.preview;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchase] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.purchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchaseStream] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.purchaseStream;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchaseToOwn] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.purchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.rent] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.rent;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.rentStream] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.rentStream;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.seasonPurchase] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.seasonPurchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.seasonPurchaseStream] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.seasonPurchaseStream;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.stream] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.stream;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.subscription] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.subscription;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.subscriptionFree] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.subscriptionFree;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.trial] = null;
                return mapping
            })(), edsPaymentTypeIntegerToStringMappings: {
                1: MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentType.points, 3: MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentType.currency
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Comparer.Marketplace", {edsCompareImage: function edsCompareImage(image1, image2) {
            var result;
            image1 = MSE.Data.deflate(image1);
            image2 = MSE.Data.deflate(image2);
            if (image1 === image2)
                result = 0;
            else if (!image2)
                result = -1;
            else if (!image1)
                result = 1;
            else {
                var biggestSize1 = (image1.Width > image1.Height) ? image1.Width : image1.Height;
                var biggestSize2 = (image2.Width > image2.Height) ? image2.Width : image2.Height;
                biggestSize1 = isNaN(biggestSize1) ? 0 : biggestSize1;
                biggestSize2 = isNaN(biggestSize1) ? 0 : biggestSize2;
                if (biggestSize1 > biggestSize2)
                    result = -1;
                else if (biggestSize1 < biggestSize2)
                    result = 1;
                else if (image1.Order < image2.Order)
                    result = -1;
                else if (image1.Order > image2.Order)
                    result = 1;
                else
                    result = 0
            }
            return result
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Filter.Marketplace", {edsCreateImageFilter: function edsCreateImageFilter(imagePurpose, filterImagePurpose, minWidth, minHeight, maxWidth, maxHeight, minAspectRatio, maxAspectRatio) {
            if (imagePurpose && !Array.isArray(imagePurpose))
                imagePurpose = [imagePurpose];
            if (filterImagePurpose && !Array.isArray(filterImagePurpose))
                filterImagePurpose = [filterImagePurpose];
            return function edsImageFilter(image) {
                    var filter = true;
                    var i;
                    var aspectRatio;
                    var currentImagePurpose = imagePurpose;
                    image = MS.Entertainment.Data.deflate(image);
                    if ((minAspectRatio || maxAspectRatio) && (image && image.Width && image.Height))
                        aspectRatio = image.Width / image.Height;
                    if (image && (isNaN(minWidth) || minWidth === null || image.Width >= minWidth) && (isNaN(minHeight) || minHeight === null || image.Height >= minHeight) && (isNaN(maxWidth) || maxWidth === null || image.Width <= maxWidth) && (isNaN(maxHeight) || maxHeight === null || image.Height <= maxHeight) && (!minAspectRatio || !aspectRatio || aspectRatio >= minAspectRatio) && (!maxAspectRatio || !aspectRatio || aspectRatio <= maxAspectRatio))
                        filter = false;
                    if (!filter && image.Purposes) {
                        filter = currentImagePurpose && currentImagePurpose.length ? true : false;
                        for (i = 0; i < image.Purposes.length; i++)
                            if (filterImagePurpose && filterImagePurpose.indexOf(image.Purposes[i]) >= 0) {
                                filter = true;
                                break
                            }
                            else if (currentImagePurpose && currentImagePurpose.indexOf(image.Purposes[i]) >= 0) {
                                filter = false;
                                currentImagePurpose = null;
                                if (!filterImagePurpose)
                                    break
                            }
                    }
                    return filter
                }
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Filter.Marketplace", {
        edsFilterNonStaticBackgrounds: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.background, MSE.Data.Augmenter.Marketplace.edsImagePurpose.thumbnail, MSE.Data.Augmenter.Marketplace.edsImagePurpose.pcBackground, MSE.Data.Augmenter.Marketplace.edsImagePurpose.wideBackground, MSE.Data.Augmenter.Marketplace.edsImagePurpose.featurePage], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.backLText, MSE.Data.Augmenter.Marketplace.edsImagePurpose.backRText], 240, null, 3000, 3000), edsFilterNonStaticXboxBackgrounds: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.xboxBackground], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.backLText, MSE.Data.Augmenter.Marketplace.edsImagePurpose.backRText], 1280, 720), edsFilterNonStaticStudioBackgrounds: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.background], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.backLText, MSE.Data.Augmenter.Marketplace.edsImagePurpose.backRText], 1280, 720), edsFilterNonLogos: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.pcLogo, MSE.Data.Augmenter.Marketplace.edsImagePurpose.logo]), edsFilterNonNowPlayingBackgrounds: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.foreground, MSE.Data.Augmenter.Marketplace.edsImagePurpose.background, MSE.Data.Augmenter.Marketplace.edsImagePurpose.pcBackground, MSE.Data.Augmenter.Marketplace.edsImagePurpose.wideBackground, MSE.Data.Augmenter.Marketplace.edsImagePurpose.featurePage], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.backLText, MSE.Data.Augmenter.Marketplace.edsImagePurpose.backRText], 500, 500, null, null, 1), edsFilterNonCoversNonThumbnailsWideOrTall: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.thumbnail, MSE.Data.Augmenter.Marketplace.edsImagePurpose.boxArt, MSE.Data.Augmenter.Marketplace.edsImagePurpose.cover, MSE.Data.Augmenter.Marketplace.edsImagePurpose.featurePage], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.backLText, MSE.Data.Augmenter.Marketplace.edsImagePurpose.backRText]), edsFilterNonCoversNonThumbnails: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.thumbnail, MSE.Data.Augmenter.Marketplace.edsImagePurpose.boxArt, MSE.Data.Augmenter.Marketplace.edsImagePurpose.cover, MSE.Data.Augmenter.Marketplace.edsImagePurpose.featurePage], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.background], null, null, null, null, null, 1)
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        PartnerApplicationLaunchInfoEDS: MSE.Data.define(null, {
            deepLinkInfo: alias("DeepLinkInfo", String.empty), consoleTitleId: alias("TitleId", String.empty), clientType: alias("ClientType", String.empty)
        }), ProviderContent: MSE.Data.define(null, {
                device: alias("Device", String.empty), imageUri: alias("Image.Url", String.empty)
            }), EDSGenre: MSE.Data.define(null, {
                name: alias("Name", String.empty), serviceId: alias("Name", String.empty), mediaType: Microsoft.Entertainment.Queries.ObjectType.genre
            }), EDSImage: MSE.Data.define(null, {
                width: alias("Width", 0), height: alias("Height", 0), purpose: alias("Purpose", 0), url: alias(["ResizeUrl", "Url"], null), resizeUrl: alias("ResizeUrl", null)
            }), EDSOffer: MSE.Data.define(null, {
                offerId: alias("OfferId", 0), price: alias("Price", 0), displayPrice: alias("DisplayPrice", String.empty), paymentType: convert("PaymentType", MSE.Data.Factory.Marketplace.edsPaymentTypeIntegerToString, String.empty)
            }), EDSDetailsResult: MSE.Data.define(null, {
                item: null, impressionGuid: convert("ImpressionGuid", MSE.Data.Factory.guid, String.empty)
            }), EDSBrowseResult: MSE.Data.define(null, {
                items: null, total: alias("Totals[0].Count", -1), totalCount: alias("Totals[0].Count", -1), impressionGuid: convert("ImpressionGuid", MSE.Data.Factory.guid, String.empty)
            }), EDSOfferRight: MSE.Data.define(null, {
                hasOffer: convert("offer", MSE.Data.Factory.bool, false), mediaInstanceId: convert("content.MediaInstanceID", MSE.Data.Factory.guid, String.empty), providerId: convert("provider.ID", MSE.Data.Factory.self, null), offerId: convert("offer.OfferId", MSE.Data.Factory.guid, String.empty), offerInstanceId: convert("offer.OfferInstanceId", MSE.Data.Factory.guid, String.empty), fulfillmentTicket: alias("offer.FulfillmentTicket", String.empty), fulfillmentTicketExpirationDate: alias("offer.Expiration", String.empty), licenseRight: convert("offer.DistributionRight", MSE.Data.Factory.Marketplace.edsConvertToRightType, String.empty), videoDefinition: convert("content.VideoAttributes.ResolutionFormat", MSE.Data.Factory.Marketplace.edsResolutionFormatValidate, String.empty), videoFriendlyDefinition: convert("content.VideoAttributes.ResolutionFormat", MSE.Data.Factory.Marketplace.edsFriendlyResolutionFormatValidate, String.empty), videoEncoding: alias("content.VideoAttributes.VideoEncoding", String.empty), primaryAudioLanguage: alias("content.VideoAttributes.PrimaryAudioLanguage", String.empty), encoding: convert("content.AudioAttributes.Encoding", MSE.Data.Factory.Marketplace.edsAudioEncodingValidate, String.empty), videoFileSizeInBytes: alias("content.SizeInBytes", 0), videoFileUrl: alias("content.Url", String.empty), clientTypes: convert("provider.DeviceType", MSE.Data.Factory.Marketplace.edsDeviceTypesValidate, MSE.Data.Factory.array), paymentInstruments: convert("offer", MSE.Data.Factory.Marketplace.edsPaymentTypesValidate, MSE.Data.Factory.array), price: alias("offer.Price", 0), priceCurrencyCode: alias("offer.CurrencyCode", null), endDate: alias("offer.EndDate", null), startDate: alias("offer.StartDate", null), displayPrice: alias("offer.DisplayPrice", null), deliveryFormat: alias("offer.DeliveryFormat", null), isFullRight: {get: function get_isFullRight() {
                            return !!this.mediaInstanceId || !!this.offerId
                        }}
            }), BBXAutoSuggestItem: MSE.Data.define(null, {
                isSuggestion: true, name: alias("Txt", String.empty)
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {EDSModernOfferRight: MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSOfferRight, null, {
            licenseRight: convert("offer.DistributionRight", MSE.Data.Factory.Marketplace.edsConvertToRightType, String.empty), price: alias("offerDisplay.price", 0), displayPrice: alias("offerDisplay.displayPrice", 0), acceptablePaymentInstrumentTypes: alias("offerDisplay.acceptablePaymentInstrumentTypes", MSE.Data.Factory.array), priceCurrencyCode: alias("offerDisplay.currencyCode", null), distributionType: alias("offerDisplay.distributionType", null), presaleFulfillmentDate: convert("offerDisplay.fulfillmentDate", MSE.Data.Factory.date, null), signedLicensePolicyTicket: alias("offer.SignedLicensePolicyTicket", null), signedOffer: alias("offer.SignedOffer", null), isBundle: convert("offerDisplay.isBundle", MSE.Data.Factory.boolFromString, false), bundledItems: alias("offerDisplay.bundledEntitlements", MSE.Data.Factory.array), isFullRight: {get: function get_isFullRight() {
                        return !!this.mediaInstanceId || !!this.offerId || !!this.signedOffer
                    }}
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {EDSMediaItem: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.MediaItem, null, {
                    serviceId: convert(["ZuneId", "ID", "id"], MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID), serviceIdType: convert(String.empty, MSE.Data.Factory.Marketplace.edsServiceIdType, null), zuneId: hydrated(convert("ZuneId", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), canonicalId: hydrated(convert(["ID", "id"], MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), libraryId: hydrated(value(-1)), edsMediaGroup: alias("MediaGroup", null), edsMediaItemType: alias("MediaItemType", null), edsMediaItemTypeString: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString, String.empty), name: hydratedRequired(convertOriginal(["Name", "name"], MSE.Data.Factory.normalizeTextDirection, String.empty)), title: hydratedRequired(convertOriginal(["Name", "name"], MSE.Data.Factory.normalizeTextDirection, String.empty)), images: hydrated(sortArray("Images", MSE.Data.Comparer.Marketplace.edsCompareImage, MSE.Data.Augmenter.Marketplace.EDSImage, MSE.Data.Factory.array)), primaryImage: searchNoDeflate("images", MSE.Data.Filter.Marketplace.edsFilterNonCoversNonThumbnails, null), backgroundImage: searchNoDeflate("images", MSE.Data.Filter.Marketplace.edsFilterNonStaticBackgrounds, null), xboxBackgroundImage: searchNoDeflate("images", MSE.Data.Filter.Marketplace.edsFilterNonStaticXboxBackgrounds, null), imageUri: hydrated(convertNoDeflate("primaryImage.url", MSE.Data.Factory.self, null)), imageResizeUri: hydrated(convertNoDeflate("primaryImage.resizeUrl", MSE.Data.Factory.self, null)), primaryImageUri: hydrated(convertNoDeflate("primaryImage.url", MSE.Data.Factory.self, null)), backgroundImageUri: hydrated(convertNoDeflate("backgroundImage.url", MSE.Data.Factory.self, null)), backgroundImageResizeUri: convertNoDeflate("backgroundImage.resizeUrl", MSE.Data.Factory.self, null), xboxBackgroundImageUri: hydrated(convertNoDeflate("xboxBackgroundImage.url", MSE.Data.Factory.self, null)), xboxBackgroundImageResizeUri: hydrated(convertNoDeflate("xboxBackgroundImage.resizeUrl", MSE.Data.Factory.self, null)), rights: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsRightsIEBProviders, null)), hasEDSMediaItemType: convert("MediaItemType", MSE.Data.Factory.bool, false), kValue: alias("KValue", null), kValueNamespace: alias("KValueNamespace", null), sevenDaysPlayCount: alias("SevenDaysPlayCount", null), mediaTypeString: {get: function() {
                                return this.edsMediaItemTypeString
                            }}, expectedMediaTypeString: {get: function() {
                                return MSE.Data.Factory.Marketplace.edsMediaTypeFromDatabaseTypes(this)
                            }}, isValid: {get: function() {
                                var hasId = this.hasServiceId || this.inCollection || this.hasCanonicalId;
                                var expectedEDSMediaType = MSE.Data.Factory.Marketplace.edsMediaTypeFromDatabaseTypes(this);
                                return hasId && this.hasEDSMediaItemType && expectedEDSMediaType === this.edsMediaItemTypeString
                            }}, isValidType: {get: function() {
                                var expectedEDSMediaType = MSE.Data.Factory.Marketplace.edsMediaTypeFromDatabaseTypes(this);
                                return expectedEDSMediaType === this.edsMediaItemTypeString
                            }}, relevancyTrackingContent: {get: function() {
                                return {
                                        impressionGuid: this.impressionGuid, kValue: this.kValue, kValueNamespace: this.kValueNamespace
                                    }
                            }}
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {EDSGenericItem: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSMediaItem, null, {
                    mediaType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToDatabaseMediaType, null), personType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToPersonType, null), videoType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToVideoType, null), type: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToHcrType, null), contentType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToContentType, null)
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EDSSearchResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                    items: list("Items", MSE.Data.Augmenter.Marketplace.EDSGenericItem, null), total: alias("Totals[0].Count", 0)
                })
        }), EDSGenericResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        item: augment("Items[0]", MSE.Data.Augmenter.Marketplace.EDSGenericItem, null), total: alias("Totals[0].Count", 0)
                    })
            }), BBXAutoSuggestResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        items: list("AS.Results[0].Suggests", MSE.Data.Augmenter.Marketplace.BBXAutoSuggestItem, null), itemsArray: augment("AS.Results[0].Suggests", MSE.Data.Augmenter.Marketplace.BBXAutoSuggestItem, MSE.Data.Factory.array), total: alias("AS.Results[0].Suggests.length", 0)
                    })
            }), EDSPinnedListResults: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        items: augment("ListItems", MS.Entertainment.Data.Factory.Common.createMediaItemFromPinnedItem), listVersion: alias("ListMetadata.ListVersion", 0), totalCount: alias("ListMetadata.ListCount", -1)
                    })
            })
    })
})(MS.Entertainment)
})();
/* >>>>>>/framework/data/augmenters/spotlightaugmenters.js:4023 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MSE, undefined) {
    "use strict";
    var alias = MSE.Data.Property.alias;
    var augment = MSE.Data.Property.augment;
    var convert = MSE.Data.Property.convert;
    var convertNoDeflate = MSE.Data.Property.convertNoDeflate;
    var convertOriginal = MSE.Data.Property.convertOriginal;
    var convertOriginalNoDeflate = MSE.Data.Property.convertOriginalNoDeflate;
    var filter = MSE.Data.Property.filter;
    var filterArray = MSE.Data.Property.filterArray;
    var list = MSE.Data.Property.list;
    var format = MSE.Data.Property.format;
    var collect = MSE.Data.Property.collect;
    var value = MSE.Data.Property.value;
    var defaultVoiceConfidence = MSE.Data.Factory.defaultVoiceConfidence;
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Spotlight", {createMediaItemFromSpotlightItem: function createMediaItemFromSpotlightItem(spotlightItem) {
            var mediaType = null;
            if (WinJS.Utilities.getMember("Action.type", spotlightItem))
                mediaType = MSE.Data.Augmenter.Spotlight.parseActionType(spotlightItem.Action.type).mediaType;
            else if (WinJS.Utilities.getMember("ItemType", spotlightItem))
                mediaType = spotlightItem.ItemType;
            else {
                mediaType = MS.Entertainment.Data.Augmenter.Spotlight.MediaType.None;
                Trace.fail("Spotlight augmenter - unable to determine media type for given spotlight item")
            }
            var augmentation = MS.Entertainment.Utilities.getSpotlightItemAugmentation(mediaType);
            return MSE.Data.augment(spotlightItem, augmentation)
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {ItemType: {
            Ad: "Ad", Media: "Media", VideoMarketplace: "VideoMarketplace", GameMarketplace: "GameMarketplace", WebBlend: "WebBlend"
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {ActionType: {
            Web: "Web", WebBlend: "WebBlend", FlexHub: "FlexHub", ZuneFlexHub: "ZuneFlexHub"
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {MediaType: {
            None: -1, Movie: "Movie", Season: "Season", Series: "Series", Artist: "Artist", Album: "Album", ModernGame: "Modern", ModernPDLC: "ModernDLC", WindowsGame: "GFWL", PhoneGame: "Windows Phone", XboxGame: "Xbox", Web: "Web", WebBlend: "WebBlend", FlexHub: "FlexHub", ZuneFlexHub: "ZuneFlexHub", Episode: "Episode", Playlist: "Playlist"
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {ContentType: {
            None: "", Movies: "Movies", TV: "TV"
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Filter.Spotlight", {
        DiscoverySpotlightSupportedMusicApp1ItemTypes: [MSE.Data.Augmenter.Spotlight.MediaType.Album, MSE.Data.Augmenter.Spotlight.MediaType.Artist, MSE.Data.Augmenter.Spotlight.MediaType.Web, ], DiscoverySpotlightSupportedMusicApp2ItemTypes: [MSE.Data.Augmenter.Spotlight.MediaType.Album, MSE.Data.Augmenter.Spotlight.MediaType.Artist, MSE.Data.Augmenter.Spotlight.MediaType.FlexHub, MSE.Data.Augmenter.Spotlight.MediaType.Playlist, ], filterDiscoverySupportedMediaTypes: function filterDiscoverySupportedMediaTypes(spotlightItem) {
                var supportedItemTypes = MS.Entertainment.Utilities.isApp1 ? MSE.Data.Filter.Spotlight.DiscoverySpotlightSupportedMusicApp1ItemTypes : MSE.Data.Filter.Spotlight.DiscoverySpotlightSupportedMusicApp2ItemTypes;
                var shouldFilterItem = supportedItemTypes.indexOf(spotlightItem.ItemType) === -1;
                return shouldFilterItem
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {
        parseActionType: function parseActionType(value) {
            var result = null;
            if (value)
                switch (value) {
                    case MS.Entertainment.Data.Augmenter.Spotlight.ActionType.FlexHub:
                        result = {
                            location: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.FlexHub, mediaType: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.FlexHub
                        };
                        break;
                    case MS.Entertainment.Data.Augmenter.Spotlight.ActionType.ZuneFlexHub:
                        result = {
                            location: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.ZuneFlexHub, mediaType: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.ZuneFlexHub
                        };
                        break;
                    case MS.Entertainment.Data.Augmenter.Spotlight.ActionType.Web:
                        result = {
                            location: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Web, mediaType: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Web
                        };
                        break;
                    case MS.Entertainment.Data.Augmenter.Spotlight.ActionType.WebBlend:
                        result = {
                            location: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.WebBlend, mediaType: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.WebBlend
                        };
                        break;
                    default:
                        var elements = value.split("/");
                        result = {
                            location: elements[0], mediaType: (elements.length > 1 && elements[1]) ? elements[1] : MSE.Data.Augmenter.Spotlight.MediaType.None
                        };
                        break
                }
            return result
        }, parseIcon: function parseIcon(actionType) {
                var type = MSE.Data.Augmenter.Spotlight.parseActionType(actionType);
                var icon = null;
                if (type)
                    switch (type.mediaType) {
                        case MSE.Data.Augmenter.Spotlight.MediaType.XboxGame:
                            icon = MS.Entertainment.UI.Icon.smartGlassConsole;
                            break
                    }
                return icon
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {SpotlightAction: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    target: convert("Target", MSE.Data.Factory.guid, null), type: alias("type", null), contentType: alias("PrimaryContent", MSE.Data.Augmenter.Spotlight.ContentType.None)
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {SpotlightSlot: MSE.Data.define(null, {
            sequenceId: convert("SequenceId", MSE.Data.Factory.intNumber, -1), items: augment("Slot", MSE.Data.Factory.Spotlight.createMediaItemFromSpotlightItem, null)
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.MediaDiscovery", {SlotGroupItem: MSE.Data.define(null, {editorialItem: augment("Slot[0]", MSE.Data.Factory.Spotlight.createMediaItemFromSpotlightItem, null)})});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {
        SpotlightContent: MSE.Data.define(null, {
            entries: filter("Items", MSE.Data.Filter.Spotlight.filterDiscoverySupportedMediaTypes, MSE.Data.Factory.Spotlight.createMediaItemFromSpotlightItem, null), items: filter("Items", MSE.Data.Filter.Spotlight.filterDiscoverySupportedMediaTypes, MSE.Data.Factory.Spotlight.createMediaItemFromSpotlightItem, null), itemsArray: filterArray("Items", MSE.Data.Filter.Spotlight.filterDiscoverySupportedMediaTypes, MSE.Data.Factory.Spotlight.createMediaItemFromSpotlightItem, null), name: convertOriginal("Title", MSE.Data.Factory.normalizeTextDirection, String.empty)
        }), VideoSpotlightContent: MSE.Data.define(null, {
                entries: list("ContentManifest.Content.Channel.SlotGroup", MSE.Data.Augmenter.Spotlight.SpotlightSlot, null), itemsArray: augment("ContentManifest.Content.Channel.SlotGroup", MSE.Data.Augmenter.Spotlight.SpotlightSlot, null), name: convertOriginal("ContentManifest.Name", MSE.Data.Factory.normalizeTextDirection, String.empty)
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {EditorialOverrideSlot: MSE.Data.derive(MSE.Data.Augmenter.Spotlight.SpotlightSlot, null, {overrideSequenceId: convertOriginal("SequenceId", MSE.Data.Factory.string, String.empty)})});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {EditorialOverrideContent: MSE.Data.derive(MSE.Data.Augmenter.Spotlight.SpotlightContent, null, {
            entries: list("ContentManifest.Content.SlotGroup", MSE.Data.Augmenter.Spotlight.EditorialOverrideSlot, null), itemsArray: augment("ContentManifest.Content.SlotGroup", MSE.Data.Augmenter.Spotlight.EditorialOverrideSlot, null)
        })})
})(MS.Entertainment)
})();
/* >>>>>>/framework/data/augmenters/videohydrators.js:4141 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Hydrator");

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.Hydrator", {
        _adjustVideoListItemFactory: function _adjustVideoListItemFactory(list, values) {
            if (!list || !list.itemFactory)
                return;
            var originalFactory = list.itemFactory;
            var itemFactory = function itemFactory(source) {
                    var item = originalFactory(source);
                    if (item && item.data && values)
                        for (var key in values)
                            item.data[key] = values[key];
                    return item
                };
            itemFactory.listItemFactory = true;
            list.setItemFactory(itemFactory);
            return list
        }, sanitizeVideoIds: function sanitizeVideoIds(data, hydrating) {
                if ("canonicalSeriesId" in data && MS.Entertainment.Utilities.isEmptyGuid(data.canonicalSeriesId))
                    data.canonicalSeriesId = null;
                if ("seriesZuneId" in data && (!MS.Entertainment.Utilities.isEmptyGuid(hydrating.seriesZuneId) || MS.Entertainment.Utilities.isEmptyGuid(data.seriesZuneId)))
                    data.seriesZuneId = null;
                if ("seriesId" in data && (!MS.Entertainment.Utilities.isEmptyGuid(hydrating.seriesId) || MS.Entertainment.Utilities.isEmptyGuid(data.seriesId)))
                    data.seriesId = null;
                if ("seriesServiceId" in data && (!MS.Entertainment.Utilities.isEmptyGuid(hydrating.seriesServiceId) || MS.Entertainment.Utilities.isEmptyGuid(data.seriesServiceId)))
                    data.seriesServiceId = null;
                if ("seriesIdType" in data && MS.Entertainment.Utilities.isEmptyGuid(data.seriesServiceId) && MS.Entertainment.Utilities.isEmptyGuid(data.seriesId))
                    data.seriesIdType = null;
                return MS.Entertainment.Hydrator.sanitizeIds(data, hydrating)
            }, _getOwnedVideoQualityFormats: function _getOwnedVideoQualityFormats(mediaItem) {
                if (!mediaItem.inCollection)
                    return mediaItem;
                return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMarketplaceFileAccessAsync(mediaItem).then(function queryMediaStateAsync_complete(stateInfo) {
                        if (!stateInfo || !stateInfo.libraryDefinitions)
                            return mediaItem;
                        var foundFormats = [];
                        var edsResolutionFormat = MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat;
                        if (stateInfo.libraryDefinitions[edsResolutionFormat.hd] || stateInfo.libraryDefinitions[edsResolutionFormat.hd1080p]) {
                            foundFormats.push(edsResolutionFormat.hd);
                            mediaItem.hasHdLibraryDefinition = true
                        }
                        if (stateInfo.libraryDefinitions[edsResolutionFormat.sd] || stateInfo.libraryDefinitions[edsResolutionFormat.xd]) {
                            foundFormats.push(edsResolutionFormat.sd);
                            mediaItem.hasSdLibraryDefinition = true
                        }
                        mediaItem.libraryDefinitions = MS.Entertainment.Data.Factory.arrayJoin(foundFormats);
                        return mediaItem
                    }.bind(this))
            }, _getVideoEntitlements: function _getVideoEntitlements(data, hydrating) {
                if (!data || !hydrating)
                    return WinJS.Promise.as();
                data.hasPurchased = hydrating.hasPurchased;
                if (data.hasZuneId && !data.hasPurchased)
                    return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync([data.zuneId]).then(function getMediaEntitlementsAsync_complete(results) {
                            try {
                                results = JSON.parse(results).result;
                                data.hasPurchased = !!WinJS.Utilities.getMember("counts.purchased", results)
                            }
                            catch(error) {}
                            return data
                        });
                return WinJS.Promise.as(data)
            }, _getClosedCaptionFilesFromLibrary: function _getClosedCaptionFilesFromLibrary(mediaItem) {
                var result = mediaItem;
                if (mediaItem && mediaItem.inCollection && !mediaItem.closedCaptionFiles && mediaItem.hasZuneId)
                    result = Microsoft.Entertainment.ClosedCaptionDownloader.getDownloadedClosedCaptionListAsync(mediaItem.zuneId, MS.Entertainment.Utilities.EMPTY_GUID).then(function gotClosedCaptions(data) {
                        return MS.Entertainment.Data.augment(JSON.parse(data), MS.Entertainment.Data.Augmenter.Marketplace.EdsClosedCaptioningFiles).items
                    }, function failedClosedCaptions() {
                        return []
                    }).then(function setCloseCaptions(files) {
                        mediaItem.closedCaptionFiles = files;
                        return mediaItem
                    });
                return WinJS.Promise.as(result)
            }, _batchDetailQueries: function _batchDetailQueries(zuneIds, mediaItemType, batchSize) {
                var batchedDetailQueries = [];
                batchSize = batchSize || 5;
                for (var i = 0; i < zuneIds.length; i += batchSize) {
                    var batchDetailQuery;
                    switch (mediaItemType) {
                        case MS.Entertainment.Platform.PurchaseHelpers.MOVIE_TYPE:
                            batchDetailQuery = new MS.Entertainment.Data.Query.Video.EdsBatchDetailsMovie;
                            break;
                        case MS.Entertainment.Platform.PurchaseHelpers.TV_EPISODE_TYPE:
                            batchDetailQuery = new MS.Entertainment.Data.Query.Video.EdsBatchDetailsTVEpisode;
                            break;
                        case MS.Entertainment.Platform.PurchaseHelpers.TV_SEASON_TYPE:
                            batchDetailQuery = new MS.Entertainment.Data.Query.Video.EdsBatchDetailsTVSeason;
                            break;
                        default:
                            MS.Entertainment.Framework.fail("Unexpected mediaItemType: '{0}'. Only Movie, TVEpisode, and TVSeason media types are supported.".format(mediaItemType));
                            break
                    }
                    if (batchDetailQuery) {
                        var zuneIdsChunk = zuneIds.slice(i, i + batchSize);
                        batchDetailQuery.ids = zuneIdsChunk;
                        var performBatchDetailQuery = batchDetailQuery.execute().then(function(q) {
                                if (q.result.itemsArray && Array.isArray(q.result.itemsArray))
                                    return WinJS.Promise.wrap(q.result.itemsArray);
                                return null
                            });
                        batchedDetailQueries.push(performBatchDetailQuery)
                    }
                }
                return batchedDetailQueries
            }, video: function video(hydrating, options) {
                if (hydrating.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode)
                    return MS.Entertainment.Hydrator.tvEpisode(hydrating, options);
                else if (hydrating.videoType === Microsoft.Entertainment.Queries.VideoType.movie)
                    return MS.Entertainment.Hydrator.movie(hydrating, options);
                else if (hydrating.videoType === Microsoft.Entertainment.Queries.VideoType.other)
                    return null;
                else {
                    MS.Entertainment.Hydrator.fail("Trying to hydrate an unsupported video type");
                    return WinJS.wrapError(new Error("Trying to hydrate an unsupported video type"))
                }
            }, movie: function movie(hydrating, options) {
                options = options || {};
                var result;
                var ignoreQueryError = function ignoreQueryError(error) {
                        if (!hydrating.inCollection)
                            return WinJS.Promise.wrapError(error);
                        var item = new MS.Entertainment.Data.Augmenter.Marketplace.EdsMovie;
                        item.releaseDate = null;
                        item.videoDefinition = null;
                        item.videoDefinitions = null;
                        item.zuneId = hydrating.zuneId;
                        item.libraryId = hydrating.libraryId;
                        item.hasPurchased = hydrating.hasPurchased;
                        return MS.Entertainment.Hydrator._getClosedCaptionFilesFromLibrary(item)
                    };
                if (!hydrating.hasServiceId)
                    result = null;
                else {
                    var movieQuery = MS.Entertainment.Hydrator.prepareDetailsQuery(new MS.Entertainment.Data.Query.Video.EdsDetailMovie, new MS.Entertainment.Framework.QueryWatcher("MS.Entertainment.Hydrator.movie"), hydrating);
                    result = movieQuery.execute().then(function queryCompleted(q) {
                        var item = q.result.item;
                        if (!item || !item.isValid)
                            return ignoreQueryError(null);
                        return MS.Entertainment.Hydrator._getVideoEntitlements(item, hydrating)
                    }, ignoreQueryError).then(function gotVideoEntitlments(item) {
                        return MS.Entertainment.Hydrator._getClosedCaptionFilesFromLibrary(item)
                    }).then(function setIsPartOfBundle(item) {
                        item.isPartOfBundle = options.isPartOfBundle;
                        return WinJS.Promise.wrap(item)
                    }).then(function gotClosedCaptionFiles(item) {
                        item.rightsHydrated = true;
                        return MS.Entertainment.Hydrator.sanitizeVideoIds(item, hydrating)
                    }).then(function haveSanitizeIds(item) {
                        return MS.Entertainment.Hydrator._getOwnedVideoQualityFormats(item)
                    }).then(function queryForPresaleItems(item) {
                        var rights = item.unfilteredRights || [];
                        if (item && rights) {
                            item.isPresale = false;
                            rights.forEach(function forEach(right) {
                                if (!right)
                                    return;
                                if (right.distributionType === MS.Entertainment.Data.Augmenter.Marketplace.edsOfferDistributionType.presale)
                                    if (right.presaleFulfillmentDate) {
                                        var fulfillmentDate = right.presaleFulfillmentDate;
                                        var now = new Date;
                                        if (fulfillmentDate > now) {
                                            item.isPresale = true;
                                            if (Date.isValidExpirationDate(fulfillmentDate)) {
                                                item.presaleFulfillmentDate = right.presaleFulfillmentDate;
                                                return true
                                            }
                                        }
                                        else
                                            right.distributionType = MS.Entertainment.Data.Augmenter.Marketplace.edsOfferDistributionType.full
                                    }
                                    else {
                                        item.isPresale = true;
                                        return true
                                    }
                            })
                        }
                        return WinJS.Promise.wrap(item)
                    }).then(function getSecondsFromEndForPostroll(item) {
                        var isPostrollCreditsServiceRegistered = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.postrollCreditsService);
                        if (isPostrollCreditsServiceRegistered) {
                            var postrollCreditsService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.postrollCreditsService);
                            var secondsFromEndForPostrollPromise = postrollCreditsService.secondsFromEndForPostroll(item).then(function setSecondsFromEndForPostroll(secondsFromEndForPostroll) {
                                    item.secondsFromEndForPostroll = secondsFromEndForPostroll;
                                    return WinJS.Promise.wrap(item)
                                });
                            return secondsFromEndForPostrollPromise
                        }
                        else
                            return WinJS.Promise.wrap(item)
                    }).then(function queryForBundledItems(item) {
                        var collectBundledItemsPromise = null;
                        if (item && item.rights)
                            item.rights.some(function forSome(right) {
                                if (!right)
                                    return;
                                if (right.isBundle && right.bundledItems) {
                                    item.isBundle = true;
                                    var isMovie = function(element) {
                                            return element && element.productType && element.productType === MS.Entertainment.Platform.PurchaseHelpers.MOVIE_TYPE
                                        };
                                    var isTVEpisode = function(element) {
                                            return element && element.productType && element.productType === MS.Entertainment.Platform.PurchaseHelpers.TV_EPISODE_TYPE
                                        };
                                    var isTVSeason = function(element) {
                                            return element && element.productType && element.productType === MS.Entertainment.Platform.PurchaseHelpers.TV_SEASON_TYPE
                                        };
                                    var mapZuneIds = function(element) {
                                            return element && element.mid
                                        };
                                    var movieZuneIds = right.bundledItems.filter(isMovie).map(mapZuneIds);
                                    var tvEpisodeZuneIds = right.bundledItems.filter(isTVEpisode).map(mapZuneIds);
                                    var tvSeasonZuneIds = right.bundledItems.filter(isTVSeason).map(mapZuneIds);
                                    var allBatchedDetailQueries = MS.Entertainment.Hydrator._batchDetailQueries(movieZuneIds, MS.Entertainment.Platform.PurchaseHelpers.MOVIE_TYPE);
                                    allBatchedDetailQueries = allBatchedDetailQueries.concat(MS.Entertainment.Hydrator._batchDetailQueries(tvEpisodeZuneIds, MS.Entertainment.Platform.PurchaseHelpers.TV_EPISODE_TYPE));
                                    allBatchedDetailQueries = allBatchedDetailQueries.concat(MS.Entertainment.Hydrator._batchDetailQueries(tvSeasonZuneIds, MS.Entertainment.Platform.PurchaseHelpers.TV_SEASON_TYPE));
                                    collectBundledItemsPromise = WinJS.Promise.join(allBatchedDetailQueries).then(function(bundledItemChunks) {
                                        var allBundledPresaleItems = [];
                                        var allBundledRegularItems = [];
                                        if (bundledItemChunks && Array.isArray(bundledItemChunks))
                                            bundledItemChunks.forEach(function(bundledItemChunk) {
                                                if (bundledItemChunk && Array.isArray(bundledItemChunk))
                                                    bundledItemChunk.forEach(function(bundledItem) {
                                                        if (bundledItem && bundledItem.zuneId) {
                                                            var rights = bundledItem.unfilteredRights || [];
                                                            var isPresale = rights.some(function isPresalecheckForPresale(right) {
                                                                    if (!right)
                                                                        return false;
                                                                    if (right.distributionType === MS.Entertainment.Data.Augmenter.Marketplace.edsOfferDistributionType.presale) {
                                                                        var now = new Date;
                                                                        if (!right.presaleFulfillmentDate || right.presaleFulfillmentDate > now)
                                                                            return true
                                                                    }
                                                                    return false
                                                                });
                                                            if (isPresale)
                                                                allBundledPresaleItems.push(bundledItem);
                                                            else
                                                                allBundledRegularItems.push(bundledItem)
                                                        }
                                                        else
                                                            MS.Entertainment.Framework.fail("Couldn't determine the ordering of the bundled item with zuneId: '{0}'.".format(bundledItem.zuneId))
                                                    })
                                            });
                                        var sortByReleaseDateAscending = function sortByReleaseDateAscending(a, b) {
                                                if (a && b && a.releaseDate && b.releaseDate)
                                                    if (a.releaseDate > b.releaseDate)
                                                        return 1;
                                                    else if (a.releaseDate < b.releaseDate)
                                                        return -1;
                                                return 0
                                            };
                                        allBundledPresaleItems.sort(sortByReleaseDateAscending);
                                        allBundledRegularItems.sort(sortByReleaseDateAscending);
                                        return WinJS.Promise.wrap(allBundledPresaleItems.concat(allBundledRegularItems))
                                    });
                                    return true
                                }
                            });
                        return WinJS.Promise.join({
                                bundledItems: WinJS.Promise.as(collectBundledItemsPromise), item: WinJS.Promise.wrap(item)
                            })
                    }).then(function onBundledItemsHydrated(result) {
                        var item = result.item;
                        var allBundledItemsInCollectionPromise = WinJS.Promise.wrap();
                        if (item.isBundle) {
                            var bundledItems = result.bundledItems || [];
                            item.bundledItems = bundledItems;
                            var allZuneIdsPromises = [];
                            bundledItems.forEach(function collectZuneIds(bundledItem) {
                                if (!bundledItem)
                                    return;
                                if (MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(bundledItem)) {
                                    var seasonHydratePromise = WinJS.Promise.wrap();
                                    if (bundledItem.hydrate && !bundledItem.hydrated)
                                        seasonHydratePromise = bundledItem.hydrate();
                                    var seasonEpisodesPromise = seasonHydratePromise.then(function collectSeasonEpisodeZuneIds() {
                                            var seasonEpisodeZuneIds = [];
                                            if (bundledItem.episodes && bundledItem.episodes.count > 0)
                                                bundledItem.episodes.itemsFromIndex(0).then(function collectSeasonEpisodeZuneIds(episodeList) {
                                                    if (episodeList && episodeList.items && episodeList.items.length > 0)
                                                        for (var i = 0; i < episodeList.items.length; i++)
                                                            if (episodeList.items[i] && episodeList.items[i].data && episodeList.items[i].data.zuneId)
                                                                seasonEpisodeZuneIds.push(episodeList.items[i].data.zuneId)
                                                });
                                            return WinJS.Promise.wrap(seasonEpisodeZuneIds)
                                        }.bind(this));
                                    allZuneIdsPromises.push(seasonEpisodesPromise)
                                }
                                else
                                    allZuneIdsPromises.push(WinJS.Promise.wrap(bundledItem.zuneId))
                            });
                            var allZuneIds = [];
                            allBundledItemsInCollectionPromise = WinJS.Promise.join(allZuneIdsPromises).then(function allZuneIdsPromises_complete(result) {
                                if (result && result.length > 0)
                                    result.forEach(function flattenResults(zuneIdChunk) {
                                        allZuneIds = allZuneIds.concat(zuneIdChunk)
                                    });
                                return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync(allZuneIds)
                            }.bind(this)).then(function getMediaEntitlementsAsync_complete(mediaEntitlements) {
                                mediaEntitlements = JSON.parse(mediaEntitlements).result;
                                item.allBundledItemsInCollection = mediaEntitlements.counts.purchased === allZuneIds.length
                            }.bind(this), function getMediaEntitlements_error(e) {
                                MS.Entertainment.Hydrator.fail("Couldn't check media entitlements")
                            })
                        }
                        return allBundledItemsInCollectionPromise.then(function allBundledItemsInCollectionPromise_complete() {
                                if (item && item.bundledItems && item.bundledItems.length > 0)
                                    item.bundledItems.forEach(function setBundledStatus(bundledItem) {
                                        bundledItem.isPartOfBundle = true
                                    });
                                return WinJS.Promise.wrap(item)
                            })
                    })
                }
                return WinJS.Promise.as(result)
            }, tvEpisode: function tvEpisode(hydrating, options) {
                options = options || {};
                var result;
                var ignoreQueryError = function ignoreQueryError(error) {
                        if (!hydrating.inCollection)
                            return WinJS.Promise.wrapError(error);
                        var item = new MS.Entertainment.Data.Augmenter.Marketplace.EdsTVEpisode;
                        item.releaseDate = null;
                        item.videoDefinition = null;
                        item.videoDefinitions = null;
                        item.zuneId = hydrating.zuneId;
                        item.libraryId = hydrating.libraryId;
                        item.hasPurchased = hydrating.hasPurchased;
                        return MS.Entertainment.Hydrator._getClosedCaptionFilesFromLibrary(item)
                    };
                if (!hydrating.hasServiceId)
                    result = null;
                else {
                    var tvEpisodeQuery = MS.Entertainment.Hydrator.prepareDetailsQuery(new MS.Entertainment.Data.Query.Video.EdsDetailTVEpisode, new MS.Entertainment.Framework.QueryWatcher("MS.Entertainment.Hydrator.tvEpisode"), hydrating);
                    result = tvEpisodeQuery.execute().then(function queryCompleted(q) {
                        var item = q.result.item;
                        if (!item || !item.isValid)
                            return ignoreQueryError(null);
                        return MS.Entertainment.Hydrator._getVideoEntitlements(item, hydrating)
                    }, ignoreQueryError).then(function gotVideoEntitlments(item) {
                        return MS.Entertainment.Hydrator._getClosedCaptionFilesFromLibrary(item)
                    }).then(function gotClosedCaptionFiles(item) {
                        if (item) {
                            item.rightsHydrated = true;
                            return MS.Entertainment.Hydrator.sanitizeVideoIds(item, hydrating)
                        }
                    }).then(function haveSanitizeIds(item) {
                        return MS.Entertainment.Hydrator._getOwnedVideoQualityFormats(item)
                    }).then(function getSecondsFromEndForPostroll(item) {
                        var isPostrollCreditsServiceRegistered = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.postrollCreditsService);
                        if (isPostrollCreditsServiceRegistered) {
                            var postrollCreditsService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.postrollCreditsService);
                            var secondsFromEndForPostrollPromise = postrollCreditsService.secondsFromEndForPostroll(item).then(function setSecondsFromEndForPostroll(secondsFromEndForPostroll) {
                                    item.secondsFromEndForPostroll = secondsFromEndForPostroll;
                                    return WinJS.Promise.wrap(item)
                                });
                            return secondsFromEndForPostrollPromise
                        }
                        else
                            return WinJS.Promise.wrap(item)
                    })
                }
                return WinJS.Promise.as(result)
            }, tvSeries: function tvSeries(hydrating, options) {
                options = options || {};
                var result;
                var queryWatcher = new MS.Entertainment.Framework.QueryWatcher("MS.Entertainment.Hydrator.tvSeries");
                var ignoreQueryError = function ignoreQueryError(error) {
                        if (!hydrating.inCollection)
                            return WinJS.Promise.wrapError(error);
                        var item = new MS.Entertainment.Data.Augmenter.Marketplace.Video.EdsTVSeries;
                        item.releaseDate = null;
                        item.videoDefinition = null;
                        item.videoDefinitions = null;
                        item.hasPurchased = hydrating.hasPurchased;
                        return item
                    };
                var tvSeriesQuery = MS.Entertainment.Hydrator.prepareDetailsQuery(new MS.Entertainment.Data.Query.Video.EdsTvSeriesWithSeasons, queryWatcher, hydrating);
                result = tvSeriesQuery.execute().then(function queryCompleted(q) {
                    var item = WinJS.Utilities.getMember("result.item", q);
                    if (!item || !item.isValid)
                        return ignoreQueryError(null);
                    return MS.Entertainment.Hydrator._getVideoEntitlements(item, hydrating)
                }, ignoreQueryError).then(function gotVideoEntitlments(item) {
                    return MS.Entertainment.Hydrator._getClosedCaptionFilesFromLibrary(item)
                }).then(function gotClosedCaptionFiles(item) {
                    item.rightsHydrated = true;
                    return MS.Entertainment.Hydrator.sanitizeVideoIds(item, hydrating)
                }).then(function haveSanitizeIds(item) {
                    var seasons = item.seasons;
                    if (MS.Entertainment.Data.List.isList(seasons))
                        MS.Entertainment.Hydrator._adjustVideoListItemFactory(seasons, {
                            seriesId: item.zuneId || hydrating.zuneId, seriesIdType: MS.Entertainment.Data.Query.edsIdType.zuneCatalog, seriesZuneId: item.zuneId || hydrating.zuneId, seriesLibraryId: item.libraryId || -1
                        });
                    else
                        item.seasonCount = 0;
                    return item
                }).then(function setSeasonData(item) {
                    if (item && item.libraryId > -1) {
                        var seasonsQuery = new MS.Entertainment.Data.Query.libraryTVSeasons;
                        seasonsQuery.tvSeriesId = item.libraryId;
                        seasonsQuery.sort = Microsoft.Entertainment.Queries.TVSeasonsSortBy.numberAscending;
                        seasonsQuery.isLive = !!options.listenForDBUpdates;
                        queryWatcher.registerQuery(seasonsQuery);
                        return seasonsQuery.execute().then(function librarySeasons(q) {
                                item.librarySeasons = q.result.items;
                                if (seasonsQuery.isLive)
                                    item.liveQuery = seasonsQuery;
                                return item
                            })
                    }
                    else
                        item.librarySeasons = null;
                    return item
                }).then(function mergeSeasonData(item) {
                    var seasonHydrationPromises = [];
                    if (WinJS.Utilities.getMember("seasons.itemsFromIndex", item) && WinJS.Utilities.getMember("librarySeasons.forEach", item)) {
                        var missingLibrarySeasons = [];
                        item.librarySeasons.forEach(function seasonIterator(librarySeason) {
                            var currentLibrarySeason = WinJS.Utilities.getMember("item.data", librarySeason);
                            if (currentLibrarySeason) {
                                var foundLibrarySeason = false;
                                item.seasons.itemsFromIndex(0).then(function scanSeasons(seasons) {
                                    for (var marketplaceIndex = 0; marketplaceIndex < seasons.items.length; marketplaceIndex++) {
                                        var currentMarketplaceSeason = seasons.items[marketplaceIndex].data;
                                        if (currentMarketplaceSeason && (currentLibrarySeason.seasonNumber === currentMarketplaceSeason.seasonNumber)) {
                                            foundLibrarySeason = true;
                                            break
                                        }
                                    }
                                }.bind(this));
                                if (!foundLibrarySeason) {
                                    seasonHydrationPromises.push(currentLibrarySeason.hydrate());
                                    missingLibrarySeasons.push(currentLibrarySeason)
                                }
                            }
                        }.bind(this));
                        if (missingLibrarySeasons && missingLibrarySeasons.length > 0)
                            item.seasons.insertRangeAtEnd(missingLibrarySeasons, {
                                suppressEvents: true, isSourceData: true
                            })
                    }
                    return WinJS.Promise.join(seasonHydrationPromises).then(function seasonsHydrated() {
                            return WinJS.Promise.wrap(item)
                        })
                });
                return WinJS.Promise.as(result)
            }, tvSeason: function tvSeason(hydrating, options) {
                options = options || {};
                var result;
                var queryWatcher = new MS.Entertainment.Framework.QueryWatcher("MS.Entertainment.Hydrator.tvSeason");
                if (!(hydrating.hasServiceId) && !((hydrating.isEditorialSeason || hydrating.isLibrarySeason) && hydrating.seriesId && hydrating.seasonNumber))
                    result = null;
                else {
                    var item;
                    var tvSeriesPromise;
                    if ((hydrating.isEditorialSeason || hydrating.isLibrarySeason) && hydrating.seriesId && hydrating.seasonNumber > -1) {
                        item = new MS.Entertainment.Data.Augmenter.Marketplace.EdsTVSeason;
                        var tvSeries = MS.Entertainment.Hydrator.prepareDetailsQuery(new MS.Entertainment.Data.Query.Video.EdsTvSeriesWithSeasons, queryWatcher, {
                                serviceId: hydrating.seriesId, serviceIdType: hydrating.seriesIdType, seasonNumber: hydrating.seasonNumber
                            });
                        tvSeriesPromise = tvSeries.execute().then(function tvSeriesQuerySuccess(q) {
                            var seasons = q.result && q.result.item && q.result.item.seasons;
                            if (MS.Entertainment.Data.List.isList(seasons))
                                return seasons.forEachAll(function(args) {
                                        if (args.item.data.seasonNumber === hydrating.seasonNumber) {
                                            item.canonicalId = args.item.data.canonicalId;
                                            item.serviceId = args.item.data.serviceId;
                                            item.serviceIdType = args.item.data.serviceIdType;
                                            item.seasonNumber = args.item.data.seasonNumber;
                                            args.stop = true
                                        }
                                    })
                        }, function ignoreQueryError(error) {
                            if (!hydrating.inCollection)
                                return WinJS.Promise.wrapError(error);
                            item.releaseDate = null;
                            item.videoDefinition = null;
                            item.videoDefinitions = null;
                            return item
                        })
                    }
                    result = MS.Entertainment.Utilities.redirectPromise(tvSeriesPromise, item).then(function gotSeasonFromZestSeries(item) {
                        var tvSeasonQuery = MS.Entertainment.Hydrator.prepareDetailsQuery(new MS.Entertainment.Data.Query.Video.EdsTvSeasonWithEpisodes, queryWatcher, item || hydrating);
                        return tvSeasonQuery.execute()
                    }).then(function queryCompleted(q) {
                        var item = q && q.result && q.result.item;
                        if (!item)
                            return WinJS.Promise.wrapError(new Error("Failed to retrieve a valid tv season media item from the query."));
                        item.rightsHydrated = true;
                        return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(hydrating).then(function libraryInfoHydrated() {
                                return MS.Entertainment.Hydrator._getVideoEntitlements(item, hydrating)
                            }).then(function gotVideoEntitlments(item) {
                                return MS.Entertainment.Hydrator._getClosedCaptionFilesFromLibrary(item)
                            })
                    }, function ignoreQueryError(error) {
                        if (!hydrating.inCollection)
                            return WinJS.Promise.wrapError(error);
                        item.releaseDate = null;
                        item.videoDefinition = null;
                        item.videoDefinitions = null;
                        item.episodesQueryFailed = true;
                        return item
                    }).then(function setLibraryEpisodeData(item) {
                        if (item && hydrating && hydrating.libraryId > -1 && hydrating.seriesLibraryId > -1) {
                            var episodesQuery = new MS.Entertainment.Data.Query.libraryVideoTV;
                            episodesQuery.seriesId = hydrating.seriesLibraryId;
                            episodesQuery.seasonId = hydrating.libraryId;
                            episodesQuery.sort = Microsoft.Entertainment.Queries.VideosSortBy.seriesTitleSeasonNumberEpisodeNumber;
                            episodesQuery.chunkSize = 1000;
                            episodesQuery.isLive = !!options.listenForDBUpdates;
                            queryWatcher.registerQuery(episodesQuery);
                            return episodesQuery.execute().then(function libraryEpisodes(q) {
                                    item.libraryEpisodes = q.result.items;
                                    if (episodesQuery.isLive)
                                        item.liveQuery = episodesQuery;
                                    return item
                                })
                        }
                        else
                            item.libraryEpisodes = null;
                        return item
                    }).then(function mergeLibraryEpisodes(item) {
                        var promise = null;
                        if (item && item.episodes && item.libraryEpisodes)
                            promise = item.episodes.toArrayAll().then(function onEpisodesLoaded(episodes) {
                                var episodeHydrationPromises = [];
                                var missingLibraryEpisodes = [];
                                item.libraryEpisodes.forEach(function episodeIterator(libraryEpisode) {
                                    var currentLibraryEpisode = WinJS.Utilities.getMember("item.data", libraryEpisode);
                                    if (currentLibraryEpisode) {
                                        var foundLibraryEpisode = false;
                                        for (var marketplaceIndex = 0; marketplaceIndex < episodes.length; marketplaceIndex++) {
                                            var currentMarketplaceEpisode = episodes[marketplaceIndex];
                                            if (currentMarketplaceEpisode && (currentLibraryEpisode.serviceId === currentMarketplaceEpisode.serviceId) || (currentLibraryEpisode.seasonNumber === currentMarketplaceEpisode.seasonNumber && currentLibraryEpisode.episodeNumber === currentMarketplaceEpisode.episodeNumber)) {
                                                foundLibraryEpisode = true;
                                                break
                                            }
                                        }
                                        if (!foundLibraryEpisode) {
                                            episodeHydrationPromises.push(currentLibraryEpisode.hydrate());
                                            missingLibraryEpisodes.push(currentLibraryEpisode)
                                        }
                                    }
                                }.bind(this));
                                if (missingLibraryEpisodes && missingLibraryEpisodes.length > 0)
                                    item.episodes.insertRangeAtEnd(missingLibraryEpisodes, {
                                        suppressEvents: true, isSourceData: true
                                    });
                                return WinJS.Promise.join(episodeHydrationPromises)
                            }.bind(this));
                        return WinJS.Promise.as(promise).then(function onMergeComplete() {
                                return WinJS.Promise.wrap(item)
                            })
                    }).then(function getVideoEntitlements(item) {
                        return MS.Entertainment.Hydrator._getVideoEntitlements(item, hydrating)
                    }).then(function gotClosedCaptionFiles(item) {
                        return MS.Entertainment.Hydrator.sanitizeVideoIds(item, hydrating)
                    }).then(function haveSanitizeIds(item) {
                        var episodeHydratePromises = [];
                        var episodes = item.episodes;
                        var forEachAllPromise = WinJS.Promise.as();
                        if (episodes) {
                            item.episodeCount = episodes.count;
                            forEachAllPromise = episodes.forEachAll(function populateData(args) {
                                var episode = args && args.item && args.item.data;
                                if (!episode)
                                    return;
                                episode.seasonZuneId = hydrating.zuneId || hydrating.serviceId;
                                episode.seriesZuneId = hydrating.seriesZuneId;
                                episodeHydratePromises.push(MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(episode))
                            })
                        }
                        else
                            item.episodeCount = 0;
                        return WinJS.Promise.join({
                                episodes: forEachAllPromise.then(function hydrateEpisodes() {
                                    return WinJS.Promise.join(episodeHydratePromises)
                                }), item: WinJS.Promise.wrap(item)
                            })
                    }).then(function haveHydratedEpisodes(results) {
                        var item = results.item;
                        var episodes = results.episodes.sort(MS.Entertainment.Data.Comparer.createPropertyComparer("episodeNumber"));
                        var firstEpisode = null;
                        episodes.some(function(episode) {
                            if (episode && episode.episodeNumber > 0) {
                                firstEpisode = episode;
                                firstEpisode.hydrate();
                                return true
                            }
                        });
                        return WinJS.Promise.join({
                                firstEpisode: WinJS.Promise.as(firstEpisode), virtualList: MS.Entertainment.Data.VirtualList.wrapArray(episodes), item: item
                            })
                    }).then(function haveEpisodes(results) {
                        var item = results.item;
                        item.episodes = results.virtualList;
                        item.firstEpisode = results.firstEpisode;
                        return WinJS.Promise.wrap(item)
                    })
                }
                return WinJS.Promise.as(result)
            }, contributor: function contributor(hydrating, options) {
                options = options || {};
                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.castAndCrew && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.graceNoteService))) {
                    var graceNoteService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.graceNoteService);
                    var result = graceNoteService.contributorSearch(hydrating.name, options.graceNoteImageSize).then(function appendContributorImage(result) {
                            if (result && result.items && result.items.length) {
                                var contributor = result.items[0];
                                if (contributor && contributor.image && contributor.name && contributor.name.toLowerCase() === hydrating.name.toLowerCase()) {
                                    hydrating.imageUri = contributor.image;
                                    hydrating.biography = contributor.biography;
                                    hydrating.biographyLanguage = contributor.biographyLanguage
                                }
                            }
                            if (!hydrating.imageUri)
                                hydrating.imageUri = MS.Entertainment.UI.ImagePaths.genericVideoActorPlaceholder;
                            return WinJS.Promise.wrap(hydrating)
                        }, function contributorSearchFailed() {
                            hydrating.imageUri = MS.Entertainment.UI.ImagePaths.genericVideoActorPlaceholder;
                            return WinJS.Promise.wrap(hydrating)
                        });
                    return WinJS.Promise.as(result)
                }
                else
                    return WinJS.Promise.wrap(hydrating)
            }
    })
})()
})();
/* >>>>>>/framework/data/augmenters/videoaugmenters.js:4778 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MSE, undefined) {
    "use strict";
    var alias = MSE.Data.Property.alias;
    var augment = MSE.Data.Property.augment;
    var augmentNoDeflate = MSE.Data.Property.augmentNoDeflate;
    var convert = MSE.Data.Property.convert;
    var convertNoDeflate = MSE.Data.Property.convertNoDeflate;
    var convertOriginal = MSE.Data.Property.convertOriginal;
    var convertOriginalNoDeflate = MSE.Data.Property.convertOriginalNoDeflate;
    var list = MSE.Data.Property.list;
    var format = MSE.Data.Property.format;
    var collect = MSE.Data.Property.collect;
    var filter = MSE.Data.Property.filter;
    var filterArray = MSE.Data.Property.filterArray;
    var filterNoDeflate = MSE.Data.Property.filterNoDeflate;
    var filterArrayNoDeflate = MSE.Data.Property.filterArrayNoDeflate;
    var search = MSE.Data.Property.search;
    var searchNoDeflate = MSE.Data.Property.searchNoDeflate;
    var sortArray = MSE.Data.Property.sortArray;
    var format = MSE.Data.Property.format;
    var value = MSE.Data.Property.value;
    var hydrated = MSE.Data.Property.hydrated;
    var hydratedRequired = MSE.Data.Property.hydratedRequired;
    var defaultVoiceConfidence = MSE.Data.Factory.defaultVoiceConfidence;
    var uncachable = MSE.Data.Property.uncachable;
    var convertFeatureOptionsTv = {feature: Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace};
    var convertFeatureOptionsTvOrMovies = {feature: [Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace, Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace]};
    var convertFeatureOptionsClosedCaptions = {feature: Microsoft.Entertainment.FeatureEnablement.FeatureItem.closedCaptionsEnabled};
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        edsVideoRating: {
            notRated: "not rated", nr: "nr", unrated: "unrated"
        }, videoDefinition: {
                hd: "HD", sd: "SD"
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Comparer.Marketplace", {
        edsCompareStudio: function edsCompareStudio(studio1, studio2) {
            var result;
            if (studio1 === studio2)
                result = 0;
            else if (!studio2)
                result = -1;
            else if (!studio1)
                result = 1;
            else if (studio1.Name > studio2.Name)
                result = -1;
            else if (studio1.Name < studio2.Name)
                result = 1;
            else
                result = 0;
            return result
        }, edsCompareItemPlayCount: function edsCompareItemPlayCount(itemA, itemB) {
                var aLeft = itemA.sevenDaysPlayCount;
                var bLeft = itemB.sevenDaysPlayCount;
                return (bLeft - aLeft)
            }, edsCompareSeason: function edsCompareSeason(season1, season2) {
                var result;
                if (season1 === season2 || (!season1 && !season2))
                    result = 0;
                else if (!season2)
                    result = -1;
                else if (!season1)
                    result = 1;
                else {
                    var seasonNum1 = season1.SeasonNumber;
                    var seasonNum2 = season2.SeasonNumber;
                    if (seasonNum1 > 99)
                        seasonNum1 = seasonNum1 / 100;
                    if (seasonNum2 > 99)
                        seasonNum2 = seasonNum2 / 100;
                    if (seasonNum1 > seasonNum2)
                        result = 1;
                    else if (seasonNum1 < seasonNum2)
                        result = -1;
                    else
                        result = 0
                }
                return result
            }, edsCompareImageByPurposeThenSize: function edsCompareImageByPurposeThenSize(image1, image2, rankings) {
                var selectBestPurposeRank = function selectBestPurposeRank(purposes, rankings) {
                        var bestPurpose = -1;
                        if (purposes && rankings)
                            for (var i = 0; i < purposes.length; i++) {
                                var rank = rankings[purposes[i]] || -1;
                                if (rank > bestPurpose)
                                    bestPurpose = rank
                            }
                        return bestPurpose
                    };
                var result;
                image1 = MS.Entertainment.Data.deflate(image1);
                image2 = MS.Entertainment.Data.deflate(image2);
                if (image1 === image2)
                    result = 0;
                else if (!image2)
                    result = -1;
                else if (!image1)
                    result = 1;
                else {
                    var biggestSize1 = (image1.Width > image1.Height) ? image1.Width : image1.Height;
                    var biggestSize2 = (image2.Width > image2.Height) ? image2.Width : image2.Height;
                    biggestSize1 = isNaN(biggestSize1) ? 0 : biggestSize1;
                    biggestSize2 = isNaN(biggestSize1) ? 0 : biggestSize2;
                    var purpose1 = selectBestPurposeRank(image1.Purposes, rankings);
                    var purpose2 = selectBestPurposeRank(image2.Purposes, rankings);
                    if (purpose1 > purpose2)
                        result = -1;
                    else if (purpose1 < purpose2)
                        result = 1;
                    else if (biggestSize1 > biggestSize2)
                        result = -1;
                    else if (biggestSize1 < biggestSize2)
                        result = 1;
                    else if (image1.Order < image2.Order)
                        result = -1;
                    else if (image1.Order > image2.Order)
                        result = 1;
                    else
                        result = 0
                }
                return result
            }, edsCompareImageByVideoPurpose: function edsCompareImageByVideoPurpose(image1, image2) {
                return MSE.Data.Comparer.Marketplace.edsCompareImageByPurposeThenSize(image1, image2, MS.Entertainment.Data.Augmenter.Marketplace.edsImagePurposeToRankMappings)
            }, edsCompareImagePurposeOnly: function edsCompareImagePurposeOnly(image1, image2) {
                var result;
                image1 = MS.Entertainment.Data.deflate(image1);
                image2 = MS.Entertainment.Data.deflate(image2);
                if (image1 === image2)
                    result = 0;
                else if (!image2)
                    result = -1;
                else if (!image1)
                    result = 1;
                else {
                    var image1rank = MS.Entertainment.Data.Augmenter.Marketplace.edsImagePurposeToRankMappings[image1.Purpose] || -1;
                    var image2rank = MS.Entertainment.Data.Augmenter.Marketplace.edsImagePurposeToRankMappings[image2.Purpose] || -1;
                    if (image1rank > image2rank)
                        result = -1;
                    else if (image1rank < image2rank)
                        result = 1;
                    else
                        result = 0
                }
                return result
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Filter.Marketplace", {filterUnsupportedEditorialItems: function filterUnsupportedEditorialItems(item) {
            var editorialItem = item && item.editorialItem;
            var editorialType = WinJS.Utilities.getMember("actionType.mediaType", editorialItem);
            return !MS.Entertainment.Utilities.isSupportedVideoEditorialType(editorialItem, editorialType)
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Filter.Marketplace", {filterUnsupportedRecommendationItems: function filterUnsupportedRecommendationItems(item) {
            var supported = true;
            if (item && MS.Entertainment.Utilities.checkRecommendationsItemForNotInterested(item))
                supported = false;
            return !supported
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Marketplace", {
        EDSStudio: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    images: augment("Images", MSE.Data.Augmenter.Marketplace.EDSImage, null), name: alias("Name", String.empty)
                })
        }), EDSCriticReview: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        criticName: convert("Critic", MSE.Utilities.unEscapeHTML, String.empty), criticText: convert("CriticText", MSE.Utilities.unEscapeHTML, String.empty), date: convert("Date", MSE.Data.Factory.date, MSE.Data.Factory.dateNow), publication: convert("Publication", MSE.Utilities.unEscapeHTML, String.empty), publicationUrl: alias("PublicationUrl", String.empty), scoreDescription: alias("ScoreDescription", String.empty)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Marketplace", {EDSReviewSource: MSE.Data.define(null, {
            name: alias("Name", String.empty), reviewScore: convert("ReviewScore", MSE.Data.Factory.intNumber, -1), reviewScoreCount: convert("ReviewScoreCount", MSE.Data.Factory.intNumber, -1), url: alias("Url", String.empty), criticReviews: augment("CriticReviews", MSE.Data.Factory.Marketplace.EDSCriticReview, [])
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Marketplace", {ProviderEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    titleId: alias("ID", String.empty), name: alias("Name", String.empty), imageUri: alias("Image.Url", String.empty), partnerApplicationLaunchInfoList: augment("PartnerApplicationLaunchInfos.PartnerApplicationLaunchInfo", MSE.Data.Augmenter.Marketplace.PartnerApplicationLaunchInfoEDS, null), providerContents: augment("ProviderContents.ProviderContent", MSE.Data.Augmenter.Marketplace.ProviderContent, null)
                })
        })});
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data.Factory.Marketplace");
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Marketplace", {GenreEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.MediaItem, null, {
                    name: alias("Name", String.empty), mediaType: Microsoft.Entertainment.Queries.ObjectType.genre
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Marketplace", {
        unknownString: function unknowString() {
            return String.load(String.id.IDS_UNKNOWN_VALUE)
        }, getEditorialItem: function getEditorialItem(item) {
                return item && item.editorialItem
            }, editorialTvSeasonGetSeriesId: function editorialTvSeasonSeriesIdFromTarget(target) {
                if (target) {
                    var delimiterPosition = target.indexOf(",");
                    if (delimiterPosition > 0)
                        return target.substring(0, delimiterPosition)
                }
                return String.empty
            }, editorialTvSeasonGetSeasonNumber: function editorialTvSeasonSeriesIdFromTarget(target) {
                if (target) {
                    var delimiterPosition = target.indexOf(",");
                    if (delimiterPosition > 0 && (delimiterPosition + 1) < target.length)
                        return parseInt(target.substring(delimiterPosition + 1))
                }
                return -1
            }, inMyVideosText: function(inCollection) {
                return inCollection ? String.load(String.id.IDS_SEARCH_INMYVIDEOS_LABEL) : String.empty
            }, edsClosedCaptionFiles: function edsClosedCaptions(providers) {
                var result = [];
                if (Array.isArray(providers))
                    providers.forEach(function providerItem(provider) {
                        if (provider && Array.isArray(provider.ProviderContents))
                            provider.ProviderContents.forEach(function augmentItem(content) {
                                if (content && content.VideoAttributes && Array.isArray(content.VideoAttributes.ClosedCaptionFiles))
                                    content.VideoAttributes.ClosedCaptionFiles.forEach(function augmentClosedCaptions(closedCaptions) {
                                        result.push(MSE.Data.augment({
                                            MediaInstanceID: content.MediaInstanceID, Lcid: closedCaptions.Lcid, Name: closedCaptions.Name, Url: closedCaptions.Url
                                        }, MSE.Data.Augmenter.Marketplace.EdsClosedCaption))
                                    })
                            })
                    });
                return result
            }, edsBurntInSubtitleLanguage: function edsBurntInSubtitleLanguage(providers) {
                var result = undefined;
                if (Array.isArray(providers)) {
                    var globalizationManager = new Microsoft.Entertainment.Util.GlobalizationManager;
                    providers.forEach(function providerItem(provider) {
                        if (provider && Array.isArray(provider.ProviderContents))
                            provider.ProviderContents.forEach(function augmentItem(content) {
                                if (content && content.VideoAttributes && content.VideoAttributes.BurntInSubtitleLanguage > 0) {
                                    var localizedName = String.empty;
                                    try {
                                        localizedName = globalizationManager.getLanguageNameFromLcid(content.VideoAttributes.BurntInSubtitleLanguage)
                                    }
                                    catch(e) {
                                        var error = e && e.detail && e.detail.error;
                                        var description = e && e.detail && e.detail.exception;
                                        MS.Entertainment.Framework.fail("Failure in call to native function GetLanguageNameFromLCID. Failed to get the localized language name due to system error. Error: " + error + ", description: " + description)
                                    }
                                    if (localizedName) {
                                        var burntInLanguage = MSE.Data.augment({
                                                MediaInstanceID: content.MediaInstanceID, Lcid: content.VideoAttributes.BurntInSubtitleLanguage, Name: localizedName
                                            }, MSE.Data.Augmenter.Marketplace.EdsBurntInSubtitleLanguage);
                                        if (result)
                                            MS.Entertainment.Framework.assert(result.lcid === burntInLanguage.lcid, "There are two different burnt in languages specified in the Provider contents. This should not happen, contact EDS");
                                        result = burntInLanguage
                                    }
                                }
                            })
                    })
                }
                return result
            }, edsHasSubtitles: function edsHasSubtitles(providers) {
                var result = false;
                var burntInSubtitleLanguage = MSE.Data.Factory.Marketplace.edsBurntInSubtitleLanguage(providers);
                var closedCaptionFiles = MSE.Data.Factory.Marketplace.edsClosedCaptionFiles(providers);
                if (burntInSubtitleLanguage && burntInSubtitleLanguage.lcid > 0 && burntInSubtitleLanguage.name)
                    result = true;
                else if (closedCaptionFiles && closedCaptionFiles.length > 1) {
                    var defaultClosedCaptionLcid = -1;
                    closedCaptionFiles.forEach(function filterToSubtitles(closedCaptions) {
                        if (defaultClosedCaptionLcid !== -1 && closedCaptions.lcid !== defaultClosedCaptionLcid)
                            result = true;
                        else
                            defaultClosedCaptionLcid = closedCaptions.lcid
                    })
                }
                return result
            }, edsFormatSubtitles: function edsFormatSubtitles(providers) {
                var result = String.empty;
                var closedCaptionFiles = MSE.Data.Factory.Marketplace.edsClosedCaptionFiles(providers);
                var burntInSubtitleLanguage = MSE.Data.Factory.Marketplace.edsBurntInSubtitleLanguage(providers);
                var hasBurntInSubtitleLanguage = burntInSubtitleLanguage && burntInSubtitleLanguage.lcid > 0 && burntInSubtitleLanguage.name;
                if (hasBurntInSubtitleLanguage)
                    result = burntInSubtitleLanguage.name;
                else if (closedCaptionFiles && closedCaptionFiles.length > 1) {
                    var parts = [];
                    closedCaptionFiles.forEach(function filterToSubtitles(closedCaptions) {
                        parts.push(closedCaptions.name)
                    });
                    result = parts.unique().join(String.load(String.id.IDS_DETAILS_INFO_SEPERATOR))
                }
                return result
            }, edsCrossMediaToVideoFactory: function edsCrossMediaToVideoFactory(item) {
                var mediaType = item.type || item.MediaItemType;
                if (mediaType in MS.Entertainment.Data.Query.edsMediaTypeIntegerToStringMappings)
                    mediaType = MS.Entertainment.Data.Query.edsMediaTypeIntegerToStringMappings[mediaType];
                var augmenter;
                if (mediaType === MS.Entertainment.Data.Query.edsMediaType.movie)
                    augmenter = MS.Entertainment.Data.Augmenter.Marketplace.Video.EdsMovie;
                else if (mediaType === MS.Entertainment.Data.Query.edsMediaType.tvSeries)
                    augmenter = MS.Entertainment.Data.Augmenter.Marketplace.Video.EdsTVSeries;
                if (augmenter)
                    item = MS.Entertainment.Data.augment(WinJS.Binding.unwrap(item), augmenter);
                return item
            }, edsProviders: function edsProviders(providers) {
                var result = [];
                var currentDate;
                if (Array.isArray(providers)) {
                    currentDate = new Date;
                    for (var p = 0; p < providers.length; p++) {
                        var provider = providers[p];
                        if (provider && Array.isArray(provider.ProviderContents)) {
                            var found = false;
                            for (var c = 0; c < provider.ProviderContents.length; c++) {
                                var content = provider.ProviderContents[c];
                                if (content && Array.isArray(content.OfferInstances))
                                    for (var o = 0; o < content.OfferInstances.length; o++) {
                                        var offer = content.OfferInstances[o];
                                        var endDate = MS.Entertainment.Data.Factory.date(offer.EndDate);
                                        if (!endDate || currentDate <= endDate) {
                                            found = true;
                                            break
                                        }
                                    }
                                if (found)
                                    break
                            }
                            if (found)
                                result.push(MSE.Data.augment(provider, MSE.Data.Augmenter.Marketplace.EdsProvider))
                        }
                    }
                }
                return result
            }, edsFileSizeInBytes: function edsFileSizeInBytes(rights, quality) {
                var fileSize = 0;
                if (rights && Array.isArray(rights))
                    for (var p = 0; p < rights.length; p++) {
                        var right = rights[p];
                        if (right && right.videoDefinition && right.videoDefinition === quality && right.videoFileSizeInBytes > fileSize)
                            fileSize = right.videoFileSizeInBytes
                    }
                return fileSize
            }, edsHDFileSizeInBytes: function edsHDFileSizeInBytes(rights) {
                return MSE.Data.Factory.Marketplace.edsFileSizeInBytes(rights, "HD")
            }, edsHDFileSizeInMBytes: function edsHDFileSizeInMBytes(rights) {
                return MSE.Data.Factory.Marketplace.edsHDFileSizeInBytes(rights) / (1024 * 1024)
            }, edsSDFileSizeInBytes: function edsSDFileSizeInBytes(rights) {
                return MSE.Data.Factory.Marketplace.edsFileSizeInBytes(rights, "SD")
            }, edsSDFileSizeInMBytes: function edsSDFileSizeInMBytes(rights) {
                return MSE.Data.Factory.Marketplace.edsSDFileSizeInBytes(rights) / (1024 * 1024)
            }, edsCompanionProviderNames: function edsCompanionProviderNames(providers) {
                var result = String.empty;
                if (MS.Entertainment.Utilities.isCompanionApp && Array.isArray(providers)) {
                    providers = providers.map(function(provider) {
                        return provider ? provider.name : String.empty
                    });
                    result = providers.join(String.load(String.id.IDS_DETAILS_INFO_SEPERATOR))
                }
                {};
                return result
            }, edsFilterNonZuneProvider: function edsFilterNonZuneProvider(provider) {
                var filter = true;
                if (provider && provider.ID === MS.Entertainment.Data.Augmenter.Marketplace.edsProviderId.zune)
                    filter = false;
                return filter
            }, edsFilterZuneProvider: function edsFilterZuneProvider(provider) {
                var filter = true;
                if (provider && provider.ID !== MS.Entertainment.Data.Augmenter.Marketplace.edsProviderId.zune)
                    filter = false;
                return filter
            }, edsRatingToStars: function(data) {
                if (!data)
                    data = 0;
                var averageRating = data * 5;
                return averageRating.toFixed(1)
            }, filterNonPreviewRight: function filterNonPreviewRight(right) {
                var filter = true;
                if (right && right.licenseRight === MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.preview)
                    filter = false;
                return filter
            }, filterNonHDRight: function filterNonHDRight(right) {
                var filter = true;
                if (right && MS.Entertainment.Utilities.rightSupportsTuner(right, MS.Entertainment.Utilities.defaultClientTypeFromApp) && right.licenseRight !== MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.preview && (right.videoDefinition === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd || right.videoDefinition === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p))
                    filter = false;
                return filter
            }, filterNonSDRight: function filterNonSDRight(right) {
                var filter = true;
                if (right && MS.Entertainment.Utilities.rightSupportsTuner(right, MS.Entertainment.Utilities.defaultClientTypeFromApp) && right.licenseRight !== MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.preview && right.videoDefinition === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.sd)
                    filter = false;
                return filter
            }, filterNonRottenTomatoesReviews: function filterRottenTomatoesReviews(review) {
                var filter = true;
                if (review && review.name == MS.Entertainment.Data.Augmenter.Marketplace.edsCriticReviewSourceType.rottenTomatoes)
                    filter = false;
                return filter
            }, filterNonMetaCriticReviews: function filterNonMetaCriticReviews(review) {
                var filter = true;
                if (review && review.name == MS.Entertainment.Data.Augmenter.Marketplace.edsCriticReviewSourceType.metaCritic)
                    filter = false;
                return filter
            }, convertVideoEditorialItem: function convertVideoEditorialItem(editorialItemContainer) {
                var convertedItem = null;
                if (editorialItemContainer && editorialItemContainer.editorialItem)
                    convertedItem = MS.Entertainment.Utilities.convertEditorialItem(editorialItemContainer.editorialItem);
                return convertedItem
            }, convertVideoRecommendationItem: function convertVideoRecommendationItem(recommendedItem) {
                var convertedItem = null;
                if (recommendedItem) {
                    var setProperty = MS.Entertainment.Utilities.BindingAgnostic.setProperty;
                    setProperty(recommendedItem, "primaryText", recommendedItem.name);
                    if (recommendedItem.explanations && recommendedItem.explanations.length > 0 && recommendedItem.explanations[0] && recommendedItem.explanations[0].text) {
                        var explanationText = recommendedItem.explanations[0].text.match(/{(\d+)}/g) ? ("{0}" + recommendedItem.explanations[0].text).format(String.empty, recommendedItem.explanations[0].explanationItems[0].name) : recommendedItem.explanations[0].text;
                        setProperty(recommendedItem, "secondaryText", explanationText)
                    }
                    MS.Entertainment.UI.Shell.ImageLoader.getServiceImageUrl(recommendedItem, null, null, null, null, String.empty).then(function setPrimaryImageUrl(url) {
                        setProperty(recommendedItem, "imagePrimaryUrl", url)
                    });
                    setProperty(recommendedItem, "imageFallbackUrl", MS.Entertainment.UI.Shell.ImageLoader.getMediaItemDefaultImageUrl(recommendedItem))
                }
                return recommendedItem
            }, expandGenreNameDelimiter: function expandGenreNameDelimiter(genreName) {
                var result = genreName || String.empty;
                var indexOfDelimiter = result.indexOf("/");
                if (indexOfDelimiter > 0)
                    result = result.replace("/", " / ");
                return result
            }, sanitizeVideoRating: function sanitizeVideoRating(rating) {
                var result = rating;
                var lowerCased = rating && rating.toLowerCase();
                if (!lowerCased || lowerCased === MSE.Data.Augmenter.Marketplace.edsVideoRating.nr || lowerCased === MSE.Data.Augmenter.Marketplace.edsVideoRating.notRated)
                    result = String.load(String.id.IDS_DETAILS_NOT_RATED_LABEL);
                return result
            }, localizeRatingString: function localizeRatingString(rating, isLong) {
                var result = rating;
                var lowerCased = rating && rating.toLowerCase();
                if (!lowerCased || lowerCased === MSE.Data.Augmenter.Marketplace.edsVideoRating.nr || lowerCased === MSE.Data.Augmenter.Marketplace.edsVideoRating.notRated)
                    result = isLong ? String.load(String.id.IDS_DETAILS_NOT_RATED_LONG_LABEL) : String.load(String.id.IDS_DETAILS_NOT_RATED_LABEL);
                else if (lowerCased === MSE.Data.Augmenter.Marketplace.edsVideoRating.unrated)
                    result = isLong ? String.load(String.id.IDS_DETAILS_UNRATED_LONG_LABEL) : String.load(String.id.IDS_DETAILS_UNRATED_LABEL);
                return result
            }, toLocalizedVideoRatingStringShort: function toLocalizedVideoRatingStringShort(rating) {
                return MS.Entertainment.Data.Factory.Marketplace.localizeRatingString(rating, false)
            }, toLocalizedVideoRatingStringLong: function toLocalizedVideoRatingStringLong(rating) {
                return MS.Entertainment.Data.Factory.Marketplace.localizeRatingString(rating, true)
            }, setVideoRatingImage: function setVideoRatingImage(rating) {
                var ratingImage;
                var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                var ratingValues = config.playback.videoRatingValues.split(",");
                MS.Entertainment.Data.Factory.Marketplace.assert((ratingValues.length === 5 || ratingValues === String.emtpy), "Exactly 5 rating values are expected for Poland");
                if (ratingValues.length === 5)
                    switch (rating) {
                        case ratingValues[0]:
                            ratingImage = "/images/VideoRatings/video_poland_ratings_no_restriction.png";
                            break;
                        case ratingValues[1]:
                            ratingImage = "/images/VideoRatings/video_poland_ratings_7.png";
                            break;
                        case ratingValues[2]:
                            ratingImage = "/images/VideoRatings/video_poland_ratings_12.png";
                            break;
                        case ratingValues[3]:
                            ratingImage = "/images/VideoRatings/video_poland_ratings_16.png";
                            break;
                        case ratingValues[4]:
                            ratingImage = "/images/VideoRatings/video_poland_ratings_18.png";
                            break;
                        default:
                            ratingImage = String.empty;
                            break
                    }
                return ratingImage
            }, sanitizeVideoRatingAndAddFilterMoniker: function sanitizeMovieRatingAndAddFilterMoniker(rating, mediaType) {
                var result = rating;
                var lowerCasedRating = rating && rating.toLowerCase();
                if (lowerCasedRating === MSE.Data.Augmenter.Marketplace.edsVideoRating.nr || lowerCasedRating === MSE.Data.Augmenter.Marketplace.edsVideoRating.notRated)
                    return MS.Entertainment.Shell.BaseContentRestrictionService.ratingTypes.microsoft3;
                else if (!lowerCasedRating)
                    return String.empty;
                mediaType = mediaType || "movie";
                if (MS.Entertainment.Utilities.PublicContentRatings) {
                    var globalizationManager = new Microsoft.Entertainment.Util.GlobalizationManager;
                    var regionCode = globalizationManager.getRegion();
                    var geographicRatings = MS.Entertainment.Utilities.PublicContentRatings.regions[regionCode];
                    result = geographicRatings && geographicRatings[mediaType] && geographicRatings[mediaType][result]
                }
                return result
            }, sanitizeMovieRatingAndAddFilterMoniker: function sanitizeMovieRatingAndAddFilterMoniker(rating) {
                return MS.Entertainment.Data.Factory.Marketplace.sanitizeVideoRatingAndAddFilterMoniker(rating, "movie")
            }, sanitizeTVRatingAndAddFilterMoniker: function sanitizeMovieRatingAndAddFilterMoniker(rating) {
                return MS.Entertainment.Data.Factory.Marketplace.sanitizeVideoRatingAndAddFilterMoniker(rating, "tv")
            }, sanitizeMovieDescription: function sanitizeMovieDescription(description) {
                var result = description;
                var pipeIndex = description && description.indexOf("|");
                if (pipeIndex !== null && pipeIndex !== undefined && pipeIndex >= 0) {
                    var resultArray = description.split("|");
                    MS.Entertainment.Data.Factory.Marketplace.assert(resultArray && resultArray.length && resultArray.length === 2, "Unexpected number of pipes contained in movie description string.");
                    result = resultArray && resultArray[1]
                }
                return result
            }, toLocalizedRole: function toLocalizedRole(role) {
                var localizedString = role;
                switch (role) {
                    case MS.Entertainment.Data.Augmenter.Marketplace.edsContributorRole.director:
                        localizedString = String.load(String.id.IDS_VIDEO_CAST_DIRECTOR);
                        break;
                    case MS.Entertainment.Data.Augmenter.Marketplace.edsContributorRole.actor:
                        localizedString = String.load(String.id.IDS_VIDEO_CAST_ACTOR);
                        break;
                    case MS.Entertainment.Data.Augmenter.Marketplace.edsContributorRole.writer:
                        localizedString = String.load(String.id.IDS_VIDEO_CAST_WRITER);
                        break;
                    case MS.Entertainment.Data.Augmenter.Marketplace.edsContributorRole.creator:
                        localizedString = String.load(String.id.IDS_VIDEO_CAST_CREATOR);
                        break;
                    default:
                        MS.Entertainment.Data.Factory.Marketplace.fail("Unknown contributor role passed to toLocalizedRole");
                        break
                }
                return localizedString
            }, _edsCreateGenreQueryOptions: function _edsCreateGenreQueryOptions(selectedModifier, secondaryModifierKey) {
                var genre;
                var selectedSecondaryModifier;
                if (selectedModifier)
                    if (selectedModifier.isRoot)
                        genre = selectedModifier;
                    else {
                        selectedSecondaryModifier = selectedModifier;
                        genre = selectedModifier.parent
                    }
                var result = {};
                result[secondaryModifierKey] = selectedSecondaryModifier ? selectedSecondaryModifier.serviceId : null;
                if (genre && genre.serviceId)
                    result.genre = genre.serviceId;
                return result
            }, edsCreateMovieGenreQueryOptions: function edsCreateMovieGenreQueryOptions(selectedModifier) {
                return MSE.Data.Factory.Marketplace._edsCreateGenreQueryOptions(selectedModifier, "studio")
            }, edsCreateTvGenreQueryOptions: function edsCreateTvGenreQueryOptions(selectedModifier) {
                return MSE.Data.Factory.Marketplace._edsCreateGenreQueryOptions(selectedModifier, "network")
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Library", {
        getWatchlistItemAugmentation: function getWatchlistItemAugmentation(objectType) {
            var augmentation = null;
            switch (objectType) {
                case Microsoft.Entertainment.Queries.ObjectType.video:
                    augmentation = MSE.Data.Augmenter.Library.Movie;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                    augmentation = MSE.Data.Augmenter.Library.TVSeries;
                    break;
                default:
                    MS.Entertainment.Data.Factory.Marketplace.assert(false, "Unknown objectType in getWatchlistItemAugmentation");
                    break
            }
            return augmentation
        }, createFolderVideoItem: function createFolderVideoItem(sourceItem) {
                var augmentation;
                if (sourceItem && sourceItem.FilePath)
                    augmentation = MSE.Data.Augmenter.Library.OtherVideo;
                else if (!(sourceItem instanceof MSE.Data.Augmenter.Library.Folder))
                    augmentation = MSE.Data.Augmenter.Library.Folder;
                return MSE.Data.augment(sourceItem, augmentation)
            }, createMediaItemFromWatchlistItem: function createMediaItemFromWatchlistItem(watchlistItem) {
                var augmentation = MSE.Data.Factory.Library.getWatchlistItemAugmentation(watchlistItem && watchlistItem.MediaObjectType);
                return MSE.Data.augment(watchlistItem, augmentation)
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {contributor: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    name: alias("Name", String.empty), role: alias("Role", String.empty), localizedRole: convert("Role", MSE.Data.Factory.Marketplace.toLocalizedRole, String.empty), character: alias("Characters[0]", String.empty), mediaType: Microsoft.Entertainment.Queries.ObjectType.person, voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), imageUri: hydratedRequired(value(null)), biography: hydratedRequired(value(String.empty)), biographyLanguage: hydratedRequired(value(String.empty)), onHydrated: MS.Entertainment.Hydrator.contributor
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {
        VideoBase: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Library.MediaItem, null, {
                    averageRating: hydrated(convert("AllTimeAverageRating", MSE.Data.Factory.Marketplace.edsRatingToStars, null)), averageRatingCount: hydrated(convert("AllTimeRatingCount", MSE.Data.Factory.intNumber, null)), canonicalId: hydrated(convert("canonicalId", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), artistId: -1, duration: hydrated(value(String.empty), MSE.Data.Comparer.inverseDateComparer), dateAdded: null, filePath: null, genreId: -1, mediaType: Microsoft.Entertainment.Queries.ObjectType.video, releaseDate: hydrated(value(String.empty)), seasonNumber: -1, seriesTitle: null, seriesId: null, studio: null, studioName: null, subtitle: null, userStarRating: -1, imageUri: hydratedRequired(value(null)), providers: hydratedRequired(value(null)), providerNameList: hydratedRequired(value(String.empty)), wmContentId: null, videoType: Microsoft.Entertainment.Queries.VideoType.other, closedCaptionFiles: hydratedRequired(value(MSE.Data.Factory.array)), hasCaptions: hydratedRequired(value(false)), hasSubtitles: hydratedRequired(value(false)), formattedSubtitles: hydratedRequired(value(String.empty)), rightsHydrated: hydratedRequired(value(false)), rights: hydratedRequired(value(null)), images: hydratedRequired(value(null)), genre: hydratedRequired(value(null)), description: hydratedRequired(value(null)), backgroundImageUri: hydratedRequired(value(null)), xboxBackgroundImageUri: hydratedRequired(value(null)), xboxBackgroundImageResizeUri: hydratedRequired(value(null)), rating: hydratedRequired(value(MSE.Data.Factory.Marketplace.sanitizeVideoRating)), localizedRatingStringShort: hydratedRequired(value(MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort)), localizedRatingStringLong: hydratedRequired(value(MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong)), ratingImage: hydrated(convertNoDeflate("rating", MSE.Data.Factory.Marketplace.setVideoRatingImage, String.empty)), zestDeepLink: hydratedRequired(value(null)), has3rdPartyProvider: hydratedRequired(value(false)), previewRight: hydrated(searchNoDeflate("rights", MSE.Data.Factory.Marketplace.filterNonPreviewRight, null)), hdRight: hydrated(searchNoDeflate("rights", MSE.Data.Factory.Marketplace.filterNonHDRight, null)), sdRight: hydrated(searchNoDeflate("rights", MSE.Data.Factory.Marketplace.filterNonSDRight, null)), videoFileUrl: hydrated(convertNoDeflate("previewRight.videoFileUrl", MSE.Data.Factory.self, null)), videoPreviewUrl: hydrated(convertNoDeflate("previewRight.videoFileUrl", MSE.Data.Factory.self, null)), videoDefinition: hydrated(convertNoDeflate(["hdRight.videoFriendlyDefinition", "sdRight.videoFriendlyDefinition"], MSE.Data.Factory.self, MSE.Data.Factory.Marketplace.unknownString)), videoDefinitions: hydrated(convertNoDeflate([["sdRight.videoFriendlyDefinition", "hdRight.videoFriendlyDefinition"]], MSE.Data.Factory.arrayJoin, MSE.Data.Factory.Marketplace.unknownString)), libraryDefinitions: hydrated(value(String.empty)), hasSdLibraryDefinition: hydrated(value(false)), hasHdLibraryDefinition: hydrated(value(false)), seriesZuneId: null, seriesServiceId: null, seriesIdType: null, userRating: null, secondsFromEndForPostroll: hydratedRequired(value(-1)), hasPurchased: hydratedRequired(alias("HasPurchased", false)), watchlistId: convert("WatchlistId", MSE.Data.Factory.intNumber, -1), dateCreated: convert("CreationDate", MSE.Data.Factory.databaseDate, null), hasSeriesId: {get: function() {
                                return (this.seriesId && this.seriesId !== MS.Entertainment.Utilities.EMPTY_GUID)
                            }}, isMovie: {get: function() {
                                return (this.videoType === Microsoft.Entertainment.Queries.VideoType.movie)
                            }}, onHydrated: MS.Entertainment.Hydrator.video
                })
        }), Watchlist: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.MediaItem, null, {
                        libraryId: convert("ObjectId", MSE.Data.Factory.intNumber, -1), name: convertOriginal("Name", MSE.Data.Factory.normalizeTextDirection, String.empty), description: alias("Description", String.empty), dateCreated: convert("DateCreated", MSE.Data.Factory.databaseDate, null), isDefaultWatchlist: alias("IsDefaultWatchlist", null)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {Video: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Library.VideoBase, null, {
                    libraryId: convert("ObjectId", MSE.Data.Factory.intNumber, -1), serviceId: hydrated(convert("ServiceMediaId", MSE.Data.Factory.guid, String.empty, convertFeatureOptionsTvOrMovies)), name: hydrated(convertOriginal("Title", MSE.Data.Factory.normalizeTextDirection, String.empty)), primaryText: hydrated(convertOriginal("Title", MSE.Data.Factory.normalizeTextDirection, String.empty)), sortName: convertOriginal("SortTitle", MSE.Data.Factory.normalizeTextDirection, String.empty), description: hydrated(convertOriginal("Description", MSE.Data.Factory.normalizeTextDirection, String.empty)), duration: hydrated(convert("Duration", MSE.Data.Factory.intNumber, String.empty), MSE.Data.Comparer.inverseDateComparer), contributors: hydratedRequired(value(null)), criticReview: hydratedRequired(value(null)), dateAdded: convert("DateAdded", MSE.Data.Factory.databaseDate, null), releaseDate: hydrated(convert("ReleaseDate", MSE.Data.Factory.databaseDate, String.empty)), videoType: convert("Category", MSE.Data.Factory.intNumber, -1), filePath: alias("FilePath", String.empty), localFilesCount: convert("LocalFilesCount", MSE.Data.Factory.intNumber, -1), remoteFilesCount: convert("RemoteFilesCount", MSE.Data.Factory.intNumber, -1), canPlayLocally: convert("CanPlayLocally", MSE.Data.Factory.bool, false), rating: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), ratingImage: hydrated(convertNoDeflate("rating", MSE.Data.Factory.Marketplace.setVideoRatingImage, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), voicePhrase: convert("Title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("Title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), hdFileSizeInBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsHDFileSizeInBytes, -1)), sdFileSizeInBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsSDFileSizeInBytes, -1)), hdFileSizeInMBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsHDFileSizeInMBytes, -1)), sdFileSizeInMBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsSDFileSizeInMBytes, -1)), artistId: convert("ArtistId", MSE.Data.Factory.intNumber, -1), artistName: convertOriginal("ArtistName", MSE.Data.Factory.normalizeTextDirection, String.empty), artistServiceId: convert("ArtistServiceMediaId", MSE.Data.Factory.guid, String.empty, convertFeatureOptionsTvOrMovies), genreId: convert("GenreId", MSE.Data.Factory.intNumber, -1), genreName: alias("GenreName", String.empty), network: alias("Network", String.empty), studio: convertOriginal("Studio", MSE.Data.Factory.normalizeTextDirection, String.empty), studioName: convertOriginal("Studio", MSE.Data.Factory.normalizeTextDirection, String.empty), subtitle: convertOriginal("Subtitle", MSE.Data.Factory.normalizeTextDirection, String.empty), userStarRating: convert("StarRating", MSE.Data.Factory.intNumber, -1), wmContentId: convert("WMContentId", MSE.Data.Factory.guid, String.empty), episodeNumber: convert("EpisodeNumber", MSE.Data.Factory.intNumber, -1), formattedEpisodeNumber: convert("EpisodeNumber", MSE.Data.Factory.formattedIntNumber, -1), seasonNumber: convert("TVSeasonNumber", MSE.Data.Factory.intNumber, -1), formattedSeasonNumber: convert("TVSeasonNumber", MSE.Data.Factory.formattedIntNumber, -1), seriesTitle: convertOriginal("TVSeriesTitle", MSE.Data.Factory.normalizeTextDirection, String.empty), seriesSortTitle: convertOriginal("TVSeriesSortTitle", MSE.Data.Factory.normalizeTextDirection, String.empty), seriesId: hydrated(convert("TVSeriesBingId", MSE.Data.Factory.guid, null, convertFeatureOptionsTv)), canonicalSeriesId: hydrated(convert("TVSeriesBingId", MSE.Data.Factory.guid, null)), seriesZuneId: hydrated(convert("TVSeriesServiceMediaId", MSE.Data.Factory.guid, null)), seriesServiceId: hydrated(convert("TVSeriesServiceMediaId", MSE.Data.Factory.guid, null)), seriesIdType: hydrated(value("Canonical")), seriesLibraryId: convert("TVSeriesId", MSE.Data.Factory.guid, null), seasonServiceId: convert("TVSeasonBingId", MSE.Data.Factory.guid, null), seasonLibraryId: convert("TVSeasonId", MSE.Data.Factory.guid, null), seasonImageUri: alias("TVSeasonImageUrl", String.empty), seriesImageUri: alias("TVSeriesImageUrl", String.empty)
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {
        OtherVideo: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Library.Video, null, {hasPurchased: true})
        }), Movie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.Video, null, {
                        videoType: Microsoft.Entertainment.Queries.VideoType.movie, studioName: convertOriginal("Studio", MSE.Data.Factory.normalizeTextDirection, String.empty), _description: hydrated(convert("Description", MSE.Data.Factory.Marketplace.sanitizeMovieDescription, String.empty)), description: hydrated(convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty)), studioBackgroundImageUri: hydratedRequired(value(null)), studios: hydratedRequired(value(null)), edsMediaItemType: hydratedRequired(value(null), MSE.Data.Comparer.notFalsy), edsMediaItemTypeString: hydratedRequired(value(null), MSE.Data.Comparer.notFalsy), isPresale: hydratedRequired(value(false)), presaleFulfillmentDate: hydratedRequired(value(null)), isBundle: hydratedRequired(value(false)), allBundledItemsInCollection: hydratedRequired(value(false)), bundledItems: hydratedRequired(value(null)), onHydrated: MS.Entertainment.Hydrator.movie
                    })
            }), TVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.Video, null, {
                        name: hydrated(convertOriginal("Title", MSE.Data.Factory.normalizeTextDirection, String.empty)), serviceId: convert("ServiceMediaId", MSE.Data.Factory.guid, String.empty, convertFeatureOptionsTv), latestSeasonId: convert("LatestSeasonBingId", MSE.Data.Factory.guid, String.empty, convertFeatureOptionsTv), latestSeasonReleaseDate: convert("LatestSeasonReleaseDate", MSE.Data.Factory.databaseDate, null), episodeCount: hydratedRequired(value(-1)), downloadedEpisodesCount: convert("DownloadedEpisodesCount", MSE.Data.Factory.intNumber, 0), dateLastEpisodeAdded: convert("DateLastEpisodeAdded", MSE.Data.Factory.databaseDate, null), networks: hydratedRequired(value(null)), providers: hydratedRequired(value(null)), hasActivities: hydratedRequired(value(false)), edsMediaGroup: hydratedRequired(value(null), MSE.Data.Comparer.notFalsy), edsMediaItemType: hydratedRequired(value(null), MSE.Data.Comparer.notFalsy), edsMediaItemTypeString: hydratedRequired(value(null), MSE.Data.Comparer.notFalsy), librarySeasons: hydratedRequired(value(null)), liveQuery: hydratedRequired(value(null)), description: hydratedRequired(value(null)), rights: hydratedRequired(value(null)), seasonCount: hydratedRequired(value(-1)), seasons: hydratedRequired(value(null)), genre: hydratedRequired(value(null)), rating: hydratedRequired(value(null)), localizedRatingStringShort: hydratedRequired(value(null)), localizedRatingStringLong: hydratedRequired(value(null)), mediaType: Microsoft.Entertainment.Queries.ObjectType.tvSeries, videoType: value(null), networkBackgroundImageUri: hydratedRequired(value(null)), onHydrated: MS.Entertainment.Hydrator.tvSeries
                    })
            }), TVSeason: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.Video, null, {
                        name: hydrated(convertOriginal("Title", MSE.Data.Factory.normalizeTextDirection, String.empty)), sortName: convertOriginal("SortTitle", MSE.Data.Factory.normalizeTextDirection, String.empty), dateAdded: convert("DateAdded", MSE.Data.Factory.databaseDate, null), downloadedEpisodesCount: convert("DownloadedEpisodesCount", MSE.Data.Factory.intNumber, 0), seasonNumber: convert("Number", MSE.Data.Factory.intNumber, -1), serviceId: hydrated(convert("BingId", MSE.Data.Factory.guid, String.empty, convertFeatureOptionsTv)), serviceIdType: hydrated(value("Canonical")), seriesTitle: convertOriginal("TVSeriesTitle", MSE.Data.Factory.normalizeTextDirection, null), seriesSortTitle: convertOriginal("TVSeriesSortTitle", MSE.Data.Factory.normalizeTextDirection, null), seriesZuneId: hydrated(convert("TVSeriesServiceMediaId", MSE.Data.Factory.guid, null)), seriesServiceId: hydrated(convert("TVSeriesServiceMediaId", MSE.Data.Factory.guid, null)), seriesId: hydrated(convert("TVSeriesBingId", MSE.Data.Factory.guid, null, convertFeatureOptionsTv)), seriesIdType: hydrated(value("Canonical")), seriesLibraryId: convert("TVSeriesId", MSE.Data.Factory.guid, null), seriesImageUri: alias("TVSeriesImageUrl", String.empty), mediaType: Microsoft.Entertainment.Queries.ObjectType.tvSeason, seasonServiceId: convertNoDeflate(String.empty, MSE.Data.Factory.Common.tvSeasonServiceId, null), description: hydrated(convertOriginal("Description", MSE.Data.Factory.normalizeTextDirection, String.empty)), rights: hydratedRequired(value(null)), rightsHydrated: hydratedRequired(value(false)), episodes: hydratedRequired(value(null)), episodeCount: hydratedRequired(value(-1)), libraryEpisodes: hydratedRequired(value(null)), network: hydratedRequired(value(null)), providers: hydratedRequired(value(null)), episodesQueryFailed: hydratedRequired(value(false)), isComplete: hydratedRequired(value(false)), isLibrarySeason: true, knownChildServiceIds: null, hasSeriesId: {get: function() {
                                    return (this.seriesId && this.seriesId !== MS.Entertainment.Utilities.EMPTY_GUID)
                                }}, onHydrated: MS.Entertainment.Hydrator.tvSeason
                    })
            }), TVEpisode: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.Video, null, {
                        videoType: convert("Category", MSE.Data.Factory.intNumber, Microsoft.Entertainment.Queries.VideoType.tvEpisode), edsMediaItemType: hydratedRequired(value(null), MSE.Data.Comparer.notFalsy), edsMediaItemTypeString: hydratedRequired(value(null), MSE.Data.Comparer.notFalsy), onHydrated: MS.Entertainment.Hydrator.tvEpisode
                    })
            }), Studio: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.MediaItem, null, {
                        name: convertOriginal("Name", MSE.Data.Factory.normalizeTextDirection, String.empty), voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {MergedVideoTVSeasonResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    movieItems: alias("source[0].itemsArray", null), tvSeriesItems: alias("source[1].itemsArray", null)
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {MergedVideoTVSeasonOtherResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    otherItems: alias("source[0].itemsArray", null), movieItems: alias("source[1].itemsArray", null), tvSeriesItems: alias("source[2].itemsArray", null)
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {Folder: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    mediaType: Microsoft.Entertainment.Queries.ObjectType.folder, folderId: convert("ObjectId", MSE.Data.Factory.intNumber, -1), parentFolderId: convert("ParentFolderId", MSE.Data.Factory.intNumber, -1), name: alias("Title", String.empty), label: alias("Title", String.empty), mediaItemsTotalCount: convert("MediaItemsTotalCount", MSE.Data.Factory.intNumber, -1), path: alias("Path", String.empty), filePath: alias("ThumbnailFilePath", String.empty), isUnavailable: convert("IsUnavailable", MSE.Data.Factory.bool, false), type: Microsoft.Entertainment.Queries.ObjectType.folder, voicePhrase: convert("Title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Library", {
        FoldersResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {itemsArray: augment("ResultSet", MSE.Data.Augmenter.Library.Folder, null)})
        }), FolderVideosResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {
                        items: list("ResultSet", MSE.Data.Factory.Library.createFolderVideoItem, null), itemsArray: augment("ResultSet", MSE.Data.Factory.Library.createFolderVideoItem, null)
                    })
            }), VideosResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {
                        items: list("ResultSet", MSE.Data.Augmenter.Library.Video, null), itemsArray: augment("ResultSet", MSE.Data.Augmenter.Library.Video, null), firstItem: augment("ResultSet[0]", MSE.Data.Augmenter.Library.Video, null)
                    })
            }), OtherVideosResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {
                        items: list("ResultSet", MSE.Data.Augmenter.Library.OtherVideo, null), itemsArray: augment("ResultSet", MSE.Data.Augmenter.Library.OtherVideo, null), firstItem: augment("ResultSet[0]", MSE.Data.Augmenter.Library.OtherVideo, null)
                    })
            }), WatchlistVideosResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {
                        items: list("ResultSet", MSE.Data.Factory.Library.createMediaItemFromWatchlistItem, null), firstItem: augment("ResultSet[0]", MSE.Data.Factory.Library.createMediaItemFromWatchlistItem, null)
                    })
            }), MoviesResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {
                        items: list("ResultSet", MSE.Data.Augmenter.Library.Movie, null), itemsArray: augment("ResultSet", MSE.Data.Augmenter.Library.Movie, null)
                    })
            }), TVSeriesResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {
                        items: list("ResultSet", MSE.Data.Augmenter.Library.TVSeries, null), itemsArray: augment("ResultSet", MSE.Data.Augmenter.Library.TVSeries, null)
                    })
            }), TVSeasonsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {items: list("ResultSet", MSE.Data.Augmenter.Library.TVSeason, null)})
            }), TVEpisodesResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {items: list("ResultSet", MSE.Data.Augmenter.Library.TVEpisode, null)})
            }), StudiosResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {items: list("ResultSet", MSE.Data.Augmenter.Library.Studio, null)})
            }), WatchlistsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Library.LibraryResultSet, null, {items: list("ResultSet", MSE.Data.Augmenter.Library.Watchlist, null)})
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        VideoBase: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.MediaItem, null, {
                    artistId: -1, averageRating: hydrated(convert("AllTimeAverageRating", MSE.Data.Factory.Marketplace.edsRatingToStars, null)), averageRatingCount: hydrated(convert("AllTimeRatingCount", MSE.Data.Factory.intNumber, null)), duration: hydrated(value(String.empty), MSE.Data.Comparer.inverseDateComparer), dateAdded: null, filePath: null, genreId: -1, mediaType: Microsoft.Entertainment.Queries.ObjectType.video, releaseDate: hydrated(value(String.empty)), seasonNumber: -1, seriesTitle: null, seriesId: null, seriesZuneId: null, seriesServiceId: null, seriesIdType: null, studio: null, subtitle: null, userStarRating: -1, imageUri: hydratedRequired(value(null)), providers: hydratedRequired(value(null)), providerNameList: hydratedRequired(value(String.empty)), wmContentId: null, videoType: Microsoft.Entertainment.Queries.VideoType.other, closedCaptionFiles: hydratedRequired(value(MSE.Data.Factory.array)), hasCaptions: hydratedRequired(value(false)), hasSubtitles: hydratedRequired(value(false)), formattedSubtitles: hydratedRequired(value(String.empty)), rightsHydrated: hydratedRequired(value(false)), images: hydratedRequired(value(null)), backgroundImageUri: hydratedRequired(value(null)), rating: hydratedRequired(value(MSE.Data.Factory.Marketplace.sanitizeVideoRating)), localizedRatingStringShort: hydratedRequired(value(MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort)), localizedRatingStringLong: hydratedRequired(value(MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong)), ratingImage: hydrated(convertNoDeflate("rating", MSE.Data.Factory.Marketplace.setVideoRatingImage, String.emtpy)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), zestDeepLink: hydratedRequired(value(null)), has3rdPartyProvider: hydratedRequired(value(false)), previewRight: hydrated(searchNoDeflate("rights", MSE.Data.Factory.Marketplace.filterNonPreviewRight, null)), hdRight: hydrated(searchNoDeflate("rights", MSE.Data.Factory.Marketplace.filterNonHDRight, null)), sdRight: hydrated(searchNoDeflate("rights", MSE.Data.Factory.Marketplace.filterNonSDRight, null)), videoFileUrl: hydrated(convertNoDeflate("previewRight.videoFileUrl", MSE.Data.Factory.self, null)), videoPreviewUrl: hydrated(convertNoDeflate("previewRight.videoFileUrl", MSE.Data.Factory.self, null)), videoDefinition: hydrated(convertNoDeflate(["hdRight.videoFriendlyDefinition", "sdRight.videoFriendlyDefinition"], MSE.Data.Factory.self, MSE.Data.Factory.Marketplace.unknownString)), videoDefinitions: hydrated(convertNoDeflate([["hdRight.videoFriendlyDefinition", "sdRight.videoFriendlyDefinition"]], MSE.Data.Factory.arrayJoin, MSE.Data.Factory.Marketplace.unknownString)), description: hydrated(value(String.empty)), network: String.empty, canonicalSeriesId: hydrated(value(null)), userRating: null, secondsFromEndForPostroll: hydratedRequired(value(-1)), hasPurchased: hydratedRequired(value(false)), hasSeriesId: {get: function() {
                                return (this.seriesId && this.seriesId !== MS.Entertainment.Utilities.EMPTY_GUID)
                            }}, isMovie: {get: function() {
                                return (this.videoType === Microsoft.Entertainment.Queries.VideoType.movie)
                            }}, onHydrated: MS.Entertainment.Hydrator.video
                })
        }), EDSVideoBase: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSMediaItem, null, {
                        artistId: -1, averageRating: hydrated(convert("AllTimeAverageRating", MSE.Data.Factory.Marketplace.edsRatingToStars, null)), averageRatingCount: hydrated(convert("AllTimeRatingCount", MSE.Data.Factory.intNumber, null)), duration: hydrated(value(String.empty), MSE.Data.Comparer.inverseDateComparer), dateAdded: null, filePath: null, genreId: -1, mediaType: Microsoft.Entertainment.Queries.ObjectType.video, releaseDate: hydrated(value(String.empty)), seasonNumber: -1, seriesTitle: null, seriesId: null, seriesZuneId: null, seriesServiceId: null, seriesIdType: null, studio: null, subtitle: null, userStarRating: -1, wmContentId: null, criticReview: null, videoType: Microsoft.Entertainment.Queries.VideoType.other, rights: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsRightsCurrentClientProviders, null)), providers: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsProviders)), providerNameList: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsCompanionProviderNames, String.empty)), images: hydrated(sortArray("Images", MSE.Data.Comparer.Marketplace.edsCompareImageByVideoPurpose, MSE.Data.Augmenter.Marketplace.EDSImage, null)), closedCaptionFiles: hydratedRequired(value(MSE.Data.Factory.array)), hasCaptions: hydratedRequired(value(false)), hasSubtitles: hydratedRequired(value(false)), formattedSubtitles: hydratedRequired(value(String.empty)), rightsHydrated: hydratedRequired(value(false)), rating: hydratedRequired(value(MSE.Data.Factory.Marketplace.sanitizeVideoRating)), localizedRatingStringShort: hydratedRequired(value(MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort)), localizedRatingStringLong: hydratedRequired(value(MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong)), ratingImage: hydrated(convertNoDeflate("rating", MSE.Data.Factory.Marketplace.setVideoRatingImage, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), zuneProvider: hydrated(search("Providers", MSE.Data.Factory.Marketplace.edsFilterNonZuneProvider, null)), thirdPartyProvider: hydrated(search("Providers", MSE.Data.Factory.Marketplace.edsFilterZuneProvider, null)), zestDeepLink: hydrated(convertNoDeflate("zuneProvider.PartnerApplicationLaunchInfoList[0].DeepLinkInfo", MSE.Data.Factory.self)), has3rdPartyProvider: hydrated(convertNoDeflate("thirdPartyProvider", MSE.Data.Factory.bool, false)), previewRight: hydrated(searchNoDeflate("rights", MSE.Data.Factory.Marketplace.filterNonPreviewRight, null)), hdRight: hydrated(searchNoDeflate("rights", MSE.Data.Factory.Marketplace.filterNonHDRight, null)), sdRight: hydrated(searchNoDeflate("rights", MSE.Data.Factory.Marketplace.filterNonSDRight, null)), videoFileUrl: hydrated(convertNoDeflate("previewRight.videoFileUrl", MSE.Data.Factory.self, null)), videoPreviewUrl: hydrated(convertNoDeflate("previewRight.videoFileUrl", MSE.Data.Factory.self, null)), videoDefinition: hydrated(convertNoDeflate(["hdRight.videoFriendlyDefinition", "sdRight.videoFriendlyDefinition"], MSE.Data.Factory.self, MSE.Data.Factory.Marketplace.unknownString)), videoDefinitions: hydrated(convertNoDeflate([["hdRight.videoFriendlyDefinition", "sdRight.videoFriendlyDefinition"]], MSE.Data.Factory.arrayJoin, MSE.Data.Factory.Marketplace.unknownString)), libraryDefinitions: hydrated(value(String.empty)), hasSdLibraryDefinition: hydrated(value(false)), hasHdLibraryDefinition: hydrated(value(false)), description: hydrated(value(String.empty)), network: hydrated(value(String.empty)), canonicalSeriesId: hydrated(value(null)), reviewSources: hydrated(augment("ReviewSources", MSE.Data.Factory.Marketplace.EDSReviewSource, null)), userRating: null, secondsFromEndForPostroll: hydratedRequired(value(-1)), hasPurchased: hydratedRequired(value(false)), hasSeriesId: {get: function() {
                                    return (this.seriesId && this.seriesId !== MS.Entertainment.Utilities.EMPTY_GUID)
                                }}, isMovie: {get: function() {
                                    return (this.videoType === Microsoft.Entertainment.Queries.VideoType.movie)
                                }}, onHydrated: MS.Entertainment.Hydrator.video
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        Movie: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.VideoBase, null, {
                    serviceId: convert("id", MSE.Data.Factory.guid, String.empty), name: hydrated(convertOriginal("title.$value", MSE.Data.Factory.normalizeTextDirection, String.empty)), sortTitle: alias("sortTitle", String.empty), duration: hydrated(convert("duration", MSE.Data.Factory.timeSpan, String.empty), MSE.Data.Comparer.inverseDateComparer), releaseDate: hydrated(convert("releaseDate", MSE.Data.Factory.date, String.empty)), studioName: convertOriginal("studioInfo.name", MSE.Data.Factory.normalizeTextDirection, String.empty), genre: hydrated(augment("genres.genre", MSE.Data.Augmenter.Marketplace.Genre, null)), description: hydrated(convertOriginal("content.$value", MSE.Data.Factory.Marketplace.sanitizeMovieDescription, String.empty)), rights: hydrated(augment("rights.right", MSE.Data.Augmenter.Marketplace.Right, MSE.Data.Factory.array)), closedCaptionFiles: hydrated(augment("closedCaptionFiles.closedCaptionFile", MSE.Data.Augmenter.Marketplace.ClosedCaption, MSE.Data.Factory.array)), hasCaptions: hydrated(convertNoDeflate("closedCaptionFiles.length", MSE.Data.Factory.bool, false, convertFeatureOptionsClosedCaptions)), rating: hydrated(convert("rating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("rating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("rating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), videoPreviewUrl: hydrated(value(String.empty)), videoType: Microsoft.Entertainment.Queries.VideoType.movie, voicePhrase: convert("title.$value", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title.$value", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), secondsFromEndForPostroll: hydratedRequired(value(-1)), isPresale: hydratedRequired(value(false)), presaleFulfillmentDate: hydratedRequired(value(null)), isBundle: hydratedRequired(value(false)), allBundledItemsInCollection: hydratedRequired(value(false)), bundledItems: hydratedRequired(value(null)), onHydrated: MS.Entertainment.Hydrator.movie
                })
        }), TVEpisode: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.VideoBase, null, {
                        serviceId: convert("id", MSE.Data.Factory.guid, String.empty), name: hydrated(convertOriginal("title.$value", MSE.Data.Factory.normalizeTextDirection, String.empty)), sortTitle: alias("sortTitle", String.empty), releaseDate: hydrated(convert("releaseDate", MSE.Data.Factory.date, String.empty)), episodeNumber: convert("episodeNumber", MSE.Data.Factory.intNumber, -1), formattedEpisodeNumber: convert("episodeNumber", MSE.Data.Factory.formattedIntNumber, -1), seasonNumber: convert("seasonNumber", MSE.Data.Factory.intNumber, -1), formattedSeasonNumber: convert("seasonNumber", MSE.Data.Factory.formattedIntNumber, -1), studioName: hydrated(convertOriginal("network.title", MSE.Data.Factory.normalizeTextDirection, String.empty)), genre: hydrated(augment("categories.category", MSE.Data.Augmenter.Marketplace.Genre, null)), rights: hydrated(augment("rights.right", MSE.Data.Augmenter.Marketplace.Right, MSE.Data.Factory.array)), closedCaptionFiles: hydrated(augment("closedCaptionFiles.closedCaptionFile", MSE.Data.Augmenter.Marketplace.ClosedCaption, MSE.Data.Factory.array)), hasCaptions: hydrated(convertNoDeflate("closedCaptionFiles.length", MSE.Data.Factory.bool, false, convertFeatureOptionsClosedCaptions)), rating: hydrated(convert("rating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("rating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("rating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), description: hydrated(convertOriginal("content.$value", MSE.Data.Factory.normalizeTextDirection, String.empty)), videoType: Microsoft.Entertainment.Queries.VideoType.tvEpisode, seriesTitle: convertOriginal("series.title", MSE.Data.Factory.normalizeTextDirection, String.empty), seriesId: hydrated(convert("series.id", MSE.Data.Factory.guid, String.empty)), duration: hydrated(convert("length", MSE.Data.Factory.timeSpan, String.empty), MSE.Data.Comparer.inverseDateComparer), canonicalSeriesId: hydratedRequired(value(null)), voicePhrase: convert("title.$value", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title.$value", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), secondsFromEndForPostroll: hydratedRequired(value(-1)), isChildOf: function MediaItem_TVEpisodeComparerIsChild(mediaItem2) {
                                var isChild = false;
                                if (mediaItem2 && ((mediaItem2.zuneId && this.zuneId === mediaItem2.zuneId) || (mediaItem2.canonicalId && this.canonicalId === mediaItem2.canonicalId) || (mediaItem2.seriesId && this.seriesId === mediaItem2.seriesId)))
                                    isChild = true;
                                return isChild
                            }, onHydrated: MS.Entertainment.Hydrator.tvEpisode
                    })
            }), Studio: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.MediaItem, null, {
                        serviceId: alias("id", String.empty), name: hydrated(convertOriginal("title.$value", MSE.Data.Factory.normalizeTextDirection, String.empty)), imageId: convert("image.id", MSE.Data.Factory.guid, String.empty), backgroundImageId: convert("backgroundImage.id", MSE.Data.Factory.guid, String.empty), voicePhrase: convert("title.$value", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), MovieEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSVideoBase, null, {
                        edsId: convert("ID", MSE.Data.Factory.guid, String.empty), name: hydrated(alias("Name", String.empty)), sortTitle: alias("Name", String.empty), duration: hydrated(convert("Duration", MSE.Data.Factory.timeSpan, String.empty), MSE.Data.Comparer.inverseDateComparer), releaseDate: hydrated(convert("ReleaseDate", MSE.Data.Factory.date, String.empty)), providers: hydrated(augment("Providers.Provider", MSE.Data.Factory.Marketplace.ProviderEDS, null)), genre: hydrated(augment("Genres.Genre", MSE.Data.Factory.Marketplace.GenreEDS, null)), _description: hydrated(convert("Details.Description", MSE.Data.Factory.Marketplace.sanitizeMovieDescription, String.empty)), description: hydrated(convertOriginalNoDeflate("_description", MSE.Data.Marketplace.normalizeTextDirection, String.empty)), rating: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), imageUri: hydrated(alias("Image.Url", String.empty)), videoPreviewUrl: hydrated(alias("PreviewUrl", String.empty)), videoType: Microsoft.Entertainment.Queries.VideoType.movie, hcrSecondaryText: convertNoDeflate("releaseDate", MSE.Data.Factory.localizedYear, String.empty), hcrInCollectionText: convertNoDeflate("inCollection", MSE.Data.Factory.Marketplace.inMyVideosText, 0), voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), VideoEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSVideoBase, null, {
                        edsId: convert("ID", MSE.Data.Factory.guid, String.empty), contentType: alias("type", String.empty), name: hydrated(alias("Name", String.empty)), sortTitle: alias("Name", String.empty), duration: hydrated(convert("Duration", MSE.Data.Factory.timeSpan, String.empty), MSE.Data.Comparer.inverseDateComparer), genre: hydrated(augment("Genres.Genre", MSE.Data.Factory.Marketplace.GenreEDS, null)), releaseDate: hydrated(convert("ReleaseDate", MSE.Data.Factory.date, String.empty)), rating: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), imageUri: hydrated(alias("Image.Url", String.empty)), episodeNumber: hydrated(convert("EpisodeNumber", MSE.Data.Factory.intNumber, -1)), formattedEpisodeNumber: convert("EpisodeNumber", MSE.Data.Factory.formattedIntNumber, -1), seasonNumber: hydrated(convert("SeasonNumber", MSE.Data.Factory.intNumber, -1)), formattedSeasonNumber: convert("SeasonNumber", MSE.Data.Factory.formattedIntNumber, -1), providers: hydrated(augment("Providers.Provider", MSE.Data.Factory.Marketplace.ProviderEDS, null)), description: hydrated(alias("Details.Description", String.empty)), videoPreviewUrl: hydrated(value(String.empty)), voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), TVEpisodeEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSVideoBase, null, {
                        edsId: convert("ID", MSE.Data.Factory.guid, String.empty), name: hydrated(alias("Name", String.empty)), releaseDate: hydrated(convert("ReleaseDate", MSE.Data.Factory.date, String.empty)), duration: hydrated(convert("Duration", MSE.Data.Factory.timeSpan, String.empty), MSE.Data.Comparer.inverseDateComparer), rating: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), imageUri: hydrated(alias("Image.Url", String.empty)), episodeNumber: convert("EpisodeNumber", MSE.Data.Factory.intNumber, -1), formattedEpisodeNumber: convert("EpisodeNumber", MSE.Data.Factory.formattedIntNumber, -1), seasonNumber: convert("SeasonNumber", MSE.Data.Factory.intNumber, -1), formattedSeasonNumber: convert("SeasonNumber", MSE.Data.Factory.formattedIntNumber, -1), providers: hydrated(augment("Providers.Provider", MSE.Data.Factory.Marketplace.ProviderEDS, null)), description: hydrated(alias("Details.Description", String.empty)), videoType: Microsoft.Entertainment.Queries.VideoType.tvEpisode, voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), TVSeasonEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSVideoBase, null, {
                        mediaType: Microsoft.Entertainment.Queries.ObjectType.tvSeason, edsId: convert("ID", MSE.Data.Factory.guid, String.empty), name: hydrated(alias("Name", String.empty)), releaseDate: hydrated(convert("ReleaseDate", MSE.Data.Factory.date, String.empty)), genre: hydrated(augment("Genres.Genre", MSE.Data.Factory.Marketplace.GenreEDS, null)), rating: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), imageUri: hydrated(alias("Image.Url", String.empty)), seasonNumber: convert("SeasonNumber", MSE.Data.Factory.intNumber, -1), formattedSeasonNumber: convert("SeasonNumber", MSE.Data.Factory.formattedIntNumber, -1), episodeCount: hydrated(convert("NumberOfEpisodes", MSE.Data.Factory.intNumber, -1)), voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), TVSeriesEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSVideoBase, null, {
                        mediaType: Microsoft.Entertainment.Queries.ObjectType.tvSeries, edsId: convert("ID", MSE.Data.Factory.guid, String.empty), name: hydrated(alias("Name", String.empty)), releaseDate: hydrated(convert("ReleaseDate", MSE.Data.Factory.date, String.empty)), network: hydrated(alias("Network", String.empty)), studioName: alias("Network", String.empty), seasonCount: convert("NumberOfSeasons", MSE.Data.Factory.intNumber, -1), providers: hydrated(augment("Providers.Provider", MSE.Data.Factory.Marketplace.ProviderEDS, null)), genre: hydrated(augment("Genres.Genre", MSE.Data.Factory.Marketplace.GenreEDS, null)), description: hydrated(alias("Details.Description", String.empty)), rating: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), imageUri: hydrated(alias("Image.Url", String.empty)), videoPreviewUrl: hydrated(value(String.empty)), hcrSecondaryText: convertNoDeflate("seasonCount", MS.Entertainment.Formatters.seasonCountText, 0), hcrInCollectionText: convertNoDeflate("inCollection", MSE.Data.Factory.Marketplace.inMyVideosText, 0), voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {TVSeason: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.VideoBase, null, {
                    seasonNumber: convert("id", MSE.Data.Factory.intNumber, -1), seasonServiceId: hydrated(convertNoDeflate(String.empty, MSE.Data.Factory.Common.tvSeasonServiceId, null)), seriesId: hydrated(convert("seriesId", MSE.Data.Factory.guid, null)), seriesLibraryId: alias("seriesLibraryId", -1), seriesImageUri: alias("TVSeriesImageUrl", String.empty), seriesTitle: convertOriginal("title.$value", MSE.Data.Factory.normalizeTextDirection, null), releaseDate: hydrated(convert("releaseDate", MSE.Data.Factory.date, String.empty)), description: hydrated(convertOriginal("content.$value", MSE.Data.Factory.normalizeTextDirection, String.empty)), episodeCount: hydrated(convert("episodeCount", MSE.Data.Factory.intNumber, -1)), episodes: hydrated(augment("entry", MSE.Data.Augmenter.Marketplace.TVEpisode, null)), episodesQueryFailed: hydratedRequired(value(false)), rights: hydrated(augment("rights.right", MSE.Data.Augmenter.Marketplace.Right, MSE.Data.Factory.array)), rating: hydrated(convert("rating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("rating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("rating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), mediaType: Microsoft.Entertainment.Queries.ObjectType.tvSeason, isComplete: hydrated(convert("isComplete", MSE.Data.Factory.boolFromString, false)), knownChildServiceIds: null, hasSeriesId: {get: function() {
                                return (this.seriesId && this.seriesId !== MS.Entertainment.Utilities.EMPTY_GUID)
                            }}, isChildOf: function MediaItem_TVSeasonComparerIsChild(mediaItem2) {
                            var isChild = false;
                            if (mediaItem2 && ((mediaItem2.zuneId && this.seriesId === mediaItem2.zuneId) || (mediaItem2.canonicalId && this.seriesId === mediaItem2.canonicalId)))
                                isChild = true;
                            return isChild
                        }, onHydrated: MS.Entertainment.Hydrator.tvSeason
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {TVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.VideoBase, null, {
                    serviceId: convert("id", MSE.Data.Factory.guid, String.empty), libraryId: alias("libraryId", -1), name: hydrated(convertOriginal("title.$value", MSE.Data.Factory.normalizeTextDirection, String.empty)), sortTitle: alias("sortTitle", String.empty), duration: hydrated(convert("duration", MSE.Data.Factory.timeSpan, -1), MSE.Data.Comparer.inverseDateComparer), releaseDate: hydrated(convert("releaseDate", MSE.Data.Factory.date, String.empty)), network: hydrated(value(String.empty)), seasonCount: hydrated(convert("seasonCount", MSE.Data.Factory.intNumber, -1)), episodeCount: hydrated(convert("episodeCount", MSE.Data.Factory.intNumber, -1)), studioName: convertOriginal("network.title", MSE.Data.Factory.normalizeTextDirection, String.empty), genre: hydrated(augment("categories.category", MSE.Data.Augmenter.Marketplace.Genre, null)), description: hydrated(convertOriginal("content.$value", MSE.Data.Factory.normalizeTextDirection, String.empty)), rights: hydrated(augment("rights.right", MSE.Data.Augmenter.Marketplace.Right, MSE.Data.Factory.array)), seasons: hydrated(list("entry", MSE.Data.Augmenter.Marketplace.TVSeason, null)), rating: hydrated(convert("rating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("rating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("rating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), mediaType: Microsoft.Entertainment.Queries.ObjectType.tvSeries, videoPreviewUrl: hydrated(value(String.empty)), _hcrSecondaryText: convertNoDeflate("seasonCount", MS.Entertainment.Formatters.seasonCountText, 0), hcrSecondaryText: convertOriginalNoDeflate("_hcrSecondaryText", MSE.Data.Factory.normalizeTextDirection, 0), hcrInCollectionText: convertNoDeflate("inCollection", MSE.Data.Factory.Marketplace.inMyVideosText, 0), edsMediaGroup: hydratedRequired(value(null), MSE.Data.Comparer.notFalsy), edsMediaItemType: hydratedRequired(value(null), MSE.Data.Comparer.notFalsy), edsMediaItemTypeString: hydratedRequired(value(null), MSE.Data.Comparer.notFalsy), librarySeasons: hydratedRequired(value(null)), liveQuery: hydratedRequired(value(null)), hasActivities: hydratedRequired(value(false)), voicePhrase: convert("title.$value", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title.$value", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), onHydrated: MS.Entertainment.Hydrator.tvSeries
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EditorialMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.Movie, null, {
                    serviceType: null, serviceId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), name: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), zuneId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), canonicalId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), type: alias("link.type", String.empty), target: alias("link.target", String.empty), voicePhrase: convert("title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                })
        }), SearchMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.Movie, null, {
                        serviceId: hydrated(alias("serviceId", String.empty)), name: hydrated(convertOriginal("name", MSE.Data.Factory.normalizeTextDirection, String.empty)), hcrSecondaryText: convertNoDeflate("releaseDate", MSE.Data.Factory.localizedYear, 0), hcrInCollectionText: convertNoDeflate("inCollection", MSE.Data.Factory.Marketplace.inMyVideosText, 0), voicePhrase: convert("name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("name", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), ChartMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.Movie, null, {
                        name: hydrated(convertOriginal("movie.title", MSE.Data.Factory.normalizeTextDirection, String.empty)), releaseDate: hydrated(convert("movie.releaseDate", MSE.Data.Factory.date, String.empty)), voicePhrase: convert("movie.title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("movie.title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), EditorialTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.TVSeries, null, {
                        serviceType: null, serviceId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), name: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), zuneId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), canonicalId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), type: alias("link.type", String.empty), target: alias("link.target", String.empty), voicePhrase: convert("title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), SearchTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.TVSeries, null, {
                        serviceId: hydrated(alias("serviceId", String.empty)), name: hydrated(convertOriginal("name", MSE.Data.Factory.normalizeTextDirection, String.empty)), voicePhrase: convert("name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("name", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), EpisodeTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.TVSeries, null, {
                        serviceId: hydrated(convert("seriesId", MSE.Data.Factory.guid, null)), libraryId: hydrated(alias("seriesLibraryId", -1)), name: hydrated(convertOriginal("seriesTitle", MSE.Data.Factory.normalizeTextDirection, null)), voicePhrase: convert("seriesTitle", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("seriesTitle", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), EditorialTVSeason: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.TVSeason, null, {
                        serviceType: null, serviceId: hydrated(convert("link.target", MSE.Data.Factory.Marketplace.editorialTvSeasonGetSeriesId)), seriesId: hydrated(convert("link.target", MSE.Data.Factory.Marketplace.editorialTvSeasonGetSeriesId)), seasonNumber: hydrated(convert("link.target", MSE.Data.Factory.Marketplace.editorialTvSeasonGetSeasonNumber)), name: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), seriesTitle: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, null)), zuneId: hydrated(convert("link.target", MSE.Data.Factory.Marketplace.editorialTvSeasonGetSeriesId, String.empty)), canonicalId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), type: alias("link.type", String.empty), target: alias("link.target", String.empty), voicePhrase: convert("title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            }), EditorialEpisode: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.TVEpisode, null, {
                        serviceType: null, serviceId: hydrated(convert("link.target", MSE.Data.Factory.guid, null)), name: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), seriesTitle: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, null)), zuneId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), canonicalId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), type: alias("link.type", String.empty), target: alias("link.target", String.empty), voicePhrase: convert("title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EdsClosedCaptionFile: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    mediaInstanceId: convert("serviceMediaInstanceId", MSE.Data.Factory.guid, String.empty), lcid: convert("lcid", MSE.Data.Factory.string, String.empty), name: alias("name", String.empty), fileUri: alias("fileUrl", String.empty)
                })
        }), EdsQueryRefiner: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {name: alias("Name", String.empty)})
            }), EdsMetadataBase: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        name: alias("Name", String.empty), serviceId: alias("Name", String.empty), mediaType: Microsoft.Entertainment.Queries.ObjectType.genre, images: sortArray("Images", MSE.Data.Comparer.Marketplace.edsCompareImagePurposeOnly, MSE.Data.Augmenter.Marketplace.EDSImage, null), primaryImage: searchNoDeflate("images", MSE.Data.Filter.Marketplace.edsFilterNonLogos, null), imageUri: convertNoDeflate("primaryImage.url", MSE.Data.Factory.self, null), imageResizeUri: convertNoDeflate("primaryImage.resizeUrl", MSE.Data.Factory.self, null)
                    })
            }), EdsPartnerApplicationLaunchInfo: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        deepLinkInfo: alias("DeepLinkInfo", String.empty), consoleTitleId: alias("TitleId", String.empty), clientType: alias("ClientType", String.empty)
                    })
            }), EdsProviderContent: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        device: alias("Device", String.empty), imageUri: alias("Image.Url", String.empty)
                    })
            }), EdsClosedCaption: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        mediaInstanceId: convert("MediaInstanceID", MSE.Data.Factory.guid, String.empty), lcid: convert("Lcid", MSE.Data.Factory.string, String.empty), name: alias("Name", String.empty), fileUri: alias("Url", String.empty)
                    })
            }), EdsBurntInSubtitleLanguage: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        mediaInstanceId: convert("MediaInstanceID", MSE.Data.Factory.guid, String.empty), lcid: convert("Lcid", MSE.Data.Factory.string, String.empty), name: alias("Name", String.empty)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EDSGenrePivotValue: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    queryOptions: convertNoDeflate(String.empty, MSE.Data.Factory.Marketplace.edsCreateMovieGenreQueryOptions, null), itemQueryOptions: convertNoDeflate(String.empty, MSE.Data.Factory.Marketplace.edsCreateMovieGenreQueryOptions, null), isRoot: alias("isRoot", false), serviceId: alias("serviceId", null)
                })
        }), EDSPivotValueBase: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        isRoot: alias("isRoot", false), serviceId: alias("serviceId", null), parent: alias("parent", null)
                    })
            }), EDSStudioPivotValue: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSPivotValueBase, null, {queryOptions: convertNoDeflate(String.empty, MSE.Data.Factory.Marketplace.edsCreateMovieGenreQueryOptions, null)})
            }), EDSNetworkPivotValue: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSPivotValueBase, null, {queryOptions: convertNoDeflate(String.empty, MSE.Data.Factory.Marketplace.edsCreateTvGenreQueryOptions, null)})
            }), EdsGenre: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsMetadataBase, null, {
                        genre: alias("Name", String.empty), expandedName: convert("Name", MSE.Data.Factory.Marketplace.expandGenreNameDelimiter, String.empty), isRoot: true, isGenreItem: true, label: alias("Name", String.empty), id: alias("Name", String.empty), voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceConfidence: value(defaultVoiceConfidence), value: augmentNoDeflate(String.empty, MSE.Data.Augmenter.Marketplace.EDSGenrePivotValue), items: null, selected: false, expanded: false, tabPanelId: null, childIds: null, ariaLevel: 1
                    })
            }), EdsMovieStudio: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsMetadataBase, null, {
                        studio: alias("Name", String.empty), voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceConfidence: value(defaultVoiceConfidence), isRoot: false, label: alias("Name", String.empty), value: augmentNoDeflate(String.empty, MSE.Data.Augmenter.Marketplace.EDSStudioPivotValue), items: undefined, expanded: undefined, ariaLevel: 2
                    })
            }), EdsTvNetwork: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsMetadataBase, null, {
                        network: alias("Name", String.empty), voicePhrase: convert("Name", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceConfidence: value(defaultVoiceConfidence), isRoot: false, label: alias("Name", String.empty), value: augmentNoDeflate(String.empty, MSE.Data.Augmenter.Marketplace.EDSNetworkPivotValue), items: undefined, expanded: undefined, ariaLevel: 2
                    })
            }), EdsSearchItem: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSMediaItem, null, {
                        mediaType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToDatabaseMediaType, null), personType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToPersonType, null), videoType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToVideoType, null), type: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToHcrType, null)
                    })
            }), EdsProvider: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        Id: alias("ID", null), name: alias("Name", String.empty), images: sortArray("Images", MSE.Data.Comparer.Marketplace.edsCompareImage, MSE.Data.Augmenter.Marketplace.EDSImage, null), primaryImage: searchNoDeflate("images", MSE.Data.Filter.Marketplace.edsFilterNonCoversNonThumbnails, null), imageUri: convertNoDeflate("primaryImage.url", MSE.Data.Factory.self, null), partnerApplicationLaunchInfoList: augment("PartnerApplicationLaunchInfos", MSE.Data.Augmenter.Marketplace.EdsPartnerApplicationLaunchInfo, null), providerContents: augment("ProviderContents", MSE.Data.Augmenter.Marketplace.EdsProviderContent, null)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EdsMovieGenre: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsGenre, null, {isMovieGenre: true})
        }), EdsTvGenre: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsGenre, null, {isTvGenre: true})
            }), EdsVideo: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSVideoBase, null, {
                        edsId: convert("ID", MSE.Data.Factory.guid, String.empty), contributors: hydrated(augment("Contributors", MSE.Data.Augmenter.Library.contributor, [])), contentType: alias("type", String.empty), name: hydrated(alias("Name", String.empty)), sortTitle: alias("Name", String.empty), duration: hydrated(convert("Duration", MSE.Data.Factory.timeSpan, -1), MSE.Data.Comparer.inverseDateComparer), genre: hydrated(augment("Genres", MSE.Data.Augmenter.Marketplace.EdsGenre, null)), releaseDate: hydrated(convert("ReleaseDate", MSE.Data.Factory.date, String.empty)), rating: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.sanitizeVideoRating, String.empty)), localizedRatingStringShort: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringShort, String.empty)), localizedRatingStringLong: hydrated(convert("ParentalRating", MSE.Data.Factory.Marketplace.toLocalizedVideoRatingStringLong, String.empty)), parentalRating: hydrated(alias("ParentalRatings[0].RatingId", String.empty)), primaryText: hydrated(alias("Name", String.empty)), providers: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsProviders)), hdFileSizeInBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsHDFileSizeInBytes, -1)), sdFileSizeInBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsSDFileSizeInBytes, -1)), hdFileSizeInMBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsHDFileSizeInMBytes, -1)), sdFileSizeInMBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsSDFileSizeInMBytes, -1)), providerNameList: convertNoDeflate("providers", MSE.Data.Factory.Marketplace.edsCompanionProviderNames, String.empty), description: hydrated(alias("Description", String.empty)), videoPreviewUrl: hydrated(alias("PreviewUrl", String.empty)), edsMediaItemType: hydrated(alias("MediaItemType", String.empty), MSE.Data.Comparer.notFalsy), videoType: hydrated(convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToVideoType, Microsoft.Entertainment.Queries.VideoType.other)), voicePhrase: convert("VuiDisplayName", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("VuiDisplayName", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceShortPhrase: convert("VuiDisplayName", MSE.Data.Factory.normalizeStringForVoiceShort, String.empty), voiceConfidence: value(defaultVoiceConfidence)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EdsExplanation: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    text: hydrated(convertOriginal("Text", MSE.Data.Factory.normalizeTextDirection, String.empty)), longText: hydrated(convertOriginal("LongText", MSE.Data.Factory.normalizeTextDirection, String.empty)), explanationItems: augment("ExplanationItems", MSE.Data.Augmenter.Marketplace.EdsVideo, null)
                })
        }), EdsMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsVideo, null, {
                        criticReview: hydrated(searchNoDeflate("reviewSources", MSE.Data.Factory.Marketplace.filterNonRottenTomatoesReviews, null)), videoType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToVideoType, Microsoft.Entertainment.Queries.VideoType.movie), studioName: hydrated(alias("Studio", String.empty)), hcrSecondaryText: convertNoDeflate("releaseDate", MSE.Data.Factory.localizedYear, String.empty), hcrInCollectionText: convertNoDeflate("inCollection", MSE.Data.Factory.Marketplace.inMyVideosText, 0), closedCaptionFiles: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsClosedCaptionFiles, null)), hasCaptions: hydrated(convertNoDeflate("closedCaptionFiles.length", MSE.Data.Factory.bool, false, convertFeatureOptionsClosedCaptions)), hasSubtitles: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsHasSubtitles, false)), burntInSubtitleLanguage: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsBurntInSubtitleLanguage, false)), formattedSubtitles: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsFormatSubtitles, String.empty)), hdFileSizeInBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsHDFileSizeInBytes, -1)), sdFileSizeInBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsSDFileSizeInBytes, -1)), hdFileSizeInMBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsHDFileSizeInMBytes, -1)), sdFileSizeInMBytes: hydrated(convertNoDeflate("rights", MSE.Data.Factory.Marketplace.edsSDFileSizeInMBytes, -1)), studios: hydrated(sortArray("Studios", MSE.Data.Comparer.Marketplace.edsCompareStudio, MSE.Data.Augmenter.Marketplace.EdsMovieStudio, MSE.Data.Factory.array)), studioBackgroundImage: searchNoDeflate("studios[0].images", MSE.Data.Filter.Marketplace.edsFilterNonStaticStudioBackgrounds, null), studioBackgroundImageUri: hydrated(convertNoDeflate("studioBackgroundImage.url", MSE.Data.Factory.self, null)), explanations: augment("Explanations", MSE.Data.Augmenter.Marketplace.EdsExplanation, null), _description: convert("Description", MSE.Data.Factory.Marketplace.sanitizeMovieDescription, String.empty), description: hydrated(convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty)), secondsFromEndForPostroll: hydratedRequired(value(-1)), isPresale: hydratedRequired(value(false)), presaleFulfillmentDate: hydratedRequired(value(null)), isBundle: hydratedRequired(value(false)), isPartOfBundle: hydratedRequired(value(false)), allBundledItemsInCollection: hydratedRequired(value(false)), bundledItems: hydratedRequired(value(null)), bundleOffer: null, unfilteredRights: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsUnfilteredRightsCurrentClientProviders, null)), onHydrated: MS.Entertainment.Hydrator.movie
                    })
            }), EdsTVEpisode: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsVideo, null, {
                        videoType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToVideoType, Microsoft.Entertainment.Queries.VideoType.tvEpisode), network: hydrated(alias("Network", String.empty)), studioName: hydrated(alias("Network", String.empty)), networks: hydrated(sortArray("Networks", MSE.Data.Comparer.Marketplace.edsCompareStudio, MSE.Data.Augmenter.Marketplace.EdsTvNetwork, MSE.Data.Factory.array)), episodeNumber: hydrated(convert("EpisodeNumber", MSE.Data.Factory.intNumber, -1)), formattedEpisodeNumber: hydrated(convert("EpisodeNumber", MSE.Data.Factory.formattedIntNumber, -1)), seasonNumber: hydrated(convert("SeasonNumber", MSE.Data.Factory.intNumber, -1)), formattedSeasonNumber: hydrated(convert("SeasonNumber", MSE.Data.Factory.formattedIntNumber, -1)), closedCaptionFiles: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsClosedCaptionFiles, null)), hasCaptions: hydrated(convertNoDeflate("closedCaptionFiles.length", MSE.Data.Factory.bool, false, convertFeatureOptionsClosedCaptions)), hasSubtitles: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsHasSubtitles, false)), burntInSubtitleLanguage: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsBurntInSubtitleLanguage, false)), formattedSubtitles: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsFormatSubtitles, String.empty)), seriesZuneId: MS.Entertainment.Utilities.EMPTY_GUID, seasonZuneId: MS.Entertainment.Utilities.EMPTY_GUID, canonicalSeriesId: hydrated(convert("ParentSeries.ID", MSE.Data.Factory.guid, String.empty)), canonicalSeriesTitle: hydrated(alias("ParentSeries.Name", String.empty)), canonicalSeasonId: hydrated(convert("ParentSeason.ID", MSE.Data.Factory.guid, String.empty)), seriesTitle: alias("ParentSeries.Name", String.empty), secondsFromEndForPostroll: hydratedRequired(value(-1)), isPartOfBundle: hydratedRequired(value(false)), isPromotedEpisode: hydrated(value(false)), unfilteredRights: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsUnfilteredRightsCurrentClientProviders, null)), bundleOffer: null, isChildOf: function MediaItem_TVSeasonComparerIsChild(mediaItem2) {
                                var isChild = false;
                                if (mediaItem2 && (!MS.Entertainment.Utilities.isEmptyGuid(mediaItem2.canonicalId) && this.canonicalSeriesId === mediaItem2.canonicalId))
                                    isChild = true;
                                return isChild
                            }, sharesParentWith: function sharesParentWith(mediaItem2) {
                                var sharesParent = false;
                                if (mediaItem2 && ((!MS.Entertainment.Utilities.isEmptyGuid(mediaItem2.canonicalSeriesId) && mediaItem2.canonicalSeriesId === this.canonicalSeriesId) || (!MS.Entertainment.Utilities.isEmptyGuid(mediaItem2.seriesId) && mediaItem2.seriesId === this.canonicalSeriesId)))
                                    sharesParent = true;
                                return sharesParent
                            }, onHydrated: MS.Entertainment.Hydrator.tvEpisode
                    })
            }), EdsTVSeason: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsVideo, null, {
                        criticReview: hydrated(searchNoDeflate("reviewSources", MSE.Data.Factory.Marketplace.filterNonMetaCriticReviews, null)), seasonServiceId: hydrated(convert("ID", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), seriesZuneId: hydrated(value(MS.Entertainment.Utilities.EMPTY_GUID)), mediaType: Microsoft.Entertainment.Queries.ObjectType.tvSeason, network: hydrated(alias("Network", String.empty)), studioName: hydrated(alias("Network", String.empty)), networks: hydrated(sortArray("Networks", MSE.Data.Comparer.Marketplace.edsCompareStudio, MSE.Data.Augmenter.Marketplace.EdsTvNetwork, MSE.Data.Factory.array)), seasonNumber: hydrated(convert("SeasonNumber", MSE.Data.Factory.intNumber, -1)), seriesTitle: hydrated(alias("ParentSeries.Name", String.empty)), seriesId: hydrated(convert("ParentSeries.ID", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), canonicalSeriesId: hydrated(convert("ParentSeries.ID", MSE.Data.Factory.guid, String.empty)), seriesIdType: hydrated(value("Canonical")), description: hydrated(alias("Description", String.empty)), formattedSeasonNumber: hydrated(convert("SeasonNumber", MSE.Data.Factory.formattedIntNumber, -1)), episodeCount: hydrated(convert("EpisodeCount", MSE.Data.Factory.intNumber, -1)), isComplete: hydrated(convert("IsSeasonComplete", MSE.Data.Factory.boolFromString, true)), hasActivities: hydratedRequired(value(false)), episodes: hydratedRequired(value(null)), firstEpisode: hydratedRequired(value(null)), episodesQueryFailed: hydratedRequired(value(false)), latestEpisode: hydrated(convert("LatestEpisode.EpisodeNumber", MSE.Data.Factory.intNumber, -1)), libraryEpisodes: hydratedRequired(value(null)), isPartOfBundle: hydratedRequired(value(false)), unfilteredRights: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsUnfilteredRightsCurrentClientProviders, null)), bundleOffer: null, knownChildServiceIds: null, isChildOf: function MediaItem_TVSeasonComparerIsChild(mediaItem2) {
                                var isChild = false;
                                if (mediaItem2 && (!MS.Entertainment.Utilities.isEmptyGuid(mediaItem2.canonicalId) && this.seriesId === mediaItem2.canonicalId))
                                    isChild = true;
                                return isChild
                            }, sharesParentWith: function sharesParentWith(mediaItem2) {
                                var sharesParent = false;
                                if (mediaItem2 && ((!MS.Entertainment.Utilities.isEmptyGuid(mediaItem2.canonicalSeriesId) && mediaItem2.canonicalSeriesId === this.canonicalSeriesId) || (!MS.Entertainment.Utilities.isEmptyGuid(mediaItem2.seriesId) && mediaItem2.seriesId === this.canonicalSeriesId)))
                                    sharesParent = true;
                                return sharesParent
                            }, onHydrated: MS.Entertainment.Hydrator.tvSeason
                    })
            }), EdsTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsVideo, null, {
                        mediaType: Microsoft.Entertainment.Queries.ObjectType.tvSeries, criticReview: hydrated(searchNoDeflate("reviewSources", MSE.Data.Factory.Marketplace.filterNonMetaCriticReviews, null)), network: hydrated(alias("Network", String.empty)), studioName: alias("Network", String.empty), _seasonCount: convert(String.empty, function select(item) {
                                return item.ZuneSeasonCount
                            }), seasons: hydratedRequired(value(null)), librarySeasons: hydratedRequired(value(null)), liveQuery: hydratedRequired(value(null)), episodeCount: hydratedRequired(value(-1)), seasonCount: convertNoDeflate("_seasonCount", MSE.Data.Factory.intNumber, -1), hcrSecondaryText: convertNoDeflate("seasonCount", MS.Entertainment.Formatters.seasonCountText, 0), hcrInCollectionText: convertNoDeflate("inCollection", MSE.Data.Factory.Marketplace.inMyVideosText, 0), networks: hydrated(sortArray("Networks", MSE.Data.Comparer.Marketplace.edsCompareStudio, MSE.Data.Augmenter.Marketplace.EdsTvNetwork, MSE.Data.Factory.array)), networkBackgroundImage: searchNoDeflate("networks[0].images", MSE.Data.Filter.Marketplace.edsFilterNonStaticStudioBackgrounds, null), networkBackgroundImageUri: hydrated(convertNoDeflate("networkBackgroundImage.url", MSE.Data.Factory.self, null)), explanations: augment("Explanations", MSE.Data.Augmenter.Marketplace.EdsExplanation, null), onHydrated: MS.Entertainment.Hydrator.tvSeries
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EDSEditorialTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsTVSeries, null, {
                    serviceType: null, serviceId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), serviceIdType: hydrated(convert(String.empty, MSE.Data.Factory.Marketplace.edsServiceIdTypeLegacy, null)), serviceImageType: MS.Entertainment.Data.ImageIdType.editorialSeries, canonicalId: hydrated(convert("canonicalId", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), name: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), seriesTitle: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), imageId: convert("image.id", MSE.Data.Factory.guid, String.empty), zuneId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), type: alias("link.type", String.empty), target: alias("link.target", String.empty), id: alias("id", String.empty), editorialTitle: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), secondaryText: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), text: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), backgroundImageId: alias("backgroundImage.id", String.empty), voicePhrase: convert("title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), parentalRating: convert("Rating", MSE.Data.Factory.Marketplace.sanitizeTVRatingAndAddFilterMoniker, String.empty)
                })
        }), EDSEditorialTVEpisode: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsTVEpisode, null, {
                        serviceType: null, serviceId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), serviceIdType: hydrated(convert(String.empty, MSE.Data.Factory.Marketplace.edsServiceIdTypeLegacy, null)), serviceImageType: MS.Entertainment.Data.ImageIdType.editorialSeries, canonicalId: hydrated(convert("canonicalId", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), name: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), imageId: convert("image.id", MSE.Data.Factory.guid, String.empty), zuneId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), type: alias("link.type", String.empty), target: alias("link.target", String.empty), id: alias("id", String.empty), editorialTitle: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), secondaryText: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), text: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), backgroundImageId: alias("backgroundImage.id", String.empty), voicePhrase: convert("title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), parentalRating: convert("Rating", MSE.Data.Factory.Marketplace.sanitizeTVRatingAndAddFilterMoniker, String.empty)
                    })
            }), EDSEditorialTVSeason: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsTVSeason, null, {
                        isEditorialSeason: true, serviceType: null, canonicalId: hydrated(value(null)), serviceId: hydrated(value(null)), serviceIdType: hydrated(value(null)), serviceImageType: MS.Entertainment.Data.ImageIdType.editorialSeason, seriesId: hydrated(convert("link.target", MSE.Data.Factory.Marketplace.editorialTvSeasonGetSeriesId)), seriesIdType: hydrated(value("ZuneCatalog")), seasonNumber: hydrated(convert("link.target", MSE.Data.Factory.Marketplace.editorialTvSeasonGetSeasonNumber)), name: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), seriesTitle: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, null)), imageId: convert("image.id", MSE.Data.Factory.guid, String.empty), zuneId: hydrated(convert("link.target", MSE.Data.Factory.Marketplace.editorialTvSeasonGetSeriesId, String.empty)), type: alias("link.type", String.empty), target: alias("link.target", String.empty), id: alias("id", String.empty), editorialTitle: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), secondaryText: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), text: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), backgroundImageId: alias("backgroundImage.id", String.empty), voicePhrase: convert("title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), parentalRating: convert("Rating", MSE.Data.Factory.Marketplace.sanitizeTVRatingAndAddFilterMoniker, String.empty)
                    })
            }), EDSEditorialMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsMovie, null, {
                        isEditorialMovie: true, serviceType: null, canonicalId: hydrated(convert("canonicalId", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), serviceId: hydrated(convert("link.target", MSE.Data.Factory.guid)), serviceIdType: hydrated(convert(String.empty, MSE.Data.Factory.Marketplace.edsServiceIdTypeLegacy, null)), serviceImageType: MS.Entertainment.Data.ImageIdType.editorialMovie, name: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), imageId: convert("image.id", MSE.Data.Factory.guid, String.empty), zuneId: hydrated(convert("link.target", MSE.Data.Factory.guid, String.empty)), type: alias("link.type", String.empty), target: alias("link.target", String.empty), primaryImageUri: hydrated(alias("imagePrimaryUrl", String.empty)), id: alias("id", String.empty), editorialTitle: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty), secondaryText: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), text: convertOriginal("text", MSE.Data.Factory.normalizeTextDirection, String.empty), backgroundImageId: alias("backgroundImage.id", String.empty), voicePhrase: convert("title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), parentalRating: convert("Rating", MSE.Data.Factory.Marketplace.sanitizeMovieRatingAndAddFilterMoniker, String.empty)
                    })
            }), EDSSpotlightMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsMovie, null, {
                        isEditorialMovie: true, serviceId: hydrated(convert("Action.Target", MSE.Data.Factory.guid, String.empty)), serviceIdType: hydrated(convert(String.empty, MSE.Data.Factory.Marketplace.edsServiceIdTypeLegacy, null)), imageUri: hydratedRequired(convert("ImageUrl", MSE.Data.Factory.self, null)), imageResizeUri: hydratedRequired(convert("ImageUrl", MSE.Data.Factory.self, null)), canonicalId: hydrated(convert("canonicalId", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), zuneId: hydrated(convert("Action.Target", MSE.Data.Factory.guid, String.empty)), _name: convert("Name", MSE.Data.Factory.stringOrEmpty, String.empty), name: hydrated(convertOriginalNoDeflate("_name", MSE.Data.Factory.normalizeTextDirection, String.empty)), _title: convert("Title", MSE.Data.Factory.stringOrEmpty, String.empty), title: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), _description: convert("Description", MSE.Data.Factory.Marketplace.sanitizeMovieDescription, String.empty), secondaryText: convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty), text: convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty), imagePrimaryUrl: alias("ImageUrl", String.empty), primaryImageUri: hydrated(alias("ImageUrl", String.empty)), actionTarget: alias("Action.Target", String.empty), actionType: convert("Action.type", MSE.Data.Augmenter.Spotlight.parseActionType), icon: convert("Action.type", MSE.Data.Augmenter.Spotlight.parseIcon, null), replaceable: convert("replaceable", MSE.Data.Factory.boolFromString, true), voicePhrase: convertNoDeflate("_title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convertNoDeflate("_title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), spotlightAction: augment("Action", MSE.Data.Augmenter.Spotlight.SpotlightAction, null), type: alias("type", null), parentalRating: convert("Rating", MSE.Data.Factory.Marketplace.sanitizeMovieRatingAndAddFilterMoniker, String.empty)
                    })
            }), EDSSpotlightTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsTVSeries, null, {
                        serviceId: hydrated(convert("Action.Target", MSE.Data.Factory.guid, String.empty)), serviceIdType: hydrated(convert(String.empty, MSE.Data.Factory.Marketplace.edsServiceIdTypeLegacy, null)), imageUri: hydratedRequired(convert("ImageUrl", MSE.Data.Factory.self, null)), imageResizeUri: hydratedRequired(convert("ImageUrl", MSE.Data.Factory.self, null)), canonicalId: hydrated(convert("canonicalId", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), zuneId: hydrated(convert("Action.Target", MSE.Data.Factory.guid, String.empty)), _name: convert("Name", MSE.Data.Factory.stringOrEmpty, String.empty), name: hydrated(convertOriginalNoDeflate("_name", MSE.Data.Factory.normalizeTextDirection, String.empty)), _title: convert("Title", MSE.Data.Factory.stringOrEmpty, String.empty), title: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), _description: convert("Description", MSE.Data.Factory.stringOrEmpty, String.empty), secondaryText: convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty), text: convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty), imagePrimaryUrl: alias("ImageUrl", String.empty), primaryImageUri: hydrated(alias("ImageUrl", String.empty)), actionTarget: alias("Action.Target", String.empty), actionType: convert("Action.type", MSE.Data.Augmenter.Spotlight.parseActionType), icon: convert("Action.type", MSE.Data.Augmenter.Spotlight.parseIcon, null), replaceable: convert("replaceable", MSE.Data.Factory.boolFromString, true), voicePhrase: convertNoDeflate("_title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convertNoDeflate("_title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), spotlightAction: augment("Action", MSE.Data.Augmenter.Spotlight.SpotlightAction, null), type: alias("type", null), parentalRating: convert("Rating", MSE.Data.Factory.Marketplace.sanitizeTVRatingAndAddFilterMoniker, String.empty)
                    })
            }), EDSSpotlightTVSeason: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsTVSeason, null, {
                        isEditorialSeason: true, serviceId: hydrated(convert("Action.Target", MSE.Data.Factory.guid, String.empty)), serviceIdType: hydrated(convert(String.empty, MSE.Data.Factory.Marketplace.edsServiceIdTypeLegacy, null)), imageUri: hydratedRequired(convert("ImageUrl", MSE.Data.Factory.self, null)), imageResizeUri: hydratedRequired(convert("ImageUrl", MSE.Data.Factory.self, null)), zuneId: hydrated(convert("Action.Target", MSE.Data.Factory.guid, String.empty)), seriesId: hydrated(convert("Action.ParentIdTarget", MSE.Data.Factory.guid, String.empty)), seriesIdType: hydrated(value("Canonical")), seriesTitle: convertOriginal("Name", MSE.Data.Factory.normalizeTextDirection, String.empty), _name: convert("Name", MSE.Data.Factory.stringOrEmpty, String.empty), name: hydrated(convertOriginalNoDeflate("_name", MSE.Data.Factory.normalizeTextDirection, String.empty)), _title: convert("Title", MSE.Data.Factory.stringOrEmpty, String.empty), title: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), _description: convert("Description", MSE.Data.Factory.stringOrEmpty, String.empty), secondaryText: convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty), text: convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty), imagePrimaryUrl: alias("ImageUrl", String.empty), primaryImageUri: hydrated(alias("ImageUrl", String.empty)), actionTarget: alias("Action.Target", String.empty), actionType: convert("Action.type", MSE.Data.Augmenter.Spotlight.parseActionType), icon: convert("Action.type", MSE.Data.Augmenter.Spotlight.parseIcon, null), replaceable: convert("replaceable", MSE.Data.Factory.boolFromString, true), voicePhrase: convertNoDeflate("_title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convertNoDeflate("_title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), parentalRating: convert("Rating", MSE.Data.Factory.Marketplace.sanitizeTVRatingAndAddFilterMoniker, String.empty), type: alias("type", null)
                    })
            }), EDSSpotlightTVEpisode: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EdsTVEpisode, null, {
                        serviceId: hydrated(convert("Action.Target", MSE.Data.Factory.guid, String.empty)), serviceIdType: hydrated(convert(String.empty, MSE.Data.Factory.Marketplace.edsServiceIdTypeLegacy, null)), imageUri: hydratedRequired(convert("ImageUrl", MSE.Data.Factory.self, null)), imageResizeUri: hydratedRequired(convert("ImageUrl", MSE.Data.Factory.self, null)), canonicalId: hydrated(convert("canonicalId", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), zuneId: hydrated(convert("Action.Target", MSE.Data.Factory.guid, String.empty)), _name: convert("Name", MSE.Data.Factory.stringOrEmpty, String.empty), name: hydrated(convertOriginalNoDeflate("_name", MSE.Data.Factory.normalizeTextDirection, String.empty)), _title: convert("Title", MSE.Data.Factory.stringOrEmpty, String.empty), title: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), _description: convert("Description", MSE.Data.Factory.stringOrEmpty, String.empty), secondaryText: convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty), text: convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty), imagePrimaryUrl: alias("ImageUrl", String.empty), primaryImageUri: hydrated(alias("ImageUrl", String.empty)), actionTarget: alias("Action.Target", String.empty), actionType: convert("Action.type", MSE.Data.Augmenter.Spotlight.parseActionType), icon: convert("Action.type", MSE.Data.Augmenter.Spotlight.parseIcon, null), replaceable: convert("replaceable", MSE.Data.Factory.boolFromString, true), episodeNumber: hydrated(convert("EpisodeNumber", MSE.Data.Factory.intNumber, -1)), formattedEpisodeNumber: hydrated(convert("EpisodeNumber", MSE.Data.Factory.formattedIntNumber, -1)), seasonNumber: hydrated(convert("SeasonNumber", MSE.Data.Factory.intNumber, -1)), formattedSeasonNumber: hydrated(convert("SeasonNumber", MSE.Data.Factory.formattedIntNumber, -1)), voicePhrase: convertNoDeflate("_title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convertNoDeflate("_title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), spotlightAction: augment("Action", MSE.Data.Augmenter.Spotlight.SpotlightAction, null), type: alias("type", null), parentalRating: convert("Rating", MSE.Data.Factory.Marketplace.sanitizeTVRatingAndAddFilterMoniker, String.empty), seriesId: hydrated(convert("Action.ParentIdTarget", MSE.Data.Factory.guid, String.empty))
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Marketplace", {
        createTvSeasonItem: function createTvSeasonItem(sourceItem) {
            var augmentation;
            if (sourceItem && sourceItem.ID)
                augmentation = MSE.Data.Augmenter.Marketplace.EdsTVSeason;
            else if (!(sourceItem instanceof MSE.Data.Augmenter.Library.TVSeason))
                augmentation = MSE.Data.Augmenter.Library.TVSeason;
            return MSE.Data.augment(sourceItem, augmentation)
        }, createTvEpisodeItem: function createTvEpisodeItem(sourceItem) {
                var augmentation;
                if (sourceItem && sourceItem.ID)
                    augmentation = MSE.Data.Augmenter.Marketplace.EdsTVEpisode;
                else if (!(sourceItem instanceof MSE.Data.Augmenter.Library.TVEpisode))
                    augmentation = MSE.Data.Augmenter.Library.TVEpisode;
                return MSE.Data.augment(sourceItem, augmentation)
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        MoviesResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {items: list("feed.entry", MSE.Data.Augmenter.Marketplace.Movie, null)})
        }), ChartEntriesResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("feed.entry", MSE.Data.Augmenter.Marketplace.ChartMovie, null)})
            }), TVChartEntriesResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("feed.entry", MSE.Data.Augmenter.Marketplace.TVSeries, null)})
            }), MovieDetailsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {item: augment("entry", MSE.Data.Augmenter.Marketplace.Movie, null)})
            }), MovieRightsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {rights: list("entry.rights.right", MSE.Data.Augmenter.Marketplace.Right, MSE.Data.Factory.array)})
            }), StudioDetailsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {item: augment("entry", MSE.Data.Augmenter.Marketplace.Studio, null)})
            }), TVSeriesResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("feed.entry", MSE.Data.Augmenter.Marketplace.TVSeries, null)})
            }), TVSeriesDetailsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {item: augment("feed", MSE.Data.Augmenter.Marketplace.TVSeries, null)})
            }), TVEpisodeDetailsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {item: augment("entry", MSE.Data.Augmenter.Marketplace.TVEpisode, null)})
            }), TVSeasonDetailsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("feed.entry", MSE.Data.Augmenter.Marketplace.TVEpisode, null)})
            }), StudiosResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("feed.entry", MSE.Data.Augmenter.Marketplace.Studio, null)})
            }), EdsClosedCaptioningFiles: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: augment("results", MSE.Data.Augmenter.Marketplace.EdsClosedCaptionFile, MSE.Data.Factory.array)})
            }), EdsMovieDetails: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSDetailsResult, null, {item: augment("Items[0]", MSE.Data.Augmenter.Marketplace.EdsMovie, null)})
            }), EdsTVSeriesDetails: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSDetailsResult, null, {item: augment("Items[0]", MSE.Data.Augmenter.Marketplace.EdsTVSeries, null)})
            }), EdsTVSeasonDetails: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSDetailsResult, null, {item: augment("Items[0]", MSE.Data.Augmenter.Marketplace.EdsTVSeason, null)})
            }), EdsTVEpisodeDetails: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSDetailsResult, null, {item: augment("Items[0]", MSE.Data.Augmenter.Marketplace.EdsTVEpisode, null)})
            }), EdsMovieList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("Items", MSE.Data.Augmenter.Marketplace.EdsMovie, null), itemsArray: augment("Items", MSE.Data.Augmenter.Marketplace.EdsMovie, null)
                    })
            }), EdsPlayCountMovieList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("Items", MSE.Data.Augmenter.Marketplace.EdsMovie, null), itemsArray: MSE.Data.Property.sortArray("Items", MSE.Data.Comparer.Marketplace.edsCompareItemPlayCount, MSE.Data.Augmenter.Marketplace.EdsMovie, MSE.Data.Factory.array), entriesArray: convertNoDeflate("itemsArray", MSE.Data.Factory.self, null)
                    })
            }), EdsVideoList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {items: list("Items", MSE.Data.Augmenter.Marketplace.EdsVideo, null)})
            }), EdsCrossVideoList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {items: list("Items", MSE.Data.Factory.Marketplace.edsCrossMediaToVideoFactory, null)})
            }), EdsTVSeriesList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("Items", MSE.Data.Augmenter.Marketplace.EdsTVSeries, null), itemsArray: augment("Items", MSE.Data.Augmenter.Marketplace.EdsTVSeries, null)
                    })
            }), EdsPlayCountTVSeriesList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("Items", MSE.Data.Augmenter.Marketplace.EdsTVSeries, null), itemsArray: MSE.Data.Property.sortArray("Items", MSE.Data.Comparer.Marketplace.edsCompareItemPlayCount, MSE.Data.Augmenter.Marketplace.EdsTVSeries, MSE.Data.Factory.array), entriesArray: convertNoDeflate("itemsArray", MSE.Data.Factory.self, null)
                    })
            }), EdsTVSeasonList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: MSE.Data.Property.sort("Items", MSE.Data.Comparer.Marketplace.edsCompareSeason, null, MSE.Data.Factory.Marketplace.createTvSeasonItem), itemsArray: augment("Items", MSE.Data.Augmenter.Marketplace.EdsTVSeason, null)
                    })
            }), EdsTVEpisodeList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("Items", MSE.Data.Factory.Marketplace.createTvEpisodeItem, null), itemsArray: augment("Items", MSE.Data.Augmenter.Marketplace.EdsTVEpisode, null)
                    })
            }), EdsVideoResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSDetailsResult, null, {item: augment(["Item", "Items[0]"], MSE.Data.Augmenter.Marketplace.EdsVideo, null)})
            }), EdsRecommendedVideoList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        itemsArray: augment("Items", MSE.Data.Factory.Marketplace.edsCrossMediaToVideoFactory, null), filteredItemsArray: filterArrayNoDeflate("itemsArray", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedRecommendationItems, MSE.Data.Factory.Marketplace.convertVideoRecommendationItem, null)
                    })
            }), EdsQueryRefinerList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsGenre, null), total: alias("MediaQueryRefiners[0].Refiners.length", 0)
                    })
            }), EdsGenreRefinerList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsGenre, null), itemsArray: augment("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsGenre, null), total: alias("MediaQueryRefiners[0].Refiners.length", 0)
                    })
            }), EdsTvGenreRefinerList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsTvGenre, null), itemsArray: augment("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsTvGenre, null), total: alias("MediaQueryRefiners[0].Refiners.length", 0)
                    })
            }), EdsMovieGenreRefinerList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsMovieGenre, null), itemsArray: augment("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsMovieGenre, null), total: alias("MediaQueryRefiners[0].Refiners.length", 0)
                    })
            }), EdsMovieStudioRefinerList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsMovieStudio, null), itemsArray: augment("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsMovieStudio, null), total: alias("MediaQueryRefiners[0].Refiners.length", 0)
                    })
            }), EdsTvNetworkRefinerList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsTvNetwork, null), itemsArray: augment("MediaQueryRefiners[0].Refiners", MSE.Data.Augmenter.Marketplace.EdsTvNetwork, null), total: alias("MediaQueryRefiners[0].Refiners.length", 0)
                    })
            }), EdsRelatedMovies: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("Items", MSE.Data.Augmenter.Marketplace.EdsMovie, null), itemsArray: augment("Items", MSE.Data.Augmenter.Marketplace.EdsMovie, null)
                    })
            }), EdsRelatedTV: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        items: list("Items", MSE.Data.Augmenter.Marketplace.EdsTVSeries, null), itemsArray: augment("Items", MSE.Data.Augmenter.Marketplace.EdsTVSeries, null)
                    })
            }), EdsTVSeriesDetailsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.mixNoDeflate({item: MSE.Data.Augmenter.Marketplace.EdsTVSeries})
            }), EdsTVSeasonDetailsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.mixNoDeflate({item: MSE.Data.Augmenter.Marketplace.EdsTVSeason})
            }), EdsTVSeriesResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.mix({"Items[0]": MSE.Data.Augmenter.Marketplace.EdsTVSeries})
            }), EdsTVSeasonResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.mix({"Items[0]": MSE.Data.Augmenter.Marketplace.EdsTVSeason})
            }), EdsTVSeriesSeasons: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {seasons: list("Items", MSE.Data.Augmenter.Marketplace.EdsTVSeason, null)})
            }), EdsTVSeasonsOnSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {seasons: convertOriginalNoDeflate("items", MSE.Data.Factory.self, null)})
            }), EdsTVSeasonEpisodes: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {episodes: list("Items", MSE.Data.Augmenter.Marketplace.EdsTVEpisode, null)})
            }), EdsTVEpisodesOnSeason: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {episodes: convertOriginalNoDeflate("items", MSE.Data.Factory.self, null)})
            }), MoviesResultEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("SearchResponse.Items.Item", MSE.Data.Augmenter.Marketplace.MovieEDS, null)})
            }), MovieDetailsResultEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {item: augment("DetailsResponse.Item", MSE.Data.Augmenter.Marketplace.MovieEDS, null)})
            }), TVSeriesResultEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("SearchResponse.Items.Item", MSE.Data.Augmenter.Marketplace.TVSeriesEDS, null)})
            }), TVSeasonsResultEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("ListResponse.Items.Item", MSE.Data.Augmenter.Marketplace.TVSeasonEDS, null)})
            }), TVEpisodeDetailsResultEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {item: augment("DetailsResponse.Item", MSE.Data.Augmenter.Marketplace.TVEpisodeEDS, null)})
            }), TVEpisodesResultEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("ListResponse.Items.Item", MSE.Data.Augmenter.Marketplace.TVEpisodeEDS, null)})
            }), VideoResultEDS: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {item: augment("DetailsResponse.Item", MSE.Data.Augmenter.Marketplace.VideoEDS, null)})
            }), RelatedMovieResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {items: list("ListResponse.Items.Item", MSE.Data.Augmenter.Marketplace.MovieEDS, null)})
            }), PinnedMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.Movie, null, {
                        canonicalId: hydrated(convert("ProviderId", MSE.Data.Factory.guid, String.empty)), provider: alias("Provider", null)
                    })
            }), PinnedTvSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.TVSeries, null, {
                        canonicalId: hydrated(convert("ProviderId", MSE.Data.Factory.guid, String.empty)), provider: alias("Provider", null)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EdsSeriesWithSeasons: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.BrowseDetailQuery.mixAugmentation(MSE.Data.Augmenter.Marketplace.EdsTVSeasonsOnSeries, MSE.Data.Augmenter.Marketplace.EdsTVSeriesDetailsResult)
        }), EdsSeasonWithEpisodes: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.BrowseDetailQuery.mixAugmentation(MSE.Data.Augmenter.Marketplace.EdsTVEpisodesOnSeason, MSE.Data.Augmenter.Marketplace.EdsTVSeasonDetailsResult)
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EdsSeriesWithSeasonsResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {item: augment(String.empty, MSE.Data.Augmenter.Marketplace.EdsSeriesWithSeasons, null)})
        }), EdsSeasonWithEpisodesResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {item: augment(String.empty, MSE.Data.Augmenter.Marketplace.EdsSeasonWithEpisodes, null)})
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {
        SpotlightItem: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    serviceId: convert("InitData", MSE.Data.Factory.guid, String.empty), zuneId: convert("InitData", MSE.Data.Factory.guid, String.empty), _name: convert("Name", MSE.Data.Factory.stringOrEmpty, String.empty), name: convertOriginalNoDeflate("_name", MSE.Data.Factory.normalizeTextDirection, String.empty), _title: convert("Title", MSE.Data.Factory.stringOrEmpty, String.empty), title: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), primaryText: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), _description: convert("Description", MSE.Data.Factory.stringOrEmpty, String.empty), _longDescription: convert("LongDescription", MSE.Data.Factory.stringOrEmpty, String.empty), secondaryText: convertOriginalNoDeflate("_description", MSE.Data.Factory.normalizeTextDirection, String.empty), longSecondaryText: convertOriginalNoDeflate("_longDescription", MSE.Data.Factory.normalizeTextDirection, String.empty), imageUri: alias("ImageUrl", String.empty), imageResizeUri: alias("ImageUrl", String.empty), imagePrimaryUrl: alias("ImageUrl", String.empty), spotlightAction: augment("Action", MSE.Data.Augmenter.Spotlight.SpotlightAction, null), actionTarget: alias("Action.Target", String.empty), actionType: convert("Action.type", MSE.Data.Augmenter.Spotlight.parseActionType), icon: convert("Action.type", MSE.Data.Augmenter.Spotlight.parseIcon, null), replaceable: convert("replaceable", MSE.Data.Factory.boolFromString, true), canonicalId: MS.Entertainment.Utilities.EMPTY_GUID, voicePhrase: convertNoDeflate("_title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convertNoDeflate("_title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), serviceType: value(MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem), type: convertNoDeflate("actionType.mediaType", MSE.Data.Factory.self, null), mediaType: Microsoft.Entertainment.Queries.ObjectType.editorial, isNotMedia: {get: function get_isNotMedia() {
                                var mediaType = this.actionType && this.actionType.mediaType;
                                return mediaType === MS.Entertainment.Data.Augmenter.Spotlight.MediaType.ZuneFlexHub || mediaType === MS.Entertainment.Data.Augmenter.Spotlight.MediaType.FlexHub || mediaType === MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Web || mediaType === MS.Entertainment.Data.Augmenter.Spotlight.MediaType.WebBlend || mediaType === MS.Entertainment.Data.Augmenter.Spotlight.MediaType.None
                            }}
                })
        }), SpotlightMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.Movie, null, {
                        serviceId: convert("actionTarget", MSE.Data.Factory.guid, String.empty), name: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), voicePhrase: convert("title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), type: alias("type", null)
                    })
            }), SpotlightTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.TVSeries, null, {
                        serviceId: convert("actionTarget", MSE.Data.Factory.guid, String.empty), name: hydrated(convertOriginal("title", MSE.Data.Factory.normalizeTextDirection, String.empty)), voicePhrase: convert("title", MSE.Data.Factory.normalizeStringForVoice, String.empty), voiceLongPhrase: convert("title", MSE.Data.Factory.normalizeStringForVoiceLong, String.empty), voiceConfidence: value(defaultVoiceConfidence), type: alias("type", null)
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        TVEpisodeSharePackage: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    mediaId: alias("serviceId", String.empty), mediaType: alias("mediaType", 0), mediaTitle: collect(["seriesTitle", "name"]), title: collect(["seriesTitle", "name"]), description: alias("description", String.empty), text: collect(["seriesTitle", "name"]), uri: alias("webUri", String.empty), htmlUri: alias("webUri", String.empty), htmlImages: collect(["imageUri", "primaryImageUri"], null, String.empty), htmlLines: collect(["name", "seriesTitle", "seasonNumber", "description"], null, String.empty), emptyMessage: String.id.IDS_SHARE_EMPTY_MESSAGE_TV_EPISODE
                })
        }), TVSeasonSharePackage: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        mediaId: alias("serviceId", String.empty), mediaType: alias("mediaType", 0), mediaTitle: collect(["seriesTitle", "name"]), title: collect(["seriesTitle", "name"]), description: alias("description", String.empty), text: collect(["seriesTitle", "name"]), uri: alias("webUri", String.empty), htmlUri: alias("webUri", String.empty), htmlImages: collect(["imageUri", "primaryImageUri"], null, String.empty), htmlLines: collect(["seriesTitle", "seasonNumber", "description"], null, String.empty), emptyMessage: String.id.IDS_SHARE_EMPTY_MESSAGE_TV_EPISODE
                    })
            }), MovieSharePackage: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MS.Entertainment.Data.Augmenter.Marketplace.MediaSharePackage, null, {emptyMessage: String.id.IDS_SHARE_EMPTY_MESSAGE_MOVIE})
            }), TVSeriesSharePackage: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MS.Entertainment.Data.Augmenter.Marketplace.MediaSharePackage, null, {emptyMessage: String.id.IDS_SHARE_EMPTY_MESSAGE_TV_SERIES})
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace.Video", {
        EditorialTVSeason: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.Data.Augmenter.Marketplace.EDSEditorialTVSeason
        }), EditorialTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.Data.Augmenter.Marketplace.EDSEditorialTVSeries
            }), EditorialEpisode: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.Data.Augmenter.Marketplace.EDSEditorialTVEpisode
            }), EditorialMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.Data.Augmenter.Marketplace.EDSEditorialMovie
            }), EdsMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.Data.Augmenter.Marketplace.EdsMovie
            }), EdsTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.Data.Augmenter.Marketplace.EdsTVSeries
            }), SpotlightMovie: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.Data.Augmenter.Marketplace.EDSSpotlightMovie
            }), SpotlightTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.Data.Augmenter.Marketplace.EDSSpotlightTVSeries
            }), SpotlightTVSeason: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.Data.Augmenter.Marketplace.EDSSpotlightTVSeason
            }), SpotlightTVEpisode: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.Data.Augmenter.Marketplace.EDSSpotlightTVEpisode
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Video", {MediaDiscoveryFeed: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    entries: list("SlotGroup", MSE.Data.Augmenter.MediaDiscovery.SlotGroupItem, null), editorialItems: augment("SlotGroup", MSE.Data.Augmenter.MediaDiscovery.SlotGroupItem, null)
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Video", {
        FlexHubContent: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    entries: list("ContentManifest.Content.Channel", MSE.Data.Augmenter.Video.MediaDiscoveryFeed, null), entriesArray: augment("ContentManifest.Content.Channel", MSE.Data.Augmenter.Video.MediaDiscoveryFeed, null), featuredSetsArray: filterArrayNoDeflate("entriesArray[0].editorialItems", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedEditorialItems, MSE.Data.Factory.Marketplace.getEditorialItem, null), items: filterArrayNoDeflate("entriesArray[0].editorialItems", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedEditorialItems, MSE.Data.Factory.Marketplace.getEditorialItem, null), name: convertOriginal("ContentManifest.Title", MSE.Data.Factory.normalizeTextDirection, String.empty), description: convertOriginal("ContentManifest.Description", MSE.Data.Factory.normalizeTextDirection, String.empty), backgroundImageUrl: alias("ContentManifest.BackgroundImageUrl", String.empty), heroImageUrl: alias("ContentManifest.HeroImageUrl", String.empty)
                })
        }), MovieHubContent: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        entries: list("ContentManifest.Content.Channel", MSE.Data.Augmenter.Video.MediaDiscoveryFeed, null), entriesArray: augment("ContentManifest.Content.Channel", MSE.Data.Augmenter.Video.MediaDiscoveryFeed, null), name: convertOriginal("ContentManifest.Name", MSE.Data.Factory.normalizeTextDirection, String.empty)
                    })
            }), MovieHubNewReleaseContent: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MS.Entertainment.Data.Augmenter.Video.MovieHubContent, null, {items: filterNoDeflate("entriesArray[0].editorialItems", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedEditorialItems, MSE.Data.Factory.Marketplace.convertVideoEditorialItem, null)})
            }), MovieHubFeaturedContent: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MS.Entertainment.Data.Augmenter.Video.MovieHubContent, null, {items: filterNoDeflate("entriesArray[1].editorialItems", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedEditorialItems, MSE.Data.Factory.Marketplace.convertVideoEditorialItem, null)})
            }), TvHubContent: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        entries: list("ContentManifest.Content.Channel", MSE.Data.Augmenter.Video.MediaDiscoveryFeed, null), entriesArray: augment("ContentManifest.Content.Channel", MSE.Data.Augmenter.Video.MediaDiscoveryFeed, null), filteredEntries: filterNoDeflate("entriesArray[0].editorialItems", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedEditorialItems, MSE.Data.Factory.Marketplace.convertVideoEditorialItem, null), filteredEntriesArray: filterArrayNoDeflate("entriesArray[0].editorialItems", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedEditorialItems, MSE.Data.Factory.Marketplace.convertVideoEditorialItem, null), name: convertOriginal("ContentManifest.Name", MSE.Data.Factory.normalizeTextDirection, String.empty)
                    })
            }), TvHubNewReleaseContent: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MS.Entertainment.Data.Augmenter.Video.TvHubContent, null, {items: filterNoDeflate("entriesArray[0].editorialItems", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedEditorialItems, MSE.Data.Factory.Marketplace.convertVideoEditorialItem, null)})
            }), TvHubFeaturedContent: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MS.Entertainment.Data.Augmenter.Video.TvHubContent, null, {items: filterNoDeflate("entriesArray[1].editorialItems", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedEditorialItems, MSE.Data.Factory.Marketplace.convertVideoEditorialItem, null)})
            }), TvHubLastNightsContent: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MS.Entertainment.Data.Augmenter.Video.TvHubContent, null, {items: filterNoDeflate("entriesArray[0].editorialItems", MS.Entertainment.Data.Filter.Marketplace.filterUnsupportedEditorialItems, MSE.Data.Factory.Marketplace.convertVideoEditorialItem, null)})
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.FileActivation", {Video: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Library.Video, null, {
                    artistId: -1, dateAdded: hydrated(value(null)), genreId: hydrated(value(-1)), mediaType: Microsoft.Entertainment.Queries.ObjectType.video, releaseDate: hydrated(value(null)), seasonNumber: hydrated(value(-1)), seriesTitle: hydrated(value(null)), seriesId: hydrated(value(null)), studio: hydrated(value(null)), subtitle: hydrated(value(null)), userStarRating: -1, providerNameList: String.empty, wmContentId: null, videoType: Microsoft.Entertainment.Queries.VideoType.other, duration: -1, imageUri: hydrated(convert("thumbnail", MSE.Data.Factory.oneTimeUseBlob, null)), _title: convert("fileItem.name", MSE.Data.Factory.string, String.empty), name: hydrated(convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty)), title: convertOriginalNoDeflate("_title", MSE.Data.Factory.normalizeTextDirection, String.empty), activationFilePath: convert("fileItem.path", MSE.Data.Factory.string, String.empty), userRating: null, fileItem: alias("fileItem", null), filePath: alias("FilePath", null), hasSeriesId: {get: function() {
                                return (this.seriesId && this.seriesId !== MS.Entertainment.Utilities.EMPTY_GUID)
                            }}, isMovie: {get: function() {
                                return (this.videoType === Microsoft.Entertainment.Queries.VideoType.movie)
                            }}
                })
        })})
})(MS.Entertainment)
})();
/* >>>>>>/framework/data/queries/libraryqueries.js:5975 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {LibraryQueryBase: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.LibraryWrapperQuery, null, {
                    groupsAugmentation: MSE.Data.Augmenter.Library.GroupsAugmentation, getItemIndexAsync: function getItemIndexAsync(libraryId) {
                            var getItemIndexPromise;
                            if (this._innerQuery && this._innerQuery.getItemIndexAsync)
                                getItemIndexPromise = this._innerQuery.getItemIndexAsync(libraryId);
                            return WinJS.Promise.as(getItemIndexPromise)
                        }, executeCount: function executeCount() {
                            var innerQuery = this.createInnerQuery();
                            return innerQuery.getCountAsync()
                        }
                }, {isLibraryQuery: function LibraryQuery_isLibraryQuery(object) {
                        return MS.Entertainment.Data.Query.LibraryQueryBase.prototype.isPrototypeOf(object)
                    }})
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryGenres: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.LibraryQueryBase, null, {
                    mediaType: Microsoft.Entertainment.Queries.GenresQueryMediaType.undefined, videoType: -1, sort: Microsoft.Entertainment.Queries.GenresSortBy.none, createInnerQuery: function createInnerQuery() {
                            var query = new Microsoft.Entertainment.Queries.GenresQuery;
                            query.mediaType = this.mediaType;
                            if (this.videoType !== -1)
                                query.videoType = this.videoType;
                            query.primarySortBy = this.sort;
                            return query
                        }, resultAugmentation: MSE.Data.Augmenter.Library.GenresResult, aggregateChunks: true
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.LibraryQueryBase, null, {
                    category: -1, genreId: -1, seasonId: -1, seriesId: -1, folderId: null, sort: Microsoft.Entertainment.Queries.VideosSortBy.none, studio: null, keyword: null, objectIds: null, videoUrl: null, mediaAvailability: null, createInnerQuery: function createInnerQuery() {
                            var query = new Microsoft.Entertainment.Queries.VideosQuery;
                            if (this.category !== -1)
                                query.category = this.category;
                            if (this.genreId !== -1)
                                query.genreId = this.genreId;
                            if (this.seasonId !== -1)
                                query.seasonId = this.seasonId;
                            if (this.seriesId !== -1)
                                query.seriesId = this.seriesId;
                            if (this.folderId !== null)
                                query.folderId = this.folderId;
                            if (this.studio !== null)
                                query.studio = this.studio;
                            if (this.keyword)
                                if (!Array.isArray(this.keyword))
                                    query.keyword = [this.keyword];
                                else
                                    query.keyword = this.keyword;
                            if (this.objectIds)
                                query.objectIds = this.objectIds;
                            if (this.videoUrl !== null)
                                query.videoUrl = this.videoUrl;
                            if (this.mediaAvailability !== null)
                                query.mediaAvailability = this.mediaAvailability;
                            query.primarySortBy = this.sort;
                            return query
                        }, resultAugmentation: MSE.Data.Augmenter.Library.OtherVideosResult, aggregateChunks: true
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {
        libraryVideoMovies: MSE.deferredDerive(MSE.Data.Query.libraryVideos, null, {
            category: Microsoft.Entertainment.Queries.VideoType.movie, resultAugmentation: MSE.Data.Augmenter.Library.MoviesResult
        }), libraryVideoTV: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.derive(MSE.Data.Query.libraryVideos, null, {
                        category: Microsoft.Entertainment.Queries.VideoType.tvEpisode, resultAugmentation: MSE.Data.Augmenter.Library.TVEpisodesResult
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryTVSeries: MSE.deferredDerive(MSE.Data.Query.LibraryQueryBase, null, {
            keyword: null, sort: Microsoft.Entertainment.Queries.TVSeriesSortBy.none, mediaAvailability: null, createInnerQuery: function createInnerQuery() {
                    var query = new Microsoft.Entertainment.Queries.TVSeriesQuery;
                    if (this.keyword)
                        if (!Array.isArray(this.keyword))
                            query.keyword = [this.keyword];
                        else
                            query.keyword = this.keyword;
                    if (this.mediaAvailability !== null)
                        query.mediaAvailability = this.mediaAvailability;
                    query.primarySortBy = this.sort;
                    return query
                }, resultAugmentation: MSE.Data.Augmenter.Library.TVSeriesResult, aggregateChunks: true
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryVideoOther: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.libraryVideos, null, {
                    category: Microsoft.Entertainment.Queries.VideoType.other, resultAugmentation: MSE.Data.Augmenter.Library.OtherVideosResult
                })
        })})
})()
})();
/* >>>>>>/framework/data/queries/marketplacequeries.js:6071 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    var VER_CLIENTTYPE_STR = "PC/Windows";
    var BROWSE_CHUNK_SIZE = 50;
    var BROWSE_TOP_CHUNK_SIZE = 100;
    var SEARCH_CHUNK_SIZE = 20;
    var EXTRAS_CHUNK_SIZE = 30;
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {errorCodeWrapperQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.ServiceWrapperQuery, function errorCodeWrapperQuery(errorCode) {
                    this.base();
                    if (errorCode < 0)
                        errorCode += 0xFFFFFFFF + 1;
                    var languageName = MS.Entertainment.Utilities.getResourceLanguage();
                    this.postData = {
                        contentType: MSE.Data.Query.errorCodeWrapperQuery.contentType, data: MSE.Data.Query.errorCodeWrapperQuery.postDataFormat.format(errorCode.toString(16), languageName)
                    };
                    this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post
                }, {
                    createResourceURI: function() {
                        return MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_XboxSupport) + "/Services/ErrorCodeLookupService.asmx"
                    }, headers: {SOAPAction: "\"ErrorCodeLookup/LookupFullParam\""}, useCache: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Common.ErrorCode
                }, {
                    postDataFormat: "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"><soap:Body><LookupFullParam xmlns=\"ErrorCodeLookup\"><errorCode>{0}</errorCode><searchMode>ExactOnly</searchMode><locale>{1}</locale></LookupFullParam></soap:Body></soap:Envelope>", contentType: "text/xml; charset=utf-8"
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data.Query, "Shared", {SetRichPresence: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.ServiceWrapperQuery, function setRichPresence(queryData) {
                    this.base();
                    this.postData = {
                        contentType: MS.Entertainment.Data.Query.Shared.SetRichPresence.contentType, data: JSON.stringify(queryData)
                    };
                    this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post;
                    this.serviceType = MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json
                }, {
                    getResourceEndpointID: function() {
                        return MS.Entertainment.Endpoint.id.seid_RichPresence
                    }, getResourceEndpoint: function() {
                            return MS.Entertainment.Endpoint.load(this.getResourceEndpointID())
                        }, createResourceURI: function() {
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            var suffix = MS.Entertainment.Data.Query.Shared.SetRichPresence.resourceSuffix.format(signedInUser.xuid);
                            return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                        }, requireResponseData: false, addAuthenticationHeader: true
                }, {
                    resourceSuffix: "users/xuid({0})/devices/current/titles/current", contentType: "application/json"
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data.Query, "Shared", {SetRecommendationFeeback: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.ServiceWrapperQuery, function setRecommendationFeeback(queryData) {
                    this.base();
                    this.postData = {
                        contentType: MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.contentType, data: JSON.stringify(queryData)
                    };
                    this.addHeader("x-xbl-contract-version", MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.contractVersion);
                    this.addHeader("Accept", MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.contentType);
                    this.addHeader("Content-Type", MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.contentType);
                    this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post;
                    this.serviceType = MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json
                }, {
                    getResourceEndpointID: function() {
                        return MS.Entertainment.Endpoint.id.seid_Feedback
                    }, getResourceEndpoint: function() {
                            return MS.Entertainment.Endpoint.load(this.getResourceEndpointID())
                        }, createResourceURI: function() {
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            var languageName = MS.Entertainment.Utilities.getResourceLanguage();
                            var suffix = MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.resourceSuffix.format(signedInUser.xuid, languageName);
                            return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                        }, requireResponseData: false, addAuthenticationHeader: true
                }, {
                    resourceSuffix: "xuid({0})/feedback?locale={1}", contractVersion: "1", contentType: "application/json", notInterestedFeedbackValue: "NotInterested"
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {MovieHub: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.marketplaceWrapperQuery, null, {
                    createHeaders: function createHeaders() {
                        return MS.Entertainment.Data.Query.createEditorialHeaders()
                    }, getResourceEndpointID: function getResourceEndpointID() {
                            return MS.Entertainment.Endpoint.id.seid_MediaDiscovery
                        }, createResourceURI: function() {
                            var serviceConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service;
                            var uri = MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), serviceConfig.videoAppMovieHubSuffix);
                            return uri
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.channelPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotGroupPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotPluralizer], resultAugmentation: MSE.Data.Augmenter.Video.MovieHubContent, aggregateChunks: false, supportsContentNotifications: true, queryType: "MovieHub"
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {MovieHubNewReleasesQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MS.Entertainment.Data.Query.MovieHub, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Video.MovieHubNewReleaseContent})
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {MovieHubFeaturedQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MS.Entertainment.Data.Query.MovieHub, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Video.MovieHubFeaturedContent})
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {TvHub: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.marketplaceWrapperQuery, null, {
                    createHeaders: function createHeaders() {
                        return MS.Entertainment.Data.Query.createEditorialHeaders()
                    }, getResourceEndpointID: function getResourceEndpointID() {
                            return MS.Entertainment.Endpoint.id.seid_MediaDiscovery
                        }, createResourceURI: function() {
                            var serviceConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service;
                            var uri = MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), serviceConfig.videoAppTvHubSuffix);
                            return uri
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.channelPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotGroupPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotPluralizer], queryType: "TvHub", resultAugmentation: MSE.Data.Augmenter.Video.TvHubContent, aggregateChunks: false
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {TvHubNewReleasesQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MS.Entertainment.Data.Query.TvHub, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Video.TvHubNewReleaseContent})
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {TvHubFeaturedQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MS.Entertainment.Data.Query.TvHub, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Video.TvHubFeaturedContent})
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {
        marketplaceOrderBy: {
            downloadRank: "downloadRank", none: "", playRank: "playRank", releaseDate: "releaseDate", rentalRank: "rentalRank", salesRank: "salesRank", title: "title"
        }, marketplaceWrapperQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.derive(MSE.Data.ServiceWrapperQuery, null, {
                        getResourceEndpointID: function getResourceEndpointID() {
                            return MS.Entertainment.Endpoint.id.seid_RootCatalog
                        }, createParameters: function createParameters() {
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                if (configurationManager.service.enableTimeTravel)
                                    return {instant: (new Microsoft.Entertainment.Configuration.ConfigurationManager).service.timeTravelStartDate};
                                else
                                    return null
                            }
                    }, {
                        entriesPluralizer: "entry", rightsPluralizer: "rights/right", closedCaptionPluralizer: "closedCaptionFiles/closedCaptionFile", clientTypesPluralizer: "clientTypes/clientType", genresPluralizer: "genres/genre", peerGenresPluralizer: "peerGenres/genre", subGenresPluralizer: "subGenres/genre", categoriesPluralizer: "categories/category", imagesPluralizer: "entry/instances/imageInstance", editorialItemsPluralizer: "editorialItems/editorialItem", channelPluralizer: "Content/Channel", slotGroupPluralizer: "Channel/SlotGroup", slotPluralizer: "SlotGroup/Slot", featuresPluralizer: "features/feature", albumsPluralizer: "albums/album", paymentTypesPluralizer: "paymentTypes/paymentType", reviewSourcesPluralizer: "ReviewSources/ReviewSource", criticReviewsPluralizer: "CriticReviews/CriticReview"
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {BrowseDiscoveryFlexHub: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.ServiceWrapperQuery, null, {
                    serviceType: MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json, target: "", createResourceURI: function() {
                            Trace.assert(this.target, "BrowseDiscoveryFlexHub: No target defined.");
                            var resourceUri = null;
                            if (MS.Entertainment.Utilities.verifyUrl(this.target))
                                resourceUri = window.encodeURI(this.target);
                            else {
                                Trace.assert(MS.Entertainment.Utilities.isMusicApp, "Only music flexhub queries supported.");
                                var serviceConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service;
                                var suffix = serviceConfig.musicAppSpotlightVersion.split("/");
                                suffix.push(window.encodeURI(this.target));
                                resourceUri = MS.Entertainment.Utilities.UriFactory.create(MS.Entertainment.Endpoint.id.seid_MediaDiscovery, suffix)
                            }
                            return resourceUri
                        }, createHeaders: function createHeaders() {
                            return MS.Entertainment.Data.Query.createEditorialHeaders()
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.entriesPluralizer, MSE.Data.Query.marketplaceWrapperQuery.rightsPluralizer, MSE.Data.Query.marketplaceWrapperQuery.clientTypesPluralizer, MSE.Data.Query.marketplaceWrapperQuery.editorialItemsPluralizer], resultAugmentation: MSE.Data.Augmenter.Spotlight.SpotlightContent
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {prefixQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.marketplaceWrapperQuery, null, {
                    keyword: "", createResourceURI: function() {
                            return this.getResourceEndpoint()
                        }, createParameters: function createParameters() {
                            return {
                                    prefix: this.keyword, includeTracks: true, includeAlbums: true, includeArtists: true, includeMovies: true, includeTVSeries: true, isActionable: true, clientType: VER_CLIENTTYPE_STR
                                }
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.entriesPluralizer], resultAugmentation: MSE.Data.Augmenter.Marketplace.PrefixResult
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {HubsOverride: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.ServiceWrapperQuery, null, {
                    getResourceEndpointID: function getResourceEndpointID() {
                        return MS.Entertainment.Endpoint.id.seid_WinPhoneXboxDotCom
                    }, getSpotlightFeedVersionSubPath: function getSpotlightFeedVersionSubPath() {
                            return String.empty
                        }, createResourceURI: function() {
                            return this.getResourceEndpoint() + this.getSpotlightFeedVersionSubPath() + this.appString
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.slotGroupPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotPluralizer], resultAugmentation: MSE.Data.Augmenter.Spotlight.EditorialOverrideContent, supportsContentNotifications: true
                })
        })})
})()
})();
/* >>>>>>/framework/data/queries/edsqueries.js:6250 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    var VER_CLIENTTYPE_STR_EDS = "PCWindows";
    var VER_SERVICEVERSION_STR_EDS = "1.4";
    var SEARCH_CHUNK_SIZE = 20;
    var BROWSE_CHUNK_SIZE = 25;
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {
        edsMediaGroup: {
            appType: "AppType", enhancedContentType: "EnhancedContentType", gameType: "GameType", movieType: "MovieType", musicType: "MusicType", musicArtistType: "MusicArtistType", tvType: "TVType", unknown: "Unknown", webVideoType: "WebVideoType"
        }, edsSortOrder: {
                allTimeAverageRating: "AllTimeAverageRating", allTimePlayCount: "AllTimePlayCount", allTimePurchaseCount: "AllTimePurchaseCount", allTimeRatingCount: "AllTimeRatingCount", allTimeRentalCount: "AllTimeRentalCount", allTimeUserRating: "AllTimeUserRating", criticRating: "CriticRating", digitalReleaseDate: "DigitalReleaseDate", freeAndPaidCountDaily: "FreeAndPaidCountDaily", mostPopular: "MostPopular", paidCountAllTime: "PaidCountAllTime", paidCountDaily: "PaidCountDaily", releaseDate: "ReleaseDate", sevenDaysAverageRating: "SevenDaysAverageRating", sevenDaysPlayCount: "SevenDaysPlayCount", sevenDaysPurchaseCount: "SevenDaysPurchaseCount", sevenDaysRentalCount: "SevenDaysRentalCount", sevenDaysRatingCount: "SevenDaysRatingCount", userRating: "UserRating"
            }, edsQueryRefiner: {
                decade: "Decade", genre: "Genre", network: "Network", studio: "Studio"
            }, edsEndpointType: {
                browse: "browse", crossMediaGroupSearch: "crossMediaGroupSearch", details: "details", fields: "fields", mediaGuide: "mediaGuide", metadata: "metadata", metadataMovieGenres: "metadata/mediaItemTypes/Movie/queryRefiners/genre", metadataMovieStudios: "metadata/mediaItemTypes/Movie/queryRefiners/studio", metadataMusicGenres: "metadata/mediaItemTypes/Album/queryRefiners/genre", metadataMusicSubGenres: "metadata/mediaItemTypes/Album/queryRefiners/genre/subQueryRefinerValues", metadataTvGenres: "metadata/mediaItemTypes/TVSeries/queryRefiners/genre", metadataTvNetworks: "metadata/mediaItemTypes/TVSeries/queryRefiners/network", recommendations: "recommendations", related: "related", searchTerms: "searchTerms", singleMediaGroupSearch: "singleMediaGroupSearch"
            }, edsFields: {
                allTimeAverageRating: "AllTimeAverageRating", allTimePlayCount: "AllTimePlayCount", allTimeRatingCount: "AllTimeRatingCount", amgId: "AmgId", availabilities: "Availabilities", awards: "Awards", contributors: "Contributors", copyright: "Copyright", criticRating: "CriticRating", description: "Description", duration: "Duration", episodeCount: "EpisodeCount", episodeNumber: "EpisodeNumber", explanation: "Explanation", explanations: "Explanations", genres: "Genres", hasActivities: "HasActivities", hasSeasons: "HasSeasons", hasTrackMediaGuide: "HasTrackMediaGuide", id: "ID", images: "Images", isExplicit: "IsExplicit", isHero: "IsHero", isSeasonComplete: "IsSeasonComplete", label: "Label", labelOwner: "LabelOwner", latestEpisode: "LatestEpisode", latestSeason: "LatestSeason", legacyAmgId: "LegacyAmgId", legacyIds: "LegacyIds", mediaGroup: "MediaGroup", mediaItemType: "MediaItemType", mediaNetId: "MediaNetId", mergedMetadata: "MergedMetadata", musicAlbumType: "MusicAlbumType", musicVideoId: "MusicVideoId", name: "Name", network: "Network", networks: "Networks", parentAlbum: "ParentAlbum", parentalRating: "ParentalRating", parentalRatings: "ParentalRatings", parentalRatingReasons: "ParentalRatingReasons", parentalRatingSystem: "ParentalRatingSystem", parentItems: "ParentItems", parentSeason: "ParentSeason", parentSeries: "ParentSeries", previewDuration: "PreviewDuration", previewUrl: "PreviewUrl", primaryArtist: "PrimaryArtist", providers: "Providers", ratingId: "RatingId", relationType: "RelationType", relatedMedia: "RelatedMedia", releaseDate: "ReleaseDate", reviewSources: "ReviewSources", seasonCount: "SeasonCount", seasonNumber: "SeasonNumber", sevenDaysAverageRating: "SevenDaysAverageRating", sevenDaysPlayCount: "SevenDaysPlayCount", sevenDaysRatingCount: "SevenDaysRatingCount", sortName: "SortName", studio: "Studio", studios: "Studios", subGenres: "SubGenres", subTitle: "SubTitle", thirtyDaysAverageRating: "ThirtyDaysAverageRating", thirtyDaysPlayCount: "ThirtyDaysPlayCount", thirtyDaysRatingCount: "ThirtyDaysRatingCount", trackCount: "TrackCount", trackId: "TrackId", trackNumber: "TrackNumber", vuiDisplayName: "VuiDisplayName", zuneId: "ZuneId", zuneEpisodeCount: "ZuneEpisodeCount", zuneSeasonCount: "ZuneSeasonCount"
            }, bbxMediaType: {
                app: "bbxapps", album: "bbxalbum", allMovie: "bbxmovies", allTv: "bbxtv", allVideo: "bbxvideo", artist: "bbxartist", artistSmartDj: "bbxartisttrkmg", game: "bbxgames", firstParty: "bbxallfirstparty", movie: "bbxmoviesfirstparty", music: "bbxmusic", musicVideo: "bbxmusicvideo", track: "bbxtrack", tv: "bbxtvfirstparty", video: "bbxvideofirstparty", webVideo: "bbxwebvideo"
            }, edsArray: function edsArray(array) {
                var result;
                if (Array.isArray(array))
                    result = array.join(".");
                else if (array)
                    result = [array];
                return result
            }, edsString: function edsString(string) {
                if (string)
                    string = string.replace(/\s+/g, '+');
                return string
            }, edsSearchString: function edsSearchString(string) {
                if (string)
                    string = string.replace(/\+/g, '%2B').replace(/\</g, '%3C');
                return string
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.edsMediaType", {
        appActivity: "AppActivity", avatarItem: "AvatarItem", gameActivity: "GameActivity", gameLayer: "GameLayer", metroGame: "MetroGame", metroGameConsumable: "MetroGameConsumable", metroGameContent: "MetroGameContent", mobileGame: "MobileGame", movie: "Movie", subscription: "Subscription", tvEpisode: "TVEpisode", tvSeason: "TVSeason", tvSeries: "TVSeries", tvShow: "TVShow", videoActivity: "VideoActivity", webGame: "WebGame", webVideo: "WebVideo", webVideoCollection: "WebVideoCollection", xbox360Game: "Xbox360Game", xbox360GameContent: "Xbox360GameContent", xbox360GameDemo: "Xbox360GameDemo", xboxApp: "XboxApp", xboxArcadeGame: "XboxArcadeGame", xboxBundle: "XboxBundle", xboxGameConsumable: "XboxGameConsumable", xboxGameTrailer: "XboxGameTrailer", xboxGameTrial: "XboxGameTrial", xboxGamerTile: "XboxGamerTile", xboxGameVideo: "XboxGameVideo", xboxMarketplace: "XboxMarketplace", xboxOriginalGame: "XboxOriginalGame", xboxTheme: "XboxTheme", xboxXnaCommunityGame: "XboxXnaCommunityGame", xboxMobilePDLC: "XboxMobilePDLC", xboxMobileConsumable: "XboxMobileConsumable"
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {
        edsMediaTypeToDatabaseMappings: (function() {
            var mapping = {};
            mapping[MS.Entertainment.Data.Query.edsMediaType.album] = Microsoft.Entertainment.Queries.ObjectType.album;
            mapping[MS.Entertainment.Data.Query.edsMediaType.avatarItem] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.appActivity] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.gameActivity] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.videoActivity] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.gameLayer] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.metroGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameConsumable] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameContent] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.mobileGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.movie] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.musicArtist] = Microsoft.Entertainment.Queries.ObjectType.person;
            mapping[MS.Entertainment.Data.Query.edsMediaType.musicVideo] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.track] = Microsoft.Entertainment.Queries.ObjectType.track;
            mapping[MS.Entertainment.Data.Query.edsMediaType.tvEpisode] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeason] = Microsoft.Entertainment.Queries.ObjectType.tvSeason;
            mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeries] = Microsoft.Entertainment.Queries.ObjectType.tvSeries;
            mapping[MS.Entertainment.Data.Query.edsMediaType.tvShow] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.webGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.webVideo] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.webVideoCollection] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360Game] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameContent] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxApp] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxBundle] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameConsumable] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameTrailer] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameTrial] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGamerTile] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameVideo] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxMarketplace] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxOriginalGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxTheme] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxMobilePDLC] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxMobileConsumable] = null;
            return mapping
        })(), edsMediaTypeIntegerToStringMappings: {
                1: MS.Entertainment.Data.Query.edsMediaType.xbox360Game, 5: MS.Entertainment.Data.Query.edsMediaType.xboxGameTrial, 18: MS.Entertainment.Data.Query.edsMediaType.xbox360GameContent, 19: MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo, 20: MS.Entertainment.Data.Query.edsMediaType.xboxTheme, 21: MS.Entertainment.Data.Query.edsMediaType.xboxOriginalGame, 22: MS.Entertainment.Data.Query.edsMediaType.xboxGamerTile, 23: MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame, 30: MS.Entertainment.Data.Query.edsMediaType.xboxGameVideo, 37: MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame, 47: MS.Entertainment.Data.Query.edsMediaType.avatarItem, 61: MS.Entertainment.Data.Query.edsMediaType.xboxApp, 62: MS.Entertainment.Data.Query.edsMediaType.metroGame, 63: MS.Entertainment.Data.Query.edsMediaType.metroGameContent, 64: MS.Entertainment.Data.Query.edsMediaType.metroGameConsumable, 66: MS.Entertainment.Data.Query.edsMediaType.gameActivity, 67: MS.Entertainment.Data.Query.edsMediaType.appActivity, 901: MS.Entertainment.Data.Query.edsMediaType.videoActivity, 1000: MS.Entertainment.Data.Query.edsMediaType.movie, 1002: MS.Entertainment.Data.Query.edsMediaType.tvShow, 1003: MS.Entertainment.Data.Query.edsMediaType.tvEpisode, 1004: MS.Entertainment.Data.Query.edsMediaType.tvSeries, 1005: MS.Entertainment.Data.Query.edsMediaType.tvSeason, 1006: MS.Entertainment.Data.Query.edsMediaType.album, 1007: MS.Entertainment.Data.Query.edsMediaType.track, 1008: MS.Entertainment.Data.Query.edsMediaType.musicVideo, 1009: MS.Entertainment.Data.Query.edsMediaType.musicArtist
            }, edsMediaTypeToVideoTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.movie] = Microsoft.Entertainment.Queries.VideoType.movie;
                mapping[MS.Entertainment.Data.Query.edsMediaType.musicVideo] = Microsoft.Entertainment.Queries.VideoType.musicVideo;
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvEpisode] = Microsoft.Entertainment.Queries.VideoType.tvEpisode;
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvShow] = Microsoft.Entertainment.Queries.VideoType.other;
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeries] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeason] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.webVideo] = Microsoft.Entertainment.Queries.VideoType.other;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameTrailer] = Microsoft.Entertainment.Queries.VideoType.other;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameVideo] = Microsoft.Entertainment.Queries.VideoType.other;
                return mapping
            })(), edsMediaTypeToGameTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.avatarItem] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGame] = Microsoft.Entertainment.Queries.GameType.windows;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameConsumable] = Microsoft.Entertainment.Queries.GameType.windows;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameContent] = Microsoft.Entertainment.Queries.GameType.windows;
                mapping[MS.Entertainment.Data.Query.edsMediaType.mobileGame] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.webGame] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxApp] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGamerTile] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameTrial] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameVideo] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxOriginalGame] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360Game] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameContent] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxTheme] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame] = Microsoft.Entertainment.Queries.GameType.console;
                return mapping
            })(), edsMediaTypeToGameTitleTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.avatarItem] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGame] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameConsumable] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameContent] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.mobileGame] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.webGame] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxApp] = Microsoft.Entertainment.Queries.GameTitleType.application;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame] = Microsoft.Entertainment.Queries.GameTitleType.arcade;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGamerTile] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameTrial] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameVideo] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxOriginalGame] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360Game] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameContent] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo] = Microsoft.Entertainment.Queries.GameTitleType.demo;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxTheme] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame] = null;
                return mapping
            })(), edsMediaTypeToPersonTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.musicArtist] = Microsoft.Entertainment.Queries.PersonType.artist;
                return mapping
            })(), edsMediaTypeToZuneHcrTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.album] = "Album";
                mapping[MS.Entertainment.Data.Query.edsMediaType.movie] = "Movie";
                mapping[MS.Entertainment.Data.Query.edsMediaType.musicArtist] = "Artist";
                mapping[MS.Entertainment.Data.Query.edsMediaType.track] = "Track";
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeries] = "Series";
                return mapping
            })(), edsMediaTypeToContentTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.album] = "Album";
                mapping[MS.Entertainment.Data.Query.edsMediaType.movie] = "Movie";
                mapping[MS.Entertainment.Data.Query.edsMediaType.musicArtist] = "Artist";
                mapping[MS.Entertainment.Data.Query.edsMediaType.musicVideo] = "MusicVideo";
                mapping[MS.Entertainment.Data.Query.edsMediaType.track] = "Track";
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvEpisode] = "Episode";
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeason] = "Season";
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeries] = "Series";
                return mapping
            })(), edsMediaTypeToGamePlatformTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGame] = MSE.Data.Augmenter.GamePlatform.Modern;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360Game] = MSE.Data.Augmenter.GamePlatform.Xbox;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame] = MSE.Data.Augmenter.GamePlatform.Xbox;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxOriginalGame] = MSE.Data.Augmenter.GamePlatform.Xbox;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame] = MSE.Data.Augmenter.GamePlatform.Xbox;
                return mapping
            })(), edsMediaTypeToPurchaseHelperTypeMappings: (function() {
                var mapping = {};
                return mapping
            })(), edsSortOrderToLegacySortOrder: (function() {
                var mapping = {};
                var marketplaceOrderBy = WinJS.Utilities.getMember("MS.Entertainment.Data.Query.marketplaceOrderBy") || {};
                mapping[MS.Entertainment.Data.Query.edsSortOrder.allTimePurchaseCount] = marketplaceOrderBy.salesRank;
                mapping[MS.Entertainment.Data.Query.edsSortOrder.mostPopular] = marketplaceOrderBy.playRank;
                mapping[MS.Entertainment.Data.Query.edsSortOrder.releaseDate] = marketplaceOrderBy.releaseDate;
                mapping[MS.Entertainment.Data.Query.edsSortOrder.sevenDaysRentalCount] = marketplaceOrderBy.rentalRank;
                mapping[MS.Entertainment.Data.Query.edsSortOrder.sevenDaysPurchaseCount] = marketplaceOrderBy.downloadRank;
                return mapping
            })(), convertToLegacySortIfNeeded: function convertToLegacySortIfNeeded(edsSort) {
                return edsSort
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {edsMediaTypeToGameTypeGameTitleTypeMappings: (function() {
            var mapping = {};
            var edsMediaTypeToGameTypeMappings = MS.Entertainment.Data.Query.edsMediaTypeToGameTypeMappings;
            var edsMediaTypeToGameTitleTypeMappings = MS.Entertainment.Data.Query.edsMediaTypeToGameTitleTypeMappings;
            mapping[MS.Entertainment.Data.Query.edsMediaType.metroGame] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.metroGame], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.metroGame]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.mobileGame] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.mobileGame], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.mobileGame]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.webGame] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.webGame], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.webGame]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxApp] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxApp], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxApp]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360Game] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xbox360Game], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xbox360Game]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame]];
            return mapping
        })()});
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {databaseMediaTypeToSubTypeMappingMappings: (function() {
            var mapping = {};
            mapping[Microsoft.Entertainment.Queries.ObjectType.album] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.game] = MS.Entertainment.Data.Query.edsMediaTypeToGameTypeGameTitleTypeMappings;
            mapping[Microsoft.Entertainment.Queries.ObjectType.person] = MS.Entertainment.Data.Query.edsMediaTypeToPersonTypeMappings;
            mapping[Microsoft.Entertainment.Queries.ObjectType.playlist] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.smartDJ] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.track] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.tvSeason] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.tvSeries] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.video] = MS.Entertainment.Data.Query.edsMediaTypeToVideoTypeMappings;
            return mapping
        })()});
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {edsRequestFields: {basic: [MS.Entertainment.Data.Query.edsFields.id, MS.Entertainment.Data.Query.edsFields.mediaGroup, MS.Entertainment.Data.Query.edsFields.mediaItemType, MS.Entertainment.Data.Query.edsFields.name, ]}});
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {EDSDeviceQuery: MSE.derive(MSE.Data.EDSWrapperQuery, null, {createTargetDeviceType: function createTargetDeviceType() {
                return MS.Entertainment.Utilities.defaultEdsTargetDeviceTypeFromApp
            }})});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {
        CrossMediaSearch: MS.Entertainment.deferredDerive(MS.Entertainment.Data.Query.EDSDeviceQuery, null, {
            search: null, keyword: null, groupTypes: null, chunkSize: 1, enabledImpressionGuid: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSSearchResult, forceSecureEndpoint: true, includeContentRestrictionHeader: true, createResourceURI: function() {
                    return this.getResourceEndpoint(MS.Entertainment.Data.Query.edsEndpointType.crossMediaGroupSearch)
                }, createParameters: function createParameters() {
                    return {
                            q: MS.Entertainment.Data.Query.edsSearchString(this.search || this.keyword), desiredMediaItemTypes: MS.Entertainment.Data.Query.edsArray(this.groupTypes), firstPartyOnly: true
                        }
                }
        }), AutoSuggest: MS.Entertainment.deferredDerive(MS.Entertainment.Data.ServiceWrapperQuery, null, {
                search: null, keyword: null, mediaType: MS.Entertainment.Data.Query.bbxMediaType.firstParty, serviceType: MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.BBXAutoSuggestResult, getResourceEndpointID: function getResourceEndpointID() {
                        return MS.Entertainment.Endpoint.id.seid_BingAutoSuggest
                    }, createResourceURI: function() {
                        return this.getResourceEndpoint()
                    }, createParameters: function createParameters() {
                        if (!MS.Entertainment.Data.Query.AutoSuggest.cachedMarket) {
                            var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            MS.Entertainment.Data.Query.AutoSuggest.cachedMarket = configurationManager.marketplace.marketplaceCulture
                        }
                        return {
                                FORM: "XBOXQ5", q: this.search || this.keyword, ds: this.mediaType
                            }
                    }
            }, {cachedMarket: null}), edsWrapperQuery: MSE.derive(MSE.Data.ServiceWrapperQuery, null, {getResourceEndpointID: function getResourceEndpointID() {
                    return MS.Entertainment.Endpoint.id.seid_EDSSearch
                }}, {
                itemsPluralizer: "Items/Item", genresPluralizer: "Genres/Genre", providersPluralizer: "Providers/Provider", partnerApplicationLaunchInfosPluralizer: "PartnerApplicationLaunchInfos/PartnerApplicationLaunchInfo", providerContentsPluralizer: "ProviderContents/ProviderContent", searchTermsPluralizer: "SearchTerms/SearchTerm"
            })
    });
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {videoDetailsFromTitleIdAssetId: MSE.derive(MSE.Data.Query.edsWrapperQuery, null, {
            assetId: "", titleId: "", createResourceURI: function() {
                    return this.getResourceEndpoint() + "/titles/" + this.titleId + "/content"
                }, createParameters: function createParameters() {
                    return {
                            version: VER_SERVICEVERSION_STR_EDS, clientType: VER_CLIENTTYPE_STR_EDS, clientContext: "video", contentId: this.assetId
                        }
                }, pluralizers: [MSE.Data.Query.edsWrapperQuery.genresPluralizer, MSE.Data.Query.edsWrapperQuery.providersPluralizer, MSE.Data.Query.edsWrapperQuery.partnerApplicationLaunchInfosPluralizer], resultAugmentation: MSE.Data.Augmenter.Marketplace.VideoResultEDS
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {ESListServiceWrapperQuery: WinJS.Class.derive(MSE.Data.EDSWrapperQuery, function ESListService() {
            MS.Entertainment.Data.EDSWrapperQuery.prototype.constructor.call(this);
            this.shouldAuthenticate = true
        }, {
            getAuthenticatedResourceEndpointID: function getAuthenticationResourceEndpointID() {
                return MS.Entertainment.Endpoint.id.seid_ESListService
            }, getResourceEndpointID: function getResourceEndpointID() {
                    return MS.Entertainment.Endpoint.id.seid_ESListService
                }
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {GenericDetails: MS.Entertainment.deferredDerive(MS.Entertainment.Data.EDSWrapperQuery, null, {
            id: null, idType: null, serviceId: null, chunkSize: 0, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSGenericResult, requestFields: MS.Entertainment.Data.Query.edsRequestFields.basic, createResourceURI: function() {
                    return this.getResourceEndpoint(MS.Entertainment.Data.Query.edsEndpointType.details)
                }, createParameters: function createParameters() {
                    return {
                            ids: this.id || this.serviceId, idType: (this.idType !== MS.Entertainment.Data.Query.edsIdType.canonical) ? this.idType : null, mediaGroup: MS.Entertainment.Data.Query.edsMediaGroup.unknown, firstPartyOnly: true
                        }
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Shared", {
        PinnedList: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function PinnedList() {
                    this.base()
                }, {
                    clearResultOnFailure: true, useCache: true, useIfMatchCache: true, chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSPinnedListResults, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, forceSecureEndpoint: true, hasTotalCount: true, xuid: String.empty, createResourceURI: function() {
                            var suffix = MS.Entertainment.Data.Query.Shared.PinnedList.defaultSuffix.format(this.xuid);
                            return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                        }, createEDSHeaders: function createEDSHeaders() {
                            return {
                                    "Content-Type": "application/json", Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion
                                }
                        }, getResponseVersion: function getResponseVersion(result) {
                            return result.listVersion
                        }
                }, {defaultSuffix: "users/xuid({0})/lists/PINS/XBLPins"})
        }), PinnedListAdd: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function pinnedListAdd(mediaItem, listVersion) {
                        this.base();
                        var provider = MS.Entertainment.Utilities.titleId;
                        if (mediaItem) {
                            var edsMediaItem;
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            var locale = signedInUser.locale;
                            switch (mediaItem.mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.musicPlaylist, ItemId: null, ProviderId: mediaItem.cloudSyncItemId || mediaItem.serviceId, Provider: provider, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    if (mediaItem.tracks)
                                        this.getImagePromise = function getImagePromise() {
                                            return MS.Entertainment.Data.List.listToArray(mediaItem.tracks, 0, 1).then(function getTrackImage(items) {
                                                    if (items && items[0]) {
                                                        var url = MS.Entertainment.UI.Shell.ImageLoader.getNewImageServiceUri(items[0], MS.Entertainment.Utilities.playlistPinImageSize.width, MS.Entertainment.Utilities.playlistPinImageSize.height);
                                                        if (url) {
                                                            edsMediaItem.ImageUrl = url;
                                                            this._updatePostData(edsMediaItem)
                                                        }
                                                    }
                                                }.bind(this), function onError(error) {
                                                    return WinJS.Promise.wrapError("pinnedListAdd getImageUri failed: " + error && error.message)
                                                })
                                        }.bind(this);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.album, ItemId: null, ProviderId: mediaItem.canonicalId, Provider: provider, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.musicArtist, ItemId: null, ProviderId: mediaItem.canonicalId, Provider: provider, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.video:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.movie, ItemId: null, ProviderId: mediaItem.canonicalId, Provider: provider, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.tvSeries, ItemId: null, ProviderId: mediaItem.canonicalId, Provider: provider, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                default:
                                    MS.Entertainment.ViewModels.fail("Object type " + mediaItem.mediaType + " is not pinnable");
                                    break
                            }
                            this._listVersion = listVersion;
                            this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post;
                            this._updatePostData(edsMediaItem)
                        }
                    }, {
                        chunkSize: 0, useCache: false, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, getImagePromise: null, createResourceURI: function() {
                                var suffix;
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                var suffix = MS.Entertainment.Data.Query.Shared.PinnedList.defaultSuffix.format(signedInUser.xuid);
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createEDSHeaders: function createEDSHeaders() {
                                return {
                                        Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion, "if-match": this._listVersion
                                    }
                            }, execute: function execute() {
                                if (this.getImagePromise)
                                    return this.getImagePromise().then(function onImageAquired() {
                                            return MS.Entertainment.Data.Query.ESListServiceWrapperQuery.prototype.execute.apply(this, arguments)
                                        }.bind(this), function onImageError() {
                                            return MS.Entertainment.Data.Query.ESListServiceWrapperQuery.prototype.execute.apply(this, arguments)
                                        }.bind(this));
                                else
                                    return MS.Entertainment.Data.Query.ESListServiceWrapperQuery.prototype.execute.apply(this, arguments)
                            }, _updatePostData: function _updatePostData(edsMediaItem) {
                                var data = {Items: [edsMediaItem]};
                                this.postData = {
                                    contentType: "application/json", data: JSON.stringify(data)
                                }
                            }
                    }, {contentType: "application/json"})
            }), PinnedListDelete: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function pinnedListDelete(listIndex, listVersion) {
                        this.base();
                        this._indices = listIndex;
                        this._listVersion = listVersion;
                        this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.deleteRequest
                    }, {
                        chunkSize: 0, useCache: false, _indices: String.empty, _listVersion: 0, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, createResourceURI: function() {
                                var suffix;
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                var suffix = MS.Entertainment.Data.Query.Shared.PinnedList.defaultSuffix.format(signedInUser.xuid);
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createEDSHeaders: function createEDSHeaders() {
                                return {
                                        Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion, "if-match": this._listVersion
                                    }
                            }, createParameters: function createParameters() {
                                return {indexes: this._indices}
                            }
                    })
            })
    })
})()
})();
/* >>>>>>/framework/data/queries/videoqueries.js:6647 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    var edsArray = MS.Entertainment.Data.Query.edsArray;
    var edsEndpointType = MS.Entertainment.Data.Query.edsEndpointType;
    var edsFields = MS.Entertainment.Data.Query.edsFields;
    var edsIdType = MS.Entertainment.Data.Query.edsIdType;
    var edsMediaGroup = MS.Entertainment.Data.Query.edsMediaGroup;
    var edsMediaType = MS.Entertainment.Data.Query.edsMediaType;
    var edsQueryRefiner = MS.Entertainment.Data.Query.edsQueryRefiner;
    var edsSortOrder = MS.Entertainment.Data.Query.edsSortOrder;
    var edsString = MS.Entertainment.Data.Query.edsString;
    var edsSearchString = MS.Entertainment.Data.Query.edsSearchString;
    var SEARCH_CHUNK_SIZE = 40;
    var VIDEO_SEARCH_CHUNK_SIZE = 25;
    var BROWSE_CHUNK_SIZE = 25;
    var RELATED_CHUNK_SIZE = 0;
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Video", {requestFields: {
            videoDetails: [edsFields.allTimeAverageRating, edsFields.allTimeRatingCount, edsFields.contributors, edsFields.description, edsFields.duration, edsFields.genres, edsFields.hasActivities, edsFields.id, edsFields.images, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.parentalRating, edsFields.parentalRatings, edsFields.previewUrl, edsFields.providers, edsFields.releaseDate, edsFields.reviewSources, edsFields.seasonCount, edsFields.studio, edsFields.studios, edsFields.vuiDisplayName, edsFields.zuneId, edsFields.zuneSeasonCount], videoSearch: [edsFields.allTimeAverageRating, edsFields.id, edsFields.images, edsFields.mediaItemType, edsFields.releaseDate, edsFields.seasonCount, edsFields.vuiDisplayName, edsFields.zuneId, edsFields.zuneSeasonCount], tvSeriesBrowse: [edsFields.allTimeAverageRating, edsFields.allTimeRatingCount, edsFields.genres, edsFields.hasActivities, edsFields.id, edsFields.images, edsFields.latestEpisode, edsFields.latestSeason, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.network, edsFields.networks, edsFields.parentalRating, edsFields.parentalRatings, edsFields.releaseDate, edsFields.seasonCount, edsFields.vuiDisplayName, edsFields.zuneId, edsFields.zuneSeasonCount], tvSeriesDetails: [edsFields.allTimeAverageRating, edsFields.allTimeRatingCount, edsFields.description, edsFields.genres, edsFields.hasActivities, edsFields.id, edsFields.images, edsFields.latestEpisode, edsFields.latestSeason, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.network, edsFields.networks, edsFields.parentalRating, edsFields.parentalRatings, edsFields.releaseDate, edsFields.reviewSources, edsFields.seasonCount, edsFields.vuiDisplayName, edsFields.zuneId, edsFields.zuneSeasonCount], tvSeasonBrowse: [edsFields.allTimeAverageRating, edsFields.allTimeRatingCount, edsFields.episodeCount, edsFields.genres, edsFields.hasActivities, edsFields.id, edsFields.images, edsFields.isSeasonComplete, edsFields.latestEpisode, edsFields.latestSeason, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.network, edsFields.networks, edsFields.parentalRating, edsFields.parentalRatings, edsFields.parentSeries, edsFields.providers, edsFields.releaseDate, edsFields.reviewSources, edsFields.seasonNumber, edsFields.vuiDisplayName, edsFields.zuneId, ], tvSeasonDetails: [edsFields.allTimeAverageRating, edsFields.allTimeRatingCount, edsFields.description, edsFields.episodeCount, edsFields.genres, edsFields.hasActivities, edsFields.id, edsFields.images, edsFields.isSeasonComplete, edsFields.latestEpisode, edsFields.latestSeason, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.network, edsFields.networks, edsFields.parentalRating, edsFields.parentalRatings, edsFields.parentSeries, edsFields.providers, edsFields.releaseDate, edsFields.reviewSources, edsFields.seasonNumber, edsFields.vuiDisplayName, edsFields.zuneId, ], tvEpisodeBrowse: [edsFields.allTimeAverageRating, edsFields.allTimeRatingCount, edsFields.description, edsFields.duration, edsFields.episodeNumber, edsFields.genres, edsFields.hasActivities, edsFields.id, edsFields.images, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.network, edsFields.networks, edsFields.parentalRating, edsFields.parentalRatings, edsFields.parentSeason, edsFields.parentSeries, edsFields.releaseDate, edsFields.seasonNumber, edsFields.vuiDisplayName, edsFields.zuneId, ], tvEpisodeDetails: [edsFields.allTimeAverageRating, edsFields.allTimeRatingCount, edsFields.contributors, edsFields.description, edsFields.duration, edsFields.episodeNumber, edsFields.genres, edsFields.hasActivities, edsFields.id, edsFields.images, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.network, edsFields.networks, edsFields.parentalRating, edsFields.parentalRatings, edsFields.parentalRatingReasons, edsFields.parentSeason, edsFields.parentSeries, edsFields.providers, edsFields.releaseDate, edsFields.seasonNumber, edsFields.vuiDisplayName, edsFields.zuneId, ], movieDetails: [edsFields.allTimeAverageRating, edsFields.allTimeRatingCount, edsFields.contributors, edsFields.description, edsFields.duration, edsFields.genres, edsFields.hasActivities, edsFields.id, edsFields.images, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.parentalRating, edsFields.parentalRatings, edsFields.previewUrl, edsFields.providers, edsFields.releaseDate, edsFields.reviewSources, edsFields.studio, edsFields.studios, edsFields.vuiDisplayName, edsFields.zuneId, ], moviesBrowse: [edsFields.allTimeAverageRating, edsFields.allTimeRatingCount, edsFields.duration, edsFields.genres, edsFields.hasActivities, edsFields.id, edsFields.images, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.parentalRating, edsFields.parentalRatings, edsFields.previewUrl, edsFields.providers, edsFields.releaseDate, edsFields.reviewSources, edsFields.studio, edsFields.studios, edsFields.vuiDisplayName, edsFields.zuneId, ], moviesSimpleBrowse: [edsFields.id, edsFields.images, edsFields.name, edsFields.releaseDate, edsFields.zuneId, edsFields.vuiDisplayName, edsFields.sevenDaysPlayCount, ], tvSeriesSimpleBrowse: [edsFields.id, edsFields.images, edsFields.name, edsFields.vuiDisplayName, edsFields.zuneId, edsFields.zuneSeasonCount, edsFields.sevenDaysPlayCount, ], cacheRequestFields: function cacheRequsetFields() {
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.videoDetails.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.videoSearch.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.tvSeriesBrowse.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.tvSeriesDetails.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.tvSeasonBrowse.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.tvSeasonDetails.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.tvEpisodeBrowse.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.tvEpisodeDetails.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.movieDetails.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.moviesBrowse.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.moviesSimpleBrowse.join("."));
                    MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(MS.Entertainment.Data.Query.Video.requestFields.tvSeriesSimpleBrowse.join("."))
                }
        }});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryMovieTVSeries: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return WinJS.Class.derive(MS.Entertainment.Data.AggregateQuery, function libraryMovieTVSeries() {
                    MS.Entertainment.Data.AggregateQuery.prototype.constructor.apply(this, arguments);
                    this.resultAugmentationFactory = {create: this._createResultAugmentation.bind(this)};
                    this.queries.length = 2;
                    this.queries[0] = new MS.Entertainment.Data.Query.libraryVideoMovies;
                    this.queries[1] = new MS.Entertainment.Data.Query.libraryTVSeries;
                    this._selectMovie = false
                }, {
                    _selectMovie: false, baseResultAugmentation: MS.Entertainment.Data.Augmenter.Library.MergedVideoTVSeasonResult, keyword: {
                            get: function() {
                                return this.queries[0]
                            }, set: function(value) {
                                    this.queries[0].keyword = value;
                                    this.queries[1].keyword = value
                                }
                        }, _preInnerExecute: function _preInnerExecute() {
                            if (this.isLoadingFromStart)
                                this.selectMovie = false
                        }, _comparer: function _comparer(movieItem, tvItem) {
                            if (movieItem && tvItem) {
                                this.selectMovie = !this.selectMovie;
                                return this.selectMovie ? -1 : 1
                            }
                            else if (movieItem)
                                return -1;
                            else if (tvItem)
                                return 1
                        }, _merger: function _merger(movieItem, tvItem) {
                            if (movieItem)
                                return movieItem;
                            else
                                return tvItem
                        }, _createResultAugmentation: function _createResultAugmentation() {
                            var augment = MS.Entertainment.Data.Property.augment;
                            var unionNoDeflate = MS.Entertainment.Data.Property.unionNoDeflate;
                            return MS.Entertainment.Data.derive(this.baseResultAugmentation, null, {items: unionNoDeflate("movieItems", "tvSeriesItems", this._comparer.bind(this), this._merger.bind(this), null)})
                        }
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryMovieTVSeriesOther: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return WinJS.Class.derive(MS.Entertainment.Data.AggregateQuery, function libraryMovieTVSeriesOther() {
                    MS.Entertainment.Data.AggregateQuery.prototype.constructor.apply(this, arguments);
                    this.resultAugmentationFactory = {create: this._createResultAugmentation.bind(this)};
                    this.queries.length = 3;
                    this.queries[0] = new MS.Entertainment.Data.Query.libraryVideoOther;
                    this.queries[1] = new MS.Entertainment.Data.Query.libraryVideoMovies;
                    this.queries[2] = new MS.Entertainment.Data.Query.libraryTVSeries;
                    this._selectMovie = false
                }, {
                    baseResultAugmentation: MS.Entertainment.Data.Augmenter.Library.MergedVideoTVSeasonOtherResult, keyword: {
                            get: function() {
                                return this.queries[0]
                            }, set: function(value) {
                                    this.queries[0].keyword = value;
                                    this.queries[1].keyword = value;
                                    this.queries[2].keyword = value
                                }
                        }, _comparerMovieAndTv: function _comparerMovieAndTv(movieItem, tvItem) {
                            if (movieItem && tvItem) {
                                this.selectMovie = !this.selectMovie;
                                return this.selectMovie ? -1 : 1
                            }
                            else if (movieItem)
                                return -1;
                            else if (tvItem)
                                return 1
                        }, _comparerOtherAndMovieTv: function _comparerOtherAndMovieTv(otherItem, movieTvItem) {
                            if (otherItem)
                                return -1;
                            else
                                return 1
                        }, _merger: function _merger(itemOne, itemTwo) {
                            if (itemOne)
                                return itemOne;
                            else
                                return itemTwo
                        }, _createResultAugmentation: function _createResultAugmentation() {
                            var augment = MS.Entertainment.Data.Property.augment;
                            var unionNoDeflate = MS.Entertainment.Data.Property.unionNoDeflate;
                            return MS.Entertainment.Data.derive(this.baseResultAugmentation, null, {
                                    movieTvItems: unionNoDeflate("movieItems", "tvSeriesItems", this._comparerMovieAndTv.bind(this), this._merger.bind(this), null), items: unionNoDeflate("otherItems", "movieTvItems.source", this._comparerOtherAndMovieTv.bind(this), this._merger.bind(this), null)
                                })
                        }
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryMovieGenres: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.libraryGenres, null, {
                    mediaType: Microsoft.Entertainment.Queries.GenresQueryMediaType.video, videoType: Microsoft.Entertainment.Queries.VideoType.movie
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryVideoStudios: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.LibraryQueryBase, null, {
                    createInnerQuery: function createInnerQuery() {
                        return new Microsoft.Entertainment.Queries.VideoStudiosQuery
                    }, resultAugmentation: MSE.Data.Augmenter.Library.StudiosResult, aggregateChunks: true
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryTVSeasons: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.LibraryQueryBase, null, {
                    tvSeriesId: -1, tvSeasonId: -1, sort: Microsoft.Entertainment.Queries.TVSeasonsSortBy.none, createInnerQuery: function createInnerQuery() {
                            var query = new Microsoft.Entertainment.Queries.TVSeasonsQuery;
                            var seriesId = parseInt(this.tvSeriesId);
                            var seasonId = parseInt(this.tvSeasonId);
                            if (seriesId !== -1)
                                query.tvSeriesId = seriesId;
                            if (seasonId !== -1)
                                query.tvSeasonId = seasonId;
                            query.primarySortBy = this.sort;
                            return query
                        }, resultAugmentation: MSE.Data.Augmenter.Library.TVSeasonsResult, aggregateChunks: true
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryWatchlists: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.LibraryQueryBase, null, {
                    sort: Microsoft.Entertainment.Queries.WatchlistsSortBy.none, keyword: null, watchlistId: -1, isDefaultWatchlist: null, autoUpdateProperties: null, mediaAvailability: null, title: null, createInnerQuery: function createInnerQuery() {
                            var query = new Microsoft.Entertainment.Queries.WatchlistsQuery;
                            var id = parseInt(this.watchlistId);
                            if (id >= 0)
                                query.watchlistId = this.watchlistId;
                            if (this.sort && this.sort !== Microsoft.Entertainment.Queries.WatchlistsSortBy.none)
                                query.primarySortBy = this.sort;
                            if (this.isDefaultWatchlist !== null && this.isDefaultWatchlist !== undefined)
                                query.isDefaultWatchlist = this.isDefaultWatchlist;
                            if (this.keyword)
                                query.keyword = this.keyword;
                            if (this.title)
                                query.title = this.title;
                            return query
                        }, resultAugmentation: MSE.Data.Augmenter.Library.WatchlistsResult, aggregateChunks: true
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {libraryWatchlistMediaItems: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.LibraryQueryBase, null, {
                    watchlistId: -1, sort: Microsoft.Entertainment.Queries.WatchlistItemsSortBy.dateCreatedDescending, mediaItemObjectType: null, createInnerQuery: function createInnerQuery() {
                            var query = new Microsoft.Entertainment.Queries.WatchlistItemsQuery;
                            var id = parseInt(this.watchlistId);
                            if (id !== -1)
                                query.watchlistId = id;
                            if (this.sort)
                                query.primarySortBy = this.sort;
                            if (this.mediaItemObjectType)
                                query.mediaItemObjectType = this.mediaItemObjectType;
                            return query
                        }, resultAugmentation: MSE.Data.Augmenter.Library.WatchlistVideosResult, aggregateChunks: true
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {browseTVFromLastNight: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.marketplaceWrapperQuery, null, {
                    createHeaders: function createHeaders() {
                        return MS.Entertainment.Data.Query.createEditorialHeaders()
                    }, _getHubQueryNameForLastNight: function _getHubQueryNameForLastNight() {
                            var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            var dayOfWeek = [];
                            dayOfWeek.push(config.video.lastNightOnTVSunday);
                            dayOfWeek.push(config.video.lastNightOnTVMonday);
                            dayOfWeek.push(config.video.lastNightOnTVTuesday);
                            dayOfWeek.push(config.video.lastNightOnTVWednesday);
                            dayOfWeek.push(config.video.lastNightOnTVThursday);
                            dayOfWeek.push(config.video.lastNightOnTVFriday);
                            dayOfWeek.push(config.video.lastNightOnTVSaturday);
                            var yesterday = new Date;
                            yesterday.setDate(yesterday.getDate() - 1);
                            return dayOfWeek[yesterday.getDay()]
                        }, getResourceEndpointID: function getResourceEndpointID() {
                            return MS.Entertainment.Endpoint.id.seid_MediaDiscovery
                        }, createResourceURI: function createResourceURI() {
                            var hubUrl = this._getHubQueryNameForLastNight();
                            var serviceConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service;
                            var uri = MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), serviceConfig.videoAppTvOnLastNightHubSuffix.format(hubUrl));
                            return uri
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.channelPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotGroupPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotPluralizer], resultAugmentation: MSE.Data.Augmenter.Video.TvHubLastNightsContent, aggregateChunks: false
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {
        LibraryFolders: MSE.deferredDerive(MS.Entertainment.Data.Query.LibraryQueryBase, null, {
            parentFolderId: -1, folderId: -1, sort: Microsoft.Entertainment.Queries.FoldersSortBy.none, videoType: Microsoft.Entertainment.Queries.VideoType.other, createInnerQuery: function createInnerQuery() {
                    var query = new Microsoft.Entertainment.Queries.FoldersQuery;
                    if (this.parentFolderId !== -1)
                        query.parentFolderId = this.parentFolderId;
                    if (this.folderId !== -1)
                        query.folderId = this.folderId;
                    query.videoType = this.videoType;
                    query.primarySortBy = this.sort;
                    return query
                }, resultAugmentation: MSE.Data.Augmenter.Library.FoldersResult
        }), LibraryVideoFolder: MSE.deferredDerive(MS.Entertainment.Data.Query.libraryVideos, null, {
                category: Microsoft.Entertainment.Queries.VideoType.other, resultAugmentation: MSE.Data.Augmenter.Library.FolderVideosResult
            }), LibraryFolderAndVideosQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentationWrapperQuery", function libraryFolderAndVideosQuery() {
                MS.Entertainment.Data.AugmentationWrapperQuery.prototype.constructor.call(this, new MS.Entertainment.Data.Query.LibraryVideoFolder);
                this.autoUpdateProperties = null;
                this.query.isLive = true;
                this.query.autoUpdateProperties = null;
                this.libraryFoldersQuery = new MS.Entertainment.Data.Query.LibraryFolders;
                this.libraryFoldersQuery.chunkSize = 10000;
                this.libraryFoldersQuery.sort = Microsoft.Entertainment.Queries.FoldersSortBy.titleAscending
            }, {
                _folderId: -1, libraryFoldersQuery: null, folderId: {
                        get: function() {
                            return this._folderId || -1
                        }, set: function(value) {
                                this._folderId = value;
                                this.libraryFoldersQuery.parentFolderId = this._folderId || -1;
                                this.query.folderId = this._folderId || -1
                            }
                    }, fileCount: {get: function() {
                            return this.query ? this.query.totalCount : 0
                        }}, folderCount: {get: function() {
                            return this.libraryFoldersQuery ? this.libraryFoldersQuery.totalCount : 0
                        }}, totalCount: {get: function() {
                            return this.fileCount + this.folderCount
                        }}, dispose: function dispose() {
                        MS.Entertainment.Data.AugmentationWrapperQuery.prototype.dispose.call(this);
                        if (this.libraryFoldersQuery) {
                            this.libraryFoldersQuery.dispose();
                            this.libraryFoldersQuery = null
                        }
                    }, execute: function execute(cookie) {
                        var isLoadingFromStart = cookie === null || cookie === undefined;
                        var foldersPromise;
                        if (this.libraryFoldersQuery && isLoadingFromStart)
                            foldersPromise = this.libraryFoldersQuery.execute();
                        return WinJS.Promise.as(foldersPromise).then(function getFolderQueryResult() {
                                return MS.Entertainment.Data.AugmentationWrapperQuery.prototype.execute.call(this, cookie)
                            }.bind(this)).then(function reorderQueryResults(result) {
                                if (isLoadingFromStart && WinJS.Utilities.getMember("libraryFoldersQuery.result.itemsArray.length", this) && WinJS.Utilities.getMember("result.items", this))
                                    this.result.items.insertRangeAtStart(this.libraryFoldersQuery.result.itemsArray);
                                return this
                            }.bind(this))
                    }, _notifyProxy: function _notifyProxy(name, value, oldValue) {
                        if (name === "totalCount") {
                            value = value + this.folderCount;
                            oldValue = oldValue + this.folderCount
                        }
                        MS.Entertainment.Data.AugmentationWrapperQuery.prototype._notifyProxy.call(this, name, value, oldValue)
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Video", {
        FilterSpotlightRestrictedContentWrapperQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentationWrapperQuery", function FilterSpotlightRestrictedContentWrapperQuery(query) {
            MSE.Data.AugmentationWrapperQuery.prototype.constructor.call(this, query)
        }, {
            editorialIndex: -1, execute: function execute(cookie) {
                    var executePromise;
                    if (this.query)
                        executePromise = this.query.execute(cookie);
                    else
                        executePromise = WinJS.Promise.wrapError(new Error("Invalid state for executing. The query property was not set to a valid value."));
                    return executePromise.then(function filterRestrictedContent(query) {
                            var resultPromise = WinJS.Promise.as(query);
                            var contentRestrictionService = null;
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.contentRestrictionService))
                                contentRestrictionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionService);
                            if (contentRestrictionService) {
                                var mediaItemsToFilter = [];
                                var items;
                                if (query.result.entriesArray) {
                                    Trace.assert(this.editorialIndex > -1, "An editorial index must be specified for editorial feeds");
                                    items = WinJS.Utilities.getMember("result.entriesArray." + this.editorialIndex + ".editorialItems", query) || [];
                                    items.forEach(function(arrayItem) {
                                        mediaItemsToFilter.push(arrayItem.editorialItem)
                                    })
                                }
                                else {
                                    items = query.result.itemsArray || [];
                                    items.forEach(function(currentItem) {
                                        currentItem = WinJS.Utilities.getMember("items.0", currentItem);
                                        if (currentItem)
                                            mediaItemsToFilter.push(currentItem)
                                    })
                                }
                                resultPromise = contentRestrictionService.getBrowsePolicyUpdatePromise().then(function gotBrowsePolicy() {
                                    return contentRestrictionService.filterRestrictedMediaItems(mediaItemsToFilter)
                                })
                            }
                            return resultPromise.then(function filteringComplete(filteredResults) {
                                    if (filteredResults.result && filteredResults.result.entriesArray)
                                        return filteredResults.result;
                                    else {
                                        var returnItems = filteredResults || [];
                                        return {
                                                entries: new MS.Entertainment.Data.VirtualList(returnItems), entriesArray: returnItems
                                            }
                                    }
                                })
                        }.bind(this))
                }, getItemsArray: function getItemsArray() {
                    return this.execute().then(function executeCompleted(result) {
                            return result.entriesArray
                        })
                }
        }, {
            newReleasesIndex: 0, featuredIndex: 1
        }), CachedVideoQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.WrapperQuery", function CachedVideoQuery(cachedQueryId) {
                Trace.assert(!isNaN(cachedQueryId), "invalid query id passed in");
                this.cachedQueryId = cachedQueryId;
                MS.Entertainment.Data.WrapperQuery.prototype.constructor.call(this)
            }, {
                cachedQueryId: null, execute: function execute() {
                        var videoQueryCacheService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.videoQueryCacheService);
                        return videoQueryCacheService.getQueryPromise(this.cachedQueryId)
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Video", {
        CachedMediaDiscoveryVideoFeaturedSets: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.CachedVideoQuery", function CachedMediaDiscoveryVideoFeaturedSets() {
            MS.Entertainment.Data.Query.Video.CachedVideoQuery.prototype.constructor.call(this, MS.Entertainment.Video.VideoQueryCacheId.editorialSets)
        }), FilteredMovieSpotlightVideoContentQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery", function FilteredMovieSpotlightVideoContentQuery() {
                var query = new MS.Entertainment.Data.Query.Video.CachedVideoQuery(MS.Entertainment.Video.VideoQueryCacheId.editorialSpotlight);
                query.queryId = MS.Entertainment.UI.Monikers.movieSpotlight;
                MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.prototype.constructor.call(this, query)
            }), FilteredTvSpotlightVideoContentQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery", function FilteredTvSpotlightVideoContentQuery() {
                var query = new MS.Entertainment.Data.Query.Video.CachedVideoQuery(MS.Entertainment.Video.VideoQueryCacheId.editorialSpotlight);
                query.queryId = MS.Entertainment.UI.Monikers.tvSpotlight;
                MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.prototype.constructor.call(this, query)
            }), FilteredNewTvContentQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery", function FilteredNewTvContentQuery() {
                var query = new MS.Entertainment.Data.Query.Video.CachedVideoQuery(MS.Entertainment.Video.VideoQueryCacheId.editorialTv);
                query.queryId = "newTvSeries";
                this.editorialIndex = MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.newReleasesIndex;
                MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.prototype.constructor.call(this, query)
            }), FilteredFeaturedTvContentQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery", function FilteredFeaturedTvContentQuery() {
                var query = new MS.Entertainment.Data.Query.Video.CachedVideoQuery(MS.Entertainment.Video.VideoQueryCacheId.editorialTv);
                query.queryId = "featuredTvSeries";
                this.editorialIndex = MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.featuredIndex;
                MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.prototype.constructor.call(this, query)
            }), FilteredLastNightOnTvContentQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery", function FilteredLastNightOnTvContentQuery() {
                var query = new MS.Entertainment.Data.Query.browseTVFromLastNight;
                query.queryId = MS.Entertainment.UI.Monikers.tvMarketplaceLastNight;
                this.editorialIndex = MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.newReleasesIndex;
                MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.prototype.constructor.call(this, query)
            }), FilteredNewMovieContentQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery", function FilteredNewMovieContentQuery() {
                var query = new MS.Entertainment.Data.Query.Video.CachedVideoQuery(MS.Entertainment.Video.VideoQueryCacheId.editorialMovies);
                query.queryId = "newMovies";
                this.editorialIndex = MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.newReleasesIndex;
                MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.prototype.constructor.call(this, query)
            }), FilteredFeaturedMovieContentQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery", function FilteredFeaturedMovieContentQuery() {
                var query = new MS.Entertainment.Data.Query.Video.CachedVideoQuery(MS.Entertainment.Video.VideoQueryCacheId.editorialMovies);
                query.queryId = "featuredMovies";
                this.editorialIndex = MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.featuredIndex;
                MS.Entertainment.Data.Query.Video.FilterSpotlightRestrictedContentWrapperQuery.prototype.constructor.call(this, query)
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Video", {SmartGenreRPSWrapperQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentationWrapperQuery", function SmartGenreRPSWrapperQuery(query) {
            MSE.Data.AugmentationWrapperQuery.prototype.constructor.call(this, query)
        }, {
            smartGenreItem: null, smartGenreType: null, execute: function execute() {
                    var executePromise;
                    if (this.query) {
                        var refinerPrioritizationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.refinerPrioritizationService);
                        if (this.smartGenreType === MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.tvType)
                            executePromise = refinerPrioritizationService.computePrioritizedTvGenres();
                        else if (this.smartGenreType === MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.movieType)
                            executePromise = refinerPrioritizationService.computePrioritizedMovieGenres();
                        else
                            return WinJS.Promise.wrapError(new Error("Invalid or undefined genre type set for smart genre query: {0}".format(this.smartGenreType)))
                    }
                    else
                        return WinJS.Promise.wrapError(new Error("Invalid state for executing. The query property was not set to a valid value."));
                    return executePromise.then(function(results) {
                            if (results && results.length > 0 && this.smartGenreItem < results.length) {
                                this.query.genre = results[this.smartGenreItem].name;
                                return this.query.execute()
                            }
                        }.bind(this))
                }
        }, {
            movieType: "movie", tvType: "tv", primaryIndex: 0, secondaryIndex: 1
        })});
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Video", {
        PrimarySmartGenreNewReleasesMovieQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery", function SmartGenreNewReleasesMovieQuery() {
            var query = new MS.Entertainment.Data.Query.Video.EdsBrowseNewReleaseMovies;
            query.resultAugmentation = MSE.Data.Augmenter.Marketplace.EdsPlayCountMovieList;
            this.smartGenreItem = MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.primaryIndex;
            this.smartGenreType = MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.movieType;
            MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.prototype.constructor.call(this, query)
        }), SecondarySmartGenreNewReleasesMovieQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery", function SmartGenreNewReleasesMovieQuery() {
                var query = new MS.Entertainment.Data.Query.Video.EdsBrowseNewReleaseMovies;
                query.resultAugmentation = MSE.Data.Augmenter.Marketplace.EdsPlayCountMovieList;
                this.smartGenreItem = MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.secondaryIndex;
                this.smartGenreType = MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.movieType;
                MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.prototype.constructor.call(this, query)
            }), PrimarySmartGenreNewReleasesTvQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery", function SmartGenreNewReleasesMovieQuery() {
                var query = new MS.Entertainment.Data.Query.Video.EdsBrowseNewReleaseTvSeries;
                query.resultAugmentation = MSE.Data.Augmenter.Marketplace.EdsPlayCountTVSeriesList;
                this.smartGenreItem = MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.primaryIndex;
                this.smartGenreType = MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.tvType;
                MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.prototype.constructor.call(this, query)
            }), SecondarySmartGenreNewReleasesTvQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery", function SmartGenreNewReleasesMovieQuery() {
                var query = new MS.Entertainment.Data.Query.Video.EdsBrowseNewReleaseTvSeries;
                query.resultAugmentation = MSE.Data.Augmenter.Marketplace.EdsPlayCountTVSeriesList;
                this.smartGenreItem = MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.secondaryIndex;
                this.smartGenreType = MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.tvType;
                MS.Entertainment.Data.Query.Video.SmartGenreRPSWrapperQuery.prototype.constructor.call(this, query)
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Video", {EDSNoIdTypeVideoQuery: MSE.deferredDerive(MS.Entertainment.Data.Query.EDSDeviceQuery, null, {idType: {set: function(value) {
                    assert(value === edsIdType.canonical, "Setting a NoIdType query to anything other than canonical")
                }}})});
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Video", {EdsBatchDetailsBase: MSE.deferredDerive(MS.Entertainment.Data.Query.EDSDeviceQuery, null, {
            ids: String.empty, idType: edsIdType.zuneCatalog, chunkSize: 5, requestFields: String.empty, desiredMediaItemTypes: String.empty, createResourceURI: function() {
                    return this.getResourceEndpoint(edsEndpointType.details)
                }, createParameters: function createParameters() {
                    var seperator = ".";
                    var idsString = this.ids;
                    if (typeof idsString !== "string")
                        idsString = idsString.join(seperator);
                    var numIds = idsString.split(seperator).length;
                    MS.Entertainment.Framework.assert(numIds <= this.chunkSize, "Too many id values supplied. Batch details requests must contain no more than {0} id values. Actual number of supplied id values was {1}".format(this.chunkSize, numIds));
                    MS.Entertainment.Framework.assert(numIds > 0, "Too few id values supplied. Batch details requests must contain at least 1 id value.");
                    var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    return {
                            ids: idsString, idType: this.idType, desiredMediaItemTypes: this.desiredMediaItemTypes, firstPartyOnly: true, videoPresaleBundles: config.video.enablePresaleAndBundles
                        }
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Video", {
        EdsBatchDetailsMovie: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EdsBatchDetailsBase, null, {
            requestFields: MS.Entertainment.Data.Query.Video.requestFields.movieDetails, desiredMediaItemTypes: edsMediaType.movie, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieList
        }), EdsBatchDetailsTVEpisode: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EdsBatchDetailsBase, null, {
                requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvEpisodeDetails, desiredMediaItemTypes: edsMediaType.tvEpisode, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVEpisodeList
            }), EdsBatchDetailsTVSeason: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EdsBatchDetailsBase, null, {
                requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeasonDetails, desiredMediaItemTypes: edsMediaType.tvSeason, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeasonList
            }), EdsDetailTVSeries: MSE.deferredDerive(MS.Entertainment.Data.Query.EDSDeviceQuery, null, {
                id: String.empty, idType: edsIdType.canonical, chunkSize: 0, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesDetails, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.details)
                    }, createParameters: function createParameters() {
                        return {
                                ids: this.id, idType: this.idType, mediaGroup: edsMediaGroup.tvType, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeriesDetails
            }), EdsDetailTVSeason: MSE.deferredDerive(MS.Entertainment.Data.Query.EDSDeviceQuery, null, {
                id: String.empty, idType: edsIdType.canonical, chunkSize: 0, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeasonDetails, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.details)
                    }, createParameters: function createParameters() {
                        return {
                                ids: this.id, idType: this.idType, mediaGroup: edsMediaGroup.tvType, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeasonDetails
            }), EdsDetailTVEpisode: MSE.deferredDerive(MS.Entertainment.Data.Query.EDSDeviceQuery, null, {
                id: String.empty, idType: edsIdType.canonical, chunkSize: 0, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvEpisodeDetails, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.details)
                    }, createParameters: function createParameters() {
                        return {
                                ids: this.id, idType: this.idType, mediaGroup: edsMediaGroup.tvType, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVEpisodeDetails
            }), EdsTvSeasonsForSeries: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                id: String.empty, chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeasonBrowse, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                id: this.id, desiredMediaItemTypes: edsMediaType.tvSeason, mediaItemType: edsMediaType.tvSeries, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeasonList
            }), EdsTvEpisodesForSeason: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                id: String.empty, chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvEpisodeBrowse, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                id: this.id, desiredMediaItemTypes: edsMediaType.tvEpisode, mediaItemType: edsMediaType.tvSeason, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVEpisodeList
            }), EdsBrowseMoviesByActor: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                actor: String.empty, chunkSize: BROWSE_CHUNK_SIZE, requestFields: MS.Entertainment.Data.Query.Video.requestFields.moviesBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                actors: this.actor, desiredMediaItemTypes: edsMediaType.movie, orderBy: edsSortOrder.sevenDaysPlayCount, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieList
            }), EdsBrowseTVByActor: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                actor: String.empty, chunkSize: BROWSE_CHUNK_SIZE, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                actors: this.actor, desiredMediaItemTypes: edsMediaType.tvSeries, orderBy: edsSortOrder.sevenDaysPlayCount, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeriesList
            }), EdsSearchMovies: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                search: String.empty, chunkSize: SEARCH_CHUNK_SIZE, autoSuggestSeed: false, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.Query.Video.requestFields.moviesBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.singleMediaGroupSearch)
                    }, createParameters: function createParameters() {
                        return {
                                q: edsSearchString(this.search), desiredMediaItemTypes: edsMediaType.movie, firstPartyOnly: true
                            }
                    }, createHeaders: function createHeaders() {
                        return {"x-xbl-autoSuggest-seed-text": this.autoSuggestSeed && this.search ? window.encodeURIComponent(this.search) : null}
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieList
            }), EdsSearchTVSeries: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                search: String.empty, chunkSize: SEARCH_CHUNK_SIZE, autoSuggestSeed: false, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.singleMediaGroupSearch)
                    }, createParameters: function createParameters() {
                        return {
                                q: edsSearchString(this.search), desiredMediaItemTypes: edsMediaType.tvSeries, firstPartyOnly: true
                            }
                    }, createHeaders: function createHeaders() {
                        return {"x-xbl-autoSuggest-seed-text": this.autoSuggestSeed && this.search ? window.encodeURIComponent(this.search) : null}
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeriesList
            }), EdsCrossVideoSearch: MSE.deferredDerive(MS.Entertainment.Data.Query.CrossMediaSearch, null, {
                chunkSize: VIDEO_SEARCH_CHUNK_SIZE, groupTypes: [edsMediaType.movie, edsMediaType.tvSeries], firstPartyOnly: true, requestFields: MS.Entertainment.Data.Query.Video.requestFields.videoSearch, enabledImpressionGuid: true, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsCrossVideoList
            }), EdsDetailMovie: MSE.deferredDerive(MS.Entertainment.Data.Query.EDSDeviceQuery, null, {
                id: String.empty, idType: edsIdType.canonical, chunkSize: 0, requestFields: MS.Entertainment.Data.Query.Video.requestFields.movieDetails, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.details)
                    }, createParameters: function createParameters() {
                        var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        return {
                                mediaGroup: edsMediaGroup.movieType, ids: this.id, idType: this.idType, firstPartyOnly: MS.Entertainment.Utilities.isVideoApp2 || !this.useAuthenticatedEndpoint, videoPresaleBundles: config.video.enablePresaleAndBundles
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieDetails
            }), EdsVideoDetailsFromTitleIdAssetId: MSE.deferredDerive(MS.Entertainment.Data.Query.EDSDeviceQuery, null, {
                assetId: String.empty, requestFields: MS.Entertainment.Data.Query.Video.requestFields.videoDetails, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.details)
                    }, createParameters: function createParameters() {
                        return {
                                ids: edsArray(this.assetId), idType: edsIdType.providerContentId, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsVideoResult
            }), EdsVideoDetailsFromAssetId: MSE.deferredDerive(MS.Entertainment.Data.Query.EDSDeviceQuery, null, {
                assetId: String.empty, mediaGroup: null, requestFields: MS.Entertainment.Data.Query.Video.requestFields.videoDetails, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.details)
                    }, createParameters: function createParameters() {
                        return {
                                mediaGroup: this.mediaGroup, ids: edsArray(this.assetId), firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsVideoResult
            }), EdsMovieRelatedItems: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                id: String.empty, serviceId: String.empty, chunkSize: RELATED_CHUNK_SIZE, requestFields: MS.Entertainment.Data.Query.Video.requestFields.moviesSimpleBrowse, forceSecureEndpoint: true, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.related)
                    }, createParameters: function createParameters() {
                        return {
                                id: this.id || this.serviceId, mediaItemType: edsMediaType.movie, desiredMediaItemTypes: edsMediaType.movie, firstPartyOnly: true, maxItems: 10
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsRelatedMovies
            }), EdsTVRelatedItems: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                id: String.empty, serviceId: String.empty, chunkSize: RELATED_CHUNK_SIZE, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.related)
                    }, createParameters: function createParameters() {
                        return {
                                id: this.id || this.serviceId, mediaItemType: edsMediaType.tvSeries, desiredMediaItemTypes: edsMediaType.tvSeries, firstPartyOnly: true, maxItems: 10
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsRelatedTV
            }), EdsBrowseTopMovies: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, requestFields: MS.Entertainment.Data.Query.Video.requestFields.moviesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, orderBy: null, genre: null, studio: null, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                genre: edsString(this.genre), studio: edsString(this.studio), orderBy: this.orderBy, desiredMediaItemTypes: edsMediaType.movie, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieList
            }), EdsBrowseTopMoviesDetailed: MSE.deferredDerive("MS.Entertainment.Data.Query.Video.EdsBrowseTopMovies", null, {requestFields: MS.Entertainment.Data.Query.Video.requestFields.moviesBrowse}), EdsBrowseTopSellingMovies: MSE.deferredDerive("MS.Entertainment.Data.Query.Video.EdsBrowseTopMovies", null, {orderBy: edsSortOrder.sevenDaysPurchaseCount}), EdsBrowseTopRentalMovies: MSE.deferredDerive("MS.Entertainment.Data.Query.Video.EdsBrowseTopMovies", null, {orderBy: edsSortOrder.sevenDaysRentalCount}), EdsBrowseNewReleaseMovies: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, id: String.empty, serviceId: String.empty, requestFields: MS.Entertainment.Data.Query.Video.requestFields.moviesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                genre: edsString(this.id || this.serviceId || this.genre), orderBy: edsSortOrder.releaseDate, desiredMediaItemTypes: edsMediaType.movie, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieList
            }), EdsBrowseNewReleaseTvSeries: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, id: String.empty, serviceId: String.empty, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                genre: edsString(this.id || this.serviceId || this.genre), orderBy: edsSortOrder.releaseDate, desiredMediaItemTypes: edsMediaType.tvSeries, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeriesList
            }), EdsBrowseTvSeries: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, genre: null, network: null, orderBy: edsSortOrder.sevenDaysPurchaseCount, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                genre: edsString(this.genre), network: edsString(this.network), orderBy: this.orderBy, desiredMediaItemTypes: edsMediaType.tvSeries, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeriesList
            }), EdsBrowseTvSeriesDetailed: MSE.deferredDerive("MS.Entertainment.Data.Query.Video.EdsBrowseTvSeries", null, {requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesBrowse}), EdsBrowseMoviesByGenre: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, orderBy: edsSortOrder.sevenDaysRentalCount, id: String.empty, serviceId: String.empty, requestFields: MS.Entertainment.Data.Query.Video.requestFields.moviesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                genre: edsString(this.id || this.serviceId), orderBy: this.orderBy, desiredMediaItemTypes: edsMediaType.movie, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieList
            }), EdsBrowseTVByGenre: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, orderBy: edsSortOrder.sevenDaysPurchaseCount, id: String.empty, serviceId: String.empty, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                genre: edsString(this.id || this.serviceId), orderBy: this.orderBy, desiredMediaItemTypes: edsMediaType.tvSeries, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeriesList
            }), EdsBrowseTVByGenreNetwork: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, orderBy: edsSortOrder.sevenDaysPurchaseCount, id: String.empty, serviceId: String.empty, genre: String.empty, network: String.empty, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                genre: edsString(this.genre), network: edsString(this.network), orderBy: this.orderBy, desiredMediaItemTypes: edsMediaType.tvSeries, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeriesList, queryType: "EdsBrowseTVByGenreNetwork"
            }), EdsBrowseMovieStudios: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.metadataMovieStudios)
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsQueryRefinerList
            }), EdsBrowseTvNetworks: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.metadataTvNetworks)
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsQueryRefinerList
            }), EdsBrowseMoviesByStudio: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, orderBy: edsSortOrder.sevenDaysPurchaseCount, id: String.empty, serviceId: String.empty, requestFields: MS.Entertainment.Data.Query.Video.requestFields.moviesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                studio: edsString(this.id || this.serviceId), orderBy: this.orderBy, desiredMediaItemTypes: edsMediaType.movie, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieList
            }), EdsBrowseMoviesByGenreStudio: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, orderBy: edsSortOrder.sevenDaysPurchaseCount, id: String.empty, serviceId: String.empty, genre: String.empty, studio: String.empty, requestFields: MS.Entertainment.Data.Query.Video.requestFields.moviesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                genre: edsString(this.genre), studio: edsString(this.studio), orderBy: this.orderBy, desiredMediaItemTypes: edsMediaType.movie, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieList, queryType: "EdsBrowseMoviesByGenreStudio"
            }), EdsBrowseTVByNetwork: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, orderBy: edsSortOrder.sevenDaysPurchaseCount, id: String.empty, serviceId: String.empty, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                network: edsString(this.id || this.serviceId), orderBy: this.orderBy, desiredMediaItemTypes: edsMediaType.tvSeries, firstPartyOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeriesList
            }), EdsBrowseFreeTV: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, orderBy: edsSortOrder.sevenDaysPurchaseCount, requestFields: MS.Entertainment.Data.Query.Video.requestFields.tvSeriesSimpleBrowse, includeContentRestrictionHeader: true, enabledImpressionGuid: true, createResourceURI: function() {
                        return this.getResourceEndpoint(edsEndpointType.browse)
                    }, createParameters: function createParameters() {
                        return {
                                orderBy: this.orderBy, desiredMediaItemTypes: edsMediaType.tvSeries, firstPartyOnly: true, freeOnly: true
                            }
                    }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTVSeriesList
            }), AutoSuggest: MS.Entertainment.deferredDerive(MS.Entertainment.Data.Query.AutoSuggest, null, {mediaType: MS.Entertainment.Data.Query.bbxMediaType.video}), AutoSuggestTV: MS.Entertainment.deferredDerive(MS.Entertainment.Data.Query.AutoSuggest, null, {mediaType: MS.Entertainment.Data.Query.bbxMediaType.tv}), AutoSuggestMovies: MS.Entertainment.deferredDerive(MS.Entertainment.Data.Query.AutoSuggest, null, {mediaType: MS.Entertainment.Data.Query.bbxMediaType.movie})
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Video", {
        EdsTvSeriesWithSeasons: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.BrowseDetailQuery", function EdsTvSeriesWithSeasons() {
            MS.Entertainment.Data.BrowseDetailQuery.prototype.constructor.call(this)
        }, {
            browseConstructor: MS.Entertainment.Data.Query.Video.EdsTvSeasonsForSeries, detailConstructor: MS.Entertainment.Data.Query.Video.EdsDetailTVSeries, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EdsSeriesWithSeasonsResult, id: {
                    get: function() {
                        if (this.browse)
                            return this.browse.id;
                        else
                            return null
                    }, set: function(value) {
                            if (this.browse)
                                this.browse.id = value;
                            if (this.detail)
                                this.detail.id = value
                        }
                }, idType: {
                    get: function() {
                        if (this.browse)
                            return this.browse.idType;
                        else
                            return null
                    }, set: function(value) {
                            if (this.browse)
                                this.browse.idType = value;
                            if (this.detail)
                                this.detail.idType = value
                        }
                }
        }), EdsTvSeasonWithEpisodes: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.BrowseDetailQuery", function EdsTvSeasonWithEpisodes() {
                MS.Entertainment.Data.BrowseDetailQuery.prototype.constructor.call(this)
            }, {
                browseConstructor: MS.Entertainment.Data.Query.Video.EdsTvEpisodesForSeason, detailConstructor: MS.Entertainment.Data.Query.Video.EdsDetailTVSeason, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EdsSeasonWithEpisodesResult, id: {
                        get: function() {
                            if (this.browse)
                                return this.browse.id;
                            else
                                return null
                        }, set: function(value) {
                                if (this.browse)
                                    this.browse.id = value;
                                if (this.detail)
                                    this.detail.id = value
                            }
                    }, seasonId: {
                        get: function() {
                            return this.id
                        }, set: function(value) {
                                this.id = value
                            }
                    }, idType: {
                        get: function() {
                            if (this.browse)
                                return this.browse.idType;
                            else
                                return null
                        }, set: function(value) {
                                if (this.browse)
                                    this.browse.idType = value;
                                if (this.detail)
                                    this.detail.idType = value
                            }
                    }
            }), EdsMetadataMovieGenres: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                createResourceURI: function() {
                    return this.getResourceEndpoint(edsEndpointType.metadataMovieGenres)
                }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieGenreRefinerList, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded
            }), EdsMetadataMovieStudios: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                createResourceURI: function() {
                    return this.getResourceEndpoint(edsEndpointType.metadataMovieStudios)
                }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieStudioRefinerList, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded
            }), EdsPrioritizedMovieStudios: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                createResourceURI: function() {
                    return this.getResourceEndpoint(edsEndpointType.metadataMovieStudios)
                }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsMovieStudioRefinerList, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, execute: function execute() {
                        var refinerPrioritizationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.refinerPrioritizationService);
                        return refinerPrioritizationService.computePrioritizedMovieStudios()
                    }
            }), EdsMetadataTvGenres: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                createResourceURI: function() {
                    return this.getResourceEndpoint(edsEndpointType.metadataTvGenres)
                }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTvGenreRefinerList, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded
            }), EdsMetadataTvNetworks: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                createResourceURI: function() {
                    return this.getResourceEndpoint(edsEndpointType.metadataTvNetworks)
                }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTvNetworkRefinerList, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded
            }), EdsPrioritizedTvNetworks: MSE.deferredDerive(MS.Entertainment.Data.Query.Video.EDSNoIdTypeVideoQuery, null, {
                createResourceURI: function() {
                    return this.getResourceEndpoint(edsEndpointType.metadataTvNetworks)
                }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsTvNetworkRefinerList, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, execute: function execute() {
                        var refinerPrioritizationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.refinerPrioritizationService);
                        return refinerPrioritizationService.computePrioritizedTvNetworks()
                    }
            }), MovieNewReleasesQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentationWrapperQuery", null, {
                genre: null, studio: null, execute: function execute() {
                        if (this.genre || this.studio) {
                            this.query = new MS.Entertainment.Data.Query.Video.EdsBrowseMoviesByGenreStudio;
                            this.query.genre = this.genre;
                            this.query.studio = this.studio
                        }
                        else
                            this.query = new MS.Entertainment.Data.Query.MovieHubNewReleasesQuery;
                        return MS.Entertainment.Data.AugmentationWrapperQuery.prototype.execute.call(this)
                    }
            }), TvNewReleasesQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentationWrapperQuery", null, {
                genre: null, network: null, execute: function execute() {
                        if (this.genre || this.network) {
                            this.query = new MS.Entertainment.Data.Query.Video.EdsBrowseTVByGenreNetwork;
                            this.query.genre = this.genre;
                            this.query.network = this.network
                        }
                        else
                            this.query = new MS.Entertainment.Data.Query.TvHubNewReleasesQuery;
                        return MS.Entertainment.Data.AugmentationWrapperQuery.prototype.execute.call(this)
                    }
            })
    })
})()
})();
/* >>>>>>/framework/data/queries/spotlightqueries.js:7442 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {
        SpotlightQueryType: {
            SpotlightMusic: "spotlight", SpotlightVideo: "spotlight"
        }, recommendationBrowseFields: [MS.Entertainment.Data.Query.edsFields.allTimeAverageRating, MS.Entertainment.Data.Query.edsFields.explanations, MS.Entertainment.Data.Query.edsFields.id, MS.Entertainment.Data.Query.edsFields.images, MS.Entertainment.Data.Query.edsFields.mediaGroup, MS.Entertainment.Data.Query.edsFields.mediaItemType, MS.Entertainment.Data.Query.edsFields.name, MS.Entertainment.Data.Query.edsFields.vuiDisplayName, MS.Entertainment.Data.Query.edsFields.zuneId], createEditorialHeaders: function createEditorialHeaders() {
                var architectureStringMap = {
                        0: "x86", 5: "arm", 9: "x64"
                    };
                var currentPackage = Windows.ApplicationModel.Package.current;
                var architecture = currentPackage.id.architecture;
                var mappedArchitecture = architectureStringMap[architecture];
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                if (configurationManager.service.targetedProgrammingArchitecture)
                    mappedArchitecture = configurationManager.service.targetedProgrammingArchitecture;
                var spotlightHeaders = {
                        "User-Agent": configurationManager.service.targetedProgrammingClientOs, "X-Application": MS.Entertainment.Utilities.isVideoApp ? "Video" : "Music", "X-Membership-Level": configurationManager.service.lastSignedInUserMembership || "Free", "X-Parent-Control": configurationManager.service.lastSignedInUserParentControl.toString(), "X-Client-Version": configurationManager.service.targetedProgrammingClientVersion, "X-Client-Architecture": mappedArchitecture
                    };
                if (MS.Entertainment.Utilities.isMusicApp)
                    spotlightHeaders["X-Music-Subscription"] = configurationManager.service.lastSignedInUserSubscription.toString();
                return spotlightHeaders
            }
    });
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {spotlightContentQuery: MSE.derive(MSE.Data.ServiceWrapperQuery, null, {
            spotlight: String.empty, getResourceEndpointID: function getResourceEndpointID() {
                    return MS.Entertainment.Endpoint.id.seid_CdfXboxLiveDotCom
                }, createHeaders: function createHeaders() {
                    return MS.Entertainment.Data.Query.createEditorialHeaders()
                }, createParameters: function createParameters() {
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (configurationManager.service.enableTimeTravel)
                        return {StartDate: configurationManager.service.timeTravelStartDate};
                    else
                        return null
                }, getSpotlightFeedVersionSubPath: function getSpotlightFeedVersionSubPath() {
                    return String.empty
                }, createResourceURI: function() {
                    return this.getResourceEndpoint() + this.getSpotlightFeedVersionSubPath() + this.spotlight
                }, pluralizers: ["Content/SlotGroup", "SlotGroup/Slot"], resultAugmentation: MSE.Data.Augmenter.Spotlight.SpotlightContent
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {MusicMediaDiscoverySpotlightQuery: MSE.derive(MSE.Data.Query.spotlightContentQuery, null, {
            serviceType: MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json, spotlight: MSE.Data.Query.SpotlightQueryType.SpotlightMusic, getResourceEndpointID: function getResourceEndpointID() {
                    return MS.Entertainment.Endpoint.id.seid_MediaDiscovery
                }, getSpotlightFeedVersionSubPath: function getSpotlightFeedVersionSubPath() {
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    return configurationManager.service.musicAppSpotlightVersion
                }, createResourceURI: function createResourceURI() {
                    return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpointID(), this.getSpotlightFeedVersionSubPath() + "spotlight")
                }
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {videoSpotlightQuery: MSE.derive(MSE.Data.Query.spotlightContentQuery, null, {
            spotlight: MSE.Data.Query.SpotlightQueryType.SpotlightVideo, getResourceEndpointID: function getResourceEndpointID() {
                    return MS.Entertainment.Endpoint.id.seid_MediaDiscovery
                }, getResourceUriSuffix: function getResourceUriSuffix() {
                    var serviceConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service;
                    return serviceConfig.videoAppSpotlightSuffix
                }, createResourceURI: function createResourceURI() {
                    var uri;
                    var abTestingConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).abTestingOverrides;
                    if (abTestingConfig && abTestingConfig.videoSpotlightFeedUrl)
                        uri = abTestingConfig.videoSpotlightFeedUrl;
                    else
                        uri = MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), this.getResourceUriSuffix());
                    return uri
                }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.slotGroupPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotPluralizer], resultAugmentation: MSE.Data.Augmenter.Spotlight.VideoSpotlightContent
        })});
    var xuidTokenTable = {};
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {EdsVideoRecommendations: MSE.derive(MSE.Data.Query.EDSDeviceQuery, null, {
            chunkSize: 20, requestFields: MS.Entertainment.Data.Query.recommendationBrowseFields, useApp2UserIfAvailable: true, includeContentRestrictionHeader: true, enabledImpressionGuid: true, queryType: "videoRecommendations", createResourceURI: function() {
                    var configurationManager;
                    var currentUserXuid;
                    var uri = this.getResourceEndpoint(MS.Entertainment.Data.Query.edsEndpointType.recommendations);
                    var contentRestrictionSuffixString = String.empty;
                    if (MS.Entertainment.Utilities.isVideoApp2) {
                        configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        currentUserXuid = configurationManager.service.lastSignedInUserXuid || 0;
                        if (!xuidTokenTable[currentUserXuid])
                            xuidTokenTable[currentUserXuid] = MS.Entertainment.Utilities.getSessionUniqueInteger() + 1;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.contentRestrictionService))
                            contentRestrictionSuffixString = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionService).getUniqueBrowseFilterRestrictionValue();
                        uri = MS.Entertainment.Utilities.UriFactory.appendQuery(uri, {random: xuidTokenTable[currentUserXuid] + contentRestrictionSuffixString})
                    }
                    return uri
                }, createParameters: function createParameters() {
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    var movieMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace);
                    var tvMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace);
                    var types = [];
                    var typeArray = null;
                    if (movieMarketplaceEnabled && (!this.desiredMediaItemTypes || this.desiredMediaItemTypes === "all" || this.desiredMediaItemTypes === "movies"))
                        types.push(MS.Entertainment.Data.Query.edsMediaType.movie);
                    if (tvMarketplaceEnabled && (!this.desiredMediaItemTypes || this.desiredMediaItemTypes === "all" || this.desiredMediaItemTypes === "tv"))
                        types.push(MS.Entertainment.Data.Query.edsMediaType.tvSeries);
                    typeArray = MS.Entertainment.Data.Query.edsArray(types);
                    return {
                            desiredMediaItemTypes: typeArray, firstPartyOnly: true
                        }
                }, resultAugmentation: MSE.Data.Augmenter.Marketplace.EdsRecommendedVideoList, useCache: false
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {
        MusicUpdatePanel: MSE.deferredDerive(MS.Entertainment.Data.ServiceWrapperQuery, null, {
            chunked: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.IntroPanelResult, createResourceURI: function() {
                    return MS.Entertainment.Utilities.UriFactory.create(MS.Entertainment.Endpoint.id.seid_WinPhoneXboxDotCom, "x8/feeds/1.1/Upgrade-Music")
                }, pluralizers: ["BodyText/p"]
        }), VideoUpdatePanel: MS.Entertainment.deferredDerive(MS.Entertainment.Data.ServiceWrapperQuery, null, {
                chunked: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.IntroPanelResult, createResourceURI: function() {
                        return MS.Entertainment.Utilities.UriFactory.create(MS.Entertainment.Endpoint.id.seid_WinPhoneXboxDotCom, "x8/feeds/1.1/Upgrade-Video")
                    }, pluralizers: ["BodyText/p"]
            })
    });
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {MediaDiscoveryVideoFlexHub: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.marketplaceWrapperQuery, null, {
                    createHeaders: function createHeaders() {
                        return MS.Entertainment.Data.Query.createEditorialHeaders()
                    }, getResourceEndpointID: function getResourceEndpointID() {
                            return MS.Entertainment.Endpoint.id.seid_MediaDiscovery
                        }, createParameters: function createParameters() {
                            return {}
                        }, createResourceURI: function() {
                            var serviceConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service;
                            var uri = window.encodeURI(this.target || String.empty);
                            if (MS.Entertainment.Utilities.verifyUrl(uri))
                                uri = MS.Entertainment.Utilities.UriFactory.appendQuery(uri, {schema: "2.0"});
                            else
                                uri = MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), serviceConfig.videoAppFlexHubSuffix.format(uri));
                            return uri
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.channelPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotGroupPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotPluralizer], resultAugmentation: MSE.Data.Augmenter.Video.FlexHubContent, useCache: true
                })
        })})
})()
})();
/* >>>>>>/framework/moduleselectionmanager.js:7578 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(Framework) {
            MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Framework");
            var ModuleSelectionManager = (function(_super) {
                    __extends(ModuleSelectionManager, _super);
                    function ModuleSelectionManager(element) {
                        var _this = this;
                        _super.call(this);
                        this._itemSelectionAggregator = null;
                        this._selectedItemStateEngine = null;
                        this._selectedMediaItems = [];
                        this._disposed = false;
                        this._shareOperation = null;
                        this._itemSelectionAggregator = new ItemSelectionAggregator(element);
                        this._selectionEventBindings = MS.Entertainment.UI.Framework.addEventHandlers(this._itemSelectionAggregator, {
                            selectedMediaItemsChanged: this._onSelectionChanged.bind(this), mediaItemDragStart: this._onItemDragStart.bind(this), mediaItemDragEnd: this._onItemDragEnd.bind(this)
                        });
                        if (Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation))
                            this._navigationHandlers = MS.Entertainment.Utilities.addEventHandlers(MS.Entertainment.UI.Framework.Navigation.getJournal(), {navigated: function(arg) {
                                    return _this.onNavigated(arg)
                                }})
                    }
                    ModuleSelectionManager.prototype.dispose = function() {
                        if (this._disposed)
                            return;
                        this._clearSelection();
                        this._disposed = true;
                        this._selectedMediaItems = null;
                        if (this._appbarActionBindings) {
                            this._appbarActionBindings.cancel();
                            this._appbarActionBindings = null
                        }
                        if (this._selectionEventBindings) {
                            this._selectionEventBindings.cancel();
                            this._selectionEventBindings = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        if (this._navigationHandlers) {
                            this._navigationHandlers.cancel();
                            this._navigationHandlers = null
                        }
                        if (this._itemSelectionAggregator) {
                            this._itemSelectionAggregator.dispose();
                            this._itemSelectionAggregator = null
                        }
                        this._cancelShareOperation()
                    };
                    ModuleSelectionManager.prototype._cancelShareOperation = function() {
                        if (this._shareOperation) {
                            this._shareOperation.cancel();
                            this._shareOperation = null
                        }
                    };
                    ModuleSelectionManager.prototype._shareMediaItem = function(item) {
                        this._cancelShareOperation();
                        if (item && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.shareSender)) {
                            var sender = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareSender);
                            this._shareOperation = sender.pendingShare(item)
                        }
                    };
                    ModuleSelectionManager.prototype._onSelectionChanged = function(eventInfo) {
                        this._selectedMediaItems = this._itemSelectionAggregator.selectedMediaItems;
                        this._updateMediaContext();
                        switch (this._selectedMediaItems.length) {
                            case 0:
                                this._clearSelection();
                                break;
                            case 1:
                                this._handleSingleSelection();
                                break;
                            default:
                                this._handleMultipleSelection();
                                break
                        }
                        this.dispatchEvent("moduleItemsSelectionChanged", this._selectedMediaItems)
                    };
                    ModuleSelectionManager.prototype._onItemDragStart = function(eventInfo) {
                        if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.dragData))
                            return;
                        var dragDataPromise;
                        if (this._selectedMediaItems && this._selectedMediaItems.length)
                            dragDataPromise = WinJS.Promise.as({
                                data: this._selectedMediaItems, onDragDataHandled: this._onDragDataHandled.bind(this)
                            });
                        else if (eventInfo.detail && eventInfo.detail.draggedItem)
                            dragDataPromise = WinJS.Promise.as({
                                data: eventInfo.detail.draggedItem, onDragDataHandled: this._onDragDataHandled.bind(this)
                            });
                        if (dragDataPromise) {
                            var dragDataService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dragData);
                            dragDataService.startDrag(dragDataPromise)
                        }
                    };
                    ModuleSelectionManager.prototype._onItemDragEnd = function(eventInfo) {
                        var dragDataService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dragData);
                        dragDataService.finishDrag()
                    };
                    ModuleSelectionManager.prototype._onDragDataHandled = function() {
                        this._clearSelection()
                    };
                    ModuleSelectionManager.prototype._updateMediaContext = function() {
                        if (this._mediaContext)
                            this._mediaContext.updateMediaItem(this._selectedMediaItems);
                        else if (Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appToolbar)) {
                            var appBarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                            if (appBarService)
                                this._mediaContext = appBarService.pushMediaContext(this._selectedMediaItems, Entertainment.ViewModels.SmartAppbarActions.setDefaultGalleryEventHandlers(this._clearSelection.bind(this)), [], {executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.selection})
                        }
                    };
                    ModuleSelectionManager.prototype._releaseSingleSelectionBindings = function() {
                        if (this._appbarActionBindings) {
                            this._appbarActionBindings.cancel();
                            this._appbarActionBindings = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        this._cancelShareOperation()
                    };
                    ModuleSelectionManager.prototype._handleSingleSelection = function() {
                        Framework.assert(this._selectedMediaItems.length === 1, "The length of selected media item array should be 1!");
                        if (this._disposed)
                            return;
                        this._releaseSingleSelectionBindings();
                        var mediaItem = this._selectedMediaItems[0];
                        if (mediaItem.hydrate)
                            mediaItem.hydrate();
                        this._shareMediaItem(mediaItem);
                        if (Entertainment.ViewModels.SmartBuyStateEngine) {
                            this._selectedItemStateEngine = MS.Entertainment.ViewModels.SmartBuyStateEngine.getSelectionStateFromMediaItem(mediaItem);
                            this._appbarActionBindings = WinJS.Binding.bind(this._selectedItemStateEngine, {currentAppbarActions: this._setSelectedItemAppbarActions.bind(this)})
                        }
                    };
                    ModuleSelectionManager.prototype._handleMultipleSelection = function() {
                        this._releaseSingleSelectionBindings();
                        this._shareMediaItem(this._selectedMediaItems);
                        if (Entertainment.ViewModels.SmartAppbarActions) {
                            var multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getMultiSelectAppbarActions(this._selectedMediaItems[0]);
                            this._updateAppbarActions(multiSelectItemActions)
                        }
                    };
                    ModuleSelectionManager.prototype._clearSelection = function() {
                        if (this._itemSelectionAggregator)
                            this._itemSelectionAggregator.clearModuleSelection();
                        this._cancelShareOperation();
                        this._releaseSingleSelectionBindings();
                        var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                        if (appBarControl && appBarControl.hide)
                            appBarControl.hide(true);
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    };
                    ModuleSelectionManager.prototype._setSelectedItemAppbarActions = function(newValue, oldValue) {
                        if (oldValue === undefined)
                            return;
                        this._updateAppbarActions(newValue)
                    };
                    ModuleSelectionManager.prototype._updateAppbarActions = function(actions) {
                        if (this._mediaContext)
                            this._mediaContext.setToolbarActions(actions);
                        if (actions && actions.length > 0) {
                            var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                            if (appBarControl)
                                appBarControl.show()
                        }
                    };
                    ModuleSelectionManager.prototype.onNavigated = function(args) {
                        var isBackNavigation = args && args.detail && args.detail.value;
                        if (!isBackNavigation)
                            this._clearSelection()
                    };
                    return ModuleSelectionManager
                })(Entertainment.UI.Framework.ObservableBase);
            Framework.ModuleSelectionManager = ModuleSelectionManager;
            var ItemSelectionAggregator = (function(_super) {
                    __extends(ItemSelectionAggregator, _super);
                    function ItemSelectionAggregator(element) {
                        _super.call(this);
                        this._selectedMediaItems = [];
                        this._selectedSrcElementKeys = [];
                        this._disposed = false;
                        this._selectedElementWeakRefTable = new MS.Entertainment.UI.Framework.WeakRefTable("about://moduleSelectedElement");
                        this._domElement = element;
                        this._enableModuleSelectionBindings()
                    }
                    Object.defineProperty(ItemSelectionAggregator.prototype, "selectedMediaItems", {
                        get: function() {
                            return this._selectedMediaItems
                        }, set: function(value) {
                                this.updateAndNotify("selectedMediaItems", value)
                            }, enumerable: true, configurable: true
                    });
                    ItemSelectionAggregator.prototype.clearModuleSelection = function() {
                        var selectionCount = this._selectedSrcElementKeys ? this._selectedSrcElementKeys.length : 0;
                        for (var i = selectionCount - 1; i >= 0; i--) {
                            var element = this._selectedElementWeakRefTable.get(this._selectedSrcElementKeys[i]);
                            if (element && element.winControl && element.winControl.selected)
                                element.winControl.selected = false
                        }
                        this._selectedSrcElementKeys = [];
                        this._selectedMediaItems = []
                    };
                    ItemSelectionAggregator.prototype.dispose = function() {
                        if (this._disposed)
                            return;
                        this._disposed = true;
                        this._selectedMediaItems = null;
                        this._selectedSrcElementKeys = null;
                        if (this._moduleSelectionChangedEventBindings) {
                            this._moduleSelectionChangedEventBindings.cancel();
                            this._moduleSelectionChangedEventBindings = null
                        }
                        if (this._gallerySelectionChangingEventBindings) {
                            this._gallerySelectionChangingEventBindings.cancel();
                            this._gallerySelectionChangingEventBindings = null
                        }
                        this._onModuleItemDragEnd(null)
                    };
                    ItemSelectionAggregator.prototype._enableModuleSelectionBindings = function() {
                        this._moduleSelectionChangedEventBindings = MS.Entertainment.UI.Framework.addEventHandlers(this._domElement, {
                            selectionchanged: this._onSelectionChanged.bind(this), invoked: this._onModuleItemInvoked.bind(this), dragstart: this._onModuleItemDragStart.bind(this), dragend: this._onModuleItemDragEnd.bind(this)
                        })
                    };
                    ItemSelectionAggregator.prototype._searchGalleryControlAndEnableBindings = function() {
                        var _this = this;
                        if (this._gallerySelectionChangingEventBindings === undefined) {
                            this._gallerySelectionChangingEventBindings = null;
                            MS.Entertainment.UI.Framework.applyWithSelector(this._domElement, ".win-listview", function(listView) {
                                if (listView) {
                                    var galleryControl = listView.parentElement;
                                    Framework.assert(!_this._gallerySelectionChangingEventBindings, "We only support one gallery on the page currently!");
                                    if (galleryControl && galleryControl.winControl && !_this._gallerySelectionChangingEventBindings) {
                                        _this._gallerySelectionChangingEventBindings = MS.Entertainment.UI.Framework.addEventHandlers(galleryControl, {
                                            selectionchanging: function(eventInfo) {
                                                if (!eventInfo || !eventInfo.detail || !eventInfo.detail.newSelection || !eventInfo.detail.newSelection.count())
                                                    return;
                                                _this.clearModuleSelection()
                                            }, iteminvoked: _this.clearModuleSelection.bind(_this)
                                        }, true);
                                        _this._hasGalleryControl = true
                                    }
                                }
                            })
                        }
                    };
                    ItemSelectionAggregator.prototype._onModuleItemInvoked = function(eventInfo) {
                        this.clearModuleSelection();
                        if (eventInfo.srcElement && eventInfo.srcElement.click)
                            eventInfo.srcElement.click()
                    };
                    ItemSelectionAggregator.prototype._onModuleItemDragStart = function(eventInfo) {
                        var draggedItemElement = eventInfo.srcElement;
                        var currentSelectionCount = this._selectedSrcElementKeys ? this._selectedSrcElementKeys.length : 0;
                        this._clearDragStyling();
                        while (draggedItemElement && !draggedItemElement.clickDataContext)
                            draggedItemElement = draggedItemElement.parentElement;
                        if (currentSelectionCount > 0)
                            if (draggedItemElement && draggedItemElement.winControl)
                                draggedItemElement.winControl.selected = true;
                            else
                                draggedItemElement = null;
                        if (draggedItemElement && draggedItemElement.clickDataContext) {
                            this._searchGalleryControlAndEnableBindings();
                            this._draggedElements = [];
                            for (var i = currentSelectionCount - 1; i >= 0; i--) {
                                var element = this._selectedElementWeakRefTable.get(this._selectedSrcElementKeys[i]);
                                if (element && element.winControl && element.winControl.selected && element !== event.srcElement) {
                                    MS.Entertainment.Utilities.safeAddClass(element, ItemSelectionAggregator.draggingStateClass);
                                    this._draggedElements.push(element)
                                }
                            }
                            var mediaItem = draggedItemElement.clickDataContext.data || draggedItemElement.clickDataContext;
                            this.dispatchEvent("mediaItemDragStart", {draggedItem: mediaItem})
                        }
                    };
                    ItemSelectionAggregator.prototype._onModuleItemDragEnd = function(eventInfo) {
                        this._clearDragStyling();
                        this.dispatchEvent("mediaItemDragEnd")
                    };
                    ItemSelectionAggregator.prototype._clearDragStyling = function() {
                        if (this._draggedElements) {
                            this._draggedElements.forEach(function(element) {
                                MS.Entertainment.Utilities.safeRemoveClass(element, ItemSelectionAggregator.draggingStateClass)
                            });
                            this._draggedElements = null
                        }
                    };
                    ItemSelectionAggregator.prototype._onSelectionChanged = function(eventInfo) {
                        if (!eventInfo.srcElement)
                            return;
                        var moduleId = eventInfo.srcElement.getAttribute("data-ent-moduleId");
                        if (moduleId) {
                            this._searchGalleryControlAndEnableBindings();
                            if (eventInfo.srcElement.winControl) {
                                var mediaItem = eventInfo.srcElement.clickDataContext.data || eventInfo.srcElement.clickDataContext;
                                var key;
                                if (mediaItem.hasServiceId)
                                    key = mediaItem.serviceId.toLowerCase();
                                else
                                    key = mediaItem.libraryId;
                                if (eventInfo.srcElement.winControl.selected) {
                                    if (this._hasGalleryControl)
                                        MS.Entertainment.UI.Controls.GalleryControl.searchAndApply(this._domElement, this._clearGallerySelection.bind(this));
                                    if (this._selectedItemModuleId !== moduleId) {
                                        this.clearModuleSelection();
                                        this._selectedItemModuleId = moduleId
                                    }
                                    this._selectedMediaItems.push(mediaItem);
                                    this._selectedElementWeakRefTable.set(eventInfo.srcElement, key);
                                    this._selectedSrcElementKeys.push(key)
                                }
                                else {
                                    var itemIndex = this._selectedMediaItems.indexOf(mediaItem);
                                    if (itemIndex > -1)
                                        this._selectedMediaItems.splice(itemIndex, 1);
                                    var keyIndex = this._selectedSrcElementKeys.indexOf(key);
                                    if (keyIndex > -1)
                                        this._selectedSrcElementKeys.splice(keyIndex, 1)
                                }
                                this.dispatchEvent("selectedMediaItemsChanged")
                            }
                        }
                    };
                    ItemSelectionAggregator.prototype._clearGallerySelection = function(galleryControl) {
                        if (galleryControl) {
                            galleryControl.clearInvocation();
                            galleryControl.clearSelection()
                        }
                    };
                    ItemSelectionAggregator.draggingStateClass = "state_dragging";
                    return ItemSelectionAggregator
                })(MS.Entertainment.UI.Framework.ObservableBase);
            Framework.ItemSelectionAggregator = ItemSelectionAggregator
        })(Entertainment.Framework || (Entertainment.Framework = {}));
        var Framework = Entertainment.Framework
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/controls/carousel.js:7938 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Controls) {
                var CarouselJumpButton = (function() {
                        function CarouselJumpButton(position, totalCount) {
                            this.position = position;
                            this.totalCount = totalCount;
                            this.checked = false
                        }
                        Object.defineProperty(CarouselJumpButton.prototype, "position", {
                            get: function() {
                                return this._position
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(CarouselJumpButton.prototype, "totalCount", {
                            get: function() {
                                return this._totalCount
                            }, enumerable: true, configurable: true
                        });
                        return CarouselJumpButton
                    })();
                var Carousel = (function(_super) {
                        __extends(Carousel, _super);
                        function Carousel(element, options) {
                            var _this = this;
                            _super.call(this, element, options);
                            this._isUpdating = false;
                            this._autoCycleCarousel = false;
                            this._frozen = false;
                            this._currentPageNumber = 0;
                            this._jumpButtons = new MS.Entertainment.ObservableArray;
                            UI.Framework.processDeclarativeControlContainer(this);
                            this._pageChangedHandler = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {pagevisibilitychanged: function() {
                                    return _this._refreshJumpButtons()
                                }})
                        }
                        Object.defineProperty(Carousel.prototype, "_cycleDelayMs", {
                            get: function() {
                                if (!this._uiSettings)
                                    this._uiSettings = new Windows.UI.ViewManagement.UISettings;
                                return this._uiSettings.messageDuration * 1000
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(Carousel.prototype, "currentFlipViewPage", {
                            get: function() {
                                return this._flipView.currentPage
                            }, set: function(value) {
                                    this._flipView.currentPage = value;
                                    this._refreshJumpButtons()
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(Carousel.prototype, "dataSource", {
                            get: function() {
                                return this._dataSource
                            }, set: function(value) {
                                    this._dataSource = value;
                                    this._dataSourceChanged()
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(Carousel.prototype, "jumpButtons", {
                            get: function() {
                                return this._jumpButtons
                            }, enumerable: true, configurable: true
                        });
                        Carousel.prototype.freeze = function() {
                            _super.prototype.freeze.call(this);
                            this.stopCarouselTimer();
                            this._frozen = true
                        };
                        Carousel.prototype.thaw = function() {
                            _super.prototype.thaw.call(this);
                            this._frozen = false;
                            this.startCarouselTimer()
                        };
                        Carousel.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            this.stopCarouselTimer();
                            if (this._firstTimeRenderHandlers) {
                                this._firstTimeRenderHandlers.cancel();
                                this._firstTimeRenderHandlers = null
                            }
                            if (this._pageChangedHandler) {
                                this._pageChangedHandler.cancel();
                                this._pageChangedHandler = null
                            }
                        };
                        Carousel.prototype._findIndexFromJumpButton = function(element) {
                            var index = -1;
                            var children = (this._jumpButtonList && this._jumpButtonList.domElement && this._jumpButtonList.domElement.children);
                            if (children)
                                for (var i = 0; i < children.length; i++)
                                    if (children[i] === element || children[i].contains(element)) {
                                        index = i;
                                        break
                                    }
                            return index
                        };
                        Carousel.prototype._dataSourceChanged = function() {
                            var _this = this;
                            this._isUpdating = true;
                            this._flipView.itemDataSource = null;
                            this.jumpButtons.clear();
                            if (this.dataSource) {
                                this._flipView.itemDataSource = new WinJS.Binding.List(this.dataSource).dataSource;
                                var index = 0;
                                this.dataSource.forEach(function(item) {
                                    var result = WinJS.Binding.as(new CarouselJumpButton(index + 1, _this.dataSource.length));
                                    ++index;
                                    _this.jumpButtons.push(result)
                                });
                                this._jumpButtonList.dataSource = this.jumpButtons;
                                this._firstTimeRenderHandlers = UI.Framework.addEventHandlers(this.domElement, {pagevisibilitychanged: function() {
                                        _this.startCarouselTimer();
                                        _this._firstTimeRenderHandlers.cancel();
                                        _this._firstTimeRenderHandlers = null
                                    }})
                            }
                        };
                        Carousel.prototype._cycleCarousel = function() {
                            var _this = this;
                            if (!this._unloaded && !this._frozen)
                                this._flipView.count().done(function(count) {
                                    if (!_this._unloaded && !_this._frozen && _this._autoCycleCarousel) {
                                        _this._isUpdating = true;
                                        if (_this._currentPageNumber < count - 1)
                                            ++_this._currentPageNumber;
                                        else
                                            _this._currentPageNumber = 0;
                                        _this.currentFlipViewPage = _this._currentPageNumber;
                                        _this.startCarouselTimer()
                                    }
                                }, function(error) {
                                    Controls.fail("Error occurred while getting the item count from the carousel: " + (error && error.message))
                                })
                        };
                        Carousel.prototype.startCarouselTimer = function() {
                            var _this = this;
                            if (!this._unloaded && !this._frozen) {
                                this.stopCarouselTimer();
                                this._autoCycleCarousel = true;
                                this._cycleTimer = WinJS.Promise.timeout(this._cycleDelayMs);
                                this._cycleTimer.done(function() {
                                    return _this._cycleCarousel()
                                }, function(error) {
                                    Controls.assert(WinJS.Promise.isCanceledError(error), "Unexpected error occurred in carousel timer.")
                                })
                            }
                        };
                        Carousel.prototype.stopCarouselTimer = function() {
                            this._autoCycleCarousel = false;
                            if (this._cycleTimer) {
                                this._cycleTimer.cancel();
                                this._cycleTimer = null
                            }
                        };
                        Carousel.prototype._onKeyDown = function(event) {
                            if (event.keyCode === WinJS.Utilities.Key.enter || event.keyCode === WinJS.Utilities.Key.space)
                                this._onInvoke()
                        };
                        Carousel.prototype._onInvoke = function() {
                            this._flipView.forceLayout();
                            this.stopCarouselTimer()
                        };
                        Carousel.prototype._onPageSelected = function() {
                            this._suppressAutomaticUnloadingForFlipViewElements();
                            if (this._isUpdating)
                                this._isUpdating = false;
                            else
                                this.stopCarouselTimer();
                            this._currentPageNumber = this.currentFlipViewPage;
                            this._refreshJumpButtons()
                        };
                        Carousel.prototype._refreshJumpButtons = function() {
                            for (var i = 0; i < this._jumpButtons.length; i++)
                                this._jumpButtons.item(i).checked = (i === this._currentPageNumber)
                        };
                        Carousel.prototype._suppressAutomaticUnloadingForFlipViewElements = function() {
                            if (this._unloaded || !this._flipView || !this._flipView.element)
                                return;
                            var winItems = WinJS.Utilities.query(".win-item", this._flipView.element);
                            winItems.forEach(function(item) {
                                var firstChild = item.firstElementChild;
                                if (!firstChild)
                                    return;
                                firstChild.suppressUnload = true
                            })
                        };
                        Carousel.isDeclarativeControlContainer = true;
                        return Carousel
                    })(UI.Framework.UserControl);
                Controls.Carousel = Carousel
            })(UI.Controls || (UI.Controls = {}));
            var Controls = UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.Carousel)
})();
/* >>>>>>/viewmodels/viewstateviewmodel.js:8153 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(ViewState) {
                ViewState[ViewState["disabled"] = -5] = "disabled";
                ViewState[ViewState["filtered"] = -4] = "filtered";
                ViewState[ViewState["invalid"] = -3] = "invalid";
                ViewState[ViewState["offline"] = -2] = "offline";
                ViewState[ViewState["error"] = -1] = "error";
                ViewState[ViewState["empty"] = 0] = "empty";
                ViewState[ViewState["loading"] = 1] = "loading";
                ViewState[ViewState["ready"] = 2] = "ready"
            })(UI.ViewState || (UI.ViewState = {}));
            var ViewState = UI.ViewState
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));

(function(MS) {
    (function(Entertainment) {
        (function(Utilities) {
            var ViewState = (function() {
                    function ViewState(){}
                    ViewState.isStateCompleted = function(state) {
                        switch (state) {
                            case 2:
                            case-2:
                            case-1:
                            case 0:
                            case-4:
                            case-5:
                                return true;
                                break
                        }
                        return false
                    };
                    return ViewState
                })();
            Utilities.ViewState = ViewState
        })(Entertainment.Utilities || (Entertainment.Utilities = {}));
        var Utilities = Entertainment.Utilities
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            var ActionItem = (function() {
                    function ActionItem(titleStringId, subTitleStringId, action, icon) {
                        this.titleStringId = titleStringId;
                        this.subTitleStringId = subTitleStringId;
                        this.action = action;
                        this.icon = icon
                    }
                    return ActionItem
                })();
            ViewModels.ActionItem = ActionItem;
            var ViewStateItem = (function() {
                    function ViewStateItem(title, subTitle, actions) {
                        this.title = title;
                        this.subTitle = subTitle;
                        this.actions = actions
                    }
                    return ViewStateItem
                })();
            ViewModels.ViewStateItem = ViewStateItem;
            var ViewStateViewModel = (function(_super) {
                    __extends(ViewStateViewModel, _super);
                    function ViewStateViewModel(viewStateItems) {
                        _super.call(this);
                        this._actions = [];
                        this._disposed = false;
                        this._subTitle = String.empty;
                        this._title = String.empty;
                        this._viewState = -3;
                        this._suppressLoadingSpinner = false;
                        this._viewStateItems = viewStateItems
                    }
                    Object.defineProperty(ViewStateViewModel.prototype, "actions", {
                        get: function() {
                            return this._actions
                        }, set: function(value) {
                                this.updateAndNotify("actions", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ViewStateViewModel.prototype, "viewStateItems", {
                        get: function() {
                            return this._viewStateItems
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ViewStateViewModel.prototype, "title", {
                        get: function() {
                            return this._title
                        }, set: function(value) {
                                this.updateAndNotify("title", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ViewStateViewModel.prototype, "subTitle", {
                        get: function() {
                            return this._subTitle
                        }, set: function(value) {
                                this.updateAndNotify("subTitle", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ViewStateViewModel.prototype, "viewState", {
                        get: function() {
                            return this._viewState
                        }, set: function(value) {
                                if (value !== this.viewState) {
                                    if (!this._viewStateItems[value] && value !== -3 && value !== 1)
                                        value = 2;
                                    this.updateAndNotify("viewState", value);
                                    this.title = this._viewStateItems[this.viewState] && this._viewStateItems[this.viewState].title || String.empty;
                                    this.subTitle = this._viewStateItems[this.viewState] && this._viewStateItems[this.viewState].subTitle || String.empty;
                                    this.actions = this._viewStateItems[this.viewState] && this._viewStateItems[this.viewState].actions
                                }
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ViewStateViewModel.prototype, "suppressLoadingSpinner", {
                        get: function() {
                            return this._suppressLoadingSpinner
                        }, set: function(value) {
                                this.updateAndNotify("suppressLoadingSpinner", value)
                            }, enumerable: true, configurable: true
                    });
                    ViewStateViewModel.prototype.dispose = function() {
                        if (this._disposed)
                            return;
                        this._disposed = true
                    };
                    ViewStateViewModel.prototype.freeze = function(){};
                    ViewStateViewModel.prototype.thaw = function(){};
                    ViewStateViewModel.prototype.isSupportedViewState = function(viewState) {
                        return !!this._viewStateItems[viewState]
                    };
                    return ViewStateViewModel
                })(MS.Entertainment.UI.Framework.ObservableBase);
            ViewModels.ViewStateViewModel = ViewStateViewModel
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/modulebase.js:8314 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            var ModuleBase = (function(_super) {
                    __extends(ModuleBase, _super);
                    function ModuleBase(name) {
                        _super.call(this);
                        this._lockedViewState = -3;
                        this._moduleState = -3;
                        this._items = null;
                        this._bindableItems = null;
                        this._isModuleStateLocked = false;
                        this._count = -1;
                        this._searchText = null;
                        this._minimumItemCount = 1;
                        this._maximumItemCount = -1;
                        this._name = name
                    }
                    Object.defineProperty(ModuleBase.prototype, "isExcludedFromPageState", {
                        get: function() {
                            return this._isExcludedFromPageState
                        }, set: function(value) {
                                this.updateAndNotify("isExcludedFromPageState", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "name", {
                        get: function() {
                            return this._name
                        }, set: function(value) {
                                this.updateAndNotify("name", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "count", {
                        get: function() {
                            return this._count
                        }, set: function(value) {
                                this.updateAndNotify("count", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "minimumItemCount", {
                        get: function() {
                            return this._minimumItemCount
                        }, set: function(value) {
                                this.updateAndNotify("minimumItemCount", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "maximumItemCount", {
                        get: function() {
                            return this._maximumItemCount
                        }, set: function(value) {
                                this.updateAndNotify("maximumItemCount", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "items", {
                        get: function() {
                            return this._items
                        }, set: function(value) {
                                this.updateAndNotify("items", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "bindableItems", {
                        get: function() {
                            if (!this._bindableItems) {
                                Trace.assert(this.items, "items are expected to be populated before this accessor is called");
                                this._bindableItems = new Entertainment.ObservableArray(this.items).bindableItems
                            }
                            return this._bindableItems
                        }, set: function(value) {
                                this.updateAndNotify("bindableItems", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "moduleAction", {
                        get: function() {
                            if (!this._moduleAction)
                                this._moduleAction = this._createHeaderAction();
                            return this._moduleAction
                        }, set: function(value) {
                                this.updateAndNotify("moduleAction", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "moduleState", {
                        get: function() {
                            return this._moduleState
                        }, set: function(value) {
                                if (this._isModuleStateLocked)
                                    this._lockedViewState = value;
                                else
                                    this.updateAndNotify("moduleState", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "searchText", {
                        get: function() {
                            return this._searchText
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "isDisposed", {
                        get: function() {
                            return this._isDisposed
                        }, enumerable: true, configurable: true
                    });
                    ModuleBase.prototype.dispose = function() {
                        if (this._asyncDelayInitializeWork) {
                            this._asyncDelayInitializeWork.cancel();
                            this._asyncDelayInitializeWork = null
                        }
                        this._bindableItems = null;
                        this._isDisposed = true
                    };
                    ModuleBase.prototype.delayInitialize = function() {
                        var _this = this;
                        if (this.scheduledDelayInitialize && !this.isDisposed && !this._asyncDelayInitializeWork)
                            this._asyncDelayInitializeWork = Entertainment.Utilities.schedulePromiseBelowNormal("ModuleBase::delayInitialize").then(function() {
                                if (!_this.isDisposed)
                                    _this.scheduledDelayInitialize();
                                _this._asyncDelayInitializeWork = null
                            }, function(error) {
                                MS.Entertainment.ViewModels.assert(WinJS.Promise.isCanceledError(error), "ModuleBase::delayInitialize() Unexcepted error. Error: " + (error && error.message));
                                _this._asyncDelayInitializeWork = null
                            })
                    };
                    ModuleBase.prototype.refreshItems = function(){};
                    ModuleBase.prototype.getItems = function() {
                        MS.Entertainment.UI.fail("getItems() should be overridden by its subclass");
                        return null
                    };
                    ModuleBase.prototype.isAvailable = function() {
                        return WinJS.Promise.as(true)
                    };
                    ModuleBase.prototype.load = function() {
                        var _this = this;
                        this.moduleState = 1;
                        return this.isAvailable().then(function(isAvailable) {
                                if (!isAvailable) {
                                    _this.items = [];
                                    _this.moduleState = -5;
                                    return WinJS.Promise.as()
                                }
                                else
                                    return _this.getItems()
                            }).then(function(moduleItemsResult) {
                                if (_this.moduleState === -5)
                                    return;
                                MS.Entertainment.UI.assert(moduleItemsResult && (!moduleItemsResult.items || Array.isArray(moduleItemsResult.items) || moduleItemsResult.items instanceof Entertainment.ObservableArray), "Module subclass returned an object that isn't an array or an observable array.");
                                _this.items = moduleItemsResult && moduleItemsResult.items;
                                var totalCount = moduleItemsResult && moduleItemsResult.totalCount;
                                var itemsCount = _this.items ? _this.items.length : 0;
                                if (itemsCount >= _this.minimumItemCount) {
                                    _this.moduleState = 2;
                                    _this.count = (totalCount === null || totalCount === undefined) ? itemsCount : totalCount
                                }
                                else {
                                    _this.moduleState = 0;
                                    _this.count = 0
                                }
                            }, function(error) {
                                _this.count = 0;
                                _this._getItemsPromise = null;
                                _this.moduleState = -1;
                                var isOnline = Entertainment.UI.NetworkStatusService.isOnline();
                                MS.Entertainment.UI.assert(!isOnline || !error || WinJS.Promise.isCanceledError(error), "ModuleBase::load(). Failed to load module. Error message: " + (error && error.message), String.empty, Entertainment.UI.Debug.errorLevel.low)
                            })
                    };
                    ModuleBase.prototype.reload = function() {
                        this._getItemsPromise = null;
                        return this.load()
                    };
                    ModuleBase.prototype.lockModuleState = function() {
                        this._isModuleStateLocked = true
                    };
                    ModuleBase.prototype.unLockModuleState = function() {
                        this._isModuleStateLocked = false;
                        this.updateAndNotify("moduleState", this._lockedViewState)
                    };
                    ModuleBase.prototype.wrapModuleError = function(error, customMessage) {
                        if (error && !WinJS.Promise.isCanceledError(error) && customMessage)
                            error = new Error(customMessage + " Error message: " + (error && error.message));
                        return WinJS.Promise.wrapError(error)
                    };
                    ModuleBase.isValidSearchText = function(searchText) {
                        try {
                            if (searchText)
                                encodeURIComponent(searchText);
                            return true
                        }
                        catch(error) {
                            return false
                        }
                    };
                    ModuleBase.prototype.freeze = function(){};
                    ModuleBase.prototype.thaw = function(){};
                    ModuleBase.prototype._createHeaderAction = function(args) {
                        MS.Entertainment.UI.fail("_createHeaderAction() should be overridden by its subclass");
                        return null
                    };
                    return ModuleBase
                })(Entertainment.UI.Framework.ObservableBase);
            ViewModels.ModuleBase = ModuleBase
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/pageviewmodelbase.js:8531 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            var UI = MS.Entertainment.UI;
            MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
            var PageViewModelBase = (function(_super) {
                    __extends(PageViewModelBase, _super);
                    function PageViewModelBase() {
                        _super.call(this);
                        this._disposed = false;
                        this._isDelayInitialized = false;
                        this._modules = null;
                        this._networkStatusListener = null;
                        this._isOnline = true;
                        this._notificationList = null;
                        this._applyGlobalNotifications = false;
                        this.mediaItemPromise = null;
                        this.notificationListPromise = null;
                        this.mediaItemPromise = WinJS.Promise.wrap();
                        this._isOnline = UI.NetworkStatusService.isOnline();
                        this._enableNetworkStatusListener()
                    }
                    Object.defineProperty(PageViewModelBase.prototype, "disposed", {
                        get: function() {
                            return this._disposed
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "modules", {
                        get: function() {
                            return this._modules
                        }, set: function(value) {
                                this._modules = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "applyGlobalNotifications", {
                        get: function() {
                            return this._applyGlobalNotifications
                        }, set: function(value) {
                                this._applyGlobalNotifications = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "moduleWaitTime", {
                        get: function() {
                            var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            return configManager.music.pageLoadTimeUntilSpinner
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "viewStateViewModel", {
                        get: function() {
                            MS.Entertainment.UI.fail("viewStateViewModel property should be overridden by its subclass");
                            return null
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "isFirstLocationLoaded", {
                        get: function() {
                            if (Entertainment.ServiceLocator.isServiceRegistered(Entertainment.Services.winJSNavigation))
                                return Entertainment.ServiceLocator.getService(Entertainment.Services.winJSNavigation).isFirstLocationLoaded;
                            return false
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "isOnline", {
                        get: function() {
                            return this._isOnline
                        }, set: function(value) {
                                this.updateAndNotify("isOnline", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "notificationList", {
                        get: function() {
                            return this._notificationList && this._notificationList.dataSource
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "isDelayInitialized", {
                        get: function() {
                            return this._isDelayInitialized
                        }, enumerable: true, configurable: true
                    });
                    PageViewModelBase.prototype.dispose = function() {
                        if (this._disposed)
                            return;
                        if (this._moduleViewStateListeners)
                            this._moduleViewStateListeners.forEach(function(listener) {
                                listener.cancel()
                            });
                        if (this.modules) {
                            this.modules.forEach(function(pageModule) {
                                pageModule.dispose()
                            });
                            this.modules = null
                        }
                        if (this._asyncDelayInitializeWork) {
                            this._asyncDelayInitializeWork.cancel();
                            this._asyncDelayInitializeWork = null
                        }
                        this._releaseNotifications();
                        this._cancelNetworkStatusListener();
                        this._disposed = true
                    };
                    Object.defineProperty(PageViewModelBase.prototype, "isDisposed", {
                        get: function() {
                            return this._disposed
                        }, enumerable: true, configurable: true
                    });
                    PageViewModelBase.prototype.freeze = function() {
                        this._cancelNetworkStatusListener();
                        if (this.modules)
                            this.modules.forEach(function(pageModule) {
                                if (pageModule && pageModule.freeze)
                                    pageModule.freeze()
                            })
                    };
                    PageViewModelBase.prototype.listenForModuleViewStateChanges = function() {
                        var _this = this;
                        if (this.modules && this.modules.length > 0)
                            this._moduleViewStateListeners = this.modules.map(function(newModule) {
                                return UI.Framework.addEventHandlers(newModule, {moduleStateChanged: _this._onModuleViewStateChanged.bind(_this)})
                            })
                    };
                    PageViewModelBase.prototype.loadModules = function(){};
                    PageViewModelBase.prototype.delayInitialize = function() {
                        var _this = this;
                        if (this._isDelayInitialized || this.isDisposed)
                            return;
                        this._isDelayInitialized = true;
                        if (this.scheduledDelayInitialize && !this._asyncDelayInitializeWork)
                            this._asyncDelayInitializeWork = Entertainment.Utilities.schedulePromiseBelowNormal("PageViewModelBase::delayInitialize").then(function() {
                                if (!_this.isDisposed)
                                    _this.scheduledDelayInitialize();
                                _this._asyncDelayInitializeWork = null
                            }, function(error) {
                                MS.Entertainment.ViewModels.assert(WinJS.Promise.isCanceledError(error), "PageViewModelBase::delayInitialize() Unexcepted error. Error: " + (error && error.message));
                                _this._asyncDelayInitializeWork = null
                            });
                        if (Entertainment.ServiceLocator.isServiceRegistered(Entertainment.Services.listNotification))
                            this._initializeNotificationList()
                    };
                    PageViewModelBase.prototype.refreshViewState = function() {
                        this._onModuleViewStateChanged()
                    };
                    PageViewModelBase.prototype.thaw = function() {
                        this._enableNetworkStatusListener();
                        if (this.modules)
                            this.modules.forEach(function(pageModule) {
                                if (pageModule && pageModule.thaw)
                                    pageModule.thaw()
                            })
                    };
                    PageViewModelBase.prototype._initializeLocalNotifications = function() {
                        var notifications = [];
                        return WinJS.Promise.as(notifications)
                    };
                    PageViewModelBase.prototype._globalNotificationsFilter = function(notification) {
                        return false
                    };
                    PageViewModelBase.prototype._reinitializeNotificationList = function() {
                        if (this.notificationList)
                            this._initializeNotificationList()
                    };
                    PageViewModelBase.prototype._releaseNotificationListPromise = function() {
                        if (this.notificationListPromise) {
                            this.notificationListPromise.cancel();
                            this.notificationListPromise = null
                        }
                    };
                    PageViewModelBase.prototype._releaseNotifications = function() {
                        this._releaseNotificationListPromise();
                        if (this._notificationList) {
                            this._notificationList.dispose();
                            this._notificationList = null
                        }
                    };
                    PageViewModelBase.prototype._initializeNotificationList = function() {
                        var _this = this;
                        if (!this.isDisposed) {
                            this._releaseNotifications();
                            this.notificationListPromise = this._initializeLocalNotifications();
                            this.notificationListPromise.done(function(notifications) {
                                if (_this.isDisposed)
                                    return;
                                var notificationList = new UI.ObservableListNotificationAdapter(!_this.applyGlobalNotifications, _this._globalNotificationsFilter.bind(_this));
                                notificationList.append(notifications);
                                _this._setNotificationList(notificationList)
                            }, function(error) {
                                ViewModels.assert(WinJS.Promise.isCanceledError(error), "PageViewModelBase::_initializeNotificationList() Failed to get notifications with error: " + error && error.message)
                            })
                        }
                    };
                    PageViewModelBase.prototype._setNotificationList = function(value) {
                        if (!this._notificationList || !this._notificationList.isEqual(value)) {
                            var oldNotificationList = this._notificationList;
                            var oldDataSource = this.notificationList;
                            this._notificationList = value;
                            var newDataSource = this.notificationList;
                            this.dispatchChangeAndNotify("notificationList", newDataSource, oldDataSource);
                            if (oldNotificationList)
                                oldNotificationList.dispose()
                        }
                    };
                    PageViewModelBase.prototype._addModuleAccessorProperties = function() {
                        var _this = this;
                        if (!this.modules)
                            return;
                        this.modules.forEach(function(pageModule) {
                            var moduleName = pageModule && pageModule.name;
                            if (!moduleName)
                                return;
                            Object.defineProperty(_this, moduleName, {
                                get: function() {
                                    return pageModule
                                }, enumerable: true, configurable: true
                            })
                        })
                    };
                    PageViewModelBase.prototype._updateSmartBuyStateEngineState = function() {
                        if (this._smartBuyStateEngine)
                            this._smartBuyStateEngine.updateState()
                    };
                    PageViewModelBase.prototype._enableNetworkStatusListener = function() {
                        var _this = this;
                        this._cancelNetworkStatusListener();
                        this._networkStatusListener = UI.Framework.addEventHandlers(Entertainment.ServiceLocator.getService(Entertainment.Services.uiState), {networkStatusChanged: function() {
                                return _this._onNetworkStatusChanged()
                            }});
                        this._onNetworkStatusChanged()
                    };
                    PageViewModelBase.prototype._cancelNetworkStatusListener = function() {
                        if (this._networkStatusListener) {
                            this._networkStatusListener.cancel();
                            this._networkStatusListener = null
                        }
                    };
                    PageViewModelBase.prototype._isNeededForPageReady = function(pageModule) {
                        return pageModule && !pageModule.isExcludedFromPageState
                    };
                    PageViewModelBase.prototype._onModuleViewStateChanged = function() {
                        var _this = this;
                        var allModulesExist = this.modules.every(function(m) {
                                return !!m
                            });
                        if (!allModulesExist)
                            return;
                        this._refreshEmptyViewState();
                        var moduleStates = this.modules.filter(function(m) {
                                return _this._isNeededForPageReady(m)
                            }).map(function(m) {
                                return m.moduleState
                            });
                        var someModulesLoading = moduleStates.some(function(state) {
                                return state === 1
                            });
                        if (someModulesLoading) {
                            this.viewStateViewModel.viewState = 1;
                            return
                        }
                        var allModulesCompleted = moduleStates.every(function(state) {
                                return Entertainment.Utilities.ViewState.isStateCompleted(state)
                            });
                        if (!allModulesCompleted)
                            return;
                        var someModulesInError = moduleStates.some(function(state) {
                                return state === -1
                            });
                        if (someModulesInError) {
                            if (this.isOnline)
                                this.viewStateViewModel.viewState = -1;
                            else
                                this.viewStateViewModel.viewState = -2;
                            return
                        }
                        var allModulesEmpty = moduleStates.every(function(state) {
                                return state === 0
                            });
                        if (allModulesEmpty) {
                            this.viewStateViewModel.viewState = 0;
                            return
                        }
                        this.viewStateViewModel.viewState = 2
                    };
                    PageViewModelBase.prototype._onNetworkStatusChanged = function() {
                        this.isOnline = UI.NetworkStatusService.isOnline();
                        if (this.viewStateViewModel.isSupportedViewState(-2) && Entertainment.Utilities.ViewState.isStateCompleted(this.viewStateViewModel.viewState) && this.viewStateViewModel.viewState !== 2 && this.viewStateViewModel.viewState !== 0)
                            this.loadModules();
                        this._updateSmartBuyStateEngineState();
                        if (this.isOnline)
                            this._onNetworkAvailable();
                        else
                            this._onNetworkUnavailable()
                    };
                    PageViewModelBase.prototype._onNetworkAvailable = function() {
                        var offlineNotificationIndex = this._getOfflineNotificationIndex();
                        if (this.notificationList && offlineNotificationIndex >= 0)
                            this.notificationList.removeAt(offlineNotificationIndex)
                    };
                    PageViewModelBase.prototype._onNetworkUnavailable = function() {
                        if (this.notificationList && this._getOfflineNotificationIndex() < 0) {
                            var offlineNotification = this._createOfflineNotification();
                            if (offlineNotification)
                                this.notificationList.push(offlineNotification)
                        }
                    };
                    PageViewModelBase.prototype._getOfflineNotificationIndex = function() {
                        if (this.notificationList) {
                            var matches = this.notificationList.filter(function(item) {
                                    return item.category === UI.NotificationCategoryEnum.networkStatus
                                });
                            var notification = matches && matches.length > 0 ? matches[0] : null
                        }
                        return this.notificationList ? this.notificationList.indexOf(notification) : -1
                    };
                    PageViewModelBase.prototype._createOfflineNotification = function() {
                        return null
                    };
                    PageViewModelBase.prototype._initializeModules = function(){};
                    PageViewModelBase.prototype._refreshEmptyViewState = function(){};
                    PageViewModelBase.prototype._updateModuleAndNotify = function(moduleKey, name, value) {
                        var oldValue = this.modules[moduleKey];
                        this.modules[moduleKey] = value;
                        this.dispatchChangeAndNotify(name, value, oldValue)
                    };
                    return PageViewModelBase
                })(UI.Framework.ObservableBase);
            ViewModels.PageViewModelBase = PageViewModelBase
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/contentquerymodule.js:8873 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
            (function(DeDupeFilter) {
                DeDupeFilter[DeDupeFilter["noDedupe"] = 0] = "noDedupe";
                DeDupeFilter[DeDupeFilter["mapOnly"] = 1] = "mapOnly";
                DeDupeFilter[DeDupeFilter["mapAndRemove"] = 2] = "mapAndRemove"
            })(ViewModels.DeDupeFilter || (ViewModels.DeDupeFilter = {}));
            var DeDupeFilter = ViewModels.DeDupeFilter;
            var ContentQueryModule = (function(_super) {
                    __extends(ContentQueryModule, _super);
                    function ContentQueryModule(_contentModuleQueryModel, moduleName) {
                        _super.call(this, moduleName);
                        this._contentModuleQueryModel = _contentModuleQueryModel;
                        this._contentQueryWatcher = null;
                        ViewModels.assert(this._contentModuleQueryModel.queryType, "A query type must be defined for an content query module.");
                        ViewModels.assert(this._contentModuleQueryModel.queryId, "A query ID must be defined for an content query module's query.");
                        ViewModels.assert(this._contentModuleQueryModel.getItemsArray, "getItemsArray must be defined for an content query module's query.");
                        this._contentModuleQueryModel.supportedMediaTypes = this._contentModuleQueryModel.supportedMediaTypes || [];
                        this._deDupe = this._contentModuleQueryModel.deDupe || 0;
                        this._setProperty = Entertainment.Utilities.BindingAgnostic.setProperty
                    }
                    Object.defineProperty(ContentQueryModule.prototype, "headerText", {
                        get: function() {
                            return this._contentModuleQueryModel.headerText || String.empty
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ContentQueryModule.prototype, "_queryWatcher", {
                        get: function() {
                            if (!this._contentQueryWatcher)
                                this._contentQueryWatcher = new Entertainment.Framework.QueryWatcher(this._contentModuleQueryModel.queryId + "_module");
                            return this._contentQueryWatcher
                        }, enumerable: true, configurable: true
                    });
                    ContentQueryModule.prototype._isSupportedMediaType = function(item) {
                        var _this = this;
                        if (!this._contentModuleQueryModel.supportedMediaTypes || this._contentModuleQueryModel.supportedMediaTypes.length === 0)
                            return true;
                        var actionType = item.actionType;
                        if (actionType) {
                            var itemContentType = WinJS.Utilities.getMember("spotlightAction.contentType", item);
                            var hasSupportedMediaSubTypes = this._contentModuleQueryModel.supportedMediaSubTypes && this._contentModuleQueryModel.supportedMediaSubTypes.length > 0;
                            return this._contentModuleQueryModel.supportedMediaTypes.some(function(mediaType) {
                                    var isValid = (mediaType === actionType.mediaType);
                                    if (isValid && hasSupportedMediaSubTypes && itemContentType && actionType.mediaType === MS.Entertainment.Data.Augmenter.Spotlight.MediaType.FlexHub && itemContentType !== MS.Entertainment.Data.Augmenter.Spotlight.ContentType.None)
                                        isValid = _this._contentModuleQueryModel.supportedMediaSubTypes.some(function(mediaSubType) {
                                            return mediaSubType === itemContentType
                                        });
                                    return isValid
                                })
                        }
                        return false
                    };
                    ContentQueryModule.prototype._wrapItem = function(item) {
                        this._setProperty(item, "queryId", this._contentModuleQueryModel.queryId);
                        var editorialType = WinJS.Utilities.getMember("actionType.mediaType", item);
                        if (editorialType) {
                            if (editorialType === Entertainment.Data.Augmenter.Marketplace.EditorialType.Series)
                                Entertainment.Utilities.BindingAgnostic.setProperty(item, "seriesTitle", item.name || String.empty);
                            if (editorialType !== Entertainment.Data.Augmenter.Marketplace.EditorialType.Hub && editorialType !== Entertainment.Data.Augmenter.Marketplace.EditorialType.FlexHub)
                                item = Entertainment.Utilities.convertEditorialItem(item)
                        }
                        var action = ContentQueryModule._getFeaturedItemAction(item);
                        if (action) {
                            item.actionId = action.actionId;
                            item.actionParameter = action.actionParameter;
                            item.automationId = action.automationId;
                            item.imageUrl = item.imagePrimaryUrl
                        }
                        return item
                    };
                    ContentQueryModule.createLegacyNavigateAction = function(page, hub, label) {
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        var navigateAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.navigate);
                        navigateAction.parameter = {
                            page: page, hub: hub
                        };
                        navigateAction.title = label;
                        return navigateAction
                    };
                    ContentQueryModule._getFeaturedItemAction = function(item) {
                        var actionProperties = {
                                actionId: null, actionParameter: null
                            };
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        var editorialMediaType = WinJS.Utilities.getMember("actionType.mediaType", item);
                        var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        var navigateToLxDetails = false;
                        if (editorialMediaType)
                            switch (editorialMediaType) {
                                case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.FlexHub:
                                    if (actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.flexHubNavigate)) {
                                        actionProperties.actionId = Entertainment.UI.Actions.ActionIdentifiers.flexHubNavigate;
                                        actionProperties.actionParameter = {targetFeed: item.actionTarget}
                                    }
                                    else {
                                        actionProperties.actionId = Entertainment.UI.Actions.ActionIdentifiers.featuredSetsNavigate;
                                        actionProperties.actionParameter = {
                                            page: MS.Entertainment.UI.Monikers.flexHubPage, targetFeed: item.actionTarget
                                        }
                                    }
                                    break;
                                case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Movie:
                                case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Series:
                                case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Season:
                                case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Episode:
                                    navigateToLxDetails = true;
                                    break;
                                default:
                                    ViewModels.fail("Unexpected editorial mediaType");
                                    break
                            }
                        else if (Entertainment.Utilities.isMovie(item) || Entertainment.Utilities.isAnyTV(item))
                            navigateToLxDetails = true;
                        else if (item.isGenreItem) {
                            if (actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.videoMarketplaceNavigate)) {
                                actionProperties.actionId = Entertainment.UI.Actions.ActionIdentifiers.videoMarketplaceNavigate;
                                var monikerName;
                                var pageName;
                                var hubName;
                                if (item.isMovieGenre) {
                                    monikerName = MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases;
                                    pageName = MS.Entertainment.UI.Monikers.movieMarketplace;
                                    hubName = MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases
                                }
                                else if (item.isTvGenre) {
                                    monikerName = MS.Entertainment.UI.Monikers.tvMarketplaceNewReleases;
                                    pageName = MS.Entertainment.UI.Monikers.tvMarketplace;
                                    hubName = MS.Entertainment.UI.Monikers.tvMarketplaceNewReleases
                                }
                                else
                                    Trace.fail("Unknown genre type");
                                if (monikerName && pageName && hubName)
                                    actionProperties.actionParameter = {
                                        moniker: monikerName, page: pageName, hub: hubName, args: {
                                                selectHub: true, selectPrimaryModifier: item.name
                                            }
                                    }
                            }
                        }
                        else if (item.studio) {
                            if (actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.videoMarketplaceNavigate)) {
                                actionProperties.actionId = Entertainment.UI.Actions.ActionIdentifiers.videoMarketplaceNavigate;
                                actionProperties.actionParameter = {
                                    moniker: MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases, page: MS.Entertainment.UI.Monikers.movieMarketplace, hub: MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases, args: {
                                            selectHub: true, selectSecondaryModifier: item.studio
                                        }
                                }
                            }
                        }
                        else if (item.network) {
                            if (actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.videoMarketplaceNavigate)) {
                                actionProperties.actionId = Entertainment.UI.Actions.ActionIdentifiers.videoMarketplaceNavigate;
                                actionProperties.actionParameter = {
                                    moniker: MS.Entertainment.UI.Monikers.tvMarketplaceNewReleases, page: MS.Entertainment.UI.Monikers.tvMarketplace, hub: MS.Entertainment.UI.Monikers.tvMarketplaceNewReleases, args: {
                                            selectHub: true, selectSecondaryModifier: item.network
                                        }
                                }
                            }
                        }
                        else
                            ViewModels.fail("Unexpected mediaType");
                        if (!actionProperties.actionId)
                            if (actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.videoDetailsNavigate)) {
                                actionProperties.actionId = Entertainment.UI.Actions.ActionIdentifiers.videoDetailsNavigate;
                                actionProperties.actionParameter = {mediaItem: item}
                            }
                            else if (actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.navigateToVideoDetails) && navigateToLxDetails) {
                                actionProperties.actionId = Entertainment.UI.Actions.ActionIdentifiers.navigateToVideoDetails;
                                actionProperties.actionParameter = {data: item}
                            }
                            else {
                                actionProperties.actionId = Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails;
                                actionProperties.actionParameter = {
                                    mediaItem: item, showDetails: true, autoPlay: false
                                }
                            }
                        return actionProperties
                    };
                    ContentQueryModule.getEditorialItems = function(queryResult, listIndex) {
                        if (typeof listIndex === "undefined")
                            listIndex = 0;
                        var result = queryResult.result;
                        if (!listIndex)
                            listIndex = 0;
                        var length = WinJS.Utilities.getMember("entriesArray.length", result);
                        if (length && length > listIndex) {
                            var listItems = result.entriesArray[listIndex].editorialItems;
                            return listItems.map(function(item) {
                                    return item.editorialItem
                                })
                        }
                    };
                    ContentQueryModule.getBrowseItems = function(queryResult) {
                        var items = WinJS.Utilities.getMember("result.itemsArray", queryResult) || [];
                        items.forEach(function(item, index) {
                            item.position = index + 1;
                            return item
                        });
                        return items
                    };
                    ContentQueryModule.getRecommendedItems = function(queryResult) {
                        var items = WinJS.Utilities.getMember("result.filteredItemsArray", queryResult) || [];
                        return items
                    };
                    ContentQueryModule.prototype._createHeaderAction = function() {
                        if (this._contentModuleQueryModel.headerActionFactory)
                            return this._contentModuleQueryModel.headerActionFactory();
                        return null
                    };
                    Object.defineProperty(ContentQueryModule.prototype, "deDupe", {
                        get: function() {
                            return this._deDupe
                        }, set: function(value) {
                                this.updateAndNotify("deDupe", value)
                            }, enumerable: true, configurable: true
                    });
                    ContentQueryModule.prototype.isAvailable = function() {
                        if (this._contentModuleQueryModel.isAvailable)
                            return this._contentModuleQueryModel.isAvailable();
                        return WinJS.Promise.as(true)
                    };
                    ContentQueryModule.prototype.getItems = function() {
                        var _this = this;
                        if (!this._getItemsPromise) {
                            var query = new this._contentModuleQueryModel.queryType;
                            query.queryId = this._contentModuleQueryModel.queryId;
                            for (var parameterKey in this._contentModuleQueryModel.queryParameters)
                                query[parameterKey] = this._contentModuleQueryModel.queryParameters[parameterKey];
                            this._queryWatcher.registerQuery(query);
                            this._getItemsPromise = query.execute().then(function(queryResult) {
                                query.dispose();
                                return _this._contentModuleQueryModel.getItemsArray(queryResult).filter(_this._isSupportedMediaType.bind(_this))
                            }, function(error) {
                                query.dispose();
                                return _this.wrapModuleError(error, "Failed to get content query media items.")
                            }).then(function(supportedResultItems) {
                                _this.dispatchEvent("moduleItemsCompleting", {
                                    sender: _this, items: supportedResultItems
                                });
                                if (_this.maximumItemCount > 0 && supportedResultItems.length > _this.maximumItemCount)
                                    supportedResultItems.splice(_this.maximumItemCount, supportedResultItems.length - _this.maximumItemCount);
                                var wrappedItems = supportedResultItems.map(_this._wrapItem.bind(_this));
                                return {items: wrappedItems}
                            })
                        }
                        return this._getItemsPromise
                    };
                    ContentQueryModule.newReleasesListIndex = 0;
                    ContentQueryModule.featuredItemsListIndex = 1;
                    return ContentQueryModule
                })(ViewModels.ModuleBase);
            ViewModels.ContentQueryModule = ContentQueryModule
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/coremodulebase.js:9147 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            var CoreModuleBase = (function(_super) {
                    __extends(CoreModuleBase, _super);
                    function CoreModuleBase(moduleOptions) {
                        _super.call(this);
                        this._bindableItems = null;
                        this._count = -1;
                        this._isModuleStateLocked = false;
                        this._items = null;
                        this._lockedModuleState = -3;
                        this._moduleState = -3;
                        this._queryWatcher = null;
                        this._query = null;
                        Trace.assert(moduleOptions, "CoreModuleBase::constructor(). moduleOptions is expected to create a module");
                        this._moduleOptions = moduleOptions;
                        this._queryWatcher = new Entertainment.Framework.QueryWatcher(this.moduleOptions.queryId);
                        if (this._moduleOptions.queryType)
                            this._query = new this._moduleOptions.queryType;
                        else if (this._moduleOptions.queryFactory)
                            this._query = this._moduleOptions.queryFactory();
                        else
                            Trace.fail("Cannot create CoreModuleBase without a queryType or queryFactory");
                        this._query.queryId = this._moduleOptions.queryId;
                        this.updateQuery(this._moduleOptions.queryParameters)
                    }
                    Object.defineProperty(CoreModuleBase.prototype, "moduleOptions", {
                        get: function() {
                            return this._moduleOptions
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "isExcludedFromPageState", {
                        get: function() {
                            return this.moduleOptions.isExcludedFromPageState
                        }, set: function(value) {
                                this.moduleOptions.isExcludedFromPageState = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "name", {
                        get: function() {
                            return this._moduleOptions.name
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "displayName", {
                        get: function() {
                            return this._moduleOptions.displayName
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "count", {
                        get: function() {
                            return this._count
                        }, set: function(value) {
                                this.updateAndNotify("count", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "items", {
                        get: function() {
                            return this._items
                        }, set: function(value) {
                                this.updateAndNotify("items", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "bindableItems", {
                        get: function() {
                            if (!this._bindableItems) {
                                Trace.assert(this.items, "items are expected to be populated before this accessor is called");
                                this._bindableItems = new Entertainment.ObservableArray(this.items).bindableItems
                            }
                            return this._bindableItems
                        }, set: function(value) {
                                this.updateAndNotify("bindableItems", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "moduleAction", {
                        get: function() {
                            if (!this._moduleAction)
                                this._moduleAction = this._createModuleAction();
                            return this._moduleAction
                        }, set: function(value) {
                                this.updateAndNotify("moduleAction", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "moduleState", {
                        get: function() {
                            return this._moduleState
                        }, set: function(value) {
                                if (this._isModuleStateLocked)
                                    this._lockedModuleState = value;
                                else
                                    this.updateAndNotify("moduleState", value)
                            }, enumerable: true, configurable: true
                    });
                    CoreModuleBase.prototype.isAvailable = function() {
                        return this._moduleOptions.isAvailable ? this._moduleOptions.isAvailable() : WinJS.Promise.as(true)
                    };
                    CoreModuleBase.prototype.dispose = function() {
                        if (this._asyncDelayLoadWork) {
                            this._asyncDelayLoadWork.cancel();
                            this._asyncDelayLoadWork = null
                        }
                        if (this._query) {
                            this._query.dispose();
                            this._query = null
                        }
                        if (this.items && this.items.dispose)
                            this.items.dispose();
                        this.items = null;
                        this._bindableItems = null;
                        this._isDisposed = true
                    };
                    CoreModuleBase.prototype.freeze = function(){};
                    CoreModuleBase.prototype.thaw = function(){};
                    CoreModuleBase.prototype.load = function() {
                        var _this = this;
                        this.moduleState = 1;
                        return this.isAvailable().then(function(isAvailable) {
                                var items;
                                if (isAvailable)
                                    items = _this._getItems().then(function(moduleItemsResult) {
                                        _this._onGetItemsCompleted(moduleItemsResult)
                                    });
                                else {
                                    _this.items = [];
                                    _this.moduleState = -5
                                }
                                return items
                            }).then(null, function(error) {
                                _this.count = 0;
                                _this._getItemsPromise = null;
                                _this.moduleState = -1;
                                var isOnline = Entertainment.UI.NetworkStatusService.isOnline();
                                Trace.assert(!isOnline || !error || WinJS.Promise.isCanceledError(error), "CoreModuleBase::load(). Failed to load module. Error message: " + (error && error.message), String.empty, Entertainment.UI.Debug.errorLevel.low)
                            })
                    };
                    CoreModuleBase.prototype.reload = function() {
                        this._getItemsPromise = null;
                        return this.load()
                    };
                    CoreModuleBase.prototype.delayInitialize = function() {
                        var _this = this;
                        if (this.scheduledDelayInitialize && !this._isDisposed && !this._asyncDelayLoadWork)
                            this._asyncDelayLoadWork = Entertainment.Utilities.schedulePromiseBelowNormal("CoreModuleBase::delayInitialize").then(function() {
                                if (!_this._isDisposed)
                                    _this.scheduledDelayInitialize();
                                _this._asyncDelayLoadWork = null
                            }, function(error) {
                                Trace.assert(WinJS.Promise.isCanceledError(error), "CoreModuleBase::delayInitialize() Unexcepted error. Error: " + (error && error.message));
                                _this._asyncDelayLoadWork = null
                            })
                    };
                    CoreModuleBase.prototype.scheduledDelayInitialize = function() {
                        this.refreshItems()
                    };
                    CoreModuleBase.prototype.refreshItems = function() {
                        if (this._moduleOptions.refreshItems)
                            this._moduleOptions.refreshItems(this.items)
                    };
                    CoreModuleBase.prototype.updateQuery = function(queryParameters) {
                        for (var parameterKey in queryParameters)
                            this._query[parameterKey] = queryParameters[parameterKey]
                    };
                    CoreModuleBase.prototype.lockModuleState = function() {
                        this._isModuleStateLocked = true
                    };
                    CoreModuleBase.prototype.unLockModuleState = function() {
                        this._isModuleStateLocked = false;
                        this.updateAndNotify("moduleState", this._lockedModuleState)
                    };
                    CoreModuleBase.prototype.wrapModuleError = function(error, customMessage) {
                        if (error && !WinJS.Promise.isCanceledError(error) && customMessage)
                            error = new Error(customMessage + " Error message: " + (error && error.message));
                        return WinJS.Promise.wrapError(error)
                    };
                    CoreModuleBase.prototype._getItems = function() {
                        if (!this._getItemsPromise && this._moduleOptions)
                            this._getItemsPromise = this._executeQuery();
                        return WinJS.Promise.as(this._getItemsPromise)
                    };
                    CoreModuleBase.prototype._onGetItemsCompleted = function(queryResult) {
                        this._processItems(queryResult);
                        this._updateModuleState()
                    };
                    CoreModuleBase.prototype._executeQuery = function() {
                        var _this = this;
                        this._queryWatcher.registerQuery(this._query);
                        return this._query.execute().then(null, function(error) {
                                return _this.wrapModuleError(error, "Failed to get content query media items.")
                            })
                    };
                    CoreModuleBase.prototype._updateModuleState = function() {
                        if (this.count > 0)
                            this.moduleState = 2;
                        else
                            this.moduleState = 0
                    };
                    CoreModuleBase.prototype._processItems = function(queryResult) {
                        if (this._moduleOptions.itemsFactory) {
                            var processedResult = this._moduleOptions.itemsFactory(queryResult, this.moduleOptions.collectionFilter);
                            this.items = processedResult.items;
                            this.count = processedResult.totalCount
                        }
                        else {
                            var items = WinJS.Utilities.getMember("result.items", queryResult);
                            if (items) {
                                this.items = items;
                                this.count = items.length
                            }
                        }
                    };
                    CoreModuleBase.prototype._createModuleAction = function() {
                        if (!this._moduleOptions.moduleActionFactory)
                            return this._createDefaultModuleAction();
                        return this._moduleOptions.moduleActionFactory(this._moduleOptions.moduleActionFactoryParameter)
                    };
                    CoreModuleBase.prototype._createDefaultModuleAction = function() {
                        if (!this._moduleOptions.moduleActionProperties)
                            return null;
                        Trace.assert(this._moduleOptions.moduleActionProperties.actionId, "CoreModuleBase::_createDefaultModuleAction(). actionId is expected to create a default module action");
                        var actionService = Entertainment.ServiceLocator.getService(Entertainment.Services.actions);
                        var moduleAction = actionService.getAction(this._moduleOptions.moduleActionProperties.actionId);
                        if (this._moduleOptions.moduleActionProperties.automationId)
                            moduleAction.automationId = this._moduleOptions.moduleActionProperties.automationId;
                        moduleAction.title = this._moduleOptions.moduleActionProperties.title;
                        moduleAction.label = this._moduleOptions.moduleActionProperties.label;
                        moduleAction.parameter = this._moduleOptions.moduleActionProperties.actionParameter;
                        return moduleAction
                    };
                    return CoreModuleBase
                })(Entertainment.UI.Framework.ObservableBase);
            ViewModels.CoreModuleBase = CoreModuleBase;
            var UserDataModuleBase = (function(_super) {
                    __extends(UserDataModuleBase, _super);
                    function UserDataModuleBase() {
                        _super.apply(this, arguments)
                    }
                    UserDataModuleBase.prototype.dispose = function() {
                        this._clearSignInBindings();
                        _super.prototype.dispose.call(this)
                    };
                    UserDataModuleBase.prototype._clearSignInBindings = function() {
                        if (this.signInBinding) {
                            this.signInBinding.cancel();
                            this.signInBinding = null
                        }
                        if (this.signInTimeout) {
                            this.signInTimeout.cancel();
                            this.signInTimeout = null
                        }
                    };
                    UserDataModuleBase.prototype._getItems = function() {
                        var _this = this;
                        var returnPromise;
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        if (configurationManager.service.lastSignedInUserXuid)
                            returnPromise = _super.prototype._getItems.call(this);
                        else {
                            var completion;
                            var signInCompletedSignal = new MS.Entertainment.UI.Framework.Signal;
                            var onSignIn = function(isSignedIn) {
                                    if (isSignedIn !== false) {
                                        _this._clearSignInBindings();
                                        signInCompletedSignal.complete()
                                    }
                                };
                            var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            this.signInBinding = WinJS.Binding.bind(signInService, {isSignedIn: onSignIn});
                            this.signInTimeout = WinJS.Promise.timeout(UserDataModuleBase._signInTimeoutMS).then(onSignIn);
                            returnPromise = signInCompletedSignal.promise.then(function() {
                                return _super.prototype._getItems.call(_this)
                            })
                        }
                        return returnPromise
                    };
                    UserDataModuleBase._signInTimeoutMS = 10000;
                    return UserDataModuleBase
                })(CoreModuleBase);
            ViewModels.UserDataModuleBase = UserDataModuleBase
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/video_win/videomodulefactory.js:9445 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            (function(QueryIds) {
                QueryIds.featuredMovies = "featuredMovies";
                QueryIds.featuredSets = "featuredSets";
                QueryIds.featuredTvSeries = "featuredTvSeries";
                QueryIds.newMovies = "newMovies";
                QueryIds.newTvSeries = "newTvSeries";
                QueryIds.similarMovies = "similarMovies";
                QueryIds.topSellingMovies = "topSellingMovies";
                QueryIds.topSellingTv = "topSellingTv"
            })(ViewModels.QueryIds || (ViewModels.QueryIds = {}));
            var QueryIds = ViewModels.QueryIds;
            (function(ModuleNames) {
                ModuleNames.featuredMoviesModule = "featuredMoviesModule";
                ModuleNames.featuredTvSeriesModule = "featuredTvSeriesModule";
                ModuleNames.lastNightTvModule = "lastNightTvModule";
                ModuleNames.moviesFeaturedSetsModule = "moviesFeaturedSetsModule";
                ModuleNames.moviesHeroModule = "moviesHeroModule";
                ModuleNames.newMoviesModule = "newMoviesModule";
                ModuleNames.newTvSeriesModule = "newTvSeriesModule";
                ModuleNames.similarMovies = "similarMovies";
                ModuleNames.topSellingMoviesModule = "topSellingMoviesModule";
                ModuleNames.topSellingTvModule = "topSellingTvModule";
                ModuleNames.tvFeaturedSetsModule = "tvFeaturedSetsModule";
                ModuleNames.tvHeroModule = "tvHeroModule"
            })(ViewModels.ModuleNames || (ViewModels.ModuleNames = {}));
            var ModuleNames = ViewModels.ModuleNames;
            var ContentQueryModule = MS.Entertainment.ViewModels.ContentQueryModule;
            var CoreModuleBase = MS.Entertainment.ViewModels.CoreModuleBase;
            var VideoModuleFactory = (function() {
                    function VideoModuleFactory(){}
                    VideoModuleFactory._isSupportedTvMediaType = function(item) {
                        return VideoModuleFactory._isSupportedMediaType(item, VideoModuleFactory.supportedTvMediaTypes)
                    };
                    VideoModuleFactory._isSupportedMovieMediaType = function(item) {
                        return VideoModuleFactory._isSupportedMediaType(item, VideoModuleFactory.supportedMovieMediaTypes)
                    };
                    VideoModuleFactory._isSupportedEditorialSeriesMediaType = function(item) {
                        return VideoModuleFactory._isSupportedMediaType(item, VideoModuleFactory.supportedEditorialTvMediaTypes)
                    };
                    VideoModuleFactory._isSupportedEditorialMoviesMediaType = function(item) {
                        return VideoModuleFactory._isSupportedMediaType(item, VideoModuleFactory.supportedEditorialMovieMediaTypes)
                    };
                    VideoModuleFactory._isSupportedFlexHubMediaType = function(item) {
                        return VideoModuleFactory._isSupportedMediaType(item, VideoModuleFactory.supportedFlexHubMediaTypes)
                    };
                    VideoModuleFactory._isSupportedTvFlexHubMediaType = function(item) {
                        return VideoModuleFactory._isSupportedFlexHubMediaAndContentType(item, VideoModuleFactory.supportedFlexHubTvContentTypes)
                    };
                    VideoModuleFactory._isSupportedMoviesFlexHubMediaType = function(item) {
                        return VideoModuleFactory._isSupportedFlexHubMediaAndContentType(item, VideoModuleFactory.supportedFlexHubMoviesContentTypes)
                    };
                    VideoModuleFactory._isSupportedFlexHubMediaAndContentType = function(item, supportedMediaTypes) {
                        var isSupportedMediaType = VideoModuleFactory._isSupportedFlexHubMediaType(item);
                        var isSupportedContentType = VideoModuleFactory._isSupportedFlexHubContentType(item, supportedMediaTypes);
                        return isSupportedMediaType && isSupportedContentType
                    };
                    VideoModuleFactory._isSupportedMediaType = function(item, supportedMediaTypes) {
                        if (!supportedMediaTypes || supportedMediaTypes.length === 0)
                            return true;
                        var actionType = item.actionType;
                        if (actionType)
                            return supportedMediaTypes.some(function(mediaType) {
                                    return mediaType === actionType.mediaType
                                });
                        return false
                    };
                    VideoModuleFactory._isSupportedFlexHubContentType = function(item, supportedContentTypes) {
                        if (!supportedContentTypes || supportedContentTypes.length === 0)
                            return true;
                        var itemContentType = WinJS.Utilities.getMember("spotlightAction.contentType", item);
                        if (itemContentType !== null && itemContentType !== undefined)
                            return supportedContentTypes.some(function(contentType) {
                                    return itemContentType === contentType
                                });
                        return false
                    };
                    VideoModuleFactory._wrapItem = function(item, queryId) {
                        Entertainment.Utilities.BindingAgnostic.setProperty(item, "queryId", queryId);
                        var editorialType = WinJS.Utilities.getMember("actionType.mediaType", item);
                        if (editorialType) {
                            if (editorialType === Entertainment.Data.Augmenter.Marketplace.EditorialType.Series)
                                Entertainment.Utilities.BindingAgnostic.setProperty(item, "seriesTitle", item.name || String.empty);
                            if (editorialType !== Entertainment.Data.Augmenter.Marketplace.EditorialType.Hub && editorialType !== Entertainment.Data.Augmenter.Marketplace.EditorialType.FlexHub)
                                item = Entertainment.Utilities.convertEditorialItem(item)
                        }
                        var action = ContentQueryModule._getFeaturedItemAction(item);
                        if (action) {
                            item.actionId = action.actionId;
                            item.actionParameter = action.actionParameter;
                            item.automationId = action.automationId;
                            item.imageUrl = item.imagePrimaryUrl
                        }
                        return item
                    };
                    VideoModuleFactory._getEdsItemsFactory = function(queryResult, queryId, filterFunction) {
                        var itemsArray = queryResult.result && queryResult.result.itemsArray || [];
                        if (itemsArray)
                            itemsArray = itemsArray.map(function(item) {
                                return item.items[0]
                            }).filter(function(item) {
                                if (filterFunction(item)) {
                                    item = VideoModuleFactory._wrapItem(item, queryId);
                                    return true
                                }
                                return false
                            });
                        var itemsCount = itemsArray ? itemsArray.length : 0;
                        var totalCount = queryResult.result && queryResult.result.totalCount || itemsCount;
                        return {
                                items: itemsArray, totalCount: totalCount
                            }
                    };
                    VideoModuleFactory._getFilterEntriesArrayFactory = function(queryResult, queryId, filterFunction) {
                        var filteredEntriesArray = WinJS.Utilities.getMember("result.filteredEntriesArray", queryResult) || [];
                        if (filteredEntriesArray)
                            filteredEntriesArray = filteredEntriesArray.filter(function(item) {
                                if (filterFunction(item)) {
                                    item = VideoModuleFactory._wrapItem(item, queryId);
                                    return true
                                }
                                return false
                            });
                        var itemsCount = filteredEntriesArray ? filteredEntriesArray.length : 0;
                        var totalCount = WinJS.Utilities.getMember("result.totalCount", queryResult) || itemsCount;
                        return {
                                items: filteredEntriesArray, totalCount: totalCount
                            }
                    };
                    VideoModuleFactory._getEditorialItemsFactory = function(queryResult, queryId, filterFunction, listIndex) {
                        if (typeof listIndex === "undefined")
                            listIndex = 0;
                        var result = queryResult.result;
                        if (!listIndex)
                            listIndex = 0;
                        var length = WinJS.Utilities.getMember("entriesArray.length", result);
                        if (length && length > listIndex) {
                            var listItems = result.entriesArray[listIndex].editorialItems;
                            if (listItems)
                                listItems = listItems.map(function(item) {
                                    return item.editorialItem
                                }).filter(function(item) {
                                    if (filterFunction(item)) {
                                        item = VideoModuleFactory._wrapItem(item, queryId);
                                        return true
                                    }
                                    return false
                                })
                        }
                        var itemsCount = listItems ? listItems.length : 0;
                        var totalCount = queryResult.result && queryResult.result.totalCount || itemsCount;
                        return {
                                items: listItems, totalCount: totalCount
                            }
                    };
                    VideoModuleFactory._getBrowseItems = function(queryResult, queryId) {
                        var itemsArray = WinJS.Utilities.getMember("result.itemsArray", queryResult) || [];
                        if (itemsArray)
                            itemsArray.forEach(function(item, index) {
                                item.position = index + 1;
                                return VideoModuleFactory._wrapItem(item, queryId)
                            });
                        var itemsCount = itemsArray ? itemsArray.length : 0;
                        return {
                                items: itemsArray, totalCount: itemsCount
                            }
                    };
                    VideoModuleFactory.createNavigateAction = function(action, pivotType) {
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        var navigateAction = actionService.getAction(action);
                        if (pivotType != null)
                            navigateAction.parameter = {pivotType: pivotType};
                        navigateAction.title = String.load(String.id.IDS_APP1_MODULE_VIEW_ALL);
                        return navigateAction
                    };
                    VideoModuleFactory.createTVHeroModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.videoSpotlightQuery, queryId: MS.Entertainment.UI.Monikers.homeSpotlight, name: ModuleNames.tvHeroModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getEdsItemsFactory(queryResult, MS.Entertainment.UI.Monikers.homeSpotlight, function(item) {
                                                return VideoModuleFactory._isSupportedTvMediaType(item) || VideoModuleFactory._isSupportedTvFlexHubMediaType(item)
                                            })
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createNewTvSeriesModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.TvHub, queryId: QueryIds.newTvSeries, name: ModuleNames.newTvSeriesModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getEditorialItemsFactory(queryResult, QueryIds.newTvSeries, VideoModuleFactory._isSupportedEditorialSeriesMediaType, ContentQueryModule.newReleasesListIndex)
                                    }, moduleActionFactory: function() {
                                        return VideoModuleFactory.createNavigateAction(Entertainment.UI.Actions.ActionIdentifiers.newTvMarketplaceNavigate)
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createFeaturedTvSeriesModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.TvHub, queryId: QueryIds.featuredTvSeries, name: ModuleNames.featuredTvSeriesModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getEditorialItemsFactory(queryResult, QueryIds.featuredTvSeries, VideoModuleFactory._isSupportedEditorialSeriesMediaType, ContentQueryModule.featuredItemsListIndex)
                                    }, moduleActionFactory: function() {
                                        return VideoModuleFactory.createNavigateAction(Entertainment.UI.Actions.ActionIdentifiers.featuredTvMarketplaceNavigate)
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createLastNightTvModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.browseTVFromLastNight, queryId: MS.Entertainment.UI.Monikers.tvMarketplaceLastNight, name: ModuleNames.lastNightTvModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getFilterEntriesArrayFactory(queryResult, MS.Entertainment.UI.Monikers.tvMarketplaceLastNight, VideoModuleFactory._isSupportedTvMediaType)
                                    }, moduleActionFactory: function() {
                                        return VideoModuleFactory.createNavigateAction(Entertainment.UI.Actions.ActionIdentifiers.lastNightTvMarketplaceNavigate)
                                    }, isAvailable: function() {
                                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                        return WinJS.Promise.as(featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvLastNightQuery))
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createMoviesHeroModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.videoSpotlightQuery, queryId: MS.Entertainment.UI.Monikers.homeSpotlight, name: ModuleNames.moviesHeroModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getEdsItemsFactory(queryResult, MS.Entertainment.UI.Monikers.homeSpotlight, function(item) {
                                                return VideoModuleFactory._isSupportedMovieMediaType(item) || VideoModuleFactory._isSupportedMoviesFlexHubMediaType(item)
                                            })
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createNewMoviesModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.MovieHub, queryId: QueryIds.newMovies, name: ModuleNames.newMoviesModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getEditorialItemsFactory(queryResult, QueryIds.newMovies, VideoModuleFactory._isSupportedEditorialMoviesMediaType, ContentQueryModule.newReleasesListIndex)
                                    }, moduleActionFactory: function() {
                                        return VideoModuleFactory.createNavigateAction(Entertainment.UI.Actions.ActionIdentifiers.newMoviesMarketplaceNavigate)
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createFeaturedMoviesModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.MovieHub, queryId: QueryIds.featuredMovies, name: ModuleNames.featuredMoviesModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getEditorialItemsFactory(queryResult, QueryIds.featuredMovies, VideoModuleFactory._isSupportedEditorialMoviesMediaType, ContentQueryModule.featuredItemsListIndex)
                                    }, moduleActionFactory: function() {
                                        return VideoModuleFactory.createNavigateAction(Entertainment.UI.Actions.ActionIdentifiers.featuredMoviesMarketplaceNavigate)
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createTopSellingMoviesModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.Video.EdsBrowseTopSellingMovies, queryId: QueryIds.topSellingMovies, name: ModuleNames.topSellingMoviesModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getBrowseItems(queryResult, QueryIds.topSellingMovies)
                                    }, moduleActionFactory: function() {
                                        return VideoModuleFactory.createNavigateAction(Entertainment.UI.Actions.ActionIdentifiers.topMoviesMarketplaceNavigate, 0)
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createTopSellingTvModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.Video.EdsBrowseTvSeries, queryId: QueryIds.topSellingTv, name: ModuleNames.topSellingTvModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getBrowseItems(queryResult, QueryIds.topSellingTv)
                                    }, moduleActionFactory: function() {
                                        return VideoModuleFactory.createNavigateAction(Entertainment.UI.Actions.ActionIdentifiers.topTvMarketplaceNavigate, 0)
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createTvFeaturedSetsModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.MediaDiscoveryVideoFlexHub, queryId: QueryIds.featuredSets, queryParameters: {target: QueryIds.featuredSets}, name: ModuleNames.tvFeaturedSetsModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getEditorialItemsFactory(queryResult, QueryIds.featuredSets, VideoModuleFactory._isSupportedTvFlexHubMediaType)
                                    }, moduleActionFactory: function() {
                                        return VideoModuleFactory.createNavigateAction(Entertainment.UI.Actions.ActionIdentifiers.tvFeaturedSetsMarketplaceNavigate)
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createMovieFeaturedSetsModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.MediaDiscoveryVideoFlexHub, queryId: QueryIds.featuredSets, queryParameters: {target: QueryIds.featuredSets}, name: ModuleNames.moviesFeaturedSetsModule, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getEditorialItemsFactory(queryResult, QueryIds.featuredSets, VideoModuleFactory._isSupportedMoviesFlexHubMediaType)
                                    }, moduleActionFactory: function() {
                                        return VideoModuleFactory.createNavigateAction(Entertainment.UI.Actions.ActionIdentifiers.moviesFeaturedSetsMarketplaceNavigate)
                                    }
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.createSimilarMoviesModule = function(mediaItem) {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.Video.EdsMovieRelatedItems, queryId: QueryIds.similarMovies, queryParameters: {
                                        serviceId: mediaItem.canonicalId, impressionGuid: mediaItem.impressionGuid, relevancyTrackingContent: mediaItem.relevancyTrackingContent
                                    }, name: ModuleNames.similarMovies, itemsFactory: function(queryResult) {
                                        return VideoModuleFactory._getBrowseItems(queryResult, QueryIds.similarMovies)
                                    }, isExcludedFromPageState: true
                            };
                        return new CoreModuleBase(moduleOptions)
                    };
                    VideoModuleFactory.supportedTvMediaTypes = [MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Series, MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Season, MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Episode];
                    VideoModuleFactory.supportedMovieMediaTypes = [MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Movie];
                    VideoModuleFactory.supportedEditorialTvMediaTypes = [Entertainment.Data.Augmenter.Marketplace.EditorialType.Series];
                    VideoModuleFactory.supportedEditorialMovieMediaTypes = [Entertainment.Data.Augmenter.Marketplace.EditorialType.Movie];
                    VideoModuleFactory.supportedFlexHubMediaTypes = [Entertainment.Data.Augmenter.Marketplace.EditorialType.FlexHub];
                    VideoModuleFactory.supportedFlexHubTvContentTypes = [MS.Entertainment.Data.Augmenter.Spotlight.ContentType.None, MS.Entertainment.Data.Augmenter.Spotlight.ContentType.TV];
                    VideoModuleFactory.supportedFlexHubMoviesContentTypes = [MS.Entertainment.Data.Augmenter.Spotlight.ContentType.None, MS.Entertainment.Data.Augmenter.Spotlight.ContentType.Movies];
                    return VideoModuleFactory
                })();
            ViewModels.VideoModuleFactory = VideoModuleFactory
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/video_win/videostorehubviewmodel.js:9765 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            var VideoStoreHubViewModelBase = (function(_super) {
                    __extends(VideoStoreHubViewModelBase, _super);
                    function VideoStoreHubViewModelBase() {
                        var _this = this;
                        _super.call(this);
                        this._viewStateViewModel = null;
                        this._primaryModule = null;
                        this._secondaryModule = null;
                        this._tertiaryModules = null;
                        this._initializeModules();
                        if (this._secondaryModule)
                            this._secondaryModule.lockModuleState();
                        if (this._tertiaryModules)
                            this._tertiaryModules.forEach(function(module) {
                                if (module)
                                    module.lockModuleState()
                            });
                        this.listenForModuleViewStateChanges();
                        if (this._primaryModule)
                            this._secondaryModulesViewStateBindings = Entertainment.UI.Framework.addEventHandlers(this._primaryModule, {moduleStateChanged: function() {
                                    if (_this._secondaryModule)
                                        _this.unlockSecondaryModule();
                                    else if (_this._tertiaryModules)
                                        _this.unlockTertiaryModules()
                                }});
                        if (this._secondaryModule)
                            this._tertiaryModulesViewStateBindings = Entertainment.UI.Framework.addEventHandlers(this._secondaryModule, {moduleStateChanged: function() {
                                    if (_this._tertiaryModules)
                                        _this.unlockTertiaryModules()
                                }})
                    }
                    VideoStoreHubViewModelBase.prototype.unlockSecondaryModule = function() {
                        if (this._secondaryModule)
                            if (!this._primaryModule || Entertainment.Utilities.ViewState.isStateCompleted(this._primaryModule.moduleState))
                                this._secondaryModule.unLockModuleState()
                    };
                    VideoStoreHubViewModelBase.prototype.unlockTertiaryModules = function() {
                        if (this._tertiaryModules)
                            if (!this._secondaryModule || Entertainment.Utilities.ViewState.isStateCompleted(this._secondaryModule.moduleState))
                                this._tertiaryModules.forEach(function(module) {
                                    if (module)
                                        module.unLockModuleState()
                                })
                    };
                    Object.defineProperty(VideoStoreHubViewModelBase.prototype, "viewStateViewModel", {
                        get: function() {
                            if (!this._viewStateViewModel) {
                                var viewStateItems = new Array;
                                viewStateItems[-2] = new ViewModels.ViewStateItem(String.load(String.id.IDS_VIDEO_OFFLINE_HEADER), String.load(String.id.IDS_VIDEO_OFFLINE_DETAILS), []);
                                viewStateItems[-1] = new ViewModels.ViewStateItem(String.load(String.id.IDS_VIDEO_ERROR_HEADER), String.load(String.id.IDS_VIDEO_ERROR_DETAILS), []);
                                viewStateItems[0] = new ViewModels.ViewStateItem(String.load(String.id.IDS_VIDEO_ERROR_HEADER), String.load(String.id.IDS_VIDEO_ERROR_DETAILS), []);
                                this._viewStateViewModel = new ViewModels.ViewStateViewModel(viewStateItems)
                            }
                            return this._viewStateViewModel
                        }, enumerable: true, configurable: true
                    });
                    VideoStoreHubViewModelBase.prototype.delayInitialize = function() {
                        _super.prototype.delayInitialize.call(this);
                        this.modules.forEach(function(videoStoreModule) {
                            videoStoreModule.delayInitialize()
                        })
                    };
                    VideoStoreHubViewModelBase.prototype.dispose = function() {
                        _super.prototype.dispose.call(this);
                        if (this._secondaryModulesViewStateBindings) {
                            this._secondaryModulesViewStateBindings.cancel();
                            this._secondaryModulesViewStateBindings = null
                        }
                        if (this._tertiaryModulesViewStateBindings) {
                            this._tertiaryModulesViewStateBindings.cancel();
                            this._tertiaryModulesViewStateBindings = null
                        }
                    };
                    VideoStoreHubViewModelBase.prototype.loadModules = function() {
                        if (!this.isOnline) {
                            this.viewStateViewModel.viewState = -2;
                            return
                        }
                        this.modules.forEach(function(moduleToLoad) {
                            if (moduleToLoad)
                                moduleToLoad.load()
                        })
                    };
                    VideoStoreHubViewModelBase.prototype._createOfflineNotification = function() {
                        var offlineNotification = Entertainment.UI.ListNotification.createNotification(Entertainment.UI.NotificationCategoryEnum.networkStatus, String.load(String.id.IDS_VIDEO_OFFLINE_HEADER), String.load(String.id.IDS_VIDEO_OFFLINE_DETAILS));
                        offlineNotification.automationId = Entertainment.UI.AutomationIds.offlineHeaderNotification;
                        offlineNotification.icon = Entertainment.UI.Icon.inlineNotification;
                        offlineNotification.dismissIcon = false;
                        return offlineNotification
                    };
                    return VideoStoreHubViewModelBase
                })(ViewModels.PageViewModelBase);
            ViewModels.VideoStoreHubViewModelBase = VideoStoreHubViewModelBase
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/components/video/tvdetailsmodel.js:9882 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(Components) {
            (function(Video) {
                var TvDetailsModel = (function(_super) {
                        __extends(TvDetailsModel, _super);
                        function TvDetailsModel() {
                            _super.call(this);
                            this._series = null;
                            this._season = null;
                            this._episode = null;
                            this._seasons = null;
                            this._latestEpisodes = null;
                            this._episodes = null;
                            this._extrasForSeason = null;
                            this._extrasForSeries = null;
                            this._startPromise = null;
                            this._findExtrasForSeriesPromise = null;
                            this._seasonHasPromotedEpisode = false;
                            this._hdRight = null;
                            this._hasCaptions = false;
                            this._updating = false
                        }
                        TvDetailsModel.prototype.dispose = function() {
                            if (this._startPromise) {
                                this._startPromise.cancel();
                                this._startPromise = null
                            }
                            if (this._findExtrasForSeriesPromise) {
                                this._findExtrasForSeriesPromise.cancel();
                                this._findExtrasForSeriesPromise = null
                            }
                        };
                        TvDetailsModel.prototype.start = function(mediaItem) {
                            var _this = this;
                            if (this._startPromise)
                                return this._startPromise;
                            if (!mediaItem)
                                return WinJS.Promise.wrapError(new Error("Cannot load TV details without an initial media item!"));
                            var seasonHydratePromise = null;
                            var seriesHydratePromise = null;
                            var directMediaLink = null;
                            this.updating = true;
                            if (mediaItem && MS.Entertainment.Utilities.isTVEpisode(mediaItem)) {
                                this.series = MS.Entertainment.Utilities.convertMediaItemToTvSeries(mediaItem);
                                this.episode = mediaItem;
                                directMediaLink = mediaItem
                            }
                            else if (mediaItem && MS.Entertainment.Utilities.isTVSeason(mediaItem)) {
                                this.series = MS.Entertainment.Utilities.convertMediaItemToTvSeries(mediaItem);
                                seasonHydratePromise = mediaItem.hydrate().then(function() {
                                    _this._setSeason(mediaItem);
                                    return mediaItem
                                });
                                directMediaLink = mediaItem
                            }
                            else
                                this.series = mediaItem;
                            if (this.series && this.series.hydrate)
                                seriesHydratePromise = this.series.hydrate().then(function(mediaItem) {
                                    _this.series = mediaItem;
                                    return WinJS.Promise.wrap(mediaItem)
                                }, function(mediaItem) {
                                    return WinJS.Promise.wrap(mediaItem)
                                });
                            else
                                seriesHydratePromise = WinJS.Promise.wrap(this.series);
                            this._findExtrasForSeries(seriesHydratePromise);
                            var promises = {
                                    season: seasonHydratePromise, series: seriesHydratePromise, episode: this._hydratePromotedEpisode()
                                };
                            this._startPromise = WinJS.Promise.join(promises).then(function() {
                                return _this._findSeasons()
                            }).then(function() {
                                return _this.findNextEpisode(directMediaLink)
                            });
                            return this._startPromise
                        };
                        TvDetailsModel.prototype._findExtrasForSeries = function(seriesHydratePromise) {
                            var _this = this;
                            this._findExtrasForSeriesPromise = seriesHydratePromise.then(function() {
                                if (!_this.series || !_this.series.seasons)
                                    return WinJS.Promise.wrap(null);
                                return _this.series.seasons.toArrayAll()
                            }).then(function(seasons) {
                                var extrasSeasonHydratePromise;
                                if (seasons)
                                    for (var i = 0; i < seasons.length; i++) {
                                        var currentSeason = seasons[i];
                                        if (currentSeason.seasonNumber === 0)
                                            extrasSeasonHydratePromise = currentSeason.hydrate()
                                    }
                                return extrasSeasonHydratePromise
                            }).then(function(result) {
                                var extrasSeason = result;
                                var promise = WinJS.Promise.wrap();
                                if (extrasSeason) {
                                    _this.extrasForSeries = [];
                                    if (extrasSeason.episodes)
                                        promise = extrasSeason.episodes.toArrayAll().then(function(episodes) {
                                            for (var i = 0; i < episodes.length; i++)
                                                _this.extrasForSeries.push(episodes[i])
                                        })
                                }
                                return promise
                            })
                        };
                        TvDetailsModel.prototype.findNextEpisode = function(selectedSeason) {
                            var _this = this;
                            this.updating = true;
                            var episodeProgressionHelper = new Video.EpisodeProgressionHelper(this.series);
                            return episodeProgressionHelper.findNextEpisode(selectedSeason).then(function(results) {
                                    _this._setSeason(results.season);
                                    _this._setEpisode(results.episode);
                                    return _this._updateModel()
                                })
                        };
                        TvDetailsModel.prototype.updateFromSeason = function(selectedSeason) {
                            var returnPromise;
                            if (this._setSeason(selectedSeason)) {
                                this.updating = true;
                                returnPromise = this._updateModel()
                            }
                            return WinJS.Promise.as(returnPromise)
                        };
                        TvDetailsModel.prototype._findSeasons = function() {
                            var _this = this;
                            var series = this.series;
                            var seasonsList;
                            if (series.seasons && series.seasons.count > 0)
                                seasonsList = series.seasons;
                            else if (series.librarySeasons && series.librarySeasons.count > 0)
                                seasonsList = series.librarySeasons;
                            var seasonsArrayPromise = seasonsList ? seasonsList.toArrayAll() : WinJS.Promise.wrap([]);
                            return seasonsArrayPromise.then(function(seasons) {
                                    _this.seasons = seasons.filter(function(season) {
                                        return season && season.seasonNumber > 0
                                    })
                                })
                        };
                        TvDetailsModel.prototype._markPromotedEpisode = function() {
                            var _this = this;
                            if (!this.episodes)
                                return;
                            this.episodes.forEach(function(episode) {
                                episode.isPromotedEpisode = (episode && _this.episode && episode.isEqual(_this.episode))
                            })
                        };
                        TvDetailsModel.prototype._hydratePromotedEpisode = function() {
                            if (this.season && this.season.firstEpisode && this.episode && this.episode.isEqual(this.season.firstEpisode))
                                this._setEpisode(this.season.firstEpisode);
                            return WinJS.Promise.as(this.episode && this.episode.hydrate())
                        };
                        TvDetailsModel.prototype._updateModel = function() {
                            var _this = this;
                            var episode = this.episode;
                            var season = this.season;
                            var series = this.series;
                            MS.Entertainment.Framework.assert(season, "season not found");
                            var hydratePromises = {
                                    season: WinJS.Promise.as(season && season.hydrate()), series: WinJS.Promise.as(series && series.hydrate())
                                };
                            return WinJS.Promise.join(hydratePromises).then(function() {
                                    return WinJS.Promise.join({
                                            parseSeasonEpisodes: _this._categorizeEpisodesFromSeason(_this.season, _this.episode), parseSeriesExtras: WinJS.Promise.as(_this._findExtrasForSeriesPromise), firstEpisode: WinJS.Promise.as(season && season.firstEpisode && season.firstEpisode.hydrate())
                                        })
                                }).then(function() {
                                    _this.seasonHasPromotedEpisode = _this.episode && _this.season && _this.season.seasonNumber === _this.episode.seasonNumber;
                                    if (_this.seasonHasPromotedEpisode) {
                                        if (!_this.episode.libraryDefinitions || _this.episode.hasHdLibraryDefinition)
                                            _this.hdRight = _this.episode.hdRight;
                                        else
                                            _this.hdRight = null;
                                        _this.hasCaptions = _this.episode.hasCaptions
                                    }
                                    else {
                                        var firstEpisode = _this.season && _this.season.firstEpisode;
                                        if (firstEpisode) {
                                            if (!firstEpisode.libraryDefinitions || firstEpisode.hasHdLibraryDefinition)
                                                _this.hdRight = firstEpisode.hdRight;
                                            else
                                                _this.hdRight = null;
                                            _this.hasCaptions = firstEpisode.hasCaptions
                                        }
                                        else {
                                            _this.hdRight = null;
                                            _this.hasCaptions = false
                                        }
                                    }
                                    return WinJS.Promise.timeout(1)
                                }).then(function() {
                                    _this.updating = false
                                })
                        };
                        TvDetailsModel.prototype._categorizeEpisodesFromSeason = function(season, promotedEpisode) {
                            this.latestEpisodes = [];
                            this.episodes = [];
                            this.extrasForSeason = [];
                            var marketplaceEpisodes = season && season.episodes;
                            var libraryEpisodes = season && season.libraryEpisodes;
                            var episodes = null;
                            if (marketplaceEpisodes && marketplaceEpisodes.count > 0)
                                episodes = marketplaceEpisodes;
                            else if (libraryEpisodes && libraryEpisodes.count > 0)
                                episodes = libraryEpisodes;
                            return this._categorizeEpisodesFromEpisodeList(episodes, promotedEpisode)
                        };
                        TvDetailsModel.prototype._categorizeEpisodesFromEpisodeList = function(episodesList, promotedEpisode) {
                            var _this = this;
                            if (!episodesList)
                                return WinJS.Promise.wrap();
                            var sevenDaysInMilliseconds = MS.Entertainment.Formatters.milliSecondsFromTimeSpan(7);
                            var todayDateOnly = new Date;
                            todayDateOnly.setHours(0, 0, 0, 0);
                            return episodesList.toArrayAll().then(function(episodes) {
                                    episodes = episodes || [];
                                    var latestEpisode = null;
                                    var latestEpisodeDate = null;
                                    for (var i = 0; i < episodes.length; i++) {
                                        var currentEpisode = episodes[i];
                                        if (!currentEpisode)
                                            continue;
                                        if (currentEpisode.episodeNumber > 0) {
                                            currentEpisode.isPromotedEpisode = currentEpisode.isEqual(promotedEpisode);
                                            _this.episodes.push(currentEpisode);
                                            var currentEpisodeDateOnly = new Date;
                                            currentEpisodeDateOnly.setTime(currentEpisode.releaseDate.getTime());
                                            currentEpisodeDateOnly.setHours(0, 0, 0, 0);
                                            var deltaDates = todayDateOnly.valueOf() - currentEpisodeDateOnly.valueOf();
                                            if (deltaDates >= 0 && deltaDates <= sevenDaysInMilliseconds)
                                                if (!latestEpisodeDate || currentEpisodeDateOnly >= latestEpisodeDate) {
                                                    latestEpisode = currentEpisode;
                                                    latestEpisodeDate = currentEpisodeDateOnly
                                                }
                                        }
                                        else
                                            _this.extrasForSeason.push(currentEpisode)
                                    }
                                    if (latestEpisode)
                                        if (latestEpisodeDate <= todayDateOnly)
                                            _this.latestEpisodes.push(latestEpisode)
                                })
                        };
                        TvDetailsModel.prototype._setSeason = function(season) {
                            if (!season || season.mediaType !== Microsoft.Entertainment.Queries.ObjectType.tvSeason) {
                                MS.Entertainment.Framework.fail("Trying to set something that's not a season");
                                return false
                            }
                            var changed = false;
                            if (!this.season || (season && !season.isEqual(this.season))) {
                                this.season = season;
                                this.season.seriesLibraryId = this.series.libraryId;
                                changed = true
                            }
                            return changed
                        };
                        TvDetailsModel.prototype._setEpisode = function(episode) {
                            if (!this.episode || !this.episode.isEqual(episode))
                                this.episode = episode
                        };
                        Object.defineProperty(TvDetailsModel.prototype, "series", {
                            get: function() {
                                return this._series
                            }, set: function(value) {
                                    this.updateAndNotify("series", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "seasons", {
                            get: function() {
                                return this._seasons
                            }, set: function(value) {
                                    this.updateAndNotify("seasons", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "season", {
                            get: function() {
                                return this._season
                            }, set: function(value) {
                                    this.updateAndNotify("season", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "episode", {
                            get: function() {
                                return this._episode
                            }, set: function(value) {
                                    this.updateAndNotify("episode", value);
                                    this._markPromotedEpisode()
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "episodes", {
                            get: function() {
                                return this._episodes
                            }, set: function(value) {
                                    this.updateAndNotify("episodes", value);
                                    this._markPromotedEpisode()
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "extrasForSeason", {
                            get: function() {
                                return this._extrasForSeason
                            }, set: function(value) {
                                    this.updateAndNotify("extrasForSeason", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "extrasForSeries", {
                            get: function() {
                                return this._extrasForSeries
                            }, set: function(value) {
                                    this.updateAndNotify("extrasForSeries", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "latestEpisodes", {
                            get: function() {
                                return this._latestEpisodes
                            }, set: function(value) {
                                    this.updateAndNotify("latestEpisodes", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "updating", {
                            get: function() {
                                return this._updating
                            }, set: function(value) {
                                    this.updateAndNotify("updating", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "seasonHasPromotedEpisode", {
                            get: function() {
                                return this._seasonHasPromotedEpisode
                            }, set: function(value) {
                                    this.updateAndNotify("seasonHasPromotedEpisode", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "hdRight", {
                            get: function() {
                                return this._hdRight
                            }, set: function(value) {
                                    this.updateAndNotify("hdRight", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(TvDetailsModel.prototype, "hasCaptions", {
                            get: function() {
                                return this._hasCaptions
                            }, set: function(value) {
                                    this.updateAndNotify("hasCaptions", value)
                                }, enumerable: true, configurable: true
                        });
                        return TvDetailsModel
                    })(MS.Entertainment.UI.Framework.ObservableBase);
                Video.TvDetailsModel = TvDetailsModel
            })(Components.Video || (Components.Video = {}));
            var Video = Components.Video
        })(Entertainment.Components || (Entertainment.Components = {}));
        var Components = Entertainment.Components
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/controls/pageditemscontrol.js:10253 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Controls) {
                MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
                var PagedItemsControl = (function(_super) {
                        __extends(PagedItemsControl, _super);
                        function PagedItemsControl(element, options) {
                            _super.call(this, element, options);
                            this.previousButtonAutomationId = "pagedItemsControlPreviousButton";
                            this.nextButtonAutomationId = "pagedItemsControlNextButton";
                            this._scrollWidth = 0;
                            this._targetScrollPosition = -1;
                            this._outerContainerClientWidth = -1;
                            if (!WinJS.Utilities.hasClass(this.domElement, PagedItemsControl.containerClass))
                                WinJS.Utilities.addClass(this.domElement, PagedItemsControl.containerClass);
                            if (!this.itemsControlType)
                                this.itemsControlType = "MS.Entertainment.UI.Controls.ItemsControl";
                            this._createPreviousButton();
                            this._createItemsControl();
                            this._createNextButton();
                            MS.Entertainment.Framework.AccUtils.createAndAddAriaLink(this._previousPageButton, this._itemsControlContainer, "aria-controls");
                            MS.Entertainment.Framework.AccUtils.createAndAddAriaLink(this._nextPageButton, this._itemsControlContainer, "aria-controls");
                            element.appendChild(this._previousPageButton);
                            element.appendChild(this._itemsControlOuterContainer);
                            element.appendChild(this._nextPageButton)
                        }
                        PagedItemsControl.prototype._createPreviousButton = function() {
                            this._previousPageButton = document.createElement("button");
                            this._previousPageButton.className = MS.Entertainment.UI.Controls.PagedItemsControl.previousPageClass;
                            this._previousPageButton.setAttribute("type", "button");
                            this._previousPageButton.setAttribute("aria-label", String.load(String.id.IDS_PAGED_ITEMS_CONTROL_ACC_PREVIOUS_PAGE));
                            this._previousPageButton.setAttribute("data-win-automationid", this.previousButtonAutomationId);
                            this._previousButtonClickHandler = MS.Entertainment.Utilities.addEventHandlers(this._previousPageButton, {click: this._previousButtonClicked.bind(this)})
                        };
                        PagedItemsControl.prototype._createItemsControl = function() {
                            this._itemsControlOuterContainer = document.createElement("div");
                            this._itemsControlOuterContainer.className = MS.Entertainment.UI.Controls.PagedItemsControl.itemsControlOuterContainerClass;
                            this._itemsControlHandlers = MS.Entertainment.Utilities.addEventHandlers(this._itemsControlOuterContainer, {mselementresize: this._outerContainerSizeChanged.bind(this)});
                            this._itemsControlContainer = document.createElement("div");
                            this._itemsControlContainer.className = MS.Entertainment.UI.Controls.PagedItemsControl.itemsControlContainerClass;
                            this._itemsControlOuterContainer.appendChild(this._itemsControlContainer);
                            var itemsControlClass = WinJS.Utilities.getMember(this.itemsControlType);
                            if (itemsControlClass) {
                                this._itemsControlContainer.setAttribute("data-win-control", this.itemsControlType);
                                this._itemsControlContainerResizeHandler = MS.Entertainment.Utilities.addEventHandlers(this._itemsControlContainer, {mselementresize: this._itemsControlScrolled.bind(this)});
                                if (this.itemsControlOptions && this.itemsControlOptions.keyboardNavigable) {
                                    Controls.fail("PagedItemsControl itemsControlOptions should not have keyboardNavigable set to true");
                                    this.itemsControlOptions.keyboardNavigable = false
                                }
                                this._itemsControl = new itemsControlClass(this._itemsControlContainer, this.itemsControlOptions);
                                this._itemRenderedHandler = MS.Entertainment.Utilities.addEventHandlers(this._itemsControl, {
                                    itemRendered: this._itemRendered.bind(this), scrollSizeChanged: this._scrollSizeChangeHandler.bind(this), itemsControlScrolled: this._itemsControlScrolled.bind(this)
                                })
                            }
                            else
                                throw new Error("unable to create items control in PagedItemsControl.  ItemsControl class was: " + this.itemsControlType);
                        };
                        PagedItemsControl.prototype._createNextButton = function() {
                            this._nextPageButton = document.createElement("button");
                            this._nextPageButton.className = MS.Entertainment.UI.Controls.PagedItemsControl.nextPageClass;
                            this._nextPageButton.setAttribute("type", "button");
                            this._nextPageButton.setAttribute("aria-label", String.load(String.id.IDS_PAGED_ITEMS_CONTROL_ACC_NEXT_PAGE));
                            this._nextPageButton.setAttribute("data-win-automationid", this.nextButtonAutomationId);
                            this._nextButtonClickHandler = MS.Entertainment.Utilities.addEventHandlers(this._nextPageButton, {click: this._nextButtonClicked.bind(this)})
                        };
                        PagedItemsControl.prototype.initialize = function(){};
                        PagedItemsControl.prototype.unload = function() {
                            if (this._previousButtonClickHandler) {
                                this._previousButtonClickHandler.cancel();
                                this._previousButtonClickHandler = null
                            }
                            if (this._nextButtonClickHandler) {
                                this._nextButtonClickHandler.cancel();
                                this._nextButtonClickHandler = null
                            }
                            if (this._itemsControlHandlers) {
                                this._itemsControlHandlers.cancel();
                                this._itemsControlHandlers = null
                            }
                            if (this._itemRenderedHandler) {
                                this._itemRenderedHandler.cancel();
                                this._itemRenderedHandler = null
                            }
                            if (this._itemsControlContainerResizeHandler) {
                                this._itemsControlContainerResizeHandler.cancel();
                                this._itemsControlContainerResizeHandler = null
                            }
                            if (this._keyboardNavigationMananger)
                                this._keyboardNavigationMananger.dispose();
                            _super.prototype.unload.call(this)
                        };
                        Object.defineProperty(PagedItemsControl.prototype, "dataSource", {
                            get: function() {
                                return this._dataSource
                            }, set: function(value) {
                                    if (value === this._dataSource)
                                        return;
                                    this.updateAndNotify("dataSource", value);
                                    if (this._itemsControl)
                                        this._itemsControl.dataSource = this._dataSource
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(PagedItemsControl.prototype, "outerContainerClientWidth", {
                            get: function() {
                                if (this._outerContainerClientWidth === -1 && this._itemsControlOuterContainer)
                                    this._outerContainerClientWidth = this._itemsControlOuterContainer.clientWidth;
                                return this._outerContainerClientWidth
                            }, enumerable: true, configurable: true
                        });
                        PagedItemsControl.prototype._scrollSizeChangeHandler = function() {
                            var scrollWidth = this._itemsControl.repeaterContainer.calculatedSize;
                            this._scrollWidth = this._itemsControl.repeaterContainer.calculatedSize ? scrollWidth : this._scrollWidth;
                            this._itemsControlScrolled()
                        };
                        PagedItemsControl.prototype._outerContainerSizeChanged = function() {
                            this._outerContainerClientWidth = -1;
                            this._itemsControlScrolled()
                        };
                        PagedItemsControl.prototype._itemRendered = function(itemRenderedData) {
                            if (!this._keyboardNavigationMananger)
                                this._keyboardNavigationMananger = new PagedItemsControlKeyboardNavigationManager(this._itemsControl, this._itemsControlOuterContainer);
                            if (itemRenderedData.detail && itemRenderedData.detail.index === 0)
                                this._keyboardNavigationMananger.setCurrentElement(itemRenderedData.detail.index, true)
                        };
                        PagedItemsControl.prototype._itemsControlScrolled = function() {
                            var newScrollLeft = this._itemsControl.scrollLeftPosition;
                            var newScrollWidth = this._scrollWidth;
                            if (!newScrollWidth && newScrollWidth !== 0)
                                return;
                            var itemsFitInView = (newScrollLeft + this.outerContainerClientWidth) >= newScrollWidth;
                            if (newScrollLeft !== this._previousScrollLeft)
                                if (newScrollLeft === 0)
                                    WinJS.Utilities.addClass(this._previousPageButton, "state-pagedItemsControlButtonDisabled");
                                else
                                    WinJS.Utilities.removeClass(this._previousPageButton, "state-pagedItemsControlButtonDisabled");
                            if (itemsFitInView !== this._previousItemsFitInView || newScrollWidth !== this._previousScrollWidth)
                                if (itemsFitInView)
                                    WinJS.Utilities.addClass(this._nextPageButton, "state-pagedItemsControlButtonDisabled");
                                else
                                    WinJS.Utilities.removeClass(this._nextPageButton, "state-pagedItemsControlButtonDisabled");
                            this._previousScrollWidth = newScrollWidth;
                            this._previousScrollLeft = newScrollLeft;
                            this._previousItemsFitInView = itemsFitInView;
                            if (this._previousScrollLeft === this._targetScrollPosition)
                                this._targetScrollPosition = -1
                        };
                        PagedItemsControl.prototype._scrollToPosition = function(scrollPosition, movingToPrevious) {
                            var itemIndex = this._itemsControl.getHighestItemToRenderForScrollPosition(scrollPosition);
                            itemIndex = Math.min(this.dataSource.length, itemIndex);
                            itemIndex = Math.max(0, itemIndex);
                            if (itemIndex >= 0) {
                                var scrollPositionForElement = this._itemsControl.getScrollPositionToShowItemFromIndex(itemIndex);
                                if (movingToPrevious) {
                                    var itemSize = this._itemsControl.getItemSizeForIndex(itemIndex);
                                    var itemWidth = 0;
                                    if (itemSize)
                                        if (this._itemsControl.singleAxis)
                                            itemWidth = itemSize;
                                        else if (itemSize.width)
                                            itemWidth = itemSize.width;
                                    scrollPositionForElement = scrollPositionForElement - this._itemsControlOuterContainer.clientWidth + itemWidth
                                }
                                this._targetScrollPosition = Math.max(0, Math.min(scrollPositionForElement, (this._itemsControlOuterContainer.scrollWidth - this._itemsControlOuterContainer.clientWidth)));
                                scrollPositionForElement = scrollPositionForElement + Math.ceil((this._itemsControlOuterContainer.clientWidth / 2));
                                this._itemsControl.scrollToPosition(scrollPositionForElement, {useZoomTo: true})
                            }
                        };
                        PagedItemsControl.prototype._previousButtonClicked = function() {
                            MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: this._previousPageButton}, {
                                uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                            });
                            var preliminaryScrollPosition = {
                                    horizontal: this._itemsControl.scrollLeftPosition - 1, vertical: this._itemsControl.scrollTopPosition + this._itemsControl.scrollerHeight
                                };
                            this._scrollToPosition(preliminaryScrollPosition, true)
                        };
                        PagedItemsControl.prototype._nextButtonClicked = function() {
                            MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: this._nextPageButton}, {
                                uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                            });
                            var preliminaryScrollPosition = {
                                    horizontal: this._itemsControlOuterContainer.scrollLeft + this._itemsControlOuterContainer.clientWidth + 1, vertical: this._itemsControl.scrollTopPosition + this._itemsControl.scrollerHeight
                                };
                            this._scrollToPosition(preliminaryScrollPosition, false)
                        };
                        PagedItemsControl.containerClass = "control-pagedItemsControl";
                        PagedItemsControl.previousPageClass = "pagedItemsControl-previousButton icon-previous-page";
                        PagedItemsControl.nextPageClass = "pagedItemsControl-nextButton icon-next-page";
                        PagedItemsControl.buttonDisabledClass = "state-pagedItemsControlButtonDisabled";
                        PagedItemsControl.itemsControlOuterContainerClass = "pagedItemsControl-itemsControlContainer";
                        PagedItemsControl.itemsControlContainerClass = "pagedItemsControl-itemsControl";
                        return PagedItemsControl
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.PagedItemsControl = PagedItemsControl;
                var PagedItemsControlKeyboardNavigationManager = (function() {
                        function PagedItemsControlKeyboardNavigationManager(itemsControl, itemsControlContainer) {
                            this._focusStyleClass = "acc-keyboardFocusTarget";
                            this._itemsControl = itemsControl;
                            this._itemsControlContainer = itemsControlContainer;
                            this._itemsControlContainerEventHandler = MS.Entertainment.Utilities.addEventHandlers(this._itemsControlContainer, {
                                keydown: this._keyDown.bind(this), focusin: this._focusIn.bind(this)
                            });
                            this._itemRenderedHandler = MS.Entertainment.Utilities.addEventHandlers(this._itemsControl, {itemRendered: this._itemRendered.bind(this)})
                        }
                        PagedItemsControlKeyboardNavigationManager.prototype.dispose = function() {
                            if (this._itemsControlContainerEventHandler) {
                                this._itemsControlContainerEventHandler.cancel();
                                this._itemsControlContainerEventHandler = null
                            }
                            if (this._itemRenderedHandler) {
                                this._itemRenderedHandler.cancel();
                                this._itemRenderedHandler = null
                            }
                        };
                        PagedItemsControlKeyboardNavigationManager.prototype._focusIn = function(e) {
                            if (e && e.target) {
                                var index = this._itemsControl.getIndexForElement(e.target);
                                if (index >= 0)
                                    this.setCurrentElement(index, true)
                            }
                        };
                        PagedItemsControlKeyboardNavigationManager.prototype._keyDown = function(e) {
                            var keyCodeToUse = e.keyCode;
                            if (MS.Entertainment.Utilities.getTextDirection() === MS.Entertainment.Utilities.TextDirections.RightToLeft)
                                if (keyCodeToUse === WinJS.Utilities.Key.rightArrow)
                                    keyCodeToUse = WinJS.Utilities.Key.leftArrow;
                                else if (keyCodeToUse === WinJS.Utilities.Key.leftArrow)
                                    keyCodeToUse = WinJS.Utilities.Key.rightArrow;
                            var handled = false;
                            if (this._itemsControl.singleAxis)
                                handled = this._handleKeyDownForSingleAxis(keyCodeToUse);
                            else
                                handled = this._handleKeyDownForMultiAxis(keyCodeToUse);
                            if (handled) {
                                e.stopPropagation();
                                e.preventDefault()
                            }
                        };
                        PagedItemsControlKeyboardNavigationManager.prototype._handleKeyDownForSingleAxis = function(keyCode) {
                            var _this = this;
                            var indexToSet = -1;
                            if (keyCode === WinJS.Utilities.Key.rightArrow)
                                indexToSet = this._activeIndex + 1;
                            else if (keyCode === WinJS.Utilities.Key.leftArrow)
                                indexToSet = this._activeIndex - 1;
                            if (indexToSet === -1)
                                return false;
                            if (indexToSet >= 0 && indexToSet < this._itemsControl.dataSource.length) {
                                var promise = WinJS.Promise.as();
                                if (indexToSet > this._itemsControl.highestIndexItemToRender - 1) {
                                    var scrollPosition = this._itemsControl.getScrollPositionToShowItemFromIndex(indexToSet + 1);
                                    this._itemsControlContainer.scrollLeft = scrollPosition;
                                    promise = WinJS.Promise.timeout(100)
                                }
                                if (indexToSet === 0)
                                    this._itemsControlContainer.scrollLeft = 0;
                                promise.then(function() {
                                    _this.setCurrentElement(indexToSet, true, true)
                                })
                            }
                            return true
                        };
                        PagedItemsControlKeyboardNavigationManager.prototype._handleKeyDownForMultiAxis = function(keyCode) {
                            var _this = this;
                            var indexToSet = -1;
                            var columnCount = this._itemsControl.itemsPerColumn;
                            switch (keyCode) {
                                case WinJS.Utilities.Key.rightArrow:
                                    indexToSet = this._activeIndex + columnCount;
                                    break;
                                case WinJS.Utilities.Key.leftArrow:
                                    indexToSet = this._activeIndex - columnCount;
                                    break;
                                case WinJS.Utilities.Key.downArrow:
                                    indexToSet = this._activeIndex + 1;
                                    break;
                                case WinJS.Utilities.Key.upArrow:
                                    indexToSet = this._activeIndex - 1;
                                    break
                            }
                            if (indexToSet === -1)
                                return false;
                            if (indexToSet !== -1 && indexToSet >= 0 && indexToSet < this._itemsControl.dataSource.length) {
                                var promise = WinJS.Promise.as();
                                if (indexToSet > this._itemsControl.highestIndexItemToRender - 1) {
                                    var scrollPosition = this._itemsControl.getScrollPositionToShowItemFromIndex(indexToSet + 1);
                                    this._itemsControlContainer.scrollLeft = scrollPosition;
                                    promise = WinJS.Promise.timeout(100)
                                }
                                if (indexToSet === 0)
                                    this._itemsControlContainer.scrollLeft = 0;
                                promise.then(function() {
                                    _this.setCurrentElement(indexToSet, true, true)
                                })
                            }
                            return true
                        };
                        PagedItemsControlKeyboardNavigationManager.prototype.getWinFocusableElement = function(element) {
                            if (!element)
                                return null;
                            var focusableElement;
                            if (WinJS.Utilities.hasClass(element, "win-focusable"))
                                focusableElement = element;
                            else
                                focusableElement = element.querySelector(".win-focusable");
                            return focusableElement
                        };
                        PagedItemsControlKeyboardNavigationManager.prototype._itemRendered = function(itemRenderedData) {
                            if (!(itemRenderedData.detail && itemRenderedData.detail.index))
                                return;
                            if (itemRenderedData.detail && itemRenderedData.detail.index) {
                                if (itemRenderedData.detail.index === this._indexToSetActive) {
                                    var elementToSetActive = this.getWinFocusableElement(this._itemsControl.getElementForIndex(this._indexToSetActive));
                                    if (elementToSetActive) {
                                        elementToSetActive.focus();
                                        this._activeIndex = this._indexToSetActive
                                    }
                                    this._indexToSetActive = -1
                                }
                                if (itemRenderedData.detail.index === this._indexToSetTabIndex) {
                                    var elementToSetTabIndex = this.getWinFocusableElement(this._itemsControl.getElementForIndex(this._indexToSetTabIndex));
                                    if (elementToSetTabIndex) {
                                        elementToSetTabIndex.setAttribute("tabindex", "0");
                                        this._elementWithTabIndex = elementToSetTabIndex;
                                        this._activeIndex = this._indexToSetTabIndex
                                    }
                                    this._indexToSetTabIndex = -1
                                }
                            }
                        };
                        PagedItemsControlKeyboardNavigationManager.prototype.setActiveOnElement = function(elementIndex) {
                            if (!(elementIndex < this._itemsControl.dataSource.length))
                                return;
                            if (elementIndex <= this._itemsControl.highestIndexItemToRender - 1) {
                                var elementToSetActive = this.getWinFocusableElement(this._itemsControl.getElementForIndex(elementIndex));
                                if (elementToSetActive) {
                                    elementToSetActive.focus();
                                    this._activeIndex = elementIndex
                                }
                            }
                            else
                                this._indexToSetActive = elementIndex
                        };
                        PagedItemsControlKeyboardNavigationManager.prototype.setCurrentElement = function(index, setTabIndex, setActive) {
                            if (setTabIndex)
                                this.setTabIndex(index);
                            if (setActive)
                                this.setActiveOnElement(index)
                        };
                        PagedItemsControlKeyboardNavigationManager.prototype.setTabIndex = function(elementIndex) {
                            if (this._elementWithTabIndex) {
                                this._elementWithTabIndex.setAttribute("tabindex", "-1");
                                WinJS.Utilities.removeClass(this._elementWithTabIndex, this._focusStyleClass)
                            }
                            if (elementIndex <= this._itemsControl.highestIndexItemToRender - 1) {
                                var elementToSetTabIndex = this.getWinFocusableElement(this._itemsControl.getElementForIndex(elementIndex));
                                if (elementToSetTabIndex) {
                                    elementToSetTabIndex.setAttribute("tabindex", "0");
                                    WinJS.Utilities.addClass(elementToSetTabIndex, this._focusStyleClass);
                                    this._elementWithTabIndex = elementToSetTabIndex;
                                    this._activeIndex = elementIndex
                                }
                            }
                            else
                                this._indexToSetTabIndex = elementIndex
                        };
                        return PagedItemsControlKeyboardNavigationManager
                    })();
                Controls.PagedItemsControlKeyboardNavigationManager = PagedItemsControlKeyboardNavigationManager
            })(UI.Controls || (UI.Controls = {}));
            var Controls = UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/controls/pageviewbase.js:10645 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Controls) {
                var PageViewBase = (function(_super) {
                        __extends(PageViewBase, _super);
                        function PageViewBase(element, options) {
                            _super.call(this, element, options);
                            this.loadModulesImmediately = false;
                            this._moduleSelectionManager = null;
                            this._options = null;
                            this._options = options;
                            this._initializeSelectionManagerAndBindings()
                        }
                        Object.defineProperty(PageViewBase.prototype, "dataContext", {
                            get: function() {
                                return this._dataContext
                            }, set: function(value) {
                                    this.updateAndNotify("dataContext", value);
                                    if (this.dataContext && this.loadModulesImmediately)
                                        this.dataContext.loadModules()
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(PageViewBase.prototype, "_focusEventHandlersEnabled", {
                            get: function() {
                                return !!this._scrollerElement
                            }, enumerable: true, configurable: true
                        });
                        PageViewBase.prototype.initialize = function() {
                            var _this = this;
                            _super.prototype.initialize.call(this);
                            if (this.delayInitializeChildren && this.domElement)
                                this._contentCompleteHandler = Entertainment.Utilities.addEventHandlers(this.domElement, {ContentComplete: function() {
                                        MS.Entertainment.Utilities.schedulePromiseBelowNormal().done(function() {
                                            if (!_this._unloaded)
                                                MS.Entertainment.UI.Framework.delayInitializeChildren(_this.domElement)
                                        }, function(error) {
                                            MS.Entertainment.UI.Controls.assert(WinJS.Promise.isCanceledError(error), "PageViewBase::_onContentComplete() The scheduler failed. Error: " + (error.message))
                                        })
                                    }})
                        };
                        PageViewBase.prototype._initializeSelectionManagerAndBindings = function() {
                            this._moduleSelectionManager = new MS.Entertainment.Framework.ModuleSelectionManager(this.domElement);
                            if (this._options && this._options.handleModuleSelectedItemsChangedEvent === true)
                                this._moduleItemsSelectionChangedHandler = MS.Entertainment.UI.Framework.addEventHandlers(this._moduleSelectionManager, {moduleItemsSelectionChanged: this._handleSelectionChanged.bind(this)});
                            if (this._options && this._options.handleGallerySelectedItemsChangedEvent === true)
                                this._gallerySelectionChangedEventHandler = MS.Entertainment.UI.Framework.addEventHandlers(this.domElement, {galleryControlSelectionChanged: this._handleSelectionChanged.bind(this)})
                        };
                        PageViewBase.prototype.invokeActionForEvent = function(event, actionToExecute) {
                            if (!MS.Entertainment.Utilities.isInvocationEvent(event))
                                return;
                            if (!actionToExecute)
                                return;
                            if (actionToExecute instanceof MS.Entertainment.UI.Actions.Action) {
                                actionToExecute.requeryCanExecute();
                                if (actionToExecute.isEnabled)
                                    actionToExecute.execute()
                            }
                            else
                                actionToExecute();
                            event.stopPropagation()
                        };
                        PageViewBase.prototype.onModuleItemClicked = function(event) {
                            if (!MS.Entertainment.Utilities.isInvocationEvent(event))
                                return;
                            var element = event.srcElement;
                            while (element && element !== this.domElement) {
                                var clickDataContext = element.clickDataContext;
                                if (clickDataContext) {
                                    this.invokeModuleAction(clickDataContext, element);
                                    event.stopPropagation();
                                    event.preventDefault();
                                    break
                                }
                                element = element.parentElement
                            }
                        };
                        PageViewBase.prototype.invokeModuleAction = function(item, referenceElement) {
                            if (!WinJS.Utilities.getMember("actionId", item))
                                if (WinJS.Utilities.getMember("data.actionId", item))
                                    item = item.data;
                                else
                                    return;
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var actionToExecute = actionService.getAction(item.actionId);
                            if (actionToExecute) {
                                actionToExecute.parameter = item.actionParameter;
                                if (item.automationId)
                                    actionToExecute.automationId = item.automationId;
                                actionToExecute.requeryCanExecute();
                                if (actionToExecute.isEnabled)
                                    actionToExecute.execute(referenceElement)
                            }
                        };
                        PageViewBase.prototype.onModuleHeaderInvoked = function(event) {
                            var element = event.srcElement;
                            while (element && element !== this.domElement) {
                                var moduleDataContext = element.moduleDataContext;
                                if (moduleDataContext) {
                                    var moduleAction = WinJS.Utilities.getMember("moduleDataContext.moduleAction", element);
                                    this.invokeActionForEvent(event, moduleAction);
                                    break
                                }
                                element = element.parentElement
                            }
                        };
                        PageViewBase.prototype.freeze = function() {
                            _super.prototype.freeze.call(this);
                            if (this.dataContext)
                                this.dataContext.freeze();
                            this._clearFocusEventHandlers()
                        };
                        PageViewBase.prototype.thaw = function() {
                            _super.prototype.thaw.call(this);
                            if (this.dataContext)
                                this.dataContext.thaw();
                            if (this._focusEventHandlersEnabled)
                                this._createFocusEventHandlers()
                        };
                        PageViewBase.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._contentCompleteHandler) {
                                this._contentCompleteHandler.cancel();
                                this._contentCompleteHandler = null
                            }
                            this._disposeSelectionManagerAndBindings();
                            this._clearFocusEventHandlers()
                        };
                        PageViewBase.prototype._disposeSelectionManagerAndBindings = function() {
                            if (this._moduleSelectionManager) {
                                this._moduleSelectionManager.dispose();
                                this._moduleSelectionManager = null
                            }
                            if (this._moduleItemsSelectionChangedHandler) {
                                this._moduleItemsSelectionChangedHandler.cancel();
                                this._moduleItemsSelectionChangedHandler = null
                            }
                            if (this._gallerySelectionChangedEventHandler) {
                                this._gallerySelectionChangedEventHandler.cancel();
                                this._gallerySelectionChangedEventHandler = null
                            }
                        };
                        PageViewBase.prototype._refreshSelectionManager = function() {
                            this._disposeSelectionManagerAndBindings();
                            this._initializeSelectionManagerAndBindings()
                        };
                        PageViewBase.prototype._enableFocusEventHandlers = function(scrollerElementClassName) {
                            if (!this._scrollerElement && scrollerElementClassName)
                                this._scrollerElement = WinJS.Utilities.hasClass(this.domElement, scrollerElementClassName) ? this.domElement : MS.Entertainment.Utilities.findParentElementByClassName(this.domElement, scrollerElementClassName);
                            Controls.assert(!!this._scrollerElement, "Couldn't find parent scroller");
                            this._createFocusEventHandlers()
                        };
                        PageViewBase.prototype._createFocusEventHandlers = function() {
                            var _this = this;
                            this._clearFocusEventHandlers();
                            this._focusEvents = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {focus: function(eventArgs) {
                                    _this._onFocusChanging(eventArgs)
                                }}, true)
                        };
                        PageViewBase.prototype._clearFocusEventHandlers = function() {
                            if (this._focusEvents) {
                                this._focusEvents.cancel();
                                this._focusEvents = null
                            }
                        };
                        PageViewBase.prototype._onFocusChanging = function(eventArgs) {
                            if (!this.enableAutoScroll || !eventArgs || !eventArgs.target || !this.domElement || !WinJS.Utilities.hasClass(eventArgs.target, "win-item") || !this.domElement.parentElement || !this._scrollerElement || MS.Entertainment.Utilities.isElementInVerticalViewportOfParent(eventArgs.target, this._scrollerElement))
                                return;
                            eventArgs.target.scrollIntoView(false)
                        };
                        PageViewBase.prototype._handleSelectionChanged = function(selectedItemsChangedEvent) {
                            if (selectedItemsChangedEvent && selectedItemsChangedEvent.detail && this.dataContext && this.dataContext.handleSelectionChange)
                                this.dataContext.handleSelectionChange(selectedItemsChangedEvent.detail)
                        };
                        PageViewBase.isDeclarativeControlContainer = true;
                        return PageViewBase
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.PageViewBase = PageViewBase
            })(UI.Controls || (UI.Controls = {}));
            var Controls = UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/controls/viewstatecontrol.js:10846 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Controls) {
                MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
                var ViewStateControl = (function(_super) {
                        __extends(ViewStateControl, _super);
                        function ViewStateControl(element, options) {
                            _super.call(this, element, options);
                            this._loadingTimer = null;
                            this._moduleWaitTime = null;
                            this._listsRendered = false;
                            this._contentComplete = false;
                            this._networkStatusListener = null;
                            this._selfEventBindings = MS.Entertainment.UI.Framework.addEventHandlers(this, {dataContextChanged: this.handleDataContextChanged.bind(this)});
                            if (!this.skipProcessDeclarative)
                                this.processDeclarativeControlContainer()
                        }
                        Object.defineProperty(ViewStateControl.prototype, "dataContext", {
                            get: function() {
                                return this._dataContext
                            }, set: function(value) {
                                    this.updateAndNotify("dataContext", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(ViewStateControl.prototype, "moduleWaitTime", {
                            get: function() {
                                if (!this._moduleWaitTime) {
                                    var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                    this._moduleWaitTime = configManager.music.pageLoadTimeUntilSpinner
                                }
                                return this._moduleWaitTime
                            }, set: function(value) {
                                    this._moduleWaitTime = value
                                }, enumerable: true, configurable: true
                        });
                        ViewStateControl.prototype.freeze = function() {
                            _super.prototype.freeze.call(this);
                            if (this.dataContext && this.dataContext.freeze)
                                this.dataContext.freeze();
                            this._cancelNetworkStatusListener()
                        };
                        ViewStateControl.prototype.thaw = function() {
                            _super.prototype.thaw.call(this);
                            if (this.dataContext && this.dataContext.thaw)
                                this.dataContext.thaw();
                            this._enableNetworkStatusListener()
                        };
                        ViewStateControl.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._selfEventBindings) {
                                this._selfEventBindings.cancel();
                                this._selfEventBindings = null
                            }
                            this._cancelDataContextBindings();
                            this._cancelLoadingTimer();
                            this._cancelListsRenderedBindings();
                            this._cancelNetworkStatusListener()
                        };
                        ViewStateControl.prototype.processDeclarativeControlContainer = function() {
                            var _this = this;
                            var listCount = 0;
                            var listRenderedCount = 0;
                            var listRendered = function() {
                                    if (listRenderedCount >= listCount) {
                                        Controls.assert(listRenderedCount == listCount, "ViewStateControl::_processDeclarativeControlContainer(). We counted more list renders than there are lists.");
                                        _this._listsRendered = true;
                                        _this._onContentComplete();
                                        _this._cancelListsRenderedBindings()
                                    }
                                };
                            var notifyListRendered = function(control) {
                                    if (control && !control.excludeFromContentReady) {
                                        listRenderedCount++;
                                        listRendered()
                                    }
                                };
                            var readyElement = this.domElement.querySelector("[data-ent-member='_readyElement']");
                            if (readyElement)
                                this._listsRenderedBindings = MS.Entertainment.UI.Framework.addEventHandlers(readyElement, {
                                    firstTimeRendered: function(event) {
                                        return notifyListRendered(event.srcElement.winControl)
                                    }, galleryFirstPageRendered: function(event) {
                                            return notifyListRendered(event.srcElement.winControl)
                                        }
                                });
                            var processPromise;
                            if (!this.skipProcessDeclarative)
                                processPromise = MS.Entertainment.UI.Framework.processDeclarativeControlContainer(this);
                            WinJS.Promise.as(processPromise).done(function() {
                                if (readyElement) {
                                    var winControls = readyElement.querySelectorAll("[data-win-control], .ent-control");
                                    var isGalleryControlDefined = !!Controls.GalleryControl;
                                    var isItemsControlDefined = !!Controls.ItemsControl;
                                    for (var i = 0; i < winControls.length; i++) {
                                        var control = winControls[i].winControl;
                                        if (control && !control.excludeFromContentReady && ((isGalleryControlDefined && (control instanceof Controls.GalleryControl)) || (isItemsControlDefined && (control instanceof Controls.ItemsControl))))
                                            listCount++
                                    }
                                }
                                listRendered()
                            })
                        };
                        ViewStateControl.prototype.handleDataContextChanged = function() {
                            this._cancelDataContextBindings();
                            if (!this.dataContext)
                                return;
                            this._dataContextViewStateBindings = MS.Entertainment.UI.Framework.addEventHandlers(this.dataContext.viewStateViewModel, {viewStateChanged: this._viewStateChanged.bind(this)});
                            this._viewStateChanged()
                        };
                        ViewStateControl.prototype._enableNetworkStatusListener = function() {
                            var _this = this;
                            if (!this.contentOfflineStateEnabled || !this._contentComplete)
                                return;
                            var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            this._networkStatusListener = MS.Entertainment.UI.Framework.addEventHandlers(uiState, {networkStatusChanged: function() {
                                    _this._updateReadyElementOfflineState()
                                }});
                            this._updateReadyElementOfflineState()
                        };
                        ViewStateControl.prototype._cancelNetworkStatusListener = function() {
                            if (this._networkStatusListener) {
                                this._networkStatusListener.cancel();
                                this._networkStatusListener = null
                            }
                        };
                        ViewStateControl.prototype._updateReadyElementOfflineState = function() {
                            if (this.contentOfflineStateEnabled) {
                                var offlineClassName = "state_offline";
                                if (UI.NetworkStatusService.isOnline())
                                    this._safeRemoveClass(this._readyElement, offlineClassName);
                                else
                                    this._safeAddClass(this._readyElement, offlineClassName)
                            }
                        };
                        ViewStateControl.prototype._viewStateChanged = function() {
                            var _this = this;
                            MS.Entertainment.UI.Controls.assert(!!this.domElement, "For some reason we dont have a dom element yet");
                            if (!this.domElement)
                                return;
                            switch (this.dataContext.viewStateViewModel.viewState) {
                                case 1:
                                    {
                                        var suppressLoadingSpinner = this.dataContext.viewStateViewModel.suppressLoadingSpinner;
                                        if (!suppressLoadingSpinner && !this._loadingTimer && this._loadingElement) {
                                            this._loadingTimer = WinJS.Promise.timeout(this.moduleWaitTime);
                                            this._loadingTimer.done(function() {
                                                if (_this._loadingTimer) {
                                                    _this._showHideElements([_this._errorOfflineEmptyElement, _this._readyElement], [_this._notificationsElement, _this._loadingElement]);
                                                    _this._scrollToTopOfContainer()
                                                }
                                                _this._loadingTimer = null
                                            }, function() {
                                                _this._loadingTimer = null
                                            })
                                        }
                                        break
                                    }
                                case-1:
                                case-2:
                                case 0:
                                    {
                                        this._cancelLoadingTimer();
                                        this._showHideElements([this._readyElement, this._loadingElement], [this._notificationsElement, this._errorOfflineEmptyElement]);
                                        this._scrollToTopOfContainer();
                                        this._onContentComplete();
                                        break
                                    }
                                case 2:
                                    {
                                        if (!this.delayShowReadyUntilListsRendered || this._contentComplete) {
                                            this._cancelLoadingTimer();
                                            this._showReadyElements()
                                        }
                                        this._onContentComplete();
                                        break
                                    }
                                default:
                                    this._cancelLoadingTimer();
                                    this._showHideElements([this._errorOfflineEmptyElement, this._notificationsElement, this._readyElement, this._loadingElement], []);
                                    break
                            }
                        };
                        ViewStateControl.prototype._scrollToTopOfContainer = function() {
                            var _this = this;
                            if (!!this.resetScrollTop && this.domElement && this.domElement.parentElement && this.domElement.parentElement.scrollTop != 0)
                                requestAnimationFrame(function() {
                                    _this.domElement.parentElement.scrollTop = 0
                                })
                        };
                        ViewStateControl.prototype._getCollapsingClass = function(element) {
                            return (element && element === this._readyElement && this.hideFromDisplayReadyElement) ? "hideFromDisplay" : "removeFromDisplay"
                        };
                        ViewStateControl.prototype._showHideElements = function(hideElements, showElements) {
                            MS.Entertainment.UI.Controls.assert(hideElements !== null, "hideElements cannot be null");
                            MS.Entertainment.UI.Controls.assert(showElements !== null, "showElements cannot be null");
                            for (var i = 0; i < hideElements.length; i++) {
                                var collapsingClass = this._getCollapsingClass(hideElements[i]);
                                this._safeAddClass(hideElements[i], collapsingClass)
                            }
                            for (var i = 0; i < showElements.length; i++) {
                                var collapsingClass = this._getCollapsingClass(showElements[i]);
                                this._safeRemoveClass(showElements[i], collapsingClass)
                            }
                        };
                        ViewStateControl.prototype._safeAddClass = function(element, className) {
                            if (element)
                                WinJS.Utilities.addClass(element, className)
                        };
                        ViewStateControl.prototype._safeRemoveClass = function(element, className) {
                            if (element)
                                WinJS.Utilities.removeClass(element, className)
                        };
                        ViewStateControl.prototype._cancelDataContextBindings = function() {
                            if (this._dataContextViewStateBindings) {
                                this._dataContextViewStateBindings.cancel();
                                this._dataContextViewStateBindings = null
                            }
                        };
                        ViewStateControl.prototype._cancelLoadingTimer = function() {
                            if (this._loadingTimer) {
                                this._loadingTimer.cancel();
                                this._loadingTimer = null
                            }
                        };
                        ViewStateControl.prototype._cancelListsRenderedBindings = function() {
                            if (this._listsRenderedBindings) {
                                this._listsRenderedBindings.cancel();
                                this._listsRenderedBindings = null
                            }
                        };
                        ViewStateControl.prototype._onContentComplete = function() {
                            var _this = this;
                            if (this._contentComplete || !this.dataContext || !this.dataContext.viewStateViewModel)
                                return;
                            var viewState = this.dataContext.viewStateViewModel.viewState;
                            var pageReady = (this._listsRendered || !!this.dataContext.skipListRendersForContentComplete) && viewState === 2;
                            var viewModelReady = viewState === -2 || viewState === -1 || viewState === 0;
                            if (pageReady || viewModelReady) {
                                if (MS.Entertainment.UI.Framework.Navigation && !this._contentComplete) {
                                    this._contentComplete = true;
                                    MS.Entertainment.UI.Framework.Navigation.raiseContentComplete(this.domElement)
                                }
                                if (!this._unloaded) {
                                    if (this.delayInitializeDataContext && this.dataContext.delayInitialize)
                                        this.dataContext.delayInitialize();
                                    if (this.delayInitializeChildren)
                                        MS.Entertainment.Utilities.schedulePromiseBelowNormal().done(function() {
                                            if (!_this._unloaded)
                                                MS.Entertainment.UI.Framework.delayInitializeChildren(_this.domElement)
                                        }, function(error) {
                                            MS.Entertainment.UI.Controls.assert(WinJS.Promise.isCanceledError(error), "ViewStateControl::_onContentComplete() The scheduler failed. Error: " + (error.message))
                                        });
                                    if (this.delayShowReadyUntilListsRendered && viewState === 2) {
                                        this._cancelLoadingTimer();
                                        this._showReadyElements()
                                    }
                                }
                                this._enableNetworkStatusListener();
                                this._updateReadyElementOfflineState()
                            }
                        };
                        ViewStateControl.prototype._showReadyElements = function() {
                            this._showHideElements([this._errorOfflineEmptyElement, this._notificationsElement, this._loadingElement], [this._readyElement]);
                            this._scrollToTopOfContainer();
                            if (!!this.enableEnterContentAnimation)
                                WinJS.UI.Animation.enterContent(this._readyElement)
                        };
                        ViewStateControl.isDeclarativeControlContainer = true;
                        return ViewStateControl
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.ViewStateControl = ViewStateControl;
                var ViewStateControlWithAds = (function(_super) {
                        __extends(ViewStateControlWithAds, _super);
                        function ViewStateControlWithAds(element, options) {
                            var _this = this;
                            _super.call(this, element, options);
                            this._uiStateServiceBinding = null;
                            this._uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            this._uiStateServiceBinding = WinJS.Binding.bind(this._uiState, {shouldShowAdsForFreePlay: function() {
                                    return _this._refreshAdState()
                                }})
                        }
                        ViewStateControlWithAds.prototype.initialize = function(){};
                        ViewStateControlWithAds.prototype.freeze = function() {
                            _super.prototype.freeze.call(this)
                        };
                        ViewStateControlWithAds.prototype.thaw = function() {
                            _super.prototype.thaw.call(this)
                        };
                        ViewStateControlWithAds.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._uiStateServiceBinding) {
                                this._uiStateServiceBinding.cancel();
                                this._uiStateServiceBinding = null
                            }
                        };
                        ViewStateControlWithAds.prototype.handleDataContextChanged = function() {
                            _super.prototype.handleDataContextChanged.call(this);
                            this._refreshAdState()
                        };
                        ViewStateControlWithAds.prototype._refreshAdState = function() {
                            if (this._uiState.shouldShowAdsForFreePlay && (!this.dataContext || !this.dataContext.isAdFreePage))
                                WinJS.Utilities.addClass(this.domElement, ViewStateControlWithAds.ADS_ENABLED_CLASS_NAME);
                            else
                                WinJS.Utilities.removeClass(this.domElement, ViewStateControlWithAds.ADS_ENABLED_CLASS_NAME)
                        };
                        ViewStateControlWithAds.ADS_ENABLED_CLASS_NAME = "adsState-enabled";
                        return ViewStateControlWithAds
                    })(ViewStateControl);
                Controls.ViewStateControlWithAds = ViewStateControlWithAds
            })(UI.Controls || (UI.Controls = {}));
            var Controls = UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.ViewStateControl)
})();
/* >>>>>>/controls/gallerycontrol.js:11180 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    var _defaultGrouperItemThreshold = 80;
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {TemplateSelectorBase: MS.Entertainment.UI.Framework.define(function templateSelectorBase() {
            this._templates = {}
        }, {
            _templates: null, addTemplate: function addTemplate(type, template) {
                    if (!type)
                        throw new Error("Invalid template type given to addTemplate()");
                    var oldTemplate = this._templates[type];
                    if (oldTemplate && oldTemplate.promise && oldTemplate.innerTemplate !== template) {
                        oldTemplate.promise.cancel();
                        oldTemplate.promise = null;
                        oldTemplate.provider = null;
                        this._templates[type] = null
                    }
                    if (template && (!oldTemplate || oldTemplate.innerTemplate !== template))
                        this._templates[type] = {
                            innerTemplate: template, promise: null
                        }
                }, getTemplate: function getTemplate(type) {
                    if (!type)
                        throw new Error("Invalid template type given to getTemplate()");
                    var innerTemplate;
                    var template = this._templates[type];
                    if (template)
                        innerTemplate = template.innerTemplate;
                    return innerTemplate
                }, getTemplateProvider: function getTemplateProvider(type) {
                    if (!type)
                        throw new Error("Invalid template type given to getTemplateProvider()");
                    return this._getTemplateProvider(this._templates[type])
                }, _getTemplateProvider: function _getTemplateProvider(template) {
                    MS.Entertainment.UI.Controls.assert(template && template.innerTemplate, "Template for the given type appears to be invalid");
                    var promise;
                    if (template.provider)
                        promise = WinJS.Promise.as(template.provider);
                    else if (!template.promise)
                        if (String.isString(template.innerTemplate))
                            promise = template.promise = MS.Entertainment.UI.Framework.loadTemplate(template.innerTemplate, null, true).then(function(provider) {
                                template.provider = provider;
                                return provider
                            });
                        else
                            promise = WinJS.Promise.as(template.innerTemplate.winControl);
                    else if (template.promise)
                        promise = template.promise;
                    else
                        promise = WinJS.Promise.as();
                    return promise
                }, selectTemplate: function selectTemplate(item, templateTypeHint) {
                    return this.onSelectTemplate(item, templateTypeHint)
                }, onSelectTemplate: function onSelectTemplate(item, templateTypeHint) {
                    templateTypeHint = templateTypeHint || MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item;
                    return this.getTemplateProvider(templateTypeHint)
                }, ensureTemplatesLoaded: function ensureTemplatesLoaded(templates) {
                    var promises = [];
                    var item;
                    if (templates)
                        templates.forEach(function(item) {
                            var template = this._templates[item];
                            var promise;
                            if (template)
                                promise = this._getTemplateProvider(template);
                            if (promise)
                                promises.push(promise)
                        }, this);
                    return WinJS.Promise.join(promises)
                }
        }, {templateType: {
                action: "action", emptyGallery: "emptyGallery", item: "item", header: "header", panel: "panel", snappedItem: "snappedItem", unsnappedItem: "unsnappedItem", userGatedGallery: "userGatedGallery", syncScreen: "syncScreen", zoomedOut: "zoomedOut"
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        TemplateType: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return {
                    action: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.action, emptyGallery: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.emptyGallery, item: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item, header: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header, panel: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.panel, snappedItem: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.snappedItem, unsnappedItem: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.unsnappedItem, userGatedGallery: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.userGatedGallery, syncScreen: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.syncScreen, zoomedOut: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.zoomedOut
                }
        }), GalleryTemplateSelector: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.TemplateSelectorBase", function galleryTemplateSelector() {
                MS.Entertainment.UI.Controls.TemplateSelectorBase.prototype.constructor.call(this)
            }, {
                ensureItemTemplatesLoaded: function ensureItemTemplatesLoaded() {
                    return this.ensureTemplatesLoaded([MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item, MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header, ])
                }, onSelectTemplate: function onSelectTemplate(item) {
                        if (item.isHeader)
                            return this.getTemplateProvider(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header);
                        else if (item.isAction)
                            return this.getTemplateProvider(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.action);
                        else
                            return MS.Entertainment.UI.Controls.TemplateSelectorBase.prototype.onSelectTemplate.apply(this, arguments)
                    }, getPanelTemplatePath: function getPanelTemplatePath(item) {
                        MS.Entertainment.UI.Controls.assert(this._templates[MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.panel], "template not defined");
                        var panelPath;
                        var panelTemplate = this._templates[MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.panel];
                        if (panelTemplate && typeof panelTemplate.innerTemplate === "string")
                            panelPath = panelTemplate.innerTemplate;
                        return panelPath
                    }
            }), GalleryListDataNotificationHandler: MS.Entertainment.UI.Framework.define(function galleryListDataNotificationHandler(updateCallback) {
                this._updateCallback = updateCallback
            }, {
                countThreshold: NaN, _updateCallback: null, _updating: false, _pendingChanges: null, _pendingCountChange: null, _panelSelected: false, _minimumListLength: 1, minimumListLength: {
                        get: function get_minimumListLength() {
                            return this._minimumListLength
                        }, set: function set_minimumListLength(value) {
                                if (this._minimumListLength !== value) {
                                    this._minimumListLength = value;
                                    this.countChanged()
                                }
                            }
                    }, _pushChange: function _pushChange(change) {
                        this._pendingChanges = this._pendingChanges || [];
                        if (this._pendingChanges.indexOf(change) < 0)
                            this._pendingChanges.push(change)
                    }, _updateGallery: function _updateGallery() {
                        if (!this._updating && this._pendingChanges && this._pendingChanges.length) {
                            var changes = this._pendingChanges;
                            this._pendingChanges = null;
                            this._pendingCountChange = null;
                            this._updateCallback(changes)
                        }
                    }, dispose: function dispose() {
                        this._updateCallback = null
                    }, beginNotifications: function beginNotifications() {
                        this._updating = true
                    }, inserted: function inserted(itemPromise, previousHandle, nextHandle){}, changed: function changed(newItem, oldItem){}, moved: function moved(itemPromise, previousHandle, nextHandle){}, removed: function removed(handle, mirage){}, countChanged: function countChanged(newCount, oldCount) {
                        if (oldCount === "unknown")
                            oldCount = 0;
                        if (this._pendingCountChange)
                            this._pendingCountChange.newValue = newCount;
                        else
                            this._pendingCountChange = {
                                type: MS.Entertainment.UI.Controls.GalleryListDataNotificationHandler.UpdateType.countChanged, newValue: newCount, oldValue: oldCount, passedThreshold: false
                            };
                        if (this._passedThreshold(newCount, oldCount, this.minimumListLength) || this._passedThreshold(newCount, oldCount, this.countThreshold))
                            this._pendingCountChange.passedThreshold = true;
                        this._pushChange(this._pendingCountChange);
                        this._updateGallery()
                    }, endNotifications: function endNotifications() {
                        this._updating = false;
                        this._updateGallery()
                    }, reload: function reload() {
                        this._pushChange({type: MS.Entertainment.UI.Controls.GalleryListDataNotificationHandler.UpdateType.reload});
                        this._updateGallery()
                    }, _passedThreshold: function(newCount, oldCount, threshold) {
                        return ((newCount >= threshold) && (oldCount < threshold)) || ((oldCount >= threshold) && (newCount < threshold))
                    }
            }, {UpdateType: {
                    countChanged: "countChanged", reload: "reload"
                }}), GalleryControlDoubleClickHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function galleryControlDoubleClickHelper(galleryControl) {
                this._galleryControl = galleryControl
            }, {
                _appBarServiceStorage: null, _item: null, _index: -1, _invokePromise: null, _mediaContext: null, _playButton: null, _smartBuyStateEngine: null, _appBarService: {get: function get_appBarService() {
                            if (!this._appBarServiceStorage)
                                this._appBarServiceStorage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                            return this._appBarServiceStorage
                        }}, _getData: function _getData() {
                        var data = this._item;
                        var key;
                        if (!data)
                            return;
                        key = data.key;
                        data = data.data || data;
                        return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(data).then(function mediaItemHydrated(mediaItem) {
                                var containingMedia = this.getContainingMedia(key);
                                this.clear();
                                this._mediaContext = this._appBarService.pushMediaContext(mediaItem, [], [], {
                                    executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.invokeInline, galleryControl: this._galleryControl, containingMedia: containingMedia, invokedIndex: key
                                });
                                this._mediaContext.collectionFilter = (this._galleryControl.mediaContext && this._galleryControl.mediaContext.collectionFilter) || Microsoft.Entertainment.Platform.MediaAvailability.available;
                                this._smartBuyStateEngine = new MS.Entertainment.ViewModels.SmartBuyStateEngine;
                                var buttons = MS.Entertainment.ViewModels.SmartBuyButtons.getTrackInlineDetailsButtons(this._mediaContext);
                                var handler = MS.Entertainment.ViewModels.MusicStateHandlers.onTrackInlineDetailsStateChanged;
                                this._smartBuyStateEngine.initialize(mediaItem, buttons, handler);
                                this._playButton = buttons.doubleClick;
                                if (data.hydrate && !data.hydrated) {
                                    var options = {collectionFilter: this._mediaContext && this._mediaContext.collectionFilter};
                                    data.hydrate(options).done(null, function(){})
                                }
                                return mediaItem
                            }.bind(this))
                    }, getContainingMedia: function getContainingMedia(key) {
                        var containingMedia = null;
                        if (this._galleryControl.mediaContext && this._galleryControl.mediaContext.containingMedia && this._galleryControl.dataSource) {
                            if (this._galleryControl.mediaContext.containingMedia.copy)
                                containingMedia = this._galleryControl.mediaContext.containingMedia.copy();
                            else
                                containingMedia = {
                                    playbackItemSource: this._galleryControl.mediaContext.containingMedia.playbackItemSource, dontUseTrackListForPlayback: this._galleryControl.mediaContext.containingMedia.dontUseTrackListForPlayback
                                };
                            containingMedia.playbackKey = key;
                            containingMedia.playbackOffset = this._galleryControl.dataSource.indexToSourceIndex ? this._galleryControl.dataSource.indexToSourceIndex(this._index) : this._index
                        }
                        return containingMedia
                    }, clear: function clear() {
                        if (this._smartBuyStateEngine) {
                            this._smartBuyStateEngine.unload();
                            this._smartBuyStateEngine = null
                        }
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    }, execute: function execute() {
                        this._getData().done(function gotData(data) {
                            this._playButton.execute()
                        }.bind(this), function ignoreError(error) {
                            MS.Entertainment.UI.Controls.fail("Failed to get data for double-click. error: " + (error && error.message))
                        })
                    }, wrapItemInvoke: function wrapItemInvoke(event, data) {
                        this._item = data;
                        this._index = event.detail.itemIndex;
                        this._invokePromise = WinJS.Promise.timeout();
                        this._invokePromise.then(function onComplete(complete) {
                            if (this._invokePromise) {
                                var invocationHelper = this._galleryControl.invocationHelper;
                                if (invocationHelper)
                                    invocationHelper.invokeItem(event, data);
                                this._invokePromise = null
                            }
                        }.bind(this), function onError(error) {
                            this._invokePromise = null
                        }.bind(this))
                    }
            }, {create: WinJS.Utilities.markSupportedForProcessing(function create(galleryControl) {
                    return new MS.Entertainment.UI.Controls.GalleryControlDoubleClickHelper(galleryControl)
                })}), GalleryControlInvocationHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function galleryControlInvocationHelper(galleryControl) {
                this._galleryControl = galleryControl;
                this._smartButtonCallbacks = [];
                this._createActionExecuteCallbacks()
            }, {
                _smartButtonCallbacks: null, _createActionExecuteCallbacks: function _createActionExecuteCallbacks() {
                        var clearInvocation = this.clearInvocation.bind(this);
                        this.addInvocationHandlers({
                            deleteMedia: clearInvocation, removeFromList: clearInvocation, exploreAlbum: clearInvocation
                        })
                    }, _mediaContext: null, _appBarServiceStorage: null, _appBarService: {get: function get_appBarService() {
                            if (!this._appBarServiceStorage)
                                this._appBarServiceStorage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                            return this._appBarServiceStorage
                        }}, _galleryControl: null, _invokedItem: null, _shareOperation: null, _smartBuyStateEngine: null, _smartStateEngineBindings: null, _delayedActions: null, _currentInvokePromise: null, _pendingInvokeEvent: null, addInvocationHandlers: function addInvocationHandlers(handlers) {
                        this._smartButtonCallbacks = this._smartButtonCallbacks || [];
                        this._smartButtonCallbacks.push(handlers)
                    }, dispose: function dispose() {
                        this.clearInvocation();
                        this._galleryControl = null
                    }, invokedItem: {get: function() {
                            return this._invokedItem
                        }}, invokedKey: {get: function() {
                            return this.invokedItem ? this.invokedItem.key : null
                        }}, invokedIndex: {get: function() {
                            var result;
                            if (this._galleryControl && this._galleryControl.dataSource && this._galleryControl.dataSource.indexFromKey)
                                result = this._galleryControl.dataSource.indexFromKey(this.invokedKey);
                            else if (this.invokedItem)
                                result = this.invokedItem.itemIndex;
                            if (isNaN(result))
                                result = -1;
                            return result
                        }}, _setInvokedItem: function _setInvokedItem(value) {
                        if (this._invokedItem !== value) {
                            var oldValue = this._invokedItem;
                            this._invokedItem = value;
                            this.dispatchChangeAndNotify("invokedItem", value, oldValue)
                        }
                    }, invokeItem: function invokeItem(invocationEvent, eventData) {
                        if (!invocationEvent || !invocationEvent.srcElement || !invocationEvent.detail)
                            return;
                        this._pendingInvokeEvent = invocationEvent;
                        var getDataObject;
                        var invokedItem = {
                                srcElement: invocationEvent.srcElement, itemIndex: invocationEvent.detail.itemIndex
                            };
                        if (!invocationEvent.detail.rerender && WinJS.Utilities.hasClass(invokedItem.srcElement, "invoked")) {
                            this._clearInvokedAttributes(invokedItem.srcElement);
                            this.clearInvocation()
                        }
                        else {
                            this._setInvokedAttributes(invokedItem.srcElement);
                            if (eventData)
                                getDataObject = WinJS.Promise.wrap(eventData);
                            else if (invocationEvent.detail.itemPromise)
                                getDataObject = invocationEvent.detail.itemPromise;
                            else
                                getDataObject = this._galleryControl.getItemAtIndex(invocationEvent.detail.itemIndex)
                        }
                        if (this._currentInvokePromise) {
                            this._currentInvokePromise.cancel();
                            this._currentInvokePromise = null
                        }
                        if (getDataObject)
                            this._currentInvokePromise = getDataObject.then(function getItemsLibraryId(data) {
                                if (this._pendingInvokeEvent !== invocationEvent)
                                    return;
                                var key = data.key;
                                var itemData = data.data || data;
                                var promise;
                                if (this._clearInvocationIfNeeded(itemData, key)) {
                                    MS.Entertainment.ViewModels.MediaItemModel.augment(itemData);
                                    promise = MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(itemData).then(function() {
                                        return data
                                    })
                                }
                                else if (invokedItem.srcElement !== this.invokedItem.srcElement) {
                                    if (this.invokedItem && this.invokedItem.srcElement)
                                        this._clearInvokedAttributes(this.invokedItem.srcElement);
                                    this.invokedItem.srcElement = invokedItem.srcElement
                                }
                                return promise || WinJS.Promise.wrap(data)
                            }.bind(this)).then(function getItemData(data) {
                                if (this._pendingInvokeEvent !== invocationEvent)
                                    return;
                                var key;
                                if (data) {
                                    key = data.key;
                                    data = data.data || data
                                }
                                if (data) {
                                    this._smartBuyStateEngine = new MS.Entertainment.ViewModels.SmartBuyStateEngine;
                                    this._setupSmartButtons(data, invocationEvent.detail.itemIndex, key);
                                    MS.Entertainment.UI.Controls.assert(!data.smartBuyStateEngine, "We do not expect this property to be set already.");
                                    if (data.eventProxy)
                                        this._smartBuyStateEngine.eventProxy = data.eventProxy;
                                    else
                                        data.addProperty("smartBuyStateEngine", this._smartBuyStateEngine);
                                    MS.Entertainment.UI.Controls.UserFeedbackDialog.inlineDetailsItem = data;
                                    this._shareModel(data);
                                    invokedItem.data = data;
                                    invokedItem.key = key;
                                    this._setInvokedItem(invokedItem);
                                    return WinJS.Promise.timeout(MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.actionDelayMs).then(function() {
                                            return data
                                        })
                                }
                            }.bind(this)).then(function delayedActions(data) {
                                if (this._pendingInvokeEvent !== invocationEvent)
                                    return;
                                if (data) {
                                    if (data.hydrate && !data.hydrated) {
                                        var options = {collectionFilter: this._mediaContext && this._mediaContext.collectionFilter};
                                        data.hydrate(options).done(null, function(){})
                                    }
                                    this._smartStateEngineBindings = WinJS.Binding.bind(this._smartBuyStateEngine, {currentAppbarActions: this._setAppbarActions.bind(this)})
                                }
                                this._pendingInvokeEvent = null
                            }.bind(this), function delayedActions_Error() {
                                if (this._pendingInvokeEvent !== invocationEvent)
                                    return;
                                this._pendingInvokeEvent = null
                            }.bind(this))
                    }, _setAppbarActions: function _setAppbarActions(newValue, oldValue) {
                        if ((this._smartStateEngineBindings || (oldValue === undefined && !this._smartStateEngineBindings)) && this._mediaContext)
                            this._mediaContext.setToolbarActions(this._smartBuyStateEngine.currentAppbarActions)
                    }, _toggleOffIfNeeded: function _toggleOffIfNeeded(newKey) {
                        var toggledOff = false;
                        if (this.invokedItem && this.invokedItem.key === newKey && newKey) {
                            this.clearInvocation();
                            toggledOff = true
                        }
                        return toggledOff
                    }, _setInvokedAttributes: function _setInvokedAttributes(element) {
                        WinJS.Utilities.addClass(element, "invoked");
                        WinJS.Promise.timeout(750).done(function updateFocus() {
                            var actionList = element.querySelector(".inPlaceDetailsItemActions");
                            if (actionList && document.activeElement === element) {
                                var firstButton = actionList.querySelector(".iconButton");
                                if (firstButton)
                                    MS.Entertainment.UI.Framework.focusElement(firstButton)
                            }
                        })
                    }, _clearInvokedAttributes: function _clearInvokedAttributes(element) {
                        WinJS.Utilities.removeClass(element, "invoked")
                    }, _clearInvocationIfNeeded: function _clearInvocationIfNeeded(newData, newKey) {
                        var cleared = true;
                        if (this.invokedItem)
                            if (newData && this.invokedItem.data === newData && newKey && this.invokedItem.key === newKey)
                                cleared = false;
                            else
                                this.clearInvocation();
                        return cleared
                    }, clearInvocation: function clearInvocation() {
                        if (this._currentInvokePromise) {
                            this._currentInvokePromise.cancel();
                            this._currentInvokePromise = null
                        }
                        if (this.invokedItem) {
                            this._clearInvokedAttributes(this.invokedItem.srcElement);
                            WinJS.Utilities.removeClass(this.invokedItem.srcElement, "win-pressed");
                            if (this.invokedItem.data) {
                                MS.Entertainment.UI.Controls.UserFeedbackDialog.inlineDetailsItem = null;
                                this.invokedItem.data.smartBuyStateEngine = null
                            }
                            this._setInvokedItem(null)
                        }
                        this._unshareModel();
                        if (this._delayedActions) {
                            this._delayedActions.cancel();
                            this._delayedActions = null
                        }
                        if (this._smartBuyStateEngine) {
                            this._smartBuyStateEngine.unload();
                            this._smartBuyStateEngine = null
                        }
                        if (this._smartStateEngineBindings) {
                            this._smartStateEngineBindings.cancel();
                            this._smartStateEngineBindings = null
                        }
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    }, _setupSmartButtons: function _setupSmartButtons(mediaItem, index, key) {
                        if (mediaItem && (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(mediaItem))) {
                            MS.Entertainment.UI.Controls.assert(MS.Entertainment.Utilities.isMusicApp, "This code should only get called in the music app");
                            var containingMedia = null;
                            if (this._galleryControl.mediaContext && this._galleryControl.mediaContext.containingMedia && this._galleryControl.dataSource) {
                                if (this._galleryControl.mediaContext.containingMedia.copy)
                                    containingMedia = this._galleryControl.mediaContext.containingMedia.copy();
                                else
                                    containingMedia = {
                                        playbackItemSource: this._galleryControl.mediaContext.containingMedia.playbackItemSource, dontUseTrackListForPlayback: this._galleryControl.mediaContext.containingMedia.dontUseTrackListForPlayback
                                    };
                                containingMedia.playbackKey = key;
                                containingMedia.playbackOffset = this._galleryControl.dataSource.indexToSourceIndex ? this._galleryControl.dataSource.indexToSourceIndex(index) : index
                            }
                            if (this._mediaContext) {
                                this._mediaContext.clearContext();
                                this._mediaContext = null
                            }
                            var hydratePromise = WinJS.Promise.as();
                            if (MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(mediaItem))
                                hydratePromise = mediaItem.hydrate({forceUpdate: mediaItem.fromCollection});
                            hydratePromise.done(function setMediaContext() {
                                this._mediaContext = this._appBarService.pushMediaContext(mediaItem, this._smartButtonCallbacks, [], {
                                    executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.invokeInline, galleryControl: this._galleryControl, containingMedia: containingMedia, invokedIndex: index
                                });
                                this._mediaContext.collectionFilter = (this._galleryControl.mediaContext && this._galleryControl.mediaContext.collectionFilter) || Microsoft.Entertainment.Platform.MediaAvailability.available;
                                if (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrack(mediaItem))
                                    this._smartBuyStateEngine.initialize(mediaItem, MS.Entertainment.ViewModels.SmartBuyButtons.getTrackInlineDetailsButtons(this._mediaContext), MS.Entertainment.ViewModels.MusicStateHandlers.onTrackInlineDetailsStateChanged);
                                else if (MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(mediaItem))
                                    this._smartBuyStateEngine.initialize(mediaItem, MS.Entertainment.ViewModels.SmartBuyButtons.getMusicVideoInlineDetailsButtons(this._mediaContext), MS.Entertainment.ViewModels.MusicStateHandlers.onMusicVideoInlineDetailsStateChanged)
                            }.bind(this))
                        }
                        else if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video);
                        else
                            MS.Entertainment.UI.Controls.fail("unexpected mediaType in inline buttons.")
                    }, _shareModel: function _shareModel(media) {
                        var sender = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareSender);
                        if (media) {
                            this._unshareModel();
                            try {
                                this._shareOperation = sender.pendingShare(media)
                            }
                            catch(e) {
                                this._shareOperation = null
                            }
                        }
                    }, _unshareModel: function _unshareModel() {
                        if (this._shareOperation) {
                            this._shareOperation.cancel();
                            this._shareOperation = null
                        }
                    }
            }, {
                create: WinJS.Utilities.markSupportedForProcessing(function create(galleryControl) {
                    return new MS.Entertainment.UI.Controls.GalleryControlInvocationHelper(galleryControl)
                }), actionDelayMs: 300
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        TrackGalleryControlInvocationHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryControlInvocationHelper", function trackGalleryControlInvocationHelper(galleryControl) {
            MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype.constructor.apply(this, arguments)
        }, {
            album: null, _setupSmartButtons: function _setupSmartButtons(mediaItem, index, key) {
                    if (mediaItem && this.album && "album" in mediaItem)
                        mediaItem.album = this.album;
                    MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype._setupSmartButtons.apply(this, arguments)
                }
        }, {createTrackHelper: WinJS.Utilities.markSupportedForProcessing(function createTrackHelper(galleryControl) {
                return new MS.Entertainment.UI.Controls.TrackGalleryControlInvocationHelper(galleryControl)
            })}), SmartDJGalleryControlInvocationHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryControlInvocationHelper", function SmartDJGalleryControlInvocationHelper(galleryControl) {
                MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype.constructor.apply(this, arguments)
            }, {invokeItem: function invokeItem(invocationEvent, eventData) {
                    var getDataPromise;
                    var invokedItem = {
                            srcElement: invocationEvent.srcElement, itemIndex: invocationEvent.detail.itemIndex
                        };
                    if (eventData)
                        getDataPromise = WinJS.Promise.wrap(eventData);
                    else if (invocationEvent.detail.itemPromise)
                        getDataPromise = invocationEvent.detail.itemPromise;
                    else
                        getDataPromise = this._galleryControl.getItemAtIndex(invocationEvent.detail.itemIndex);
                    MS.Entertainment.UI.Controls.assert(getDataPromise, "cannot obtain invoked object");
                    getDataPromise.done(function getItemData(data) {
                        var key = data.key;
                        data = data.data || data;
                        if (invokedItem.srcElement === invocationEvent.srcElement) {
                            var _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playSmartDJ);
                            action.automationId = MS.Entertainment.UI.AutomationIds.galleryPlaySmartDJ;
                            action.parameter = {
                                mediaItem: data, showAppBar: true
                            };
                            if (invokedItem.srcElement)
                                MS.Entertainment.Utilities.Telemetry.logPageAction({
                                    itemPropertyBag: data, domElement: invokedItem.srcElement
                                }, {
                                    uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.SmartDJ
                                });
                            action.execute()
                        }
                    }.bind(this), function getItemDataFailed() {
                        MS.Entertainment.UI.Controls.assert(getDataPromise, "cannot find invoked data")
                    })
                }}, {createSmartDJHelper: WinJS.Utilities.markSupportedForProcessing(function createSmartDJHelper(galleryControl) {
                    return new MS.Entertainment.UI.Controls.SmartDJGalleryControlInvocationHelper(galleryControl)
                })}), SearchDetailsInvocationHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryControlInvocationHelper", function searchDetailsInvocationHelper(galleryControl) {
                MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype.constructor.apply(this, arguments)
            }, {invokeItem: function invokeItem(invocationEvent, eventData) {
                    var invokedItem = eventData.data;
                    if (invokedItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                        MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype.invokeItem.apply(this, arguments);
                    else {
                        var popOverParameters = this._galleryControl.createPopOverParameters(eventData);
                        MS.Entertainment.Platform.PlaybackHelpers.showItemDetails(popOverParameters)
                    }
                }}, {create: WinJS.Utilities.markSupportedForProcessing(function create(galleryControl) {
                    return new MS.Entertainment.UI.Controls.SearchDetailsInvocationHelper(galleryControl)
                })}), SearchHorizontalDetailsInvocationHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryControlInvocationHelper", function searchHorizontalDetailsInvocationHelper(galleryControl) {
                MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype.constructor.apply(this, arguments)
            }, {invokeItem: function invokeItem(invocationEvent, eventData) {
                    var contentRestrictionService = null;
                    var contentRestrictionBrowsePolicyUpdatePromise = WinJS.Promise.as();
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.contentRestrictionService)) {
                        contentRestrictionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionService);
                        contentRestrictionBrowsePolicyUpdatePromise = contentRestrictionService.getBrowsePolicyUpdatePromise()
                    }
                    contentRestrictionBrowsePolicyUpdatePromise.done(function invokeItem() {
                        if (contentRestrictionService && contentRestrictionService.hasBrowseFilterRestriction() && eventData.data && eventData.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.track) {
                            var trackInvocationHelper = new MS.Entertainment.UI.Controls.TrackGalleryControlInvocationHelper(this);
                            trackInvocationHelper.invokeItem(invocationEvent, eventData)
                        }
                        else {
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            if (actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.mediaItemDetailsNavigate)) {
                                var mediaItemDetailsAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.mediaItemDetailsNavigate);
                                mediaItemDetailsAction.parameter = {
                                    shouldGetLocationFromMediaItem: true, forceMarketplace: false, data: eventData.data
                                };
                                if (mediaItemDetailsAction.canExecute(mediaItemDetailsAction.parameter))
                                    return mediaItemDetailsAction.execute()
                            }
                            var popOverParameters = this._galleryControl.createPopOverParameters(eventData);
                            MS.Entertainment.Platform.PlaybackHelpers.showItemDetails(popOverParameters)
                        }
                    }.bind(this), function error(){})
                }}, {create: WinJS.Utilities.markSupportedForProcessing(function create(galleryControl) {
                    return new MS.Entertainment.UI.Controls.SearchHorizontalDetailsInvocationHelper(galleryControl)
                })}), DoNothingSelectionHelper: MS.Entertainment.UI.Framework.define(null, {
                dispose: function dispose(){}, updateSelectedItems: function updateSelectedItems(newSelection, oldSelection){}
            }), GalleryControlSelectionHelper: MS.Entertainment.UI.Framework.define(function galleryControlSelectionHelper(galleryControl, options) {
                this._galleryControl = galleryControl;
                if (options)
                    WinJS.UI.setOptions(this, WinJS.Binding.unwrap(options));
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appToolbar)) {
                    this._appBarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                    this._updateContainingMedia();
                    this._mediaContext = this._appBarService.pushMediaContext(this._galleryControl.selectedItems, this._galleryControl.selectionHandlers, [], {
                        galleryControl: this._galleryControl, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.selection, containingMedia: this._containingMedia
                    });
                    this._mediaContext.collectionFilter = galleryControl._mediaContext && galleryControl._mediaContext.collectionFilter
                }
            }, {
                actionCallbacks: null, allowShare: true, _mediaContext: null, _containingMedia: null, _appBarService: null, _galleryControl: null, _selectedItemStateEngine: null, _selectedItemBindings: null, _multiSelectItemActions: null, _selectedItemsNum: null, _disposed: false, _shareOperation: null, dispose: function dispose() {
                        MS.Entertainment.UI.Controls.assert(!this._dispose, "dispose already called on gallery selection helper.");
                        if (this._disposed)
                            return;
                        this._disposed = true;
                        if (this._selectedItemBindings) {
                            this._selectedItemBindings.cancel();
                            this._selectedItemBindings = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        this._multiSelectItemActions = null;
                        this._galleryControl = null;
                        this._cancelShareMedia();
                        var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                        if (appBarControl && appBarControl.hide)
                            appBarControl.hide(true);
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    }, updateSelectedItems: function updateSelectedItems(newSelection, oldSelection) {
                        if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appToolbar))
                            return;
                        if (!newSelection || newSelection.length === 0) {
                            MS.Entertainment.UI.Controls.assert(newSelection.length, "Dispose was expected to be called instead of this function if there are no items selected.");
                            return
                        }
                        this._cancelShareMedia();
                        this._selectedItemsNum = newSelection.length;
                        if (newSelection.length === 1)
                            this._handleGallerySingleSelection(newSelection[0]);
                        else
                            this._handleGalleryMultiSelection(newSelection);
                        if (this._mediaContext && this._galleryControl)
                            this._mediaContext.mediaItem = this._galleryControl.selectedItems;
                        this._updateContainingMedia()
                    }, _updateContainingMedia: function _updateContainingMedia() {
                        var containingMedia = this._containingMedia;
                        var index = this._galleryControl.selectedIndex;
                        if (!containingMedia && this._galleryControl && this._galleryControl.mediaContext && this._galleryControl.mediaContext.containingMedia)
                            if (this._galleryControl.mediaContext.containingMedia.copy)
                                containingMedia = this._galleryControl.mediaContext.containingMedia.copy();
                            else
                                containingMedia = {
                                    playbackItemSource: this._galleryControl.mediaContext.containingMedia.playbackItemSource, playbackOffset: -1, playbackKey: null
                                };
                        if (!containingMedia)
                            containingMedia = {
                                playbackItemSource: null, playbackOffset: -1, playbackKey: null
                            };
                        if (this._galleryControl && this._galleryControl.dataSource) {
                            containingMedia.playbackSelectionRanges = this._galleryControl.selection && this._galleryControl.selection.getRanges();
                            containingMedia.playbackKey = this._galleryControl.selectedKey;
                            containingMedia.playbackOffset = this._galleryControl.dataSource.indexToSourceIndex ? this._galleryControl.dataSource.indexToSourceIndex(this._galleryControl.selectedIndex) : this._galleryControl.selectedIndex
                        }
                        else {
                            containingMedia.playbackSelectionRanges = null;
                            containingMedia.playbackKey = null;
                            containingMedia.playbackOffset = -1
                        }
                        this._containingMedia = containingMedia
                    }, _handleGallerySingleSelection: function _handleGallerySingleSelection(selectedIndex) {
                        if (this._disposed || !this._galleryControl)
                            return;
                        if (this._selectedItemBindings) {
                            this._selectedItemBindings.cancel();
                            this._selectedItemBindings = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        this._multiSelectItemActions = null;
                        this._galleryControl.getDataObjectAtIndex(selectedIndex).then(function getDataObjectAtIndex_Success(item) {
                            if (this._disposed || this._selectedItemsNum !== 1)
                                return;
                            MS.Entertainment.ViewModels.MediaItemModel.augment(item);
                            MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(item);
                            if (item.hydrate && !item.hydrated) {
                                var options = {collectionFilter: this._mediaContext && this._mediaContext.collectionFilter};
                                item.hydrate(options).done(function hydrate_Done() {
                                    this._shareMedia(item)
                                }.bind(this), function hydrate_Error() {
                                    this._shareMedia(item)
                                }.bind(this))
                            }
                            else
                                this._shareMedia(item);
                            this._createSelectionStateEngineForMediaItem(item)
                        }.bind(this), function getDataObjectAtIndex_Error(){})
                    }, _handleGalleryMultiSelection: function _handleGalleryMultiSelection(selectedIndex) {
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicShareToPhone))
                            if (this._galleryControl.selectedItems && this._galleryControl.selectedItems.count)
                                this._shareMedia(this._galleryControl.selectedItems);
                        if (this._multiSelectItemActions) {
                            var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                            if (appBarControl)
                                appBarControl.show();
                            return
                        }
                        if (this._selectedItemBindings) {
                            this._selectedItemBindings.cancel();
                            this._selectedItemBindings = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        this._multiSelectItemActions = [];
                        this._galleryControl.getDataObjectAtIndex(selectedIndex[0]).then(function getDataObjectAtIndex_Success(mediaItem) {
                            if (this._disposed || this._selectedItemsNum <= 1)
                                return;
                            switch (mediaItem && mediaItem.mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                    this._multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getMusicPlaylistMultiSelectActions(mediaItem);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    this._multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getMusicMultiSelectActions(mediaItem);
                                    break;
                                default:
                                    if (mediaItem.smartDJ)
                                        this._multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getSmartDJMultiSelectActions();
                                    else
                                        this._multiSelectItemActions = [];
                                    break
                            }
                            this._updateAppBarActions(this._multiSelectItemActions)
                        }.bind(this), function getDataObjectAtIndex_Error(){})
                    }, _shareMedia: function _shareMedia(media) {
                        var sender = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareSender);
                        if (!this._shareOperation && media && this.allowShare)
                            this._shareOperation = sender.pendingShare(media)
                    }, _cancelShareMedia: function _cancelShareMedia() {
                        if (this._shareOperation) {
                            this._shareOperation.cancel();
                            this._shareOperation = null
                        }
                    }, _createSelectionStateEngineForMediaItem: function _createSelectionStateEngineForMediaItem(mediaItem) {
                        var handler;
                        if (this._disposed || this._selectedItemsNum !== 1)
                            return;
                        this._selectedItemStateEngine = MS.Entertainment.ViewModels.SmartBuyStateEngine.getSelectionStateFromMediaItem(mediaItem);
                        if (this._selectedItemStateEngine)
                            this._selectedItemBindings = WinJS.Binding.bind(this._selectedItemStateEngine, {currentAppbarActions: this._setSelectedItemAppbarActions.bind(this)})
                    }, _setSelectedItemAppbarActions: function _setSelectedItemAppbarActions(newValue, oldValue) {
                        if (oldValue !== undefined && this._selectedItemsNum === 1)
                            this._updateAppBarActions(newValue)
                    }, _updateAppBarActions: function _updateAppBarActions(newActions) {
                        if (this._mediaContext)
                            this._mediaContext.setToolbarActions(newActions);
                        if (newActions.length > 0) {
                            var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                            if (appBarControl)
                                appBarControl.show()
                        }
                    }
            }), GalleryControl: MS.Entertainment.UI.Framework.defineUserControl(null, function galleryControlConstructor(element, options) {
                window.msWriteProfilerMark("ent:GalleryControl.Constructed");
                this._eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                this._eventProvider.traceGalleryControl_Load_Start();
                this.readyState = MS.Entertainment.UI.Controls.GalleryControl.ReadyState.itemsLoading;
                this._selectionHandlers = [];
                this.selectionHelperFactory = function selectionHelperFactory(galleryControl) {
                    return new MS.Entertainment.UI.Controls.GalleryControlSelectionHelper(galleryControl, this.selectionHelperOptions)
                };
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                this._uiStateHandlers = MS.Entertainment.Utilities.addEventHandlers(uiStateService, {
                    isSnappedChanged: this._onSnappedChanged.bind(this), windowresize: this._handleWindowResize.bind(this)
                });
                if (MS.Entertainment.Utilities.isApp2 && this.pagesToLoad === WinJS.UI._DEFAULT_PAGES_TO_LOAD)
                    this.pagesToLoad = 1
            }, {
                controlName: "GalleryControl", debugId: null, ignoreChildrenInitialization: true, horizontal: false, headerPosition: "top", _selectionMode: "none", _tap: "none", _swipeBehavior: "none", _selectionStyleFilled: false, _dragStarted: false, maxRows: -1, layout: "grid", loadingBehavior: "randomAccess", headerType: "auto", backdropColor: null, panelOptions: null, queryToPause: null, slotSize: null, itemMargin: null, itemSize: null, largeItemSize: null, itemClass: null, headerClass: null, autoSize: false, preventResizeJitter: false, suppressInvokeBubble: false, forceInteractive: false, handleFocus: false, onFocusListviewClass: null, pagesToLoad: WinJS.UI._DEFAULT_PAGES_TO_LOAD, inlineExtraData: null, raisePanelReadyEvents: true, raisePanelResetEvents: false, delayHydrateLibraryId: false, emptyGalleryModel: null, userGatedGalleryModel: null, userGatedGallery: false, syncScreenModel: null, syncScreen: false, initialSelected: -1, initialInvoked: -1, initialVisible: -1, invocationHelper: null, doubleClickHelper: null, _selectionHandlers: null, focusFirstItemOnPageLoad: false, restoreFocusOnDataChanges: false, multiSize: false, startNewColumnOnHeaders: false, largeItemIndex: -1, selectionHelperFactory: null, selectionHelperOptions: null, allowSelectAll: true, allowHeaders: true, actionOptions: null, doubleClickActionOptions: null, listViewClassName: null, orientation: null, ensureNextItemVisibleCount: 0, scrollToOnInvoked: true, shrinkAndStayHeader: false, handleSelectedItemsChangedEvent: false, _userSelectedEverything: false, _uiStateHandlers: null, _invokeBehavior: "popOver", _invokeHelperFactory: null, _itemsDraggable: false, _itemsReorderable: false, _dragBetweenElement: -1, _eventProvider: null, _dataSourceHandlers: null, _dataSourceItemChangeHandlers: null, _doubleClickBehavior: "play", _listView: null, _zoomView: null, _zoomedOutView: null, _readyStateCallback: null, _selectedIndexChangedCallback: null, _itemInvoked: null, _initialItemCount: -1, _latestCount: -1, _notificationHandler: null, _listBinding: null, _navigationBindings: null, _raisedPanelReady: false, _raisedPanelEmpty: false, _isEmpty: false, _isSyncing: false, _internalDataSource: null, _focusEventHandler: null, _listViewEventHandler: null, _zoomViewEventHandler: null, _previousCanZoom: false, _listViewEventCaptureHandler: null, _templateSelector: null, _grouperItemThreshold: _defaultGrouperItemThreshold, _minimumListLength: 1, _selectionHelper: null, _mediaContext: null, _mediaContextOwned: true, _dataSource: null, _invocationHelperEvents: null, _updateCount: 0, _templateSelectorConstructor: MS.Entertainment.UI.Controls.GalleryTemplateSelector, _pendingSelectionFromInvoke: -1, _maxSelectionCount: -1, _semanticZoomInitType: null, _firstPageRendered: false, _ignoreNextInteractiveCheck: false, _restoreFocusIndex: -1, _listViewHadFocus: false, _firstPagedRenderedEventDispatched: false, _firstPagedDelayInitializedHandled: false, _inplaceGrouper: null, _delayInitializeSignal: null, _mediaControlEventHandler: null, _mediaControlCommandEnabled: true, _savedScrollPosition: null, _listViewViewport: null, _delayInitializedChildren: false, _moreThanFirstPageRendered: false, _moreThanFirstPageRenderedWorker: null, _collectionFilter: Microsoft.Entertainment.Platform.MediaAvailability.available, blockDelayInitializeOfChildren: true, allowZoom: false, initialZoomedOut: false, zoomedOutLayout: "auto", maxSelectionCount: {
                        get: function() {
                            return this._maxSelectionCount
                        }, set: function(value) {
                                if (this._maxSelectionCount !== value)
                                    this._maxSelectionCount = typeof value !== "number" ? -1 : value
                            }
                    }, isFirstPageRendered: {get: function() {
                            return this._firstPageRendered
                        }}, templateSelectorConstructor: {
                        get: function() {
                            return this._templateSelectorConstructor
                        }, set: function(value) {
                                if (value !== this._templateSelectorConstructor) {
                                    this._templateSelectorConstructor = value || MS.Entertainment.UI.Controls.GalleryTemplateSelector;
                                    this._templateSelector = null
                                }
                            }
                    }, dataSource: {
                        get: function() {
                            return this._dataSource
                        }, set: function(value) {
                                if (value !== this._dataSource && !this._unloaded) {
                                    var oldValue = this._dataSource;
                                    this._dataSource = value;
                                    this._dataSourceUpdated(this._dataSource, oldValue);
                                    window.msWriteProfilerMark("ent:GalleryControl.GotData");
                                    this.notify("dataSource", this._dataSource, oldValue)
                                }
                            }
                    }, grouperItemThreshold: {
                        get: function() {
                            return this._grouperItemThreshold
                        }, set: function(value) {
                                if (isNaN(value))
                                    value = _defaultGrouperItemThreshold;
                                this._grouperItemThreshold = value
                            }
                    }, minimumListLength: {
                        get: function() {
                            return this._minimumListLength
                        }, set: function(value) {
                                if (isNaN(value))
                                    value = 1;
                                this._minimumListLength = value;
                                if (this._notificationHandler)
                                    this._notificationHandler.minimumListLength = value
                            }
                    }, templateSelector: {get: function() {
                            if (!this._templateSelector)
                                this._templateSelector = new this.templateSelectorConstructor(this);
                            return this._templateSelector
                        }}, itemTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item, value)
                            }
                    }, headerTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header, value)
                            }
                    }, actionTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.action)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.action, value)
                            }
                    }, zoomedOutTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.zoomedOut)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.zoomedOut, value)
                            }
                    }, emptyGalleryTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.emptyGallery)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.emptyGallery, value)
                            }
                    }, userGatedGalleryTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.userGatedGallery)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.userGatedGallery, value)
                            }
                    }, syncScreenTemplate: {
                        get: function getSyncScreenTemplate() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.syncScreen)
                        }, set: function setSyncScreenTemplate(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.syncScreen, value)
                            }
                    }, panelTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.panel)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.panel, value)
                            }
                    }, _panelTemplateTypeMappings: null, panelTemplateTypeMappings: {
                        get: function() {
                            return this._panelTemplateTypeMappings
                        }, set: function(value) {
                                if (value !== this._panelTemplateTypeMappings || !this._panelTemplateTypeMappings)
                                    this._panelTemplateTypeMappings = value
                            }
                    }, _grouper: null, grouper: {
                        get: function() {
                            if (!this._grouper && this._grouperType)
                                this._grouper = new this._grouperType;
                            else if (!this._grouperType && this._grouper)
                                this._grouper = null;
                            return this._grouper
                        }, set: function(value) {
                                if (value !== this._grouper) {
                                    this._grouper = value;
                                    if (this._grouper) {
                                        this._grouperType = Object.getPrototypeOf(this._grouper);
                                        this._grouperType = this._grouperType && this._grouperType.constructor
                                    }
                                    this._updateRefreshThreshold()
                                }
                            }
                    }, _grouperType: null, grouperType: {
                        get: function() {
                            return this._grouperType
                        }, set: function(value) {
                                if (value !== this._grouperType) {
                                    this._grouper = null;
                                    this._grouperType = value;
                                    this._updateRefreshThreshold()
                                }
                            }
                    }, selectionMode: {
                        get: function() {
                            return this._selectionMode
                        }, set: function(value) {
                                if (value !== this._selectionMode) {
                                    this._selectionMode = value;
                                    if (this._listView)
                                        this._listView.selectionMode = value
                                }
                            }
                    }, selectionStyleFilled: {
                        get: function() {
                            return this._selectionStyleFilled
                        }, set: function(value) {
                                if (value !== this._selectionStyleFilled) {
                                    this._selectionStyleFilled = value;
                                    if (this._listView && this._listView._element)
                                        if (value)
                                            WinJS.Utilities.addClass(this._listView._element, MS.Entertainment.UI.Controls.GalleryControl.selectionFilledClass);
                                        else
                                            WinJS.Utilities.removeClass(this._listView._element, MS.Entertainment.UI.Controls.GalleryControl.selectionFilledClass)
                                }
                            }
                    }, tap: {
                        get: function() {
                            return this._tap
                        }, set: function(value) {
                                if (value !== this._tap) {
                                    this._tap = value;
                                    if (this._listView)
                                        this._listView.tapBehavior = value
                                }
                            }
                    }, swipeBehavior: {
                        get: function() {
                            return this._swipeBehavior
                        }, set: function(value) {
                                if (value !== this._swipeBehavior) {
                                    this._swipeBehavior = value;
                                    if (this._listView)
                                        this._listView.swipeBehavior = value
                                }
                            }
                    }, doubleClickBehavior: {
                        get: function() {
                            return this._doubleClickBehavior
                        }, set: function(value) {
                                if (value !== this._doubleClickBehavior)
                                    this._doubleClickBehavior = value
                            }
                    }, invokeBehavior: {
                        get: function() {
                            return this._invokeBehavior
                        }, set: function(value) {
                                if (value !== this._invokeBehavior) {
                                    this._invokeBehavior = value;
                                    this._updateInvokeHelper()
                                }
                            }
                    }, invokeHelperFactory: {
                        get: function() {
                            return this._invokeHelperFactory
                        }, set: function(value) {
                                if (value !== this._invokeHelperFactory) {
                                    this._invokeHelperFactory = value;
                                    this._updateInvokeHelper()
                                }
                            }
                    }, _isDragAndDropEnabled: function _isDragAndDropEnabled() {
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        return configurationManager.shell.dragAndDropEnabled
                    }, itemsDraggable: {
                        get: function() {
                            return this._isDragAndDropEnabled() && this._itemsDraggable
                        }, set: function(value) {
                                value = this._isDragAndDropEnabled() && value;
                                if (value !== this._itemsDraggable) {
                                    this._itemsDraggable = value;
                                    if (this._listView)
                                        this._listView.itemsDraggable = value
                                }
                            }
                    }, itemsReorderable: {
                        get: function() {
                            return this._isDragAndDropEnabled() && this._itemsReorderable
                        }, set: function(value) {
                                value = this._isDragAndDropEnabled() && value;
                                if (value !== this._itemsReorderable) {
                                    this._itemsReorderable = value;
                                    if (this._listView)
                                        this._listView.itemsReorderable = value
                                }
                            }
                    }, selectionHandlers: {get: function get_selectionHandlers() {
                            return this._selectionHandlers
                        }}, setSelectionHandlers: function setSelectionHandlers(handlers) {
                        this.clearSelectionHandlers();
                        this.addSelectionHandlers(handlers)
                    }, addSelectionHandlers: function addSelectionHandlers(handlers) {
                        this._selectionHandlers = this._selectionHandlers || [];
                        if (Array.isArray(handlers))
                            this._selectionHandlers = this._selectionHandlers.concat(handlers);
                        else
                            this._selectionHandlers.push(handlers)
                    }, clearSelectionHandlers: function clearSelectionHandlers() {
                        this._selectionHandlers = []
                    }, mediaContext: {
                        get: function() {
                            return this._mediaContext
                        }, set: function(value) {
                                if (value !== this._mediaContext) {
                                    this._releaseMediaContext();
                                    this._mediaContext = value;
                                    this._mediaContextOwned = false
                                }
                            }
                    }, updateCollectionFilter: function(filter) {
                        this._collectionFilter = filter;
                        if (this.mediaContext && this._mediaContextOwned)
                            this.mediaContext.collectionFilter = filter
                    }, processItemData: function processItemData(itemData) {
                        return itemData
                    }, internalDataSource: {get: function() {
                            return this._internalDataSource
                        }}, selection: {get: function() {
                            return this._listView ? this._listView.selection : null
                        }}, finalZoomedOutLayout: {get: function() {
                            return this.zoomedOutLayout === MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.auto ? this.layout : this.zoomedOutLayout
                        }}, finalZoomedOutTemplateType: {get: function() {
                            return this.zoomedOutTemplate ? MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.zoomedOut : MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header
                        }}, useInPlaceHeaders: {get: function() {
                            return this.headerType === MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace
                        }}, canGroup: {get: function get_canGroup() {
                            var canGroup;
                            canGroup = !!(this.dataSource && this.dataSource.groups && !this.dataSource.grouper.noHeaderGroups);
                            canGroup = canGroup || (this.useInPlaceHeaders && !!this.grouper);
                            canGroup = canGroup || !!this.grouper;
                            canGroup = canGroup && this.allowHeaders;
                            if (canGroup) {
                                var thresholdMet = this.useInPlaceHeaders || this._initialItemCount >= this.grouperItemThreshold || (!!this.grouperType && this.grouperType !== MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper);
                                canGroup = thresholdMet
                            }
                            return canGroup
                        }}, canZoom: {get: function() {
                            return this.allowZoom && !!this.dataSource && !!this.dataSource.hasGroupHints
                        }}, isZoomReady: {get: function() {
                            return this.allowZoom && !!this.dataSource && !!this.dataSource.isGroupHintsReady
                        }}, isZoomedOut: {
                        get: function() {
                            return this._zoomView ? this._zoomView.zoomedOut : false
                        }, set: function(newValue) {
                                var oldValue = this.isZoomedOut;
                                if (this._zoomView && oldValue !== newValue && !this._unloaded) {
                                    msWriteProfilerMark("ent:GalleryControl:isZoomedChanging");
                                    this._zoomView.zoomedOut = newValue
                                }
                                this.updateAndNotify("isZoomedOut", newValue)
                            }
                    }, initialItemCount: {get: function getItemCount() {
                            return this._initialItemCount
                        }}, _activeListView: {get: function() {
                            return this.isZoomedOut ? this._zoomedOutView : this._listView
                        }}, hasSelectionOrInvocation: {get: function get_hasSelectionOrInvocation() {
                            var selection;
                            var index = -1;
                            if (this._listView && this._listView.selection)
                                selection = this._listView.selection.getIndices();
                            if (selection && selection.length > 0)
                                index = selection[0];
                            if (this.invocationHelper && this.invocationHelper.invokedIndex >= 0)
                                index = this.invocationHelper.invokedIndex;
                            return index >= 0
                        }}, hasMultiSelection: {get: function get_hasMultiSelection() {
                            if (this._listView && this._listView.selection) {
                                var selection = this._listView.selection.getIndices();
                                return selection && selection.length > 1
                            }
                            return false
                        }}, _waitForGalleryReady: function _waitForGalleryReady() {
                        var readyPromise;
                        if (this.readyState !== MS.Entertainment.UI.Controls.GalleryControl.ReadyState.complete) {
                            var readySignal = new MS.Entertainment.UI.Framework.Signal;
                            var readyStateEventHandler = MS.Entertainment.Utilities.addEventHandlers(this._listView, {loadingstatechanged: function readyStateChanged() {
                                        var readyState = this._listView && this._listView.loadingState;
                                        if (readyState === MS.Entertainment.UI.Controls.GalleryControl.ReadyState.complete)
                                            readySignal.complete()
                                    }.bind(this)});
                            WinJS.Promise.timeout(1000, readySignal.promise);
                            readyPromise = readySignal.promise.then(null, function assertGalleryReady() {
                                MS.Entertainment.UI.Controls.fail("_waitForGalleryReady timed out before gallery was ready. The timeout might need to be extended if this occurs regularly.")
                            }).then(function clearEventHandler() {
                                if (readyStateEventHandler) {
                                    readyStateEventHandler.cancel();
                                    readyStateEventHandler = null
                                }
                            })
                        }
                        return WinJS.Promise.as(readyPromise)
                    }, safeFocusAndEnsureVisible: function safeFocusAndEnsureVisible(index) {
                        if (!this.hasSelectionOrInvocation && index >= 0)
                            this._waitForGalleryReady().done(function galleryReady() {
                                this.setIndexFocus(index);
                                this.ensureVisible(index)
                            }.bind(this), function galleryReadyFailed(){})
                    }, setIndexFocus: function setIndexFocus(index) {
                        if (this._listView)
                            this._listView.currentItem = {
                                index: index, hasFocus: true
                            }
                    }, setVisibleIndexFocus: function setVisibleIndexFocus(index) {
                        if (MS.Entertainment.Utilities.isApp2 && MS.Entertainment.UI.Framework.canMoveFocus(document.activeElement))
                            return;
                        if (this._listView && MS.Entertainment.UI.Framework.canMoveFocus(this._listView._element))
                            this._listView.currentItem = {
                                index: index, hasFocus: true, showFocus: MS.Entertainment.Framework.KeyboardInteractionListener.showKeyboardFocus
                            }
                    }, ensureVisible: function ensureVisible(index) {
                        if (this._listView)
                            this._listView.ensureVisible(index)
                    }, _ensureSelectionInvokedVisible: function _ensureSelectionInvokedVisible(offset) {
                        var selection;
                        var index = -1;
                        offset = offset || 0;
                        if (this._listView && this._listView.selection)
                            selection = this._listView.selection.getIndices();
                        if (selection && selection.length > 0)
                            index = selection[0];
                        if (this.invocationHelper && this.invocationHelper.invokedIndex >= 0)
                            index = this.invocationHelper.invokedIndex;
                        if (index >= 0)
                            this.ensureVisible(index + offset)
                    }, getElementAtIndex: function getElementAtIndex(index) {
                        if (this._listView)
                            return this._listView.elementFromIndex(index);
                        return null
                    }, _releaseMediaContext: function _releaseMediaContext() {
                        if (this._mediaContext && this._mediaContextOwned) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    }, getItemAtIndex: function getItemAtIndex(index) {
                        var promise = null;
                        if (this._listView && index >= 0)
                            promise = this._listView.itemDataSource.itemFromIndex(index);
                        return WinJS.Promise.as(promise)
                    }, getDataObjectAtIndex: function getDataObjectAtIndex(index) {
                        var promise;
                        if (this._listView && index >= 0)
                            return this._listView.itemDataSource.itemFromIndex(index).then(function(item) {
                                    return item.data
                                });
                        else
                            promise = WinJS.Promise.wrap(null);
                        return promise
                    }, getGroupedDataSource: function getGroupedDataSource() {
                        var canGroup = this.canGroup;
                        var groupedDataSource = null;
                        if (canGroup && this.internalDataSource && this.dataSource && this.dataSource.groups) {
                            groupedDataSource = this.internalDataSource;
                            groupedDataSource.groups = new MS.Entertainment.Utilities.VirtualizedDataSource(this.dataSource.groups)
                        }
                        else if (canGroup && this.internalDataSource && !this.useInPlaceHeaders) {
                            var groupData = function groupData(item) {
                                    return !this.grouper ? {} : (this.grouper.useKeyAsData) ? {title: this.grouper.createKey(item)} : this.grouper.createData(item)
                                };
                            var groupKey = function groupKey(item) {
                                    if (this.grouper)
                                        return this.grouper.createKey(item)
                                };
                            groupedDataSource = WinJS.UI.computeDataSourceGroups(this.internalDataSource, groupKey.bind(this), groupData.bind(this));
                            MS.Entertainment.UI.Controls.assert(this.loadingBehavior === MS.Entertainment.UI.Controls.GalleryControl.LoadingBehavior.randomAccess, "ListView only supports randomAccess loading behavior for grouped views")
                        }
                        return groupedDataSource
                    }, _groupByGrouper: function groupByGrouper(item) {
                        return this.grouper.execute(item)
                    }, selectIndex: function selectIndex(index) {
                        if (index && this._listView && this._listView.selection) {
                            var currentSelection = this._listView.selection.getIndices();
                            if (currentSelection.length === 0 || index !== currentSelection[currentSelection.length - 1]) {
                                this._listView.selection.set(index);
                                this._listView.ensureVisible(index)
                            }
                        }
                    }, clearSelection: function clearSelection() {
                        if (this._listView && this._listView.selection)
                            this._listView.selection.clear();
                        this._setSelectedIndex(-1)
                    }, clearInvocation: function clearInvocation() {
                        if (this.invocationHelper)
                            this.invocationHelper.clearInvocation();
                        this._pendingSelectionFromInvoke = -1
                    }, scrollTo: function scrollTo(index) {
                        if (this._listView)
                            this._listView.indexOfFirstVisible = index
                    }, initialize: function initialize() {
                        this.bind("autoSizeMin", this.refreshGalleryWidth.bind(this));
                        this._itemInvoked = this.itemInvoked.bind(this);
                        this._notificationHandler = new MS.Entertainment.UI.Controls.GalleryListDataNotificationHandler(this._dataSourceContentsChanged.bind(this));
                        this._updateRefreshThreshold();
                        this.selectedIndices = [];
                        var navigation;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                            navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        if (navigation)
                            this._navigationBindings = WinJS.Binding.bind(navigation, {currentPage: this._pageChanged.bind(this)});
                        if (!this._delayInitializeSignal)
                            this._delayInitializeSignal = new MS.Entertainment.UI.Framework.Signal
                    }, _delayInitialized: function _delayInitialized() {
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appToolbar)) {
                            var appBarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                            if (this._mediaContextOwned) {
                                this._mediaContext = appBarService.pushDefaultContext();
                                this._mediaContext.collectionFilter = this._collectionFilter
                            }
                            this._updateInvokeHelper();
                            this._updateSelection()
                        }
                        if (this.initialInvoked !== -1 && this.invocationHelper) {
                            var eventDetail = {
                                    itemPromise: this.getItemAtIndex(this.initialInvoked), itemIndex: this.initialInvoked, rerender: true
                                };
                            var domElement = this.getElementAtIndex(this.initialInvoked);
                            this.invocationHelper.invokeItem({
                                srcElement: domElement && domElement.parentElement, detail: eventDetail
                            });
                            this.scrollTo(this.initialInvoked)
                        }
                        MS.Entertainment.Utilities.schedulePromiseNormal(null, "ent:galleryControl:delayInitializeContainers").done(function delayInitializeContainersAndSemanticZoom() {
                            this._delayInitializedChildren = true;
                            if (this.domElement)
                                MS.Entertainment.UI.Framework.applyWithSelector(this.domElement, ".win-surface", function executeDelayInitializeOnList(element) {
                                    this._delayInitializeContainer(element)
                                }.bind(this));
                            this._commitZoomedOutDataSource()
                        }.bind(this), function ignoreCancelError(){});
                        if (this._delayInitializeSignal) {
                            this._delayInitializeSignal.complete();
                            this._delayInitializeSignal = null
                        }
                    }, _delayInitializeContainer: function _delayInitializeContainer(container) {
                        if (!container || !this.isDelayInitialized || !this._delayInitializedChildren || this._unloaded)
                            return;
                        MS.Entertainment.UI.Framework.delayInitializeChildren(container, true)
                    }, _delayHydrateLibraryInfoAsync: function _delayHydrateLibraryInfoAsync(mediaItem) {
                        if (!mediaItem || !this.delayHydrateLibraryId)
                            return WinJS.Promise.as();
                        var wrapperSignal = new MS.Entertainment.UI.Framework.Signal;
                        WinJS.Promise.as(this._delayInitializeSignal && this._delayInitializeSignal.promise).done(wrapperSignal.complete.bind(wrapperSignal), wrapperSignal.error.bind(wrapperSignal));
                        return wrapperSignal.promise.then(function _delayHydrateLibraryInfoAsyncWork() {
                                if (!this._unloaded)
                                    return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(mediaItem)
                            }.bind(this))
                    }, unload: function unload() {
                        if (this._uiStateHandlers) {
                            this._uiStateHandlers.cancel();
                            this._uiStateHandlers = null
                        }
                        if (this._listBinding) {
                            this._listBinding.release();
                            this._listBinding = null
                        }
                        if (this._notificationHandler) {
                            this._notificationHandler.dispose();
                            this._notificationHandler = null
                        }
                        if (this._focusEventHandler) {
                            this._focusEventHandler.cancel();
                            this._focusEventHandler = null
                        }
                        if (this._navigationBindings) {
                            this._navigationBindings.cancel();
                            this._navigationBindings = null
                        }
                        this._clearListViewEvents();
                        this._clearZoomViewEvents();
                        this._clearMoreThanFirstPageRenderedState();
                        if (this._dragStarted)
                            this._itemDragEndedOrCanceled();
                        if (this._listView && this._listView.dispose)
                            this._listView.dispose();
                        this._listView = null;
                        this._dragBetweenElement = null;
                        this._internalDataSource = null;
                        this._internalZoomedOutDataSource = null;
                        this._clearDataSourceHandlers();
                        this._dataSource = null;
                        this.selectedItems = null;
                        this._clearInvocationHelper();
                        if (this._inplaceGrouper) {
                            this._inplaceGrouper.dispose();
                            this._inplaceGrouper = null
                        }
                        this._clearSelectionHelper();
                        this._selectionHandlers = null;
                        this._releaseMediaContext();
                        MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                    }, freeze: function freeze() {
                        if (this.queryToPause)
                            this.queryToPause.pause();
                        if (MS.Entertainment.Utilities.isApp2) {
                            if (!this._listViewViewport)
                                this._listViewViewport = this.domElement.querySelector(".win-viewport");
                            if (this._listViewViewport)
                                this._savedScrollPosition = this._listViewViewport.scrollLeft
                        }
                        this._mediaControlCommandEnabled = false;
                        MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                    }, thaw: function thaw() {
                        MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this);
                        if (this.queryToPause)
                            this.queryToPause.unpause();
                        if (MS.Entertainment.Utilities.isApp2 && this._savedScrollPosition && this._listViewViewport) {
                            this._listViewViewport.scrollLeft = this._savedScrollPosition;
                            this._savedScrollPosition = null
                        }
                        this._mediaControlCommandEnabled = true
                    }, _updateRefreshThreshold: function _updateRefreshThreshold() {
                        if (this._notificationHandler) {
                            if (this.grouper)
                                this._notificationHandler.countThreshold = this.grouperItemThreshold;
                            else
                                this._notificationHandler.countThreshold = NaN;
                            this._notificationHandler.minimumListLength = this.minimumListLength
                        }
                    }, _calculateIndexToFocus: function _calculateIndexToFocus() {
                        if (this.restoreFocusOnDataChanges && this._restoreFocusIndex === -1 && (document.activeElement === null || (!this._listView && this._listViewHadFocus))) {
                            this.focusFirstItemOnPageLoad = true;
                            this._listViewHadFocus = false
                        }
                        else if (this._listView && !MS.Entertainment.UI.Framework.focusedElementHasClass(["horizontalPivotButton", "verticalPivotButton"]))
                            this._listViewHadFocus = true;
                        else if (this._listView)
                            this._listViewHadFocus = false
                    }, _clearListViewEvents: function _clearListViewEvents() {
                        if (this._listViewEventHandler) {
                            this._listViewEventHandler.cancel();
                            this._listViewEventHandler = null
                        }
                        if (this._listViewEventCaptureHandler) {
                            this._listViewEventCaptureHandler.cancel();
                            this._listViewEventCaptureHandler = null
                        }
                        if (this._mediaControlEventHandler) {
                            this._mediaControlEventHandler.cancel();
                            this._mediaControlEventHandler = null
                        }
                    }, _clearZoomViewEvents: function _clearZoomViewEvents() {
                        if (this._zoomViewEventHandler) {
                            this._zoomViewEventHandler.cancel();
                            this._zoomViewEventHandler = null
                        }
                    }, _dataSourceUpdated: function _dataSourceUpdated(dataSource, oldDataSource) {
                        this._clearDataSourceHandlers();
                        this.clearSelection();
                        if (this._selectionHelper) {
                            this._selectionHelper.dispose();
                            this._selectionHelper = null
                        }
                        if ((!this._unloaded) && (dataSource || oldDataSource))
                            this._updateDataSourceGrouper(dataSource).then(function finalizeDataSource() {
                                if (this._unloaded || dataSource !== this.dataSource)
                                    return;
                                var returnValue = dataSource || [];
                                if (Array.isArray(returnValue))
                                    if (dataSource)
                                        returnValue = MS.Entertainment.Data.VirtualList.wrapArray(dataSource, {cacheSize: 200});
                                return returnValue
                            }.bind(this)).then(function afterNotArrayGuaranteed(notArray) {
                                if (this._unloaded || dataSource !== this.dataSource)
                                    return;
                                if ("createListBinding" in notArray)
                                    this._internalDataSource = notArray;
                                else
                                    this._internalDataSource = new MS.Entertainment.Utilities.VirtualizedDataSource(notArray);
                                return this._dataSourceContentsChanged()
                            }.bind(this)).then(function updateGroupHints() {
                                if (this._unloaded || dataSource !== this.dataSource)
                                    return;
                                if (dataSource)
                                    this._dataSourceHandlers = MS.Entertainment.Utilities.addEventHandlers(dataSource, {
                                        itemMoved: this._updateSelectionInvokedVisibleAfterMove.bind(this), groupHintsChanged: this._updateGroupHints.bind(this)
                                    });
                                this._updateGroupHints()
                            }.bind(this)).done(null, function ignoreError(error) {
                                MS.Entertainment.UI.Controls.fail("Failed to handle data changes in the gallery control. error: " + (error && error.message))
                            })
                    }, _updateGroupHints: function _updateGroupHints() {
                        if (this._unloaded)
                            return;
                        if (this.canZoom && this.dataSource.groupHints)
                            this._internalZoomedOutDataSource = new MS.Entertainment.Utilities.VirtualizedDataSource(this.dataSource.groupHints);
                        else {
                            this._internalZoomedOutDataSource = null;
                            this.isZoomedOut = false
                        }
                        if (this._zoomView)
                            this._zoomView.locked = !this.isZoomReady;
                        this._commitZoomedOutDataSource();
                        this.notify("canZoom", this.canZoom, false)
                    }, _commitZoomedOutDataSource: function _commitZoomedOutDataSource() {
                        if (!this._unloaded && this.isDelayInitialized && this._firstPageRendered && this._firstPagedDelayInitializedHandled && this._zoomedOutView && (!this.isZoomedOut || !this._zoomedOutView.itemDataSource))
                            this._zoomedOutView.itemDataSource = this._internalZoomedOutDataSource
                    }, _bindToDataSource: function _bindToDataSource(source) {
                        if (this._listBinding) {
                            this._listBinding.release();
                            this._listBinding = null
                        }
                        this._listBinding = source.createListBinding(this._notificationHandler)
                    }, _dataSourceContentsChanged: function _dataSourceContentsChanged(events) {
                        window.msWriteProfilerMark("ent.GalleryControl.DataSourceContentsChanged,StartTM");
                        var countChanged = false;
                        var updateGallery = false;
                        var returnPromise;
                        if (events)
                            events.forEach(function(event) {
                                if (!event)
                                    return;
                                if (event.type === MS.Entertainment.UI.Controls.GalleryListDataNotificationHandler.UpdateType.countChanged) {
                                    countChanged = true;
                                    this._latestCount = event.newValue
                                }
                                if (this._initialItemCount <= 0 && event.type === MS.Entertainment.UI.Controls.GalleryListDataNotificationHandler.UpdateType.reload)
                                    updateGallery = true;
                                if (event.passedThreshold)
                                    updateGallery = true
                            }, this);
                        else
                            updateGallery = true;
                        if (updateGallery) {
                            this._updateCount++;
                            var updateCount = this._updateCount;
                            returnPromise = this.templateSelector.ensureItemTemplatesLoaded().then(function templatesLoaded() {
                                window.msWriteProfilerMark("ent.GalleryControl.TemplatesLoaded");
                                if (this._internalDataSource && this._updateCount === updateCount)
                                    return this._internalDataSource.getCount();
                                else
                                    return 0
                            }.bind(this)).then(function gotCount(count) {
                                if (this._updateCount === updateCount) {
                                    this._initialItemCount = count;
                                    if (this.invocationHelper)
                                        this.invocationHelper.clearInvocation();
                                    window.msWriteProfilerMark("ent.GalleryControl.DataSourceContentsChanged,StopTM");
                                    return this._updateLayoutAsync()
                                }
                            }.bind(this), function loadFailed() {
                                MS.Entertainment.UI.Controls.fail("template load failed")
                            })
                        }
                        else if (countChanged)
                            this._validateSelection();
                        if (events && MS.Entertainment.Utilities.isApp2 && !document.activeElement)
                            WinJS.Promise.timeout(500).then(function delayUpdateFocus() {
                                return this.getFirstVisibleIndex()
                            }.bind(this)).done(function setFocus(index) {
                                this.setVisibleIndexFocus(index)
                            }.bind(this), function noItemToFocus(){});
                        return WinJS.Promise.as(returnPromise)
                    }, groupInfo: function getGroupInfo(userData) {
                        return {
                                enableCellSpanning: true, cellWidth: this.slotSize.width, cellHeight: this.slotSize.height
                            }
                    }, itemInfo: function getItemInfo(item) {
                        var size = {};
                        if (item === this.largeItemIndex) {
                            size.width = (this.largeItemSize && this.largeItemSize.width) ? this.largeItemSize.width : this.itemSize.width;
                            size.height = (this.largeItemSize && this.largeItemSize.height) ? this.largeItemSize.height : this._listView.layout.maxRows * this.itemSize.height + (this._listView.layout.maxRows - 1) * (this.itemMargin.top + this.itemMargin.bottom)
                        }
                        else
                            size.width = this.itemSize.width,
                            size.height = this.itemSize.height;
                        if (this.startNewColumnOnHeaders && this.dataSource && this.dataSource.isHeader && this.dataSource.isHeader(item))
                            size.newColumn = true;
                        return size
                    }, _onSnappedChanged: function _onSnappedChanged(args) {
                        if (args && args.detail && !args.detail.newValue && args.detail.oldValue && this._listView && this.dataSource && !this._firstPageRendered)
                            this._updateLayoutAsync()
                    }, _handleWindowResize: function _handleWindowResize() {
                        if (this.maxRows !== -1)
                            return;
                        var newRowCount = MS.Entertainment.Utilities.getRowCountForResolution();
                        this._updateMaxRows(this._listView, newRowCount);
                        this._updateMaxRows(this._zoomedOutView, newRowCount)
                    }, _updateMaxRows: function _updateMaxRows(listView, newRowCount) {
                        if (listView && listView.layout instanceof WinJS.UI.GridLayout && listView.layout.maxRows !== newRowCount)
                            listView.layout.maxRows = newRowCount
                    }, getFirstVisibleIndex: function getFirstVisibleIndex() {
                        return this._activeListView ? WinJS.Promise.as(this._activeListView.indexOfFirstVisible) : WinJS.Promise.wrapError(new Error("There is no first item, as there is no active list view"))
                    }, getLastVisibleIndex: function getLastVisibleIndex() {
                        return this._activeListView ? WinJS.Promise.as(this._activeListView.indexOfLastVisible) : WinJS.Promise.wrapError(new Error("There is no last item, as there is no active list view"))
                    }, getSelection: function getSelection() {
                        return this._listView ? this._listView.selection : null
                    }, setFirstVisibleIndex: function setFirstVisibleIndex(index) {
                        if (this._activeListView)
                            this._activeListView.indexOfFirstVisible = index
                    }, setReadyStateCallback: function setReadyStateCallback(callback) {
                        this._readyStateCallback = callback
                    }, setSelectedIndexChangedCallback: function setSelectedIndexChangedCallback(callback) {
                        this._selectedIndexChangedCallback = callback
                    }, getCurrentItem: function getCurrentItem() {
                        if (this._activeListView)
                            return this._activeListView.currentItem;
                        return null
                    }, setCurrentItem: function setCurrentItem(item) {
                        if (this._activeListView)
                            this._activeListView.currentItem = item
                    }, createItemRenderer: function createItemRenderer(templateType) {
                        templateType = templateType || MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item;
                        var that = this;
                        var restoreSetImmediateModeTimer = null;
                        var placeholders = new MS.Entertainment.UI.Framework.ReferenceMap;
                        var visibleItemCount = 0;
                        var renderedItemCount = 0;
                        var delayedInitializedItemCount = 0;
                        var isItemRenderer = templateType === MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item;
                        var usePlaceholder = (this.orientation === MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical) || MS.Entertainment.Utilities.isMusicApp2;
                        var isListLayout = isItemRenderer ? this.layout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list : this.finalZoomedOutLayout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                        var traceId = 0;
                        this._moreThanFirstPageRendered = false;
                        var sendFirstPageRenderedIfNeeded = function sendFirstPageRenderedIfNeeded(container) {
                                var activeListView = that._activeListView;
                                if (activeListView) {
                                    if (!visibleItemCount && activeListView.indexOfLastVisible >= 0 && activeListView.indexOfFirstVisible >= 0)
                                        visibleItemCount = (activeListView.indexOfLastVisible - activeListView.indexOfFirstVisible) + 1;
                                    if (renderedItemCount === visibleItemCount && that._sendFirstPageRenderedEvent())
                                        WinJS.Promise.timeout(2500).done(function deferAria() {
                                            if (container && !container.hasAttribute("role") && activeListView && activeListView._view && activeListView._view.deferAriaSetup)
                                                activeListView._view.deferAriaSetup(visibleItemCount, 0, visibleItemCount - 1)
                                        });
                                    else if (renderedItemCount > visibleItemCount)
                                        that._setMoreThanFirstPageRenderedState()
                                }
                            };
                        var handlePlaceholderRendered = function handlePlaceholderRendered(container) {
                                var activeListView = that._activeListView;
                                if (activeListView) {
                                    renderedItemCount++;
                                    sendFirstPageRenderedIfNeeded(container)
                                }
                            };
                        return function galleryViewItemRenderer(itemPromise, recycle) {
                                var container = document.createElement("div");
                                var placeholderRendered;
                                var data;
                                var item;
                                var template;
                                var containerReadySignal = new MS.Entertainment.UI.Framework.Signal;
                                traceId++;
                                var templateTraceId = templateType + ":" + traceId;
                                container.listViewItemContainer = true;
                                window.msWriteProfilerMark("ent:GalleryControl:DataAcquisition:" + templateTraceId + ",StartTM");
                                return {
                                        element: containerReadySignal.promise, renderComplete: itemPromise.then(function selectItemTemplate(itemPromise) {
                                                window.msWriteProfilerMark("ent:GalleryControl:DataAcquisition:" + templateTraceId + ",StopTM");
                                                window.msWriteProfilerMark("ent:GalleryControl:DataAcquired:" + itemPromise.index + ":" + templateTraceId);
                                                item = itemPromise;
                                                data = that.processItemData(item.data || item, item.index, item.key);
                                                window.msWriteProfilerMark("ent:GalleryControl:SelectTemplate:" + templateTraceId + ",StartTM");
                                                return that.templateSelector.selectTemplate(item, templateType).then(function(resultTemplate) {
                                                        template = resultTemplate;
                                                        window.msWriteProfilerMark("ent:GalleryControl:SelectTemplate:" + templateTraceId + ",StopTM")
                                                    })
                                            }).then(function renderUsablePlaceholder() {
                                                if (!template) {
                                                    MS.Entertainment.UI.Controls.fail("Template was not found for the given item");
                                                    return item.ready
                                                }
                                                if (usePlaceholder) {
                                                    var placeholder = placeholders.get(template);
                                                    if (placeholder && placeholder.renderer) {
                                                        window.msWriteProfilerMark("ent:GalleryControl:RenderingListItemPlaceholder:" + templateTraceId + ",StartTM");
                                                        placeholderRendered = true;
                                                        placeholder.renderer.render(container, data);
                                                        window.msWriteProfilerMark("ent:GalleryControl:RenderingListItemPlaceholder:" + templateTraceId + ",StopTM")
                                                    }
                                                    containerReadySignal.complete(container)
                                                }
                                                if (container.parentElement && isItemRenderer)
                                                    WinJS.Utilities.removeClass(container.parentElement, "invoked");
                                                if (usePlaceholder && placeholderRendered) {
                                                    window.msWriteProfilerMark("ent:GalleryControl:ItemReadyPlaceholder:" + templateTraceId + ",StartTM");
                                                    handlePlaceholderRendered(container);
                                                    return item.ready
                                                }
                                            }).then(function renderActualTemplate() {
                                                if (usePlaceholder && placeholderRendered)
                                                    window.msWriteProfilerMark("ent:GalleryControl:ItemReadyPlaceholder:" + templateTraceId + ",StopTM");
                                                if (placeholderRendered)
                                                    container.innerHTML = String.empty;
                                                window.msWriteProfilerMark("ent:GalleryControl:RenderingListItemTemplate:" + templateTraceId + ",StartTM");
                                                return template.render(data, container).then(function() {
                                                        window.msWriteProfilerMark("ent:GalleryControl:RenderingListItemTemplate:" + templateTraceId + ",StopTM");
                                                        if (!usePlaceholder)
                                                            containerReadySignal.complete(container);
                                                        if (!usePlaceholder || !placeholderRendered) {
                                                            window.msWriteProfilerMark("ent:GalleryControl:ItemReadyNoPlaceholder:" + templateTraceId + ",StartTM");
                                                            handlePlaceholderRendered(container);
                                                            return item.ready
                                                        }
                                                    })
                                            }).then(function delayInitializeControls() {
                                                if (!usePlaceholder || !placeholderRendered)
                                                    window.msWriteProfilerMark("ent:GalleryControl:ItemReadyNoPlaceholder:" + templateTraceId + ",StopTM");
                                                sendFirstPageRenderedIfNeeded();
                                                that._raisePanelReadyOnce();
                                                if (usePlaceholder && that._firstPagedRenderedEventDispatched && container.parentElement && container.parentElement.parentElement) {
                                                    var placeholder = placeholders.get(template);
                                                    if (placeholder === undefined) {
                                                        var placeholderLoadingState = {renderer: null};
                                                        placeholders.set(template, placeholderLoadingState);
                                                        window.requestAnimationFrame(function galleryControl_generatePlaceholder() {
                                                            placeholderLoadingState.renderer = MS.Entertainment.UI.Framework.getPlaceholderForElement(container)
                                                        })
                                                    }
                                                }
                                                if (that._firstPagedRenderedEventDispatched) {
                                                    if (restoreSetImmediateModeTimer) {
                                                        restoreSetImmediateModeTimer.cancel();
                                                        restoreSetImmediateModeTimer = null
                                                    }
                                                    MS.Entertainment.UI.Framework.setImmediateMode = MS.Entertainment.UI.Framework.setImmediateModes.panning;
                                                    restoreSetImmediateModeTimer = WinJS.Promise.timeout(MS.Entertainment.UI.Controls.GalleryControl._restoreSetImmediateModeTime).then(function() {
                                                        MS.Entertainment.UI.Framework.setImmediateMode = MS.Entertainment.UI.Framework.setImmediateModes.normal
                                                    })
                                                }
                                                that._delayInitializeContainer(container);
                                                if (container.parentElement)
                                                    container.parentElement.listViewItemContainer = true;
                                                return that._delayHydrateLibraryInfoAsync(item.data)
                                            }).then(function updateInvokedState() {
                                                var eventDetail;
                                                var itemIsInvoked = (that.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline && that.invocationHelper && that.invocationHelper.invokedKey === item.key) || that.initialInvoked === item.index;
                                                if (itemIsInvoked && isItemRenderer && that.invocationHelper) {
                                                    eventDetail = {
                                                        itemPromise: itemPromise, itemIndex: item.index, rerender: true
                                                    };
                                                    if (!container.parentElement || !container.parentElement.parentElement)
                                                        that.invocationHelper.invokeItem({
                                                            srcElement: container.parentElement || container, detail: eventDetail
                                                        });
                                                    else {
                                                        var domEvent = document.createEvent("Event");
                                                        domEvent.initEvent("iteminvoked", true, true);
                                                        domEvent.detail = eventDetail;
                                                        container.parentElement.dispatchEvent(domEvent)
                                                    }
                                                    if (that.initialInvoked !== -1) {
                                                        if (that.scrollToOnInvoked)
                                                            that.scrollTo(that.initialInvoked);
                                                        that.setIndexFocus(that.initialInvoked)
                                                    }
                                                    else
                                                        that.initialInvoked = -1
                                                }
                                                delayedInitializedItemCount++;
                                                if (delayedInitializedItemCount === visibleItemCount)
                                                    that._handleFirstPageDelayedInitialized();
                                                return item
                                            })
                                    }
                            }
                    }, createHeaderRenderer: function createHeaderRenderer(templateType) {
                        var that = this;
                        return function galleryViewRenderGroup(groupPromise) {
                                var container = document.createElement("div");
                                var groupData;
                                if (that.headerClass)
                                    WinJS.Utilities.addClass(container, that.headerClass);
                                return {
                                        element: container, renderComplete: groupPromise.then(function selectGroupTemplate(group) {
                                                groupData = group.data;
                                                return that.templateSelector.getTemplateProvider(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header)
                                            }).then(function renderGroupTemplate(args) {
                                                if (!args)
                                                    return;
                                                return args.render(that.processItemData(groupData), container)
                                            })
                                    }
                            }
                    }, _updateLayoutAsync: function _updateLayoutAsync() {
                        if (this._unloaded)
                            return;
                        var cancelDragPromise;
                        if (this._dragStarted)
                            cancelDragPromise = this._cancelItemDrag().then(function itemDragCanceled() {
                                this._itemDragEndedOrCanceled();
                                this._updateLayout()
                            }.bind(this));
                        else
                            this._updateLayout();
                        return WinJS.Promise.as(cancelDragPromise)
                    }, _updateLayout: function _updateLayout() {
                        var that = this;
                        var dataSource = this._internalDataSource;
                        var loadingBehavior = this.loadingBehavior;
                        var zoomedInContainer = document.createElement("div");
                        var zoomedOutContainer;
                        var parentContainer;
                        var zoomViewContainer;
                        var emptyTemplateProvider;
                        var debugId = this.debugId || "gallery";
                        if (this._unloaded)
                            return;
                        this._calculateIndexToFocus();
                        this._clearListViewEvents();
                        this._clearZoomViewEvents();
                        this._firstPageRendered = false;
                        if (this._zoomedOutView && this._zoomedOutView.dispose)
                            this._zoomedOutView.dispose();
                        this._zoomedOutView = null;
                        if (this._listView && this._listView.dispose) {
                            if (MS.Entertainment.Utilities.isApp2)
                                window.removeEventListener("gesturedisengaged", this._listView._handleGestureDisengagedBind);
                            this._listView.dispose()
                        }
                        this._listView = null;
                        this._dragBetweenElement = null;
                        if (this._zoomView && this._zoomView.dispose)
                            this._zoomView.dispose();
                        this._zoomView = null;
                        window.msWriteProfilerMark("ent:GalleryControl.ListViewCreated,StartTM");
                        if (this.selectionStyleFilled)
                            WinJS.Utilities.addClass(zoomedInContainer, MS.Entertainment.UI.Controls.GalleryControl.selectionFilledClass);
                        if (this.canZoom) {
                            zoomViewContainer = document.createElement("div");
                            zoomedOutContainer = document.createElement("div");
                            zoomViewContainer.appendChild(zoomedInContainer);
                            zoomViewContainer.appendChild(zoomedOutContainer);
                            parentContainer = zoomViewContainer;
                            zoomViewContainer.id = debugId + "_zoomViewContainer";
                            zoomedOutContainer.id = debugId + "_zoomedOutContainer";
                            zoomedInContainer.id = debugId + "_zoomedInContainer";
                            WinJS.Utilities.addClass(zoomedInContainer, "ent-zoomedin");
                            WinJS.Utilities.addClass(zoomedOutContainer, "ent-zoomedout")
                        }
                        else {
                            parentContainer = zoomedInContainer;
                            zoomedInContainer.id = debugId
                        }
                        if (this.listViewClassName)
                            WinJS.Utilities.addClass(zoomedInContainer, this.listViewClassName);
                        if (this.blockDelayInitializeOfChildren)
                            WinJS.Utilities.addClass(parentContainer, "ent-delayInitializeBlock");
                        if (this.domElement) {
                            MS.Entertainment.Utilities.empty(this.domElement);
                            this.domElement.appendChild(parentContainer)
                        }
                        var visibleItemCount = 0;
                        var renderedItemCount = 0;
                        that._firstPagedRenderedEventDispatched = false;
                        this._firstPagedDelayInitializedHandled = false;
                        that._raisePanelResetOnce();
                        if (this.userGatedGallery) {
                            this.renderTemplate(this.userGatedGalleryTemplate, MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.userGatedGallery, this.userGatedGalleryModel, parentContainer);
                            return
                        }
                        else if (this.syncScreen) {
                            this.renderTemplate(this.syncScreenTemplate, MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.syncScreen, this.syncScreenModel, parentContainer);
                            this.syncScreenModel.action.execute();
                            return
                        }
                        else if (this.raisePanelResetEvents && this.dataSource === null)
                            return;
                        else if (this.syncScreenTemplate && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.userUsageData))
                            this._raisePanelSyncing(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.userUsageData).isSyncing);
                        if ((this.dataSource === null) || (this._initialItemCount < this.minimumListLength)) {
                            this.renderTemplate(this.emptyGalleryTemplate, MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.emptyGallery, this.emptyGalleryModel, parentContainer);
                            if (that.dataSource !== null) {
                                that._bindToDataSource(dataSource);
                                dataSource.invalidateAll()
                            }
                            if (!this._unloaded && !!this.dataSource) {
                                that._sendFirstPageRenderedEvent();
                                that._handleFirstPageDelayedInitialized()
                            }
                            return
                        }
                        else
                            that._raisePanelEmpty(false);
                        var groupedDataSource = this.getGroupedDataSource();
                        this._bindToDataSource(groupedDataSource || dataSource);
                        var layoutOptions = this.layoutOptions || {};
                        layoutOptions.horizontal = this.horizontal;
                        layoutOptions.groupHeaderPosition = this.headerPosition === "inline" ? "left" : this.headerPosition;
                        if (this.maxRows >= 0)
                            layoutOptions.maxRows = this.maxRows;
                        else if (this.maxRows < 0)
                            layoutOptions.maxRows = MS.Entertainment.Utilities.getRowCountForResolution();
                        if (this.multiSize) {
                            layoutOptions.groupInfo = this.groupInfo.bind(this);
                            layoutOptions.itemInfo = this.itemInfo.bind(this)
                        }
                        var isListLayout = this.layout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                        var layout;
                        if (this.shrinkAndStayHeader)
                            layout = isListLayout ? new MS.Entertainment.UI.Controls.ShrinkAndStayListLayout(layoutOptions) : new MS.Entertainment.UI.Controls.ShrinkAndStayGridLayout(layoutOptions);
                        else
                            layout = isListLayout ? new WinJS.UI.ListLayout(layoutOptions) : new WinJS.UI.GridLayout(layoutOptions);
                        if (this.backdropColor && typeof layout.dragOver !== "function") {
                            layout.backdropColor = this.backdropColor;
                            layout.disableBackdrop = (this.backdropColor === "transparent")
                        }
                        if (this.itemsReorderable && layout.dragOver && layout.dragLeave) {
                            layout.dragOver = this._handleDragOver.bind(this);
                            layout.dragLeave = this._handleDragLeave.bind(this)
                        }
                        if (this.orientation)
                            layout.orientation = this.orientation;
                        this._listView = new WinJS.UI.ListView(zoomedInContainer, {
                            resetItem: MS.Entertainment.UI.Controls.GalleryControl.resetItem, layout: layout, itemDataSource: groupedDataSource || dataSource, groupDataSource: groupedDataSource && groupedDataSource.groups, selectionMode: MS.Entertainment.Utilities.isApp2 ? MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.none : this.selectionMode, tapBehavior: this.tap, itemsDraggable: this.itemsDraggable, swipeBehavior: MS.Entertainment.Utilities.isApp2 ? MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.none : this.swipeBehavior, loadingBehavior: loadingBehavior, pagesToLoad: this.pagesToLoad, groupHeaderTemplate: this.createHeaderRenderer(), itemTemplate: this.createItemRenderer(), itemsReorderable: this.itemsReorderable
                        });
                        WinJS.Utilities.addClass(zoomedInContainer, "win-disposable");
                        zoomedInContainer.setAttribute("data-win-control", "WinJS.UI.ListView");
                        if (zoomedOutContainer) {
                            var isZoomedOutListLayout = this.finalZoomedOutLayout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                            var zoomedOutLayout;
                            var zoomedOutOptions;
                            if (this.backdropColor && typeof layout.dragOver !== "function")
                                zoomedOutOptions = {
                                    backdropColor: this.backdropColor, disableBackdrop: (this.backdropColor === "transparent")
                                };
                            zoomedOutLayout = isZoomedOutListLayout ? new WinJS.UI.ListLayout(zoomedOutOptions) : new WinJS.UI.GridLayout(zoomedOutOptions);
                            this._zoomedOutView = new WinJS.UI.ListView(zoomedOutContainer, {
                                resetItem: MS.Entertainment.UI.Controls.GalleryControl.resetItem, zoomedOut: this.initialZoomedOut, layout: zoomedOutLayout, itemsDraggable: false, selectionMode: MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.none, swipeBehavior: MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.none, itemTemplate: this.createItemRenderer(this.finalZoomedOutTemplateType)
                            });
                            WinJS.Utilities.addClass(zoomedOutContainer, "win-disposable");
                            zoomedOutContainer.setAttribute("data-win-control", "WinJS.UI.ListView")
                        }
                        if (zoomViewContainer) {
                            this._zoomView = new WinJS.UI.SemanticZoom(zoomViewContainer);
                            this._zoomView.locked = !this.isZoomReady;
                            WinJS.Utilities.addClass(zoomViewContainer, "win-disposable");
                            zoomViewContainer.setAttribute("data-win-control", "WinJS.UI.SemanticZoom")
                        }
                        window.msWriteProfilerMark("ent:GalleryControl.ListViewCreated,StopTM");
                        if (this.initialSelected !== -1) {
                            this._listView.selection.set(this.initialSelected);
                            this._setSelectedIndex(this.initialSelected);
                            this.initialSelected = -1
                        }
                        if (this.initialInvoked >= 0) {
                            this.ensureVisible(this.initialInvoked);
                            this.setIndexFocus(this.initialInvoked)
                        }
                        else if (this.initialVisible >= 0) {
                            this.ensureVisible(this.initialVisible);
                            this.setIndexFocus(this.initialVisible)
                        }
                        this.refreshGalleryWidth();
                        if (this.forceInteractive) {
                            var currentMode = this._listView._mode;
                            currentMode.isInteractive = this._isElementInteractive.bind(this)
                        }
                        if (this.handleFocus || this.onFocusListviewClass) {
                            if (!this._focusEventHandler || this.onFocusListviewClass)
                                this._focusEventHandler = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                                    focusin: this._onFocusin.bind(this), focusout: this._onFocusout.bind(this)
                                })
                        }
                        else if (this._focusEventHandler) {
                            this._focusEventHandler.cancel();
                            this._focusEventHandler = null
                        }
                        var _cachedSelectedItemsCount = 0;
                        var handleSelectionChanging = function(event) {
                                if (!event || !event.detail || !event.detail.newSelection) {
                                    MS.Entertainment.UI.Controls.fail("Invalid event passed to handlerSelectionChanging");
                                    return
                                }
                                var nonSourceIndices;
                                var oldIndices;
                                var newIndices;
                                var equal;
                                if (event.detail.newSelection.count()) {
                                    if (that.dataSource)
                                        nonSourceIndices = that.dataSource.nonSourceIndices;
                                    that._userSelectedEverything = that.selectionMode === MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi && (event.detail.newSelection.isEverything() || (that._userSelectedEverything && event.detail.newSelection.count() >= _cachedSelectedItemsCount));
                                    _cachedSelectedItemsCount = event.detail.newSelection.count();
                                    if (nonSourceIndices && nonSourceIndices.length) {
                                        event.detail.newSelection.remove(nonSourceIndices);
                                        oldIndices = that._listView.selection.getIndices();
                                        newIndices = event.detail.newSelection.getIndices()
                                    }
                                    if (that.maxSelectionCount >= 0 && that.maxSelectionCount < _cachedSelectedItemsCount) {
                                        oldIndices = oldIndices || that._listView.selection.getIndices();
                                        newIndices = newIndices || event.detail.newSelection.getIndices();
                                        if (newIndices && newIndices.length > that.maxSelectionCount) {
                                            newIndices = newIndices.slice(0, that.maxSelectionCount);
                                            event.detail.newSelection.set(newIndices)
                                        }
                                    }
                                    if (newIndices && oldIndices && newIndices.length === oldIndices.length) {
                                        equal = true;
                                        for (var index in newIndices)
                                            if (newIndices[index] !== oldIndices[index]) {
                                                equal = false;
                                                break
                                            }
                                    }
                                }
                                else
                                    that._userSelectedEverything = false;
                                if (equal)
                                    event.preventDefault()
                            };
                        var handleSelectionChanged = function(event) {
                                that._updateSelection();
                                that._sendFirstPageRenderedEventOnInteraction()
                            };
                        var initializeSelection = true;
                        var handleReadyStateChanged = function(eventObject) {
                                var readyState = that._listView ? that._listView.loadingState : MS.Entertainment.UI.Controls.GalleryControl.ReadyState.itemsLoading;
                                if (readyState === MS.Entertainment.UI.Controls.GalleryControl.ReadyState.complete) {
                                    this._eventProvider.traceGalleryControl_Load_End();
                                    this._sendFirstPageRenderedEvent();
                                    if (initializeSelection) {
                                        initializeSelection = false;
                                        this._raisePanelReadyOnce()
                                    }
                                    var lastNavigationWasPage = true;
                                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                                        lastNavigationWasPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).lastNavigationWasPage;
                                    if ((this.focusFirstItemOnPageLoad && lastNavigationWasPage) || (this.restoreFocusOnDataChanges && this._restoreFocusIndex !== -1)) {
                                        this.focusFirstItemOnPageLoad = false;
                                        MS.Entertainment.Utilities.schedulePromiseBelowNormal().then(function focusFirstElement() {
                                            if (this._listView) {
                                                if (document.activeElement && this._listView.element.contains(document.activeElement))
                                                    return;
                                                var index = 0;
                                                if (this._restoreFocusIndex !== -1) {
                                                    index = this._restoreFocusIndex;
                                                    this._restoreFocusIndex = -1
                                                }
                                                else if (this.dataSource && this.dataSource.indexFromSourceIndex)
                                                    index = this.dataSource.indexFromSourceIndex(0);
                                                this.setVisibleIndexFocus(index)
                                            }
                                        }.bind(this))
                                    }
                                    that.refreshGalleryWidth()
                                }
                                else {
                                    if (this.preventResizeJitter && readyState === MS.Entertainment.UI.Controls.GalleryControl.ReadyState.viewPortLoaded && this._listView) {
                                        var surfaceHeight = this.calculateHeightToShowAllItems();
                                        if (surfaceHeight && this._listView._element && this._listView._element.style)
                                            this._listView._element.style.height = surfaceHeight + "px"
                                    }
                                    this._eventProvider.traceGalleryControl_LoadingState_Changed(readyState)
                                }
                                this._raiseGalleryReadyState(readyState, eventObject)
                            }.bind(this);
                        var handleContentAnimating = function(eventObject) {
                                eventObject.preventDefault();
                                WinJS.UI.Animation.enterContent(eventObject.currentTarget)
                            }.bind(this);
                        var handleClick = function handleClick(event) {
                                if (this.isZoomReady && event.srcElement && WinJS.Utilities.hasClass(event.srcElement, MS.Entertainment.UI.Controls.GalleryControl.zoomedOutClass)) {
                                    this.isZoomedOut = true;
                                    this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.headerClick
                                }
                            }.bind(this);
                        var handleDoubleClick = function handleDoubleClick(event) {
                                if (this.doubleClickBehavior === MS.Entertainment.UI.Controls.GalleryControl.DoubleClickBehavior.play && this.doubleClickHelper)
                                    this.doubleClickHelper.execute();
                                else if (this.doubleClickBehavior === MS.Entertainment.UI.Controls.GalleryControl.DoubleClickBehavior.action)
                                    if (this.doubleClickActionOptions) {
                                        event.preventDefault();
                                        event.stopPropagation();
                                        var actionOptions = this.doubleClickActionOptions || {};
                                        var actionParameter = this.doubleClickActionOptions.parameter || {};
                                        actionParameter.data = data.data;
                                        actionParameter.filter = actionOptions.filter;
                                        var action = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(actionOptions.id);
                                        action.parameter = actionParameter;
                                        action.automationId = action.automationId || this.doubleClickActionOptions.automationId;
                                        action.execute()
                                    }
                            }.bind(this);
                        var handleMouseDown = function handleMouseDown(event) {
                                this._pendingSelectionFromInvoke = -1;
                                var isInteractive = this._listView._mode ? this._listView._mode.isInteractive : null;
                                var downIndex = this._listView.indexOfElement(event.srcElement);
                                var downItemKey;
                                var validIndex = false;
                                if (this.dataSource)
                                    if (this.dataSource.keyFromIndex) {
                                        downItemKey = this.dataSource.keyFromIndex(downIndex);
                                        validIndex = !!downItemKey
                                    }
                                    else
                                        validIndex = true;
                                if (validIndex)
                                    if (!this.isZoomReady && this.dataSource && this.dataSource.isHeader && this.dataSource.isHeader(downIndex))
                                        event.stopPropagation();
                                    else if (downIndex >= 0 && this.invocationHelper && this.invocationHelper.invokedIndex >= 0 && downIndex !== this.invocationHelper.invokedIndex && downItemKey !== this.invocationHelper.invokedKey && (!isInteractive || !isInteractive(event.srcElement))) {
                                        if (this.selectionMode === MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi)
                                            this._pendingSelectionFromInvoke = this.invocationHelper.invokedIndex;
                                        this.invocationHelper.clearInvocation()
                                    }
                            }.bind(this);
                        var handleKeyDown = function handleKeyDown(event) {
                                if (!event)
                                    return;
                                if (this.isZoomReady && event.keyCode === WinJS.Utilities.Key.invokeSemanticZoom) {
                                    this.isZoomedOut = !this.isZoomedOut;
                                    if (MS.Entertainment.Utilities.isApp2)
                                        this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.keyUp;
                                    else
                                        this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.keyDown
                                }
                                else if (event.ctrlKey && !event.altKey && !event.shiftKey && event.keyCode === WinJS.Utilities.Key.a && !this.allowSelectAll)
                                    event.stopPropagation();
                                else if (this._isElementInteractive(event.target) && this.invocationHelper && this._listView.currentItem && this._listView.currentItem.index === this.invocationHelper.invokedIndex && this.layout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list && (event.keyCode === WinJS.Utilities.Key.downArrow || event.keyCode === WinJS.Utilities.Key.upArrow))
                                    this._ignoreNextInteractiveCheck = true;
                                else if (this.invocationHelper && this._listView.currentItem && this._listView.currentItem.index === this.invocationHelper.invokedIndex && event.keyCode === WinJS.Utilities.Key.enter && WinJS.Utilities.hasClass(event.srcElement, "win-item"))
                                    handleDoubleClick(event);
                                else if (this.selectionMode === MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.none && event.keyCode === WinJS.Utilities.Key.space && WinJS.Utilities.hasClass(event.srcElement, "win-item"))
                                    event.srcElement.click()
                            }.bind(this);
                        if (this.layout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list) {
                            var originalListViewResize = this._listView._onResize;
                            this._listView._onResize = function onListViewResize() {
                                if (this._listView && this.visibility)
                                    originalListViewResize.apply(this._listView, arguments)
                            }.bind(this)
                        }
                        var handleScrolledFocusChange = function handleScrolledFocusChange(event) {
                                if (this.ensureNextItemVisibleCount) {
                                    this.setVisibleIndexFocus(event.detail.newFocus);
                                    this.ensureVisible(event.detail.newFocus + this.ensureNextItemVisibleCount)
                                }
                                this.dispatchEvent("scrolledFocusChanged", {
                                    newValue: event.detail.newFocus, oldValue: event.detail.oldFocus
                                });
                                this._updateScrollStyles()
                            }.bind(this);
                        var listViewEventHandlers = {
                                loadingstatechanged: handleReadyStateChanged, selectionchanged: handleSelectionChanged, selectionchanging: handleSelectionChanging, iteminvoked: this._itemInvoked, keyboardnavigating: handleScrolledFocusChange
                            };
                        if (this._isDragAndDropEnabled()) {
                            listViewEventHandlers.itemdragstart = this._itemDragStarted.bind(this);
                            listViewEventHandlers.itemdragend = this._itemDragEndedOrCanceled.bind(this)
                        }
                        if (this.itemsReorderable)
                            listViewEventHandlers.itemdragbetween = this._handleItemDragBetween.bind(this);
                        this._listViewEventHandler = MS.Entertainment.Utilities.addEventHandlers(this._listView, listViewEventHandlers);
                        var keyEvent = MS.Entertainment.Utilities.isApp1 ? "keydown" : "keyup";
                        if (this._zoomView) {
                            var handleZoomPointerDown = this._zoomingIn.bind(this);
                            var zoomEventHandlers = {
                                    MSPointerDown: handleZoomPointerDown, pointerDown: handleZoomPointerDown, zoomchanged: this._zoomChanged.bind(this)
                                };
                            zoomEventHandlers[keyEvent] = this._zoomingIn.bind(this);
                            this._zoomViewEventHandler = MS.Entertainment.Utilities.addEventHandlers(this._zoomView, zoomEventHandlers)
                        }
                        if (layout && (!layout.dragOver || (typeof layout.dragOver !== "function")))
                            this._listView.oncontentanimating = handleContentAnimating;
                        var listViewCaptureEventHandlers = {
                                MSPointerDown: handleMouseDown, pointerdown: handleMouseDown, click: handleClick, dblclick: handleDoubleClick
                            };
                        listViewCaptureEventHandlers[keyEvent] = handleKeyDown;
                        if (this._isDragAndDropEnabled())
                            listViewCaptureEventHandlers.dragstart = this._onDragStartCapture.bind(this);
                        this._listViewEventCaptureHandler = MS.Entertainment.Utilities.addEventHandlers(this._listView, listViewCaptureEventHandlers, true);
                        var systemMediaTransportControls = WinJS.Utilities.getMember("Windows.Media.SystemMediaTransportControls");
                        if (MS.Entertainment.Utilities.isApp2 && systemMediaTransportControls && this.allowZoom) {
                            var systemMediaTransportControlsView = systemMediaTransportControls.getForCurrentView();
                            var systemMediaButtons = Windows.Media.SystemMediaTransportControlsButton;
                            systemMediaTransportControlsView.isViewEnabled = true;
                            systemMediaTransportControlsView.displayUpdater.update();
                            this._mediaControlEventHandler = MS.Entertainment.Utilities.addEventHandlers(systemMediaTransportControlsView, {buttonpressed: function buttonpressed(evt) {
                                    if (!this._mediaControlCommandEnabled)
                                        return;
                                    if (evt && evt.detail)
                                        evt.detail.forEach(function eventIterator(event) {
                                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                            switch (event.button) {
                                                case systemMediaButtons.view:
                                                    if (this.isZoomReady) {
                                                        this.isZoomedOut = !this.isZoomedOut;
                                                        this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.mediaTransportControl
                                                    }
                                                    break
                                            }
                                        }.bind(this))
                                }.bind(this)})
                        }
                    }, renderTemplate: function renderTemplate(template, templateType, galleryModel, parentContainer) {
                        if (template)
                            this.templateSelector.getTemplateProvider(templateType).then(function renderTemplate(templateProvider) {
                                if (templateProvider)
                                    templateProvider.render(galleryModel, parentContainer).done(function focusFirstItem() {
                                        MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(parentContainer, 250).done(function focusFirstItemTryTwo() {
                                            MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(parentContainer, 250).done(function focusFirstItemTryThree() {
                                                MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(parentContainer, 250)
                                            })
                                        })
                                    });
                                this._raisePanelReadyOnce();
                                this._raiseGalleryReadyState(MS.Entertainment.UI.Controls.GalleryControl.ReadyState.complete);
                                this._raisePanelEmpty(true)
                            }.bind(this));
                        else {
                            this._raisePanelReadyOnce();
                            this._raiseGalleryReadyState(MS.Entertainment.UI.Controls.GalleryControl.ReadyState.complete)
                        }
                    }, _isElementInteractive: function _isElementInteractive(element) {
                        var isInteractive = element && !this._ignoreNextInteractiveCheck && this.forceInteractive && ((element.type === "button") || (element.winControl && element.winControl.isInteractive));
                        this._ignoreNextInteractiveCheck = false;
                        return isInteractive
                    }, _zoomingInIndexPromise: null, _zoomingIn: function _zoomingIn(event) {
                        if (this._disposed)
                            return;
                        var downIndex;
                        if (MS.Entertainment.Utilities.isApp2 && this.isZoomedOut && this._zoomView && this._zoomView._zoom)
                            switch (event.keyCode) {
                                case WinJS.Utilities.Key.dismissButton:
                                case WinJS.Utilities.Key.backspace:
                                    this._zoomView._zoom(false);
                                    event.stopPropagation();
                                    event.stopImmediatePropagation();
                                    return
                            }
                        if (this._zoomedOutView && this._zoomedOutView.itemDataSource && this.isZoomedOut && event && event.srcElement)
                            downIndex = this._zoomedOutView.indexOfElement(event.srcElement);
                        if (downIndex >= 0)
                            this._zoomingInIndexPromise = this._zoomedOutView.itemDataSource.itemFromIndex(downIndex);
                        else
                            this._zoomingInIndexPromise = null;
                        if (WinJS.Utilities.hasClass(event.target, "win-semanticzoom-button"))
                            this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.minusClick
                    }, _semanticZoomInit: function _semanticZoomInit() {
                        if (!this._semanticZoomInitType)
                            this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.pinch;
                        MS.Entertainment.Utilities.Telemetry.logSemanticZoom(this._semanticZoomInitType);
                        this._semanticZoomInitType = null
                    }, _zoomChanged: function _zoomChanged(event) {
                        if (this._disposed)
                            return;
                        msWriteProfilerMark("ent:GalleryControl:zoomedChanged:" + event.detail);
                        this.isZoomedOut = event.detail;
                        if (this.isZoomedOut)
                            this._semanticZoomInit();
                        this.clearInvocation();
                        this.clearSelection();
                        if (this.queryToPause)
                            if (this.isZoomedOut)
                                this.queryToPause.pause();
                            else
                                WinJS.Promise.timeout(5000).done(function() {
                                    if (this.queryToPause)
                                        this.queryToPause.unpause()
                                }.bind(this));
                        this._commitZoomedOutDataSource();
                        if (this._zoomingInIndexPromise) {
                            this._zoomingInIndexPromise.then(function wait(item) {
                                return MS.Entertainment.Utilities.redirectPromise(WinJS.Promise.timeout(), item)
                            }).done(function zoomedOutItem(item) {
                                if (item && item.firstItemIndexHint >= 0)
                                    this.ensureVisible(item.firstItemIndexHint)
                            }.bind(this), function ignoreError(error) {
                                MS.Entertainment.UI.Controls.fail("Ensure visible failed during a zoom-in. Error message: " + (error && error.message))
                            });
                            this._zoomingInIndexPromise = null
                        }
                    }, _pageChanged: function _pageChanged(newValue, oldValue) {
                        if (this.invocationHelper)
                            this.invocationHelper.clearInvocation();
                        this.clearSelection();
                        if (this._selectionHelper) {
                            this._selectionHelper.dispose();
                            this._selectionHelper = null
                        }
                    }, _setMoreThanFirstPageRenderedState: function _setMoreThanFirstPageRenderedState() {
                        if (this._firstPagedRenderedEventDispatched)
                            return;
                        this._clearMoreThanFirstPageRenderedState();
                        this._moreThanFirstPageRendered = true;
                        this._moreThanFirstPageRenderedWorker = MS.Entertainment.Utilities.schedulePromiseIdle(null, "GalleryControl::_moreThanFirstPageRenderedWorker").then(this._sendFirstPageRenderedEventOnInteraction.bind(this), function ignoreError(){})
                    }, _clearMoreThanFirstPageRenderedState: function _clearMoreThanFirstPageRenderedState() {
                        this._moreThanFirstPageRendered = false;
                        if (this._moreThanFirstPageRenderedWorker) {
                            this._moreThanFirstPageRenderedWorker.cancel();
                            this._moreThanFirstPageRenderedWorker = null
                        }
                    }, _sendFirstPageRenderedEventOnInteraction: function _sendFirstPageRenderedEventOnInteraction() {
                        if (this._moreThanFirstPageRendered)
                            this._sendFirstPageRenderedEvent();
                        this._clearMoreThanFirstPageRenderedState()
                    }, _sendFirstPageRenderedEvent: function _sendFirstPageRenderedEvent() {
                        var eventSent = false;
                        if (!this._firstPagedRenderedEventDispatched) {
                            window.msWriteProfilerMark("ent:galleryFirstPageRendered,StartTM");
                            eventSent = true;
                            this._firstPagedRenderedEventDispatched = true;
                            this._firstPageRendered = true;
                            WinJS.Promise.timeout(1).done(function sendFirstPageRenderedEvent() {
                                window.msWriteProfilerMark("ent:galleryFirstPageRendered,StopTM");
                                var domEvent = document.createEvent("Event");
                                domEvent.initEvent("galleryFirstPageRendered", true, true);
                                this.domElement.dispatchEvent(domEvent)
                            }.bind(this), function handleError(error) {
                                window.msWriteProfilerMark("ent:galleryFirstPageRendered,StopTM");
                                MS.Entertainment.UI.Controls.fail("Failed to handle first page rendered. error: " + (error && error.message))
                            });
                            this._updateScrollStyles()
                        }
                        return eventSent
                    }, _handleFirstPageDelayedInitialized: function _handleFirstPageDelayedInitialized() {
                        if (!this._firstPagedDelayInitializedHandled) {
                            window.msWriteProfilerMark("ent:galleryFirstPageDelayedInitialized,StartTM");
                            this._firstPagedDelayInitializedHandled = true;
                            MS.Entertainment.Utilities.schedulePromiseBelowNormal().done(function _handleFirstPageDelayedInitializedWork() {
                                window.msWriteProfilerMark("ent:galleryFirstPageDelayedInitialized,StopTM");
                                this._commitZoomedOutDataSource()
                            }.bind(this), function handleError(error) {
                                window.msWriteProfilerMark("ent:galleryFirstPageRendered,StopTM");
                                MS.Entertainment.UI.Controls.fail("Failed to handle first page delay initialized. error: " + (error && error.message))
                            })
                        }
                    }, _handleItemDragBetween: function _handleItemDragBetween(args) {
                        var dragOverInsertAfterIndex = -1;
                        var dragOverInsertBeforeIndex = -1;
                        if (args && args.detail && !isNaN(args.detail.index) && typeof args.detail.index === "number" && !isNaN(args.detail.insertAfterIndex) && typeof args.detail.insertAfterIndex === "number") {
                            dragOverInsertBeforeIndex = args.detail.index;
                            dragOverInsertAfterIndex = args.detail.insertAfterIndex
                        }
                        this._handleDragLeave();
                        if (dragOverInsertAfterIndex >= 0) {
                            this._dragBetweenElement = this.getElementAtIndex(dragOverInsertAfterIndex);
                            MS.Entertainment.Utilities.safeAddClass(this._dragBetweenElement, MS.Entertainment.UI.Controls.GalleryControl.dragInsertAfterClass)
                        }
                        else if (dragOverInsertBeforeIndex === 0) {
                            this._dragBetweenElement = this.getElementAtIndex(dragOverInsertBeforeIndex);
                            MS.Entertainment.Utilities.safeAddClass(this._dragBetweenElement, MS.Entertainment.UI.Controls.GalleryControl.dragInsertBeforeClass)
                        }
                        else
                            this._dragBetweenElement = null
                    }, _handleDragOver: function _handleDragOver(x, y, dragInfo){}, _handleDragLeave: function _handleDragLeave() {
                        MS.Entertainment.Utilities.safeRemoveClass(this._dragBetweenElement, MS.Entertainment.UI.Controls.GalleryControl.dragInsertAfterClass);
                        MS.Entertainment.Utilities.safeRemoveClass(this._dragBetweenElement, MS.Entertainment.UI.Controls.GalleryControl.dragInsertBeforeClass);
                        this._dragBetweenElement = null
                    }, _updateScrollStyles: function updateScrollStyles() {
                        if (MS.Entertainment.Utilities.isApp1 || this.layout === MS.Entertainment.UI.Controls.GalleryControl.Layout.grid)
                            return;
                        if (this._activeListView && this._activeListView.indexOfLastVisible < Math.max(this._initialItemCount, this._latestCount) - 1)
                            WinJS.Utilities.addClass(this.domElement, "ent-scrollable-down");
                        else
                            WinJS.Utilities.removeClass(this.domElement, "ent-scrollable-down");
                        if (this._activeListView && this._activeListView.indexOfFirstVisible > 0)
                            WinJS.Utilities.addClass(this.domElement, "ent-scrollable-up");
                        else
                            WinJS.Utilities.removeClass(this.domElement, "ent-scrollable-up")
                    }, refreshGalleryWidth: function refreshGalleryWidth() {
                        if (this.autoSize && this._listView) {
                            var calculatedWidth = this.calculateWidthToShowAllItems();
                            this.domElement.style.width = Math.max(calculatedWidth, this.autoSizeMin, 1) + "px"
                        }
                        else
                            this.domElement.style.width = ""
                    }, calculateWidthToShowAllItems: function calculateWidthToShowAllItems() {
                        return this._listView._canvas.scrollWidth
                    }, calculateHeightToShowAllItems: function calculateHeightToShowAllItems() {
                        return this._listView._canvas.scrollHeight
                    }, _updateInvokeHelper: function _updateInvokeHelper() {
                        this._clearInvocationHelper();
                        this._initializeInvocationHelper()
                    }, _initializeInvocationHelper: function _initializeInvocationHelper() {
                        if (!this.invocationHelper && this.invokeHelperFactory && this.isDelayInitialized && this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline) {
                            this.invocationHelper = this.invokeHelperFactory(this);
                            this._invocationHelperEvents = MS.Entertainment.Utilities.addEventHandlers(this.invocationHelper, {invokedItemChanged: this._invokeItemChanged.bind(this)})
                        }
                        return this.invocationHelper
                    }, _clearInvocationHelper: function _clearInvocationHelper() {
                        if (this._invocationHelperEvents) {
                            this._invocationHelperEvents.cancel();
                            this._invocationHelperEvents = null
                        }
                        if (this.invocationHelper) {
                            this.invocationHelper.dispose();
                            this._invokeItemChanged({detail: {
                                    newValue: null, oldValue: this.invocationHelper.invokedItem
                                }});
                            this.invocationHelper = null
                        }
                    }, _invokeItemChanged: function _invokedItemChanged(args) {
                        if (this.queryToPause && args && args.detail)
                            if (!args.detail.oldValue && args.detail.newValue)
                                this.queryToPause.pause();
                            else if (args.detail.oldValue && !args.detail.newValue)
                                this.queryToPause.unpause()
                    }, canInvokeForItem: function canInvokeForItem(item) {
                        return (!item || !item.isHeader || (this.isZoomReady && !this.isZoomedOut)) && this.canInvokeForItemOverride(item)
                    }, canInvokeForItemOverride: function canInvokeForItemOverride(item) {
                        return true
                    }, canToggleInvokeForItem: function canToggleInvokeForItem(item) {
                        return this._invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline && this.canInvokeForItem(item) && !item.isAction
                    }, itemInvoked: function itemInvoked(event) {
                        if (this.tap === MS.Entertainment.UI.Controls.GalleryControl.Tap.toggleSelect) {
                            MS.Entertainment.UI.Controls.assert(this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.none, "Cannot use tap=toggleSelect and specify an invokeBehavior other than none");
                            return
                        }
                        if (this.suppressInvokeBubble)
                            event.stopPropagation();
                        event.detail.itemPromise.then(function getItemData(data) {
                            if (!data || !data.data) {
                                MS.Entertainment.UI.Controls.fail("Invalid data returned from item promise during handling of an item invoked.");
                                return
                            }
                            if (!this.canInvokeForItem(data))
                                return;
                            if (this.selectedIndices && this.selectedIndices.length > 0)
                                this.clearSelection();
                            this._sendFirstPageRenderedEventOnInteraction();
                            MS.Entertainment.Utilities.playSelectButtonClick();
                            if (data && data.isHeader) {
                                this.isZoomedOut = true;
                                this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.headerClick
                            }
                            else if (data && data.isAction && data.data && data.data.action) {
                                data.data.action.referenceContainer = {domElement: event.target.querySelector("button .win-commandicon") || event.target};
                                var actionPromise = data.data.action.execute();
                                data.data.action.referenceContainer = null;
                                if (actionPromise && data.data.isModifier) {
                                    var itemIndex = this._listView.currentItem.index;
                                    actionPromise.done(function changeIndexOnGalleryLoad(modifierChanged) {
                                        if (this.restoreFocusOnDataChanges && modifierChanged)
                                            this._restoreFocusIndex = itemIndex
                                    }.bind(this))
                                }
                            }
                            else if (this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.popOver) {
                                var currentPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage;
                                if (currentPage) {
                                    data.hasFocus = true;
                                    WinJS.Binding.unwrap(currentPage).specialFocusedElement = {
                                        listView: this._listView, item: data
                                    }
                                }
                                if (data.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video && (data.data.videoType === Microsoft.Entertainment.Queries.VideoType.other || data.data.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo)) {
                                    MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PlayCommand);
                                    MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayNonProtectedInApp();
                                    MS.Entertainment.Platform.PlaybackHelpers.showImmersiveDetails(data.data, false, true)
                                }
                                else {
                                    var popOverParameters = this.createPopOverParameters(data);
                                    MS.Entertainment.Platform.PlaybackHelpers.showItemDetails(popOverParameters)
                                }
                            }
                            else if (this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline) {
                                MS.Entertainment.UI.Controls.assert(!this.isDelayInitialized || this.invocationHelper, "inline behavior requires an invocation helper");
                                if (!this.doubleClickHelper)
                                    this.doubleClickHelper = MS.Entertainment.UI.Controls.GalleryControlDoubleClickHelper.create(this);
                                this.doubleClickHelper.wrapItemInvoke(event, data)
                            }
                            else if (this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.details) {
                                var popOverParameters = this.createPopOverParameters(data);
                                MS.Entertainment.Platform.PlaybackHelpers.showItemDetails(popOverParameters)
                            }
                            else if (this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action) {
                                var actionOptions = this.actionOptions || {};
                                var actionParameter = this.actionOptions.parameter || {};
                                actionParameter.data = data.data;
                                actionParameter.filter = actionOptions.filter;
                                var action = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(actionOptions.id);
                                action.parameter = actionParameter;
                                action.automationId = action.automationId || this.actionOptions.automationId;
                                action.execute().done()
                            }
                        }.bind(this))
                    }, _cancelItemDrag: function _cancelItemDrag() {
                        var cancelDragSignal = new MS.Entertainment.UI.Framework.Signal;
                        var cancelDragHandler = MS.Entertainment.Utilities.addEventHandlers(this._listView, {drag: function cancelDrag(event) {
                                    if (!cancelDragHandler)
                                        return;
                                    cancelDragHandler.cancel();
                                    cancelDragHandler = null;
                                    event.preventDefault();
                                    cancelDragSignal.complete()
                                }.bind(this)});
                        return cancelDragSignal.promise
                    }, _onDragStartCapture: function _onDragStartCapture(event) {
                        if (this.selectionMode === MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.single)
                            this.clearSelection();
                        else if (this.hasSelectionOrInvocation) {
                            var index = this._listView.indexOfElement(event.srcElement);
                            this._listView.selection.add(index)
                        }
                    }, _itemDragStarted: function _itemDragStarted(event) {
                        var dragDataPromise;
                        var indices = event.detail.dragInfo.getIndices();
                        if (indices && indices.length === 1) {
                            var index = indices[0];
                            dragDataPromise = this.getItemAtIndex(index).then(function saveDraggedMediaItem(mediaItem) {
                                return {data: mediaItem && mediaItem.data}
                            })
                        }
                        else {
                            MS.Entertainment.UI.Controls.assert(this.selectedItems && this.selectedItems.count, "GalleryControl::_itemDragStarted: Drag started for multiple items, but no selection was found in the list.");
                            if (this.selectedItems)
                                dragDataPromise = WinJS.Promise.wrap({
                                    data: this.selectedItems, onDragDataHandled: this._onDragDataHandled.bind(this)
                                })
                        }
                        if (dragDataPromise) {
                            this._dragStarted = true;
                            if (this.queryToPause && !this.itemsReorderable)
                                this.queryToPause.pause();
                            var dragDataService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dragData);
                            dragDataService.startDrag(dragDataPromise)
                        }
                    }, _itemDragEndedOrCanceled: function _itemDragEndedOrCanceled(event) {
                        MS.Entertainment.UI.Controls.assert(this._dragStarted, "GalleryControl::_itemDragEndedOrCanceled: Received drag end, without corresponding drag start.");
                        var dragDataService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dragData);
                        dragDataService.finishDrag();
                        if (this.queryToPause && !this.itemsReorderable)
                            this.queryToPause.unpause();
                        this._dragStarted = false
                    }, _onDragDataHandled: function _onDragDataHandled() {
                        this.clearInvocation();
                        this.clearSelection()
                    }, createPopOverParameters: function createPopOverParameters(data) {
                        var panelConstructor;
                        if (this.panelTemplateTypeMappings)
                            for (var x = 0; x < this.panelTemplateTypeMappings.length; x++) {
                                var templateMapping = this.panelTemplateTypeMappings[x];
                                if (data && data.data && data.data[templateMapping.key] === templateMapping.value) {
                                    panelConstructor = templateMapping.panelTemplate;
                                    break
                                }
                            }
                        if (!panelConstructor)
                            panelConstructor = this.templateSelector.getPanelTemplatePath(data);
                        MS.Entertainment.UI.Controls.assert(panelConstructor, "Pop-over behavior requires a panel constructor");
                        var size = this.panelOptions && this.panelOptions.size ? this.panelOptions.size : MS.Entertainment.Utilities.popOverDefaultSize;
                        data.hasFocus = true;
                        this._createItemChangeHandler(data);
                        var popOverParameters = {
                                itemConstructor: panelConstructor, size: size
                            };
                        popOverParameters.onclose = this._onPopOverClosed.bind(this);
                        popOverParameters.presetPreOverlayFocus = {
                            listView: this._listView, item: data
                        };
                        popOverParameters.dataContext = data;
                        popOverParameters.dataContext.inlineExtraData = this.inlineExtraData;
                        popOverParameters.dataContext.location = this.panelOptions && this.panelOptions.location;
                        popOverParameters.dataContext.collectionFilter = this._mediaContext && this._mediaContext.collectionFilter;
                        return popOverParameters
                    }, _onPopOverClosed: function _onPopOverClosed() {
                        this._clearDataSourceHandlers();
                        if (this.queryToPause && this.queryToPause.forceLiveRefresh)
                            this.queryToPause.forceLiveRefresh()
                    }, _createItemChangeHandler: function _createItemChangeHandler(data) {
                        var itemUpdated = function itemUpdated(args) {
                                if (args && args.detail && args.detail.newValue && args.detail.newValue.data && args.detail.newValue.data.libraryId === data.data.libraryId && args.detail.newValue.data.mediaType === data.data.mediaType)
                                    MS.Entertainment.Utilities.copyAugmentedProperties(args.detail.newValue.data, data.data)
                            }.bind(this);
                        this._clearDataItemChangeHandlers();
                        if (data && data.data)
                            this._dataSourceItemChangeHandlers = MS.Entertainment.Utilities.addEventHandlers(this.dataSource, {
                                itemInserted: itemUpdated, itemChanged: itemUpdated
                            })
                    }, _clearSelectionHelper: function _clearSelectionHelper() {
                        if (this._selectionHelper) {
                            this._selectionHelper.dispose();
                            this._selectionHelper = null
                        }
                    }, _canCreateSelectionHelper: {get: function get_canCreateSelectionHelper() {
                            return !!this.selectionHelperFactory && this.isDelayInitialized
                        }}, _initializeSelectionHelper: function _initializeSelectionHelper() {
                        if (!this._selectionHelper && this._canCreateSelectionHelper)
                            this._selectionHelper = this.selectionHelperFactory(this);
                        return this._selectionHelper
                    }, _clearDataItemChangeHandlers: function _clearDataItemChangeHandlers() {
                        if (this._dataSourceItemChangeHandlers) {
                            this._dataSourceItemChangeHandlers.cancel();
                            this._dataSourceItemChangeHandlers = null
                        }
                    }, _clearDataSourceHandlers: function _clearDataSourceHandlers() {
                        this._clearDataItemChangeHandlers();
                        if (this._dataSourceHandlers) {
                            this._dataSourceHandlers.cancel();
                            this._dataSourceHandlers = null
                        }
                    }, _onFocusin: function _onFocusin(event) {
                        if (this.onFocusListviewClass)
                            WinJS.Utilities.addClass(this.domElement, this.onFocusListviewClass);
                        if (this.handleFocus) {
                            var currElement = event && event.target;
                            if (currElement) {
                                this._lastFocusedElement = currElement;
                                WinJS.Promise.timeout().then(function() {
                                    if (this._lastFocusedElement && !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).appBarVisible)
                                        MS.Entertainment.UI.Framework.focusElement(this._lastFocusedElement);
                                    this._lastFocusedElement = null
                                }.bind(this))
                            }
                        }
                    }, _onFocusout: function _onFocusout(event) {
                        if (this.onFocusListviewClass)
                            WinJS.Utilities.removeClass(this.domElement, this.onFocusListviewClass)
                    }, _raisePanelReadyOnce: function _raisePanelReadyOnce() {
                        if (!this._raisedPanelReady) {
                            this._raisedPanelReady = true;
                            if (!this._unloaded && this.raisePanelReadyEvents)
                                MS.Entertainment.Utilities.raisePanelReady(this.domElement);
                            if (MS.Entertainment.Utilities.isApp2 && this.focusFirstItemOnPageLoad)
                                this.setVisibleIndexFocus(0)
                        }
                    }, _raisePanelEmpty: function _raisePanelEmpty(isEmpty) {
                        if (!this._unloaded && (!this._raisedPanelEmpty || this._isEmpty !== isEmpty)) {
                            this._raisedPanelEmpty = true;
                            this._isEmpty = isEmpty;
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("PanelEmpty", true, true);
                            domEvent.empty = isEmpty;
                            this.domElement.dispatchEvent(domEvent)
                        }
                    }, _raisePanelResetOnce: function _raisePanelResetOnce() {
                        if (this._raisedPanelReady) {
                            this._raisedPanelReady = false;
                            if (!this._unloaded && this.raisePanelResetEvents)
                                MS.Entertainment.Utilities.raisePanelReset(this.domElement)
                        }
                    }, _raiseGalleryReadyState: function _raiseGalleryReadyState(readyState, event) {
                        this.readyState = readyState;
                        if (this._readyStateCallback)
                            this._readyStateCallback({
                                readyState: this.readyState, scrolling: (event && event.detail) ? event.detail.scrolling : false
                            })
                    }, _raisePanelSyncing: function _raisePanelSyncing(isSyncing) {
                        if (!this._unloaded && this._isSyncing !== isSyncing) {
                            this._isSyncing = isSyncing;
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("PanelSyncing", true, true);
                            domEvent.isSyncing = isSyncing;
                            this.domElement.dispatchEvent(domEvent)
                        }
                    }, _setSelectedIndex: function _setSelectedIndex(newIndex, oldIndex) {
                        oldIndex = oldIndex === undefined ? this.selectedIndex : oldIndex;
                        if (oldIndex !== newIndex) {
                            this.selectedIndex = newIndex;
                            if (this._selectedIndexChangedCallback)
                                this._selectedIndexChangedCallback(newIndex, oldIndex)
                        }
                        if (this.dataSource && this.dataSource.keyFromIndex)
                            this.selectedKey = this.dataSource.keyFromIndex(newIndex);
                        else
                            this.selectedKey = null
                    }, _validateSelection: function _validateSelection() {
                        var indices;
                        var selection = this._listView && this._listView.selection;
                        if (selection && this.maxSelectionCount >= 0) {
                            if (this.maxSelectionCount < selection.count()) {
                                indices = selection.getIndices();
                                if (indices.length > this.maxSelectionCount)
                                    indices = indices.slice(0, this.maxSelectionCount);
                                else
                                    indices = null
                            }
                            else if (selection.isEverything())
                                indices = [{
                                        firstIndex: 0, lastIndex: this.maxSelectionCount - 1
                                    }];
                            if (indices)
                                selection.set(indices)
                        }
                    }, _updateDataSourceGrouper: function _updateDataSourceGrouper(dataSource) {
                        var promise;
                        if (this._inplaceGrouper) {
                            this._inplaceGrouper.dispose();
                            this._inplaceGrouper = null
                        }
                        if (dataSource && dataSource.setGrouper && !dataSource.grouper && this.useInPlaceHeaders)
                            this._inplaceGrouper = new MS.Entertainment.Data.ListGrouper(this.grouper || MS.Entertainment.Data.emptyGrouper, dataSource);
                        return WinJS.Promise.as(this._inplaceGrouper && this._inplaceGrouper.dataSourceReady)
                    }, _updateSelectionInvokedVisibleAfterMove: function _updateSelectionInvokedVisibleAfterMove(args) {
                        var offset = 0;
                        if (args && args.detail)
                            offset = args.detail.newIndex < args.detail.oldIndex ? -1 : 1;
                        if (this.selectedIndices && this.selectedIndices.length)
                            this._updateSelection();
                        this._ensureSelectionInvokedVisible(offset)
                    }, _getSelectedItems: function _getSelectedItems() {
                        var allSelectedItems = [];
                        if (this.selectedItems)
                            allSelectedItems = this.selectedItems.toArrayAll();
                        return WinJS.Promise.as(allSelectedItems)
                    }, _updateSelection: function _updateSelection() {
                        var newSelection;
                        var oldSelection = this.selectedIndices;
                        if (this._canCreateSelectionHelper) {
                            if (this._listView && this._listView.selection)
                                newSelection = this._listView.selection.getIndices();
                            if (this.invocationHelper && this.invocationHelper.invokedIndex >= 0) {
                                var lastInvokedIndex = this.invocationHelper.invokedIndex;
                                this.invocationHelper.clearInvocation();
                                if (this.selectionMode === MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi)
                                    this._listView.selection.add(lastInvokedIndex)
                            }
                            if (this._pendingSelectionFromInvoke >= 0) {
                                this._listView.selection.add(this._pendingSelectionFromInvoke);
                                this._pendingSelectionFromInvoke = -1
                            }
                            if (newSelection && newSelection.length) {
                                if (!this.selectedItems)
                                    this.selectedItems = new MS.Entertainment.Data.SelectionList;
                                this.selectedItems.maxCount = this.maxSelectionCount;
                                this.selectedItems.setSource(this.dataSource, this._listView.selection, this._userSelectedEverything);
                                this._setSelectedIndices(newSelection);
                                this._setSelectedIndex(newSelection[newSelection.length - 1]);
                                this._selectionHelper = this._initializeSelectionHelper();
                                this._selectionHelper.updateSelectedItems(newSelection, oldSelection)
                            }
                            else {
                                this.selectedItems = null;
                                this._setSelectedIndices([]);
                                this._clearSelectionHelper()
                            }
                            if (this.handleSelectedItemsChangedEvent) {
                                var that = this;
                                this._getSelectedItems().then(function(allSelectedItems) {
                                    var selectedItemsChangedEvent = document.createEvent("Event");
                                    selectedItemsChangedEvent.initEvent("galleryControlSelectionChanged", true, true);
                                    selectedItemsChangedEvent.detail = allSelectedItems;
                                    that.domElement.dispatchEvent(selectedItemsChangedEvent)
                                })
                            }
                            if (this.queryToPause)
                                if (newSelection && newSelection.length) {
                                    if (!oldSelection || !oldSelection.length)
                                        this.queryToPause.pause()
                                }
                                else if (oldSelection && oldSelection.length)
                                    this.queryToPause.unpause()
                        }
                    }, _setSelectedIndices: function _setSelectedIndices(value) {
                        value = value || [];
                        var oldEmpty = !this.selectedIndices.length;
                        var newEmpty = !value.length;
                        if ((value !== this.selectedIndices) && !(oldEmpty && newEmpty)) {
                            var oldValue = this.selectedIndices;
                            this.selectedIndices = value;
                            this.dispatchEvent("selectedIndicesChanged", {
                                newValue: value, oldValue: oldValue
                            })
                        }
                    }
            }, {
                selectedIndex: -1, selectedKey: null, selectedIndices: null, selectedItems: null, readyState: null, autoSizeMin: 1
            }, {
                resetItem: function resetItem(item, element) {
                    element.listViewReset = true;
                    MS.Entertainment.UI.Framework.unloadControlTree(element)
                }, searchAndApply: function searchAndApply(subTree, operation) {
                        if (subTree && operation) {
                            var applyOnGalleryControl = function applyOnGalleryControl(listView) {
                                    var galleryControl;
                                    if (listView)
                                        galleryControl = listView.parentElement;
                                    if (galleryControl && galleryControl.winControl)
                                        operation(galleryControl.winControl)
                                };
                            MS.Entertainment.UI.Framework.applyWithSelector(subTree, ".win-listview", applyOnGalleryControl)
                        }
                    }, zoomedOutClass: "ent-zoomOutButton", selectionFilledClass: "win-selectionstylefilled", dragInsertBeforeClass: "state_dragInsertBefore", dragInsertAfterClass: "state_dragInsertAfter", defaultGrouperItemThreshold: _defaultGrouperItemThreshold, maxItemRenderTime: 40, _restoreSetImmediateModeTime: 1000, Layout: {
                        grid: "grid", list: "list"
                    }, Orientation: {
                        horizontal: "horizontal", vertical: "vertical"
                    }, DoubleClickBehavior: {
                        action: "action", play: "play", none: "none"
                    }, ZoomedOutLayout: {
                        auto: "auto", grid: "grid", list: "list"
                    }, HeaderPosition: {
                        inline: "inline", left: "left", top: "top"
                    }, HeaderType: {
                        none: "none", auto: "auto", inPlace: "inPlace"
                    }, SelectionMode: {
                        none: "none", single: "single", multi: "multi"
                    }, Tap: {
                        directSelect: "directSelect", toggleSelect: "toggleSelect", invokeOnly: "invokeOnly", none: "none"
                    }, swipeBehavior: {
                        select: "select", none: "none"
                    }, ReadyState: {
                        itemsLoading: "itemsLoading", viewPortLoaded: "viewPortLoaded", itemsLoaded: "itemsLoaded", complete: "complete"
                    }, LoadingBehavior: {
                        incremental: "incremental", randomAccess: "randomAccess"
                    }, InvokeBehavior: {
                        popOver: "popOver", inline: "inline", details: "details", action: "action", none: "none"
                    }, SemanticZoomSelected: {
                        headerClick: "headerClick", minusClick: "minusClick", keyDown: "keyDown", keyUp: "keyUp", pinch: "pinch", jumpTo: "jumpTo", mediaTransportControl: "mediaTransportControl"
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ListViewModelGalleryControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.GalleryControl", null, function listViewModelGalleryControl(element, options){}, {
            listViewModel: null, processItemData: function processItemData(itemData, index, key) {
                    return new MS.Entertainment.UI.Controls.ListItemData(itemData, this.listViewModel, index, key)
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ListItemData: MS.Entertainment.UI.Framework.define(function listItemData(data, listViewModel, index, key) {
            this.data = data;
            this.index = index;
            this.key = key;
            this.listViewModel = listViewModel
        }, {
            listViewModel: null, data: null, index: -1, key: null, instance: {get: function() {
                        return this
                    }}
        })});
    function closeTooltip(element) {
        var tt = WinJS.Utilities.data(element).tooltip;
        if (tt) {
            tt.close();
            tt.dispose();
            WinJS.Utilities.data(element).tooltip = null
        }
    }
    if (WinJS.UI._ItemEventsHandler) {
        var ssrg = WinJS.UI._ItemEventsHandler.prototype._startSelfRevealGesture;
        WinJS.UI._ItemEventsHandler.prototype._startSelfRevealGesture = function() {
            ssrg.apply(this, arguments);
            if (this._selfRevealGesture) {
                var element = this._site.pressedItemBox;
                var down = String.load(String.id.IDS_SWIPE_VERTICALLY_TO_SELECT);
                var left = String.load(String.id.IDS_SWIPE_HORIZONTALLY_TO_SELECT);
                var directionText = this._site.horizontal ? down : left;
                var directionGlyph = this._site.horizontal ? "&#xE1FD;" : "&#xE112;";
                var tt = new WinJS.UI.Tooltip(element, {innerHTML: directionGlyph + " " + directionText});
                tt.open();
                setTimeout(closeTooltip.bind(null, element), 5000)
            }
        };
        var esrg = WinJS.UI._ItemEventsHandler.prototype._endSelfRevealGesture;
        WinJS.UI._ItemEventsHandler.prototype._endSelfRevealGesture = function() {
            var element = this._site.pressedItemBox;
            if (element)
                closeTooltip(element);
            esrg.apply(this, arguments)
        }
    }
})()
})();
/* >>>>>>/viewmodels/queryviewmodel.js:13913 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {
        Node: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function Node(id, label, value, secondaryLabel) {
            MS.Entertainment.ViewModels.assert(id, "Attempted to construct a Node without an ID.");
            this.id = id;
            this.label = label || String.empty;
            this.value = value || {};
            this.secondaryLabel = secondaryLabel || String.empty
        }, {
            selected: MS.Entertainment.UI.Framework.observableProperty("selected", false), isRoot: MS.Entertainment.UI.Framework.observableProperty("isRoot", true), label: MS.Entertainment.UI.Framework.observableProperty("label", null), secondaryLabel: MS.Entertainment.UI.Framework.observableProperty("secondaryLabel", null), value: MS.Entertainment.UI.Framework.observableProperty("value", null), items: MS.Entertainment.UI.Framework.observableProperty("items", null)
        }, {isEqual: function isEqual(node1, node2) {
                return !!((node1 === node2) || (node1 && node2 && node1.id && node1.id === node2.id))
            }}), NodeSeparator: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.Node", function NodeSeparator(id) {
                this.id = id;
                this.value = new MS.Entertainment.ViewModels.NodeValues
            }, {isSeparator: true})
    });
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {
        NodeValues: MS.Entertainment.UI.Framework.define(function nodeValues(query, queryOptions, modelOptions, modifierOptions, pivotOptions, trackQuery, trackQueryOptions) {
            this.query = query || null;
            this.queryOptions = queryOptions || {};
            this.modelOptions = modelOptions || {};
            this.modifierOptions = modifierOptions || {};
            this.pivotOptions = pivotOptions || {};
            this.trackQuery = trackQuery || null;
            this.trackQueryOptions = trackQueryOptions || {}
        }, {
            query: null, queryOptions: null, modelOptions: null, modifierOptions: null, filterOptions: null, pivotOptions: null, trackQuery: null, trackQueryOptions: null, subPivotOptions: null
        }, {create: function create(options) {
                var nodeValue = new MS.Entertainment.ViewModels.NodeValues;
                WinJS.UI.setOptions(nodeValue, options);
                return nodeValue
            }}), ActionCell: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function actionCell(actionId, actionOptions, actionParams, actionArray, actionOptionsArray, actionParamsArray) {
                this._actionParams = actionParams;
                this._actionOptions = actionOptions;
                this._actionId = actionId;
                this._actionParamsArray = actionParamsArray;
                this._actionOptionsArray = actionOptionsArray;
                this._actionArray = actionArray
            }, {
                _actionId: null, _actionOptions: null, _actionParams: null, _actionArray: null, _actionOptionsArray: null, _actionParamsArray: null, isAction: true, icon: MS.Entertainment.UI.Framework.observableProperty("icon", null), text: MS.Entertainment.UI.Framework.observableProperty("text", null), stringId: null, hideDefaultRing: false, groupHeader: String.empty, automationId: String.empty, areActionsInitialized: false, action: {get: function() {
                            if (!this._action)
                                this._initializeAction();
                            return this._action
                        }}, _initializeAction: function _initializeAction() {
                        if (this._actionId)
                            this._action = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(this._actionId);
                        if (this._actionOptions && this._action)
                            WinJS.UI.setOptions(this._action, this._actionOptions);
                        if (this._actionParams && this._action)
                            this._action.parameter = this._actionParams;
                        this._actionOptions = null
                    }, actions: {get: function() {
                            if (!this.areActionsInitialized)
                                this._initializeActions();
                            return this._actionArray
                        }}, _initializeActions: function _initializeActions() {
                        if (this._actionOptionsArray && this._actionArray && (this._actionOptionsArray.length === this._actionArray.length)) {
                            for (var i = 0; i < this._actionOptionsArray.length; i++)
                                WinJS.UI.setOptions(this._actionArray.item(i), this._actionOptionsArray[i]);
                            this.areActionsInitialized = true
                        }
                        if (this._actionParamsArray && this._actionArray && (this._actionParamsArray.length === this._actionArray.length))
                            for (var i = 0; i < this._actionParamsArray.length; i++)
                                this._actionArray.item(i).parameter = this._actionParamsArray[i];
                        this._actionOptionsArray = null
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {ModifierActionCell: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.ActionCell", function modifierActionCell(modifier, groupHeader, modifierTitleId, forcedModifier) {
            var modifierCount = modifier && modifier.dataSource && modifier.dataSource.length;
            if (modifierCount > 1) {
                var originalIndex = modifier.selectedIndex;
                this._action = {
                    execute: function executedPlay(param) {
                        return MS.Entertainment.UI.Controls.ModifierPopup.createModifierPopup("primaryPanelModifierPopup", modifier).show().then(function modifierChanged() {
                                return WinJS.Promise.wrap(originalIndex !== modifier.selectedIndex)
                            })
                    }, canExecute: function canExecutePlay(param) {
                            return true
                        }
                };
                this.enabled = true
            }
            else {
                this._action = {
                    execute: function executedPlay(param) {
                        return WinJS.Promise.wrap(false)
                    }, canExecute: function canExecutePlay(param) {
                            return true
                        }
                };
                this.enabled = false
            }
            if (modifierCount > 0)
                this.text = modifier.selectedItem ? modifier.selectedItem.label : modifier.dataSource.item(0).label;
            else
                this.text = forcedModifier;
            this.icon = null;
            if (modifierTitleId)
                this.title = modifierTitleId;
            if (groupHeader)
                this.groupHeader = groupHeader
        }, {
            title: null, isModifier: true, action: {get: function() {
                        if (!this._action)
                            var action;
                        return this._action
                    }}
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {NotificationActionCell: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.ActionCell", function notificationActionCell(category, actionArray, actionOptionsArray, clearActionId) {
            this.category = category;
            this._clearActionId = clearActionId;
            this._cloudMatchDialogAction = actionOptionsArray && actionOptionsArray[0] && actionOptionsArray[0].consentDialog ? true : false;
            MS.Entertainment.ViewModels.ActionCell.prototype.constructor.call(this, null, null, null, actionArray, actionOptionsArray, [{category: this.category}]);
            this.notificationClass = category.name
        }, {
            _clearActionId: null, _cloudMatchDialogAction: false, category: null, clearIcon: MS.Entertainment.UI.Icon.close, isNotification: true, subText: MS.Entertainment.UI.Framework.observableProperty("subText", null), notificationClass: null, clearAction: {get: function() {
                        if (!this._clearAction)
                            this._initializeClearAction();
                        return this._clearAction
                    }}, _initializeClearAction: function _initializeClearAction() {
                    this._clearAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(this._clearActionId);
                    this._clearAction.title = String.load(String.id.IDS_CLOSE_BUTTON);
                    this._clearAction.optOut = this._cloudMatchDialogAction;
                    this._clearAction.parameter = {
                        category: this.category, actionType: this.category.name
                    }
                }, setNotification: function setNotification(notification) {
                    if (!notification) {
                        MS.Entertainment.ViewModels.fail("NotificationActionCell::setNotification() Unable to set notification since notification was null.");
                        return
                    }
                    this._actionArray = notification.actionArray;
                    this._actionOptionsArray = notification.actionParamsArray;
                    this.category = notification.category;
                    this._actionParamsArray = [{category: this.category}];
                    this._clearActionId = notification.dismissAction;
                    this.icon = notification.icon;
                    this.text = notification.title;
                    this.subText = notification.subTitle;
                    this._cloudMatchDialogAction = !!(this._actionOptionsArray && this._actionOptionsArray[0] && this._actionOptionsArray[0].consentDialog);
                    var oldActions = this._actionArray;
                    this._initializeActions();
                    this.notify("actions", this._actionArray, oldActions);
                    var oldClearAction = this._clearAction;
                    this._initializeClearAction();
                    this.notify("clearAction", this._clearAction, oldClearAction)
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {QueryViewModelBase: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", null, {
            items: MS.Entertainment.UI.Framework.observableProperty("items", null), emptyGalleryModel: MS.Entertainment.UI.Framework.observableProperty("emptyGalleryModel", null), modifierSelectionManager: MS.Entertainment.UI.Framework.observableProperty("modifierSelectionManager", null), secondaryModifierSelectionManager: MS.Entertainment.UI.Framework.observableProperty("secondaryModifierSelectionManager", null), pivotsSelectionManager: MS.Entertainment.UI.Framework.observableProperty("pivotsSelectionManager", null), filterSelectionManager: MS.Entertainment.UI.Framework.observableProperty("filterSelectionManager", null), isFailed: MS.Entertainment.UI.Framework.observableProperty("isFailed", false), isLoading: MS.Entertainment.UI.Framework.observableProperty("isLoading", false), selectedTemplate: MS.Entertainment.UI.Framework.observableProperty("selectedTemplate", null), largeItemIndex: MS.Entertainment.UI.Framework.observableProperty("largeItemIndex", -1), titleOverride: MS.Entertainment.UI.Framework.observableProperty("titleOverride", null), titleFormatValues: MS.Entertainment.UI.Framework.observableProperty("titleFormatValues", null), title: MS.Entertainment.UI.Framework.observableProperty("title", null), pivotSelectedIndexOverride: MS.Entertainment.UI.Framework.observableProperty("pivotSelectedIndexOverride", null), modelActions: MS.Entertainment.UI.Framework.observableProperty("modelActions", null), containingMedia: MS.Entertainment.UI.Framework.observableProperty("containingMedia", null), selectionHandlers: MS.Entertainment.UI.Framework.observableProperty("selectionHandlers", null), filterValue: MS.Entertainment.UI.Framework.observableProperty("filterValue", null), primaryItemIndex: MS.Entertainment.UI.Framework.observableProperty("primaryItemIndex", -1), initialInvokedItem: -1
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {QueryViewModel: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.QueryViewModelBase", function queryViewModelConstructor(view) {
            MS.Entertainment.ViewModels.QueryViewModelBase.prototype.constructor.call(this);
            this._fileTransferListenerId = "" + Date.now();
            this._fileTransferListenerId = this._viewModelId + this._fileTransferListenerId + "_" + Math.random();
            this._workingModifierSelectionManager = new MS.Entertainment.UI.Framework.SelectionManager(null, this._defaultModifierSelection, null, this._overrideModifierSetting);
            this._workingSecondaryModifierSelectionManager = new MS.Entertainment.UI.Framework.SelectionManager(null, this._defaultSecondaryModifierSelection);
            this._workingFilterSelectionManager = new MS.Entertainment.UI.Framework.SelectionManager(null, this._defaultFilterIndex, null, this._overrideFilterSettingOnce);
            this._workingPivotsSelectionManager = new MS.Entertainment.UI.Framework.SelectionManager(null, this._defaultPivotIndex, null, this._overridePivotSetting);
            this.selectedTemplate = {};
            this.initialize();
            this.view = view
        }, {
            _defaultModifierSelection: 0, _overrideModifierSetting: false, _overridePivotSetting: false, _overrideFilterSettingOnce: false, _defaultSecondaryModifierSelection: 0, _defaultFilterIndex: 0, _defaultPivotIndex: 0, _viewModelId: null, _queryWatcher: null, _fileTransferListenerId: null, _queryWatcherString: "marketplace", _loadingDoneString: "loadingDone", _pendingViewChange: null, _pendingQueryExecute: null, _lastUsedPivotItem: null, _lastUsedModifierItem: null, _lastUsedSecondaryModifierItem: null, _lastUsedFilterItem: null, _lastUsedView: null, _lastUsedQueryType: null, _lastUsedQuery: null, _lastUsedModifierDefinition: null, _lastUsedSecondaryModifierDefinition: null, _lastUsedFilterDefinition: null, _lastUsedPivotDefinition: null, _lastUsedSubPivotDefinition: null, _modifiersTrimmed: false, _workingModifierSelectionManager: null, _workingSecondaryModifierSelectionManager: null, _workingFilterSelectionManager: null, _workingPivotsSelectionManager: null, _recreateQueries: false, _view: null, _enabled: false, _disposed: false, _modifierEvents: null, _secondaryModifierEvents: null, _filterEvents: null, _pivotEvents: null, _refreshing: false, _queryEventHandlers: null, _isDelayInitialized: false, enableDelayInitialize: false, debugId: null, handleQueryChanges: true, autoHideInvalidModifiers: false, failOnEmpty: false, propertyKey: null, taskKeyGetter: null, notifier: null, addActionCellsToList: true, forceEmpty: false, completedQuery: null, mediaContext: null, isDisposed: {get: function get_isDisposed() {
                        return this._disposed
                    }}, pausableQuery: {get: function() {
                        if (this.getQuery)
                            return this.getQuery;
                        else if (this.completedQuery && this.completedQuery.pause && this.completedQuery.unpause)
                            return this.completedQuery;
                        return null
                    }}, isOnline: {get: function() {
                        return MS.Entertainment.UI.NetworkStatusService.isOnline()
                    }}, isItemsLive: {get: function get_isLiveList() {
                        return !!(this.pausableQuery && this.items && this.items.handleChunkerChanges)
                    }}, initialize: function initialize() {
                    MS.Entertainment.ViewModels.assert(!this._modifierEvents && !this._pivotEvents && !this._secondaryModifierEvents, "These events shouldn't exist");
                    this._modifierEvents = MS.Entertainment.Utilities.addEventHandlers(this._workingModifierSelectionManager, {selectedItemChanged: this._handleModifierSelectionChanged.bind(this)});
                    this._secondaryModifierEvents = MS.Entertainment.Utilities.addEventHandlers(this._workingSecondaryModifierSelectionManager, {selectedItemChanged: this._handleSecondaryModifierSelectionChanged.bind(this)});
                    this._filterEvents = MS.Entertainment.Utilities.addEventHandlers(this._workingFilterSelectionManager, {selectedItemChanged: this._handleFilterSelectionChanged.bind(this)});
                    this._pivotEvents = MS.Entertainment.Utilities.addEventHandlers(this._workingPivotsSelectionManager, {selectedItemChanged: this._handlePivotSelectionChanged.bind(this)});
                    this._eventHandlers = MS.Entertainment.Utilities.addEventHandlers(this, {selectedTemplateChanged: this._handleSelectedTemplateChanged.bind(this)});
                    if (!this.enableDelayInitialize)
                        this.delayInitialize()
                }, isDelayInitialized: {get: function get_isDelayInitialized() {
                        return this._isDelayInitialized
                    }}, delayInitialize: function delayInitialize() {
                    this._isDelayInitialized = true;
                    this._updateSelectionHandlers()
                }, dispose: function dispose() {
                    this._disposed = true;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.fileTransfer)) {
                        var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                        fileTransferService.unregisterListener(this._fileTransferListenerId)
                    }
                    this._disposeQuery();
                    if (this._pendingViewChange) {
                        this._pendingViewChange.cancel();
                        this._pendingViewChange = null
                    }
                    if (this._pendingQueryExecute) {
                        this._pendingQueryExecute.cancel();
                        this._pendingQueryExecute = null
                    }
                    if (this._modifierEvents) {
                        this._modifierEvents.cancel();
                        this._modifierEvents = null
                    }
                    if (this._filterEvents) {
                        this._filterEvents.cancel();
                        this._filterEvents = null
                    }
                    if (this._pivotEvents) {
                        this._pivotEvents.cancel();
                        this._pivotEvents = null
                    }
                    if (this._eventHandlers) {
                        this._eventHandlers.cancel();
                        this._eventHandlers = null
                    }
                    if (this._workingModifierSelectionManager) {
                        this._workingModifierSelectionManager.dispose();
                        this._workingModifierSelectionManager = null
                    }
                    if (this._workingSecondaryModifierSelectionManager) {
                        this._workingSecondaryModifierSelectionManager.dispose();
                        this._workingSecondaryModifierSelectionManager = null
                    }
                    if (this._workingFilterSelectionManager) {
                        this._workingFilterSelectionManager.dispose();
                        this._workingFilterSelectionManager = null
                    }
                    if (this._workingPivotsSelectionManager) {
                        this._workingPivotsSelectionManager.dispose();
                        this._workingPivotsSelectionManager = null
                    }
                    this.selectedTemplate = {};
                    this.containingMedia = null;
                    this.selectionHandlers = null;
                    this._lastUsedPivotItem = null;
                    this._lastUsedModifierItem = null;
                    this._lastUsedSecondaryModifierItem = null;
                    this._lastUsedFilterItem = null
                }, view: {
                    get: function() {
                        return this._view
                    }, set: function(value) {
                            if (this._view !== value && !this._disposed) {
                                var oldValue = this._view;
                                this._view = value;
                                this._handleViewChange();
                                this.notify("view", value, oldValue)
                            }
                        }
                }, impressionGuid: {get: function() {
                        return WinJS.Utilities.getMember("_lastUsedQuery.result.impressionGuid", this) || null
                    }}, isCurrentQuery: function isCurrentQuery() {
                    return !this._pendingQueryExecute
                }, getViewDefinition: function(view) {
                    return {}
                }, getPivotDefinition: function(view) {
                    return null
                }, getSubPivotDefinition: function(view, pivot) {
                    return null
                }, getModifierDefinition: function(view) {
                    return null
                }, getSecondaryModifierDefinition: function getSecondaryModifierDefinition(view, modifier) {
                    return null
                }, getFilterDefinition: function(view) {
                    return null
                }, getFilterOptions: function getFilterOptions(view) {
                    var definition = this.getViewDefinition(view);
                    return definition && definition.filterOptions
                }, getModifierOptions: function getModifierOptions(view) {
                    var definition = this.getViewDefinition(view);
                    return definition && definition.modifierOptions
                }, getSecondaryModifierOptions: function getSecondaryModifierOptions(view, modifier) {
                    var definition = this.getViewDefinition(view);
                    return definition && definition.secondaryModifierOptions
                }, getSecondaryModifierItemQueryOptions: function getSecondaryModifierItemQueryOptions(view, modifier) {
                    var definition = this.getViewDefinition(view);
                    return MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(modifier && modifier.value && modifier.value.itemQueryOptions), WinJS.Binding.unwrap(definition && definition.itemQueryOptions))
                }, getSubPivotItemQueryOptions: function getSubPivotItemQueryOptions(view, pivot) {
                    var definition = this.getViewDefinition(view);
                    return MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(pivot && pivot.value && pivot.value.itemQueryOptions), WinJS.Binding.unwrap(definition && definition.itemQueryOptions))
                }, getPivotOptions: function getPivotOptions(view) {
                    var definition = this.getViewDefinition(view);
                    return definition && definition.pivotOptions
                }, getSubPivotOptions: function getSubPivotOptions(view, pivot) {
                    var definition = this.getViewDefinition(view);
                    return definition && definition.subPivotOptions
                }, getQueryType: function getQueryType(view, pivot, modifier) {
                    var QueryType = null;
                    if (view.query)
                        QueryType = view.query;
                    else if (modifier.value.query)
                        QueryType = modifier.value.query;
                    else if (pivot.value.query)
                        QueryType = pivot.value.query;
                    return QueryType
                }, getQueryOptions: function getQueryOptions(view, pivot, modifier, secondaryModifier, filter) {
                    var options = MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(pivot.value.queryOptions), WinJS.Binding.unwrap(modifier.value.queryOptions));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(secondaryModifier.value.queryOptions));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(filter.value.queryOptions));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(view.queryOptions));
                    return options
                }, getModelOptions: function getModelOptions(view, pivot, modifier, secondaryModifier, filter) {
                    var options;
                    options = MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(WinJS.Utilities.getMember("value.modelOptions", pivot)), WinJS.Binding.unwrap(WinJS.Utilities.getMember("value.modelOptions", modifier)));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(WinJS.Utilities.getMember("value.modelOptions", secondaryModifier)));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(WinJS.Utilities.getMember("value.modelOptions", filter)));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(view && view.modelOptions));
                    return options
                }, createContainingMedia: function createContainingMedia() {
                    return null
                }, createSelectionHandlers: function createSelectionHandlers() {
                    return null
                }, resetSelectedTemplate: function resetSelectedTemplate() {
                    var view = this.getViewDefinition(this.view);
                    var pivot = this.pivotsSelectionManager && this.pivotsSelectionManager.selectedItem;
                    var modifier = this.modifierSelectionManager && this.modifierSelectionManager.selectedItem;
                    var secondaryModifier = this.secondaryModifierSelectionManager && this.secondaryModifierSelectionManager.selectedItem;
                    var filter = this.filterSelectionManager && this.filterSelectionManager.selectedItem;
                    var options = this.getModelOptions(view, pivot, modifier, secondaryModifier, filter);
                    if (options && options.selectedTemplate)
                        this.selectedTemplate = options.selectedTemplate
                }, makeEmpty: function makeEmpty() {
                    this._clear(true)
                }, clear: function clear() {
                    this._clear(false)
                }, _clear: function _clear(setEmptyResult) {
                    this._disposeQuery();
                    this._resetLastUsed();
                    this._setIsFailed(false);
                    this._setItems(setEmptyResult ? new MS.Entertainment.Data.VirtualList : null)
                }, freeze: function freeze(){}, thaw: function thaw(){}, refresh: function refresh() {
                    if (this._disposed)
                        return;
                    this._resetLastUsed();
                    this._enabled = true;
                    return this._refresh()
                }, refreshIfNeeded: function refreshIfNeeded() {
                    if (this._disposed)
                        return;
                    this._enabled = true;
                    return this._refresh()
                }, begin: function begin() {
                    var promise;
                    if (!this._enabled) {
                        this._enabled = true;
                        promise = this._refresh()
                    }
                    return WinJS.Promise.as(promise)
                }, waitForLoad: function waitForLoad() {
                    return WinJS.Promise.join([WinJS.Promise.as(this._pendingViewChange), WinJS.Promise.as(this._pendingQueryExecute)]).then(function hideResult(){})
                }, trySetCurrentFilter: function trySetCurrentFilter(filterId) {
                    this._setCurrentFilter(filterId, true)
                }, setCurrentFilter: function setCurrentFilter(filterId) {
                    this._setCurrentFilter(filterId, false)
                }, _setCurrentFilter: function _setCurrentFilter(filterId, ignoreFailures) {
                    if (this.filterSelectionManager && this.filterSelectionManager.dataSource) {
                        var foundFilter = false;
                        for (var i = 0; i < this.filterSelectionManager.dataSource.length; i++)
                            if (this.filterSelectionManager.dataSource[i].id === filterId) {
                                foundFilter = true;
                                this.filterSelectionManager.selectedIndex = i;
                                break
                            }
                        MS.Entertainment.ViewModels.assert(foundFilter || ignoreFailures, "setCurrentFilter: Filter not found: '" + filterId + "'")
                    }
                }, getCurrentFilter: function getCurrentFilter() {
                    var result = null;
                    if (this._workingFilterSelectionManager && this._workingFilterSelectionManager.selectedItem)
                        result = this._workingFilterSelectionManager.selectedItem.id;
                    return result
                }, reloadFilters: function reloadFilters() {
                    this._resetFilters(true)
                }, _raiseDelayLoadedEvent: function _raiseDelayLoadedEvent() {
                    this.dispatchEvent(MS.Entertainment.ViewModels.QueryViewModel.events.delayLoaded, {sender: this})
                }, _raiseShouldClearSelection: function _raiseShouldClearSelection() {
                    if (!this._disposed)
                        this.dispatchEvent(MS.Entertainment.ViewModels.QueryViewModel.events.shouldClearSelection, {sender: this})
                }, _handleModifierSelectionChanged: function _handleModifierSelectionChanged(args) {
                    if (!this.view || args.detail.oldSelection.index < 0 || this._refreshing)
                        return;
                    this._lastUsedSecondaryModifierDefinition = null;
                    this._resetSecondaryModifier();
                    this._beginQuery()
                }, _handleSecondaryModifierSelectionChanged: function _handleSecondaryModifierSelectionChanged(args) {
                    if (!this.view || args.detail.oldSelection.index < 0 || this._refreshing)
                        return;
                    this._beginQuery()
                }, _handleFilterSelectionChanged: function _handleFilterSelectionChanged(args) {
                    if (!this.view || args.detail.oldSelection.index < 0 || this._refreshing)
                        return;
                    this._beginQuery()
                }, _handlePivotSelectionChanged: function _handlePivotSelectionChanged(args) {
                    if (!this.view || args.detail.oldSelection.index < 0 || this._refreshing) {
                        if (this.isHorizontalLayout)
                            this._resetModifiers();
                        return
                    }
                    if (args.detail.newSelection.index >= 0 && this._modifiersTrimmed)
                        this._lastUsedModifierDefinition = null;
                    this._lastUsedSubPivotDefinition = null;
                    this._resetSubPivots();
                    this._refresh()
                }, _handleSelectedTemplateChanged: function _handleSelectedTemplateChanged(){}, _handleViewChange: function _handleViewChange() {
                    this._setItems(null);
                    this._lastUsedView = null;
                    this._lastUsedPivotDefinition = null;
                    this._lastUsedSubPivotDefinition = null;
                    this._lastUsedModifierDefinition = null;
                    this._lastUsedSecondaryModifierDefinition = null;
                    this._lastUsedFilterDefinition = null;
                    return this._refresh()
                }, _refresh: function _refresh() {
                    if (!this.view || !this._enabled || this._refreshing || this._disposed)
                        return WinJS.Promise.wrap();
                    this._refreshing = true;
                    if (this._pendingViewChange) {
                        this._pendingViewChange.cancel();
                        this._pendingViewChange = null
                    }
                    var promise = this._pendingViewChange = WinJS.Promise.join({
                            pivots: this._resetPivots(), modifier: this._resetModifiers(), filters: this._resetFilters()
                        }).then(this._viewLoadCompleted.bind(this), this._viewLoadFailed.bind(this));
                    this._refreshing = false;
                    return promise
                }, _resetPivots: function _resetPivots() {
                    var promise;
                    var staticPromise;
                    var queryPromise;
                    var pivotsQuery;
                    var pivots = this.getPivotDefinition(this.view);
                    var workingDataSource;
                    if (pivots !== this._lastUsedPivotDefinition) {
                        this._lastUsedPivotDefinition = pivots;
                        workingDataSource = new MS.Entertainment.ObservableArray;
                        this._lastUsedPivotItem = null;
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(this._workingPivotsSelectionManager, this.getPivotOptions(this.view));
                        this.pivotsSelectionManager = this._workingPivotsSelectionManager;
                        if (pivots) {
                            if (pivots.itemFactory) {
                                workingDataSource.spliceArray(workingDataSource.length, 0, pivots.itemFactory());
                                staticPromise = WinJS.Promise.wrap(true)
                            }
                            if (pivots.itemQuery) {
                                pivotsQuery = new pivots.itemQuery;
                                MS.Entertainment.Utilities.BindingAgnostic.setProperties(pivotsQuery, pivots.itemQueryOptions);
                                queryPromise = WinJS.Promise.as(staticPromise).then(function itemsArrayAdded() {
                                    return pivotsQuery.execute()
                                }.bind(this)).then(function queryFinished(q) {
                                    return MS.Entertainment.Data.List.listToArray(q.result.items)
                                }.bind(this), function queryFailed(error) {
                                    if (this._lastUsedPivotDefinition === pivots)
                                        this._lastUsedPivotDefinition = null;
                                    return WinJS.Promise.wrapError(error)
                                }.bind(this)).then(function gotArray(array) {
                                    workingDataSource.spliceArray(workingDataSource.length, 0, array);
                                    return true
                                }.bind(this))
                            }
                        }
                        this._workingPivotsSelectionManager.dataSource = workingDataSource;
                        promise = WinJS.Promise.as(staticPromise || queryPromise);
                        promise = promise.then(function refreshSubPivots() {
                            this._lastUsedSubPivotDefinition = null;
                            return this._resetSubPivots()
                        }.bind(this))
                    }
                    return WinJS.Promise.as(promise)
                }, _resetSubPivots: function _resetSubPivots() {
                    var promise;
                    var staticPromise;
                    var queryPromise;
                    var subPivotQuery;
                    var selectedPivot = this._workingPivotsSelectionManager.selectedItem;
                    var subPivot = this.getSubPivotDefinition(this.view, selectedPivot);
                    var workingDataSource;
                    if (subPivot !== this._lastUsedSubPivotDefinition) {
                        this._lastUsedSubPivotDefinition = subPivot;
                        var workingDataSource = [];
                        var subPivotOptions = this.getSubPivotOptions(this.view, selectedPivot) || {};
                        if (subPivot && selectedPivot) {
                            if (subPivot.itemFactory) {
                                workingDataSource = subPivot.itemFactory().concat(workingDataSource);
                                staticPromise = WinJS.Promise.wrap(true)
                            }
                            if (subPivot.itemQuery) {
                                subPivotQuery = new subPivot.itemQuery;
                                MS.Entertainment.Utilities.BindingAgnostic.setProperties(subPivotQuery, this.getSubPivotItemQueryOptions(this.view, selectedPivot));
                                this._createSubItemAugmentation(subPivotQuery, selectedPivot);
                                queryPromise = WinJS.Promise.as(staticPromise).then(function itemsArrayAdded() {
                                    return subPivotQuery.execute()
                                }).then(function queryFinished(q) {
                                    return MS.Entertainment.Data.List.listToArray(q.result.items)
                                }, function queryFailed(error) {
                                    if (this._lastUsedSubPivotDefinition === subPivot)
                                        this._lastUsedSubPivotDefinition = null;
                                    if (error.name === "Canceled")
                                        return WinJS.Promise.wrapError(error);
                                    else
                                        return []
                                }.bind(this)).then(function gotArray(array) {
                                    workingDataSource = workingDataSource.concat(array);
                                    return true
                                })
                            }
                            promise = WinJS.Promise.as(staticPromise || queryPromise);
                            promise.then(null, function ignoreError(error){}).done(function setItems() {
                                if (this._lastUsedSubPivotDefinition === subPivot && (typeof subPivotOptions.minItems !== "number" || isNaN(subPivotOptions.minItems) || subPivotOptions.minItems <= workingDataSource.length))
                                    selectedPivot.items = workingDataSource;
                                else if (selectedPivot.items)
                                    selectedPivot.items = null
                            }.bind(this))
                        }
                        else if (selectedPivot && selectedPivot.items)
                            selectedPivot.items = null
                    }
                    return WinJS.Promise.as(promise)
                }, _createSubItemAugmentation: function _createSubItemAugmentation(query, parent) {
                    query.resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyListResultAugmentation(query.resultAugmentation, {parent: parent})
                }, _resetLastUsed: function _resetLastUsed() {
                    this._lastUsedPivotItem = null;
                    this._lastUsedModifierItem = null;
                    this._lastUsedSecondaryModifierItem = null;
                    this._lastUsedFilterItem = null;
                    this._lastUsedView = null
                }, _resetModifiers: function _resetModifiers() {
                    var promise;
                    var staticPromise;
                    var queryPromise;
                    var modifierQuery;
                    var modifier = this.getModifierDefinition(this.view);
                    var workingDataSource;
                    if (modifier !== this._lastUsedModifierDefinition) {
                        this._lastUsedModifierDefinition = modifier;
                        workingDataSource = new MS.Entertainment.ObservableArray;
                        this._lastUsedModifierItem = null;
                        this._lastUsedSecondaryModifierItem = null;
                        this._modifiersTrimmed = false;
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(this._workingModifierSelectionManager, this.getModifierOptions(this.view));
                        this.modifierSelectionManager = this._workingModifierSelectionManager;
                        if (modifier) {
                            if (modifier.itemFactory) {
                                workingDataSource.spliceArray(workingDataSource.length, 0, modifier.itemFactory());
                                staticPromise = WinJS.Promise.wrap(true)
                            }
                            if (modifier.itemQuery) {
                                modifierQuery = new modifier.itemQuery;
                                MS.Entertainment.Utilities.BindingAgnostic.setProperties(modifierQuery, modifier.itemQueryOptions);
                                queryPromise = WinJS.Promise.as(staticPromise).then(function itemsArrayAdded() {
                                    return modifierQuery.execute()
                                }.bind(this)).then(function queryFinished(q) {
                                    return MS.Entertainment.Data.List.listToArray(q.result.items)
                                }.bind(this), function queryFailed(error) {
                                    if (this._lastUsedModifierDefinition === modifier)
                                        this._lastUsedModifierDefinition = null;
                                    if (error.name === "Canceled")
                                        return WinJS.Promise.wrapError(error);
                                    else
                                        return []
                                }.bind(this)).then(function gotArray(array) {
                                    workingDataSource.spliceArray(workingDataSource.length, 0, array);
                                    return true
                                }.bind(this))
                            }
                            if (modifier.options)
                                this._workingModifierSelectionManager.toggleModifier = modifier.options.toggleModifier;
                            promise = staticPromise || queryPromise
                        }
                        this._workingModifierSelectionManager.dataSource = workingDataSource;
                        this._lastUsedSecondaryModifierDefinition = null;
                        if (promise)
                            promise = promise.then(null, function ignoreError(error) {
                                MS.Entertainment.Data.fail("Failed loading the modifier.  Error: " + (error && error.message))
                            }).then(this._resetSecondaryModifier.bind(this))
                    }
                    return WinJS.Promise.as(promise)
                }, _resetFilters: function _resetFilters(presistFilterSelection) {
                    var filters = this.getFilterDefinition(this.view);
                    if (filters !== this._lastUsedFilterDefinition) {
                        this._lastUsedFilterDefinition = filters;
                        if (!presistFilterSelection)
                            this._lastUsedFilterItem = null;
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(this._workingFilterSelectionManager, this.getFilterOptions(this.view));
                        if (filters && filters.itemFactory)
                            this._workingFilterSelectionManager.dataSource = filters.itemFactory();
                        else if (filters && filters.options)
                            this._workingFilterSelectionManager.dataSource = filters.options;
                        else
                            this._workingFilterSelectionManager.dataSource = null;
                        this.filterSelectionManager = this._workingFilterSelectionManager
                    }
                    return WinJS.Promise.as(true)
                }, _resetSecondaryModifier: function _resetSecondaryModifier() {
                    var promise;
                    var staticPromise;
                    var queryPromise;
                    var secondaryModifierQuery;
                    var selectedModifier = this._workingModifierSelectionManager.selectedItem;
                    var secondaryModifier = this.getSecondaryModifierDefinition(this.view, selectedModifier);
                    var workingDataSource;
                    this.secondaryModifierSelectionManager = this._workingSecondaryModifierSelectionManager;
                    if (secondaryModifier !== this._lastUsedSecondaryModifierDefinition) {
                        this._lastUsedSecondaryModifierDefinition = secondaryModifier;
                        var workingDataSource = new MS.Entertainment.ObservableArray;
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(this._workingModifierSelectionManager, this.getSecondaryModifierOptions(this.view, selectedModifier));
                        if (secondaryModifier) {
                            if (secondaryModifier.itemFactory) {
                                workingDataSource.spliceArray(workingDataSource.length, 0, secondaryModifier.itemFactory());
                                staticPromise = WinJS.Promise.wrap(true)
                            }
                            if (secondaryModifier.itemQuery) {
                                secondaryModifierQuery = new secondaryModifier.itemQuery;
                                MS.Entertainment.Utilities.BindingAgnostic.setProperties(secondaryModifierQuery, this.getSecondaryModifierItemQueryOptions(this.view, selectedModifier));
                                queryPromise = WinJS.Promise.as(staticPromise).then(function itemsArrayAdded() {
                                    return secondaryModifierQuery.execute()
                                }.bind(this)).then(function queryFinished(q) {
                                    return MS.Entertainment.Data.List.listToArray(q.result.items)
                                }.bind(this), function queryFailed(error) {
                                    if (this._lastUsedSecondaryModifierDefinition === secondaryModifier)
                                        this._lastUsedSecondaryModifierDefinition = null;
                                    if (error.name === "Canceled")
                                        return WinJS.Promise.wrapError(error);
                                    else
                                        return []
                                }.bind(this)).then(function gotArray(array) {
                                    workingDataSource.spliceArray(workingDataSource.length, 0, array);
                                    return true
                                }.bind(this))
                            }
                            promise = staticPromise || queryPromise
                        }
                        this._workingSecondaryModifierSelectionManager.dataSource = workingDataSource
                    }
                    else if (this._workingSecondaryModifierSelectionManager.dataSource)
                        this._workingSecondaryModifierSelectionManager.dataSource = null;
                    return WinJS.Promise.as(promise)
                }, _viewLoadExit: function _viewLoadExit(results) {
                    this._pendingViewChange = null
                }, _viewLoadCompleted: function _viewLoadCompleted(results) {
                    this._viewLoadExit(results);
                    if (results.modifier && (!this._workingModifierSelectionManager.dataSource || !this._workingModifierSelectionManager.dataSource.length))
                        this.modifierSelectionManager = null;
                    if (results.secondaryModifier && (!this._workingSecondaryModifierSelectionManager.dataSource || !this._workingSecondaryModifierSelectionManager.dataSource.length))
                        this.secondaryModifierSelectionManager = null;
                    if (results.filter && (!this._workingFilterSelectionManager.dataSource || !this._workingFilterSelectionManager.dataSource.length))
                        this.filterSelectionManager = null;
                    if (results.pivots && (!this._workingPivotsSelectionManager.dataSource || !this._workingPivotsSelectionManager.dataSource.length))
                        this.pivotsSelectionManager = null;
                    return this._beginQuery()
                }, _viewLoadFailed: function _viewLoadFailed(results) {
                    this._viewLoadExit({
                        modifier: [], pivots: []
                    });
                    this._setItems(null);
                    this._setIsFailed(true);
                    return WinJS.Promise.wrapError(new Error("Pivots, modifiers or filters failed to load"))
                }, _updateSelectionHandlers: function _updateSelectionHandlers() {
                    if (this.isDelayInitialized && (this.completedQuery || this.items))
                        this.selectionHandlers = this.createSelectionHandlers()
                }, createActionCells: function createActionCells() {
                    return null
                }, createModifierActionCells: function createModifierActionCells(groupHeader, modifierTitleIds, showIfEmptyModifiers) {
                    var modifiers = [this.modifierSelectionManager, this.secondaryModifierSelectionManager];
                    var actionCells = [];
                    modifiers.forEach(function createModifierCell(modifier, i) {
                        if ((modifier.dataSource && modifier.dataSource.length > 1) || (showIfEmptyModifiers && showIfEmptyModifiers[i])) {
                            var newActionCell = new MS.Entertainment.ViewModels.ModifierActionCell(modifier, groupHeader, modifierTitleIds ? modifierTitleIds[i] : null, showIfEmptyModifiers ? showIfEmptyModifiers[i] : null);
                            actionCells.push(newActionCell)
                        }
                    });
                    return actionCells
                }, cloneCurrentQuery: function cloneCurrentQuery() {
                    return null
                }, refreshQuery: function refreshQuery() {
                    this._lastUsedView = null;
                    return this._beginQuery()
                }, _disposeQuery: function _disposeQuery() {
                    if (this._lastUsedQuery && this._lastUsedQuery.dispose) {
                        this._lastUsedQuery.dispose();
                        this._lastUsedQuery = null
                    }
                    if (this._queryWatcher) {
                        this._queryWatcher.clearQueries();
                        this._queryWatcher = null
                    }
                    this._unregisterForQueryEvents()
                }, _beginQuery: function _beginQuery() {
                    if (this._disposed)
                        return WinJS.Promise.wrap();
                    return WinJS.Promise.as(this._onDelayBeginQuery()).then(function _beginQueryWork() {
                            var pivot;
                            var modifier;
                            var secondaryModifier;
                            var filter;
                            var pivotItem = this._workingPivotsSelectionManager.selectedItem;
                            var modifierItem = this._workingModifierSelectionManager.selectedItem;
                            var secondaryModifierItem = this._workingSecondaryModifierSelectionManager.selectedItem;
                            var filterItem = this._workingFilterSelectionManager.selectedItem;
                            var view = this.getViewDefinition(this.view);
                            if (!view || !this._enabled)
                                return WinJS.Promise.wrap();
                            if (this._lastUsedView === view && this._lastUsedPivotItem === pivotItem && this._lastUsedModifierItem === modifierItem && this._lastUsedSecondaryModifierItem === secondaryModifierItem && this._lastUsedFilterItem === filterItem)
                                return WinJS.Promise.wrap();
                            if (this._lastUsedView === view && MS.Entertainment.ViewModels.Node.isEqual(this._lastUsedPivotItem, pivotItem) && MS.Entertainment.ViewModels.Node.isEqual(this._lastUsedModifierItem, modifierItem) && MS.Entertainment.ViewModels.Node.isEqual(this._lastUsedSecondaryModifierItem, secondaryModifierItem) && MS.Entertainment.ViewModels.Node.isEqual(this._lastUsedFilterItem, filterItem))
                                return WinJS.Promise.wrap();
                            pivot = this._workingPivotsSelectionManager.selectedItem;
                            modifier = this._workingModifierSelectionManager.selectedItem;
                            secondaryModifier = this._workingSecondaryModifierSelectionManager.selectedItem;
                            filter = this._workingFilterSelectionManager.selectedItem;
                            this._lastUsedView = view;
                            this._lastUsedPivotItem = pivotItem;
                            this._lastUsedModifierItem = modifierItem;
                            this._lastUsedSecondaryModifierItem = secondaryModifier;
                            this._lastUsedFilterItem = filterItem;
                            pivot = pivot || {value: {}};
                            modifier = modifier || {value: {}};
                            secondaryModifier = secondaryModifier || {value: {}};
                            filter = filter || {value: {}};
                            var options = this.getModelOptions(view, pivot, modifier, secondaryModifier, filter);
                            MS.Entertainment.Utilities.BindingAgnostic.setProperties(this, options);
                            return this._handleBeginQuery(view, pivot, modifier, secondaryModifier, filter)
                        }.bind(this))
                }, _handleBeginQuery: function _handleBeginQuery(view, pivot, modifier, secondaryModifier, filter) {
                    var options;
                    var sender;
                    var QueryType;
                    var returnPromise;
                    var queryPromise;
                    if (this._pendingQueryExecute) {
                        this._pendingQueryExecute.cancel();
                        this._pendingQueryExecute = null
                    }
                    this.completedQuery = null;
                    this.containingMedia = null;
                    this.selectionHandlers = null;
                    this._unregisterForQueryEvents();
                    if (!this.forceEmpty)
                        QueryType = this.getQueryType(view, modifier, pivot);
                    if ((this._lastUsedQueryType !== QueryType || this._recreateQueries) && QueryType) {
                        this._disposeQuery();
                        this._lastUsedQuery = new QueryType;
                        this._lastUsedQueryType = QueryType;
                        this._queryWatcher = new MS.Entertainment.Framework.QueryWatcher(this._queryWatcherString + this.view);
                        this._queryWatcher.registerQuery(this._lastUsedQuery);
                        if (this.taskKeyGetter && this.propertyKey && this.notifier) {
                            var notifications = new MS.Entertainment.UI.ContentNotification.NotificationModification(MS.Entertainment.UI.ContentNotification.listResult(), MS.Entertainment.UI.FileTransferService.keyFromProperty(this.propertyKey, false, true));
                            sender = notifications.createSender();
                            notifications.modifyQuery(this._lastUsedQuery)
                        }
                    }
                    else if (!QueryType) {
                        this._disposeQuery();
                        returnPromise = WinJS.Promise.wrap()
                    }
                    if (this._lastUsedQuery) {
                        options = this.getQueryOptions(view, pivot, modifier, secondaryModifier, filter);
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(this._lastUsedQuery, options);
                        this._onBeginQuery(this._lastUsedQuery);
                        this._setItems(null);
                        var queryFinishedOnExecute = false;
                        queryPromise = this._pendingQueryExecute = this._lastUsedQuery.execute();
                        returnPromise = queryPromise.then(function queryCompleted(q) {
                            if (queryPromise !== this._pendingQueryExecute)
                                return;
                            if (this.failOnEmpty && this._isEmptyListFromQuery(q))
                                this._handleQueryFailure();
                            else {
                                queryFinishedOnExecute = true;
                                this._pendingQueryExecute = null;
                                this.completedQuery = q;
                                if (this.completedQuery.autoUpdateProperties && this.completedQuery.autoUpdateProperties.enabled)
                                    this.completedQuery.autoUpdateProperties.enabled = false;
                                this.completedQuery.enabled = true;
                                if (sender) {
                                    var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                                    fileTransferService.registerListener(this._fileTransferListenerId, this.taskKeyGetter, sender, this.notifier)
                                }
                                var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                                eventProvider.traceNavigable_Loading_Done(this._loadingDoneString);
                                this._setItemsFromQuery(q);
                                this._registerForQueryEvents(q);
                                this._onQueryCompleted(q);
                                this._updateSelectionHandlers()
                            }
                        }.bind(this), function queryFailed(error) {
                            if (queryPromise !== this._pendingQueryExecute)
                                return;
                            this._onQueryFailed(error);
                            this._handleQueryFailure(error);
                            return WinJS.Promise.wrapError(error)
                        }.bind(this))
                    }
                    else if (this.forceEmpty)
                        this.makeEmpty();
                    else
                        this._setItems(null);
                    if (queryFinishedOnExecute)
                        this._pendingQueryExecute = null;
                    MS.Entertainment.Data.assert(!!returnPromise, "We should be returning a promises");
                    return WinJS.Promise.as(returnPromise)
                }, _handleQueryFailure: function _handleQueryFailure(error) {
                    this._pendingQueryExecute = null;
                    if (!error || !WinJS.Promise.isCanceledError(error)) {
                        if (!this._attemptAnotherQuery()) {
                            this._setIsFailed(true);
                            this._setItems(null)
                        }
                        if (error && error.details && error.details.query) {
                            error.details.query.enabled = true;
                            this._registerForQueryEvents(error.details.query)
                        }
                    }
                }, _isEmptyListFromQuery: function _isEmptyListFromQuery(query) {
                    return !query || !query.result || !query.result.items || query.result.items.count <= 0
                }, _setItemsFromQuery: function _setItemsFromQuery(queryOrEvent) {
                    var result;
                    var error;
                    if (queryOrEvent) {
                        result = queryOrEvent.detail ? queryOrEvent.detail.result : queryOrEvent.result;
                        error = queryOrEvent.detail ? queryOrEvent.detail.error : queryOrEvent.error
                    }
                    if (error) {
                        this._onQueryFailed(error);
                        this._setIsFailed(true);
                        this._setItems(null)
                    }
                    else if (result) {
                        if (!result.items)
                            result.items = new MS.Entertainment.Data.VirtualList(null, []);
                        this._setIsFailed(false);
                        this._setItems(result.items)
                    }
                }, _registerForQueryEvents: function _registerForQueryEvents(query) {
                    this._unregisterForQueryEvents();
                    if (query && this.handleQueryChanges)
                        this._queryEventHandlers = MS.Entertainment.Utilities.addEventHandlers(query, {resultChanged: this._setItemsFromQuery.bind(this)})
                }, _unregisterForQueryEvents: function _unregisterForQueryEvents() {
                    if (this._queryEventHandlers) {
                        this._queryEventHandlers.cancel();
                        this._queryEventHandlers = null
                    }
                }, _setIsFailed: function _setIsFailed(value) {
                    if (this.isFailed !== value) {
                        var oldValue = this.isFailed;
                        this.isFailed = value
                    }
                }, _setItems: function _setItems(items) {
                    if (this.items !== items) {
                        var actionCells;
                        if (items) {
                            actionCells = this.createActionCells(items.count);
                            if (actionCells && !Array.isArray(actionCells))
                                actionCells = [actionCells];
                            if (actionCells && actionCells.length > 0 && this.addActionCellsToList) {
                                actionCells = actionCells.map(function(currentAction) {
                                    return new MS.Entertainment.Data.Factory.ListActionItemWrapper(currentAction)
                                });
                                if (this.addActionCellsAtEnd)
                                    items.insertRangeAtEnd(actionCells);
                                else
                                    items.insertRangeAt(0, actionCells)
                            }
                            else
                                this.modelActions = actionCells
                        }
                        this._onItemsChanging(items, this.items);
                        var oldItems = this.items;
                        this.items = items;
                        this._onItemsChanged(this.items, oldItems);
                        this.containingMedia = this.items ? this.createContainingMedia() : null
                    }
                }, _onItemsChanging: function _onItemsChanging(newValue, oldValue){}, _onItemsChanged: function _onItemsChanged(newValue, oldValue){}, _setLargeItemIndex: function _setLargeItemIndex(value) {
                    if (this.largeItemIndex !== value) {
                        var oldValue = this.largeItemIndex;
                        this.largeItemIndex = value
                    }
                }, _onDelayBeginQuery: function _onDelayBeginQuery() {
                    return WinJS.Promise.as()
                }, _onBeginQuery: function _onBeginQuery(query){}, _onQueryFailed: function _onQueryFailed(error){}, _onQueryCompleted: function _onQueryCompleted(query){}, _attemptAnotherQuery: function _attemptAnotherQuery() {
                    var changedModifier = false;
                    var oldDataSource;
                    if (this.autoHideInvalidModifiers && !this._disposed && this._workingModifierSelectionManager) {
                        if (this._workingModifierSelectionManager.dataSource && this._workingModifierSelectionManager.selectedIndex >= 0) {
                            changedModifier = true;
                            this._modifiersTrimmed = true;
                            this._workingModifierSelectionManager.dataSource.removeAt(this._workingModifierSelectionManager.selectedIndex)
                        }
                        if (this._workingModifierSelectionManager.dataSource && this._workingModifierSelectionManager.dataSource.getArray)
                            oldDataSource = WinJS.Binding.unwrap(this._workingModifierSelectionManager.dataSource.getArray());
                        else
                            oldDataSource = [];
                        this._workingModifierSelectionManager.dataSource = new MS.Entertainment.ObservableArray(oldDataSource)
                    }
                    return changedModifier
                }
        }, {events: {
                modifierClick: "modifierClick", secondaryModifierClick: "secondaryModifierClick", shouldClearSelection: "shouldClearSelection", delayLoaded: "delayLoaded"
            }})})
})()
})();
/* >>>>>>/viewmodels/video_win/videomarketplaceviewmodelbase.js:14825 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            var VideoMarketplaceViewModelBase = (function(_super) {
                    __extends(VideoMarketplaceViewModelBase, _super);
                    function VideoMarketplaceViewModelBase(view, pivotIndex) {
                        this._viewStateViewModel = null;
                        this._defaultPivotIndex = pivotIndex !== undefined ? pivotIndex : -1;
                        this.templateSelectorConstructor = Entertainment.UI.Controls.GalleryTemplateSelector;
                        _super.call(this, view)
                    }
                    Object.defineProperty(VideoMarketplaceViewModelBase.prototype, "templateSelectorConstructor", {
                        get: function() {
                            return this._templateSelectorConstructor
                        }, set: function(value) {
                                this.updateAndNotify("templateSelectorConstructor", value)
                            }, enumerable: true, configurable: true
                    });
                    VideoMarketplaceViewModelBase.prototype.loadModules = function(){};
                    VideoMarketplaceViewModelBase.prototype.freeze = function(){};
                    VideoMarketplaceViewModelBase.prototype.thaw = function() {
                        this.refreshItems()
                    };
                    Object.defineProperty(VideoMarketplaceViewModelBase.prototype, "viewStateViewModel", {
                        get: function() {
                            if (!this._viewStateViewModel) {
                                var viewStateItems = new Array;
                                viewStateItems[-1] = new ViewModels.ViewStateItem(String.load(String.id.IDS_VIDEO_ERROR_HEADER), String.load(String.id.IDS_VIDEO_ERROR_DETAILS), []);
                                this._viewStateViewModel = new ViewModels.ViewStateViewModel(viewStateItems)
                            }
                            return this._viewStateViewModel
                        }, enumerable: true, configurable: true
                    });
                    VideoMarketplaceViewModelBase.prototype._onBeginQuery = function(query) {
                        _super.prototype._onBeginQuery.call(this, query);
                        this.viewStateViewModel.viewState = 1
                    };
                    VideoMarketplaceViewModelBase.prototype._onQueryCompleted = function(query) {
                        _super.prototype._onQueryCompleted.call(this, query);
                        this.viewStateViewModel.viewState = WinJS.Utilities.getMember("result.items.count", query) === 0 ? 0 : 2
                    };
                    VideoMarketplaceViewModelBase.prototype._onQueryFailed = function(error) {
                        _super.prototype._onQueryFailed.call(this, error);
                        if (!WinJS.Promise.isCanceledError(error))
                            this.viewStateViewModel.viewState = Entertainment.UI.NetworkStatusService.isOnline() ? -1 : -2
                    };
                    VideoMarketplaceViewModelBase.prototype.refreshItems = function() {
                        if (this.items)
                            this.items.forEach(function(virtualListItem) {
                                if (virtualListItem.item && virtualListItem.item.data && !virtualListItem.item.data.inCollection)
                                    ViewModels.MediaItemModel.hydrateLibraryInfoAsync(virtualListItem.item.data)
                            })
                    };
                    return VideoMarketplaceViewModelBase
                })(ViewModels.QueryViewModel);
            ViewModels.VideoMarketplaceViewModelBase = VideoMarketplaceViewModelBase;
            (function(VideoMarketplaceLXTemplates) {
                var Movies = (function() {
                        function Movies() {
                            this.debugId = "marketplaceMovie";
                            this.itemTemplate = "/Components/Video_Win/VideoMarketplacePageTemplate.html#movieVerticalTile";
                            this.layout = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Layout.grid;
                            this.zoomedOutLayout = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.orientation = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.swipeBehavior = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.swipeBehavior.none;
                            this.invokeBehavior = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action;
                            this.itemsDraggable = false;
                            this.selectionMode = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.SelectionMode.none;
                            this.tap = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.actionOptions = {id: Entertainment.UI.Actions.ActionIdentifiers.navigateToVideoDetails};
                            this.selectionStyleFilled = true;
                            this.maxSelectionCount = 100;
                            this.allowEmpty = true;
                            this.grouped = false;
                            this.allowZoom = false;
                            this.allowSelectAll = false;
                            this.forceInteractive = true;
                            this.minimumListLength = 1;
                            this.raisePanelResetEvents = true;
                            this.delayHydrateLibraryId = true
                        }
                        return Movies
                    })();
                VideoMarketplaceLXTemplates.Movies = Movies;
                var TvSeries = (function() {
                        function TvSeries() {
                            this.debugId = "marketplaceTvSeries";
                            this.itemTemplate = "/Components/Video_Win/VideoMarketplacePageTemplate.html#tvVerticalTile";
                            this.layout = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Layout.grid;
                            this.zoomedOutLayout = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.orientation = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.swipeBehavior = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.swipeBehavior.none;
                            this.invokeBehavior = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action;
                            this.itemsDraggable = false;
                            this.selectionMode = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.SelectionMode.none;
                            this.tap = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.actionOptions = {id: Entertainment.UI.Actions.ActionIdentifiers.navigateToVideoDetails};
                            this.selectionStyleFilled = true;
                            this.maxSelectionCount = 100;
                            this.allowEmpty = true;
                            this.grouped = false;
                            this.allowZoom = false;
                            this.allowSelectAll = false;
                            this.forceInteractive = true;
                            this.minimumListLength = 1;
                            this.raisePanelResetEvents = true;
                            this.delayHydrateLibraryId = true
                        }
                        return TvSeries
                    })();
                VideoMarketplaceLXTemplates.TvSeries = TvSeries;
                var FeaturedSet = (function() {
                        function FeaturedSet() {
                            this.debugId = "marketplaceFeatureSet";
                            this.itemTemplate = "/Components/Video_Win/VideoMarketplacePageTemplate.html#featuredSetTile";
                            this.layout = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Layout.grid;
                            this.zoomedOutLayout = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.orientation = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.swipeBehavior = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.swipeBehavior.none;
                            this.invokeBehavior = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action;
                            this.itemsDraggable = false;
                            this.selectionMode = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.SelectionMode.none;
                            this.tap = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.actionOptions = {id: Entertainment.UI.Actions.ActionIdentifiers.navigateToVideoDetails};
                            this.selectionStyleFilled = true;
                            this.maxSelectionCount = 100;
                            this.allowEmpty = true;
                            this.grouped = false;
                            this.allowZoom = false;
                            this.allowSelectAll = false;
                            this.forceInteractive = true;
                            this.minimumListLength = 1;
                            this.raisePanelResetEvents = true;
                            this.delayHydrateLibraryId = true
                        }
                        return FeaturedSet
                    })();
                VideoMarketplaceLXTemplates.FeaturedSet = FeaturedSet;
                var TopMovies = (function(_super) {
                        __extends(TopMovies, _super);
                        function TopMovies() {
                            _super.apply(this, arguments);
                            this.itemTemplate = "select(.template-marketplaceTopMovieTemplate)"
                        }
                        return TopMovies
                    })(Movies);
                VideoMarketplaceLXTemplates.TopMovies = TopMovies;
                var TopRatedMovies = (function(_super) {
                        __extends(TopRatedMovies, _super);
                        function TopRatedMovies() {
                            _super.apply(this, arguments);
                            this.itemTemplate = "select(.template-marketplaceTopRatedMovieTemplate)"
                        }
                        return TopRatedMovies
                    })(Movies);
                VideoMarketplaceLXTemplates.TopRatedMovies = TopRatedMovies;
                var TopRatedTvSeries = (function(_super) {
                        __extends(TopRatedTvSeries, _super);
                        function TopRatedTvSeries() {
                            _super.apply(this, arguments);
                            this.itemTemplate = "select(.template-marketplaceTopRatedTvSeriesTemplate)"
                        }
                        return TopRatedTvSeries
                    })(TvSeries);
                VideoMarketplaceLXTemplates.TopRatedTvSeries = TopRatedTvSeries;
                var TopTvSeries = (function(_super) {
                        __extends(TopTvSeries, _super);
                        function TopTvSeries() {
                            _super.apply(this, arguments);
                            this.itemTemplate = "select(.template-marketplaceTopTvSeriesTemplate)"
                        }
                        return TopTvSeries
                    })(TvSeries);
                VideoMarketplaceLXTemplates.TopTvSeries = TopTvSeries
            })(ViewModels.VideoMarketplaceLXTemplates || (ViewModels.VideoMarketplaceLXTemplates = {}));
            var VideoMarketplaceLXTemplates = ViewModels.VideoMarketplaceLXTemplates;
            var VideoLXMarketplaceAutomationIds = (function() {
                    function VideoLXMarketplaceAutomationIds(){}
                    VideoLXMarketplaceAutomationIds.topSellingMovies = "topSellingMovies_pivot";
                    VideoLXMarketplaceAutomationIds.topRatedMovies = "topRatedMovies_pivot";
                    VideoLXMarketplaceAutomationIds.topRentedMovies = "topRentedMovies_pivot";
                    VideoLXMarketplaceAutomationIds.allStudios = "allStudios_modifier";
                    VideoLXMarketplaceAutomationIds.allGenres = "allGenres_modifier";
                    VideoLXMarketplaceAutomationIds.allNetworks = "allNetworks_modifier";
                    VideoLXMarketplaceAutomationIds.topSellingTv = "topSellingTv_pivot";
                    VideoLXMarketplaceAutomationIds.topRatedTv = "topRatedTv_pivot";
                    VideoLXMarketplaceAutomationIds.defaultNetwork = "defaultNetwork_modifier";
                    return VideoLXMarketplaceAutomationIds
                })();
            ViewModels.VideoLXMarketplaceAutomationIds = VideoLXMarketplaceAutomationIds
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/video_win/videoflexhubviewmodel.js:15035 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(ViewModels) {
            var FlexHubItems = (function(_super) {
                    __extends(FlexHubItems, _super);
                    function FlexHubItems() {
                        _super.apply(this, arguments);
                        this.templateSelectorConstructor = VideoFlexHubTemplateSelector
                    }
                    return FlexHubItems
                })(ViewModels.VideoMarketplaceLXTemplates.Movies);
            ViewModels.FlexHubItems = FlexHubItems;
            var Augmenter = MS.Entertainment.Data.Augmenter;
            var FlexHubViewModel = (function(_super) {
                    __extends(FlexHubViewModel, _super);
                    function FlexHubViewModel(flexHubUrl) {
                        _super.call(this, FlexHubViewModel.ViewTypes.flexhub);
                        this.templateSelectorConstructor = MS.Entertainment.ViewModels.VideoFlexHubTemplateSelector;
                        this._flexHubUrl = flexHubUrl;
                        this.refresh()
                    }
                    Object.defineProperty(FlexHubViewModel.prototype, "heroImageUrl", {
                        get: function() {
                            return this._heroImageUrl
                        }, set: function(value) {
                                this.updateAndNotify("heroImageUrl", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(FlexHubViewModel.prototype, "description", {
                        get: function() {
                            return this._description
                        }, set: function(value) {
                                this.updateAndNotify("description", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(FlexHubViewModel.prototype, "galleryTypeClassName", {
                        get: function() {
                            return this._galleryTypeClassName
                        }, set: function(value) {
                                this.updateAndNotify("galleryTypeClassName", value)
                            }, enumerable: true, configurable: true
                    });
                    FlexHubViewModel.prototype.getViewDefinition = function(view) {
                        return FlexHubViewModel.Views[view]
                    };
                    FlexHubViewModel.prototype.getModifierOptions = function(view) {
                        var definition = this.getViewDefinition(view);
                        return definition && definition.modelOptions
                    };
                    FlexHubViewModel.prototype._onBeginQuery = function(query) {
                        var flexHubQuery = query;
                        flexHubQuery.target = this._flexHubUrl;
                        _super.prototype._onBeginQuery.call(this, query);
                        this.viewStateViewModel.viewState = 1
                    };
                    FlexHubViewModel.prototype._onQueryCompleted = function(query) {
                        this.title = query.result.name;
                        this.description = query.result.description;
                        this.heroImageUrl = query.result.heroImageUrl;
                        var firstItem = query.result.items && query.result.items[0];
                        var firstItemType = WinJS.Utilities.getMember("actionType.mediaType", firstItem);
                        if (firstItemType === Augmenter.Marketplace.EditorialType.FlexHub)
                            this.galleryTypeClassName = "flexhub_featuredsets";
                        _super.prototype._onQueryCompleted.call(this, query)
                    };
                    FlexHubViewModel.ViewTypes = {flexhub: "flexhub"};
                    FlexHubViewModel.Views = {flexhub: ViewModels.NodeValues.create({
                            query: function() {
                                return new Entertainment.Data.Query.MediaDiscoveryVideoFlexHub
                            }, queryOptions: {autoUpdateOnSignIn: true}, modelOptions: {
                                    selectedTemplate: new FlexHubItems, propertyKey: "serviceId", taskKeyGetter: Entertainment.UI.FileTransferService && Entertainment.UI.FileTransferService.keyFromProperty("serviceId", false, true), notifier: Entertainment.UI.FileTransferNotifiers && Entertainment.UI.FileTransferNotifiers.genericFile
                                }
                        })};
                    return FlexHubViewModel
                })(ViewModels.VideoMarketplaceViewModelBase);
            ViewModels.FlexHubViewModel = FlexHubViewModel;
            var VideoFlexHubTemplateSelector = (function(_super) {
                    __extends(VideoFlexHubTemplateSelector, _super);
                    function VideoFlexHubTemplateSelector(galleryView) {
                        _super.call(this);
                        this.addTemplate("marketplaceMovie", "/Components/Video_Win/VideoMarketplacePageTemplate.html#movieVerticalTile");
                        this.addTemplate("marketplaceTVSeries", "/Components/Video_Win/VideoMarketplacePageTemplate.html#tvVerticalTile");
                        this.addTemplate("marketplaceFeaturedSet", "/Components/Video_Win/VideoMarketplacePageTemplate.html#featuredSetTile")
                    }
                    VideoFlexHubTemplateSelector.prototype.onSelectTemplate = function(item) {
                        var template = null;
                        if (item && item.data) {
                            var itemType = WinJS.Utilities.getMember("data.actionType.mediaType", item);
                            switch (itemType) {
                                case Augmenter.Marketplace.EditorialType.Episode:
                                case Augmenter.Marketplace.EditorialType.Season:
                                case Augmenter.Marketplace.EditorialType.Series:
                                    template = "marketplaceTVSeries";
                                    break;
                                case Augmenter.Marketplace.EditorialType.Movie:
                                case Augmenter.Marketplace.EditorialType.MovieTrailer:
                                default:
                                    template = "marketplaceMovie";
                                    break;
                                case Augmenter.Marketplace.EditorialType.FlexHub:
                                    template = "marketplaceFeaturedSet";
                                    break
                            }
                        }
                        this.ensureTemplatesLoaded([template]);
                        return _super.prototype.getTemplateProvider.call(this, template)
                    };
                    return VideoFlexHubTemplateSelector
                })(MS.Entertainment.UI.Controls.GalleryTemplateSelector);
            ViewModels.VideoFlexHubTemplateSelector = VideoFlexHubTemplateSelector
        })(Entertainment.ViewModels || (Entertainment.ViewModels = {}));
        var ViewModels = Entertainment.ViewModels
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/data/listgrouper.js:15165 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data");

(function(MS) {
    (function(Entertainment) {
        (function(Data) {
            var GroupDataSourceProvider = (function(_super) {
                    __extends(GroupDataSourceProvider, _super);
                    function GroupDataSourceProvider(grouper, dataSource) {
                        _super.call(this, grouper, dataSource);
                        this._groupsList = null;
                        this._locked = false;
                        this._lowestInvalidItemIndex = -1;
                        this._onReset();
                        this._groupHintsDispatchCount = -1
                    }
                    GroupDataSourceProvider.prototype.dispose = function() {
                        _super.prototype.dispose.call(this);
                        if (this._groupsList) {
                            this._groupsList.signalHintsFailed(new Error("Data source provide disposed"));
                            this._groupsList.dispose()
                        }
                        if (this._listEventHandlers) {
                            this._listEventHandlers.cancel();
                            this._listEventHandlers = null
                        }
                    };
                    Object.defineProperty(GroupDataSourceProvider.prototype, "groups", {
                        get: function() {
                            return this._groupsList
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(GroupDataSourceProvider.prototype, "isInlineGrouper", {
                        get: function() {
                            return false
                        }, enumerable: true, configurable: true
                    });
                    GroupDataSourceProvider.prototype._insert = function(index, item, existingItems, updating) {
                        if (!item || (updating && item.group))
                            return index;
                        var newGroup = this._calculateAndApplyGroup(item);
                        var itemAfterIndex = updating ? index + 1 : index;
                        var itemBefore = existingItems(index - 1);
                        var itemBeforeUnknown = this._isUnknown(itemBefore);
                        var itemAfter = existingItems(itemAfterIndex);
                        if (!this.isValidGroup(newGroup)) {
                            if (!updating)
                                this._insertItem(index, item, itemBefore, itemAfter);
                            return index
                        }
                        var oldItem = null;
                        var oldGroup = null;
                        if (updating) {
                            oldItem = existingItems(index);
                            oldGroup = oldItem && oldItem.group
                        }
                        var itemBeforeNotMatch = this._isNotMatch(itemBefore, newGroup);
                        var itemAfterNotMatch = this._isNotMatch(itemAfter, newGroup);
                        var isKnownGroup = this._isKnownGroup(newGroup);
                        var areGroupsNotEqual = !this._areGroupsEqual(oldGroup, newGroup);
                        if (!updating) {
                            this._shiftHeaderRanges(index, true);
                            this._insertItem(index, item, itemBefore, itemAfter)
                        }
                        else if (oldGroup)
                            this._updateItem(index, item, itemBefore, itemAfter, oldGroup);
                        if (oldGroup && areGroupsNotEqual)
                            if (this._isNotMatch(itemBefore, oldGroup)) {
                                var oldGroupIndex = this.firstGroupItemIndexFromKey(oldGroup.key);
                                if (oldGroupIndex >= 0)
                                    this._removeHeader(oldGroupIndex, oldGroup);
                                if (this._isMatch(itemAfter, oldGroup))
                                    this._insertHeader(itemAfterIndex, oldGroup, itemBefore, itemAfter)
                            }
                            else if (isKnownGroup && itemBeforeNotMatch && newGroup && this._isMatch(itemAfter, newGroup)) {
                                var newGroupIndex = this.firstGroupItemIndexFromKey(newGroup.key);
                                if (newGroupIndex >= 0) {
                                    this._removeHeader(newGroupIndex, newGroup);
                                    isKnownGroup = false
                                }
                            }
                        if (updating && isKnownGroup)
                            this._updateHeaderIfNeeded(newGroup);
                        if (!updating && isKnownGroup) {
                            var firstGroupItemIndex = this.firstGroupItemIndexFromKey(newGroup.key);
                            if (firstGroupItemIndex > index) {
                                this._removeHeader(firstGroupItemIndex, newGroup);
                                isKnownGroup = false
                            }
                        }
                        if ((itemBeforeUnknown || itemBeforeNotMatch) && !isKnownGroup)
                            this._insertHeader(index, newGroup, itemBefore, itemAfter);
                        if (!updating)
                            this._invalidateItem(index);
                        this._dispatchChangesIfNoDataSource();
                        return index
                    };
                    GroupDataSourceProvider.prototype._remove = function(index, item, existingItems) {
                        var group = item && item.group;
                        var emptyGroup = false;
                        var itemBefore = existingItems(index - 1);
                        var itemAfter = existingItems(index + 1);
                        var missingInformation = this._isUnknown(item) || this._isUnknown(itemBefore) || this._isUnknown(itemAfter);
                        var groupIndex = this.groupIndexFromSourceIndex(index);
                        var groupFromGroupIndex = null;
                        if (groupIndex >= 0)
                            groupFromGroupIndex = this._groupFromGroupIndex(groupIndex);
                        if (missingInformation) {
                            var groupSize = this.groupSizeFromGroupIndex(groupIndex);
                            if (groupSize <= 1 && groupFromGroupIndex) {
                                group = groupFromGroupIndex;
                                emptyGroup = true
                            }
                        }
                        else if (this._isKnownGroup(group)) {
                            var itemBeforeNotMatch = this._isNotMatch(itemBefore, item.group);
                            var itemAfterNotMatch = this._isNotMatch(itemAfter, item.group);
                            if ((!groupFromGroupIndex || this._areGroupsEqual(groupFromGroupIndex, item.group)) && itemBeforeNotMatch && itemAfterNotMatch)
                                emptyGroup = true
                        }
                        if (emptyGroup)
                            this._removeHeader(index, group);
                        this._shiftHeaderRanges(index + 1, false);
                        this._removeItem(index);
                        this._invalidateItem(index);
                        this._dispatchChangesIfNoDataSource();
                        return index
                    };
                    GroupDataSourceProvider.prototype._dataSourceBeginNotifications = function() {
                        this._locked = true
                    };
                    GroupDataSourceProvider.prototype._dataSourceEndNotifications = function() {
                        this._locked = false;
                        this._commit()
                    };
                    GroupDataSourceProvider.prototype._commit = function() {
                        if (!this._locked) {
                            var startGroupIndex = -1;
                            if (this._lowestInvalidItemIndex >= 0)
                                startGroupIndex = this.groupIndexFromSourceIndex(this._lowestInvalidItemIndex);
                            if (startGroupIndex === 0)
                                this._reloadGroupList();
                            else if (startGroupIndex > 0)
                                for (var i = startGroupIndex; i >= 0; i++) {
                                    var group = this._groupFromGroupIndex(i);
                                    if (!group || !group.key)
                                        break;
                                    this._updateHeader(this.firstGroupItemIndexFromKey(group.key), group)
                                }
                            this._lowestInvalidItemIndex = -1;
                            this._dispatchChanges()
                        }
                    };
                    GroupDataSourceProvider.prototype._dispatchChangesIfNoDataSource = function() {
                        if (!this.dataSource)
                            this._dispatchChanges()
                    };
                    GroupDataSourceProvider.prototype._insertGroupHeaderFromGroupHint = function(groupHint, group) {
                        var index = this._sourceIndexToIndex(groupHint.data.firstItemIndexSourceHint);
                        this._insertHeaderIfNeeded(index, group, null, null)
                    };
                    GroupDataSourceProvider.prototype._onReset = function() {
                        var _this = this;
                        if (this._groupsList)
                            this._groupsList.clear();
                        else
                            this._groupsList = new GroupVirtualList;
                        this.dataSourceReady.then(function() {
                            if (_this.dataSource) {
                                var commit = _this._commit.bind(_this);
                                _this._listEventHandlers = MS.Entertainment.Utilities.addEventHandlers(_this.dataSource, {
                                    beginNotifications: _this._dataSourceBeginNotifications.bind(_this), endNotifications: _this._dataSourceEndNotifications.bind(_this), itemChanged: commit, itemInserted: commit, itemMoved: commit, itemRemoved: commit
                                });
                                return _this.dataSource.getGroupHints()
                            }
                        }).done(function() {
                            _this._groupsList.signalHintsLoaded()
                        }, function(error) {
                            _this._groupsList.signalHintsFailed(error)
                        })
                    };
                    GroupDataSourceProvider.prototype._reloadGroupList = function() {
                        this._pushPendingChange({change: "Reload"})
                    };
                    GroupDataSourceProvider.prototype._invalidateGroupList = function() {
                        this._pushPendingChange({change: "Invalidate"})
                    };
                    GroupDataSourceProvider.prototype._invalidateItem = function(itemIndex) {
                        if (this._lowestInvalidItemIndex < 0 || itemIndex < this._lowestInvalidItemIndex)
                            this._lowestInvalidItemIndex = itemIndex
                    };
                    GroupDataSourceProvider.prototype._onDispatchingChanges = function(changes) {
                        var _this = this;
                        this._groupsList.applyBatchChanges(changes.map(function(item) {
                            var adjusted = Object.create(item);
                            if (adjusted.value)
                                _this._addFirstItemIndexHint(adjusted.value);
                            adjusted.absoluteIndex = item.groupIndex;
                            return adjusted
                        }, this))
                    };
                    GroupDataSourceProvider.prototype._addFirstItemIndexHint = function(listItem) {
                        var _this = this;
                        if (!this.dataSource || !listItem)
                            return;
                        var groupKey = listItem.group && listItem.group.key;
                        MS.Entertainment.Data.Factory.ListItemWrapper.addFirstItemIndexHint(listItem, function() {
                            return _this.firstGroupItemIndexFromKey(groupKey)
                        });
                        MS.Entertainment.Data.Factory.ListItemWrapper.addFirstItemKey(listItem, function getFirstItemKey() {
                            var key = null;
                            if (this.dataSource)
                                this.dataSource.keyFromIndex(this.firstGroupItemIndexFromKey(groupKey));
                            return key
                        }.bind(this));
                        listItem = null
                    };
                    return GroupDataSourceProvider
                })(Data.ListGrouperBase);
            Data.GroupDataSourceProvider = GroupDataSourceProvider;
            var GroupVirtualList = (function(_super) {
                    __extends(GroupVirtualList, _super);
                    function GroupVirtualList() {
                        _super.call(this);
                        this._hintsLoadedSignal = new MS.Entertainment.UI.Framework.Signal;
                        this.preventNotifications = true
                    }
                    GroupVirtualList.prototype.clear = function() {
                        _super.prototype.clear.call(this);
                        if (!this._hintsLoadedSignal)
                            this._hintsLoadedSignal = new MS.Entertainment.UI.Framework.Signal;
                        this.preventNotifications = true
                    };
                    GroupVirtualList.prototype.signalHintsLoaded = function() {
                        if (this._hintsLoadedSignal) {
                            this.preventNotifications = false;
                            this._hintsLoadedSignal.complete();
                            this._hintsLoadedSignal = null
                        }
                    };
                    GroupVirtualList.prototype.signalHintsFailed = function(error) {
                        if (this._hintsLoadedSignal) {
                            this.preventNotifications = false;
                            this._hintsLoadedSignal.error(error);
                            this._hintsLoadedSignal = null
                        }
                    };
                    GroupVirtualList.prototype._onGetCount = function() {
                        return WinJS.Promise.as(this._hintsLoadedSignal && this._hintsLoadedSignal.promise)
                    };
                    GroupVirtualList.prototype._onItemsFromIndex = function(index, countBefore, countAfter) {
                        return WinJS.Promise.as(this._hintsLoadedSignal && this._hintsLoadedSignal.promise)
                    };
                    return GroupVirtualList
                })(Data.VirtualList);
            Data.GroupVirtualList = GroupVirtualList
        })(Entertainment.Data || (Entertainment.Data = {}));
        var Data = Entertainment.Data
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/filetransferservice.js:15439 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI");
    WinJS.Namespace.define("MS.Entertainment.UI", {
        FileTransferServiceErrors: {
            _errorsLoaded: false, _createErrors: function _createErrors() {
                    MS.Entertainment.UI.FileTransferServiceErrors.ZEST_E_CONTENT_RIGHTS_NOT_AVAILABLE = {
                        name: "ZEST_E_CONTENT_RIGHTS_NOT_AVAILABLE", code: 0xC101A3FF, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_NO_RIGHTS_SHORT)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors.E_ASSET_LICENSE_COUNT_EXCEEDED = {
                        name: "E_ASSET_LICENSE_COUNT_EXCEEDED", code: 0xC101A7D3, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_NO_RIGHTS_SHORT)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors.COMMERCE_XDLC_E_MAX_LICENSE_COUNT_REACHED = {
                        name: "COMMERCE_XDLC_E_MAX_LICENSE_COUNT_REACHED", code: 0xC33307D8, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_NO_RIGHTS_SHORT)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors.NS_E_DOWNLOAD_DISK_FULL_ERROR = {
                        name: "NS_E_DOWNLOAD_DISK_FULL_ERROR", code: 0xC00D1366, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_SHORT), longString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_LONG)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors.ZUNE_E_DOWNLOAD_SYSTEM_DISK_FULL = {
                        name: "ZUNE_E_DOWNLOAD_SYSTEM_DISK_FULL", code: 0xC1010038, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_SHORT), longString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_LONG)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors.ZUNE_E_DOWNLOAD_LIBRARY_DISK_FULL = {
                        name: "ZUNE_E_DOWNLOAD_LIBRARY_DISK_FULL", code: 0xC1010039, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_SHORT), longString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_LONG)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors._errorsLoaded = true
                }, _initializeErrorInformation: function initializeErrorInformation() {
                    if (MS.Entertainment.UI.FileTransferServiceErrors._errorsLoaded)
                        return;
                    MS.Entertainment.UI.FileTransferServiceErrors._createErrors()
                }, ZEST_E_CONTENT_RIGHTS_NOT_AVAILABLE: null, E_ASSET_LICENSE_COUNT_EXCEEDED: null, COMMERCE_XDLC_E_MAX_LICENSE_COUNT_REACHED: null, NS_E_DOWNLOAD_DISK_FULL_ERROR: null, getError: function getError(task) {
                    MS.Entertainment.UI.FileTransferServiceErrors._initializeErrorInformation();
                    var errorCode = task.responseCode;
                    var error = {};
                    if (errorCode === MS.Entertainment.UI.FileTransferServiceErrors.ZEST_E_CONTENT_RIGHTS_NOT_AVAILABLE.code)
                        error = MS.Entertainment.UI.FileTransferServiceErrors.ZEST_E_CONTENT_RIGHTS_NOT_AVAILABLE;
                    else if (errorCode === MS.Entertainment.UI.FileTransferServiceErrors.E_ASSET_LICENSE_COUNT_EXCEEDED.code)
                        error = MS.Entertainment.UI.FileTransferServiceErrors.E_ASSET_LICENSE_COUNT_EXCEEDED;
                    else if (errorCode === MS.Entertainment.UI.FileTransferServiceErrors.COMMERCE_XDLC_E_MAX_LICENSE_COUNT_REACHED.code)
                        error = MS.Entertainment.UI.FileTransferServiceErrors.COMMERCE_XDLC_E_MAX_LICENSE_COUNT_REACHED;
                    else if (errorCode === MS.Entertainment.UI.FileTransferServiceErrors.NS_E_DOWNLOAD_DISK_FULL_ERROR.code || errorCode === MS.Entertainment.UI.FileTransferServiceErrors.ZUNE_E_DOWNLOAD_SYSTEM_DISK_FULL.code || errorCode === MS.Entertainment.UI.FileTransferServiceErrors.ZUNE_E_DOWNLOAD_LIBRARY_DISK_FULL.code) {
                        var totalBytes = task.totalBytesToReceive;
                        var error = null;
                        if (totalBytes) {
                            var one_mb = 1024 * 1024;
                            var one_gb = 1024 * one_mb;
                            var totalValue = 0;
                            if (totalBytes >= one_gb) {
                                var spaceNeededGB = Math.ceil(totalBytes / one_gb);
                                error = {
                                    name: "", code: task.responseCode, shortString: String.load(String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_GB_SHORT).format(spaceNeededGB), longString: String.load(String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_GB_LONG).format(spaceNeededGB)
                                }
                            }
                            else {
                                var spaceNeededMB = Math.ceil(totalBytes / one_mb);
                                error = {
                                    name: "", code: task.responseCode, shortString: String.load(String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_MB_SHORT).format(spaceNeededMB), longString: String.load(String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_MB_LONG).format(spaceNeededMB)
                                }
                            }
                        }
                        else
                            error = MS.Entertainment.UI.FileTransferServiceErrors.NS_E_DOWNLOAD_DISK_FULL_ERROR;
                        return error
                    }
                    var toHexString = function toHexString(value) {
                            if (value < 0)
                                value += 0xFFFFFFFF + 1;
                            return "0x" + value.toString(16)
                        };
                    var errorMapper = new Microsoft.Entertainment.Util.ErrorMapper;
                    var mappedError = errorMapper.getMappedError(task.responseCode);
                    var errorHexCode = toHexString(errorCode);
                    if (!error.code)
                        error.code = task.responseCode;
                    if (!error.shortString)
                        error.shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_ERROR_SHORT).format(errorHexCode);
                    if (!error.longString)
                        error.longString = mappedError.description + " (" + errorHexCode + ") ";
                    return error
                }, errorCodes: {E_INSTANCEID_LICENSERIGHT_COMBINATION_INVALID: 0xc101a053}
        }, FileTransferService: MS.Entertainment.UI.Framework.define(function FileTransferServiceConstructor() {
                this._listeners = [];
                this._onDownloadChanged = this._onDownloadChanged.bind(this);
                this.startListening()
            }, {
                _listening: false, _listeners: null, startListening: function startListening() {
                        if (!this._listening && Microsoft.Entertainment.FileTransferManager) {
                            Microsoft.Entertainment.FileTransferManager.addEventListener("downloadschanged", this._onDownloadChanged);
                            Microsoft.Entertainment.FileTransferManager.initializeEvents();
                            this._listening = true
                        }
                    }, stopListening: function stopListening() {
                        if (this._listening && Microsoft.Entertainment.FileTransferManager) {
                            Microsoft.Entertainment.FileTransferManager.removeEventListener("downloadschanged", this._onDownloadChanged);
                            this._listening = false
                        }
                    }, registerListener: function registerListener(listenerId, taskKeyGetter, notificationSender, notifier, notifierThisObj, taskFilter) {
                        this.unregisterListener(listenerId);
                        this._listeners.push({
                            id: listenerId, taskKeyGetter: taskKeyGetter, taskFilter: taskFilter, notificationSender: notificationSender, notifier: notifier, notifierThisObj: notifierThisObj, downloadAggregators: [], transferAggregators: []
                        })
                    }, unregisterListener: function unregisterListener(listenerId) {
                        var i = this._getListenerIndex(listenerId);
                        if (i !== -1)
                            this._listeners.splice(i, 1)
                    }, _getListenerIndex: function _getListenerIndex(listenerId) {
                        for (var i = 0; i < this._listeners.length; i++)
                            if (this._listeners[i].id === listenerId)
                                return i;
                        return -1
                    }, _onDownloadChanged: function _onDownloadChanged(e) {
                        var size = e.size;
                        for (var i = 0; i < size; i++) {
                            var task = e[i];
                            this._notifyTaskChanged(task, MS.Entertainment.UI.FileTransferType.download);
                            if (!task.isClosed && (task.taskStatus === Microsoft.Entertainment.FileTransferStatus.completed || task.taskStatus === Microsoft.Entertainment.FileTransferStatus.canceled))
                                task.closeAsync().then(function closeAsync_complete(task){}, function closeAsync_error(error){})
                        }
                    }, _notifyTaskChanged: function _notifyTaskChanged(task, transferType) {
                        for (var listenerId in this._listeners) {
                            var listener = this._listeners[listenerId];
                            var aggregators = (transferType === MS.Entertainment.UI.FileTransferType.download) ? listener.downloadAggregators : listener.transferAggregators;
                            var taskKey = listener.taskKeyGetter(task);
                            if (!taskKey || (listener.taskFilter && listener.taskFilter(taskKey)))
                                continue;
                            var aggregator = aggregators[taskKey];
                            if (!aggregator) {
                                aggregator = new MS.Entertainment.UI.FileTransferItemAggregator(listener.notificationSender, listener.notifier, listener.notifierThisObj, taskKey, transferType);
                                aggregators[taskKey] = aggregator
                            }
                            aggregator.update(task)
                        }
                    }
            }, {
                pulseAsync: function pulseAsync(media) {
                    return MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(media).then(function getMarketplaceNativeFileDownloadsAsync_complete(nativeItems) {
                            var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                            if (nativeItems && nativeItems.length > 0)
                                fileTransferService._onDownloadChanged(nativeItems);
                            return WinJS.Promise.wrap()
                        }, function getMarketplaceNativeFileDownloadsAsync_error(error) {
                            return WinJS.Promise.wrap()
                        })
                }, keyFromProperty: function keyFromProperty(propertyName, cachedMode, forceUpperCase) {
                        var cachedKey = null;
                        var propertyNameString = propertyName.toString();
                        return function keyFromProperty(item) {
                                var key = cachedKey;
                                if (!cachedMode || !cachedKey) {
                                    key = item[propertyNameString];
                                    if (key !== null && key !== undefined && key !== "" && key !== -1) {
                                        if (forceUpperCase && key.toUpperCase && isNaN(key))
                                            key = key.toUpperCase();
                                        if (cachedMode && key !== -1)
                                            cachedKey = key
                                    }
                                    else
                                        key = null
                                }
                                return key
                            }
                    }, keyFromProperties: function keyFromProperties(propertyNames, cachedMode, forceUpperCase) {
                        var cachedKey = null;
                        var propertyNamesClone = [];
                        for (var i in propertyNames)
                            propertyNamesClone.push(propertyNames[i].toString());
                        return function keyFromProperty(item) {
                                var key = cachedKey;
                                if (!cachedMode || !cachedKey) {
                                    var badKey = false;
                                    key = String.empty;
                                    for (var j in propertyNamesClone) {
                                        var subKey = item[propertyNamesClone[j]];
                                        if (subKey !== null && subKey !== "undefined" && subKey !== "" && subKey !== -1)
                                            key += "_" + subKey;
                                        else {
                                            key = null;
                                            break
                                        }
                                    }
                                    if (key) {
                                        if (forceUpperCase && key.toUpperCase)
                                            key = key.toUpperCase();
                                        if (cachedMode && !badKey)
                                            cachedKey = key
                                    }
                                }
                                return key
                            }
                    }, showErrorNotificationsForTask: function showErrorNotificationsForTask(task) {
                        if (task && task.isBackground && task.responseCode == MS.Entertainment.UI.FileTransferServiceErrors.errorCodes.E_INSTANCEID_LICENSERIGHT_COMBINATION_INVALID)
                            return false;
                        else
                            return true
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI", {FileTransferType: {
            transfer: "transfer", download: "download"
        }});
    WinJS.Namespace.define("MS.Entertainment.UI", {FileTransferNotificationMethods: {
            genericError: function genericError(notification) {
                var shortString = String.Empty;
                var longString = String.Empty;
                var icon = String.Empty;
                if (notification.transferType === MS.Entertainment.UI.FileTransferType.download) {
                    var error = MS.Entertainment.UI.FileTransferServiceErrors.getError(notification.task);
                    shortString = error.shortString;
                    longString = error.longString;
                    icon = MS.Entertainment.UI.Icon.inlineError
                }
                if (notification.task.isClosed)
                    notification.remove();
                else
                    notification.send(icon, shortString, longString)
            }, genericPending: function genericPending(notification) {
                    var shortString = String.Empty;
                    var longString = String.Empty;
                    var icon = String.Empty;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_LONG);
                        icon = WinJS.UI.AppBarIcon.download
                    }
                    notification.send(icon, shortString, longString)
                }, genericProgress: function genericProgress(notification) {
                    var shortString = String.Empty;
                    var longString = String.Empty;
                    var icon = String.Empty;
                    var percentage = 0;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download) {
                        if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.paused) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.error && notification.task.isClosed) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.pausedNoNetwork) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.pausedCostedNetwork) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_LONG)
                        }
                        else {
                            percentage = Math.floor(notification.task.percentage * 100);
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_SHORT).format(percentage);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_LONG).format(percentage)
                        }
                        icon = WinJS.UI.AppBarIcon.download
                    }
                    notification.send(icon, shortString, longString)
                }, videoDownloadProgress: function genericProgress(notification) {
                    var shortString = String.Empty;
                    var longString = String.Empty;
                    var icon = String.Empty;
                    var percentage = 0;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download) {
                        if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.paused) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.error && notification.task.isClosed) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.pausedNoNetwork) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.pausedCostedNetwork) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.copying) {
                            var totalBytes = notification.task.totalBytesToReceive;
                            if (isNaN(totalBytes) || totalBytes <= 0)
                                totalBytes = 0;
                            if (totalBytes > 0) {
                                var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                var transferRatePerSecond = config.video.downloadCopyFileTransferRate;
                                var kilobytes = Math.ceil(totalBytes / 1024);
                                var megabytes = Math.ceil(kilobytes / 1024);
                                var estimatedCopyDurationInMinutes = Math.ceil((megabytes / transferRatePerSecond) / 60);
                                var copyingString = String.load(String.id.IDS_VIDEO_DOWNLOAD_MANAGER_COPYING_SLOW).format(estimatedCopyDurationInMinutes);
                                shortString = longString = copyingString
                            }
                            else
                                shortString = longString = String.load(String.id.IDS_VIDEO_DOWNLOAD_MANAGER_COPYING)
                        }
                        else {
                            percentage = Math.floor(notification.task.percentage * 100);
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_SHORT).format(percentage);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_LONG).format(percentage)
                        }
                        icon = WinJS.UI.AppBarIcon.download
                    }
                    notification.send(icon, shortString, longString)
                }, genericCancel: function genericCancel(notification) {
                    var shortString = String.Empty;
                    var longString = String.Empty;
                    var icon = String.Empty;
                    if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.canceled) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_LONG);
                        icon = WinJS.UI.AppBarIcon.download
                    }
                    notification.send(icon, shortString, longString)
                }, genericComplete: function genericComplete(notification) {
                    notification.remove()
                }, _getTransferCounts: function _getTransferCounts(notification) {
                    var transferCounts = {
                            active: 0, paused: 0, pausedCostedNetwork: 0, pausedNoNetwork: 0
                        };
                    if (notification && notification.bucket && notification.bucket.length > 0)
                        for (var i = 0; i < notification.bucket.length; i++)
                            switch (notification.bucket[i].task.taskStatus) {
                                case Microsoft.Entertainment.FileTransferStatus.error:
                                case Microsoft.Entertainment.FileTransferStatus.canceled:
                                case Microsoft.Entertainment.FileTransferStatus.completed:
                                    break;
                                case Microsoft.Entertainment.FileTransferStatus.running:
                                    transferCounts.active++;
                                    break;
                                case Microsoft.Entertainment.FileTransferStatus.paused:
                                    transferCounts.paused++;
                                    break;
                                case Microsoft.Entertainment.FileTransferStatus.pausedCostedNetwork:
                                    transferCounts.pausedCostedNetwork++;
                                    break;
                                case Microsoft.Entertainment.FileTransferStatus.pausedNoNetwork:
                                    transferCounts.pausedNoNetwork++;
                                    break
                            }
                    return transferCounts
                }, _getUpdateShortString: function _getNotificationShortString(notification, activeTrackTransfers) {
                    var shortString = String.Empty;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download)
                        if (activeTrackTransfers === 1)
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_TRACK_SHORT);
                        else {
                            var numberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                            var formattedCount = numberFormatter.format(activeTrackTransfers);
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_SHORT).format(formattedCount)
                        }
                    return shortString
                }, _getUpdateLongString: function _getNotificationLongString(notification, activeTrackTransfers) {
                    var longString = String.Empty;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download)
                        if (activeTrackTransfers === 1)
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_TRACK_LONG);
                        else {
                            var numberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                            var formattedCount = numberFormatter.format(activeTrackTransfers);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_LONG).format(formattedCount)
                        }
                    return longString
                }, _getUpdateIcon: function _getNotificationIcon(notification) {
                    return notification.transferType === MS.Entertainment.UI.FileTransferType.download ? WinJS.UI.AppBarIcon.download : String.empty
                }, trackCollectionUpdate: function trackCollectionUpdate(notification) {
                    var transferCounts = MS.Entertainment.UI.FileTransferNotificationMethods._getTransferCounts(notification);
                    if (transferCounts.active > 0) {
                        var shortString = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateShortString(notification, transferCounts.active);
                        var longString = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateLongString(notification, transferCounts.active);
                        var icon = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateIcon(notification);
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.pausedNoNetwork > 0) {
                        var shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_SHORT);
                        var longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_LONG);
                        var icon = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateIcon(notification);
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.pausedCostedNetwork > 0) {
                        var shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_SHORT);
                        var longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_LONG);
                        var icon = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateIcon(notification);
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.paused > 0) {
                        var shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_SHORT);
                        var longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_LONG);
                        var icon = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateIcon(notification);
                        notification.send(icon, shortString, longString)
                    }
                    else
                        notification.remove()
                }, trackCollectionError: function trackCollectionError(notification) {
                    MS.Entertainment.UI.assert(notification.transferType === MS.Entertainment.UI.FileTransferType.download);
                    if (!MS.Entertainment.UI.FileTransferService.showErrorNotificationsForTask(notification.task))
                        return;
                    var shortString = String.load(String.id.IDS_MUSIC_DOWNLOAD_ERROR);
                    var longString = String.load(String.id.IDS_MUSIC_DOWNLOAD_ERROR);
                    var icon = MS.Entertainment.UI.Icon.inlineError;
                    if (notification.task.isClosed)
                        notification.remove();
                    else
                        notification.send(icon, shortString, longString)
                }, episodeCollectionUpdate: function episodeCollectionUpdate(notification) {
                    var transferCounts = MS.Entertainment.UI.FileTransferNotificationMethods._getTransferCounts(notification);
                    var numberFormatter;
                    var formattedCount;
                    var shortString = String.Empty;
                    var longString = String.Empty;
                    var icon = String.Empty;
                    if (transferCounts.active > 0) {
                        if (notification.bucket.length === 1) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_EPISODE_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_EPISODE_LONG)
                        }
                        else {
                            numberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                            formattedCount = numberFormatter.format(transferCounts.active);
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_SHORT).format(formattedCount);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_LONG).format(formattedCount)
                        }
                        icon = WinJS.UI.AppBarIcon.download;
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.pausedNoNetwork > 0) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_LONG);
                        icon = WinJS.UI.AppBarIcon.download;
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.pausedCostedNetwork > 0) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_LONG);
                        icon = WinJS.UI.AppBarIcon.download;
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.paused > 0) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_LONG);
                        icon = WinJS.UI.AppBarIcon.download;
                        notification.send(icon, shortString, longString)
                    }
                    else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.canceled) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_LONG);
                        icon = WinJS.UI.AppBarIcon.download;
                        notification.send(icon, shortString, longString)
                    }
                    else
                        notification.remove()
                }, episodeListItemError: function episodeListItemError(notification) {
                    var errorString = String.load(String.id.IDS_VIDEO_DOWNLOAD_ERROR);
                    var icon = MS.Entertainment.UI.Icon.inlineError;
                    if (notification.task.isClosed)
                        notification.remove();
                    else
                        notification.send(icon, errorString, errorString)
                }
        }});
    WinJS.Namespace.define("MS.Entertainment.UI", {FileTransferNotifiers: {
            genericFile: {
                add: MS.Entertainment.UI.FileTransferNotificationMethods.genericProgress, pending: MS.Entertainment.UI.FileTransferNotificationMethods.genericPending, update: MS.Entertainment.UI.FileTransferNotificationMethods.genericProgress, complete: MS.Entertainment.UI.FileTransferNotificationMethods.genericComplete, error: MS.Entertainment.UI.FileTransferNotificationMethods.genericError, cancel: MS.Entertainment.UI.FileTransferNotificationMethods.genericCancel
            }, trackCollection: {
                    add: MS.Entertainment.UI.FileTransferNotificationMethods.trackCollectionUpdate, update: MS.Entertainment.UI.FileTransferNotificationMethods.trackCollectionUpdate, complete: MS.Entertainment.UI.FileTransferNotificationMethods.trackCollectionUpdate, error: MS.Entertainment.UI.FileTransferNotificationMethods.trackCollectionError
                }, episodeCollection: {
                    add: MS.Entertainment.UI.FileTransferNotificationMethods.episodeCollectionUpdate, update: MS.Entertainment.UI.FileTransferNotificationMethods.episodeCollectionUpdate, complete: MS.Entertainment.UI.FileTransferNotificationMethods.episodeCollectionUpdate, error: MS.Entertainment.UI.FileTransferNotificationMethods.genericError, cancel: MS.Entertainment.UI.FileTransferNotificationMethods.episodeCollectionUpdate
                }, episodeListItem: {
                    add: MS.Entertainment.UI.FileTransferNotificationMethods.genericProgress, pending: MS.Entertainment.UI.FileTransferNotificationMethods.genericPending, update: MS.Entertainment.UI.FileTransferNotificationMethods.genericProgress, complete: MS.Entertainment.UI.FileTransferNotificationMethods.genericComplete, error: MS.Entertainment.UI.FileTransferNotificationMethods.episodeListItemError, cancel: MS.Entertainment.UI.FileTransferNotificationMethods.genericCancel
                }, videoDownloadItem: {
                    add: MS.Entertainment.UI.FileTransferNotificationMethods.genericProgress, pending: MS.Entertainment.UI.FileTransferNotificationMethods.genericPending, update: MS.Entertainment.UI.FileTransferNotificationMethods.videoDownloadProgress, complete: MS.Entertainment.UI.FileTransferNotificationMethods.genericComplete, error: MS.Entertainment.UI.FileTransferNotificationMethods.genericError, cancel: MS.Entertainment.UI.FileTransferNotificationMethods.genericCancel
                }
        }});
    WinJS.Namespace.define("MS.Entertainment.UI", {FileTransferItemAggregator: MS.Entertainment.UI.Framework.define(function FileTransferItemAggregatorConstructor(sender, notifier, notifierThisObj, taskKey, transferType) {
            this._taskKey = taskKey;
            this._sender = sender;
            this._notifier = notifier;
            this._notifierThisObj = notifierThisObj ? notifierThisObj : notifier;
            this._transferType = transferType;
            this._marketplaceNotifications = [];
            this._serviceNotifications = []
        }, {
            _taskKey: -1, _sender: null, _notifier: null, _notifierThisObj: null, _marketplaceNotifications: null, _serviceNotifications: null, _transferType: null, update: function update(task) {
                    var notifications = this._getNotificationBucket(task);
                    var i = this._getNotificationIndex(notifications, task.taskId);
                    var notification;
                    if (i !== -1)
                        notification = notifications[i];
                    else {
                        notification = this._createNotification(task);
                        notifications.push(notification);
                        if (this._notifier && this._notifier.add)
                            this._notifier.add.call(this._notifierThisObj, notification)
                    }
                    this._fireNotification(notification)
                }, _fireNotification: function _fireNotification(notification) {
                    if (this._notifier)
                        switch (notification.task.taskStatus) {
                            case Microsoft.Entertainment.FileTransferStatus.error:
                                this._removeNotificationFromBucket(notification);
                                if (this._notifier.error)
                                    this._notifier.error.call(this._notifierThisObj, notification);
                                break;
                            case Microsoft.Entertainment.FileTransferStatus.canceled:
                                if (this._notifier.cancel)
                                    this._notifier.cancel.call(this._notifierThisObj, notification);
                                break;
                            case Microsoft.Entertainment.FileTransferStatus.completed:
                                this._removeNotificationFromBucket(notification);
                                if (this._notifier.complete)
                                    this._notifier.complete.call(this._notifierThisObj, notification);
                                break;
                            default:
                                if (this._notifier.update)
                                    this._notifier.update.call(this._notifierThisObj, notification);
                                break
                        }
                }, _createNotification: function _createNotification(task) {
                    var that = this;
                    return {
                            id: task.taskId, transferType: that._transferType, task: task, bucket: that._getNotificationBucket(task), send: function send(icon, shortString, longString) {
                                    var notification = new MS.Entertainment.UI.ContentNotification.Notification(icon, shortString, longString);
                                    notification.task = task;
                                    that._sendNotification(notification, that._getTaskNotificationType(task))
                                }, remove: function remove() {
                                    that._sendNotification(null, that._getTaskNotificationType(task))
                                }
                        }
                }, _getNotificationIndex: function _getNotificationIndex(notifications, taskId) {
                    for (var i = 0; i < notifications.length; i++)
                        if (notifications[i].id === taskId)
                            return i;
                    return -1
                }, _removeNotificationFromBucket: function _removeNotificationFromBucket(notification) {
                    var i = this._getNotificationIndex(notification.bucket, notification.id);
                    if (i !== -1)
                        notification.bucket.splice(i, 1)
                }, _getTaskNotificationType: function _getTaskNotificationType(task) {
                    switch (task.taskType) {
                        case Microsoft.Entertainment.FileTransferRequestType.marketPlace:
                            return this._transferType === MS.Entertainment.UI.FileTransferType.download ? MS.Entertainment.UI.ContentNotification.NotificationType.marketplaceDownloadStatus : MS.Entertainment.UI.ContentNotification.NotificationType.marketplaceTransferStatus;
                        default:
                            throw"Unexpected task type.";
                    }
                }, _getNotificationBucket: function _getNotificationBucket(task) {
                    switch (task.taskType) {
                        case Microsoft.Entertainment.FileTransferRequestType.marketPlace:
                            return this._marketplaceNotifications;
                        default:
                            throw"Unexpected task type.";
                    }
                }, _sendNotification: function _sendNotification(notification, notificationType) {
                    if (this._sender && this._sender.sendNotification)
                        this._sender.sendNotification(this._taskKey, notificationType, notification);
                    else if (this._sender && this._sender.contentNotifications && this._sender.contentNotifications.sendNotification)
                        this._sender.contentNotifications.sendNotification(notificationType, notification);
                    else
                        MS.Entertainment.UI.assert(false, "Invalid notification object passed into _sendNotification")
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.fileTransfer, function FileTransferServiceFactory() {
        return new MS.Entertainment.UI.FileTransferService
    })
})()
})();
/* >>>>>>/framework/filetransfernotificationservice.js:16004 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI");
    WinJS.Namespace.define("MS.Entertainment.UI", {FileTransferNotificationService: MS.Entertainment.UI.Framework.define(function FileTransferNotificationServiceConstructor() {
            this._listeners = {};
            this._itemErrors = {};
            this._itemTransferState = {};
            this._containerErrors = {};
            this._internalHandlers = {}
        }, {
            _internalHandlers: null, _listeners: null, _itemErrors: null, _itemTransferState: null, _fileTransferListenerId: String.Empty, startListening: function startListening(handlers) {
                    MS.Entertainment.UI.assert(handlers, "invalid value passed for handlers");
                    var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                    if (Array.isArray(handlers)) {
                        this._fileTransferListenerId = [];
                        for (var i = 0; i < handlers.length; i++) {
                            this._fileTransferListenerId[i] = "FileTransferNotificationServiceListener_" + Math.random();
                            MS.Entertainment.UI.assert(handlers[i].taskKeyGetter, "invalid taskKeyGetter");
                            MS.Entertainment.UI.assert(handlers[i].notifier, "invalid notifier");
                            fileTransferService.registerListener(this._fileTransferListenerId[i], handlers[i].taskKeyGetter, null, handlers[i].notifier, this)
                        }
                    }
                    else {
                        this._fileTransferListenerId = "FileTransferNotificationServiceListener_" + Math.random();
                        MS.Entertainment.UI.assert(handlers.taskKeyGetter, "invalid taskKeyGetter");
                        MS.Entertainment.UI.assert(handlers.notifier, "invalid notifier");
                        fileTransferService.registerListener(this._fileTransferListenerId, handlers.taskKeyGetter, null, handlers.notifier, this)
                    }
                }, stopListening: function stopListening() {
                    if (this._fileTransferListenerId) {
                        var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                        if (Array.isArray(this._fileTransferListenerId))
                            for (var i = 0; i < this._fileTransferListenerId.length; i++)
                                fileTransferService.unregisterListener(this._fileTransferListenerId[i]);
                        else
                            fileTransferService.unregisterListener(this._fileTransferListenerId);
                        this._fileTransferListenerId = String.Empty
                    }
                }, attachListener: function attachListener(mediaId, listener) {
                    MS.Entertainment.UI.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.UI.assert(listener instanceof Function, "listener param is not a function");
                    var listeners = this._listeners[mediaId];
                    if (!listeners)
                        this._listeners[mediaId] = [listener];
                    else
                        listeners.push(listener);
                    var errorCode = this._itemErrors[mediaId];
                    if (errorCode)
                        listener(mediaId, MS.Entertainment.UI.FileTransferNotificationService.Event.transferError, errorCode);
                    if (this._itemTransferState[mediaId])
                        listener(mediaId, this._itemTransferState[mediaId], true)
                }, detachListener: function detachListener(mediaId, listener) {
                    MS.Entertainment.UI.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.UI.assert(listener instanceof Function, "listener param is not a function");
                    var listeners = this._listeners[mediaId];
                    if (listeners)
                        if (listeners.length === 1) {
                            MS.Entertainment.UI.assert(listeners[0] === listener, "listener not attached");
                            if (listeners[0] === listener)
                                delete this._listeners[mediaId]
                        }
                        else {
                            var index = listeners.indexOf(listener);
                            MS.Entertainment.UI.assert(index >= 0, "listener not attached");
                            if (index >= 0)
                                listeners.splice(index, 1)
                        }
                }, setItemError: function setItemError(mediaId, errorCode) {
                    MS.Entertainment.UI.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.UI.assert(!isNaN(errorCode), "invalid errorCode param");
                    if (errorCode === 0)
                        delete this._itemErrors[mediaId];
                    else
                        this._itemErrors[mediaId] = errorCode;
                    this._sendEvent(mediaId, MS.Entertainment.UI.FileTransferNotificationService.Event.transferError, errorCode)
                }, setItemTransferState: function setItemTransferState(mediaId, state, value) {
                    MS.Entertainment.UI.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.UI.assert(state === MS.Entertainment.UI.FileTransferNotificationService.Event.download, "Unsupported State passed into setTransferState");
                    if (!value)
                        delete this._itemTransferState[mediaId];
                    else
                        this._itemTransferState[mediaId] = state;
                    this._sendEvent(mediaId, state, value)
                }, _sendEvent: function _sendEvent(mediaId, event, value) {
                    var listeners = this._listeners[mediaId];
                    if (listeners)
                        listeners.forEach(function(listener) {
                            listener(mediaId, event, value)
                        })
                }, _isValidMediaId: function _isValidMediaId(mediaId) {
                    return ((typeof mediaId === "number" && mediaId >= 0) || (typeof mediaId === "string" && mediaId !== MS.Entertainment.Utilities.EMPTY_GUID))
                }
        }, {
            Instance: null, Event: {
                    download: "download", transferError: "transferError"
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.fileTransferNotifications, function FileTransferNotificationServiceFactory() {
        if (!MS.Entertainment.UI.FileTransferNotificationService.Instance)
            MS.Entertainment.UI.FileTransferNotificationService.Instance = new MS.Entertainment.UI.FileTransferNotificationService;
        return MS.Entertainment.UI.FileTransferNotificationService.Instance
    }, true)
})()
})();
/* >>>>>>/framework/downloadinfo.js:16112 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Framework");
    WinJS.Namespace.define("MS.Entertainment.Framework", {DownloadInfo: MS.Entertainment.UI.Framework.define(function DownloadInfoConstructor() {
            this.items = [];
            this.errorCodes = [];
            this.counts = {
                pending: 0, active: 0, failed: 0, canRetry: 0, paused: 0
            }
        }, {
            items: null, counts: null, errorCodes: null, hasPending: false, hasActive: false, hasFailed: false, hasPaused: false, hasRetryable: false, hasAny: false, initializeAsync: function initializeAsync(media) {
                    return MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(media).then(function getMarketplaceNativeFileDownloadsAsync_complete(nativeItems) {
                            for (var i = 0; i < nativeItems.length; i++) {
                                var nativeItem = nativeItems[i];
                                if (nativeItem.taskStatus !== Microsoft.Entertainment.FileTransferStatus.completed && !nativeItem.isClosed) {
                                    var item = {
                                            mediaType: nativeItem.libraryTypeId, libraryId: nativeItem.libraryId, mediaId: nativeItem.mediaType, taskId: nativeItem.taskId, taskStatus: nativeItem.taskStatus, status: MS.Entertainment.Framework.DownloadInfo.Status.none, errorCode: 0, canRetry: nativeItem.canRetry
                                        };
                                    switch (nativeItem.taskStatus) {
                                        case Microsoft.Entertainment.FileTransferStatus.paused:
                                            item.status = MS.Entertainment.Framework.DownloadInfo.Status.paused;
                                            ++this.counts.paused;
                                            break;
                                        case Microsoft.Entertainment.FileTransferStatus.pending:
                                            item.status = MS.Entertainment.Framework.DownloadInfo.Status.pending;
                                            ++this.counts.pending;
                                            break;
                                        case Microsoft.Entertainment.FileTransferStatus.error:
                                            item.errorCode = nativeItem.responseCode;
                                            if (nativeItem.responseCode !== 0)
                                                this.errorCodes.push(nativeItem.responseCode);
                                        case Microsoft.Entertainment.FileTransferStatus.notStarted:
                                        case Microsoft.Entertainment.FileTransferStatus.canceled:
                                            if (nativeItem.canRetry)
                                                ++this.counts.canRetry;
                                            item.status = MS.Entertainment.Framework.DownloadInfo.Status.failed;
                                            ++this.counts.failed;
                                            break;
                                        default:
                                            item.status = MS.Entertainment.Framework.DownloadInfo.Status.active;
                                            ++this.counts.active;
                                            break
                                    }
                                    this.items.push(item)
                                }
                            }
                            this.hasPending = (this.counts.pending > 0);
                            this.hasActive = (this.counts.active > 0);
                            this.hasFailed = (this.counts.failed > 0);
                            this.hasRetryable = (this.counts.canRetry > 0);
                            this.hasPaused = (this.counts.paused > 0);
                            this.hasAny = (this.items.length > 0)
                        }.bind(this))
                }, update: function update(nativeItem) {
                    if (!nativeItem)
                        return false;
                    var item = null;
                    var oldStatus = MS.Entertainment.Framework.DownloadInfo.Status.none;
                    var index = this._getItemIndexFromNativeItem(nativeItem);
                    if (index !== -1) {
                        item = this.items[index];
                        if (item.taskStatus === nativeItem.taskStatus && !nativeItem.isClosed)
                            return false;
                        oldStatus = item.status
                    }
                    var errorCodesChanged = false;
                    var retryableChanged = false;
                    if (item && (nativeItem.taskStatus === Microsoft.Entertainment.FileTransferStatus.completed || nativeItem.isClosed)) {
                        this.items.splice(index, 1);
                        if (item.errorCode)
                            errorCodesChanged = true;
                        if (item.canRetry)
                            retryableChanged = true
                    }
                    else {
                        if (!item) {
                            if (nativeItem.taskStatus === Microsoft.Entertainment.FileTransferStatus.completed || nativeItem.isClosed)
                                return false;
                            item = {
                                mediaType: nativeItem.libraryTypeId, libraryId: nativeItem.libraryId, mediaId: nativeItem.mediaType, taskId: nativeItem.taskId, taskStatus: null, status: MS.Entertainment.Framework.DownloadInfo.Status.none, errorCode: 0, canRetry: false
                            };
                            this.items.push(item)
                        }
                        var previousErrorCode = item.errorCode;
                        var previousRetryable = item.canRetry;
                        item.errorCode = 0;
                        item.canRetry = nativeItem.canRetry;
                        item.taskStatus = nativeItem.taskStatus;
                        switch (nativeItem.taskStatus) {
                            case Microsoft.Entertainment.FileTransferStatus.paused:
                                item.status = MS.Entertainment.Framework.DownloadInfo.Status.paused;
                                if (item.status === oldStatus)
                                    return false;
                                ++this.counts.paused;
                                break;
                            case Microsoft.Entertainment.FileTransferStatus.pending:
                                item.status = MS.Entertainment.Framework.DownloadInfo.Status.pending;
                                if (item.status === oldStatus)
                                    return false;
                                ++this.counts.pending;
                                break;
                            case Microsoft.Entertainment.FileTransferStatus.error:
                                item.errorCode = nativeItem.responseCode;
                            case Microsoft.Entertainment.FileTransferStatus.notStarted:
                            case Microsoft.Entertainment.FileTransferStatus.canceled:
                                item.status = MS.Entertainment.Framework.DownloadInfo.Status.failed;
                                if (item.status === oldStatus && previousErrorCode === item.errorCode)
                                    return false;
                                ++this.counts.failed;
                                break;
                            default:
                                item.status = MS.Entertainment.Framework.DownloadInfo.Status.active;
                                if (item.status === oldStatus)
                                    return false;
                                ++this.counts.active;
                                break
                        }
                        errorCodesChanged = previousErrorCode !== item.errorCode;
                        retryableChanged = previousRetryable !== item.canRetry
                    }
                    switch (oldStatus) {
                        case MS.Entertainment.Framework.DownloadInfo.Status.paused:
                            --this.counts.paused;
                            break;
                        case MS.Entertainment.Framework.DownloadInfo.Status.pending:
                            --this.counts.pending;
                            break;
                        case MS.Entertainment.Framework.DownloadInfo.Status.failed:
                            --this.counts.failed;
                            break;
                        case MS.Entertainment.Framework.DownloadInfo.Status.active:
                            --this.counts.active;
                            break
                    }
                    if (retryableChanged) {
                        this.counts.canRetry = 0;
                        for (var i = 0; i < this.items.length; i++)
                            if (this.items[i].canRetry)
                                ++this.counts.canRetry
                    }
                    if (errorCodesChanged) {
                        this.errorCodes = [];
                        for (var i = 0; i < this.items.length; i++) {
                            var errorCode = this.items[i].errorCode;
                            if (errorCode)
                                this.errorCodes.push(errorCode)
                        }
                    }
                    this.hasPaused = (this.counts.paused > 0);
                    this.hasPending = (this.counts.pending > 0);
                    this.hasActive = (this.counts.active > 0);
                    this.hasFailed = (this.counts.failed > 0);
                    this.hasRetryable = (this.counts.canRetry > 0);
                    this.hasAny = (this.items.length > 0);
                    return true
                }, _getItemIndexFromNativeItem: function _getItemIndexFromNativeItem(nativeItem) {
                    if (!nativeItem || !this.items)
                        return -1;
                    for (var i = 0; i < this.items.length; i++) {
                        var item = this.items[i];
                        if (item.taskId === nativeItem.taskId)
                            return i
                    }
                    return -1
                }
        }, {
            Status: {
                none: "none", failed: "failed", paused: "paused", pending: "pending", active: "active"
            }, createAndInitializeAsync: function createAndInitializeAsync(media) {
                    var downloadInfo = new MS.Entertainment.Framework.DownloadInfo;
                    return downloadInfo.initializeAsync(media).then(function initializeAsync_complete() {
                            return WinJS.Promise.wrap(downloadInfo)
                        })
                }, getMarketplaceNativeFileDownloadsAsync: function getMarketplaceNativeFileDownloadsAsync(media) {
                    var query = MS.Entertainment.Framework.DownloadInfo.createMarketplaceFileTransferManagerQueryForMedia(media);
                    if (query && Microsoft.Entertainment.FileTransferManager)
                        return Microsoft.Entertainment.FileTransferManager.getFileDownloadsByQueryAsync(query).then(function getFileDownloadsByQueryAsync_complete(nativeItems) {
                                if (nativeItems)
                                    return WinJS.Promise.wrap(nativeItems);
                                return WinJS.Promise.wrap([])
                            }, function getFileDownloadsByQueryAsync_error(e) {
                                return WinJS.Promise.wrap([])
                            });
                    else
                        return WinJS.Promise.wrap([])
                }, createMarketplaceFileTransferManagerQueryForMedia: function createMarketplaceFileTransferManagerQueryForMedia(media) {
                    if (!media || !media.mediaType || !Microsoft.Entertainment.FileTransferQuery)
                        return null;
                    var query = new Microsoft.Entertainment.FileTransferQuery;
                    query.requestType = Microsoft.Entertainment.FileTransferRequestType.marketPlace;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            if (media.inCollection)
                                query.libraryId = media.libraryId;
                            else if (media.hasServiceId)
                                query.mediaId = media.serviceId;
                            else
                                query = null;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            if (media.inCollection)
                                query.albumLibraryId = media.libraryId;
                            else if (media.hasServiceId)
                                query.albumMediaId = media.serviceId;
                            else
                                query = null;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            if (media.inCollection)
                                query.seriesLibraryId = media.libraryId;
                            else if (media.hasServiceId)
                                query.seriesMediaId = media.serviceId;
                            else
                                query = null;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            query.seasonNumber = media.seasonNumber;
                            if (media.inCollection)
                                query.seriesLibraryId = media.seriesLibraryId;
                            else if (media.seriesId && media.seriesId !== MS.Entertainment.Utilities.EMPTY_GUID)
                                query.seriesMediaId = media.seriesId;
                            else
                                query = null;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            if (media.inCollection)
                                query.albumArtistLibraryId = media.libraryId;
                            else if (media.hasServiceId)
                                if (MS.Entertainment.Utilities.isValidGuid(media.serviceId))
                                    query.albumArtistMediaId = media.serviceId;
                                else {
                                    MS.Entertainment.Framework.fail("Invalid serviceId: " + media.serviceId);
                                    query = null
                                }
                            else
                                query = null;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                        case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.readingItem:
                            if (media.libraryId) {
                                query.libraryTypeId = Microsoft.Entertainment.Queries.ObjectType.readingItem;
                                query.libraryId = media.libraryId
                            }
                            else
                                query = null;
                            break;
                        default:
                            throw"The state engine does not support this media item type.";
                    }
                    return query
                }, getMarketplaceDownloadTaskKeyFunction: function getMarketplaceDownloadTaskKeyFunction(mediaType) {
                    if (!mediaType)
                        return null;
                    return function getMarketplaceDownloadTaskKey(nativeItem) {
                            switch (mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.video:
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    return nativeItem.libraryId;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    return nativeItem.albumLibraryId;
                                case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                                    return nativeItem.seriesLibraryId;
                                case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                                    return nativeItem.seriesLibraryId + "/" + nativeItem.seasonNumber;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    return nativeItem.albumArtistLibraryId;
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                case Microsoft.Entertainment.Queries.ObjectType.folder:
                                    return nativeItem.libraryId;
                                case Microsoft.Entertainment.Queries.ObjectType.readingItem:
                                    return nativeItem.libraryId;
                                default:
                                    throw"The state engine does not support this media item type.";
                            }
                        }
                }, isFileTransferTaskContainedByMedia: function isFileTransferTaskContainedByMedia(media, nativeItem) {
                    if (!media || !media.mediaType || !nativeItem)
                        return false;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            if (media.inCollection)
                                return (nativeItem.libraryId === media.libraryId);
                            return (nativeItem.mediaId.toLowerCase() === media.serviceId.toLowerCase());
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            if (media.inCollection)
                                return (nativeItem.albumLibraryId === media.libraryId);
                            return (nativeItem.albumMediaId.toLowerCase() === media.serviceId.toLowerCase());
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            if (media.inCollection)
                                return (nativeItem.seriesLibraryId === media.libraryId);
                            return (nativeItem.seriesMediaId.toLowerCase() === media.serviceId.toLowerCase());
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            if (nativeItem.seasonNumber !== media.seasonNumber)
                                return false;
                            if (media.inCollection)
                                return (nativeItem.seriesLibraryId === media.seriesLibraryId);
                            return (nativeItem.seriesMediaId.toLowerCase() === media.seriesZuneId.toLowerCase());
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            if (media.inCollection)
                                return (nativeItem.albumArtistLibraryId === media.libraryId);
                            return (nativeItem.albumArtistMediaId.toLowerCase() === media.serviceId.toLowerCase());
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            if (media.inCollection)
                                if (nativeItem.contextLibraryTypeId === Microsoft.Entertainment.Queries.ObjectType.playlist)
                                    return nativeItem.contextLibraryId === media.libraryId;
                            return false;
                        default:
                            throw"The state engine does not support this media item type.";
                    }
                }
        })})
})()
})();
/* >>>>>>/framework/interactionnotifier.js:16436 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Components.Shell");
    WinJS.Namespace.define("MS.Entertainment.Framework", {InteractionNotifier: MS.Entertainment.UI.Framework.define(function InteractionNotifier() {
            this._listenerFunctions = [];
            var userInteractionHandler = this._notifyListeners.bind(this);
            var focusHandler = this._focusHandler.bind(this);
            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
            document.body.addEventListener("keydown", userInteractionHandler, true);
            document.body.addEventListener("mousewheel", userInteractionHandler, true);
            document.body.addEventListener("MSPointerDown", userInteractionHandler, true);
            document.body.addEventListener("MSPointerMove", userInteractionHandler, true);
            document.body.addEventListener("focusin", focusHandler, true);
            document.body.addEventListener("pointerdown", userInteractionHandler, true);
            document.body.addEventListener("pointermove", userInteractionHandler, true);
            document.body.addEventListener("focusout", focusHandler, true);
            document.body.addEventListener("click", userInteractionHandler, true);
            this._bindings = WinJS.Binding.bind(uiStateService, {activeListening: userInteractionHandler})
        }, {
            _listenerFunctions: null, _bindings: null, _previouslyFocused: true, dispose: function dispose() {
                    if (this._bindings) {
                        this._bindings.cancel();
                        this._bindings = null
                    }
                }, _focusHandler: function _focusHandler() {
                    if (!this._previouslyFocused)
                        this._notifyListeners();
                    this._previouslyFocused = document.hasFocus()
                }, _notifyListeners: function _notifyListeners(event) {
                    for (var i = 0; i < this._listenerFunctions.length; i++)
                        try {
                            this._listenerFunctions[i]()
                        }
                        catch(exception) {
                            MS.Entertainment.UI.Components.Shell.assert(false, "Interaction listener failed " + this._listenerFunctions[i].toString() + "\r\nException: " + exception.toString())
                        }
                }, addInteractionListener: function addInteractionListener(listenerFunction) {
                    this._listenerFunctions.push(listenerFunction)
                }, removeInteractionListener: function removeInteractionListener(listenerFunction) {
                    var index = this._listenerFunctions.indexOf(listenerFunction);
                    if (index > -1)
                        this._listenerFunctions.splice(index, 1)
                }
        }, null)});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.interactionNotifier, function InteractionNotifierFactory() {
        return new MS.Entertainment.Framework.InteractionNotifier
    })
})()
})();
/* >>>>>>/components/shell/contentnotificationlist.js:16489 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Pages");
    WinJS.Namespace.define("MS.Entertainment.Pages", {ContentNotificationList: MS.Entertainment.UI.Framework.defineUserControl("Components/Shell/ContentNotificationList.html#contentNotificationListTemplate", null, null, {source: null})});
    WinJS.Namespace.define("MS.Entertainment.Pages", {ContentNotificationTileItem: MS.Entertainment.UI.Framework.defineUserControl(null, function contentNotificationTileItemConstructor(element, options){}, {
            _bindings: null, _hasDelayedInitialized: false, _contentNotifications: null, _alternateText: String.empty, _alternateIcon: String.empty, _useAlternateTextStyle: null, _mediaItem: null, _pendingContentNotifications: null, defaultTextStyle: String.empty, alternateTextStyle: String.empty, hideIfEmpty: false, hideSiblingsIfNotEmpty: false, controlName: "contentNotificationTileItem", _delayInitialized: function _delayInitialized() {
                    if (!this._unloaded) {
                        this._hasDelayedInitialized = true;
                        this._findNotificationForDisplay = this._findNotificationForDisplay.bind(this);
                        this._displayedShortNotificationUpdated = this._displayedShortNotificationUpdated.bind(this);
                        this._displayedLongNotificationUpdated = this._displayedLongNotificationUpdated.bind(this);
                        this._displayedIconNotificationUpdated = this._displayedIconNotificationUpdated.bind(this);
                        this._commitContentNotifications();
                        this._commitAlternateIcon();
                        this._commitAlternateText()
                    }
                }, unload: function unload() {
                    this.contentNotifications = null;
                    this.displayedNotification = null;
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, mediaItem: {
                    get: function get_mediaItem() {
                        return this._mediaItem
                    }, set: function set_mediaItem(value) {
                            this._mediaItem = value;
                            if (MS.Entertainment.UI.FileTransferService)
                                MS.Entertainment.UI.FileTransferService.pulseAsync(this._mediaItem)
                        }
                }, _isEmpty: function _isEmpty() {
                    var i,
                        item;
                    var notifications = this.contentNotifications;
                    var empty = true;
                    if (!notifications)
                        return true;
                    for (i = 0; i < notifications.length; i++) {
                        item = WinJS.Binding.unwrap(notifications).item(i);
                        if (this.checkItem(item)) {
                            if (item !== this._displayedNotification)
                                this.displayedNotification = item;
                            empty = false;
                            break
                        }
                    }
                    return empty
                }, _findNotificationForDisplay: function _findNotificationForDisplay() {
                    if (this._unloaded)
                        return;
                    var empty = this._isEmpty();
                    if (empty)
                        this.displayedNotification = null;
                    if (empty && this.hideIfEmpty)
                        WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
                    else
                        WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay");
                    var siblings = null;
                    if (this.domElement.parentElement && this.hideSiblingsIfNotEmpty)
                        siblings = this.domElement.parentElement.children;
                    if (siblings) {
                        var currentSibling;
                        for (var i = 0; i < siblings.length; i++) {
                            currentSibling = siblings[i];
                            if (currentSibling !== this.domElement)
                                if (!empty)
                                    WinJS.Utilities.addClass(currentSibling, "removeFromDisplaySecondary");
                                else
                                    WinJS.Utilities.removeClass(currentSibling, "removeFromDisplaySecondary")
                        }
                    }
                }, checkItem: function checkItem(item) {
                    return true
                }, contentNotifications: {
                    get: function get_contentNotifications() {
                        return this._pendingContentNotifications || this._contentNotifications
                    }, set: function set_contentNotifications(value) {
                            if (value !== this._pendingContentNotifications) {
                                this._pendingContentNotifications = value;
                                this._commitContentNotifications()
                            }
                        }
                }, alternateText: {
                    get: function get_alternateText() {
                        return this._alternateText
                    }, set: function set_alternateText(value) {
                            if (value !== this._alternateText) {
                                this._alternateText = value;
                                this._commitAlternateText()
                            }
                        }
                }, alternateIcon: {
                    get: function get_alternateIcon() {
                        return this._alternateIcon
                    }, set: function set_alternateIcon(value) {
                            if (value !== this._alternateIcon) {
                                this._alternateIcon = value;
                                this._commitAlternateIcon()
                            }
                        }
                }, useAlternateTextStyle: {
                    set: function setUseAlternateTextStyle(value) {
                        if (this._useAlternateTextStyle === value)
                            return;
                        if (value) {
                            if (this.defaultTextStyle)
                                WinJS.Utilities.removeClass(this.domElement, this.defaultTextStyle);
                            if (this.alternateTextStyle)
                                WinJS.Utilities.addClass(this.domElement, this.alternateTextStyle)
                        }
                        else {
                            if (this.alternateTextStyle)
                                WinJS.Utilities.removeClass(this.domElement, this.alternateTextStyle);
                            if (this.defaultTextStyle)
                                WinJS.Utilities.addClass(this.domElement, this.defaultTextStyle)
                        }
                        this._useAlternateTextStyle = value
                    }, get: function getUseAlternateTextStyle() {
                            return this._useAlternateTextStyle
                        }
                }, displayedDefaultShortNotificationUpdated: function displayedDefaultShortNotificationUpdated() {
                    this.useAlternateTextStyle = !!this.alternateText;
                    this._displayedShortNotificationUpdated(this.alternateText || String.empty)
                }, displayedDefaultLongNotificationUpdated: function displayedDefaultLongNotificationUpdated() {
                    this.useAlternateTextStyle = !!this.alternateText;
                    this._displayedLongNotificationUpdated(this.alternateText || String.empty)
                }, displayedDefaultIconNotificationUpdated: function displayedDefaultIconNotificationUpdated() {
                    this._displayedIconNotificationUpdated(this.alternateIcon || String.empty)
                }, displayedNotification: {
                    get: function get_displayedNotification() {
                        return this._displayedNotification
                    }, set: function set_displayedNotification(value) {
                            if (value !== this._displayedNotification) {
                                this._displayedNotification = value;
                                this._commitDisplayedNotification()
                            }
                        }, enumerable: false
                }, _commitDisplayedNotification: function _commitDisplayNotification() {
                    if (this._hasDelayedInitialized) {
                        if (this._bindings) {
                            this._bindings.cancel();
                            this._bindings = null
                        }
                        this.useAlternateTextStyle = !this._displayedNotification;
                        if (this._displayedNotification)
                            this._bindings = WinJS.Binding.bind(this, {_displayedNotification: {
                                    shortText: this._displayedShortNotificationUpdated, longText: this._displayedLongNotificationUpdated, icon: this._displayedIconNotificationUpdated
                                }});
                        else {
                            this.displayedDefaultShortNotificationUpdated();
                            this.displayedDefaultLongNotificationUpdated();
                            this.displayedDefaultIconNotificationUpdated()
                        }
                    }
                }, _commitAlternateIcon: function _commitAlternateIcon() {
                    if (this._hasDelayedInitialized && !this.displayedNotification)
                        this.displayedDefaultIconNotificationUpdated()
                }, _commitAlternateText: function _commitAlternateText() {
                    if (!this.displayedNotification) {
                        this.displayedDefaultShortNotificationUpdated();
                        this.displayedDefaultLongNotificationUpdated()
                    }
                }, _commitContentNotifications: function _commitContentNotifications() {
                    if (this._hasDelayedInitialized && this._pendingContentNotifications !== this._contentNotifications) {
                        if (this._contentNotifications)
                            this._contentNotifications.removeChangeListener(this._findNotificationForDisplay);
                        this._contentNotifications = this._pendingContentNotifications;
                        if (this._contentNotifications) {
                            this._contentNotifications.addChangeListener(this._findNotificationForDisplay);
                            this._findNotificationForDisplay()
                        }
                    }
                }, _displayedNotification: null, _displayedShortNotificationUpdated: function _displayedShortNotificationUpdated(newValue){}, _displayedLongNotificationUpdated: function _displayedLongNotificationUpdated(newValue){}, _displayedIconNotificationUpdated: function _displayedIconNotificationUpdated(newValue){}
        }, {})});
    WinJS.Namespace.define("MS.Entertainment.Pages", {ContentNotificationShortTextTileItem: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.ContentNotificationTileItem", null, function contentNotificationShortTextTileItem(){}, {
            controlName: "contentNotificationShortTextTileItem", checkItem: function checkItem(item) {
                    return item.shortText
                }, _displayedShortNotificationUpdated: function _displayedShortNotificationUpdated(newValue) {
                    if (!this._unloaded)
                        this.domElement.textContent = newValue
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Pages", {ContentNotificationShortTextTileItemWithNotification: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.ContentNotificationShortTextTileItem", null, function ContentNotificationShortTextTileItemWithNotification(){}, {
            controlName: "ContentNotificationShortTextTileItemWithNotification", _expirationTickTimer: null, _expirationString: null, _mediaItem: null, _playbackSessionBindings: null, _uiStateEventHandler: null, _ingestingPurchaseHistoryChangedHandler: null, unload: function unload() {
                    if (this._expirationTickTimer) {
                        window.clearTimeout(this._expirationTickTimer);
                        this._expirationTickTimer = null
                    }
                    if (this._playbackSessionBindings) {
                        this._playbackSessionBindings.cancel();
                        this._playbackSessionBindings = null
                    }
                    if (this._ingestingPurchaseHistoryChangedHandler) {
                        var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                        if (purchaseHistoryService && this._ingestingPurchaseHistoryChangedHandler) {
                            purchaseHistoryService.unbind("isGroveling", this._ingestingPurchaseHistoryChangedHandler);
                            this._ingestingPurchaseHistoryChangedHandler = null
                        }
                    }
                    MS.Entertainment.Pages.ContentNotificationShortTextTileItem.prototype.unload.call(this)
                }, mediaItem: {
                    get: function get_mediaItem() {
                        return this._mediaItem
                    }, set: function set_mediaItem(value) {
                            this._mediaItem = value;
                            if (MS.Entertainment.Utilities.isVideoApp && this._mediaItem && (MS.Entertainment.Utilities.isMovie(this._mediaItem) || MS.Entertainment.Utilities.isTVSeries(this._mediaItem)) && (this.mediaItem.inCollection || (this.mediaItem.libraryId && this.mediaItem.libraryId > 0))) {
                                this._bindIngestingPurchaseHistoryChangedHandler();
                                this.updateNotificationDates()
                            }
                            if (MS.Entertainment.UI.FileTransferService)
                                MS.Entertainment.UI.FileTransferService.pulseAsync(this._mediaItem)
                        }
                }, _getRentalExpirationDate: function _getRentalExpirationDate(expirationDate) {
                    var updateBindings = function updateBindings() {
                            var transportStateChanged = function transportStateChanged(newValue) {
                                    if (newValue === MS.Entertainment.Platform.Playback.TransportState.playing)
                                        this.updateNotificationDates()
                                }.bind(this);
                            var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                            this._playbackSessionBindings = WinJS.Binding.bind(sessionMgr.primarySession, {
                                currentTransportState: transportStateChanged.bind(this), playerState: transportStateChanged.bind(this)
                            });
                            MS.Entertainment.UI.RentalExpirationService.getExpirationString(this.mediaItem, expirationDate, this._updateRentalExpirationString.bind(this))
                        }.bind(this);
                    if (this._expirationTickTimer) {
                        window.clearTimeout(this._expirationTickTimer);
                        this._expirationTickTimer = null
                    }
                    if (!this._playbackSessionBindings) {
                        var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                        if (uiStateService.stageThreeActivated)
                            updateBindings();
                        else
                            this._scriptsLoadedEventHandler = MS.Entertainment.Utilities.addEventHandlers(uiStateService, {stageThreeActivatedChanged: function stageThreeActivatedChanged(activateEvent) {
                                    if (activateEvent.detail.newValue) {
                                        if (this._scriptsLoadedEventHandler) {
                                            this._scriptsLoadedEventHandler.cancel();
                                            this._scriptsLoadedEventHandler = null
                                        }
                                        updateBindings()
                                    }
                                }.bind(this)})
                    }
                }, _getPresaleFulfillmentDate: function _getPresaleFulfillmentDate(fulfillmentDate) {
                    var now = new Date;
                    if (fulfillmentDate && now < fulfillmentDate) {
                        var timeToFulfillment = fulfillmentDate.getTime() - now.getTime();
                        var daysToFulfillment = Math.ceil(timeToFulfillment / (1000 * 60 * 60 * 24));
                        var hoursToFulfillment = Math.ceil(timeToFulfillment / (1000 * 60 * 60));
                        if (hoursToFulfillment <= 24) {
                            var hoursPluralString = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_HOURS_PLURAL, hoursToFulfillment);
                            this.expirationString = hoursPluralString.format(hoursToFulfillment)
                        }
                        else if (daysToFulfillment <= 10) {
                            var daysPluralString = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DAYS_PLURAL, daysToFulfillment);
                            this.expirationString = daysPluralString.format(daysToFulfillment)
                        }
                        else {
                            var fulfillmentDayMonthYear = MS.Entertainment.Formatters.formatPresaleFulfillmentDate(fulfillmentDate);
                            this.expirationString = String.load(String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DATE_KNOWN).format(fulfillmentDayMonthYear)
                        }
                    }
                    else
                        this.expirationString = String.load(String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DATE_UNKNOWN);
                    this._findNotificationForDisplay()
                }, updateNotificationDates: function updateNotificationDates() {
                    if (this._uiStateEventHandler) {
                        this._uiStateEventHandler.cancel();
                        this._uiStateEventHandler = null
                    }
                    if (MS.Entertainment.Utilities.isMovie(this._mediaItem))
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.sessionManager))
                            MS.Entertainment.ViewModels.SmartBuyStateEngine.queryMediaStateAsync(this.mediaItem).done(function checkMediaExpiration(stateInfo) {
                                if (!stateInfo && stateInfo.marketplace)
                                    return;
                                if (stateInfo.marketplace.rentalExpirations && stateInfo.marketplace.rentalExpirations.length && (stateInfo.marketplace.rentalExpirations.overall.latestDate || stateInfo.marketplace.rentalExpirations.overall.isExpired))
                                    this._getRentalExpirationDate(stateInfo.marketplace.rentalExpirations.overall.latestDate);
                                else if (stateInfo.marketplace.isPresale || stateInfo.marketplace.presaleFulfillmentDate)
                                    this._getPresaleFulfillmentDate(stateInfo.marketplace.presaleFulfillmentDate)
                            }.bind(this));
                        else
                            this._uiStateEventHandler = MS.Entertainment.Utilities.addEventHandlers(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {stageThreeActivatedChanged: function stageThreeActivatedChanged(e) {
                                    if (e.detail.newValue && !this._unloaded) {
                                        this._bindIngestingPurchaseHistoryChangedHandler();
                                        this.updateNotificationDates()
                                    }
                                }.bind(this)});
                    else if (MS.Entertainment.Utilities.isTVSeries(this._mediaItem))
                        this._updateNewSeasonNotificationString(this._mediaItem.latestSeasonReleaseDate)
                }, _bindIngestingPurchaseHistoryChangedHandler: function _bindIngestingPurchaseHistoryChangedHandler() {
                    if (!this._ingestingPurchaseHistoryChangedHandler && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.purchaseHistory)) {
                        var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                        if (purchaseHistoryService && purchaseHistoryService.isUsingXdlcForIngestion()) {
                            this._ingestingPurchaseHistoryChangedHandler = this._ingestingPurchaseHistoryChanged.bind(this);
                            purchaseHistoryService.bind("isGroveling", this._ingestingPurchaseHistoryChangedHandler)
                        }
                    }
                }, _ingestingPurchaseHistoryChanged: function _ingestingPurchaseHistoryChanged(isIngesting) {
                    var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                    if (purchaseHistoryService && purchaseHistoryService.hasGrovelEverCompleted)
                        this.updateNotificationDates()
                }, _isEmpty: function _isEmpty() {
                    var empty = !this.expirationString;
                    if (empty)
                        empty = MS.Entertainment.Pages.ContentNotificationTileItem.prototype._isEmpty.call(this);
                    return empty
                }, _updateRentalExpirationString: function _updateRentalExpirationString(spanInMilliseconds, expirationTickTimer) {
                    this._expirationTickTimer = expirationTickTimer;
                    this.expirationString = MS.Entertainment.Formatters.formatRentalExpirationFromSpanInt(spanInMilliseconds);
                    this._findNotificationForDisplay()
                }, _updateNewSeasonNotificationString: function _updateNewSeasonNotificationString(releaseDate) {
                    if (releaseDate && Date.isValidExpirationDate(releaseDate)) {
                        var now = new Date;
                        var timeSinceRelease = now.getTime() - releaseDate.getTime();
                        var daysSinceLatestRelease = Math.ceil(timeSinceRelease / (1000 * 60 * 60 * 24));
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        var newSeasonWindowInDays = configurationManager.video.newSeasonWindowInDays;
                        if (newSeasonWindowInDays && daysSinceLatestRelease < newSeasonWindowInDays) {
                            this.alternateText = String.load(String.id.IDS_VIDEO_NEW_SEASON_NOTIFICATION);
                            this._findNotificationForDisplay()
                        }
                    }
                }, expirationString: {
                    get: function get_expirationString() {
                        return this._expirationString
                    }, set: function set_expirationString(value) {
                            this._expirationString = value;
                            if (!this.displayedNotification) {
                                this.displayedDefaultShortNotificationUpdated();
                                this.displayedDefaultLongNotificationUpdated()
                            }
                        }
                }, displayedDefaultShortNotificationUpdated: function displayedDefaultShortNotificationUpdated() {
                    this.useAlternateTextStyle = !this.expirationString;
                    this._displayedShortNotificationUpdated(this.expirationString || this.alternateText || String.empty)
                }, displayedDefaultLongNotificationUpdated: function displayedDefaultLongNotificationUpdated() {
                    this.useAlternateTextStyle = !this.expirationString;
                    this._displayedLongNotificationUpdated(this.expirationString || this.alternateText || String.empty)
                }, _displayedShortNotificationUpdated: function _displayedShortNotificationUpdated(newValue) {
                    if (!this._unloaded)
                        this.domElement.textContent = newValue
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Pages", {ContentNotificationIconTileItem: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.ContentNotificationTileItem", null, function contentNotificationIconTileItem(){}, {
            _mediaItem: null, controlName: "contentNotificationIconTileItem", checkItem: function checkItem(item) {
                    return item.icon
                }, _delayInitialized: function delayInitialized() {
                    MS.Entertainment.Pages.ContentNotificationTileItem.prototype._delayInitialized.call(this);
                    this._commitMediaItem()
                }, mediaItem: {
                    get: function get_mediaItem() {
                        return this._mediaItem
                    }, set: function set_mediaItem(value) {
                            if (value !== this._mediaItem) {
                                this._mediaItem = value;
                                this._commitMediaItem()
                            }
                        }
                }, _commitMediaItem: function _commitMediaItem() {
                    if (!this._unloaded && this._hasDelayedInitialized) {
                        if (this._mediaItem)
                            this.contentNotifications = this._mediaItem.contentNotifications;
                        MS.Entertainment.UI.FileTransferService.pulseAsync(this._mediaItem)
                    }
                }, _displayedIconNotificationUpdated: function _displayedIconNotificationUpdated(newValue) {
                    MS.Entertainment.Pages.assert(!newValue || (newValue.length === 1), "Expected single icon character.");
                    if (!this._unloaded)
                        this.domElement.textContent = newValue
                }
        })})
})()
})();
/* >>>>>>/controls/modifier.js:16863 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    var modifierAlreadyOpen = false;
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        Modifier: MS.Entertainment.UI.Framework.defineUserControl("/Controls/Modifier.html#modifierTemplate", function modifierConstructor() {
            this._observableArrayChanged = this._observableArrayChanged.bind(this)
        }, {
            _selectionManagerEventHandlers: null, openPopup: null, minItems: 0, showDropDownArrow: true, showDescription: true, _tabPanel: null, isBeingDismissed: false, _selectionManager: null, calculateModifierPopoverPosition: true, allowSingleItemToShowList: false, _overrideDescription: false, _labelOverride: String.empty, _automaticFocusOverride: String.empty, _selectedItem: null, _items: null, popupShouldOpenAboveButton: false, deferUpdatesUntilInitialized: false, useSelectionManagerDataSourceAsItems: false, identifier: "", initialize: function initialize() {
                    if (!this.useSelectionManagerDataSourceAsItems)
                        this.selectionManager = new MS.Entertainment.UI.Framework.SelectionManager;
                    this.bind("descriptionLabel", this._descriptionLabelChanged.bind(this));
                    this.bind("descriptionLabelText", this._descriptionLabelChanged.bind(this));
                    this.bind("isRoamingSetting", this._settingsChanged.bind(this));
                    this.bind("settingsKey", this._settingsChanged.bind(this));
                    if (this.deferUpdatesUntilInitialized)
                        this._observableArrayChanged()
                }, unload: function unload() {
                    this.isBeingDismissed = true;
                    if (this.openPopup)
                        this.openPopup.hide();
                    if (this._selectionManagerEventHandlers) {
                        this._selectionManagerEventHandlers.cancel();
                        this._selectionManagerEventHandlers = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, freeze: function freeze() {
                    if (!MS.Entertainment.Utilities.isApp2) {
                        this.isBeingDismissed = true;
                        if (this.openPopup)
                            this.openPopup.hide()
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                }, thaw: function thaw() {
                    MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this);
                    this.isBeingDismissed = false
                }, selectionManager: {
                    get: function() {
                        return this._selectionManager
                    }, set: function(value) {
                            if (this._selectionManager !== value) {
                                var oldValue = this._selectionManager;
                                this._selectionManager = value;
                                if (this._selectionManagerEventHandlers) {
                                    this._selectionManagerEventHandlers.cancel();
                                    this._selectionManagerEventHandlers = null
                                }
                                this._selectionManagerEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this._selectionManager, {
                                    selectedItemChanged: this._selectionManagerSelectionChanged.bind(this), dataSourceChanged: this._selectionManagerDataContextChanged.bind(this)
                                });
                                this._selectionManagerDataContextChanged();
                                this._selectionManagerSelectionChanged();
                                this.notify("selectionManager", value, oldValue)
                            }
                        }
                }, selectedItem: {
                    get: function() {
                        return this._selectedItem
                    }, set: function(value) {
                            if (value !== WinJS.Binding.unwrap(this._selectedItem)) {
                                var oldValue = this._selectedItem;
                                this._selectedItem = value;
                                this._selectedItemChanged();
                                this.notify("selectedItem", value, oldValue)
                            }
                        }
                }, items: {
                    get: function() {
                        return this._items
                    }, set: function(value) {
                            if (value !== WinJS.Binding.unwrap(this._items)) {
                                var oldValue = this._items;
                                this._items = value;
                                this._itemsChanged(value, oldValue);
                                this.notify("items", value, oldValue)
                            }
                        }
                }, overrideDescription: {
                    get: function() {
                        return this._overrideDescription
                    }, set: function(value) {
                            this.updateAndNotify("overrideDescription", value);
                            if (this.overrideDescription)
                                this.descriptionLabelVisible = true
                        }
                }, labelOverride: {
                    get: function() {
                        return this._labelOverride
                    }, set: function(value) {
                            this._labelOverride = value;
                            if (this.labelControl && !this.overrideDescription)
                                this.labelControl.textContent = value;
                            else if (this.labelDescription && this.overrideDescription)
                                this.labelDescription.textContent = value;
                            if (this.isVoiceEnabled && this.labelOverride)
                                this.voicePhrase = this.labelOverride
                        }
                }, automaticFocusOverride: {
                    get: function() {
                        return this._automaticFocusOverride
                    }, set: function(value) {
                            this._automaticFocusOverride = value;
                            var focusItem = this.domElement.querySelector(".win-focusable");
                            if (focusItem)
                                focusItem.setAttribute("data-win-focus", this._automaticFocusOverride)
                        }
                }, _settingsChanged: function settingsChanged() {
                    if (this._selectionManager && this.settingsKey) {
                        this._selectionManager.isRoamingSetting = !MS.Entertainment.Utilities.isVideoApp2 && this.isRoamingSetting;
                        this._selectionManager.settingsKey = this.settingsKey
                    }
                }, _itemsChanged: function _itemsChanged(newValue, oldValue) {
                    if (oldValue && oldValue instanceof MS.Entertainment.ObservableArray)
                        oldValue.removeChangeListener(this._observableArrayChanged);
                    if (newValue && newValue instanceof MS.Entertainment.ObservableArray)
                        newValue.addChangeListener(this._observableArrayChanged);
                    if (this.selectionManager && !this.useSelectionManagerDataSourceAsItems)
                        if (this.selectionManager.dataSource !== this.items) {
                            this.selectionManager.settingsKey = this.settingsKey;
                            this.selectionManager.dataSource = this.items
                        }
                    this._observableArrayChanged()
                }, _observableArrayChanged: function _observableArrayChanged() {
                    if (this.deferUpdatesUntilInitialized && !this._initialized)
                        return;
                    this._constrainSelectedItem();
                    this._updateArrowVisibility();
                    this._updateControlVisibility();
                    if (!isNaN(this.tabIndex)) {
                        var elementToAttribute = this.domElement;
                        if (this._modifierContainer)
                            elementToAttribute = this._modifierContainer;
                        if (elementToAttribute)
                            if (this.items && (this.items.length > 1 || (this.items.length == 1 && this.allowSingleItemToShowList))) {
                                elementToAttribute.setAttribute("tabindex", this.tabIndex);
                                elementToAttribute.setAttribute("aria-haspopup", true);
                                elementToAttribute.disabled = false
                            }
                            else {
                                elementToAttribute.setAttribute("tabindex", -1);
                                elementToAttribute.removeAttribute("aria-haspopup");
                                elementToAttribute.disabled = true
                            }
                    }
                }, _selectedItemChanged: function _selectedItemChanged() {
                    var label;
                    var labelType;
                    this._constrainSelectedItem();
                    if (this.selectionManager)
                        this.selectionManager.selectedItem = this.selectedItem;
                    label = String.empty;
                    if (this.selectedItem && (this.selectedItem.label || this.selectedItem.title))
                        label = this.selectedItem.label ? this.selectedItem.label : this.selectedItem.title;
                    labelType = typeof label;
                    switch (labelType) {
                        case"string":
                            if (String.id[label])
                                label = String.load(label);
                            break;
                        default:
                            MS.Entertainment.UI.Controls.assert(false, "Unrecognized label type in modifier control.");
                            break
                    }
                    if (this.labelControl && (!this.labelOverride || this.overrideDescription))
                        this.labelControl.textContent = label;
                    if (this.isVoiceEnabled && !this.labelOverride)
                        this.voicePhrase = label;
                    (new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell).traceModifierControl_SelectionChanged(label, this.identifier)
                }, _selectionManagerSelectionChanged: function _selectionManagerSelectionChanged() {
                    var newSelectedItem = this.selectionManager ? this.selectionManager.selectedItem : null;
                    if (!this.selectedItem || this.selectedItem !== newSelectedItem)
                        this.selectedItem = newSelectedItem
                }, _selectionManagerDataContextChanged: function _selectionManagerDataContextChanged() {
                    if (this.useSelectionManagerDataSourceAsItems)
                        this.items = this._selectionManager && this._selectionManager.dataSource
                }, _descriptionLabelChanged: function _descriptionLabelChanged() {
                    if (!this.showDescription || !this.labelDescription || this.overrideDescription)
                        return;
                    if (this.descriptionLabel) {
                        this.labelDescription.textContent = String.load(this.descriptionLabel);
                        this.descriptionLabelVisible = true
                    }
                    else if (this.descriptionLabelText) {
                        this.labelDescription.textContent = this.descriptionLabelText;
                        this.descriptionLabelVisible = true
                    }
                    else
                        this.descriptionLabelVisible = false
                }, _constrainSelectedItem: function _constrainSelectedItem() {
                    if (this.useSelectionManagerDataSourceAsItems) {
                        this.selectionItem = this.selectionManager && this.selectionManager.selectedItem;
                        return
                    }
                    if (!this.items)
                        this.selectedItem = null;
                    else if (this.items.length <= this.minItems)
                        this.selectedItem = null;
                    else if (this.items instanceof MS.Entertainment.ObservableArray) {
                        var found = false;
                        for (var i = 0; i < this.items.length; i++)
                            if (this.items.item(i) === this.selectedItem || this.items.item(i) === WinJS.Binding.unwrap(this.selectedItem)) {
                                found = true;
                                break
                            }
                        if (!found)
                            this.selectedItem = (this.selectionManager && this.selectionManager.selectedItem) || this.items.item(0)
                    }
                    else if (this.items.indexOf(WinJS.Binding.unwrap(this.selectedItem)) < 0) {
                        var found = false;
                        for (var i = 0; i < this.items.length; i++)
                            if (this.items[i] === this.selectedItem || this.items[i] === WinJS.Binding.unwrap(this.selectedItem)) {
                                found = true;
                                break
                            }
                        if (!found)
                            this.selectedItem = (this.selectionManager && this.selectionManager.selectedItem)
                    }
                }, _updateControlVisibility: function _updateControlVisibility() {
                    if (!this.overrideControlVisibility)
                        if (!this.items || this.items.length <= this.minItems)
                            WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
                        else
                            WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay")
                }, _updateArrowVisibility: function _updateArrowVisibility() {
                    var elementToAttribute = this.domElement;
                    if (this._modifierContainer)
                        elementToAttribute = this._modifierContainer;
                    if (!this.items || (!this.allowSingleItemToShowList && this.items.length <= 1))
                        WinJS.Utilities.addClass(elementToAttribute, "dropDownDisabled");
                    else
                        WinJS.Utilities.removeClass(elementToAttribute, "dropDownDisabled");
                    if (!this.dropDownArrow)
                        return null;
                    if (this.showDropDownArrow && (!MS.Entertainment.Utilities.isMusicApp2 || (this.items && this.items.length >= this.minItems)))
                        WinJS.Utilities.removeClass(this.dropDownArrow, "removeFromDisplay");
                    else
                        WinJS.Utilities.addClass(this.dropDownArrow, "removeFromDisplay")
                }, setTabPanel: function setTabPanel(tabPanel) {
                    this._tabPanel = tabPanel
                }, onKeyDown: function onKeyDown(event) {
                    if (event.keyCode === WinJS.Utilities.Key.enter || event.keyCode === WinJS.Utilities.Key.space) {
                        this.onClicked();
                        event.stopPropagation();
                        event.preventDefault()
                    }
                }, onClicked: function onClicked() {
                    var boundingRect;
                    if (!this.items || (!this.allowSingleItemToShowList && this.items.length <= 1))
                        return;
                    var elementToAttribute = this.domElement;
                    if (this._modifierContainer)
                        elementToAttribute = this._modifierContainer;
                    if (this.toggleModifier) {
                        var selectedItem = this.selectionManager.selectedItem;
                        var currentSelectedIndex = Math.max(this.selectionManager.dataSource.indexOf(selectedItem), 0);
                        var items = this.selectionManager.dataSource;
                        var newIndex = (currentSelectedIndex + 1) % 2;
                        if (items instanceof MS.Entertainment.ObservableArray)
                            this.selectionManager.selectedItem = items.item(newIndex);
                        else if (Array.isArray(items))
                            this.selectionManager.selectedItem = items[newIndex];
                        else
                            MS.Entertainment.UI.Controls.fail("Unrecognized items list type in modifier control.")
                    }
                    else if (!this.openPopup && !modifierAlreadyOpen) {
                        var anchorElement;
                        if (this.calculateModifierPopoverPosition)
                            anchorElement = elementToAttribute;
                        this.openPopup = MS.Entertainment.UI.Controls.ModifierPopup.createModifierPopup(this.popupStyle, this.selectionManager, {
                            elementToAnchorTo: anchorElement, modifierControl: this, popupShouldOpenAboveButton: this.popupShouldOpenAboveButton
                        });
                        if (!this.isBeingDismissed) {
                            modifierAlreadyOpen = true;
                            if (elementToAttribute)
                                WinJS.Utilities.addClass(elementToAttribute, "showingList");
                            this.openPopup.show().then(function traceModifierPopupDismissed() {
                                if (elementToAttribute)
                                    WinJS.Utilities.removeClass(elementToAttribute, "showingList");
                                modifierAlreadyOpen = false;
                                this.openPopup = null;
                                (new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell).traceModifierControl_PopupClosed(this.identifier)
                            }.bind(this))
                        }
                    }
                }, getItem: function getItem(index) {
                    var items = WinJS.Binding.unwrap(this.items);
                    if (items instanceof MS.Entertainment.ObservableArray)
                        return items.item(index);
                    else if (Array.isArray(items))
                        return items[index];
                    else
                        MS.Entertainment.UI.Controls.fail("Unrecognized items list type in modifier control.")
                }
        }, {
            tabIndex: 0, descriptionLabel: null, descriptionLabelText: null, descriptionLabelVisible: false, popupStyle: null, settingsKey: null, isRoamingSetting: !MS.Entertainment.Utilities.isVideoApp2, overrideControlVisibility: false
        }), ModifierPopup: MS.Entertainment.UI.Framework.defineUserControl("/Controls/Modifier.html#modifierPopupTemplate", function modifierPopupConstructor(){}, {
                modifierControl: null, customStyle: null, topPadding: 0, bottomPadding: 0, selectedItemIndex: 0, _guesstimatedItemHeightPx: 50, _keyboardNavigationManager: null, _eventHandlers: null, _uiStateHandlers: null, descriptionLabel: null, anchorElement: null, _parentOverlay: null, initialize: function initialize() {
                        this._keyboardNavigationManager = new MS.Entertainment.Framework.KeyboardNavigationManager(this.scrollerElement, this.scrollerElement);
                        if (Array.isArray(this.customStyle))
                            this.customStyle.forEach(function(style) {
                                WinJS.Utilities.addClass(this.domElement, style)
                            }, this);
                        else if (this.customStyle)
                            WinJS.Utilities.addClass(this.domElement, this.customStyle);
                        this._eventHandlers = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                            keypress: function onKeyPress(event) {
                                if (event.keyCode === WinJS.Utilities.Key.escape)
                                    this.modifierControl.openPopup.hide()
                            }.bind(this), keyup: function onKeyUp(event) {
                                    if (event.keyCode === WinJS.Utilities.Key.dismissButton) {
                                        event.stopPropagation();
                                        this.modifierControl.openPopup.hide()
                                    }
                                }.bind(this)
                        });
                        if (this.modifierControl.descriptionLabel)
                            this.descriptionLabel = String.load(this.modifierControl.descriptionLabel);
                        else if (this.modifierControl.descriptionLabelText)
                            this.descriptionLabel = this.modifierControl.descriptionLabelText;
                        if (this.anchorElement) {
                            var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            this._uiStateHandlers = MS.Entertainment.UI.Framework.addEventHandlers(uiState, {windowresize: this.hide.bind(this)})
                        }
                        this.buildItems()
                    }, unload: function unload() {
                        if (this._eventHandlers) {
                            this._eventHandlers.cancel();
                            this._eventHandlers = null
                        }
                        if (this._uiStateHandlers) {
                            this._uiStateHandlers.cancel();
                            this._uiStateHandlers = null
                        }
                        this._parentOverlay = null;
                        MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                    }, hide: function hide() {
                        if (this._parentOverlay)
                            this._parentOverlay.hide()
                    }, setOverlay: function setOverlay(overlay) {
                        this._parentOverlay = overlay;
                        overlay.lightDismissEnabled = true
                    }, scrollerElement: {get: function() {
                            if (this.scroller && this.scroller._element)
                                return this.scroller._element;
                            return this.scroller
                        }}, buildItems: function buildItems() {
                        var items = [];
                        var i;
                        var selectedItem;
                        var indexOfSelectedItem = -1;
                        var entriesLoaded = 0;
                        this.domElement.addEventListener("ModifierPopupEntryLoaded", function entryLoaded(event) {
                            event.stopPropagation();
                            entriesLoaded++;
                            if (entriesLoaded === (indexOfSelectedItem + 1)) {
                                window.requestAnimationFrame(function() {
                                    if (this.entryList)
                                        this.entryList.bringItemIntoView(items[indexOfSelectedItem]);
                                    if (this.scrollerElement)
                                        this._keyboardNavigationManager.setFocusedItem(this.scrollerElement.querySelector(".initialSelectedModifierPopupEntry"))
                                }.bind(this));
                                (new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell).traceModifierControl_PopupOpened(this.modifierControl.identifier)
                            }
                        }.bind(this));
                        if (this.selectionManager && this.selectionManager.dataSource) {
                            selectedItem = WinJS.Binding.unwrap(this.selectionManager.selectedItem);
                            for (i = 0; i < this.selectionManager.dataSource.length; i++) {
                                var listItem = {
                                        item: this.selectionManager.dataSource.item ? this.selectionManager.dataSource.item(i) : this.selectionManager.dataSource[i], modifierControl: this.modifierControl, selectionManager: this.selectionManager
                                    };
                                if (!listItem.item.canExecute || listItem.item.canExecute()) {
                                    if (!listItem.item.isSeparator && indexOfSelectedItem === -1 && (!selectedItem || listItem.item === selectedItem)) {
                                        indexOfSelectedItem = i;
                                        this.selectedItemIndex = i;
                                        listItem.isInitialSelected = true
                                    }
                                    items.push(listItem)
                                }
                            }
                            if (indexOfSelectedItem === -1 && items.length > 0) {
                                items[0].isInitialSelected = true;
                                indexOfSelectedItem = 0
                            }
                            var screenItems = Math.round(((MS.Entertainment.Utilities.getWindowHeight() - 150) / this._guesstimatedItemHeightPx));
                            this.entryList.longListDeferalItemLimit = screenItems;
                            this.entryList.dataSource = items
                        }
                    }
            }, {items: null}, {
                calculatePositionFromBoundingRect: function calculatePositionFromBoundingRect(boundingRect, popupShouldOpenAboveButton) {
                    var left;
                    var right;
                    switch (MS.Entertainment.Utilities.getTextDirection()) {
                        case MS.Entertainment.Utilities.TextDirections.LeftToRight:
                            left = Math.round(boundingRect.left) + "px";
                            right = "auto";
                            break;
                        case MS.Entertainment.Utilities.TextDirections.RightToLeft:
                            right = (document.body.clientWidth - Math.round(boundingRect.right)) + "px";
                            left = "auto";
                            break
                    }
                    var top = popupShouldOpenAboveButton ? "auto" : Math.round(boundingRect.top + boundingRect.height) + "px";
                    var bottom = popupShouldOpenAboveButton ? document.body.clientHeight - Math.round(boundingRect.top) + "px" : "auto";
                    return {
                            left: left, top: top, right: right, bottom: bottom
                        }
                }, createModifierPopup: function createModifierPopup(popupStyle, selectionManager, optionalParameters) {
                        var anchorElement = optionalParameters && optionalParameters.elementToAnchorTo;
                        var boundingRect;
                        var modifierControl = optionalParameters && optionalParameters.modifierControl;
                        var openAbove = optionalParameters && optionalParameters.popupShouldOpenAboveButton;
                        if (anchorElement)
                            boundingRect = anchorElement.getBoundingClientRect();
                        boundingRect = boundingRect || {
                            left: 0, width: 0, right: 0, top: 0, bottom: 0, height: 0
                        };
                        var position = MS.Entertainment.UI.Controls.ModifierPopup.calculatePositionFromBoundingRect(boundingRect, openAbove);
                        var fakeModifierControl = false;
                        if (!modifierControl) {
                            modifierControl = {};
                            fakeModifierControl = true
                        }
                        var popupClass = "MS.Entertainment.UI.Controls.ModifierPopup";
                        if (MS.Entertainment.Utilities.isApp2)
                            popupClass = "MS.Entertainment.UI.Controls.App2ModifierPopup";
                        var openPopup = MS.Entertainment.UI.Shell.createOverlay(popupClass, {
                                modifierControl: modifierControl, selectionManager: selectionManager, customStyle: popupStyle, topPadding: Math.round(boundingRect.top), bottomPadding: MS.Entertainment.Utilities.getWindowHeight() - Math.round(boundingRect.bottom), anchorElement: anchorElement
                            }, {
                                left: position.left, right: position.right, bottom: position.bottom, top: position.top, customStyle: "modifierPopupContainer", autoSetFocus: false, lightDismissEnabled: MS.Entertainment.Utilities.isApp2, enableKeyboardLightDismiss: MS.Entertainment.Utilities.isApp2, focusPreviouslyFocusedElement: false, showAnimation: function() {
                                        return WinJS.Promise.as()
                                    }
                            });
                        if (fakeModifierControl)
                            modifierControl.openPopup = openPopup;
                        return openPopup
                    }, selectTemplateOverride: function selectTemplateOverride(item) {
                        var template = this.itemTemplate;
                        if (item && item.item && item.item.templateOverride)
                            template = item.item.templateOverride;
                        return MS.Entertainment.UI.Framework.loadTemplate(template, null, true).then(function(templateControl) {
                                return templateControl
                            })
                    }
            }), ModifierPopupEntry: MS.Entertainment.UI.Framework.defineUserControl("/Controls/Modifier.html#modifierPopupEntryTemplate", null, {
                modifierControl: null, _skipDefer: true, item: null, isInitialSelected: false, preventHideDuringInitialize: true, allowAnimations: false, _gotData: function _gotData(data) {
                        var domEvent;
                        if (data.item && data.item.isSeparator) {
                            WinJS.Utilities.addClass(this.domElement, "modifierSeparator");
                            WinJS.Utilities.addClass(this.domElement, "disabled");
                            this.domElement.setAttribute("disabled", "disabled");
                            var modifierPopupEntryDomElement = this.domElement.firstElementChild;
                            WinJS.Utilities.removeClass(modifierPopupEntryDomElement, "win-focusable")
                        }
                        else {
                            var label = String.empty;
                            if (data.item && (data.item.label || data.item.title))
                                label = data.item.label ? data.item.label : data.item.title;
                            var labelType = typeof label;
                            switch (labelType) {
                                case"string":
                                    if (String.id[label])
                                        this.text.textContent = String.load(label);
                                    else
                                        this.text.textContent = label;
                                    if (this.isVoiceEnabled && data.item) {
                                        this.voicePhrase = data.item.voicePhrase || label;
                                        this.voicePhoneticPhrase = data.item.voicePhoneticPhrase || MS.Entertainment.UI.App2.VoiceStatics.emptyPronunciationValue;
                                        this.voiceConfidence = data.item.voiceConfidence || MS.Entertainment.UI.App2.VoiceStatics.defaultConfidence
                                    }
                                    break;
                                default:
                                    MS.Entertainment.UI.Controls.fail("Unrecognized label type in modifier control popup entry: " + labelType);
                                    break
                            }
                            if (data.isInitialSelected)
                                WinJS.Utilities.addClass(this.background, "initialSelectedModifierPopupEntry");
                            if (data.modifierControl._tabPanel)
                                MS.Entertainment.Framework.AccUtils.createAndAddAriaLink(this.domElement, data.modifierControl._tabPanel, "aria-controls");
                            domEvent = document.createEvent("Event");
                            domEvent.initEvent("ModifierPopupEntryLoaded", true, true);
                            this.domElement.dispatchEvent(domEvent)
                        }
                    }, onClicked: function onClicked() {
                        var clickedItem = this.data.item;
                        if (clickedItem && clickedItem.isSeparator)
                            return;
                        this.data.selectionManager.selectedItem = clickedItem;
                        WinJS.Utilities.addClass(this.background, "selectedModifierPopupEntry");
                        MS.Entertainment.Utilities.Telemetry.logModifierClicked(clickedItem.id, this.text.textContent);
                        if (this.data.modifierControl.openPopup)
                            this.data.modifierControl.openPopup.hide();
                        else
                            this.data.modifierControl.backingData.openPopup.hide()
                    }, _data: null, data: {
                        get: function() {
                            return this._data
                        }, set: function(value) {
                                if (value === this._data)
                                    return;
                                this._data = value;
                                if (!value)
                                    return;
                                this._gotData(value)
                            }
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ModifierPopupEntryAdditionalStyles: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ModifierPopupEntry", "/Controls/Modifier.html#modifierPopupEntryTemplate", null, {_gotData: function _gotData(data) {
                var addedStyle = WinJS.Utilities.getMember("item.styleName", data);
                if (addedStyle && this.domElement)
                    WinJS.Utilities.addClass(this.domElement, addedStyle);
                MS.Entertainment.UI.Controls.ModifierPopupEntry.prototype._gotData.call(this, data)
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {App2ModifierPopup: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ModifierPopup", "/Controls/Modifier.html#app2ModifierPopupTemplate", function app2ModifierPopupConstructor(){}, {onCloseClick: function onCloseClick() {
                var domEvent = document.createEvent("Event");
                domEvent.initEvent("dismissoverlay", true, true);
                this.domElement.dispatchEvent(domEvent)
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ModifierButton: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Modifier", "/Controls/Modifier.html#modifierButtonTemplate", function modifierButtonConstructor(){}, {
            calculateModifierPopoverPosition: false, initialize: function() {
                    this.onClickWithContext = WinJS.Utilities.markSupportedForProcessing(this.onClickWithContext.bind(this));
                    MS.Entertainment.UI.Controls.Modifier.prototype.initialize.call(this)
                }, onClickWithContext: function onClickWithContext(args) {
                    this.onClicked(args)
                }
        }, {buttonText: null})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {TemplatelessModifier: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Modifier", null, function templateLessModifier() {
            this.labelControl = this.domElement
        }, {
            _clickHandler: null, _keyDownHandler: null, _activateEventHandlers: null, templateStorage: null, initialize: function inititialize() {
                    MS.Entertainment.UI.Controls.Modifier.prototype.initialize.call(this);
                    this._activateEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                        click: this.onClicked.bind(this), keydown: this.onKeyDown.bind(this)
                    })
                }, unload: function unload() {
                    if (this._activateEventHandlers)
                        this._activateEventHandlers.cancel();
                    MS.Entertainment.UI.Controls.Modifier.prototype.unload.call(this)
                }
        })})
})();
(function runVoiceMixins() {
    MS.Entertainment.Utilities.runVoicePropertyMixins(MS.Entertainment.UI.Controls.Modifier);
    MS.Entertainment.Utilities.runVoicePropertyMixins(MS.Entertainment.UI.Controls.ModifierPopupEntry)
})()
})();
/* >>>>>>/controls/headercontrol.js:17414 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Controls) {
                var HeaderPivotControl = (function(_super) {
                        __extends(HeaderPivotControl, _super);
                        function HeaderPivotControl() {
                            _super.apply(this, arguments);
                            this.containerStyle = MS.Entertainment.UI.Controls.ItemsControl.ContainerStyles.horizontalFlow;
                            this.keyboardNavigationManagerClass = MS.Entertainment.Framework.KeyboardNavigationManager
                        }
                        HeaderPivotControl.prototype.initialize = function() {
                            _super.prototype.initialize.call(this);
                            if (this.domElement)
                                this.domElement.setAttribute("data-win-automationid", "header_pivot")
                        };
                        return HeaderPivotControl
                    })(MS.Entertainment.UI.Controls.VerticalPivotControl);
                Controls.HeaderPivotControl = HeaderPivotControl;
                var HeaderControl = (function(_super) {
                        __extends(HeaderControl, _super);
                        function HeaderControl(element, options) {
                            _super.call(this, element, options);
                            if (!this.pivotsDropDownResolution)
                                this.pivotsDropDownResolution = 825;
                            this.title = this.title || String.empty;
                            MS.Entertainment.UI.Framework.processDeclarativeControlContainer(this)
                        }
                        Object.defineProperty(HeaderControl.prototype, "dataContext", {
                            get: function() {
                                return this._dataContext
                            }, set: function(value) {
                                    if (this._dataContext !== value) {
                                        this.updateAndNotify("dataContext", value);
                                        this._updateStateFromDataContext();
                                        if (this._dataContextBindings)
                                            this._dataContextBindings.cancel();
                                        this._dataContextBindings = WinJS.Binding.bind(this._dataContext, {
                                            viewStateViewModel: {viewState: this._updateModifiers.bind(this)}, title: this._updateStateFromDataContext.bind(this)
                                        })
                                    }
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(HeaderControl.prototype, "title", {
                            get: function() {
                                return this._title
                            }, set: function(value) {
                                    this.updateAndNotify("title", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(HeaderControl.prototype, "pivots", {
                            get: function() {
                                return this._pivots
                            }, set: function(value) {
                                    this.updateAndNotify("pivots", value)
                                }, enumerable: true, configurable: true
                        });
                        HeaderControl.prototype.initialize = function() {
                            _super.prototype.initialize.call(this);
                            if (this.domElement)
                                if (this.domElement.attachEvent) {
                                    this._onResizeCallback = this._onResize.bind(this);
                                    this.domElement.attachEvent("onresize", this._onResizeCallback)
                                }
                                else
                                    this._domEventHandler = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {mselementresize: this._onResize.bind(this)})
                        };
                        HeaderControl.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._navigationHandlers) {
                                this._navigationHandlers.cancel();
                                this._navigationHandlers = null
                            }
                            if (this._buttonEventHandlers) {
                                this._buttonEventHandlers.cancel();
                                this._buttonEventHandlers = null
                            }
                            if (this._domEventHandler) {
                                this._domEventHandler.cancel();
                                this._domEventHandler = null
                            }
                            if (this._onResizeCallback && this.domElement) {
                                this.domElement.detachEvent("onresize", this._onResizeCallback);
                                this._onResizeCallback = null
                            }
                            if (this._dataContextBindings) {
                                this._dataContextBindings.cancel();
                                this._dataContextBindings = null
                            }
                        };
                        HeaderControl.prototype._updateStateFromDataContext = function() {
                            if (this.dataContext) {
                                this.title = this.dataContext.title;
                                this.pivots = this.dataContext.pivotsSelectionManager
                            }
                            else {
                                this.title = String.empty;
                                this.pivots = null
                            }
                        };
                        HeaderControl.prototype._onResize = function() {
                            if (!this.domElement || this._unloaded || !this._pivotsButtons || !this._pivotsDropDown)
                                return;
                            if (this.domElement.clientWidth >= this.pivotsDropDownResolution) {
                                WinJS.Utilities.removeClass(this._pivotsButtons.domElement, "removeFromDisplay");
                                WinJS.Utilities.addClass(this._pivotsDropDown, "removeFromDisplay")
                            }
                            else {
                                WinJS.Utilities.removeClass(this._pivotsDropDown, "removeFromDisplay");
                                WinJS.Utilities.addClass(this._pivotsButtons.domElement, "removeFromDisplay")
                            }
                            this._updateModifiers()
                        };
                        HeaderControl.prototype._updateModifiers = function() {
                            if (this._unloaded || !this._sortsContainer)
                                return;
                            var modifiers = WinJS.Utilities.query(".modifierControl", this._sortsContainer);
                            modifiers.forEach(function(modifierContainer) {
                                if (modifierContainer.parentElement.offsetTop > modifierContainer.parentElement.clientTop)
                                    WinJS.Utilities.addClass(modifierContainer, "hideFromDisplay");
                                else
                                    WinJS.Utilities.removeClass(modifierContainer, "hideFromDisplay")
                            })
                        };
                        HeaderControl.isDeclarativeControlContainer = true;
                        return HeaderControl
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.HeaderControl = HeaderControl
            })(UI.Controls || (UI.Controls = {}));
            var Controls = UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.HeaderPivotControl);
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.HeaderControl)
})();
/* >>>>>>/controls/galleryhost.js:17566 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Controls) {
                var FocusedItemMovedDetail = (function() {
                        function FocusedItemMovedDetail(newIndex) {
                            this.newIndex = newIndex
                        }
                        return FocusedItemMovedDetail
                    })();
                Controls.FocusedItemMovedDetail = FocusedItemMovedDetail;
                var GalleryHost = (function(_super) {
                        __extends(GalleryHost, _super);
                        function GalleryHost(element, options) {
                            _super.call(this, element, options);
                            if (this.delayInitializeChildren === undefined)
                                this.delayInitializeChildren = true;
                            if (this.skipProcessDeclarative === undefined)
                                this.skipProcessDeclarative = false;
                            this._selectTemplateResults = {};
                            if (!this.skipProcessDeclarative)
                                MS.Entertainment.UI.Framework.processDeclarativeControlContainer(this)
                        }
                        GalleryHost.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._dataContextEvents) {
                                this._dataContextEvents.cancel();
                                this._dataContextEvents = null
                            }
                            if (this._galleryControl)
                                this._galleryControl.clearSelectionHandlers();
                            this._selectTemplateResults = null
                        };
                        Object.defineProperty(GalleryHost.prototype, "dataContext", {
                            get: function() {
                                return this._dataContext
                            }, set: function(value) {
                                    this.updateAndNotify("dataContext", value);
                                    this._updateEventHandlersForDataContext()
                                }, enumerable: true, configurable: true
                        });
                        GalleryHost.prototype._updateEventHandlersForDataContext = function() {
                            if (this._dataContextEvents) {
                                this._dataContextEvents.cancel();
                                this._dataContextEvents = null
                            }
                            if (this.dataContext && !this._unloaded) {
                                this._dataContextEvents = MS.Entertainment.Utilities.addEventHandlers(this.dataContext, {
                                    itemsChanged: this.refresh.bind(this), selectedTemplateChanged: this._onSelectedTemplateChangedAndRefresh.bind(this), containingMediaChanged: this._onContainingMediaChanged.bind(this), selectionHandlersChanged: this._onSelectionHandlersChanged.bind(this), filterValueChanged: this._onFilterValueChanged.bind(this), shouldClearSelection: this._onShouldClearSelection.bind(this), delayLoaded: this._onDelayLoadedDataContext.bind(this), mediaContextChanged: this._onMediaContextChanged.bind(this), primaryItemIndexChanged: this._onPrimaryItemIndexChanged.bind(this), focusedItemMoved: this._onFocusedItemMoved.bind(this)
                                });
                                this._onSelectedTemplateChanged();
                                this._onContainingMediaChanged();
                                this._onMediaContextChanged();
                                this._onSelectionHandlersChanged();
                                this._onFilterValueChanged();
                                this.refresh();
                                if (this.dataContext.isDelayInitialized)
                                    this._onDelayLoadedDataContext()
                            }
                        };
                        GalleryHost.prototype.refresh = function() {
                            var _this = this;
                            if (this._unloaded || !this._galleryControl || !this.dataContext)
                                return;
                            var selectedTemplate;
                            if (this._selectedTemplateChanged) {
                                this._selectedTemplateChanged = false;
                                selectedTemplate = this.dataContext.selectedTemplate
                            }
                            if (selectedTemplate) {
                                GalleryHost.optionalTemplateProperties.forEach(function(key) {
                                    _this._galleryControl[key] = _this._mapProperty(key, selectedTemplate[key])
                                });
                                GalleryHost.requiredTemplateProperties.forEach(function(key) {
                                    MS.Entertainment.UI.Controls.assert(!!(key in selectedTemplate), "The selected gallery template is missing an option, this missing option must be set. key = " + key);
                                    if (key in selectedTemplate)
                                        _this._galleryControl[key] = _this._mapProperty(key, selectedTemplate[key])
                                });
                                if (this._galleryControl.grouper) {
                                    this._galleryControl.grouper.keyPropertyName = selectedTemplate.grouperField;
                                    this._galleryControl.grouper.dataAugmentation = selectedTemplate.grouperDataAugmentation;
                                    this._galleryControl.grouper.useKeyAsData = selectedTemplate.grouperKeyAsData
                                }
                            }
                            this._galleryControl.queryToPause = this.dataContext.pausableQuery;
                            this._galleryControl.initialInvoked = this.dataContext.initialInvokedItem;
                            this._galleryControl.initialVisible = this.dataContext.primaryItemIndex;
                            this._galleryControl.dataSource = this.dataContext.items
                        };
                        GalleryHost.prototype._onSelectedTemplateChangedAndRefresh = function() {
                            this._onSelectedTemplateChanged();
                            if (this.dataContext && !this.dataContext.isDisposed)
                                this.refresh()
                        };
                        GalleryHost.prototype._onSelectedTemplateChanged = function() {
                            this._selectedTemplateChanged = true
                        };
                        GalleryHost.prototype._onContainingMediaChanged = function() {
                            if (this._galleryControl && this._galleryControl.mediaContext)
                                this._galleryControl.mediaContext.containingMedia = this.dataContext.containingMedia
                        };
                        GalleryHost.prototype._onSelectionHandlersChanged = function() {
                            if (this._galleryControl && this._galleryControl.setSelectionHandlers)
                                this._galleryControl.setSelectionHandlers(this.dataContext.selectionHandlers)
                        };
                        GalleryHost.prototype._onFilterValueChanged = function() {
                            if (this._galleryControl)
                                this._galleryControl.updateCollectionFilter(this.dataContext.filterValue)
                        };
                        GalleryHost.prototype._onPrimaryItemIndexChanged = function(args) {
                            if (args && args.detail && this._galleryControl)
                                this._galleryControl.safeFocusAndEnsureVisible(args.detail.newValue)
                        };
                        GalleryHost.prototype._onFocusedItemMoved = function(args) {
                            if (args && args.detail && this._galleryControl)
                                this._galleryControl.safeFocusAndEnsureVisible(args.detail.newIndex)
                        };
                        GalleryHost.prototype._onShouldClearSelection = function() {
                            if (this._galleryControl) {
                                if (this._galleryControl.clearSelection)
                                    this._galleryControl.clearSelection();
                                if (this._galleryControl.clearInvocation)
                                    this._galleryControl.clearInvocation()
                            }
                        };
                        GalleryHost.prototype._onDelayLoadedDataContext = function() {
                            var _this = this;
                            if (this._galleryControl && this.delayInitializeChildren) {
                                this.delayInitializeChildren = false;
                                MS.Entertainment.Utilities.schedulePromiseBelowNormal(null, "GalleryHost::_onDelayLoadedDataContext").done(function() {
                                    if (_this._galleryControl) {
                                        _this._galleryControl.delayInitialize();
                                        _this._onContainingMediaChanged()
                                    }
                                })
                            }
                        };
                        GalleryHost.prototype._onMediaContextChanged = function() {
                            if (this.dataContext && this.dataContext.mediaContext && this._galleryControl)
                                this._galleryControl.mediaContext = this.dataContext.mediaContext
                        };
                        GalleryHost.prototype._mapTemplate = function(templateName) {
                            var newTemplate;
                            var selectionQuery;
                            if (!this._unloaded && templateName && templateName.lastIndexOf(GalleryHost._selectKey, 0) == 0) {
                                selectionQuery = templateName.substr(GalleryHost._selectKey.length, templateName.length - GalleryHost._selectKey.length - 1);
                                MS.Entertainment.UI.Controls.assert(!!selectionQuery, "Did you forget to add a selectionQuery?")
                            }
                            if (selectionQuery)
                                if (selectionQuery in this._selectTemplateResults)
                                    newTemplate = this._selectTemplateResults[selectionQuery];
                                else {
                                    newTemplate = WinJS.UI.scopedSelect(selectionQuery, this.domElement);
                                    this._selectTemplateResults[selectionQuery] = newTemplate
                                }
                            return newTemplate || templateName
                        };
                        Object.defineProperty(GalleryHost.prototype, "_propertyMappers", {
                            get: function() {
                                var mapTemplateCallback = this._mapTemplate.bind(this);
                                this.__propertyMappers = this.__propertyMappers || {
                                    itemTemplate: mapTemplateCallback, headerTemplate: mapTemplateCallback, snappedItemTemplate: mapTemplateCallback, unsnappedItemTemplate: mapTemplateCallback, zoomedOutTemplate: mapTemplateCallback
                                };
                                return this.__propertyMappers
                            }, enumerable: true, configurable: true
                        });
                        GalleryHost.prototype._mapProperty = function(propertyName, propertyValue) {
                            if (propertyName in this._propertyMappers)
                                propertyValue = this._propertyMappers[propertyName](propertyValue);
                            return propertyValue
                        };
                        Object.defineProperty(GalleryHost, "optionalTemplateProperties", {
                            get: function() {
                                return ["templateSelectorConstructor", "itemTemplate", "snappedItemTemplate", "unsnappedItemTemplate", "panelTemplate", "zoomedOutTemplate", "panelOptions", "actionTemplate", "headerTemplate", "headerPosition", "grouperType", "maxSelectionCount", "backdropColor", "invokeHelperFactory", "actionOptions", "emptyGalleryTemplate", "headerType", "headerPosition", "listViewClassName", "orientation", "maxRows", "grouperItemThreshold", "itemsDraggable", "itemsReorderable", "debugId"]
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(GalleryHost, "requiredTemplateProperties", {
                            get: function() {
                                return ["allowZoom", "allowSelectAll", "forceInteractive", "delayHydrateLibraryId", "minimumListLength", "selectionStyleFilled", "layout", "zoomedOutLayout", "tap", "invokeBehavior", "selectionMode", "swipeBehavior"]
                            }, enumerable: true, configurable: true
                        });
                        GalleryHost.isDeclarativeControlContainer = true;
                        GalleryHost._selectKey = "select(";
                        return GalleryHost
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.GalleryHost = GalleryHost
            })(UI.Controls || (UI.Controls = {}));
            var Controls = UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.GalleryHost)
})();
/* >>>>>>/components/playback/playbacktrace.js:17776 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.Platform.Playback", {Etw: MS.Entertainment.UI.Framework.define(null, {}, {
            _getEtwProvider: (function PlaybackEtw_getEtwProvider() {
                var playbackEtwProvider;
                return function _getEtwProvider() {
                        if (!playbackEtwProvider)
                            playbackEtwProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Pipeline;
                        return playbackEtwProvider
                    }
            })(), traceString: function PlaybackEtw_traceString(s) {
                    if (this._getEtwProvider)
                        this._getEtwProvider().tracePlayback_WPP(s)
                }, tracePlayerStateChanged: function PlaybackEtw_tracePlayerStateChanged(newState, oldState) {
                    this._getEtwProvider().tracePlayback_PlayerStateChanged(newState, oldState)
                }, traceTargetTransportStateSet: function PlaybackEtw_traceTargetTransportStateSet(wannaBeState, currentState) {
                    this._getEtwProvider().tracePlayback_TargetTransportStateSet(wannaBeState, currentState)
                }, traceTransportStateChanged: function PlaybackEtw_traceTransportStateChanged(newState, oldState, isVideo) {
                    this._getEtwProvider().tracePlayback_TransportStateChanged(newState, oldState);
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var shouldDisableTelemetry = !configurationManager.telemetry.enabled || MS.Entertainment.Utilities.isTestApp;
                    if (!shouldDisableTelemetry)
                        if (newState !== oldState)
                            if (newState === MS.Entertainment.Platform.Playback.TransportState.playing)
                                if (isVideo)
                                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.userTimeTelemetryManager).videoPlaybackStart();
                                else
                                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.userTimeTelemetryManager).musicPlaybackStart();
                            else if (newState === MS.Entertainment.Platform.Playback.TransportState.paused || newState === MS.Entertainment.Platform.Playback.TransportState.stopped)
                                if (isVideo)
                                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.userTimeTelemetryManager).videoPlaybackStop();
                                else
                                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.userTimeTelemetryManager).musicPlaybackStop()
                }, traceMediaLoaded: function PlaybackEtw_traceMediaLoaded(isNext, mediaInstance, durationMsec) {
                    if (mediaInstance)
                        if (isNext)
                            this._getEtwProvider().tracePlayback_NextMediaLoaded(mediaInstance.source, mediaInstance.mediaType, mediaInstance.protectionState, mediaInstance.startPosition, mediaInstance.cookie, durationMsec);
                        else {
                            this._getEtwProvider().tracePlayback_CurrentMediaLoaded(mediaInstance.source, mediaInstance.mediaType, mediaInstance.protectionState, mediaInstance.startPosition, mediaInstance.cookie, durationMsec);
                            MS.Entertainment.Utilities.Telemetry.logPlaybackHappened(mediaInstance)
                        }
                }, traceControlInitialized: function PlaybackEtw_traceControlInitialized() {
                    this._getEtwProvider().tracePlayback_ControlInitialized()
                }, traceSessionInitialized: function PlaybackEtw_traceSessionInitialized() {
                    this._getEtwProvider().tracePlayback_SessionInitialized()
                }, traceSetMedia: function PlaybackEtw_traceSetMedia(mediaInstance) {
                    this._getEtwProvider().tracePlayback_SetMedia(mediaInstance.source, mediaInstance.mediaType, mediaInstance.protectionState, mediaInstance.startPosition, mediaInstance.cookie, 0)
                }, traceSetNextMedia: function PlaybackEtw_traceSetNextMedia(readyForNext, mediaInstance) {
                    this._getEtwProvider().tracePlayback_SetNextMedia(readyForNext, mediaInstance.source, mediaInstance.mediaType, mediaInstance.protectionState, mediaInstance.startPosition, mediaInstance.cookie)
                }, traceSwitchingToNextMedia: function PlaybackEtw_traceSwitchingToNextMedia(mediaSource) {
                    this._getEtwProvider().tracePlayback_SwitchingToNextMedia(mediaSource)
                }, traceNextMediaStarted: function PlaybackEtw_traceNextMediaStarted(mediaSource) {
                    this._getEtwProvider().tracePlayback_NextMediaStarted(mediaSource)
                }, tracePlaybackEnableTimeUpdate: function PlaybackEtw_tracePlaybackEnableTimeUpdate(currentPosition) {
                    this._getEtwProvider().tracePlayback_EnableTimeUpdate(currentPosition)
                }, tracePlaybackDisableTimeUpdate: function PlaybackEtw_tracePlaybackDisableTimeUpdate(currentPosition) {
                    this._getEtwProvider().tracePlayback_DisableTimeUpdate(currentPosition)
                }, tracePlaybackForceTimeUpdate: function PlaybackEtw_tracePlaybackForceTimeUpdate(currentPosition) {
                    this._getEtwProvider().tracePlayback_ForceTimeUpdate(currentPosition)
                }, tracePlaybackPBMSoundLevelChanged: function PlaybackEtw_tracePlaybackPBMSoundLevelChanged(soundLevel, currentTransportState) {
                    this._getEtwProvider().tracePlayback_PBMSoundLevelChanged(soundLevel, currentTransportState)
                }, tracePlaylistSetDataSourceBegin: function PlaybackEtw_tracePlaylistSetDataSourceBegin() {
                    this._getEtwProvider().tracePlaylist_SetDataSourceBegin()
                }, tracePlaylistSetDataSourceEnd: function PlaybackEtw_tracePlaylistSetDataSourceEnd() {
                    this._getEtwProvider().tracePlaylist_SetDataSourceEnd()
                }, tracePlaylistInterpretingData: function PlaybackEtw_tracePlaylistInterpretingData() {
                    this._getEtwProvider().tracePlaylist_InterpretingData()
                }, tracePlaylistActivate: function PlaybackEtw_tracePlaylistActivate(index, startPosition, isShuffle, isRepeat) {
                    this._getEtwProvider().tracePlaylist_Activate(index, startPosition, isShuffle, isRepeat)
                }, tracePlaylistSetMedia: function PlaybackEtw_tracePlaylistSetMedia(mediaInstance) {
                    this._getEtwProvider().tracePlaylist_SetMedia(mediaInstance.source, mediaInstance.mediaType, mediaInstance.protectionState, mediaInstance.startPosition, mediaInstance.cookie)
                }, tracePlaylistSetNextMedia: function PlaybackEtw_tracePlaylistSetNextMedia(mediaInstance) {
                    this._getEtwProvider().tracePlaylist_SetNextMedia(mediaInstance.source, mediaInstance.mediaType, mediaInstance.protectionState, mediaInstance.startPosition, mediaInstance.cookie)
                }, tracePlaybackError: function PlaybackEtw_tracePlaybackError(errorCode, extendedCode, context) {
                    this._getEtwProvider().tracePlayback_ErrorOccurred(errorCode, extendedCode || 0, context || "")
                }, tracePlaylogBookmarkLoad: function PlaybackEtw_tracePlaylogBookmarkLoad(bookmark, playFromBookmark) {
                    this._getEtwProvider().tracePlaylog_BookmarkLoad(bookmark, playFromBookmark)
                }, tracePlaylogBookmarkSave: function PlaybackEtw_tracePlaylogBookmarkSave(bookmark) {
                    this._getEtwProvider().tracePlaylog_BookmarkSave(bookmark)
                }, tracePlaylogPlayCountLoad: function PlaybackEtw_tracePlaylogPlayCountLoad(count) {
                    this._getEtwProvider().tracePlaylog_PlayCountLoad(count)
                }, tracePlaylogPlayCountSave: function PlaybackEtw_tracePlaylogPlayCountSave(count) {
                    this._getEtwProvider().tracePlaylog_PlayCountSave(count)
                }, tracePlaylogPlayedLoad: function PlaybackEtw_tracePlaylogPlayedLoad(played) {
                    this._getEtwProvider().tracePlaylog_PlayedLoad(played)
                }, tracePlaylogPlayedSave: function PlaybackEtw_tracePlaylogPlayedSave(played) {
                    this._getEtwProvider().tracePlaylog_PlayedSave(played)
                }, traceDRMRootLicenseRefreshAccount: function PlaybackEtw_traceDRMRootLicenseRefreshAccount(subscription, tunerActivated) {
                    this._getEtwProvider().traceDRM_RootLicenseRefresh_Account(subscription, tunerActivated)
                }, traceDRMRootLicenseRefreshDetails: function PlaybackEtw_traceDRMRootLicenseRefreshDetails(now, lastRefresh, spanMs) {
                    this._getEtwProvider().traceDRM_RootLicenseRefresh_Details(now, lastRefresh, spanMs)
                }, traceDRMRootLicenseRefreshInvoked: function PlaybackEtw_traceDRMRootLicenseRefreshInvoked() {
                    this._getEtwProvider().traceDRM_RootLicenseRefresh_Invoked()
                }, traceDRMRootLicenseRefreshCompleted: function PlaybackEtw_traceDRMRootLicenseRefreshCompleted(status) {
                    this._getEtwProvider().traceDRM_RootLicenseRefresh_Completed(status)
                }, traceDRMReportMeteringAccount: function PlaybackEtw_traceDRMReportMeteringAccount(subscription, tunerActivated, meteringCertificate) {
                    this._getEtwProvider().traceDRM_ReportMetering_Account(subscription, tunerActivated, meteringCertificate)
                }, traceDRMReportMeteringInvoked: function PlaybackEtw_traceDRMReportMeteringInvoked() {
                    this._getEtwProvider().traceDRM_ReportMetering_Invoked()
                }, traceDRMReportMeteringCompleted: function PlaybackEtw_traceDRMReportMeteringCompleted(status) {
                    this._getEtwProvider().traceDRM_ReportMetering_Completed(status)
                }, traceCCRendererGetTTMLFilepath: function PlaybackEtw_traceCCRendererGetTTMLFilepath(state, smid, miid, lcid, filePath) {
                    this._getEtwProvider().traceClosedCaptions_RendererGetTTMLFilepath(state, smid ? smid : String.empty, miid ? miid : String.empty, lcid, filePath ? filePath : String.empty)
                }, traceCCRendererLoadTTMLFile: function PlaybackEtw_traceCCRendererLoadTTMLFile(state, filePath) {
                    this._getEtwProvider().traceClosedCaptions_RendererLoadTTMLFile(state, filePath ? filePath : String.empty)
                }, traceCCEnterRenderingLoop: function PlaybackEtw_traceCCEnterRenderingLoop(currentPosition, transportState) {
                    this._getEtwProvider().traceClosedCaptions_EnterRenderingLoop(currentPosition ? currentPosition : 0, transportState ? transportState : String.empty)
                }, traceCCExitRenderingLoop: function PlaybackEtw_traceCCExitRenderingLoop(currentPosition, transportState, ccOn) {
                    this._getEtwProvider().traceClosedCaptions_ExitRenderingLoop(currentPosition ? currentPosition : 0, transportState ? transportState : String.empty, ccOn)
                }, traceClosedCaptionsOn: function PlaybackEtw_traceClosedCaptionsOn(enable) {
                    this._getEtwProvider().traceClosedCaptions_On(enable)
                }, traceCCDroppedFrame: function PlaybackEtw_traceCCDroppedFrame(generatedAt, validUntil, currentPosition) {
                    this._getEtwProvider().traceClosedCaptions_DroppedFrame(generatedAt ? generatedAt : 0, validUntil ? validUntil : 0, currentPosition ? currentPosition : 0)
                }
        })})
})()
})();
/* >>>>>>/controls/gallerygrouper.js:17897 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function(undefined) {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {GalleryGrouper: MS.Entertainment.UI.Framework.define(function galleryGrouperConstructor(){}, {
            getKeySource: function getKeySource(item) {
                var key;
                if (item.data && item.data.groupKey)
                    key = item.data.groupKey;
                else if (item.data && item.data.inlinePanel)
                    key = MS.Entertainment.Utilities.valueFromPropertyPathFragments(item.data.dataItem.data, this.keyPropertyFragments);
                else if (item.data && item.data.isAction)
                    if (typeof item.data.groupHeader === "string")
                        if (String.id[item.data.groupHeader])
                            key = String.load(item.data.groupHeader);
                        else
                            key = item.data.groupHeader;
                    else
                        MS.Entertainment.UI.Controls.fail("an action in a grouped view must specify a groupHeader");
                else if (item.data)
                    key = MS.Entertainment.Utilities.valueFromPropertyPathFragments(item.data, this.keyPropertyFragments);
                else
                    key = String.empty;
                return key
            }, createKey: function createKey(item) {
                    var key = this.getKeySource(item);
                    if (key)
                        key += String.empty;
                    key = MS.Entertainment.Utilities.trimCharacterDirection(key);
                    return key + String.empty
                }, createParentKey: function createParentKey(item, groupData) {
                    return MS.Entertainment.Utilities.trimCharacterDirection(groupData && groupData.key)
                }, createData: function createData(item) {
                    var title = null;
                    var sortTitle = null;
                    var result = item && item.data;
                    var titlePropertyFragments = this.titlePropertyFragments;
                    var sortTitlePropertyFragments = this.sortTitlePropertyFragments;
                    if (titlePropertyFragments && titlePropertyFragments.length) {
                        title = MS.Entertainment.Utilities.valueFromPropertyPathFragments(item && item.data, this.titlePropertyFragments);
                        if (sortTitlePropertyFragments && sortTitlePropertyFragments.length)
                            sortTitle = MS.Entertainment.Utilities.valueFromPropertyPathFragments(item && item.data, this.sortTitlePropertyFragments);
                        result = {
                            title: title, sortTitle: sortTitle || title
                        }
                    }
                    return result
                }, _keyPropertyName: null, _keyPropertyFragments: null, _titlePropertyName: null, _titlePropertyFragments: null, _sortTitlePropertyName: null, _sortTitlePropertyFragments: null, useKeyAsData: true, keyPropertyName: {
                    get: function() {
                        return this._keyPropertyName
                    }, set: function(value) {
                            if (value !== this._keyPropertyName) {
                                this._keyPropertyFragments = null;
                                this._keyPropertyName = value
                            }
                        }
                }, keyPropertyFragments: {get: function() {
                        this._keyPropertyFragments = this._keyPropertyFragments || MS.Entertainment.Utilities.getPropertyPathFragments(this._keyPropertyName);
                        return this._keyPropertyFragments
                    }}, titlePropertyName: {
                    get: function() {
                        return this._titlePropertyName
                    }, set: function(value) {
                            if (value !== this._titlePropertyName) {
                                this._titlePropertyFragments = null;
                                this._titlePropertyName = value
                            }
                        }
                }, sortTitlePropertyName: {
                    get: function() {
                        return this._sortTitlePropertyName
                    }, set: function(value) {
                            if (value !== this._sortTitlePropertyName) {
                                this._sortTitlePropertyFragments = null;
                                this._sortTitlePropertyName = value
                            }
                        }
                }, titlePropertyFragments: {get: function() {
                        this._titlePropertyFragments = this._titlePropertyFragments || MS.Entertainment.Utilities.getPropertyPathFragments(this._titlePropertyName);
                        return this._titlePropertyFragments
                    }}, sortTitlePropertyFragments: {get: function() {
                        this._sortTitlePropertyFragments = this._sortTitlePropertyFragments || MS.Entertainment.Utilities.getPropertyPathFragments(this._sortTitlePropertyName);
                        return this._sortTitlePropertyFragments
                    }}, execute: function execute(item) {
                    var key = this.createKey(item);
                    var data = (this.useKeyAsData) ? {title: key} : this.createData(item);
                    key = MS.Entertainment.Utilities.trimCharacterDirection(key);
                    var groupData = {
                            key: key, data: data, parentData: data
                        };
                    groupData.parentKey = this.createParentKey(item, groupData);
                    if (groupData.parentKey !== groupData.key)
                        groupData.parentData = {title: groupData.parentKey};
                    return groupData
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        GalleryAlphaWordGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryAlphaWordGrouperConstructor(){}, {
            isSubGroup: false, _parentGrouper: null, createKey: function createKey(item) {
                    var key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item) + String.empty;
                    if (!key || key === "null")
                        key = String.load(String.id.IDS_UNKNOWN_VALUE);
                    return key
                }, createParentKey: function createParentKey(item, groupData) {
                    var key = null;
                    if (this.isSubGroup) {
                        if (!this._parentGrouper) {
                            this._parentGrouper = new MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper;
                            this._parentGrouper.keyPropertyName = this.keyPropertyName
                        }
                        key = this._parentGrouper.createKey(item)
                    }
                    else
                        key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createParentKey(item, groupData);
                    return key + String.empty
                }
        }), GalleryMediaItemGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryAlphaWordGrouperConstructor(){}, {
                isSubGroup: false, parentKeyPropertyName: "sortTitle", _parentGrouper: null, createKey: function createKey(item) {
                        var key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item) + String.empty;
                        if (!key || key === "null")
                            key = String.load(String.id.IDS_UNKNOWN_VALUE);
                        return key
                    }, createParentKey: function createParentKey(item, groupData) {
                        var key = null;
                        if (this.isSubGroup) {
                            if (!this._parentGrouper)
                                this._parentGrouper = new MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper;
                            this._parentGrouper.keyPropertyName = this.parentKeyPropertyName;
                            key = this._parentGrouper.createKey(groupData)
                        }
                        else
                            key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createParentKey(item, groupData);
                        return key + String.empty
                    }
            }), GalleryAlphaCharGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryAlphaCharGrouperConstructor() {
                try {
                    this._characterGroupings = new Windows.Globalization.Collation.CharacterGroupings
                }
                catch(error) {}
            }, {
                _characterGroupings: null, createKey: function createKey(item) {
                        var index = 0;
                        var key = String.empty;
                        var originalKey = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item) + String.empty;
                        if (item.isAction)
                            return originalKey;
                        if (this._characterGroupings)
                            key = this._characterGroupings.lookup(originalKey || String.empty) + String.empty;
                        if (key === "Numbers")
                            key = String.load(String.id.IDS_NUMBER_SYMBOL);
                        else if (key === "Symbols")
                            key = String.load(String.id.IDS_WILD_CARD_SYMBOL);
                        return key
                    }
            }), GalleryNumericGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryNumericGrouperConstructor(){}, {}), GalleryTitleParentGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryYearGrouperConstructor(){}, {
                useKeyAsData: false, noHeaderGroups: true, createKey: function createKey(item) {
                        return null
                    }, createParentKey: function createParentKey(item, groupData) {
                        var title = groupData && groupData.data && groupData.data.title;
                        if (title !== null && title !== undefined)
                            title += String.empty;
                        title = MS.Entertainment.Utilities.trimCharacterDirection(title);
                        return title
                    }
            }), GalleryYearGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryYearGrouperConstructor(){}, {createKey: function createKey(item) {
                    var key = this.getKeySource(item);
                    if (!key || key === "null")
                        return String.load(String.id.IDS_UNKNOWN_VALUE);
                    if (item.isAction)
                        return key;
                    var date = MS.Entertainment.Data.Factory.localizedYear(key);
                    return (date || key) + String.empty
                }}), GalleryMonthGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryMonthGrouperConstructor(){}, {createKey: function createKey(item) {
                    var key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item) + String.empty;
                    if (!key || key === "null")
                        return String.load(String.id.IDS_UNKNOWN_VALUE);
                    if (item.isAction)
                        return key;
                    var date = new Date(key);
                    var formattedMonth = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).abbreviatedMonthYear;
                    if (!MS.Entertainment.UI.Controls.GalleryMonthGrouper.minCalendar) {
                        MS.Entertainment.UI.Controls.GalleryMonthGrouper.minCalendar = new Windows.Globalization.Calendar(formattedMonth.languages);
                        MS.Entertainment.UI.Controls.GalleryMonthGrouper.minCalendar.setToMin()
                    }
                    if (!MS.Entertainment.UI.Controls.GalleryMonthGrouper.enCalendar)
                        MS.Entertainment.UI.Controls.GalleryMonthGrouper.enCalendar = new Windows.Globalization.Calendar(["en-US"]);
                    MS.Entertainment.UI.Controls.GalleryMonthGrouper.enCalendar.setDateTime(date);
                    if (MS.Entertainment.UI.Controls.GalleryMonthGrouper.enCalendar.compare(MS.Entertainment.UI.Controls.GalleryMonthGrouper.minCalendar) < 0)
                        date = MS.Entertainment.UI.Controls.GalleryMonthGrouper.minCalendar.getDateTime();
                    var month = formattedMonth.format(date);
                    return month + String.empty
                }}, {enCalendar: null}), GalleryDayGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryDayGrouperConstructor(){}, {createKey: function createKey(item) {
                    var key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item) + String.empty;
                    if (!key)
                        return String.load(String.id.IDS_UNKNOWN_VALUE);
                    if (item.isAction)
                        return key;
                    var date = new Date(key).toDateString();
                    return date + String.empty
                }}), GalleryRecentGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryRecentGrouperConstructor(){}, {createKey: function createKey(item) {
                    var key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item);
                    if (!key)
                        return String.load(String.id.IDS_UNKNOWN_VALUE);
                    if (item.isAction)
                        return key + String.empty;
                    var date = new Date(key);
                    var today = new Date;
                    var diff = Date.subtract(today, date);
                    var group;
                    if (diff.days <= 7)
                        group = String.load(String.id.IDS_RECENT_THIS_WEEK);
                    else if (diff.days <= 14)
                        group = String.load(String.id.IDS_RECENT_LAST_WEEK);
                    else if (date.getYear() === today.getYear() && date.getMonth() === today.getMonth())
                        group = String.load(String.id.IDS_RECENT_THIS_MONTH);
                    else {
                        var superShortMonthPattern = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).abbreviatedMonth;
                        var shortMonth = superShortMonthPattern.format(date);
                        group = shortMonth + " " + date.getFullYear()
                    }
                    return group + String.empty
                }}), SearchResultsGrouper: MS.Entertainment.UI.Framework.derive(MS.Entertainment.UI.Controls.GalleryGrouper, function searchResultsGrouperConstructor(){}, {createKey: function createKey(item) {
                    if (item.data && item.data.isHCR)
                        return "-1";
                    else
                        return MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item)
                }})
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        GalleryAlphaWordSubGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryAlphaWordGrouper", function GalleryAlphaWordSubGrouper(){}, {isSubGroup: true}), GalleryMediaItemSubGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryMediaItemGrouper", function GalleryMediaItemSubGrouper(){}, {isSubGroup: true}), VideoSearchResultsGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.SearchResultsGrouper", function videoSearchResultsGrouperConstructor(){}, {createKey: function createKey(item) {
                    if (item.data && item.data.isHCR)
                        return "-1";
                    if (item.data.inCollection)
                        if (item.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                            MS.Entertainment.UI.Controls.assert(item.data.videoType === Microsoft.Entertainment.Queries.VideoType.movie || item.data.videoType === Microsoft.Entertainment.Queries.VideoType.other || item.data.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo, "Invalid video type passed to VideoSearchResultsGrouper");
                            return (item.data.videoType === Microsoft.Entertainment.Queries.VideoType.movie) ? "collectionMovie" : "otherVideo"
                        }
                        else {
                            MS.Entertainment.UI.Controls.assert(item.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeries, "Invalid media type passed to VideoSearchResultsGrouper");
                            return "collectionTVSeries"
                        }
                    else if (item.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                        MS.Entertainment.UI.Controls.assert(item.data.videoType === Microsoft.Entertainment.Queries.VideoType.movie, "Invalid video type passed to VideoSearchResultsGrouper");
                        return "marketplaceMovie"
                    }
                    else {
                        MS.Entertainment.UI.Controls.assert(item.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeries, "Invalid media type passed to VideoSearchResultsGrouper");
                        return "marketplaceTVSeries"
                    }
                    return MS.Entertainment.UI.Controls.SearchResultsGrouper.prototype.createKey.call(this, item)
                }})
    })
}())
})();
/* >>>>>>/controls/iconbutton.js:18153 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonMode: {
            Normal: "normal", Add: "add", Remove: "remove", Custom: "custom"
        }});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButton: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", "/Controls/IconButton.html#iconButtonTemplate", null, {
            tabIndex: 0, automationId: null, hasSubActions: false, useActionInfo: false, _flyoutControl: null, _flyoutMoved: false, _flyoutReattached: false, _flyoutShowEventHandlers: false, _flyoutEventHandler: null, _iconButtonBindings: null, _allowToolTips: true, _listeningEndHandler: null, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.ActionLink.prototype.initialize.call(this);
                    if (MS.Entertainment.Utilities.isApp2 && XboxJS && XboxJS.UI && XboxJS.UI.Voice)
                        this._listeningEndHandler = MS.Entertainment.Utilities.addEventHandlers(XboxJS.UI.Voice, {listeningend: this._updateTextOnVui.bind(this)});
                    this._allowToolTips = !MS.Entertainment.Utilities.isApp2;
                    this._iconButtonBindings = WinJS.Binding.bind(this, {
                        icon: this._updateIcon.bind(this), iconPressed: this._updateIcon.bind(this), text: this._updateNonVisualLabels.bind(this), stringId: this._stringIdChanged.bind(this), visibility: this._setVisibility.bind(this), isDisabled: this._setDisabled.bind(this), isChecked: this._setChecked.bind(this), hideDefaultRing: this._hideDefaultRingChanged.bind(this), action: {isEnabled: this._updateIconInfo.bind(this)}
                    });
                    this.iconButtonActionBindings = WinJS.Binding.bind(this.action, {
                        subActions: function updateSubItems(newItems) {
                            if (this._unloaded)
                                return;
                            this.subItems = newItems;
                            this._updateSubActions(newItems)
                        }.bind(this), hasSubActions: function updateHasSubActions(newValue) {
                                this.hasSubActions = newValue
                            }.bind(this)
                    });
                    if (this._button)
                        this._button.tabIndex = this.tabIndex;
                    if (this.automationId && this._button && !this._button.getAttribute("data-win-automationid"))
                        this._button.setAttribute("data-win-automationid", this.automationId);
                    if (this._shouldCreateFlyout) {
                        this.domElement.setAttribute("aria-haspopup", true);
                        this._flyoutElement.setAttribute("data-win-control", "MS.Entertainment.UI.Controls.Flyout");
                        this._flyoutControl = new MS.Entertainment.UI.Controls.Flyout(this._flyoutElement);
                        MS.Entertainment.UI.Framework.waitForControlToInitialize(this._flyoutElement).done(function flyoutInitialized() {
                            if (this._unloaded)
                                return;
                            var flyoutElement = this._flyoutControl.flyout.element;
                            flyoutElement.suppressUnload = true;
                            this._flyoutElement.removeChild(flyoutElement);
                            flyoutElement.suppressUnload = false;
                            this._flyoutMoved = true;
                            this._flyoutEventHandler = MS.Entertainment.Utilities.addEventHandlers(this._flyoutControl.flyout, {
                                aftershow: this._updateFlyoutPosition.bind(this), beforeshow: this._hideFlyout.bind(this)
                            });
                            if (this.action._flyoutClassName)
                                WinJS.Utilities.addClass(flyoutElement, this.action._flyoutClassName)
                        }.bind(this))
                    }
                    if (this.isToggleButton && this._button) {
                        WinJS.Utilities.addClass(this._button, "toggleButton");
                        if (this.isChecked)
                            this._button.setAttribute("aria-pressed", "true");
                        else
                            this._button.setAttribute("aria-pressed", "false")
                    }
                }, _updateTextOnVui: function _updateTextOnVui() {
                    this.dispatchChangeAndNotify("text", this.text, null)
                }, _updateIconInfo: function _updateIconInfo() {
                    if (this.action)
                        if (this.useActionInfo) {
                            this.text = this.action.title;
                            this.icon = this.action.icon;
                            this.isDisabled = !this.action.isEnabled;
                            this.automationId = this.action.automationId;
                            if (this.automationId && this._button)
                                this._button.setAttribute("data-win-automationid", this.automationId);
                            this.voicePhrase = this.action.voicePhrase;
                            this.voiceConfidence = this.action.voiceConfidence;
                            this.voicePhoneticPhrase = this.action.voicePhoneticPhrase;
                            this._hideDefaultRingChanged();
                            this._updateIcon()
                        }
                        else if (this.action.iconInfo && !this.overrideIconInfo) {
                            var iconInfo = this.action.iconInfo;
                            this.text = this.action.title;
                            this.icon = iconInfo.icon;
                            this.iconPressed = iconInfo.iconPressed;
                            this.adornerMode = iconInfo.adornerMode;
                            this.adornerRing = iconInfo.adornerRing;
                            this.isToggleButton = iconInfo.isToggleButton;
                            this.isDisabled = !this.action.isEnabled;
                            this.hideDefaultRing = iconInfo.hideDefaultRing;
                            this._hideDefaultRingChanged();
                            this._updateIcon()
                        }
                    this._setDomElement();
                    this._setFocusDirections()
                }, _setFocusDirections: function _setFocusDirections() {
                    if (this.focusDirections) {
                        var child = this.domElement.firstElementChild;
                        if (child)
                            try {
                                child.setAttribute("data-win-focus", JSON.stringify(this.focusDirections))
                            }
                            catch(e) {
                                MS.Entertainment.UI.Controls.fail("JSON.stringify failed: " + e && e.message)
                            }
                    }
                }, unload: function unload() {
                    if (this._iconButtonBindings) {
                        this._iconButtonBindings.cancel();
                        this._iconButtonBindings = null
                    }
                    if (this.iconButtonActionBindings) {
                        this.iconButtonActionBindings.cancel();
                        this.iconButtonActionBindings = null
                    }
                    if (this.action)
                        this.action.referenceContainer = null;
                    if (this._flyoutEventHandler) {
                        this._flyoutEventHandler.cancel();
                        this._flyoutEventHandler = null
                    }
                    if (this._flyoutShowEventHandlers) {
                        this._flyoutShowEventHandlers.cancel();
                        this._flyoutShowEventHandlers = null
                    }
                    if (this._flyoutControl && this._flyoutControl.flyout) {
                        if (this._flyoutMoved && this._flyoutReattached)
                            document.body.removeChild(this._flyoutControl.flyout.element);
                        this._flyoutControl = null
                    }
                    if (this._listeningEndHandler) {
                        this._listeningEndHandler.cancel();
                        this._listeningEndHandler = null
                    }
                    MS.Entertainment.UI.Controls.ActionLink.prototype.unload.call(this)
                }, onClickPreProcess: function onClickPreProcess() {
                    if (this._flyoutControl) {
                        if (!(this._flyoutControl.flyout && this._flyoutControl.flyout.element)) {
                            MS.Entertainment.UI.Controls.fail("Flyout iconbutton is missing flyout elements");
                            return
                        }
                        var executePromise = WinJS.Promise.wrap();
                        if (!this._flyoutShowEventHandlers)
                            this._flyoutShowEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this._flyoutControl.flyout.element, {
                                aftershow: function flyoutAfterShow() {
                                    if (this._flyoutControl && this._flyoutControl.flyout && this._flyoutControl.flyout.element)
                                        MS.Entertainment.UI.Framework.addOverlayContainer(this._flyoutControl.flyout.element)
                                }.bind(this), afterhide: function flyoutAfterHide() {
                                        if (this._flyoutControl && this._flyoutControl.flyout && this._flyoutControl.flyout.element)
                                            MS.Entertainment.UI.Framework.removeOverlayContainer(this._flyoutControl.flyout.element)
                                    }.bind(this)
                            }, false);
                        if (!this._flyoutReattached && this._flyoutControl.flyout.element.style.visibility !== "visible") {
                            document.body.appendChild(this._flyoutControl.flyout.element);
                            this._flyoutReattached = true
                        }
                        if (this.action.canExecute())
                            executePromise = WinJS.Promise.as(this.action.execute(this._button));
                        executePromise.done(function executed() {
                            this._updateSubActions(this.subItems);
                            WinJS.Promise.timeout().done(function delay() {
                                this._showFlyout()
                            }.bind(this))
                        }.bind(this), function onError(error) {
                            var message = error && error.message;
                            MS.Entertainment.UI.fail("executePromise failed: " + message)
                        })
                    }
                    else
                        this.onClick()
                }, _shouldCreateFlyout: {get: function _shouldCreateFlyout() {
                        return this.action && this.action.hasSubActions && !MS.Entertainment.Utilities.isMusicApp2
                    }}, _updateSubActions: function _updateSubActions(newActions) {
                    if (this._flyoutControl && this._flyoutControl._subItemsList)
                        this._flyoutControl._subItemsList.dataSource = newActions
                }, _showFlyout: function _showFlyout() {
                    if (this._flyoutControl && this._flyoutControl.flyout) {
                        var placement = (MS.Entertainment.Utilities.getTextDirection() === MS.Entertainment.Utilities.TextDirections.LeftToRight) ? "right" : "left";
                        var iconElement = this.domElement.querySelector(".win-commandicon");
                        this._flyoutControl.flyout.show(iconElement, placement)
                    }
                }, _hideFlyout: function _hideFlyout() {
                    var flyoutElement = this._flyoutControl && this._flyoutControl.flyout && this._flyoutControl.flyout.element;
                    if (flyoutElement && flyoutElement.style)
                        WinJS.Utilities.addClass(flyoutElement, "hideFromDisplay")
                }, _updateFlyoutPosition: function _updateFlyoutPosition() {
                    var flyoutElement = this._flyoutControl && this._flyoutControl.flyout && this._flyoutControl.flyout.element;
                    if (flyoutElement && flyoutElement.style) {
                        flyoutElement.style.top = "auto";
                        var iconElement = this.domElement.querySelector(".win-commandicon");
                        var offset = WinJS.Utilities.getPosition(iconElement);
                        offset = Math.max(0, document.body.clientHeight - (flyoutElement.clientHeight + offset.top - 7));
                        flyoutElement.style.bottom = offset + "px";
                        WinJS.Utilities.removeClass(flyoutElement, "hideFromDisplay");
                        this._setFocusInFlyout(flyoutElement, false)
                    }
                }, _setFocusInFlyout: function _setFocusInFlyout(flyoutElement, itemsReversed) {
                    WinJS.Promise.timeout().done(function setFocus() {
                        var elementToFocus;
                        var flyoutElements = flyoutElement.getElementsByClassName("actionButtonFlyoutButton");
                        for (var i = 0; flyoutElements && i < flyoutElements.length; i++) {
                            elementToFocus = elementToFocus || flyoutElements[i];
                            if (!itemsReversed && elementToFocus.offsetTop > flyoutElements[i].offsetTop)
                                elementToFocus = flyoutElements[i];
                            else if (itemsReversed && elementToFocus.offsetTop < flyoutElements[i].offsetTop)
                                elementToFocus = flyoutElements[i]
                        }
                        if (elementToFocus)
                            elementToFocus.focus()
                    })
                }, _setDomElement: function _setDomElement() {
                    if (this._unloaded)
                        return;
                    if (this.action)
                        this.action.referenceContainer = {
                            flyout: this._flyoutElement, domElement: this.iconSpan
                        }
                }, _setVisibility: function _setVisibility() {
                    if (this.visibility)
                        WinJS.Utilities.removeClass(this._button, "removeFromDisplay");
                    else
                        WinJS.Utilities.addClass(this._button, "removeFromDisplay")
                }, _setDisabled: function _setDisabled() {
                    if (this._button)
                        if (this.isDisabled)
                            this._button.setAttribute("disabled", "disabled");
                        else
                            this._button.removeAttribute("disabled")
                }, _setChecked: function _setChecked() {
                    if (this.isChecked) {
                        WinJS.Utilities.addClass(this._button, "checked");
                        if (this.isToggleButton && this._button.getAttribute("aria-pressed") === "false")
                            this._button.setAttribute("aria-pressed", "true")
                    }
                    else {
                        WinJS.Utilities.removeClass(this._button, "checked");
                        if (this.isToggleButton && this._button.getAttribute("aria-pressed") === "true")
                            this._button.setAttribute("aria-pressed", "false")
                    }
                }, _updateIcon: function _updateIcon() {
                    var iconPressed = (this.iconPressed) ? this.iconPressed : this.icon;
                    if (this.iconSpan && this.icon)
                        if (this.icon.length === 1 || this.icon === MS.Entertainment.UI.Icon.xboxXenonLogo) {
                            this.iconSpan.textContent = this.icon;
                            this.iconSpan.style.backgroundImage = "";
                            this.iconSpan.style.msHighContrastAdjust = ""
                        }
                        else {
                            this.iconSpan.textContent = "";
                            this.iconSpan.style.backgroundImage = this.icon;
                            this.iconSpan.style.msHighContrastAdjust = "none"
                        }
                    if (this.iconSpanPressed && iconPressed)
                        if (iconPressed.length === 1 || this.icon === MS.Entertainment.UI.Icon.xboxXenonLogo) {
                            this.iconSpanPressed.textContent = iconPressed;
                            this.iconSpanPressed.style.backgroundImage = "";
                            this.iconSpanPressed.style.msHighContrastAdjust = ""
                        }
                        else {
                            this.iconSpanPressed.textContent = "";
                            this.iconSpanPressed.style.backgroundImage = iconPressed;
                            this.iconSpanPressed.style.msHighContrastAdjust = "none"
                        }
                    switch (this.adornerMode) {
                        case(MS.Entertainment.UI.Controls.IconButtonMode.Add):
                            this._setAdorners(MS.Entertainment.UI.Icon.modifierAddRing);
                            break;
                        case(MS.Entertainment.UI.Controls.IconButtonMode.Remove):
                            this._setAdorners(MS.Entertainment.UI.Icon.modifierRemoveRing);
                            break;
                        case(MS.Entertainment.UI.Controls.IconButtonMode.Custom):
                            this._setAdorners(this.adornerRing);
                            break;
                        case(MS.Entertainment.UI.Controls.IconButtonMode.Normal):
                        default:
                            break
                    }
                }, _setAdorners: function _setAdorners(adorner) {
                    this.hideDefaultRing = true;
                    this._hideDefaultRingChanged();
                    this.modifier.textContent = adorner
                }, _hideDefaultRingChanged: function _hideDefaultRingChanged() {
                    if (this.hideDefaultRing || (this.action && this.action.hideDefaultRing))
                        WinJS.Utilities.addClass(this._button, "hideAdorner");
                    else
                        WinJS.Utilities.removeClass(this._button, "hideAdorner")
                }, _stringIdChanged: function _stringIdChanged() {
                    if (this.stringId) {
                        var string = String.load(this.stringId);
                        this._button.setAttribute("aria-label", string);
                        this.linkLabel.innerText = string;
                        this._updateTooltipLabel(string)
                    }
                }, _updateNonVisualLabels: function _updateNonVisualLabels() {
                    var overrideString = null;
                    if (this.toolTipOverrideStringId)
                        overrideString = String.load(this.toolTipOverrideStringId);
                    var toolTipLabel = overrideString || this.text;
                    this._updateAriaLabel();
                    this._updateTooltipLabel(toolTipLabel)
                }, _updateTooltipLabel: function _updateTooltipLabel(text) {
                    if (this._allowToolTips && WinJS.Utilities.getMember("_button.winControl", this) && text && text !== "null" && text !== "undefined")
                        this._button.winControl.innerHTML = text
                }, _updateAriaLabel: function _updateAriaLabel() {
                    var overrideString = null;
                    if (this.toolTipOverrideStringId)
                        overrideString = String.load(this.toolTipOverrideStringId);
                    var stringToUseforAria = overrideString || this.text;
                    if (stringToUseforAria)
                        this._button.setAttribute("aria-label", stringToUseforAria);
                    if (this.text)
                        this.linkLabel.innerText = this.text
                }
        }, {
            icon: null, iconPressed: null, hideDefaultRing: false, adornerMode: MS.Entertainment.UI.Controls.IconButtonMode.Normal, adornerRing: null, isDisabled: false, isToggleButton: false, isChecked: false, visibility: true, subItems: null, action: null, focusable: true, overrideIconInfo: false, toolTipOverrideStringId: null
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonTwoLine: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButton", "/Controls/IconButton.html#iconButtonTwoLineTemplate", null, {
            initialize: function initialize() {
                MS.Entertainment.UI.Controls.IconButton.prototype.initialize.call(this);
                this._iconButtonBindings = WinJS.Binding.bind(this, {
                    icon: this._updateIcon.bind(this), iconPressed: this._updateIcon.bind(this), text: this._textChanged.bind(this), subText: this._subTextChanged.bind(this), subTextString: this._subTextStringChanged.bind(this), stringId: this._stringIdChanged.bind(this), visibility: this._setVisibility.bind(this), isDisabled: this._setDisabled.bind(this), isChecked: this._setChecked.bind(this), hideDefaultRing: this._hideDefaultRingChanged.bind(this), action: this._setDomElement.bind(this)
                })
            }, _textChanged: function _subTextChanged() {
                    if (this.text)
                        this.linkLabel.innerText = this.text;
                    this._updateAriaLabel()
                }, _subTextChanged: function _subTextChanged() {
                    if (this.subText)
                        this.linkSubLabel.textContent = String.load(this.subText);
                    this._updateSubTextVisibility()
                }, _subTextStringChanged: function _subTextStringChanged() {
                    if (this.subTextString)
                        this.linkSubLabel.textContent = this.subTextString;
                    this._updateSubTextVisibility();
                    this._updateAriaLabel()
                }, _updateIconInfo: function _updateIconInfo() {
                    if (this.action && this.useActionInfo)
                        this.subTextString = this.action.subTitle;
                    MS.Entertainment.UI.Controls.IconButton.prototype._updateIconInfo.call(this)
                }, _updateSubTextVisibility: function _updateSubTextVisibility() {
                    this.subTextVisibility = (this.subText || this.subTextString)
                }, _updateAriaLabel: function _updateAriaLabel() {
                    var ariaLabel = String.empty;
                    if (this.text && this.subTextString)
                        ariaLabel = String.load(String.id.IDS_COMMA_SEPARATOR).format(this.text, this.subTextString);
                    else if (this.text)
                        ariaLabel = this.text;
                    if (ariaLabel)
                        this._button.setAttribute("aria-label", ariaLabel)
                }
        }, {
            subText: null, subTextString: null, subTextVisibility: false
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonWithWatchProgress: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButton", "/Controls/IconButton.html#iconButtonWithWatchProgressTemplate", null, {initialize: function initialize() {
                MS.Entertainment.UI.Controls.IconButton.prototype.initialize.call(this)
            }}, {
            mediaItem: null, watchProgressVisibility: false
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonNotification: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButtonTwoLine", "/Controls/IconButton.html#iconButtonNotificationTemplate", null)});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonMessageAction: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButtonTwoLine", "/Controls/IconButton.html#iconButtonMessageActionTemplate", null)});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonImage: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButton", "/Controls/IconButton.html#iconButtonImageTemplate", null, {
            initialize: function initialize() {
                MS.Entertainment.UI.Controls.IconButton.prototype.initialize.call(this);
                this._iconButtonBindings = WinJS.Binding.bind(this, {
                    icon: this._updateIcon.bind(this), iconPressed: this._updateIcon.bind(this), text: this._updateAriaLabel.bind(this), stringId: this._stringIdChanged.bind(this), visibility: this._setVisibility.bind(this), isDisabled: this._setDisabled.bind(this), isChecked: this._setChecked.bind(this), hideDefaultRing: this._hideDefaultRingChanged.bind(this), action: this._updateIconInfo.bind(this), media: this._updateImageProperties.bind(this), defaultImageSize: this._updateImageProperties.bind(this)
                })
            }, _updateIconInfo: function _updateIconInfo() {
                    if (!this.action) {
                        this.isDisabled = true;
                        WinJS.Utilities.addClass(this.ringSpan, "removeFromDisplay");
                        return
                    }
                    WinJS.Utilities.removeClass(this.ringSpan, "removeFromDisplay");
                    var iconInfo = this.action.iconInfo;
                    this.text = this.action.title;
                    this.icon = iconInfo.icon;
                    this.iconPressed = iconInfo.iconPressed;
                    this.adornerMode = iconInfo.adornerMode;
                    this.adornerRing = iconInfo.adornerRing;
                    this.isToggleButton = iconInfo.isToggleButton;
                    this.isDisabled = !this.action.isEnabled;
                    this.hideDefaultRing = iconInfo.hideDefaultRing;
                    this._setDomElement()
                }, _updateImageProperties: function _updateImageProperties() {
                    if (!this._image || !this.desiredImageSize || !this.media)
                        return;
                    this._image.domElement.width = this.desiredImageSize.width;
                    this._image.domElement.height = this.desiredImageSize.height;
                    this._image.desiredImageSize = this.desiredImageSize;
                    this._image.defaultImagePath = this.defaultImagePath;
                    this._image.target = this.media
                }, _updateAriaLabel: function _updateAriaLabel() {
                    var ariaLabel = String.empty;
                    if (this.text && this.subTextString)
                        ariaLabel = String.load(String.id.IDS_COMMA_SEPARATOR).format(this.text, this.subTextString);
                    else if (this.text)
                        ariaLabel = this.text;
                    if (ariaLabel)
                        this._button.setAttribute("aria-label", ariaLabel)
                }
        }, {
            media: null, desiredImageSize: null, defaultImagePath: String.empty, imageWidth: 0, imageHeight: 0
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonVertical: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButton", "/Controls/IconButton.html#iconButtonVerticalTemplate", null, {initialize: function initialize() {
                MS.Entertainment.UI.Controls.IconButton.prototype.initialize.call(this)
            }})})
})()
})();
/* >>>>>>/controls/link.js:18555 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {getLinkHTMLFile: function getLinkHTMLFile() {
            var htmlRef = null;
            if (window.isVideoApp1 !== undefined && window.isVideoApp1)
                htmlRef = "Components/Video/VideoSpotlightView1.html";
            else
                htmlRef = "/Controls/Link.html";
            return htmlRef
        }});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ActionLink: MS.Entertainment.UI.Framework.defineUserControl(MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#linkTemplate", function actionLinkConstructor() {
            this._accessiblePressed = this._accessiblePressed.bind(this)
        }, {
            overrideStyle: null, animateHubOnTransition: false, _actionBindings: null, _buttonEventHandlers: null, _buttonToggleEventAttached: null, _bindings: null, _pressHold: false, _msGesture: null, _networkStatusBinding: null, initialize: function initialize() {
                    var style = null;
                    var external = false;
                    var updateAccessibilityText = this._updateAccessibilityText.bind(this);
                    this.onClickWithContext = WinJS.Utilities.markSupportedForProcessing(this.onClickWithContext.bind(this));
                    this.bind("action", function() {
                        if (this._actionBindings) {
                            this._actionBindings.cancel();
                            this._actionBindings = null
                        }
                        if (this._networkStatusBinding) {
                            this._networkStatusBinding.cancel();
                            this._networkStatusBinding = null
                        }
                        if (!this.action || this._unloaded)
                            return;
                        if (this.action.disableWhenOffline)
                            this._networkStatusBinding = WinJS.Binding.bind(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {networkStatus: this._onNetworkStatusChanged.bind(this)});
                        var external = this.action.isExternalAction;
                        this.action.parameter = this.actionParam || this.action.parameter;
                        this.action.automationId = this.actionAutomationId || this.action.automationId;
                        if (this.action.parameter && this.action.requiresLinkControl)
                            this.action.parameter.linkControl = this;
                        this._actionBindings = WinJS.Binding.bind(this.action, {
                            isEnabled: function actionIsEnabledChanged() {
                                if (this.action)
                                    if (this.disabled === this.action.isEnabled)
                                        this.disabled = !this.action.isEnabled
                            }.bind(this), title: function actionTitleChanged() {
                                    if (this.action.forceTitleChange || (!this.text && !this.stringId))
                                        this.text = this.action.title
                                }.bind(this), ariaPressed: function actionAriaPressedChanged() {
                                    if (this.action.enableAriaPressedOverride)
                                        if (!this._button.hasAttribute("aria-pressed") || (this.action.ariaPressed && this._button.getAttribute("aria-pressed") === "false") || (!this.action.ariaPressed && this._button.getAttribute("aria-pressed") === "true"))
                                            this._button.setAttribute("aria-pressed", this.action.ariaPressed)
                                }.bind(this), icon: function() {
                                    if (!this.icon && this.action.icon)
                                        this.icon = this.action.icon
                                }.bind(this)
                        });
                        if (external)
                            WinJS.Utilities.addClass(this._button, "externalActionLink");
                        if (this.action.isToggleAction && !this._unloaded)
                            this._buttonToggleEventAttached = MS.Entertainment.Utilities.attachPropertyChangeEvent(this._button, this._accessiblePressed);
                        if (this.action.ariaLabelOverride)
                            this.accessibilityText = this.action.ariaLabelOverride
                    }.bind(this));
                    this.bind("holdAction", function() {
                        if (!this.holdAction || this._unloaded)
                            return;
                        if (this._button) {
                            this._msGesture = new MSGesture;
                            var handlePointerDown = this._onPointerDown.bind(this);
                            this._buttonEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this._button, {
                                MSPointerDown: handlePointerDown, pointerdown: handlePointerDown, MSGestureHold: this._buttonHold.bind(this), MSHoldVisual: function(event) {
                                        event.preventDefault()
                                    }
                            })
                        }
                    }.bind(this));
                    this.bind("doClick", function() {
                        if (this.doClick)
                            this.disabled = false
                    }.bind(this));
                    this._bindings = WinJS.Binding.bind(this, {
                        accessibilityText: updateAccessibilityText, accessibilityStringId: updateAccessibilityText, focusable: this._updateFocusableAttributes.bind(this)
                    });
                    if (this.overrideStyle)
                        style = this.overrideStyle;
                    else
                        style = "internalActionLink";
                    if (this._button)
                        WinJS.Utilities.addClass(this._button, style)
                }, _accessiblePressed: function _accessiblePressed(evt) {
                    if (this._button && evt && evt.propertyName === "aria-pressed")
                        if (this.action.ariaPressed && this._button.getAttribute("aria-pressed") === "false")
                            this.onClick();
                        else if (!this.action.ariaPressed && this._button.getAttribute("aria-pressed") === "true")
                            this.onClick()
                }, _onNetworkStatusChanged: function _onNetworkStatusChanged() {
                    if (this.action)
                        if (this.action.suppressMessageInNetworkBind) {
                            var offlineMessage = this.action.offlineMessageTitle;
                            this.action.offlineMessageTitle = String.empty;
                            this.action.requeryCanExecute();
                            this.action.offlineMessageTitle = offlineMessage
                        }
                        else
                            this.action.requeryCanExecute()
                }, unload: function unload() {
                    if (this._bindings) {
                        this._bindings.cancel();
                        this._bindings = null
                    }
                    if (this._networkStatusBinding) {
                        this._networkStatusBinding.cancel();
                        this._networkStatusBinding = null
                    }
                    if (this._actionBindings) {
                        this._actionBindings.cancel();
                        this._actionBindings = null
                    }
                    if (this._buttonEventHandlers) {
                        this._buttonEventHandlers.cancel();
                        this._buttonEventHandlers = null
                    }
                    if (this._buttonToggleEventAttached && this._button) {
                        MS.Entertainment.Utilities.detachPropertyChangeEvent(this._button, this._accessiblePressed);
                        this._buttonToggleEventAttached = false
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, onClickWithContext: function onClickWithContext(args) {
                    this.onClick(args)
                }, onClick: function onLinkClick(onClickArgs) {
                    if (this._pressHold)
                        return;
                    if (this.doClick) {
                        this.doClick();
                        return
                    }
                    if (this.action && !this.action.canExecute)
                        return;
                    var action = this.action;
                    var onClickElement = onClickArgs && onClickArgs.currentTarget;
                    if (onClickElement && action && action.useRelativePositioning) {
                        action.referenceContainer = action.referenceContainer || {};
                        action.referenceContainer.relativeOffset = WinJS.Utilities.getPosition(onClickElement)
                    }
                    var executeFunction = function executeAction() {
                            if (action) {
                                MS.Entertainment.Utilities.playSelectButtonClick();
                                action.execute(this._button)
                            }
                        }.bind(this);
                    if (this.animateHubOnTransition) {
                        var panelContentContainer = MS.Entertainment.Utilities.findParentElementByClassName(this._button, "panelContainer");
                        MS.Entertainment.Animations.HubStrip.setupDeclarativeAnimsHubStripPanels(panelContentContainer)
                    }
                    executeFunction();
                    return true
                }, onHold: function onButtonHold() {
                    if (this.holdAction && !this.holdAction.canExecute)
                        return;
                    if (this.holdAction)
                        this.holdAction.execute();
                    return true
                }, _assignPointer: function _assignPointer(event) {
                    if (!this._msGesture)
                        return;
                    try {
                        this._msGesture.target = event.target;
                        if (event.target === this._msGesture.target) {
                            this._msGesture.addPointer(event.pointerId);
                            if (event.pointerId && event.target.msSetPointerCapture)
                                event.target.msSetPointerCapture(event.pointerId)
                        }
                    }
                    catch(err) {}
                }, _onPointerDown: function _onPointerDown(event) {
                    this._assignPointer(event)
                }, _buttonHold: function _buttonHold(e) {
                    if (!this.holdAction)
                        return;
                    if ((e.detail & e.MSGESTURE_FLAG_BEGIN) === e.MSGESTURE_FLAG_BEGIN) {
                        this.onHold();
                        this._pressHold = true
                    }
                    else if ((e.detail & e.MSGESTURE_FLAG_END) === e.MSGESTURE_FLAG_END)
                        WinJS.Promise.timeout().then(function _delay() {
                            this._pressHold = false
                        }.bind(this))
                }, _updateAccessibilityText: function _updateAccessibilityText() {
                    var accessibilityText,
                        ariaLabelAttribute;
                    if (this.accessibilityText) {
                        MS.Entertainment.UI.Controls.assert(!this.accessibilityStringId, "Mixed usage of raw text and stringId on a accessibility text for the action link.");
                        accessibilityText = this.accessibilityText
                    }
                    else if (this.accessibilityStringId)
                        accessibilityText = String.load(this.accessibilityStringId);
                    MS.Entertainment.Utilities.setAccessibilityText(this._button, accessibilityText)
                }, _updateFocusableAttributes: function _updateFocusableAttributes(newValue, oldValue) {
                    if (!this._button)
                        return;
                    if (newValue)
                        WinJS.Utilities.addClass(this._button, "win-focusable");
                    else
                        WinJS.Utilities.removeClass(this._button, "win-focusable")
                }
        }, {
            actionParam: null, disabled: true, action: null, text: null, stringId: 0, numberOfLines: 0, wrap: false, accessibilityText: null, accessibilityStringId: 0, focusable: false, holdAction: null
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PanelActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#panelActionLinkTemplate", null, null, {focusable: true})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ImageActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#imageActionLinkTemplate", null, {initialize: function initialize() {
                MS.Entertainment.UI.Controls.ActionLink.prototype.initialize.apply(this, arguments);
                if (this.text)
                    MS.Entertainment.UI.Controls.setAccessibilityText(this._button, this.text)
            }}, {imageUrl: null})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {FlyOutActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", null, null, null, {onClick: function onClick() {
                MS.Entertainment.UI.Controls.ActionLink.prototype.onClick.apply(this, arguments);
                var element = this.domElement;
                while (element && !WinJS.Utilities.hasClass(element, "win-flyout"))
                    element = element.parentElement;
                if (element && element.winControl)
                    element.winControl.hide()
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PersistentFlyOutActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", null, null, null, {onClick: function onClick() {
                MS.Entertainment.UI.Controls.ActionLink.prototype.onClick.apply(this, arguments)
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PersistentFlyOutActionComboLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#comboLinkTemplate")});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ComboLinkContainer: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#comboLinkContainerTemplate")});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PanelHeaderActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#panelHeaderLinkTemplate", null, null, {focusable: true})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {CloseActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#closeLinkTemplate")})
})();
(function runVoiceMixins() {
    MS.Entertainment.Utilities.runVoicePropertyMixins(MS.Entertainment.UI.Controls.ActionLink)
})()
})();
/* >>>>>>/controls/shrinkandstayheadercontrol.js:18791 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Controls) {
                var ShrinkAndStayHeaderControl = (function(_super) {
                        __extends(ShrinkAndStayHeaderControl, _super);
                        function ShrinkAndStayHeaderControl(element, options) {
                            _super.call(this, element, options);
                            this._dropDownVisible = false;
                            this._isZoomedOut = false;
                            if (!WinJS.Utilities.hasClass(this.domElement, ShrinkAndStayHeaderControl.containerClass))
                                WinJS.Utilities.addClass(this.domElement, ShrinkAndStayHeaderControl.containerClass);
                            this._dropDownHeader = this.domElement.querySelector("." + ShrinkAndStayHeaderControl.dropDownHeaderClass);
                            this._headerChangeEventHandlers = MS.Entertainment.UI.Framework.addEventHandlers(this.domElement, {
                                showPageHeader: this._showHeaderHandler.bind(this), hidePageHeader: this._hideHeaderHandler.bind(this), zoomchanged: this._handleSemanticZoomChanged.bind(this)
                            });
                            this._scrollerEventHandler = MS.Entertainment.UI.Framework.addEventHandlers(this.scroller, {scroll: this._handleScroll.bind(this)})
                        }
                        Object.defineProperty(ShrinkAndStayHeaderControl.prototype, "dropDownVisible", {
                            get: function() {
                                return this._dropDownVisible
                            }, enumerable: true, configurable: true
                        });
                        ShrinkAndStayHeaderControl.prototype._showHeaderHandler = function(e) {
                            if (this._dropDownVisible || this._isZoomedOut)
                                return;
                            this._updateClassesToShowHeader();
                            this._dropDownVisible = true;
                            if (e.moveFocusToHeader && !this._dropDownHeader.contains(document.activeElement))
                                MS.Entertainment.UI.Framework.focusFirstInSubTree(this._dropDownHeader, true, false, true);
                            var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                            eventProvider.traceShrinkAndStayHeader_Shown()
                        };
                        ShrinkAndStayHeaderControl.prototype._hideHeaderHandler = function() {
                            if (!this._dropDownVisible)
                                return;
                            this._updateClassesToHideHeader();
                            this._dropDownVisible = false;
                            if (this._dropDownHeader.contains(document.activeElement))
                                MS.Entertainment.UI.Framework.focusFirstInSubTree(this.scroller, true, true, true);
                            var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                            eventProvider.traceShrinkAndStayHeader_Dismissed()
                        };
                        ShrinkAndStayHeaderControl.prototype._handleSemanticZoomChanged = function() {
                            var semanticZoomElement = this.domElement.querySelector(".win-semanticzoom");
                            if (!semanticZoomElement || !semanticZoomElement.winControl)
                                return;
                            this._isZoomedOut = semanticZoomElement.winControl.zoomedOut;
                            if (this._dropDownVisible)
                                if (this._isZoomedOut)
                                    this._updateClassesToHideHeader();
                                else
                                    this._updateClassesToShowHeader()
                        };
                        ShrinkAndStayHeaderControl.prototype._updateClassesToShowHeader = function() {
                            WinJS.Utilities.removeClass(this._dropDownHeader, ShrinkAndStayHeaderControl.headerStateCollapsedClass);
                            WinJS.Utilities.addClass(this._dropDownHeader, ShrinkAndStayHeaderControl.headerStateExpandedClass)
                        };
                        ShrinkAndStayHeaderControl.prototype._updateClassesToHideHeader = function() {
                            WinJS.Utilities.removeClass(this._dropDownHeader, ShrinkAndStayHeaderControl.headerStateExpandedClass);
                            WinJS.Utilities.addClass(this._dropDownHeader, ShrinkAndStayHeaderControl.headerStateCollapsedClass)
                        };
                        ShrinkAndStayHeaderControl.prototype._handleScroll = function() {
                            var scrollPosition = this.scroller.scrollTop;
                            if (scrollPosition >= this.dropDownHeaderLimit)
                                ShrinkAndStayHeaderControl.raiseShowPageHeaderEvent(this.domElement);
                            else
                                ShrinkAndStayHeaderControl.raiseHidePageHeaderEvent(this.domElement)
                        };
                        ShrinkAndStayHeaderControl.prototype.initialize = function(){};
                        Object.defineProperty(ShrinkAndStayHeaderControl.prototype, "scroller", {
                            get: function() {
                                return this.domElement
                            }, enumerable: true, configurable: true
                        });
                        ShrinkAndStayHeaderControl.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._headerChangeEventHandlers) {
                                this._headerChangeEventHandlers.cancel();
                                this._headerChangeEventHandlers = null
                            }
                            if (this._scrollerEventHandler) {
                                this._scrollerEventHandler.cancel();
                                this._scrollerEventHandler = null
                            }
                        };
                        ShrinkAndStayHeaderControl.raiseShowPageHeaderEvent = function(element, moveFocusToHeader) {
                            MS.Entertainment.UI.Controls.assert(element, "Require element to raise event");
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("showPageHeader", true, false);
                            domEvent.moveFocusToHeader = moveFocusToHeader;
                            element.dispatchEvent(domEvent)
                        };
                        ShrinkAndStayHeaderControl.raiseHidePageHeaderEvent = function(element) {
                            MS.Entertainment.UI.Controls.assert(element, "Require element to raise event");
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("hidePageHeader", true, false);
                            element.dispatchEvent(domEvent)
                        };
                        ShrinkAndStayHeaderControl.containerClass = "control-shrinkAndStayHeaderControl";
                        ShrinkAndStayHeaderControl.dropDownHeaderClass = "shrinkAndStayHeaderControl-dropDownHeader";
                        ShrinkAndStayHeaderControl.headerStateCollapsedClass = "dropDownHeader_collapsed";
                        ShrinkAndStayHeaderControl.headerStateExpandedClass = "dropDownHeader_expanded";
                        return ShrinkAndStayHeaderControl
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.ShrinkAndStayHeaderControl = ShrinkAndStayHeaderControl
            })(UI.Controls || (UI.Controls = {}));
            var Controls = UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/controls/shrinkandstaylistviewlayout.js:18919 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Controls) {
                var fx = MS.Entertainment.UI.Framework;
                var BaseShrinkAndStayLayout = (function() {
                        function BaseShrinkAndStayLayout(options) {
                            this.headerThreshold = 65;
                            this._cachedSurfaceOffsetTop = 0;
                            this.fixedHeaderVisible = false;
                            WinJS.UI.setOptions(this, options)
                        }
                        BaseShrinkAndStayLayout.prototype._handleHeaderResize = function() {
                            if (this._headerParentedToListview)
                                this._cachedSurfaceOffsetTop = this._site.surface.offsetTop;
                            else
                                this._cachedSurfaceOffsetTop = 0
                        };
                        BaseShrinkAndStayLayout.prototype._handleHeaderKeyEvents = function(e) {
                            switch (e.keyCode) {
                                case WinJS.Utilities.Key.upArrow:
                                case WinJS.Utilities.Key.downArrow:
                                case WinJS.Utilities.Key.leftArrow:
                                case WinJS.Utilities.Key.rightArrow:
                                    e.stopPropagation();
                                    e.preventDefault();
                                    break;
                                case WinJS.Utilities.Key.enter:
                                case WinJS.Utilities.Key.space:
                                    e.stopPropagation();
                                    break
                            }
                        };
                        BaseShrinkAndStayLayout.prototype._cancelHeaderHandlers = function() {
                            if (this._headerHandlers) {
                                this._headerHandlers.cancel();
                                this._headerHandlers = null
                            }
                        };
                        BaseShrinkAndStayLayout.prototype._handleViewportScroll = function() {
                            var scrollPosition = this._site.viewport.scrollTop;
                            this._parentHeaderIntoListview();
                            if ((scrollPosition >= this.headerThreshold) && !this.fixedHeaderVisible) {
                                this.fixedHeaderVisible = true;
                                MS.Entertainment.UI.Controls.ShrinkAndStayHeaderControl.raiseShowPageHeaderEvent(this._site.viewport, this.header.contains(document.activeElement));
                                this._suppressHeaderTabbing()
                            }
                            else if ((scrollPosition < this.headerThreshold) && this.fixedHeaderVisible) {
                                this.fixedHeaderVisible = false;
                                MS.Entertainment.UI.Controls.ShrinkAndStayHeaderControl.raiseHidePageHeaderEvent(this._site.viewport);
                                this._restoreHeaderTabbing()
                            }
                        };
                        BaseShrinkAndStayLayout.prototype._parentHeaderIntoOriginalContainer = function() {
                            if (!this._headerContainer || !this.header)
                                return;
                            this._headerParentedToListview = false;
                            this._cancelHeaderHandlers();
                            if (!this._headerContainer.contains(this.header))
                                return;
                            Controls.ShrinkAndStayHeaderControl.raiseHidePageHeaderEvent(this._site.viewport);
                            MS.Entertainment.UI.Controls.assert(this._originalHeaderContainer, "Didn't have an orignal header, can't reparent");
                            if (this._originalHeaderContainer && this.header)
                                this._reparentHeader(this._originalHeaderContainer)
                        };
                        BaseShrinkAndStayLayout.prototype._parentHeaderIntoListview = function() {
                            if (!this._headerParentedToListview) {
                                if (!this.header || this._headerContainer.contains(this.header))
                                    return;
                                this._originalHeaderContainer = this.header.parentElement;
                                this._reparentHeader(this._headerContainer);
                                if (!this._headerHandlers)
                                    this._headerHandlers = fx.addEventHandlers(this.header, {
                                        mselementresize: this._handleHeaderResize.bind(this), keydown: this._handleHeaderKeyEvents.bind(this), keypress: this._handleHeaderKeyEvents.bind(this), keyup: this._handleHeaderKeyEvents.bind(this)
                                    });
                                this._handleHeaderResize();
                                this._headerParentedToListview = true
                            }
                        };
                        BaseShrinkAndStayLayout.prototype._reparentHeader = function(newParent) {
                            this.header.suppressUnload = true;
                            var activeElement = document.activeElement;
                            var focusIsInHeader = (activeElement && this.header.contains(activeElement));
                            newParent.appendChild(this.header);
                            if (focusIsInHeader)
                                try {
                                    activeElement.setActive()
                                }
                                catch(ex) {}
                            this.header.suppressUnload = false
                        };
                        BaseShrinkAndStayLayout.prototype._getItemOffsetPatch = function() {
                            var _this = this;
                            return WinJS.UI.ListView.prototype._getItemOffset.apply(this._parentListview, arguments).then(function(pos) {
                                    pos.begin -= _this._cachedSurfaceOffsetTop + 5;
                                    if (_this.fixedHeaderVisible)
                                        _this._handleViewportScroll();
                                    return pos
                                })
                        };
                        BaseShrinkAndStayLayout.prototype._animateListEntracePatch = function() {
                            var _this = this;
                            return WinJS.UI.ListView.prototype._animateListEntrance.apply(this._parentListview, arguments).then(function(result) {
                                    _this._parentHeaderIntoListview();
                                    return result
                                })
                        };
                        BaseShrinkAndStayLayout.prototype._getTabStopsForElementsSubtree = function(element, includeNegativeTabStops) {
                            var tabStops = WinJS.Utilities.query("*", element).filter(function(candidateTabstop) {
                                    if ((candidateTabstop.tabIndex < 0) && !includeNegativeTabStops)
                                        return false;
                                    if (candidateTabstop.hasAttribute("tabindex"))
                                        return true;
                                    switch (candidateTabstop.tagName.toLocaleLowerCase()) {
                                        case"button":
                                            return true;
                                        default:
                                            return false
                                    }
                                });
                            return tabStops
                        };
                        BaseShrinkAndStayLayout.prototype._suppressHeaderTabbing = function() {
                            this._getTabStopsForElementsSubtree(this.header, false).forEach(function(item) {
                                item.previousTabIndex = item.tabIndex;
                                item.tabIndex = -1
                            })
                        };
                        BaseShrinkAndStayLayout.prototype._restoreHeaderTabbing = function() {
                            this._getTabStopsForElementsSubtree(this.header, true).forEach(function(item) {
                                if (item.previousTabIndex === undefined)
                                    return;
                                item.tabIndex = item.previousTabIndex;
                                item.previousTabIndex = undefined
                            })
                        };
                        Object.defineProperty(BaseShrinkAndStayLayout.prototype, "orientation", {
                            get: function() {
                                return this._layout.orientation
                            }, set: function(value) {
                                    this._layout.orientation = value
                                }, enumerable: true, configurable: true
                        });
                        BaseShrinkAndStayLayout.prototype.initialize = function(site, groupsEnabled) {
                            this._site = site;
                            MS.Entertainment.UI.Controls.assert(this.header, "We need a header to reparent into the listview");
                            if (!this._headerContainer) {
                                this._headerContainer = document.createElement("div");
                                this._headerContainer.className = "shrinkAndStay-headerContainer"
                            }
                            if (!site.viewport.hasHeader) {
                                this._site.surface.insertAdjacentElement("beforebegin", this._headerContainer);
                                this._site.viewport.hasHeader = true
                            }
                            if (!this._viewportHandlers)
                                this._viewportHandlers = MS.Entertainment.UI.Framework.addEventHandlers(this._site.viewport, {scroll: this._handleViewportScroll.bind(this)});
                            if (!this._parentListview) {
                                this._parentListview = WinJS.Utilities.getMember("_site.viewport.parentElement.winControl", this);
                                if (this._parentListview) {
                                    this._parentListview._getItemOffset = this._getItemOffsetPatch.bind(this);
                                    this._parentListview._animateListEntrance = this._animateListEntracePatch.bind(this)
                                }
                            }
                            this._layout.initialize(site, groupsEnabled)
                        };
                        BaseShrinkAndStayLayout.prototype.uninitialize = function() {
                            if (this._viewportHandlers) {
                                this._viewportHandlers.cancel();
                                this._viewportHandlers = null
                            }
                            this._cancelHeaderHandlers();
                            this._parentHeaderIntoOriginalContainer();
                            this._layout.uninitialize()
                        };
                        BaseShrinkAndStayLayout.prototype.layout = function(tree, changedRange, modifiedItems, modifiedGroups) {
                            var _this = this;
                            var layoutResult = this._layout.layout(tree, changedRange, modifiedItems, modifiedGroups);
                            var absolutelyPositionedElements = this._layout._cachedRemovedItems;
                            if (!absolutelyPositionedElements || !absolutelyPositionedElements.length)
                                return layoutResult;
                            absolutelyPositionedElements.forEach(function(elementInfo) {
                                if (!elementInfo.element)
                                    return;
                                var currentPosition = parseInt(elementInfo.element.style.top);
                                if (isNaN(currentPosition))
                                    return;
                                elementInfo.element.style.top = (currentPosition + _this._cachedSurfaceOffsetTop) + "px"
                            });
                            return layoutResult
                        };
                        BaseShrinkAndStayLayout.prototype.dragOver = function(x, y, dragInfo) {
                            this._layout.dragOver(x, y, dragInfo)
                        };
                        BaseShrinkAndStayLayout.prototype.dragLeave = function() {
                            this._layout.dragLeave()
                        };
                        BaseShrinkAndStayLayout.prototype.setupAnimations = function() {
                            this._layout.setupAnimations()
                        };
                        BaseShrinkAndStayLayout.prototype.executeAnimations = function() {
                            this._layout.executeAnimations()
                        };
                        BaseShrinkAndStayLayout.prototype.itemsFromRange = function(firstPixel, lastPixel) {
                            return this._layout.itemsFromRange(firstPixel, lastPixel)
                        };
                        BaseShrinkAndStayLayout.prototype.getAdjacent = function(currentItem, pressedKey) {
                            return this._layout.getAdjacent(currentItem, pressedKey)
                        };
                        BaseShrinkAndStayLayout.prototype.hitTest = function(x, y) {
                            if (this._headerParentedToListview)
                                y -= this._cachedSurfaceOffsetTop;
                            return this._layout.hitTest(x, y)
                        };
                        Object.defineProperty(BaseShrinkAndStayLayout.prototype, "numberOfItemsPerItemsBlock", {
                            get: function() {
                                return this._layout.numberOfItemsPerItemsBlock
                            }, enumerable: true, configurable: true
                        });
                        BaseShrinkAndStayLayout.prototype._getItemPosition = function(index) {
                            return this._layout._getItemPosition(index)
                        };
                        return BaseShrinkAndStayLayout
                    })();
                Controls.BaseShrinkAndStayLayout = BaseShrinkAndStayLayout;
                var ShrinkAndStayGridLayout = (function(_super) {
                        __extends(ShrinkAndStayGridLayout, _super);
                        function ShrinkAndStayGridLayout(options) {
                            _super.call(this, options);
                            this._layout = new WinJS.UI.GridLayout(options)
                        }
                        return ShrinkAndStayGridLayout
                    })(BaseShrinkAndStayLayout);
                Controls.ShrinkAndStayGridLayout = ShrinkAndStayGridLayout;
                var ShrinkAndStayListLayout = (function(_super) {
                        __extends(ShrinkAndStayListLayout, _super);
                        function ShrinkAndStayListLayout(options) {
                            _super.call(this, options);
                            this._layout = new WinJS.UI.ListLayout(options)
                        }
                        return ShrinkAndStayListLayout
                    })(BaseShrinkAndStayLayout);
                Controls.ShrinkAndStayListLayout = ShrinkAndStayListLayout
            })(UI.Controls || (UI.Controls = {}));
            var Controls = UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/controls/video_win/offlinenotification.js:19183 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");

(function(MS) {
    (function(Entertainment) {
        (function(_UI) {
            (function(Controls) {
                var UI = MS.Entertainment.UI;
                var OfflineNotification = (function(_super) {
                        __extends(OfflineNotification, _super);
                        function OfflineNotification() {
                            _super.apply(this, arguments);
                            this._networkStatusListener = null
                        }
                        OfflineNotification.prototype.initialize = function() {
                            this._enableNetworkStatusListener();
                            _super.prototype.initialize.call(this)
                        };
                        OfflineNotification.prototype.unload = function() {
                            this._cancelNetworkStatusListener();
                            _super.prototype.unload.call(this)
                        };
                        OfflineNotification.prototype.freeze = function() {
                            this._cancelNetworkStatusListener();
                            _super.prototype.freeze.call(this)
                        };
                        OfflineNotification.prototype.thaw = function() {
                            this._enableNetworkStatusListener();
                            _super.prototype.thaw.call(this)
                        };
                        OfflineNotification.prototype._enableNetworkStatusListener = function() {
                            this._cancelNetworkStatusListener();
                            this._networkStatusListener = UI.Framework.addEventHandlers(Entertainment.ServiceLocator.getService(Entertainment.Services.uiState), {networkStatusChanged: this._onNetworkStatusChanged.bind(this)});
                            this._onNetworkStatusChanged()
                        };
                        OfflineNotification.prototype._cancelNetworkStatusListener = function() {
                            if (this._networkStatusListener) {
                                this._networkStatusListener.cancel();
                                this._networkStatusListener = null
                            }
                        };
                        OfflineNotification.prototype._onNetworkStatusChanged = function() {
                            if (this.domElement)
                                MS.Entertainment.Utilities.toggleClass(this.domElement, "removeFromDisplay", MS.Entertainment.UI.NetworkStatusService.isOnline())
                        };
                        return OfflineNotification
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.OfflineNotification = OfflineNotification
            })(_UI.Controls || (_UI.Controls = {}));
            var Controls = _UI.Controls
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.OfflineNotification)
})();
/* >>>>>>/viewmodels/mediaitemmodel.js:19252 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Media");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {MediaItemModel: MS.Entertainment.UI.Framework.define(null, {isFailed: false}, {
            augment: function augment(mediaItem) {
                if (mediaItem && mediaItem.onHydrated)
                    return mediaItem;
                var defaultHydrate = false;
                var modelItem = WinJS.Binding.as(mediaItem);
                if ((!modelItem.hydrated) && (!modelItem.hydrate || modelItem.hydrate === MS.Entertainment.Data.Augmentation.prototype.hydrate))
                    switch (modelItem.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            MS.Entertainment.Media.fail("Videos are no longer hydrated via this old method. Please make sure onHydrated has been set on your video augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            MS.Entertainment.Media.fail("TV serieses are no longer hydrated via this old method. Please make sure onHydrated has been set on your series augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            MS.Entertainment.Media.fail("TV seasons are no longer hydrated via this old method. Please make sure onHydrated has been set on your season augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            if (modelItem.personType === Microsoft.Entertainment.Queries.PersonType.artist)
                                MS.Entertainment.Media.fail("Artists are no longer hydrated via this old method. Please make sure onHydrated has been set on your artists augmentation definition.");
                            else
                                defaultHydrate = true;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            MS.Entertainment.Media.fail("Playlists are no longer hydrated via this old method. Please make sure onHydrated has been set on your playlist augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            MS.Entertainment.Media.fail("Albums are no longer hydrated via this old method. Please make sure onHydrated has been set on your albums augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            MS.Entertainment.Media.fail("Tracks are no longer hydrated via this old method. Please make sure onHydrated has been set on your tracks augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                            MS.Entertainment.Media.fail("Games are no longer hydrated via this old method. Please make sure onHydrated has been set on your game augmentation definition.");
                            break;
                        default:
                            defaultHydrate = true;
                            break
                    }
                if (defaultHydrate) {
                    modelItem.hydrate = function hydrate() {
                        return WinJS.Promise.wrap(modelItem)
                    };
                    modelItem.hydrated = true
                }
                return modelItem
            }, hydrateListLibraryInfoAsync: function hydrateListLibraryInfoAsync(list) {
                    var promises = [];
                    list = list || [];
                    return WinJS.Promise.as(list.forEach(function hydrate(args) {
                            var item = (args && args.item && args.item.data) || args;
                            if (item)
                                promises.push(MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(item))
                        })).then(function joinPromises() {
                            return WinJS.Promise.join(promises)
                        }).then(function hideResult(){}, function handleError(error) {
                            MS.Entertainment.Media.fail("Failed to hydrate collection library ids. Error message: " + (error && error.message))
                        })
                }, getLibraryIdAsync: function getLibraryIdAsync(modelItem) {
                    var promise;
                    var mediaStore;
                    var zuneId = modelItem.zuneId;
                    if (modelItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason)
                        zuneId = modelItem.seriesZuneId;
                    if (modelItem && (!modelItem.fromCollection || !modelItem.inCollection) && MS.Entertainment.Utilities.isValidGuid(zuneId) && !MS.Entertainment.Utilities.isEmptyGuid(zuneId)) {
                        mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        switch (modelItem.mediaType) {
                            case Microsoft.Entertainment.Queries.ObjectType.video:
                                promise = mediaStore.videoProvider.getLibraryIdFromMediaIdAsync(zuneId);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.track:
                                promise = mediaStore.trackProvider.getLibraryIdFromMediaIdAsync(zuneId);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.album:
                                promise = mediaStore.albumProvider.getLibraryIdFromMediaIdAsync(zuneId);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                promise = MS.Entertainment.UI.Actions.Playlists.queryPlaylistById(modelItem.zuneId, true, true);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                                promise = mediaStore.seriesProvider.getLibraryIdFromMediaIdAsync(zuneId);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                                promise = mediaStore.seriesProvider.getSeasonLibraryIdFromMediaIdAsync(zuneId, modelItem.seasonNumber);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.person:
                                promise = mediaStore.artistProvider.getLibraryIdFromMediaIdAsync(zuneId);
                                break
                        }
                    }
                    if (promise)
                        promise = promise.then(function _startBaseInnerExecute(result) {
                            return (result && result.libraryId) ? result.libraryId : -1
                        }.bind(this));
                    else
                        promise = WinJS.Promise.as(!modelItem || isNaN(modelItem.libraryId) ? -1 : modelItem.libraryId);
                    return promise
                }, hydrateLibraryInfoAsync: function hydrateLibraryInfoAsync(modelItem) {
                    if (!modelItem || (modelItem.fromCollection && modelItem.inCollection) || modelItem.isFromPlaylist || !modelItem.hasZuneId || !MS.Entertainment.Utilities.isValidGuid(modelItem.zuneId))
                        return WinJS.Promise.as(modelItem);
                    var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                    var dataPromise;
                    if (MS.Entertainment.Data.List.isListOrArray(modelItem))
                        dataPromise = MS.Entertainment.ViewModels.hydrateListLibraryInfoAsync(modelItem);
                    else if (modelItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                        dataPromise = mediaStore.trackProvider.getLibraryTrackInfoAsync(modelItem.zuneId).then(function getLibraryTrackInfoAsyncComplete(trackInfoJSON) {
                            var trackInfo;
                            try {
                                trackInfo = JSON.parse(trackInfoJSON).result
                            }
                            catch(error) {
                                MS.Entertainment.Music.fail("hydrateLibraryInfoAsync has failed because JSON.parse failed. error message = " + (error && error.message) + " json = " + trackInfoJSON)
                            }
                            if (trackInfo)
                                for (var property in trackInfo)
                                    if (property in modelItem)
                                        modelItem[property] = trackInfo[property];
                            return modelItem
                        }, function getLibraryTrackInfoAsyncError(error) {
                            var errorMessage = error && error.message;
                            MS.Entertainment.Media.assert(errorMessage === "Canceled", "Failed to get library track info. Error message: " + errorMessage);
                            return modelItem
                        });
                    else if (modelItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video)
                        dataPromise = MS.Entertainment.ViewModels.MediaItemModel.getLibraryIdAsync(modelItem).then(function gotLibraryId(id) {
                            modelItem.libraryId = id;
                            return modelItem
                        }, function failedLibraryId(error) {
                            var errorMessage = error && error.message;
                            MS.Entertainment.Media.assert(errorMessage === "Canceled", "Failed to get library id. Error message: " + errorMessage);
                            return modelItem
                        }).then(function getModelItemEntitlements(modelItem) {
                            if (modelItem.hasZuneId)
                                return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync([modelItem.zuneId]).then(function gotMediaEntitlements(entitlements) {
                                        try {
                                            entitlements = JSON.parse(entitlements)
                                        }
                                        catch(e) {
                                            entitlements = null
                                        }
                                        modelItem.hasPurchased = !!WinJS.Utilities.getMember("result.counts.purchased", entitlements);
                                        return modelItem
                                    }, function failedItemEntitlements(error) {
                                        var errorMessage = error && error.message;
                                        MS.Entertainment.Media.assert(errorMessage === "Canceled", "Failed to get media entitlements. Error message: " + errorMessage);
                                        return modelItem
                                    });
                            else
                                return modelItem
                        });
                    else
                        dataPromise = MS.Entertainment.ViewModels.MediaItemModel.getLibraryIdAsync(modelItem).then(function gotLibraryId(id) {
                            modelItem.libraryId = id;
                            return modelItem
                        }, function failedLibraryId(error) {
                            var errorMessage = error && error.message;
                            MS.Entertainment.Media.assert(errorMessage === "Canceled", "Failed to get library id. Error message: " + errorMessage);
                            return modelItem
                        });
                    return WinJS.Promise.as(dataPromise).then(function gotData(updatedModelItem) {
                            if ("inCollection" in updatedModelItem)
                                updatedModelItem.inCollection = MS.Entertainment.Utilities.isValidLibraryId(updatedModelItem.libraryId);
                            return updatedModelItem
                        })
                }, getMarketplaceDownloadPermittedAsync: function getMarketplaceDownloadPermittedAsync(mediaItem) {
                    if (!MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                        return WinJS.Promise.wrap(false);
                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.queryMediaStateAsync(mediaItem).then(function queryMediaStateAsync_complete(stateInfo) {
                            return WinJS.Promise.wrap(MS.Entertainment.ViewModels.MediaItemModel.isMarketplaceDownloadPermittedState(stateInfo))
                        }.bind(this))
                }, isMarketplaceDownloadPermittedState: function isMarketplaceDownloadPermittedState(stateInfo) {
                    return MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn && stateInfo.marketplace.counts.canDownload > (stateInfo.collection.playability.counts.local + stateInfo.download.counts.pending + stateInfo.download.counts.active)
                }, createUniqueZestId: function createUniqueZestId(mediaItem) {
                    if (mediaItem && mediaItem.mediaType)
                        switch (mediaItem.mediaType) {
                            case Microsoft.Entertainment.Queries.ObjectType.video:
                            case Microsoft.Entertainment.Queries.ObjectType.track:
                            case Microsoft.Entertainment.Queries.ObjectType.person:
                            case Microsoft.Entertainment.Queries.ObjectType.album:
                            case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                if (!mediaItem.hasServiceId)
                                    return null;
                                return "[" + mediaItem.mediaType + "_" + mediaItem.serviceId + "]";
                            case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                                if (!mediaItem.hasSeriesId)
                                    return null;
                                return "[" + mediaItem.mediaType + "_" + mediaItem.seriesId + "]";
                            case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                                if (!mediaItem.hasSeriesId)
                                    return null;
                                return "[" + mediaItem.mediaType + "_" + mediaItem.seriesId + "_" + mediaItem.seasonNumber + "]"
                        }
                    return null
                }
        })})
})()
})();
/* >>>>>>/controls/overlay.js:19456 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        Overlay: MS.Entertainment.UI.Framework.defineUserControl("/Controls/Overlay.html#overlayTemplate", function overlayConstructor(element, options) {
            this._handleLightDismissChanged = this._handleLightDismissChanged.bind(this);
            WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
            if (!element.hasAttribute("data-win-control"))
                element.setAttribute("data-win-control", "MS.Entertainment.UI.Controls.Overlay");
            var keyEvent = "keydown";
            if (MS.Entertainment.Utilities.isApp2)
                keyEvent = "keyup";
            this.domElement.addEventListener(keyEvent, this.keyDown.bind(this));
            WinJS.Utilities.addClass(this.domElement, "overlayAnchor");
            document.body.appendChild(this.domElement);
            this.bind("customStyle", function applyCustomStyle(newValue, oldValue) {
                if (oldValue)
                    WinJS.Utilities.removeClass(this.domElement, oldValue);
                if (newValue)
                    WinJS.Utilities.addClass(this.domElement, newValue)
            }.bind(this));
            if (!this.persistOnNavigate) {
                var navigationService;
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                    navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                if (navigationService) {
                    this._eventHandlers = MS.Entertainment.Utilities.addEvents(navigationService, {currentPageChanged: this._dismissOnNavigate.bind(this)});
                    this._bindings = WinJS.Binding.bind(navigationService, {currentPage: {options: this._dismissOnNavigate.bind(this)}})
                }
                else if (MS.Entertainment.UI.Framework.Navigation && MS.Entertainment.UI.Framework.Navigation.getJournal)
                    this._bindings = MS.Entertainment.Utilities.addEventHandlers(MS.Entertainment.UI.Framework.Navigation.getJournal(), {navigated: this._dismissOnNavigate.bind(this)});
                this._firstBindOnDismiss = false
            }
            if (this.dontWaitForContent)
                this._contentInitialized = true
        }, {
            criticalTemplate: false, _eventHandlers: null, _bindings: null, _skipDefer: true, _presentedToUser: false, _focusSuppressedElements: null, _navigating: false, _contentDismiss: false, _currentPage: null, _winJSNavigation: null, _presetPreOverlayFocus: null, setFocusToNavigationService: false, _oldFocusRoot: null, _saveFocusOnShow: true, _overlayIdentifier: null, _uiStateBindings: null, _uiStateHandlers: null, result: null, visible: false, userControlInstance: null, resolvedUserControlConstructor: null, ignoreChildrenInitialization: true, autoSetFocus: true, excludeEndpointElements: true, focusPreviouslyFocusedElement: true, restorePreviouslyFocusedElement: true, focusFirstElementOnNavigate: true, userControlOptions: undefined, dontWaitForContent: false, dismissOnAppBarShown: false, dismissOnWindowResize: false, enableKeyboardLightDismiss: false, listViewItemToFocusOnClose: null, hideReason: String.empty, onInitializeFinished: null, useGoBackForVoice: false, allowTypeToSearch: true, initialize: function initialize() {
                    this._tabConstrainerHelper = new MS.Entertainment.UI.Framework.TabConstrainer(this.domElement);
                    MS.Entertainment.UI.Controls.assert(this.overlayBackground, "Overlay: Element with data-ent-member='overlayBackground' not found");
                    MS.Entertainment.UI.Controls.assert(this.overlayContainer, "Overlay: Element with data-ent-member='overlayContainer' not found");
                    MS.Entertainment.UI.Controls.assert(this.overlayContent, "Overlay: Element with data-ent-member='overlayContent' not found");
                    if (this.setFocusToNavigationService) {
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                            this._currentPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation))
                            this._winJSNavigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation)
                    }
                    this.bind("lightDismissEnabled", this._handleLightDismissChanged);
                    var that = this;
                    this._overlayIdentifier = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Overlay;
                    this.overlayContent.addEventListener("UserControlInitialized", function userControlInitialized(event) {
                        if (event.userControl instanceof that.resolvedUserControlConstructor) {
                            if (event.userControl && event.userControl.setOverlay)
                                event.userControl.setOverlay(that);
                            if (event.userControl && event.userControl.templateName)
                                this._overlayIdentifier = event.userControl.templateName;
                            that._contentInitialized = true;
                            if (that.visible)
                                that._show();
                            if (this.dontWaitForContent)
                                this._sendShowTelemetryEvent()
                        }
                    }.bind(this));
                    var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    this._uiStateBindings = WinJS.Binding.bind(uiState, {appBarVisible: function onAppBarVisibleChanged(visible, oldVisible) {
                            if (visible && !oldVisible && this.dismissOnAppBarShown && this.visible) {
                                this.hideReason = MS.Entertainment.UI.Controls.OverlayHideReasons.lightDismiss;
                                this.hide()
                            }
                        }.bind(this)});
                    this._uiStateHandlers = MS.Entertainment.UI.Framework.addEventHandlers(uiState, {windowresize: function onWindowResize() {
                            if (this.dismissOnWindowResize && this.visible) {
                                this.hideReason = MS.Entertainment.UI.Controls.OverlayHideReasons.windowResize;
                                this.hide()
                            }
                        }.bind(this)});
                    var UserControlConstructor = this.userControl;
                    var controlAttribute;
                    if (typeof UserControlConstructor === "string") {
                        UserControlConstructor = WinJS.Utilities.getMember(this.userControl);
                        controlAttribute = this.userControl
                    }
                    else
                        controlAttribute = "MS.Entertainment.UI.Framework.UserControl";
                    this.resolvedUserControlConstructor = UserControlConstructor;
                    if (this.userControlOptions)
                        this.userControlOptions._skipDefer = true;
                    MS.Entertainment.UI.Controls.assert(typeof UserControlConstructor === "function", "Overlay: " + this.userControl + " is not a function");
                    this.overlayContent.setAttribute("data-win-control", controlAttribute);
                    this.userControlInstance = new UserControlConstructor(this.overlayContent, this.userControlOptions);
                    this.overlayBackground.addEventListener("click", this.lightDismiss.bind(this));
                    if (this.onInitializeFinished)
                        this.onInitializeFinished()
                }, unload: function unload() {
                    if (this._eventHandlers) {
                        this._eventHandlers.cancel();
                        this._eventHandlers = null
                    }
                    if (this._bindings) {
                        this._bindings.cancel();
                        this._bindings = null
                    }
                    if (this._uiStateBindings) {
                        this._uiStateBindings.cancel();
                        this._uiStateBindings = null
                    }
                    if (this._uiStateHandlers) {
                        this._uiStateHandlers.cancel();
                        this._uiStateHandlers = null
                    }
                    if (this._focusSuppressedElements) {
                        MS.Entertainment.Utilities.restoreSubtreeKeyboardFocus(this._focusSuppressedElements);
                        this._focusSuppressedElements = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, lightDismiss: function lightDismiss() {
                    if (this.lightDismissEnabled && this.visible) {
                        this.hideReason = MS.Entertainment.UI.Controls.OverlayHideReasons.lightDismiss;
                        this.hide();
                        return true
                    }
                    return false
                }, keyDown: function(e) {
                    if (!this.enableKeyboardLightDismiss)
                        return;
                    if (e.keyCode !== WinJS.Utilities.Key.escape && e.keyCode !== WinJS.Utilities.Key.dismissButton && (!MS.Entertainment.Utilities.isApp2 || (e.keyCode !== WinJS.Utilities.Key.backspace || MS.Entertainment.Utilities.doesElementSupportKeyboardInput(document.activeElement))))
                        return;
                    if (this.lightDismiss()) {
                        e.stopPropagation();
                        e.preventDefault()
                    }
                }, _handleLightDismissChanged: function _handleLightDismissChanged(newValue, oldValue) {
                    if (oldValue && !newValue) {
                        MS.Entertainment.Utilities.setAccessibilityText(this.overlayBackground, null);
                        this.overlayBackground.removeAttribute("tabindex");
                        MS.Entertainment.Framework.AccUtils.checkAndSetAriaAttribute(null, this.overlayBackground, "role")
                    }
                    else if (!oldValue && newValue) {
                        MS.Entertainment.Utilities.setAccessibilityTextFromStringId(this.overlayBackground, String.id.IDS_CLOSE_BUTTON);
                        this.overlayBackground.setAttribute("tabindex", -1);
                        MS.Entertainment.Framework.AccUtils.checkAndSetAriaAttribute("button", this.overlayBackground, "role")
                    }
                }, show: function show() {
                    if (this.visible)
                        throw"Dialog.show error - dialog is already visible!";
                    if (this._showCancelled)
                        return WinJS.Promise.wrap();
                    if (!this.allowTypeToSearch && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.typeToSearch))
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.typeToSearch).disableTypeToSearch();
                    this.visible = true;
                    this._navigating = false;
                    var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                    eventProvider.traceOverlay_Shown("Title: [" + this.title + "], UserControl: [" + this.userControl + "]");
                    var pageContainer = document.getElementById("pageContainer");
                    if (pageContainer)
                        pageContainer.setAttribute("aria-hidden", "true");
                    var newMusicPageContainer = document.querySelector(".control-app");
                    if (newMusicPageContainer)
                        newMusicPageContainer.setAttribute("aria-hidden", "true");
                    MS.Entertainment.UI.Controls.assert(!!pageContainer || !!newMusicPageContainer, "Overlay: The 'pageContainer' element was not found. Can't set aria-hidden on root container");
                    if (WinJS.Utilities.getMember("MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.unregisterGlobalCommands"))
                        MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.unregisterGlobalCommands();
                    this.registerGlobalCommands();
                    if (this._contentInitialized)
                        this._show();
                    this._hideCompletePromise = new WinJS.Promise(function(c, e, p) {
                        this._hideComplete = c
                    }.bind(this));
                    return this._hideCompletePromise
                }, hide: function hide() {
                    var completePromise = WinJS.Promise.wrap();
                    if (!this._contentInitialized && !this.visible) {
                        this._showCancelled = true;
                        return completePromise
                    }
                    this._clearSpecialFocusedElement();
                    if (this.visible) {
                        var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                        eventProvider.traceOverlay_Dismissed("Title: [" + this.title + "], UserControl: [" + this.userControl + "]");
                        if (MS.Entertainment.Utilities.isApp2)
                            MS.Entertainment.Utilities.playOverlayOut();
                        MS.Entertainment.UI.Framework.removeOverlayContainer(this.domElement);
                        this.hideAnimation(this.overlayContainer, null).done(function() {
                            if (!this.allowTypeToSearch && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.typeToSearch))
                                MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.typeToSearch).enableTypeToSearch();
                            var focusInOverlay = MS.Entertainment.UI.Framework.focusedItemInContainer(this.domElement);
                            document.body.removeChild(this.domElement);
                            if (this._oldFocusRoot === this.domElement || !document.body.contains(this._oldFocusRoot))
                                this._oldFocusRoot = MS.Entertainment.UI.Framework.currentFocusContainer;
                            if (!this.isStartupDialog || (this._oldFocusRoot && this._oldFocusRoot !== document.body)) {
                                MS.Entertainment.UI.Framework.setFocusRoot(this._oldFocusRoot);
                                this._restorePreviouslyFocusedItem(focusInOverlay)
                            }
                            var pageContainer = document.getElementById("pageContainer");
                            if (pageContainer)
                                pageContainer.removeAttribute("aria-hidden");
                            var newMusicPageContainer = document.querySelector(".control-app");
                            if (newMusicPageContainer)
                                newMusicPageContainer.removeAttribute("aria-hidden");
                            MS.Entertainment.UI.Controls.assert(!!pageContainer || !!newMusicPageContainer, "Overlay: The 'pageContainer' element was not found. Can't remove aria-hidden on root container");
                            if (this._hideComplete)
                                this._hideComplete(this);
                            if (this.isVoiceEnabled)
                                this.refreshVoiceElements()
                        }.bind(this));
                        this.dispatchEvent("close", {sender: this});
                        completePromise = this._hideCompletePromise;
                        MS.Entertainment.UI.Controls.Overlay._visibleCount--;
                        if (MS.Entertainment.UI.Controls.Overlay._visibleCount === 0)
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).overlayVisible = false
                    }
                    else
                        this._showCancelled = true;
                    this.unregisterGlobalCommands();
                    if (WinJS.Utilities.getMember("MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.registerGlobalCommands"))
                        MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.registerGlobalCommands();
                    this.visible = false;
                    return completePromise
                }, registerGlobalCommands: function registerGlobalCommands() {
                    if (!MS.Entertainment.Utilities.isApp2 || !WinJS.Utilities.getMember("MS.Entertainment.UI.Shell.unregisterGlobalBackCommands") || !WinJS.Utilities.getMember("MS.Entertainment.UI.Shell.registerGlobalOverlayBackCommands"))
                        return;
                    WinJS.Utilities.addClass(document.body, "overlayDisplayed");
                    if (!this.allowBackNavigate) {
                        MS.Entertainment.UI.Shell.unregisterGlobalBackCommands();
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.backButton))
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.backButton).hideBackButton();
                        if (this.lightDismissEnabled || this.useGoBackForVoice)
                            MS.Entertainment.UI.Shell.registerGlobalOverlayBackCommands(this.useGoBackForVoice)
                    }
                }, unregisterGlobalCommands: function unregisterGlobalCommands() {
                    if (!MS.Entertainment.Utilities.isApp2 || !WinJS.Utilities.getMember("MS.Entertainment.UI.Shell.unregisterGlobalOverlayBackCommands") || !WinJS.Utilities.getMember("MS.Entertainment.UI.Shell.registerGlobalBackCommands"))
                        return;
                    WinJS.Utilities.removeClass(document.body, "overlayDisplayed");
                    if (!this.allowBackNavigate) {
                        if (this.lightDismissEnabled || this.useGoBackForVoice)
                            MS.Entertainment.UI.Shell.unregisterGlobalOverlayBackCommands(this.useGoBackForVoice);
                        MS.Entertainment.UI.Shell.registerGlobalBackCommands();
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.backButton))
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.backButton).showBackButton()
                    }
                }, _dismissOnNavigate: function _dismissOnNavigate(newVal, oldVal) {
                    if (!this._firstBindOnDismiss && !this._navigating) {
                        this.hideReason = MS.Entertainment.UI.Controls.OverlayHideReasons.navigate;
                        this._navigating = true;
                        if (this.dismissOnNavigateDelay)
                            WinJS.Promise.timeout(this.dismissOnNavigateDelay).done(this.hide.bind(this));
                        else
                            this.hide()
                    }
                }, showAnimation: function showAnimation(element) {
                    return WinJS.UI.Animation.showPopup(element)
                }, hideAnimation: function hideAnimation(element) {
                    if (this.overlayContainer && this.overlayContainer.style)
                        this.overlayContainer.style.opacity = 0;
                    if (this._navigating)
                        return WinJS.Promise.as();
                    else
                        return WinJS.UI.Animation.hidePopup(element)
                }, setAccessibilityTitle: function setAccessibilityTitle(title) {
                    MS.Entertainment.Utilities.setAccessibilityText(this.overlayContainer, title)
                }, previouslyFocusedElement: {
                    get: function get_previouslyFocusedItem() {
                        return this._itemWithFocusBeforeOverlayShown
                    }, set: function set_previouslyFocusedItem(element) {
                            MS.Entertainment.UI.Controls.assert(!this.visible, "Overlay: previouslyFocusedElement can only be set before show() is called!");
                            this._itemWithFocusBeforeOverlayShown = element;
                            this._saveFocusOnShow = false
                        }
                }, _show: function _show() {
                    if (this._presentedToUser)
                        return;
                    this._presentedToUser = true;
                    this._dismissFlyouts();
                    if (this._saveFocusOnShow)
                        this._saveCurrentFocusedItem();
                    MS.Entertainment.UI.Controls.Overlay._visibleCount++;
                    if (MS.Entertainment.UI.Controls.Overlay._visibleCount > 0)
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).overlayVisible = true;
                    WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay");
                    if (MS.Entertainment.Utilities.isApp2)
                        MS.Entertainment.Utilities.playOverlayIn();
                    if (WinJS.UI.AutomaticFocus) {
                        this._oldFocusRoot = WinJS.UI.AutomaticFocus.focusRoot;
                        WinJS.UI.AutomaticFocus.focusRoot = null
                    }
                    MS.Entertainment.UI.Framework.addOverlayContainer(this.domElement);
                    this.showAnimation(this.overlayContainer, null).then(function complete() {
                        MS.Entertainment.UI.Framework.setFocusRoot(this.domElement);
                        if (this.autoSetFocus)
                            MS.Entertainment.UI.Framework.focusFirstInSubTree(this.domElement, this.excludeEndpointElements);
                        this.dispatchEvent(this.events.overlayVisible, {sender: this});
                        if (!this.dontWaitForContent)
                            this._sendShowTelemetryEvent()
                    }.bind(this));
                    this.domElement.addEventListener("dismissoverlay", function() {
                        this._contentDismiss = true;
                        this.hide()
                    }.bind(this))
                }, _dismissFlyouts: function _dismissFlyouts() {
                    var flyouts = document.querySelectorAll(".win-flyout");
                    if (!flyouts)
                        return;
                    for (var i = 0; i < flyouts.length; i++) {
                        var flyout = flyouts[i] && flyouts[i].winControl;
                        if (flyout && flyout.hide)
                            flyout.hide()
                    }
                }, _sendShowTelemetryEvent: function _sendShowTelemetryEvent() {
                    var location = MS.Entertainment.Utilities.getCurrentUserLocation();
                    MS.Entertainment.Utilities.Telemetry.logPageView(this.overlayContainer, {
                        uri: this._overlayIdentifier, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Popup
                    }, {uri: location})
                }, _saveCurrentFocusedItem: function _saveCurrentFocusedItem() {
                    if (this._presetPreOverlayFocus)
                        this._itemWithFocusBeforeOverlayShown = this._presetPreOverlayFocus;
                    else {
                        this._itemWithFocusBeforeOverlayShown = document.activeElement;
                        var containingListView;
                        var listViews = document.querySelectorAll(".win-listview");
                        for (var i = 0; i < listViews.length; i++)
                            if (listViews[i].contains(this._itemWithFocusBeforeOverlayShown))
                                containingListView = listViews[i].winControl;
                        if (containingListView) {
                            var focusIsInListViewSurface = false;
                            if (containingListView.element) {
                                var listViewSurface = containingListView.element.querySelector(".win-surface");
                                if (listViewSurface && listViewSurface.contains(this._itemWithFocusBeforeOverlayShown))
                                    focusIsInListViewSurface = true
                            }
                            if (focusIsInListViewSurface)
                                this._itemWithFocusBeforeOverlayShown = {
                                    listView: containingListView, item: containingListView.currentItem
                                }
                        }
                    }
                    this._saveSpecialFocusedElement();
                    if (!containingListView && this.autoSetFocus && this._itemWithFocusBeforeOverlayShown && this.focusPreviouslyFocusedElement)
                        MS.Entertainment.UI.Framework.focusFirstFocusableAncestor(this._itemWithFocusBeforeOverlayShown)
                }, _saveSpecialFocusedElement: function _saveSpecialFocusedElement() {
                    if (!this._itemWithFocusBeforeOverlayShown)
                        return;
                    if (this._currentPage)
                        WinJS.Binding.unwrap(this._currentPage).specialFocusedElement = this._itemWithFocusBeforeOverlayShown;
                    if (this._winJSNavigation) {
                        var listView = this._itemWithFocusBeforeOverlayShown.listView || null;
                        var currentItem = this._itemWithFocusBeforeOverlayShown.item || null;
                        var focusedElement = null;
                        if (!listView && !currentItem)
                            focusedElement = this._itemWithFocusBeforeOverlayShown;
                        this._winJSNavigation.setPreviouslyFocusedItem(focusedElement, listView, currentItem)
                    }
                }, _clearSpecialFocusedElement: function _clearSpecialFocusedElement() {
                    if (!this._navigating && !this._contentDismiss) {
                        if (this._currentPage)
                            WinJS.Binding.unwrap(this._currentPage).specialFocusedElement = null;
                        if (this._winJSNavigation)
                            this._winJSNavigation.clearPreviouslyFocusedItem()
                    }
                }, _restorePreviouslyFocusedItem: function _restorePreviouslyFocusedItem(focusInOverlay) {
                    var focusFirstInSubTree = false;
                    var previousItem = this._itemWithFocusBeforeOverlayShown;
                    if (!this.restorePreviouslyFocusedElement || (!previousItem || !focusInOverlay) && MS.Entertainment.Utilities.isApp1)
                        return;
                    var target = previousItem;
                    if (target && target.listView)
                        target = target.listView._element;
                    if (!MS.Entertainment.UI.Framework.canMoveFocus(target)) {
                        if (MS.Entertainment.UI.Framework.currentFocusContainer !== MS.Entertainment.UI.Framework.currentContentContainer)
                            return;
                        target = null
                    }
                    if (!target) {
                        if (MS.Entertainment.Utilities.isApp1 || !this.focusFirstElementOnNavigate)
                            return;
                        previousItem = target = MS.Entertainment.UI.Framework.currentFocusContainer;
                        focusFirstInSubTree = true
                    }
                    var listViewItem = this.listViewItemToFocusOnClose || (previousItem && previousItem.item);
                    if (previousItem && previousItem.listView && listViewItem) {
                        if (!this._navigating)
                            WinJS.Promise.timeout(100).then(function() {
                                if (MS.Entertainment.Framework.KeyboardInteractionListener.showKeyboardFocus)
                                    listViewItem.showFocus = true;
                                previousItem.listView.currentItem = listViewItem
                            })
                    }
                    else if (!focusFirstInSubTree)
                        MS.Entertainment.UI.Framework.focusFirstFocusableAncestor(previousItem);
                    else
                        MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(previousItem, 0)
                }, _tabConstrainerHelper: null, _itemWithFocusBeforeOverlayShown: null, _fadedElements: null, _hideComplete: null, _hideCompletePromise: null, _contentInitialized: false, _showCancelled: false, _firstBindOnDismiss: true
        }, {
            top: "20%", left: "20%", bottom: "20%", right: "20%", userControl: null, lightDismissEnabled: true, allowBackNavigate: false, customStyle: null, showContainerAnimationClass: "animShowOverlayContainer", hideContainerAnimationClass: "animHideOverlayContainer", showBackgroundAnimationClass: "animShowOverlayBackground", hideBackgroundAnimationClass: "animHideOverlayBackground", events: {overlayVisible: "overlayVisible"}
        }, {
            anyVisible: function anyVisible() {
                return MS.Entertainment.UI.Controls.Overlay._visibleCount > 0
            }, _visibleCount: 0, _dismissOnNavigateDelay: 750, _dismissOnNowPlaying: 2000, showLoadingOverlay: function showLoadingOverlay(loadingOptions) {
                    loadingOptions = loadingOptions || {};
                    if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped)
                        return WinJS.Promise.as();
                    var showAnimation = function showAnimation() {
                            return WinJS.Promise.timeout()
                        };
                    if (loadingOptions.showAnimation)
                        showAnimation = loadingOptions.showAnimation;
                    var options = {
                            userControl: loadingOptions.userControl, top: 0, left: 0, bottom: 0, right: 0, customStyle: loadingOptions.overlayCustomStyle, persistOnNavigate: false, dontWaitForContent: false, showAnimation: showAnimation, enableKeyboardLightDismiss: !!loadingOptions.enableKeyboardLightDismiss, dismissOnNavigateDelay: MS.Entertainment.UI.Controls.Overlay._dismissOnNavigateDelay, setFocusToNavigationService: true, userControlOptions: loadingOptions.userControlOptions
                        };
                    if (loadingOptions.hideAnimation)
                        options.hideAnimation = loadingOptions.hideAnimation;
                    var newControl = document.createElement("div");
                    var overlay = new MS.Entertainment.UI.Controls.Overlay(newControl, options);
                    WinJS.Utilities.addClass(overlay.domElement, "loadingOverlay");
                    var progressControl = document.createElement("progress");
                    WinJS.Utilities.addClass(progressControl, "loadingRing win-ring win-large");
                    var completion = null;
                    var showPopover = function showPopover() {
                            if (loadingOptions.hideOnNowPlaying) {
                                var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                if (navigationService && navigationService.checkUserLocation(MS.Entertainment.UI.Monikers.fullScreenNowPlaying))
                                    WinJS.Promise.timeout(this._dismissOnNowPlaying).done(overlay.hide.bind(overlay))
                            }
                            var closeTimeoutPromise = null;
                            if (loadingOptions.closeTimeoutMS)
                                closeTimeoutPromise = WinJS.Promise.timeout(loadingOptions.closeTimeoutMS).then(function closeOverlay() {
                                    overlay.hide()
                                });
                            return overlay.show().then(function onComplete(params) {
                                    if (completion)
                                        completion(params);
                                    if (closeTimeoutPromise)
                                        closeTimeoutPromise.cancel()
                                })
                        }.bind(this);
                    var preShowPopover = function preShowPopover() {
                            if (loadingOptions.onInitialize)
                                return loadingOptions.onInitialize(overlay.overlayContent).then(showPopover);
                            else
                                return showPopover()
                        };
                    if (overlay.overlayContent)
                        return preShowPopover();
                    else {
                        overlay.onInitializeFinished = preShowPopover;
                        return new WinJS.Promise(function(c, e, p) {
                                completion = c
                            })
                    }
                }
        }), OverlayHideReasons: {
                other: "other", lightDismiss: "lightDismiss", navigate: "navigate", windowResize: "windowResize"
            }
    })
})();
(function runVoiceMixins() {
    MS.Entertainment.Utilities.runVoiceControlMixins(MS.Entertainment.UI.Controls.Overlay)
})()
})();
/* >>>>>>/controls/dialog.js:19918 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {Dialog: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Overlay", "/Controls/Dialog.html#dialogTemplate", function dialogConstructor(element, options) {
            this._updatePosition = this._updatePosition.bind(this);
            this.lightDismissEnabled = false;
            this._setInitialButtons();
            this.bind("width", this._updatePosition);
            this.bind("height", this._updatePosition)
        }, {
            _eventHandlers: null, autoSetFocus: false, wasCancelled: false, allowTypeToSearch: false, disallowUserDismiss: false, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.Overlay.prototype.initialize.call(this);
                    var that = this;
                    var onCancel = function onCancel() {
                            if (that.dismissedCallback)
                                that.dismissedCallback();
                            else {
                                var cancelButtonIndex = that.cancelButtonIndex;
                                if (that.cancelButtonIndex === undefined)
                                    cancelButtonIndex = that.buttons.length - 1;
                                if (cancelButtonIndex >= 0 && cancelButtonIndex < that.buttons.length) {
                                    var cancelButton = that.buttons[cancelButtonIndex];
                                    if (cancelButton && cancelButton.isAvailable && cancelButton.isEnabled && cancelButton.doExecute)
                                        cancelButton.doExecute()
                                }
                            }
                        }.bind(this);
                    this._eventHandlers = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                        keypress: function onKeyPress(event) {
                            if (event.keyCode === WinJS.Utilities.Key.escape && that.buttons)
                                onCancel()
                        }.bind(this), keyup: function onKeyUp(event) {
                                if (event.keyCode === WinJS.Utilities.Key.dismissButton) {
                                    event.stopPropagation();
                                    onCancel()
                                }
                            }.bind(this)
                    });
                    MS.Entertainment.Utilities.attachResizeEvent(this.domElement, this._updatePosition);
                    this.overlayContainer.setAttribute("aria-label", this.title);
                    if (this.automationId)
                        this.overlayContainer.setAttribute("data-win-automationid", this.automationId);
                    var updateButtons = this._updateButtons.bind(this);
                    this.bind("buttons", updateButtons);
                    this.bind("defaultButtonIndex", updateButtons)
                }, unload: function unload() {
                    MS.Entertainment.Utilities.detachResizeEvent(this.domElement, this._updatePosition);
                    if (this._eventHandlers) {
                        this._eventHandlers.cancel();
                        this._eventHandlers = null
                    }
                    MS.Entertainment.UI.Controls.Overlay.prototype.unload.call(this)
                }, show: function show() {
                    var promise = MS.Entertainment.UI.Controls.Overlay.prototype.show.call(this);
                    var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                    if (appBarControl && appBarControl.hide)
                        appBarControl.hide();
                    return promise
                }, _setInitialButtons: function _setInitialButtons() {
                    if (!this.disallowUserDismiss)
                        if (!this.buttons)
                            this.buttons = [{
                                    title: String.load(String.id.IDS_CLOSE_BUTTON), isEnabled: true, isAvailable: true, execute: function onClose(overlay) {
                                            this.wasCancelled = true;
                                            overlay.hide()
                                        }.bind(this)
                                }]
                }, _updateButtons: function _updateButtons() {
                    if (this.buttons) {
                        var that = this;
                        var nonObservableSetProperty = function nonObservableSetProperty(instance, property, value) {
                                instance[property] = value
                            };
                        var observableSetProperty = function observableSetProperty(instance, property, value) {
                                instance.addProperty(property, value)
                            };
                        this.buttons.forEach(function(item) {
                            var setProperty = nonObservableSetProperty;
                            if (item !== WinJS.Binding.unwrap(item))
                                setProperty = observableSetProperty;
                            MS.Entertainment.UI.Controls.assert(typeof item.title === "string", "Dialog: Button title property is not a string");
                            MS.Entertainment.UI.Controls.assert(typeof item.execute === "function", "Dialog: Button execute property is not a function");
                            if (item.isEnabled === undefined)
                                setProperty(item, "isEnabled", true);
                            if (item.isAvailable === undefined)
                                setProperty(item, "isAvailable", true);
                            if (item !== WinJS.Binding.unwrap(item)) {
                                item.bind("isEnabled", function() {
                                    setProperty(item, "isDisabled", !item.isEnabled)
                                });
                                item.bind("isAvailable", function() {
                                    setProperty(item, "isHidden", !item.isAvailable)
                                })
                            }
                            else {
                                setProperty(item, "isDisabled", !item.isEnabled);
                                setProperty(item, "isHidden", !item.isAvailable)
                            }
                            setProperty(item, "isDefault", false);
                            setProperty(item, "buttonType", "button");
                            setProperty(item, "doExecute", WinJS.Utilities.markSupportedForProcessing(function onClick(event) {
                                if (item.isAvailable && item.isEnabled)
                                    item.execute(that, event)
                            }));
                            if (WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoiceStatics"))
                                setProperty(item, "voiceConfidence", MS.Entertainment.UI.App2.VoiceStatics.defaultConfidence)
                        });
                        var defaultIndex = this.defaultButtonIndex;
                        if (this.defaultButtonIndex === undefined)
                            this.defaultButtonIndex = defaultIndex = 0;
                        if (defaultIndex >= 0 && defaultIndex < that.buttons.length) {
                            var defaultButton = this.buttons[defaultIndex];
                            defaultButton.isDefault = true;
                            defaultButton.buttonType = "submit"
                        }
                    }
                    if (this._buttonList)
                        this._buttonList.dataSource = this.buttons
                }, _updatePosition: function _updatePosition() {
                    if (this.width) {
                        MS.Entertainment.UI.Controls.assert(typeof this.width === "string", "Dialog 'width' property is not a string");
                        if (this.width.indexOf("%") > 0)
                            this.left = this.right = (100 - parseInt(this.width)) / 2 + "%";
                        else
                            this.left = this.right = (MS.Entertainment.Utilities.getWindowWidth() - parseInt(this.width)) / 2 + "px"
                    }
                    if (this.height) {
                        MS.Entertainment.UI.Controls.assert(typeof this.height === "string", "Dialog 'height' property is not a string");
                        if (this.height.indexOf("%") > 0)
                            this.top = this.bottom = (100 - parseInt(this.height)) / 2 + "%";
                        else
                            this.top = this.bottom = (MS.Entertainment.Utilities.getWindowHeight() - parseInt(this.height)) / 2 + "px"
                    }
                }, _handleButtonClick: function _handleButtonClick(e) {
                    if (e && e.target && e.target.performClick)
                        e.target.performClick(e)
                }
        }, {
            title: null, buttonRowAdditionalText: String.empty, buttons: null, defaultButtonIndex: undefined, cancelButtonIndex: undefined, dismissedCallback: undefined, width: undefined, height: undefined
        }, {
            dialogFormSubmit: function dialogFormSubmit(){}, focusDefaultItemWhenCreated: WinJS.Utilities.markSupportedForProcessing(function(container, item) {
                    if (item.isDefault)
                        WinJS.Promise.timeout(100).then(function() {
                            if (container.firstElementChild)
                                MS.Entertainment.UI.Framework.focusElement(container.firstElementChild)
                        })
                })
        })})
})()
})();
