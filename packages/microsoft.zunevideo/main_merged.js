/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    WinJS.Namespace.define("MS.Entertainment.UI.Framework", {
        scriptMappings: {
            "/winrttemplateproviderstubs.js": "/main_merged.js",
            "/components/perftrack/perftrack.js": "/main_merged.js",
            "/framework/commonstringids.js": "/main_merged.js",
            "/framework/nativestringids.js": "/main_merged.js",
            "/framework/lockedstringids.js": "/main_merged.js",
            "/framework/videostringids.js": "/main_merged.js",
            "/framework/video1stringids.js": "/main_merged.js",
            "/framework/corefx.js": "/main_merged.js",
            "/framework/scriptvalidator.js": "/main_merged.js",
            "/framework/debug.js": "/main_merged.js",
            "/framework/utilities.js": "/main_merged.js",
            "/framework/servicelocator.js": "/main_merged.js",
            "/framework/featureenablementservice.js": "/main_merged.js",
            "/framework/telemetryutilities.js": "/main_merged.js",
            "/framework/usertimetelemetrymanager.js": "/main_merged.js",
            "/monikers.js": "/main_merged.js",
            "/framework/uistateservice.js": "/main_merged.js",
            "/framework/observablearray.js": "/main_merged.js",
            "/framework/data/factory.js": "/main_merged.js",
            "/framework/data/ranges.js": "/main_merged.js",
            "/framework/data/grouper.js": "/main_merged.js",
            "/framework/data/list.js": "/main_merged.js",
            "/framework/data/virtuallist.js": "/main_merged.js",
            "/framework/data/query.js": "/main_merged.js",
            "/framework/keyboardnavigationmanager.js": "/main_merged.js",
            "/framework/querywatcher.js": "/main_merged.js",
            "/framework/actionidentifiers.js": "/main_merged.js",
            "/framework/videoactionidentifiers.js": "/main_merged.js",
            "/framework/automationidentifiers.js": "/main_merged.js",
            "/framework/videoautomationidentifiers.js": "/main_merged.js",
            "/framework/action.js": "/main_merged.js",
            "/controls/listcontrols.js": "/main_merged.js",
            "/framework/selectionmanager.js": "/main_merged.js",
            "/controls/pivotcontrols.js": "/main_merged.js",
            "/framework/winjsnavigation.js": "/main_merged.js",
            "/components/signin/signinerrors.js": "/main_merged.js",
            "/components/signin/signin.js": "/main_merged.js",
            "/framework/endpoints.js": "/main_merged.js",
            "/framework/accutils.js": "/main_merged.js",
            "/framework/pluralizationutilities.js": "/main_merged.js",
            "/framework/formatters.js": "/main_merged.js",
            "/framework/navigatetopageaction.js": "/main_merged.js",
            "/framework/video_win/videonavigationactions.js": "/main_merged.js",
            "/framework/deeplink.js": "/main_merged.js",
            "/framework/video_win/videodeeplinks.js": "/main_merged.js",
            "/framework/video_win/videodeeplinksactions.js": "/main_merged.js",
            "/framework/shortcutmanager.js": "/main_merged.js",
            "/framework/keyboardshortcuthandler.js": "/main_merged.js",
            "/framework/networkstatusservice.js": "/main_merged.js",
            "/components/search/typetosearchservice.js": "/main_merged.js",
            "/components/shell/appnotification.js": "/main_merged.js",
            "/controls/video_win/devicelimiterror.js": "/main_merged.js",
            "/coreapplication.js": "/main_merged.js",
            "/videowinmain.js": "/main_merged.js",
            "/components/shell/apptoolbarservice.js": "/group_2_merged.js",
            "/components/shell/openfileaction.js": "/group_2_merged.js",
            "/components/playback/concurrentstreamingrestriction.js": "/group_2_merged.js",
            "/components/playback/playbackerrors.js": "/group_2_merged.js",
            "/components/playback/playlist/playlist.js": "/group_2_merged.js",
            "/components/playback/playbackeventnotifications.js": "/group_2_merged.js",
            "/components/playback/controls/mediaplayer.js": "/moviedetails_merged.js",
            "/components/playback/controls/xplayer.js": "/group_2_merged.js",
            "/components/playback/playbackhelpers.js": "/group_2_merged.js",
            "/components/shell/purchasehelpers.js": "/group_2_merged.js",
            "/components/playback/playbacktrace.js": "/group_1_merged.js",
            "/components/playback/volumecontroller.js": "/group_2_merged.js",
            "/components/playback/playlog.js": "/group_2_merged.js",
            "/components/playback/playbackstates.js": "/group_2_merged.js",
            "/components/playback/session/playbacksession.js": "/group_2_merged.js",
            "/components/playback/mediainstance.js": "/moviedetails_merged.js",
            "/components/playback/controls/playbackcontrollervideo.js": "/moviedetails_merged.js",
            "/components/playback/controls/playbackcontroller.js": "/moviedetails_merged.js",
            "/components/playback/controls/playbackcontrol.js": "/group_2_merged.js",
            "/controls/transportcontrols/transportcontrols.js": "/moviedetails_merged.js",
            "/components/session/sessionmgr.js": "/group_2_merged.js",
            "/components/playback/closedcaptions/renderer.js": "/moviedetails_merged.js",
            "/components/playback/closedcaptions/presenter.js": "/moviedetails_merged.js",
            "/controls/actionlist.js": "/group_2_merged.js",
            "/controls/video_win/videowinnowplayingoverlays.js": "/nowplaying_merged.js",
            "/components/immersivedetails/showimmersivedetailsaction.js": "/group_2_merged.js",
            "/controls/dialog.js": "/group_1_merged.js",
            "/viewmodels/purchaseflow/smartbuybuttons.js": "/group_2_merged.js",
            "/components/inlinedetails/actionbuttonscontrol.js": "/group_2_merged.js",
            "/viewmodels/social/sharefactory.js": "/group_2_merged.js",
            "/viewmodels/social/sharesender.js": "/group_2_merged.js",
            "/viewmodels/social/sharehost.js": "/group_2_merged.js",
            "/viewmodels/purchaseflow/videosmartbuystateengine.js": "/group_2_merged.js",
            "/framework/downloadaction.js": "/group_2_merged.js",
            "/framework/deleteaction.js": "/group_2_merged.js",
            "/controls/video/choosedownloadquality.js": "/group_2_merged.js",
            "/controls/gallerygrouper.js": "/group_1_merged.js",
            "/controls/modifier.js": "/group_1_merged.js",
            "/framework/data/queries/videoqueries.js": "/group_1_merged.js",
            "/framework/acquisitiondata.js": "/group_1_merged.js",
            "/controls/mediastatusicon.js": "/group_2_merged.js",
            "/components/playback/addtonowplayingaction.js": "/group_2_merged.js",
            "/controls/userfeedbackdialog.js": "/group_2_merged.js",
            "/framework/interactionnotifier.js": "/group_1_merged.js",
            "/controls/webhostexperience.js": "/group_2_merged.js",
            "/framework/purchasehistoryservice.js": "/moviedetails_merged.js",
            "/components/social/sharetemplates.js": "/group_2_merged.js",
            "/viewmodels/queryviewmodel.js": "/group_1_merged.js",
            "/controls/managefoldersview.js": "/videocollection_merged.js",
            "/framework/scriptutilities.js": "/searchresultspage_merged.js",
            "/framework/imageloader.js": "/group_1_merged.js",
            "/framework/filetransfernotificationservice.js": "/group_1_merged.js",
            "/framework/filetransferservice.js": "/group_1_merged.js",
            "/controls/label.js": "/group_2_merged.js",
            "/controls/overlay.js": "/group_1_merged.js",
            "/framework/urifactory.js": "/group_1_merged.js",
            "/framework/data/augmenters/commonhydrators.js": "/group_1_merged.js",
            "/framework/data/augmenters/commonaugmenters.js": "/group_1_merged.js",
            "/framework/data/augmenters/edsaugmenters.js": "/group_1_merged.js",
            "/framework/data/augmenters/spotlightaugmenters.js": "/group_1_merged.js",
            "/framework/shell.js": "/videocollection_merged.js",
            "/framework/externalnavigateaction.js": "/moviedetails_merged.js",
            "/animations/galleryanimations.js": "/group_2_merged.js",
            "/controls/gallerycontrol.js": "/group_1_merged.js",
            "/framework/navigateaction.js": "/group_1_merged.js",
            "/framework/contentnotification.js": "/group_1_merged.js",
            "/components/shell/contentnotificationlist.js": "/group_1_merged.js",
            "/viewmodels/mediaitemmodel.js": "/group_1_merged.js",
            "/framework/upgradereminderdisplayer.js": "/group_2_merged.js",
            "/controls/popover.js": "/group_2_merged.js",
            "/controls/link.js": "/group_1_merged.js",
            "/controls/iconbutton.js": "/group_1_merged.js",
            "/framework/imageidtypes.js": "/group_1_merged.js",
            "/viewmodels/purchaseflow/smartbuystateengine.js": "/group_2_merged.js",
            "/framework/downloadinfo.js": "/group_1_merged.js",
            "/framework/disabled.js": "/group_2_merged.js",
            "/viewmodels/purchaseflow/smartappbaractions.js": "/group_2_merged.js",
            "/controls/errordialog.js": "/group_2_merged.js",
            "/controls/video/videodownloadmanager.js": "/moviedetails_merged.js",
            "/components/video/episodeprogressionhelper.js": "/tvdetails_merged.js",
            "/framework/data/queries/libraryqueries.js": "/group_1_merged.js",
            "/framework/data/queries/marketplacequeries.js": "/group_1_merged.js",
            "/framework/data/augmenters/videoaugmenters.js": "/group_1_merged.js",
            "/components/video/metacriticreview.js": "/tvdetails_merged.js",
            "/components/video/videodetailsuistateservice.js": "/group_2_merged.js",
            "/controls/starratingcontrol.js": "/group_2_merged.js",
            "/controls/showmore.js": "/group_2_merged.js",
            "/framework/data/queries/edsqueries.js": "/group_1_merged.js",
            "/framework/data/augmenters/videohydrators.js": "/group_1_merged.js",
            "/framework/data/queries/spotlightqueries.js": "/group_1_merged.js",
            "/controls/pageditemscontrol.js": "/group_1_merged.js",
            "/components/moreaction.js": "/group_2_merged.js",
            "/framework/moduleselectionmanager.js": "/group_1_merged.js",
            "/components/video/gracenoteservice.js": "/moviedetails_merged.js",
            "/controls/carousel.js": "/group_1_merged.js",
            "/viewmodels/viewstateviewmodel.js": "/group_1_merged.js",
            "/viewmodels/modulebase.js": "/group_1_merged.js",
            "/viewmodels/pageviewmodelbase.js": "/group_1_merged.js",
            "/viewmodels/contentquerymodule.js": "/group_1_merged.js",
            "/viewmodels/coremodulebase.js": "/group_1_merged.js",
            "/viewmodels/video/castandcrewmodule.js": "/moviedetails_merged.js",
            "/viewmodels/video_win/bundlesmodule.js": "/moviedetails_merged.js",
            "/viewmodels/detailspageviewmodelbase.js": "/group_2_merged.js",
            "/viewmodels/video_win/rottentomatoesmodule.js": "/moviedetails_merged.js",
            "/viewmodels/video_win/videomodulefactory.js": "/group_1_merged.js",
            "/viewmodels/video_win/videodetailsviewmodelbase.js": "/group_2_merged.js",
            "/controls/pageviewbase.js": "/group_1_merged.js",
            "/controls/viewstatecontrol.js": "/group_1_merged.js",
            "/controls/video_win/languagepicker.js": "/group_2_merged.js",
            "/viewmodels/video_win/videomarketplaceviewmodelbase.js": "/group_1_merged.js",
            "/viewmodels/video_win/moviedetailsviewmodel.js": "/moviedetails_merged.js",
            "/controls/video_win/moviedetails.js": "/moviedetails_merged.js",
            "/viewmodels/video_win/videostorehubviewmodel.js": "/group_1_merged.js",
            "/viewmodels/video_win/moviesstorehubviewmodel.js": "/moviesstore_merged.js",
            "/components/video/tvdetailsmodel.js": "/group_1_merged.js",
            "/controls/video_win/moviesstorehub.js": "/moviesstore_merged.js",
            "/viewmodels/video_win/videoflexhubviewmodel.js": "/group_1_merged.js",
            "/framework/data/listgrouper.js": "/group_1_merged.js",
            "/controls/headercontrol.js": "/group_1_merged.js",
            "/controls/galleryhost.js": "/group_1_merged.js",
            "/controls/shrinkandstayheadercontrol.js": "/group_1_merged.js",
            "/controls/shrinkandstaylistviewlayout.js": "/group_1_merged.js",
            "/viewmodels/searchviewmodelbase.js": "/searchresultspage_merged.js",
            "/viewmodels/searchgalleryviewmodelbase.js": "/searchresultspage_merged.js",
            "/viewmodels/searchmodule.js": "/searchresultspage_merged.js",
            "/viewmodels/video_win/videosearchviewmodelbase.js": "/searchresultspage_merged.js",
            "/viewmodels/video_win/videosearchmodule.js": "/searchresultspage_merged.js",
            "/viewmodels/video_win/videosearchgalleryviewmodelbase.js": "/searchresultspage_merged.js",
            "/viewmodels/video_win/episodesmodule.js": "/tvdetails_merged.js",
            "/viewmodels/video_win/seriesseasonsmodule.js": "/tvdetails_merged.js",
            "/viewmodels/video_win/tvdetailsviewmodel.js": "/tvdetails_merged.js",
            "/controls/video_win/tvdetails.js": "/tvdetails_merged.js",
            "/viewmodels/video_win/tvstorehubviewmodel.js": "/tvstore_merged.js",
            "/controls/video_win/tvstorehub.js": "/tvstore_merged.js",
            "/controls/video_win/offlinenotification.js": "/group_1_merged.js",
            "/controls/video_win/videocollection.js": "/videocollection_merged.js",
            "/viewmodels/video_win/videocollectionviewmodel.js": "/videocollection_merged.js",
            "/framework/managefoldersaction.js": "/videocollection_merged.js",
            "/viewmodels/video_win/editorialvideomarketplaceviewmodel.js": "/videomarketplacepagetemplate_merged.js",
            "/viewmodels/video_win/featuredsetsmarketplaceviewmodel.js": "/videomarketplacepagetemplate_merged.js",
            "/viewmodels/video_win/topmoviesmarketplaceviewmodel.js": "/videomarketplacepagetemplate_merged.js",
            "/viewmodels/video_win/toptvmarketplaceviewmodel.js": "/videomarketplacepagetemplate_merged.js",
        }
    });
})();
/* >>>>>>/winrttemplateproviderstubs.js:204 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function initMicrosoft_Zune_Common(global) {
    var providerTemplates = null;
    var ns = global;
    if (ns.Diagnostics === undefined)
        ns.Diagnostics = {};
    var ns = ns.Diagnostics;
    if (ns.Tracing === undefined)
        ns.Tracing = {};
    var ns = ns.Tracing;
    if (ns.Microsoft === undefined)
        ns.Microsoft = {};
    var ns = ns.Microsoft;
    if (ns.Entertainment === undefined)
        ns.Entertainment = {};
    var ns = ns.Entertainment;
    if (ns.Instrumentation === undefined)
        ns.Instrumentation = {};
    var ns = ns.Instrumentation;
    if (ns.Providers === undefined)
        ns.Providers = {};
    var ns = ns.Providers;
    ns.Common = function() {
        if (providerTemplates === null)
            providerTemplates = new global.Microsoft.Entertainment.Instrumentation.Providers.CommonTemplate
    };
    var proto = ns.Common.prototype;
    proto.is_ShipAssertEnabled = function() {
        return !!providerTemplates.eventEnabled(0)
    };
    proto.trace_ShipAssert = function(id, param, message, hResult, functionName, file, line) {
        providerTemplates.traceTemplate_qqzdzzq(0, id, param, message, hResult, functionName, file, line)
    };
    proto.isBusinessIntelligenceScalarDataPointEnabled = function() {
        return !!providerTemplates.eventEnabled(1)
    };
    proto.traceBusinessIntelligenceScalarDataPoint = function(id, userId, timestamp, classId, typeId, allowedByPrivacySettings, parameterName, parameterValue) {
        providerTemplates.traceTemplate_qjiqqtzq(1, id, userId, timestamp, classId, typeId, allowedByPrivacySettings, parameterName, parameterValue)
    };
    proto.isBusinessIntelligenceStreamDataPointEnabled = function() {
        return !!providerTemplates.eventEnabled(2)
    };
    proto.traceBusinessIntelligenceStreamDataPoint = function(id, userId, timestamp, classId, typeId, allowedByPrivacySettings, parameterCount) {
        providerTemplates.traceTemplate_qjiqqtq(2, id, userId, timestamp, classId, typeId, allowedByPrivacySettings, parameterCount)
    };
    proto.isBusinessIntelligenceStreamIntParameterEnabled = function() {
        return !!providerTemplates.eventEnabled(3)
    };
    proto.traceBusinessIntelligenceStreamIntParameter = function(id, parameterName, parameterValue) {
        providerTemplates.traceTemplate_qzq(3, id, parameterName, parameterValue)
    };
    proto.isBusinessIntelligenceStreamBooleanParameterEnabled = function() {
        return !!providerTemplates.eventEnabled(4)
    };
    proto.traceBusinessIntelligenceStreamBooleanParameter = function(id, parameterName, parameterValue) {
        providerTemplates.traceTemplate_qzt(4, id, parameterName, parameterValue)
    };
    proto.isBusinessIntelligenceStreamStringParameterEnabled = function() {
        return !!providerTemplates.eventEnabled(5)
    };
    proto.traceBusinessIntelligenceStreamStringParameter = function(id, parameterName, parameterValue) {
        providerTemplates.traceTemplate_qzz(5, id, parameterName, parameterValue)
    };
    proto.isClientLaunchEnabled = function() {
        return !!providerTemplates.eventEnabled(6)
    };
    proto.traceClientLaunch = function() {
        providerTemplates.traceTemplateEventDescriptor(6)
    };
    proto.isClientShutdownEnabled = function() {
        return !!providerTemplates.eventEnabled(7)
    };
    proto.traceClientShutdown = function(code) {
        providerTemplates.traceTemplate_d(7, code)
    };
    proto.isEventSystemErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(8)
    };
    proto.traceEventSystemError = function(errorCode, provider, eventChannel, eventId, eventKeywords, eventLevel, eventOpcode, eventTask, eventVersion) {
        providerTemplates.traceTemplate_qjqqxqqqq(8, errorCode, provider, eventChannel, eventId, eventKeywords, eventLevel, eventOpcode, eventTask, eventVersion)
    };
    proto.isZuneHostLaunchEnabled = function() {
        return !!providerTemplates.eventEnabled(9)
    };
    proto.traceZuneHostLaunch = function(isElevated, parameter) {
        providerTemplates.traceTemplate_tz(9, isElevated, parameter)
    };
    proto.isZuneHostShutdownEnabled = function() {
        return !!providerTemplates.eventEnabled(10)
    };
    proto.traceZuneHostShutdown = function(code) {
        providerTemplates.traceTemplate_d(10, code)
    };
    proto.isLogFileUploadedToWatsonEnabled = function() {
        return !!providerTemplates.eventEnabled(11)
    };
    proto.traceLogFileUploadedToWatson = function(filePath) {
        providerTemplates.traceTemplate_z(11, filePath)
    };
    proto.isProcessInitializeEventStartEnabled = function() {
        return !!providerTemplates.eventEnabled(12)
    };
    proto.traceProcessInitializeEventStart = function() {
        providerTemplates.traceTemplateEventDescriptor(12)
    };
    proto.isProcessInitializeEventStopEnabled = function() {
        return !!providerTemplates.eventEnabled(13)
    };
    proto.traceProcessInitializeEventStop = function(durationMsec) {
        providerTemplates.traceTemplate_q(13, durationMsec)
    };
    proto.isProcessSuspendEventStartEnabled = function() {
        return !!providerTemplates.eventEnabled(14)
    };
    proto.traceProcessSuspendEventStart = function() {
        providerTemplates.traceTemplateEventDescriptor(14)
    };
    proto.isProcessSuspendEventStopEnabled = function() {
        return !!providerTemplates.eventEnabled(15)
    };
    proto.traceProcessSuspendEventStop = function(durationMsec) {
        providerTemplates.traceTemplate_q(15, durationMsec)
    };
    proto.isProcessResumeEventStartEnabled = function() {
        return !!providerTemplates.eventEnabled(16)
    };
    proto.traceProcessResumeEventStart = function() {
        providerTemplates.traceTemplateEventDescriptor(16)
    };
    proto.isProcessResumeEventStopEnabled = function() {
        return !!providerTemplates.eventEnabled(17)
    };
    proto.traceProcessResumeEventStop = function(durationMsec) {
        providerTemplates.traceTemplate_q(17, durationMsec)
    };
    proto.isProcessSuspendEventSingletonStartEnabled = function() {
        return !!providerTemplates.eventEnabled(18)
    };
    proto.traceProcessSuspendEventSingletonStart = function(singletonEnumValue) {
        providerTemplates.traceTemplate_q(18, singletonEnumValue)
    };
    proto.isProcessSuspendEventSingletonStopEnabled = function() {
        return !!providerTemplates.eventEnabled(19)
    };
    proto.traceProcessSuspendEventSingletonStop = function(singletonEnumValue) {
        providerTemplates.traceTemplate_q(19, singletonEnumValue)
    };
    proto.isProcessResumeEventSingletonStartEnabled = function() {
        return !!providerTemplates.eventEnabled(20)
    };
    proto.traceProcessResumeEventSingletonStart = function(singletonEnumValue) {
        providerTemplates.traceTemplate_q(20, singletonEnumValue)
    };
    proto.isProcessResumeEventSingletonStopEnabled = function() {
        return !!providerTemplates.eventEnabled(21)
    };
    proto.traceProcessResumeEventSingletonStop = function(singletonEnumValue) {
        providerTemplates.traceTemplate_q(21, singletonEnumValue)
    };
    proto.isProcessSuspendTelemetryStartEnabled = function() {
        return !!providerTemplates.eventEnabled(22)
    };
    proto.traceProcessSuspendTelemetryStart = function() {
        providerTemplates.traceTemplateEventDescriptor(22)
    };
    proto.isProcessSuspendTelemetryStopEnabled = function() {
        return !!providerTemplates.eventEnabled(23)
    };
    proto.traceProcessSuspendTelemetryStop = function() {
        providerTemplates.traceTemplateEventDescriptor(23)
    };
    proto.isProcessResumeTelemetryStartEnabled = function() {
        return !!providerTemplates.eventEnabled(24)
    };
    proto.traceProcessResumeTelemetryStart = function() {
        providerTemplates.traceTemplateEventDescriptor(24)
    };
    proto.isProcessResumeTelemetryStopEnabled = function() {
        return !!providerTemplates.eventEnabled(25)
    };
    proto.traceProcessResumeTelemetryStop = function() {
        providerTemplates.traceTemplateEventDescriptor(25)
    };
    proto.isSingletonInitializationStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(26)
    };
    proto.traceSingletonInitializationStarted = function(singletonEnumValue) {
        providerTemplates.traceTemplate_q(26, singletonEnumValue)
    };
    proto.isSingletonInitializationCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(27)
    };
    proto.traceSingletonInitializationCompleted = function(singletonEnumValue) {
        providerTemplates.traceTemplate_q(27, singletonEnumValue)
    };
    proto.isFileTransferManagerInitializationStartEnabled = function() {
        return !!providerTemplates.eventEnabled(28)
    };
    proto.traceFileTransferManagerInitializationStart = function() {
        providerTemplates.traceTemplateEventDescriptor(28)
    };
    proto.isFileTransferManagerInitializationStopEnabled = function() {
        return !!providerTemplates.eventEnabled(29)
    };
    proto.traceFileTransferManagerInitializationStop = function() {
        providerTemplates.traceTemplateEventDescriptor(29)
    };
    proto.isFileTransferBackgroundTransferStartFailedEnabled = function() {
        return !!providerTemplates.eventEnabled(30)
    };
    proto.traceFileTransferBackgroundTransferStartFailed = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(30, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferBackgroundTransferAttachFailedEnabled = function() {
        return !!providerTemplates.eventEnabled(31)
    };
    proto.traceFileTransferBackgroundTransferAttachFailed = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(31, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferBackgroundTransferCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(32)
    };
    proto.traceFileTransferBackgroundTransferCompleted = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(32, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferBackgroundTransferErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(33)
    };
    proto.traceFileTransferBackgroundTransferError = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(33, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferBackgroundTransferCanceledEnabled = function() {
        return !!providerTemplates.eventEnabled(34)
    };
    proto.traceFileTransferBackgroundTransferCanceled = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(34, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferMoveToLibraryFailedEnabled = function() {
        return !!providerTemplates.eventEnabled(35)
    };
    proto.traceFileTransferMoveToLibraryFailed = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(35, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferDownloadInfoFailedEnabled = function() {
        return !!providerTemplates.eventEnabled(36)
    };
    proto.traceFileTransferDownloadInfoFailed = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(36, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferQueuedEnabled = function() {
        return !!providerTemplates.eventEnabled(37)
    };
    proto.traceFileTransferQueued = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(37, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferFailedEnabled = function() {
        return !!providerTemplates.eventEnabled(38)
    };
    proto.traceFileTransferFailed = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(38, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferStart_SuccessedEnabled = function() {
        return !!providerTemplates.eventEnabled(39)
    };
    proto.traceFileTransferStart_Successed = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(39, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferStart_FailedEnabled = function() {
        return !!providerTemplates.eventEnabled(40)
    };
    proto.traceFileTransferStart_Failed = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(40, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(41)
    };
    proto.traceFileTransferCompleted = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(41, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isFileTransferClosedEnabled = function() {
        return !!providerTemplates.eventEnabled(42)
    };
    proto.traceFileTransferClosed = function(hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status) {
        providerTemplates.traceTemplate_ddjxxdddjzzd(42, hResult, taskId, backgroundTransferId, bytes, totalBytes, fileId, libraryId, libraryTypeId, mediaId, isolatedStoragePath, targetPath, status)
    };
    proto.isClosedCaptionDownloadStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(43)
    };
    proto.traceClosedCaptionDownloadStarted = function(hResult, path, url, isXHR) {
        providerTemplates.traceTemplate_dzzt(43, hResult, path, url, isXHR)
    };
    proto.isClosedCaptionDownloadFailedEnabled = function() {
        return !!providerTemplates.eventEnabled(44)
    };
    proto.traceClosedCaptionDownloadFailed = function(hResult, path, url, isXHR) {
        providerTemplates.traceTemplate_dzzt(44, hResult, path, url, isXHR)
    };
    proto.isClosedCaptionDownloadCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(45)
    };
    proto.traceClosedCaptionDownloadCompleted = function(hResult, path, url, isXHR) {
        providerTemplates.traceTemplate_dzzt(45, hResult, path, url, isXHR)
    };
    proto.isAppVisibilityChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(46)
    };
    proto.traceAppVisibilityChanged = function(appVisible) {
        providerTemplates.traceTemplate_t(46, appVisible)
    }
})(this);
(function initMicrosoft_Zune_Library(global) {
    var providerTemplates = null;
    var ns = global;
    if (ns.Diagnostics === undefined)
        ns.Diagnostics = {};
    var ns = ns.Diagnostics;
    if (ns.Tracing === undefined)
        ns.Tracing = {};
    var ns = ns.Tracing;
    if (ns.Microsoft === undefined)
        ns.Microsoft = {};
    var ns = ns.Microsoft;
    if (ns.Entertainment === undefined)
        ns.Entertainment = {};
    var ns = ns.Entertainment;
    if (ns.Instrumentation === undefined)
        ns.Instrumentation = {};
    var ns = ns.Instrumentation;
    if (ns.Providers === undefined)
        ns.Providers = {};
    var ns = ns.Providers;
    ns.Library = function() {
        if (providerTemplates === null)
            providerTemplates = new global.Microsoft.Entertainment.Instrumentation.Providers.LibraryTemplate
    };
    var proto = ns.Library.prototype;
    proto.isEasyTransferIterationStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(0)
    };
    proto.traceEasyTransferIterationStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(0)
    };
    proto.isEasyTransferFoundConfigEnabled = function() {
        return !!providerTemplates.eventEnabled(1)
    };
    proto.traceEasyTransferFoundConfig = function() {
        providerTemplates.traceTemplateEventDescriptor(1)
    };
    proto.isEasyTransferNoConfigEnabled = function() {
        return !!providerTemplates.eventEnabled(2)
    };
    proto.traceEasyTransferNoConfig = function() {
        providerTemplates.traceTemplateEventDescriptor(2)
    };
    proto.isEasyTransferParsingConfigEnabled = function() {
        return !!providerTemplates.eventEnabled(3)
    };
    proto.traceEasyTransferParsingConfig = function() {
        providerTemplates.traceTemplateEventDescriptor(3)
    };
    proto.isEasyTransferConfigParseFailedEnabled = function() {
        return !!providerTemplates.eventEnabled(4)
    };
    proto.traceEasyTransferConfigParseFailed = function() {
        providerTemplates.traceTemplateEventDescriptor(4)
    };
    proto.isEasyTransferConfigParseSucceededEnabled = function() {
        return !!providerTemplates.eventEnabled(5)
    };
    proto.traceEasyTransferConfigParseSucceeded = function() {
        providerTemplates.traceTemplateEventDescriptor(5)
    };
    proto.isEasyTransferAddingPathsEnabled = function() {
        return !!providerTemplates.eventEnabled(6)
    };
    proto.traceEasyTransferAddingPaths = function() {
        providerTemplates.traceTemplateEventDescriptor(6)
    };
    proto.isEasyTransferNoPathsToAddEnabled = function() {
        return !!providerTemplates.eventEnabled(7)
    };
    proto.traceEasyTransferNoPathsToAdd = function() {
        providerTemplates.traceTemplateEventDescriptor(7)
    };
    proto.isEasyTransferBeginImportingMetadataEnabled = function() {
        return !!providerTemplates.eventEnabled(8)
    };
    proto.traceEasyTransferBeginImportingMetadata = function() {
        providerTemplates.traceTemplateEventDescriptor(8)
    };
    proto.isEasyTransferCompletedImportingMetadataEnabled = function() {
        return !!providerTemplates.eventEnabled(9)
    };
    proto.traceEasyTransferCompletedImportingMetadata = function() {
        providerTemplates.traceTemplateEventDescriptor(9)
    };
    proto.isEasyTransferBeginImportingPlaylistsEnabled = function() {
        return !!providerTemplates.eventEnabled(10)
    };
    proto.traceEasyTransferBeginImportingPlaylists = function() {
        providerTemplates.traceTemplateEventDescriptor(10)
    };
    proto.isEasyTransferCompletedImportingPlaylistsEnabled = function() {
        return !!providerTemplates.eventEnabled(11)
    };
    proto.traceEasyTransferCompletedImportingPlaylists = function() {
        providerTemplates.traceTemplateEventDescriptor(11)
    };
    proto.isEasyTransferIterationCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(12)
    };
    proto.traceEasyTransferIterationComplete = function() {
        providerTemplates.traceTemplateEventDescriptor(12)
    };
    proto.isEasyTransferCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(13)
    };
    proto.traceEasyTransferComplete = function() {
        providerTemplates.traceTemplateEventDescriptor(13)
    };
    proto.isEasyTransferIterationFailedEnabled = function() {
        return !!providerTemplates.eventEnabled(14)
    };
    proto.traceEasyTransferIterationFailed = function() {
        providerTemplates.traceTemplateEventDescriptor(14)
    };
    proto.isEasyTransferParseErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(15)
    };
    proto.traceEasyTransferParseError = function(line, column, message) {
        providerTemplates.traceTemplate_qqz(15, line, column, message)
    };
    proto.isEasyTransferImportedMetadataEnabled = function() {
        return !!providerTemplates.eventEnabled(16)
    };
    proto.traceEasyTransferImportedMetadata = function(mediaId, rating, playCount) {
        providerTemplates.traceTemplate_qqq(16, mediaId, rating, playCount)
    };
    proto.isEasyTransferImportedPlaylistEnabled = function() {
        return !!providerTemplates.eventEnabled(17)
    };
    proto.traceEasyTransferImportedPlaylist = function(name, trackCount, imported) {
        providerTemplates.traceTemplate_zqt(17, name, trackCount, imported)
    };
    proto.isEasyTransferLocatingMediaItemEnabled = function() {
        return !!providerTemplates.eventEnabled(18)
    };
    proto.traceEasyTransferLocatingMediaItem = function(location) {
        providerTemplates.traceTemplate_z(18, location)
    };
    proto.isEasyTransferLocatedMediaItemEnabled = function() {
        return !!providerTemplates.eventEnabled(19)
    };
    proto.traceEasyTransferLocatedMediaItem = function(mediaId, created) {
        providerTemplates.traceTemplate_qt(19, mediaId, created)
    };
    proto.isEasyTransferStateChangeEnabled = function() {
        return !!providerTemplates.eventEnabled(20)
    };
    proto.traceEasyTransferStateChange = function(oldState, newState) {
        providerTemplates.traceTemplate_qq(20, oldState, newState)
    };
    proto.isEasyTransferFailedToLocateMediaItemEnabled = function() {
        return !!providerTemplates.eventEnabled(21)
    };
    proto.traceEasyTransferFailedToLocateMediaItem = function(hResult) {
        providerTemplates.traceTemplate_d(21, hResult)
    };
    proto.isEasyTransferMatchedByFileUrlEnabled = function() {
        return !!providerTemplates.eventEnabled(22)
    };
    proto.traceEasyTransferMatchedByFileUrl = function() {
        providerTemplates.traceTemplateEventDescriptor(22)
    };
    proto.isGrovelerScanStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(23)
    };
    proto.traceGrovelerScanStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(23)
    };
    proto.isGrovelerScanCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(24)
    };
    proto.traceGrovelerScanCompleted = function(fileCount) {
        providerTemplates.traceTemplate_q(24, fileCount)
    };
    proto.isGrovelerQuickScanStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(25)
    };
    proto.traceGrovelerQuickScanStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(25)
    };
    proto.isGrovelerQuickScanCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(26)
    };
    proto.traceGrovelerQuickScanCompleted = function(receivedFileCount, modifiedFileCount) {
        providerTemplates.traceTemplate_qq(26, receivedFileCount, modifiedFileCount)
    };
    proto.isGrovelerDeleteScanStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(27)
    };
    proto.traceGrovelerDeleteScanStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(27)
    };
    proto.isGrovelerDeleteScanCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(28)
    };
    proto.traceGrovelerDeleteScanCompleted = function(fileCount) {
        providerTemplates.traceTemplate_q(28, fileCount)
    };
    proto.isGrovelerPlaylistScanStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(29)
    };
    proto.traceGrovelerPlaylistScanStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(29)
    };
    proto.isGrovelerPlaylistScanCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(30)
    };
    proto.traceGrovelerPlaylistScanCompleted = function(fileCount) {
        providerTemplates.traceTemplate_q(30, fileCount)
    };
    proto.isGrovelerAdditionScanStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(31)
    };
    proto.traceGrovelerAdditionScanStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(31)
    };
    proto.isGrovelerAdditionScanCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(32)
    };
    proto.traceGrovelerAdditionScanCompleted = function(fileCount) {
        providerTemplates.traceTemplate_q(32, fileCount)
    };
    proto.isGrovelerFullScanSkippedEnabled = function() {
        return !!providerTemplates.eventEnabled(33)
    };
    proto.traceGrovelerFullScanSkipped = function() {
        providerTemplates.traceTemplateEventDescriptor(33)
    };
    proto.isGrovelerTopLevelFolderAddedEnabled = function() {
        return !!providerTemplates.eventEnabled(34)
    };
    proto.traceGrovelerTopLevelFolderAdded = function() {
        providerTemplates.traceTemplateEventDescriptor(34)
    };
    proto.isGrovelerNotificationReceivedEnabled = function() {
        return !!providerTemplates.eventEnabled(35)
    };
    proto.traceGrovelerNotificationReceived = function() {
        providerTemplates.traceTemplateEventDescriptor(35)
    };
    proto.isGrovelerNetworkConnectedEnabled = function() {
        return !!providerTemplates.eventEnabled(36)
    };
    proto.traceGrovelerNetworkConnected = function() {
        providerTemplates.traceTemplateEventDescriptor(36)
    };
    proto.isGrovelerNetworkShareAccessedEnabled = function() {
        return !!providerTemplates.eventEnabled(37)
    };
    proto.traceGrovelerNetworkShareAccessed = function() {
        providerTemplates.traceTemplateEventDescriptor(37)
    };
    proto.isGrovelerMasterRatingFileDirtySetEnabled = function() {
        return !!providerTemplates.eventEnabled(38)
    };
    proto.traceGrovelerMasterRatingFileDirtySet = function() {
        providerTemplates.traceTemplateEventDescriptor(38)
    };
    proto.isGrovelerWriteMasterRatingFileTriggeredEnabled = function() {
        return !!providerTemplates.eventEnabled(39)
    };
    proto.traceGrovelerWriteMasterRatingFileTriggered = function() {
        providerTemplates.traceTemplateEventDescriptor(39)
    };
    proto.isGrovelerWriteMasterRatingFileStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(40)
    };
    proto.traceGrovelerWriteMasterRatingFileStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(40)
    };
    proto.isGrovelerWriteMasterRatingFileCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(41)
    };
    proto.traceGrovelerWriteMasterRatingFileCompleted = function(hResult, ratingCount) {
        providerTemplates.traceTemplate_dq(41, hResult, ratingCount)
    };
    proto.isGrovelerReadMasterRatingFileTriggeredEnabled = function() {
        return !!providerTemplates.eventEnabled(42)
    };
    proto.traceGrovelerReadMasterRatingFileTriggered = function() {
        providerTemplates.traceTemplateEventDescriptor(42)
    };
    proto.isGrovelerReadMasterRatingFileStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(43)
    };
    proto.traceGrovelerReadMasterRatingFileStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(43)
    };
    proto.isGrovelerReadMasterRatingFileCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(44)
    };
    proto.traceGrovelerReadMasterRatingFileCompleted = function(hResult, ratingCount) {
        providerTemplates.traceTemplate_dq(44, hResult, ratingCount)
    };
    proto.isGrovelerQueryIndexerDiffEnabled = function() {
        return !!providerTemplates.eventEnabled(45)
    };
    proto.traceGrovelerQueryIndexerDiff = function(timestamp) {
        providerTemplates.traceTemplate_z(45, timestamp)
    };
    proto.isGrovelerIsQuickGrovelNeededEnabled = function() {
        return !!providerTemplates.eventEnabled(46)
    };
    proto.traceGrovelerIsQuickGrovelNeeded = function(currentCount, changedCount, quickScanNeeded) {
        providerTemplates.traceTemplate_qqt(46, currentCount, changedCount, quickScanNeeded)
    };
    proto.isGrovelerGetFilesAsyncRetryEnabled = function() {
        return !!providerTemplates.eventEnabled(47)
    };
    proto.traceGrovelerGetFilesAsyncRetry = function(hResult, retryCount) {
        providerTemplates.traceTemplate_dq(47, hResult, retryCount)
    };
    proto.isGrovelerWaitForCompletionRetryEnabled = function() {
        return !!providerTemplates.eventEnabled(48)
    };
    proto.traceGrovelerWaitForCompletionRetry = function(hResult, retryCount) {
        providerTemplates.traceTemplate_dq(48, hResult, retryCount)
    };
    proto.isGrovelerGetResultsErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(49)
    };
    proto.traceGrovelerGetResultsError = function(hResult) {
        providerTemplates.traceTemplate_d(49, hResult)
    };
    proto.isGrovelerGetEmptyItemListEnabled = function() {
        return !!providerTemplates.eventEnabled(50)
    };
    proto.traceGrovelerGetEmptyItemList = function(hResult) {
        providerTemplates.traceTemplate_d(50, hResult)
    };
    proto.isGrovelerRefreshLicenseStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(51)
    };
    proto.traceGrovelerRefreshLicenseStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(51)
    };
    proto.isGrovelerRefreshLicenseCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(52)
    };
    proto.traceGrovelerRefreshLicenseCompleted = function(hResult) {
        providerTemplates.traceTemplate_d(52, hResult)
    };
    proto.isGrovelerDefinitionChangedNotificationReceivedEnabled = function() {
        return !!providerTemplates.eventEnabled(53)
    };
    proto.traceGrovelerDefinitionChangedNotificationReceived = function() {
        providerTemplates.traceTemplateEventDescriptor(53)
    };
    proto.isGrovelerRetriesExhaustedEnabled = function() {
        return !!providerTemplates.eventEnabled(54)
    };
    proto.traceGrovelerRetriesExhausted = function(hResult, fileCount) {
        providerTemplates.traceTemplate_dq(54, hResult, fileCount)
    };
    proto.isGrovelerAddFileEnabled = function() {
        return !!providerTemplates.eventEnabled(55)
    };
    proto.traceGrovelerAddFile = function(hResult, fileUrl) {
        providerTemplates.traceTemplate_dz(55, hResult, fileUrl)
    };
    proto.isGrovelerSetFileAvailableEnabled = function() {
        return !!providerTemplates.eventEnabled(56)
    };
    proto.traceGrovelerSetFileAvailable = function(fileUrl) {
        providerTemplates.traceTemplate_z(56, fileUrl)
    };
    proto.isGrovelerSetFileUnavailableEnabled = function() {
        return !!providerTemplates.eventEnabled(57)
    };
    proto.traceGrovelerSetFileUnavailable = function(fileUrl) {
        providerTemplates.traceTemplate_z(57, fileUrl)
    };
    proto.isGrovelerSecondScanStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(58)
    };
    proto.traceGrovelerSecondScanStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(58)
    };
    proto.isGrovelerSecondScanCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(59)
    };
    proto.traceGrovelerSecondScanCompleted = function(fileCount, unindexedFileCount, unknownFileCount) {
        providerTemplates.traceTemplate_qqq(59, fileCount, unindexedFileCount, unknownFileCount)
    };
    proto.isMDLCStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(60)
    };
    proto.traceMDLCStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(60)
    };
    proto.isMDLCCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(61)
    };
    proto.traceMDLCCompleted = function() {
        providerTemplates.traceTemplateEventDescriptor(61)
    };
    proto.isDatabaseOpenStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(62)
    };
    proto.traceDatabaseOpenStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(62)
    };
    proto.isDatabaseOpenCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(63)
    };
    proto.traceDatabaseOpenCompleted = function() {
        providerTemplates.traceTemplateEventDescriptor(63)
    };
    proto.isDatabaseCloseStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(64)
    };
    proto.traceDatabaseCloseStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(64)
    };
    proto.isDatabaseCloseCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(65)
    };
    proto.traceDatabaseCloseCompleted = function() {
        providerTemplates.traceTemplateEventDescriptor(65)
    };
    proto.isDbCleanupOnUserSignedOutStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(66)
    };
    proto.traceDbCleanupOnUserSignedOutStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(66)
    };
    proto.isDbCleanupOnUserSignedOutCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(67)
    };
    proto.traceDbCleanupOnUserSignedOutCompleted = function() {
        providerTemplates.traceTemplateEventDescriptor(67)
    };
    proto.isQueryStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(68)
    };
    proto.traceQueryStarted = function(queryObjectInstanceId, queryType, actionName) {
        providerTemplates.traceTemplate_dzz(68, queryObjectInstanceId, queryType, actionName)
    };
    proto.isQueryCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(69)
    };
    proto.traceQueryCompleted = function(queryObjectInstanceId, queryType, actionName) {
        providerTemplates.traceTemplate_dzz(69, queryObjectInstanceId, queryType, actionName)
    };
    proto.isPlaylistIOStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(70)
    };
    proto.tracePlaylistIOStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(70)
    };
    proto.isPlaylistIOCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(71)
    };
    proto.tracePlaylistIOCompleted = function(readFileCount) {
        providerTemplates.traceTemplate_q(71, readFileCount)
    };
    proto.isBackgroundWorkLock_RequestedEnabled = function() {
        return !!providerTemplates.eventEnabled(72)
    };
    proto.traceBackgroundWorkLock_Requested = function(requestor) {
        providerTemplates.traceTemplate_z(72, requestor)
    };
    proto.isBackgroundWorkLock_AcquiredEnabled = function() {
        return !!providerTemplates.eventEnabled(73)
    };
    proto.traceBackgroundWorkLock_Acquired = function(requestor) {
        providerTemplates.traceTemplate_z(73, requestor)
    };
    proto.isBackgroundWorkLock_ReleasedEnabled = function() {
        return !!providerTemplates.eventEnabled(74)
    };
    proto.traceBackgroundWorkLock_Released = function(requestor) {
        providerTemplates.traceTemplate_z(74, requestor)
    };
    proto.isCollectionBuildingBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(75)
    };
    proto.traceCollectionBuildingBegin = function(eventSource) {
        providerTemplates.traceTemplate_q(75, eventSource)
    };
    proto.isCollectionBuildingEndEnabled = function() {
        return !!providerTemplates.eventEnabled(76)
    };
    proto.traceCollectionBuildingEnd = function(eventSource, itemsAdded, itemsTotal, errorState) {
        providerTemplates.traceTemplate_qqqq(76, eventSource, itemsAdded, itemsTotal, errorState)
    };
    proto.isCollectionBuildingProgressEnabled = function() {
        return !!providerTemplates.eventEnabled(77)
    };
    proto.traceCollectionBuildingProgress = function(itemsProcessed) {
        providerTemplates.traceTemplate_q(77, itemsProcessed)
    };
    proto.isCollectionBuildingMediaSyncedEnabled = function() {
        return !!providerTemplates.eventEnabled(78)
    };
    proto.traceCollectionBuildingMediaSynced = function() {
        providerTemplates.traceTemplateEventDescriptor(78)
    };
    proto.isCollectionBuildingMissingMetadataEnabled = function() {
        return !!providerTemplates.eventEnabled(79)
    };
    proto.traceCollectionBuildingMissingMetadata = function() {
        providerTemplates.traceTemplateEventDescriptor(79)
    };
    proto.isCollectionBuildingMDLCProgressEnabled = function() {
        return !!providerTemplates.eventEnabled(80)
    };
    proto.traceCollectionBuildingMDLCProgress = function(itemsProcessed) {
        providerTemplates.traceTemplate_q(80, itemsProcessed)
    };
    proto.isCollectionBuildingCloudCollectionV2FirstTrackAddedEnabled = function() {
        return !!providerTemplates.eventEnabled(81)
    };
    proto.traceCollectionBuildingCloudCollectionV2FirstTrackAdded = function() {
        providerTemplates.traceTemplateEventDescriptor(81)
    };
    proto.isFingerprintingStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(82)
    };
    proto.traceFingerprintingStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(82)
    };
    proto.isFingerprintingCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(83)
    };
    proto.traceFingerprintingComplete = function(hResult, canceled, processedFileCount, remainingFileCount, failedFileCount) {
        providerTemplates.traceTemplate_dtqqq(83, hResult, canceled, processedFileCount, remainingFileCount, failedFileCount)
    };
    proto.isProcessRemainingFilesStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(84)
    };
    proto.traceProcessRemainingFilesStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(84)
    };
    proto.isProcessRemainingFilesCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(85)
    };
    proto.traceProcessRemainingFilesComplete = function(hResult) {
        providerTemplates.traceTemplate_d(85, hResult)
    };
    proto.isFileProcessedEnabled = function() {
        return !!providerTemplates.eventEnabled(86)
    };
    proto.traceFileProcessed = function(fileId, foreground, allowGracenoteId, hResult) {
        providerTemplates.traceTemplate_qttd(86, fileId, foreground, allowGracenoteId, hResult)
    };
    proto.isFingerprintIdFoundEnabled = function() {
        return !!providerTemplates.eventEnabled(87)
    };
    proto.traceFingerprintIdFound = function(fileId, fileUrl) {
        providerTemplates.traceTemplate_qz(87, fileId, fileUrl)
    };
    proto.isFingerprintComputedEnabled = function() {
        return !!providerTemplates.eventEnabled(88)
    };
    proto.traceFingerprintComputed = function(fileId, fileUrl) {
        providerTemplates.traceTemplate_qz(88, fileId, fileUrl)
    };
    proto.isFingerprintGeneration_InternalErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(89)
    };
    proto.traceFingerprintGeneration_InternalError = function(fileUrl, error) {
        providerTemplates.traceTemplate_zd(89, fileUrl, error)
    };
    proto.isFingerprintGeneration_EndOfStreamReachedEnabled = function() {
        return !!providerTemplates.eventEnabled(90)
    };
    proto.traceFingerprintGeneration_EndOfStreamReached = function(fileUrl) {
        providerTemplates.traceTemplate_z(90, fileUrl)
    };
    proto.isFingerprintGeneration_SourceReaderErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(91)
    };
    proto.traceFingerprintGeneration_SourceReaderError = function(fileUrl, flags) {
        providerTemplates.traceTemplate_zq(91, fileUrl, flags)
    };
    proto.isFingerprintGeneration_FingerprintRetrievedEnabled = function() {
        return !!providerTemplates.eventEnabled(92)
    };
    proto.traceFingerprintGeneration_FingerprintRetrieved = function(fileUrl, qualities) {
        providerTemplates.traceTemplate_zq(92, fileUrl, qualities)
    };
    proto.isGetImmediateFingerprintsStartEnabled = function() {
        return !!providerTemplates.eventEnabled(93)
    };
    proto.traceGetImmediateFingerprintsStart = function() {
        providerTemplates.traceTemplateEventDescriptor(93)
    };
    proto.isGetImmediateFingerprintsCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(94)
    };
    proto.traceGetImmediateFingerprintsComplete = function(processedFileCount) {
        providerTemplates.traceTemplate_q(94, processedFileCount)
    };
    proto.isImmediateFingerprintRetrievedEnabled = function() {
        return !!providerTemplates.eventEnabled(95)
    };
    proto.traceImmediateFingerprintRetrieved = function(fileId, hResult, resultType) {
        providerTemplates.traceTemplate_qdd(95, fileId, hResult, resultType)
    }
})(this);
(function initMicrosoft_Zune_Pipeline(global) {
    var providerTemplates = null;
    var ns = global;
    if (ns.Diagnostics === undefined)
        ns.Diagnostics = {};
    var ns = ns.Diagnostics;
    if (ns.Tracing === undefined)
        ns.Tracing = {};
    var ns = ns.Tracing;
    if (ns.Microsoft === undefined)
        ns.Microsoft = {};
    var ns = ns.Microsoft;
    if (ns.Entertainment === undefined)
        ns.Entertainment = {};
    var ns = ns.Entertainment;
    if (ns.Instrumentation === undefined)
        ns.Instrumentation = {};
    var ns = ns.Instrumentation;
    if (ns.Providers === undefined)
        ns.Providers = {};
    var ns = ns.Providers;
    ns.Pipeline = function() {
        if (providerTemplates === null)
            providerTemplates = new global.Microsoft.Entertainment.Instrumentation.Providers.PipelineTemplate
    };
    var proto = ns.Pipeline.prototype;
    proto.isMBR_Pause_EnterEnabled = function() {
        return !!providerTemplates.eventEnabled(0)
    };
    proto.traceMBR_Pause_Enter = function(currentStreamTimeHns) {
        providerTemplates.traceTemplate_x(0, currentStreamTimeHns)
    };
    proto.isMBR_Pause_ExitEnabled = function() {
        return !!providerTemplates.eventEnabled(1)
    };
    proto.traceMBR_Pause_Exit = function(currentStreamTimeHns, hResult) {
        providerTemplates.traceTemplate_xd(1, currentStreamTimeHns, hResult)
    };
    proto.isMBR_Run_EnterEnabled = function() {
        return !!providerTemplates.eventEnabled(2)
    };
    proto.traceMBR_Run_Enter = function(startTimeHns, currentStreamTimeHns) {
        providerTemplates.traceTemplate_xx(2, startTimeHns, currentStreamTimeHns)
    };
    proto.isMBR_Run_LockEnabled = function() {
        return !!providerTemplates.eventEnabled(3)
    };
    proto.traceMBR_Run_Lock = function(currentStreamTimeHns) {
        providerTemplates.traceTemplate_x(3, currentStreamTimeHns)
    };
    proto.isMBR_Run_ExitEnabled = function() {
        return !!providerTemplates.eventEnabled(4)
    };
    proto.traceMBR_Run_Exit = function(currentStreamTimeHns, hResult) {
        providerTemplates.traceTemplate_xd(4, currentStreamTimeHns, hResult)
    };
    proto.isMBR_Seek_EnterEnabled = function() {
        return !!providerTemplates.eventEnabled(5)
    };
    proto.traceMBR_Seek_Enter = function(possitionHns, currentStreamTimeHns) {
        providerTemplates.traceTemplate_ix(5, possitionHns, currentStreamTimeHns)
    };
    proto.isMBR_Seek_ExitEnabled = function() {
        return !!providerTemplates.eventEnabled(6)
    };
    proto.traceMBR_Seek_Exit = function(currentStreamTimeHns, hResult) {
        providerTemplates.traceTemplate_xd(6, currentStreamTimeHns, hResult)
    };
    proto.isMBR_Stop_EnterEnabled = function() {
        return !!providerTemplates.eventEnabled(7)
    };
    proto.traceMBR_Stop_Enter = function(currentStreamTimeHns) {
        providerTemplates.traceTemplate_x(7, currentStreamTimeHns)
    };
    proto.isMBR_Stop_ExitEnabled = function() {
        return !!providerTemplates.eventEnabled(8)
    };
    proto.traceMBR_Stop_Exit = function(currentStreamTimeHns, hResult) {
        providerTemplates.traceTemplate_xd(8, currentStreamTimeHns, hResult)
    };
    proto.isMBR_SourceState_ChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(9)
    };
    proto.traceMBR_SourceState_Changed = function(filterState, oldState, newState) {
        providerTemplates.traceTemplate_ddd(9, filterState, oldState, newState)
    };
    proto.isMBR_PinPumpState_ChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(10)
    };
    proto.traceMBR_PinPumpState_Changed = function(streamType, oldState, newState) {
        providerTemplates.traceTemplate_qdd(10, streamType, oldState, newState)
    };
    proto.isMBR_EOSEnabled = function() {
        return !!providerTemplates.eventEnabled(11)
    };
    proto.traceMBR_EOS = function(streamType, currentStreamTimeHns) {
        providerTemplates.traceTemplate_qx(11, streamType, currentStreamTimeHns)
    };
    proto.isMBR_Preroll_ExitEnabled = function() {
        return !!providerTemplates.eventEnabled(12)
    };
    proto.traceMBR_Preroll_Exit = function(streamType, initialAudioTimeHns, initialVideoTimeHns, newStartBaseTimeHns) {
        providerTemplates.traceTemplate_dxxx(12, streamType, initialAudioTimeHns, initialVideoTimeHns, newStartBaseTimeHns)
    };
    proto.isMBR_Preroll_Forced_ExitEnabled = function() {
        return !!providerTemplates.eventEnabled(13)
    };
    proto.traceMBR_Preroll_Forced_Exit = function(streamType, initialAudioTimeHns, initialVideoTimeHns, newStartBaseTimeHns) {
        providerTemplates.traceTemplate_dxxx(13, streamType, initialAudioTimeHns, initialVideoTimeHns, newStartBaseTimeHns)
    };
    proto.isMBR_PinBeginFlush_EnterEnabled = function() {
        return !!providerTemplates.eventEnabled(14)
    };
    proto.traceMBR_PinBeginFlush_Enter = function(streamType, currentStreamTimeHns) {
        providerTemplates.traceTemplate_qx(14, streamType, currentStreamTimeHns)
    };
    proto.isMBR_PinBeginFlush_ExitEnabled = function() {
        return !!providerTemplates.eventEnabled(15)
    };
    proto.traceMBR_PinBeginFlush_Exit = function(streamType, currentStreamTimeHns, hResult) {
        providerTemplates.traceTemplate_qxd(15, streamType, currentStreamTimeHns, hResult)
    };
    proto.isMBR_PinEndFlush_EnterEnabled = function() {
        return !!providerTemplates.eventEnabled(16)
    };
    proto.traceMBR_PinEndFlush_Enter = function(streamType, currentStreamTimeHns) {
        providerTemplates.traceTemplate_qx(16, streamType, currentStreamTimeHns)
    };
    proto.isMBR_PinEndFlush_ExitEnabled = function() {
        return !!providerTemplates.eventEnabled(17)
    };
    proto.traceMBR_PinEndFlush_Exit = function(streamType, currentStreamTimeHns, hResult) {
        providerTemplates.traceTemplate_qxd(17, streamType, currentStreamTimeHns, hResult)
    };
    proto.isMBR_GotNewSampleEnabled = function() {
        return !!providerTemplates.eventEnabled(18)
    };
    proto.traceMBR_GotNewSample = function(streamType, sampleTimeHns, currentStreamTimeHns) {
        providerTemplates.traceTemplate_qxx(18, streamType, sampleTimeHns, currentStreamTimeHns)
    };
    proto.isMBR_SamplePushedToPinPumpEnabled = function() {
        return !!providerTemplates.eventEnabled(19)
    };
    proto.traceMBR_SamplePushedToPinPump = function(streamType, sampleTimeHns, currentStreamTimeHns) {
        providerTemplates.traceTemplate_qxx(19, streamType, sampleTimeHns, currentStreamTimeHns)
    };
    proto.isMBR_SamplePushedDownStream_BeginEnabled = function() {
        return !!providerTemplates.eventEnabled(20)
    };
    proto.traceMBR_SamplePushedDownStream_Begin = function(streamType, sampleTimeHns, currentStreamTimeHns) {
        providerTemplates.traceTemplate_qxx(20, streamType, sampleTimeHns, currentStreamTimeHns)
    };
    proto.isMBR_SamplePushedDownStream_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(21)
    };
    proto.traceMBR_SamplePushedDownStream_End = function(streamType, sampleTimeHns, currentStreamTimeHns) {
        providerTemplates.traceTemplate_qxx(21, streamType, sampleTimeHns, currentStreamTimeHns)
    };
    proto.isMBR_BufferStatusEnabled = function() {
        return !!providerTemplates.eventEnabled(22)
    };
    proto.traceMBR_BufferStatus = function(currentStreamTimeHns, bufferSizeMs) {
        providerTemplates.traceTemplate_xx(22, currentStreamTimeHns, bufferSizeMs)
    };
    proto.isMBR_DropFrameEnabled = function() {
        return !!providerTemplates.eventEnabled(23)
    };
    proto.traceMBR_DropFrame = function(totalFramesDropped, sampleTimeHns, currentStreamTimeHns) {
        providerTemplates.traceTemplate_qxx(23, totalFramesDropped, sampleTimeHns, currentStreamTimeHns)
    };
    proto.isMBR_PinDecompress_BeginEnabled = function() {
        return !!providerTemplates.eventEnabled(24)
    };
    proto.traceMBR_PinDecompress_Begin = function(streamType, sampleTimeHns, currentStreamTimeHns) {
        providerTemplates.traceTemplate_qxx(24, streamType, sampleTimeHns, currentStreamTimeHns)
    };
    proto.isMBR_PinDecompress_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(25)
    };
    proto.traceMBR_PinDecompress_End = function(streamType, frameSizeInBytes, durationHns) {
        providerTemplates.traceTemplate_qqx(25, streamType, frameSizeInBytes, durationHns)
    };
    proto.isMBR_PinDecompress_CallEnabled = function() {
        return !!providerTemplates.eventEnabled(26)
    };
    proto.traceMBR_PinDecompress_Call = function(streamType) {
        providerTemplates.traceTemplate_q(26, streamType)
    };
    proto.isMBR_PinDecompress_ReturnEnabled = function() {
        return !!providerTemplates.eventEnabled(27)
    };
    proto.traceMBR_PinDecompress_Return = function(streamType) {
        providerTemplates.traceTemplate_q(27, streamType)
    };
    proto.isMBR_Transcrypt_BeginEnabled = function() {
        return !!providerTemplates.eventEnabled(28)
    };
    proto.traceMBR_Transcrypt_Begin = function(streamType) {
        providerTemplates.traceTemplate_q(28, streamType)
    };
    proto.isMBR_Transcrypt_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(29)
    };
    proto.traceMBR_Transcrypt_End = function(streamType) {
        providerTemplates.traceTemplate_q(29, streamType)
    };
    proto.isMBR_DMO_ProcessInput_ReturnEnabled = function() {
        return !!providerTemplates.eventEnabled(30)
    };
    proto.traceMBR_DMO_ProcessInput_Return = function(streamType, sampleTimeHns, hResult) {
        providerTemplates.traceTemplate_qxd(30, streamType, sampleTimeHns, hResult)
    };
    proto.isMBR_DMO_ProcessOutput_ReturnEnabled = function() {
        return !!providerTemplates.eventEnabled(31)
    };
    proto.traceMBR_DMO_ProcessOutput_Return = function(streamType, hResult, durationHns) {
        providerTemplates.traceTemplate_qdx(31, streamType, hResult, durationHns)
    };
    proto.isMBR_NextChunkEnabled = function() {
        return !!providerTemplates.eventEnabled(32)
    };
    proto.traceMBR_NextChunk = function(streamType, chunkIndex, bitrateBps, sampleTimeHns, durationHns, sizeInBytes, quality, targetQuality, totalBandwidthBps, targetBandwidthBps, bufferSizeMs) {
        providerTemplates.traceTemplate_qdqxxqqqqqq(32, streamType, chunkIndex, bitrateBps, sampleTimeHns, durationHns, sizeInBytes, quality, targetQuality, totalBandwidthBps, targetBandwidthBps, bufferSizeMs)
    };
    proto.isMBR_ManifestStreamEnabled = function() {
        return !!providerTemplates.eventEnabled(33)
    };
    proto.traceMBR_ManifestStream = function(streamType, iD, bitrate, width, height, channels) {
        providerTemplates.traceTemplate_qqqqqq(33, streamType, iD, bitrate, width, height, channels)
    };
    proto.isTranscoding_JobTypeEnabled = function() {
        return !!providerTemplates.eventEnabled(34)
    };
    proto.traceTranscoding_JobType = function(jobType) {
        providerTemplates.traceTemplate_d(34, jobType)
    };
    proto.isTranscoding_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(35)
    };
    proto.traceTranscoding_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(35)
    };
    proto.isTranscoding_CompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(36)
    };
    proto.traceTranscoding_Complete = function(hResult) {
        providerTemplates.traceTemplate_d(36, hResult)
    };
    proto.isTranscoding_MF_DShow_FallbackEnabled = function() {
        return !!providerTemplates.eventEnabled(37)
    };
    proto.traceTranscoding_MF_DShow_Fallback = function() {
        providerTemplates.traceTemplateEventDescriptor(37)
    };
    proto.isTranscoding_MF_HW_SW_FallbackEnabled = function() {
        return !!providerTemplates.eventEnabled(38)
    };
    proto.traceTranscoding_MF_HW_SW_Fallback = function() {
        providerTemplates.traceTemplateEventDescriptor(38)
    };
    proto.isTranscoding_MF_HW_StatusEnabled = function() {
        return !!providerTemplates.eventEnabled(39)
    };
    proto.traceTranscoding_MF_HW_Status = function(hW_Status) {
        providerTemplates.traceTemplate_t(39, hW_Status)
    };
    proto.isTranscoding_Crash_StatusEnabled = function() {
        return !!providerTemplates.eventEnabled(40)
    };
    proto.traceTranscoding_Crash_Status = function(crashCount, maxCrashCount, hW_Status, isConfirmed, hResult) {
        providerTemplates.traceTemplate_qqttd(40, crashCount, maxCrashCount, hW_Status, isConfirmed, hResult)
    };
    proto.isTranscoding_Disable_HW_AccelerationEnabled = function() {
        return !!providerTemplates.eventEnabled(41)
    };
    proto.traceTranscoding_Disable_HW_Acceleration = function() {
        providerTemplates.traceTemplateEventDescriptor(41)
    };
    proto.isTranscoding_Reenable_HW_AccelerationEnabled = function() {
        return !!providerTemplates.eventEnabled(42)
    };
    proto.traceTranscoding_Reenable_HW_Acceleration = function() {
        providerTemplates.traceTemplateEventDescriptor(42)
    };
    proto.isTranscoding_SW_Retranscode_After_CrashEnabled = function() {
        return !!providerTemplates.eventEnabled(43)
    };
    proto.traceTranscoding_SW_Retranscode_After_Crash = function() {
        providerTemplates.traceTemplateEventDescriptor(43)
    };
    proto.isPresenter_DownresEnabled = function() {
        return !!providerTemplates.eventEnabled(44)
    };
    proto.tracePresenter_Downres = function(width, height) {
        providerTemplates.traceTemplate_qq(44, width, height)
    };
    proto.isPresenter_Native_Video_SizeEnabled = function() {
        return !!providerTemplates.eventEnabled(45)
    };
    proto.tracePresenter_Native_Video_Size = function(width, height) {
        providerTemplates.traceTemplate_qq(45, width, height)
    };
    proto.isPresenter_Target_Video_SizeEnabled = function() {
        return !!providerTemplates.eventEnabled(46)
    };
    proto.tracePresenter_Target_Video_Size = function(width, height) {
        providerTemplates.traceTemplate_qq(46, width, height)
    };
    proto.isPresenter_Display_Video_SizeEnabled = function() {
        return !!providerTemplates.eventEnabled(47)
    };
    proto.tracePresenter_Display_Video_Size = function(width, height) {
        providerTemplates.traceTemplate_qq(47, width, height)
    };
    proto.isPresenter_FrameTimesEnabled = function() {
        return !!providerTemplates.eventEnabled(48)
    };
    proto.tracePresenter_FrameTimes = function(frameNumber, timestampStream, timestampQPC, systime100ns, streamtime100ns, freqQPC) {
        providerTemplates.traceTemplate_xxxxxx(48, frameNumber, timestampStream, timestampQPC, systime100ns, streamtime100ns, freqQPC)
    };
    proto.isPresenter_FrameDroppedEnabled = function() {
        return !!providerTemplates.eventEnabled(49)
    };
    proto.tracePresenter_FrameDropped = function(framesDropped) {
        providerTemplates.traceTemplate_q(49, framesDropped)
    };
    proto.isPresenter_OperationEnabled = function() {
        return !!providerTemplates.eventEnabled(50)
    };
    proto.tracePresenter_Operation = function(op, lastPTS, splashOwnedFrameCount, stepCount, state, connectedState) {
        providerTemplates.traceTemplate_zxqqdd(50, op, lastPTS, splashOwnedFrameCount, stepCount, state, connectedState)
    };
    proto.isLEQ_EnabledEnabled = function() {
        return !!providerTemplates.eventEnabled(51)
    };
    proto.traceLEQ_Enabled = function(enabled) {
        providerTemplates.traceTemplate_t(51, enabled)
    };
    proto.isLEQ_SetFormatEnabled = function() {
        return !!providerTemplates.eventEnabled(52)
    };
    proto.traceLEQ_SetFormat = function(format, channels, samplesPerChannel, action, hResult) {
        providerTemplates.traceTemplate_qqqqd(52, format, channels, samplesPerChannel, action, hResult)
    };
    proto.isLEQ_Process_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(53)
    };
    proto.traceLEQ_Process_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(53)
    };
    proto.isLEQ_Process_CompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(54)
    };
    proto.traceLEQ_Process_Complete = function(passthrough, hResult) {
        providerTemplates.traceTemplate_td(54, passthrough, hResult)
    };
    proto.isPlaybackInterop_PlayerStateChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(55)
    };
    proto.tracePlaybackInterop_PlayerStateChanged = function(state) {
        providerTemplates.traceTemplate_q(55, state)
    };
    proto.isPlaybackInterop_PositionChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(56)
    };
    proto.tracePlaybackInterop_PositionChanged = function(position, minSeekPosition, maxSeekPosition, endOfMedia, canSeek) {
        providerTemplates.traceTemplate_xxxtt(56, position, minSeekPosition, maxSeekPosition, endOfMedia, canSeek)
    };
    proto.isPlaybackInterop_TransportStateChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(57)
    };
    proto.tracePlaybackInterop_TransportStateChanged = function(state) {
        providerTemplates.traceTemplate_q(57, state)
    };
    proto.isPlaybackInterop_TrickPlayStateChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(58)
    };
    proto.tracePlaybackInterop_TrickPlayStateChanged = function(state) {
        providerTemplates.traceTemplate_q(58, state)
    };
    proto.isPlayback_MCPlayerAdapter_CreateInstanceEnabled = function() {
        return !!providerTemplates.eventEnabled(59)
    };
    proto.tracePlayback_MCPlayerAdapter_CreateInstance = function(hResult) {
        providerTemplates.traceTemplate_d(59, hResult)
    };
    proto.isPlayback_MFPlayer_CreateInstanceEnabled = function() {
        return !!providerTemplates.eventEnabled(60)
    };
    proto.tracePlayback_MFPlayer_CreateInstance = function(hResult) {
        providerTemplates.traceTemplate_d(60, hResult)
    };
    proto.isPlayback_ControlInitializedEnabled = function() {
        return !!providerTemplates.eventEnabled(61)
    };
    proto.tracePlayback_ControlInitialized = function() {
        providerTemplates.traceTemplateEventDescriptor(61)
    };
    proto.isPlayback_SessionInitializedEnabled = function() {
        return !!providerTemplates.eventEnabled(62)
    };
    proto.tracePlayback_SessionInitialized = function() {
        providerTemplates.traceTemplateEventDescriptor(62)
    };
    proto.isPlayback_PlayerStateChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(63)
    };
    proto.tracePlayback_PlayerStateChanged = function(newState, oldState) {
        providerTemplates.traceTemplate_zz(63, newState, oldState)
    };
    proto.isPlayback_TransportStateChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(64)
    };
    proto.tracePlayback_TransportStateChanged = function(newState, oldState) {
        providerTemplates.traceTemplate_zz(64, newState, oldState)
    };
    proto.isPlayback_SetMediaEnabled = function() {
        return !!providerTemplates.eventEnabled(65)
    };
    proto.tracePlayback_SetMedia = function(source, mediaType, protectionState, startPosition, cookie, durationMsec) {
        providerTemplates.traceTemplate_zzzqqq(65, source, mediaType, protectionState, startPosition, cookie, durationMsec)
    };
    proto.isPlayback_SetNextMediaEnabled = function() {
        return !!providerTemplates.eventEnabled(66)
    };
    proto.tracePlayback_SetNextMedia = function(readyForNext, source, mediaType, protectionState, startPosition, cookie) {
        providerTemplates.traceTemplate_tzzzqq(66, readyForNext, source, mediaType, protectionState, startPosition, cookie)
    };
    proto.isPlayback_CurrentMediaLoadedEnabled = function() {
        return !!providerTemplates.eventEnabled(67)
    };
    proto.tracePlayback_CurrentMediaLoaded = function(source, mediaType, protectionState, startPosition, cookie, durationMsec) {
        providerTemplates.traceTemplate_zzzqqq(67, source, mediaType, protectionState, startPosition, cookie, durationMsec)
    };
    proto.isPlayback_NextMediaLoadedEnabled = function() {
        return !!providerTemplates.eventEnabled(68)
    };
    proto.tracePlayback_NextMediaLoaded = function(source, mediaType, protectionState, startPosition, cookie, durationMsec) {
        providerTemplates.traceTemplate_zzzqqq(68, source, mediaType, protectionState, startPosition, cookie, durationMsec)
    };
    proto.isPlayback_SwitchingToNextMediaEnabled = function() {
        return !!providerTemplates.eventEnabled(69)
    };
    proto.tracePlayback_SwitchingToNextMedia = function(source) {
        providerTemplates.traceTemplate_z(69, source)
    };
    proto.isPlayback_NextMediaStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(70)
    };
    proto.tracePlayback_NextMediaStarted = function(source) {
        providerTemplates.traceTemplate_z(70, source)
    };
    proto.isPlayback_ErrorOccurredEnabled = function() {
        return !!providerTemplates.eventEnabled(71)
    };
    proto.tracePlayback_ErrorOccurred = function(errorCode, extendedCode, context) {
        providerTemplates.traceTemplate_qqz(71, errorCode, extendedCode, context)
    };
    proto.isPlayback_EnableTimeUpdateEnabled = function() {
        return !!providerTemplates.eventEnabled(72)
    };
    proto.tracePlayback_EnableTimeUpdate = function(currentPositionMsec) {
        providerTemplates.traceTemplate_q(72, currentPositionMsec)
    };
    proto.isPlayback_DisableTimeUpdateEnabled = function() {
        return !!providerTemplates.eventEnabled(73)
    };
    proto.tracePlayback_DisableTimeUpdate = function(currentPositionMsec) {
        providerTemplates.traceTemplate_q(73, currentPositionMsec)
    };
    proto.isPlayback_ForceTimeUpdateEnabled = function() {
        return !!providerTemplates.eventEnabled(74)
    };
    proto.tracePlayback_ForceTimeUpdate = function(currentPositionMsec) {
        providerTemplates.traceTemplate_q(74, currentPositionMsec)
    };
    proto.isPlayback_PBMSoundLevelChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(75)
    };
    proto.tracePlayback_PBMSoundLevelChanged = function(soundLevel, currentTransportState) {
        providerTemplates.traceTemplate_zz(75, soundLevel, currentTransportState)
    };
    proto.isPlayback_TargetTransportStateSetEnabled = function() {
        return !!providerTemplates.eventEnabled(76)
    };
    proto.tracePlayback_TargetTransportStateSet = function(wannaBe, current) {
        providerTemplates.traceTemplate_zz(76, wannaBe, current)
    };
    proto.isPlaylist_SetDataSourceBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(77)
    };
    proto.tracePlaylist_SetDataSourceBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(77)
    };
    proto.isPlaylist_SetDataSourceEndEnabled = function() {
        return !!providerTemplates.eventEnabled(78)
    };
    proto.tracePlaylist_SetDataSourceEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(78)
    };
    proto.isPlaylist_InterpretingDataEnabled = function() {
        return !!providerTemplates.eventEnabled(79)
    };
    proto.tracePlaylist_InterpretingData = function() {
        providerTemplates.traceTemplateEventDescriptor(79)
    };
    proto.isPlaylist_ActivateEnabled = function() {
        return !!providerTemplates.eventEnabled(80)
    };
    proto.tracePlaylist_Activate = function(index, startPosition, shuffle, repeat) {
        providerTemplates.traceTemplate_qqtt(80, index, startPosition, shuffle, repeat)
    };
    proto.isPlaylist_SetMediaEnabled = function() {
        return !!providerTemplates.eventEnabled(81)
    };
    proto.tracePlaylist_SetMedia = function(source, mediaType, protectionState, startPosition, cookie) {
        providerTemplates.traceTemplate_zzzqq(81, source, mediaType, protectionState, startPosition, cookie)
    };
    proto.isPlaylist_SetNextMediaEnabled = function() {
        return !!providerTemplates.eventEnabled(82)
    };
    proto.tracePlaylist_SetNextMedia = function(source, mediaType, protectionState, startPosition, cookie) {
        providerTemplates.traceTemplate_zzzqq(82, source, mediaType, protectionState, startPosition, cookie)
    };
    proto.isPlaylist_CreatedEnabled = function() {
        return !!providerTemplates.eventEnabled(83)
    };
    proto.tracePlaylist_Created = function() {
        providerTemplates.traceTemplateEventDescriptor(83)
    };
    proto.isPlaylog_BookmarkLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(84)
    };
    proto.tracePlaylog_BookmarkLoad = function(positionMS, playFromBookmark) {
        providerTemplates.traceTemplate_qt(84, positionMS, playFromBookmark)
    };
    proto.isPlaylog_BookmarkSaveEnabled = function() {
        return !!providerTemplates.eventEnabled(85)
    };
    proto.tracePlaylog_BookmarkSave = function(positionMS) {
        providerTemplates.traceTemplate_q(85, positionMS)
    };
    proto.isPlaylog_PlayCountLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(86)
    };
    proto.tracePlaylog_PlayCountLoad = function(playCount) {
        providerTemplates.traceTemplate_q(86, playCount)
    };
    proto.isPlaylog_PlayCountSaveEnabled = function() {
        return !!providerTemplates.eventEnabled(87)
    };
    proto.tracePlaylog_PlayCountSave = function(playCount) {
        providerTemplates.traceTemplate_q(87, playCount)
    };
    proto.isPlaylog_PlayedLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(88)
    };
    proto.tracePlaylog_PlayedLoad = function(played) {
        providerTemplates.traceTemplate_t(88, played)
    };
    proto.isPlaylog_PlayedSaveEnabled = function() {
        return !!providerTemplates.eventEnabled(89)
    };
    proto.tracePlaylog_PlayedSave = function(played) {
        providerTemplates.traceTemplate_t(89, played)
    };
    proto.isDRM_RootLicenseRefresh_AccountEnabled = function() {
        return !!providerTemplates.eventEnabled(90)
    };
    proto.traceDRM_RootLicenseRefresh_Account = function(subscription, tunerActivated) {
        providerTemplates.traceTemplate_tt(90, subscription, tunerActivated)
    };
    proto.isDRM_RootLicenseRefresh_DetailsEnabled = function() {
        return !!providerTemplates.eventEnabled(91)
    };
    proto.traceDRM_RootLicenseRefresh_Details = function(now, lastRefresh, spanMs) {
        providerTemplates.traceTemplate_zzx(91, now, lastRefresh, spanMs)
    };
    proto.isDRM_RootLicenseRefresh_InvokedEnabled = function() {
        return !!providerTemplates.eventEnabled(92)
    };
    proto.traceDRM_RootLicenseRefresh_Invoked = function() {
        providerTemplates.traceTemplateEventDescriptor(92)
    };
    proto.isDRM_RootLicenseRefresh_CompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(93)
    };
    proto.traceDRM_RootLicenseRefresh_Completed = function(status) {
        providerTemplates.traceTemplate_z(93, status)
    };
    proto.isDRM_ReportMetering_AccountEnabled = function() {
        return !!providerTemplates.eventEnabled(94)
    };
    proto.traceDRM_ReportMetering_Account = function(subscription, tunerActivated, meteringCertificate) {
        providerTemplates.traceTemplate_ttz(94, subscription, tunerActivated, meteringCertificate)
    };
    proto.isDRM_ReportMetering_InvokedEnabled = function() {
        return !!providerTemplates.eventEnabled(95)
    };
    proto.traceDRM_ReportMetering_Invoked = function() {
        providerTemplates.traceTemplateEventDescriptor(95)
    };
    proto.isDRM_ReportMetering_CompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(96)
    };
    proto.traceDRM_ReportMetering_Completed = function(status) {
        providerTemplates.traceTemplate_z(96, status)
    };
    proto.isDRM_ReportMetering_NoDataToReportEnabled = function() {
        return !!providerTemplates.eventEnabled(97)
    };
    proto.traceDRM_ReportMetering_NoDataToReport = function() {
        providerTemplates.traceTemplateEventDescriptor(97)
    };
    proto.isDRM_DeleteLicense_InvokedEnabled = function() {
        return !!providerTemplates.eventEnabled(98)
    };
    proto.traceDRM_DeleteLicense_Invoked = function(kid) {
        providerTemplates.traceTemplate_z(98, kid)
    };
    proto.isDRM_DeleteLicense_CompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(99)
    };
    proto.traceDRM_DeleteLicense_Completed = function(kid, hResult) {
        providerTemplates.traceTemplate_zd(99, kid, hResult)
    };
    proto.isClosedCaptions_RendererGetTTMLFilepathEnabled = function() {
        return !!providerTemplates.eventEnabled(100)
    };
    proto.traceClosedCaptions_RendererGetTTMLFilepath = function(state, smid, miid, lcid, filepath) {
        providerTemplates.traceTemplate_zzzqz(100, state, smid, miid, lcid, filepath)
    };
    proto.isClosedCaptions_RendererLoadTTMLFileEnabled = function() {
        return !!providerTemplates.eventEnabled(101)
    };
    proto.traceClosedCaptions_RendererLoadTTMLFile = function(state, filepath) {
        providerTemplates.traceTemplate_zz(101, state, filepath)
    };
    proto.isClosedCaptions_EnterRenderingLoopEnabled = function() {
        return !!providerTemplates.eventEnabled(102)
    };
    proto.traceClosedCaptions_EnterRenderingLoop = function(currentPosition, transportState) {
        providerTemplates.traceTemplate_qz(102, currentPosition, transportState)
    };
    proto.isClosedCaptions_ExitRenderingLoopEnabled = function() {
        return !!providerTemplates.eventEnabled(103)
    };
    proto.traceClosedCaptions_ExitRenderingLoop = function(currentPosition, transportState, closedCaptionsOn) {
        providerTemplates.traceTemplate_qzt(103, currentPosition, transportState, closedCaptionsOn)
    };
    proto.isClosedCaptions_OnEnabled = function() {
        return !!providerTemplates.eventEnabled(104)
    };
    proto.traceClosedCaptions_On = function(enabled) {
        providerTemplates.traceTemplate_t(104, enabled)
    };
    proto.isClosedCaptions_DroppedFrameEnabled = function() {
        return !!providerTemplates.eventEnabled(105)
    };
    proto.traceClosedCaptions_DroppedFrame = function(generatedAt, validUntil, currentPosition) {
        providerTemplates.traceTemplate_qqq(105, generatedAt, validUntil, currentPosition)
    };
    proto.isFastStartMediaSource_CreatedEnabled = function() {
        return !!providerTemplates.eventEnabled(106)
    };
    proto.traceFastStartMediaSource_Created = function() {
        providerTemplates.traceTemplateEventDescriptor(106)
    };
    proto.isFastStartMediaSource_ReceivedUrlEnabled = function() {
        return !!providerTemplates.eventEnabled(107)
    };
    proto.traceFastStartMediaSource_ReceivedUrl = function(info) {
        providerTemplates.traceTemplate_z(107, info)
    };
    proto.isFastStartMediaSource_PlaybackStartEnabled = function() {
        return !!providerTemplates.eventEnabled(108)
    };
    proto.traceFastStartMediaSource_PlaybackStart = function() {
        providerTemplates.traceTemplateEventDescriptor(108)
    };
    proto.isPlayback_WPPEnabled = function() {
        return !!providerTemplates.eventEnabled(109)
    };
    proto.tracePlayback_WPP = function(info) {
        providerTemplates.traceTemplate_z(109, info)
    }
})(this);
(function initMicrosoft_Zune_Service(global) {
    var providerTemplates = null;
    var ns = global;
    if (ns.Diagnostics === undefined)
        ns.Diagnostics = {};
    var ns = ns.Diagnostics;
    if (ns.Tracing === undefined)
        ns.Tracing = {};
    var ns = ns.Tracing;
    if (ns.Microsoft === undefined)
        ns.Microsoft = {};
    var ns = ns.Microsoft;
    if (ns.Entertainment === undefined)
        ns.Entertainment = {};
    var ns = ns.Entertainment;
    if (ns.Instrumentation === undefined)
        ns.Instrumentation = {};
    var ns = ns.Instrumentation;
    if (ns.Providers === undefined)
        ns.Providers = {};
    var ns = ns.Providers;
    ns.ServiceEventProvider = function() {
        if (providerTemplates === null)
            providerTemplates = new global.Microsoft.Entertainment.Instrumentation.Providers.ServiceEventProviderTemplate
    };
    var proto = ns.ServiceEventProvider.prototype;
    proto.isServiceSignInErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(0)
    };
    proto.traceServiceSignInError = function(hResult) {
        providerTemplates.traceTemplate_d(0, hResult)
    };
    proto.isServiceGetTicketStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(1)
    };
    proto.traceServiceGetTicketStarted = function(message) {
        providerTemplates.traceTemplate_z(1, message)
    };
    proto.isServiceGetTicketCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(2)
    };
    proto.traceServiceGetTicketCompleted = function(message) {
        providerTemplates.traceTemplate_z(2, message)
    };
    proto.isServiceGetTicketErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(3)
    };
    proto.traceServiceGetTicketError = function(hResult) {
        providerTemplates.traceTemplate_d(3, hResult)
    };
    proto.isServiceSignOutStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(4)
    };
    proto.traceServiceSignOutStarted = function(message) {
        providerTemplates.traceTemplate_z(4, message)
    };
    proto.isServiceSignOutCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(5)
    };
    proto.traceServiceSignOutCompleted = function(message) {
        providerTemplates.traceTemplate_z(5, message)
    };
    proto.isServiceZestSignInStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(6)
    };
    proto.traceServiceZestSignInStarted = function(message) {
        providerTemplates.traceTemplate_z(6, message)
    };
    proto.isServiceZestSignInCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(7)
    };
    proto.traceServiceZestSignInCompleted = function(message) {
        providerTemplates.traceTemplate_z(7, message)
    };
    proto.isServiceRefreshSignInStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(8)
    };
    proto.traceServiceRefreshSignInStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(8)
    };
    proto.isServiceRefreshSignInCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(9)
    };
    proto.traceServiceRefreshSignInCompleted = function() {
        providerTemplates.traceTemplateEventDescriptor(9)
    };
    proto.isServiceAuthHeaderEnabled = function() {
        return !!providerTemplates.eventEnabled(10)
    };
    proto.traceServiceAuthHeader = function(message) {
        providerTemplates.traceTemplate_z(10, message)
    };
    proto.isServiceUserProfilePropertyEnabled = function() {
        return !!providerTemplates.eventEnabled(11)
    };
    proto.traceServiceUserProfileProperty = function(name, value) {
        providerTemplates.traceTemplate_zz(11, name, value)
    };
    proto.isServiceUserProfileStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(12)
    };
    proto.traceServiceUserProfileStarted = function(message) {
        providerTemplates.traceTemplate_z(12, message)
    };
    proto.isServiceUserProfileCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(13)
    };
    proto.traceServiceUserProfileCompleted = function(message) {
        providerTemplates.traceTemplate_z(13, message)
    };
    proto.isFamilyUserPropertyEnabled = function() {
        return !!providerTemplates.eventEnabled(14)
    };
    proto.traceFamilyUserProperty = function(name, value) {
        providerTemplates.traceTemplate_zz(14, name, value)
    };
    proto.isServiceFamilyUserStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(15)
    };
    proto.traceServiceFamilyUserStarted = function(message) {
        providerTemplates.traceTemplate_z(15, message)
    };
    proto.isServiceFamilyUserCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(16)
    };
    proto.traceServiceFamilyUserCompleted = function(message) {
        providerTemplates.traceTemplate_z(16, message)
    };
    proto.isSubscriptionInfoPropertyEnabled = function() {
        return !!providerTemplates.eventEnabled(17)
    };
    proto.traceSubscriptionInfoProperty = function(name, value) {
        providerTemplates.traceTemplate_zz(17, name, value)
    };
    proto.isServiceSubscriptionInfoStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(18)
    };
    proto.traceServiceSubscriptionInfoStarted = function(message) {
        providerTemplates.traceTemplate_z(18, message)
    };
    proto.isServiceSubscriptionInfoCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(19)
    };
    proto.traceServiceSubscriptionInfoCompleted = function(message) {
        providerTemplates.traceTemplate_z(19, message)
    };
    proto.isServiceUserChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(20)
    };
    proto.traceServiceUserChanged = function(message) {
        providerTemplates.traceTemplate_z(20, message)
    };
    proto.isServiceForgetUserInformationStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(21)
    };
    proto.traceServiceForgetUserInformationStarted = function(message) {
        providerTemplates.traceTemplate_z(21, message)
    };
    proto.isServiceForgetUserInformationCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(22)
    };
    proto.traceServiceForgetUserInformationCompleted = function(message) {
        providerTemplates.traceTemplate_z(22, message)
    };
    proto.isServiceSignInStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(23)
    };
    proto.traceServiceSignInStarted = function(message) {
        providerTemplates.traceTemplate_z(23, message)
    };
    proto.isServiceSignInCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(24)
    };
    proto.traceServiceSignInCompleted = function(message) {
        providerTemplates.traceTemplate_z(24, message)
    };
    proto.isServiceAuthHeaderErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(25)
    };
    proto.traceServiceAuthHeaderError = function(hResult) {
        providerTemplates.traceTemplate_d(25, hResult)
    };
    proto.isPurchaseHistoryGrovelStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(26)
    };
    proto.tracePurchaseHistoryGrovelStarted = function() {
        providerTemplates.traceTemplateEventDescriptor(26)
    };
    proto.isPurchaseHistoryGrovelCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(27)
    };
    proto.tracePurchaseHistoryGrovelCompleted = function(hResult) {
        providerTemplates.traceTemplate_d(27, hResult)
    };
    proto.isPurchaseHistoryGrovelErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(28)
    };
    proto.tracePurchaseHistoryGrovelError = function(hResult) {
        providerTemplates.traceTemplate_d(28, hResult)
    }
})(this);
(function initMicrosoft_Zune_Shell(global) {
    var providerTemplates = null;
    var ns = global;
    if (ns.Diagnostics === undefined)
        ns.Diagnostics = {};
    var ns = ns.Diagnostics;
    if (ns.Tracing === undefined)
        ns.Tracing = {};
    var ns = ns.Tracing;
    if (ns.Microsoft === undefined)
        ns.Microsoft = {};
    var ns = ns.Microsoft;
    if (ns.Entertainment === undefined)
        ns.Entertainment = {};
    var ns = ns.Entertainment;
    if (ns.Instrumentation === undefined)
        ns.Instrumentation = {};
    var ns = ns.Instrumentation;
    if (ns.Providers === undefined)
        ns.Providers = {};
    var ns = ns.Providers;
    ns.Shell = function() {
        if (providerTemplates === null)
            providerTemplates = new global.Microsoft.Entertainment.Instrumentation.Providers.ShellTemplate
    };
    var proto = ns.Shell.prototype;
    proto.isNavigable_Loading_DoneEnabled = function() {
        return !!providerTemplates.eventEnabled(0)
    };
    proto.traceNavigable_Loading_Done = function(moniker) {
        providerTemplates.traceTemplate_z(0, moniker)
    };
    proto.isQueries_BeginEnabled = function() {
        return !!providerTemplates.eventEnabled(1)
    };
    proto.traceQueries_Begin = function(moniker) {
        providerTemplates.traceTemplate_z(1, moniker)
    };
    proto.isQueries_CompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(2)
    };
    proto.traceQueries_Complete = function(moniker) {
        providerTemplates.traceTemplate_z(2, moniker)
    };
    proto.isJavascript_Load_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(3)
    };
    proto.traceJavascript_Load_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(3)
    };
    proto.isSplashScreen_RemovedEnabled = function() {
        return !!providerTemplates.eventEnabled(4)
    };
    proto.traceSplashScreen_Removed = function() {
        providerTemplates.traceTemplateEventDescriptor(4)
    };
    proto.isJavascript_Load_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(5)
    };
    proto.traceJavascript_Load_End = function() {
        providerTemplates.traceTemplateEventDescriptor(5)
    };
    proto.isDom_Content_LoadedEnabled = function() {
        return !!providerTemplates.eventEnabled(6)
    };
    proto.traceDom_Content_Loaded = function() {
        providerTemplates.traceTemplateEventDescriptor(6)
    };
    proto.isFinish_ProcessAllEnabled = function() {
        return !!providerTemplates.eventEnabled(7)
    };
    proto.traceFinish_ProcessAll = function() {
        providerTemplates.traceTemplateEventDescriptor(7)
    };
    proto.isNavigation_StartedEnabled = function() {
        return !!providerTemplates.eventEnabled(8)
    };
    proto.traceNavigation_Started = function(moniker) {
        providerTemplates.traceTemplate_z(8, moniker)
    };
    proto.isLocation_ChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(9)
    };
    proto.traceLocation_Changed = function(pageMoniker, hubMoniker, panelMoniker) {
        providerTemplates.traceTemplate_zzz(9, pageMoniker, hubMoniker, panelMoniker)
    };
    proto.isOverlay_ShownEnabled = function() {
        return !!providerTemplates.eventEnabled(10)
    };
    proto.traceOverlay_Shown = function(templateId) {
        providerTemplates.traceTemplate_z(10, templateId)
    };
    proto.isOverlay_DismissedEnabled = function() {
        return !!providerTemplates.eventEnabled(11)
    };
    proto.traceOverlay_Dismissed = function(templateId) {
        providerTemplates.traceTemplate_z(11, templateId)
    };
    proto.isAction_InvokedEnabled = function() {
        return !!providerTemplates.eventEnabled(12)
    };
    proto.traceAction_Invoked = function(actionId) {
        providerTemplates.traceTemplate_z(12, actionId)
    };
    proto.isDeepLink_Protocol_InvokedEnabled = function() {
        return !!providerTemplates.eventEnabled(13)
    };
    proto.traceDeepLink_Protocol_Invoked = function(url) {
        providerTemplates.traceTemplate_z(13, url)
    };
    proto.isDeepLink_Protocol_FailedEnabled = function() {
        return !!providerTemplates.eventEnabled(14)
    };
    proto.traceDeepLink_Protocol_Failed = function(url) {
        providerTemplates.traceTemplate_z(14, url)
    };
    proto.isDeepLink_Tile_InvokedEnabled = function() {
        return !!providerTemplates.eventEnabled(15)
    };
    proto.traceDeepLink_Tile_Invoked = function(arguments) {
        providerTemplates.traceTemplate_z(15, arguments)
    };
    proto.isDeepLink_Tile_FailedEnabled = function() {
        return !!providerTemplates.eventEnabled(16)
    };
    proto.traceDeepLink_Tile_Failed = function(arguments) {
        providerTemplates.traceTemplate_z(16, arguments)
    };
    proto.isSearch_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(17)
    };
    proto.traceSearch_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(17)
    };
    proto.isSearch_CompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(18)
    };
    proto.traceSearch_Completed = function() {
        providerTemplates.traceTemplateEventDescriptor(18)
    };
    proto.isWebExperience_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(19)
    };
    proto.traceWebExperience_Start = function(templateId) {
        providerTemplates.traceTemplate_z(19, templateId)
    };
    proto.isWebExperience_FinishEnabled = function() {
        return !!providerTemplates.eventEnabled(20)
    };
    proto.traceWebExperience_Finish = function(templateId) {
        providerTemplates.traceTemplate_z(20, templateId)
    };
    proto.isWebExperience_CancelEnabled = function() {
        return !!providerTemplates.eventEnabled(21)
    };
    proto.traceWebExperience_Cancel = function(templateId) {
        providerTemplates.traceTemplate_z(21, templateId)
    };
    proto.isWebExperience_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(22)
    };
    proto.traceWebExperience_Error = function(templateId) {
        providerTemplates.traceTemplate_z(22, templateId)
    };
    proto.isWebExperience_PageLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(23)
    };
    proto.traceWebExperience_PageLoad = function(templateId) {
        providerTemplates.traceTemplate_z(23, templateId)
    };
    proto.isTest_Event_ResultEnabled = function() {
        return !!providerTemplates.eventEnabled(24)
    };
    proto.traceTest_Event_Result = function(result, message) {
        providerTemplates.traceTemplate_tz(24, result, message)
    };
    proto.isTest_Event_TraceEnabled = function() {
        return !!providerTemplates.eventEnabled(25)
    };
    proto.traceTest_Event_Trace = function(id, message) {
        providerTemplates.traceTemplate_dz(25, id, message)
    };
    proto.isTest_Event_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(26)
    };
    proto.traceTest_Event_Error = function(id, message) {
        providerTemplates.traceTemplate_dz(26, id, message)
    };
    proto.isHubStrip_Load_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(27)
    };
    proto.traceHubStrip_Load_Start = function(moniker) {
        providerTemplates.traceTemplate_z(27, moniker)
    };
    proto.isHubStrip_Load_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(28)
    };
    proto.traceHubStrip_Load_End = function(moniker) {
        providerTemplates.traceTemplate_z(28, moniker)
    };
    proto.isHub_Load_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(29)
    };
    proto.traceHub_Load_Start = function(moniker) {
        providerTemplates.traceTemplate_z(29, moniker)
    };
    proto.isHub_Load_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(30)
    };
    proto.traceHub_Load_End = function(moniker) {
        providerTemplates.traceTemplate_z(30, moniker)
    };
    proto.isPanel_Load_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(31)
    };
    proto.tracePanel_Load_Start = function(moniker) {
        providerTemplates.traceTemplate_z(31, moniker)
    };
    proto.isPanel_Load_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(32)
    };
    proto.tracePanel_Load_End = function(moniker) {
        providerTemplates.traceTemplate_z(32, moniker)
    };
    proto.isHubStrip_ReadyEnabled = function() {
        return !!providerTemplates.eventEnabled(33)
    };
    proto.traceHubStrip_Ready = function(moniker) {
        providerTemplates.traceTemplate_z(33, moniker)
    };
    proto.isHub_ReadyEnabled = function() {
        return !!providerTemplates.eventEnabled(34)
    };
    proto.traceHub_Ready = function(moniker) {
        providerTemplates.traceTemplate_z(34, moniker)
    };
    proto.isPanel_ReadyEnabled = function() {
        return !!providerTemplates.eventEnabled(35)
    };
    proto.tracePanel_Ready = function(moniker) {
        providerTemplates.traceTemplate_z(35, moniker)
    };
    proto.isHubStrip_MoveToCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(36)
    };
    proto.traceHubStrip_MoveToComplete = function(moniker) {
        providerTemplates.traceTemplate_z(36, moniker)
    };
    proto.isCreateAccount_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(37)
    };
    proto.traceCreateAccount_Start = function(templateId) {
        providerTemplates.traceTemplate_z(37, templateId)
    };
    proto.isCreateAccount_FinishEnabled = function() {
        return !!providerTemplates.eventEnabled(38)
    };
    proto.traceCreateAccount_Finish = function(templateId) {
        providerTemplates.traceTemplate_z(38, templateId)
    };
    proto.isCreateAccount_CancelEnabled = function() {
        return !!providerTemplates.eventEnabled(39)
    };
    proto.traceCreateAccount_Cancel = function(templateId) {
        providerTemplates.traceTemplate_z(39, templateId)
    };
    proto.isCreateAccount_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(40)
    };
    proto.traceCreateAccount_Error = function(templateId) {
        providerTemplates.traceTemplate_z(40, templateId)
    };
    proto.isAcceptTermsOfService_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(41)
    };
    proto.traceAcceptTermsOfService_Start = function(templateId) {
        providerTemplates.traceTemplate_z(41, templateId)
    };
    proto.isAcceptTermsOfService_FinishEnabled = function() {
        return !!providerTemplates.eventEnabled(42)
    };
    proto.traceAcceptTermsOfService_Finish = function(templateId) {
        providerTemplates.traceTemplate_z(42, templateId)
    };
    proto.isAcceptTermsOfService_CancelEnabled = function() {
        return !!providerTemplates.eventEnabled(43)
    };
    proto.traceAcceptTermsOfService_Cancel = function(templateId) {
        providerTemplates.traceTemplate_z(43, templateId)
    };
    proto.isSignInResultEnabled = function() {
        return !!providerTemplates.eventEnabled(44)
    };
    proto.traceSignInResult = function(templateId) {
        providerTemplates.traceTemplate_z(44, templateId)
    };
    proto.isSettingsHome_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(45)
    };
    proto.traceSettingsHome_Start = function(templateId) {
        providerTemplates.traceTemplate_z(45, templateId)
    };
    proto.isSettingsHome_FinishEnabled = function() {
        return !!providerTemplates.eventEnabled(46)
    };
    proto.traceSettingsHome_Finish = function(templateId) {
        providerTemplates.traceTemplate_z(46, templateId)
    };
    proto.isSettingsAccount_LaunchEnabled = function() {
        return !!providerTemplates.eventEnabled(47)
    };
    proto.traceSettingsAccount_Launch = function(templateId) {
        providerTemplates.traceTemplate_z(47, templateId)
    };
    proto.isSettingsAccount_FinishEnabled = function() {
        return !!providerTemplates.eventEnabled(48)
    };
    proto.traceSettingsAccount_Finish = function(templateId) {
        providerTemplates.traceTemplate_z(48, templateId)
    };
    proto.isSettingsAccount_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(49)
    };
    proto.traceSettingsAccount_Error = function(templateId) {
        providerTemplates.traceTemplate_z(49, templateId)
    };
    proto.isSettingsPreferences_LaunchEnabled = function() {
        return !!providerTemplates.eventEnabled(50)
    };
    proto.traceSettingsPreferences_Launch = function(templateId) {
        providerTemplates.traceTemplate_z(50, templateId)
    };
    proto.isSettingsAbout_LaunchEnabled = function() {
        return !!providerTemplates.eventEnabled(51)
    };
    proto.traceSettingsAbout_Launch = function(templateId) {
        providerTemplates.traceTemplate_z(51, templateId)
    };
    proto.isSettingsFeedback_LaunchEnabled = function() {
        return !!providerTemplates.eventEnabled(52)
    };
    proto.traceSettingsFeedback_Launch = function(templateId) {
        providerTemplates.traceTemplate_z(52, templateId)
    };
    proto.isSettingsCaptions_LaunchEnabled = function() {
        return !!providerTemplates.eventEnabled(53)
    };
    proto.traceSettingsCaptions_Launch = function(templateId) {
        providerTemplates.traceTemplate_z(53, templateId)
    };
    proto.isSettingsPopulate_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(54)
    };
    proto.traceSettingsPopulate_Start = function(templateId) {
        providerTemplates.traceTemplate_z(54, templateId)
    };
    proto.isSettingsWinJSPopulate_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(55)
    };
    proto.traceSettingsWinJSPopulate_Start = function(templateId) {
        providerTemplates.traceTemplate_z(55, templateId)
    };
    proto.isSettingsPopulate_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(56)
    };
    proto.traceSettingsPopulate_End = function(templateId) {
        providerTemplates.traceTemplate_z(56, templateId)
    };
    proto.isPurchaseFlowGames_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(57)
    };
    proto.tracePurchaseFlowGames_Start = function(templateId) {
        providerTemplates.traceTemplate_z(57, templateId)
    };
    proto.isPurchaseFlowGames_FinishEnabled = function() {
        return !!providerTemplates.eventEnabled(58)
    };
    proto.tracePurchaseFlowGames_Finish = function(templateId) {
        providerTemplates.traceTemplate_z(58, templateId)
    };
    proto.isPurchaseFlowGames_CancelEnabled = function() {
        return !!providerTemplates.eventEnabled(59)
    };
    proto.tracePurchaseFlowGames_Cancel = function(templateId) {
        providerTemplates.traceTemplate_z(59, templateId)
    };
    proto.isPurchaseFlowGames_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(60)
    };
    proto.tracePurchaseFlowGames_Error = function(templateId) {
        providerTemplates.traceTemplate_z(60, templateId)
    };
    proto.isPurchaseFlowGames_RejectionEnabled = function() {
        return !!providerTemplates.eventEnabled(61)
    };
    proto.tracePurchaseFlowGames_Rejection = function(templateId) {
        providerTemplates.traceTemplate_z(61, templateId)
    };
    proto.isMarketplaceBrowse_PageLoadStartEnabled = function() {
        return !!providerTemplates.eventEnabled(62)
    };
    proto.traceMarketplaceBrowse_PageLoadStart = function(templateId) {
        providerTemplates.traceTemplate_z(62, templateId)
    };
    proto.isServiceQuery_QueryStartEnabled = function() {
        return !!providerTemplates.eventEnabled(63)
    };
    proto.traceServiceQuery_QueryStart = function(templateId) {
        providerTemplates.traceTemplate_z(63, templateId)
    };
    proto.isServiceQuery_QueryReturnEnabled = function() {
        return !!providerTemplates.eventEnabled(64)
    };
    proto.traceServiceQuery_QueryReturn = function(templateId) {
        providerTemplates.traceTemplate_z(64, templateId)
    };
    proto.isServiceQuery_ParseCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(65)
    };
    proto.traceServiceQuery_ParseComplete = function(templateId) {
        providerTemplates.traceTemplate_z(65, templateId)
    };
    proto.isSettingsAccount_LaunchCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(66)
    };
    proto.traceSettingsAccount_LaunchComplete = function(templateId) {
        providerTemplates.traceTemplate_z(66, templateId)
    };
    proto.isSettingsPreferences_LaunchCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(67)
    };
    proto.traceSettingsPreferences_LaunchComplete = function(templateId) {
        providerTemplates.traceTemplate_z(67, templateId)
    };
    proto.isSettingsAbout_LaunchCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(68)
    };
    proto.traceSettingsAbout_LaunchComplete = function(templateId) {
        providerTemplates.traceTemplate_z(68, templateId)
    };
    proto.isSettings_BackToHomeEnabled = function() {
        return !!providerTemplates.eventEnabled(69)
    };
    proto.traceSettings_BackToHome = function(templateId) {
        providerTemplates.traceTemplate_z(69, templateId)
    };
    proto.isSettingsFeedback_LaunchCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(70)
    };
    proto.traceSettingsFeedback_LaunchComplete = function(templateId) {
        providerTemplates.traceTemplate_z(70, templateId)
    };
    proto.isSettingsCaptions_LaunchCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(71)
    };
    proto.traceSettingsCaptions_LaunchComplete = function(templateId) {
        providerTemplates.traceTemplate_z(71, templateId)
    };
    proto.isHomeHub_Load_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(72)
    };
    proto.traceHomeHub_Load_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(72)
    };
    proto.isHomeHub_Load_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(73)
    };
    proto.traceHomeHub_Load_End = function() {
        providerTemplates.traceTemplateEventDescriptor(73)
    };
    proto.isHomeHub_ReadyEnabled = function() {
        return !!providerTemplates.eventEnabled(74)
    };
    proto.traceHomeHub_Ready = function() {
        providerTemplates.traceTemplateEventDescriptor(74)
    };
    proto.isPurchaseFlowMusic_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(75)
    };
    proto.tracePurchaseFlowMusic_Start = function(templateId) {
        providerTemplates.traceTemplate_z(75, templateId)
    };
    proto.isPurchaseFlowMusic_FinishEnabled = function() {
        return !!providerTemplates.eventEnabled(76)
    };
    proto.tracePurchaseFlowMusic_Finish = function(templateId) {
        providerTemplates.traceTemplate_z(76, templateId)
    };
    proto.isPurchaseFlowMusic_CancelEnabled = function() {
        return !!providerTemplates.eventEnabled(77)
    };
    proto.tracePurchaseFlowMusic_Cancel = function(templateId) {
        providerTemplates.traceTemplate_z(77, templateId)
    };
    proto.isPurchaseFlowMusic_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(78)
    };
    proto.tracePurchaseFlowMusic_Error = function(templateId) {
        providerTemplates.traceTemplate_z(78, templateId)
    };
    proto.isPurchaseFlowMusic_RejectionEnabled = function() {
        return !!providerTemplates.eventEnabled(79)
    };
    proto.tracePurchaseFlowMusic_Rejection = function(templateId) {
        providerTemplates.traceTemplate_z(79, templateId)
    };
    proto.isPurchaseFlowVideo_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(80)
    };
    proto.tracePurchaseFlowVideo_Start = function(templateId) {
        providerTemplates.traceTemplate_z(80, templateId)
    };
    proto.isPurchaseFlowVideo_FinishEnabled = function() {
        return !!providerTemplates.eventEnabled(81)
    };
    proto.tracePurchaseFlowVideo_Finish = function(templateId) {
        providerTemplates.traceTemplate_z(81, templateId)
    };
    proto.isPurchaseFlowVideo_CancelEnabled = function() {
        return !!providerTemplates.eventEnabled(82)
    };
    proto.tracePurchaseFlowVideo_Cancel = function(templateId) {
        providerTemplates.traceTemplate_z(82, templateId)
    };
    proto.isPurchaseFlowVideo_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(83)
    };
    proto.tracePurchaseFlowVideo_Error = function(templateId) {
        providerTemplates.traceTemplate_z(83, templateId)
    };
    proto.isPurchaseFlowVideo_Start_Bandwidth_TestEnabled = function() {
        return !!providerTemplates.eventEnabled(84)
    };
    proto.tracePurchaseFlowVideo_Start_Bandwidth_Test = function(templateId) {
        providerTemplates.traceTemplate_z(84, templateId)
    };
    proto.isPurchaseFlowVideo_DownloadEnabled = function() {
        return !!providerTemplates.eventEnabled(85)
    };
    proto.tracePurchaseFlowVideo_Download = function(templateId) {
        providerTemplates.traceTemplate_z(85, templateId)
    };
    proto.isPurchaseFlowVideo_StreamEnabled = function() {
        return !!providerTemplates.eventEnabled(86)
    };
    proto.tracePurchaseFlowVideo_Stream = function(templateId) {
        providerTemplates.traceTemplate_z(86, templateId)
    };
    proto.isPurchaseFlowVideo_DoneEnabled = function() {
        return !!providerTemplates.eventEnabled(87)
    };
    proto.tracePurchaseFlowVideo_Done = function(templateId) {
        providerTemplates.traceTemplate_z(87, templateId)
    };
    proto.isPurchaseFlowVideo_RejectionEnabled = function() {
        return !!providerTemplates.eventEnabled(88)
    };
    proto.tracePurchaseFlowVideo_Rejection = function(templateId) {
        providerTemplates.traceTemplate_z(88, templateId)
    };
    proto.isGalleryControl_Load_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(89)
    };
    proto.traceGalleryControl_Load_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(89)
    };
    proto.isGalleryControl_Load_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(90)
    };
    proto.traceGalleryControl_Load_End = function() {
        providerTemplates.traceTemplateEventDescriptor(90)
    };
    proto.isGalleryControl_InLine_Open_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(91)
    };
    proto.traceGalleryControl_InLine_Open_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(91)
    };
    proto.isGalleryControl_InLine_Open_EndEnabled = function() {
        return !!providerTemplates.eventEnabled(92)
    };
    proto.traceGalleryControl_InLine_Open_End = function() {
        providerTemplates.traceTemplateEventDescriptor(92)
    };
    proto.isGalleryControl_InLine_Open_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(93)
    };
    proto.traceGalleryControl_InLine_Open_Error = function() {
        providerTemplates.traceTemplateEventDescriptor(93)
    };
    proto.isGalleryControl_InLine_CloseEnabled = function() {
        return !!providerTemplates.eventEnabled(94)
    };
    proto.traceGalleryControl_InLine_Close = function() {
        providerTemplates.traceTemplateEventDescriptor(94)
    };
    proto.isGalleryControl_LoadingState_ChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(95)
    };
    proto.traceGalleryControl_LoadingState_Changed = function(newState) {
        providerTemplates.traceTemplate_z(95, newState)
    };
    proto.isModifierControl_SelectionChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(96)
    };
    proto.traceModifierControl_SelectionChanged = function(value, source) {
        providerTemplates.traceTemplate_zz(96, value, source)
    };
    proto.isModifierControl_PopupOpenedEnabled = function() {
        return !!providerTemplates.eventEnabled(97)
    };
    proto.traceModifierControl_PopupOpened = function(templateId) {
        providerTemplates.traceTemplate_z(97, templateId)
    };
    proto.isModifierControl_PopupClosedEnabled = function() {
        return !!providerTemplates.eventEnabled(98)
    };
    proto.traceModifierControl_PopupClosed = function(templateId) {
        providerTemplates.traceTemplate_z(98, templateId)
    };
    proto.isActionListControl_ItemAddedEnabled = function() {
        return !!providerTemplates.eventEnabled(99)
    };
    proto.traceActionListControl_ItemAdded = function(templateId) {
        providerTemplates.traceTemplate_z(99, templateId)
    };
    proto.isActionListControl_ItemRemovedEnabled = function() {
        return !!providerTemplates.eventEnabled(100)
    };
    proto.traceActionListControl_ItemRemoved = function(templateId) {
        providerTemplates.traceTemplate_z(100, templateId)
    };
    proto.isActionListControl_ItemsChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(101)
    };
    proto.traceActionListControl_ItemsChanged = function(templateId) {
        providerTemplates.traceTemplate_z(101, templateId)
    };
    proto.isControlFramework_ControlConstructedEnabled = function() {
        return !!providerTemplates.eventEnabled(102)
    };
    proto.traceControlFramework_ControlConstructed = function(templateId) {
        providerTemplates.traceTemplate_z(102, templateId)
    };
    proto.isControlFramework_ControlCompleteInitializationQueuedEnabled = function() {
        return !!providerTemplates.eventEnabled(103)
    };
    proto.traceControlFramework_ControlCompleteInitializationQueued = function(templateId) {
        providerTemplates.traceTemplate_z(103, templateId)
    };
    proto.isControlFramework_ControlCompleteInitializationRequeuedEnabled = function() {
        return !!providerTemplates.eventEnabled(104)
    };
    proto.traceControlFramework_ControlCompleteInitializationRequeued = function(templateId) {
        providerTemplates.traceTemplate_z(104, templateId)
    };
    proto.isControlFramework_ControlInitializationStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(105)
    };
    proto.traceControlFramework_ControlInitializationStarted = function(templateId) {
        providerTemplates.traceTemplate_z(105, templateId)
    };
    proto.isControlFramework_UserInitializationStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(106)
    };
    proto.traceControlFramework_UserInitializationStarted = function(templateId) {
        providerTemplates.traceTemplate_z(106, templateId)
    };
    proto.isControlFramework_ControlTemplateLoadStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(107)
    };
    proto.traceControlFramework_ControlTemplateLoadStarted = function(templateId) {
        providerTemplates.traceTemplate_z(107, templateId)
    };
    proto.isControlFramework_ControlTemplateLoadCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(108)
    };
    proto.traceControlFramework_ControlTemplateLoadCompleted = function(templateId) {
        providerTemplates.traceTemplate_z(108, templateId)
    };
    proto.isControlFramework_TemplateLoadStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(109)
    };
    proto.traceControlFramework_TemplateLoadStarted = function(templateId) {
        providerTemplates.traceTemplate_z(109, templateId)
    };
    proto.isControlFramework_TemplateLoadFragmentStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(110)
    };
    proto.traceControlFramework_TemplateLoadFragmentStarted = function(templateId) {
        providerTemplates.traceTemplate_z(110, templateId)
    };
    proto.isControlFramework_TemplateLoadFragmentCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(111)
    };
    proto.traceControlFramework_TemplateLoadFragmentCompleted = function(templateId) {
        providerTemplates.traceTemplate_z(111, templateId)
    };
    proto.isControlFramework_TemplateLoadTemplateExtractedEnabled = function() {
        return !!providerTemplates.eventEnabled(112)
    };
    proto.traceControlFramework_TemplateLoadTemplateExtracted = function(templateId) {
        providerTemplates.traceTemplate_z(112, templateId)
    };
    proto.isControlFramework_TemplateLoadCompletedFromCacheEnabled = function() {
        return !!providerTemplates.eventEnabled(113)
    };
    proto.traceControlFramework_TemplateLoadCompletedFromCache = function(templateId) {
        providerTemplates.traceTemplate_z(113, templateId)
    };
    proto.isControlFramework_TemplateLoadCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(114)
    };
    proto.traceControlFramework_TemplateLoadCompleted = function(templateId) {
        providerTemplates.traceTemplate_z(114, templateId)
    };
    proto.isControlFramework_ControlInitializationCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(115)
    };
    proto.traceControlFramework_ControlInitializationCompleted = function(templateId) {
        providerTemplates.traceTemplate_z(115, templateId)
    };
    proto.isControlFramework_UserInitializationCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(116)
    };
    proto.traceControlFramework_UserInitializationCompleted = function(templateId) {
        providerTemplates.traceTemplate_z(116, templateId)
    };
    proto.isControlFramework_ControlCompleteInitializationQueuedForRootEnabled = function() {
        return !!providerTemplates.eventEnabled(117)
    };
    proto.traceControlFramework_ControlCompleteInitializationQueuedForRoot = function(templateId) {
        providerTemplates.traceTemplate_z(117, templateId)
    };
    proto.isControlFramework_ControlCompleteInitializationDequeuedForRootEnabled = function() {
        return !!providerTemplates.eventEnabled(118)
    };
    proto.traceControlFramework_ControlCompleteInitializationDequeuedForRoot = function(templateId) {
        providerTemplates.traceTemplate_z(118, templateId)
    };
    proto.isSubscriptionSignup_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(119)
    };
    proto.traceSubscriptionSignup_Start = function(templateId) {
        providerTemplates.traceTemplate_z(119, templateId)
    };
    proto.isSubscriptionSignup_FinishEnabled = function() {
        return !!providerTemplates.eventEnabled(120)
    };
    proto.traceSubscriptionSignup_Finish = function(templateId) {
        providerTemplates.traceTemplate_z(120, templateId)
    };
    proto.isSubscriptionSignup_CancelEnabled = function() {
        return !!providerTemplates.eventEnabled(121)
    };
    proto.traceSubscriptionSignup_Cancel = function(templateId) {
        providerTemplates.traceTemplate_z(121, templateId)
    };
    proto.isSubscriptionSignup_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(122)
    };
    proto.traceSubscriptionSignup_Error = function(templateId) {
        providerTemplates.traceTemplate_z(122, templateId)
    };
    proto.isNotification_NotificationArrivedEnabled = function() {
        return !!providerTemplates.eventEnabled(123)
    };
    proto.traceNotification_NotificationArrived = function(templateId) {
        providerTemplates.traceTemplate_z(123, templateId)
    };
    proto.isNotification_PageSelectedEnabled = function() {
        return !!providerTemplates.eventEnabled(124)
    };
    proto.traceNotification_PageSelected = function(templateId) {
        providerTemplates.traceTemplate_z(124, templateId)
    };
    proto.isNotification_NotificationClickedEnabled = function() {
        return !!providerTemplates.eventEnabled(125)
    };
    proto.traceNotification_NotificationClicked = function(templateId) {
        providerTemplates.traceTemplate_z(125, templateId)
    };
    proto.isAd_Companion_ShownEnabled = function() {
        return !!providerTemplates.eventEnabled(126)
    };
    proto.traceAd_Companion_Shown = function(linkUrl, imageUrl) {
        providerTemplates.traceTemplate_zz(126, linkUrl, imageUrl)
    };
    proto.isAd_Companion_HiddenEnabled = function() {
        return !!providerTemplates.eventEnabled(127)
    };
    proto.traceAd_Companion_Hidden = function(linkUrl, imageUrl) {
        providerTemplates.traceTemplate_zz(127, linkUrl, imageUrl)
    };
    proto.isVideo_Ad_StartedEnabled = function() {
        return !!providerTemplates.eventEnabled(128)
    };
    proto.traceVideo_Ad_Started = function(videoUrl, clickUrl) {
        providerTemplates.traceTemplate_zz(128, videoUrl, clickUrl)
    };
    proto.isVideo_Ad_CompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(129)
    };
    proto.traceVideo_Ad_Completed = function(videoUrl, clickUrl) {
        providerTemplates.traceTemplate_zz(129, videoUrl, clickUrl)
    };
    proto.isVideo_Ad_SkippedEnabled = function() {
        return !!providerTemplates.eventEnabled(130)
    };
    proto.traceVideo_Ad_Skipped = function(videoUrl, clickUrl) {
        providerTemplates.traceTemplate_zz(130, videoUrl, clickUrl)
    };
    proto.isVideo_Ad_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(131)
    };
    proto.traceVideo_Ad_Error = function(videoUrl, clickUrl) {
        providerTemplates.traceTemplate_zz(131, videoUrl, clickUrl)
    };
    proto.isVideo_Ad_UpSellEnabled = function() {
        return !!providerTemplates.eventEnabled(132)
    };
    proto.traceVideo_Ad_UpSell = function(videoUrl, clickUrl) {
        providerTemplates.traceTemplate_zz(132, videoUrl, clickUrl)
    };
    proto.isAdControl_RefreshedEnabled = function() {
        return !!providerTemplates.eventEnabled(133)
    };
    proto.traceAdControl_Refreshed = function(applicationId, unitId) {
        providerTemplates.traceTemplate_zz(133, applicationId, unitId)
    };
    proto.isAdService_InitializedEnabled = function() {
        return !!providerTemplates.eventEnabled(134)
    };
    proto.traceAdService_Initialized = function() {
        providerTemplates.traceTemplateEventDescriptor(134)
    };
    proto.isAdService_UnloadedEnabled = function() {
        return !!providerTemplates.eventEnabled(135)
    };
    proto.traceAdService_Unloaded = function() {
        providerTemplates.traceTemplateEventDescriptor(135)
    };
    proto.isAdService_AudioAdRefreshingEnabled = function() {
        return !!providerTemplates.eventEnabled(136)
    };
    proto.traceAdService_AudioAdRefreshing = function() {
        providerTemplates.traceTemplateEventDescriptor(136)
    };
    proto.isAdService_AudioAdRefreshedEnabled = function() {
        return !!providerTemplates.eventEnabled(137)
    };
    proto.traceAdService_AudioAdRefreshed = function() {
        providerTemplates.traceTemplateEventDescriptor(137)
    };
    proto.isAdService_VideoAdRefreshingEnabled = function() {
        return !!providerTemplates.eventEnabled(138)
    };
    proto.traceAdService_VideoAdRefreshing = function() {
        providerTemplates.traceTemplateEventDescriptor(138)
    };
    proto.isAdService_VideoAdRefreshedEnabled = function() {
        return !!providerTemplates.eventEnabled(139)
    };
    proto.traceAdService_VideoAdRefreshed = function() {
        providerTemplates.traceTemplateEventDescriptor(139)
    };
    proto.isAdService_AudioAdPlayingEnabled = function() {
        return !!providerTemplates.eventEnabled(140)
    };
    proto.traceAdService_AudioAdPlaying = function() {
        providerTemplates.traceTemplateEventDescriptor(140)
    };
    proto.isAdService_AudioAdPlayedEnabled = function() {
        return !!providerTemplates.eventEnabled(141)
    };
    proto.traceAdService_AudioAdPlayed = function() {
        providerTemplates.traceTemplateEventDescriptor(141)
    };
    proto.isAdService_StreamingTrackPlayingEnabled = function() {
        return !!providerTemplates.eventEnabled(142)
    };
    proto.traceAdService_StreamingTrackPlaying = function() {
        providerTemplates.traceTemplateEventDescriptor(142)
    };
    proto.isAdService_StreamingTrackPlayedEnabled = function() {
        return !!providerTemplates.eventEnabled(143)
    };
    proto.traceAdService_StreamingTrackPlayed = function() {
        providerTemplates.traceTemplateEventDescriptor(143)
    };
    proto.isAdService_TrackPlayingEnabled = function() {
        return !!providerTemplates.eventEnabled(144)
    };
    proto.traceAdService_TrackPlaying = function() {
        providerTemplates.traceTemplateEventDescriptor(144)
    };
    proto.isMediaStateEngine_InitializedEnabled = function() {
        return !!providerTemplates.eventEnabled(145)
    };
    proto.traceMediaStateEngine_Initialized = function(mediaType, serviceId, libraryId) {
        providerTemplates.traceTemplate_zzz(145, mediaType, serviceId, libraryId)
    };
    proto.isMediaStateEngine_UnloadedEnabled = function() {
        return !!providerTemplates.eventEnabled(146)
    };
    proto.traceMediaStateEngine_Unloaded = function(mediaType, serviceId, libraryId) {
        providerTemplates.traceTemplate_zzz(146, mediaType, serviceId, libraryId)
    };
    proto.isMediaStateEngine_UpdateStateEnabled = function() {
        return !!providerTemplates.eventEnabled(147)
    };
    proto.traceMediaStateEngine_UpdateState = function(mediaType, serviceId, libraryId) {
        providerTemplates.traceTemplate_zzz(147, mediaType, serviceId, libraryId)
    };
    proto.isMediaStateEngine_ButtonsChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(148)
    };
    proto.traceMediaStateEngine_ButtonsChanged = function(mediaType, serviceId, libraryId) {
        providerTemplates.traceTemplate_zzz(148, mediaType, serviceId, libraryId)
    };
    proto.isMediaStateEngine_ActionsChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(149)
    };
    proto.traceMediaStateEngine_ActionsChanged = function(mediaType, serviceId, libraryId) {
        providerTemplates.traceTemplate_zzz(149, mediaType, serviceId, libraryId)
    };
    proto.isWinJSNavigation_ContentCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(150)
    };
    proto.traceWinJSNavigation_ContentComplete = function(location) {
        providerTemplates.traceTemplate_z(150, location)
    };
    proto.isShrinkAndStayHeader_ShownEnabled = function() {
        return !!providerTemplates.eventEnabled(151)
    };
    proto.traceShrinkAndStayHeader_Shown = function() {
        providerTemplates.traceTemplateEventDescriptor(151)
    };
    proto.isShrinkAndStayHeader_DismissedEnabled = function() {
        return !!providerTemplates.eventEnabled(152)
    };
    proto.traceShrinkAndStayHeader_Dismissed = function() {
        providerTemplates.traceTemplateEventDescriptor(152)
    };
    proto.isPerfTrack_Trigger_AppLaunchCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(153)
    };
    proto.tracePerfTrack_Trigger_AppLaunchCompleted = function(durationMsec) {
        providerTemplates.traceTemplate_q(153, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchToCollectionCompletedEnabled = function() {
        return !!providerTemplates.eventEnabled(154)
    };
    proto.tracePerfTrack_Trigger_AppLaunchToCollectionCompleted = function(durationMsec) {
        providerTemplates.traceTemplate_q(154, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchPlayNonProtectedContentEnabled = function() {
        return !!providerTemplates.eventEnabled(155)
    };
    proto.tracePerfTrack_Trigger_AppLaunchPlayNonProtectedContent = function(durationMsec) {
        providerTemplates.traceTemplate_q(155, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchPlayProtectedContentEnabled = function() {
        return !!providerTemplates.eventEnabled(156)
    };
    proto.tracePerfTrack_Trigger_AppLaunchPlayProtectedContent = function(durationMsec) {
        providerTemplates.traceTemplate_q(156, durationMsec)
    };
    proto.isPerfTrack_Trigger_PlayProtectedInAppPlaybackStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(157)
    };
    proto.tracePerfTrack_Trigger_PlayProtectedInAppPlaybackStarted = function(durationMsec) {
        providerTemplates.traceTemplate_q(157, durationMsec)
    };
    proto.isPerfTrack_Trigger_PlayNonProtectedInAppPlaybackStartedEnabled = function() {
        return !!providerTemplates.eventEnabled(158)
    };
    proto.tracePerfTrack_Trigger_PlayNonProtectedInAppPlaybackStarted = function(durationMsec) {
        providerTemplates.traceTemplate_q(158, durationMsec)
    };
    proto.isPerfTrack_Trigger_CollectionGalleryRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(159)
    };
    proto.tracePerfTrack_Trigger_CollectionGalleryRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(159, durationMsec)
    };
    proto.isPerfTrack_Trigger_SearchGalleryRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(160)
    };
    proto.tracePerfTrack_Trigger_SearchGalleryRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(160, durationMsec)
    };
    proto.isPerfTrack_Trigger_PopoverRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(161)
    };
    proto.tracePerfTrack_Trigger_PopoverRequestToLoad = function(name, durationMsec) {
        providerTemplates.traceTemplate_zq(161, name, durationMsec)
    };
    proto.isPerfTrack_Trigger_MarketplaceGalleryRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(162)
    };
    proto.tracePerfTrack_Trigger_MarketplaceGalleryRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(162, durationMsec)
    };
    proto.isPerfTrack_Trigger_WebBlendRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(163)
    };
    proto.tracePerfTrack_Trigger_WebBlendRequestToLoad = function(url, durationMsec) {
        providerTemplates.traceTemplate_zq(163, url, durationMsec)
    };
    proto.isPerfTrack_Trigger_ExplorePageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(164)
    };
    proto.tracePerfTrack_Trigger_ExplorePageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(164, durationMsec)
    };
    proto.isPerfTrack_Trigger_RadioPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(165)
    };
    proto.tracePerfTrack_Trigger_RadioPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(165, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchToExploreCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(166)
    };
    proto.tracePerfTrack_Trigger_AppLaunchToExploreComplete = function(durationMsec) {
        providerTemplates.traceTemplate_q(166, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchToRadioCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(167)
    };
    proto.tracePerfTrack_Trigger_AppLaunchToRadioComplete = function(durationMsec) {
        providerTemplates.traceTemplate_q(167, durationMsec)
    };
    proto.isPerfTrack_Trigger_TVDetailsRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(168)
    };
    proto.tracePerfTrack_Trigger_TVDetailsRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(168, durationMsec)
    };
    proto.isPerfTrack_Trigger_MovieDetailsRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(169)
    };
    proto.tracePerfTrack_Trigger_MovieDetailsRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(169, durationMsec)
    };
    proto.isPerfTrack_Trigger_AlbumDetailsRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(170)
    };
    proto.tracePerfTrack_Trigger_AlbumDetailsRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(170, durationMsec)
    };
    proto.isPerfTrack_Trigger_ArtistDetailsRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(171)
    };
    proto.tracePerfTrack_Trigger_ArtistDetailsRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(171, durationMsec)
    };
    proto.isPerfTrack_Trigger_PlaylistDetailsRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(172)
    };
    proto.tracePerfTrack_Trigger_PlaylistDetailsRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(172, durationMsec)
    };
    proto.isPerfTrack_Trigger_DevicesPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(173)
    };
    proto.tracePerfTrack_Trigger_DevicesPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(173, durationMsec)
    };
    proto.isPerfTrack_Trigger_NowPlayingPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(174)
    };
    proto.tracePerfTrack_Trigger_NowPlayingPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(174, durationMsec)
    };
    proto.isPerfTrack_Trigger_MoviesStorePageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(175)
    };
    proto.tracePerfTrack_Trigger_MoviesStorePageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(175, durationMsec)
    };
    proto.isPerfTrack_Trigger_TvStorePageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(176)
    };
    proto.tracePerfTrack_Trigger_TvStorePageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(176, durationMsec)
    };
    proto.isPerfTrack_Trigger_VideoCollectionPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(177)
    };
    proto.tracePerfTrack_Trigger_VideoCollectionPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(177, durationMsec)
    };
    proto.isPerfTrack_Trigger_ShopBooksPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(178)
    };
    proto.tracePerfTrack_Trigger_ShopBooksPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(178, durationMsec)
    };
    proto.isPerfTrack_Trigger_ShopMagsPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(179)
    };
    proto.tracePerfTrack_Trigger_ShopMagsPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(179, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchToShopBooksCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(180)
    };
    proto.tracePerfTrack_Trigger_AppLaunchToShopBooksComplete = function(durationMsec) {
        providerTemplates.traceTemplate_q(180, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchToShopMagsCompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(181)
    };
    proto.tracePerfTrack_Trigger_AppLaunchToShopMagsComplete = function(durationMsec) {
        providerTemplates.traceTemplate_q(181, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchToOOBECompleteEnabled = function() {
        return !!providerTemplates.eventEnabled(182)
    };
    proto.tracePerfTrack_Trigger_AppLaunchToOOBEComplete = function(durationMsec) {
        providerTemplates.traceTemplate_q(182, durationMsec)
    };
    proto.isPerfTrack_Trigger_CategoryGalleryRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(183)
    };
    proto.tracePerfTrack_Trigger_CategoryGalleryRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(183, durationMsec)
    };
    proto.isPerfTrack_Trigger_IssuesGalleryRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(184)
    };
    proto.tracePerfTrack_Trigger_IssuesGalleryRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(184, durationMsec)
    };
    proto.isPerfTrack_Trigger_StandardGalleryRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(185)
    };
    proto.tracePerfTrack_Trigger_StandardGalleryRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(185, durationMsec)
    };
    proto.isPerfTrack_Trigger_BookDetailsRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(186)
    };
    proto.tracePerfTrack_Trigger_BookDetailsRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(186, durationMsec)
    };
    proto.isPerfTrack_Trigger_MagDetailsRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(187)
    };
    proto.tracePerfTrack_Trigger_MagDetailsRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(187, durationMsec)
    };
    proto.isPerfTrack_Trigger_SearchLibraryRequestToQueryResultsEnabled = function() {
        return !!providerTemplates.eventEnabled(188)
    };
    proto.tracePerfTrack_Trigger_SearchLibraryRequestToQueryResults = function(durationMsec) {
        providerTemplates.traceTemplate_q(188, durationMsec)
    };
    proto.isPerfTrack_Trigger_SearchCatalogRequestToQueryResultsEnabled = function() {
        return !!providerTemplates.eventEnabled(189)
    };
    proto.tracePerfTrack_Trigger_SearchCatalogRequestToQueryResults = function(durationMsec) {
        providerTemplates.traceTemplate_q(189, durationMsec)
    };
    proto.isPerfTrack_Trigger_SearchAutoCompleteResultsReceivedEnabled = function() {
        return !!providerTemplates.eventEnabled(190)
    };
    proto.tracePerfTrack_Trigger_SearchAutoCompleteResultsReceived = function(durationMsec) {
        providerTemplates.traceTemplate_q(190, durationMsec)
    };
    proto.isPerfTrack_Trigger_BNDeviceRegistrationRequestSucceededEnabled = function() {
        return !!providerTemplates.eventEnabled(191)
    };
    proto.tracePerfTrack_Trigger_BNDeviceRegistrationRequestSucceeded = function(durationMsec) {
        providerTemplates.traceTemplate_q(191, durationMsec)
    };
    proto.isPerfTrack_Trigger_BNLoginRequestSucceededEnabled = function() {
        return !!providerTemplates.eventEnabled(192)
    };
    proto.tracePerfTrack_Trigger_BNLoginRequestSucceeded = function(durationMsec) {
        providerTemplates.traceTemplate_q(192, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchToMoviesStoreEnabled = function() {
        return !!providerTemplates.eventEnabled(193)
    };
    proto.tracePerfTrack_Trigger_AppLaunchToMoviesStore = function(durationMsec) {
        providerTemplates.traceTemplate_q(193, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchToTvStoreEnabled = function() {
        return !!providerTemplates.eventEnabled(194)
    };
    proto.tracePerfTrack_Trigger_AppLaunchToTvStore = function(durationMsec) {
        providerTemplates.traceTemplate_q(194, durationMsec)
    };
    proto.isPerfTrack_Trigger_AppLaunchToVideoCollectionEnabled = function() {
        return !!providerTemplates.eventEnabled(195)
    };
    proto.tracePerfTrack_Trigger_AppLaunchToVideoCollection = function(durationMsec) {
        providerTemplates.traceTemplate_q(195, durationMsec)
    };
    proto.isPerfTrack_Trigger_MoviesCollectionPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(196)
    };
    proto.tracePerfTrack_Trigger_MoviesCollectionPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(196, durationMsec)
    };
    proto.isPerfTrack_Trigger_TvCollectionPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(197)
    };
    proto.tracePerfTrack_Trigger_TvCollectionPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(197, durationMsec)
    };
    proto.isPerfTrack_Trigger_PersonalCollectionPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(198)
    };
    proto.tracePerfTrack_Trigger_PersonalCollectionPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(198, durationMsec)
    };
    proto.isPerfTrack_Trigger_FeaturedMoviesPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(199)
    };
    proto.tracePerfTrack_Trigger_FeaturedMoviesPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(199, durationMsec)
    };
    proto.isPerfTrack_Trigger_NewMoviesPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(200)
    };
    proto.tracePerfTrack_Trigger_NewMoviesPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(200, durationMsec)
    };
    proto.isPerfTrack_Trigger_TopSellingMoviesPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(201)
    };
    proto.tracePerfTrack_Trigger_TopSellingMoviesPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(201, durationMsec)
    };
    proto.isPerfTrack_Trigger_FeaturedTvPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(202)
    };
    proto.tracePerfTrack_Trigger_FeaturedTvPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(202, durationMsec)
    };
    proto.isPerfTrack_Trigger_NewTvPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(203)
    };
    proto.tracePerfTrack_Trigger_NewTvPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(203, durationMsec)
    };
    proto.isPerfTrack_Trigger_LastNightsTvPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(204)
    };
    proto.tracePerfTrack_Trigger_LastNightsTvPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(204, durationMsec)
    };
    proto.isPerfTrack_Trigger_TopSellingTvPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(205)
    };
    proto.tracePerfTrack_Trigger_TopSellingTvPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(205, durationMsec)
    };
    proto.isPerfTrack_Trigger_FlexHubPageRequestToLoadEnabled = function() {
        return !!providerTemplates.eventEnabled(206)
    };
    proto.tracePerfTrack_Trigger_FlexHubPageRequestToLoad = function(durationMsec) {
        providerTemplates.traceTemplate_q(206, durationMsec)
    }
})(this);
(function initMicrosoft_Zune_Sync(global) {
    var providerTemplates = null;
    var ns = global;
    if (ns.Diagnostics === undefined)
        ns.Diagnostics = {};
    var ns = ns.Diagnostics;
    if (ns.Tracing === undefined)
        ns.Tracing = {};
    var ns = ns.Tracing;
    if (ns.Microsoft === undefined)
        ns.Microsoft = {};
    var ns = ns.Microsoft;
    if (ns.Entertainment === undefined)
        ns.Entertainment = {};
    var ns = ns.Entertainment;
    if (ns.Instrumentation === undefined)
        ns.Instrumentation = {};
    var ns = ns.Instrumentation;
    if (ns.Providers === undefined)
        ns.Providers = {};
    var ns = ns.Providers;
    ns.SyncEventProvider = function() {
        if (providerTemplates === null)
            providerTemplates = new global.Microsoft.Entertainment.Instrumentation.Providers.SyncEventProviderTemplate
    };
    var proto = ns.SyncEventProvider.prototype;
    proto.isCloudSync_Engine_Sync_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(0)
    };
    proto.traceCloudSync_Engine_Sync_Start = function(requestSyncOption) {
        providerTemplates.traceTemplate_q(0, requestSyncOption)
    };
    proto.isCloudSync_Engine_Sync_StopEnabled = function() {
        return !!providerTemplates.eventEnabled(1)
    };
    proto.traceCloudSync_Engine_Sync_Stop = function(hResult) {
        providerTemplates.traceTemplate_d(1, hResult)
    };
    proto.isCloudSync_Engine_BlockSync_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(2)
    };
    proto.traceCloudSync_Engine_BlockSync_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(2)
    };
    proto.isCloudSync_Engine_BlockSync_StopEnabled = function() {
        return !!providerTemplates.eventEnabled(3)
    };
    proto.traceCloudSync_Engine_BlockSync_Stop = function() {
        providerTemplates.traceTemplateEventDescriptor(3)
    };
    proto.isCloudSync_Engine_RequestSyncEnabled = function() {
        return !!providerTemplates.eventEnabled(4)
    };
    proto.traceCloudSync_Engine_RequestSync = function(requestSyncOption, cookieNextCompleteSync) {
        providerTemplates.traceTemplate_qq(4, requestSyncOption, cookieNextCompleteSync)
    };
    proto.isCloudSync_Engine_SyncErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(5)
    };
    proto.traceCloudSync_Engine_SyncError = function(hResult) {
        providerTemplates.traceTemplate_d(5, hResult)
    };
    proto.isCloudSync_Engine_SyncEndEnabled = function() {
        return !!providerTemplates.eventEnabled(6)
    };
    proto.traceCloudSync_Engine_SyncEnd = function(hResult, changes, cookieCompleteSync) {
        providerTemplates.traceTemplate_dtq(6, hResult, changes, cookieCompleteSync)
    };
    proto.isCloudSync_Engine_ScheduleSyncEnabled = function() {
        return !!providerTemplates.eventEnabled(7)
    };
    proto.traceCloudSync_Engine_ScheduleSync = function(delayTimeMS) {
        providerTemplates.traceTemplate_q(7, delayTimeMS)
    };
    proto.isCloudSync_Engine_CancelSyncEnabled = function() {
        return !!providerTemplates.eventEnabled(8)
    };
    proto.traceCloudSync_Engine_CancelSync = function(hResult) {
        providerTemplates.traceTemplate_d(8, hResult)
    };
    proto.isCloudSync_Engine_NotificationEnabled = function() {
        return !!providerTemplates.eventEnabled(9)
    };
    proto.traceCloudSync_Engine_Notification = function(syncPointId) {
        providerTemplates.traceTemplate_z(9, syncPointId)
    };
    proto.isCloudSync_LibraryProvider_LoadItemEnabled = function() {
        return !!providerTemplates.eventEnabled(10)
    };
    proto.traceCloudSync_LibraryProvider_LoadItem = function(syncType, mediaId) {
        providerTemplates.traceTemplate_qd(10, syncType, mediaId)
    };
    proto.isCloudSync_LibraryProvider_AddItemEnabled = function() {
        return !!providerTemplates.eventEnabled(11)
    };
    proto.traceCloudSync_LibraryProvider_AddItem = function(syncType, mediaId, constraintConflict, conflictingMediaId) {
        providerTemplates.traceTemplate_qdqd(11, syncType, mediaId, constraintConflict, conflictingMediaId)
    };
    proto.isCloudSync_LibraryProvider_UpdateItemEnabled = function() {
        return !!providerTemplates.eventEnabled(12)
    };
    proto.traceCloudSync_LibraryProvider_UpdateItem = function(syncType, mediaIdIn, mediaIdOut) {
        providerTemplates.traceTemplate_qdd(12, syncType, mediaIdIn, mediaIdOut)
    };
    proto.isCloudSync_LibraryProvider_DeleteItemEnabled = function() {
        return !!providerTemplates.eventEnabled(13)
    };
    proto.traceCloudSync_LibraryProvider_DeleteItem = function(syncType, mediaId) {
        providerTemplates.traceTemplate_qd(13, syncType, mediaId)
    };
    proto.isCloudSync_LibraryProvider_DirtyItemsEnabled = function() {
        return !!providerTemplates.eventEnabled(14)
    };
    proto.traceCloudSync_LibraryProvider_DirtyItems = function(syncType, dirtyItems) {
        providerTemplates.traceTemplate_qz(14, syncType, dirtyItems)
    };
    proto.isCloudSync_LibraryProvider_DeletedItemsEnabled = function() {
        return !!providerTemplates.eventEnabled(15)
    };
    proto.traceCloudSync_LibraryProvider_DeletedItems = function(syncType, deletedItems) {
        providerTemplates.traceTemplate_qz(15, syncType, deletedItems)
    };
    proto.isCloudSync_LibraryProvider_InvalidItemsEnabled = function() {
        return !!providerTemplates.eventEnabled(16)
    };
    proto.traceCloudSync_LibraryProvider_InvalidItems = function(syncType, invalidItems) {
        providerTemplates.traceTemplate_qz(16, syncType, invalidItems)
    };
    proto.isCloudSync_LibraryProvider_IsDirtyEnabled = function() {
        return !!providerTemplates.eventEnabled(17)
    };
    proto.traceCloudSync_LibraryProvider_IsDirty = function(isDirty) {
        providerTemplates.traceTemplate_t(17, isDirty)
    };
    proto.isCloudSync_LibraryProvider_IsAvailableEnabled = function() {
        return !!providerTemplates.eventEnabled(18)
    };
    proto.traceCloudSync_LibraryProvider_IsAvailable = function(isAvailable) {
        providerTemplates.traceTemplate_t(18, isAvailable)
    };
    proto.isCloudSync_LibraryProvider_ContentChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(19)
    };
    proto.traceCloudSync_LibraryProvider_ContentChanged = function(notifyDelayMS) {
        providerTemplates.traceTemplate_q(19, notifyDelayMS)
    };
    proto.isCloudSync_LibraryProvider_UpdateMetadata_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(20)
    };
    proto.traceCloudSync_LibraryProvider_UpdateMetadata_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(20)
    };
    proto.isCloudSync_LibraryProvider_UpdateMetadata_StopEnabled = function() {
        return !!providerTemplates.eventEnabled(21)
    };
    proto.traceCloudSync_LibraryProvider_UpdateMetadata_Stop = function() {
        providerTemplates.traceTemplateEventDescriptor(21)
    };
    proto.isCloudSync_CloudProvider_ApplyItem_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(22)
    };
    proto.traceCloudSync_CloudProvider_ApplyItem_Error = function(syncType, cloudId, hResult) {
        providerTemplates.traceTemplate_qzd(22, syncType, cloudId, hResult)
    };
    proto.isCloudSync_CloudProvider_ApplyItem_SkippedEnabled = function() {
        return !!providerTemplates.eventEnabled(23)
    };
    proto.traceCloudSync_CloudProvider_ApplyItem_Skipped = function(syncType, cloudId) {
        providerTemplates.traceTemplate_qz(23, syncType, cloudId)
    };
    proto.isCloudSync_CloudProvider_LoadItem_ErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(24)
    };
    proto.traceCloudSync_CloudProvider_LoadItem_Error = function(syncType, cloudId, hResult) {
        providerTemplates.traceTemplate_qzd(24, syncType, cloudId, hResult)
    };
    proto.isCloudSync_CloudProvider_IsDirtyEnabled = function() {
        return !!providerTemplates.eventEnabled(25)
    };
    proto.traceCloudSync_CloudProvider_IsDirty = function(isDirty, dirtyReason) {
        providerTemplates.traceTemplate_tq(25, isDirty, dirtyReason)
    };
    proto.isCloudSync_CloudProvider_IsAvailableEnabled = function() {
        return !!providerTemplates.eventEnabled(26)
    };
    proto.traceCloudSync_CloudProvider_IsAvailable = function(availability) {
        providerTemplates.traceTemplate_q(26, availability)
    };
    proto.isCloudSync_CloudProvider_ContentChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(27)
    };
    proto.traceCloudSync_CloudProvider_ContentChanged = function() {
        providerTemplates.traceTemplateEventDescriptor(27)
    };
    proto.isCloudSync_CloudProvider_FindChangesEnabled = function() {
        return !!providerTemplates.eventEnabled(28)
    };
    proto.traceCloudSync_CloudProvider_FindChanges = function(anchor, requestedBatchSize, hasMoreData) {
        providerTemplates.traceTemplate_zqt(28, anchor, requestedBatchSize, hasMoreData)
    };
    proto.isCloudSync_CloudProvider_FoundChangeEnabled = function() {
        return !!providerTemplates.eventEnabled(29)
    };
    proto.traceCloudSync_CloudProvider_FoundChange = function(syncType, cloudId, changeType) {
        providerTemplates.traceTemplate_qzq(29, syncType, cloudId, changeType)
    };
    proto.isCloudSync_CloudProvider_TakeDownEnabled = function() {
        return !!providerTemplates.eventEnabled(30)
    };
    proto.traceCloudSync_CloudProvider_TakeDown = function(cloudId) {
        providerTemplates.traceTemplate_z(30, cloudId)
    };
    proto.isCloudSync_CloudProvider_UpdateMetadata_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(31)
    };
    proto.traceCloudSync_CloudProvider_UpdateMetadata_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(31)
    };
    proto.isCloudSync_CloudProvider_UpdateMetadata_StopEnabled = function() {
        return !!providerTemplates.eventEnabled(32)
    };
    proto.traceCloudSync_CloudProvider_UpdateMetadata_Stop = function() {
        providerTemplates.traceTemplateEventDescriptor(32)
    };
    proto.isCloudSync_CloudProvider_ApplyBatch_StartEnabled = function() {
        return !!providerTemplates.eventEnabled(33)
    };
    proto.traceCloudSync_CloudProvider_ApplyBatch_Start = function() {
        providerTemplates.traceTemplateEventDescriptor(33)
    };
    proto.isCloudSync_CloudProvider_ApplyBatch_StopEnabled = function() {
        return !!providerTemplates.eventEnabled(34)
    };
    proto.traceCloudSync_CloudProvider_ApplyBatch_Stop = function() {
        providerTemplates.traceTemplateEventDescriptor(34)
    }
})(this);
(function initMicrosoft_Zune_LegacyPerfTrace(global) {
    var providerTemplates = null;
    var ns = global;
    if (ns.Diagnostics === undefined)
        ns.Diagnostics = {};
    var ns = ns.Diagnostics;
    if (ns.Tracing === undefined)
        ns.Tracing = {};
    var ns = ns.Tracing;
    if (ns.Microsoft === undefined)
        ns.Microsoft = {};
    var ns = ns.Microsoft;
    if (ns.Entertainment === undefined)
        ns.Entertainment = {};
    var ns = ns.Entertainment;
    if (ns.Instrumentation === undefined)
        ns.Instrumentation = {};
    var ns = ns.Instrumentation;
    if (ns.Providers === undefined)
        ns.Providers = {};
    var ns = ns.Providers;
    ns.LegacyPerfTrace = function() {
        if (providerTemplates === null)
            providerTemplates = new global.Microsoft.Entertainment.Instrumentation.Providers.LegacyPerfTraceTemplate
    };
    var proto = ns.LegacyPerfTrace.prototype;
    proto.isLegacyPerfTraceHttpEventEnabled = function() {
        return !!providerTemplates.eventEnabled(0)
    };
    proto.traceLegacyPerfTraceHttpEvent = function(httpEvent, url) {
        providerTemplates.traceTemplate_qz(0, httpEvent, url)
    };
    proto.isLegacyPerfTraceClientEventEnabled = function() {
        return !!providerTemplates.eventEnabled(1)
    };
    proto.traceLegacyPerfTraceClientEvent = function(reporterTag, actionType, reason) {
        providerTemplates.traceTemplate_qqq(1, reporterTag, actionType, reason)
    };
    proto.isLegacyPerfTraceWMPPlaybackEventEnabled = function() {
        return !!providerTemplates.eventEnabled(2)
    };
    proto.traceLegacyPerfTraceWMPPlaybackEvent = function(type, fileName, graphType, lastHR) {
        providerTemplates.traceTemplate_qzqd(2, type, fileName, graphType, lastHR)
    };
    proto.isLegacyPerfTraceDBMutexEventEnabled = function() {
        return !!providerTemplates.eventEnabled(3)
    };
    proto.traceLegacyPerfTraceDBMutexEvent = function(dBMutexEvent, threadId, time) {
        providerTemplates.traceTemplate_qqq(3, dBMutexEvent, threadId, time)
    };
    proto.isLegacyPerfTraceLaunchEventEnabled = function() {
        return !!providerTemplates.eventEnabled(4)
    };
    proto.traceLegacyPerfTraceLaunchEvent = function(launchEvent, launchEventData) {
        providerTemplates.traceTemplate_qq(4, launchEvent, launchEventData)
    };
    proto.isLegacyPerfTraceSyncEventEnabled = function() {
        return !!providerTemplates.eventEnabled(5)
    };
    proto.traceLegacyPerfTraceSyncEvent = function(syncEvent, syncEventData) {
        providerTemplates.traceTemplate_qq(5, syncEvent, syncEventData)
    };
    proto.isLegacyPerfTraceQRSEventEnabled = function() {
        return !!providerTemplates.eventEnabled(6)
    };
    proto.traceLegacyPerfTraceQRSEvent = function(qRSEvent, qRSEventData) {
        providerTemplates.traceTemplate_qq(6, qRSEvent, qRSEventData)
    };
    proto.isLegacyPerfTraceGenericEventEnabled = function() {
        return !!providerTemplates.eventEnabled(7)
    };
    proto.traceLegacyPerfTraceGenericEvent = function(reporterTag, type, action) {
        providerTemplates.traceTemplate_qqq(7, reporterTag, type, action)
    };
    proto.isLegacyPerfTraceDriverEventEnabled = function() {
        return !!providerTemplates.eventEnabled(8)
    };
    proto.traceLegacyPerfTraceDriverEvent = function(driverEvent, driverEventData) {
        providerTemplates.traceTemplate_qq(8, driverEvent, driverEventData)
    };
    proto.isLegacyPerfTraceCollectionEventEnabled = function() {
        return !!providerTemplates.eventEnabled(9)
    };
    proto.traceLegacyPerfTraceCollectionEvent = function(collectionEvent, detail) {
        providerTemplates.traceTemplate_qz(9, collectionEvent, detail)
    };
    proto.isLegacyPerfTraceQuickMixEventEnabled = function() {
        return !!providerTemplates.eventEnabled(10)
    };
    proto.traceLegacyPerfTraceQuickMixEvent = function(quickMixEvent, quickMixEventData) {
        providerTemplates.traceTemplate_qq(10, quickMixEvent, quickMixEventData)
    };
    proto.isLegacyPerfTraceDownloadEventEnabled = function() {
        return !!providerTemplates.eventEnabled(11)
    };
    proto.traceLegacyPerfTraceDownloadEvent = function(downloadEvent, id) {
        providerTemplates.traceTemplate_qz(11, downloadEvent, id)
    }
})(this);
(function initMicrosoft_Zune_Social(global) {
    var providerTemplates = null;
    var ns = global;
    if (ns.Diagnostics === undefined)
        ns.Diagnostics = {};
    var ns = ns.Diagnostics;
    if (ns.Tracing === undefined)
        ns.Tracing = {};
    var ns = ns.Tracing;
    if (ns.Microsoft === undefined)
        ns.Microsoft = {};
    var ns = ns.Microsoft;
    if (ns.Entertainment === undefined)
        ns.Entertainment = {};
    var ns = ns.Entertainment;
    if (ns.Instrumentation === undefined)
        ns.Instrumentation = {};
    var ns = ns.Instrumentation;
    if (ns.Providers === undefined)
        ns.Providers = {};
    var ns = ns.Providers;
    ns.Social = function() {
        if (providerTemplates === null)
            providerTemplates = new global.Microsoft.Entertainment.Instrumentation.Providers.SocialTemplate
    };
    var proto = ns.Social.prototype;
    proto.isAvatarRendererFrameStartEnabled = function() {
        return !!providerTemplates.eventEnabled(0)
    };
    proto.traceAvatarRendererFrameStart = function(id) {
        providerTemplates.traceTemplate_z(0, id)
    };
    proto.isAvatarRendererFrameEndEnabled = function() {
        return !!providerTemplates.eventEnabled(1)
    };
    proto.traceAvatarRendererFrameEnd = function(id, duration) {
        providerTemplates.traceTemplate_zf(1, id, duration)
    };
    proto.isAvatarRendererShutdownEnabled = function() {
        return !!providerTemplates.eventEnabled(2)
    };
    proto.traceAvatarRendererShutdown = function(id) {
        providerTemplates.traceTemplate_z(2, id)
    }
})(this);
(function initMicrosoft_Zune_Xbox(global) {
    var providerTemplates = null;
    var ns = global;
    if (ns.Diagnostics === undefined)
        ns.Diagnostics = {};
    var ns = ns.Diagnostics;
    if (ns.Tracing === undefined)
        ns.Tracing = {};
    var ns = ns.Tracing;
    if (ns.Microsoft === undefined)
        ns.Microsoft = {};
    var ns = ns.Microsoft;
    if (ns.Entertainment === undefined)
        ns.Entertainment = {};
    var ns = ns.Entertainment;
    if (ns.Instrumentation === undefined)
        ns.Instrumentation = {};
    var ns = ns.Instrumentation;
    if (ns.Providers === undefined)
        ns.Providers = {};
    var ns = ns.Providers;
    ns.Xbox = function() {
        if (providerTemplates === null)
            providerTemplates = new global.Microsoft.Entertainment.Instrumentation.Providers.XboxTemplate
    };
    var proto = ns.Xbox.prototype;
    proto.isXboxSessionStateChangeEnabled = function() {
        return !!providerTemplates.eventEnabled(0)
    };
    proto.traceXboxSessionStateChange = function(newState, oldState) {
        providerTemplates.traceTemplate_zz(0, newState, oldState)
    };
    proto.isXboxTransportControlsLRCStateChangeEnabled = function() {
        return !!providerTemplates.eventEnabled(1)
    };
    proto.traceXboxTransportControlsLRCStateChange = function(newState, oldState) {
        providerTemplates.traceTemplate_zz(1, newState, oldState)
    };
    proto.isXboxSigninTMFServiceSigninEnabled = function() {
        return !!providerTemplates.eventEnabled(2)
    };
    proto.traceXboxSigninTMFServiceSignin = function(tag, hResult, errorText) {
        providerTemplates.traceTemplate_zdz(2, tag, hResult, errorText)
    };
    proto.isXboxSigninJoinSessionEnabled = function() {
        return !!providerTemplates.eventEnabled(3)
    };
    proto.traceXboxSigninJoinSession = function(tag, hResult, errorText) {
        providerTemplates.traceTemplate_zdz(3, tag, hResult, errorText)
    };
    proto.isXboxSigninX8AppSigninEnabled = function() {
        return !!providerTemplates.eventEnabled(4)
    };
    proto.traceXboxSigninX8AppSignin = function(tag, hResult, errorText) {
        providerTemplates.traceTemplate_zdz(4, tag, hResult, errorText)
    };
    proto.isXboxSigninNoUserSessionsEnabled = function() {
        return !!providerTemplates.eventEnabled(5)
    };
    proto.traceXboxSigninNoUserSessions = function(tag, hResult, errorText) {
        providerTemplates.traceTemplate_zdz(5, tag, hResult, errorText)
    };
    proto.isXboxControlCommandSentEnabled = function() {
        return !!providerTemplates.eventEnabled(6)
    };
    proto.traceXboxControlCommandSent = function(controlKey, executionTimeMilliseconds) {
        providerTemplates.traceTemplate_qf(6, controlKey, executionTimeMilliseconds)
    };
    proto.isXboxControlCommandErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(7)
    };
    proto.traceXboxControlCommandError = function(controlKey, executionTimeMilliseconds, responseCode) {
        providerTemplates.traceTemplate_qfq(7, controlKey, executionTimeMilliseconds, responseCode)
    };
    proto.isXboxControlSeekCommandSentEnabled = function() {
        return !!providerTemplates.eventEnabled(8)
    };
    proto.traceXboxControlSeekCommandSent = function(seekPosition, executionTimeMilliseconds) {
        providerTemplates.traceTemplate_xf(8, seekPosition, executionTimeMilliseconds)
    };
    proto.isXboxControlSeekCommandErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(9)
    };
    proto.traceXboxControlSeekCommandError = function(seekPosition, executionTimeMilliseconds, responseCode) {
        providerTemplates.traceTemplate_xfq(9, seekPosition, executionTimeMilliseconds, responseCode)
    };
    proto.isXboxBogusMediaStateMessageIgnoredEnabled = function() {
        return !!providerTemplates.eventEnabled(10)
    };
    proto.traceXboxBogusMediaStateMessageIgnored = function(position, transportState, positionBeforeLastSeek, lastSeekPosition) {
        providerTemplates.traceTemplate_xqxx(10, position, transportState, positionBeforeLastSeek, lastSeekPosition)
    };
    proto.isXboxGetMediaStateErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(11)
    };
    proto.traceXboxGetMediaStateError = function(executionTimeMilliseconds, responseCode) {
        providerTemplates.traceTemplate_fq(11, executionTimeMilliseconds, responseCode)
    };
    proto.isXboxShowXboxControlsEnabled = function() {
        return !!providerTemplates.eventEnabled(12)
    };
    proto.traceXboxShowXboxControls = function() {
        providerTemplates.traceTemplateEventDescriptor(12)
    };
    proto.isXboxShowXboxControlsSetVisibleEnabled = function() {
        return !!providerTemplates.eventEnabled(13)
    };
    proto.traceXboxShowXboxControlsSetVisible = function() {
        providerTemplates.traceTemplateEventDescriptor(13)
    };
    proto.isXboxHideXboxControlsEnabled = function() {
        return !!providerTemplates.eventEnabled(14)
    };
    proto.traceXboxHideXboxControls = function() {
        providerTemplates.traceTemplateEventDescriptor(14)
    };
    proto.isXboxOnlinePresenceBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(15)
    };
    proto.traceXboxOnlinePresenceBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(15)
    };
    proto.isXboxOnlinePresenceReceivedEnabled = function() {
        return !!providerTemplates.eventEnabled(16)
    };
    proto.traceXboxOnlinePresenceReceived = function(titleId, mediaAssetId) {
        providerTemplates.traceTemplate_qz(16, titleId, mediaAssetId)
    };
    proto.isXboxOnlinePresenceErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(17)
    };
    proto.traceXboxOnlinePresenceError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(17, hResult, errorMessage)
    };
    proto.isXboxGetActiveTitleInformationBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(18)
    };
    proto.traceXboxGetActiveTitleInformationBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(18)
    };
    proto.isXboxGetActiveTitleInformationDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(19)
    };
    proto.traceXboxGetActiveTitleInformationDone = function() {
        providerTemplates.traceTemplateEventDescriptor(19)
    };
    proto.isXboxGetActiveTitleInformationErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(20)
    };
    proto.traceXboxGetActiveTitleInformationError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(20, hResult, errorMessage)
    };
    proto.isXboxEstablishTitleChannelBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(21)
    };
    proto.traceXboxEstablishTitleChannelBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(21)
    };
    proto.isXboxEstablishTitleChannelDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(22)
    };
    proto.traceXboxEstablishTitleChannelDone = function() {
        providerTemplates.traceTemplateEventDescriptor(22)
    };
    proto.isXboxEstablishTitleChannelErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(23)
    };
    proto.traceXboxEstablishTitleChannelError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(23, hResult, errorMessage)
    };
    proto.isXboxSendTouchPointsBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(24)
    };
    proto.traceXboxSendTouchPointsBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(24)
    };
    proto.isXboxSendTouchPointsDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(25)
    };
    proto.traceXboxSendTouchPointsDone = function() {
        providerTemplates.traceTemplateEventDescriptor(25)
    };
    proto.isXboxSendTouchPointsErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(26)
    };
    proto.traceXboxSendTouchPointsError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(26, hResult, errorMessage)
    };
    proto.isXboxGetKeyboardBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(27)
    };
    proto.traceXboxGetKeyboardBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(27)
    };
    proto.isXboxGetKeyboardDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(28)
    };
    proto.traceXboxGetKeyboardDone = function() {
        providerTemplates.traceTemplateEventDescriptor(28)
    };
    proto.isXboxGetKeyboardErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(29)
    };
    proto.traceXboxGetKeyboardError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(29, hResult, errorMessage)
    };
    proto.isXboxGetKeyboardStateBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(30)
    };
    proto.traceXboxGetKeyboardStateBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(30)
    };
    proto.isXboxGetKeyboardStateDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(31)
    };
    proto.traceXboxGetKeyboardStateDone = function() {
        providerTemplates.traceTemplateEventDescriptor(31)
    };
    proto.isXboxGetKeyboardStateErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(32)
    };
    proto.traceXboxGetKeyboardStateError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(32, hResult, errorMessage)
    };
    proto.isXboxGetKeyboardTextBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(33)
    };
    proto.traceXboxGetKeyboardTextBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(33)
    };
    proto.isXboxGetKeyboardTextDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(34)
    };
    proto.traceXboxGetKeyboardTextDone = function() {
        providerTemplates.traceTemplateEventDescriptor(34)
    };
    proto.isXboxGetKeyboardTextErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(35)
    };
    proto.traceXboxGetKeyboardTextError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(35, hResult, errorMessage)
    };
    proto.isXboxSetKeyboardTextBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(36)
    };
    proto.traceXboxSetKeyboardTextBegin = function(text) {
        providerTemplates.traceTemplate_z(36, text)
    };
    proto.isXboxSetKeyboardTextDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(37)
    };
    proto.traceXboxSetKeyboardTextDone = function() {
        providerTemplates.traceTemplateEventDescriptor(37)
    };
    proto.isXboxSetKeyboardTextErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(38)
    };
    proto.traceXboxSetKeyboardTextError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(38, hResult, errorMessage)
    };
    proto.isXboxSetKeyboardTextAndSelectionBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(39)
    };
    proto.traceXboxSetKeyboardTextAndSelectionBegin = function(text, selectionStart, selectionLength) {
        providerTemplates.traceTemplate_zqq(39, text, selectionStart, selectionLength)
    };
    proto.isXboxSetKeyboardTextAndSelectionDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(40)
    };
    proto.traceXboxSetKeyboardTextAndSelectionDone = function() {
        providerTemplates.traceTemplateEventDescriptor(40)
    };
    proto.isXboxSetKeyboardTextAndSelectionErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(41)
    };
    proto.traceXboxSetKeyboardTextAndSelectionError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(41, hResult, errorMessage)
    };
    proto.isXboxSendTitleMessageBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(42)
    };
    proto.traceXboxSendTitleMessageBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(42)
    };
    proto.isXboxSendTitleMessageDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(43)
    };
    proto.traceXboxSendTitleMessageDone = function() {
        providerTemplates.traceTemplateEventDescriptor(43)
    };
    proto.isXboxSendTitleMessageErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(44)
    };
    proto.traceXboxSendTitleMessageError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(44, hResult, errorMessage)
    };
    proto.isXboxDisconnectSessionBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(45)
    };
    proto.traceXboxDisconnectSessionBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(45)
    };
    proto.isXboxDisconnectSessionDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(46)
    };
    proto.traceXboxDisconnectSessionDone = function() {
        providerTemplates.traceTemplateEventDescriptor(46)
    };
    proto.isXboxDisconnectSessionErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(47)
    };
    proto.traceXboxDisconnectSessionError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(47, hResult, errorMessage)
    };
    proto.isXboxNewSessionObjectAssignedEnabled = function() {
        return !!providerTemplates.eventEnabled(48)
    };
    proto.traceXboxNewSessionObjectAssigned = function() {
        providerTemplates.traceTemplateEventDescriptor(48)
    };
    proto.isXboxSessionObjectReassignedEnabled = function() {
        return !!providerTemplates.eventEnabled(49)
    };
    proto.traceXboxSessionObjectReassigned = function() {
        providerTemplates.traceTemplateEventDescriptor(49)
    };
    proto.isXboxSessionObjectResetToNullEnabled = function() {
        return !!providerTemplates.eventEnabled(50)
    };
    proto.traceXboxSessionObjectResetToNull = function() {
        providerTemplates.traceTemplateEventDescriptor(50)
    };
    proto.isXboxTitleChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(51)
    };
    proto.traceXboxTitleChanged = function(titleId) {
        providerTemplates.traceTemplate_q(51, titleId)
    };
    proto.isXboxTitleMessagingConfigChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(52)
    };
    proto.traceXboxTitleMessagingConfigChanged = function(titleId, titlePort, enabled) {
        providerTemplates.traceTemplate_qqt(52, titleId, titlePort, enabled)
    };
    proto.isXboxTitleChannelStatusChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(53)
    };
    proto.traceXboxTitleChannelStatusChanged = function(status, titleId, titlePort, hResult) {
        providerTemplates.traceTemplate_qqqd(53, status, titleId, titlePort, hResult)
    };
    proto.isXboxStreamingModeChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(54)
    };
    proto.traceXboxStreamingModeChanged = function(clientExclusiveModeStatus, consoleExclusiveModeStatus) {
        providerTemplates.traceTemplate_qq(54, clientExclusiveModeStatus, consoleExclusiveModeStatus)
    };
    proto.isXboxLocalTransportStateChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(55)
    };
    proto.traceXboxLocalTransportStateChanged = function(localTransportConnected) {
        providerTemplates.traceTemplate_t(55, localTransportConnected)
    };
    proto.isXboxSessionStatusChangedEnabled = function() {
        return !!providerTemplates.eventEnabled(56)
    };
    proto.traceXboxSessionStatusChanged = function(sessionState) {
        providerTemplates.traceTemplate_q(56, sessionState)
    };
    proto.isXboxAcquireExclusiveModeBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(57)
    };
    proto.traceXboxAcquireExclusiveModeBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(57)
    };
    proto.isXboxAcquireExclusiveModeDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(58)
    };
    proto.traceXboxAcquireExclusiveModeDone = function() {
        providerTemplates.traceTemplateEventDescriptor(58)
    };
    proto.isXboxAcquireExclusiveModeErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(59)
    };
    proto.traceXboxAcquireExclusiveModeError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(59, hResult, errorMessage)
    };
    proto.isXboxHeartBeatPingErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(60)
    };
    proto.traceXboxHeartBeatPingError = function(hResult, errorMessage, sessionState, isCurrentWinRTSessionReassigned, isCurrentWinRTSessionNull) {
        providerTemplates.traceTemplate_dzztt(60, hResult, errorMessage, sessionState, isCurrentWinRTSessionReassigned, isCurrentWinRTSessionNull)
    };
    proto.isXboxSessionConnectCallEnabled = function() {
        return !!providerTemplates.eventEnabled(61)
    };
    proto.traceXboxSessionConnectCall = function(sessionState, isRetry) {
        providerTemplates.traceTemplate_zt(61, sessionState, isRetry)
    };
    proto.isXboxLaunchTitleCallEnabled = function() {
        return !!providerTemplates.eventEnabled(62)
    };
    proto.traceXboxLaunchTitleCall = function(titleId, startTimeMilliseconds, firstAction) {
        providerTemplates.traceTemplate_qfz(62, titleId, startTimeMilliseconds, firstAction)
    };
    proto.isXboxReleaseExclusiveModeBeginEnabled = function() {
        return !!providerTemplates.eventEnabled(63)
    };
    proto.traceXboxReleaseExclusiveModeBegin = function() {
        providerTemplates.traceTemplateEventDescriptor(63)
    };
    proto.isXboxReleaseExclusiveModeDoneEnabled = function() {
        return !!providerTemplates.eventEnabled(64)
    };
    proto.traceXboxReleaseExclusiveModeDone = function() {
        providerTemplates.traceTemplateEventDescriptor(64)
    };
    proto.isXboxReleaseExclusiveModeErrorEnabled = function() {
        return !!providerTemplates.eventEnabled(65)
    };
    proto.traceXboxReleaseExclusiveModeError = function(hResult, errorMessage) {
        providerTemplates.traceTemplate_dz(65, hResult, errorMessage)
    }
})(this);
(function initMicrosoft_Zune_Providers(global) {
    var providerTemplates = null;
    var ns = global;
    if (ns.Diagnostics === undefined)
        ns.Diagnostics = {};
    var ns = ns.Diagnostics;
    if (ns.Tracing === undefined)
        ns.Tracing = {};
    var ns = ns.Tracing;
    if (ns.Microsoft === undefined)
        ns.Microsoft = {};
    var ns = ns.Microsoft;
    if (ns.Entertainment === undefined)
        ns.Entertainment = {};
    var ns = ns.Entertainment;
    if (ns.Instrumentation === undefined)
        ns.Instrumentation = {};
    var ns = ns.Instrumentation;
    if (ns.Providers === undefined)
        ns.Providers = {};
    var ns = ns.Providers;
    ns.Providers = function() {
        if (providerTemplates === null)
            providerTemplates = new global.Microsoft.Entertainment.Instrumentation.Providers.ProvidersTemplate
    };
    var proto = ns.Providers.prototype;
    proto.isAddMediaStartEnabled = function() {
        return !!providerTemplates.eventEnabled(0)
    };
    proto.traceAddMediaStart = function() {
        providerTemplates.traceTemplateEventDescriptor(0)
    };
    proto.isAddMediaEndEnabled = function() {
        return !!providerTemplates.eventEnabled(1)
    };
    proto.traceAddMediaEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(1)
    };
    proto.isAddTrackStartEnabled = function() {
        return !!providerTemplates.eventEnabled(2)
    };
    proto.traceAddTrackStart = function() {
        providerTemplates.traceTemplateEventDescriptor(2)
    };
    proto.isAddTrackEndEnabled = function() {
        return !!providerTemplates.eventEnabled(3)
    };
    proto.traceAddTrackEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(3)
    };
    proto.isAddAlbumAndFindTrackIdStartEnabled = function() {
        return !!providerTemplates.eventEnabled(4)
    };
    proto.traceAddAlbumAndFindTrackIdStart = function() {
        providerTemplates.traceTemplateEventDescriptor(4)
    };
    proto.isAddAlbumAndFindTrackIdEndEnabled = function() {
        return !!providerTemplates.eventEnabled(5)
    };
    proto.traceAddAlbumAndFindTrackIdEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(5)
    };
    proto.isFindTrackIdAndAlbumBasedOnTrackSmidStartEnabled = function() {
        return !!providerTemplates.eventEnabled(6)
    };
    proto.traceFindTrackIdAndAlbumBasedOnTrackSmidStart = function() {
        providerTemplates.traceTemplateEventDescriptor(6)
    };
    proto.isFindTrackIdAndAlbumBasedOnTrackSmidEndEnabled = function() {
        return !!providerTemplates.eventEnabled(7)
    };
    proto.traceFindTrackIdAndAlbumBasedOnTrackSmidEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(7)
    };
    proto.isAddAlbumAndFindTrackIdBasedOnMetadataStartEnabled = function() {
        return !!providerTemplates.eventEnabled(8)
    };
    proto.traceAddAlbumAndFindTrackIdBasedOnMetadataStart = function() {
        providerTemplates.traceTemplateEventDescriptor(8)
    };
    proto.isAddAlbumAndFindTrackIdBasedOnMetadataEndEnabled = function() {
        return !!providerTemplates.eventEnabled(9)
    };
    proto.traceAddAlbumAndFindTrackIdBasedOnMetadataEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(9)
    };
    proto.isAddAudioAlbumStartEnabled = function() {
        return !!providerTemplates.eventEnabled(10)
    };
    proto.traceAddAudioAlbumStart = function() {
        providerTemplates.traceTemplateEventDescriptor(10)
    };
    proto.isAddAudioAlbumEndEnabled = function() {
        return !!providerTemplates.eventEnabled(11)
    };
    proto.traceAddAudioAlbumEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(11)
    };
    proto.isFindArtistAndAlbumStartEnabled = function() {
        return !!providerTemplates.eventEnabled(12)
    };
    proto.traceFindArtistAndAlbumStart = function() {
        providerTemplates.traceTemplateEventDescriptor(12)
    };
    proto.isFindArtistAndAlbumEndEnabled = function() {
        return !!providerTemplates.eventEnabled(13)
    };
    proto.traceFindArtistAndAlbumEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(13)
    };
    proto.isUpdateCurrentAudioAlbumStartEnabled = function() {
        return !!providerTemplates.eventEnabled(14)
    };
    proto.traceUpdateCurrentAudioAlbumStart = function() {
        providerTemplates.traceTemplateEventDescriptor(14)
    };
    proto.isUpdateCurrentAudioAlbumEndEnabled = function() {
        return !!providerTemplates.eventEnabled(15)
    };
    proto.traceUpdateCurrentAudioAlbumEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(15)
    };
    proto.isAddPersonLinksStartEnabled = function() {
        return !!providerTemplates.eventEnabled(16)
    };
    proto.traceAddPersonLinksStart = function() {
        providerTemplates.traceTemplateEventDescriptor(16)
    };
    proto.isAddPersonLinksEndEnabled = function() {
        return !!providerTemplates.eventEnabled(17)
    };
    proto.traceAddPersonLinksEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(17)
    };
    proto.isAddPersonStartEnabled = function() {
        return !!providerTemplates.eventEnabled(18)
    };
    proto.traceAddPersonStart = function() {
        providerTemplates.traceTemplateEventDescriptor(18)
    };
    proto.isAddPersonEndEnabled = function() {
        return !!providerTemplates.eventEnabled(19)
    };
    proto.traceAddPersonEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(19)
    };
    proto.isAddPersonLinkStartEnabled = function() {
        return !!providerTemplates.eventEnabled(20)
    };
    proto.traceAddPersonLinkStart = function() {
        providerTemplates.traceTemplateEventDescriptor(20)
    };
    proto.isAddPersonLinkEndEnabled = function() {
        return !!providerTemplates.eventEnabled(21)
    };
    proto.traceAddPersonLinkEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(21)
    };
    proto.isFindAndGetAudioTrackStartEnabled = function() {
        return !!providerTemplates.eventEnabled(22)
    };
    proto.traceFindAndGetAudioTrackStart = function() {
        providerTemplates.traceTemplateEventDescriptor(22)
    };
    proto.isFindAndGetAudioTrackEndEnabled = function() {
        return !!providerTemplates.eventEnabled(23)
    };
    proto.traceFindAndGetAudioTrackEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(23)
    };
    proto.isUpdateCurrentTrackStartEnabled = function() {
        return !!providerTemplates.eventEnabled(24)
    };
    proto.traceUpdateCurrentTrackStart = function() {
        providerTemplates.traceTemplateEventDescriptor(24)
    };
    proto.isUpdateCurrentTrackEndEnabled = function() {
        return !!providerTemplates.eventEnabled(25)
    };
    proto.traceUpdateCurrentTrackEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(25)
    };
    proto.isRecomputeAlbumReleaseYearStartEnabled = function() {
        return !!providerTemplates.eventEnabled(26)
    };
    proto.traceRecomputeAlbumReleaseYearStart = function() {
        providerTemplates.traceTemplateEventDescriptor(26)
    };
    proto.isRecomputeAlbumReleaseYearEndEnabled = function() {
        return !!providerTemplates.eventEnabled(27)
    };
    proto.traceRecomputeAlbumReleaseYearEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(27)
    };
    proto.isAddTrackFileStartEnabled = function() {
        return !!providerTemplates.eventEnabled(28)
    };
    proto.traceAddTrackFileStart = function() {
        providerTemplates.traceTemplateEventDescriptor(28)
    };
    proto.isAddTrackFileEndEnabled = function() {
        return !!providerTemplates.eventEnabled(29)
    };
    proto.traceAddTrackFileEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(29)
    };
    proto.isReflectTrackFilesStateStartEnabled = function() {
        return !!providerTemplates.eventEnabled(30)
    };
    proto.traceReflectTrackFilesStateStart = function() {
        providerTemplates.traceTemplateEventDescriptor(30)
    };
    proto.isReflectTrackFilesStateEndEnabled = function() {
        return !!providerTemplates.eventEnabled(31)
    };
    proto.traceReflectTrackFilesStateEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(31)
    };
    proto.isAddFileStartEnabled = function() {
        return !!providerTemplates.eventEnabled(32)
    };
    proto.traceAddFileStart = function() {
        providerTemplates.traceTemplateEventDescriptor(32)
    };
    proto.isAddFileEndEnabled = function() {
        return !!providerTemplates.eventEnabled(33)
    };
    proto.traceAddFileEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(33)
    };
    proto.isUpdateFileStartEnabled = function() {
        return !!providerTemplates.eventEnabled(34)
    };
    proto.traceUpdateFileStart = function() {
        providerTemplates.traceTemplateEventDescriptor(34)
    };
    proto.isUpdateFileEndEnabled = function() {
        return !!providerTemplates.eventEnabled(35)
    };
    proto.traceUpdateFileEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(35)
    };
    proto.isAddFolderStartEnabled = function() {
        return !!providerTemplates.eventEnabled(36)
    };
    proto.traceAddFolderStart = function() {
        providerTemplates.traceTemplateEventDescriptor(36)
    };
    proto.isAddFolderEndEnabled = function() {
        return !!providerTemplates.eventEnabled(37)
    };
    proto.traceAddFolderEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(37)
    };
    proto.isUpdatePlaylistContentsStartEnabled = function() {
        return !!providerTemplates.eventEnabled(38)
    };
    proto.traceUpdatePlaylistContentsStart = function() {
        providerTemplates.traceTemplateEventDescriptor(38)
    };
    proto.isUpdatePlaylistContentsEndEnabled = function() {
        return !!providerTemplates.eventEnabled(39)
    };
    proto.traceUpdatePlaylistContentsEnd = function() {
        providerTemplates.traceTemplateEventDescriptor(39)
    };
    proto.isFoundTrackBySmidEnabled = function() {
        return !!providerTemplates.eventEnabled(40)
    };
    proto.traceFoundTrackBySmid = function() {
        providerTemplates.traceTemplateEventDescriptor(40)
    };
    proto.isFoundTrackAndAlbumEnabled = function() {
        return !!providerTemplates.eventEnabled(41)
    };
    proto.traceFoundTrackAndAlbum = function(albumId, artistId, trackId) {
        providerTemplates.traceTemplate_qqq(41, albumId, artistId, trackId)
    };
    proto.isPromotingTrackArtistEnabled = function() {
        return !!providerTemplates.eventEnabled(42)
    };
    proto.tracePromotingTrackArtist = function(albumTitle) {
        providerTemplates.traceTemplate_z(42, albumTitle)
    };
    proto.isAlbumAsVariousArtistsEnabled = function() {
        return !!providerTemplates.eventEnabled(43)
    };
    proto.traceAlbumAsVariousArtists = function() {
        providerTemplates.traceTemplateEventDescriptor(43)
    };
    proto.isAddingAlbumEnabled = function() {
        return !!providerTemplates.eventEnabled(44)
    };
    proto.traceAddingAlbum = function(albumName) {
        providerTemplates.traceTemplate_z(44, albumName)
    };
    proto.isAddAlbumWithTitleArtistEnabled = function() {
        return !!providerTemplates.eventEnabled(45)
    };
    proto.traceAddAlbumWithTitleArtist = function(albumTitle, artistId) {
        providerTemplates.traceTemplate_zq(45, albumTitle, artistId)
    };
    proto.isUpdatingAlbumEnabled = function() {
        return !!providerTemplates.eventEnabled(46)
    };
    proto.traceUpdatingAlbum = function() {
        providerTemplates.traceTemplateEventDescriptor(46)
    };
    proto.isAddingPersonEnabled = function() {
        return !!providerTemplates.eventEnabled(47)
    };
    proto.traceAddingPerson = function(personName) {
        providerTemplates.traceTemplate_z(47, personName)
    };
    proto.isUpdatingPersonEnabled = function() {
        return !!providerTemplates.eventEnabled(48)
    };
    proto.traceUpdatingPerson = function(personName) {
        providerTemplates.traceTemplate_z(48, personName)
    };
    proto.isAddingPersonLinkEnabled = function() {
        return !!providerTemplates.eventEnabled(49)
    };
    proto.traceAddingPersonLink = function(personId, mediaId) {
        providerTemplates.traceTemplate_qq(49, personId, mediaId)
    };
    proto.isAddingTrackEntryEnabled = function() {
        return !!providerTemplates.eventEnabled(50)
    };
    proto.traceAddingTrackEntry = function(albumId, trackTitle, trackNumber) {
        providerTemplates.traceTemplate_qzq(50, albumId, trackTitle, trackNumber)
    };
    proto.isTrackIsAudioBookEnabled = function() {
        return !!providerTemplates.eventEnabled(51)
    };
    proto.traceTrackIsAudioBook = function() {
        providerTemplates.traceTemplateEventDescriptor(51)
    };
    proto.isFoundExistingTrackEnabled = function() {
        return !!providerTemplates.eventEnabled(52)
    };
    proto.traceFoundExistingTrack = function(trackId) {
        providerTemplates.traceTemplate_q(52, trackId)
    };
    proto.isAddingUnknownArtistEnabled = function() {
        return !!providerTemplates.eventEnabled(53)
    };
    proto.traceAddingUnknownArtist = function() {
        providerTemplates.traceTemplateEventDescriptor(53)
    };
    proto.isUpdateAlbumSetGenreEnabled = function() {
        return !!providerTemplates.eventEnabled(54)
    };
    proto.traceUpdateAlbumSetGenre = function(genreId) {
        providerTemplates.traceTemplate_q(54, genreId)
    };
    proto.isSetUnknownGenreEnabled = function() {
        return !!providerTemplates.eventEnabled(55)
    };
    proto.traceSetUnknownGenre = function() {
        providerTemplates.traceTemplateEventDescriptor(55)
    };
    proto.isAddingTrackEnabled = function() {
        return !!providerTemplates.eventEnabled(56)
    };
    proto.traceAddingTrack = function(trackName) {
        providerTemplates.traceTemplate_z(56, trackName)
    };
    proto.isUpdatingTrackEnabled = function() {
        return !!providerTemplates.eventEnabled(57)
    };
    proto.traceUpdatingTrack = function(trackName) {
        providerTemplates.traceTemplate_z(57, trackName)
    };
    proto.isSetTrackRatingFromFileEnabled = function() {
        return !!providerTemplates.eventEnabled(58)
    };
    proto.traceSetTrackRatingFromFile = function(trackTitle, rating) {
        providerTemplates.traceTemplate_zq(58, trackTitle, rating)
    };
    proto.isSplitExistingFileEnabled = function() {
        return !!providerTemplates.eventEnabled(59)
    };
    proto.traceSplitExistingFile = function(oldTrackId, newTrackId) {
        providerTemplates.traceTemplate_qq(59, oldTrackId, newTrackId)
    };
    proto.isAddingFolderEnabled = function() {
        return !!providerTemplates.eventEnabled(60)
    };
    proto.traceAddingFolder = function(folderPath) {
        providerTemplates.traceTemplate_z(60, folderPath)
    };
    proto.isAddingFileEnabled = function() {
        return !!providerTemplates.eventEnabled(61)
    };
    proto.traceAddingFile = function(filename) {
        providerTemplates.traceTemplate_z(61, filename)
    };
    proto.isUpdatingFileEnabled = function() {
        return !!providerTemplates.eventEnabled(62)
    };
    proto.traceUpdatingFile = function(filename) {
        providerTemplates.traceTemplate_z(62, filename)
    };
    proto.isUpdatingFileCountsEnabled = function() {
        return !!providerTemplates.eventEnabled(63)
    };
    proto.traceUpdatingFileCounts = function() {
        providerTemplates.traceTemplateEventDescriptor(63)
    };
    proto.isUpdateOldAlbumVisibilityEnabled = function() {
        return !!providerTemplates.eventEnabled(64)
    };
    proto.traceUpdateOldAlbumVisibility = function(albumId) {
        providerTemplates.traceTemplate_q(64, albumId)
    };
    proto.isUpdateAlbumVisibilityEnabled = function() {
        return !!providerTemplates.eventEnabled(65)
    };
    proto.traceUpdateAlbumVisibility = function(albumId) {
        providerTemplates.traceTemplate_q(65, albumId)
    };
    proto.isUpdatingTrackAcquisitionDateEnabled = function() {
        return !!providerTemplates.eventEnabled(66)
    };
    proto.traceUpdatingTrackAcquisitionDate = function(trackId) {
        providerTemplates.traceTemplate_q(66, trackId)
    };
    proto.isUpdatingAlbumAcquisitionDateEnabled = function() {
        return !!providerTemplates.eventEnabled(67)
    };
    proto.traceUpdatingAlbumAcquisitionDate = function(albumId) {
        providerTemplates.traceTemplate_q(67, albumId)
    };
    proto.isUpdatingPlaylistItemWithMediaIdEnabled = function() {
        return !!providerTemplates.eventEnabled(68)
    };
    proto.traceUpdatingPlaylistItemWithMediaId = function(playlistContentId, mediaId) {
        providerTemplates.traceTemplate_qq(68, playlistContentId, mediaId)
    }
})(this)
})();
/* >>>>>>/components/perftrack/perftrack.js:4522 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.Instrumentation", {PerfTrack: WinJS.Class.define(null, {}, {
            triggerLog: [], StartPoints: {
                    AppLaunch: "AppLaunch", PlayCommand: "PlayCommand", CollectionGalleryRequest: "CollectionGalleryRequest", SearchGalleryRequest: "SearchGalleryRequest", PopoverRequest: "PopoverRequest", MarketplaceGalleryRequest: "MarketplaceGalleryRequest", WebBlendRequest: "WebBlendRequest", ExplorePageRequest: "ExplorePageRequest", RadioPageRequest: "RadioPageRequest", TVDetailsRequest: "TVDetailsRequest", MovieDetailsRequest: "MovieDetailsRequest", AlbumDetailsRequest: "AlbumDetailsRequest", ArtistDetailsRequest: "ArtistDetailsRequest", PlaylistDetailsRequest: "PlaylistDetailsRequest", DevicesPageRequest: "DevicesPageRequest", NowPlayingPageRequest: "NowPlayingPageRequest", MoviesStorePageRequest: "MoviesStorePageRequest", TvStorePageRequest: "TvStorePageRequest", VideoCollectionPageRequest: "VideoCollectionPageRequest", ShopBooksPageRequest: "ShopBooksPageRequest", ShopMagsPageRequest: "ShopMagsPageRequest", CategoryGalleryRequest: "CategoryGalleryRequest", IssuesGalleryRequest: "IssuesGalleryRequest", StandardGalleryRequest: "StandardGalleryRequest", BookDetailsRequest: "BookDetailsRequest", MagDetailsRequest: "MagDetailsRequest", SearchLibraryRequest: "SearchLibraryRequest", SearchCatalogRequest: "SearchCatalogRequest", SearchAutoCompleteRequest: "SearchAutoCompleteRequest", BNDeviceRegistrationRequest: "BNDeviceRegistrationRequest", BNLoginRequest: "BNLoginRequest", AppLaunchToMoviesStore: "AppLaunchToMoviesStore", AppLaunchToTvStore: "AppLaunchToTvStore", AppLaunchToVideoCollection: "AppLaunchToVideoCollection", MoviesCollectionPageRequest: "MoviesCollectionPageRequest", PersonalCollectionPageRequest: "PersonalCollectionPageRequest", FeaturedMoviesPageRequest: "FeaturedMoviesPageRequest", NewMoviesPageRequest: "NewMoviesPageRequest", TopSellingMoviesPageRequest: "TopSellingMoviesPageRequest", FeaturedTvPageRequest: "FeaturedTvPageRequest", NewTvPageRequest: "NewTvPageRequest", LastNightsTvPageRequest: "LastNightsTvPageRequest", TopSellingTvPageRequest: "TopSellingTvPageRequest", FlexHubPageRequest: "FlexHubPageRequest", TvCollectionPageRequest: "TvCollectionPageRequest"
                }, logTrigger: function logTrigger(scenarioName) {
                    var text = scenarioName;
                    for (var i = 1; i < arguments.length; i++)
                        text += "\t" + arguments[i];
                    MS.Entertainment.Instrumentation.PerfTrack.triggerLog.push(text)
                }, getLogger: (function _perfTrack_getLoggerClosure() {
                    var logger = null;
                    return function _perfTrack_getLoggerWorker() {
                            if (!logger)
                                logger = new Microsoft.PerfTrack.PerfTrackLogger(Microsoft.PerfTrack.PerfTrackLogger.windowsDataUploadEnabled);
                            return logger
                        }
                })(), _truncateString: function _perfTrack_truncateString(s) {
                    var result = s;
                    if (result && typeof(result) === "string" && result.length > 120)
                        result = result.substr(0, 120) + "[...]";
                    return result
                }, _getState: (function _perfTrack_getStateClosure() {
                    var startedScenarios = {};
                    var fireOnceScenarios = {};
                    var disabledScenarios = {};
                    var disabledScenariosByDefault = {};
                    var startTimes = {};
                    var applicationStartTime = null;
                    disabledScenariosByDefault[1318] = true;
                    disabledScenariosByDefault[1319] = true;
                    disabledScenariosByDefault[1320] = true;
                    disabledScenariosByDefault[1321] = true;
                    disabledScenariosByDefault[1322] = true;
                    disabledScenariosByDefault[1712] = true;
                    disabledScenariosByDefault[1713] = true;
                    disabledScenariosByDefault[1711] = true;
                    disabledScenariosByDefault[1582] = true;
                    disabledScenariosByDefault[1583] = true;
                    disabledScenariosByDefault[1591] = true;
                    disabledScenariosByDefault[1592] = true;
                    disabledScenariosByDefault[1593] = true;
                    var actions = {
                            isStarted: function _perfTrack_getState_isStarted(scenarioId, matchKey) {
                                var result = true;
                                var result = startedScenarios.hasOwnProperty(scenarioId);
                                if (result && (matchKey !== undefined))
                                    result = startedScenarios[scenarioId].hasOwnProperty(matchKey);
                                return result
                            }, onBegin: function _perfTrack_getState_onBegin(scenarioId, matchKey) {
                                    if (!startedScenarios[scenarioId])
                                        startedScenarios[scenarioId] = {};
                                    if (matchKey !== undefined)
                                        startedScenarios[scenarioId][matchKey] = true
                                }, onEnd: function _perfTrack_getState_onEnd(scenarioId, matchKey) {
                                    if (matchKey !== undefined) {
                                        if (startedScenarios[scenarioId])
                                            delete startedScenarios[scenarioId][matchKey]
                                    }
                                    else
                                        delete startedScenarios[scenarioId]
                                }, isFiredOnce: function _perfTrack_getState_isFiredOnce(scenarioId, matchKey) {
                                    var result = true;
                                    var result = fireOnceScenarios.hasOwnProperty(scenarioId);
                                    if (result && (matchKey !== undefined))
                                        result = fireOnceScenarios[scenarioId].hasOwnProperty(matchKey);
                                    return result
                                }, onFiredOnce: function _perfTrack_getState_onFiredOnce(scenarioId, matchKey) {
                                    if (matchKey !== undefined) {
                                        if (!fireOnceScenarios[scenarioId])
                                            fireOnceScenarios[scenarioId] = {};
                                        fireOnceScenarios[scenarioId][matchKey] = true
                                    }
                                    else
                                        fireOnceScenarios[scenarioId] = true
                                }, isDisabled: function _perfTrack_getState_isDisabled(scenarioId, matchKey) {
                                    var result = null;
                                    if (matchKey !== undefined) {
                                        if (disabledScenarios[scenarioId])
                                            result = disabledScenarios[scenarioId][matchKey]
                                    }
                                    else
                                        result = disabledScenarios[scenarioId];
                                    if (result === null || result === undefined)
                                        result = (disabledScenariosByDefault[scenarioId] || false);
                                    return result
                                }, disableScenario: function _perfTrack_getState_disableScenario(scenarioId, matchKey) {
                                    if (matchKey !== undefined) {
                                        if (!disabledScenarios[scenarioId])
                                            disabledScenarios[scenarioId] = {};
                                        disabledScenarios[scenarioId][matchKey] = true
                                    }
                                    else
                                        disabledScenarios[scenarioId] = true
                                }, enableScenario: function _perfTrack_getState_enableScenario(scenarioId, matchKey) {
                                    if (matchKey !== undefined) {
                                        if (!disabledScenarios[scenarioId])
                                            disabledScenarios[scenarioId] = {};
                                        disabledScenarios[scenarioId][matchKey] = false
                                    }
                                    else
                                        disabledScenarios[scenarioId] = false
                                }, cleanupDynamicEnabledDisabledFlag: function _perfTrack_getState_cleanupDynamicEnabledDisabledFlag(scenarioId, matchKey) {
                                    if (matchKey !== undefined) {
                                        if (disabledScenarios[scenarioId])
                                            delete disabledScenarios[scenarioId][matchKey]
                                    }
                                    else
                                        delete disabledScenarios[scenarioId]
                                }, setStartTime: function _perfTrack_getState_setStartTime(startPoint, matchKey) {
                                    if (startPoint)
                                        if (matchKey !== undefined) {
                                            if (!startTimes[startPoint])
                                                startTimes[startPoint] = {};
                                            startTimes[startPoint][matchKey] = new Date
                                        }
                                        else
                                            startTimes[startPoint] = new Date
                                }, deleteStartTime: function _perfTrack_getState_deleteStartTime(startPoint, matchKey) {
                                    if (startPoint)
                                        if (matchKey !== undefined) {
                                            if (startTimes[startPoint])
                                                delete startTimes[startPoint][matchKey]
                                        }
                                        else
                                            delete startTimes[startPoint]
                                }, getStartTime: function _perfTrack_getState_getStartTime(startPoint, matchKey) {
                                    var result = null;
                                    if (startPoint) {
                                        if (matchKey !== undefined) {
                                            if (startTimes[startPoint])
                                                result = startTimes[startPoint][matchKey]
                                        }
                                        else
                                            result = startTimes[startPoint];
                                        if (!result)
                                            if (startPoint === "AppLaunch")
                                                if (applicationStartTime)
                                                    result = applicationStartTime;
                                                else if (PerfTrack && PerfTrack.LaunchInformation && PerfTrack.LaunchInformation.getStartTime) {
                                                    applicationStartTime = PerfTrack.LaunchInformation.getStartTime();
                                                    result = applicationStartTime
                                                }
                                    }
                                    return result
                                }, resetStartPoints: function _perfTrack_resetStartPoints() {
                                    startTimes = {}
                                }
                        };
                    return function _perfTrack_getStateWorker() {
                            return actions
                        }
                })(), setStartTime: function _perfTrack_setStartTime(startPoint, matchKey) {
                    var state = MS.Entertainment.Instrumentation.PerfTrack._getState();
                    state.setStartTime(startPoint, matchKey)
                }, getStartTime: function _perfTrack_getStartTime(startPoint, matchKey) {
                    var state = MS.Entertainment.Instrumentation.PerfTrack._getState();
                    return state.getStartTime(startPoint, matchKey)
                }, getShellEventProvider: (function _perfTrack_getShellEventProviderClosure() {
                    var eventProvider = null;
                    return function _perfTrack_getShellEventProviderWorker() {
                            if (!eventProvider)
                                eventProvider = new Microsoft.Entertainment.Instrumentation.Providers.Shell;
                            return eventProvider
                        }
                })(), enableScenarioAppLaunch: function _perfTrack_enableScenarioAppLaunch() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1317)
                }, disableScenarioAppLaunch: function _perfTrack_disableScenarioAppLaunch() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1317)
                }, triggerScenarioAppLaunch: function _perfTrack_triggerScenarioAppLaunch(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1317) && !state.isFiredOnce(1317)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchCompleted(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.responsive, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1317, "XBLW-AppLaunch", duration);
                            PT.logTrigger("XBLW-AppLaunch", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1317);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioAppLaunchToCollection: function _perfTrack_enableScenarioAppLaunchToCollection() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1318)
                }, disableScenarioAppLaunchToCollection: function _perfTrack_disableScenarioAppLaunchToCollection() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1318)
                }, triggerScenarioAppLaunchToCollection: function _perfTrack_triggerScenarioAppLaunchToCollection(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1318) && !state.isFiredOnce(1318)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchToCollectionCompleted(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.visibleComplete, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1318, "XBLW-AppLaunchToCollection", duration);
                            PT.logTrigger("XBLW-AppLaunchToCollection", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1318);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioAppLaunchPlayNonProtectedContent: function _perfTrack_enableScenarioAppLaunchPlayNonProtectedContent() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1319)
                }, disableScenarioAppLaunchPlayNonProtectedContent: function _perfTrack_disableScenarioAppLaunchPlayNonProtectedContent() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1319)
                }, triggerScenarioAppLaunchPlayNonProtectedContent: function _perfTrack_triggerScenarioAppLaunchPlayNonProtectedContent(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1319) && !state.isFiredOnce(1319)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchPlayNonProtectedContent(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.responsive, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1319, "XBLW-AppLaunchPlayNonProtectedContent", duration);
                            PT.logTrigger("XBLW-AppLaunchPlayNonProtectedContent", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1319);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioAppLaunchPlayProtectedContent: function _perfTrack_enableScenarioAppLaunchPlayProtectedContent() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1320)
                }, disableScenarioAppLaunchPlayProtectedContent: function _perfTrack_disableScenarioAppLaunchPlayProtectedContent() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1320)
                }, triggerScenarioAppLaunchPlayProtectedContent: function _perfTrack_triggerScenarioAppLaunchPlayProtectedContent(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1320) && !state.isFiredOnce(1320)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchPlayProtectedContent(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.responsive, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1320, "XBLW-AppLaunchPlayProtectedContent", duration);
                            PT.logTrigger("XBLW-AppLaunchPlayProtectedContent", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1320);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioPlayProtectedInApp: function _perfTrack_enableScenarioPlayProtectedInApp() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1321)
                }, disableScenarioPlayProtectedInApp: function _perfTrack_disableScenarioPlayProtectedInApp() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1321)
                }, triggerScenarioPlayProtectedInApp: function _perfTrack_triggerScenarioPlayProtectedInApp(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1321)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("PlayCommand");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_PlayProtectedInAppPlaybackStarted(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1321, "XBLW-PlayProtectedInApp", duration);
                                PT.logTrigger("XBLW-PlayProtectedInApp", DurationMsec)
                            }
                            state.deleteStartTime("PlayCommand")
                        }
                    }
                }, enableScenarioPlayNonProtectedInApp: function _perfTrack_enableScenarioPlayNonProtectedInApp() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1322)
                }, disableScenarioPlayNonProtectedInApp: function _perfTrack_disableScenarioPlayNonProtectedInApp() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1322)
                }, triggerScenarioPlayNonProtectedInApp: function _perfTrack_triggerScenarioPlayNonProtectedInApp(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1322)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("PlayCommand");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_PlayNonProtectedInAppPlaybackStarted(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1322, "XBLW-PlayNonProtectedInApp", duration);
                                PT.logTrigger("XBLW-PlayNonProtectedInApp", DurationMsec)
                            }
                            state.deleteStartTime("PlayCommand")
                        }
                    }
                }, enableScenarioCollectionGalleryRequestToLoad: function _perfTrack_enableScenarioCollectionGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1325)
                }, disableScenarioCollectionGalleryRequestToLoad: function _perfTrack_disableScenarioCollectionGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1325)
                }, triggerScenarioCollectionGalleryRequestToLoad: function _perfTrack_triggerScenarioCollectionGalleryRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1325)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("CollectionGalleryRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_CollectionGalleryRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1325, "XBLW-CollectionGalleryRequestToLoad", duration);
                                PT.logTrigger("XBLW-CollectionGalleryRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("CollectionGalleryRequest")
                        }
                    }
                }, enableScenarioSearchGalleryRequestToLoad: function _perfTrack_enableScenarioSearchGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1326)
                }, disableScenarioSearchGalleryRequestToLoad: function _perfTrack_disableScenarioSearchGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1326)
                }, triggerScenarioSearchGalleryRequestToLoad: function _perfTrack_triggerScenarioSearchGalleryRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1326)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("SearchGalleryRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_SearchGalleryRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1326, "XBLW-SearchGalleryRequestToLoad", duration);
                                PT.logTrigger("XBLW-SearchGalleryRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("SearchGalleryRequest")
                        }
                    }
                }, enableScenarioPopoverRequestToLoad: function _perfTrack_enableScenarioPopoverRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1327)
                }, disableScenarioPopoverRequestToLoad: function _perfTrack_disableScenarioPopoverRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1327)
                }, triggerScenarioPopoverRequestToLoad: function _perfTrack_triggerScenarioPopoverRequestToLoad(name, DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1327)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("PopoverRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_PopoverRequestToLoad(name, DurationMsec);
                                PT.getLogger().writeTriggerEventWithMetadata(1327, "XBLW-PopoverRequestToLoad", duration, 0, 0, 0, 0, 0, PT._truncateString(name), "");
                                PT.logTrigger("XBLW-PopoverRequestToLoad", name, DurationMsec)
                            }
                            state.deleteStartTime("PopoverRequest")
                        }
                    }
                }, enableScenarioMarketplaceGalleryRequestToLoad: function _perfTrack_enableScenarioMarketplaceGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1333)
                }, disableScenarioMarketplaceGalleryRequestToLoad: function _perfTrack_disableScenarioMarketplaceGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1333)
                }, triggerScenarioMarketplaceGalleryRequestToLoad: function _perfTrack_triggerScenarioMarketplaceGalleryRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1333)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("MarketplaceGalleryRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_MarketplaceGalleryRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1333, "XBLW-MarketplaceGalleryRequestToLoad", duration);
                                PT.logTrigger("XBLW-MarketplaceGalleryRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("MarketplaceGalleryRequest")
                        }
                    }
                }, enableScenarioWebBlendRequestToLoad: function _perfTrack_enableScenarioWebBlendRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1339)
                }, disableScenarioWebBlendRequestToLoad: function _perfTrack_disableScenarioWebBlendRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1339)
                }, triggerScenarioWebBlendRequestToLoad: function _perfTrack_triggerScenarioWebBlendRequestToLoad(url, DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1339)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("WebBlendRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_WebBlendRequestToLoad(url, DurationMsec);
                                PT.getLogger().writeTriggerEventWithMetadata(1339, "XBLW-WebBlendRequestToLoad", duration, 0, 0, 0, 0, 0, PT._truncateString(url), "");
                                PT.logTrigger("XBLW-WebBlendRequestToLoad", url, DurationMsec)
                            }
                            state.deleteStartTime("WebBlendRequest")
                        }
                    }
                }, enableScenarioExplorePageRequestToLoad: function _perfTrack_enableScenarioExplorePageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1580)
                }, disableScenarioExplorePageRequestToLoad: function _perfTrack_disableScenarioExplorePageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1580)
                }, triggerScenarioExplorePageRequestToLoad: function _perfTrack_triggerScenarioExplorePageRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1580)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("ExplorePageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_ExplorePageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1580, "XBLW-ExplorePageRequestToLoad", duration);
                                PT.logTrigger("XBLW-ExplorePageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("ExplorePageRequest")
                        }
                    }
                }, enableScenarioRadioPageRequestToLoad: function _perfTrack_enableScenarioRadioPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1581)
                }, disableScenarioRadioPageRequestToLoad: function _perfTrack_disableScenarioRadioPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1581)
                }, triggerScenarioRadioPageRequestToLoad: function _perfTrack_triggerScenarioRadioPageRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1581)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("RadioPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_RadioPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1581, "XBLW-RadioPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-RadioPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("RadioPageRequest")
                        }
                    }
                }, enableScenarioDevicesPageRequestToLoad: function _perfTrack_enableScenarioDevicesPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1674)
                }, disableScenarioDevicesPageRequestToLoad: function _perfTrack_disableScenarioDevicesPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1674)
                }, triggerScenarioDevicesPageRequestToLoad: function _perfTrack_triggerScenarioDevicesPageRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1674)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("DevicesPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_DevicesPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1674, "XBLW-DevicesPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-DevicesPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("DevicesPageRequest")
                        }
                    }
                }, enableScenarioNowPlayingPageRequestToLoad: function _perfTrack_enableScenarioNowPlayingPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1683)
                }, disableScenarioNowPlayingPageRequestToLoad: function _perfTrack_disableScenarioNowPlayingPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1683)
                }, triggerScenarioNowPlayingPageRequestToLoad: function _perfTrack_triggerScenarioNowPlayingPageRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1683)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("NowPlayingPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_NowPlayingPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1683, "XBLW-NowPlayingPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-NowPlayingPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("NowPlayingPageRequest")
                        }
                    }
                }, enableScenarioMoviesStorePageRequestToLoad: function _perfTrack_enableScenarioMoviesStorePageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1701)
                }, disableScenarioMoviesStorePageRequestToLoad: function _perfTrack_disableScenarioMoviesStorePageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1701)
                }, triggerScenarioMoviesStorePageRequestToLoad: function _perfTrack_triggerScenarioMoviesStorePageRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1701)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("MoviesStorePageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_MoviesStorePageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1701, "XBLW-MoviesStorePageRequestToLoad", duration);
                                PT.logTrigger("XBLW-MoviesStorePageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("MoviesStorePageRequest")
                        }
                    }
                }, enableScenarioTvStorePageRequestToLoad: function _perfTrack_enableScenarioTvStorePageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1702)
                }, disableScenarioTvStorePageRequestToLoad: function _perfTrack_disableScenarioTvStorePageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1702)
                }, triggerScenarioTvStorePageRequestToLoad: function _perfTrack_triggerScenarioTvStorePageRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1702)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("TvStorePageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_TvStorePageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1702, "XBLW-TvStorePageRequestToLoad", duration);
                                PT.logTrigger("XBLW-TvStorePageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("TvStorePageRequest")
                        }
                    }
                }, enableScenarioVideoCollectionPageRequestToLoad: function _perfTrack_enableScenarioVideoCollectionPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1703)
                }, disableScenarioVideoCollectionPageRequestToLoad: function _perfTrack_disableScenarioVideoCollectionPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1703)
                }, triggerScenarioVideoCollectionPageRequestToLoad: function _perfTrack_triggerScenarioVideoCollectionPageRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1703)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("VideoCollectionPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_VideoCollectionPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1703, "XBLW-VideoCollectionPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-VideoCollectionPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("VideoCollectionPageRequest")
                        }
                    }
                }, enableScenarioAppLaunchToMoviesStore: function _perfTrack_enableScenarioAppLaunchToMoviesStore() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1712)
                }, disableScenarioAppLaunchToMoviesStore: function _perfTrack_disableScenarioAppLaunchToMoviesStore() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1712)
                }, triggerScenarioAppLaunchToMoviesStore: function _perfTrack_triggerScenarioAppLaunchToMoviesStore(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1712) && !state.isFiredOnce(1712)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchToMoviesStore(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.visibleComplete, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1712, "XBLW-AppLaunchToMoviesStore", duration);
                            PT.logTrigger("XBLW-AppLaunchToMoviesStore", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1712);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioAppLaunchToTvStore: function _perfTrack_enableScenarioAppLaunchToTvStore() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1713)
                }, disableScenarioAppLaunchToTvStore: function _perfTrack_disableScenarioAppLaunchToTvStore() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1713)
                }, triggerScenarioAppLaunchToTvStore: function _perfTrack_triggerScenarioAppLaunchToTvStore(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1713) && !state.isFiredOnce(1713)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchToTvStore(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.visibleComplete, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1713, "XBLW-AppLaunchToTvStore", duration);
                            PT.logTrigger("XBLW-AppLaunchToTvStore", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1713);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioAppLaunchToVideoCollection: function _perfTrack_enableScenarioAppLaunchToVideoCollection() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1711)
                }, disableScenarioAppLaunchToVideoCollection: function _perfTrack_disableScenarioAppLaunchToVideoCollection() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1711)
                }, triggerScenarioAppLaunchToVideoCollection: function _perfTrack_triggerScenarioAppLaunchToVideoCollection(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1711) && !state.isFiredOnce(1711)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchToVideoCollection(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.visibleComplete, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1711, "XBLW-AppLaunchToVideoCollection", duration);
                            PT.logTrigger("XBLW-AppLaunchToVideoCollection", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1711);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioMoviesCollectionPageRequest: function _perfTrack_enableScenarioMoviesCollectionPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1721)
                }, disableScenarioMoviesCollectionPageRequest: function _perfTrack_disableScenarioMoviesCollectionPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1721)
                }, triggerScenarioMoviesCollectionPageRequest: function _perfTrack_triggerScenarioMoviesCollectionPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1721)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("MoviesCollectionPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_MoviesCollectionPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1721, "XBLW-MoviesCollectionPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-MoviesCollectionPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("MoviesCollectionPageRequest")
                        }
                    }
                }, enableScenarioTvCollectionPageRequest: function _perfTrack_enableScenarioTvCollectionPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1722)
                }, disableScenarioTvCollectionPageRequest: function _perfTrack_disableScenarioTvCollectionPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1722)
                }, triggerScenarioTvCollectionPageRequest: function _perfTrack_triggerScenarioTvCollectionPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1722)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("TvCollectionPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_TvCollectionPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1722, "XBLW-TvCollectionPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-TvCollectionPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("TvCollectionPageRequest")
                        }
                    }
                }, enableScenarioPersonalCollectionPageRequest: function _perfTrack_enableScenarioPersonalCollectionPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1723)
                }, disableScenarioPersonalCollectionPageRequest: function _perfTrack_disableScenarioPersonalCollectionPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1723)
                }, triggerScenarioPersonalCollectionPageRequest: function _perfTrack_triggerScenarioPersonalCollectionPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1723)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("PersonalCollectionPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_PersonalCollectionPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1723, "XBLW-PersonalCollectionPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-PersonalCollectionPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("PersonalCollectionPageRequest")
                        }
                    }
                }, enableScenarioFeaturedMoviesPageRequest: function _perfTrack_enableScenarioFeaturedMoviesPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1715)
                }, disableScenarioFeaturedMoviesPageRequest: function _perfTrack_disableScenarioFeaturedMoviesPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1715)
                }, triggerScenarioFeaturedMoviesPageRequest: function _perfTrack_triggerScenarioFeaturedMoviesPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1715)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("FeaturedMoviesPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_FeaturedMoviesPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1715, "XBLW-FeaturedMoviesPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-FeaturedMoviesPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("FeaturedMoviesPageRequest")
                        }
                    }
                }, enableScenarioNewMoviesPageRequest: function _perfTrack_enableScenarioNewMoviesPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1714)
                }, disableScenarioNewMoviesPageRequest: function _perfTrack_disableScenarioNewMoviesPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1714)
                }, triggerScenarioNewMoviesPageRequest: function _perfTrack_triggerScenarioNewMoviesPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1714)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("NewMoviesPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_NewMoviesPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1714, "XBLW-NewMoviesPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-NewMoviesPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("NewMoviesPageRequest")
                        }
                    }
                }, enableScenarioTopSellingMoviesPageRequest: function _perfTrack_enableScenarioTopSellingMoviesPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1716)
                }, disableScenarioTopSellingMoviesPageRequest: function _perfTrack_disableScenarioTopSellingMoviesPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1716)
                }, triggerScenarioTopSellingMoviesPageRequest: function _perfTrack_triggerScenarioTopSellingMoviesPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1716)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("TopSellingMoviesPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_TopSellingMoviesPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1716, "XBLW-TopSellingMoviesPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-TopSellingMoviesPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("TopSellingMoviesPageRequest")
                        }
                    }
                }, enableScenarioFeaturedTvPageRequest: function _perfTrack_enableScenarioFeaturedTvPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1718)
                }, disableScenarioFeaturedTvPageRequest: function _perfTrack_disableScenarioFeaturedTvPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1718)
                }, triggerScenarioFeaturedTvPageRequest: function _perfTrack_triggerScenarioFeaturedTvPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1718)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("FeaturedTvPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_FeaturedTvPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1718, "XBLW-FeaturedTvPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-FeaturedTvPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("FeaturedTvPageRequest")
                        }
                    }
                }, enableScenarioNewTvPageRequest: function _perfTrack_enableScenarioNewTvPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1717)
                }, disableScenarioNewTvPageRequest: function _perfTrack_disableScenarioNewTvPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1717)
                }, triggerScenarioNewTvPageRequest: function _perfTrack_triggerScenarioNewTvPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1717)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("NewTvPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_NewTvPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1717, "XBLW-NewTvPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-NewTvPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("NewTvPageRequest")
                        }
                    }
                }, enableScenarioLastNightsTvPageRequest: function _perfTrack_enableScenarioLastNightsTvPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1719)
                }, disableScenarioLastNightsTvPageRequest: function _perfTrack_disableScenarioLastNightsTvPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1719)
                }, triggerScenarioLastNightsTvPageRequest: function _perfTrack_triggerScenarioLastNightsTvPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1719)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("LastNightsTvPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_LastNightsTvPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1719, "XBLW-LastNightsTvPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-LastNightsTvPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("LastNightsTvPageRequest")
                        }
                    }
                }, enableScenarioTopSellingTvPageRequest: function _perfTrack_enableScenarioTopSellingTvPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1720)
                }, disableScenarioTopSellingTvPageRequest: function _perfTrack_disableScenarioTopSellingTvPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1720)
                }, triggerScenarioTopSellingTvPageRequest: function _perfTrack_triggerScenarioTopSellingTvPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1720)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("TopSellingTvPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_TopSellingTvPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1720, "XBLW-TopSellingTvPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-TopSellingTvPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("TopSellingTvPageRequest")
                        }
                    }
                }, enableScenarioFlexHubPageRequest: function _perfTrack_enableScenarioFlexHubPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1724)
                }, disableScenarioFlexHubPageRequest: function _perfTrack_disableScenarioFlexHubPageRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1724)
                }, triggerScenarioFlexHubPageRequest: function _perfTrack_triggerScenarioFlexHubPageRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1724)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("FlexHubPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_FlexHubPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1724, "XBLW-FlexHubPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-FlexHubPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("FlexHubPageRequest")
                        }
                    }
                }, enableScenarioAppLaunchToExplore: function _perfTrack_enableScenarioAppLaunchToExplore() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1582)
                }, disableScenarioAppLaunchToExplore: function _perfTrack_disableScenarioAppLaunchToExplore() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1582)
                }, triggerScenarioAppLaunchToExplore: function _perfTrack_triggerScenarioAppLaunchToExplore(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1582) && !state.isFiredOnce(1582)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchToExploreComplete(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.visibleComplete, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1582, "XBLW-AppLaunchToExplore", duration);
                            PT.logTrigger("XBLW-AppLaunchToExplore", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1582);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioAppLaunchToRadio: function _perfTrack_enableScenarioAppLaunchToRadio() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1583)
                }, disableScenarioAppLaunchToRadio: function _perfTrack_disableScenarioAppLaunchToRadio() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1583)
                }, triggerScenarioAppLaunchToRadio: function _perfTrack_triggerScenarioAppLaunchToRadio(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1583) && !state.isFiredOnce(1583)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchToRadioComplete(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.visibleComplete, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1583, "XBLW-AppLaunchToRadio", duration);
                            PT.logTrigger("XBLW-AppLaunchToRadio", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1583);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioTVDetailsRequest: function _perfTrack_enableScenarioTVDetailsRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1584)
                }, disableScenarioTVDetailsRequest: function _perfTrack_disableScenarioTVDetailsRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1584)
                }, triggerScenarioTVDetailsRequest: function _perfTrack_triggerScenarioTVDetailsRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1584)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("TVDetailsRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_TVDetailsRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1584, "XBLW-TVDetailsRequestToLoad", duration);
                                PT.logTrigger("XBLW-TVDetailsRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("TVDetailsRequest")
                        }
                    }
                }, enableScenarioMovieDetailsRequest: function _perfTrack_enableScenarioMovieDetailsRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1585)
                }, disableScenarioMovieDetailsRequest: function _perfTrack_disableScenarioMovieDetailsRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1585)
                }, triggerScenarioMovieDetailsRequest: function _perfTrack_triggerScenarioMovieDetailsRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1585)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("MovieDetailsRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_MovieDetailsRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1585, "XBLW-MovieDetailsRequestToLoad", duration);
                                PT.logTrigger("XBLW-MovieDetailsRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("MovieDetailsRequest")
                        }
                    }
                }, enableScenarioAlbumDetailsRequest: function _perfTrack_enableScenarioAlbumDetailsRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1586)
                }, disableScenarioAlbumDetailsRequest: function _perfTrack_disableScenarioAlbumDetailsRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1586)
                }, triggerScenarioAlbumDetailsRequest: function _perfTrack_triggerScenarioAlbumDetailsRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1586)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AlbumDetailsRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_AlbumDetailsRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1586, "XBLW-AlbumDetailsRequestToLoad", duration);
                                PT.logTrigger("XBLW-AlbumDetailsRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("AlbumDetailsRequest")
                        }
                    }
                }, enableScenarioArtistDetailsRequest: function _perfTrack_enableScenarioArtistDetailsRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1587)
                }, disableScenarioArtistDetailsRequest: function _perfTrack_disableScenarioArtistDetailsRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1587)
                }, triggerScenarioArtistDetailsRequest: function _perfTrack_triggerScenarioArtistDetailsRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1587)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("ArtistDetailsRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_ArtistDetailsRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1587, "XBLW-ArtistDetailsRequestToLoad", duration);
                                PT.logTrigger("XBLW-ArtistDetailsRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("ArtistDetailsRequest")
                        }
                    }
                }, enableScenarioPlaylistDetailsRequest: function _perfTrack_enableScenarioPlaylistDetailsRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1588)
                }, disableScenarioPlaylistDetailsRequest: function _perfTrack_disableScenarioPlaylistDetailsRequest() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1588)
                }, triggerScenarioPlaylistDetailsRequest: function _perfTrack_triggerScenarioPlaylistDetailsRequest(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1588)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("PlaylistDetailsRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_PlaylistDetailsRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1588, "XBLW-PlaylistDetailsRequestToLoad", duration);
                                PT.logTrigger("XBLW-PlaylistDetailsRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("PlaylistDetailsRequest")
                        }
                    }
                }, enableScenarioShopBooksPageRequestToLoad: function _perfTrack_enableScenarioShopBooksPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1589)
                }, disableScenarioShopBooksPageRequestToLoad: function _perfTrack_disableScenarioShopBooksPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1589)
                }, triggerScenarioShopBooksPageRequestToLoad: function _perfTrack_triggerScenarioShopBooksPageRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1589)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("ShopBooksPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_ShopBooksPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1589, "XBLW-ShopBooksPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-ShopBooksPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("ShopBooksPageRequest")
                        }
                    }
                }, enableScenarioShopMagsPageRequestToLoad: function _perfTrack_enableScenarioShopMagsPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1590)
                }, disableScenarioShopMagsPageRequestToLoad: function _perfTrack_disableScenarioShopMagsPageRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1590)
                }, triggerScenarioShopMagsPageRequestToLoad: function _perfTrack_triggerScenarioShopMagsPageRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1590)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("ShopMagsPageRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_ShopMagsPageRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1590, "XBLW-ShopMagsPageRequestToLoad", duration);
                                PT.logTrigger("XBLW-ShopMagsPageRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("ShopMagsPageRequest")
                        }
                    }
                }, enableScenarioAppLaunchToShopBooks: function _perfTrack_enableScenarioAppLaunchToShopBooks() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1591)
                }, disableScenarioAppLaunchToShopBooks: function _perfTrack_disableScenarioAppLaunchToShopBooks() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1591)
                }, triggerScenarioAppLaunchToShopBooks: function _perfTrack_triggerScenarioAppLaunchToShopBooks(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1591) && !state.isFiredOnce(1591)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchToShopBooksComplete(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.visibleComplete, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1591, "XBLW-AppLaunchToShopBooks", duration);
                            PT.logTrigger("XBLW-AppLaunchToShopBooks", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1591);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioAppLaunchToShopMags: function _perfTrack_enableScenarioAppLaunchToShopMags() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1592)
                }, disableScenarioAppLaunchToShopMags: function _perfTrack_disableScenarioAppLaunchToShopMags() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1592)
                }, triggerScenarioAppLaunchToShopMags: function _perfTrack_triggerScenarioAppLaunchToShopMags(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1592) && !state.isFiredOnce(1592)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchToShopMagsComplete(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.visibleComplete, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1592, "XBLW-AppLaunchToShopMags", duration);
                            PT.logTrigger("XBLW-AppLaunchToShopMags", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1592);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioAppLaunchToOOBEComplete: function _perfTrack_enableScenarioAppLaunchToOOBEComplete() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1593)
                }, disableScenarioAppLaunchToOOBEComplete: function _perfTrack_disableScenarioAppLaunchToOOBEComplete() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1593)
                }, triggerScenarioAppLaunchToOOBEComplete: function _perfTrack_triggerScenarioAppLaunchToOOBEComplete(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1593) && !state.isFiredOnce(1593)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("AppLaunch");
                        if (startTime) {
                            var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                            var DurationMsec = duration;
                            PT.getShellEventProvider().tracePerfTrack_Trigger_AppLaunchToOOBEComplete(DurationMsec);
                            if (PT.getLogger().writeLaunchStopEvent)
                                PT.getLogger().writeLaunchStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.visibleComplete, MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind);
                            PT.getLogger().writeTriggerEvent(1593, "XBLW-AppLaunchToOOBEComplete", duration);
                            PT.logTrigger("XBLW-AppLaunchToOOBEComplete", DurationMsec);
                            state.deleteStartTime("AppLaunch")
                        }
                        state.onFiredOnce(1593);
                        PT.disableAllStartupScenarios()
                    }
                }, enableScenarioCategoryGalleryRequestToLoad: function _perfTrack_enableScenarioCategoryGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1594)
                }, disableScenarioCategoryGalleryRequestToLoad: function _perfTrack_disableScenarioCategoryGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1594)
                }, triggerScenarioCategoryGalleryRequestToLoad: function _perfTrack_triggerScenarioCategoryGalleryRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1594)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("CategoryGalleryRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_CategoryGalleryRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1594, "XBLW-CategoryGalleryRequestToLoad", duration);
                                PT.logTrigger("XBLW-CategoryGalleryRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("CategoryGalleryRequest")
                        }
                    }
                }, enableScenarioIssuesGalleryRequestToLoad: function _perfTrack_enableScenarioIssuesGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1595)
                }, disableScenarioIssuesGalleryRequestToLoad: function _perfTrack_disableScenarioIssuesGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1595)
                }, triggerScenarioIssuesGalleryRequestToLoad: function _perfTrack_triggerScenarioIssuesGalleryRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1595)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("IssuesGalleryRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_IssuesGalleryRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1595, "XBLW-IssuesGalleryRequestToLoad", duration);
                                PT.logTrigger("XBLW-IssuesGalleryRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("IssuesGalleryRequest")
                        }
                    }
                }, enableScenarioStandardGalleryRequestToLoad: function _perfTrack_enableScenarioStandardGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1596)
                }, disableScenarioStandardGalleryRequestToLoad: function _perfTrack_disableScenarioStandardGalleryRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1596)
                }, triggerScenarioStandardGalleryRequestToLoad: function _perfTrack_triggerScenarioStandardGalleryRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1596)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("StandardGalleryRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_StandardGalleryRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1596, "XBLW-StandardGalleryRequestToLoad", duration);
                                PT.logTrigger("XBLW-StandardGalleryRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("StandardGalleryRequest")
                        }
                    }
                }, enableScenarioBookDetailsRequestToLoad: function _perfTrack_enableScenarioBookDetailsRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1597)
                }, disableScenarioBookDetailsRequestToLoad: function _perfTrack_disableScenarioBookDetailsRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1597)
                }, triggerScenarioBookDetailsRequestToLoad: function _perfTrack_triggerScenarioBookDetailsRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1597)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("BookDetailsRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_BookDetailsRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1597, "XBLW-BookDetailsRequestToLoad", duration);
                                PT.logTrigger("XBLW-BookDetailsRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("BookDetailsRequest")
                        }
                    }
                }, enableScenarioMagDetailsRequestToLoad: function _perfTrack_enableScenarioMagDetailsRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1598)
                }, disableScenarioMagDetailsRequestToLoad: function _perfTrack_disableScenarioMagDetailsRequestToLoad() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1598)
                }, triggerScenarioMagDetailsRequestToLoad: function _perfTrack_triggerScenarioMagDetailsRequestToLoad(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1598)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("MagDetailsRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_MagDetailsRequestToLoad(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1598, "XBLW-MagDetailsRequestToLoad", duration);
                                PT.logTrigger("XBLW-MagDetailsRequestToLoad", DurationMsec)
                            }
                            state.deleteStartTime("MagDetailsRequest")
                        }
                    }
                }, enableScenarioSearchLibraryRequestToQueryResults: function _perfTrack_enableScenarioSearchLibraryRequestToQueryResults() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1599)
                }, disableScenarioSearchLibraryRequestToQueryResults: function _perfTrack_disableScenarioSearchLibraryRequestToQueryResults() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1599)
                }, triggerScenarioSearchLibraryRequestToQueryResults: function _perfTrack_triggerScenarioSearchLibraryRequestToQueryResults(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1599)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("SearchLibraryRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_SearchLibraryRequestToQueryResults(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1599, "XBLW-SearchLibraryRequestToQueryResults", duration);
                                PT.logTrigger("XBLW-SearchLibraryRequestToQueryResults", DurationMsec)
                            }
                            state.deleteStartTime("SearchLibraryRequest")
                        }
                    }
                }, enableScenarioSearchCatalogRequestToQueryResults: function _perfTrack_enableScenarioSearchCatalogRequestToQueryResults() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1600)
                }, disableScenarioSearchCatalogRequestToQueryResults: function _perfTrack_disableScenarioSearchCatalogRequestToQueryResults() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1600)
                }, triggerScenarioSearchCatalogRequestToQueryResults: function _perfTrack_triggerScenarioSearchCatalogRequestToQueryResults(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1600)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("SearchCatalogRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_SearchCatalogRequestToQueryResults(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1600, "XBLW-SearchCatalogRequestToQueryResults", duration);
                                PT.logTrigger("XBLW-SearchCatalogRequestToQueryResults", DurationMsec)
                            }
                            state.deleteStartTime("SearchCatalogRequest")
                        }
                    }
                }, enableScenarioSearchAutoCompleteResultsReceived: function _perfTrack_enableScenarioSearchAutoCompleteResultsReceived() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1601)
                }, disableScenarioSearchAutoCompleteResultsReceived: function _perfTrack_disableScenarioSearchAutoCompleteResultsReceived() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1601)
                }, triggerScenarioSearchAutoCompleteResultsReceived: function _perfTrack_triggerScenarioSearchAutoCompleteResultsReceived(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1601)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("SearchAutoCompleteRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_SearchAutoCompleteResultsReceived(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1601, "XBLW-SearchAutoCompleteResultsReceived", duration);
                                PT.logTrigger("XBLW-SearchAutoCompleteResultsReceived", DurationMsec)
                            }
                            state.deleteStartTime("SearchAutoCompleteRequest")
                        }
                    }
                }, enableScenarioBNDeviceRegistrationRequestSucceeded: function _perfTrack_enableScenarioBNDeviceRegistrationRequestSucceeded() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1602)
                }, disableScenarioBNDeviceRegistrationRequestSucceeded: function _perfTrack_disableScenarioBNDeviceRegistrationRequestSucceeded() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1602)
                }, triggerScenarioBNDeviceRegistrationRequestSucceeded: function _perfTrack_triggerScenarioBNDeviceRegistrationRequestSucceeded(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1602)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("BNDeviceRegistrationRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_BNDeviceRegistrationRequestSucceeded(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1602, "XBLW-BNDeviceRegistrationRequestSucceeded", duration);
                                PT.logTrigger("XBLW-BNDeviceRegistrationRequestSucceeded", DurationMsec)
                            }
                            state.deleteStartTime("BNDeviceRegistrationRequest")
                        }
                    }
                }, enableScenarioBNLoginRequestSucceeded: function _perfTrack_enableScenarioBNLoginRequestSucceeded() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().enableScenario(1603)
                }, disableScenarioBNLoginRequestSucceeded: function _perfTrack_disableScenarioBNLoginRequestSucceeded() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().disableScenario(1603)
                }, triggerScenarioBNLoginRequestSucceeded: function _perfTrack_triggerScenarioBNLoginRequestSucceeded(DurationMsec) {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    var state = PT._getState();
                    if (!state.isDisabled(1603)) {
                        var stopTime = new Date;
                        var startTime = state.getStartTime("BNLoginRequest");
                        if (startTime) {
                            if (stopTime >= startTime) {
                                var duration = ((stopTime >= startTime) ? (stopTime - startTime) : 0);
                                var DurationMsec = duration;
                                PT.getShellEventProvider().tracePerfTrack_Trigger_BNLoginRequestSucceeded(DurationMsec);
                                PT.getLogger().writeTriggerEvent(1603, "XBLW-BNLoginRequestSucceeded", duration);
                                PT.logTrigger("XBLW-BNLoginRequestSucceeded", DurationMsec)
                            }
                            state.deleteStartTime("BNLoginRequest")
                        }
                    }
                }, disableAllStartupScenarios: function _perfTrack_disableAllStartupScenarios() {
                    var PT = MS.Entertainment.Instrumentation.PerfTrack;
                    PT.disableScenarioAppLaunch();
                    PT.disableScenarioAppLaunchToCollection();
                    PT.disableScenarioAppLaunchPlayNonProtectedContent();
                    PT.disableScenarioAppLaunchPlayProtectedContent();
                    PT.disableScenarioAppLaunchToMoviesStore();
                    PT.disableScenarioAppLaunchToTvStore();
                    PT.disableScenarioAppLaunchToVideoCollection();
                    PT.disableScenarioAppLaunchToExplore();
                    PT.disableScenarioAppLaunchToRadio();
                    PT.disableScenarioAppLaunchToShopBooks();
                    PT.disableScenarioAppLaunchToShopMags();
                    PT.disableScenarioAppLaunchToOOBEComplete()
                }, onSuspending: function _perfTrack_onSuspending() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().resetStartPoints();
                    MS.Entertainment.Instrumentation.PerfTrack.disableAllStartupScenarios()
                }, onResuming: function _perfTrack_onResuming() {
                    MS.Entertainment.Instrumentation.PerfTrack._getState().resetStartPoints()
                }
        })})
})()
})();
/* >>>>>>/framework/commonstringids.js:5871 */
(function() {
/////////////////////////////////////////////////////////////////////////////
//
//  commonStringIds.js
//
//  This file was generated by the Stringer tool. Do not edit it!
//
//  Copyright (C) Microsoft Corporation. All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////

(function() {

    String.id = String.id || {}

    String.id.IDS_ACC_BACK_BUTTON = "IDS_ACC_BACK_BUTTON";
    String.id.IDS_ACC_HOME_BUTTON = "IDS_ACC_HOME_BUTTON";
    String.id.IDS_ACC_REFRESH_BUTTON = "IDS_ACC_REFRESH_BUTTON";
    String.id.IDS_ACTIVATION_LIMIT_EXCEEDED_DTO = "IDS_ACTIVATION_LIMIT_EXCEEDED_DTO";
    String.id.IDS_ADVERTISEMENT = "IDS_ADVERTISEMENT";
    String.id.IDS_APP1_MODULE_VIEW_ALL = "IDS_APP1_MODULE_VIEW_ALL";
    String.id.IDS_APP1_MODULE_VIEW_ALL_LABEL = "IDS_APP1_MODULE_VIEW_ALL_LABEL";
    String.id.IDS_APP2_FILTER_SORTED_BY = "IDS_APP2_FILTER_SORTED_BY";
    String.id.IDS_APP2_PAGE_TITLE_PRIMARY = "IDS_APP2_PAGE_TITLE_PRIMARY";
    String.id.IDS_APP2_PAGE_TITLE_PRIMARY_SECONDARY = "IDS_APP2_PAGE_TITLE_PRIMARY_SECONDARY";
    String.id.IDS_APP2_PARENTAL_FILTERED_CONTENT_NOTIFICATION_TEXT = "IDS_APP2_PARENTAL_FILTERED_CONTENT_NOTIFICATION_TEXT";
    String.id.IDS_APP2_PARENTAL_NO_CONTENT_TITLE = "IDS_APP2_PARENTAL_NO_CONTENT_TITLE";
    String.id.IDS_BETA_TOS_ACCEPT_MESSAGE = "IDS_BETA_TOS_ACCEPT_MESSAGE";
    String.id.IDS_BETA_TOS_BUTTON_ACCEPT = "IDS_BETA_TOS_BUTTON_ACCEPT";
    String.id.IDS_BETA_TOS_BUTTON_DECLINE = "IDS_BETA_TOS_BUTTON_DECLINE";
    String.id.IDS_BETA_TOS_TITLE = "IDS_BETA_TOS_TITLE";
    String.id.IDS_BROWSE_ACTION_TITLE = "IDS_BROWSE_ACTION_TITLE";
    String.id.IDS_BUY_BUTTON = "IDS_BUY_BUTTON";
    String.id.IDS_BUY_BUTTON_VIDEO = "IDS_BUY_BUTTON_VIDEO";
    String.id.IDS_CANCEL_BUTTON = "IDS_CANCEL_BUTTON";
    String.id.IDS_CANCEL_BUTTON_TC = "IDS_CANCEL_BUTTON_TC";
    String.id.IDS_CHILD_AGE_GATING_MESSAGE = "IDS_CHILD_AGE_GATING_MESSAGE";
    String.id.IDS_CHILD_AGE_GATING_TITLE = "IDS_CHILD_AGE_GATING_TITLE";
    String.id.IDS_CLEAR_DOWNLOAD_ERROR_BUTTON = "IDS_CLEAR_DOWNLOAD_ERROR_BUTTON";
    String.id.IDS_CLEAR_SELECTION = "IDS_CLEAR_SELECTION";
    String.id.IDS_CLOSE_BUTTON = "IDS_CLOSE_BUTTON";
    String.id.IDS_CLOSE_BUTTON_LC = "IDS_CLOSE_BUTTON_LC";
    String.id.IDS_CLOUD_SYNC_COLLECTION_FULL_DIALOG_MESSAGE = "IDS_CLOUD_SYNC_COLLECTION_FULL_DIALOG_MESSAGE";
    String.id.IDS_CLOUD_SYNC_COLLECTION_FULL_DIALOG_TITLE = "IDS_CLOUD_SYNC_COLLECTION_FULL_DIALOG_TITLE";
    String.id.IDS_CLOUD_SYNC_COLLECTION_FULL_NOTIFICATION_HEADER = "IDS_CLOUD_SYNC_COLLECTION_FULL_NOTIFICATION_HEADER";
    String.id.IDS_CLOUD_SYNC_ERROR_DIALOG_MESSAGE = "IDS_CLOUD_SYNC_ERROR_DIALOG_MESSAGE";
    String.id.IDS_CLOUD_SYNC_ERROR_DIALOG_TITLE = "IDS_CLOUD_SYNC_ERROR_DIALOG_TITLE";
    String.id.IDS_CLOUD_SYNC_ERROR_NOTIFICATION_HEADER = "IDS_CLOUD_SYNC_ERROR_NOTIFICATION_HEADER";
    String.id.IDS_CLOUD_SYNC_ERROR_NOTIFICATION_TEXT = "IDS_CLOUD_SYNC_ERROR_NOTIFICATION_TEXT";
    String.id.IDS_CLOUD_SYNC_PLAYLIST_FULL_DIALOG_MESSAGE = "IDS_CLOUD_SYNC_PLAYLIST_FULL_DIALOG_MESSAGE";
    String.id.IDS_CLOUD_SYNC_PLAYLIST_FULL_DIALOG_MESSAGE_PLURAL = "IDS_CLOUD_SYNC_PLAYLIST_FULL_DIALOG_MESSAGE_PLURAL";
    String.id.IDS_CLOUD_SYNC_PLAYLIST_FULL_DIALOG_TITLE = "IDS_CLOUD_SYNC_PLAYLIST_FULL_DIALOG_TITLE";
    String.id.IDS_CLOUD_SYNC_PLAYLIST_LIMIT_EXCEEDED_DIALOG_MESSAGE = "IDS_CLOUD_SYNC_PLAYLIST_LIMIT_EXCEEDED_DIALOG_MESSAGE";
    String.id.IDS_CLOUD_SYNC_PLAYLIST_LIMIT_EXCEEDED_DIALOG_TITLE = "IDS_CLOUD_SYNC_PLAYLIST_LIMIT_EXCEEDED_DIALOG_TITLE";
    String.id.IDS_CLOUD_SYNC_PLAYLIST_LIMIT_EXCEEDED_NOTIFICATION_HEADER = "IDS_CLOUD_SYNC_PLAYLIST_LIMIT_EXCEEDED_NOTIFICATION_HEADER";
    String.id.IDS_COLLECTION_ALL_VIDEO_EMPTY = "IDS_COLLECTION_ALL_VIDEO_EMPTY";
    String.id.IDS_COLLECTION_CLOUD_MATCHED_ARIA = "IDS_COLLECTION_CLOUD_MATCHED_ARIA";
    String.id.IDS_COLLECTION_CLOUD_SYNC_PENDING = "IDS_COLLECTION_CLOUD_SYNC_PENDING";
    String.id.IDS_COLLECTION_CLOUD_SYNC_PENDING_ARIA = "IDS_COLLECTION_CLOUD_SYNC_PENDING_ARIA";
    String.id.IDS_COLLECTION_HEADER_ZOOM_IN = "IDS_COLLECTION_HEADER_ZOOM_IN";
    String.id.IDS_COLLECTION_HEADER_ZOOM_OUT = "IDS_COLLECTION_HEADER_ZOOM_OUT";
    String.id.IDS_COLLECTION_IN_CLOUD = "IDS_COLLECTION_IN_CLOUD";
    String.id.IDS_COLLECTION_IN_CLOUD_FREE = "IDS_COLLECTION_IN_CLOUD_FREE";
    String.id.IDS_COLLECTION_IN_CLOUD_MATCHED = "IDS_COLLECTION_IN_CLOUD_MATCHED";
    String.id.IDS_COLLECTION_MOVIE_EMPTY = "IDS_COLLECTION_MOVIE_EMPTY";
    String.id.IDS_COLLECTION_MOVIE_EMPTY_LINK = "IDS_COLLECTION_MOVIE_EMPTY_LINK";
    String.id.IDS_COLLECTION_MUSIC_EMPTY = "IDS_COLLECTION_MUSIC_EMPTY";
    String.id.IDS_COLLECTION_MUSIC_EMPTY_2 = "IDS_COLLECTION_MUSIC_EMPTY_2";
    String.id.IDS_COLLECTION_MUSIC_EMPTY_LINK = "IDS_COLLECTION_MUSIC_EMPTY_LINK";
    String.id.IDS_COLLECTION_MUSIC_EMPTY_LINK_DESC_PREMIUM = "IDS_COLLECTION_MUSIC_EMPTY_LINK_DESC_PREMIUM";
    String.id.IDS_COLLECTION_MUSIC_EMPTY_LINK_PREMIUM = "IDS_COLLECTION_MUSIC_EMPTY_LINK_PREMIUM";
    String.id.IDS_COLLECTION_MUSIC_EMPTY_SUBTITLE = "IDS_COLLECTION_MUSIC_EMPTY_SUBTITLE";
    String.id.IDS_COLLECTION_MUSIC_EMPTY_TITLE = "IDS_COLLECTION_MUSIC_EMPTY_TITLE";
    String.id.IDS_COLLECTION_MUSIC_LIBRARY_SETTINGS_TEXT = "IDS_COLLECTION_MUSIC_LIBRARY_SETTINGS_TEXT";
    String.id.IDS_COLLECTION_MUSIC_LIBRARY_SETTINGS_TITLE = "IDS_COLLECTION_MUSIC_LIBRARY_SETTINGS_TITLE";
    String.id.IDS_COLLECTION_MUSIC_MANAGE_COLLECTION_SUBTITLE = "IDS_COLLECTION_MUSIC_MANAGE_COLLECTION_SUBTITLE";
    String.id.IDS_COLLECTION_MUSIC_MANAGE_COLLECTION_TITLE = "IDS_COLLECTION_MUSIC_MANAGE_COLLECTION_TITLE";
    String.id.IDS_COLLECTION_MUSIC_MANAGE_FOLDERS_LINK = "IDS_COLLECTION_MUSIC_MANAGE_FOLDERS_LINK";
    String.id.IDS_COLLECTION_MUSIC_MORE_LIBRARIES_LINK = "IDS_COLLECTION_MUSIC_MORE_LIBRARIES_LINK";
    String.id.IDS_COLLECTION_MUSIC_SETTINGS_TITLE = "IDS_COLLECTION_MUSIC_SETTINGS_TITLE";
    String.id.IDS_COLLECTION_NOT_IN_CLOUD = "IDS_COLLECTION_NOT_IN_CLOUD";
    String.id.IDS_COLLECTION_OPEN_FILES_LINK = "IDS_COLLECTION_OPEN_FILES_LINK";
    String.id.IDS_COLLECTION_PAGE_EMPTY_BROWSE_SUBTITLE = "IDS_COLLECTION_PAGE_EMPTY_BROWSE_SUBTITLE";
    String.id.IDS_COLLECTION_PAGE_EMPTY_BROWSE_TITLE = "IDS_COLLECTION_PAGE_EMPTY_BROWSE_TITLE";
    String.id.IDS_COLLECTION_PIVOT = "IDS_COLLECTION_PIVOT";
    String.id.IDS_COLLECTION_PIVOT_TC = "IDS_COLLECTION_PIVOT_TC";
    String.id.IDS_COLLECTION_PURCHASES_ADD_TO_CLOUD = "IDS_COLLECTION_PURCHASES_ADD_TO_CLOUD";
    String.id.IDS_COLLECTION_PURCHASES_RESTORE = "IDS_COLLECTION_PURCHASES_RESTORE";
    String.id.IDS_COLLECTION_PURCHASES_RESTORE_TEXT = "IDS_COLLECTION_PURCHASES_RESTORE_TEXT";
    String.id.IDS_COLLECTION_SONG_NOT_AVAILABLE = "IDS_COLLECTION_SONG_NOT_AVAILABLE";
    String.id.IDS_COLLECTION_SONG_NOT_AVAILABLE_TITLE = "IDS_COLLECTION_SONG_NOT_AVAILABLE_TITLE";
    String.id.IDS_COLLECTION_STREAMING_FROM_CLOUD = "IDS_COLLECTION_STREAMING_FROM_CLOUD";
    String.id.IDS_COLLECTION_STREAMING_FROM_CLOUD_FREE = "IDS_COLLECTION_STREAMING_FROM_CLOUD_FREE";
    String.id.IDS_COLLECTION_THIS_DEVICE_ONLY = "IDS_COLLECTION_THIS_DEVICE_ONLY";
    String.id.IDS_COLLECTION_TOOLTIP_CLOUD_STATUS = "IDS_COLLECTION_TOOLTIP_CLOUD_STATUS";
    String.id.IDS_COLLECTION_TOOLTIP_LEARN_MORE = "IDS_COLLECTION_TOOLTIP_LEARN_MORE";
    String.id.IDS_COLLECTION_TOOLTIP_MATCHED = "IDS_COLLECTION_TOOLTIP_MATCHED";
    String.id.IDS_COLLECTION_TOOLTIP_NOT_IN_CLOUD = "IDS_COLLECTION_TOOLTIP_NOT_IN_CLOUD";
    String.id.IDS_COLLECTION_TOOLTIP_STREAMING = "IDS_COLLECTION_TOOLTIP_STREAMING";
    String.id.IDS_COLLECTION_TOOLTIP_UNMATCHED = "IDS_COLLECTION_TOOLTIP_UNMATCHED";
    String.id.IDS_COLLECTION_TV_EMPTY = "IDS_COLLECTION_TV_EMPTY";
    String.id.IDS_COLLECTION_VIDEO_EMPTY = "IDS_COLLECTION_VIDEO_EMPTY";
    String.id.IDS_COLLECTION_VIDEO_LIBRARY_EMPTY = "IDS_COLLECTION_VIDEO_LIBRARY_EMPTY";
    String.id.IDS_COLLECTION_VIDEO_LIBRARY_EMPTY_2 = "IDS_COLLECTION_VIDEO_LIBRARY_EMPTY_2";
    String.id.IDS_COLLECTION_VIDEO_LIBRARY_OPEN_FILE = "IDS_COLLECTION_VIDEO_LIBRARY_OPEN_FILE";
    String.id.IDS_COLLECTION_VIDEO_LIBRARY_SETTINGS_TEXT = "IDS_COLLECTION_VIDEO_LIBRARY_SETTINGS_TEXT";
    String.id.IDS_COLLECTION_VIDEO_LIBRARY_SETTINGS_TITLE = "IDS_COLLECTION_VIDEO_LIBRARY_SETTINGS_TITLE";
    String.id.IDS_COLLECTION_VIDEO_MANAGE_FOLDERS_LINK = "IDS_COLLECTION_VIDEO_MANAGE_FOLDERS_LINK";
    String.id.IDS_COLLECTION_VIDEO_MORE_LIBRARIES_LINK = "IDS_COLLECTION_VIDEO_MORE_LIBRARIES_LINK";
    String.id.IDS_COLLECTION_VIDEO_SETTINGS_TITLE = "IDS_COLLECTION_VIDEO_SETTINGS_TITLE";
    String.id.IDS_COMMA_SEPARATOR = "IDS_COMMA_SEPARATOR";
    String.id.IDS_COMPANION_HOME_NOW_PLAYING_EMPTY = "IDS_COMPANION_HOME_NOW_PLAYING_EMPTY";
    String.id.IDS_COMPANION_HOME_NOW_PLAYING_EMPTY_TITLE = "IDS_COMPANION_HOME_NOW_PLAYING_EMPTY_TITLE";
    String.id.IDS_COMPOSE_MESSAGE_SEND = "IDS_COMPOSE_MESSAGE_SEND";
    String.id.IDS_CONTROLLER_BROWSER_ONE_FINGER_TUTORIAL = "IDS_CONTROLLER_BROWSER_ONE_FINGER_TUTORIAL";
    String.id.IDS_CONTROLLER_BROWSER_TWO_FINGER_TUTORIAL = "IDS_CONTROLLER_BROWSER_TWO_FINGER_TUTORIAL";
    String.id.IDS_CONTROLLER_DISMISS_KEYBOARD = "IDS_CONTROLLER_DISMISS_KEYBOARD";
    String.id.IDS_CONTROLLER_EXCLUSIVE_WARNING = "IDS_CONTROLLER_EXCLUSIVE_WARNING";
    String.id.IDS_CONTROLLER_EXCLUSIVE_WARNING_BUTTON = "IDS_CONTROLLER_EXCLUSIVE_WARNING_BUTTON";
    String.id.IDS_CONTROLLER_EXCLUSIVE_WARNING_TITLE = "IDS_CONTROLLER_EXCLUSIVE_WARNING_TITLE";
    String.id.IDS_CONTROLLER_FAMILY_CONTROL_TUTORIAL = "IDS_CONTROLLER_FAMILY_CONTROL_TUTORIAL";
    String.id.IDS_CONTROLLER_INVOKE_KEYBOARD = "IDS_CONTROLLER_INVOKE_KEYBOARD";
    String.id.IDS_CONTROLLER_SAME_WIRELESS_NETWORK = "IDS_CONTROLLER_SAME_WIRELESS_NETWORK";
    String.id.IDS_CONTROLLER_SEPARATE_NETWORKS = "IDS_CONTROLLER_SEPARATE_NETWORKS";
    String.id.IDS_CONTROLLER_SLOW_CONNECTION = "IDS_CONTROLLER_SLOW_CONNECTION";
    String.id.IDS_CONTROLLER_SLOW_CONNECTION_BUTTON = "IDS_CONTROLLER_SLOW_CONNECTION_BUTTON";
    String.id.IDS_CONTROLLER_SLOW_CONNECTION_MORE_INFO = "IDS_CONTROLLER_SLOW_CONNECTION_MORE_INFO";
    String.id.IDS_CONTROLLER_SWITCHER_BROWSER = "IDS_CONTROLLER_SWITCHER_BROWSER";
    String.id.IDS_CONTROLLER_SWITCHER_BUTTON = "IDS_CONTROLLER_SWITCHER_BUTTON";
    String.id.IDS_CONTROLLER_SWITCHER_CONTROLLER = "IDS_CONTROLLER_SWITCHER_CONTROLLER";
    String.id.IDS_CONTROLLER_SWITCHER_GUIDE = "IDS_CONTROLLER_SWITCHER_GUIDE";
    String.id.IDS_CONTROLLER_SWITCHER_KEYBOARD = "IDS_CONTROLLER_SWITCHER_KEYBOARD";
    String.id.IDS_CONTROLLER_TUTORIAL_SWIPE = "IDS_CONTROLLER_TUTORIAL_SWIPE";
    String.id.IDS_CONTROLLER_TUTORIAL_TAP = "IDS_CONTROLLER_TUTORIAL_TAP";
    String.id.IDS_CONTROLLER_WEB_HUB_BUTTON = "IDS_CONTROLLER_WEB_HUB_BUTTON";
    String.id.IDS_CREATEACCOUNT_TITLE = "IDS_CREATEACCOUNT_TITLE";
    String.id.IDS_DELETE_BUTTON = "IDS_DELETE_BUTTON";
    String.id.IDS_DELETE_DESCRIPTION_LOCAL_PLURAL = "IDS_DELETE_DESCRIPTION_LOCAL_PLURAL";
    String.id.IDS_DELETE_DESCRIPTION_LOCAL_SINGLE = "IDS_DELETE_DESCRIPTION_LOCAL_SINGLE";
    String.id.IDS_DELETE_LABEL = "IDS_DELETE_LABEL";
    String.id.IDS_DEMO_CONFIGURATION_COMPLETE = "IDS_DEMO_CONFIGURATION_COMPLETE";
    String.id.IDS_DEMO_IN_DEMO_MODE = "IDS_DEMO_IN_DEMO_MODE";
    String.id.IDS_DEMO_MUSIC_EXPLORE_ALBUMS_HEADER = "IDS_DEMO_MUSIC_EXPLORE_ALBUMS_HEADER";
    String.id.IDS_DEMO_MUSIC_EXPLORE_ARTISTS_HEADER = "IDS_DEMO_MUSIC_EXPLORE_ARTISTS_HEADER";
    String.id.IDS_DEMO_MUSIC_EXPLORE_HEADER = "IDS_DEMO_MUSIC_EXPLORE_HEADER";
    String.id.IDS_DEMO_MUSIC_EXPLORE_MESSAGE_1 = "IDS_DEMO_MUSIC_EXPLORE_MESSAGE_1";
    String.id.IDS_DEMO_MUSIC_EXPLORE_MESSAGE_1_FREE = "IDS_DEMO_MUSIC_EXPLORE_MESSAGE_1_FREE";
    String.id.IDS_DEMO_MUSIC_EXPLORE_MESSAGE_2 = "IDS_DEMO_MUSIC_EXPLORE_MESSAGE_2";
    String.id.IDS_DEMO_MUSIC_EXPLORE_MESSAGE_3 = "IDS_DEMO_MUSIC_EXPLORE_MESSAGE_3";
    String.id.IDS_DEMO_MUSIC_EXPLORE_PAGE_HEADER = "IDS_DEMO_MUSIC_EXPLORE_PAGE_HEADER";
    String.id.IDS_DEMO_MUSIC_EXPLORE_SUBTITLE = "IDS_DEMO_MUSIC_EXPLORE_SUBTITLE";
    String.id.IDS_DEMO_MUSIC_MARKETPLACE_FIRST_LINE = "IDS_DEMO_MUSIC_MARKETPLACE_FIRST_LINE";
    String.id.IDS_DEMO_MUSIC_MARKETPLACE_POPOVER_FIRST_LINE = "IDS_DEMO_MUSIC_MARKETPLACE_POPOVER_FIRST_LINE";
    String.id.IDS_DEMO_MUSIC_MARKETPLACE_POPOVER_FOOTNOTE = "IDS_DEMO_MUSIC_MARKETPLACE_POPOVER_FOOTNOTE";
    String.id.IDS_DEMO_MUSIC_MARKETPLACE_POPOVER_SECOND_LINE_FREE = "IDS_DEMO_MUSIC_MARKETPLACE_POPOVER_SECOND_LINE_FREE";
    String.id.IDS_DEMO_MUSIC_MARKETPLACE_POPOVER_SECOND_LINE_NONFREE = "IDS_DEMO_MUSIC_MARKETPLACE_POPOVER_SECOND_LINE_NONFREE";
    String.id.IDS_DEMO_MUSIC_MARKETPLACE_SECOND_LINE = "IDS_DEMO_MUSIC_MARKETPLACE_SECOND_LINE";
    String.id.IDS_DEMO_MUSIC_RADIO_HEADER = "IDS_DEMO_MUSIC_RADIO_HEADER";
    String.id.IDS_DEMO_MUSIC_RADIO_MESSAGE_1 = "IDS_DEMO_MUSIC_RADIO_MESSAGE_1";
    String.id.IDS_DEMO_MUSIC_RADIO_MESSAGE_2 = "IDS_DEMO_MUSIC_RADIO_MESSAGE_2";
    String.id.IDS_DEMO_MUSIC_RADIO_MESSAGE_3 = "IDS_DEMO_MUSIC_RADIO_MESSAGE_3";
    String.id.IDS_DEMO_MUSIC_RADIO_SUBTITLE = "IDS_DEMO_MUSIC_RADIO_SUBTITLE";
    String.id.IDS_DEMO_MUSIC_SPOTLIGHT_FIRST_LINE = "IDS_DEMO_MUSIC_SPOTLIGHT_FIRST_LINE";
    String.id.IDS_DEMO_MUSIC_SPOTLIGHT_POPOVER_FIRST_LINE = "IDS_DEMO_MUSIC_SPOTLIGHT_POPOVER_FIRST_LINE";
    String.id.IDS_DEMO_MUSIC_SPOTLIGHT_POPOVER_FOOTNOTE = "IDS_DEMO_MUSIC_SPOTLIGHT_POPOVER_FOOTNOTE";
    String.id.IDS_DEMO_MUSIC_SPOTLIGHT_POPOVER_SECOND_LINE_FREE = "IDS_DEMO_MUSIC_SPOTLIGHT_POPOVER_SECOND_LINE_FREE";
    String.id.IDS_DEMO_MUSIC_SPOTLIGHT_POPOVER_SECOND_LINE_NONFREE = "IDS_DEMO_MUSIC_SPOTLIGHT_POPOVER_SECOND_LINE_NONFREE";
    String.id.IDS_DEMO_MUSIC_SPOTLIGHT_SECOND_LINE = "IDS_DEMO_MUSIC_SPOTLIGHT_SECOND_LINE";
    String.id.IDS_DEMO_VIDEO_MARKETPLACE_FIRST_LINE = "IDS_DEMO_VIDEO_MARKETPLACE_FIRST_LINE";
    String.id.IDS_DEMO_VIDEO_MARKETPLACE_POPOVER_FIRST_LINE = "IDS_DEMO_VIDEO_MARKETPLACE_POPOVER_FIRST_LINE";
    String.id.IDS_DEMO_VIDEO_MARKETPLACE_POPOVER_FOOTNOTE = "IDS_DEMO_VIDEO_MARKETPLACE_POPOVER_FOOTNOTE";
    String.id.IDS_DEMO_VIDEO_MARKETPLACE_POPOVER_SECOND_LINE = "IDS_DEMO_VIDEO_MARKETPLACE_POPOVER_SECOND_LINE";
    String.id.IDS_DEMO_VIDEO_MARKETPLACE_SECOND_LINE_TV_OFF = "IDS_DEMO_VIDEO_MARKETPLACE_SECOND_LINE_TV_OFF";
    String.id.IDS_DEMO_VIDEO_MARKETPLACE_SECOND_LINE_TV_ON = "IDS_DEMO_VIDEO_MARKETPLACE_SECOND_LINE_TV_ON";
    String.id.IDS_DEMO_VIDEO_SPOTLIGHT_FIRST_LINE = "IDS_DEMO_VIDEO_SPOTLIGHT_FIRST_LINE";
    String.id.IDS_DEMO_VIDEO_SPOTLIGHT_POPOVER_FIRST_LINE = "IDS_DEMO_VIDEO_SPOTLIGHT_POPOVER_FIRST_LINE";
    String.id.IDS_DEMO_VIDEO_SPOTLIGHT_POPOVER_FOOTNOTE = "IDS_DEMO_VIDEO_SPOTLIGHT_POPOVER_FOOTNOTE";
    String.id.IDS_DEMO_VIDEO_SPOTLIGHT_POPOVER_SECOND_LINE = "IDS_DEMO_VIDEO_SPOTLIGHT_POPOVER_SECOND_LINE";
    String.id.IDS_DEMO_VIDEO_SPOTLIGHT_POPOVER_SECOND_LINE_TV_ON = "IDS_DEMO_VIDEO_SPOTLIGHT_POPOVER_SECOND_LINE_TV_ON";
    String.id.IDS_DEMO_VIDEO_SPOTLIGHT_SECOND_LINE = "IDS_DEMO_VIDEO_SPOTLIGHT_SECOND_LINE";
    String.id.IDS_DEMO_VIDEO_SPOTLIGHT_SECOND_LINE_NONTV = "IDS_DEMO_VIDEO_SPOTLIGHT_SECOND_LINE_NONTV";
    String.id.IDS_DETAILS_ADD_TO_NOW_PLAYING = "IDS_DETAILS_ADD_TO_NOW_PLAYING";
    String.id.IDS_DETAILS_ADD_TO_NOW_PLAYING_ACTION = "IDS_DETAILS_ADD_TO_NOW_PLAYING_ACTION";
    String.id.IDS_DETAILS_ALL_EPISODES_LABEL = "IDS_DETAILS_ALL_EPISODES_LABEL";
    String.id.IDS_DETAILS_ARTIST_ALBUMS = "IDS_DETAILS_ARTIST_ALBUMS";
    String.id.IDS_DETAILS_ARTIST_ALBUMS_ALL = "IDS_DETAILS_ARTIST_ALBUMS_ALL";
    String.id.IDS_DETAILS_ARTIST_ALBUMS_ALL_LC = "IDS_DETAILS_ARTIST_ALBUMS_ALL_LC";
    String.id.IDS_DETAILS_ARTIST_ALBUMS_LOCAL = "IDS_DETAILS_ARTIST_ALBUMS_LOCAL";
    String.id.IDS_DETAILS_ARTIST_ALBUMS_LOCAL_LC = "IDS_DETAILS_ARTIST_ALBUMS_LOCAL_LC";
    String.id.IDS_DETAILS_ARTIST_ALBUMS_VIEW_ALL = "IDS_DETAILS_ARTIST_ALBUMS_VIEW_ALL";
    String.id.IDS_DETAILS_AUDIO_LANGUAGE = "IDS_DETAILS_AUDIO_LANGUAGE";
    String.id.IDS_DETAILS_BUY_ALBUM_LABEL = "IDS_DETAILS_BUY_ALBUM_LABEL";
    String.id.IDS_DETAILS_BUY_BUNDLE = "IDS_DETAILS_BUY_BUNDLE";
    String.id.IDS_DETAILS_BUY_EPISODE_LABEL = "IDS_DETAILS_BUY_EPISODE_LABEL";
    String.id.IDS_DETAILS_BUY_EPISODE_POPOVER_LABEL = "IDS_DETAILS_BUY_EPISODE_POPOVER_LABEL";
    String.id.IDS_DETAILS_BUY_EXTRA = "IDS_DETAILS_BUY_EXTRA";
    String.id.IDS_DETAILS_BUY_SEASON_CURRENT_LABEL = "IDS_DETAILS_BUY_SEASON_CURRENT_LABEL";
    String.id.IDS_DETAILS_BUY_SEASON_LABEL = "IDS_DETAILS_BUY_SEASON_LABEL";
    String.id.IDS_DETAILS_BUY_SONG_LABEL = "IDS_DETAILS_BUY_SONG_LABEL";
    String.id.IDS_DETAILS_COLLECTION_ALBUM_COUNT = "IDS_DETAILS_COLLECTION_ALBUM_COUNT";
    String.id.IDS_DETAILS_COLLECTION_ALBUM_COUNT_PLURAL = "IDS_DETAILS_COLLECTION_ALBUM_COUNT_PLURAL";
    String.id.IDS_DETAILS_COLLECTION_ALBUMS_COUNT = "IDS_DETAILS_COLLECTION_ALBUMS_COUNT";
    String.id.IDS_DETAILS_COLLECTION_NO_SONGS = "IDS_DETAILS_COLLECTION_NO_SONGS";
    String.id.IDS_DETAILS_COLLECTION_SONG_COUNT = "IDS_DETAILS_COLLECTION_SONG_COUNT";
    String.id.IDS_DETAILS_COLLECTION_SONGS_COUNT = "IDS_DETAILS_COLLECTION_SONGS_COUNT";
    String.id.IDS_DETAILS_COLLECTION_SONGS_PLURAL = "IDS_DETAILS_COLLECTION_SONGS_PLURAL";
    String.id.IDS_DETAILS_CURRENT_MEDIA_LABEL = "IDS_DETAILS_CURRENT_MEDIA_LABEL";
    String.id.IDS_DETAILS_DEMO_PURCHASED_LABEL = "IDS_DETAILS_DEMO_PURCHASED_LABEL";
    String.id.IDS_DETAILS_DESCRIPTION_LABEL = "IDS_DETAILS_DESCRIPTION_LABEL";
    String.id.IDS_DETAILS_DEVELOPER_LABEL = "IDS_DETAILS_DEVELOPER_LABEL";
    String.id.IDS_DETAILS_DOWNLOAD_FREE_EXTRA = "IDS_DETAILS_DOWNLOAD_FREE_EXTRA";
    String.id.IDS_DETAILS_DOWNLOAD_LABEL = "IDS_DETAILS_DOWNLOAD_LABEL";
    String.id.IDS_DETAILS_DOWNLOAD_LABEL_HD = "IDS_DETAILS_DOWNLOAD_LABEL_HD";
    String.id.IDS_DETAILS_DOWNLOAD_LABEL_SD = "IDS_DETAILS_DOWNLOAD_LABEL_SD";
    String.id.IDS_DETAILS_DURATION_HOURS_FORMAT = "IDS_DETAILS_DURATION_HOURS_FORMAT";
    String.id.IDS_DETAILS_DURATION_LABEL = "IDS_DETAILS_DURATION_LABEL";
    String.id.IDS_DETAILS_DURATION_MINS_FORMAT = "IDS_DETAILS_DURATION_MINS_FORMAT";
    String.id.IDS_DETAILS_DURATION_MINSEC_FORMAT = "IDS_DETAILS_DURATION_MINSEC_FORMAT";
    String.id.IDS_DETAILS_EPISODES_LABEL = "IDS_DETAILS_EPISODES_LABEL";
    String.id.IDS_DETAILS_EPISODES_LABEL_LC = "IDS_DETAILS_EPISODES_LABEL_LC";
    String.id.IDS_DETAILS_EPISODES_LABEL_UC = "IDS_DETAILS_EPISODES_LABEL_UC";
    String.id.IDS_DETAILS_EXPLICIT_LABEL = "IDS_DETAILS_EXPLICIT_LABEL";
    String.id.IDS_DETAILS_EXPLICIT_LABEL_UC = "IDS_DETAILS_EXPLICIT_LABEL_UC";
    String.id.IDS_DETAILS_EXTRA_EPISODE_LABEL = "IDS_DETAILS_EXTRA_EPISODE_LABEL";
    String.id.IDS_DETAILS_EXTRA_EPISODE_LABEL_LC = "IDS_DETAILS_EXTRA_EPISODE_LABEL_LC";
    String.id.IDS_DETAILS_EXTRA_EPISODE_LABEL_UC = "IDS_DETAILS_EXTRA_EPISODE_LABEL_UC";
    String.id.IDS_DETAILS_EXTRA_FOR_GAME = "IDS_DETAILS_EXTRA_FOR_GAME";
    String.id.IDS_DETAILS_EXTRA_LAST_PURCHASE_ON_LABEL = "IDS_DETAILS_EXTRA_LAST_PURCHASE_ON_LABEL";
    String.id.IDS_DETAILS_EXTRA_PRICE_PURCHASE_ON = "IDS_DETAILS_EXTRA_PRICE_PURCHASE_ON";
    String.id.IDS_DETAILS_EXTRA_PURCHASED_LABEL = "IDS_DETAILS_EXTRA_PURCHASED_LABEL";
    String.id.IDS_DETAILS_EXTRA_PURCHASED_ON_LABEL = "IDS_DETAILS_EXTRA_PURCHASED_ON_LABEL";
    String.id.IDS_DETAILS_FEATURED_TRAILER_TITLE = "IDS_DETAILS_FEATURED_TRAILER_TITLE";
    String.id.IDS_DETAILS_FEATURED_WATCH_TRAILER = "IDS_DETAILS_FEATURED_WATCH_TRAILER";
    String.id.IDS_DETAILS_FILE_OPEN_LABEL = "IDS_DETAILS_FILE_OPEN_LABEL";
    String.id.IDS_DETAILS_GAME_PURCHASED_LABEL = "IDS_DETAILS_GAME_PURCHASED_LABEL";
    String.id.IDS_DETAILS_GENRE_LABEL = "IDS_DETAILS_GENRE_LABEL";
    String.id.IDS_DETAILS_HUB_MUSIC_ALBUMS = "IDS_DETAILS_HUB_MUSIC_ALBUMS";
    String.id.IDS_DETAILS_HUB_TV_SEASONS = "IDS_DETAILS_HUB_TV_SEASONS";
    String.id.IDS_DETAILS_INFO_SEPERATOR = "IDS_DETAILS_INFO_SEPERATOR";
    String.id.IDS_DETAILS_LATEST_EPISODE_LABEL = "IDS_DETAILS_LATEST_EPISODE_LABEL";
    String.id.IDS_DETAILS_METADATA_SEPERATOR = "IDS_DETAILS_METADATA_SEPERATOR";
    String.id.IDS_DETAILS_MORE_ACTION = "IDS_DETAILS_MORE_ACTION";
    String.id.IDS_DETAILS_MY_ALBUMS = "IDS_DETAILS_MY_ALBUMS";
    String.id.IDS_DETAILS_NETWORK_LABEL = "IDS_DETAILS_NETWORK_LABEL";
    String.id.IDS_DETAILS_NEW_EPISODE_LABEL = "IDS_DETAILS_NEW_EPISODE_LABEL";
    String.id.IDS_DETAILS_NOT_RATED_LABEL = "IDS_DETAILS_NOT_RATED_LABEL";
    String.id.IDS_DETAILS_NOT_RATED_LONG_LABEL = "IDS_DETAILS_NOT_RATED_LONG_LABEL";
    String.id.IDS_DETAILS_OVERVIEW = "IDS_DETAILS_OVERVIEW";
    String.id.IDS_DETAILS_PERC_WATCHED_LABEL = "IDS_DETAILS_PERC_WATCHED_LABEL";
    String.id.IDS_DETAILS_PICK_PROVIDER_DIALOG_TITLE = "IDS_DETAILS_PICK_PROVIDER_DIALOG_TITLE";
    String.id.IDS_DETAILS_PLATFORM_LABEL = "IDS_DETAILS_PLATFORM_LABEL";
    String.id.IDS_DETAILS_PLAY_ALBUM_BUTTON = "IDS_DETAILS_PLAY_ALBUM_BUTTON";
    String.id.IDS_DETAILS_PLAY_NOW_LABEL = "IDS_DETAILS_PLAY_NOW_LABEL";
    String.id.IDS_DETAILS_PLAY_ON_XBOX_APPBAR_LABEL = "IDS_DETAILS_PLAY_ON_XBOX_APPBAR_LABEL";
    String.id.IDS_DETAILS_PLAY_ON_XBOX_LABEL = "IDS_DETAILS_PLAY_ON_XBOX_LABEL";
    String.id.IDS_DETAILS_PLAY_RADIO_MIX_NOW_LABEL = "IDS_DETAILS_PLAY_RADIO_MIX_NOW_LABEL";
    String.id.IDS_DETAILS_PLAY_SEASON_BUTTON = "IDS_DETAILS_PLAY_SEASON_BUTTON";
    String.id.IDS_DETAILS_PLAY_SMART_DJ_MIX_NOW_LABEL = "IDS_DETAILS_PLAY_SMART_DJ_MIX_NOW_LABEL";
    String.id.IDS_DETAILS_PLAY_SONG_ON_XBOX_APPBAR_LABEL = "IDS_DETAILS_PLAY_SONG_ON_XBOX_APPBAR_LABEL";
    String.id.IDS_DETAILS_PLAY_TRAILER_LABEL = "IDS_DETAILS_PLAY_TRAILER_LABEL";
    String.id.IDS_DETAILS_PLAYLIST_NO_SONGS = "IDS_DETAILS_PLAYLIST_NO_SONGS";
    String.id.IDS_DETAILS_PLAYLIST_SONG_COUNT = "IDS_DETAILS_PLAYLIST_SONG_COUNT";
    String.id.IDS_DETAILS_PLAYLIST_SONGS_COUNT = "IDS_DETAILS_PLAYLIST_SONGS_COUNT";
    String.id.IDS_DETAILS_PLAYLIST_SONGS_PLURAL = "IDS_DETAILS_PLAYLIST_SONGS_PLURAL";
    String.id.IDS_DETAILS_PREVIEW_ALBUM_LABEL = "IDS_DETAILS_PREVIEW_ALBUM_LABEL";
    String.id.IDS_DETAILS_PREVIEW_ARTIST_LABEL = "IDS_DETAILS_PREVIEW_ARTIST_LABEL";
    String.id.IDS_DETAILS_PREVIEW_EPISODE_LABEL = "IDS_DETAILS_PREVIEW_EPISODE_LABEL";
    String.id.IDS_DETAILS_PREVIEW_SONG_LABEL = "IDS_DETAILS_PREVIEW_SONG_LABEL";
    String.id.IDS_DETAILS_PUBLISHER_LABEL = "IDS_DETAILS_PUBLISHER_LABEL";
    String.id.IDS_DETAILS_QUALITY_LABEL = "IDS_DETAILS_QUALITY_LABEL";
    String.id.IDS_DETAILS_RATING_LABEL = "IDS_DETAILS_RATING_LABEL";
    String.id.IDS_DETAILS_RATING_USERRATED = "IDS_DETAILS_RATING_USERRATED";
    String.id.IDS_DETAILS_RATINGS_PLURAL = "IDS_DETAILS_RATINGS_PLURAL";
    String.id.IDS_DETAILS_RECENT_ALBUMS = "IDS_DETAILS_RECENT_ALBUMS";
    String.id.IDS_DETAILS_RELATED_ARTISTS = "IDS_DETAILS_RELATED_ARTISTS";
    String.id.IDS_DETAILS_RELEASE_DATE_LABEL = "IDS_DETAILS_RELEASE_DATE_LABEL";
    String.id.IDS_DETAILS_REVIEW_LABEL = "IDS_DETAILS_REVIEW_LABEL";
    String.id.IDS_DETAILS_SEASONS_LABEL = "IDS_DETAILS_SEASONS_LABEL";
    String.id.IDS_DETAILS_SHUFFLE_ALL = "IDS_DETAILS_SHUFFLE_ALL";
    String.id.IDS_DETAILS_SIMILAR_MOVIES = "IDS_DETAILS_SIMILAR_MOVIES";
    String.id.IDS_DETAILS_SLASH_SEPERATOR = "IDS_DETAILS_SLASH_SEPERATOR";
    String.id.IDS_DETAILS_START_DOWNLOAD_LABEL = "IDS_DETAILS_START_DOWNLOAD_LABEL";
    String.id.IDS_DETAILS_STUDIO_LABEL = "IDS_DETAILS_STUDIO_LABEL";
    String.id.IDS_DETAILS_TITLE_NAR = "IDS_DETAILS_TITLE_NAR";
    String.id.IDS_DETAILS_TOP_SONGS = "IDS_DETAILS_TOP_SONGS";
    String.id.IDS_DETAILS_TRACK_NUM_FORMAT = "IDS_DETAILS_TRACK_NUM_FORMAT";
    String.id.IDS_DETAILS_TRACKS_LABEL = "IDS_DETAILS_TRACKS_LABEL";
    String.id.IDS_DETAILS_TRY_AGAIN_LABEL = "IDS_DETAILS_TRY_AGAIN_LABEL";
    String.id.IDS_DETAILS_TRY_AGAIN_LABEL_HD = "IDS_DETAILS_TRY_AGAIN_LABEL_HD";
    String.id.IDS_DETAILS_TRY_AGAIN_LABEL_SD = "IDS_DETAILS_TRY_AGAIN_LABEL_SD";
    String.id.IDS_DETAILS_TVSERIES_SEASONS = "IDS_DETAILS_TVSERIES_SEASONS";
    String.id.IDS_DETAILS_TVSERIES_SEASONS_ALL = "IDS_DETAILS_TVSERIES_SEASONS_ALL";
    String.id.IDS_DETAILS_TVSERIES_SEASONS_LOCAL = "IDS_DETAILS_TVSERIES_SEASONS_LOCAL";
    String.id.IDS_DETAILS_TVSERIES_SEASONS_VIEW_ALL = "IDS_DETAILS_TVSERIES_SEASONS_VIEW_ALL";
    String.id.IDS_DETAILS_UNRATED_LABEL = "IDS_DETAILS_UNRATED_LABEL";
    String.id.IDS_DETAILS_UNRATED_LONG_LABEL = "IDS_DETAILS_UNRATED_LONG_LABEL";
    String.id.IDS_DETAILS_VIDEO_HUB_RELATED = "IDS_DETAILS_VIDEO_HUB_RELATED";
    String.id.IDS_DETAILS_VIDEO_HUB_RELATED_UC = "IDS_DETAILS_VIDEO_HUB_RELATED_UC";
    String.id.IDS_DETAILS_VIEW_FULL_APP = "IDS_DETAILS_VIEW_FULL_APP";
    String.id.IDS_DETAILS_VIEW_FULL_ARTIST = "IDS_DETAILS_VIEW_FULL_ARTIST";
    String.id.IDS_DETAILS_VIEW_FULL_ARTIST_APPBAR = "IDS_DETAILS_VIEW_FULL_ARTIST_APPBAR";
    String.id.IDS_DETAILS_VIEW_FULL_GAME = "IDS_DETAILS_VIEW_FULL_GAME";
    String.id.IDS_DETAILS_VIEW_FULL_MOVIE = "IDS_DETAILS_VIEW_FULL_MOVIE";
    String.id.IDS_DETAILS_VIEW_FULL_SEASON = "IDS_DETAILS_VIEW_FULL_SEASON";
    String.id.IDS_DETAILS_VIEW_FULL_SERIES = "IDS_DETAILS_VIEW_FULL_SERIES";
    String.id.IDS_DETAILS_VIEW_MORE = "IDS_DETAILS_VIEW_MORE";
    String.id.IDS_DETAILS_WATCH_NOW_LABEL = "IDS_DETAILS_WATCH_NOW_LABEL";
    String.id.IDS_DETAILS_WATCH_ON_XBOX_LABEL = "IDS_DETAILS_WATCH_ON_XBOX_LABEL";
    String.id.IDS_DETAILS_WATCH_TRAILER_LABEL = "IDS_DETAILS_WATCH_TRAILER_LABEL";
    String.id.IDS_DIALOG_ERROR_CODE = "IDS_DIALOG_ERROR_CODE";
    String.id.IDS_DIALOG_ERROR_FEEDBACKLINK = "IDS_DIALOG_ERROR_FEEDBACKLINK";
    String.id.IDS_DIALOG_ERROR_MORE_INFO = "IDS_DIALOG_ERROR_MORE_INFO";
    String.id.IDS_DIALOG_SESSION_TIMED_OUT_MESSAGE = "IDS_DIALOG_SESSION_TIMED_OUT_MESSAGE";
    String.id.IDS_DIALOG_SESSION_TIMED_OUT_TITLE = "IDS_DIALOG_SESSION_TIMED_OUT_TITLE";
    String.id.IDS_DIALOG_UNEXPECTED_ERROR_CAPTION = "IDS_DIALOG_UNEXPECTED_ERROR_CAPTION";
    String.id.IDS_DOWNLOAD_ERROR_CANT_DOWNLOAD = "IDS_DOWNLOAD_ERROR_CANT_DOWNLOAD";
    String.id.IDS_DOWNLOAD_ERROR_CAPTION = "IDS_DOWNLOAD_ERROR_CAPTION";
    String.id.IDS_DOWNLOAD_ERROR_DIALOG_CANCEL_ALL = "IDS_DOWNLOAD_ERROR_DIALOG_CANCEL_ALL";
    String.id.IDS_DOWNLOAD_ERROR_DIALOG_CANCEL_DOWNLOAD = "IDS_DOWNLOAD_ERROR_DIALOG_CANCEL_DOWNLOAD";
    String.id.IDS_DOWNLOAD_ERROR_DIALOG_DOWNLOAD_ERRORS = "IDS_DOWNLOAD_ERROR_DIALOG_DOWNLOAD_ERRORS";
    String.id.IDS_DOWNLOAD_ERROR_DIALOG_INSTRUCTIONS = "IDS_DOWNLOAD_ERROR_DIALOG_INSTRUCTIONS";
    String.id.IDS_DOWNLOAD_ERROR_DIALOG_RETRY_ALL_DOWNLOADS = "IDS_DOWNLOAD_ERROR_DIALOG_RETRY_ALL_DOWNLOADS";
    String.id.IDS_DOWNLOAD_ERROR_DIALOG_RETRY_DOWNLOAD = "IDS_DOWNLOAD_ERROR_DIALOG_RETRY_DOWNLOAD";
    String.id.IDS_DOWNLOAD_ERROR_TRY_AGAIN_LATER = "IDS_DOWNLOAD_ERROR_TRY_AGAIN_LATER";
    String.id.IDS_DOWNLOAD_LABEL = "IDS_DOWNLOAD_LABEL";
    String.id.IDS_EDIT_BUTTON = "IDS_EDIT_BUTTON";
    String.id.IDS_EDITBOX_ERROR_NUMBER = "IDS_EDITBOX_ERROR_NUMBER";
    String.id.IDS_EDITBOX_REMAINING_PLURAL = "IDS_EDITBOX_REMAINING_PLURAL";
    String.id.IDS_EMPTY_SYMBOL = "IDS_EMPTY_SYMBOL";
    String.id.IDS_EMPTY_VIEW = "IDS_EMPTY_VIEW";
    String.id.IDS_FAILED_PANEL_HEADER = "IDS_FAILED_PANEL_HEADER";
    String.id.IDS_FAILED_PANEL_LABEL = "IDS_FAILED_PANEL_LABEL";
    String.id.IDS_FAILED_PANEL_OFFLINE_DESC = "IDS_FAILED_PANEL_OFFLINE_DESC";
    String.id.IDS_FAILED_PANEL_OFFLINE_HEADER = "IDS_FAILED_PANEL_OFFLINE_HEADER";
    String.id.IDS_FEATURE_ENABLEMENT_FEATURES_DIALOG_MESSAGE = "IDS_FEATURE_ENABLEMENT_FEATURES_DIALOG_MESSAGE";
    String.id.IDS_FEATURE_ENABLEMENT_FEATURES_DIALOG_TITLE = "IDS_FEATURE_ENABLEMENT_FEATURES_DIALOG_TITLE";
    String.id.IDS_FEATURE_ENABLEMENT_NOTIFICATION_HEADER = "IDS_FEATURE_ENABLEMENT_NOTIFICATION_HEADER";
    String.id.IDS_FEATURE_ENABLEMENT_NOTIFICATION_MESSAGE_DISABLED = "IDS_FEATURE_ENABLEMENT_NOTIFICATION_MESSAGE_DISABLED";
    String.id.IDS_FEATURE_ENABLEMENT_NOTIFICATION_MESSAGE_ENABLED = "IDS_FEATURE_ENABLEMENT_NOTIFICATION_MESSAGE_ENABLED";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_LOW_DISK_SPACE_LONG = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_LOW_DISK_SPACE_LONG";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_LOW_DISK_SPACE_SHORT = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_LOW_DISK_SPACE_SHORT";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_NO_RIGHTS_LONG = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_NO_RIGHTS_LONG";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_NO_RIGHTS_SHORT = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_NO_RIGHTS_SHORT";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_TRY_AGAIN_LATER_LONG = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_TRY_AGAIN_LATER_LONG";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_TRY_AGAIN_LATER_SHORT = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_GLOBAL_TRY_AGAIN_LATER_SHORT";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_LONG = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_LONG";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_SHORT = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_SHORT";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_NO_RIGHTS_LONG = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_NO_RIGHTS_LONG";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_NO_RIGHTS_SHORT = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_NO_RIGHTS_SHORT";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_NOT_AVAILABLE_LIBRARY = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_NOT_AVAILABLE_LIBRARY";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_TRY_AGAIN_LATER_LONG = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_TRY_AGAIN_LATER_LONG";
    String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_TRY_AGAIN_LATER_SHORT = "IDS_FILE_TRANSFER_CANT_DOWNLOAD_TRY_AGAIN_LATER_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_COMPLETE_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_COMPLETE_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_COMPLETE_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_COMPLETE_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_METERED_NETWORK_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_METERED_NETWORK_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_METERED_NETWORK_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_METERED_NETWORK_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_OFFLINE_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_OFFLINE_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_OFFLINE_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_OFFLINE_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_USAGE_LIMIT_APPROACHING_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_USAGE_LIMIT_APPROACHING_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_USAGE_LIMIT_APPROACHING_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_USAGE_LIMIT_APPROACHING_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_USAGE_LIMIT_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_USAGE_LIMIT_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_USAGE_LIMIT_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_GLOBAL_USAGE_LIMIT_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_USAGE_LIMIT_APPROACHING_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_USAGE_LIMIT_APPROACHING_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_USAGE_LIMIT_APPROACHING_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_USAGE_LIMIT_APPROACHING_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_USAGE_LIMIT_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_USAGE_LIMIT_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_USAGE_LIMIT_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_USAGE_LIMIT_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PENDING_LONG = "IDS_FILE_TRANSFER_DOWNLOAD_PENDING_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOAD_PENDING_SHORT = "IDS_FILE_TRANSFER_DOWNLOAD_PENDING_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOADED = "IDS_FILE_TRANSFER_DOWNLOADED";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_EPISODE_LONG = "IDS_FILE_TRANSFER_DOWNLOADING_1_EPISODE_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_EPISODE_SHORT = "IDS_FILE_TRANSFER_DOWNLOADING_1_EPISODE_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_TRACK_LONG = "IDS_FILE_TRANSFER_DOWNLOADING_1_TRACK_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_TRACK_SHORT = "IDS_FILE_TRANSFER_DOWNLOADING_1_TRACK_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_LONG = "IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_LONG_PLURAL = "IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_LONG_PLURAL";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_SHORT = "IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_SHORT_PLURAL = "IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_SHORT_PLURAL";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_ERROR_LONG = "IDS_FILE_TRANSFER_DOWNLOADING_ERROR_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_ERROR_SHORT = "IDS_FILE_TRANSFER_DOWNLOADING_ERROR_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_LONG = "IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_LONG_LC = "IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_LONG_LC";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_SHORT = "IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_SHORT_LC = "IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_SHORT_LC";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_LONG = "IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_SHORT = "IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_LONG = "IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_LONG";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_LONG_PLURAL = "IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_LONG_PLURAL";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_SHORT = "IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_SHORT";
    String.id.IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_SHORT_PLURAL = "IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_SHORT_PLURAL";
    String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_GB_LONG = "IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_GB_LONG";
    String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_GB_SHORT = "IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_GB_SHORT";
    String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_LONG = "IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_LONG";
    String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_MB_LONG = "IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_MB_LONG";
    String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_MB_SHORT = "IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_MB_SHORT";
    String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_SHORT = "IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_SHORT";
    String.id.IDS_FILE_TRANSFER_LOW_ON_STORAGE_SPACE_LONG = "IDS_FILE_TRANSFER_LOW_ON_STORAGE_SPACE_LONG";
    String.id.IDS_FILE_TRANSFER_LOW_ON_STORAGE_SPACE_SHORT = "IDS_FILE_TRANSFER_LOW_ON_STORAGE_SPACE_SHORT";
    String.id.IDS_FILTER_ALL = "IDS_FILTER_ALL";
    String.id.IDS_FILTER_ALL_GENRES = "IDS_FILTER_ALL_GENRES";
    String.id.IDS_FILTER_ALL_GENRES_SC = "IDS_FILTER_ALL_GENRES_SC";
    String.id.IDS_FILTER_ALL_SUBGENRES_SC = "IDS_FILTER_ALL_SUBGENRES_SC";
    String.id.IDS_FILTER_BY = "IDS_FILTER_BY";
    String.id.IDS_FILTER_IN = "IDS_FILTER_IN";
    String.id.IDS_FILTER_SORTED_BY = "IDS_FILTER_SORTED_BY";
    String.id.IDS_GLOBAL_COMMAND_HELP = "IDS_GLOBAL_COMMAND_HELP";
    String.id.IDS_GLOBAL_COMMAND_HOME = "IDS_GLOBAL_COMMAND_HOME";
    String.id.IDS_GLOBAL_COMMAND_NOW_PLAYING = "IDS_GLOBAL_COMMAND_NOW_PLAYING";
    String.id.IDS_GLOBAL_COMMAND_RESTORE_PURCHASES = "IDS_GLOBAL_COMMAND_RESTORE_PURCHASES";
    String.id.IDS_GLOBAL_COMMAND_SEARCH = "IDS_GLOBAL_COMMAND_SEARCH";
    String.id.IDS_HHMMSS_DURATION = "IDS_HHMMSS_DURATION";
    String.id.IDS_HOME_NOW_PLAYING = "IDS_HOME_NOW_PLAYING";
    String.id.IDS_HOME_NOW_PLAYING_EPISODE = "IDS_HOME_NOW_PLAYING_EPISODE";
    String.id.IDS_HOME_NOW_PLAYING_JUMP_IN = "IDS_HOME_NOW_PLAYING_JUMP_IN";
    String.id.IDS_HOME_NOW_PLAYING_LC = "IDS_HOME_NOW_PLAYING_LC";
    String.id.IDS_HOME_NOW_PLAYING_RESUME = "IDS_HOME_NOW_PLAYING_RESUME";
    String.id.IDS_HOME_NOW_PLAYING_RESUME_ARIA = "IDS_HOME_NOW_PLAYING_RESUME_ARIA";
    String.id.IDS_HOME_NOW_PLAYING_XBOX = "IDS_HOME_NOW_PLAYING_XBOX";
    String.id.IDS_HOME_NOW_PLAYING_XBOX_LAST_PLAYED = "IDS_HOME_NOW_PLAYING_XBOX_LAST_PLAYED";
    String.id.IDS_HOME_PIVOT = "IDS_HOME_PIVOT";
    String.id.IDS_HOME_TILE_PAUSED_LABEL = "IDS_HOME_TILE_PAUSED_LABEL";
    String.id.IDS_LOADING_STATUS_LABEL = "IDS_LOADING_STATUS_LABEL";
    String.id.IDS_MANAGE_FOLDERS_ADD_FOLDER_NAR = "IDS_MANAGE_FOLDERS_ADD_FOLDER_NAR";
    String.id.IDS_MANAGE_FOLDERS_DESCRIPTION = "IDS_MANAGE_FOLDERS_DESCRIPTION";
    String.id.IDS_MANAGE_FOLDERS_DONE_BUTTON = "IDS_MANAGE_FOLDERS_DONE_BUTTON";
    String.id.IDS_MANAGE_FOLDERS_EXCLUDE_FOLDER_NAR = "IDS_MANAGE_FOLDERS_EXCLUDE_FOLDER_NAR";
    String.id.IDS_MANAGE_FOLDERS_LAST_FOLDER_ERROR_TEXT = "IDS_MANAGE_FOLDERS_LAST_FOLDER_ERROR_TEXT";
    String.id.IDS_MANAGE_FOLDERS_LAST_FOLDER_ERROR_TITLE = "IDS_MANAGE_FOLDERS_LAST_FOLDER_ERROR_TITLE";
    String.id.IDS_MANIFEST_MEDIA_BROWSER2_APP_DESCRIPTION = "IDS_MANIFEST_MEDIA_BROWSER2_APP_DESCRIPTION";
    String.id.IDS_MANIFEST_MEDIA_PLAYER_APP_DESCRIPTION = "IDS_MANIFEST_MEDIA_PLAYER_APP_DESCRIPTION";
    String.id.IDS_MANIFEST_MEDIA_PLAYER_PREVIEW_APP_DESCRIPTION = "IDS_MANIFEST_MEDIA_PLAYER_PREVIEW_APP_DESCRIPTION";
    String.id.IDS_MANIFEST_MUSIC_APP_DESCRIPTION = "IDS_MANIFEST_MUSIC_APP_DESCRIPTION";
    String.id.IDS_MANIFEST_MUSIC_APP_NAME = "IDS_MANIFEST_MUSIC_APP_NAME";
    String.id.IDS_MANIFEST_TEST_APP_DESCRIPTION = "IDS_MANIFEST_TEST_APP_DESCRIPTION";
    String.id.IDS_MANIFEST_TEST_APP_NAME = "IDS_MANIFEST_TEST_APP_NAME";
    String.id.IDS_MANIFEST_TEST_APP_SHORT_NAME = "IDS_MANIFEST_TEST_APP_SHORT_NAME";
    String.id.IDS_MANIFEST_VIDEO_APP_DESCRIPTION = "IDS_MANIFEST_VIDEO_APP_DESCRIPTION";
    String.id.IDS_MANIFEST_VIDEO_APP_NAME = "IDS_MANIFEST_VIDEO_APP_NAME";
    String.id.IDS_MARKETPLACE_BY_PLAYRANK = "IDS_MARKETPLACE_BY_PLAYRANK";
    String.id.IDS_MARKETPLACE_PIVOT = "IDS_MARKETPLACE_PIVOT";
    String.id.IDS_MARKETPLACE_REGION_EMPTY = "IDS_MARKETPLACE_REGION_EMPTY";
    String.id.IDS_MARKETPLACE_SORT_BEST_SELLING = "IDS_MARKETPLACE_SORT_BEST_SELLING";
    String.id.IDS_MARKETPLACE_SORT_CRITIC_RATING = "IDS_MARKETPLACE_SORT_CRITIC_RATING";
    String.id.IDS_MARKETPLACE_SORT_PLAY_RANK = "IDS_MARKETPLACE_SORT_PLAY_RANK";
    String.id.IDS_MARKETPLACE_SORT_POPULARITY = "IDS_MARKETPLACE_SORT_POPULARITY";
    String.id.IDS_MARKETPLACE_SORT_RELEASE_DATE = "IDS_MARKETPLACE_SORT_RELEASE_DATE";
    String.id.IDS_MARKETPLACE_SORT_SALES_RANK = "IDS_MARKETPLACE_SORT_SALES_RANK";
    String.id.IDS_MARKETPLACE_SORT_TITLE = "IDS_MARKETPLACE_SORT_TITLE";
    String.id.IDS_MARKETPLACE_SORT_TOP_RENTED = "IDS_MARKETPLACE_SORT_TOP_RENTED";
    String.id.IDS_MARKETPLACE_SORT_TOP_SELLING = "IDS_MARKETPLACE_SORT_TOP_SELLING";
    String.id.IDS_MARKETPLACE_SORT_USER_RATING = "IDS_MARKETPLACE_SORT_USER_RATING";
    String.id.IDS_MARKETPLACE_TOOLTIP_IN_COLLECTION = "IDS_MARKETPLACE_TOOLTIP_IN_COLLECTION";
    String.id.IDS_MEDIA_ERROR_CAPTION = "IDS_MEDIA_ERROR_CAPTION";
    String.id.IDS_MEDIA_STATUS_DOWNLOAD_ERROR_ICON = "IDS_MEDIA_STATUS_DOWNLOAD_ERROR_ICON";
    String.id.IDS_MEDIA_STATUS_DOWNLOADING_ICON = "IDS_MEDIA_STATUS_DOWNLOADING_ICON";
    String.id.IDS_MEDIA_STATUS_INLINE_STREAMING_ICON = "IDS_MEDIA_STATUS_INLINE_STREAMING_ICON";
    String.id.IDS_MEDIA_STATUS_NOW_PLAYING_ICON = "IDS_MEDIA_STATUS_NOW_PLAYING_ICON";
    String.id.IDS_MEDIA_STATUS_PLAYBACK_ERROR_ICON = "IDS_MEDIA_STATUS_PLAYBACK_ERROR_ICON";
    String.id.IDS_MEDIA_STATUS_STREAMING_MONTHLY_LIMIT_HIT_ICON = "IDS_MEDIA_STATUS_STREAMING_MONTHLY_LIMIT_HIT_ICON";
    String.id.IDS_MEDIA_STATUS_STREAMING_TRACK_LIMIT_HIT_ICON = "IDS_MEDIA_STATUS_STREAMING_TRACK_LIMIT_HIT_ICON";
    String.id.IDS_MEDIATYPE_ALBUM = "IDS_MEDIATYPE_ALBUM";
    String.id.IDS_MEDIATYPE_ARTIST = "IDS_MEDIATYPE_ARTIST";
    String.id.IDS_MEDIATYPE_GAME = "IDS_MEDIATYPE_GAME";
    String.id.IDS_MEDIATYPE_GAME_WINDOWS = "IDS_MEDIATYPE_GAME_WINDOWS";
    String.id.IDS_MEDIATYPE_MOVIE = "IDS_MEDIATYPE_MOVIE";
    String.id.IDS_MEDIATYPE_PLAYLIST = "IDS_MEDIATYPE_PLAYLIST";
    String.id.IDS_MEDIATYPE_SONG = "IDS_MEDIATYPE_SONG";
    String.id.IDS_MEDIATYPE_TVEPISODE = "IDS_MEDIATYPE_TVEPISODE";
    String.id.IDS_MEDIATYPE_TVSEASON = "IDS_MEDIATYPE_TVSEASON";
    String.id.IDS_MEDIATYPE_TVSERIES = "IDS_MEDIATYPE_TVSERIES";
    String.id.IDS_MMSS_DURATION = "IDS_MMSS_DURATION";
    String.id.IDS_MODIFIER_PREFIX_SORTBY = "IDS_MODIFIER_PREFIX_SORTBY";
    String.id.IDS_MODIFIER_PREFIX_VIEW = "IDS_MODIFIER_PREFIX_VIEW";
    String.id.IDS_MODIFIER_PREFIX_VIEWBY = "IDS_MODIFIER_PREFIX_VIEWBY";
    String.id.IDS_MOGO_NOW_PLAYING = "IDS_MOGO_NOW_PLAYING";
    String.id.IDS_MOGO_NOW_PLAYING_XBOXMUSIC = "IDS_MOGO_NOW_PLAYING_XBOXMUSIC";
    String.id.IDS_MOGO_NOW_PLAYING_XBOXVIDEO = "IDS_MOGO_NOW_PLAYING_XBOXVIDEO";
    String.id.IDS_MOGO_RESUME = "IDS_MOGO_RESUME";
    String.id.IDS_MOGO_XBOX_MUSIC_XENON = "IDS_MOGO_XBOX_MUSIC_XENON";
    String.id.IDS_MOGO_XBOX_VIDEO_XENON = "IDS_MOGO_XBOX_VIDEO_XENON";
    String.id.IDS_MUSIC_ALBUMS_PIVOT = "IDS_MUSIC_ALBUMS_PIVOT";
    String.id.IDS_MUSIC_ALBUMS_PIVOT_TC = "IDS_MUSIC_ALBUMS_PIVOT_TC";
    String.id.IDS_MUSIC_APP_TITLE = "IDS_MUSIC_APP_TITLE";
    String.id.IDS_MUSIC_APP_TITLE_TC = "IDS_MUSIC_APP_TITLE_TC";
    String.id.IDS_MUSIC_ARTISTS_PIVOT = "IDS_MUSIC_ARTISTS_PIVOT";
    String.id.IDS_MUSIC_ARTISTS_PIVOT_TC = "IDS_MUSIC_ARTISTS_PIVOT_TC";
    String.id.IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_BODY = "IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_BODY";
    String.id.IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_BODY_XBOX = "IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_BODY_XBOX";
    String.id.IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_LINK = "IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_LINK";
    String.id.IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_TITLE = "IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_TITLE";
    String.id.IDS_MUSIC_CLOUD_ADDING_FAILED_NEW_NOTIFICATION_BODY = "IDS_MUSIC_CLOUD_ADDING_FAILED_NEW_NOTIFICATION_BODY";
    String.id.IDS_MUSIC_CLOUD_ADDING_FAILED_NOTIFICATION_BODY = "IDS_MUSIC_CLOUD_ADDING_FAILED_NOTIFICATION_BODY";
    String.id.IDS_MUSIC_CLOUD_ADDING_FAILED_NOTIFICATION_TITLE = "IDS_MUSIC_CLOUD_ADDING_FAILED_NOTIFICATION_TITLE";
    String.id.IDS_MUSIC_CLOUD_ADDING_MUSIC_NEW_NOTIFICATION_BODY = "IDS_MUSIC_CLOUD_ADDING_MUSIC_NEW_NOTIFICATION_BODY";
    String.id.IDS_MUSIC_CLOUD_ADDING_MUSIC_NOTIFICATION_BODY = "IDS_MUSIC_CLOUD_ADDING_MUSIC_NOTIFICATION_BODY";
    String.id.IDS_MUSIC_CLOUD_ADDING_MUSIC_NOTIFICATION_TITLE = "IDS_MUSIC_CLOUD_ADDING_MUSIC_NOTIFICATION_TITLE";
    String.id.IDS_MUSIC_CLOUD_ALBUMS_ADDED_NOTIFICATION_LINE1_PLURAL = "IDS_MUSIC_CLOUD_ALBUMS_ADDED_NOTIFICATION_LINE1_PLURAL";
    String.id.IDS_MUSIC_CLOUD_ARTISTS_ADDED_NOTIFICATION_LINE1_PLURAL = "IDS_MUSIC_CLOUD_ARTISTS_ADDED_NOTIFICATION_LINE1_PLURAL";
    String.id.IDS_MUSIC_CLOUD_EMPTY_CLOUD_TITLE = "IDS_MUSIC_CLOUD_EMPTY_CLOUD_TITLE";
    String.id.IDS_MUSIC_CLOUD_FREE_BENEFITS_DIALOG_BODY1 = "IDS_MUSIC_CLOUD_FREE_BENEFITS_DIALOG_BODY1";
    String.id.IDS_MUSIC_CLOUD_FREE_BENEFITS_DIALOG_BODY2 = "IDS_MUSIC_CLOUD_FREE_BENEFITS_DIALOG_BODY2";
    String.id.IDS_MUSIC_CLOUD_FREE_BENEFITS_DIALOG_TITLE = "IDS_MUSIC_CLOUD_FREE_BENEFITS_DIALOG_TITLE";
    String.id.IDS_MUSIC_CLOUD_ICON_DIALOG_LOCAL_DESC = "IDS_MUSIC_CLOUD_ICON_DIALOG_LOCAL_DESC";
    String.id.IDS_MUSIC_CLOUD_ICON_DIALOG_LOCAL_TITLE = "IDS_MUSIC_CLOUD_ICON_DIALOG_LOCAL_TITLE";
    String.id.IDS_MUSIC_CLOUD_ICON_DIALOG_MATCHED_DESC = "IDS_MUSIC_CLOUD_ICON_DIALOG_MATCHED_DESC";
    String.id.IDS_MUSIC_CLOUD_ICON_DIALOG_MATCHED_TITLE = "IDS_MUSIC_CLOUD_ICON_DIALOG_MATCHED_TITLE";
    String.id.IDS_MUSIC_CLOUD_ICON_DIALOG_REMOTE_DESC = "IDS_MUSIC_CLOUD_ICON_DIALOG_REMOTE_DESC";
    String.id.IDS_MUSIC_CLOUD_ICON_DIALOG_REMOTE_TITLE = "IDS_MUSIC_CLOUD_ICON_DIALOG_REMOTE_TITLE";
    String.id.IDS_MUSIC_CLOUD_ICON_DIALOG_SUBTEXT = "IDS_MUSIC_CLOUD_ICON_DIALOG_SUBTEXT";
    String.id.IDS_MUSIC_CLOUD_ICON_DIALOG_TITLE = "IDS_MUSIC_CLOUD_ICON_DIALOG_TITLE";
    String.id.IDS_MUSIC_CLOUD_INFO_ACTION_DESC = "IDS_MUSIC_CLOUD_INFO_ACTION_DESC";
    String.id.IDS_MUSIC_CLOUD_INFO_ACTION_TITLE = "IDS_MUSIC_CLOUD_INFO_ACTION_TITLE";
    String.id.IDS_MUSIC_CLOUD_INFO_DIALOG_BODY = "IDS_MUSIC_CLOUD_INFO_DIALOG_BODY";
    String.id.IDS_MUSIC_CLOUD_INFO_DIALOG_PREMIUM_LINK = "IDS_MUSIC_CLOUD_INFO_DIALOG_PREMIUM_LINK";
    String.id.IDS_MUSIC_CLOUD_INFO_DIALOG_TITLE = "IDS_MUSIC_CLOUD_INFO_DIALOG_TITLE";
    String.id.IDS_MUSIC_CLOUD_MUSIC_ADDED_NEW_NOTIFICATION_BODY = "IDS_MUSIC_CLOUD_MUSIC_ADDED_NEW_NOTIFICATION_BODY";
    String.id.IDS_MUSIC_CLOUD_MUSIC_ADDED_NOTIFICATION_BODY = "IDS_MUSIC_CLOUD_MUSIC_ADDED_NOTIFICATION_BODY";
    String.id.IDS_MUSIC_CLOUD_MUSIC_ADDED_NOTIFICATION_TITLE = "IDS_MUSIC_CLOUD_MUSIC_ADDED_NOTIFICATION_TITLE";
    String.id.IDS_MUSIC_CLOUD_NEW_MUSIC_ADDED_NOTIFICATION_LINE1 = "IDS_MUSIC_CLOUD_NEW_MUSIC_ADDED_NOTIFICATION_LINE1";
    String.id.IDS_MUSIC_CLOUD_NEW_MUSIC_ADDING_NOTIFICATION_LINE1 = "IDS_MUSIC_CLOUD_NEW_MUSIC_ADDING_NOTIFICATION_LINE1";
    String.id.IDS_MUSIC_CLOUD_NEW_MUSIC_NOTIFICATION_LINE2_1_SONG = "IDS_MUSIC_CLOUD_NEW_MUSIC_NOTIFICATION_LINE2_1_SONG";
    String.id.IDS_MUSIC_CLOUD_NEW_MUSIC_NOTIFICATION_LINE2_N_SONGS = "IDS_MUSIC_CLOUD_NEW_MUSIC_NOTIFICATION_LINE2_N_SONGS";
    String.id.IDS_MUSIC_CLOUD_NEW_MUSIC_NOTIFICATION_LINE2_SONGS_PLURAL = "IDS_MUSIC_CLOUD_NEW_MUSIC_NOTIFICATION_LINE2_SONGS_PLURAL";
    String.id.IDS_MUSIC_CLOUD_NO_MUSIC_NEW_NOTIFICATION_BODY = "IDS_MUSIC_CLOUD_NO_MUSIC_NEW_NOTIFICATION_BODY";
    String.id.IDS_MUSIC_CLOUD_NO_MUSIC_NOTIFICATION_BODY = "IDS_MUSIC_CLOUD_NO_MUSIC_NOTIFICATION_BODY";
    String.id.IDS_MUSIC_CLOUD_NO_MUSIC_NOTIFICATION_TITLE = "IDS_MUSIC_CLOUD_NO_MUSIC_NOTIFICATION_TITLE";
    String.id.IDS_MUSIC_CLOUD_POPULATED_NEW_NOTIFICATION_BODY = "IDS_MUSIC_CLOUD_POPULATED_NEW_NOTIFICATION_BODY";
    String.id.IDS_MUSIC_CLOUD_POPULATED_NOTIFICATION_BODY = "IDS_MUSIC_CLOUD_POPULATED_NOTIFICATION_BODY";
    String.id.IDS_MUSIC_CLOUD_POPULATED_NOTIFICATION_TITLE = "IDS_MUSIC_CLOUD_POPULATED_NOTIFICATION_TITLE";
    String.id.IDS_MUSIC_CLOUD_PREMIUM_BENEFITS_DIALOG_BODY1 = "IDS_MUSIC_CLOUD_PREMIUM_BENEFITS_DIALOG_BODY1";
    String.id.IDS_MUSIC_CLOUD_PREMIUM_BENEFITS_DIALOG_BODY2 = "IDS_MUSIC_CLOUD_PREMIUM_BENEFITS_DIALOG_BODY2";
    String.id.IDS_MUSIC_CLOUD_PREMIUM_BENEFITS_DIALOG_BODY3 = "IDS_MUSIC_CLOUD_PREMIUM_BENEFITS_DIALOG_BODY3";
    String.id.IDS_MUSIC_CLOUD_PREMIUM_BENEFITS_DIALOG_TITLE = "IDS_MUSIC_CLOUD_PREMIUM_BENEFITS_DIALOG_TITLE";
    String.id.IDS_MUSIC_CLOUD_SONGS_ADDED_NOTIFICATION_LINE1_PLURAL = "IDS_MUSIC_CLOUD_SONGS_ADDED_NOTIFICATION_LINE1_PLURAL";
    String.id.IDS_MUSIC_CLOUD_SONGS_ADDED_NOTIFICATION_LINE2 = "IDS_MUSIC_CLOUD_SONGS_ADDED_NOTIFICATION_LINE2";
    String.id.IDS_MUSIC_COLLECTION_EMPTY_DESC = "IDS_MUSIC_COLLECTION_EMPTY_DESC";
    String.id.IDS_MUSIC_COLLECTION_EMPTY_TITLE = "IDS_MUSIC_COLLECTION_EMPTY_TITLE";
    String.id.IDS_MUSIC_COLLECTION_PIVOT = "IDS_MUSIC_COLLECTION_PIVOT";
    String.id.IDS_MUSIC_COLLECTION_PIVOT_TC = "IDS_MUSIC_COLLECTION_PIVOT_TC";
    String.id.IDS_MUSIC_DEVICES_PIVOT = "IDS_MUSIC_DEVICES_PIVOT";
    String.id.IDS_MUSIC_DEVICES_PIVOT_TC = "IDS_MUSIC_DEVICES_PIVOT_TC";
    String.id.IDS_MUSIC_EXPLORE_PIVOT = "IDS_MUSIC_EXPLORE_PIVOT";
    String.id.IDS_MUSIC_EXPLORE_PIVOT_TC = "IDS_MUSIC_EXPLORE_PIVOT_TC";
    String.id.IDS_MUSIC_FEATURED_PIVOT = "IDS_MUSIC_FEATURED_PIVOT";
    String.id.IDS_MUSIC_GENRES_PIVOT = "IDS_MUSIC_GENRES_PIVOT";
    String.id.IDS_MUSIC_LOCATION_DMZ = "IDS_MUSIC_LOCATION_DMZ";
    String.id.IDS_MUSIC_MARKETPLACE_EMPTY_DESC = "IDS_MUSIC_MARKETPLACE_EMPTY_DESC";
    String.id.IDS_MUSIC_MARKETPLACE_EMPTY_TITLE = "IDS_MUSIC_MARKETPLACE_EMPTY_TITLE";
    String.id.IDS_MUSIC_MARKETPLACE_PIVOT = "IDS_MUSIC_MARKETPLACE_PIVOT";
    String.id.IDS_MUSIC_NEW_RELEASES_PIVOT = "IDS_MUSIC_NEW_RELEASES_PIVOT";
    String.id.IDS_MUSIC_PIVOT = "IDS_MUSIC_PIVOT";
    String.id.IDS_MUSIC_RADIO_PIVOT = "IDS_MUSIC_RADIO_PIVOT";
    String.id.IDS_MUSIC_RADIO_PIVOT_TC = "IDS_MUSIC_RADIO_PIVOT_TC";
    String.id.IDS_MUSIC_SMARTDJ_PIVOT = "IDS_MUSIC_SMARTDJ_PIVOT";
    String.id.IDS_MUSIC_SMARTDJ_PIVOT_TC = "IDS_MUSIC_SMARTDJ_PIVOT_TC";
    String.id.IDS_MUSIC_SONGS_PIVOT_TC = "IDS_MUSIC_SONGS_PIVOT_TC";
    String.id.IDS_MUSIC_STORE_PIVOT = "IDS_MUSIC_STORE_PIVOT";
    String.id.IDS_MUSIC_STORE_PIVOT_TC = "IDS_MUSIC_STORE_PIVOT_TC";
    String.id.IDS_MUSIC_TOP_ALBUMS_PIVOT = "IDS_MUSIC_TOP_ALBUMS_PIVOT";
    String.id.IDS_MUSIC_VIEW_PLAYLIST = "IDS_MUSIC_VIEW_PLAYLIST";
    String.id.IDS_MY_MUSIC_BUTTON_DESC = "IDS_MY_MUSIC_BUTTON_DESC";
    String.id.IDS_MY_MUSIC_LIBRARY_SETTINGS_TITLE = "IDS_MY_MUSIC_LIBRARY_SETTINGS_TITLE";
    String.id.IDS_N_FILTER_IN = "IDS_N_FILTER_IN";
    String.id.IDS_N_SORTED_BY = "IDS_N_SORTED_BY";
    String.id.IDS_NAV_PANE_HIDE_MENU = "IDS_NAV_PANE_HIDE_MENU";
    String.id.IDS_NAV_PANE_SHOW_MENU = "IDS_NAV_PANE_SHOW_MENU";
    String.id.IDS_NETWORK_STATUS_HEADER = "IDS_NETWORK_STATUS_HEADER";
    String.id.IDS_NETWORK_STATUS_LOCAL_ONLY = "IDS_NETWORK_STATUS_LOCAL_ONLY";
    String.id.IDS_NETWORK_STATUS_NONE = "IDS_NETWORK_STATUS_NONE";
    String.id.IDS_NETWORK_STATUS_OVER_THE_LIMIT = "IDS_NETWORK_STATUS_OVER_THE_LIMIT";
    String.id.IDS_NETWORK_STATUS_ROAMING = "IDS_NETWORK_STATUS_ROAMING";
    String.id.IDS_NETWORK_STATUS_THROTTLED = "IDS_NETWORK_STATUS_THROTTLED";
    String.id.IDS_NETWORK_STATUS_UNRESTRICTED = "IDS_NETWORK_STATUS_UNRESTRICTED";
    String.id.IDS_NEXT_BUTTON = "IDS_NEXT_BUTTON";
    String.id.IDS_NO_BUTTON = "IDS_NO_BUTTON";
    String.id.IDS_NOT_AVAILABLE_OFFLINE = "IDS_NOT_AVAILABLE_OFFLINE";
    String.id.IDS_NOW_PLAYING_DETAILS_BUTTON = "IDS_NOW_PLAYING_DETAILS_BUTTON";
    String.id.IDS_NOW_PLAYING_OP_ADD_ALBUM_ACTION = "IDS_NOW_PLAYING_OP_ADD_ALBUM_ACTION";
    String.id.IDS_NOW_PLAYING_OP_ADD_SONG_ACTION = "IDS_NOW_PLAYING_OP_ADD_SONG_ACTION";
    String.id.IDS_NOW_PLAYING_OP_BIO_ACTION = "IDS_NOW_PLAYING_OP_BIO_ACTION";
    String.id.IDS_NOW_PLAYING_OP_DISCOGRAPHY_ACTION = "IDS_NOW_PLAYING_OP_DISCOGRAPHY_ACTION";
    String.id.IDS_NOW_PLAYING_OP_RADIO_ACTION = "IDS_NOW_PLAYING_OP_RADIO_ACTION";
    String.id.IDS_NOW_PLAYING_OP_SAVE_NOW_PLAYING_ACTION = "IDS_NOW_PLAYING_OP_SAVE_NOW_PLAYING_ACTION";
    String.id.IDS_NOW_PLAYING_OP_SHARE_ACTION = "IDS_NOW_PLAYING_OP_SHARE_ACTION";
    String.id.IDS_NOW_PLAYING_OP_SMARTDJ_ACTION = "IDS_NOW_PLAYING_OP_SMARTDJ_ACTION";
    String.id.IDS_NOW_PLAYING_OP_TOP_SONGS_ACTION = "IDS_NOW_PLAYING_OP_TOP_SONGS_ACTION";
    String.id.IDS_NOW_PLAYING_OP_TOP_SONGS_RELATED_ACTION = "IDS_NOW_PLAYING_OP_TOP_SONGS_RELATED_ACTION";
    String.id.IDS_NOW_PLAYING_PANEL_TITLE_LC = "IDS_NOW_PLAYING_PANEL_TITLE_LC";
    String.id.IDS_NOW_PLAYING_PLAYLIST_BUTTON = "IDS_NOW_PLAYING_PLAYLIST_BUTTON";
    String.id.IDS_NOW_PLAYING_REMOVE_TRACK_ACTION = "IDS_NOW_PLAYING_REMOVE_TRACK_ACTION";
    String.id.IDS_NUMBER_SYMBOL = "IDS_NUMBER_SYMBOL";
    String.id.IDS_OK_BUTTON = "IDS_OK_BUTTON";
    String.id.IDS_PAGED_ITEMS_CONTROL_ACC_NEXT_PAGE = "IDS_PAGED_ITEMS_CONTROL_ACC_NEXT_PAGE";
    String.id.IDS_PAGED_ITEMS_CONTROL_ACC_PREVIOUS_PAGE = "IDS_PAGED_ITEMS_CONTROL_ACC_PREVIOUS_PAGE";
    String.id.IDS_PIN_TO_START_LINK_ERROR_TEXT = "IDS_PIN_TO_START_LINK_ERROR_TEXT";
    String.id.IDS_PIN_TO_START_SCREEN_BUTTON = "IDS_PIN_TO_START_SCREEN_BUTTON";
    String.id.IDS_PLAY_ALL = "IDS_PLAY_ALL";
    String.id.IDS_PLAY_ALL_DESC = "IDS_PLAY_ALL_DESC";
    String.id.IDS_PLAY_ALL_LABEL = "IDS_PLAY_ALL_LABEL";
    String.id.IDS_PLAY_ALL_SHUFFLED = "IDS_PLAY_ALL_SHUFFLED";
    String.id.IDS_PLAY_BUTTON = "IDS_PLAY_BUTTON";
    String.id.IDS_PLAY_BUTTON_VIDEO = "IDS_PLAY_BUTTON_VIDEO";
    String.id.IDS_PLAYBACK_DURATION_PROGRESS = "IDS_PLAYBACK_DURATION_PROGRESS";
    String.id.IDS_PLAYBACK_ERROR_MESSAGE_TITLE = "IDS_PLAYBACK_ERROR_MESSAGE_TITLE";
    String.id.IDS_PLAYBACK_ERROR_NOT_AVAILABLE_OFFLINE = "IDS_PLAYBACK_ERROR_NOT_AVAILABLE_OFFLINE";
    String.id.IDS_PLAYBACK_ERROR_PLAYLIST_FILE_CORRUPT_TITLE = "IDS_PLAYBACK_ERROR_PLAYLIST_FILE_CORRUPT_TITLE";
    String.id.IDS_PLAYBACK_ERROR_SIGN_IN_REQUIRED = "IDS_PLAYBACK_ERROR_SIGN_IN_REQUIRED";
    String.id.IDS_PLAYLIST_BUTTON_DESC = "IDS_PLAYLIST_BUTTON_DESC";
    String.id.IDS_PROGRESS_NAR = "IDS_PROGRESS_NAR";
    String.id.IDS_PROVISIONING_ACCEPT_BUTTON = "IDS_PROVISIONING_ACCEPT_BUTTON";
    String.id.IDS_PROVISIONING_ACCEPTANCE_DESC = "IDS_PROVISIONING_ACCEPTANCE_DESC";
    String.id.IDS_PROVISIONING_ALREADY_HAVE_BUTTON = "IDS_PROVISIONING_ALREADY_HAVE_BUTTON";
    String.id.IDS_PROVISIONING_ALREADY_HAVE_DESC = "IDS_PROVISIONING_ALREADY_HAVE_DESC";
    String.id.IDS_PROVISIONING_CANCEL_BUTTON = "IDS_PROVISIONING_CANCEL_BUTTON";
    String.id.IDS_PROVISIONING_CHILD_LIST_COMEBACK = "IDS_PROVISIONING_CHILD_LIST_COMEBACK";
    String.id.IDS_PROVISIONING_CHILD_LIST_SIGNIN = "IDS_PROVISIONING_CHILD_LIST_SIGNIN";
    String.id.IDS_PROVISIONING_CHILD_LIST_TITLE = "IDS_PROVISIONING_CHILD_LIST_TITLE";
    String.id.IDS_PROVISIONING_CHILD_LIST_XBOX_LINK = "IDS_PROVISIONING_CHILD_LIST_XBOX_LINK";
    String.id.IDS_PROVISIONING_CHILD_SUBTITLE = "IDS_PROVISIONING_CHILD_SUBTITLE";
    String.id.IDS_PROVISIONING_CHILD_TITLE = "IDS_PROVISIONING_CHILD_TITLE";
    String.id.IDS_PROVISIONING_EXPLANATION = "IDS_PROVISIONING_EXPLANATION";
    String.id.IDS_PROVISIONING_PRIVACY_LINK = "IDS_PROVISIONING_PRIVACY_LINK";
    String.id.IDS_PROVISIONING_TITLE = "IDS_PROVISIONING_TITLE";
    String.id.IDS_PROVISIONING_TOS_LINK = "IDS_PROVISIONING_TOS_LINK";
    String.id.IDS_PROVISIONING_USER_EMAIL = "IDS_PROVISIONING_USER_EMAIL";
    String.id.IDS_PURCHASE_ERROR_CAPTION = "IDS_PURCHASE_ERROR_CAPTION";
    String.id.IDS_PURCHASE_ERROR_MESSAGE = "IDS_PURCHASE_ERROR_MESSAGE";
    String.id.IDS_PURCHASE_ERROR_MESSAGE_TITLE = "IDS_PURCHASE_ERROR_MESSAGE_TITLE";
    String.id.IDS_RADIO_ERROR_CAPTION = "IDS_RADIO_ERROR_CAPTION";
    String.id.IDS_READ_LESS = "IDS_READ_LESS";
    String.id.IDS_READ_MORE = "IDS_READ_MORE";
    String.id.IDS_RECENT_LAST_WEEK = "IDS_RECENT_LAST_WEEK";
    String.id.IDS_RECENT_THIS_MONTH = "IDS_RECENT_THIS_MONTH";
    String.id.IDS_RECENT_THIS_WEEK = "IDS_RECENT_THIS_WEEK";
    String.id.IDS_REMOVE_BUTTON = "IDS_REMOVE_BUTTON";
    String.id.IDS_RENT_BUTTON = "IDS_RENT_BUTTON";
    String.id.IDS_RESTART_BUTTON = "IDS_RESTART_BUTTON";
    String.id.IDS_RESUME_BUTTON = "IDS_RESUME_BUTTON";
    String.id.IDS_SAVE_BUTTON = "IDS_SAVE_BUTTON";
    String.id.IDS_SEARCH_ALBUMLOCAL_LABEL = "IDS_SEARCH_ALBUMLOCAL_LABEL";
    String.id.IDS_SEARCH_ALBUMMARKETPLACE_LABEL = "IDS_SEARCH_ALBUMMARKETPLACE_LABEL";
    String.id.IDS_SEARCH_ALBUMS_GROUP_HEADER_LABEL = "IDS_SEARCH_ALBUMS_GROUP_HEADER_LABEL";
    String.id.IDS_SEARCH_ALBUMS_PIVOT_LABEL = "IDS_SEARCH_ALBUMS_PIVOT_LABEL";
    String.id.IDS_SEARCH_ALBUMS_RESULT_TITLE = "IDS_SEARCH_ALBUMS_RESULT_TITLE";
    String.id.IDS_SEARCH_ALL_PIVOT_LABEL = "IDS_SEARCH_ALL_PIVOT_LABEL";
    String.id.IDS_SEARCH_ARTISTLOCAL_LABEL = "IDS_SEARCH_ARTISTLOCAL_LABEL";
    String.id.IDS_SEARCH_ARTISTMARKETPLACE_LABEL = "IDS_SEARCH_ARTISTMARKETPLACE_LABEL";
    String.id.IDS_SEARCH_ARTISTS_GROUP_HEADER_LABEL = "IDS_SEARCH_ARTISTS_GROUP_HEADER_LABEL";
    String.id.IDS_SEARCH_ARTISTS_PIVOT_LABEL = "IDS_SEARCH_ARTISTS_PIVOT_LABEL";
    String.id.IDS_SEARCH_ARTISTS_RESULT_TITLE = "IDS_SEARCH_ARTISTS_RESULT_TITLE";
    String.id.IDS_SEARCH_BUTTON = "IDS_SEARCH_BUTTON";
    String.id.IDS_SEARCH_FILTER_ALL = "IDS_SEARCH_FILTER_ALL";
    String.id.IDS_SEARCH_FILTER_COLLECTION = "IDS_SEARCH_FILTER_COLLECTION";
    String.id.IDS_SEARCH_FILTER_MARKETPLACE = "IDS_SEARCH_FILTER_MARKETPLACE";
    String.id.IDS_SEARCH_FILTER_MARKETPLACE_VIDEO = "IDS_SEARCH_FILTER_MARKETPLACE_VIDEO";
    String.id.IDS_SEARCH_HCR_WITH_KEYWORD_NAR = "IDS_SEARCH_HCR_WITH_KEYWORD_NAR";
    String.id.IDS_SEARCH_INMYVIDEOS_LABEL = "IDS_SEARCH_INMYVIDEOS_LABEL";
    String.id.IDS_SEARCH_MODIFIER_PIVOT_LABEL = "IDS_SEARCH_MODIFIER_PIVOT_LABEL";
    String.id.IDS_SEARCH_MOVIELOCAL_LABEL = "IDS_SEARCH_MOVIELOCAL_LABEL";
    String.id.IDS_SEARCH_MOVIEMARKETPLACE_LABEL = "IDS_SEARCH_MOVIEMARKETPLACE_LABEL";
    String.id.IDS_SEARCH_MUSICHUB_TITLE = "IDS_SEARCH_MUSICHUB_TITLE";
    String.id.IDS_SEARCH_NORESULT_TITLE = "IDS_SEARCH_NORESULT_TITLE";
    String.id.IDS_SEARCH_NORESULT_TITLE_TC = "IDS_SEARCH_NORESULT_TITLE_TC";
    String.id.IDS_SEARCH_NOTSIGNEDIN = "IDS_SEARCH_NOTSIGNEDIN";
    String.id.IDS_SEARCH_OTHERVIDEOSLOCAL_LABEL = "IDS_SEARCH_OTHERVIDEOSLOCAL_LABEL";
    String.id.IDS_SEARCH_PIVOT = "IDS_SEARCH_PIVOT";
    String.id.IDS_SEARCH_PLAYLISTS_GROUP_HEADER_LABEL = "IDS_SEARCH_PLAYLISTS_GROUP_HEADER_LABEL";
    String.id.IDS_SEARCH_PLAYLISTS_PIVOT_LABEL = "IDS_SEARCH_PLAYLISTS_PIVOT_LABEL";
    String.id.IDS_SEARCH_RESULT_TITLE = "IDS_SEARCH_RESULT_TITLE";
    String.id.IDS_SEARCH_RESULT_TITLE_TC = "IDS_SEARCH_RESULT_TITLE_TC";
    String.id.IDS_SEARCH_SEARCHSTARTED = "IDS_SEARCH_SEARCHSTARTED";
    String.id.IDS_SEARCH_SONGLOCAL_LABEL = "IDS_SEARCH_SONGLOCAL_LABEL";
    String.id.IDS_SEARCH_SONGMARKETPLACE_LABEL = "IDS_SEARCH_SONGMARKETPLACE_LABEL";
    String.id.IDS_SEARCH_SONGS_GROUP_HEADER_LABEL = "IDS_SEARCH_SONGS_GROUP_HEADER_LABEL";
    String.id.IDS_SEARCH_SONGS_PIVOT_LABEL = "IDS_SEARCH_SONGS_PIVOT_LABEL";
    String.id.IDS_SEARCH_TRACKS_RESULT_TITLE = "IDS_SEARCH_TRACKS_RESULT_TITLE";
    String.id.IDS_SEARCH_TVSERIESLOCAL_LABEL = "IDS_SEARCH_TVSERIESLOCAL_LABEL";
    String.id.IDS_SEARCH_TVSERIESMARKETPLACE_LABEL = "IDS_SEARCH_TVSERIESMARKETPLACE_LABEL";
    String.id.IDS_SEARCH_VIDEOHUB_TITLE = "IDS_SEARCH_VIDEOHUB_TITLE";
    String.id.IDS_SEE_ALL_BUTTON = "IDS_SEE_ALL_BUTTON";
    String.id.IDS_SEE_LESS_BUTTON = "IDS_SEE_LESS_BUTTON";
    String.id.IDS_SEE_MORE_BUTTON = "IDS_SEE_MORE_BUTTON";
    String.id.IDS_SERVICE_UNAVAILABLE_CAPTION = "IDS_SERVICE_UNAVAILABLE_CAPTION";
    String.id.IDS_SET_BUTTON = "IDS_SET_BUTTON";
    String.id.IDS_SETTINGS_ABOUT_ABOUT_ADS = "IDS_SETTINGS_ABOUT_ABOUT_ADS";
    String.id.IDS_SETTINGS_ABOUT_CODE_CONDUCT = "IDS_SETTINGS_ABOUT_CODE_CONDUCT";
    String.id.IDS_SETTINGS_ABOUT_DESCRIPTION = "IDS_SETTINGS_ABOUT_DESCRIPTION";
    String.id.IDS_SETTINGS_ABOUT_LEARN_MORE = "IDS_SETTINGS_ABOUT_LEARN_MORE";
    String.id.IDS_SETTINGS_ABOUT_ONLINE_CONTENT = "IDS_SETTINGS_ABOUT_ONLINE_CONTENT";
    String.id.IDS_SETTINGS_ABOUT_PRERELEASE_VERSION = "IDS_SETTINGS_ABOUT_PRERELEASE_VERSION";
    String.id.IDS_SETTINGS_ABOUT_PRIVACY_STATEMENT = "IDS_SETTINGS_ABOUT_PRIVACY_STATEMENT";
    String.id.IDS_SETTINGS_ABOUT_SUPPORT = "IDS_SETTINGS_ABOUT_SUPPORT";
    String.id.IDS_SETTINGS_ABOUT_SUPPORT_WEB_LINK = "IDS_SETTINGS_ABOUT_SUPPORT_WEB_LINK";
    String.id.IDS_SETTINGS_ABOUT_TITLE = "IDS_SETTINGS_ABOUT_TITLE";
    String.id.IDS_SETTINGS_ABOUT_TOS = "IDS_SETTINGS_ABOUT_TOS";
    String.id.IDS_SETTINGS_ABOUT_VERSION_FORMAT = "IDS_SETTINGS_ABOUT_VERSION_FORMAT";
    String.id.IDS_SETTINGS_ACCOUNT_BILLING_HISTORY_TC = "IDS_SETTINGS_ACCOUNT_BILLING_HISTORY_TC";
    String.id.IDS_SETTINGS_ACCOUNT_CONTACT_INFO_TC = "IDS_SETTINGS_ACCOUNT_CONTACT_INFO_TC";
    String.id.IDS_SETTINGS_ACCOUNT_CONTACT_PREFERENCES_TC = "IDS_SETTINGS_ACCOUNT_CONTACT_PREFERENCES_TC";
    String.id.IDS_SETTINGS_ACCOUNT_CURRENT_USER = "IDS_SETTINGS_ACCOUNT_CURRENT_USER";
    String.id.IDS_SETTINGS_ACCOUNT_MANAGE_DEVICES_DESC_TC = "IDS_SETTINGS_ACCOUNT_MANAGE_DEVICES_DESC_TC";
    String.id.IDS_SETTINGS_ACCOUNT_MANAGE_DEVICES_HEADER_TC = "IDS_SETTINGS_ACCOUNT_MANAGE_DEVICES_HEADER_TC";
    String.id.IDS_SETTINGS_ACCOUNT_MANAGE_PAYMENT_TC = "IDS_SETTINGS_ACCOUNT_MANAGE_PAYMENT_TC";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_DESC_NONE_TC = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_DESC_NONE_TC";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_DESC_UKNOWN_TC = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_DESC_UKNOWN_TC";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_FOURTEEN_DAY_TRIAL = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_FOURTEEN_DAY_TRIAL";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_FREE_ONE_MONTH = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_FREE_ONE_MONTH";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_FREE_THREE_MONTH = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_FREE_THREE_MONTH";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_FREE_TWELVE_MONTH = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_FREE_TWELVE_MONTH";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_HEADER_TC = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_HEADER_TC";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_ONE_MONTH = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_ONE_MONTH";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_PREPAID_ONE_MONTH = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_PREPAID_ONE_MONTH";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_PREPAID_THREE_MONTH = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_PREPAID_THREE_MONTH";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_PREPAID_TWELVE_MONTH = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_PREPAID_TWELVE_MONTH";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_THIRTY_DAY_TRIAL = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_THIRTY_DAY_TRIAL";
    String.id.IDS_SETTINGS_ACCOUNT_MUSIC_PASS_TWELVE_MONTH = "IDS_SETTINGS_ACCOUNT_MUSIC_PASS_TWELVE_MONTH";
    String.id.IDS_SETTINGS_ACCOUNT_PRIVACY_SETTINGS_TC = "IDS_SETTINGS_ACCOUNT_PRIVACY_SETTINGS_TC";
    String.id.IDS_SETTINGS_ACCOUNT_REDEEM_CODE_DESC_TC = "IDS_SETTINGS_ACCOUNT_REDEEM_CODE_DESC_TC";
    String.id.IDS_SETTINGS_ACCOUNT_REDEEM_CODE_HEADER_TC = "IDS_SETTINGS_ACCOUNT_REDEEM_CODE_HEADER_TC";
    String.id.IDS_SETTINGS_ACCOUNT_SIGN_OUT_TC = "IDS_SETTINGS_ACCOUNT_SIGN_OUT_TC";
    String.id.IDS_SETTINGS_ACCOUNT_TITLE = "IDS_SETTINGS_ACCOUNT_TITLE";
    String.id.IDS_SETTINGS_ACCOUNT_TITLE_TC = "IDS_SETTINGS_ACCOUNT_TITLE_TC";
    String.id.IDS_SETTINGS_ACCOUNT_YOUR_ACCOUNT_TC = "IDS_SETTINGS_ACCOUNT_YOUR_ACCOUNT_TC";
    String.id.IDS_SETTINGS_CAPTIONS_AUTO_MUTED = "IDS_SETTINGS_CAPTIONS_AUTO_MUTED";
    String.id.IDS_SETTINGS_CAPTIONS_BACKGROUND_COLOR = "IDS_SETTINGS_CAPTIONS_BACKGROUND_COLOR";
    String.id.IDS_SETTINGS_CAPTIONS_BACKGROUND_OPACITY = "IDS_SETTINGS_CAPTIONS_BACKGROUND_OPACITY";
    String.id.IDS_SETTINGS_CAPTIONS_CHARACTER_COLOR = "IDS_SETTINGS_CAPTIONS_CHARACTER_COLOR";
    String.id.IDS_SETTINGS_CAPTIONS_CHARACTER_OPACITY = "IDS_SETTINGS_CAPTIONS_CHARACTER_OPACITY";
    String.id.IDS_SETTINGS_CAPTIONS_CHARACTER_SIZE = "IDS_SETTINGS_CAPTIONS_CHARACTER_SIZE";
    String.id.IDS_SETTINGS_CAPTIONS_COLOR_BLACK = "IDS_SETTINGS_CAPTIONS_COLOR_BLACK";
    String.id.IDS_SETTINGS_CAPTIONS_COLOR_BLUE = "IDS_SETTINGS_CAPTIONS_COLOR_BLUE";
    String.id.IDS_SETTINGS_CAPTIONS_COLOR_CYAN = "IDS_SETTINGS_CAPTIONS_COLOR_CYAN";
    String.id.IDS_SETTINGS_CAPTIONS_COLOR_GREEN = "IDS_SETTINGS_CAPTIONS_COLOR_GREEN";
    String.id.IDS_SETTINGS_CAPTIONS_COLOR_MAGENTA = "IDS_SETTINGS_CAPTIONS_COLOR_MAGENTA";
    String.id.IDS_SETTINGS_CAPTIONS_COLOR_RED = "IDS_SETTINGS_CAPTIONS_COLOR_RED";
    String.id.IDS_SETTINGS_CAPTIONS_COLOR_WHITE = "IDS_SETTINGS_CAPTIONS_COLOR_WHITE";
    String.id.IDS_SETTINGS_CAPTIONS_COLOR_YELLOW = "IDS_SETTINGS_CAPTIONS_COLOR_YELLOW";
    String.id.IDS_SETTINGS_CAPTIONS_DEFAULT = "IDS_SETTINGS_CAPTIONS_DEFAULT";
    String.id.IDS_SETTINGS_CAPTIONS_EDGE_ATTRIBUTE = "IDS_SETTINGS_CAPTIONS_EDGE_ATTRIBUTE";
    String.id.IDS_SETTINGS_CAPTIONS_EDGE_DEPRESSED = "IDS_SETTINGS_CAPTIONS_EDGE_DEPRESSED";
    String.id.IDS_SETTINGS_CAPTIONS_EDGE_DROP = "IDS_SETTINGS_CAPTIONS_EDGE_DROP";
    String.id.IDS_SETTINGS_CAPTIONS_EDGE_NONE = "IDS_SETTINGS_CAPTIONS_EDGE_NONE";
    String.id.IDS_SETTINGS_CAPTIONS_EDGE_RAISED = "IDS_SETTINGS_CAPTIONS_EDGE_RAISED";
    String.id.IDS_SETTINGS_CAPTIONS_EDGE_UNIFORMED = "IDS_SETTINGS_CAPTIONS_EDGE_UNIFORMED";
    String.id.IDS_SETTINGS_CAPTIONS_FONT_CASUAL = "IDS_SETTINGS_CAPTIONS_FONT_CASUAL";
    String.id.IDS_SETTINGS_CAPTIONS_FONT_CURSIVE = "IDS_SETTINGS_CAPTIONS_FONT_CURSIVE";
    String.id.IDS_SETTINGS_CAPTIONS_FONT_MONOSPACED_SANS = "IDS_SETTINGS_CAPTIONS_FONT_MONOSPACED_SANS";
    String.id.IDS_SETTINGS_CAPTIONS_FONT_MONOSPACED_SERIF = "IDS_SETTINGS_CAPTIONS_FONT_MONOSPACED_SERIF";
    String.id.IDS_SETTINGS_CAPTIONS_FONT_PROPORTIONAL_SANS = "IDS_SETTINGS_CAPTIONS_FONT_PROPORTIONAL_SANS";
    String.id.IDS_SETTINGS_CAPTIONS_FONT_PROPORTIONAL_SERIF = "IDS_SETTINGS_CAPTIONS_FONT_PROPORTIONAL_SERIF";
    String.id.IDS_SETTINGS_CAPTIONS_FONT_SMALL_CAPS = "IDS_SETTINGS_CAPTIONS_FONT_SMALL_CAPS";
    String.id.IDS_SETTINGS_CAPTIONS_FONT_STYLE = "IDS_SETTINGS_CAPTIONS_FONT_STYLE";
    String.id.IDS_SETTINGS_CAPTIONS_OPACITY_OPAQUE = "IDS_SETTINGS_CAPTIONS_OPACITY_OPAQUE";
    String.id.IDS_SETTINGS_CAPTIONS_OPACITY_SEMI_TRANSPARENT = "IDS_SETTINGS_CAPTIONS_OPACITY_SEMI_TRANSPARENT";
    String.id.IDS_SETTINGS_CAPTIONS_OPACITY_TRANSPARENT = "IDS_SETTINGS_CAPTIONS_OPACITY_TRANSPARENT";
    String.id.IDS_SETTINGS_CAPTIONS_PREVIEW = "IDS_SETTINGS_CAPTIONS_PREVIEW";
    String.id.IDS_SETTINGS_CAPTIONS_PREVIEW_TITLE = "IDS_SETTINGS_CAPTIONS_PREVIEW_TITLE";
    String.id.IDS_SETTINGS_CAPTIONS_RESET_TO_DEFAULT = "IDS_SETTINGS_CAPTIONS_RESET_TO_DEFAULT";
    String.id.IDS_SETTINGS_CAPTIONS_SIZE_100 = "IDS_SETTINGS_CAPTIONS_SIZE_100";
    String.id.IDS_SETTINGS_CAPTIONS_SIZE_150 = "IDS_SETTINGS_CAPTIONS_SIZE_150";
    String.id.IDS_SETTINGS_CAPTIONS_SIZE_200 = "IDS_SETTINGS_CAPTIONS_SIZE_200";
    String.id.IDS_SETTINGS_CAPTIONS_SIZE_50 = "IDS_SETTINGS_CAPTIONS_SIZE_50";
    String.id.IDS_SETTINGS_CAPTIONS_TITLE = "IDS_SETTINGS_CAPTIONS_TITLE";
    String.id.IDS_SETTINGS_CAPTIONS_WINDOW_COLOR = "IDS_SETTINGS_CAPTIONS_WINDOW_COLOR";
    String.id.IDS_SETTINGS_CAPTIONS_WINDOW_OPACITY = "IDS_SETTINGS_CAPTIONS_WINDOW_OPACITY";
    String.id.IDS_SETTINGS_CLOUD_COLLECTION_OFFLINE_TOGGLE_TITLE = "IDS_SETTINGS_CLOUD_COLLECTION_OFFLINE_TOGGLE_TITLE";
    String.id.IDS_SETTINGS_CLOUD_COLLECTION_OFFLINE_TOGGLE_TITLE_FREE = "IDS_SETTINGS_CLOUD_COLLECTION_OFFLINE_TOGGLE_TITLE_FREE";
    String.id.IDS_SETTINGS_FEEDBACK_BUYINGMUSIC = "IDS_SETTINGS_FEEDBACK_BUYINGMUSIC";
    String.id.IDS_SETTINGS_FEEDBACK_BUYINGMUSIC_DETAILS = "IDS_SETTINGS_FEEDBACK_BUYINGMUSIC_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_BUYINGVIDEO = "IDS_SETTINGS_FEEDBACK_BUYINGVIDEO";
    String.id.IDS_SETTINGS_FEEDBACK_BUYINGVIDEO_DETAILS = "IDS_SETTINGS_FEEDBACK_BUYINGVIDEO_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_CANCEL = "IDS_SETTINGS_FEEDBACK_CANCEL";
    String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN = "IDS_SETTINGS_FEEDBACK_CANTSIGNIN";
    String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN_DETAILS = "IDS_SETTINGS_FEEDBACK_CANTSIGNIN_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_COLLECTIONVIEW = "IDS_SETTINGS_FEEDBACK_COLLECTIONVIEW";
    String.id.IDS_SETTINGS_FEEDBACK_COMMENT_DESCRIPTION = "IDS_SETTINGS_FEEDBACK_COMMENT_DESCRIPTION";
    String.id.IDS_SETTINGS_FEEDBACK_CONNECTED = "IDS_SETTINGS_FEEDBACK_CONNECTED";
    String.id.IDS_SETTINGS_FEEDBACK_CONNECTED_DETAILS = "IDS_SETTINGS_FEEDBACK_CONNECTED_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_CONTENT_CONTENT = "IDS_SETTINGS_FEEDBACK_CONTENT_CONTENT";
    String.id.IDS_SETTINGS_FEEDBACK_CONTENT_PLAYBACK = "IDS_SETTINGS_FEEDBACK_CONTENT_PLAYBACK";
    String.id.IDS_SETTINGS_FEEDBACK_CONTENTDISCOVERY = "IDS_SETTINGS_FEEDBACK_CONTENTDISCOVERY";
    String.id.IDS_SETTINGS_FEEDBACK_DESCRIPTION = "IDS_SETTINGS_FEEDBACK_DESCRIPTION";
    String.id.IDS_SETTINGS_FEEDBACK_DESCRIPTION_GAMERTAG = "IDS_SETTINGS_FEEDBACK_DESCRIPTION_GAMERTAG";
    String.id.IDS_SETTINGS_FEEDBACK_DOWNLOADINGMUSIC = "IDS_SETTINGS_FEEDBACK_DOWNLOADINGMUSIC";
    String.id.IDS_SETTINGS_FEEDBACK_DOWNLOADINGVIDEO = "IDS_SETTINGS_FEEDBACK_DOWNLOADINGVIDEO";
    String.id.IDS_SETTINGS_FEEDBACK_EPISODEAUTOPLAY = "IDS_SETTINGS_FEEDBACK_EPISODEAUTOPLAY";
    String.id.IDS_SETTINGS_FEEDBACK_GENERALERROR_DETAILS = "IDS_SETTINGS_FEEDBACK_GENERALERROR_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_GENERALERRORS = "IDS_SETTINGS_FEEDBACK_GENERALERRORS";
    String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT = "IDS_SETTINGS_FEEDBACK_GHOSTTEXT";
    String.id.IDS_SETTINGS_FEEDBACK_GREATAPP = "IDS_SETTINGS_FEEDBACK_GREATAPP";
    String.id.IDS_SETTINGS_FEEDBACK_MUSICFORMAT = "IDS_SETTINGS_FEEDBACK_MUSICFORMAT";
    String.id.IDS_SETTINGS_FEEDBACK_MUSICFORMAT_DETAILS = "IDS_SETTINGS_FEEDBACK_MUSICFORMAT_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_MUSICMETADATA = "IDS_SETTINGS_FEEDBACK_MUSICMETADATA";
    String.id.IDS_SETTINGS_FEEDBACK_MUSICMETADATA_DETAILS = "IDS_SETTINGS_FEEDBACK_MUSICMETADATA_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_NOCONNECTION = "IDS_SETTINGS_FEEDBACK_NOCONNECTION";
    String.id.IDS_SETTINGS_FEEDBACK_OPTION_APPISSUE = "IDS_SETTINGS_FEEDBACK_OPTION_APPISSUE";
    String.id.IDS_SETTINGS_FEEDBACK_OPTION_CONTENTISSUE = "IDS_SETTINGS_FEEDBACK_OPTION_CONTENTISSUE";
    String.id.IDS_SETTINGS_FEEDBACK_OPTION_DESCRIPTION = "IDS_SETTINGS_FEEDBACK_OPTION_DESCRIPTION";
    String.id.IDS_SETTINGS_FEEDBACK_OPTION_DISLIKE = "IDS_SETTINGS_FEEDBACK_OPTION_DISLIKE";
    String.id.IDS_SETTINGS_FEEDBACK_OPTION_LIKE = "IDS_SETTINGS_FEEDBACK_OPTION_LIKE";
    String.id.IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC = "IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC";
    String.id.IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC_DETAILS = "IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO = "IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO";
    String.id.IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO_DETAILS = "IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_PROVIDE_DETAILS = "IDS_SETTINGS_FEEDBACK_PROVIDE_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_PROVIDE_VERBOSE_DETAILS = "IDS_SETTINGS_FEEDBACK_PROVIDE_VERBOSE_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_REQUESTCONTENT = "IDS_SETTINGS_FEEDBACK_REQUESTCONTENT";
    String.id.IDS_SETTINGS_FEEDBACK_SAS_TEXT = "IDS_SETTINGS_FEEDBACK_SAS_TEXT";
    String.id.IDS_SETTINGS_FEEDBACK_STREAMINGMUSIC = "IDS_SETTINGS_FEEDBACK_STREAMINGMUSIC";
    String.id.IDS_SETTINGS_FEEDBACK_STREAMINGMUSIC_DETAILS = "IDS_SETTINGS_FEEDBACK_STREAMINGMUSIC_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_STREAMINGVIDEO = "IDS_SETTINGS_FEEDBACK_STREAMINGVIDEO";
    String.id.IDS_SETTINGS_FEEDBACK_STREAMINGVIDEO_DETAILS = "IDS_SETTINGS_FEEDBACK_STREAMINGVIDEO_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_SUBMIT = "IDS_SETTINGS_FEEDBACK_SUBMIT";
    String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION = "IDS_SETTINGS_FEEDBACK_SUGGESTION";
    String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_DETAILS = "IDS_SETTINGS_FEEDBACK_SUGGESTION_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_GOTIDEAS = "IDS_SETTINGS_FEEDBACK_SUGGESTION_GOTIDEAS";
    String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_MUSIC = "IDS_SETTINGS_FEEDBACK_SUGGESTION_MUSIC";
    String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_VIDEO = "IDS_SETTINGS_FEEDBACK_SUGGESTION_VIDEO";
    String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_XBOXMUSIC = "IDS_SETTINGS_FEEDBACK_SUGGESTION_XBOXMUSIC";
    String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_XBOXVIDEO = "IDS_SETTINGS_FEEDBACK_SUGGESTION_XBOXVIDEO";
    String.id.IDS_SETTINGS_FEEDBACK_SYNC = "IDS_SETTINGS_FEEDBACK_SYNC";
    String.id.IDS_SETTINGS_FEEDBACK_TITLE = "IDS_SETTINGS_FEEDBACK_TITLE";
    String.id.IDS_SETTINGS_FEEDBACK_TRAILER = "IDS_SETTINGS_FEEDBACK_TRAILER";
    String.id.IDS_SETTINGS_FEEDBACK_TRAILER_DETAILS = "IDS_SETTINGS_FEEDBACK_TRAILER_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_USERVOICE_XBOXVIDEO = "IDS_SETTINGS_FEEDBACK_USERVOICE_XBOXVIDEO";
    String.id.IDS_SETTINGS_FEEDBACK_VIDEOFORMAT = "IDS_SETTINGS_FEEDBACK_VIDEOFORMAT";
    String.id.IDS_SETTINGS_FEEDBACK_VIDEOFORMAT_DETAILS = "IDS_SETTINGS_FEEDBACK_VIDEOFORMAT_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_WRONGMUSIC = "IDS_SETTINGS_FEEDBACK_WRONGMUSIC";
    String.id.IDS_SETTINGS_FEEDBACK_WRONGMUSIC_DETAILS = "IDS_SETTINGS_FEEDBACK_WRONGMUSIC_DETAILS";
    String.id.IDS_SETTINGS_FEEDBACK_WRONGVIDEO = "IDS_SETTINGS_FEEDBACK_WRONGVIDEO";
    String.id.IDS_SETTINGS_FORGET_ME = "IDS_SETTINGS_FORGET_ME";
    String.id.IDS_SETTINGS_FREE_PLAY_LIMITS_METER_PERCENTAGE = "IDS_SETTINGS_FREE_PLAY_LIMITS_METER_PERCENTAGE";
    String.id.IDS_SETTINGS_HELP_TITLE = "IDS_SETTINGS_HELP_TITLE";
    String.id.IDS_SETTINGS_IMPRINT_LEGAL_LINK_TITLE = "IDS_SETTINGS_IMPRINT_LEGAL_LINK_TITLE";
    String.id.IDS_SETTINGS_PREFERENCE_ACCOUNT = "IDS_SETTINGS_PREFERENCE_ACCOUNT";
    String.id.IDS_SETTINGS_PREFERENCE_TITLE = "IDS_SETTINGS_PREFERENCE_TITLE";
    String.id.IDS_SETTINGS_PROMPT_TOGGLE_TITLE = "IDS_SETTINGS_PROMPT_TOGGLE_TITLE";
    String.id.IDS_SETTINGS_SWITCH_USER = "IDS_SETTINGS_SWITCH_USER";
    String.id.IDS_SETTINGS_SWITCH_USER_DESCRIPTION = "IDS_SETTINGS_SWITCH_USER_DESCRIPTION";
    String.id.IDS_SETTINGS_TITLE = "IDS_SETTINGS_TITLE";
    String.id.IDS_SHARE_EMPTY_MESSAGE_ALBUM = "IDS_SHARE_EMPTY_MESSAGE_ALBUM";
    String.id.IDS_SHARE_EMPTY_MESSAGE_ARTIST = "IDS_SHARE_EMPTY_MESSAGE_ARTIST";
    String.id.IDS_SHARE_EMPTY_MESSAGE_MOVIE = "IDS_SHARE_EMPTY_MESSAGE_MOVIE";
    String.id.IDS_SHARE_EMPTY_MESSAGE_MUSIC = "IDS_SHARE_EMPTY_MESSAGE_MUSIC";
    String.id.IDS_SHARE_EMPTY_MESSAGE_OTHER_VIDEO = "IDS_SHARE_EMPTY_MESSAGE_OTHER_VIDEO";
    String.id.IDS_SHARE_EMPTY_MESSAGE_TRACK = "IDS_SHARE_EMPTY_MESSAGE_TRACK";
    String.id.IDS_SHARE_EMPTY_MESSAGE_TV_EPISODE = "IDS_SHARE_EMPTY_MESSAGE_TV_EPISODE";
    String.id.IDS_SHARE_EMPTY_MESSAGE_TV_SEASON = "IDS_SHARE_EMPTY_MESSAGE_TV_SEASON";
    String.id.IDS_SHARE_EMPTY_MESSAGE_TV_SERIES = "IDS_SHARE_EMPTY_MESSAGE_TV_SERIES";
    String.id.IDS_SHARE_EMPTY_MESSAGE_VIDEO = "IDS_SHARE_EMPTY_MESSAGE_VIDEO";
    String.id.IDS_SHARE_FILES_MUSIC_DESCRIPTION = "IDS_SHARE_FILES_MUSIC_DESCRIPTION";
    String.id.IDS_SHARE_FRIEND_REQUEST = "IDS_SHARE_FRIEND_REQUEST";
    String.id.IDS_SHARE_FRIEND_REQUEST_LINK = "IDS_SHARE_FRIEND_REQUEST_LINK";
    String.id.IDS_SHARE_GAME_TEXT = "IDS_SHARE_GAME_TEXT";
    String.id.IDS_SHARE_LEADER_BOARD_TEXT = "IDS_SHARE_LEADER_BOARD_TEXT";
    String.id.IDS_SHARE_MORE_MICROSOFT_DOT_COM = "IDS_SHARE_MORE_MICROSOFT_DOT_COM";
    String.id.IDS_SHARE_MORE_XBOX_DOT_COM = "IDS_SHARE_MORE_XBOX_DOT_COM";
    String.id.IDS_SHARE_MORE_XBOXVIDEO_DOT_COM = "IDS_SHARE_MORE_XBOXVIDEO_DOT_COM";
    String.id.IDS_SHARE_MUSIC_ALBUM_COUNT_PLURAL = "IDS_SHARE_MUSIC_ALBUM_COUNT_PLURAL";
    String.id.IDS_SHARE_MUSIC_CONCATENATION = "IDS_SHARE_MUSIC_CONCATENATION";
    String.id.IDS_SHARE_MUSIC_PLAYLIST_COUNT_PLURAL = "IDS_SHARE_MUSIC_PLAYLIST_COUNT_PLURAL";
    String.id.IDS_SHARE_MUSIC_SONG_COUNT_PLURAL = "IDS_SHARE_MUSIC_SONG_COUNT_PLURAL";
    String.id.IDS_SHARE_PROFILE = "IDS_SHARE_PROFILE";
    String.id.IDS_SHARE_SOCIAL_ACHIEVEMENT_TEXT = "IDS_SHARE_SOCIAL_ACHIEVEMENT_TEXT";
    String.id.IDS_SHARE_SOCIAL_UNACHIEVEMENT_TEXT = "IDS_SHARE_SOCIAL_UNACHIEVEMENT_TEXT";
    String.id.IDS_SHARE_TELL_FRIEND_ADD = "IDS_SHARE_TELL_FRIEND_ADD";
    String.id.IDS_SHOW_ALL_MODIFIER = "IDS_SHOW_ALL_MODIFIER";
    String.id.IDS_SHOW_FEATURED_MODIFIER = "IDS_SHOW_FEATURED_MODIFIER";
    String.id.IDS_SIGNIN_COMPLETE = "IDS_SIGNIN_COMPLETE";
    String.id.IDS_SIGNIN_ERROR = "IDS_SIGNIN_ERROR";
    String.id.IDS_SIGNIN_ERROR_CAPTION = "IDS_SIGNIN_ERROR_CAPTION";
    String.id.IDS_SIGNIN_ERROR_MORE_INFO = "IDS_SIGNIN_ERROR_MORE_INFO";
    String.id.IDS_SIGNIN_MIXED_REGION_ERROR_DESC = "IDS_SIGNIN_MIXED_REGION_ERROR_DESC";
    String.id.IDS_SIGNIN_MIXED_REGION_ERROR_TITLE = "IDS_SIGNIN_MIXED_REGION_ERROR_TITLE";
    String.id.IDS_SIGNIN_NOTIFICATION_SIGNIN_TEXT = "IDS_SIGNIN_NOTIFICATION_SIGNIN_TEXT";
    String.id.IDS_SIGNIN_NOTIFICATION_SIGNIN_TITLE = "IDS_SIGNIN_NOTIFICATION_SIGNIN_TITLE";
    String.id.IDS_SIGNIN_NOTIFICATION_SIGNUP_TEXT = "IDS_SIGNIN_NOTIFICATION_SIGNUP_TEXT";
    String.id.IDS_SIGNIN_NOTIFICATION_SIGNUP_TITLE = "IDS_SIGNIN_NOTIFICATION_SIGNUP_TITLE";
    String.id.IDS_SIGNIN_PROGRESS = "IDS_SIGNIN_PROGRESS";
    String.id.IDS_SIGNIN_RETRY = "IDS_SIGNIN_RETRY";
    String.id.IDS_SMARTDJ_ERROR_CAPTION = "IDS_SMARTDJ_ERROR_CAPTION";
    String.id.IDS_SNAPPED_DETAILS_OVERVIEW_TITLE = "IDS_SNAPPED_DETAILS_OVERVIEW_TITLE";
    String.id.IDS_SNAPPED_DETAILS_PLAYLIST_TITLE = "IDS_SNAPPED_DETAILS_PLAYLIST_TITLE";
    String.id.IDS_SNAPPED_DETAILS_POSTROLL_TITLE = "IDS_SNAPPED_DETAILS_POSTROLL_TITLE";
    String.id.IDS_SNAPPED_DETAILS_RECOMMEND_LABEL = "IDS_SNAPPED_DETAILS_RECOMMEND_LABEL";
    String.id.IDS_SNAPPED_DETAILS_REPLAY_LABEL = "IDS_SNAPPED_DETAILS_REPLAY_LABEL";
    String.id.IDS_SNAPPED_DETAILS_SHUFFLE_ALL_LABEL = "IDS_SNAPPED_DETAILS_SHUFFLE_ALL_LABEL";
    String.id.IDS_SNAPPED_GO_FULLSCREEN_MESSAGE = "IDS_SNAPPED_GO_FULLSCREEN_MESSAGE";
    String.id.IDS_SNAPPED_MUSIC_GO_FULLSCREEN_TITLE = "IDS_SNAPPED_MUSIC_GO_FULLSCREEN_TITLE";
    String.id.IDS_SNAPPED_MUSIC_HEADER = "IDS_SNAPPED_MUSIC_HEADER";
    String.id.IDS_SNAPPED_MUSIC_UNSNAP_TEXT = "IDS_SNAPPED_MUSIC_UNSNAP_TEXT";
    String.id.IDS_SNAPPED_VIDEO_GO_FULLSCREEN_TITLE = "IDS_SNAPPED_VIDEO_GO_FULLSCREEN_TITLE";
    String.id.IDS_SNAPPED_VIDEO_UNSNAP_TEXT = "IDS_SNAPPED_VIDEO_UNSNAP_TEXT";
    String.id.IDS_SOCIAL_PIVOT = "IDS_SOCIAL_PIVOT";
    String.id.IDS_SORT_FILTER_CONTROL_ACC_FILTER = "IDS_SORT_FILTER_CONTROL_ACC_FILTER";
    String.id.IDS_SORT_FILTER_CONTROL_ACC_SORT = "IDS_SORT_FILTER_CONTROL_ACC_SORT";
    String.id.IDS_SORTED_BY = "IDS_SORTED_BY";
    String.id.IDS_SWIPE_HORIZONTALLY_TO_SELECT = "IDS_SWIPE_HORIZONTALLY_TO_SELECT";
    String.id.IDS_SWIPE_VERTICALLY_TO_SELECT = "IDS_SWIPE_VERTICALLY_TO_SELECT";
    String.id.IDS_TIME_ARIA_ZERO = "IDS_TIME_ARIA_ZERO";
    String.id.IDS_TIME_DISPLAY_ZERO = "IDS_TIME_DISPLAY_ZERO";
    String.id.IDS_TITLE_SUBTITLE = "IDS_TITLE_SUBTITLE";
    String.id.IDS_TOS_ACCEPT_BUTTON = "IDS_TOS_ACCEPT_BUTTON";
    String.id.IDS_TOS_ACCEPT_CHECKBOX = "IDS_TOS_ACCEPT_CHECKBOX";
    String.id.IDS_TOS_ACCEPT_ERROR = "IDS_TOS_ACCEPT_ERROR";
    String.id.IDS_TOS_CANCEL = "IDS_TOS_CANCEL";
    String.id.IDS_TOS_TEXT_HEADER = "IDS_TOS_TEXT_HEADER";
    String.id.IDS_TOS_TITLE = "IDS_TOS_TITLE";
    String.id.IDS_TOS_UPDATE_DESC = "IDS_TOS_UPDATE_DESC";
    String.id.IDS_TOS_UPDATE_HEADER = "IDS_TOS_UPDATE_HEADER";
    String.id.IDS_TOUCHPAD_SUBTITLE1 = "IDS_TOUCHPAD_SUBTITLE1";
    String.id.IDS_TOUCHPAD_SUBTITLE2 = "IDS_TOUCHPAD_SUBTITLE2";
    String.id.IDS_TOUCHPAD_TITLE = "IDS_TOUCHPAD_TITLE";
    String.id.IDS_TRANSPORT_CONTROLS_CLOSED_CAPTION_LABEL = "IDS_TRANSPORT_CONTROLS_CLOSED_CAPTION_LABEL";
    String.id.IDS_TRANSPORT_CONTROLS_CLOSED_CAPTION_NOT_AVAILABLE = "IDS_TRANSPORT_CONTROLS_CLOSED_CAPTION_NOT_AVAILABLE";
    String.id.IDS_TRANSPORT_CONTROLS_DISABLED_VOLUME_BUTTON = "IDS_TRANSPORT_CONTROLS_DISABLED_VOLUME_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_MUTE_LABEL = "IDS_TRANSPORT_CONTROLS_MUTE_LABEL";
    String.id.IDS_TRANSPORT_CONTROLS_NEXT_BUTTON = "IDS_TRANSPORT_CONTROLS_NEXT_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_PAUSE_BUTTON = "IDS_TRANSPORT_CONTROLS_PAUSE_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_PLAY_BUTTON = "IDS_TRANSPORT_CONTROLS_PLAY_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_PLAY_HERE_BUTTON = "IDS_TRANSPORT_CONTROLS_PLAY_HERE_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_PLAY_ON_XBOX_BUTTON = "IDS_TRANSPORT_CONTROLS_PLAY_ON_XBOX_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_PLAYBACK_OPTIONS_BUTTON = "IDS_TRANSPORT_CONTROLS_PLAYBACK_OPTIONS_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_PREVIOUS_BUTTON = "IDS_TRANSPORT_CONTROLS_PREVIOUS_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_REPEAT_BUTTON = "IDS_TRANSPORT_CONTROLS_REPEAT_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_REPEAT_OFF_BUTTON = "IDS_TRANSPORT_CONTROLS_REPEAT_OFF_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_REPEAT_ON_BUTTON = "IDS_TRANSPORT_CONTROLS_REPEAT_ON_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_RESUME_ON_XBOX_BUTTON = "IDS_TRANSPORT_CONTROLS_RESUME_ON_XBOX_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_SEEKBAR_LABEL = "IDS_TRANSPORT_CONTROLS_SEEKBAR_LABEL";
    String.id.IDS_TRANSPORT_CONTROLS_SHUFFLE_BUTTON = "IDS_TRANSPORT_CONTROLS_SHUFFLE_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_SHUFFLE_OFF_BUTTON = "IDS_TRANSPORT_CONTROLS_SHUFFLE_OFF_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_SHUFFLE_ON_BUTTON = "IDS_TRANSPORT_CONTROLS_SHUFFLE_ON_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_TURN_REPEAT_OFF_BUTTON = "IDS_TRANSPORT_CONTROLS_TURN_REPEAT_OFF_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_TURN_REPEAT_ON_BUTTON = "IDS_TRANSPORT_CONTROLS_TURN_REPEAT_ON_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_TURN_SHUFFLE_OFF_BUTTON = "IDS_TRANSPORT_CONTROLS_TURN_SHUFFLE_OFF_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_TURN_SHUFFLE_ON_BUTTON = "IDS_TRANSPORT_CONTROLS_TURN_SHUFFLE_ON_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_UNMUTE_LABEL = "IDS_TRANSPORT_CONTROLS_UNMUTE_LABEL";
    String.id.IDS_TRANSPORT_CONTROLS_VOLUME_BUTTON = "IDS_TRANSPORT_CONTROLS_VOLUME_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_VOLUME_MUTE_BUTTON = "IDS_TRANSPORT_CONTROLS_VOLUME_MUTE_BUTTON";
    String.id.IDS_TRANSPORT_CONTROLS_VOLUME_SLIDER_LABEL = "IDS_TRANSPORT_CONTROLS_VOLUME_SLIDER_LABEL";
    String.id.IDS_TRANSPORT_CONTROLS_XBOX_CONTROLLER_BUTTON = "IDS_TRANSPORT_CONTROLS_XBOX_CONTROLLER_BUTTON";
    String.id.IDS_TV_SEASON_NAME = "IDS_TV_SEASON_NAME";
    String.id.IDS_TV_SEASON_NAME_LC = "IDS_TV_SEASON_NAME_LC";
    String.id.IDS_UNKNOWN_VALUE = "IDS_UNKNOWN_VALUE";
    String.id.IDS_UNPIN_FROM_START_SCREEN_BUTTON = "IDS_UNPIN_FROM_START_SCREEN_BUTTON";
    String.id.IDS_UPGRADE_WINDOWS_8_1_NOTIFICATION = "IDS_UPGRADE_WINDOWS_8_1_NOTIFICATION";
    String.id.IDS_VERSION_CHECK_SERVICE_FOR_FEATURES_TEXT = "IDS_VERSION_CHECK_SERVICE_FOR_FEATURES_TEXT";
    String.id.IDS_VERSION_CHECK_SERVICE_TITLE = "IDS_VERSION_CHECK_SERVICE_TITLE";
    String.id.IDS_VERSION_CHECK_SIGNIN_TEXT = "IDS_VERSION_CHECK_SIGNIN_TEXT";
    String.id.IDS_VERSION_CHECK_UPGRADE_CAPTION = "IDS_VERSION_CHECK_UPGRADE_CAPTION";
    String.id.IDS_VERSION_CHECK_UPGRADE_LINK = "IDS_VERSION_CHECK_UPGRADE_LINK";
    String.id.IDS_VERSION_CHECK_UPGRADE_TEXT = "IDS_VERSION_CHECK_UPGRADE_TEXT";
    String.id.IDS_VIDEO_APP_TITLE = "IDS_VIDEO_APP_TITLE";
    String.id.IDS_VIDEO_COLLECTION_EMPTY = "IDS_VIDEO_COLLECTION_EMPTY";
    String.id.IDS_VIDEO_COLLECTION_EMPTY_HOME_LINK = "IDS_VIDEO_COLLECTION_EMPTY_HOME_LINK";
    String.id.IDS_VIDEO_COLLECTION_EMPTY_SEARCH_LINK = "IDS_VIDEO_COLLECTION_EMPTY_SEARCH_LINK";
    String.id.IDS_VIDEO_FEATURED_PIVOT = "IDS_VIDEO_FEATURED_PIVOT";
    String.id.IDS_VIDEO_GENRES_PIVOT = "IDS_VIDEO_GENRES_PIVOT";
    String.id.IDS_VIDEO_NETWORKS_PIVOT = "IDS_VIDEO_NETWORKS_PIVOT";
    String.id.IDS_VIDEO_NEW_RELEASES_PIVOT = "IDS_VIDEO_NEW_RELEASES_PIVOT";
    String.id.IDS_VIDEO_PIVOT = "IDS_VIDEO_PIVOT";
    String.id.IDS_VIDEO_STUDIOS_PIVOT = "IDS_VIDEO_STUDIOS_PIVOT";
    String.id.IDS_VIDEO_TOP_SELLING_PIVOT = "IDS_VIDEO_TOP_SELLING_PIVOT";
    String.id.IDS_VIDEO_TV_FREE_EPISODES_PIVOT = "IDS_VIDEO_TV_FREE_EPISODES_PIVOT";
    String.id.IDS_VIDEO_TV_FROM_LAST_NIGHT_PIVOT = "IDS_VIDEO_TV_FROM_LAST_NIGHT_PIVOT";
    String.id.IDS_VIDEO2_MOVIE_MARKETPLACE_ACTIONLINK = "IDS_VIDEO2_MOVIE_MARKETPLACE_ACTIONLINK";
    String.id.IDS_VIDEO2_MY_VIDEO_COLLECTION_ACTIONLINK = "IDS_VIDEO2_MY_VIDEO_COLLECTION_ACTIONLINK";
    String.id.IDS_VIDEO2_TELEVISION_MARKETPLACE_ACTIONLINK = "IDS_VIDEO2_TELEVISION_MARKETPLACE_ACTIONLINK";
    String.id.IDS_VIEW_ALL = "IDS_VIEW_ALL";
    String.id.IDS_WEBHOST_FIRST_PURCHASE_PROMPT_BUTTON_NEXT = "IDS_WEBHOST_FIRST_PURCHASE_PROMPT_BUTTON_NEXT";
    String.id.IDS_WEBHOST_FIRST_PURCHASE_PROMPT_DESCRIPTION = "IDS_WEBHOST_FIRST_PURCHASE_PROMPT_DESCRIPTION";
    String.id.IDS_WEBHOST_FIRST_PURCHASE_PROMPT_TITLE = "IDS_WEBHOST_FIRST_PURCHASE_PROMPT_TITLE";
    String.id.IDS_WEBHOST_RESIZE_WINDOW_BODY = "IDS_WEBHOST_RESIZE_WINDOW_BODY";
    String.id.IDS_WEBHOST_RESIZE_WINDOW_TITLE = "IDS_WEBHOST_RESIZE_WINDOW_TITLE";
    String.id.IDS_WEBHOST_ROTATE_BODY = "IDS_WEBHOST_ROTATE_BODY";
    String.id.IDS_WEBHOST_ROTATE_OR_RESIZE_BODY = "IDS_WEBHOST_ROTATE_OR_RESIZE_BODY";
    String.id.IDS_WEBHOST_ROTATE_OR_RESIZE_SHORT_BODY = "IDS_WEBHOST_ROTATE_OR_RESIZE_SHORT_BODY";
    String.id.IDS_WEBHOST_ROTATE_OR_RESIZE_SHORT_TITLE = "IDS_WEBHOST_ROTATE_OR_RESIZE_SHORT_TITLE";
    String.id.IDS_WEBHOST_ROTATE_TITLE = "IDS_WEBHOST_ROTATE_TITLE";
    String.id.IDS_WHATSNEW_NOTIFICATION_SUBTITLE = "IDS_WHATSNEW_NOTIFICATION_SUBTITLE";
    String.id.IDS_WHATSNEW_POPUP_LINK = "IDS_WHATSNEW_POPUP_LINK";
    String.id.IDS_WILD_CARD_SYMBOL = "IDS_WILD_CARD_SYMBOL";
    String.id.IDS_XBOX_GET_FOR_XBOX = "IDS_XBOX_GET_FOR_XBOX";
    String.id.IDS_XBOX_MUSIC_APP_TITLE = "IDS_XBOX_MUSIC_APP_TITLE";
    String.id.IDS_XBOX_MUSIC2_APP_TITLE = "IDS_XBOX_MUSIC2_APP_TITLE";
    String.id.IDS_XBOX_PLAY_TO_DEVICE = "IDS_XBOX_PLAY_TO_DEVICE";
    String.id.IDS_XBOX_VIDEO_APP_TITLE = "IDS_XBOX_VIDEO_APP_TITLE";
    String.id.IDS_XBOX_VIDEO2_APP_TITLE = "IDS_XBOX_VIDEO2_APP_TITLE";
    String.id.IDS_YES_BUTTON = "IDS_YES_BUTTON";

})();
})();
/* >>>>>>/framework/nativestringids.js:6873 */
(function() {
/////////////////////////////////////////////////////////////////////////////
//
//  nativeStringIds.js
//
//  This file was generated by the Stringer tool. Do not edit it!
//
//  Copyright (C) Microsoft Corporation. All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////

(function() {

    String.id = String.id || {}

    String.id.IDS_MEDIASTORE_UNKNOWN_TRACK_FORMAT = "101";
    String.id.IDS_MEDIASTORE_UNKNOWN_ALBUM_FORMAT = "102";
    String.id.IDS_MEDIASTORE_UNKNOWN_ALBUM_PREFIX = "103";
    String.id.IDS_MEDIASTORE_UNKNOWN_ARTIST = "104";
    String.id.IDS_MEDIASTORE_UNKNOWN_TRACK_PREFIX = "105";
    String.id.IDS_MEDIASTORE_IGNORED_ARTICLE_LIST = "106";
    String.id.IDS_MEDIASTORE_VARIOUS_ARTISTS = "108";
    String.id.IDS_MEDIASTORE_UNKNOWN_ALBUM = "109";
    String.id.IDS_MEDIASTORE_UNKNOWN_GENRE = "110";
    String.id.IDS_CDMDRCD_FORMAT_STRING = "213";
    String.id.IDS_SERVICE_UNKNOWNTRACK = "250";
    String.id.IDS_SERVICE_UNKNOWNARTIST = "251";
    String.id.IDS_SERVICE_UNKNOWNALBUM = "252";
    String.id.IDS_SERVICE_FILENAME_FORMAT_NO_DISC = "256";
    String.id.IDS_SERVICE_FILENAME_FORMAT_WITH_DISC = "257";
    String.id.IDS_SERVICE_UNKNOWNSERIES = "258";
    String.id.IDS_SERVICE_UNKNOWNVIDEO = "259";
    String.id.IDS_SERIES_UNKNOWNSERIES_TITLE = "260";
    String.id.IDS_SERIES_UNKNOWNSERIES_DESCRIPTION = "261";
    String.id.IDS_SERIES_GROVELLED_SERIES_DESCRIPTION = "262";
    String.id.IDS_PLAYLISTFOLDERNAME = "27";
    String.id.IDS_TEMPORARY_MUSIC_FOLDER_SUFFIX = "30";
    String.id.IDS_DOWNLOAD_FOLDER_MUSIC = "320";
    String.id.IDS_DOWNLOAD_FOLDER_TV = "321";
    String.id.IDS_DOWNLOAD_FOLDER_TV_SHORT = "322";
    String.id.IDS_DOWNLOAD_FOLDER_FORMAT_TV_SEASON = "323";
    String.id.IDS_DOWNLOAD_FOLDER_MOVIES = "324";
    String.id.IDS_DOWNLOAD_FOLDER_SUBSCRIPTION = "325";
    String.id.IDS_DOWNLOAD_FOLDER_PURCHASES = "326";
    String.id.IDS_DOWNLOAD_FOLDER_XBOX_MUSIC = "327";
    String.id.IDS_DOWNLOAD_FOLDER_OFFLINE_CONTENT = "328";
    String.id.IDS_DOWNLOAD_FOLDER_NAME = "329";
    String.id.IDS_TITLE_SUBTITLE_NATIVE = "33";
    String.id.IDS_CHANNEL_PLAYLIST_NAME_FORMAT = "360";
    String.id.IDS_GENRE_AUDIOBOOK_0 = "361";
    String.id.IDS_GENRE_AUDIOBOOK_1 = "362";
    String.id.IDS_GENRE_COMEDY_SPOKEN_WORD = "363";
    String.id.IDS_GENRE_PODCAST = "364";
    String.id.IDS_SUBSTRING_KARAOKE = "365";
    String.id.IDS_UAC_DIALOG_LOG_LEVELS_DESCRIPTION = "5000";
    String.id.IDS_JUMP_LIST_QUICKMIX_CATEGORY = "607";
    String.id.IDS_JUMP_LIST_RESUME_NOWPLAYING = "609";
    String.id.IDS_JUMP_LIST_SHUFFLE_ALL = "610";
    String.id.IDS_PODCAST_LIBRARY_NAME = "611";
    String.id.IDS_PODCAST_LIBRARY_DESC = "612";
    String.id.IDS_PODCAST_LIBRARY_TOOLTIP = "613";
    String.id.IDS_CONVERSION_CACHE_NAME = "618";
    String.id.IDS_ONEDRIVE_CACHE_FOLDER_NAME = "619";

})();
})();
/* >>>>>>/framework/lockedstringids.js:6940 */
(function() {
/////////////////////////////////////////////////////////////////////////////
//
//  lockedStringIds.js
//
//  This file was generated by the Stringer tool. Do not edit it!
//
//  Copyright (C) Microsoft Corporation. All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////

(function() {

    String.id = String.id || {}


})();
})();
/* >>>>>>/framework/videostringids.js:6959 */
(function() {
/////////////////////////////////////////////////////////////////////////////
//
//  videoStringIds.js
//
//  This file was generated by the Stringer tool. Do not edit it!
//
//  Copyright (C) Microsoft Corporation. All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////

(function() {

    String.id = String.id || {}

    String.id.IDS_ALL_VIDEO_COLLECTION_TITLE = "IDS_ALL_VIDEO_COLLECTION_TITLE";
    String.id.IDS_CHANGE_TV_SEASON_LABEL = "IDS_CHANGE_TV_SEASON_LABEL";
    String.id.IDS_DIALOG_PURCHASE_DURING_GROVEL_CAPTION = "IDS_DIALOG_PURCHASE_DURING_GROVEL_CAPTION";
    String.id.IDS_DIALOG_PURCHASE_DURING_GROVEL_TITLE = "IDS_DIALOG_PURCHASE_DURING_GROVEL_TITLE";
    String.id.IDS_FILTER_ALL_GENRES_2 = "IDS_FILTER_ALL_GENRES_2";
    String.id.IDS_FILTER_ALL_NETWORKS_LC = "IDS_FILTER_ALL_NETWORKS_LC";
    String.id.IDS_FILTER_ALL_STUDIOS_LC = "IDS_FILTER_ALL_STUDIOS_LC";
    String.id.IDS_MARKETPLACE_FEATURED_MOVIES = "IDS_MARKETPLACE_FEATURED_MOVIES";
    String.id.IDS_MARKETPLACE_FEATURED_TELEVISION = "IDS_MARKETPLACE_FEATURED_TELEVISION";
    String.id.IDS_MARKETPLACE_FREE_TV = "IDS_MARKETPLACE_FREE_TV";
    String.id.IDS_MARKETPLACE_LAST_NIGHT_ON_TV = "IDS_MARKETPLACE_LAST_NIGHT_ON_TV";
    String.id.IDS_MARKETPLACE_MOVIE_FEATURED_LC = "IDS_MARKETPLACE_MOVIE_FEATURED_LC";
    String.id.IDS_MARKETPLACE_MOVIE_NEW_RELEASE_LC = "IDS_MARKETPLACE_MOVIE_NEW_RELEASE_LC";
    String.id.IDS_MARKETPLACE_MOVIE_TOP_RATED_LC = "IDS_MARKETPLACE_MOVIE_TOP_RATED_LC";
    String.id.IDS_MARKETPLACE_MOVIE_TOP_RENTED_LC = "IDS_MARKETPLACE_MOVIE_TOP_RENTED_LC";
    String.id.IDS_MARKETPLACE_MOVIE_TOP_SALES_LC = "IDS_MARKETPLACE_MOVIE_TOP_SALES_LC";
    String.id.IDS_MARKETPLACE_NEW_RELEASES = "IDS_MARKETPLACE_NEW_RELEASES";
    String.id.IDS_MARKETPLACE_SORT_CRITIC_RATING_2 = "IDS_MARKETPLACE_SORT_CRITIC_RATING_2";
    String.id.IDS_MARKETPLACE_SORT_RELEASE_DATE_2 = "IDS_MARKETPLACE_SORT_RELEASE_DATE_2";
    String.id.IDS_MARKETPLACE_SORT_TOP_RENTED_2 = "IDS_MARKETPLACE_SORT_TOP_RENTED_2";
    String.id.IDS_MARKETPLACE_SORT_TOP_SELLING_2 = "IDS_MARKETPLACE_SORT_TOP_SELLING_2";
    String.id.IDS_MARKETPLACE_SORT_USER_RATING_2 = "IDS_MARKETPLACE_SORT_USER_RATING_2";
    String.id.IDS_MARKETPLACE_TOP_MOVIE_RENTALS = "IDS_MARKETPLACE_TOP_MOVIE_RENTALS";
    String.id.IDS_MARKETPLACE_TOP_MOVIE_RENTALS_2 = "IDS_MARKETPLACE_TOP_MOVIE_RENTALS_2";
    String.id.IDS_MARKETPLACE_TOP_MOVIE_SALES = "IDS_MARKETPLACE_TOP_MOVIE_SALES";
    String.id.IDS_MARKETPLACE_TOP_MOVIE_SALES_2 = "IDS_MARKETPLACE_TOP_MOVIE_SALES_2";
    String.id.IDS_MARKETPLACE_TOP_TV_PURCHASES = "IDS_MARKETPLACE_TOP_TV_PURCHASES";
    String.id.IDS_MARKETPLACE_TOP_VIDEO_SALES = "IDS_MARKETPLACE_TOP_VIDEO_SALES";
    String.id.IDS_MARKETPLACE_TOP_VIDEO_SALES_2 = "IDS_MARKETPLACE_TOP_VIDEO_SALES_2";
    String.id.IDS_MARKETPLACE_TV_FEATURED_LC = "IDS_MARKETPLACE_TV_FEATURED_LC";
    String.id.IDS_MARKETPLACE_TV_NEW_RELEASE_LC = "IDS_MARKETPLACE_TV_NEW_RELEASE_LC";
    String.id.IDS_MARKETPLACE_TV_TOP_RATED_LC = "IDS_MARKETPLACE_TV_TOP_RATED_LC";
    String.id.IDS_MARKETPLACE_TV_TOP_SALES_LC = "IDS_MARKETPLACE_TV_TOP_SALES_LC";
    String.id.IDS_MODIFIER_PREFIX_VIEWBY_2 = "IDS_MODIFIER_PREFIX_VIEWBY_2";
    String.id.IDS_MOVIE_COLLECTION_TITLE = "IDS_MOVIE_COLLECTION_TITLE";
    String.id.IDS_MOVIE_HERO_HEADING = "IDS_MOVIE_HERO_HEADING";
    String.id.IDS_MOVIE_MARKETPLACE_TITLE_LC = "IDS_MOVIE_MARKETPLACE_TITLE_LC";
    String.id.IDS_MOVIE_MARKETPLACE_TITLE_TC = "IDS_MOVIE_MARKETPLACE_TITLE_TC";
    String.id.IDS_MOVIE_PLAY_MOVIE_BUTTON = "IDS_MOVIE_PLAY_MOVIE_BUTTON";
    String.id.IDS_MOVIE_STUDIO_BROWSE_TITLE = "IDS_MOVIE_STUDIO_BROWSE_TITLE";
    String.id.IDS_OTHER_VIDEO_COLLECTION_TITLE = "IDS_OTHER_VIDEO_COLLECTION_TITLE";
    String.id.IDS_TV_COLLECTION_TITLE = "IDS_TV_COLLECTION_TITLE";
    String.id.IDS_TV_DOWNLOAD_SEASON_BUTTON = "IDS_TV_DOWNLOAD_SEASON_BUTTON";
    String.id.IDS_TV_DOWNLOAD_SEASON_BUTTON_HD = "IDS_TV_DOWNLOAD_SEASON_BUTTON_HD";
    String.id.IDS_TV_DOWNLOAD_SEASON_BUTTON_SD = "IDS_TV_DOWNLOAD_SEASON_BUTTON_SD";
    String.id.IDS_TV_EPISODE_LABEL = "IDS_TV_EPISODE_LABEL";
    String.id.IDS_TV_EPISODE_NAME_NUMBER_FORMAT = "IDS_TV_EPISODE_NAME_NUMBER_FORMAT";
    String.id.IDS_TV_EPISODES_LABEL = "IDS_TV_EPISODES_LABEL";
    String.id.IDS_TV_EPISODES_LABEL_PLURAL = "IDS_TV_EPISODES_LABEL_PLURAL";
    String.id.IDS_TV_MARKETPLACE_TITLE_LC = "IDS_TV_MARKETPLACE_TITLE_LC";
    String.id.IDS_TV_MARKETPLACE_TITLE_TC = "IDS_TV_MARKETPLACE_TITLE_TC";
    String.id.IDS_TV_NETWORK_BROWSE_TITLE = "IDS_TV_NETWORK_BROWSE_TITLE";
    String.id.IDS_TV_NEW_EPISODE_HEADING = "IDS_TV_NEW_EPISODE_HEADING";
    String.id.IDS_TV_NOEPISODES_LABEL = "IDS_TV_NOEPISODES_LABEL";
    String.id.IDS_TV_NUMBERED_EPISODE_0_NAME = "IDS_TV_NUMBERED_EPISODE_0_NAME";
    String.id.IDS_TV_NUMBERED_EPISODE_0_SEASON_NAME = "IDS_TV_NUMBERED_EPISODE_0_SEASON_NAME";
    String.id.IDS_TV_NUMBERED_EPISODE_NAME = "IDS_TV_NUMBERED_EPISODE_NAME";
    String.id.IDS_TV_NUMBERED_EPISODE_SEASON_NAME = "IDS_TV_NUMBERED_EPISODE_SEASON_NAME";
    String.id.IDS_TV_NUMBERED_EPISODE_SEASON_TITLE = "IDS_TV_NUMBERED_EPISODE_SEASON_TITLE";
    String.id.IDS_TV_OWNED_EPISODES_LABEL = "IDS_TV_OWNED_EPISODES_LABEL";
    String.id.IDS_TV_OWNED_EPISODES_LABEL_PLURAL = "IDS_TV_OWNED_EPISODES_LABEL_PLURAL";
    String.id.IDS_TV_PLAY_EPISODE_BUTTON = "IDS_TV_PLAY_EPISODE_BUTTON";
    String.id.IDS_TV_SEASON_0_NAME = "IDS_TV_SEASON_0_NAME";
    String.id.IDS_TV_SEASON_0_NAME_LC = "IDS_TV_SEASON_0_NAME_LC";
    String.id.IDS_TV_SEASON_EXTRAS_HEADING_LC = "IDS_TV_SEASON_EXTRAS_HEADING_LC";
    String.id.IDS_TV_SEASON_EXTRAS_HEADING_SC = "IDS_TV_SEASON_EXTRAS_HEADING_SC";
    String.id.IDS_TV_SEASON_EXTRAS_HEADING_UC = "IDS_TV_SEASON_EXTRAS_HEADING_UC";
    String.id.IDS_TV_SEASONS_LABEL_PLURAL = "IDS_TV_SEASONS_LABEL_PLURAL";
    String.id.IDS_TV_SERIES_EXTRAS_HEADING = "IDS_TV_SERIES_EXTRAS_HEADING";
    String.id.IDS_TV_SERIES_EXTRAS_HEADING_LC = "IDS_TV_SERIES_EXTRAS_HEADING_LC";
    String.id.IDS_TV_SERIES_EXTRAS_HEADING_UC = "IDS_TV_SERIES_EXTRAS_HEADING_UC";
    String.id.IDS_TV_SERIES_RATING_LABEL = "IDS_TV_SERIES_RATING_LABEL";
    String.id.IDS_VIDEO_AVAILABLE_OFFLINE = "IDS_VIDEO_AVAILABLE_OFFLINE";
    String.id.IDS_VIDEO_BUFFERING_SMOOTH = "IDS_VIDEO_BUFFERING_SMOOTH";
    String.id.IDS_VIDEO_BUNDLE_ITEMS_IN_BUNDLE = "IDS_VIDEO_BUNDLE_ITEMS_IN_BUNDLE";
    String.id.IDS_VIDEO_BUNDLES_AUDIO_LANGUAGE_BUTTON = "IDS_VIDEO_BUNDLES_AUDIO_LANGUAGE_BUTTON";
    String.id.IDS_VIDEO_BUNDLES_AUDIO_LANGUAGE_METADATA = "IDS_VIDEO_BUNDLES_AUDIO_LANGUAGE_METADATA";
    String.id.IDS_VIDEO_BUNDLES_DETAILS_BUY_BUTTON = "IDS_VIDEO_BUNDLES_DETAILS_BUY_BUTTON";
    String.id.IDS_VIDEO_BUNDLES_DETAILS_VIEW_IN_COLLECTION_BUTTON = "IDS_VIDEO_BUNDLES_DETAILS_VIEW_IN_COLLECTION_BUTTON";
    String.id.IDS_VIDEO_BUNDLES_DISABLED_BUTTON = "IDS_VIDEO_BUNDLES_DISABLED_BUTTON";
    String.id.IDS_VIDEO_BUNDLES_PRE_PURCHASE_ITEM = "IDS_VIDEO_BUNDLES_PRE_PURCHASE_ITEM";
    String.id.IDS_VIDEO_CANT_DELETE = "IDS_VIDEO_CANT_DELETE";
    String.id.IDS_VIDEO_CAST_ACTOR = "IDS_VIDEO_CAST_ACTOR";
    String.id.IDS_VIDEO_CAST_ACTORS = "IDS_VIDEO_CAST_ACTORS";
    String.id.IDS_VIDEO_CAST_CREATOR = "IDS_VIDEO_CAST_CREATOR";
    String.id.IDS_VIDEO_CAST_CREATORS = "IDS_VIDEO_CAST_CREATORS";
    String.id.IDS_VIDEO_CAST_DIRECTOR = "IDS_VIDEO_CAST_DIRECTOR";
    String.id.IDS_VIDEO_CAST_DIRECTORS = "IDS_VIDEO_CAST_DIRECTORS";
    String.id.IDS_VIDEO_CAST_HEADING = "IDS_VIDEO_CAST_HEADING";
    String.id.IDS_VIDEO_CAST_HEADING_UC = "IDS_VIDEO_CAST_HEADING_UC";
    String.id.IDS_VIDEO_CAST_WRITER = "IDS_VIDEO_CAST_WRITER";
    String.id.IDS_VIDEO_CAST_WRITERS = "IDS_VIDEO_CAST_WRITERS";
    String.id.IDS_VIDEO_COLLECTION_ALPHA_SORT = "IDS_VIDEO_COLLECTION_ALPHA_SORT";
    String.id.IDS_VIDEO_COLLECTION_ALPHA_SORT_2 = "IDS_VIDEO_COLLECTION_ALPHA_SORT_2";
    String.id.IDS_VIDEO_COLLECTION_ARTIST_SORT = "IDS_VIDEO_COLLECTION_ARTIST_SORT";
    String.id.IDS_VIDEO_COLLECTION_DATEADDED_SORT = "IDS_VIDEO_COLLECTION_DATEADDED_SORT";
    String.id.IDS_VIDEO_COLLECTION_DATEADDED_SORT_2 = "IDS_VIDEO_COLLECTION_DATEADDED_SORT_2";
    String.id.IDS_VIDEO_COLLECTION_DURATION_SORT = "IDS_VIDEO_COLLECTION_DURATION_SORT";
    String.id.IDS_VIDEO_COLLECTION_EMPTY_DESC = "IDS_VIDEO_COLLECTION_EMPTY_DESC";
    String.id.IDS_VIDEO_COLLECTION_EMPTY_TITLE = "IDS_VIDEO_COLLECTION_EMPTY_TITLE";
    String.id.IDS_VIDEO_COLLECTION_GENRE_SORT = "IDS_VIDEO_COLLECTION_GENRE_SORT";
    String.id.IDS_VIDEO_COLLECTION_GENRE_SORT_2 = "IDS_VIDEO_COLLECTION_GENRE_SORT_2";
    String.id.IDS_VIDEO_COLLECTION_MOVIES_PIVOT = "IDS_VIDEO_COLLECTION_MOVIES_PIVOT";
    String.id.IDS_VIDEO_COLLECTION_MOVIES_PIVOT_UC = "IDS_VIDEO_COLLECTION_MOVIES_PIVOT_UC";
    String.id.IDS_VIDEO_COLLECTION_PIVOT = "IDS_VIDEO_COLLECTION_PIVOT";
    String.id.IDS_VIDEO_COLLECTION_RELEASEYEAR_SORT = "IDS_VIDEO_COLLECTION_RELEASEYEAR_SORT";
    String.id.IDS_VIDEO_COLLECTION_RELEASEYEAR_SORT_2 = "IDS_VIDEO_COLLECTION_RELEASEYEAR_SORT_2";
    String.id.IDS_VIDEO_COLLECTION_SERIES_EPISODES = "IDS_VIDEO_COLLECTION_SERIES_EPISODES";
    String.id.IDS_VIDEO_COLLECTION_SERIES_EPISODES_2 = "IDS_VIDEO_COLLECTION_SERIES_EPISODES_2";
    String.id.IDS_VIDEO_COLLECTION_SERIES_SEASONS = "IDS_VIDEO_COLLECTION_SERIES_SEASONS";
    String.id.IDS_VIDEO_COLLECTION_SERIES_SEASONS_2 = "IDS_VIDEO_COLLECTION_SERIES_SEASONS_2";
    String.id.IDS_VIDEO_COLLECTION_SETS_PIVOT_UC = "IDS_VIDEO_COLLECTION_SETS_PIVOT_UC";
    String.id.IDS_VIDEO_COLLECTION_STUDIO_SORT = "IDS_VIDEO_COLLECTION_STUDIO_SORT";
    String.id.IDS_VIDEO_COLLECTION_TV_PIVOT = "IDS_VIDEO_COLLECTION_TV_PIVOT";
    String.id.IDS_VIDEO_COLLECTION_TV_PIVOT_UC = "IDS_VIDEO_COLLECTION_TV_PIVOT_UC";
    String.id.IDS_VIDEO_COLLECTION_WISHLIST_PIVOT_UC = "IDS_VIDEO_COLLECTION_WISHLIST_PIVOT_UC";
    String.id.IDS_VIDEO_DASH_FEATURED_SETS_LC = "IDS_VIDEO_DASH_FEATURED_SETS_LC";
    String.id.IDS_VIDEO_DASH_FEATURED_SETS_UC = "IDS_VIDEO_DASH_FEATURED_SETS_UC";
    String.id.IDS_VIDEO_DASH_MOVIE_FEATURED_LC = "IDS_VIDEO_DASH_MOVIE_FEATURED_LC";
    String.id.IDS_VIDEO_DASH_MOVIE_FEATURED_UC = "IDS_VIDEO_DASH_MOVIE_FEATURED_UC";
    String.id.IDS_VIDEO_DASH_MOVIE_NEW_LC = "IDS_VIDEO_DASH_MOVIE_NEW_LC";
    String.id.IDS_VIDEO_DASH_MOVIE_NEW_UC = "IDS_VIDEO_DASH_MOVIE_NEW_UC";
    String.id.IDS_VIDEO_DASH_SPOTIGHT_UC = "IDS_VIDEO_DASH_SPOTIGHT_UC";
    String.id.IDS_VIDEO_DASH_TV_FEATURED_LC = "IDS_VIDEO_DASH_TV_FEATURED_LC";
    String.id.IDS_VIDEO_DASH_TV_FEATURED_UC = "IDS_VIDEO_DASH_TV_FEATURED_UC";
    String.id.IDS_VIDEO_DASH_TV_NEW_LC = "IDS_VIDEO_DASH_TV_NEW_LC";
    String.id.IDS_VIDEO_DASH_TV_NEW_UC = "IDS_VIDEO_DASH_TV_NEW_UC";
    String.id.IDS_VIDEO_DEEPLINK_ERROR_GENERIC_DESC = "IDS_VIDEO_DEEPLINK_ERROR_GENERIC_DESC";
    String.id.IDS_VIDEO_DEEPLINK_ERROR_GENERIC_TITLE = "IDS_VIDEO_DEEPLINK_ERROR_GENERIC_TITLE";
    String.id.IDS_VIDEO_DELETE_SERIES_BUTTON = "IDS_VIDEO_DELETE_SERIES_BUTTON";
    String.id.IDS_VIDEO_DETAILS_COMMERCE_HEADER_FORMAT = "IDS_VIDEO_DETAILS_COMMERCE_HEADER_FORMAT";
    String.id.IDS_VIDEO_DETAILS_COMMERCE_HEADER_PREPURCHASE_SC = "IDS_VIDEO_DETAILS_COMMERCE_HEADER_PREPURCHASE_SC";
    String.id.IDS_VIDEO_DETAILS_COMMERCE_HEADER_PREPURCHASED_SC = "IDS_VIDEO_DETAILS_COMMERCE_HEADER_PREPURCHASED_SC";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_DOWNLOAD_TIME_DISCLAIMER = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_DOWNLOAD_TIME_DISCLAIMER";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_HD = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_HD";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_HD_SIMPLE = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_HD_SIMPLE";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_NEVER_SHOW = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_NEVER_SHOW";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_HD = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_HD";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_PROMPT = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_PROMPT";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_PROMPT_SHORT = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_PROMPT_SHORT";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_QUESTION = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_QUESTION";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_SD = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_SD";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_SD_SHORT = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_SD_SHORT";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_TITLE = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_PREFERENCES_DOWNLOAD_QUALITY_TITLE";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SD = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SD";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SD_SIMPLE = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SD_SIMPLE";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SIZE_GB = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SIZE_GB";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SIZE_HOURS = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SIZE_HOURS";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SIZE_MB = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_SIZE_MB";
    String.id.IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_TITLE = "IDS_VIDEO_DETAILS_DOWNLOAD_CHOOSE_TITLE";
    String.id.IDS_VIDEO_DOWNLOAD_COMPLETE = "IDS_VIDEO_DOWNLOAD_COMPLETE";
    String.id.IDS_VIDEO_DOWNLOAD_ERROR = "IDS_VIDEO_DOWNLOAD_ERROR";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_CANCEL = "IDS_VIDEO_DOWNLOAD_MANAGER_CANCEL";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_CANCEL_ALL = "IDS_VIDEO_DOWNLOAD_MANAGER_CANCEL_ALL";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_CLOSE = "IDS_VIDEO_DOWNLOAD_MANAGER_CLOSE";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_COMPLETE = "IDS_VIDEO_DOWNLOAD_MANAGER_COMPLETE";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_COPYING = "IDS_VIDEO_DOWNLOAD_MANAGER_COPYING";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_COPYING_NOT_COMPLETE = "IDS_VIDEO_DOWNLOAD_MANAGER_COPYING_NOT_COMPLETE";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_COPYING_SLOW = "IDS_VIDEO_DOWNLOAD_MANAGER_COPYING_SLOW";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_COPYING_STAY = "IDS_VIDEO_DOWNLOAD_MANAGER_COPYING_STAY";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_DONE = "IDS_VIDEO_DOWNLOAD_MANAGER_DONE";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_GB_SIZE = "IDS_VIDEO_DOWNLOAD_MANAGER_GB_SIZE";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_LINK = "IDS_VIDEO_DOWNLOAD_MANAGER_LINK";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_MB_SIZE = "IDS_VIDEO_DOWNLOAD_MANAGER_MB_SIZE";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_NO_DOWNLOADS = "IDS_VIDEO_DOWNLOAD_MANAGER_NO_DOWNLOADS";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_NO_TEMP_SPACE = "IDS_VIDEO_DOWNLOAD_MANAGER_NO_TEMP_SPACE";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_PAUSE = "IDS_VIDEO_DOWNLOAD_MANAGER_PAUSE";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_PAUSE_ALL = "IDS_VIDEO_DOWNLOAD_MANAGER_PAUSE_ALL";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_PENDING = "IDS_VIDEO_DOWNLOAD_MANAGER_PENDING";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_PERCENT_LONG = "IDS_VIDEO_DOWNLOAD_MANAGER_PERCENT_LONG";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_PERCENT_SHORT = "IDS_VIDEO_DOWNLOAD_MANAGER_PERCENT_SHORT";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_RESUME = "IDS_VIDEO_DOWNLOAD_MANAGER_RESUME";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_RESUME_All = "IDS_VIDEO_DOWNLOAD_MANAGER_RESUME_All";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_RETRY = "IDS_VIDEO_DOWNLOAD_MANAGER_RETRY";
    String.id.IDS_VIDEO_DOWNLOAD_MANAGER_TITLE = "IDS_VIDEO_DOWNLOAD_MANAGER_TITLE";
    String.id.IDS_VIDEO_DOWNLOAD_MORE_INFO = "IDS_VIDEO_DOWNLOAD_MORE_INFO";
    String.id.IDS_VIDEO_DOWNLOAD_NOTIFICATION = "IDS_VIDEO_DOWNLOAD_NOTIFICATION";
    String.id.IDS_VIDEO_DOWNLOAD_PAUSED = "IDS_VIDEO_DOWNLOAD_PAUSED";
    String.id.IDS_VIDEO_DOWNLOAD_PROGRESS_ITEMS_PLURAL = "IDS_VIDEO_DOWNLOAD_PROGRESS_ITEMS_PLURAL";
    String.id.IDS_VIDEO_DOWNLOAD_SLOWED_ON_BATTERY = "IDS_VIDEO_DOWNLOAD_SLOWED_ON_BATTERY";
    String.id.IDS_VIDEO_DOWNLOAD_TO_WATCH_OFFLINE = "IDS_VIDEO_DOWNLOAD_TO_WATCH_OFFLINE";
    String.id.IDS_VIDEO_FIND_SOMETHING_TO_PLAY = "IDS_VIDEO_FIND_SOMETHING_TO_PLAY";
    String.id.IDS_VIDEO_GET_FOR_XBOX360 = "IDS_VIDEO_GET_FOR_XBOX360";
    String.id.IDS_VIDEO_GET_FOR_XBOX360_APPBAR = "IDS_VIDEO_GET_FOR_XBOX360_APPBAR";
    String.id.IDS_VIDEO_IN_COLLECTION_LABEL = "IDS_VIDEO_IN_COLLECTION_LABEL";
    String.id.IDS_VIDEO_ITEM_CAN_ONLY_BE_STREAMED = "IDS_VIDEO_ITEM_CAN_ONLY_BE_STREAMED";
    String.id.IDS_VIDEO_ITEM_CANT_BE_STREAMED_DOWNLOAD_FIRST = "IDS_VIDEO_ITEM_CANT_BE_STREAMED_DOWNLOAD_FIRST";
    String.id.IDS_VIDEO_ITEM_PURCHASED_IN_OTHER_REGION = "IDS_VIDEO_ITEM_PURCHASED_IN_OTHER_REGION";
    String.id.IDS_VIDEO_ITEM_UNAVAILABLE_BETWEEN = "IDS_VIDEO_ITEM_UNAVAILABLE_BETWEEN";
    String.id.IDS_VIDEO_MAKE_SURE_FILE_ISNT_IN_USE_READONLY = "IDS_VIDEO_MAKE_SURE_FILE_ISNT_IN_USE_READONLY";
    String.id.IDS_VIDEO_MARKETPLACE_EMPTY_DESC = "IDS_VIDEO_MARKETPLACE_EMPTY_DESC";
    String.id.IDS_VIDEO_MARKETPLACE_EMPTY_TITLE = "IDS_VIDEO_MARKETPLACE_EMPTY_TITLE";
    String.id.IDS_VIDEO_MARKETPLACE_TITLE_LC = "IDS_VIDEO_MARKETPLACE_TITLE_LC";
    String.id.IDS_VIDEO_MOVIE_RENTAL_DIALOG_DISCLAIMER_LINE1 = "IDS_VIDEO_MOVIE_RENTAL_DIALOG_DISCLAIMER_LINE1";
    String.id.IDS_VIDEO_MOVIE_RENTAL_DIALOG_DISCLAIMER_LINE2 = "IDS_VIDEO_MOVIE_RENTAL_DIALOG_DISCLAIMER_LINE2";
    String.id.IDS_VIDEO_MOVIE_RENTAL_DIALOG_DOWNLOAD_OPTION = "IDS_VIDEO_MOVIE_RENTAL_DIALOG_DOWNLOAD_OPTION";
    String.id.IDS_VIDEO_MOVIE_RENTAL_DIALOG_STREAMING_OPTION = "IDS_VIDEO_MOVIE_RENTAL_DIALOG_STREAMING_OPTION";
    String.id.IDS_VIDEO_MOVIE_RENTAL_DIALOG_TITLE = "IDS_VIDEO_MOVIE_RENTAL_DIALOG_TITLE";
    String.id.IDS_VIDEO_NEW_SEASON_NOTIFICATION = "IDS_VIDEO_NEW_SEASON_NOTIFICATION";
    String.id.IDS_VIDEO_NOW_PLAYING = "IDS_VIDEO_NOW_PLAYING";
    String.id.IDS_VIDEO_ON_BATTERY = "IDS_VIDEO_ON_BATTERY";
    String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DATE_KNOWN = "IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DATE_KNOWN";
    String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DATE_UNKNOWN = "IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DATE_UNKNOWN";
    String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DAYS_PLURAL = "IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DAYS_PLURAL";
    String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_HOURS_PLURAL = "IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_HOURS_PLURAL";
    String.id.IDS_VIDEO_PREPURCHASE_DETAILS_BUY = "IDS_VIDEO_PREPURCHASE_DETAILS_BUY";
    String.id.IDS_VIDEO_PREPURCHASE_POST_UPSELL_DATE_KNOWN = "IDS_VIDEO_PREPURCHASE_POST_UPSELL_DATE_KNOWN";
    String.id.IDS_VIDEO_PREPURCHASE_POST_UPSELL_DATE_UNKNOWN = "IDS_VIDEO_PREPURCHASE_POST_UPSELL_DATE_UNKNOWN";
    String.id.IDS_VIDEO_PREPURCHASE_PRE_UPSELL_DATE_KNOWN = "IDS_VIDEO_PREPURCHASE_PRE_UPSELL_DATE_KNOWN";
    String.id.IDS_VIDEO_PREPURCHASE_PRE_UPSELL_DATE_UNKNOWN = "IDS_VIDEO_PREPURCHASE_PRE_UPSELL_DATE_UNKNOWN";
    String.id.IDS_VIDEO_PREVIEW_BROWSE_BUTTON = "IDS_VIDEO_PREVIEW_BROWSE_BUTTON";
    String.id.IDS_VIDEO_PREVIEW_BUY_RENT_BUTTON = "IDS_VIDEO_PREVIEW_BUY_RENT_BUTTON";
    String.id.IDS_VIDEO_PREVIEW_NOT_AVAILABLE = "IDS_VIDEO_PREVIEW_NOT_AVAILABLE";
    String.id.IDS_VIDEO_PRICE_FREE = "IDS_VIDEO_PRICE_FREE";
    String.id.IDS_VIDEO_PRICE_FREE_WITH_ADS = "IDS_VIDEO_PRICE_FREE_WITH_ADS";
    String.id.IDS_VIDEO_PRICE_HD = "IDS_VIDEO_PRICE_HD";
    String.id.IDS_VIDEO_PRICE_HD_SD = "IDS_VIDEO_PRICE_HD_SD";
    String.id.IDS_VIDEO_PRICE_ON_SALE = "IDS_VIDEO_PRICE_ON_SALE";
    String.id.IDS_VIDEO_PRICE_PERCENT_OFF = "IDS_VIDEO_PRICE_PERCENT_OFF";
    String.id.IDS_VIDEO_PRICE_SD = "IDS_VIDEO_PRICE_SD";
    String.id.IDS_VIDEO_PRICE_STARTING_FROM = "IDS_VIDEO_PRICE_STARTING_FROM";
    String.id.IDS_VIDEO_PRICE_SWITCH_HD = "IDS_VIDEO_PRICE_SWITCH_HD";
    String.id.IDS_VIDEO_PRICE_SWITCH_SD = "IDS_VIDEO_PRICE_SWITCH_SD";
    String.id.IDS_VIDEO_PURCHASE_OPTIONS_BUTTON = "IDS_VIDEO_PURCHASE_OPTIONS_BUTTON";
    String.id.IDS_VIDEO_PURCHASE_OPTIONS_BUY = "IDS_VIDEO_PURCHASE_OPTIONS_BUY";
    String.id.IDS_VIDEO_PURCHASE_OPTIONS_CURRENT_AUDIO_LANGUAGE = "IDS_VIDEO_PURCHASE_OPTIONS_CURRENT_AUDIO_LANGUAGE";
    String.id.IDS_VIDEO_PURCHASE_OPTIONS_CURRENT_LANGUAGE = "IDS_VIDEO_PURCHASE_OPTIONS_CURRENT_LANGUAGE";
    String.id.IDS_VIDEO_PURCHASE_OPTIONS_HD = "IDS_VIDEO_PURCHASE_OPTIONS_HD";
    String.id.IDS_VIDEO_PURCHASE_OPTIONS_LANGUAGE = "IDS_VIDEO_PURCHASE_OPTIONS_LANGUAGE";
    String.id.IDS_VIDEO_PURCHASE_OPTIONS_QUALITY = "IDS_VIDEO_PURCHASE_OPTIONS_QUALITY";
    String.id.IDS_VIDEO_PURCHASE_OPTIONS_RENT = "IDS_VIDEO_PURCHASE_OPTIONS_RENT";
    String.id.IDS_VIDEO_PURCHASE_OPTIONS_SD = "IDS_VIDEO_PURCHASE_OPTIONS_SD";
    String.id.IDS_VIDEO_PURCHASE_OPTIONS_TITLE = "IDS_VIDEO_PURCHASE_OPTIONS_TITLE";
    String.id.IDS_VIDEO_PURCHASED_LABEL = "IDS_VIDEO_PURCHASED_LABEL";
    String.id.IDS_VIDEO_RECOMMEND_ALL_LC = "IDS_VIDEO_RECOMMEND_ALL_LC";
    String.id.IDS_VIDEO_RECOMMEND_ALL_SC = "IDS_VIDEO_RECOMMEND_ALL_SC";
    String.id.IDS_VIDEO_RECOMMEND_EMPTY_GALLERIES = "IDS_VIDEO_RECOMMEND_EMPTY_GALLERIES";
    String.id.IDS_VIDEO_RECOMMEND_MOVIE_DROPDOWN_LC = "IDS_VIDEO_RECOMMEND_MOVIE_DROPDOWN_LC";
    String.id.IDS_VIDEO_RECOMMEND_MOVIE_DROPDOWN_SC = "IDS_VIDEO_RECOMMEND_MOVIE_DROPDOWN_SC";
    String.id.IDS_VIDEO_RECOMMEND_MOVIES_LC = "IDS_VIDEO_RECOMMEND_MOVIES_LC";
    String.id.IDS_VIDEO_RECOMMEND_MOVIES_TITLE_TC = "IDS_VIDEO_RECOMMEND_MOVIES_TITLE_TC";
    String.id.IDS_VIDEO_RECOMMEND_NOT_INTERESTED_LC = "IDS_VIDEO_RECOMMEND_NOT_INTERESTED_LC";
    String.id.IDS_VIDEO_RECOMMEND_NOT_INTERESTED_TC = "IDS_VIDEO_RECOMMEND_NOT_INTERESTED_TC";
    String.id.IDS_VIDEO_RECOMMEND_TITLE_LC = "IDS_VIDEO_RECOMMEND_TITLE_LC";
    String.id.IDS_VIDEO_RECOMMEND_TITLE_TC = "IDS_VIDEO_RECOMMEND_TITLE_TC";
    String.id.IDS_VIDEO_RECOMMEND_TITLE_UC = "IDS_VIDEO_RECOMMEND_TITLE_UC";
    String.id.IDS_VIDEO_RECOMMEND_TV_DROPDOWN_LC = "IDS_VIDEO_RECOMMEND_TV_DROPDOWN_LC";
    String.id.IDS_VIDEO_RECOMMEND_TV_DROPDOWN_SC = "IDS_VIDEO_RECOMMEND_TV_DROPDOWN_SC";
    String.id.IDS_VIDEO_RECOMMEND_TV_LC = "IDS_VIDEO_RECOMMEND_TV_LC";
    String.id.IDS_VIDEO_RECOMMEND_TV_TITLE_TC = "IDS_VIDEO_RECOMMEND_TV_TITLE_TC";
    String.id.IDS_VIDEO_RECOMMENDED = "IDS_VIDEO_RECOMMENDED";
    String.id.IDS_VIDEO_RENTAL_EXPIRED = "IDS_VIDEO_RENTAL_EXPIRED";
    String.id.IDS_VIDEO_RENTAL_EXPIRED_ONLY = "IDS_VIDEO_RENTAL_EXPIRED_ONLY";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_AT = "IDS_VIDEO_RENTAL_EXPIRES_AT";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_DAY = "IDS_VIDEO_RENTAL_EXPIRES_DAY";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_DAY_HR = "IDS_VIDEO_RENTAL_EXPIRES_DAY_HR";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_DAY_HRS = "IDS_VIDEO_RENTAL_EXPIRES_DAY_HRS";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_DAYS = "IDS_VIDEO_RENTAL_EXPIRES_DAYS";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_DAYS_HR = "IDS_VIDEO_RENTAL_EXPIRES_DAYS_HR";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_DAYS_HRS = "IDS_VIDEO_RENTAL_EXPIRES_DAYS_HRS";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_HR = "IDS_VIDEO_RENTAL_EXPIRES_HR";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_HR_MIN = "IDS_VIDEO_RENTAL_EXPIRES_HR_MIN";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_HR_MINS = "IDS_VIDEO_RENTAL_EXPIRES_HR_MINS";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_HRS = "IDS_VIDEO_RENTAL_EXPIRES_HRS";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_HRS_MIN = "IDS_VIDEO_RENTAL_EXPIRES_HRS_MIN";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_HRS_MINS = "IDS_VIDEO_RENTAL_EXPIRES_HRS_MINS";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_LESS_THAN_HR = "IDS_VIDEO_RENTAL_EXPIRES_LESS_THAN_HR";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_LESS_THAN_MIN = "IDS_VIDEO_RENTAL_EXPIRES_LESS_THAN_MIN";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_MIN = "IDS_VIDEO_RENTAL_EXPIRES_MIN";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_MINS = "IDS_VIDEO_RENTAL_EXPIRES_MINS";
    String.id.IDS_VIDEO_RENTAL_EXPIRES_ON = "IDS_VIDEO_RENTAL_EXPIRES_ON";
    String.id.IDS_VIDEO_REVIEW_COUNT_ONLY_PLURAL = "IDS_VIDEO_REVIEW_COUNT_ONLY_PLURAL";
    String.id.IDS_VIDEO_REVIEW_HEADING = "IDS_VIDEO_REVIEW_HEADING";
    String.id.IDS_VIDEO_REVIEW_ROTTEN_VIEW_MORE = "IDS_VIDEO_REVIEW_ROTTEN_VIEW_MORE";
    String.id.IDS_VIDEO_SEARCH_ALL_NORESULT_TITLE = "IDS_VIDEO_SEARCH_ALL_NORESULT_TITLE";
    String.id.IDS_VIDEO_SEARCH_ALL_RESULT_TITLE = "IDS_VIDEO_SEARCH_ALL_RESULT_TITLE";
    String.id.IDS_VIDEO_SEARCH_CAST_NORESULT_TITLE = "IDS_VIDEO_SEARCH_CAST_NORESULT_TITLE";
    String.id.IDS_VIDEO_SEARCH_MOVIE_NORESULT_TITLE = "IDS_VIDEO_SEARCH_MOVIE_NORESULT_TITLE";
    String.id.IDS_VIDEO_SEARCH_MOVIE_RESULT_TITLE = "IDS_VIDEO_SEARCH_MOVIE_RESULT_TITLE";
    String.id.IDS_VIDEO_SEARCH_TV_NORESULT_TITLE = "IDS_VIDEO_SEARCH_TV_NORESULT_TITLE";
    String.id.IDS_VIDEO_SEARCH_TV_RESULT_TITLE = "IDS_VIDEO_SEARCH_TV_RESULT_TITLE";
    String.id.IDS_VIDEO_SEASON_PASS_EXPLANATION = "IDS_VIDEO_SEASON_PASS_EXPLANATION";
    String.id.IDS_VIDEO_SETTINGS_PURCHASES_LABEL = "IDS_VIDEO_SETTINGS_PURCHASES_LABEL";
    String.id.IDS_VIDEO_SETTINGS_PURCHASES_RESTORE_BUTTON = "IDS_VIDEO_SETTINGS_PURCHASES_RESTORE_BUTTON";
    String.id.IDS_VIDEO_SETTINGS_PURCHASES_RESTORE_DESCRPTION = "IDS_VIDEO_SETTINGS_PURCHASES_RESTORE_DESCRPTION";
    String.id.IDS_VIDEO_SETTINGS_PURCHASES_RESTORING_BUTTON = "IDS_VIDEO_SETTINGS_PURCHASES_RESTORING_BUTTON";
    String.id.IDS_VIDEO_SETTINGS_STARTUP_VIEW_DESC = "IDS_VIDEO_SETTINGS_STARTUP_VIEW_DESC";
    String.id.IDS_VIDEO_SIGNOUT_WARNING_DIALOG_BODY = "IDS_VIDEO_SIGNOUT_WARNING_DIALOG_BODY";
    String.id.IDS_VIDEO_SIGNOUT_WARNING_DIALOG_SIGNOUT_BTN = "IDS_VIDEO_SIGNOUT_WARNING_DIALOG_SIGNOUT_BTN";
    String.id.IDS_VIDEO_SIGNOUT_WARNING_DIALOG_TITLE = "IDS_VIDEO_SIGNOUT_WARNING_DIALOG_TITLE";
    String.id.IDS_VIDEO_SPOTLIGHT = "IDS_VIDEO_SPOTLIGHT";
    String.id.IDS_VIDEO_STARTING_SMOOTH = "IDS_VIDEO_STARTING_SMOOTH";
    String.id.IDS_VIDEO_STREAMING_DOWNLOAD_AVAILABLE = "IDS_VIDEO_STREAMING_DOWNLOAD_AVAILABLE";
    String.id.IDS_VIDEO_STREAMING_DOWNLOAD_TO_WATCH_OFFLINE = "IDS_VIDEO_STREAMING_DOWNLOAD_TO_WATCH_OFFLINE";
    String.id.IDS_VIDEO_STREAMING_NOTIFICATION = "IDS_VIDEO_STREAMING_NOTIFICATION";
    String.id.IDS_VIDEO_TILE_NEW_MOVIES_AMP_TV = "IDS_VIDEO_TILE_NEW_MOVIES_AMP_TV";
    String.id.IDS_VIDEO_TILE_XBOX_VIDEO_TC = "IDS_VIDEO_TILE_XBOX_VIDEO_TC";
    String.id.IDS_VIDEO_UPSELL_BROWSE_MOVIES_AND_TV_SC = "IDS_VIDEO_UPSELL_BROWSE_MOVIES_AND_TV_SC";
    String.id.IDS_VIDEO_UPSELL_BROWSE_NEW_MOVIES_SC = "IDS_VIDEO_UPSELL_BROWSE_NEW_MOVIES_SC";
    String.id.IDS_VIDEO_UPSELL_BROWSE_NEW_TV_SC = "IDS_VIDEO_UPSELL_BROWSE_NEW_TV_SC";
    String.id.IDS_VIDEO_UPSELL_BROWSE_PERSONAL_SC = "IDS_VIDEO_UPSELL_BROWSE_PERSONAL_SC";
    String.id.IDS_VIDEO_UPSELL_BUY_LABEL_SC = "IDS_VIDEO_UPSELL_BUY_LABEL_SC";
    String.id.IDS_VIDEO_UPSELL_FIND_NEW_MOVIES_SC = "IDS_VIDEO_UPSELL_FIND_NEW_MOVIES_SC";
    String.id.IDS_VIDEO_UPSELL_GET_TV_SHOWS_SC = "IDS_VIDEO_UPSELL_GET_TV_SHOWS_SC";
    String.id.IDS_VIDEO_UPSELL_INSTANT_ON_HD_SC = "IDS_VIDEO_UPSELL_INSTANT_ON_HD_SC";
    String.id.IDS_VIDEO_UPSELL_MOVIE_STORE_SC = "IDS_VIDEO_UPSELL_MOVIE_STORE_SC";
    String.id.IDS_VIDEO_UPSELL_MY_VIDEO_SC = "IDS_VIDEO_UPSELL_MY_VIDEO_SC";
    String.id.IDS_VIDEO_UPSELL_TV_STORE_SC = "IDS_VIDEO_UPSELL_TV_STORE_SC";
    String.id.IDS_VIDEO_UPSELL_VIEW_NEW_RELEASES_SC = "IDS_VIDEO_UPSELL_VIEW_NEW_RELEASES_SC";
    String.id.IDS_VIDEO_VIEW_BY_TITLE = "IDS_VIDEO_VIEW_BY_TITLE";
    String.id.IDS_VIDEO_VIEW_FROM_STUDIO_LABEL = "IDS_VIDEO_VIEW_FROM_STUDIO_LABEL";
    String.id.IDS_VIDEO_VIEW_IN_GENRE_FROM_STUDIO_LABEL = "IDS_VIDEO_VIEW_IN_GENRE_FROM_STUDIO_LABEL";
    String.id.IDS_VIDEO_VIEW_IN_GENRE_LABEL = "IDS_VIDEO_VIEW_IN_GENRE_LABEL";
    String.id.IDS_VIDEO_WATCH_NEXT_BUY_EPISODE_BUTTON = "IDS_VIDEO_WATCH_NEXT_BUY_EPISODE_BUTTON";
    String.id.IDS_VIDEO_WATCH_NEXT_DELETE_EPISODE_BUTTON = "IDS_VIDEO_WATCH_NEXT_DELETE_EPISODE_BUTTON";
    String.id.IDS_VIDEO_WATCH_NEXT_DELETE_SEASON_BUTTON = "IDS_VIDEO_WATCH_NEXT_DELETE_SEASON_BUTTON";
    String.id.IDS_VIDEO_WATCH_NEXT_DOWNLOAD_EPISODE_BUTTON = "IDS_VIDEO_WATCH_NEXT_DOWNLOAD_EPISODE_BUTTON";
    String.id.IDS_VIDEO_WATCH_NEXT_PLAY_EPISODE_BUTTON = "IDS_VIDEO_WATCH_NEXT_PLAY_EPISODE_BUTTON";
    String.id.IDS_VIDEO_WATCH_NEXT_RESTART_EPISODE_BUTTON = "IDS_VIDEO_WATCH_NEXT_RESTART_EPISODE_BUTTON";
    String.id.IDS_VIDEO_WATCH_NEXT_RESUME_EPISODE_BUTTON = "IDS_VIDEO_WATCH_NEXT_RESUME_EPISODE_BUTTON";
    String.id.IDS_VIDEO_WATCHED_LABEL = "IDS_VIDEO_WATCHED_LABEL";

})();
})();
/* >>>>>>/framework/video1stringids.js:7299 */
(function() {
/////////////////////////////////////////////////////////////////////////////
//
//  video1StringIds.js
//
//  This file was generated by the Stringer tool. Do not edit it!
//
//  Copyright (C) Microsoft Corporation. All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////

(function() {

    String.id = String.id || {}

    String.id.IDS_VIDEO_ALL_FEATURED_SETS_GALLERY_TITLE = "IDS_VIDEO_ALL_FEATURED_SETS_GALLERY_TITLE";
    String.id.IDS_VIDEO_ERROR_DETAILS = "IDS_VIDEO_ERROR_DETAILS";
    String.id.IDS_VIDEO_ERROR_HEADER = "IDS_VIDEO_ERROR_HEADER";
    String.id.IDS_VIDEO_FEATURED_MOVIES_TITLE = "IDS_VIDEO_FEATURED_MOVIES_TITLE";
    String.id.IDS_VIDEO_FEATURED_SETS_TITLE = "IDS_VIDEO_FEATURED_SETS_TITLE";
    String.id.IDS_VIDEO_FEATURED_TV_TITLE = "IDS_VIDEO_FEATURED_TV_TITLE";
    String.id.IDS_VIDEO_LAST_NIGHT_SHOWS_TITLE = "IDS_VIDEO_LAST_NIGHT_SHOWS_TITLE";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_ADD = "IDS_VIDEO_LX_COLLECTION_EMPTY_ADD";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_ADD_DESCRIPTION = "IDS_VIDEO_LX_COLLECTION_EMPTY_ADD_DESCRIPTION";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_BROWSE_DESCRIPTION = "IDS_VIDEO_LX_COLLECTION_EMPTY_BROWSE_DESCRIPTION";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_BROWSE_MOVIES = "IDS_VIDEO_LX_COLLECTION_EMPTY_BROWSE_MOVIES";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_BROWSE_TV = "IDS_VIDEO_LX_COLLECTION_EMPTY_BROWSE_TV";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_CHOOSE = "IDS_VIDEO_LX_COLLECTION_EMPTY_CHOOSE";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_CHOOSE_DESCRIPTION = "IDS_VIDEO_LX_COLLECTION_EMPTY_CHOOSE_DESCRIPTION";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_SIGN_IN = "IDS_VIDEO_LX_COLLECTION_EMPTY_SIGN_IN";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_SIGN_IN_DESCRIPTION = "IDS_VIDEO_LX_COLLECTION_EMPTY_SIGN_IN_DESCRIPTION";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_SIGN_UP = "IDS_VIDEO_LX_COLLECTION_EMPTY_SIGN_UP";
    String.id.IDS_VIDEO_LX_COLLECTION_EMPTY_SIGN_UP_DESCRIPTION = "IDS_VIDEO_LX_COLLECTION_EMPTY_SIGN_UP_DESCRIPTION";
    String.id.IDS_VIDEO_LX_COLLECTION_FILTER_ALL = "IDS_VIDEO_LX_COLLECTION_FILTER_ALL";
    String.id.IDS_VIDEO_LX_COLLECTION_FILTER_CLOUD = "IDS_VIDEO_LX_COLLECTION_FILTER_CLOUD";
    String.id.IDS_VIDEO_LX_COLLECTION_FILTER_PC = "IDS_VIDEO_LX_COLLECTION_FILTER_PC";
    String.id.IDS_VIDEO_LX_COLLECTION_MODIFIER_MOVIES = "IDS_VIDEO_LX_COLLECTION_MODIFIER_MOVIES";
    String.id.IDS_VIDEO_LX_COLLECTION_MODIFIER_PERSONAL = "IDS_VIDEO_LX_COLLECTION_MODIFIER_PERSONAL";
    String.id.IDS_VIDEO_LX_COLLECTION_MODIFIER_TV = "IDS_VIDEO_LX_COLLECTION_MODIFIER_TV";
    String.id.IDS_VIDEO_LX_COLLECTION_PIVOT = "IDS_VIDEO_LX_COLLECTION_PIVOT";
    String.id.IDS_VIDEO_LX_COLLECTION_PIVOT_TC = "IDS_VIDEO_LX_COLLECTION_PIVOT_TC";
    String.id.IDS_VIDEO_LX_COLLECTION_SORT_ALPHA = "IDS_VIDEO_LX_COLLECTION_SORT_ALPHA";
    String.id.IDS_VIDEO_LX_COLLECTION_SORT_DATE = "IDS_VIDEO_LX_COLLECTION_SORT_DATE";
    String.id.IDS_VIDEO_LX_COLLECTION_VIDEO_COUNT = "IDS_VIDEO_LX_COLLECTION_VIDEO_COUNT";
    String.id.IDS_VIDEO_LX_DELETE_CONFIRM_COLLECTION = "IDS_VIDEO_LX_DELETE_CONFIRM_COLLECTION";
    String.id.IDS_VIDEO_LX_DELETE_CONFIRM_PC = "IDS_VIDEO_LX_DELETE_CONFIRM_PC";
    String.id.IDS_VIDEO_LX_DELETE_CONFIRM_PC_AND_COLLECTION = "IDS_VIDEO_LX_DELETE_CONFIRM_PC_AND_COLLECTION";
    String.id.IDS_VIDEO_LX_DELETE_FROM_COLLECTION = "IDS_VIDEO_LX_DELETE_FROM_COLLECTION";
    String.id.IDS_VIDEO_LX_DELETE_FROM_PC = "IDS_VIDEO_LX_DELETE_FROM_PC";
    String.id.IDS_VIDEO_LX_DELETE_FROM_PC_AND_COLLECTION = "IDS_VIDEO_LX_DELETE_FROM_PC_AND_COLLECTION";
    String.id.IDS_VIDEO_LX_DETAILS_CAST_AND_CREW_TITLE = "IDS_VIDEO_LX_DETAILS_CAST_AND_CREW_TITLE";
    String.id.IDS_VIDEO_LX_DETAILS_FOOTER_DURATION = "IDS_VIDEO_LX_DETAILS_FOOTER_DURATION";
    String.id.IDS_VIDEO_LX_DETAILS_FOOTER_FILE_SIZE = "IDS_VIDEO_LX_DETAILS_FOOTER_FILE_SIZE";
    String.id.IDS_VIDEO_LX_DETAILS_FOOTER_GENRE = "IDS_VIDEO_LX_DETAILS_FOOTER_GENRE";
    String.id.IDS_VIDEO_LX_DETAILS_FOOTER_NETWORK = "IDS_VIDEO_LX_DETAILS_FOOTER_NETWORK";
    String.id.IDS_VIDEO_LX_DETAILS_FOOTER_PARENTAL_RATING = "IDS_VIDEO_LX_DETAILS_FOOTER_PARENTAL_RATING";
    String.id.IDS_VIDEO_LX_DETAILS_FOOTER_PRIMARY_LANG = "IDS_VIDEO_LX_DETAILS_FOOTER_PRIMARY_LANG";
    String.id.IDS_VIDEO_LX_DETAILS_FOOTER_RELEASE_DATE = "IDS_VIDEO_LX_DETAILS_FOOTER_RELEASE_DATE";
    String.id.IDS_VIDEO_LX_DETAILS_FOOTER_STUDIO = "IDS_VIDEO_LX_DETAILS_FOOTER_STUDIO";
    String.id.IDS_VIDEO_LX_DETAILS_FOOTER_SUBTITLES = "IDS_VIDEO_LX_DETAILS_FOOTER_SUBTITLES";
    String.id.IDS_VIDEO_LX_DETAILS_FOOTER_TITLE = "IDS_VIDEO_LX_DETAILS_FOOTER_TITLE";
    String.id.IDS_VIDEO_LX_DETAILS_HEADER_EPISODE_TITLE = "IDS_VIDEO_LX_DETAILS_HEADER_EPISODE_TITLE";
    String.id.IDS_VIDEO_LX_DETAILS_HEADER_LINK_SUBTITLES = "IDS_VIDEO_LX_DETAILS_HEADER_LINK_SUBTITLES";
    String.id.IDS_VIDEO_LX_DETAILS_HEADER_SERIES_SEASON_SUBTITLE = "IDS_VIDEO_LX_DETAILS_HEADER_SERIES_SEASON_SUBTITLE";
    String.id.IDS_VIDEO_LX_DETAILS_ROTTEN_TOMATOES_TITLE = "IDS_VIDEO_LX_DETAILS_ROTTEN_TOMATOES_TITLE";
    String.id.IDS_VIDEO_LX_DETAILS_SIZE_GB_HD_FORMAT = "IDS_VIDEO_LX_DETAILS_SIZE_GB_HD_FORMAT";
    String.id.IDS_VIDEO_LX_DETAILS_SIZE_GB_SD_FORMAT = "IDS_VIDEO_LX_DETAILS_SIZE_GB_SD_FORMAT";
    String.id.IDS_VIDEO_LX_DETAILS_SIZE_MB_HD_FORMAT = "IDS_VIDEO_LX_DETAILS_SIZE_MB_HD_FORMAT";
    String.id.IDS_VIDEO_LX_DETAILS_SIZE_MB_SD_FORMAT = "IDS_VIDEO_LX_DETAILS_SIZE_MB_SD_FORMAT";
    String.id.IDS_VIDEO_LX_DETAILS_SIZE_SEPARATOR = "IDS_VIDEO_LX_DETAILS_SIZE_SEPARATOR";
    String.id.IDS_VIDEO_LX_MOVIE_FEATURED_GALLERY_TITLE = "IDS_VIDEO_LX_MOVIE_FEATURED_GALLERY_TITLE";
    String.id.IDS_VIDEO_LX_MOVIE_GALLERY_MODIFIER_ALL_GENRES = "IDS_VIDEO_LX_MOVIE_GALLERY_MODIFIER_ALL_GENRES";
    String.id.IDS_VIDEO_LX_MOVIE_GALLERY_MODIFIER_ALL_STUDIOS = "IDS_VIDEO_LX_MOVIE_GALLERY_MODIFIER_ALL_STUDIOS";
    String.id.IDS_VIDEO_LX_MOVIE_GALLERY_PIVOT_TOP_RATED = "IDS_VIDEO_LX_MOVIE_GALLERY_PIVOT_TOP_RATED";
    String.id.IDS_VIDEO_LX_MOVIE_GALLERY_PIVOT_TOP_RENTALS = "IDS_VIDEO_LX_MOVIE_GALLERY_PIVOT_TOP_RENTALS";
    String.id.IDS_VIDEO_LX_MOVIE_GALLERY_PIVOT_TOP_SELLING = "IDS_VIDEO_LX_MOVIE_GALLERY_PIVOT_TOP_SELLING";
    String.id.IDS_VIDEO_LX_MOVIE_GALLERY_TITLE = "IDS_VIDEO_LX_MOVIE_GALLERY_TITLE";
    String.id.IDS_VIDEO_LX_MOVIE_NEW_GALLERY_TITLE = "IDS_VIDEO_LX_MOVIE_NEW_GALLERY_TITLE";
    String.id.IDS_VIDEO_LX_MOVIES_STORE_PIVOT = "IDS_VIDEO_LX_MOVIES_STORE_PIVOT";
    String.id.IDS_VIDEO_LX_MOVIES_STORE_PIVOT_TC = "IDS_VIDEO_LX_MOVIES_STORE_PIVOT_TC";
    String.id.IDS_VIDEO_LX_SEARCH = "IDS_VIDEO_LX_SEARCH";
    String.id.IDS_VIDEO_LX_SEARCH_ALL_EMPTY_DESC = "IDS_VIDEO_LX_SEARCH_ALL_EMPTY_DESC";
    String.id.IDS_VIDEO_LX_SEARCH_ALL_EMPTY_TITLE = "IDS_VIDEO_LX_SEARCH_ALL_EMPTY_TITLE";
    String.id.IDS_VIDEO_LX_SEARCH_CATALOG_EMPTY_DESC = "IDS_VIDEO_LX_SEARCH_CATALOG_EMPTY_DESC";
    String.id.IDS_VIDEO_LX_SEARCH_CATALOG_EMPTY_TITLE = "IDS_VIDEO_LX_SEARCH_CATALOG_EMPTY_TITLE";
    String.id.IDS_VIDEO_LX_SEARCH_COLLECTION_AND_CATALOG_EMPTY_TITLE = "IDS_VIDEO_LX_SEARCH_COLLECTION_AND_CATALOG_EMPTY_TITLE";
    String.id.IDS_VIDEO_LX_SEARCH_COLLECTION_EMPTY_DESC = "IDS_VIDEO_LX_SEARCH_COLLECTION_EMPTY_DESC";
    String.id.IDS_VIDEO_LX_SEARCH_COLLECTION_EMPTY_TITLE = "IDS_VIDEO_LX_SEARCH_COLLECTION_EMPTY_TITLE";
    String.id.IDS_VIDEO_LX_SEARCH_COLLECTION_EMPTY_TITLE_NO_CATALOG = "IDS_VIDEO_LX_SEARCH_COLLECTION_EMPTY_TITLE_NO_CATALOG";
    String.id.IDS_VIDEO_LX_SEARCH_COLLECTION_FILTER = "IDS_VIDEO_LX_SEARCH_COLLECTION_FILTER";
    String.id.IDS_VIDEO_LX_SEARCH_COLLECTION_FILTER_MAX_RESULTS = "IDS_VIDEO_LX_SEARCH_COLLECTION_FILTER_MAX_RESULTS";
    String.id.IDS_VIDEO_LX_SEARCH_COLLECTION_FILTER_NO_COUNT = "IDS_VIDEO_LX_SEARCH_COLLECTION_FILTER_NO_COUNT";
    String.id.IDS_VIDEO_LX_SEARCH_MODIFIER_ALL = "IDS_VIDEO_LX_SEARCH_MODIFIER_ALL";
    String.id.IDS_VIDEO_LX_SEARCH_MODIFIER_MOVIES = "IDS_VIDEO_LX_SEARCH_MODIFIER_MOVIES";
    String.id.IDS_VIDEO_LX_SEARCH_MODIFIER_TV = "IDS_VIDEO_LX_SEARCH_MODIFIER_TV";
    String.id.IDS_VIDEO_LX_SEARCH_MY_EMPTY_DESC = "IDS_VIDEO_LX_SEARCH_MY_EMPTY_DESC";
    String.id.IDS_VIDEO_LX_SEARCH_MY_EMPTY_LINK = "IDS_VIDEO_LX_SEARCH_MY_EMPTY_LINK";
    String.id.IDS_VIDEO_LX_SEARCH_MY_EMPTY_TITLE = "IDS_VIDEO_LX_SEARCH_MY_EMPTY_TITLE";
    String.id.IDS_VIDEO_LX_SEARCH_PIVOT_COLLECTION = "IDS_VIDEO_LX_SEARCH_PIVOT_COLLECTION";
    String.id.IDS_VIDEO_LX_SEARCH_PIVOT_STORE = "IDS_VIDEO_LX_SEARCH_PIVOT_STORE";
    String.id.IDS_VIDEO_LX_SEARCH_STORE_FILTER = "IDS_VIDEO_LX_SEARCH_STORE_FILTER";
    String.id.IDS_VIDEO_LX_SEARCH_STORE_FILTER_MAX_RESULTS = "IDS_VIDEO_LX_SEARCH_STORE_FILTER_MAX_RESULTS";
    String.id.IDS_VIDEO_LX_SEARCH_STORE_FILTER_NO_COUNT = "IDS_VIDEO_LX_SEARCH_STORE_FILTER_NO_COUNT";
    String.id.IDS_VIDEO_LX_TV_FEATURED_GALLERY_TITLE = "IDS_VIDEO_LX_TV_FEATURED_GALLERY_TITLE";
    String.id.IDS_VIDEO_LX_TV_GALLERY_MODIFIER_ALL_GENRES = "IDS_VIDEO_LX_TV_GALLERY_MODIFIER_ALL_GENRES";
    String.id.IDS_VIDEO_LX_TV_GALLERY_MODIFIER_ALL_NETWORKS = "IDS_VIDEO_LX_TV_GALLERY_MODIFIER_ALL_NETWORKS";
    String.id.IDS_VIDEO_LX_TV_GALLERY_PIVOT_TOP_RATED = "IDS_VIDEO_LX_TV_GALLERY_PIVOT_TOP_RATED";
    String.id.IDS_VIDEO_LX_TV_GALLERY_PIVOT_TOP_SELLING = "IDS_VIDEO_LX_TV_GALLERY_PIVOT_TOP_SELLING";
    String.id.IDS_VIDEO_LX_TV_GALLERY_TITLE = "IDS_VIDEO_LX_TV_GALLERY_TITLE";
    String.id.IDS_VIDEO_LX_TV_LAST_NIGHT_GALLERY_TITLE = "IDS_VIDEO_LX_TV_LAST_NIGHT_GALLERY_TITLE";
    String.id.IDS_VIDEO_LX_TV_NEW_GALLERY_TITLE = "IDS_VIDEO_LX_TV_NEW_GALLERY_TITLE";
    String.id.IDS_VIDEO_LX_TV_STORE_PIVOT = "IDS_VIDEO_LX_TV_STORE_PIVOT";
    String.id.IDS_VIDEO_LX_TV_STORE_PIVOT_TC = "IDS_VIDEO_LX_TV_STORE_PIVOT_TC";
    String.id.IDS_VIDEO_LX_VERSION_CHECK_SERVICE_FOR_FEATURES_TEXT = "IDS_VIDEO_LX_VERSION_CHECK_SERVICE_FOR_FEATURES_TEXT";
    String.id.IDS_VIDEO_LX_VERSION_CHECK_SERVICE_TITLE = "IDS_VIDEO_LX_VERSION_CHECK_SERVICE_TITLE";
    String.id.IDS_VIDEO_NEW_MOVIES_TITLE = "IDS_VIDEO_NEW_MOVIES_TITLE";
    String.id.IDS_VIDEO_NEW_TV_TITLE = "IDS_VIDEO_NEW_TV_TITLE";
    String.id.IDS_VIDEO_NOW_PLAYING_AUDIO_TRACK_LABEL = "IDS_VIDEO_NOW_PLAYING_AUDIO_TRACK_LABEL";
    String.id.IDS_VIDEO_NOW_PLAYING_AUDIO_TRACK_LABEL_EXTENDED = "IDS_VIDEO_NOW_PLAYING_AUDIO_TRACK_LABEL_EXTENDED";
    String.id.IDS_VIDEO_NOW_PLAYING_AUDIO_TRACKS_BUTTON = "IDS_VIDEO_NOW_PLAYING_AUDIO_TRACKS_BUTTON";
    String.id.IDS_VIDEO_OFFLINE_DETAILS = "IDS_VIDEO_OFFLINE_DETAILS";
    String.id.IDS_VIDEO_OFFLINE_HEADER = "IDS_VIDEO_OFFLINE_HEADER";
    String.id.IDS_VIDEO_STREAMING_QUALITY_OVERLAY_BODY = "IDS_VIDEO_STREAMING_QUALITY_OVERLAY_BODY";
    String.id.IDS_VIDEO_STREAMING_QUALITY_SELECTOR_BODY = "IDS_VIDEO_STREAMING_QUALITY_SELECTOR_BODY";
    String.id.IDS_VIDEO_STREAMING_QUALITY_SELECTOR_OPTION_AUTOMATIC = "IDS_VIDEO_STREAMING_QUALITY_SELECTOR_OPTION_AUTOMATIC";
    String.id.IDS_VIDEO_STREAMING_QUALITY_SETTINGS_TITLE = "IDS_VIDEO_STREAMING_QUALITY_SETTINGS_TITLE";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_ERROR_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_ERROR_HEADER";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_ERROR_MESSAGE_1 = "IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_ERROR_MESSAGE_1";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_ERROR_MESSAGE_2 = "IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_ERROR_MESSAGE_2";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_ERROR_SHOWDEVICES_LINK = "IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_ERROR_SHOWDEVICES_LINK";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_MAXCONSOLES_ERROR_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_MAXCONSOLES_ERROR_HEADER";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_MAXPC_ERROR_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_MAXPC_ERROR_HEADER";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_MAXPHONE_ERROR_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_MAXPHONE_ERROR_HEADER";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_MAXTABLET_ERROR_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_MAXTABLET_ERROR_HEADER";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_RENTAL_ERROR_MESSAGE = "IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_RENTAL_ERROR_MESSAGE";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_HELP_LINK = "IDS_VIDEO_TH_DEVICEDOMAIN_HELP_LINK";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_OFFLINE_ERROR_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_OFFLINE_ERROR_HEADER";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_CLOSE_BUTTON = "IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_CLOSE_BUTTON";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_DESCRIPTION_1 = "IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_DESCRIPTION_1";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_DESCRIPTION_2 = "IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_DESCRIPTION_2";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_HEADER";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_LINK = "IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_LINK";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_UNREACHABLE_ERROR_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_UNREACHABLE_ERROR_HEADER";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_UNREACHABLE_ERROR_MESSAGE = "IDS_VIDEO_TH_DEVICEDOMAIN_UNREACHABLE_ERROR_MESSAGE";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_CONFIRM_CANCEL = "IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_CONFIRM_CANCEL";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_CONFIRM_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_CONFIRM_HEADER";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_CONFIRM_MESSAGE = "IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_CONFIRM_MESSAGE";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_CONFIRM_REMOVE = "IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_CONFIRM_REMOVE";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_LINK = "IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_LINK";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_TIMELIMIT_ERROR_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_TIMELIMIT_ERROR_HEADER";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_TIMELIMIT_ERROR_MESSAGE = "IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_TIMELIMIT_ERROR_MESSAGE";
    String.id.IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_TIMELIMIT_ERROR_NOTIME_HEADER = "IDS_VIDEO_TH_DEVICEDOMAIN_UNREGISTERDEVICE_TIMELIMIT_ERROR_NOTIME_HEADER";
    String.id.IDS_VIDEO_TOP_MOVIE_RENTALS_TITLE = "IDS_VIDEO_TOP_MOVIE_RENTALS_TITLE";
    String.id.IDS_VIDEO_TOP_RATED_MOVIES_TITLE = "IDS_VIDEO_TOP_RATED_MOVIES_TITLE";
    String.id.IDS_VIDEO_TOP_RATED_TV_TITLE = "IDS_VIDEO_TOP_RATED_TV_TITLE";
    String.id.IDS_VIDEO_TOP_SELLING_MOVIES_TITLE = "IDS_VIDEO_TOP_SELLING_MOVIES_TITLE";
    String.id.IDS_VIDEO_TOP_SELLING_TV_TITLE = "IDS_VIDEO_TOP_SELLING_TV_TITLE";
    String.id.IDS_VIDEO1_MANAGE_FOLDERS_TITLE = "IDS_VIDEO1_MANAGE_FOLDERS_TITLE";
    String.id.IDS_VIDEO1_SEARCH_PROMPT_TITLE = "IDS_VIDEO1_SEARCH_PROMPT_TITLE";

})();
})();
/* >>>>>>/framework/corefx.js:7462 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    var isInUnitTest = window.isInUnitTest;
    var controlId = 0;
    var pendedControlsWeakRefTable;
    var pendingCleanup = [];
    var pendingElementRemovals = [];
    var pendingCleanupTimer = null;
    var alreadyHandlingElementRemove = false;
    var templateCache = {};
    var fragmentCache = {};
    var garbageCollectPromise = null;
    var queuedTemplatesToPreload = [];
    var queuedCriticalTemplatesToPreload = [];
    var currentTextDirection = "";
    var placeholderCssProperties = {
            fontWeight: "font-weight", color: "color", fontSize: "font-size", letterSpacing: "letter-spacing", overflow: "overflow", textOverflow: "-ms-text-overflow", lineHeight: "line-height", whiteSpace: "white-space", backgroundColor: "background-color"
        };
    var bindingElementTargetWeakRefTable;
    function getBindingTargetWeakRefTable() {
        if (!bindingElementTargetWeakRefTable)
            bindingElementTargetWeakRefTable = new MS.Entertainment.UI.Framework.WeakRefTable("about://bindingElementTarget");
        return bindingElementTargetWeakRefTable
    }
    function patchWindowAlert() {
        var alertsToShow = [];
        var dialogVisible = false;
        function showPendingAlerts() {
            if (dialogVisible || !alertsToShow.length)
                return;
            dialogVisible = true;
            new Windows.UI.Popups.MessageDialog(alertsToShow.shift()).showAsync().done(function() {
                dialogVisible = false;
                showPendingAlerts()
            })
        }
        window.alert = function(message) {
            if (window.console && window.console.log)
                window.console.log(message);
            if (!isInUnitTest) {
                alertsToShow.push(message);
                showPendingAlerts()
            }
        }
    }
    if (!window.alert)
        patchWindowAlert();
    var fxassert = function fixupAssertHelper() {
            var existingAssert = WinJS.Utilities.getMember("MS.Entertainment.UI.Framework.assert");
            if (existingAssert)
                fxassert = existingAssert;
            else
                fxassert = localFxassert;
            fxassert.apply(null, arguments)
        };
    function localFxassert(assertion, message) {
        if (assertion)
            return;
        debugger
    }
    {};
    var EventMixinEvent = WinJS.Class.define(function EventMixinEvent_ctor(type, detail, target) {
            this.detail = detail;
            this.target = target;
            this.srcElement = target;
            this.timeStamp = Date.now();
            this.type = type
        }, {
            bubbles: {
                value: false, writable: false
            }, cancelable: {
                    value: false, writable: false
                }, currentTarget: {get: function() {
                        return this.target
                    }}, defaultPrevented: {get: function() {
                        return this._preventDefaultCalled
                    }}, trusted: {
                    value: false, writable: false
                }, eventPhase: {
                    value: 0, writable: false
                }, target: null, srcElement: null, timeStamp: null, type: null, preventDefault: function() {
                    this._preventDefaultCalled = true
                }, stopImmediatePropagation: function() {
                    this._stopImmediatePropagationCalled = true
                }, stopPropagation: function(){}
        }, {supportedForProcessing: false});
    var eventMixin = {
            _eventListeners: null, addEventListener: function(type, listener, useCapture) {
                    useCapture = useCapture || false;
                    this._eventListeners = this._eventListeners || {};
                    var eventListeners = (this._eventListeners[type] = this._eventListeners[type] || []);
                    for (var i = 0, len = eventListeners.length; i < len; i++) {
                        var l = eventListeners[i];
                        if (l.useCapture === useCapture && l.listener === listener)
                            return
                    }
                    eventListeners.push({
                        listener: listener, useCapture: useCapture
                    })
                }, dispatchEvent: function(type, details) {
                    var listeners = this._eventListeners && this._eventListeners[type];
                    if (listeners) {
                        var eventValue = new EventMixinEvent(type, details, this);
                        listeners = listeners.slice(0, listeners.length);
                        for (var i = 0, len = listeners.length; i < len && !eventValue._stopImmediatePropagationCalled; i++)
                            listeners[i].listener(eventValue);
                        return eventValue.defaultPrevented || false
                    }
                    return false
                }, removeEventListener: function(type, listener, useCapture) {
                    useCapture = useCapture || false;
                    var listeners = this._eventListeners && this._eventListeners[type];
                    if (listeners)
                        for (var i = 0, len = listeners.length; i < len; i++) {
                            var l = listeners[i];
                            if (l.listener === listener && l.useCapture === useCapture) {
                                listeners.splice(i, 1);
                                if (listeners.length === 0)
                                    delete this._eventListeners[type];
                                break
                            }
                        }
                }
        };
    var updatePropertyMixin = {
            updateAndNotify: function updateAndNotifyProperty(name, newValue) {
                var storageName = "_" + name;
                var oldValue = this[storageName];
                if (oldValue === newValue)
                    return WinJS.Promise.wrap();
                this[storageName] = newValue;
                return this.dispatchChangeAndNotify(name, newValue, oldValue)
            }, dispatchChangeAndNotify: function dispatchChangeAndNotify(name, newValue, oldValue) {
                    this.dispatchEvent(name + "Changed", {
                        newValue: newValue, oldValue: oldValue
                    });
                    return this.notify(name, newValue, oldValue)
                }
        };
    var scriptTagCache = {};
    var baseAppUriLength = (window.location.protocol + "//" + window.location.host).length;
    WinJS.Namespace.define("MS.Entertainment.UI.Framework", {
        derive: function derive(baseClass, constructor, instanceMembers, staticMembers) {
            var value;
            return {
                    get: function derive_getter() {
                        if (value)
                            return value;
                        if (typeof baseClass === "string") {
                            var baseClassName = baseClass;
                            baseClass = WinJS.Utilities.getMember(baseClass);
                            fxassert(baseClass, "Could not resolve baseClass named " + baseClassName)
                        }
                        fxassert(baseClass, "Base class was not valid. Can't derive without something to derive from");
                        instanceMembers = instanceMembers || {};
                        if (!instanceMembers.base && baseClass instanceof Function)
                            instanceMembers.base = function() {
                                var original = this.base;
                                this.base = baseClass.prototype.base;
                                baseClass.apply(this, arguments);
                                this.base = original
                            };
                        value = WinJS.Class.derive(baseClass, constructor, instanceMembers, staticMembers);
                        return value
                    }, set: function derive_setter(v) {
                            value = v
                        }, configurable: true
                }
        }, define: function define(constructor, instanceMembers, staticMembers) {
                var value;
                return {
                        get: function define_getter() {
                            if (value)
                                return value;
                            value = WinJS.Class.define(constructor, instanceMembers, staticMembers);
                            return value
                        }, set: function define_setter(v) {
                                value = v
                            }
                    }
            }, lazyDefine: function lazyDefine(work) {
                var value;
                return {
                        get: function lazyDefine_getter() {
                            if (value)
                                return value;
                            value = work();
                            return value
                        }, set: function lazyDefine_setter(v) {
                                value = v
                            }, configurable: true
                    }
            }, _loadScriptsWork: function _loadScriptsWork(lazyLoad, fileList) {
                var scriptsToLoad = Array.prototype.map.call(fileList, function(item) {
                        item = item.toLowerCase();
                        if (item.charAt(0) !== "/")
                            throw new Error("Must use absolute path: " + item);
                        return item
                    });
                var refreshedCache = false;
                var scriptsLoaded = scriptsToLoad.reduce(function(data, script) {
                        if (MS.Entertainment.UI.Framework.scriptMappings) {
                            var mappedScript = MS.Entertainment.UI.Framework.scriptMappings[script.toLowerCase()];
                            if (mappedScript)
                                script = mappedScript
                        }
                        if (scriptTagCache.hasOwnProperty(script))
                            return data;
                        if (!refreshedCache) {
                            MS.Entertainment.UI.Framework._refreshScriptLoaderCache();
                            refreshedCache = true
                        }
                        if (scriptTagCache.hasOwnProperty(script))
                            return data;
                        var complete = WinJS.Promise.as();
                        if (WinJS.Utilities.Scheduler && WinJS.Promise.is(data))
                            complete = data.then(function() {
                                return WinJS.Utilities.Scheduler.schedulePromiseNormal(null, "MS.Entertainment_LazyScriptLoader:" + script)
                            });
                        complete = complete.then(function() {
                            if (scriptTagCache.hasOwnProperty(script))
                                return;
                            var scriptTag = document.createElement("script");
                            scriptTag.setAttribute("async", "false");
                            var signal = new MS.Entertainment.UI.Framework.Signal;
                            var oncompleted = signal.complete.bind(signal);
                            scriptTag.addEventListener("error", oncompleted);
                            scriptTag.addEventListener("load", oncompleted);
                            scriptTagCache[script] = null;
                            scriptTag.setAttribute("src", script);
                            document.head.appendChild(scriptTag);
                            return signal.promise
                        });
                        if (Array.isArray(data))
                            data.push(complete);
                        else
                            data = complete;
                        return data
                    }, (lazyLoad ? WinJS.Promise.as() : []));
                return (WinJS.Promise.is(scriptsLoaded) ? scriptsLoaded : WinJS.Promise.join(scriptsLoaded))
            }, loadScripts: function loadScripts() {
                return MS.Entertainment.UI.Framework._loadScriptsWork.call(this, false, arguments)
            }, lazyLoadScripts: function lazyLoadScripts() {
                return MS.Entertainment.UI.Framework._loadScriptsWork.call(this, true, arguments)
            }, _refreshScriptLoaderCache: function _refreshScriptLoaderCache() {
                var documentScripts = document.head.querySelectorAll("script[src]");
                var scriptsLength = Object.keys(scriptTagCache).length;
                var documentScriptsLength = documentScripts.length;
                for (var i = scriptsLength; i < documentScriptsLength; i++)
                    scriptTagCache[documentScripts[i].src.substr(baseAppUriLength).toLowerCase()] = null
            }, _clearScriptLoaderCache: function _clearScriptLoaderCache() {
                scriptTagCache = {}
            }
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Framework", {
        RIGHT_MOUSEBUTTON: 2, POINTER_TYPE_TOUCH: 2, flags: {
                attachLargeObjectToUnloadedControl: false, attachCookieToRemovedDomElements: false, dontPendControlUnloadCleanup: false
            }, enableSetImmediateBatching: function enableSetImmediateBatching() {
                if (WinJS.Utilities.Scheduler)
                    return;
                if (window.setImmediatePatched)
                    return;
                var queue = [];
                var originalSetImmediate = window.setImmediate;
                var setImmediateCallback = function setImmediateCallback() {
                        var timeNow = Date.now();
                        do {
                            try {
                                queue[0].callback(queue[0].args)
                            }
                            catch(e) {
                                WinJS.Application.onerror(e)
                            }
                            queue.shift()
                        } while (queue.length && (Date.now() - timeNow) < MS.Entertainment.UI.Framework._setImmediateTimeSlice);
                        if (queue.length)
                            originalSetImmediate(setImmediateCallback)
                    };
                window.setImmediate = function _setImmediate(callback, args) {
                    if (MS.Entertainment.UI.Framework._setImmediateTimeSlice) {
                        queue.push({
                            callback: callback, args: args
                        });
                        if (queue.length === 1)
                            originalSetImmediate(setImmediateCallback)
                    }
                    else
                        originalSetImmediate(callback, args)
                };
                window.setImmediatePatched = true;
                if (!isInUnitTest)
                    MS.Entertainment.UI.Framework.setImmediateMode = MS.Entertainment.UI.Framework.setImmediateModes.startup
            }, setImmediateMode: {set: function setImmediateMode(value) {
                    MS.Entertainment.UI.Framework._setImmediateTimeSlice = value
                }}, setImmediateModes: {
                startup: 300, normal: 100, panning: 0, none: 0
            }, _setImmediateTimeSlice: 0, ObservableBase: WinJS.Class.mix(function observableBaseConstructor(){}, eventMixin, updatePropertyMixin, WinJS.Binding.mixin), PropertyChangedEventArgs: WinJS.Class.define(function ObservablePropertyChangeEventArgs(newValue, oldValue) {
                this.detail = {
                    newValue: newValue, oldValue: oldValue
                }
            }, {detail: null}), EventMixin: eventMixin, UpdatePropertyMixin: updatePropertyMixin, observableProperty: function observableProperty(name, value, makeValueObservable) {
                var storageName = "_" + name;
                return {
                        get: function getter() {
                            if (!(storageName in this))
                                return value;
                            var currentValue = this[storageName];
                            if (makeValueObservable)
                                currentValue = WinJS.Binding.as(currentValue);
                            return currentValue
                        }, set: function setter(newValue) {
                                if (makeValueObservable)
                                    newValue = WinJS.Binding.unwrap(newValue);
                                this.updateAndNotify(name, newValue)
                            }
                    }
            }, preloadEnabled: false, preloadCriticalEnabled: false, preloadTemplate: function preloadTemplate(template, critical) {
                if (critical && !MS.Entertainment.UI.Framework.preloadCriticalEnabled)
                    queuedCriticalTemplatesToPreload.push(template);
                else if (!critical && !MS.Entertainment.UI.Framework.preloadEnabled)
                    queuedTemplatesToPreload.push(template);
                else
                    MS.Entertainment.UI.Framework.loadTemplate(template, null, true)
            }, unblockCriticalPreloading: function unblockCriticalPreloading() {
                MS.Entertainment.UI.Framework.preloadCriticalEnabled = true;
                var preloads = queuedCriticalTemplatesToPreload;
                queuedCriticalTemplatesToPreload = [];
                preloads.forEach(function(template) {
                    MS.Entertainment.UI.Framework.loadTemplate(template, null, true)
                })
            }, unblockPreloading: function unblockPreloading() {
                MS.Entertainment.UI.Framework.preloadEnabled = true;
                var preloads = queuedTemplatesToPreload;
                queuedTemplatesToPreload = [];
                preloads.forEach(function(template) {
                    MS.Entertainment.UI.Framework.loadTemplate(template, null, true)
                })
            }, parseTemplate: function parseTemplate(templatePath) {
                if (!templatePath)
                    throw new Error("No valid template path supplied");
                var parts = templatePath.split("#", 2);
                var result = {
                        path: parts[0], id: ""
                    };
                if (parts.length > 1)
                    result.id = parts[1];
                return result
            }, loadTemplate: function loadTemplate(templatePath, templateId, skipDefer) {
                var templateParts;
                var templateName;
                var cacheKey;
                if (!templatePath)
                    return WinJS.Promise.as();
                if (!templateId) {
                    templateParts = MS.Entertainment.UI.Framework.parseTemplate(templatePath);
                    templatePath = templateParts.path;
                    templateId = templateParts.id
                }
                if (!templateId)
                    throw new Error("Couldn't find a templateid in the provided path: " + templatePath);
                cacheKey = templatePath + "#" + templateId;
                window.msWriteProfilerMark("corefx:LoadTemplate:" + cacheKey + ",StartTM");
                function getTemplate() {
                    var cachedControl = templateCache[cacheKey];
                    if (cachedControl) {
                        window.msWriteProfilerMark("corefx:LoadTemplate:CompletedFromCache");
                        window.msWriteProfilerMark("corefx:LoadTemplate:" + cacheKey + ",StopTM");
                        return cachedControl
                    }
                    var fragmentPromise = fragmentCache[templatePath];
                    window.msWriteProfilerMark("corefx:LoadTemplate:NotInCache");
                    if (!fragmentPromise) {
                        try {
                            fragmentPromise = WinJS.UI.Fragments.renderCopy(templatePath)
                        }
                        catch(e) {
                            MS.Entertainment.UI.Framework.fail("Failed to renderCopy for " + templatePath + " Error: " + e.toString());
                            return
                        }
                        fragmentCache[templatePath] = fragmentPromise
                    }
                    return fragmentPromise.then(function renderFragment(v) {
                            window.msWriteProfilerMark("corefx:LoadTemplate:FragmentLoaded");
                            var elements = v.querySelectorAll("[data-ent-templateid]");
                            var requestedTemplatePromise;
                            Array.prototype.forEach.call(elements, function instantiateAllTemplatesInFragment(template) {
                                var control = WinJS.UI.process(template);
                                var controlId = template.getAttribute("data-ent-templateid");
                                if (controlId === templateId)
                                    requestedTemplatePromise = control;
                                control.then(function insertTemplateIntoCache(templateInstance) {
                                    if (templateInstance)
                                        templateInstance.disableOptimizedProcessing = true;
                                    return templateCache[templatePath + "#" + controlId] = templateInstance
                                })
                            });
                            if (!requestedTemplatePromise)
                                throw"Could not locate template: " + templateId;
                            window.msWriteProfilerMark("corefx:LoadTemplate:TemplateExtracted");
                            return requestedTemplatePromise
                        }).then(function(processedControl) {
                            fxassert(processedControl, "Template found was not a control");
                            processedControl.disableOptimizedProcessing = true;
                            window.msWriteProfilerMark("corefx:LoadTemplate:" + cacheKey + ",StopTM");
                            return (templateCache[cacheKey] = processedControl)
                        }).then(null, function(e) {
                            fragmentCache[templatePath] = null;
                            WinJS.UI.Fragments.clearCache(templatePath);
                            return WinJS.Promise.wrapError(e)
                        })
                }
                if (skipDefer)
                    return WinJS.Promise.as(getTemplate());
                else
                    return WinJS.Promise.timeout().then(getTemplate)
            }, unloadAndAssertIfFails: function unloadAndAssertIfFails(instance) {
                if (instance._unloadBaseCalled)
                    return;
                try {
                    instance._unloadBaseCalled = false;
                    instance.unload();
                    fxassert(instance._unloadBaseCalled, "base unload() not called for: " + instance.templateName || instance.itemTemplate || instance.controlName)
                }
                catch(e) {
                    fxassert(false, "Exception unloading control: " + e)
                }
            }, cleanupSingleControl: function cleanupSingleControl(controlToCleanup) {
                if (!controlToCleanup || controlToCleanup._unloaded)
                    return;
                if (controlToCleanup.unload && (controlToCleanup.unload !== MS.Entertainment.UI.Framework._UserControl.prototype.unload))
                    MS.Entertainment.UI.Framework.unloadAndAssertIfFails(controlToCleanup);
                controlToCleanup._unloaded = true;
                if (controlToCleanup._cleanupAttachedEvents)
                    controlToCleanup._cleanupAttachedEvents();
                if (!MS.Entertainment.UI.Framework.flags.dontPendControlUnloadCleanup)
                    pendingCleanup.push(pendedControlsWeakRefTable.set(controlToCleanup))
            }, domElementRemovedHandler: function(evt) {
                if (evt.target.nodeType !== 1)
                    return;
                var element = evt.target;
                var suppressUnload = element.suppressUnload || (element.winControl && element.winControl.suppressUnload);
                var isAppBar = element.winControl instanceof WinJS.UI.AppBar;
                var isListViewItem = element.listViewReset || element.listViewItemContainer;
                var isDirectChildOfSemanticZoom;
                var isDirectChildOfScrollViewer;
                var isDirectChildOfItemContainer;
                var parentElement = element.parentElement;
                if (parentElement) {
                    isDirectChildOfSemanticZoom = WinJS.Utilities.hasClass(parentElement, "win-semanticzoom");
                    isDirectChildOfScrollViewer = WinJS.Utilities.hasClass(parentElement, "win-scrollviewer");
                    isDirectChildOfItemContainer = WinJS.Utilities.hasClass(parentElement, "win-itemcontainer")
                }
                if (suppressUnload || isAppBar || isListViewItem || isDirectChildOfSemanticZoom || isDirectChildOfScrollViewer || isDirectChildOfItemContainer)
                    return;
                if (element.unloadTimeout > 0) {
                    MS.Entertainment.UI.Framework.delayedControlCleanup(element, element.unloadTimeout, function cleanupCallback(element) {
                        MS.Entertainment.UI.Framework.unloadControlTree(element)
                    });
                    return
                }
                var listViewItem = null;
                if (element && WinJS.Utilities.hasClass(element, "win-item"))
                    listViewItem = element;
                else {
                    var confirmedListViewItemParent = null;
                    var possibleListViewItemParent = element;
                    if (possibleListViewItemParent && WinJS.Utilities.hasClass(possibleListViewItemParent, "win-itemscontainer")) {
                        confirmedListViewItemParent = possibleListViewItemParent;
                        possibleListViewItemParent = possibleListViewItemParent.firstElementChild
                    }
                    if (possibleListViewItemParent && WinJS.Utilities.hasClass(possibleListViewItemParent, "win-itemsblock")) {
                        confirmedListViewItemParent = possibleListViewItemParent;
                        possibleListViewItemParent = possibleListViewItemParent.firstElementChild
                    }
                    if (possibleListViewItemParent && WinJS.Utilities.hasClass(possibleListViewItemParent, "win-container")) {
                        confirmedListViewItemParent = possibleListViewItemParent;
                        possibleListViewItemParent = possibleListViewItemParent.firstElementChild
                    }
                    if (possibleListViewItemParent && WinJS.Utilities.hasClass(possibleListViewItemParent, "win-itembox"))
                        confirmedListViewItemParent = possibleListViewItemParent;
                    if (confirmedListViewItemParent && confirmedListViewItemParent.firstElementChild)
                        if (WinJS.Utilities.hasClass(confirmedListViewItemParent.firstElementChild, "win-item"))
                            listViewItem = confirmedListViewItemParent.firstElementChild;
                        else
                            listViewItem = confirmedListViewItemParent.querySelector(".win-item")
                }
                if (listViewItem && (listViewItem.listViewReset || listViewItem.listViewItemContainer))
                    return;
                if (alreadyHandlingElementRemove) {
                    pendingElementRemovals.push(element);
                    return
                }
                alreadyHandlingElementRemove = true;
                while (element) {
                    MS.Entertainment.UI.Framework.unloadControlTree(element);
                    element = pendingElementRemovals.shift()
                }
                alreadyHandlingElementRemove = false
            }, unloadControlTree: function unloadControlTree(element) {
                if (!element)
                    return;
                if (element.firstElementChild && !WinJS.Utilities.hasClass(element, "win-profilepicker-usertile"))
                    MS.Entertainment.UI.Framework.applyWithSelector(element, "img", function cleanUpImages(item) {
                        if (item.winControl && item.winControl.unloadTimeout > 0)
                            MS.Entertainment.UI.Framework.delayedControlCleanup(item, item.winControl.unloadTimeout, function cleanupCallback(element) {
                                element.src = String.empty;
                                element.setAttribute("src", String.empty)
                            });
                        else if (!(item.winControl && item.winControl.suppressSourceClear)) {
                            item.src = String.empty;
                            item.setAttribute("src", String.empty)
                        }
                    });
                else if (element.tagName && element.tagName === "IMG")
                    if (!(element.winControl && element.winControl.suppressSourceClear)) {
                        element.src = String.empty;
                        element.setAttribute("src", String.empty)
                    }
                var nodes = element.querySelectorAll("[data-win-control], .ent-control");
                for (var i = nodes.length - 1; i > -1; i--) {
                    var node = nodes[i];
                    var control = node.winControl;
                    if (!control || control.suppressUnload)
                        continue;
                    if (control.unloadTimeout > 0)
                        MS.Entertainment.UI.Framework.delayedControlCleanup(node, control.unloadTimout, function cleanupSingleControlDelayed() {
                            MS.Entertainment.UI.Framework.cleanupSingleControl(control)
                        });
                    else
                        MS.Entertainment.UI.Framework.cleanupSingleControl(control)
                }
                if (element.winControl)
                    MS.Entertainment.UI.Framework.cleanupSingleControl(element.winControl);
                if (!MS.Entertainment.UI.Framework.flags.dontPendControlUnloadCleanup) {
                    element.isTree = true;
                    pendingCleanup.push(pendedControlsWeakRefTable.set(element));
                    if (pendingCleanupTimer)
                        clearTimeout(pendingCleanupTimer);
                    pendingCleanupTimer = setTimeout(function() {
                        pendingCleanup.forEach(function(item) {
                            var control = pendedControlsWeakRefTable.get(item);
                            if (!control)
                                return;
                            if (control._cleanupSetMembers)
                                control._cleanupSetMembers();
                            if (control._parent)
                                control._parent = null;
                            if (WinJS.Utilities.disposeSubTree) {
                                if (control.isTree)
                                    WinJS.Utilities.disposeSubTree(control);
                                if (control.domElement && !WinJS.Utilities.hasClass(control.domElement, "win-disposable"))
                                    control.domElement = null
                            }
                            else
                                control.domElement = null
                        });
                        pendingCleanup = []
                    }, MS.Entertainment.UI.Framework.autoCleanupTimeout)
                }
            }, enableAutoControlCleanup: function enableAutoControlCleanup() {
                pendedControlsWeakRefTable = new MS.Entertainment.UI.Framework.WeakRefTable("about://pendingCleanup");
                document.addEventListener("DOMNodeRemoved", MS.Entertainment.UI.Framework.domElementRemovedHandler)
            }, disableAutoControlCleanup: function disableAutoControlCleanup() {
                document.removeEventListener("DOMNodeRemoved", MS.Entertainment.UI.Framework.domElementRemovedHandler)
            }, autoCleanupTimeout: 5000, delayedControlCleanup: function delayedControlCleanup(element, unloadTimeout, cleanupCallback) {
                WinJS.Promise.timeout(unloadTimeout).done(function cleanUpControlIfStillNotInDom() {
                    if (element && !element._unloaded && !document.body.contains(element))
                        cleanupCallback(element)
                })
            }, Placeholder: MS.Entertainment.UI.Framework.define(function placeholderConstructor(template, replacements) {
                this._template = template;
                this._replacements = replacements
            }, {
                _replacements: null, _template: null, render: function render(container, data) {
                        var renderedPlaceholder = this._replacements.reduce(function replaceTokensInPlaceholder(placeholder, item, index) {
                                var content = WinJS.Utilities.getMember(item, data) || String.empty;
                                if (content)
                                    content = MS.Entertainment.Utilities.simpleEscapeHTML(content);
                                return placeholder.replace("{" + index + "}", content)
                            }, this._template);
                        container.innerHTML = renderedPlaceholder
                    }
            }), getPlaceholderForElement: function getPlaceholderForElement(element) {
                var placeholders = element.querySelectorAll(".placeholderItem");
                if (placeholders.length === 0)
                    return null;
                var template = "<div style='position: relative'>";
                var replacements = [];
                template = Array.prototype.reduce.call(placeholders, function(currentTemplate, item, index) {
                    var style = window.getComputedStyle(item);
                    var pos = MS.Entertainment.Utilities.getRelativeOffset(item, element);
                    var width = WinJS.Utilities.getContentWidth(item);
                    var height = WinJS.Utilities.getContentHeight(item);
                    var memberPath = item.getAttribute("data-ent-placeholderdatapath");
                    var extractedStyles = Object.keys(placeholderCssProperties).reduce(function(styleString, property) {
                            var styleValue = style[property];
                            if (styleValue)
                                styleString += placeholderCssProperties[property] + ": " + styleValue + "; ";
                            return styleString
                        }, String.empty);
                    currentTemplate += "<div style='position: absolute; ";
                    currentTemplate += extractedStyles;
                    currentTemplate += "top: " + (pos.top) + "px; ";
                    currentTemplate += "left: " + (pos.left) + "px; ";
                    currentTemplate += "height: " + height + "px; ";
                    currentTemplate += "width: " + width + "px; ";
                    currentTemplate += "'>";
                    if (memberPath) {
                        currentTemplate += "{" + replacements.length + "}";
                        replacements.push(memberPath)
                    }
                    currentTemplate += "</div>";
                    return currentTemplate
                }, template);
                template += "</div>";
                return new MS.Entertainment.UI.Framework.Placeholder(template, replacements)
            }, WeakRefTable: MS.Entertainment.UI.Framework.define(function(anchorUri) {
                fxassert(anchorUri, "No anchor URI supplied");
                this._anchor = new Windows.Foundation.Uri(anchorUri)
            }, {
                _anchor: null, _nextKey: 0, set: function set(item, customKey) {
                        var key = customKey || ++this._nextKey;
                        fxassert(item, "Actually need an item to store in the weak ref table");
                        if (!item)
                            return key;
                        if (msSetWeakWinRTProperty)
                            msSetWeakWinRTProperty(this._anchor, key, item);
                        else
                            key = {key: item};
                        return key
                    }, get: function get(key) {
                        fxassert(key, "You need to supply a key");
                        if (!key)
                            return null;
                        if (msGetWeakWinRTProperty)
                            return msGetWeakWinRTProperty(this._anchor, key);
                        return key.item
                    }
            }), ReferenceMap: MS.Entertainment.UI.Framework.define(function() {
                this._references = [];
                this._values = []
            }, {
                _references: null, _values: null, set: function set(reference, value) {
                        var index = this._references.indexOf(reference);
                        if (index < 0)
                            index = this._references.push(reference) - 1;
                        this._values[index] = value
                    }, get: function get(reference) {
                        var index = this._references.indexOf(reference);
                        if (index < 0)
                            return;
                        {};
                        return this._values[index]
                    }, remove: function remove(reference) {
                        var index = this._references.indexOf(reference);
                        if (index < 0)
                            return;
                        this._references.splice(index, 1);
                        this._values.splice(index, 1)
                    }
            }), bindWorker: function bindWorker(bindable, sourceProperties, handler) {
                if (sourceProperties.length > 1) {
                    var root = {};
                    var current = root;
                    for (var i = 0, length = sourceProperties.length - 1; i < length; i++)
                        current = current[sourceProperties[i]] = {};
                    current[sourceProperties[sourceProperties.length - 1]] = handler;
                    return WinJS.Binding.bind(bindable, root, true)
                }
                else if (sourceProperties.length === 1) {
                    bindable.bind(sourceProperties[0], handler, true);
                    return {cancel: function() {
                                bindable.unbind(sourceProperties[0], handler);
                                this.cancel = function(){}
                            }}
                }
            }, weakElementBindingInitializer: function weakElementBindingInitializer(handler) {
                var elementTargetedHandler = function(source, sourceProperties, dest, destProperties) {
                        var weakRefTable = getBindingTargetWeakRefTable();
                        var id = weakRefTable.set(dest);
                        var propertyPath = destProperties.concat([]);
                        var bindResult;
                        var bindingHandler = function bindingHandler(value) {
                                var targetElement = getBindingTargetWeakRefTable().get(id);
                                if (targetElement)
                                    handler(value, targetElement, propertyPath, source);
                                else if (bindResult) {
                                    bindResult.cancel();
                                    bindResult = null
                                }
                            };
                        bindResult = MS.Entertainment.Utilities.bindWorker(WinJS.Binding.as(source), sourceProperties, bindingHandler);
                        return bindResult
                    };
                return WinJS.Utilities.markSupportedForProcessing(elementTargetedHandler)
            }, thawControlsInSubtree: function thawControlsInSubtree(element) {
                var promisesToWaitOn = [];
                fxassert(element, "No element supplied");
                MS.Entertainment.UI.Framework.applyWithSelector(element, "[data-win-control], .ent-control", function thawControl(candidateControl) {
                    if (!candidateControl.winControl || !candidateControl.winControl.thaw || (candidateControl.winControl.thaw === MS.Entertainment.UI.Framework._UserControl.prototype.thaw))
                        return;
                    var instance = candidateControl.winControl;
                    instance._thawBaseCalled = false;
                    var thawResult = instance.thaw();
                    fxassert(instance._thawBaseCalled, "base thaw() not called!");
                    if (WinJS.Promise.is(thawResult))
                        promisesToWaitOn.push(thawResult)
                });
                if (promisesToWaitOn.length > 0)
                    return WinJS.Promise.any(promisesToWaitOn);
                else
                    return WinJS.Promise.timeout()
            }, freezeControlsInSubtree: function freezeControlsInSubtree(element) {
                var promises = [];
                fxassert(element, "No element supplied");
                MS.Entertainment.UI.Framework.applyWithSelector(element, "[data-win-control], .ent-control", function freezeControl(candidateControl) {
                    if (!candidateControl.winControl || !candidateControl.winControl.freeze || (candidateControl.winControl.freeze === MS.Entertainment.UI.Framework._UserControl.prototype.freeze))
                        return;
                    var instance = candidateControl.winControl;
                    instance._freezeBaseCalled = false;
                    var freezeResult = instance.freeze();
                    fxassert(instance._freezeBaseCalled, "base freeze() not called!");
                    if (WinJS.Promise.is(freezeResult))
                        promises.push(freezeResult)
                });
                if (promises.length > 0)
                    return WinJS.Promise.any(promises);
                else
                    return WinJS.Promise.wrap()
            }, applyWithSelector: function(root, query, operation, includeRoot) {
                if (!root || !root.querySelectorAll) {
                    fxassert(false, "No valid root element provided");
                    return
                }
                if (includeRoot)
                    operation(root);
                WinJS.Utilities.query(query, root).forEach(operation)
            }, parseEventAttributes: function parse(input, handlerSource) {
                var pairs;
                var results = [];
                fxassert(input, "No input specified");
                if (!input)
                    return;
                fxassert(handlerSource, "No handler source provided");
                if (!handlerSource)
                    throw"No Handler source provided";
                pairs = input.split(";");
                if (!pairs || pairs.length < 1)
                    return;
                pairs.forEach(function processEventItems(item) {
                    var eventName;
                    var handler;
                    var handlerMember;
                    if (!item)
                        return;
                    var pair = item.split(":");
                    if (!pair || (pair.length !== 2)) {
                        fxassert(false, "Pair couldn't be parsed: " + item);
                        return
                    }
                    handler = pair[1].trim();
                    if (handlerSource) {
                        handlerMember = WinJS.Utilities.getMember(handler, handlerSource);
                        if (handlerMember)
                            handler = handlerMember
                    }
                    eventName = pair[0].trim();
                    results.push({
                        event: eventName, handler: handler
                    })
                });
                return results
            }, processDeclEvents: function processDeclEvents(elementToProcess) {
                fxassert(elementToProcess, "Element was not supplied");
                var control = elementToProcess.winControl;
                if (!control)
                    return;
                var attachedEventsToCleanup = [];
                MS.Entertainment.UI.Framework.applyWithSelector(elementToProcess, "[data-ent-event]", function processDeclEventElement(elementToInspect) {
                    if (elementToInspect.alreadyProcessedForEntEvent)
                        return;
                    var eventAttributeData = elementToInspect.getAttribute("data-ent-event");
                    if (!eventAttributeData)
                        return;
                    elementToInspect.alreadyProcessedForEntEvent = true;
                    var eventsToBind = MS.Entertainment.UI.Framework.parseEventAttributes(eventAttributeData, control);
                    if (!eventsToBind || eventsToBind.length < 1)
                        return;
                    eventsToBind.forEach(function bindEvents(eventInfo) {
                        if (!eventInfo.handler)
                            return;
                        if (typeof eventInfo.handler === "string") {
                            var message = "Unable to find '" + eventInfo.handler + "' on '" + control.toString() + "'";
                            fxassert(false, message);
                            return
                        }
                        var domEventWrapper = function domEventWrapperHandler(evt) {
                                eventInfo.handler.call(control, evt)
                            };
                        elementToInspect.addEventListener(eventInfo.event, domEventWrapper);
                        attachedEventsToCleanup.push({
                            element: elementToInspect, eventName: eventInfo.event, handler: domEventWrapper
                        });
                        var additionalEventToAttach = null;
                        if (eventInfo.event === "pointerdown")
                            additionalEventToAttach = "MSPointerDown";
                        else if (eventInfo.event === "pointermove")
                            additionalEventToAttach = "MSPointerMove";
                        if (additionalEventToAttach) {
                            elementToInspect.addEventListener(additionalEventToAttach, domEventWrapper);
                            attachedEventsToCleanup.push({
                                element: elementToInspect, eventName: additionalEventToAttach, handler: domEventWrapper
                            })
                        }
                    })
                });
                if (attachedEventsToCleanup && attachedEventsToCleanup.length)
                    control._attachedEventsToCleanup = attachedEventsToCleanup
            }, delayInitializeChildren: function delayInitializeChildren(container, requireDelayInitialization) {
                if (!container)
                    return;
                var itemsInDelayInitializeBlock = null;
                var inDelayInitializeBlock = function inDelayInitializeBlock(element) {
                        var containsElement = false;
                        itemsInDelayInitializeBlock = itemsInDelayInitializeBlock || WinJS.Utilities.query(".ent-delayInitializeBlock", container) || [];
                        for (var i = 0; i < itemsInDelayInitializeBlock.length && !containsElement; i++)
                            containsElement = itemsInDelayInitializeBlock[i].contains(element);
                        return containsElement
                    };
                MS.Entertainment.UI.Framework.applyWithSelector(container, ".ent-delayInitialize, [data-win-control], .ent-control", function executeDelayInitialize(element) {
                    var currentControl = element.winControl;
                    if (currentControl && currentControl.enableDelayInitialization && currentControl.delayInitialize && !inDelayInitializeBlock(element))
                        if (currentControl.isInitialized || !currentControl.initialize)
                            currentControl.delayInitialize();
                        else
                            currentControl.enableDelayInitialization = false
                })
            }, processDeclMembers: function(root, target, overwriteExistingMembers) {
                fxassert(target, "No target instance supplied");
                var setMembers = [];
                MS.Entertainment.UI.Framework.applyWithSelector(root, "[data-ent-member]", function processDeclMemberElement(element) {
                    if (element.alreadyProcessedForEntMember)
                        return;
                    var targetMemberName = element.getAttribute("data-ent-member");
                    if (!targetMemberName)
                        return;
                    element.alreadyProcessedForEntMember = true;
                    if (target[targetMemberName] && !overwriteExistingMembers) {
                        fxassert(false, "Target already has a property named '" + targetMemberName + "', skipping");
                        return
                    }
                    var elementOnly = MS.Entertainment.UI.Framework.checkIsElementOnly(element);
                    var valueToSet = null;
                    if (elementOnly)
                        valueToSet = element;
                    else
                        valueToSet = element.winControl || element;
                    target[targetMemberName] = valueToSet;
                    setMembers.push(targetMemberName)
                });
                target._setMembers = setMembers
            }, processDeclarativeControlContainer: function processDeclarativeControlContainer(winControl) {
                var promise;
                fxassert(winControl && winControl.domElement && winControl.domElement.children.length === 1, "A valid winControl with just one child container needs to be supplied");
                if (winControl && winControl.domElement && winControl.domElement.firstElementChild)
                    promise = WinJS.UI.processAll(winControl.domElement.firstElementChild).then(function() {
                        WinJS.Binding.processAll(winControl.domElement.firstElementChild, winControl);
                        MS.Entertainment.UI.Framework.processDeclEvents(winControl.domElement);
                        MS.Entertainment.UI.Framework.processDeclMembers(winControl.domElement, winControl)
                    });
                return WinJS.Promise.as(promise)
            }, animationsEnabled: {get: function() {
                    return WinJS.UI.isAnimationEnabled()
                }}, TextDirections: {
                LeftToRight: "ltr", RightToLeft: "rtl"
            }, updateHtmlDirectionAttribute: function updateHtmlDirectionAttribute() {
                var element = document.getElementsByTagName("html")[0];
                fxassert(element, "Where did HTML go? We should have at least one");
                var currentAttributeValue = element.getAttribute("dir");
                var currentStyleValue = MS.Entertainment.UI.Framework.getTextDirectionForElement(element);
                if (currentAttributeValue !== currentStyleValue)
                    element.setAttribute("dir", currentStyleValue);
                currentTextDirection = currentStyleValue
            }, getTextDirection: function getTextDirection() {
                return currentTextDirection
            }, getTextDirectionForElement: function getTextDirectionForElement(element) {
                fxassert(element, "No Element provided to determine text direction");
                if (!element)
                    return MS.Entertainment.UI.Framework.TextDirections.LeftToRight;
                var currentStyleValue = element.currentStyle && element.currentStyle.direction;
                return currentStyleValue
            }, checkIsElementOnly: function checkIsElementOnly(element) {
                var elementOnly = element.getAttribute("data-ent-elementonly") || String.empty;
                elementOnly = elementOnly.toLowerCase();
                if (elementOnly === "true")
                    return true;
                return false
            }, markFunctionsOfObjectAsSupportedForProcessing: function markFunctionsOfObjectAsSupportedForProcessing(instance) {
                for (var m in instance)
                    if (instance.hasOwnProperty(m) && (instance[m] instanceof Function))
                        instance[m] = WinJS.Utilities.markSupportedForProcessing(instance[m]);
                return instance
            }, waitForControlToInitialize: function waitForControlToInitialize(elementToWaitOn) {
                var complete;
                var initializedPromise = new WinJS.Promise(function(c, e, p) {
                        complete = c
                    });
                var cleanupAndComplete = function cleanupAndComplete() {
                        elementToWaitOn.removeEventListener("UserControlInitialized", handleControlInitialized);
                        complete()
                    };
                fxassert(elementToWaitOn, "Element needs to be supplied");
                var handleControlInitialized = function handleControlInitialized(event) {
                        if (elementToWaitOn.winControl) {
                            if (elementToWaitOn.winControl === event.userControl)
                                cleanupAndComplete()
                        }
                        else
                            cleanupAndComplete()
                    };
                if (elementToWaitOn.winControl && elementToWaitOn.winControl._initialized)
                    complete();
                else
                    elementToWaitOn.addEventListener("UserControlInitialized", handleControlInitialized);
                return initializedPromise
            }, checkIfInDom: function checkIfInDom(element) {
                var inDom = document.compareDocumentPosition(element) & document.DOCUMENT_POSITION_CONTAINED_BY;
                return !!inDom
            }, forceFullLayout: function forceFullLayout() {
                var forceRelayout = document.body.offsetHeight
            }, empty: function(element) {
                if (!element)
                    return;
                element.innerHTML = String.empty
            }, addEventHandlers: function addEventHandlers(eventSource, events, capture) {
                if (eventSource && events && eventSource.addEventListener)
                    for (var key in events)
                        eventSource.addEventListener(key, events[key], capture || false);
                return {cancel: function() {
                            MS.Entertainment.UI.Framework.removeEvents(eventSource, events, capture);
                            eventSource = null;
                            events = null
                        }}
            }, removeEvents: function removeEvents(eventSource, events, capture) {
                if (eventSource && events && eventSource.removeEventListener)
                    for (var key in events)
                        eventSource.removeEventListener(key, events[key], capture || false)
            }, scrollIntoViewWithAnimation: function _performScroll(scroller, scrollLeft, ignoreMissingStarts, animationRoots) {
                if (scrollLeft < 0)
                    scrollLeft = 0;
                if (!MS.Entertainment.UI.Framework.animationsEnabled) {
                    scroller.scrollLeft = scrollLeft;
                    return WinJS.Promise.as()
                }
                var scrollLeftDelta = (scroller.scrollLeft - scrollLeft);
                if ((-scrollLeftDelta) + scroller.scrollLeft < 0)
                    scrollLeftDelta = 0 - scroller.scrollLeft;
                if (MS.Entertainment.UI.Framework.getTextDirection() === MS.Entertainment.UI.Framework.TextDirections.RightToLeft)
                    scrollLeftDelta = -(scroller.scrollLeft - scrollLeft);
                var animationChildren = [];
                if (animationRoots && Array.isArray(animationRoots))
                    for (var i = 0; i < animationRoots.length; i++)
                        animationChildren = animationChildren.concat(Array.prototype.slice.call(animationRoots[i].children));
                else
                    animationChildren = scroller.children;
                var scrollComplete = scroller.isAnimatingScroll;
                if (!scrollComplete)
                    scrollComplete = MS.Entertainment.UI.Framework.waitForStartedTransitionsToComplete(scroller, ignoreMissingStarts, "scrollAnimation").then(function() {
                        Array.prototype.forEach.call(animationChildren, function(item) {
                            WinJS.Utilities.removeClass(item, "scrollAnimation");
                            item.style.msTransform = ""
                        });
                        scroller.scrollLeft = scroller.targetScrollLeft;
                        scroller.targetScrollLeft = null;
                        scroller.isAnimatingScroll = null
                    }.bind(this));
                else if (scroller.targetScrollLeft !== scrollLeft)
                    MS.Entertainment.UI.Framework.resetStartedTransitionCount(scroller);
                if (scroller.targetScrollLeft !== scrollLeft) {
                    Array.prototype.forEach.call(animationChildren, function(item) {
                        WinJS.Utilities.addClass(item, "scrollAnimation");
                        if (WinJS.Utilities.hasClass(item, "fixed"))
                            return;
                        var transformStyle = "translateX(" + scrollLeftDelta + "px)";
                        item.style.msTransform = transformStyle
                    });
                    scroller.targetScrollLeft = scrollLeft;
                    scroller.isAnimatingScroll = scrollComplete
                }
                return scrollComplete
            }, resetStartedTransitionCount: function resetStartedTransitionCount(element) {
                element.startedTransitions = 0
            }, waitForStartedTransitionsToComplete: function waitForStartedTransitionsToComplete(element, ignoreMissingStarts, className) {
                fxassert(element, "Need an element to work with");
                MS.Entertainment.UI.Framework.resetStartedTransitionCount(element);
                var complete;
                var allTransitionsComplete = new WinJS.Promise(function(c, e, p) {
                        complete = c
                    });
                var startHandler = function waitForStartedTransitionsToCompleteStartedHandler(e) {
                        if (className && !WinJS.Utilities.hasClass(e.target, className))
                            return;
                        element.startedTransitions++
                    };
                element.addEventListener("transitionstart", startHandler);
                var endHandler = function waitForStartedTransitionsToCompleteEndedHandler(e) {
                        if (className && !WinJS.Utilities.hasClass(e.target, className))
                            return;
                        if (!ignoreMissingStarts)
                            fxassert(element.startedTransitions, "Expected something to have started before we end");
                        element.startedTransitions--;
                        if (element.startedTransitions > 0)
                            return;
                        element.removeEventListener("transitionstart", startHandler);
                        element.removeEventListener("transitionend", endHandler);
                        complete()
                    };
                element.addEventListener("transitionend", endHandler);
                return allTransitionsComplete
            }, Signal: WinJS.Class.mix(WinJS.Class.define(function() {
                var that = this;
                this._wrappedPromise = new WinJS.Promise(function(c, e, p) {
                    that._complete = c;
                    that._error = e;
                    that._progress = p
                }, this._handleCancelled.bind(this))
            }, {
                _wrappedPromise: null, _complete: null, _completed: false, _error: null, _progress: null, _handleCancelled: function _handleCancelled(e) {
                        this.dispatchEvent("cancelled", {signal: this})
                    }, promise: {get: function() {
                            return this._wrappedPromise
                        }}, complete: function signal_complete(value) {
                        if (this._completed)
                            throw new Error("Cannot complete an already completed promise");
                        this._complete(value);
                        this._completed = true
                    }, error: function signal_error(errorInfo) {
                        this._error(errorInfo)
                    }, progress: function signal_progress(progressInfo) {
                        this._progress(progressInfo)
                    }
            }), WinJS.Utilities.eventMixin), BackOffTimer: WinJS.Class.define(function(){}, {
                _disposed: false, _timer: null, _lastExecute: 0, _callback: null, _currentDelay: 0, initialDelay: 500, maxDelay: 4000, delayIncreaseFactor: 2, currentDelay: {get: function get_currentDelay() {
                            return this._currentDelay
                        }}, callback: {
                        get: function get_callback() {
                            return this._callback
                        }, set: function set_callback(value) {
                                if (!this._disposed && value !== this._callback) {
                                    this._callback = value;
                                    if (this._timer) {
                                        this._timer.cancel();
                                        this._timer = null
                                    }
                                }
                            }
                    }, dispose: function dispose() {
                        this._disposed = true;
                        if (this._timer) {
                            this._timer.cancel();
                            this._timer = null
                        }
                        this._callback = null
                    }, execute: function execute() {
                        var result = null;
                        var time = Date.now();
                        if (this._lastExecute && time - this._lastExecute > this._currentDelay)
                            this._currentDelay = 0;
                        this._lastExecute = time;
                        var refreshSynchronously = this._currentDelay <= 0 && !this._timer;
                        if (refreshSynchronously) {
                            this._currentDelay = Math.min(this.maxDelay, this.initialDelay);
                            this._execute()
                        }
                        else if (!this._timer)
                            this._timer = new WinJS.Promise.timeout(this._currentDelay).then(function() {
                                this._currentDelay = this._currentDelay * this.delayIncreaseFactor;
                                this._currentDelay = Math.min(this.maxDelay, this._currentDelay);
                                this._execute()
                            }.bind(this), function(){}).then(function() {
                                this._timer = null
                            }.bind(this));
                        return WinJS.Promise.as(this._timer)
                    }, _execute: function _execute() {
                        if (this.callback)
                            this.callback()
                    }
            }), clearCaches: function clearCaches(skipListViewClear) {
                templateCache = {};
                fragmentCache = {};
                WinJS.UI._disposeControls();
                WinJS.UI.Fragments.clearCache();
                if (!skipListViewClear) {
                    var fakeListView = document.createElement("div");
                    fakeListView.style.display = "none";
                    fakeListView.id = "fakeListView";
                    document.body.appendChild(fakeListView);
                    (new WinJS.UI.ListView(fakeListView));
                    WinJS.Promise.timeout(1000).done(function() {
                        if (fakeListView.winControl && fakeListView.winControl.dispose)
                            fakeListView.winControl.dispose();
                        fakeListView.parentElement.removeChild(fakeListView)
                    })
                }
                if (garbageCollectPromise) {
                    garbageCollectPromise.cancel();
                    garbageCollectPromise = null
                }
                var collectGarbageFn = function collectGarbageFn() {
                        CollectGarbage();
                        return WinJS.Promise.timeout(1000)
                    };
                garbageCollectPromise = WinJS.Promise.timeout(3000).then(collectGarbageFn).then(collectGarbageFn).then(function updateMemoryCounter(){});
                return garbageCollectPromise
            }
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Framework", {
        _UserControl: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function userControlConstructor(element, options) {
            fxassert(!element.winControl, "This element has already had the control initialized for it. It shouldn't be happening again");
            fxassert(this !== window, "Invoked against global object. Bad");
            this._controlId = ++controlId;
            this.domElement = element;
            this._controlsPendingInitialization = [];
            this._userControlConstructedHandler = this._userControlConstructedHandler.bind(this);
            this.domElement.addEventListener("UserControlConstructed", this._userControlConstructedHandler);
            this._userControlConstructedInitialized = this._userControlConstructedInitialized.bind(this);
            this.domElement.addEventListener("UserControlInitialized", this._userControlConstructedInitialized);
            WinJS.UI.setOptions(this, options);
            element.winControl = this;
            if (this.templateStorage) {
                var domEvent = document.createEvent("Event");
                domEvent.initEvent("UserControlConstructed", true, false);
                domEvent.userControl = this;
                this.domElement.dispatchEvent(domEvent)
            }
        }, {
            _beginInitializeCount: 0, _childControlHandlersAdded: false, _controlId: -1, _controlsPendingInitialization: null, templateStorage: null, templateName: null, domElement: null, _attachedEventsToCleanup: null, _setMembers: null, visibility: {
                    get: function() {
                        if (!this.domElement || !this.domElement.style)
                            return false;
                        var currentStyle = this.domElement.currentStyle;
                        return (currentStyle && currentStyle.visibility !== "hidden" && currentStyle.display !== "none" && currentStyle.opacity !== 0.0)
                    }, set: function(value) {
                            if (!this.domElement)
                                return;
                            var oldValue = this.visibility;
                            if (value)
                                MS.Entertainment.Utilities.showElement(this.domElement);
                            else
                                MS.Entertainment.Utilities.hideElement(this.domElement);
                            if (value !== oldValue)
                                this.notify("visibility", value, oldValue)
                        }, enumerable: true, configurable: false
                }, action: null, _unloadBaseCalled: false, _freezeBaseCalled: false, _thawBaseCalled: false, preventHideDuringInitialize: false, allowAnimations: true, _initialized: false, _isDelayInitialized: false, _unloaded: false, unload: function unload() {
                    this._unloadBaseCalled = true
                }, freeze: function freeze() {
                    this._freezeBaseCalled = true
                }, thaw: function thaw() {
                    this._thawBaseCalled = true
                }, dispose: function() {
                    if (this.domElement)
                        WinJS.Utilities.disposeSubTree(this.domElement);
                    MS.Entertainment.UI.Framework.cleanupSingleControl(this);
                    if (this.domElement)
                        this.domElement = null
                }, _userControlConstructedHandler: function _userControlConstructedHandler(e) {
                    fxassert(e, "No event args provided to constructor handler");
                    fxassert(e.userControl, "No user control instance provided on event args for control construction");
                    if (e.userControl === this)
                        return;
                    e.stopPropagation();
                    fxassert(!e.userControl._parent, "This control already had a parent set. That doesn't seem right");
                    fxassert(e.userControl !== this, "Why are we hearing about this for ourselves?");
                    e.userControl._parent = this;
                    if (this.ignoreChildrenInitialization)
                        return;
                    fxassert(this._controlsPendingInitialization.indexOf(e.userControl) === -1, "Control was already pending it's initialization");
                    this._controlsPendingInitialization.push(e.userControl)
                }, _userControlConstructedInitialized: function _userControlConstructedInitialized(e) {
                    fxassert(e, "No event args provided to constructor handler");
                    fxassert(e.userControl, "No user control instance provided on event args for control construction");
                    if (e.userControl === this)
                        return;
                    e.stopPropagation();
                    if (this._unloaded)
                        return;
                    if (this.ignoreChildrenInitialization)
                        return;
                    var index = this._controlsPendingInitialization.indexOf(e.userControl);
                    if (index === -1)
                        return;
                    this._controlsPendingInitialization.splice(index, 1);
                    this._completeInitialize()
                }, initialize: function(){}, isInitialized: {get: function UserControl_getIsInitialized() {
                        return this._initialized
                    }}, delayInitialize: function delayInitialize() {
                    fxassert(!this.isDelayInitialized, "The user control has already been delay initialized.");
                    if (!this.isDelayInitialized) {
                        this._isDelayInitialized = true;
                        if (this.supportsDelayInitialization)
                            this._delayInitialized()
                    }
                }, isDelayInitialized: {get: function get_isDelayInitialized() {
                        return this._isDelayInitialized
                    }}, supportsDelayInitialization: {get: function get_supportsDelayInitialization() {
                        return !!this._delayInitialized
                    }}, _completeInitialize: function _completeInitialize() {
                    if ((this._controlsPendingInitialization.length > 0) || (this.templateStorage && !this._templateLoaded))
                        return;
                    if (this._unloaded)
                        return;
                    this.domElement.removeEventListener("UserControlConstructed", this._userControlConstructedHandler);
                    this.domElement.removeEventListener("UserControlInitialized", this._userControlConstructedInitialized);
                    this._initialized = true;
                    var actionName = this.domElement.getAttribute("data-ent-action");
                    if (actionName) {
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        var action = actionService.getAction(WinJS.Utilities.getMember(actionName));
                        this.action = action;
                        this.domElement.removeAttribute("data-ent-action")
                    }
                    if (this.templateStorage || this.processChildren) {
                        MS.Entertainment.UI.Framework.processDeclEvents(this.domElement);
                        MS.Entertainment.UI.Framework.processDeclMembers(this.domElement, this)
                    }
                    if (!this.preventHideDuringInitialize)
                        WinJS.Utilities.removeClass(this.domElement, "hideDuringInitialize");
                    if (this.initialize) {
                        var controlName = ((this.templateStorage && this.templateName) ? this.templateStorage + "#" + this.templateName : this.controlName) + ":" + this._controlId;
                        window.msWriteProfilerMark("corefx:UserControlUserInitialization:" + controlName + ",StartTM");
                        this.initialize();
                        window.msWriteProfilerMark("corefx:UserControlUserInitialization:" + controlName + ",StopTM")
                    }
                    if (!this.enableDelayInitialization)
                        this.delayInitialize();
                    if (this.allowAnimations && MS.Entertainment.UI.Framework.beginShowAnimations)
                        MS.Entertainment.UI.Framework.beginShowAnimations(this.domElement);
                    fxassert(this._controlsPendingInitialization.length === 0, "There were controls pending initialization when this one called it's initializer");
                    var domEvent = document.createEvent("Event");
                    domEvent.initEvent("UserControlInitialized", true, false);
                    domEvent.userControl = this;
                    this.domElement.dispatchEvent(domEvent)
                }, _beginInitialize: function _beginInitialize() {
                    var controlTraceString = (this.controlName || "Non templated control without control name") + ":" + this._controlId;
                    var templateTraceString = this.templateStorage + "#" + this.templateName + ":" + this._controlId;
                    if ((!this.templateStorage) && (this.initialize)) {
                        window.msWriteProfilerMark("corefx:UserControlInitialization: " + controlTraceString + ",StartTM");
                        if (this.deferInitialization) {
                            WinJS.Promise.timeout().then(this._completeInitialize.bind(this));
                            return
                        }
                        this._completeInitialize();
                        window.msWriteProfilerMark("corefx:UserControlInitialization: " + controlTraceString + ",StopTM");
                        return
                    }
                    window.msWriteProfilerMark("corefx:UserControlInitialization: " + controlTraceString + ",StartTM");
                    if (!this.templateStorage)
                        return;
                    window.msWriteProfilerMark("corefx:UserControlInitializationTemplateLoading:" + templateTraceString + ",StartTM");
                    MS.Entertainment.UI.Framework.loadTemplate(this.templateStorage, this.templateName, this._skipDefer).then(function renderControl(controlInstance) {
                        if (this._unloaded)
                            return WinJS.Promise.wrapError({controlUnloaded: true});
                        return controlInstance.render(this, this.domElement)
                    }.bind(this)).then(function appendAndInit(renderedElement) {
                        var targetElement = this.domElement;
                        if (!targetElement.getAttribute("data-win-automationId"))
                            targetElement.setAttribute("data-win-automationId", this.templateName);
                        this._templateLoaded = true;
                        window.msWriteProfilerMark("corefx:UserControlInitializationTemplateLoading:" + templateTraceString + ",StopTM");
                        this._completeInitialize()
                    }.bind(this)).done(null, function error(errorObject) {
                        if (errorObject.controlUnloaded)
                            return;
                        fxassert(false, "Failure loading template: '" + this.templateStorage + "#" + this.templateName + "'");
                        return WinJS.Promise.wrapError(errorObject)
                    }.bind(this))
                }, _cleanupAttachedEvents: function _cleanupAttachedEvents() {
                    if (!this._attachedEventsToCleanup || !this._attachedEventsToCleanup.length)
                        return;
                    this._attachedEventsToCleanup.forEach(function(item) {
                        item.element.removeEventListener(item.eventName, item.handler)
                    });
                    this._attachedEventsToCleanup = []
                }, _cleanupSetMembers: function _cleanupSetMembers() {
                    if (!this._setMembers || !this._setMembers.length)
                        return;
                    this._setMembers.forEach(function(member) {
                        this[member] = null
                    }.bind(this));
                    this._setMembers = []
                }
        }), deriveUserControl: function(userControl, template, constructor, members, observableMembers, statics) {
                var value;
                var templateParts;
                if (template) {
                    templateParts = MS.Entertainment.UI.Framework.parseTemplate(template);
                    members = members || {};
                    if (!members.templateName || !members.templateStorage) {
                        members.templateStorage = templateParts.path;
                        if (templateParts.id)
                            members.templateName = templateParts.id
                    }
                    if (members.templateName)
                        MS.Entertainment.UI.Framework.preloadTemplate(template, members.criticalTemplate)
                }
                return {get: function() {
                            if (!value)
                                value = MS.Entertainment.UI.Framework.deriveUserControlWork(userControl, template, constructor, members, observableMembers, statics);
                            return value
                        }}
            }, deriveUserControlWork: function(userControl, template, constructor, members, observableMembers, statics) {
                if (typeof userControl === "string") {
                    var controlMemberName = userControl;
                    userControl = WinJS.Utilities.getMember(userControl);
                    fxassert(userControl, "Could not resolve user control named " + controlMemberName)
                }
                fxassert(userControl, "User Control was not valid. Can't derive without something to derive from");
                if (members)
                    MS.Entertainment.UI.Framework.markFunctionsOfObjectAsSupportedForProcessing(members);
                if (statics)
                    MS.Entertainment.UI.Framework.markFunctionsOfObjectAsSupportedForProcessing(statics);
                var type = WinJS.Class.derive(userControl, function defineUserControlWrapperConstructor(element, options) {
                        if (this === window)
                            throw new Error("Need to use 'new' to invoke the constructor");
                        element = element || document.createElement("div");
                        if (!this.preventHideDuringInitialize && (!options || !options.preventHideDuringInitialize))
                            WinJS.Utilities.addClass(element, "hideDuringInitialize");
                        if (observableMembers)
                            if (!this._backingData)
                                this._initObservable(Object.create(observableMembers));
                            else {
                                var item;
                                for (item in observableMembers)
                                    if (!(item in this._backingData))
                                        this._backingData[item] = observableMembers[item]
                            }
                        this._beginInitializeCount++;
                        userControl.call(this, element, options);
                        this._beginInitializeCount--;
                        if (typeof constructor === "function") {
                            window.msWriteProfilerMark("corefx:UserControlConstructed:" + (template || this.controlName || "No-template name") + ":" + this._controlId);
                            constructor.call(this, element, options)
                        }
                        if (this._beginInitializeCount === 0)
                            this._beginInitialize()
                    }, members, statics);
                if (observableMembers)
                    type = WinJS.Class.mix(type, WinJS.Binding.expandProperties(observableMembers));
                return type
            }, defineUserControl: function(template, constructor, members, observableMembers, statics) {
                return MS.Entertainment.UI.Framework.deriveUserControl(MS.Entertainment.UI.Framework._UserControl, template, constructor, members, observableMembers, statics)
            }
    });
    var _emptySourcePath;
    WinJS.Namespace.define("MS.Entertainment.UI.Framework", {
        BindingBlock: MS.Entertainment.UI.Framework.define(function(){}, {}, {isDeclarativeControlContainer: true}), UserControl: MS.Entertainment.UI.Framework.defineUserControl(null, function(){}), ImageControl: MS.Entertainment.UI.Framework.defineUserControl(null, function(element, options) {
                this._handleError = this._handleError.bind(this);
                this._handleLoaded = this._handleLoaded.bind(this);
                if (MS.Entertainment.Utilities.isApp2)
                    this._removeEventHandlersOnError = false
            }, {
                loadDelay: false, disableLazyDecode: false, clearSrcOnEmptyTarget: false, controlName: "ImageControl", desiredImageSize: null, defaultImagePath: null, errorImage: null, imageIdType: null, bindTargetProperties: false, applyImageAsBackground: false, propagateImageLoadCompleteEvent: false, imageLoadCompleteEventFired: false, parentStyleIfNotEmpty: null, skipImageResetOnThaw: false, _target: null, _enabled: false, _loadPromise: null, _removeEventHandlersOnError: true, _frozen: false, _emptySourcePath: {get: function imageControl_emptySourcePath_get() {
                            if (!_emptySourcePath)
                                _emptySourcePath = window.location.protocol + "//" + window.location.host + "/";
                            return _emptySourcePath
                        }}, _previousSrc: null, _previousBackgroundImage: null, _freezePromise: null, _transparentImage: MS.Entertainment.UI.Framework.lazyDefine(function() {
                        return MS.Entertainment.UI.ImagePaths.transparent
                    }), freeze: function() {
                        if (!this._frozen) {
                            this._frozen = true;
                            if (!document.hidden || MS.Entertainment.Utilities.isApp2)
                                this._freezePromise = WinJS.Promise.timeout(167).then(function clearImagesAfterFreeze() {
                                    if (this._unloaded || !this._frozen)
                                        return;
                                    var currentSrc = this.domElement.src;
                                    if (currentSrc && this._emptySourcePath !== currentSrc) {
                                        this._previousSrc = currentSrc;
                                        this.domElement.src = String.empty
                                    }
                                    if (this.domElement.style.backgroundImage) {
                                        this._previousBackgroundImage = this.domElement.style.backgroundImage;
                                        this.domElement.style.backgroundImage = String.empty
                                    }
                                    if (this.disableLazyDecode)
                                        var touchImage = this.domElement.complete;
                                    this._freezePromise = null
                                }.bind(this))
                        }
                        MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                    }, thaw: function() {
                        MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this);
                        if (this._frozen && !this._unloaded) {
                            this._frozen = false;
                            if (this._freezePromise) {
                                this._freezePromise.cancel();
                                this._freezePromise = null
                            }
                            if (this._previousSrc && (!this.domElement.src || this.domElement.src === this._emptySourcePath) && !this.skipImageResetOnThaw)
                                this.domElement.src = this._previousSrc;
                            this._previousSrc = String.empty;
                            if (this._previousBackgroundImage && !this.domElement.style.backgroundImage && !this.skipImageResetOnThaw)
                                this.domElement.style.backgroundImage = this._previousBackgroundImage;
                            this._previousBackgroundImage = String.empty;
                            if (this.disableLazyDecode)
                                var touchImage = this.domElement.complete
                        }
                    }, _handleError: function _handleError(error) {
                        if (WinJS.Utilities.getMember("domElement.complete", this))
                            return;
                        if (!error || error.message !== "Canceled")
                            if (this.domElement) {
                                this.domElement.removeEventListener("error", this._handleError);
                                if (this.errorImage) {
                                    if (this.applyImageAsBackground) {
                                        this.domElement.style.backgroundImage = "url(" + this.errorImage + ")";
                                        this._setImgSrc(this._transparentImage)
                                    }
                                    else
                                        this._setImgSrc(this.errorImage);
                                    this.domElement.setAttribute("imageLoaded", String.empty)
                                }
                                else {
                                    if (this._removeEventHandlersOnError)
                                        this.domElement.removeEventListener("load", this._handleLoaded);
                                    this.hide(this.domElement);
                                    this.domElement.removeAttribute("imageLoaded");
                                    this._propagateImageLoadCompleteEventIfNeeded()
                                }
                            }
                    }, _handleLoaded: function _handleLoaded() {
                        if (this.domElement) {
                            this.domElement.removeEventListener("error", this._handleError);
                            this.domElement.removeEventListener("load", this._handleLoaded);
                            this.domElement.setAttribute("imageLoaded", String.empty);
                            var transparentImage = this._transparentImage;
                            if (this.applyImageAsBackground && this.domElement.src && this.domElement.src.indexOf(transparentImage, this.domElement.src.length - transparentImage.length) < 0) {
                                this.domElement.style.backgroundImage = "url(" + this.domElement.src.toString() + ")";
                                this._setImgSrc(transparentImage)
                            }
                            this._propagateImageLoadCompleteEventIfNeeded();
                            this.show(this.domElement)
                        }
                    }, _propagateImageLoadCompleteEventIfNeeded: function _propagateImageLoadCompleteEventIfNeeded() {
                        if (this.propagateImageLoadCompleteEvent) {
                            var imageLoadCompleteEvent = document.createEvent("Event");
                            imageLoadCompleteEvent.initEvent("imageLoadComplete", true, true);
                            imageLoadCompleteEvent.detail = {loaded: this.domElement ? this.domElement.hasAttribute("imageLoaded") : false};
                            this.domElement._naturalWidth = this.naturalWidth;
                            this.domElement._naturalHeight = this.naturalHeight;
                            this.domElement.dispatchEvent(imageLoadCompleteEvent);
                            this.imageLoadCompleteEventFired = true
                        }
                    }, loadImage: function loadImage(target) {
                        return WinJS.Promise.as(target)
                    }, _setImgSrc: function _setImgSrc(url) {
                        this.domElement.src = url;
                        if (this.disableLazyDecode)
                            var touchImage = this.domElement.complete;
                        if (this.domElement && this.domElement.parentElement && this.parentStyleIfNotEmpty)
                            if (url)
                                WinJS.Utilities.addClass(this.domElement.parentElement, this.parentStyleIfNotEmpty);
                            else
                                WinJS.Utilities.removeClass(this.domElement.parentElement, this.parentStyleIfNotEmpty)
                    }, _loadImage: function _loadImage(target) {
                        if (!this._enabled || !this.domElement)
                            return;
                        this.hide(this.domElement);
                        if (!target) {
                            if (this.clearSrcOnEmptyTarget) {
                                if (this.applyImageAsBackground)
                                    this.domElement.style.backgroundImage = String.empty;
                                this._setImgSrc(String.empty)
                            }
                            return
                        }
                        if (this._loadPromise) {
                            this._loadPromise.cancel();
                            this._loadPromise = null
                        }
                        this._loadPromise = this.loadImage(target).done(function(result) {
                            if (this.domElement) {
                                this.domElement.addEventListener("load", this._handleLoaded);
                                this.domElement.addEventListener("error", this._handleError);
                                result = result || this.defaultImagePath;
                                if (!this.domElement.hasAttribute("imageLoaded") || result !== this.defaultImagePath)
                                    try {
                                        this._setImgSrc(result)
                                    }
                                    catch(e) {
                                        fxassert(false, "Error setting image URL: " + result);
                                        this._handleError()
                                    }
                            }
                            this._loadPromise = null
                        }.bind(this), this._handleError.bind(this))
                    }, hide: function hide(element){}, show: function show(element){}, _delayInitialized: function _delayInitialized() {
                        if (!this._enabled) {
                            this._enabled = true;
                            this._loadImage(this.target)
                        }
                    }, unload: function unload() {
                        if (this._bindings) {
                            this._bindings.cancel();
                            this._bindings = null
                        }
                        if (this._loadPromise) {
                            this._loadPromise.cancel();
                            this._loadPromise = null
                        }
                        if (this._freezePromise) {
                            this._freezePromise.cancel();
                            this._freezePromise = null
                        }
                        this._previousSrc = null;
                        this._previousBackgroundImage = null;
                        MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                    }, target: {
                        get: function target_get() {
                            return this._target
                        }, set: function target_set(value) {
                                if (this.target !== value) {
                                    this._target = value;
                                    if (this._bindings) {
                                        this._bindings.cancel();
                                        this._bindings = null
                                    }
                                    if (this._target && this.bindTargetProperties)
                                        this._bindings = WinJS.Binding.bind(this, {target: {imageUri: function() {
                                                    this._loadImage(value)
                                                }.bind(this)}});
                                    else
                                        this._loadImage(value)
                                }
                            }
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Framework", {ReferenceDisposer: MS.Entertainment.UI.Framework.define(function ReferenceDisposer(classInstance) {
            fxassert(classInstance, "Must provide a class to define properties with");
            this._classInstance = classInstance;
            this._attachedReferences = []
        }, {
            _attachedReferences: null, _classInstance: null, _disposeReference: function _disposeReference(reference) {
                    if (reference) {
                        if (Array.isArray(reference))
                            while (reference.length > 0)
                                this._disposeReference(reference.pop());
                        if (reference.cancel)
                            reference.cancel();
                        if (reference.dispose)
                            reference.dispose()
                    }
                }, createReference: function createReference(variableName) {
                    var referenceNumber = null;
                    var initialVariableValue = this._classInstance[variableName];
                    Object.defineProperty(this._classInstance, variableName, {
                        set: function setReference(value) {
                            if (referenceNumber === null || referenceNumber >= this._attachedReferences.length) {
                                referenceNumber = this._attachedReferences.push(value) - 1;
                                initialVariableValue = null
                            }
                            else {
                                this._disposeReference(this._attachedReferences[referenceNumber]);
                                this._attachedReferences[referenceNumber] = value
                            }
                        }.bind(this), get: function getReference() {
                                return this._attachedReferences[referenceNumber]
                            }.bind(this)
                    });
                    return initialVariableValue
                }, dispose: function dispose() {
                    while (this._attachedReferences.length > 0)
                        this._disposeReference(this._attachedReferences.pop())
                }
        })})
})()
})();
/* >>>>>>/framework/scriptvalidator.js:9042 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    var skipValidation = true;
    if (!skipValidation) {
        var baseLength = (window.location.protocol + "//" + window.location.host).length;
        var isInUnitTest = (window.isInUnitTest);
        var existingScripts = [];
        var scriptsAfterMainChecked = false
    }
    function getCurrentScripts(currentScripts, headScripts) {
        if (skipValidation)
            return [];
        var scripts = currentScripts || [];
        var documentScripts = headScripts || document.head.querySelectorAll("script[src]");
        var scriptsLength = scripts.length;
        var documentScriptsLength = documentScripts.length;
        for (var i = scriptsLength; i < documentScriptsLength; i++)
            scripts.push(documentScripts[i].src.substr(baseLength).toLowerCase());
        return scripts
    }
    function scriptValidator(files) {
        if (isInUnitTest || skipValidation || window.loadingMergedJsFile)
            return;
        if (!existingScripts.length)
            existingScripts = getCurrentScripts(existingScripts, headScripts);
        var scriptsToCheck = Array.prototype.map.call(arguments, function(item) {
                return item.toLowerCase()
            });
        scriptsToCheck.forEach(function(path) {
            if (MS && MS.Entertainment && MS.Entertainment.UI && MS.Entertainment.UI.Framework && MS.Entertainment.UI.Framework.scriptMappings && MS.Entertainment.UI.Framework.scriptMappings[path])
                path = MS.Entertainment.UI.Framework.scriptMappings[path];
            var isAbsolute = (path.charAt(0) === "/");
            if (!isAbsolute)
                fail("File: " + path + " was not an absolute path");
            validateScriptIncluded(path, existingScripts);
            if (existingScripts.indexOf(path) < 0)
                existingScripts.push(path)
        });
        var headScripts = document.head.querySelectorAll("script[src]");
        if (headScripts.length !== existingScripts.length)
            existingScripts = getCurrentScripts(existingScripts, headScripts)
    }
    {};
    Object.defineProperty(window, "scriptValidator", {
        value: scriptValidator, writable: false, enumerable: true, configurable: false
    });
    window.scriptValidator.getUnreferencedScripts = function getUnreferencedScripts() {
        var unreferencedScripts = [];
        getCurrentScripts().forEach(function(item) {
            if (existingScripts.indexOf(item) < 0)
                unreferencedScripts.push(item)
        });
        return unreferencedScripts
    };
    function validateScriptIncluded(script, currentScripts) {
        var foundAt = currentScripts.indexOf(script);
        if (foundAt < 0) {
            fail("Script: " + script + " was not found in the script tags");
            return
        }
    }
    function fail(message) {
        if (MS && MS.Entertainment && MS.Entertainment.assert)
            MS.Entertainment.assert(false, message);
        else {
            alert(message);
            debugger
        }
    }
})()
})();
/* >>>>>>/framework/debug.js:9116 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var e = WinJS.Promise.wrapError();
    var d = Object.getPrototypeOf(e).done;
    Object.getPrototypeOf(e).done = function(c, e, p) {
        e = e || function(v) {
            if (!(v instanceof Error)) {
                var description;
                try {
                    if (v && Object.keys(v).length === 0)
                        description = "Empty object: " + JSON.stringify(v);
                    else
                        description = JSON.stringify(v)
                }
                catch(e) {
                    description = "[unknown]"
                }
                v = {
                    number: 0, stack: "", description: description
                }
            }
            else if (v.name === "Canceled")
                return;
            debugger;
            MSApp.terminateApp(v)
        };
        d.call(this, c, e, p)
    };
    var c = WinJS.Promise.wrap();
    Object.getPrototypeOf(c).done = function(c) {
        this.then(c).then(null, function(v) {
            if (!(v instanceof Error)) {
                var description;
                try {
                    description = JSON.stringify(v)
                }
                catch(e) {
                    description = "[unknown]"
                }
                v = {
                    number: 0, stack: "", description: description
                }
            }
            else if (v.name === "Canceled")
                return;
            debugger;
            MSApp.terminateApp(v)
        })
    };
    var isInUnitTest = window.isInUnitTest;
    var alertsToShow = [];
    var dialogVisible = false;
    var showPendingAlerts = function showPendingAlerts() {
            if (dialogVisible || !alertsToShow.length)
                return;
            dialogVisible = true;
            if (!MS.Entertainment.Utilities.isApp2Platform)
                new Windows.UI.Popups.MessageDialog(alertsToShow.shift()).showAsync().done(function() {
                    dialogVisible = false;
                    showPendingAlerts()
                })
        };
    window.alert = function(message) {
        if (window.console && window.console.log)
            window.console.log(message);
        if (!isInUnitTest) {
            alertsToShow.push(message);
            showPendingAlerts()
        }
    }
})();
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Debug", {
        write: (function() {
            var debugUtility = null;
            var console = window.console;
            return function write(text) {
                    text = (new Date).toLocaleTimeString() + ": " + text;
                    if (console && console.log)
                        console.log(text);
                    if (!debugUtility)
                        debugUtility = new Microsoft.Entertainment.Util.Debug;
                    debugUtility.outputDebugString(text)
                }
        })(), writeLine: function writeLine(text) {
                MS.Entertainment.UI.Debug.write(text + "\n")
            }, defineAssert: function defineAssert(ns) {
                var resolvedNamespace = WinJS.Utilities.getMember(ns);
                if (resolvedNamespace && resolvedNamespace.assert)
                    return;
                WinJS.Namespace.define(ns, {
                    assert: function assert(condition, message, optional_parameter, optional_errorLevel) {
                        optional_errorLevel = optional_errorLevel || MS.Entertainment.UI.Debug.errorLevel.high;
                        return MS.Entertainment.UI.Debug._doAssert(condition, ns, message, optional_parameter, optional_errorLevel)
                    }, fail: function fail(message, optional_parameter, optional_errorLevel) {
                            WinJS.Utilities.getMember(ns).assert(false, message, optional_parameter, optional_errorLevel)
                        }
                })
            }, errorLevel: {
                high: 0, low: 10
            }, getStackTrace: function getStackTrace() {
                var stackTrace = "";
                try {
                    throw new Error;
                }
                catch(e) {
                    stackTrace = e.stack
                }
                return stackTrace
            }, unhandledPromiseErrorHandler: function unhandledPromiseErrorHandler(error) {
                try {
                    MS.Entertainment.Instrumentation.PerfTrack.disableAllStartupScenarios()
                }
                catch(e) {}
                if (MS.Entertainment.handleError && MS.Entertainment.handleError(error))
                    return true;
                else if (error.detail && error.detail.promise) {
                    var errorString = String.empty;
                    try {
                        errorString = JSON.stringify(error.detail)
                    }
                    catch(e) {}
                    if (error.detail.exception && error.detail.exception.stack)
                        MS.Entertainment.fail("Unhandled error in a promise. Error exception was:" + error.detail.exception + ".\n " + "Stack: " + error.detail.exception.stack + ".\n " + "Detailed Error Info was: " + errorString);
                    else {
                        var detailedErrorInfo;
                        if (error.detail.error) {
                            detailedErrorInfo = {
                                errorCode: error.detail.error.errorCode, description: error.detail.error.description
                            };
                            if (error.detail.error.asyncOpSource)
                                detailedErrorInfo.asyncOpSourceStack = error.detail.error.asyncOpSource.stack
                        }
                        var detailedErrorInfoString = String.empty;
                        try {
                            detailedErrorInfoString = JSON.stringify(detailedErrorInfo)
                        }
                        catch(e) {}
                        MS.Entertainment.fail("Unhandled error in a promise. Error exception was:" + error.detail.exception + ".\n " + "Error was:" + error.detail.error + ".\n " + "Detailed Error Info was: " + detailedErrorInfoString + ".\n " + "Additional Error Data: " + errorString)
                    }
                    return true
                }
                return false
            }, handleAssert: function handleAssert(condition, area, message, parameter, errorLevel) {
                if (MS.Entertainment.UI.Debug._configurationManager === null)
                    MS.Entertainment.UI.Debug._configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                var ignoreLowPriorityAsserts;
                if (MS.Entertainment.UI.Debug._configurationManager && MS.Entertainment.UI.Debug._configurationManager.shell)
                    ignoreLowPriorityAsserts = MS.Entertainment.UI.Debug._configurationManager.shell.ignoreLowPriorityAsserts;
                else
                    ignoreLowPriorityAsserts = false;
                if (errorLevel !== MS.Entertainment.UI.Debug.errorLevel.low || !ignoreLowPriorityAsserts)
                    return false;
                else
                    return true
            }, _doAssert: (function() {
                var shipAssertProvider;
                return function _doAssert(condition, area, message, parameter, errorLevel) {
                        if (!(condition) && (!MS.Entertainment.UI.Debug.handleAssert || !MS.Entertainment.UI.Debug.handleAssert(condition, area, message, parameter, errorLevel))) {
                            var stack = MS.Entertainment.UI.Debug.getStackTrace();
                            var signature = MS.Entertainment.UI.Debug._getFunctionSignature(stack);
                            try {
                                if (!shipAssertProvider)
                                    shipAssertProvider = new Microsoft.Entertainment.Infrastructure.ShipAssertProvider;
                                shipAssertProvider.shipAssert(area, signature, stack, message, parameter)
                            }
                            catch(e) {}
                        }
                    }
            })(), _getFunctionSignature: function _getFunctionSignature(stackTrace) {
                var fnString = stackTrace.split("\n")[4];
                var signature = fnString.substring(fnString.indexOf("at ") + 3, fnString.indexOf("(") - 1).trim();
                return signature
            }, _configurationManager: null
    })
})();
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Application.Helpers", {
        animationsRunning: 0, failedAnimations: 0
    });
    var dumpElementInformation = function dumpElementInformation(message, element) {
            if (console && console.msIsIndependentlyComposed)
                console.log(message + element.id + ", classes: " + element.className + ", independent: " + console.msIsIndependentlyComposed(element) + ", control: " + element.getAttribute("data-win-control"))
        };
    var dumpHiddenInfo = function dumpHiddenInfo(element) {
            var computedStyle;
            var workingElement = element;
            while (workingElement) {
                computedStyle = window.getComputedStyle(workingElement);
                if (workingElement.className.indexOf && workingElement.className.indexOf("hideFromDisplay") >= 0)
                    dumpElementInformation("Element has the 'hideFromDisplay' class applied. ID:", workingElement);
                else if (workingElement.currentStyle && workingElement.currentStyle.visibility && workingElement.currentStyle.visibility === "hidden")
                    dumpElementInformation("Element has visibility set directly. visibility: " + workingElement.currentStyle.visibility + " ID:", workingElement);
                else if (computedStyle["visibility"] && computedStyle["visibility"] === "hidden")
                    dumpElementInformation("Element, or parent is hidden. visibility: " + workingElement.style.visibility + " ID:", workingElement);
                else if (computedStyle["display"] === "none")
                    dumpElementInformation("Element, or parent is display: none. ID:", workingElement);
                if (computedStyle["opacity"] === 0)
                    dumpElementInformation("Element, or parent has an opacity of 0. ID:", workingElement);
                if (computedStyle["z-index"] < 0)
                    dumpElementInformation("Element, or parent has a negative z-index. ID:", workingElement);
                workingElement = workingElement.parentElement
            }
        };
    window.addEventListener("animationstart", function animationsStartedTracing(e) {
        if (console && console.msIsIndependentlyComposed) {
            if (!console.msIsIndependentlyComposed(e.srcElement)) {
                dumpElementInformation("****animation not independently composed:" + e.animationName + ", ", e.srcElement);
                dumpHiddenInfo(e.srcElement);
                MS.Entertainment.UI.Application.Helpers.failedAnimations++
            }
        }
        else
            MS.Entertainment.UI.Application.Helpers.failedAnimations = "N/A";
        MS.Entertainment.UI.Application.Helpers.animationsRunning++
    });
    window.addEventListener("animationend", function animationsStartedTracing(e) {
        MS.Entertainment.UI.Application.Helpers.animationsRunning--
    });
    window.addEventListener("transitionstart", function transitionsStartedTracing(e) {
        if (console && console.msIsIndependentlyComposed && !console.msIsIndependentlyComposed(e.srcElement)) {
            dumpElementInformation("****transition not independently composed:" + e.propertyName + ", ", e.srcElement);
            dumpHiddenInfo(e.srcElement);
            MS.Entertainment.UI.Application.Helpers.failedAnimations++
        }
        {}
    });
    MS.Entertainment.UI.Debug.defineAssert("Trace")
})()
})();
/* >>>>>>/framework/utilities.js:9352 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment");
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI");
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Framework");
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Utilities");
(function() {
    "use strict";
    Object.defineProperty(Array.prototype, 'unique', {
        value: function() {
            var isUnique = function isUnique(element, index, array) {
                    return array.indexOf(element) === index
                };
            return this.filter(isUnique)
        }, enumerable: false
    });
    Object.defineProperty(Array.prototype, 'merge', {
        value: function() {
            var result = [];
            if (this && this.length > 0)
                this.forEach(function(array) {
                    result = result.concat(array)
                });
            return result
        }, enumerable: false
    });
    Object.defineProperty(Array.prototype, 'interleave', {
        value: function() {
            var result = [];
            if (this && this.length > 0) {
                var maxLength = -1;
                this.forEach(function(array) {
                    if (!isNaN(array.length))
                        maxLength = Math.max(maxLength, array.length)
                });
                for (var i = 0; i < maxLength; i++)
                    this.forEach(function(array) {
                        if (!isNaN(array.length) && i < array.length)
                            result.push(array[i])
                    })
            }
            return result
        }, enumerable: false
    });
    Object.defineProperty(Array.prototype, 'spliceArray', {
        value: function(index, deleteCount, items) {
            var args = [index, deleteCount].concat(items);
            return this.splice.apply(this, args)
        }, enumerable: false
    });
    Object.defineProperty(Array.prototype, 'clone', {
        value: function() {
            return this.slice(0)
        }, enumerable: false
    });
    (function() {
        if (String['load'])
            throw"String function already has a load function defined";
        else if (String.prototype['format'])
            throw"String prototype already has a format function defined";
        if (!String.empty)
            Object.defineProperty(String, "empty", {
                value: "", writable: false, enumerable: true
            });
        if (!String.isString)
            Object.defineProperty(String, "isString", {
                value: function(value) {
                    return typeof value === "string"
                }, writable: false, enumerable: true
            });
        if (!String.nbsp)
            Object.defineProperty(String, "nbsp", {
                value: "\u00A0", writable: false, enumerable: true
            });
        if (!String.ltrm)
            Object.defineProperty(String, "ltrm", {
                value: "\u200E", writable: false, enumerable: true
            });
        if (!String.ltrmCode)
            Object.defineProperty(String, "ltrmCode", {
                value: 0x200E, writable: false, enumerable: true
            });
        if (!String.rtlm)
            Object.defineProperty(String, "rtlm", {
                value: "\u200F", writable: false, enumerable: true
            });
        if (!String.rtlmCode)
            Object.defineProperty(String, "rtlmCode", {
                value: 0x200F, writable: false, enumerable: true
            });
        var resourceLoader;
        try {
            resourceLoader = new Windows.ApplicationModel.Resources.ResourceLoader
        }
        catch(err) {
            MS.Entertainment.fail("Windows.ApplicationModel.Resources.ResourceLoader failed with error: " + err)
        }
        String.idOverride = [];
        String.load = function loadString(stringId, skipIdVision) {
            if (!resourceLoader)
                return String.empty;
            if (String.idOverride[stringId])
                stringId = String.idOverride[stringId];
            MS.Entertainment.assert(stringId, "Can't find stringId: '" + stringId + "'");
            var loadedString = resourceLoader.getString(stringId);
            MS.Entertainment.assert(loadedString, "String lookup failed: '" + stringId + "'");
            return loadedString
        }
    })();
    String.prototype.format = function formatString() {
        var argumentList = arguments;
        var matchNum = this.match(/{(\d+)}/g);
        if (!matchNum) {
            MS.Entertainment.assert(false, "string value, '" + this.toString() + "', has no placeholders to allow for replacement");
            return this.toString()
        }
        if (matchNum.length !== argumentList.length) {
            MS.Entertainment.assert(false, "Incorrect number of arguments passed into format function. String: {0} Expected: {1}; Received: {2}".format(this.toString(), matchNum.length, argumentList.length));
            return String.empty
        }
        return this.replace(/{(\d+)}/g, function(placeholder, index) {
                return argumentList[index] !== undefined ? argumentList[index] : placeholder
            })
    };
    String.prototype.editDistanceFrom = function editDistanceFrom(targetString) {
        if (!targetString)
            return -1;
        var editMatrix = new Array(this.length + 1);
        for (var i = 0; i <= this.length; i++)
            editMatrix[i] = new Array(targetString.length + 1);
        for (var i = 0; i <= this.length; i++)
            editMatrix[i][0] = i;
        for (var j = 0; j <= targetString.length; j++)
            editMatrix[0][j] = j;
        for (var j = 0; j < targetString.length; j++)
            for (var i = 0; i < this.length; i++)
                if (this[i] === targetString[j])
                    editMatrix[i + 1][j + 1] = editMatrix[i][j];
                else {
                    var deleteDistance = editMatrix[i][j + 1] + 1;
                    var insertDistance = editMatrix[i + 1][j] + 1;
                    var substituteDistance = editMatrix[i][j] + 1;
                    editMatrix[i + 1][j + 1] = Math.min(deleteDistance, insertDistance, substituteDistance)
                }
        return editMatrix[this.length][targetString.length]
    };
    (function() {
        if (WinJS && WinJS.Promise && !WinJS.Promise.isCanceledError)
            Object.defineProperty(WinJS.Promise, "isCanceledError", {
                value: function isCanceled(error) {
                    return (error && error.name === "Canceled")
                }, writable: false, enumerable: true
            })
    })();
    (function() {
        var secondMS = 1000;
        var minuteMS = 60 * secondMS;
        var hourMS = 60 * minuteMS;
        var dayMS = 24 * hourMS;
        Date.minValue = new Date(0);
        Date.getTimeUTC = function toUTC(date) {
            return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds())
        };
        Date.subtract = function subtract(date1, date2) {
            var delta = Date.getTimeUTC(date1) - Date.getTimeUTC(date2);
            var result = {
                    days: 0, hours: 0, minutes: 0, seconds: 0, milliseconds: 0
                };
            result.days = Math.floor(delta / dayMS);
            delta = delta - (result.days * dayMS);
            result.hours = Math.floor(delta / hourMS);
            delta = delta - (result.hours * hourMS);
            result.minutes = Math.floor(delta / minuteMS);
            delta = delta - (result.minutes * minuteMS);
            result.seconds = Math.floor(delta / secondMS);
            delta = delta - (result.seconds * secondMS);
            result.milliseconds = delta;
            return result
        };
        Date.isValidExpirationDate = function isValidExpirationDate(date) {
            var now = new Date;
            if (date.getFullYear() - now.getFullYear() < 100)
                return true;
            else
                return false
        };
        function getNewConstructorFunction() {
            return function() {
                    if (this === window)
                        throw new Error("Need to use 'new' to invoke the constructor");
                    this.base()
                }
        }
        WinJS.Namespace.define("MS.Entertainment", {
            derive: function derive(baseClass, constructor, instanceMembers, staticMembers) {
                return MS.Entertainment.deferredDerive(baseClass, constructor, instanceMembers, staticMembers).get()
            }, deferredDerive: function deferredDerive(baseClass, constructor, instanceMembers, staticMembers) {
                    var value;
                    return {
                            get: function entertainmentDerive_getter() {
                                if (value)
                                    return value;
                                if (typeof baseClass === "string") {
                                    var baseClassName = baseClass;
                                    baseClass = WinJS.Utilities.getMember(baseClass);
                                    MS.Entertainment.Utilities.assert(baseClass, "Could not resolve baseClass named " + baseClassName)
                                }
                                MS.Entertainment.Utilities.assert(baseClass, "Base class was not valid. Can't derive without something to derive from");
                                if (!constructor)
                                    constructor = getNewConstructorFunction();
                                if (instanceMembers.base)
                                    throw"Deriving requires that there is no existing 'base' property";
                                var localInstanceMembers = MS.Entertainment.UI.Framework.markFunctionsOfObjectAsSupportedForProcessing(instanceMembers);
                                var helperConstructor = function(){};
                                if (baseClass.prototype._initObservable && !baseClass.prototype._preventObservableInheritance) {
                                    localInstanceMembers = WinJS.Binding.expandProperties(instanceMembers);
                                    helperConstructor = function() {
                                        MS.Entertainment.assert(this._backingData, "We thought this was observable. It's not, reconsider...");
                                        for (var member in instanceMembers)
                                            if (instanceMembers.hasOwnProperty(member))
                                                this._backingData[member] = instanceMembers[member]
                                    }
                                }
                                var baseConstructors = [function() {
                                            baseClass.prototype.constructor.apply(this, arguments);
                                            helperConstructor.call(this)
                                        }];
                                if (baseClass.prototype._baseConstructors)
                                    baseConstructors = baseClass.prototype._baseConstructors.concat(baseConstructors);
                                localInstanceMembers._baseConstructors = baseConstructors;
                                localInstanceMembers.base = function() {
                                    if (this._baseConstructors === baseConstructors)
                                        this._baseConstructors = this._baseConstructors.concat();
                                    var baseConstructor = this._baseConstructors.pop();
                                    if (baseConstructor)
                                        baseConstructor.apply(this, arguments)
                                };
                                value = WinJS.Class.derive(baseClass, constructor, localInstanceMembers, MS.Entertainment.UI.Framework.markFunctionsOfObjectAsSupportedForProcessing(staticMembers));
                                return value
                            }, configurable: true
                        }
                }
        })
    })();
    WinJS.Namespace.define("MS.Entertainment", {defineObservable: function(constructor, instanceMembers, staticMembers) {
            return MS.Entertainment.UI.Framework.derive(WinJS.Binding.define(instanceMembers), function defineObservableConstructor() {
                    this._initObservable(Object.create(MS.Entertainment.UI.Framework.markFunctionsOfObjectAsSupportedForProcessing(instanceMembers)));
                    constructor.apply(this, arguments)
                }, null, MS.Entertainment.UI.Framework.markFunctionsOfObjectAsSupportedForProcessing(staticMembers))
        }});
    WinJS.Namespace.define("MS.Entertainment", {defineOptionalObservable: function(constructor, instanceMembers, observableMembers, staticMembers) {
            return MS.Entertainment.UI.Framework.derive(WinJS.Binding.define(observableMembers), function defineOptionalObservableConstructor() {
                    if (this === window)
                        throw new Error("Need to use 'new' to invoke the constructor");
                    if (observableMembers)
                        this._initObservable(Object.create(observableMembers));
                    constructor.apply(this, arguments)
                }, instanceMembers, MS.Entertainment.UI.Framework.markFunctionsOfObjectAsSupportedForProcessing(staticMembers))
        }});
    WinJS.Namespace.define("MS.Entertainment", {
        _appMode: null, appMode: {
                get: function() {
                    if (this._appMode === null)
                        this._appMode = (new Microsoft.Entertainment.Application.ApplicationStatics).appMode;
                    return this._appMode
                }, set: function(value) {
                        this._appMode = value
                    }
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities", {EventSource: MS.Entertainment.UI.Framework.define(function eventSource() {
            this._eventhandlers = [];
            this._eventSource = new MS.Entertainment.UI.Framework.ObservableBase
        }, {
            _eventSource: null, _eventhandlers: null, addEventHandlers: function addEventHandlers(events) {
                    MS.Entertainment.UI.assert(!Array.isArray(events), "Events passed in cannot be an array");
                    var eventHandlers;
                    eventHandlers = MS.Entertainment.Utilities.addEventHandlers(this._eventSource, events);
                    this._eventhandlers.push(eventHandlers);
                    return eventHandlers
                }, dispose: function dispose() {
                    for (var i = 0; i < this._eventhandlers.length; i++)
                        this._eventhandlers[i].cancel();
                    this._eventhandlers = []
                }, dispatchEvent: function dispatchEvent(eventName, parameters) {
                    this._eventSource.dispatchEvent(eventName, parameters)
                }
        })});
    var isNetworkAvailable = function isNetworkAvailable() {
            try {
                return MS.Entertainment.UI.NetworkStatusService.isOnline()
            }
            catch(ex) {
                MS.Entertainment.fail("Exception in isNetworkAvailable, make sure uiState service has been registered prior playback attempt: " + MS.Entertainment.Utilities.stringify(ex));
                return true
            }
        };
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        playabilityTest: function(mediaItem, options) {
            var mediaRightsConditions = null;
            var returnObj = {notificationText: null};
            if (!mediaItem)
                return returnObj;
            var ServiceLocator = MS.Entertainment.ServiceLocator;
            var Services = MS.Entertainment.Services;
            if (options.cloudRights && ServiceLocator.isServiceRegistered(Services.cloudRestrictionCollection))
                mediaRightsConditions = ServiceLocator.getService(Services.cloudRestrictionCollection);
            var leastRestrictiveRights;
            if (!mediaItem.fileItem) {
                if (!mediaRightsConditions && ServiceLocator.isServiceRegistered(Services.trackRestrictionCollection) && options.mediaRights)
                    mediaRightsConditions = ServiceLocator.getService(Services.trackRestrictionCollection);
                if (mediaRightsConditions)
                    leastRestrictiveRights = mediaRightsConditions.getLeastRestrictive(mediaItem, options.rights);
                if (leastRestrictiveRights && leastRestrictiveRights.description) {
                    returnObj.notificationText = leastRestrictiveRights.description;
                    returnObj.isUnplayable = leastRestrictiveRights.isUnplayable;
                    returnObj.isUnavailable = !!leastRestrictiveRights.isUnavailable;
                    returnObj.leastRestrictiveRights = leastRestrictiveRights;
                    if (leastRestrictiveRights.actionId) {
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        returnObj.notificationAction = actionService.getAction(leastRestrictiveRights.actionId)
                    }
                }
            }
            else {
                returnObj.isUnavailable = !mediaItem.fileItem.isAvailable;
                returnObj.isPlayable = !returnObj.isUnavailable;
                mediaItem.canPlayLocally = returnObj.isPlayable;
                return returnObj
            }
            var shouldSkipItem = !mediaItem.playPreviewOnly && (returnObj.isUnavailable || returnObj.isUnplayable);
            returnObj.notConnected = false;
            if (!shouldSkipItem && !mediaItem.canPlayLocally && !isNetworkAvailable()) {
                returnObj.notConnected = true;
                shouldSkipItem = true
            }
            returnObj.explicitAllowed = true;
            if (options.checkExplicit && mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                if (mediaItem.isExplicit && !mediaItem.inCollection && mediaItem.libraryId === -1) {
                    var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    var canPlayExplicit = signedInUser.hasExplicitPrivilege;
                    if ((signInService.isSignedIn && !canPlayExplicit) || !signInService.isSignedIn) {
                        returnObj.explicitAllowed = false;
                        returnObj.notificationText = String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_ITEM_EXPLICIT_BANNER_NOTIFICATION_TITLE);
                        shouldSkipItem = true
                    }
                }
            returnObj.isPlayable = !shouldSkipItem;
            return returnObj
        }, playabilityTestAsync: (function playabilityTestAsync_closure() {
                function shouldQueryMediaState(playability) {
                    return !playability.isPlayable && !playability.notConnected && playability.explicitAllowed
                }
                return function playabilityTestAsync(mediaItem, options) {
                        var playability = MS.Entertainment.Utilities.playabilityTest(mediaItem, options);
                        if (shouldQueryMediaState(playability))
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.queryMediaStateAsync(mediaItem, null).then(function onMediaState(state) {
                                    if (state.canPlay)
                                        playability.isPlayable = true;
                                    return playability
                                }, function queryStateFailed(error) {
                                    return playability
                                });
                        else
                            return WinJS.Promise.wrap(playability)
                    }
            })()
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities.DRM", {individualizationAsync: function() {
            if (MS.Entertainment.Platform.Playback.drmIndividualizationPromise)
                return MS.Entertainment.Platform.Playback.drmIndividualizationPromise;
            var drmIndivSignal = new MS.Entertainment.UI.Framework.Signal;
            var versionCheckPromise = drmIndivSignal.promise;
            MS.Entertainment.Platform.Playback.individualizationWorker = new Worker("/Components/Playback/IndivWorker.js");
            MS.Entertainment.Platform.Playback.individualizationWorker.onmessage = function(event) {
                drmIndivSignal.complete(event.data)
            };
            MS.Entertainment.Platform.Playback.drmIndividualizationPromise = versionCheckPromise.then(function checkComplete(individualizedAlready) {
                if (individualizedAlready)
                    return true;
                try {
                    var individualizationRequest = new Microsoft.Media.PlayReadyClient.PlayReadyIndividualizationServiceRequest;
                    return individualizationRequest.beginServiceRequest().then(function individualizationRequest_success() {
                            return true
                        }, function individualizationRequest_failure() {
                            return false
                        })
                }
                catch(ex) {
                    return false
                }
            }).then(function(isIndividualized) {
                MS.Entertainment.Utilities.isDrmIndividualized = isIndividualized;
                var status = isIndividualized ? "Success" : "Failure";
                MS.Entertainment.Utilities.Telemetry.logDRMIndividualization(status);
                return isIndividualized
            });
            return MS.Entertainment.Platform.Playback.drmIndividualizationPromise
        }});
    WinJS.Namespace.define("MS.Entertainment", {ProxyHelpers: MS.Entertainment.UI.Framework.define(null, {}, {
            proxyObservables: function(outerObject, innerObject, observables) {
                observables.forEach(function(observable) {
                    var externalSet = function(v) {
                            var oldValue = outerObject[observable];
                            outerObject.setProperty(observable, v);
                            if (outerObject.dispatchEvent)
                                outerObject.dispatchEvent(observable + "Changed", {
                                    newValue: v, oldValue: oldValue
                                })
                        };
                    innerObject.bind(observable, externalSet);
                    Object.defineProperty(outerObject, observable, {
                        set: function(v) {
                            innerObject[observable] = v
                        }, get: function() {
                                return innerObject[observable]
                            }, enumerable: true, configurable: false
                    })
                })
            }, proxyProperties: function(outerObject, innerObject, properties) {
                    properties.forEach(function(property) {
                        Object.defineProperty(outerObject, property, {
                            set: function(v) {
                                innerObject[property] = v
                            }, get: function() {
                                    return innerObject[property]
                                }, enumerable: true, configurable: false
                        })
                    })
                }, delegateFunctions: function(outerObject, innerObject, methods) {
                    methods.forEach(function(method) {
                        Object.defineProperty(outerObject, method, {
                            value: function() {
                                return innerObject[method].apply(innerObject, arguments)
                            }, enumerable: true, configurable: false
                        })
                    })
                }
        })});
    (function() {
        WinJS.Namespace.define("MS.Entertainment.Utilities", {
            bindWorker: MS.Entertainment.UI.Framework.bindWorker, weakElementBindingInitializer: MS.Entertainment.UI.Framework.weakElementBindingInitializer, checkIfInDom: MS.Entertainment.UI.Framework.checkIfInDom, forceFullLayout: MS.Entertainment.UI.Framework.forceFullLayout, thawControlsInSubtree: MS.Entertainment.UI.Framework.thawControlsInSubtree, freezeControlsInSubtree: MS.Entertainment.UI.Framework.freezeControlsInSubtree, empty: MS.Entertainment.UI.Framework.empty, addEventHandlers: MS.Entertainment.UI.Framework.addEventHandlers, removeEvents: MS.Entertainment.UI.Framework.removeEvents
        });
        WinJS.Namespace.define("MS.Entertainment.Utilities", {
            EventInvoker: WinJS.Class.mix(function() {
                this._initObservable()
            }, WinJS.Utilities.eventMixin, WinJS.Binding.mixin), assertError: function assertError(message, error) {
                    if (!error)
                        return;
                    MS.Entertainment.Utilities.assert(WinJS.Promise.isCanceledError(error), "{0} [Error Number: {1}] [Error Code: {2}] [Error Async Type: {3}] [Error Async Causality: {4}] [Error Message: {5}] [Error Stack: {6}]".format(message, error.number, error.errorCode, error.asyncOpType, error.asyncOpCausalityId, error.message, error.stack))
                }, attachResizeEvent: function attachEvent(object, callback) {
                    if (object.attachEvent)
                        object.attachEvent("onresize", callback);
                    else
                        object.addEventListener("mselementresize", callback);
                    return {cancel: function() {
                                MS.Entertainment.Utilities.detachResizeEvent(object, callback)
                            }}
                }, detachResizeEvent: function detachEvent(object, callback) {
                    if (object.detachEvent)
                        object.detachEvent("onresize", callback);
                    else
                        object.removeEventListener("mselementresize", callback)
                }, attachPropertyChangeEvent: function attachPropertyChangeEvent(object, callback) {
                    if (object.attachEvent)
                        object.attachEvent("onpropertychange", callback);
                    else {
                        var callbackWrapper = function callbackWrapper(evt) {
                                var element = null;
                                var propertyName = null;
                                if (evt && evt[0]) {
                                    element = evt[0].target;
                                    propertyName = evt[0].attributeName
                                }
                                callback({
                                    srcElement: element, propertyName: propertyName
                                })
                            };
                        return new MutationObserver(callbackWrapper).observe(object, {
                                attributes: true, attributeFilter: ["aria-selected", "aria-pressed"]
                            })
                    }
                }, detachPropertyChangeEvent: function detachPropertyChangeEvent(object, callback) {
                    if (object.detachEvent)
                        object.detachEvent("onpropertychange", callback)
                }, waitForDomEvent: function waitForDomEvent(eventName, element, capture) {
                    return MS.Entertainment.Utilities.waitForDomEventMultipleTimes(eventName, element, 1, capture)
                }, waitForDomEventMultipleTimes: function waitForDomEventMultipleTimes(eventName, element, numEvents, capture) {
                    if (!element || !element.addEventListener || !eventName)
                        throw new Error("Invalid args: eventName: {0}, element: {1}".format(eventName, element && JSON.stringify(element)));
                    numEvents = numEvents || 1;
                    var signal = new MS.Entertainment.UI.Framework.Signal;
                    var onEvent = function onEvent(event) {
                            numEvents--;
                            if (numEvents === 0) {
                                element.removeEventListener(eventName, onEvent, capture);
                                signal.complete(event)
                            }
                        };
                    element.addEventListener(eventName, onEvent, capture);
                    return signal.promise.then(function onComplete(result) {
                            return result
                        }, function onError(err) {
                            element.removeEventListener(eventName, onEvent, capture);
                            return err
                        })
                }, waitForPropertyValue: function waitForPropertyValue(source, propertyName, propertyValueToWaitFor) {
                    Trace.assert(source, "waitForPropertyValue - no source specified.");
                    Trace.assert(propertyName, "waitForPropertyValue - no propertyName specified.");
                    if (source[propertyName] === propertyValueToWaitFor)
                        return WinJS.Promise.as();
                    var bindings;
                    var bindingMap = {};
                    var signal = new MS.Entertainment.UI.Framework.Signal;
                    var onPropertyChanged = function onPropertyChanged(value) {
                            if (value === propertyValueToWaitFor)
                                signal.complete()
                        };
                    var cancelBindings = function cancelBindings() {
                            if (bindings) {
                                bindings.cancel();
                                bindings = null
                            }
                        };
                    bindingMap[propertyName] = onPropertyChanged;
                    bindings = WinJS.Binding.bind(source, bindingMap);
                    return signal.promise.then(cancelBindings, cancelBindings)
                }, validateIsMemberOrThrow: function validateIsMemberOrThrow(value, object) {
                    var member = "";
                    for (member in object)
                        if (object.hasOwnProperty(member) && value === object[member])
                            return;
                    throw"validateIsMemberOrThrow: Value not found in object.";
                }, loadHtmlPage: function loadHtmlPage(filePath, targetElement, dataContext) {
                    MS.Entertainment.Utilities.assert(targetElement, "No destination element was passed");
                    var container;
                    var load;
                    return WinJS.UI.Fragments.renderCopy(filePath).then(function placeHtmlPageInDom(fragment) {
                            var loadName;
                            var loadTags;
                            if (typeof targetElement === "string")
                                container = document.getElementById(targetElement);
                            else
                                container = targetElement;
                            MS.Entertainment.Utilities.assert(container, "Page container supplied couldn't be found");
                            MS.Entertainment.Utilities.empty(container);
                            loadTags = fragment.querySelectorAll("[data-ent-fragmentLoad]");
                            if (loadTags && loadTags.length > 0)
                                for (var i = 0, l = loadTags.length; i < l; i++)
                                    if (loadTags[i].nodeName !== "BODY") {
                                        loadName = loadTags[i].getAttribute("data-ent-fragmentLoad");
                                        break
                                    }
                            if (loadName) {
                                load = WinJS.Utilities.getMember(loadName);
                                MS.Entertainment.Utilities.assert(load, "Load function was not located: " + loadName)
                            }
                            container.appendChild(fragment)
                        }).then(function waitOnData() {
                            return dataContext
                        }).then(function(data) {
                            dataContext = data;
                            return WinJS.UI.processAll(container)
                        }).then(function() {
                            return WinJS.Binding.processAll(container, dataContext)
                        }).then(function callCallbacks() {
                            if (load)
                                load(container.children[0])
                        })
                }, documentAlreadyProcessed: false, systemAppListenersAttached: false, processAllOnDocumentLoaded: function processAllOnDocumentLoaded(element, dataContext) {
                    if (MS.Entertainment.Utilities.documentAlreadyProcessed)
                        return WinJS.Promise.timeout();
                    MS.Entertainment.Utilities.documentAlreadyProcessed = true;
                    return WinJS.Utilities.ready().then(function processAllAfterDocumentReady() {
                            return WinJS.UI.processAll(element)
                        }).then(function bindingProcessAllAfterControlProcessAll() {
                            return WinJS.Binding.processAll(element, dataContext)
                        })
                }, isAboveMemoryCleanupThreshold: function isAboveMemoryCleanupThreshold() {
                    return MS.Entertainment.Utilities.isApp2 && MS.Entertainment.Utilities.isAboveMemoryThreshold(App2.ApplicationModel.MemoryCleanupThreshold)
                }, isAboveMemoryThreshold: function isAboveMemoryThreshold(thresholdPercentage) {
                    MS.Entertainment.Utilities.assert(thresholdPercentage > 0.0 && thresholdPercentage <= 1.0, "thresholdPercentage must be between 0.0 and 1.0");
                    var isAboveThreshold = false;
                    var resourceLimitsObject = WinJS.Utilities.getMember("App2.ApplicationModel.ApplicationResourceLimits");
                    if (!resourceLimitsObject || thresholdPercentage <= 0.0 || thresholdPercentage > 1.0)
                        return false;
                    try {
                        var currentMemoryUsageInKB = Math.max((resourceLimitsObject.currentMemoryUsage / 1024) | 0, 1);
                        var currentPercentage = (currentMemoryUsageInKB / App2.ApplicationModel.MemoryThresholdInKB);
                        isAboveThreshold = (thresholdPercentage < currentPercentage && !isNaN(currentPercentage))
                    }
                    catch(e) {
                        MS.Entertainment.Utilities.fail("isAboveMemoryThreshold failed: " + e)
                    }
                    return isAboveThreshold
                }, _backgroundLinkHrefCache: [], enterRestrictedBackground: function enterRestrictedBackground() {
                    var navigatonService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                    navigatonService.clearAllNavigationState();
                    WinJS.Promise.timeout(MS.Entertainment.UI.Framework.autoCleanupTimeout + 100).then(function() {
                        MS.Entertainment.UI.Framework.currentContentContainer = null;
                        var cssLinkElements = WinJS.Utilities.query("link[href$='css']", document.head);
                        MS.Entertainment.Utilities._backgroundLinkHrefCache = cssLinkElements.map(function getLinkHref(element) {
                            element.parentElement.removeChild(element);
                            return element.href
                        });
                        MS.Entertainment.UI.Framework.clearCaches();
                        MS.Entertainment.ServiceLocator.cleanupNonCriticalServices();
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isInRestrictedBackground = true
                    })
                }, leaveRestrictedBackground: function leaveRestrictedBackground() {
                    MS.Entertainment.Utilities._backgroundLinkHrefCache.forEach(function createLink(hrefValue) {
                        var linkElement = document.createElement("link");
                        linkElement.setAttribute("href", hrefValue);
                        linkElement.setAttribute("rel", "stylesheet");
                        linkElement.setAttribute("type", "text/css");
                        document.head.appendChild(linkElement)
                    });
                    MS.Entertainment.Utilities._backgroundLinkHrefCache = [];
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isInRestrictedBackground = false;
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateToDefaultPage()
                }, multiStateToggleClassName: MS.Entertainment.Utilities.weakElementBindingInitializer(function multiStateToggleClassNameHelper(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    var maxStates = 5;
                    for (var i = 1; i < maxStates; i++)
                        WinJS.Utilities.removeClass(targetElement, cssClassName + "_" + i);
                    if (sourceValue)
                        WinJS.Utilities.addClass(targetElement, cssClassName + "_" + sourceValue)
                }), toggleTabIndex: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleTabIndex(sourceValue, targetElement) {
                    if (sourceValue)
                        targetElement.setAttribute("tabIndex", 0);
                    else
                        targetElement.removeAttribute("tabIndex")
                }), toggleTabIndexNegate: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleTabIndexNegate(sourceValue, targetElement) {
                    if (!sourceValue)
                        targetElement.setAttribute("tabIndex", 0);
                    else
                        targetElement.removeAttribute("tabIndex")
                }), toggleClassNameOnObservableArrayLength: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnObservableArrayLength(sourceValue, targetElement, cssClassName) {
                    if (!(sourceValue instanceof MS.Entertainment.ObservableArray))
                        return;
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    var handleArrayChanges = function handleArrayChanges(notification) {
                            if (sourceValue.length === 0)
                                WinJS.Utilities.addClass(targetElement, cssClassName);
                            else
                                WinJS.Utilities.removeClass(targetElement, cssClassName)
                        };
                    sourceValue.addChangeListener(handleArrayChanges);
                    handleArrayChanges()
                }), toggleClassNameOnObservableArrayLengthNegate: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnObservableArrayLengthNegate(sourceValue, targetElement, cssClassName) {
                    if (!(sourceValue instanceof MS.Entertainment.ObservableArray))
                        return;
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    var handleArrayChanges = function handleArrayChanges(notification) {
                            if (sourceValue.length === 0)
                                WinJS.Utilities.removeClass(targetElement, cssClassName);
                            else
                                WinJS.Utilities.addClass(targetElement, cssClassName)
                        };
                    sourceValue.addChangeListener(handleArrayChanges);
                    handleArrayChanges()
                }), toggleClassNameOnObservableArrayLengthMoreThanOne: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnObservableArrayLengthMoreThanOne(sourceValue, targetElement, cssClassName) {
                    if (!(sourceValue instanceof MS.Entertainment.ObservableArray))
                        return;
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    var handleArrayChanges = function handleArrayChanges(notification) {
                            if (sourceValue.length > 1)
                                WinJS.Utilities.addClass(targetElement, cssClassName);
                            else
                                WinJS.Utilities.removeClass(targetElement, cssClassName)
                        };
                    sourceValue.addChangeListener(handleArrayChanges);
                    handleArrayChanges()
                }), toggleClassNameOnObservableArrayLengthMoreThanOneNegate: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnObservableArrayLengthMoreThanOneNegate(sourceValue, targetElement, cssClassName) {
                    if (!(sourceValue instanceof MS.Entertainment.ObservableArray))
                        return;
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    var handleArrayChanges = function handleArrayChanges(notification) {
                            if (sourceValue.length > 1)
                                WinJS.Utilities.removeClass(targetElement, cssClassName);
                            else
                                WinJS.Utilities.addClass(targetElement, cssClassName)
                        };
                    sourceValue.addChangeListener(handleArrayChanges);
                    handleArrayChanges()
                }), setAttributeValue: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassName(sourceValue, targetElement, attributeName) {
                    if (!attributeName || !targetElement)
                        return;
                    if (Array.isArray(attributeName))
                        attributeName = attributeName[0];
                    switch (attributeName) {
                        case"dataWinAutomationId":
                            attributeName = "data-win-automationId";
                            break;
                        default:
                            break
                    }
                    if (sourceValue)
                        targetElement.setAttribute(attributeName, sourceValue);
                    else if (targetElement.hasAttribute(attributeName))
                        targetElement.removeAttribute(attributeName)
                }), toggleClassName: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassName(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (sourceValue)
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleClassNameNegate: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameNegate(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (!sourceValue)
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleShowHideElement: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleShowHideElement(sourceValue, targetElement, cssClassName) {
                    if (sourceValue)
                        MS.Entertainment.Utilities.showElement(targetElement);
                    else
                        MS.Entertainment.Utilities.hideElement(targetElement)
                }), toggleShowHideElementNegate: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleShowHideElementNegate(sourceValue, targetElement, cssClassName) {
                    if (!sourceValue)
                        MS.Entertainment.Utilities.showElement(targetElement);
                    else
                        MS.Entertainment.Utilities.hideElement(targetElement)
                }), getConfigValueOneTime: WinJS.Utilities.markSupportedForProcessing(function getConfigValueOneTime(source, sourceProperties, dest, destProperties) {
                    var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var configurationValue = MS.Entertainment.Utilities.valueFromPropertyPathFragments(configManager, sourceProperties);
                    MS.Entertainment.Utilities.setFromPropertyPathFragments(dest, destProperties, configurationValue)
                }), formatDirection: MS.Entertainment.Utilities.weakElementBindingInitializer(function formatDirection(sourceValue, targetElement) {
                    if (sourceValue) {
                        var textDirection = MS.Entertainment.Utilities.detectStringDirection(sourceValue);
                        if (textDirection && textDirection !== MS.Entertainment.Utilities.getTextDirection())
                            switch (textDirection) {
                                case MS.Entertainment.UI.Framework.TextDirections.LeftToRight:
                                    WinJS.Utilities.addClass(targetElement, "ui-direction-ltr");
                                    break;
                                case MS.Entertainment.UI.Framework.TextDirections.RightToLeft:
                                    WinJS.Utilities.addClass(targetElement, "ui-direction-rtl");
                                    break
                            }
                        else
                            WinJS.Utilities.removeClass(targetElement, "ui-direction-ltr ui-direction-rtl")
                    }
                }), toggleClassNameViewStateNotReady: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameViewStateNotReady(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (sourceValue !== MS.Entertainment.UI.ViewState.ready)
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleShowHideElementViewStateNotReady: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleShowHideElementViewStateReady(sourceValue, targetElement, cssClassName) {
                    if (sourceValue !== MS.Entertainment.UI.ViewState.ready)
                        MS.Entertainment.Utilities.hideElement(targetElement);
                    else
                        MS.Entertainment.Utilities.showElement(targetElement)
                }), toggleShowHideElementVIewStateNotComplete: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleShowHideElementVIewStateNotComplete(sourceValue, targetElement, cssClassName) {
                    if (sourceValue !== MS.Entertainment.UI.ViewState.loading)
                        MS.Entertainment.Utilities.showElement(targetElement);
                    else
                        MS.Entertainment.Utilities.hideElement(targetElement)
                }), toggleClassNameViewStateNotLoading: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameViewStateNotLoading(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (sourceValue !== MS.Entertainment.UI.ViewState.loading)
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleClassNameViewStateError: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameViewStateError(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (sourceValue === MS.Entertainment.UI.ViewState.error)
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleClassNameOnFeatureDisabledAndNoSubscription: WinJS.Utilities.markSupportedForProcessing(function toggleClassNameOnFeatureDisabledAndNoSubscription(source, sourceProperty, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    var featureItem;
                    if (sourceProperty && sourceProperty[0])
                        featureItem = MS.Entertainment.Utilities.valueFromPropertyPathFragments(WinJS.Utilities.getMember(sourceProperty[0]), sourceProperty.slice(1));
                    MS.Entertainment.Utilities.assert(!!featureItem, "Feature enablement feature item not defined. featureItem: " + featureItem + ", sourceProperty: " + sourceProperty + ", targetElement: " + targetElement);
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    if (!MS.Entertainment.Utilities.currentOrLastUserSubscriptionEnabled() && featureItem && !featureEnablement.isEnabled(featureItem))
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleClassNameOnFeatureDisabled: WinJS.Utilities.markSupportedForProcessing(function toggleClassNameOnFeatureDisabled(source, sourceProperty, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    var featureItem;
                    if (sourceProperty && sourceProperty[0])
                        featureItem = MS.Entertainment.Utilities.valueFromPropertyPathFragments(WinJS.Utilities.getMember(sourceProperty[0]), sourceProperty.slice(1));
                    MS.Entertainment.Utilities.assert(!!featureItem, "Feature enablement feature item not defined. featureItem: " + featureItem + ", sourceProperty: " + sourceProperty + ", targetElement: " + targetElement);
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    if (featureItem && !featureEnablement.isEnabled(featureItem))
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleClassNameOnEmptyGuid: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnEmptyGuid(smid, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (!smid || smid === MS.Entertainment.Utilities.EMPTY_GUID)
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleClassNameOnNonNegativeNumber: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnNonNegativeNumber(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (sourceValue && (typeof(sourceValue) === "number") && sourceValue >= 0)
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleClassNameOnNegativeNumber: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnNegativeNumber(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    var sourceValueIsNumber = (sourceValue || sourceValue === 0) && (typeof(sourceValue) === "number");
                    if ((sourceValueIsNumber && sourceValue < 0) || !sourceValueIsNumber)
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleClassNameOnNonPositiveNumber: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnNonPositiveNumber(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (sourceValue === undefined || sourceValue === null || typeof(sourceValue) !== "number" || sourceValue <= 0)
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleClassNameOnEmptyString: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnEmptyString(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (sourceValue !== null && sourceValue !== undefined)
                        sourceValue += String.empty;
                    if (sourceValue && sourceValue.length > 0)
                        WinJS.Utilities.removeClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.addClass(targetElement, cssClassName)
                }), toggleClassNameOnEmptyOrBlankString: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnEmptyOrBlankString(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (sourceValue !== null && sourceValue !== undefined)
                        sourceValue += String.empty;
                    if (sourceValue && sourceValue.trim().length > 0)
                        WinJS.Utilities.removeClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.addClass(targetElement, cssClassName)
                }), toggleClassNameOnNonEmptyString: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameOnNonEmptyString(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (sourceValue !== null && sourceValue !== undefined)
                        sourceValue += String.empty;
                    if (sourceValue && sourceValue.length > 0)
                        WinJS.Utilities.addClass(targetElement, cssClassName);
                    else
                        WinJS.Utilities.removeClass(targetElement, cssClassName)
                }), toggleTextContentOrEmptyString: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleTextContentOrEmptyString(toggleValue, targetElement, stringID) {
                    if (toggleValue && stringID && stringID[0])
                        targetElement.innerText = String.load(stringID[0]);
                    else
                        targetElement.innerText = String.empty
                }), appendClassName: MS.Entertainment.Utilities.weakElementBindingInitializer(function appendClassName(sourceValue, targetElement, targetProperty) {
                    if (!sourceValue)
                        return;
                    var sourceValueArray = sourceValue.split(" ");
                    for (var i = 0; i < sourceValueArray.length; i++)
                        if (sourceValueArray[i] && !WinJS.Utilities.hasClass(targetElement, sourceValueArray[i]))
                            WinJS.Utilities.addClass(targetElement, sourceValueArray[i])
                }), removeClassName: MS.Entertainment.Utilities.weakElementBindingInitializer(function removeClassName(sourceValue, targetElement, targetProperty) {
                    if (sourceValue && WinJS.Utilities.hasClass(targetElement, sourceValue))
                        WinJS.Utilities.removeClass(targetElement, sourceValue)
                }), limitClassName: MS.Entertainment.Utilities.weakElementBindingInitializer(function limitClassName(sourceValue, targetElement, targetProperty) {
                    if (!sourceValue || !targetElement)
                        return;
                    for (var i = 0; i < targetElement.classList.length; ) {
                        var className = targetElement.classList[i];
                        if (className && className.indexOf(targetProperty) === 0)
                            WinJS.Utilities.removeClass(targetElement, className);
                        else
                            i++
                    }
                    var sourceValueArray = sourceValue.split(" ");
                    for (var i = 0; i < sourceValueArray.length; i++) {
                        var className = sourceValueArray[i];
                        if (className && !WinJS.Utilities.hasClass(targetElement, className))
                            WinJS.Utilities.addClass(targetElement, className)
                    }
                }), toggleMediaTypeClassName: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleMediaTypeClassName(sourceValue, targetElement, cssClassName) {
                    if (!targetElement)
                        return;
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    var i;
                    var cssPrefix = cssClassName.toLowerCase() + "-";
                    var classList = targetElement.classList || [];
                    var mediaClasses = [];
                    for (i = 0; i < classList.length; ++i) {
                        var className = classList[i];
                        if (className.indexOf(cssPrefix) === 0)
                            mediaClasses.push(className)
                    }
                    for (i = 0; i < mediaClasses.length; ++i)
                        WinJS.Utilities.removeClass(targetElement, mediaClasses[i]);
                    if (sourceValue && sourceValue.mediaType) {
                        var mediaTypeString = MS.Entertainment.Data.Factory.Marketplace.edsMediaTypeFromDatabaseType(sourceValue.mediaType);
                        if (mediaTypeString)
                            WinJS.Utilities.addClass(targetElement, (cssPrefix + mediaTypeString).toLowerCase())
                    }
                }), appendMediaTypeClassName: MS.Entertainment.Utilities.weakElementBindingInitializer(function appendMediaTypeClassName(sourceValue, targetElement, cssClassName) {
                    if (Array.isArray(cssClassName))
                        cssClassName = cssClassName[0];
                    if (sourceValue && sourceValue.mediaType) {
                        var mediaTypeString = MS.Entertainment.Data.Factory.Marketplace.edsMediaTypeFromDatabaseType(sourceValue.mediaType);
                        if (mediaTypeString)
                            WinJS.Utilities.addClass(targetElement, (cssClassName + "-" + mediaTypeString).toLowerCase())
                    }
                }), toggleBoolean: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function toggleBoolean(sourceValue) {
                    return !sourceValue
                })), toggleHideOnElement: WinJS.Utilities.markSupportedForProcessing(function toggleHideOnElement(element, switchToHidden) {
                    if (switchToHidden)
                        WinJS.Utilities.addClass(element, "removeFromDisplay");
                    else
                        WinJS.Utilities.removeClass(element, "removeFromDisplay")
                }), useShowHideAnimationsOnValueChange: MS.Entertainment.Utilities.weakElementBindingInitializer(function useShowHideAnimationsOnValueChange(sourceValue, targetElement, elementProperty) {
                    if (sourceValue === targetElement[elementProperty])
                        return;
                    var hidePromise = null;
                    if (!WinJS.Utilities.hasClass(targetElement, "hideFromDisplay"))
                        hidePromise = MS.Entertainment.Utilities.hideElement(targetElement);
                    else
                        hidePromise = WinJS.Promise.wrap();
                    hidePromise.then(function elementHidden() {
                        targetElement[elementProperty] = sourceValue;
                        MS.Entertainment.Utilities.showElement(targetElement)
                    })
                }), forceShowAnimationOnLoad: MS.Entertainment.Utilities.weakElementBindingInitializer(function forceShowAnimationOnLoad(sourceValue, targetElement, elementProperty) {
                    if (sourceValue && !(Array.isArray(sourceValue) && sourceValue.length === 0))
                        MS.Entertainment.Utilities.showElement(targetElement)
                }), toggleClassOnElement: WinJS.Utilities.markSupportedForProcessing(function toggleHideOnElement(element, switchOn, className) {
                    if (Array.isArray(className))
                        className = className[0];
                    if (switchOn)
                        WinJS.Utilities.addClass(element, className);
                    else
                        WinJS.Utilities.removeClass(element, className)
                }), toggleVoiceTarget: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassName(sourceValue, targetElement) {
                    if (!MS.Entertainment.Utilities.isApp2)
                        return;
                    if (sourceValue)
                        WinJS.Utilities.addClass(targetElement, MS.Entertainment.UI.App2.VoiceStatics.voiceTextCssStyle);
                    else
                        WinJS.Utilities.removeClass(targetElement, MS.Entertainment.UI.App2.VoiceStatics.voiceTextCssStyle)
                }), toggleVoiceTargetNegate: MS.Entertainment.Utilities.weakElementBindingInitializer(function toggleClassNameNegate(sourceValue, targetElement) {
                    if (!MS.Entertainment.Utilities.isApp2)
                        return;
                    if (!sourceValue)
                        WinJS.Utilities.addClass(targetElement, MS.Entertainment.UI.App2.VoiceStatics.voiceTextCssStyle);
                    else
                        WinJS.Utilities.removeClass(targetElement, MS.Entertainment.UI.App2.VoiceStatics.voiceTextCssStyle)
                }), createActionFromBind: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function createActionFromBind(value) {
                    var action = value;
                    if (String.isString(action))
                        action = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(value);
                    return action
                })), bindAndMarkSupportedForProcessing: function(fn, thisPointer) {
                    var boundFunction = fn.bind(thisPointer);
                    return WinJS.Utilities.markSupportedForProcessing(boundFunction)
                }, findParentElementByClassName: function findParentElementByClassName(childElement, className) {
                    var parent = childElement.parentElement;
                    while (parent) {
                        if (WinJS.Utilities.hasClass(parent, className))
                            return parent;
                        parent = parent.parentElement
                    }
                }, isNumeric: function Utilities_isNumeric(sourceString) {
                    if (sourceString === null || sourceString === undefined || typeof sourceString === "object")
                        return false;
                    var validChars = "0123456789.";
                    for (var i = sourceString.length - 1; i >= 0; i--)
                        if (validChars.indexOf(sourceString.charAt(i)) === -1)
                            return false;
                    return true
                }, simpleEscapeHTML: function simpleEscapeHtml(text) {
                    if (text.indexOf("<") !== -1)
                        text = text.replace(/</g, "&lt;");
                    if (text.indexOf(">") !== -1)
                        text = text.replace(/>/g, "&gt;");
                    return text
                }, escapeHTML: (function escapeHTML(text) {
                    var element = null;
                    return function escapeHTML(text) {
                            if (!element)
                                element = document.createElement("div");
                            element.textContent = text;
                            return element.innerHTML
                        }
                })(), unEscapeHTML: (function unEscapeHTML(html) {
                    var element = null;
                    return function unEscapeHTML(html) {
                            if (!element)
                                element = document.createElement("div");
                            element.innerHTML = html;
                            return element.textContent
                        }
                })(), getChildControl: function Utilities_getChildControl(dom, name) {
                    var element;
                    try {
                        element = dom.querySelector("[data-ent-id='" + name + "']");
                        if (element && (element.winControl !== null && element.winControl !== undefined))
                            element = element.winControl
                    }
                    catch(error) {
                        MS.Entertainment.fail("Exception in getChildControl. error: " + error + " name: " + name);
                        element = null
                    }
                    return element
                }, _millisecondsToDate: function millisecondsToDate(milliseconds) {
                    var seconds = Math.floor(milliseconds / 1000);
                    milliseconds = milliseconds % 1000;
                    var minutes = Math.floor(seconds / 60);
                    seconds = seconds % 60;
                    var hours = Math.floor(minutes / 60);
                    minutes = minutes % 60;
                    return new Date(null, null, null, hours, minutes, seconds, milliseconds)
                }, millisecondsToTimeCode: function millisecondsToTimeCode(duration) {
                    var durationType = typeof duration;
                    if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.dateTimeFormatters))
                        return String.empty;
                    else if (durationType === "number")
                        if (duration < 0)
                            return String.empty;
                        else
                            duration = MS.Entertainment.Utilities._millisecondsToDate(duration);
                    else if (durationType === "string")
                        duration = MS.Entertainment.Utilities._millisecondsToDate(parseInt(duration));
                    else if (!duration)
                        return String.empty;
                    var formatter;
                    var hoursString;
                    var minutesString;
                    var secondsString;
                    var hours = duration.getHours();
                    var minutes = duration.getMinutes();
                    var seconds = duration.getSeconds();
                    if (isNaN(hours))
                        hours = 0;
                    if (isNaN(minutes))
                        minutes = 0;
                    if (isNaN(seconds))
                        seconds = 0;
                    formatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                    var timeString;
                    if (hours > 0) {
                        hoursString = formatter.format(hours);
                        formatter.integerDigits = 2;
                        minutesString = formatter.format(minutes);
                        secondsString = formatter.format(seconds);
                        timeString = String.load(String.id.IDS_HHMMSS_DURATION).format(hoursString, minutesString, secondsString)
                    }
                    else {
                        minutesString = formatter.format(minutes);
                        formatter.integerDigits = 2;
                        secondsString = formatter.format(seconds);
                        timeString = String.load(String.id.IDS_MMSS_DURATION).format(minutesString, secondsString)
                    }
                    formatter.integerDigits = MS.Entertainment.Formatters.DateTimeFormatters.defaultDecimalDigits;
                    return timeString
                }, formatTimeString: function formatTimeString(duration, options) {
                    if (typeof duration === "number" && duration < 0)
                        return String.empty;
                    var formatter;
                    var hoursString;
                    var minutesString;
                    var secondsString;
                    formatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                    var timeString = String.empty;
                    var hours = 0;
                    var minutes = 0;
                    var seconds = 0;
                    options = options || {};
                    var excludeSeconds = options.excludeSeconds || false;
                    if (typeof duration === "number") {
                        hours = Math.floor(duration / (1000 * 60 * 60));
                        duration = duration - (hours * 1000 * 60 * 60);
                        minutes = Math.floor(duration / (1000 * 60));
                        duration = duration - (minutes * 1000 * 60);
                        seconds = Math.floor(duration / 1000)
                    }
                    else if (duration) {
                        hours = duration.getHours();
                        minutes = duration.getMinutes();
                        seconds = duration.getSeconds()
                    }
                    if (hours > 0) {
                        hoursString = formatter.format(hours);
                        minutesString = formatter.format(minutes);
                        timeString = String.load(String.id.IDS_DETAILS_DURATION_HOURS_FORMAT).format(hoursString, minutesString)
                    }
                    else {
                        minutesString = formatter.format(minutes);
                        secondsString = formatter.format(seconds);
                        if (!excludeSeconds)
                            timeString = String.load(String.id.IDS_DETAILS_DURATION_MINSEC_FORMAT).format(minutesString, secondsString);
                        else
                            timeString = String.load(String.id.IDS_DETAILS_DURATION_MINS_FORMAT).format(minutesString)
                    }
                    return timeString
                }, getTotalMinutesFromDate: function getTotalMinutesFromDate(date) {
                    var minutes = 0;
                    if (date)
                        minutes = date.getHours() * 60 + date.getMinutes();
                    return minutes
                }, millisecondsFromTimeSpan: function millisecondsFromTimeSpan(timeSpan) {
                    var milliSeconds = 0;
                    if (timeSpan && timeSpan instanceof Date) {
                        var zero = new Date(0, 0, 0, 0, 0, 0, 0);
                        milliSeconds = timeSpan.getTime() - zero.getTime()
                    }
                    return milliSeconds
                }, secondsFromTimeSpan: function secondsFromTimeSpan(timeSpan) {
                    var seconds = MS.Entertainment.Utilities.millisecondsFromTimeSpan(timeSpan) / 1000;
                    return seconds
                }, removeFileExtension: function removeFileExtension(fileName) {
                    if (!fileName)
                        return String.empty;
                    return fileName.replace(/\.[^\.\s]+$/, String.empty)
                }, ensureDurationIsNumber: function ensureDurationIsNumber(duration) {
                    var ms = 0;
                    if (typeof duration === "number")
                        ms = duration;
                    else if (duration.getHours) {
                        ms += duration.getHours() * 60 * 60 * 1000;
                        ms += duration.getMinutes() * 60 * 1000;
                        ms += duration.getSeconds() * 1000;
                        ms += duration.getMilliseconds()
                    }
                    else
                        MS.Entertainment.Utilities.fail("Expected number or date");
                    return ms
                }, isBlobUrl: function isBlobUrl(url) {
                    var blobUrlRegex = /^blob:/i;
                    return blobUrlRegex.test(url)
                }, handleSearchInput: function handleSearchInput(input) {
                    if (!input)
                        return null;
                    var result = String.empty;
                    var trimmed = input.trim();
                    if (trimmed)
                        for (var i = 0; i < trimmed.length; i++) {
                            var ch = trimmed[i];
                            switch (ch) {
                                case"%":
                                case";":
                                case"(":
                                case")":
                                case"{":
                                case"}":
                                case"!":
                                case"\r":
                                case"\t":
                                case"\n":
                                case">":
                                case"<":
                                case"+":
                                case"&":
                                case"-":
                                    result = result + " ";
                                    break;
                                default:
                                    result = result + ch;
                                    break
                            }
                        }
                    return result.trim()
                }, processServiceLinks: function processServiceLinks(text, linkMappings) {
                    var ignoreTags = ["<I>", "<i>", "<B>", "<b>", "</I>", "</i>", "</B>", "</b>"];
                    var isIgnorableTag = function isIgnoreableTag(tagStart, isClosingTag) {
                            var ignore = false;
                            for (var i = 0; i < ignoreTags.length; i++)
                                if (tagStart.lastIndexOf(ignoreTags[i], 0) === 0) {
                                    ignore = true;
                                    break
                                }
                            return ignore
                        };
                    var skipLinkClose = false;
                    return MS.Entertainment.Utilities.processServiceTextBlob(text, function handleTag(tagStart) {
                            tagStart = tagStart || String.empty;
                            if (isIgnorableTag(tagStart))
                                return String.empty;
                            var result = String.empty;
                            var match = /^\<link type\=\"([a-zA-Z0-9]+)\" id\=\"([a-zA-Z0-9\-]+)\">/.exec(tagStart);
                            if (match) {
                                if (match[1] && match[2]) {
                                    var stringFormat = linkMappings[match[1]];
                                    if (stringFormat)
                                        result = stringFormat.format(match[2])
                                }
                                skipLinkClose = (result === String.empty)
                            }
                            else if (tagStart.indexOf("</link>") === 0 && !skipLinkClose)
                                result = linkMappings["$close"];
                            return result
                        })
                }, processServiceTextBlob: function processServiceTextBlob(textBlob, tagCallback) {
                    var buff = "";
                    var lastCh = "";
                    if (textBlob) {
                        var inTag = false;
                        for (var i = 0; i < textBlob.length; i++) {
                            var ch = textBlob[i];
                            if (ch === "<")
                                inTag = true;
                            if (!inTag)
                                if (ch === "\n") {
                                    if (lastCh !== "\n")
                                        buff = buff + "<br><br>"
                                }
                                else if (ch === ">")
                                    buff = buff + "&gt;";
                                else
                                    buff = buff + ch;
                            else if (ch === "<" && tagCallback)
                                buff = buff + tagCallback(textBlob.substr(i));
                            if (ch === ">")
                                inTag = false;
                            lastCh = ch
                        }
                    }
                    return buff
                }, getMediaTypeName: function getMediaTypeName(mediaType, videoType, gameType, downloadTypeText) {
                    var name;
                    switch (mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            if (videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode)
                                name = String.load(String.id.IDS_MEDIATYPE_TVEPISODE);
                            else
                                name = String.load(String.id.IDS_MEDIATYPE_MOVIE);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            name = String.load(String.id.IDS_MEDIATYPE_TVSERIES);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            name = String.load(String.id.IDS_MEDIATYPE_TVSEASON);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            name = String.load(String.id.IDS_MEDIATYPE_ARTIST);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            name = String.load(String.id.IDS_MEDIATYPE_ALBUM);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            name = String.load(String.id.IDS_MEDIATYPE_SONG);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            name = String.load(String.id.IDS_MEDIATYPE_PLAYLIST);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                            if (gameType === MS.Entertainment.Data.Augmenter.GamePlatform.Modern)
                                name = String.load(String.id.IDS_MEDIATYPE_GAME_WINDOWS);
                            else {
                                name = downloadTypeText;
                                if (!name)
                                    name = String.load(String.id.IDS_MEDIATYPE_GAME)
                            }
                            break;
                        default:
                            name = String.load(String.id.IDS_UNKNOWN_VALUE);
                            break
                    }
                    return name
                }, getMediaTypeNameFromMedia: function getMediaTypeNameFromMedia(media) {
                    return MS.Entertainment.Utilities.getMediaTypeName(media.mediaType, media.videoType, media.defaultPlatformType, media.downloadTypeText)
                }, isEDSAuthRequired: function isEDSAuthRequired() {
                    var isAuthRequired = false;
                    var edsUri = MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_EDSSearch);
                    isAuthRequired = edsUri.toLowerCase().substr(0, 8) === "https://";
                    return isAuthRequired
                }, isTouchDevicePresent: function isTouchDevicePresent() {
                    var touchCapabilities = new Windows.Devices.Input.TouchCapabilities;
                    return touchCapabilities && touchCapabilities.touchPresent
                }, EMPTY_GUID: "00000000-0000-0000-0000-000000000000", isEmptyGuid: function isEmptyGuid(guid) {
                    return !guid || guid === MS.Entertainment.Utilities.EMPTY_GUID
                }, isValidGuid: function isValidGuid(guid) {
                    return guid && typeof guid === "string" && guid.match(/^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/)
                }, trimGuid: function trimGuid(guid) {
                    var trimmed = guid.replace('{', '');
                    trimmed = trimmed.replace('}', '');
                    return trimmed
                }, isSameGuid: function isSameGuid(guid1, guid2) {
                    if (!MS.Entertainment.Utilities.isValidGuid(guid1) || !MS.Entertainment.Utilities.isValidGuid(guid2))
                        return false;
                    return MS.Entertainment.Utilities.trimGuid(guid1).trim().toLowerCase() === MS.Entertainment.Utilities.trimGuid(guid2).trim().toLowerCase()
                }, isValidServiceId: function isValidServiceId(guid) {
                    return !MS.Entertainment.Utilities.isEmptyGuid(guid) && MS.Entertainment.Utilities.isValidGuid(guid)
                }, isValidLibraryId: function isValidLibraryId(id) {
                    return id > 0
                }, isValidWatchlistId: function isValidWatchlistId(id) {
                    return isFinite(id) && id >= 0
                }, invalidateLibraryId: -1, _executeQueryAndGetMediaItemAsync: function _executeQueryAndGetMediaItemAsync(query) {
                    var media;
                    return query.getItems().then(function queryGetItems_success(virtualList) {
                            if (virtualList.count !== 1)
                                return WinJS.Promise.wrap();
                            return virtualList.itemsFromIndex(0, 0, 0)
                        }).then(function itemsFromIndex_complete(args) {
                            if (args) {
                                media = args.items[0].data;
                                MS.Entertainment.ViewModels.MediaItemModel.augment(media);
                                if (media.hydrate)
                                    return media.hydrate()
                            }
                            return WinJS.Promise.wrap()
                        }).then(function hydrate_complete() {
                            return WinJS.Promise.wrap(media)
                        }, function _executeQueryAndGetMediaItemAsync_error() {
                            return WinJS.Promise.wrap()
                        })
                }, createMediaItemByLibraryInfo: function createMediaItemByLibraryInfo(libraryId, mediaType) {
                    var query;
                    switch (mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            return MS.Entertainment.UI.Actions.Playlists.queryPlaylistById(libraryId);
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            var query = new MS.Entertainment.Data.Query.libraryTracks;
                            query.trackId = libraryId;
                            query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.track);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            var query = new MS.Entertainment.Data.Query.libraryAlbums;
                            query.albumId = libraryId;
                            query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.album);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            var query = new MS.Entertainment.Data.Query.libraryArtists;
                            query.personId = libraryId;
                            query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            var query = new MS.Entertainment.Data.Query.libraryVideos;
                            query.objectIds = [libraryId];
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            var query = new MS.Entertainment.Data.Query.libraryTVSeasons;
                            query.tvSeasonId = libraryId;
                            break;
                        default:
                            return WinJS.Promise.wrap()
                    }
                    return MS.Entertainment.Utilities._executeQueryAndGetMediaItemAsync(query)
                }, convertToHexString: function convertToHexString(value) {
                    if (!value)
                        value = 0;
                    else if (value < 0)
                        value += 0xFFFFFFFF + 1;
                    return "0x" + value.toString(16)
                }, getSpotlightItemAugmentation: function getSpotlightItemAugmentation(spotlightType) {
                    var augmentation = null;
                    switch (spotlightType) {
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Movie:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Video.SpotlightMovie;
                            break;
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Artist:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Music.SpotlightArtist;
                            break;
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Album:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Music.SpotlightAlbum;
                            break;
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Playlist:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Music.SpotlightPlaylist;
                            break;
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Series:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Video.SpotlightTVSeries;
                            break;
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Season:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Video.SpotlightTVSeason;
                            break;
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Episode:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Video.SpotlightTVEpisode;
                            break;
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.None:
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Web:
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.WebBlend:
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.FlexHub:
                        case MS.Entertainment.Data.Augmenter.Spotlight.MediaType.ZuneFlexHub:
                            augmentation = MS.Entertainment.Data.Augmenter.Spotlight.SpotlightItem;
                            break;
                        default:
                            var shipAssertProvider = new Microsoft.Entertainment.Infrastructure.ShipAssertProvider;
                            shipAssertProvider.shipAssert("MS.Entertainment.UI.Controls", "getSpotlightItemAugmentation()", MS.Entertainment.UI.Debug.getStackTrace(), "Message: " + "Unsupported spotlight media type.  Could not find augmentation for type: " + spotlightType, "");
                            break
                    }
                    {};
                    return augmentation
                }, getEditorialItemAugmentation: function getEditorialItemAugmentation(editorialType) {
                    var augmentation = null;
                    switch (editorialType) {
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Movie:
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.MovieTrailer:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Video.EditorialMovie;
                            break;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.FlexHub:
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Hub:
                            augmentation = MS.Entertainment.Utilities.isMusicApp2 ? MS.Entertainment.Data.Augmenter.Marketplace.EditorialMusicHub : MS.Entertainment.Data.Augmenter.Marketplace.EditorialHub;
                            break;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Series:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Video.EditorialTVSeries;
                            break;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Season:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Video.EditorialTVSeason;
                            break;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Episode:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Video.EditorialEpisode;
                            break;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Album:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Music.EditorialAlbum;
                            break;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Artist:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Music.EditorialArtist;
                            break;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Track:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Music.EditorialTrack;
                            break;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.MusicVideo:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.Music.EditorialMusicVideo;
                            break;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Playlist:
                            break;
                        default:
                            MS.Entertainment.UI.Controls.fail("Unsupported editorial media type.  Could not find augmentation for type: " + editorialType);
                            break
                    }
                    {};
                    return augmentation
                }, getPinnedItemAugmentation: function getPinnedItemAugmentation(pinnedType) {
                    var augmentation = null;
                    switch (pinnedType) {
                        case MS.Entertainment.Data.Query.edsMediaType.musicPlaylist:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.PinnedPlaylist;
                            break;
                        case MS.Entertainment.Data.Query.edsMediaType.album:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.PinnedAlbum;
                            break;
                        case MS.Entertainment.Data.Query.edsMediaType.musicArtist:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.PinnedArtist;
                            break;
                        case MS.Entertainment.Data.Query.edsMediaType.movie:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.PinnedMovie;
                            break;
                        case MS.Entertainment.Data.Query.edsMediaType.tvSeason:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.PinnedTvSeason;
                            break;
                        case MS.Entertainment.Data.Query.edsMediaType.tvSeries:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.PinnedTvSeries;
                            break;
                        default:
                            break
                    }
                    {};
                    return augmentation
                }, getRecentItemAugmentation: function getRecentItemAugmentation(recentType, acquisitionContext) {
                    var augmentation = null;
                    switch (recentType) {
                        case MS.Entertainment.Data.Query.edsMediaType.musicPlaylist:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.RecentPlaylist;
                            break;
                        case MS.Entertainment.Data.Query.edsMediaType.album:
                            augmentation = MS.Entertainment.Data.Augmenter.Marketplace.RecentAlbum;
                            break;
                        case MS.Entertainment.Data.Query.edsMediaType.musicArtist:
                            switch (acquisitionContext) {
                                case MS.Entertainment.Utilities.AcquisitionContext.SmartDJ:
                                    augmentation = MS.Entertainment.Data.Augmenter.Marketplace.RecentSmartDJ;
                                    break;
                                default:
                                    augmentation = MS.Entertainment.Data.Augmenter.Marketplace.RecentArtist;
                                    break
                            }
                            break;
                        default:
                            break
                    }
                    {};
                    return augmentation
                }, isSupportedVideoEditorialType: function isSupportedVideoEditorialType(item, editorialType) {
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    var showMovieTrailers = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.videoShowMovieTrailers);
                    var featuredSetsEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.videoFeaturedSetsEnabled);
                    var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var showEditorialEpisodes = config.video.supportsEditorialTVEpisodes;
                    switch (editorialType) {
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.MovieTrailer:
                            return showMovieTrailers;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Episode:
                            return showEditorialEpisodes;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Season:
                            return MS.Entertainment.Utilities.isValidServiceId(item.seriesId);
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.FlexHub:
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Hub:
                            return featuredSetsEnabled;
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Series:
                        case MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Movie:
                            return true;
                        default:
                            break
                    }
                    return false
                }, convertEditorialItem: function convertEditorialItem(mediaItem) {
                    var newMediaItem = mediaItem;
                    var augmenter;
                    if (mediaItem && !mediaItem.mediaType)
                        augmenter = MS.Entertainment.Utilities.getEditorialItemAugmentation(mediaItem && mediaItem.type);
                    if (augmenter) {
                        var oldItem = WinJS.Binding.unwrap(mediaItem);
                        newMediaItem = MS.Entertainment.Data.augment(MS.Entertainment.Data.deflate(oldItem), augmenter);
                        if (oldItem.contentNotifications)
                            newMediaItem.contentNotifications = oldItem.contentNotifications
                    }
                    return newMediaItem
                }, uninitializeChildControls: function disposeChildControls(dom) {
                    var element = dom.querySelector("[data-win-control], .ent-control");
                    var controls = dom.querySelectorAll("[data-win-control], .ent-control");
                    if (controls && controls.length > 0)
                        for (var i = 0, l = controls.length; i < l; i++)
                            if (controls[i] && controls[i].winControl && controls[i].winControl.uninitialize)
                                controls[i].winControl.uninitialize()
                }, runVoiceControlMixins: function runVoiceMixins(classConstructor) {
                    Trace.assert(classConstructor, "runVoiceControlMixins: classConstructor not defined");
                    if (WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoicePropertyMixin"))
                        WinJS.Class.mix(classConstructor, MS.Entertainment.UI.App2.VoiceControlMixin);
                    else
                        Trace.assert(!WinJS.UI.AutomaticFocus, "MS.Entertainment.UI.App2.VoicePropertyMixin not defined. Make sure VoiceControl.js is loaded before the class constructor's file.")
                }, runVoicePropertyMixins: function runVoiceMixins(classConstructor) {
                    Trace.assert(classConstructor, "runVoicePropertyMixins: classConstructor not defined");
                    if (WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoicePropertyMixin"))
                        WinJS.Class.mix(classConstructor, MS.Entertainment.UI.App2.VoicePropertyMixin);
                    else
                        Trace.assert(!WinJS.UI.AutomaticFocus, "MS.Entertainment.UI.App2.VoicePropertyMixin not defined. Make sure VoiceControl.js is loaded before the class constructor's file.")
                }, searchArray: function searchArray(array, predicate) {
                    var index = 0;
                    var candidate = null;
                    for (index = 0; index < array.length; index++) {
                        candidate = array[index];
                        if (predicate(candidate))
                            return candidate
                    }
                    return null
                }, getPropertyPathFragments: function getPropertyPathFragments(propertyPath) {
                    var propertyPathFragments = (propertyPath) ? propertyPath.split(/(?:\]\.)|\.|\[|\]/) : [];
                    if (propertyPathFragments[propertyPathFragments.length - 1] === String.empty)
                        propertyPathFragments.pop();
                    if (propertyPathFragments[0] === String.empty)
                        propertyPathFragments.splice(0, 1);
                    return propertyPathFragments
                }, valueFromPropertyPath: function valueFromPropertyPath(data, propertyPath) {
                    return MS.Entertainment.Utilities.valueFromPropertyPathFragments(data, MS.Entertainment.Utilities.getPropertyPathFragments(propertyPath))
                }, valuesFromPropertyPath: function valuesFromPropertyPath(item, propertyPath) {
                    var result = [];
                    if (item && propertyPath)
                        if (Array.isArray(item) && item.length > 0)
                            result = item.map(function(element) {
                                return MS.Entertainment.Utilities.valuesFromPropertyPath(element, propertyPath)
                            }.bind(this)).reduce(function(a, b) {
                                if (Array.isArray(a))
                                    return a.concat(b);
                                else
                                    return [a, b]
                            });
                        else {
                            var pathSeperatorIndex = propertyPath.indexOf(".");
                            if (pathSeperatorIndex === -1) {
                                if (propertyPath in item)
                                    result = item[propertyPath]
                            }
                            else {
                                var pathSegment = propertyPath.substr(0, pathSeperatorIndex);
                                if (pathSegment) {
                                    propertyPath = propertyPath.substr(pathSeperatorIndex + 1);
                                    if (pathSegment in item) {
                                        var property = item[pathSegment];
                                        result = MS.Entertainment.Utilities.valuesFromPropertyPath(property, propertyPath)
                                    }
                                }
                            }
                        }
                    return result
                }, valueFromPropertyPathFragments: function valueFromPropertyPathFragments(data, propertyPath, max) {
                    var max = isNaN(max) ? propertyPath.length : max;
                    for (var i = 0; i < max && data; i++)
                        try {
                            data = data[propertyPath[i]]
                        }
                        catch(e) {
                            MS.Entertainment.fail("Exception in valueFromPropertyPathFragments: " + e.toString() + " Property: " + propertyPath.toString())
                        }
                    return data
                }, hasPropertyPath: function hasProperty(data, propertyPath) {
                    return MS.Entertainment.Utilities.hasPropertyPathFragments(data, MS.Entertainment.Utilities.getPropertyPathFragments(propertyPath))
                }, hasPropertyPathFragments: function hasPropertyPathFragments(data, propertyPath) {
                    var len = propertyPath.length - 1;
                    for (var i = 0; i < len && data; i++)
                        data = data[propertyPath[i]];
                    return data && (len < 0 || (typeof data === "object" && propertyPath[len] in data))
                }, setFromPropertyPath: function setFromPropertyPath(data, propertyPath, value) {
                    return MS.Entertainment.Utilities.setFromPropertyPathFragments(data, MS.Entertainment.Utilities.getPropertyPathFragments(propertyPath), value)
                }, setFromPropertyPathFragments: function setFromPropertyPathFragments(data, propertyPath, value) {
                    for (var i = 0, len = propertyPath.length - 1; i < len && data; i++) {
                        if (!(propertyPath[i] in data))
                            data[propertyPath[i]] = {};
                        data = data[propertyPath[i]]
                    }
                    data[propertyPath[len]] = value;
                    return data
                }, random: function random(min, max) {
                    return Math.floor(Math.random() * (max - min + 1)) + min
                }, getRelativeOffset: function getRelativeOffset(element, parent) {
                    MS.Entertainment.Utilities.assert(element, "No element provided");
                    MS.Entertainment.Utilities.assert(parent, "No parent provided");
                    if (!element || !parent)
                        return {
                                top: 0, left: 0
                            };
                    var left = 0;
                    var top = 0;
                    var e = element;
                    while (e && parent && (e.offsetParent !== parent.offsetParent)) {
                        left += e.offsetLeft;
                        top += e.offsetTop;
                        e = e.offsetParent;
                        if (!e)
                            return {
                                    left: left, top: top
                                }
                    }
                    left += (e.offsetLeft - parent.offsetLeft);
                    top += (e.offsetTop - parent.offsetTop);
                    return {
                            left: left, top: top
                        }
                }, onRootPage: function onRootPage() {
                    var currentPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage;
                    return currentPage.iaNode.moniker === MS.Entertainment.UI.Monikers.root
                }, isElementInViewportOfParent: function isElementInViewportOfParent(item, parent) {
                    return MS.Entertainment.Utilities.isElementInHorizontalViewportOfParent(item, parent) && MS.Entertainment.Utilities.isElementInVerticalViewportOfParent(item, parent)
                }, isElementInHorizontalViewportOfParent: function isElementInHorizontalViewportOfParent(item, parent, adjustmentFactor) {
                    adjustmentFactor = adjustmentFactor || 0;
                    var relativePosition = MS.Entertainment.Utilities.getRelativeOffset(item, parent);
                    if (relativePosition && item) {
                        var leftEdge = (relativePosition.left - adjustmentFactor) >= parent.scrollLeft;
                        var rightEdge = Math.min(parent.scrollWidth, relativePosition.left + item.offsetWidth + adjustmentFactor) <= (parent.offsetWidth + parent.scrollLeft);
                        return leftEdge && rightEdge
                    }
                    else
                        return false
                }, isElementInVerticalViewportOfParent: function isElementInVerticalViewportOfParent(item, parent) {
                    var relativePosition = MS.Entertainment.Utilities.getRelativeOffset(item, parent);
                    if (relativePosition) {
                        var topEdge = relativePosition.top >= (parent.scrollTop);
                        var bottomEdge = (relativePosition.top + item.offsetHeight) <= (parent.offsetHeight + parent.scrollTop);
                        return topEdge && bottomEdge
                    }
                    else
                        return false
                }, getEdgeWithinViewport: function getEdgeWithinViewport(desiredEdgePosition, size, viewportSize) {
                    var edgePosition = Math.min(desiredEdgePosition, viewportSize - size);
                    return Math.max(edgePosition, 0)
                }, parseVersionString: function parseVersionString(inputString) {
                    MS.Entertainment.Utilities.assert(inputString, "Empty input string");
                    var versionArray = inputString.split(".");
                    MS.Entertainment.Utilities.assert(versionArray.length === 4, "Version string should have four parts");
                    return {
                            major: parseInt(versionArray[0]), minor: parseInt(versionArray[1]), build: parseInt(versionArray[2]), revision: parseInt(versionArray[3])
                        }
                }, compareVersions: function compareVersions(ver1, ver2) {
                    var properties = ["major", "minor", "build", "revision"];
                    MS.Entertainment.Utilities.assert((ver1.major >= 0) && (ver1.minor >= 0) && (ver1.build >= 0) && (ver1.revision >= 0), " Input version1 is invalid");
                    MS.Entertainment.Utilities.assert((ver2.major >= 0) && (ver2.minor >= 0) && (ver2.build >= 0) && (ver2.revision >= 0), " Input version2 is invalid");
                    for (var i = 0; i < properties.length; i++)
                        if (ver1[properties[i]] < ver2[properties[i]])
                            return -1;
                        else if (ver1[properties[i]] > ver2[properties[i]])
                            return 1;
                    return 0
                }, getClientVersionString: function getClientVersionString() {
                    var ver = Windows.ApplicationModel.Package.current.id.version;
                    return [ver.major, ver.minor, ver.build, ver.revision].join(".")
                }, getVersionString: function getVersionString() {
                    return WinJS.xhr({url: "version.json"}).then(function(data) {
                            var versionInformation = JSON.parse(data.responseText);
                            return versionInformation.version
                        })
                }, navigateToUrl: function navigateToUrl(url, automationId) {
                    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                    var externalNavigationAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.externalNavigate);
                    externalNavigationAction.parameter = url;
                    externalNavigationAction.automationId = automationId;
                    externalNavigationAction.execute()
                }, launchStoreUpdatePage: function launchStoreUpdatePage() {
                    var launchInfo = "ms-windows-store:Updates";
                    var appAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.launchApp);
                    appAction.automationId = MS.Entertainment.UI.AutomationIds.launchAppStoreUpgrade;
                    appAction.parameter = {
                        uri: launchInfo, appendSource: true, appendGamerTag: false
                    };
                    appAction.execute()
                }, doesElementSupportKeyboardInput: function doesElementSupportKeyboardInput(element) {
                    var result = false;
                    if (!element)
                        return result;
                    if (element.tagName === "TEXTAREA" || element.tagName === "SELECT")
                        result = true;
                    else if (element.tagName === "INPUT")
                        switch (element.getAttribute("type")) {
                            case"text":
                            case"password":
                            case"number":
                            case"email":
                            case"tel":
                            case"url":
                            case"search":
                                result = true;
                                break
                        }
                    return result
                }, suppressSubtreeKeyboardFocus: function suppressSubtreeKeyboardFocus(element) {
                    var suppressed = [];
                    if (element) {
                        var elements = element.querySelectorAll("*[tabindex]");
                        if (elements)
                            for (var i = 0; i < elements.length; i++) {
                                var element = elements[i];
                                var tabIndex = element.getAttribute("tabindex");
                                if (tabIndex && tabIndex !== -1) {
                                    suppressed.push({
                                        element: element, tabIndex: tabIndex
                                    });
                                    element.setAttribute("tabindex", -1)
                                }
                            }
                    }
                    return suppressed
                }, restoreSubtreeKeyboardFocus: function restoreSubtreeKeyboardFocus(suppressedList) {
                    if (suppressedList)
                        for (var i = 0; i < suppressedList.length; i++) {
                            var suppressedItem = suppressedList[i];
                            suppressedItem.element.setAttribute("tabindex", suppressedItem.tabIndex)
                        }
                }, isHighResolution: function isHighResolution() {
                    var screenHeight = MS.Entertainment.Utilities.getWindowHeight();
                    var isHighResolution = MS.Entertainment.Utilities.isVideoApp ? (screenHeight >= MS.Entertainment.Utilities.VIEW1_VIDEO_VERTICAL_HEIGHT_LIMIT) : (screenHeight >= MS.Entertainment.Utilities.VIEW1_VERTICAL_HEIGHT_LIMIT);
                    return isHighResolution
                }, getRowCountForResolution: function getRowCountForResolution() {
                    var screenHeight = MS.Entertainment.Utilities.getWindowHeight();
                    var standardResolutionRows = MS.Entertainment.Utilities.isVideoApp ? MS.Entertainment.Utilities.STANDARD_RESOLUTION_VIDEO_ROWS : MS.Entertainment.Utilities.STANDARD_RESOLUTION_ROWS;
                    var highResolutionRows = MS.Entertainment.Utilities.isVideoApp ? MS.Entertainment.Utilities.HIGH_RESOLUTION_VIDEO_ROWS : MS.Entertainment.Utilities.HIGH_RESOLUTION_ROWS;
                    var highResolutionHeight = MS.Entertainment.Utilities.isVideoApp ? MS.Entertainment.Utilities.VIEW1_VIDEO_VERTICAL_HEIGHT_LIMIT : MS.Entertainment.Utilities.VIEW1_VERTICAL_HEIGHT_LIMIT;
                    var rowCount = standardResolutionRows;
                    if (screenHeight >= highResolutionHeight)
                        rowCount = highResolutionRows;
                    return rowCount
                }, getLandscapeScreenSize: function getLandscapeScreenSize() {
                    var size = {
                            width: 0, height: 0
                        };
                    if (window.screen)
                        if (window.screen.msOrientation === "portrait-primary" || window.screen.msOrientation === "portrait-secondary") {
                            size.width = window.screen.height;
                            size.height = window.screen.width
                        }
                        else {
                            size.width = window.screen.width;
                            size.height = window.screen.height
                        }
                    return size
                }, getWindowHeight: function getWindowHeight() {
                    var heightProperty = "outerHeight";
                    if (!document.attachEvent)
                        heightProperty = "innerHeight";
                    return window[heightProperty]
                }, getWindowWidth: function getWindowWidth() {
                    var widthProperty = "outerWidth";
                    if (!document.attachEvent)
                        widthProperty = "innerWidth";
                    return window[widthProperty]
                }, getDisplayProperties: function getDisplayProperties() {
                    var hasDisplayInformation = MS.Entertainment.Utilities.valueFromPropertyPathFragments(Windows, ["Graphics", "Display", "DisplayInformation"]);
                    if (hasDisplayInformation)
                        return Windows.Graphics.Display.DisplayInformation.getForCurrentView();
                    return Windows.Graphics.Display.DisplayProperties
                }, isMusicApp1: {get: function getIsMusicApp1() {
                        return MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.music
                    }}, isMusicApp2: {get: function getIsMusicApp2() {
                        return MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.music2
                    }}, isMusicApp: {get: function getIsMusicApp() {
                        return MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.music || MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.music2
                    }}, isAmsterdamApp: {get: function getIsAmsterdamApp() {
                        return MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.amsterdam
                    }}, isVideoApp1: {get: function getIsVideoApp1() {
                        return MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.video
                    }}, isVideoApp2: {get: function getIsVideoApp2() {
                        return MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.video2
                    }}, isVideoApp: {get: function getIsVideoApp() {
                        return MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.video || MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.video2
                    }}, isTestApp: {get: function getIsTestApp() {
                        return MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.test
                    }}, isApp1: {get: function getIsApp1() {
                        return MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.music || MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.video
                    }}, isApp2: {get: function getIsApp2() {
                        return MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.music2 || MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.video2 || MS.Entertainment.appMode === Microsoft.Entertainment.Application.AppMode.amsterdam
                    }}, _isApp2Platform: false, isApp2Platform: {
                    get: function isApp2Platform() {
                        return !MS.Entertainment.isAppModeOverride && (MS.Entertainment.Utilities._isApp2Platform || MS.Entertainment.Utilities.isApp2)
                    }, set: function isApp2Platform(value) {
                            MS.Entertainment.Utilities._isApp2Platform = value
                        }
                }, isWindowsBlue: {get: function getIsWindowsBlue() {
                        return !!Windows.UI.ViewManagement.ViewSizePreference
                    }}, isMain: {get: function getIsMain() {
                        var mainString = "main.html";
                        var href = window.location.href;
                        return href.indexOf(mainString, href.length - mainString.length) >= 0
                    }}, titleId: {get: function getTitleId() {
                        if (MS.Entertainment.Utilities.isVideoApp2)
                            return "0x3D705025";
                        else if (MS.Entertainment.Utilities.isMusicApp2)
                            return "0x18FFC9F4";
                        else
                            return null
                    }}, shortTitleId: {get: function getTitleId() {
                        if (MS.Entertainment.Utilities.isVideoApp2)
                            return "3D705025";
                        else if (MS.Entertainment.Utilities.isMusicApp2)
                            return "18FFC9F4";
                        else
                            return null
                    }}, supportsProtectedContent: {get: function getSupportsProtectedContent() {
                        try {
                            return Microsoft.Media.PlayReadyClient.PlayReadyStatics.playReadyCertificateSecurityLevel === 2000
                        }
                        catch(e) {
                            return false
                        }
                    }}, _isDrmIndividualized: false, isDrmIndividualized: {
                    get: function get_isDrmIndividualized() {
                        return MS.Entertainment.Utilities._isDrmIndividualized
                    }, set: function set_isDrmIndividualized(newValue) {
                            MS.Entertainment.Utilities._isDrmIndividualized = newValue
                        }
                }, clientSupportsFreeJustPlays: {get: function getClientSupportsFreeJustPlays() {
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        return configurationManager.service.enableFreeJustPlays
                    }}, isRightFree: function isRightFree(right) {
                    var retVal = false;
                    if (right.acceptablePaymentInstrumentTypes)
                        for (var i = 0; i < right.acceptablePaymentInstrumentTypes.length; i++)
                            if (right.acceptablePaymentInstrumentTypes[i] === MS.Entertainment.Data.Augmenter.Marketplace.edsAcceptedPaymentTypes.none)
                                retVal = true;
                    return retVal
                }, useModalNowPlaying: {get: function getUseModalNowPlaying() {
                        return MS.Entertainment.Utilities.isVideoApp
                    }}, noMarketplaceRootClassName: {get: function noMarketplaceRootClassName() {
                        return "noMarketplace"
                    }}, isLaunchToCollectionSettingEnabled: {get: function getIsLaunchToCollectionSettingEnabled() {
                        var moniker = null;
                        try {
                            var defaultLaunchSetting = Windows.Storage.ApplicationData.current.roamingSettings.values["launchLocation"];
                            moniker = MS.Entertainment.UI.Monikers[defaultLaunchSetting]
                        }
                        catch(e) {}
                        return (moniker === "videoCollection")
                    }}, getMediaByServiceId: function getMediaByServiceId(serviceId, idType) {
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    return new WinJS.Promise(function(c, e, p) {
                            if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace) || featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.movieTrailersMarketplace) || featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace) || featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace) || featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicVideosMarketplace)) {
                                var contentTypeQuery = new MS.Entertainment.Data.Query.GenericDetails;
                                contentTypeQuery.serviceId = serviceId;
                                contentTypeQuery.idType = (idType && idType.toLocaleLowerCase() === MS.Entertainment.Data.Query.edsIdType.canonical.toLocaleLowerCase()) ? MS.Entertainment.Data.Query.edsIdType.canonical : MS.Entertainment.Data.Query.edsIdType.zuneCatalog;
                                contentTypeQuery.execute().then(function contentTypeQuerySuccess(query) {
                                    var mediaItemQuery = null;
                                    if (query.result.item)
                                        switch (query.result.item.contentType) {
                                            case"Movie":
                                                if (query.result.item.type === MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.MovieTrailer) {
                                                    if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.movieTrailersMarketplace)) {
                                                        mediaItemQuery = new MS.Entertainment.Data.Query.Video.EdsDetailMovie;
                                                        mediaItemQuery.id = query.result.item.serviceId;
                                                        mediaItemQuery.idType = query.result.item.serviceIdType;
                                                        mediaItemQuery.impressionGuid = query.result.item.impressionGuid;
                                                        mediaItemQuery.relevancyTrackingContent = query.result.item.relevancyTrackingContent
                                                    }
                                                }
                                                else if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace)) {
                                                    mediaItemQuery = new MS.Entertainment.Data.Query.Video.EdsDetailMovie;
                                                    mediaItemQuery.id = query.result.item.serviceId;
                                                    mediaItemQuery.idType = query.result.item.serviceIdType;
                                                    mediaItemQuery.impressionGuid = query.result.item.impressionGuid;
                                                    mediaItemQuery.relevancyTrackingContent = query.result.item.relevancyTrackingContent
                                                }
                                                break;
                                            case"MovieTrailer":
                                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.movieTrailersMarketplace)) {
                                                    mediaItemQuery = new MS.Entertainment.Data.Query.Video.EdsDetailMovie;
                                                    mediaItemQuery.id = query.result.item.serviceId;
                                                    mediaItemQuery.idType = query.result.item.serviceIdType;
                                                    mediaItemQuery.impressionGuid = query.result.item.impressionGuid;
                                                    mediaItemQuery.relevancyTrackingContent = query.result.item.relevancyTrackingContent
                                                }
                                                break;
                                            case"Track":
                                                if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus).isEnabled(MS.Entertainment.UI.NetworkStatusService.NetworkedFeature.musicMarketplace) && featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace)) {
                                                    mediaItemQuery = new MS.Entertainment.Data.Query.Music.SongDetails;
                                                    mediaItemQuery.id = query.result.item.serviceId;
                                                    mediaItemQuery.idType = query.result.item.serviceIdType;
                                                    mediaItemQuery.impressionGuid = query.result.item.impressionGuid;
                                                    mediaItemQuery.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.track)
                                                }
                                                break;
                                            case"Album":
                                                if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus).isEnabled(MS.Entertainment.UI.NetworkStatusService.NetworkedFeature.musicMarketplace) && featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace)) {
                                                    mediaItemQuery = new MS.Entertainment.Data.Query.Music.AlbumWithTracks;
                                                    mediaItemQuery.id = query.result.item.serviceId;
                                                    mediaItemQuery.idType = query.result.item.serviceIdType;
                                                    mediaItemQuery.impressionGuid = query.result.item.impressionGuid;
                                                    mediaItemQuery.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.album)
                                                }
                                                break;
                                            case"Artist":
                                                if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus).isEnabled(MS.Entertainment.UI.NetworkStatusService.NetworkedFeature.musicMarketplace) && featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace)) {
                                                    mediaItemQuery = new MS.Entertainment.Data.Query.Music.ArtistDetails;
                                                    mediaItemQuery.id = query.result.item.serviceId;
                                                    mediaItemQuery.idType = query.result.item.serviceIdType;
                                                    mediaItemQuery.impressionGuid = query.result.item.impressionGuid;
                                                    mediaItemQuery.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.artist)
                                                }
                                                break;
                                            case"MusicVideo":
                                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace)) {
                                                    mediaItemQuery = new MS.Entertainment.Data.Query.Music.MusicVideoDetails;
                                                    mediaItemQuery.id = query.result.item.serviceId;
                                                    mediaItemQuery.idType = query.result.item.serviceIdType;
                                                    mediaItemQuery.impressionGuid = query.result.item.impressionGuid
                                                }
                                                break;
                                            case"Episode":
                                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace)) {
                                                    mediaItemQuery = new MS.Entertainment.Data.Query.Video.EdsDetailTVEpisode;
                                                    mediaItemQuery.id = query.result.item.serviceId;
                                                    mediaItemQuery.idType = query.result.item.serviceIdType;
                                                    mediaItemQuery.impressionGuid = query.result.item.impressionGuid
                                                }
                                                break;
                                            case"Series":
                                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace)) {
                                                    mediaItemQuery = new MS.Entertainment.Data.Query.Video.EdsDetailTVSeries;
                                                    mediaItemQuery.id = query.result.item.serviceId;
                                                    mediaItemQuery.idType = query.result.item.serviceIdType;
                                                    mediaItemQuery.impressionGuid = query.result.item.impressionGuid;
                                                    mediaItemQuery.relevancyTrackingContent = query.result.item.relevancyTrackingContent
                                                }
                                                break;
                                            case"Season":
                                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace)) {
                                                    mediaItemQuery = new MS.Entertainment.Data.Query.Video.EdsDetailTVSeason;
                                                    mediaItemQuery.id = query.result.item.serviceId;
                                                    mediaItemQuery.idType = query.result.item.serviceIdType;
                                                    mediaItemQuery.impressionGuid = query.result.item.impressionGuid
                                                }
                                                break;
                                            default:
                                                break
                                        }
                                    if (mediaItemQuery)
                                        mediaItemQuery.execute().then(function mediaItemQuerySuccess(query) {
                                            c(query.result.item)
                                        }, function mediaItemQueryError(error) {
                                            e(error.errorCode)
                                        });
                                    else
                                        e()
                                }, function contentTypeQueryError(error) {
                                    e(error.errorCode)
                                })
                            }
                            else
                                e()
                        })
                }, isMovie: function isMovie(mediaItem) {
                    var isType = false;
                    if (mediaItem)
                        isType = (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video && mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.movie);
                    return isType
                }, isTVEpisode: function isTVEpisode(mediaItem) {
                    var isType = false;
                    if (mediaItem)
                        isType = (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video && mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode);
                    return isType
                }, isTVSeason: function isTVSeason(mediaItem) {
                    var isType = false;
                    if (mediaItem)
                        isType = Microsoft.Entertainment.Queries.ObjectType.tvSeason === mediaItem.mediaType || (MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem === mediaItem.serviceType && MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Season === mediaItem.type);
                    return isType
                }, isTVSeries: function isTVSeries(mediaItem) {
                    var isType = false;
                    if (mediaItem)
                        isType = (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeries);
                    return isType
                }, isAnyTV: function isAnyTV(mediaItem) {
                    if (mediaItem)
                        return this.isTVEpisode(mediaItem) || this.isTVSeason(mediaItem) || this.isTVSeries(mediaItem)
                }, isVideo: function isVideo(mediaItem) {
                    var isType = false;
                    if (mediaItem)
                        isType = (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video && mediaItem.videoType !== Microsoft.Entertainment.Queries.VideoType.musicVideo);
                    return isType
                }, isBundle: function isBundle(mediaItem) {
                    var isType = false;
                    if (mediaItem)
                        isType = mediaItem.isBundle && (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video && mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.movie);
                    return isType
                }, raisePanelReadyTest: function raisePanelReadyTest(element, failed, model) {
                    if (!element)
                        return;
                    var domEvent = document.createEvent("Event");
                    domEvent.initEvent("PanelReadyTest", true, true);
                    domEvent.failed = failed;
                    domEvent.model = model;
                    element.dispatchEvent(domEvent)
                }, raisePanelReady: function raisePanelReady(element, failed, model) {
                    if (!element)
                        return;
                    var domEvent = document.createEvent("Event");
                    domEvent.initEvent("PanelReady", true, true);
                    domEvent.failed = failed;
                    domEvent.model = model;
                    element.dispatchEvent(domEvent)
                }, raiseDomEvent: function raiseDomEvent(element, eventName) {
                    if (!element || !eventName)
                        return;
                    var domEvent = document.createEvent("Event");
                    domEvent.initEvent(eventName, true, true);
                    element.dispatchEvent(domEvent)
                }, raisePanelReset: function raisePanelReset(element) {
                    var domEvent = document.createEvent("Event");
                    domEvent.initEvent("PanelReset", true, true);
                    element.dispatchEvent(domEvent)
                }, resetPerfTrackStartTime: function resetPerfTrackStartTime() {
                    window.PerfTrack = {LaunchInformation: {getStartTime: (function _perfTrackLaunchInformation_getStartTimeClosure() {
                                var startTime = new Date;
                                return function _perfTrackLaunchInformation_getStartTimeWorker() {
                                        return startTime
                                    }
                            })()}}
                }, cloneActivationArguments: function cloneActivationArguments(args) {
                    var copy = {};
                    for (var name in args)
                        switch (name) {
                            case"activatedOperation":
                            case"prelaunchActivated":
                            case"splashScreen":
                            case"detail":
                            case"linguisticDetails":
                                continue;
                            default:
                                copy[name] = args[name];
                                break
                        }
                    return copy
                }, getDirectionFromGlobalKeyInput: function getDirectionFromGlobalKeyInput(e) {
                    MS.Entertainment.Utilities.assert(e, "Need an event to decide which direction to go in");
                    if (!e)
                        return;
                    var direction;
                    switch (e.keyCode) {
                        case WinJS.Utilities.Key.rGlobal:
                            direction = MS.Entertainment.Utilities.GlobalKeyDirection.right;
                            break;
                        case WinJS.Utilities.Key.lGlobal:
                            direction = MS.Entertainment.Utilities.GlobalKeyDirection.left;
                            break;
                        case WinJS.Utilities.Key.pageUp:
                            if (e.altKey)
                                direction = MS.Entertainment.Utilities.GlobalKeyDirection.right;
                            break;
                        case WinJS.Utilities.Key.pageDown:
                            if (e.altKey)
                                direction = MS.Entertainment.Utilities.GlobalKeyDirection.left;
                            break
                    }
                    return direction
                }, GlobalKeyDirection: {
                    left: "left", right: "right"
                }, isInvocationEvent: function isInvocationEvent(eventArgs) {
                    var keyCode = eventArgs && eventArgs.keyCode;
                    if (!keyCode)
                        return true;
                    var isInvocationEvent = false;
                    switch (keyCode) {
                        case WinJS.Utilities.Key.enter:
                        case WinJS.Utilities.Key.space:
                        case WinJS.Utilities.Key.invokeButton:
                            isInvocationEvent = true;
                            break
                    }
                    return isInvocationEvent
                }, defaultClientTypeFromApp: {get: function defaultClientTypeFromApp() {
                        var tuner = MS.Entertainment.Data.Augmenter.Marketplace.Tuner.Windows;
                        if (MS.Entertainment.Utilities.isApp2 && !MS.Entertainment.isAppModeOverride)
                            tuner = MS.Entertainment.Data.Augmenter.Marketplace.Tuner.XboxOne;
                        return tuner
                    }}, _defaultEdsTargetDeviceTypeFromApp: null, defaultEdsTargetDeviceTypeFromApp: {get: function defaultEdsDeviceTypeFromApp() {
                        if (!MS.Entertainment.Utilities._defaultEdsTargetDeviceTypeFromApp) {
                            var configuration = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            MS.Entertainment.Utilities._defaultEdsTargetDeviceTypeFromApp = configuration.service.defaultTargetDeviceType
                        }
                        return MS.Entertainment.Utilities._defaultEdsTargetDeviceTypeFromApp
                    }}, _defaultEdsHeaderDeviceTypeFromApp: null, defaultEdsHeaderDeviceTypeFromApp: {get: function defaultEdsDeviceTypeFromApp() {
                        if (!MS.Entertainment.Utilities._defaultEdsHeaderDeviceTypeFromApp) {
                            var configuration = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            MS.Entertainment.Utilities._defaultEdsHeaderDeviceTypeFromApp = configuration.service.defaultHeaderDeviceType
                        }
                        return MS.Entertainment.Utilities._defaultEdsHeaderDeviceTypeFromApp
                    }}, rightSupportsTuner: function rightSupportsTuner(right, tuner) {
                    var foundTuner = false;
                    if (right.clientTypes && right.clientTypes.length > 0)
                        for (var k = 0; k < right.clientTypes.length; k++)
                            if (tuner === right.clientTypes[k] || right.clientTypes[k] === MS.Entertainment.Data.Augmenter.Marketplace.Tuner.All) {
                                foundTuner = true;
                                break
                            }
                    return foundTuner
                }, optionsAppTypeTabIndexHelper: {get: function optionsAppTypeTabIndexHelper() {
                        return MS.Entertainment.Utilities.isApp2 ? 0 : -1
                    }}, bindingAppTypeTabIndexHelper: WinJS.Utilities.markSupportedForProcessing(function bindingAppTypeTabIndexHelper(source, sourceProperties, destination, destinationProperties) {
                    destination.tabIndex = MS.Entertainment.Utilities.optionsAppTypeTabIndexHelper
                }), toggleClass: function toggleClass(element, className, classEnabled) {
                    if (classEnabled)
                        WinJS.Utilities.addClass(element, className);
                    else
                        WinJS.Utilities.removeClass(element, className)
                }, SNAPPED_MODE_WIDTH: 480, STANDARD_RESOLUTION_VIDEO_ROWS: 2, HIGH_RESOLUTION_VIDEO_ROWS: {get: function() {
                        if (MS.Entertainment.Utilities.isApp2)
                            return 2;
                        else
                            return 3
                    }}, STANDARD_RESOLUTION_ROWS: 3, HIGH_RESOLUTION_ROWS: {get: function() {
                        if (MS.Entertainment.Utilities.isApp2)
                            return 3;
                        else
                            return 4
                    }}, VIEW1_VERTICAL_HEIGHT_LIMIT: 900, VIEW1_VIDEO_VERTICAL_HEIGHT_LIMIT: 1050, popOverDefaultSize: {get: function() {
                        if (MS.Entertainment.Utilities.isVideoApp && !MS.Entertainment.Utilities.getRetailExperienceState())
                            return {
                                    width: 470, height: 550
                                };
                        else
                            return {
                                    width: 730, height: 530
                                }
                    }}, cardItemSizeWithMargin: {get: function() {
                        if (MS.Entertainment.Utilities.isApp2)
                            return {
                                    width: 476, height: 240
                                };
                        else
                            return {
                                    width: 300, height: 170
                                }
                    }}, tileImageSize: {get: function() {
                        return {
                                width: 316, height: 316
                            }
                    }}, immersiveBackgroundArtSize: {get: function() {
                        if (MS.Entertainment.Utilities.isApp2)
                            return {
                                    width: 1080, height: 1080
                                };
                        else
                            return {
                                    width: 1366, height: 768
                                }
                    }}, playlistPinImageSize: {get: function() {
                        return {
                                width: 240, height: 240
                            }
                    }}, VARIOUS_LANGUAGES_CODE: "zz-ZZ"
        })
    })();
    WinJS.Namespace.define("MS.Entertainment.Utilities", {FlipViewUnloadHelper: MS.Entertainment.UI.Framework.defineUserControl(null, function FlipViewUnloadHelper(element) {
            if (element && element.parentElement)
                element.parentElement.unloadTimeout = 3000
        })});
    WinJS.Namespace.define("MS.Entertainment.Utilities", {User: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function user_constructor(userXuidOrNativeUser, gamerTag) {
            if (isNaN(userXuidOrNativeUser))
                this.nativeUserModel = [userXuidOrNativeUser || null];
            else
                this.nativeUserModel = this._createNativeUserModel(userXuidOrNativeUser, gamerTag)
        }, {
            nativeUserModel: null, getIsValid: function getIsValid() {
                    return Array.isArray(this.nativeUserModel) && this.nativeUserModel[0]
                }, _createNativeUserModel: function _createNativeUserModel(userXuid, gamerTag) {
                    return [MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.xboxLive).createUser(userXuid, gamerTag)]
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Utilities.BindingAgnostic", {
        setProperty: function setProperty(target, property, value) {
            if (!(property in target) && target._backingData)
                target.addProperty(property, value);
            else
                target[property] = value
        }, setProperties: function setProperties(target, source) {
                var key;
                if (source)
                    for (key in source)
                        if (key.indexOf("_") !== 0 && key !== "instance" && key !== "constructor")
                            MS.Entertainment.Utilities.BindingAgnostic.setProperty(target, key, source[key])
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        showElementNoAnimation: WinJS.Utilities.markSupportedForProcessing(function showElementNoAnimation(element) {
            WinJS.Utilities.removeClass(element, "hideFromDisplay")
        }), hideElementNoAnimation: WinJS.Utilities.markSupportedForProcessing(function hideElementNoAnimation(element) {
                WinJS.Utilities.addClass(element, "hideFromDisplay")
            }), showElement: function showElement(element, timeoutMS, overrideOldSelector, overrideNewSelector) {
                if (!element)
                    return WinJS.Promise.as();
                var result;
                element.hideFromDisplay = false;
                WinJS.Utilities.removeClass(element, "hideFromDisplay");
                result = MS.Entertainment.UI.Framework.beginShowAnimations(element, overrideOldSelector, overrideNewSelector);
                return WinJS.Promise.as(result)
            }, hideElement: function hideElement(element, timeoutMS, overrideOldSelector, overrideNewSelector) {
                var hidePromise = null;
                var timeoutPromise = null;
                if (!element)
                    return WinJS.Promise.wrap();
                element.hideFromDisplay = true;
                if (timeoutMS)
                    timeoutPromise = WinJS.Promise.timeout(timeoutMS).then(function cancelHide() {
                        if (hidePromise) {
                            hidePromise.cancel();
                            hidePromise = null
                        }
                        if (element.hideFromDisplay)
                            WinJS.Utilities.addClass(element, "hideFromDisplay")
                    });
                hidePromise = MS.Entertainment.UI.Framework.beginHideAnimations(element, overrideOldSelector, overrideNewSelector).then(function hideAnimationsComplete() {
                    if (timeoutPromise) {
                        timeoutPromise.cancel();
                        timeoutPromise = null
                    }
                    if (element.hideFromDisplay)
                        WinJS.Utilities.addClass(element, "hideFromDisplay")
                });
                return hidePromise
            }, displayElement: function displayElement(element, timeoutMS, overrideOldSelector, overrideNewSelector) {
                if (!element)
                    return WinJS.Promise.as();
                element.removeFromDisplay = false;
                WinJS.Utilities.removeClass(element, "removeFromDisplay");
                return MS.Entertainment.UI.Framework.beginShowAnimations(element, overrideOldSelector, overrideNewSelector)
            }, collapseElement: function collapseElement(element, timeoutMS, overrideOldSelector, overrideNewSelector) {
                var removePromise = null;
                var timeoutPromise = null;
                if (!element)
                    return WinJS.Promise.wrap();
                element.removeFromDisplay = true;
                if (timeoutMS)
                    timeoutPromise = WinJS.Promise.timeout(timeoutMS).then(function cancelHide() {
                        if (removePromise) {
                            removePromise.cancel();
                            removePromise = null
                        }
                    });
                removePromise = MS.Entertainment.UI.Framework.beginHideAnimations(element, overrideOldSelector, overrideNewSelector).then(function hideAnimationsComplete() {
                    if (timeoutPromise) {
                        timeoutPromise.cancel();
                        timeoutPromise = null
                    }
                    if (element.removeFromDisplay)
                        WinJS.Utilities.addClass(element, "removeFromDisplay")
                });
                return removePromise
            }, toggleDisplayCollapseElement: function toggleDisplayCollapseElement(element, makeVisible) {
                var timeout = 500;
                var domElement = element;
                if (element && element.domElement)
                    domElement = element.domElement;
                if (!domElement)
                    return WinJS.Promise.as();
                if (makeVisible)
                    return MS.Entertainment.Utilities.displayElement(domElement);
                else
                    return MS.Entertainment.Utilities.collapseElement(domElement, timeout).then(null, function onTimeout() {
                            WinJS.Utilities.addClass(domElement, "removeFromDisplay")
                        })
            }, enterElement: function enterElement(element) {
                if (!element)
                    return WinJS.Promise.as();
                var result;
                element.hideFromDisplay = false;
                WinJS.Utilities.removeClass(element, "hideFromDisplay");
                result = MS.Entertainment.UI.Framework.beginEnterAnimations(element);
                return WinJS.Promise.as(result)
            }, exitElement: function exitElement(element) {
                if (!element)
                    return WinJS.Promise.as();
                element.hideFromDisplay = true;
                return MS.Entertainment.UI.Framework.beginExitAnimations(element).then(function hideAnimationsComplete() {
                        if (element.hideFromDisplay)
                            WinJS.Utilities.addClass(element, "hideFromDisplay")
                    })
            }, appendChild: function appendChild(parent, child, hidden) {
                parent.appendChild(child);
                if (!hidden)
                    return MS.Entertainment.Utilities.showElement(child);
                else {
                    WinJS.Utilities.addClass(child, "hideFromDisplay");
                    return WinJS.Promise.wrap()
                }
            }, insertBefore: function insertBefore(parent, newChild, refChild, hidden) {
                parent.insertBefore(newChild, refChild);
                if (!hidden)
                    return MS.Entertainment.Utilities.showElement(newChild);
                else {
                    WinJS.Utilities.addClass(newChild, "hideFromDisplay");
                    return WinJS.Promise.wrap()
                }
            }, removeChild: function removeChild(parent, child, skipHideElement) {
                var remove = function remove() {
                        if (child.parentElement) {
                            MS.Entertainment.UI.Framework.assert(child.parentElement === parent, "Supplied parent was not childs direct parent");
                            child.parentElement.removeChild(child)
                        }
                    };
                if (skipHideElement) {
                    remove();
                    return WinJS.Promise.wrap()
                }
                else
                    return MS.Entertainment.Utilities.hideElement(child).then(function hideElementCompletes() {
                            remove()
                        })
            }, replaceChild: function replaceChild(parent, newChild, oldChild, hidden) {
                return MS.Entertainment.UI.Framework.beginHideAnimations(oldChild).then(function beginHideAnimationsCompletes() {
                        parent.replaceChild(newChild, oldChild);
                        if (!hidden)
                            MS.Entertainment.Utilities.showElement(newChild);
                        else {
                            WinJS.Utilities.addClass(newChild, "hideFromDisplay");
                            return WinJS.Promise.wrap()
                        }
                    })
            }, isElementVisible: function isElementVisible(element) {
                var style = window.getComputedStyle(element);
                return !(style.display === "none" || style.visibility === "hidden" || style.opacity === 0.0)
            }, safeAddClass: function safeAddClass(element, className) {
                if (element)
                    WinJS.Utilities.addClass(element, className)
            }, safeRemoveClass: function safeRemoveClass(element, className) {
                if (element)
                    WinJS.Utilities.removeClass(element, className)
            }, addEvents: function addEvents(element, events, capture) {
                element = (element && element.domElement) ? element.domElement : element;
                return MS.Entertainment.Utilities.addEventHandlers(element, events, capture)
            }, waitForStartedTransitionsToComplete: MS.Entertainment.UI.Framework.waitForStartedTransitionsToComplete, redirectPromise: function redirectPromise(promise, value) {
                return WinJS.Promise.as(promise).then(function redirectPromise() {
                        return value
                    })
            }, _schedulePromise: function _schedulePromise(promiseFunction, promiseValue, jobName) {
                var result;
                if (WinJS.Utilities.Scheduler)
                    result = WinJS.Utilities.Scheduler[promiseFunction](promiseValue, jobName);
                else {
                    jobName = jobName || String.empty;
                    msWriteProfilerMark("ent:_schedulePromise:" + promiseFunction + ":" + jobName + ",StartTM");
                    result = WinJS.Promise.timeout(1).then(function() {
                        msWriteProfilerMark("ent:_schedulePromise:" + promiseFunction + ":" + jobName + ",StopTM");
                        return promiseValue
                    })
                }
                return result
            }, schedulePromiseHigh: function schedulePromiseHigh(promiseValue, jobName) {
                return MS.Entertainment.Utilities._schedulePromise("schedulePromiseHigh", promiseValue, jobName)
            }, schedulePromiseAboveNormal: function schedulePromiseAboveNormal(promiseValue, jobName) {
                return MS.Entertainment.Utilities._schedulePromise("schedulePromiseAboveNormal", promiseValue, jobName)
            }, schedulePromiseNormal: function schedulePromiseNormal(promiseValue, jobName) {
                return MS.Entertainment.Utilities._schedulePromise("schedulePromiseNormal", promiseValue, jobName)
            }, schedulePromiseBelowNormal: function schedulePromiseNormal(promiseValue, jobName) {
                return MS.Entertainment.Utilities._schedulePromise("schedulePromiseBelowNormal", promiseValue, jobName)
            }, schedulePromiseIdle: function schedulePromiseIdle(promiseValue, jobName) {
                return MS.Entertainment.Utilities._schedulePromise("schedulePromiseIdle", promiseValue, jobName)
            }, setAccessibilityTextFromStringId: function setAccessibilityTextFromStringId(element, stringId) {
                MS.Entertainment.Utilities.setAccessibilityText(element, String.load(stringId))
            }, setAccessibilityText: function setAccessibilityText(element, text) {
                element = (element && element.domElement) ? element.domElement : element;
                if (element)
                    if (text)
                        element.setAttribute("aria-label", text);
                    else
                        element.removeAttribute("aria-label")
            }, setAccessibilityTextFromElement: function setAccessibilityTextFromElement(destinationElement, sourceElement) {
                destinationElement = (destinationElement && destinationElement.domElement) ? destinationElement.domElement : destinationElement;
                sourceElement = (sourceElement && sourceElement.domElement) ? sourceElement.domElement : sourceElement;
                if (destinationElement) {
                    MS.Entertainment.Utilities.assert(!sourceElement || sourceElement.id, "A source element was provided, but the element did not have an id. For aria-labelledby to work an id is required.");
                    if (sourceElement && sourceElement.id)
                        destinationElement.setAttribute("aria-labelledby", sourceElement.id);
                    else
                        destinationElement.removeAttribute("aria-labelledby")
                }
            }, copyAugmentedProperties: function copyAugmentedProperties(from, to) {
                var originalFrom = from;
                var property;
                var propertyDescriptor;
                function copyAugmentedPropertiesEx(from, to) {
                    if (from && to) {
                        from = MS.Entertainment.Data.augmentationShape(WinJS.Binding.unwrap(from));
                        Object.getOwnPropertyNames(from).forEach(function(property) {
                            if (property.indexOf("_") !== 0 && property !== "instance")
                                MS.Entertainment.Utilities.BindingAgnostic.setProperty(to, property, originalFrom[property])
                        });
                        to.hydrated = originalFrom.hydrated
                    }
                }
                copyAugmentedPropertiesEx(from, to)
            }, uniteObjects: function uniteObjects(lessSignificant, moreSignificant) {
                if (lessSignificant && moreSignificant) {
                    var combinedItem = {};
                    for (var property in lessSignificant)
                        combinedItem[property] = lessSignificant[property];
                    for (property in moreSignificant)
                        combinedItem[property] = moreSignificant[property];
                    return combinedItem
                }
                else if (lessSignificant)
                    return lessSignificant;
                else if (moreSignificant)
                    return moreSignificant;
                else
                    return {}
            }, clone: function clone(object) {
                var result = null;
                if (!object)
                    result = object;
                else if (object.clone)
                    result = object.clone();
                else if (object instanceof Array) {
                    result = [];
                    object.forEach(function(item) {
                        result.push(MS.Entertainment.Utilities.clone(item))
                    })
                }
                else if (object instanceof Object) {
                    result = {};
                    for (var key in object)
                        result[key] = object[key]
                }
                return result
            }, doNothing: WinJS.Utilities.markSupportedForProcessing(function doNothing(){}), getAccountLocale: function getAccountLocale() {
                var locale;
                var signedInUser = null;
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signedInUser))
                    signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                if (signedInUser && signedInUser.locale)
                    locale = signedInUser.locale;
                else {
                    var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (config.service.lastSignedInUserAccountLocale)
                        locale = config.service.lastSignedInUserAccountLocale;
                    else
                        locale = MS.Entertainment.Utilities.getResourceLanguage()
                }
                return locale
            }, appRegionMatchesMachineRegion: function doesAccountRegionMatchMachineRegion() {
                var appRegion = (new Microsoft.Entertainment.Util.GlobalizationManager).getRegion();
                var machineRegion = (new Windows.Globalization.GeographicRegion).codeTwoLetter;
                return (appRegion === machineRegion)
            }, getResourceLanguage: function getResourceLanguage() {
                var resourceLanguage;
                try {
                    var resourceContext = new Windows.ApplicationModel.Resources.Core.ResourceContext;
                    resourceLanguage = resourceContext.languages[0]
                }
                catch(e) {
                    Trace.fail("Unexpected error retrieving resource locale")
                }
                if (!resourceLanguage)
                    resourceLanguage = "en-US";
                return resourceLanguage
            }, getDisplayLanguageFromLanguageCode: function getDisplayLanguageFromLanguageCode(languageCode) {
                if (!languageCode)
                    return String.empty;
                var index = languageCode.lastIndexOf("-");
                var language = (index > 0) ? languageCode.substr(0, index) : languageCode;
                var languageObject = new Windows.Globalization.Language(language);
                return languageObject.displayName ? languageObject.displayName : String.empty
            }, getValueFromCsvList: function getValueFromCsvList(nameValuePairList, name) {
                var value;
                var regularExpression = "(^|,)\\s*" + name + "\\s*=\\s*([^=,\\s]+)";
                var result = new RegExp(regularExpression).exec(nameValuePairList);
                if (result)
                    value = result[2];
                return value
            }, getRegionCodeFromLocale: function getRegionCodeFromLocale(localeName) {
                var regionCode = String.empty;
                var lastDashIndex = localeName.lastIndexOf("-");
                if (lastDashIndex >= 0)
                    regionCode = localeName.slice(lastDashIndex + 1);
                return regionCode.toUpperCase()
            }, getLanguageCodeFromLocale: function getLanguageCodeFromLocale(localeName) {
                var languageCode;
                var lastDashIndex = localeName.lastIndexOf("-");
                if (lastDashIndex >= 0)
                    languageCode = localeName.slice(0, lastDashIndex);
                else
                    languageCode = localeName;
                return languageCode
            }, instantiateControl: function instantiateControl(control, options, host) {
                options = options || {};
                var UserControlConstructor = control;
                var controlAttribute;
                if (typeof UserControlConstructor === "string") {
                    UserControlConstructor = WinJS.Utilities.getMember(control);
                    controlAttribute = control
                }
                else
                    controlAttribute = "MS.Entertainment.UI.Framework.UserControl";
                if (!options.hasOwnProperty("_skipDefer"))
                    options._skipDefer = true;
                MS.Entertainment.UI.Controls.assert(typeof UserControlConstructor === "function", "Overlay: " + control + " is not a function");
                host.setAttribute("data-win-control", controlAttribute);
                return new UserControlConstructor(host, options)
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities.DateFormatters", {
        formatDay: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatDay(sourceValue) {
            if (sourceValue)
                return sourceValue.getDate();
            else
                return String.empty
        })), formatMonthAbbreviation: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatMonthAbbreviation(sourceValue) {
                if (sourceValue) {
                    var superShortMonthPattern = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).abbreviatedMonth;
                    return superShortMonthPattern.format(sourceValue)
                }
                else
                    return String.empty
            })), formatMonthAbbreviationYear: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatMonthAbbreviationYear(sourceValue) {
                if (sourceValue) {
                    var superShortMonthPattern = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).abbreviatedMonthYear;
                    return superShortMonthPattern.format(sourceValue)
                }
                else
                    return String.empty
            })), formatYearMonthDayLong: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatYearMonthDayLong(sourceValue) {
                if (sourceValue) {
                    var longdate = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).dayMonthYear;
                    return longdate.format(sourceValue)
                }
                else
                    return String.empty
            }))
    });
    WinJS.Namespace.define("MS.Entertainment.globalControls", {
        GlobalControl: {
            appBar: "BottomAppBar", appInfoNotification: "AppInfoNotification", appCriticalNotification: "AppCriticalNotification", bottomProgressBar: "BottomProgressBar", backButton: "BackButton", backButtonBling: "BackButtonBling", immersiveDetails: "ImmersiveDetails", mainHeader: "MainHeader", navigationWrapper: "NavigationWrapper", xboxControls: "xboxControls", musicTransportControls: "MusicTransportControls", profilePicker: "ProfilePicker", profilePickerContainer: "ProfilePickerContainer"
        }, getControl: function getControl(identifier) {
                return MS.Entertainment.Utilities.getChildControl(document.body, identifier)
            }
    });
    (function() {
        var currentOverlayContainers = [];
        function sortOnTabIndex(a, b) {
            if (a.tabIndex < b.tabIndex) {
                if (a.tabIndex === -1)
                    return 1;
                return -1
            }
            else if (a.tabIndex > b.tabIndex)
                return 1;
            else
                return 0
        }
        function excludeNonFocusableElements(element) {
            if (!element.getAttribute)
                return false;
            var disabledAttribute = element.getAttribute("disabled");
            var currentStyle = element.currentStyle;
            var isVisible = currentStyle && currentStyle.visibility !== "hidden" && currentStyle.display !== "none" && disabledAttribute !== "disabled" && disabledAttribute !== "";
            if (!isVisible)
                return false;
            var tagName = element.tagName;
            var isFocusableElementType = /INPUT|SELECT|TEXTAREA|BUTTON|IFRAME/.test(tagName);
            var isFocusableLink = (tagName === "A" && element.href);
            var actuallyHasTabStop = false;
            var tabIndexAttribute = element.getAttribute("tabindex");
            if (tabIndexAttribute && !isNaN(tabIndexAttribute))
                actuallyHasTabStop = (tabIndexAttribute !== "-1");
            else if ((isFocusableElementType || isFocusableLink) && element.tabIndex > -1)
                actuallyHasTabStop = true;
            var isKeyboardNavigationManagerFocusable = WinJS.Utilities.hasClass(element, "win-focusable");
            return (isFocusableElementType && actuallyHasTabStop) || (isFocusableLink && actuallyHasTabStop) || actuallyHasTabStop || isKeyboardNavigationManagerFocusable
        }
        WinJS.Namespace.define("MS.Entertainment.UI.Framework", {
            TabConstrainer: MS.Entertainment.UI.Framework.define(function(element, options) {
                this.domElement = element;
                if (options)
                    WinJS.UI.setOptions(this, options);
                var firstDiv = document.createElement("div");
                firstDiv.className = MS.Entertainment.UI.Framework.TabConstrainer.firstDivClass;
                firstDiv.setAttribute("role", "menuitem");
                firstDiv.setAttribute("aria-hidden", "true");
                if (this.enabled)
                    firstDiv.setAttribute("tabindex", 0);
                firstDiv.addEventListener("focus", this._focusLandsOnFirstElement.bind(this), false);
                element.insertAdjacentElement("AfterBegin", firstDiv);
                var lastDiv = document.createElement("div");
                lastDiv.className = MS.Entertainment.UI.Framework.TabConstrainer.lastDivClass;
                lastDiv.setAttribute("role", "menuitem");
                lastDiv.setAttribute("aria-hidden", "true");
                if (this.enabled)
                    lastDiv.setAttribute("tabindex", this.assumeTabIndexIsZero ? 0 : 10000);
                lastDiv.addEventListener("focus", this._focusLandsOnLastElement.bind(this), false);
                element.appendChild(lastDiv);
                if (!this.assumeTabIndexIsZero)
                    this._fixUpLastDivTabIndexes()
            }, {
                assumeTabIndexIsZero: false, _enabled: true, enabled: {
                        get: function tabConstrainer_get() {
                            return this._enabled
                        }, set: function tabConstrainer_set(value) {
                                if (this._enabled === value)
                                    return;
                                this._enabled = value;
                                if (this.enabled) {
                                    this.domElement.firstElementChild.setAttribute("tabindex", 0);
                                    this.domElement.lastElementChild.setAttribute("tabindex", this.assumeTabIndexIsZero ? 0 : 10000);
                                    if (!this.assumeTabIndexIsZero)
                                        this._fixUpLastDivTabIndexes()
                                }
                                else {
                                    this.domElement.firstElementChild.removeAttribute("tabindex");
                                    this.domElement.lastElementChild.removeAttribute("tabindex")
                                }
                            }
                    }, _focusLandsOnLastElement: function _focusLandsOnLastElement() {
                        if (!this.enabled)
                            return;
                        if (!WinJS.Utilities.hasClass(document.activeElement, MS.Entertainment.UI.Framework.TabConstrainer.lastDivClass))
                            return;
                        var appBar = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                        if (appBar && this.includeAppBarOnLastTab && appBar.visible)
                            appBar.focusAppBar(this.domElement);
                        else
                            MS.Entertainment.UI.Framework.focusFirstInSubTree(this.domElement, this.excludeEndPointElements)
                    }, _focusLandsOnFirstElement: function _focusLandsOnFirstElement() {
                        if (!this.enabled)
                            return;
                        if (document.activeElement)
                            if (!WinJS.Utilities.hasClass(document.activeElement, MS.Entertainment.UI.Framework.TabConstrainer.firstDivClass))
                                return;
                        if (this.domElement)
                            MS.Entertainment.UI.Framework.focusLastInSubTree(this.domElement)
                    }, _fixUpLastDivTabIndexes: function _fixUpLastDivTabIndexes() {
                        var otherLastItems = document.querySelectorAll("." + MS.Entertainment.UI.Framework.TabConstrainer.lastDivClass);
                        var nextTabIndex = 10001;
                        if (otherLastItems && otherLastItems.length > 0)
                            Array.prototype.forEach.call(otherLastItems, function(item) {
                                if (this.domElement.lastElementChild === item) {
                                    item.tabIndex = 10000;
                                    return
                                }
                                if (item.parentElement && item.parentElement.winControl && item.parentElement.winControl.enabled) {
                                    item.tabIndex = nextTabIndex;
                                    nextTabIndex = item.tabIndex + 10000
                                }
                            }.bind(this))
                    }, excludeEndPointElements: true, includeAppBarOnLastTab: false
            }, {
                firstDivClass: "ent-firstdiv", lastDivClass: "ent-lastdiv"
            }), focusLastInSubTree: function focusLastInSubTree(element) {
                    if (MS.Entertainment.UI.Framework.focusedItemInContainer(element))
                        return;
                    var children = element.getElementsByTagName("*");
                    var sorted = Array.prototype.filter.call(children, excludeNonFocusableElements).sort(sortOnTabIndex);
                    for (var i = (sorted.length - 1); i > -1; i--) {
                        var elementToFocus = sorted[i];
                        if (WinJS.Utilities.hasClass(elementToFocus, MS.Entertainment.UI.Framework.TabConstrainer.firstDivClass) || WinJS.Utilities.hasClass(elementToFocus, MS.Entertainment.UI.Framework.TabConstrainer.lastDivClass))
                            continue;
                        elementToFocus.focus();
                        if (elementToFocus === document.activeElement || MS.Entertainment.UI.Framework.focusedItemInContainer(element))
                            break
                    }
                }, focusFirstInSubTree: function focusFirstInSubTree(element, excludeEndpointElements, force, skipScroll) {
                    if (!MS.Entertainment.UI.Framework.canMoveFocus(element))
                        return false;
                    if (!force && MS.Entertainment.UI.Framework.focusedItemInContainer(element))
                        return true;
                    var successfullyFocused = false;
                    var firstDiv = null;
                    var children = element.getElementsByTagName("*");
                    var sorted = Array.prototype.filter.call(children, excludeNonFocusableElements).sort(sortOnTabIndex);
                    for (var i = 0; i < sorted.length; i++) {
                        var elementToFocus = sorted[i];
                        if (excludeEndpointElements)
                            if (WinJS.Utilities.hasClass(elementToFocus, MS.Entertainment.UI.Framework.TabConstrainer.firstDivClass)) {
                                firstDiv = elementToFocus;
                                continue
                            }
                            else if (WinJS.Utilities.hasClass(elementToFocus, MS.Entertainment.UI.Framework.TabConstrainer.lastDivClass))
                                continue;
                        MS.Entertainment.UI.Framework.focusElement(elementToFocus, skipScroll, false, force);
                        if (elementToFocus === document.activeElement || MS.Entertainment.UI.Framework.focusedItemInContainer(element)) {
                            successfullyFocused = true;
                            break
                        }
                    }
                    if (!successfullyFocused)
                        if (firstDiv) {
                            MS.Entertainment.UI.Framework.focusElement(firstDiv, skipScroll, false, force);
                            successfullyFocused = (firstDiv === document.activeElement)
                        }
                    return successfullyFocused
                }, tryAndFocusElementInSubTreeWithTimer: function tryAndFocusElementInSubTreeWithTimer(tree, timeout) {
                    MS.Entertainment.UI.Framework.assert(timeout > -1, "Invalid timeout provided to try and set focus");
                    MS.Entertainment.UI.Framework.assert(tree, "Need a valid tree to try and set focus");
                    if (timeout < 0)
                        return WinJS.Promise.as();
                    if (!tree)
                        return WinJS.Promise.as();
                    return WinJS.Promise.timeout(timeout).then(function trySetFocusOnTimeoutComplete() {
                            if (MS.Entertainment.UI.Framework.focusedItemInContainer(tree))
                                return;
                            MS.Entertainment.UI.Framework.focusFirstInSubTree(tree)
                        })
                }, tryAndFocusElementInSubTreeWithRetry: function tryAndFocusElementInSubTreeWithRetry(tree, retryDelay, numberOfRetries) {
                    Trace.assert(typeof numberOfRetries === "number", "tryAndFocusElementInSubTreeWithRetry: numberOfRetries expected to be a number");
                    Trace.assert(typeof retryDelay === "number", "tryAndFocusElementInSubTreeWithRetry: retryDelay expected to be a number");
                    Trace.assert(retryDelay > -1, "tryAndFocusElementInSubTreeWithRetry: Invalid timeout delay");
                    Trace.assert(tree, "tryAndFocusElementInSubTreeWithRetry: Need a valid tree to try and set focus");
                    var isElementFocused = MS.Entertainment.UI.Framework.focusFirstInSubTree(tree);
                    if (isElementFocused || numberOfRetries <= 0)
                        return WinJS.Promise.as(isElementFocused);
                    else
                        return WinJS.Promise.timeout(retryDelay).then(function delayComplete() {
                                return MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithRetry(tree, retryDelay, numberOfRetries - 1)
                            })
                }, tryAndFocusElementWithRetry: function tryAndFocusElementWithRetry(element, retryDelay, numberOfRetries) {
                    Trace.assert(typeof numberOfRetries === "number", "tryAndFocusElementWithRetry: numberOfRetries expected to be a number");
                    Trace.assert(typeof retryDelay === "number", "tryAndFocusElementWithRetry: retryDelay expected to be a number");
                    Trace.assert(retryDelay > -1, "tryAndFocusElementWithRetry: Invalid timeout delay");
                    Trace.assert(element, "tryAndFocusElementWithRetry: Need a valid element to try and set focus");
                    MS.Entertainment.UI.Framework.focusElement(element);
                    var isElementFocused = document.activeElement === element;
                    if (isElementFocused || numberOfRetries <= 0)
                        return WinJS.Promise.as(isElementFocused);
                    else
                        return WinJS.Promise.timeout(retryDelay).then(function delayComplete() {
                                return MS.Entertainment.UI.Framework.tryAndFocusElementWithRetry(element, retryDelay, numberOfRetries - 1)
                            })
                }, focusedItemInContainer: function focusedItemInContainer(container) {
                    if (document.activeElement)
                        if (container.contains(document.activeElement) && !(WinJS.Utilities.hasClass(document.activeElement, MS.Entertainment.UI.Framework.TabConstrainer.firstDivClass) || WinJS.Utilities.hasClass(document.activeElement, MS.Entertainment.UI.Framework.TabConstrainer.lastDivClass)))
                            return true;
                    return false
                }, focusFirstFocusableAncestor: function focusFirstFocusableAncestor(element, skipScroll) {
                    var ancestor = element;
                    do {
                        if (ancestor.domElement)
                            ancestor = ancestor.domElement;
                        if (excludeNonFocusableElements(ancestor)) {
                            MS.Entertainment.UI.Framework.focusElement(ancestor, skipScroll);
                            break
                        }
                        ancestor = ancestor.parentNode
                    } while (ancestor)
                }, focusElement: function focusElement(elementToFocus, skipScroll, skipInputElementCheck, force) {
                    if (!force && !MS.Entertainment.UI.Framework.canMoveFocus(elementToFocus, skipInputElementCheck))
                        return;
                    if (skipScroll)
                        try {
                            elementToFocus.setActive()
                        }
                        catch(error) {
                            MS.Entertainment.Utilities.fail("Failed to set active element. Classes: " + elementToFocus.className + ", Error: " + (error && error.message), MS.Entertainment.UI.Debug.errorLevel.low)
                        }
                    else
                        elementToFocus.focus()
                }, focusedElementHasClass: function focusedElementHasClass(classList) {
                    var hasClass = false;
                    if (document.activeElement && classList) {
                        if (!Array.isArray(classList))
                            classList = [classList];
                        for (var i = 0, l = classList.length; i < l; i++)
                            if (WinJS.Utilities.hasClass(document.activeElement, classList[i])) {
                                hasClass = true;
                                break
                            }
                    }
                    return hasClass
                }, currentContentContainer: null, currentOverlayContainer: {get: function currentOverlayContainer_get() {
                        var currentIndex = currentOverlayContainers.length - 1;
                        return currentOverlayContainers[currentIndex]
                    }}, currentFocusContainer: {get: function currentFocusContainer_get() {
                        var focusableOverlay = MS.Entertainment.UI.Framework.currentOverlayContainer;
                        if (focusableOverlay && focusableOverlay.currentStyle && focusableOverlay.currentStyle.display === "none")
                            focusableOverlay = null;
                        return focusableOverlay || MS.Entertainment.UI.Framework.currentContentContainer
                    }}, addOverlayContainer: function addOverlayContainer(container) {
                    if (MS.Entertainment.UI.Framework.currentOverlayContainer && MS.Entertainment.UI.Framework.currentOverlayContainer.setAttribute)
                        MS.Entertainment.UI.Framework.currentOverlayContainer.setAttribute("aria-hidden", "true");
                    currentOverlayContainers.push(container)
                }, removeOverlayContainer: function removeOverlayContainer(container) {
                    var indexOfItemToRemove = currentOverlayContainers.indexOf(container);
                    if (indexOfItemToRemove < 0)
                        return;
                    currentOverlayContainers.splice(indexOfItemToRemove, 1);
                    if (MS.Entertainment.UI.Framework.currentOverlayContainer && MS.Entertainment.UI.Framework.currentOverlayContainer.setAttribute)
                        MS.Entertainment.UI.Framework.currentOverlayContainer.setAttribute("aria-hidden", "false")
                }, getVisibleFlyoutElement: function isFlyoutVisible() {
                    var flyouts = document.querySelectorAll(".win-flyout");
                    for (var i = 0; i < flyouts.length; i++) {
                        var flyout = flyouts[i];
                        if (flyout && flyout.winControl && !flyout.winControl.hidden)
                            return flyout
                    }
                }, isFlyoutVisible: function isFlyoutVisible() {
                    return !!MS.Entertainment.UI.Framework.getVisibleFlyoutElement()
                }, canMoveFocus: function canMoveFocus(targetContainer, skipInputElementCheck) {
                    if (!targetContainer)
                        return false;
                    var focusContainer = MS.Entertainment.UI.Framework.currentFocusContainer;
                    var bottomAppBar = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                    var targetingAppBar = false;
                    if (bottomAppBar && bottomAppBar.domElement)
                        targetingAppBar = bottomAppBar.domElement.contains(targetContainer);
                    if (focusContainer && !focusContainer.contains(targetContainer) && !targetingAppBar)
                        return false;
                    var flyout = MS.Entertainment.UI.Framework.getVisibleFlyoutElement();
                    if (flyout && !flyout.contains(targetContainer))
                        return false;
                    if (!skipInputElementCheck && MS.Entertainment.Utilities.isApp1 && document.activeElement && MS.Entertainment.Utilities.doesElementSupportKeyboardInput(document.activeElement))
                        return false;
                    return true
                }, setFocusRoot: function setFocusRoot(prospectiveFocusRoot) {
                    var currentContentContainer = MS.Entertainment.UI.Framework.currentContentContainer || document.querySelector(".pageContainer.currentPage");
                    if (!prospectiveFocusRoot || !MS.Entertainment.UI.Framework.checkIfInDom(prospectiveFocusRoot) || (currentContentContainer !== prospectiveFocusRoot) || !currentContentContainer.contains(prospectiveFocusRoot))
                        prospectiveFocusRoot = currentContentContainer;
                    var overlay = MS.Entertainment.UI.Framework.currentOverlayContainer;
                    if (overlay && !overlay.contains(prospectiveFocusRoot))
                        prospectiveFocusRoot = overlay;
                    MS.Entertainment.UI.Framework.assert(prospectiveFocusRoot, "Somehow, we ended up without a focus root to set when we expected one");
                    if (WinJS.UI.AutomaticFocus && prospectiveFocusRoot)
                        WinJS.UI.AutomaticFocus.focusRoot = prospectiveFocusRoot
                }, resetFocusToTopMostContent: function resetFocusToTopMostContent() {
                    var focusTarget = MS.Entertainment.UI.Framework.currentContentContainer;
                    if (MS.Entertainment.UI.Framework.currentOverlayContainer)
                        focusTarget = MS.Entertainment.UI.Framework.currentOverlayContainer;
                    var currentFocusedElementDetails = "No Focused element";
                    if (document.activeElement)
                        currentFocusedElementDetails = "ClassName: " + document.activeElement.className + ", " + "ID: " + document.activeElement.id;
                    MS.Entertainment.UI.Framework.fail("User manually reset focus. Focus was in this location: " + currentFocusedElementDetails);
                    MS.Entertainment.UI.Framework.focusFirstInSubTree(focusTarget)
                }, scrollViewerFocusHelper: function scrollViewerFocusHelper(scrollViewer) {
                    if (!scrollViewer)
                        return;
                    if (!WinJS.Utilities.hasClass(scrollViewer, "win-scrollviewer-scrollmode-list"))
                        return;
                    var scrollContainer = scrollViewer.querySelector(".win-scrollviewer-contentelement");
                    if (!scrollContainer)
                        return;
                    scrollContainer.addEventListener("focus", function(evt) {
                        if (evt.target)
                            MS.Entertainment.UI.Framework.focusFirstInSubTree(evt.target, true, true)
                    })
                }, setButtonListFocusOverrides: function setButtonListFocusOverrides(domElement, queryString) {
                    if (!domElement || !queryString)
                        return;
                    var noOp = ".currentPage :focus";
                    var actionButtons = domElement.querySelectorAll(queryString);
                    for (var i = 0; i < actionButtons.length; i++)
                        actionButtons[i].removeAttribute("data-win-focus");
                    if (actionButtons.length === 1)
                        actionButtons[0].setAttribute("data-win-focus", JSON.stringify({
                            up: noOp, down: noOp
                        }));
                    else if (actionButtons.length > 1) {
                        actionButtons[0].setAttribute("data-win-focus", JSON.stringify({up: noOp}));
                        actionButtons[actionButtons.length - 1].setAttribute("data-win-focus", JSON.stringify({down: noOp}))
                    }
                }
        })
    })();
    WinJS.Namespace.define("MS.Entertainment.Utilities", {VirtualizedDataSource: MS.Entertainment.UI.Framework.derive(WinJS.UI.VirtualizedDataSource, function(listDataAdapter, options) {
            if (listDataAdapter && listDataAdapter.createListAdaptor)
                listDataAdapter = listDataAdapter.createListAdaptor();
            this._baseDataSourceConstructor(listDataAdapter, options)
        })});
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        getRetailExperienceState: function getRetailExperienceState() {
            return (new Microsoft.Entertainment.Configuration.ConfigurationManager).shell.retailExperience
        }, setRetailExperienceState: function setRetailExperienceState(isEnabled) {
                var configuration = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                configuration.shell.retailExperience = isEnabled;
                configuration.fue.showLXFUE = !isEnabled;
                WinJS.Promise.timeout(10 * 1000).done(function retailExperienceInformCustomer() {
                    MSApp.terminateApp(new Error("Retail experience mode changed"))
                })
            }, resetAppStateForRetailExperienceIfNeeded: function resetAppStateForRetailExperienceIfNeeded() {
                if (!MS.Entertainment.Utilities.getRetailExperienceState())
                    return false;
                var previousExecutionDate = Windows.Storage.ApplicationData.current.localSettings[MS.Entertainment.Utilities.lastRunDemoModeDateKey];
                var currentExecutionDate = (new Date).toLocaleDateString();
                var wasReset = false;
                if (previousExecutionDate && (previousExecutionDate !== currentExecutionDate)) {
                    var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    configManager.groveler.fullGrovelCompleted = false;
                    wasReset = true
                }
                Windows.Storage.ApplicationData.current.localSettings[MS.Entertainment.Utilities.lastRunDemoModeDateKey] = currentExecutionDate;
                return wasReset
            }, loadDemoScripts: function loadDemoScripts() {
                var loadPromise;
                if (MS.Entertainment.Utilities.isVideoApp1 && MS.Entertainment.Utilities.getRetailExperienceState())
                    loadPromise = MS.Entertainment.UI.Framework.loadScripts("/components/video/DemoDashboardViewModel.js", "/components/inlinedetails/VideoInlineDetailsDemo.js");
                return WinJS.Promise.as(loadPromise)
            }, removeAllPlaylistsIfDemoMode: function removeAllPlayListsIfDemoMode() {
                if (!MS.Entertainment.Utilities.getRetailExperienceState() || !MS.Entertainment.Utilities.isMusicApp)
                    return;
                var playlistsToDelete = [];
                var query = new MS.Entertainment.Data.Query.libraryPlaylists;
                query.sort = Microsoft.Entertainment.Queries.PlaylistsSortBy.dateEditedDescending;
                query.getItems().then(function demoModePlaylistQuery(playlists) {
                    return playlists.forEachAll(function demoModePlaylistForEach(playlist) {
                            var id = WinJS.Utilities.getMember("item.data.libraryId", playlist);
                            if (id < 1)
                                return;
                            playlistsToDelete.push(id)
                        })
                }).then(function demoModePlaylistDeletePlaylists() {
                    var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                    var playlistProvider = mediaStore.playlistProvider;
                    return playlistProvider.deletePlaylistAsync(playlistsToDelete, Microsoft.Entertainment.Platform.MediaAvailability.available)
                }).done(null, function demoModePlaylistFailure(e) {
                    MS.Entertainment.Utilities.fail("Failure deleting playlists in demo mode: " + (e && e.message))
                })
            }, retailExperienceArgument: "RetailExperience", lastRunDemoModeDateKey: "RetailDemoMode"
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities", {getCurrentUserLocation: function getCurrentUserLocation() {
            var classicNavServiceCurrentPage = String.empty;
            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                classicNavServiceCurrentPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).getUserLocation();
            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation) && (classicNavServiceCurrentPage.indexOf("homeHub") === 0 || !classicNavServiceCurrentPage)) {
                var navigationJournal = MS.Entertainment.UI.Framework.Navigation.getJournal();
                return navigationJournal ? navigationJournal.location : String.empty
            }
            else if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                return classicNavServiceCurrentPage;
            else
                return String.empty
        }});
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        wasNavigatedToDashboard: false, assertIfCalledBeforeCriticalWorkCompleted: function assertIfCalledBeforeCriticalWorkCompleted() {
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                var isFirstLocationLoaded = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation) && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation).isFirstLocationLoaded;
                var wasNavigatedToDashboard = !MS.Entertainment.Utilities.wasNavigatedToDashboard || uiStateService.isHubStripVisible;
                MS.Entertainment.UI.Framework.assert(isFirstLocationLoaded || wasNavigatedToDashboard, "Function was called before all start-up critical work has been completed")
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        updateHtmlDirectionAttribute: MS.Entertainment.UI.Framework.updateHtmlDirectionAttribute, getTextDirection: MS.Entertainment.UI.Framework.getTextDirection, TextDirections: MS.Entertainment.UI.Framework.TextDirections, TriggerSequence: function(keyArray, continuityTimeout, callback) {
                var state = 0;
                var lastTime = null;
                this.inSequence = function() {
                    return state > 0
                };
                this.keyIn = function(key) {
                    if (lastTime === null || ((new Date) - lastTime) > continuityTimeout)
                        state = 0;
                    lastTime = new Date;
                    if (keyArray[state] === key)
                        state++;
                    else
                        lastTime = null;
                    if (lastTime !== null && state === keyArray.length) {
                        callback();
                        lastTime = null;
                        return true
                    }
                    return false
                }
            }, trimCharacterDirection: function trimCharacterDirection(string) {
                if (string) {
                    var start = 0;
                    var end = string.length;
                    var firstChar = string.charCodeAt(0);
                    var lastChar = string.charCodeAt(end - 1);
                    if (firstChar === String.rtlmCode || firstChar === String.ltrmCode)
                        start++;
                    if (lastChar === String.rtlmCode || lastChar === String.ltrmCode)
                        end--;
                    if (start !== 0 || end !== string.length)
                        string = string.substr(start, end)
                }
                return string
            }, detectCharacterDirection: function detectCharacterDirection(ch) {
                if (ch < 0x249C) {
                    if (ch < 0x200E) {
                        if (ch >= 0x0041 && ch <= 0x005A || ch >= 0x0061 && ch <= 0x007A || ch >= 0x00C0 && ch <= 0x02B8 || ch >= 0x0370 && ch <= 0x0589 || ch >= 0x0900 && ch <= 0x1FFC)
                            return MS.Entertainment.Utilities.TextDirections.LeftToRight;
                        else if (ch >= 0x0591 && ch <= 0x085E)
                            return MS.Entertainment.Utilities.TextDirections.RightToLeft
                    }
                    else if (ch >= 0x2090 && ch <= 0x209C || ch >= 0x210A && ch <= 0x2188 || ch >= 0x2336 && ch <= 0x237A || ch === String.ltrmCode)
                        return MS.Entertainment.Utilities.TextDirections.LeftToRight;
                    else if (ch === String.rtlmCode)
                        return MS.Entertainment.Utilities.TextDirections.RightToLeft
                }
                else if (ch < 0xFD50) {
                    if (ch <= 0x24E9 || (ch >= 0x2800 && ch <= 0x28FF) || (ch >= 0x2C00 && ch <= 0x2DFF) || (ch >= 0x3021 && ch <= 0x4DB5) || (ch >= 0x4E00 && ch <= 0xFB17))
                        return MS.Entertainment.Utilities.TextDirections.LeftToRight;
                    else if (ch >= 0xFB1D && ch <= 0xFD3D)
                        return MS.Entertainment.Utilities.TextDirections.RightToLeft
                }
                else if (ch <= 0xFDFC || (ch >= 0xFE70 && ch <= 0xFEFC))
                    return MS.Entertainment.Utilities.TextDirections.RightToLeft;
                else if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A) || (ch >= 0xFF65 && ch <= 0xFFDC))
                    return MS.Entertainment.Utilities.TextDirections.LeftToRight;
                return null
            }, detectStringDirection: function detectStringDirection(value, min, max) {
                var char;
                var characterDirection;
                max = isNaN(max) ? value.length : max;
                for (var i = isNaN(min) ? 0 : min; i < max; i++) {
                    char = value.charCodeAt(i);
                    if (char !== 0x0020 && char !== 0x0009 && char !== 0x000A && char !== 0x000D) {
                        characterDirection = MS.Entertainment.Utilities.detectCharacterDirection(char);
                        if (characterDirection)
                            return characterDirection
                    }
                }
                return MS.Entertainment.Utilities.getTextDirection()
            }, needsNormalizedBaseline: function needsNormalizedBaseline(value, min, max) {
                var char;
                max = isNaN(max) ? value.length : max;
                min = isNaN(min) ? 0 : min;
                for (var i = min; i < max; i++) {
                    char = value.charCodeAt(i);
                    if ((char < 0xAC00 || char > 0xD7AF) && (char !== 0x0020))
                        return false
                }
                return (max - min) ? true : false
            }, verifyUrl: function verifyUrl(value, requireHttps) {
                var requiredHttpsExpression = /^https:\/\//i;
                var anyHttpExpression = /^http[s]?:\/\//i;
                if (requireHttps)
                    return requiredHttpsExpression.test(value);
                else
                    return anyHttpExpression.test(value)
            }, sanitizeString: function sanitizeString(dirtyString) {
                return dirtyString ? dirtyString.toLowerCase().replace(/[^\w\s]/g, String.empty) : String.empty
            }, isStreamingUrl: function(url) {
                return (url && url.match && url.match(/^zest:/i))
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        _cachedConfigurationXuid: null, _cachedConfigurationValues: null, _loadUserConfigurationValues: function _loadUserConfigurationValues(xuid) {
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                if (!xuid)
                    MS.Entertainment.fail("loadUserConfigurationValues: xuid not defined");
                try {
                    var setting = Windows.Storage.ApplicationData.current.localSettings.values[xuid];
                    var values = {};
                    if (setting)
                        try {
                            values = JSON.parse(setting)
                        }
                        catch(error) {
                            MS.Entertainment.UI.fail("Failed to parse user configuration values: " + error && error.message);
                            Windows.Storage.ApplicationData.current.localSettings.values[xuid] = null
                        }
                    MS.Entertainment.Utilities._cachedConfigurationXuid = xuid;
                    MS.Entertainment.Utilities._cachedConfigurationValues = values
                }
                catch(error) {}
            }, getUserConfigurationValue: function getUserConfigurationValue(configurationKey) {
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                var xuid = configurationManager.service.lastSignedInUserXuid;
                if (!xuid)
                    xuid = "UnauthenticatedUser";
                if (MS.Entertainment.Utilities.isApp2 && xuid !== MS.Entertainment.Utilities._cachedConfigurationXuid)
                    MS.Entertainment.Utilities._loadUserConfigurationValues(xuid);
                return MS.Entertainment.Utilities._cachedConfigurationValues && MS.Entertainment.Utilities._cachedConfigurationValues[configurationKey]
            }, setUserConfigurationValue: function setUserConfigurationValue(configurationKey, value) {
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                var xuid = configurationManager.service.lastSignedInUserXuid;
                if (!xuid)
                    xuid = "UnauthenticatedUser";
                if (MS.Entertainment.Utilities.isApp2 && xuid !== MS.Entertainment.Utilities._cachedConfigurationXuid)
                    MS.Entertainment.Utilities._loadUserConfigurationValues(xuid);
                if (MS.Entertainment.Utilities.isApp2)
                    try {
                        var values = MS.Entertainment.Utilities._cachedConfigurationValues || {};
                        var oldValue = values[configurationKey];
                        if (value === undefined)
                            delete values[configurationKey];
                        else
                            values[configurationKey] = value;
                        if (value !== oldValue)
                            Windows.Storage.ApplicationData.current.localSettings.values[xuid] = JSON.stringify(values);
                        MS.Entertainment.Utilities._cachedConfigurationValues = values
                    }
                    catch(error) {}
            }, deleteUserConfigurationValue: function deleteUserConfigurationValue(configurationKey) {
                MS.Entertainment.Utilities.setUserConfigurationValue(configurationKey, undefined)
            }, UserConfigurationValues: {
                albumArtistSyncScreenDismissed: "albumArtistSyncScreenDismissed", cachedGenre1: "cachedGenre1", cachedGenre2: "cachedGenre2", collectionDialogXuids: "collectionDialogXuids", homeEducationXuids: "homeEducationXuids", minimumListensForEducationPanelsReachedXuids: "minimumListensForEducationPanelsReachedXuids", musicVideosOpt: "musicVideosOpt", notInterestedRecommendations: "notInterestedRecommendations", nowPlayingEducationXuids: "nowPlayingEducationXuids", playlistDialogXuids: "playlistDialogXuids", playlistSyncScreenDismissed: "playlistSyncScreenDismissed", previousApplicationState: "previousApplicationState", welcomeDialogOverride: "welcomeDialogOverride"
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        isFileTypeInList: function isFileTypeInList(fileTypeList, fileType) {
            if (!fileType || !fileTypeList)
                return false;
            var searchPattern = new RegExp("(^|;)" + fileType + ";", "i");
            return fileTypeList.match(searchPattern) !== null
        }, getMediaFileContentType: function getMediaFileContentType(media) {
                var fileContentType = String.empty;
                var fileSubContentType = String.empty;
                try {
                    var contentTypeString = (media && media.contentType) || String.empty;
                    var typeParts = contentTypeString.split("/");
                    fileContentType = typeParts[0].toLowerCase();
                    fileSubContentType = typeParts.length > 0 ? typeParts[1].toLowerCase() : String.empty
                }
                catch(e) {}
                if (fileContentType === "application" || fileContentType === "text") {
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (MS.Entertainment.Utilities.isFileTypeInList(configurationManager.amsterdam.videoContentTypes, fileSubContentType))
                        fileContentType = "video";
                    else if (MS.Entertainment.Utilities.isFileTypeInList(configurationManager.amsterdam.musicContentTypes, fileSubContentType))
                        fileContentType = "audio"
                }
                return fileContentType
            }, getMediaFileFileType: function getMediaFileFileType(media) {
                var mediaFileType = String.empty;
                try {
                    mediaFileType = (media && media.fileType) || String.empty
                }
                catch(e) {
                    if (e.number === MS.Entertainment.Platform.Playback.Error.E_NOTIMPL.code) {
                        var uri = new Windows.Foundation.Uri(media.path);
                        mediaFileType = uri.extension
                    }
                }
                return mediaFileType.toLowerCase()
            }, isLocalMarketplaceVideo: function isLocalMarketplaceVideo(mediaInstance) {
                function endsWith(str, suffix) {
                    return str.toLowerCase().indexOf(suffix, str.length - suffix.length) !== -1
                }
                var result = false;
                if (mediaInstance && mediaInstance.isLocal && mediaInstance.protectionState !== MS.Entertainment.Platform.Playback.ProtectionState.unprotected) {
                    var filePath = null;
                    if (mediaInstance._mediaItem && mediaInstance._mediaItem.data)
                        if (mediaInstance._mediaItem.data.fileItem && mediaInstance._mediaItem.data.fileItem.path)
                            filePath = mediaInstance._mediaItem.data.fileItem.path;
                        else if (mediaInstance._mediaItem.data.filePath)
                            filePath = mediaInstance._mediaItem.data.filePath;
                    if (filePath && typeof filePath === "string" && ((endsWith(filePath, ".mp4") && filePath.match(/^.*SMID(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}.*$/)) || (endsWith(filePath, ".wmv") && mediaInstance.protectionState === MS.Entertainment.Platform.Playback.ProtectionState.protected)))
                        result = true
                }
                return result
            }, getApp2OSVersion: function getApp2OSVersion() {
                var developmentKitProperties = WinJS.Utilities.getMember("Windows.Xbox.System.Internal.DevelopmentKit.DevelopmentKitProperties");
                var shellVersion = null;
                if (developmentKitProperties)
                    shellVersion = developmentKitProperties["shellVersion"];
                if (shellVersion) {
                    var versionNumberArrayUnformatted = shellVersion.match(/_\d\d\d\d\./);
                    if (versionNumberArrayUnformatted.length > 0)
                        return +versionNumberArrayUnformatted[0].substr(1, 4)
                }
            }, isDlnaSupported: function isDlnaSupported() {
                if (MS.Entertainment.Utilities.isTestApp)
                    return true;
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                return configurationManager.amsterdam.minimumDlnaSupportedBuild > 0 && MS.Entertainment.Utilities.getApp2OSVersion() >= configurationManager.amsterdam.minimumDlnaSupportedBuild
            }, isSetBackgroundImageSupported: function isSetBackgroundImageSupported() {
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                return configurationManager.amsterdam.minimumSetBackgroundImageSupportedBuild > 0 && MS.Entertainment.Utilities.getApp2OSVersion() >= configurationManager.amsterdam.minimumSetBackgroundImageSupportedBuild && !!WinJS.Utilities.getMember("Windows.Xbox.System.Internal.UserSettings.UserSettings.setUserBackgroundImageAsync")
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        getUserRoamingSetting: function getUserRoamingSetting(configurationKey) {
            if (MS.Entertainment.Utilities.isApp2)
                return MS.Entertainment.Utilities.getUserConfigurationValue(configurationKey);
            else
                return Windows.Storage.ApplicationData.current.roamingSettings.values[configurationKey]
        }, setUserRoamingSetting: function setUserRoamingSetting(configurationKey, value) {
                if (MS.Entertainment.Utilities.isApp2)
                    MS.Entertainment.Utilities.setUserConfigurationValue(configurationKey, value);
                else
                    Windows.Storage.ApplicationData.current.roamingSettings.values[configurationKey] = value
            }, deleteUserRoamingSetting: function deleteUserRoamingSetting(configurationKey) {
                if (MS.Entertainment.Utilities.isApp2)
                    MS.Entertainment.Utilities.deleteUserConfigurationValue(configurationKey);
                else
                    Windows.Storage.ApplicationData.current.roamingSettings.values.remove(configurationKey)
            }
    });
    (function() {
        var uniqueInteger = -1;
        WinJS.Namespace.define("MS.Entertainment.Utilities", {getSessionUniqueInteger: function getSessionUniqueInteger() {
                uniqueInteger++;
                return uniqueInteger
            }})
    })();
    (function() {
        WinJS.Namespace.define("MS.Entertainment.UI.Framework", {
            beginShowAnimations: function beginShowAnimations(element, overrideOldSelector, overrideNewSelector) {
                return MS.Entertainment.UI.Framework._beginAnimations(element, overrideOldSelector || "data-ent-hideanimation", overrideNewSelector || "data-ent-showanimation")
            }, beginHideAnimations: function beginHideAnimations(element, overrideOldSelector, overrideNewSelector) {
                    return MS.Entertainment.UI.Framework._beginAnimations(element, overrideOldSelector || "data-ent-showanimation", overrideNewSelector || "data-ent-hideanimation")
                }, clearHideAnimations: function clearHideAnimations(element) {
                    return MS.Entertainment.UI.Framework._clearAnimations(element, "data-ent-hideanimation")
                }, clearShowAnimations: function clearShowAnimations(element) {
                    return MS.Entertainment.UI.Framework._clearAnimations(element, "data-ent-showanimation")
                }, beginEnterAnimations: function beginShowAnimations(element) {
                    return MS.Entertainment.UI.Framework._beginAnimations(element, "data-ent-exitanimation", "data-ent-enteranimation")
                }, beginExitAnimations: function beginHideAnimations(element) {
                    return MS.Entertainment.UI.Framework._beginAnimations(element, "data-ent-enteranimation", "data-ent-exitanimation")
                }, _clearAnimations: function _clearAnimations(element, oldSelector) {
                    if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled)
                        MS.Entertainment.UI.Framework.applyWithSelector(element, "[" + oldSelector + "]", function(subElement) {
                            var animationClasses = subElement.getAttribute(oldSelector);
                            if (animationClasses)
                                animationClasses.split(" ").forEach(function(animationClass) {
                                    WinJS.Utilities.removeClass(subElement, animationClass)
                                })
                        }, true)
                }, _beginAnimations: function _beginAnimations(element, oldSelector, newSelector) {
                    var hasAnimations = false;
                    var promises = [];
                    var animationsEnabled = false;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.uiState))
                        animationsEnabled = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled;
                    if (animationsEnabled) {
                        MS.Entertainment.UI.Framework._clearAnimations(element, oldSelector);
                        MS.Entertainment.UI.Framework.applyWithSelector(element, "[" + newSelector + "]", function(subElement) {
                            if (MS.Entertainment.Utilities.isElementVisible(subElement)) {
                                var animationClasses = subElement.getAttribute(newSelector);
                                if (animationClasses) {
                                    var complete;
                                    var promise = new WinJS.Promise(function(c, e, p) {
                                            complete = c
                                        });
                                    promises.push(promise);
                                    var processAnimationAndComplete = function processAnimationAndComplete(animationName) {
                                            var index = animationNames.indexOf(animationName);
                                            if (index > -1) {
                                                animationNames.splice(index, 1);
                                                if (animationNames.length === 0) {
                                                    subElement.removeEventListener("animationend", animationComplete);
                                                    complete()
                                                }
                                                return true
                                            }
                                            else
                                                return false
                                        };
                                    var animationNames = [];
                                    var animationComplete = function animationComplete(event) {
                                            if (event.srcElement !== subElement)
                                                return;
                                            if (!processAnimationAndComplete(event.animationName))
                                                if (subElement.currentStyle && subElement.currentStyle.animationName) {
                                                    animationNames = subElement.currentStyle.animationName.split(",").map(function(animationName) {
                                                        return animationName.trim()
                                                    });
                                                    if (!processAnimationAndComplete(event.animationName));
                                                    hasAnimations = true
                                                }
                                        };
                                    subElement.addEventListener("animationend", animationComplete);
                                    animationClasses.split(" ").forEach(function(animationClass) {
                                        if (!WinJS.Utilities.hasClass(subElement, animationClass))
                                            WinJS.Utilities.addClass(subElement, animationClass)
                                    });
                                    animationNames = subElement.currentStyle.msAnimationName.split(",").map(function(animationName) {
                                        return animationName.trim()
                                    });
                                    if (animationNames.length <= 0 || (animationNames.length === 1 && animationNames[0] === "none")) {
                                        subElement.removeEventListener("animationend", animationComplete);
                                        complete()
                                    }
                                    else
                                        hasAnimations = true;
                                    if (!hasAnimations);
                                    if (!hasAnimations) {
                                        var transitionProperties = subElement.currentStyle.msTransitionProperty.split(",").map(function(transitionProperty) {
                                                return transitionProperty.trim()
                                            });
                                        if (transitionProperties.length > 0) {
                                            var transitionComplete = function transitionComplete(event) {
                                                    var index = transitionProperties.indexOf(event.propertyName);
                                                    if (index > -1) {
                                                        transitionProperties.splice(index, 1);
                                                        if (transitionProperties.length === 0) {
                                                            subElement.removeEventListener("transitionend", transitionComplete);
                                                            complete()
                                                        }
                                                    }
                                                };
                                            subElement.addEventListener("transitionend", transitionComplete);
                                            hasAnimations = true
                                        }
                                    }
                                }
                            }
                        }, true)
                    }
                    if (promises.length)
                        return WinJS.Promise.join(promises);
                    else
                        return WinJS.Promise.wrap()
                }
        })
    })();
    (function() {
        var lazyDefine = MS.Entertainment.UI.Framework.lazyDefine;
        var imageExtension = "png";
        WinJS.Namespace.define("MS.Entertainment.Utilities", {getPackageImageFileExtension: function() {
                return imageExtension
            }});
        WinJS.Namespace.define("MS.Entertainment.UI.ImagePaths", {
            transparent: lazyDefine(function() {
                return "ms-appx:///Images/transparent." + imageExtension
            }), imageNotFound: lazyDefine(function() {
                    return "ms-appx:///Images/img_not_found." + imageExtension
                }), genericVideoActorPlaceholder: lazyDefine(function() {
                    return "ms-appx:///Images/GenericIcons/actor_placeholder." + imageExtension
                }), genericVideoCastPlaceholder: lazyDefine(function() {
                    return "ms-appx:///Images/GenericIcons/cast_placeholder." + imageExtension
                }), genericVideoL3Hero: lazyDefine(function() {
                    return "ms-appx:///Images/GenericIcons/ico_GenericVideo_L3_Hero." + imageExtension
                }), genericVideoSmall: lazyDefine(function() {
                    return "ms-appx:///Images/GenericIcons/ico_74x_GenericVideo_Small." + imageExtension
                }), genericVideoMedium: lazyDefine(function() {
                    return "ms-appx:///Images/GenericIcons/ico_74x_GenericVideo_Medium." + imageExtension
                }), genericVideoLarge: lazyDefine(function() {
                    return "ms-appx:///Images/GenericIcons/ico_74x_GenericVideo_Large." + imageExtension
                }), genericVideoLargeMovie: lazyDefine(function() {
                    return "ms-appx:///Images/GenericIcons/ico_74x_GenericVideo_LargeMovie." + imageExtension
                }), genericVideoWide: lazyDefine(function() {
                    return "ms-appx:///Images/GenericIcons/ico_GenericVideo_Wide." + imageExtension
                }), videoDemoMoviePopover: lazyDefine(function() {
                    return "ms-appdata:///local/Images/movie_popover." + imageExtension
                }), videoDemoTvPopover: lazyDefine(function() {
                    return "ms-appdata:///local/Images/tv_popover." + imageExtension
                })
        })
    })();
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        getTryAgainDynamicText: function getTryAgainDynamicText() {
            var stringId = String.id.IDS_DETAILS_TRY_AGAIN_LABEL;
            if (MS.Entertainment.Utilities.isVideoApp)
                if (MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference === MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd)
                    stringId = String.id.IDS_DETAILS_TRY_AGAIN_LABEL_HD;
                else if (MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference === MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd)
                    stringId = String.id.IDS_DETAILS_TRY_AGAIN_LABEL_SD;
            return stringId
        }, getDownloadDynamicText: function getDownloadDynamicText() {
                var stringId = String.id.IDS_DETAILS_DOWNLOAD_LABEL;
                if (MS.Entertainment.Utilities.isVideoApp)
                    if (MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference === MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd)
                        stringId = String.id.IDS_DETAILS_DOWNLOAD_LABEL_HD;
                    else if (MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference === MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd)
                        stringId = String.id.IDS_DETAILS_DOWNLOAD_LABEL_SD;
                return stringId
            }, getDownloadSeasonDynamicText: function getDownloadSeasonDynamicText() {
                var stringId = String.id.IDS_TV_DOWNLOAD_SEASON_BUTTON;
                if (MS.Entertainment.Utilities.isVideoApp)
                    if (MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference === MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.hd)
                        stringId = String.id.IDS_TV_DOWNLOAD_SEASON_BUTTON_HD;
                    else if (MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference === MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd)
                        stringId = String.id.IDS_TV_DOWNLOAD_SEASON_BUTTON_SD;
                return stringId
            }, convertMediaItemToTvSeries: function convertMediaItemToTvSeries(mediaItem) {
                if (!mediaItem) {
                    MS.Entertainment.Framework.fail("convertMediaItemToTvSeries requires a mediaItem");
                    return null
                }
                if (MS.Entertainment.Platform.PlaybackHelpers.isTVSeries(mediaItem))
                    return mediaItem;
                var seriesData = null;
                if (mediaItem.seriesId && MS.Entertainment.Utilities.isValidServiceId(mediaItem.seriesId)) {
                    seriesData = {
                        libraryId: mediaItem.seriesLibraryId, Name: mediaItem.seriesTitle
                    };
                    if (mediaItem.seriesIdType && mediaItem.seriesIdType === MS.Entertainment.Data.Query.edsIdType.zuneCatalog)
                        seriesData.ZuneId = mediaItem.seriesId;
                    else
                        seriesData.ID = mediaItem.seriesId
                }
                else if (mediaItem.canonicalSeriesId && MS.Entertainment.Utilities.isValidServiceId(mediaItem.canonicalSeriesId))
                    seriesData = {
                        ID: mediaItem.canonicalSeriesId, title: {$value: mediaItem.canonicalSeriesTitle}
                    };
                else {
                    MS.Entertainment.UI.Framework.fail("convertMediaItemToTvSeries encountered an unsupported media type");
                    return null
                }
                var newMediaItem = MS.Entertainment.Data.augment(seriesData, MS.Entertainment.Data.Augmenter.Marketplace.EdsTVSeries);
                return MS.Entertainment.ViewModels.MediaItemModel.augment(newMediaItem)
            }, convertMediaItemToTvSeason: function convertMediaItemToTvSeason(mediaItem) {
                if (!mediaItem) {
                    MS.Entertainment.Framework.fail("convertMediaItemToTvSeason requires a mediaItem");
                    return null
                }
                if (MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem))
                    return mediaItem;
                var seasonData = null;
                if (mediaItem.seasonId && MS.Entertainment.Utilities.isValidServiceId(mediaItem.seriesId)) {
                    seasonData = {
                        libraryId: mediaItem.seasonLibraryId, Name: mediaItem.seasonTitle
                    };
                    if (mediaItem.seasonIdType && mediaItem.seasonIdType === MS.Entertainment.Data.Query.edsIdType.zuneCatalog)
                        seasonData.ZuneId = mediaItem.seasonId;
                    else
                        seasonData.ID = mediaItem.seasonId
                }
                else if (mediaItem.canonicalSeasonId && MS.Entertainment.Utilities.isValidServiceId(mediaItem.canonicalSeriesId))
                    seasonData = {ID: mediaItem.canonicalSeasonId};
                else {
                    MS.Entertainment.UI.Framework.fail("convertMediaItemToTvSeries encountered an unsupported media type");
                    return null
                }
                var newMediaItem = MS.Entertainment.Data.augment(seasonData, MS.Entertainment.Data.Augmenter.Marketplace.EdsTVSeason);
                return MS.Entertainment.ViewModels.MediaItemModel.augment(newMediaItem)
            }, getLegacyVideoRowCountForResolution: function getLegacyVideoRowCountForResolution() {
                var standardResolutionRows = MS.Entertainment.Utilities.STANDARD_RESOLUTION_ROWS;
                var highResolutionRows = MS.Entertainment.Utilities.HIGH_RESOLUTION_ROWS;
                var rowCount = standardResolutionRows;
                if (MS.Entertainment.Utilities.isHighResolution())
                    rowCount = highResolutionRows;
                return rowCount
            }, checkRecommendationsItemForNotInterested: function checkRecommendationsItemForNotInterested(item) {
                var notInterestedRecommendations = MS.Entertainment.Utilities.getUserConfigurationValue(MS.Entertainment.Utilities.UserConfigurationValues.notInterestedRecommendations);
                if (notInterestedRecommendations)
                    for (var i = 0; i < notInterestedRecommendations.length; i++)
                        if (notInterestedRecommendations[i] === item.serviceId)
                            return true;
                return false
            }, addNotInterestedRecommendationsItem: function addNotInterestedRecommendationsItem(item) {
                var notInterestedRecommendations = MS.Entertainment.Utilities.getUserConfigurationValue(MS.Entertainment.Utilities.UserConfigurationValues.notInterestedRecommendations);
                if (!notInterestedRecommendations)
                    notInterestedRecommendations = [];
                notInterestedRecommendations = notInterestedRecommendations.concat([item.serviceId]);
                MS.Entertainment.Utilities.setUserConfigurationValue(MS.Entertainment.Utilities.UserConfigurationValues.notInterestedRecommendations, notInterestedRecommendations)
            }, postNotInterestedRecommendationsItem: function postNotInterestedRecommendationsItem(item) {
                if (item) {
                    var queryData = {Feedback: {
                                FeedbackValue: MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.notInterestedFeedbackValue, MediaId: item.serviceId, MediaType: item.edsMediaItemType
                            }};
                    var query = new MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback(queryData);
                    return query.execute().then(null, function error(){})
                }
                else
                    return WinJS.Promise.as()
            }, getTvInlineDetailsPopoverControl: function getTvInlineDetailsPopoverControl() {
                var popoverControl = "MS.Entertainment.Pages.TvSeriesInlineDetails";
                if (MS.Entertainment.Utilities.isApp2)
                    popoverControl = "MS.Entertainment.Pages.TvSeriesInlineDetailsFullScreen";
                return popoverControl
            }, relatedMovieGridItemSizeSmall: {
                width: 200, height: 265
            }, relatedMovieGridItemSize: {
                width: 270, height: 360
            }, relatedMovieGridItemSize2: {
                width: 238, height: 324
            }, relatedTvGridItemSize2: {
                width: 324, height: 324
            }, seasonGridItemSizeSmall: {
                width: 225, height: 265
            }, seasonGridItemSize: {
                width: 320, height: 360
            }, seasonGridItemSize2: {
                width: 275, height: 360
            }, movieTileSize: {
                width: 185, height: 255
            }, movieLargeTileSize: {
                width: 240, height: 326
            }, personalTileSize: {
                width: 250, height: 255
            }, personalTileSizeL1Small: {
                width: 165, height: 170
            }, tvTileSize: {
                width: 250, height: 255
            }, tvLargeTileSize: {
                width: 326, height: 326
            }, tvHeroSize: {get: function() {
                    if (MS.Entertainment.Utilities.isVideoApp1)
                        return {
                                width: 550, height: 550
                            };
                    else
                        return {
                                width: 480, height: 480
                            }
                }}
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Icon", {
        achievements: "\uE288", actionLinkArrow: "\uE26B", actionLinkArrowRTL: "\uE26C", addToCollection: "\uE2B3", addToNowPlaying: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return MS.Entertainment.UI.Icon.addToNowPlaying2;
                    else
                        return MS.Entertainment.UI.Icon.addToNowPlaying1
                }}, addToNowPlaying1: "\uE2AE", addToNowPlaying2: "\uE2E0", addToPlaylist: "\uE2B1", arrowNext: "\uE2EF", arrowPrevious: "\uE2EE", avatarItem: "\uE27B", background: "\uE39B", book: "\uE2EA", bookStore: "\uE2F8", bullet: "\u16EB", invokeButton: "\uE3CE", camera: "\uE41C", chevronDown: "\uE3AF", chevronDownLight: "\E09D", chevronUp: "\uE3B0", cloud: "\uE2C1", cloudNotAvailable: "\uE2BF", cloudSyncing: "\uE2DD", close: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE409";
                    else
                        return "\u2715"
                }}, closedCaption: "\uE437", colorable: "\uE292", computer: "\uE39E", devices: "\uE2ED", details: "\uE28F", downloading: "\uE2BC", downloadingArrowPart: "\uE2BE", downloadingBasePart: "\uE2BD", downChevron: "\uE0A1", feedback: "\uE2E4", flexhub: "\uE2DE", friend: "\uE287", friendPending: "\uE2DC", friendRespond: "\uE289", friendRemove: "\uE28A", friendAdd: "\uE28B", genericVideo: "\uE29D", genericGame: "\uE29E", genericMusic: "\uE29F", game: "\uE279", gameAddon: "\uE277", gameCompare: "\uE286", gameDemo: "\uE276", gameJoin: "\uE278", hd: "\uE33F", home: "\uE274", info: "\uE2B6", inlineAchievements: "\uE2A1", inlineAwarded: "\uE2A2", inlineBeacon: "\uE2A3", inlineColorable: "\uE2A4", inlineFriend: "\uE2A8", inlineGame: "\uE2A5", inlineGamerScore: "\uE2A9", inlineError: "\uE2A6", inlineNotification: "\uE2E2", inlineLink: "\uE2A7", inlineLock: "\uE2A0", inlineNowPlaying: "\uE2B4", inlinePoints: "\uE2AA", inlineStreaming: "\uE2AB", list: "\uE331", magazine: "\uE2F7", magazineStore: "\uE2F9", modifierAvatarItem: "\uE295", modifierFriend: "\uE296", modifierXbox: "\uE297", modifierPlaylist: "\uE298", modifierAddRing: "\uE299", modifierAddRingPressed: "\uE29A", modifierRemoveRing: "\uE29B", modifierRemoveRingPressed: "\uE29C", moveToBottom: "\uE2FB", moveToTop: "\uE2FA", movies: "\uE410", musicInCollection: "\uE300", menu: "\uE27C", next: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE402";
                    else
                        return WinJS.UI.AppBarIcon.next
                }}, noSelection: "\uE294", notification: "\uE2E5", nowPlayingNext: "\uE097", nowPlayingPrev: "\uE096", oneDrive: "\uE306", playlist: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE43E";
                    else
                        return "\uE28F"
                }}, photo: "\uE282", previous: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE403";
                    else
                        return WinJS.UI.AppBarIcon.previous
                }}, profile: "\uE285", related: "\uE280", repeat: "\uE290", repeatOnce: "\uE291", radio: "\uE2FD", readingCollection: "\uE2F5", readingSubscription: "\uE2EB", screenFull: "\uE272", fullScreen: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE45A";
                    else
                        return MS.Entertainment.UI.Icon.screenFull
                }}, screenNormal: "\uE273", semanticZoom: "\uE2E7", shop: "\uE275", smartDj: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return MS.Entertainment.UI.Icon.smartDjNoRing;
                    else
                        return MS.Entertainment.UI.Icon.smartDjWithRing
                }}, smartDjPressed: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return MS.Entertainment.UI.Icon.smartDjNoRing;
                    else
                        return MS.Entertainment.UI.Icon.smartDjPressedWithRing
                }}, smartDjPressedWithRing: "\uE283", smartDjWithRing: "\uE284", smartDjAppbar: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return MS.Entertainment.UI.Icon.smartDjNoRing;
                    else
                        return MS.Entertainment.UI.Icon.smartDjAppbarWithRing
                }}, smartDjAppbarPressed: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return MS.Entertainment.UI.Icon.smartDjNoRing;
                    else
                        return MS.Entertainment.UI.Icon.smartDjAppbarPressedWithRing
                }}, smartDjAppbarWithRing: "\uE2BB", smartDjAppbarPressedWithRing: "\uE2BA", smartDjNoRing: "\uE2DF", smartGlassTablet: "\uE34E", streaming: "\uE2E3", smiley: "\uE293", subtitle: "\uE44D", switchDefinition: "\uE3C7", switchLanguage: "\uE413", tvMonitor: "\uE39D", themes: "\uE281", upChevron: "\uE0A0", usbDevice: "\uE377", video11: "\uE33E", sendToXbox: "\uE2AC", sendToXboxAdorner: "\uE2AD", sendToXboxAdornerAppbar: "\uE2B9", takeFromXbox: "\uE2AF", takeFromXboxAdorner: "\uE2B0", takeFromXboxAdornerAppbar: "\uE2B8", xbox: "\uE28C", xboxConnect: "\uE28D", xboxConnected: "\uE28E", xboxXenonLogo: "\uE3E3", videoCollection: "\uE2EA", joystickUp: "\uE2C2", joystickRight: "\uE2C3", joystickDown: "\uE2C4", joystickLeft: "\uE2C5", triggerRight: "\uE2C6", bumperRight: "\uE2C7", bumperLeft: "\uE2C8", triggerLeft: "\uE2C9", clear: "\uE2CA", webHub: "\uE2CB", swap: "\uE2CC", smartGlassGem: "\uE2B7", smartGlassConsole: "\uE2CD", smartGlassSlate: "\uE2CE", buttonBottomRight: "\uE2CF", buttonBottomLeft: "\uE2D0", buttonTopRight: "\uE2D1", buttonTopLeft: "\uE2D2", dpadLeft: "\uE2D3", dpadDown: "\uE2D4", dpadUp: "\uE2D5", dpadRight: "\uE2D6", fileFolder: "\uE3F5", keyboard: "\uE2D7", touchGuide: "\uE2D8", onscreenCursor: "\uE2D9", xenon: "\uE2DA", addTo: "\uE444", explore: "\uE42F", folder: "\uE188", help: "\uE405", mediaMusic: "\uE386", menuButton: "\uE3EC", moreActions: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE34B";
                    else
                        return WinJS.UI.AppBarIcon.more
                }}, music: "\uE41A", nowPlaying: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE335";
                    else
                        return MS.Entertainment.UI.Icon.inlineNowPlaying
                }}, pause: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE40C";
                    else
                        return "\uE103"
                }}, play: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE40D";
                    else
                        return "\uE102"
                }}, player: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE301";
                    else
                        return WinJS.UI.AppBarIcon.contact
                }}, playerSignIn: "\uE2FC", playlistMusic: "\uE2E9", playlistImport: "\uE3CA", restart: "\uE3C0", toggleMenu: "\uE332", shuffleOn: "\uE3C9", store: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE3A0";
                    else
                        return WinJS.UI.AppBarIcon.shop
                }}, refresh: "\uE3C3", "delete": {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE359";
                    else
                        return WinJS.UI.AppBarIcon.delete
                }}, search: {get: function() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return "\uE3F7";
                    else
                        return WinJS.UI.AppBarIcon.find
                }}, volumeDisabled: "\uE2E6", watchlist: "\uE2E9", fixupIcons: function fixupIcons() {
                if (WinJS.UI.AppBarIcon.previous.indexOf("ms") !== -1)
                    (function() {
                        delete WinJS.UI.AppBarIcon;
                        WinJS.Namespace.define("WinJS.UI.AppBarIcon", {
                            previous: "", next: "", play: "", pause: "", edit: "", save: "", clear: "", "delete": "", remove: "", add: "", cancel: "", accept: "", more: "", redo: "", undo: "", home: "", up: "", forward: "", right: "", back: "", left: "", favorite: "", camera: "", settings: "", video: "", sync: "", download: "", mail: "", find: "", help: "", upload: "", emoji: "", twopage: "", leavechat: "", mailforward: "", clock: "", send: "", crop: "", rotatecamera: "", people: "", closepane: "", openpane: "", world: "", flag: "", previewlink: "", globe: "", trim: "", attachcamera: "", zoomin: "", bookmarks: "", document: "", protecteddocument: "", page: "", bullets: "", comment: "", mail2: "", contactinfo: "", hangup: "", viewall: "", mappin: "", phone: "", videochat: "", "switch": "", contact: "", rename: "", pin: "", musicinfo: "", go: "", keyboard: "", dockleft: "", dockright: "", dockbottom: "", remote: "", refresh: "", rotate: "", shuffle: "", list: "", shop: "", selectall: "", orientation: "", "import": "", importall: "", browsephotos: "", webcam: "", pictures: "", savelocal: "", caption: "", stop: "", showresults: "", volume: "", repair: "", message: "", page2: "", calendarday: "", calendarweek: "", calendar: "", characters: "", mailreplyall: "", read: "", link: "", accounts: "", showbcc: "", hidebcc: "", cut: "", attach: "", paste: "", filter: "", copy: "", emoji2: "", important: "", mailreply: "", slideshow: "", sort: "", manage: "", allapps: "", disconnectdrive: "", mapdrive: "", newwindow: "", openwith: "", contactpresence: "", priority: "", uploadskydrive: "", gototoday: "", font: "", fontcolor: "", contact2: "", folder: "", audio: "", placeholder: "", view: "", setlockscreen: "", settile: "", cc: "", stopslideshow: "", permissions: "", highlight: "", disableupdates: "", unfavorite: "", unpin: "", openlocal: "", mute: "", italic: "", underline: "", bold: "", movetofolder: "", likedislike: "", dislike: "", like: "", alignright: "", aligncenter: "", alignleft: "", zoom: "", zoomout: "", openfile: "", otheruser: "", admin: "", street: "", map: "", clearselection: "", fontdecrease: "", fontincrease: "", fontsize: "", cellphone: "", reshare: "", tag: "", repeatone: "", repeatall: "", outlinestar: "", solidstar: "", calculator: "", directions: "", target: "", library: "", phonebook: "", memo: "", microphone: "", postupdate: "", backtowindow: "", fullscreen: "", newfolder: "", calendarreply: "", unsyncfolder: "", reporthacked: "", syncfolder: "", blockcontact: "", switchapps: "", addfriend: "", touchpointer: "", gotostart: "", zerobars: "", onebar: "", twobars: "", threebars: "", fourbars: ""
                        })
                    })()
            }
    });
    WinJS.Namespace.define("MS.Entertainment.UI", {FWLink: {
            musicLibraries: "http://go.microsoft.com/fwlink/?LinkId=231829", videoLibraries: "http://go.microsoft.com/fwlink/?LinkId=267525", learnMore: "http://go.microsoft.com/fwlink/?LinkId=267489", cloudGrovelLearnMore: "http://go.microsoft.com/fwlink/?LinkId=280203", cloudGrovelPartialMatchLearnMore: "http://go.microsoft.com/fwlink/?LinkId=286257", cloudContentV2GetMoreInfo: "http://go.microsoft.com/fwlink/?LinkId=512463", advertisementReason: "http://go.microsoft.com/fwlink/?LinkID=282137", musicIntro: "http://go.microsoft.com/fwlink/?LinkID=285375"
        }});
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        _sounds: {
            initialized: false, backButtonClick: null, disabledButtonClick: null, elementFocus1: null, elementFocus2: null, elementFocus3: null, elementFocus4: null, overlayIn: null, overlayOut: null, pageTransitionLeft: null, pageTransitionRight: null, selectButtonClick: null, selectButtonPressingKinect: null, virtualKeyboardFocus: null, virtualKeyboardSelect: null
        }, initializeSounds: function initializeSounds() {
                if (MS.Entertainment.Utilities.isApp2 && App2.SoundClips.Audio && !MS.Entertainment.Utilities._sounds.initialized) {
                    MS.Entertainment.Utilities._sounds.backButtonClick = App2.SoundClips.BackButtonClick;
                    MS.Entertainment.Utilities._sounds.disabledButtonClick = App2.SoundClips.DisabledButtonClick;
                    MS.Entertainment.Utilities._sounds.elementFocus1 = App2.SoundClips.ElementFocus1;
                    MS.Entertainment.Utilities._sounds.elementFocus2 = App2.SoundClips.ElementFocus2;
                    MS.Entertainment.Utilities._sounds.elementFocus3 = App2.SoundClips.ElementFocus3;
                    MS.Entertainment.Utilities._sounds.elementFocus4 = App2.SoundClips.ElementFocus4;
                    MS.Entertainment.Utilities._sounds.overlayIn = App2.SoundClips.OverlayIn;
                    MS.Entertainment.Utilities._sounds.overlayOut = App2.SoundClips.OverlayOut;
                    MS.Entertainment.Utilities._sounds.pageTransitionLeft = App2.SoundClips.PageTransitionLeft;
                    MS.Entertainment.Utilities._sounds.pageTransitionRight = App2.SoundClips.PageTransitionRight;
                    MS.Entertainment.Utilities._sounds.selectButtonClick = App2.SoundClips.SelectButtonClick;
                    MS.Entertainment.Utilities._sounds.initialized = true
                }
            }, playBackButtonClick: function playBackButtonClick() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.backButtonClick)
                    MS.Entertainment.Utilities._sounds.backButtonClick.play()
            }, playDisabledButtonClick: function playDisabledButtonClick() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.disabledButtonClick)
                    MS.Entertainment.Utilities._sounds.disabledButtonClick.play()
            }, playElementFocus1: function playElementFocus1() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.elementFocus1)
                    MS.Entertainment.Utilities._sounds.elementFocus1.play()
            }, playElementFocus2: function playElementFocus2() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.elementFocus2)
                    MS.Entertainment.Utilities._sounds.elementFocus2.play()
            }, playElementFocus3: function playElementFocus3() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.elementFocus3)
                    MS.Entertainment.Utilities._sounds.elementFocus3.play()
            }, playElementFocus4: function playElementFocus4() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.elementFocus4)
                    MS.Entertainment.Utilities._sounds.elementFocus4.play()
            }, playOverlayIn: function playOverlayIn() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.overlayIn)
                    MS.Entertainment.Utilities._sounds.overlayIn.play()
            }, playOverlayOut: function playOverlayOut() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.overlayOut)
                    MS.Entertainment.Utilities._sounds.overlayOut.play()
            }, playPageTransitionLeft: function playPageTransitionLeft() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.pageTransitionLeft)
                    MS.Entertainment.Utilities._sounds.pageTransitionLeft.play()
            }, playPageTransitionRight: function playPageTransitionRight() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.pageTransitionRight)
                    MS.Entertainment.Utilities._sounds.pageTransitionRight.play()
            }, playSelectButtonClick: function playSelectButtonClick() {
                MS.Entertainment.Utilities.initializeSounds();
                if (MS.Entertainment.Utilities._sounds.selectButtonClick)
                    MS.Entertainment.Utilities._sounds.selectButtonClick.play()
            }, playRandomFocusSound: function playRandomFocusSound() {
                MS.Entertainment.Utilities.initializeSounds();
                var indexOfFocusSoundToPlay = Math.ceil(Math.random() * 4);
                switch (indexOfFocusSoundToPlay) {
                    case 1:
                        MS.Entertainment.Utilities.playElementFocus1();
                        break;
                    case 2:
                        MS.Entertainment.Utilities.playElementFocus2();
                        break;
                    case 3:
                        MS.Entertainment.Utilities.playElementFocus3();
                        break;
                    case 4:
                        MS.Entertainment.Utilities.playElementFocus4();
                        break;
                    default:
                        MS.Entertainment.Utilities.playElementFocus1();
                        break
                }
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities", {stringify: function stringify(obj) {
            try {
                return JSON.stringify(obj)
            }
            catch(ex) {
                return obj.toString()
            }
        }});
    WinJS.Namespace.define("MS.Entertainment.Utilities", {
        MediaSubtypeIds: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return {
                    "00000016-0000-0010-8000-00AA00389B71": "MFVideoFormat_RGB32", "00000015-0000-0010-8000-00AA00389B71": "MFVideoFormat_ARGB32", "00000014-0000-0010-8000-00AA00389B71": "MFVideoFormat_RGB24", "00000018-0000-0010-8000-00AA00389B71": "MFVideoFormat_RGB555", "00000017-0000-0010-8000-00AA00389B71": "MFVideoFormat_RGB565", "00000029-0000-0010-8000-00AA00389B71": "MFVideoFormat_RGB8", "34344941-0000-0010-8000-00AA00389B71": "MFVideoFormat_AI44", "56555941-0000-0010-8000-00AA00389B71": "MFVideoFormat_AYUV", "32595559-0000-0010-8000-00AA00389B71": "MFVideoFormat_YUY2", "55595659-0000-0010-8000-00AA00389B71": "MFVideoFormat_YVYU", "39555659-0000-0010-8000-00AA00389B71": "MFVideoFormat_YVU9", "59565955-0000-0010-8000-00AA00389B71": "MFVideoFormat_UYVY", "3131564E-0000-0010-8000-00AA00389B71": "MFVideoFormat_NV11", "3231564E-0000-0010-8000-00AA00389B71": "MFVideoFormat_NV12", "32315659-0000-0010-8000-00AA00389B71": "MFVideoFormat_YV12", "30323449-0000-0010-8000-00AA00389B71": "MFVideoFormat_I420", "56555949-0000-0010-8000-00AA00389B71": "MFVideoFormat_IYUV", "30313259-0000-0010-8000-00AA00389B71": "MFVideoFormat_Y210", "36313259-0000-0010-8000-00AA00389B71": "MFVideoFormat_Y216", "30313459-0000-0010-8000-00AA00389B71": "MFVideoFormat_Y410", "36313459-0000-0010-8000-00AA00389B71": "MFVideoFormat_Y416", "50313459-0000-0010-8000-00AA00389B71": "MFVideoFormat_Y41P", "54313459-0000-0010-8000-00AA00389B71": "MFVideoFormat_Y41T", "54323459-0000-0010-8000-00AA00389B71": "MFVideoFormat_Y42T", "30313250-0000-0010-8000-00AA00389B71": "MFVideoFormat_P210", "36313250-0000-0010-8000-00AA00389B71": "MFVideoFormat_P216", "30313050-0000-0010-8000-00AA00389B71": "MFVideoFormat_P010", "36313050-0000-0010-8000-00AA00389B71": "MFVideoFormat_P016", "30313276-0000-0010-8000-00AA00389B71": "MFVideoFormat_v210", "36313276-0000-0010-8000-00AA00389B71": "MFVideoFormat_v216", "30313476-0000-0010-8000-00AA00389B71": "MFVideoFormat_v410", "3334504D-0000-0010-8000-00AA00389B71": "MFVideoFormat_MP43", "5334504D-0000-0010-8000-00AA00389B71": "MFVideoFormat_MP4S", "3253344D-0000-0010-8000-00AA00389B71": "MFVideoFormat_M4S2", "5634504D-0000-0010-8000-00AA00389B71": "MFVideoFormat_MP4V", "31564D57-0000-0010-8000-00AA00389B71": "MFVideoFormat_WMV1", "32564D57-0000-0010-8000-00AA00389B71": "MFVideoFormat_WMV2", "33564D57-0000-0010-8000-00AA00389B71": "MFVideoFormat_WMV3", "31435657-0000-0010-8000-00AA00389B71": "MFVideoFormat_WVC1", "3153534D-0000-0010-8000-00AA00389B71": "MFVideoFormat_MSS1", "3253534D-0000-0010-8000-00AA00389B71": "MFVideoFormat_MSS2", "3147504D-0000-0010-8000-00AA00389B71": "MFVideoFormat_MPG1", "6C737664-0000-0010-8000-00AA00389B71": "MFVideoFormat_DVSL", "64737664-0000-0010-8000-00AA00389B71": "MFVideoFormat_DVSD", "64687664-0000-0010-8000-00AA00389B71": "MFVideoFormat_DVHD", "35327664-0000-0010-8000-00AA00389B71": "MFVideoFormat_DV25", "30357664-0000-0010-8000-00AA00389B71": "MFVideoFormat_DV50", "31687664-0000-0010-8000-00AA00389B71": "MFVideoFormat_DVH1", "20637664-0000-0010-8000-00AA00389B71": "MFVideoFormat_DVC", "34363248-0000-0010-8000-00AA00389B71": "MFVideoFormat_H264", "47504A4D-0000-0010-8000-00AA00389B71": "MFVideoFormat_MJPG", "4F303234-0000-0010-8000-00AA00389B71": "MFVideoFormat_420O", "43564548-0000-0010-8000-00AA00389B71": "MFVideoFormat_HEVC", "53564548-0000-0010-8000-00AA00389B71": "MFVideoFormat_HEVC_ES", "33363248-0000-0010-8000-00AA00389B71": "MFVideoFormat_H263", "3F40F4F0-5622-4FF8-B6D8-A17A584BEE5E": "MFVideoFormat_H264_ES", "E06D8026-DB46-11CF-B4D1-00805F6CBBEA": "MFVideoFormat_MPEG2", "00000001-0000-0010-8000-00AA00389B71": "MFAudioFormat_PCM", "00000003-0000-0010-8000-00AA00389B71": "MFAudioFormat_Float", "00000008-0000-0010-8000-00AA00389B71": "MFAudioFormat_DTS", "00000092-0000-0010-8000-00AA00389B71": "MFAudioFormat_Dolby_AC3_SPDIF", "00000009-0000-0010-8000-00AA00389B71": "MFAudioFormat_DRM", "00000161-0000-0010-8000-00AA00389B71": "MFAudioFormat_WMAudioV8", "00000162-0000-0010-8000-00AA00389B71": "MFAudioFormat_WMAudioV9", "00000163-0000-0010-8000-00AA00389B71": "MFAudioFormat_WMAudio_Lossless", "00000164-0000-0010-8000-00AA00389B71": "MFAudioFormat_WMASPDIF", "0000000A-0000-0010-8000-00AA00389B71": "MFAudioFormat_MSP1", "00000055-0000-0010-8000-00AA00389B71": "MFAudioFormat_MP3", "00000050-0000-0010-8000-00AA00389B71": "MFAudioFormat_MPEG", "00001610-0000-0010-8000-00AA00389B71": "MFAudioFormat_AAC", "00001600-0000-0010-8000-00AA00389B71": "MFAudioFormat_ADTS", "00007361-0000-0010-8000-00AA00389B71": "MFAudioFormat_AMR_NB", "00007362-0000-0010-8000-00AA00389B71": "MFAudioFormat_AMR_WB", "00007363-0000-0010-8000-00AA00389B71": "MFAudioFormat_AMR_WP", "E06D802C-DB46-11CF-B4D1-00805F6CBBEA": "MFAudioFormat_Dolby_AC3", "A7FB87AF-2D02-42FB-A4D4-05CD93843BDD": "MFAudioFormat_Dolby_DDPlus", "00000000-0000-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_WAVEFORMATEX", "6DBA3190-67BD-11CF-A0F7-0020AFD156E4": "KSDATAFORMAT_SUBTYPE_ANALOG", "00000006-0000-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_ALAW", "00000007-0000-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_MULAW", "00000002-0000-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_ADPCM", "36523B21-8EE5-11D1-8CA3-0060B057664A": "KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO", "36523B22-8EE5-11D1-8CA3-0060B057664A": "KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO", "36523B23-8EE5-11D1-8CA3-0060B057664A": "KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO", "36523B24-8EE5-11D1-8CA3-0060B057664A": "KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO", "36523B25-8EE5-11D1-8CA3-0060B057664A": "KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO", "A0AF4F81-E163-11D0-BAD9-00609744111A": "KSDATAFORMAT_SUBTYPE_DSS_VIDEO", "A0AF4F82-E163-11D0-BAD9-00609744111A": "KSDATAFORMAT_SUBTYPE_DSS_AUDIO", "E436EB80-524F-11CE-9F53-0020AF0BA770": "KSDATAFORMAT_SUBTYPE_MPEG1Packet", "E436EB81-524F-11CE-9F53-0020AF0BA770": "KSDATAFORMAT_SUBTYPE_MPEG1Payload", "E436EB86-524F-11CE-9F53-0020AF0BA770": "KSDATAFORMAT_SUBTYPE_MPEG1Video", "E06D802B-DB46-11CF-B4D1-00805F6CBBEA": "KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO", "E06D8032-DB46-11CF-B4D1-00805F6CBBEA": "KSDATAFORMAT_SUBTYPE_LPCM_AUDIO", "00000003-0CEA-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1", "00000004-0CEA-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2", "00000005-0CEA-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3", "00000006-0CEA-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_IEC61937_AAC", "00000008-0CEA-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC", "00000009-0CEA-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO", "0000000A-0CEA-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS", "0000000B-0CEA-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD", "0000000C-0CEA-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP", "0000000D-0CEA-0010-8000-00AA00389B71": "KSDATAFORMAT_SUBTYPE_IEC61937_DST", "E06D8033-DB46-11CF-B4D1-00805F6CBBEA": "KSDATAFORMAT_SUBTYPE_DTS_AUDIO", "E06D8034-DB46-11CF-B4D1-00805F6CBBEA": "KSDATAFORMAT_SUBTYPE_SDDS_AUDIO", "E06D802D-DB46-11CF-B4D1-00805F6CBBEA": "KSDATAFORMAT_SUBTYPE_SUBPICTURE", "5A9B6A40-1A22-11D1-BAD9-00609744111A": "KSDATAFORMAT_SUBTYPE_VPVideo", "5A9B6A41-1A22-11D1-BAD9-00609744111A": "KSDATAFORMAT_SUBTYPE_VPVBI", "19E4A5AA-5662-4FC5-A0C0-1758028E1057": "KSDATAFORMAT_SUBTYPE_JPEG", "CA20D9A0-3E3E-11D1-9BF9-00C04FBBDEBF": "KSDATAFORMAT_SUBTYPE_RAW8", "33214CC1-011F-11D2-B4B1-00A0D102CFBE": "KSDATAFORMAT_SUBTYPE_CC", "F72A76E2-EB0A-11D0-ACE4-0000C0CC16BA": "KSDATAFORMAT_SUBTYPE_NABTS", "F72A76E3-EB0A-11D0-ACE4-0000C0CC16BA": "KSDATAFORMAT_SUBTYPE_TELETEXT", "E757BCA1-39AC-11D1-A9F5-00C04FBBDE8F": "KSDATAFORMAT_SUBTYPE_NABTS_FEC", "E436EB7F-524F-11CE-9F53-0020AF0BA770": "KSDATAFORMAT_SUBTYPE_OVERLAY", "6E8D4A22-310C-11D0-B79A-00AA003767A7": "KSDATAFORMAT_SUBTYPE_Line21_BytePair", "6E8D4A23-310C-11D0-B79A-00AA003767A7": "KSDATAFORMAT_SUBTYPE_Line21_GOPPacket"
                }
        }), getMediaSubtypeNameFromGuid: function getMediaSubtypeNameFromGuid(guid) {
                var subtypeName = String.empty;
                if (guid) {
                    var trimmedGuid = MS.Entertainment.Utilities.trimGuid(guid).toUpperCase();
                    subtypeName = MS.Entertainment.Utilities.MediaSubtypeIds[trimmedGuid] || trimmedGuid || String.empty
                }
                return subtypeName
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Utilities", {Iso639ThreeLetterToTwoLetterLanguageMap: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return {
                    aar: "aa", abk: "ab", afr: "af", aka: "ak", alb: "sq", amh: "am", ara: "ar", arg: "an", arm: "hy", asm: "as", ava: "av", ave: "ae", aym: "ay", aze: "az", bak: "ba", bam: "bm", baq: "eu", bel: "be", ben: "bn", bih: "bh", bis: "bi", bos: "bs", bre: "br", bul: "bg", bur: "my", cat: "ca", cha: "ch", che: "ce", chi: "zh", chu: "cu", chv: "cv", cor: "kw", cos: "co", cre: "cr", cze: "cs", dan: "da", div: "dv", dut: "nl", dzo: "dz", eng: "en", epo: "eo", est: "et", ewe: "ee", fao: "fo", fij: "fj", fin: "fi", fre: "fr", fry: "fy", ful: "ff", geo: "ka", ger: "de", gla: "gd", gle: "ga", glg: "gl", glv: "gv", gre: "el", grn: "gn", guj: "gu", hat: "ht", hau: "ha", heb: "he", her: "hz", hin: "hi", hmo: "ho", hrv: "hr", hun: "hu", ibo: "ig", ice: "is", ido: "io", iii: "ii", iku: "iu", ile: "ie", ina: "ia", ind: "id", ipk: "ik", ita: "it", jav: "jv", jpn: "ja", kal: "kl", kan: "kn", kas: "ks", kau: "kr", kaz: "kk", khm: "km", kik: "ki", kin: "rw", kir: "ky", kom: "kv", kon: "kg", kor: "ko", kua: "kj", kur: "ku", lao: "lo", lat: "la", lav: "lv", lim: "li", lin: "ln", lit: "lt", ltz: "lb", lub: "lu", lug: "lg", mac: "mk", mah: "mh", mal: "ml", mao: "mi", mar: "mr", may: "ms", mlg: "mg", mlt: "mt", mon: "mn", nau: "na", nav: "nv", nbl: "nr", nde: "nd", ndo: "ng", nep: "ne", nno: "nn", nob: "nb", nor: "no", nya: "ny", oci: "oc", oji: "oj", ori: "or", orm: "om", oss: "os", pan: "pa", per: "fa", pli: "pi", pol: "pl", por: "pt", pus: "ps", que: "qu", roh: "rm", rum: "ro", run: "rn", rus: "ru", sag: "sg", san: "sa", sin: "si", slo: "sk", slv: "sl", sme: "se", smo: "sm", sna: "sn", snd: "sd", som: "so", sot: "st", spa: "es", srd: "sc", srp: "sr", ssw: "ss", sun: "su", swa: "sw", swe: "sv", tah: "ty", tam: "ta", tat: "tt", tel: "te", tgk: "tg", tgl: "tl", tha: "th", tib: "bo", tir: "ti", ton: "to", tsn: "tn", tso: "ts", tuk: "tk", tur: "tr", twi: "tw", uig: "ug", ukr: "uk", urd: "ur", uzb: "uz", ven: "ve", vie: "vi", vol: "vo", wel: "cy", wln: "wa", wol: "wo", xho: "xh", yid: "yi", yor: "yo", zha: "za", zul: "zu"
                }
        })})
})()
})();
/* >>>>>>/framework/servicelocator.js:13086 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Services");
    var ServiceEntry = WinJS.Class.define(function(factory, isCritical) {
            this._factory = factory;
            this.isCritical = isCritical
        }, {
            isCritical: false, _factory: null, _cache: null, service: function service() {
                    if (!this._cache)
                        this._cache = this._factory();
                    return this._cache
                }, reset: function reset() {
                    if (this._cache && this._cache.dispose)
                        this._cache.dispose();
                    this._cache = null
                }
        });
    WinJS.Namespace.define("MS.Entertainment", {ServiceLocator: MS.Entertainment.UI.Framework.define(function() {
            throw"ServiceLocator contains only static methods.";
        }, {}, {
            _serviceTable: {}, _validateIdentifierOrThrow: function _validateIdentifierOrThrow(candidateIdentifier) {
                    if (!MS.Entertainment.Services.hasOwnProperty(candidateIdentifier))
                        throw"Unknown service identifier passed into Service Locator: " + candidateIdentifier;
                }, getService: function getService(identifier) {
                    var serviceTable = this._serviceTable;
                    var serviceEntry = null;
                    this._validateIdentifierOrThrow(identifier);
                    if (!serviceTable.hasOwnProperty(identifier)) {
                        MS.Entertainment.Services.fail("Attempt to retrieve a service that has not been registered: " + identifier);
                        return null
                    }
                    serviceEntry = serviceTable[identifier];
                    return serviceEntry.service()
                }, isServiceRegistered: function isServiceRegistered(identifier) {
                    return !!this._serviceTable.hasOwnProperty(identifier)
                }, register: function register(identifier, factory, isCritical) {
                    var serviceTable = this._serviceTable;
                    this._validateIdentifierOrThrow(identifier);
                    if (serviceTable.hasOwnProperty(identifier))
                        throw"Attempt to register a second service for an already registered service identifier: " + identifier;
                    if (typeof factory !== "function")
                        throw"Attempt to register something besides a function as a service factory: " + identifier;
                    serviceTable[identifier] = new ServiceEntry(factory, isCritical)
                }, unregister: function unregister(identifier) {
                    var serviceEntry;
                    var serviceTable = this._serviceTable;
                    this._validateIdentifierOrThrow(identifier);
                    serviceEntry = serviceTable[identifier];
                    if (serviceEntry)
                        serviceEntry.reset();
                    delete serviceTable[identifier]
                }, cleanupNonCriticalServices: function cleanupNonCriticalServices() {
                    var serviceTable = this._serviceTable;
                    for (var id in serviceTable) {
                        if (serviceTable[id].isCritical)
                            continue;
                        serviceTable[id].reset()
                    }
                }, getTestHooks: function getTestHooks() {
                    var that = this;
                    var testHooks = null;
                    testHooks = {getServiceTable: function getServiceTable() {
                            return that._serviceTable
                        }};
                    return testHooks
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Services", {
        actions: "actions", adService: "adService", anonymousFreePlay: "anonymousFreePlay", appNotification: "appNotification", appToolbar: "appToolbar", applicationStateManager: "applicationStateManager", assetDetails: "assetDetails", backButton: "backButton", bookmarkOperationsWatcher: "bookmarkOperationsWatcher", contentRestrictionService: "contentRestrictionService", contentRestrictionStateHandler: "contentRestrictionStateHandler", cloudCollection: "cloudCollection", cloudRestrictionCollection: "cloudRestrictionCollection", collectionChangeNotifier: "collectionChangeNotifier", contextualCommandService: "contextualCommandService", dashboardRefresher: "dashboardRefresher", dateTimeFormatters: "dateTimeFormatters", deviceGroupService: "deviceGroupService", dragData: "dragData", featureEnablement: "featureEnablement", findFriends: "findFriends", fileTransfer: "fileTransfer", fileTransferNotifications: "fileTransferNotifications", freePlayLimits: "freePlayLimits", gamesPurchaseHistory: "gamesPurchaseHistory", graceNoteService: "graceNoteService", idleApplicationService: "idleApplicationService", informationArchitecture: "informationArchitecture", interactionNotifier: "interactionNotifier", knownFolders: "knownFolders", listNotification: "listNotification", marketplace: "marketplace", mediaStore: "mediaStore", musicStateHandler: "musicStateHandler", navigation: "navigation", networkStatus: "networkStatus", nowPlayingControlManager: "nowPlayingControlManager", nowPlayingViewModel: "nowPlayingViewModel", mediaDeleted: "mediaDeleted", pinnedList: "pinnedList", pinToStartScreen: "pinToStartScreen", pinToStartScreenInterop: "pinToStartScreenInterop", playbackErrorDisplayService: "playbackErrorDisplayService", playbackEventNotifications: "playbackEventNotifications", playlists: "playlists", playToReceiverNativeService: "playToReceiverNativeService", progressNotification: "progressNotification", purchaseFlowProvider: "purchaseFlowProvider", purchaseHistory: "purchaseHistory", richPresence: "richPresence", readingCloudCollection: "readingCloudCollection", sessionManager: "sessionManager", searchResultCounts: "searchResultCounts", shareDecoder: "shareDecoder", shareEncoder: "shareEncoder", shareHost: "shareHost", shareSender: "shareSender", shareTarget: "shareTarget", shortcutManager: "shortcutManager", signedInUser: "signedInUser", signIn: "signIn", smartDJList: "smartDJList", syncManager: "syncManager", systemMTCMetadataUpdater: "systemMTCMetadataUpdater", tileManager: "tileManager", trackRestrictionCollection: "trackRestrictionCollection", typeToSearch: "typeToSearch", uiState: "uiState", upgradeReminderDisplayer: "upgradeReminderDisplayer", userEngagementService: "userEngagementService", userLibraryManager: "userLibraryManager", userTimeTelemetryManager: "userTimeTelemetryManager", userUsageData: "userUsageData", videoCloudCollection: "videoCloudCollection", videoDetailsUiState: "videoDetailsUiState", volumeService: "volumeService", watchlistService: "watchlistService", welcomeDialogService: "welcomeDialogService", winJSNavigation: "winJSNavigation", xboxLive: "xboxLive", xhr: "xhr"
    })
})()
})();
/* >>>>>>/framework/featureenablementservice.js:13162 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Framework) {
                var FeatureEnablement = (function() {
                        function FeatureEnablement(){}
                        FeatureEnablement.prototype.isEnabled = function(featureItem) {
                            var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                            return featureEnablement.isEnabled(featureItem)
                        };
                        FeatureEnablement.prototype.areAllFeaturesEnabled = function(featureItems) {
                            if (!featureItems)
                                return false;
                            var featuresEnabled = true;
                            var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                            for (var i = 0; i < featureItems.length; i++) {
                                featuresEnabled = featureEnablement.isEnabled(featureItems[i]);
                                if (!featuresEnabled)
                                    break
                            }
                            return featuresEnabled
                        };
                        return FeatureEnablement
                    })();
                Framework.FeatureEnablement = FeatureEnablement;
                MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.featureEnablement, function FeatureEnablementFactory() {
                    return new MS.Entertainment.UI.Framework.FeatureEnablement
                })
            })(UI.Framework || (UI.Framework = {}));
            var Framework = UI.Framework
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/telemetryutilities.js:13203 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Utilities");
    WinJS.Namespace.define("MS.Entertainment.Utilities.Telemetry", {
        _adsClicked: [], _previewsPlayed: [], _enableLogging: false, _totalTimeCounterStart: 0, _somethingPlaying: false, _lastBufferedEvent: {}, openDataPoint: function openDataPoint() {
                var platLog = Microsoft.Entertainment.Platform.Logging;
                var dataPoint = new platLog.DataPoint(platLog.LoggingLevel.telemetry);
                if (MS.Entertainment.Utilities.Telemetry._enableLogging && WebUnitExtensions.TelemetryDataPointWrapper)
                    dataPoint = new WebUnitExtensions.TelemetryDataPointWrapper(dataPoint);
                return dataPoint
            }, openKeystoneDataPoint: function openKeystoneDataPoint() {
                var dataPoint = this.openDataPoint();
                dataPoint.appendDestination(Microsoft.Entertainment.Platform.Logging.TelemetryListener.keystone);
                dataPoint.appendParameter(this.KeystoneParameterNames.Mode, this._getScreenMode());
                return dataPoint
            }, closeDataPoint: function closeDataPoint(dataPoint) {
                if (MS.Entertainment.UI.Application && MS.Entertainment.UI.Application.Helpers && MS.Entertainment.UI.Application.Helpers.activationTelemetryData)
                    MS.Entertainment.UI.Application.Helpers.activationTelemetryData.push(dataPoint);
                else
                    dataPoint.write()
            }, appendUIPath: function appendUIPath(dataPoint) {
                var currentLocation = MS.Entertainment.Utilities.getCurrentUserLocation();
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.UIPath, currentLocation)
            }, appendLastUIPath: function appendLastUIPath(dataPoint) {
                var service = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                if (service.canNavigateBack) {
                    var backStack = service._backStack;
                    var lastPage = backStack._stack[backStack._stack.length - 1];
                    var lastLocation = "None";
                    if (lastPage)
                        lastLocation = lastPage.page.iaNode.moniker;
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.LastUIPath, lastLocation)
                }
            }, isCurrentPageSearchPage: function isCurrentPageSearchPage() {
                var currentPage;
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                    currentPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage;
                if (currentPage && currentPage.overrideFragmentUrl)
                    if (MS.Entertainment.Utilities.isMusicApp || MS.Entertainment.Utilities.isVideoApp)
                        return currentPage.iaNode && currentPage.iaNode.moniker === MS.Entertainment.UI.Monikers.searchPage;
                    else
                        return currentPage.overrideFragmentUrl.match(/SearchNavStub.html$/i);
                return false
            }, _getScreenMode: function _getScreenMode() {
                var currentMode = "Unknown";
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                if (uiStateService)
                    if (uiStateService.isSnapped)
                        currentMode = "ViewSnapped";
                    else if (uiStateService.isFilled)
                        currentMode = "ViewFilled";
                    else
                        currentMode = "ViewFullscreen";
                return currentMode
            }, _anonymousUserId: null, _getUserIdValue: function _getUserIdValue() {
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn) && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                    return MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).xuid;
                else {
                    if (!this._anonymousUserId)
                        this._anonymousUserId = Microsoft.Entertainment.Marketplace.Marketplace.generateGuid();
                    return this._anonymousUserId
                }
            }, _getUsersValue: function _getUsersValue() {
                var userId;
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn) && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                    userId = "x:" + MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).xuid;
                else {
                    if (!this._anonymousUserId)
                        this._anonymousUserId = Microsoft.Entertainment.Marketplace.Marketplace.generateGuid();
                    userId = "a:" + this._anonymousUserId
                }
                return userId
            }, _keystoneStarted: false, ensureKeystoneStarted: function ensureKeystoneStarted() {
                if (!MS.Entertainment.Utilities.isVideoApp2 || this._keystoneStarted)
                    return;
                this._keystoneStarted = true;
                this.startKeystoneHeartbeat()
            }, _keystoneHeartbeatTimerId: undefined, startKeystoneHeartbeat: function startKeystoneHeartbeat() {
                if (MS.Entertainment.Utilities.isVideoApp2 && !this._keystoneHeartbeatTimerId) {
                    var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var heartbeatInterval = isNaN(config.telemetry.keystoneHeartbeatInterval) ? 30 * 1000 : config.telemetry.keystoneHeartbeatInterval;
                    this._keystoneHeartbeatTimerId = setInterval(function() {
                        MS.Entertainment.Utilities.Telemetry.logKeystoneEvent(MS.Entertainment.Utilities.Telemetry.KeystoneEvents.AppHeartbeat)
                    }, heartbeatInterval)
                }
            }, priceFromOffer: function priceFromOffer(media, offer) {
                var price = String.empty;
                if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                    if (offer && offer.price)
                        price = offer.price + " " + offer.priceCurrencyCode;
                return price
            }, mediaTypeNameForTelemetry: function mediaTypeNameForTelemetry(media) {
                var name;
                var mediaType = media && media.mediaType;
                var defaultPlatformType = (media && media.defaultPlatformType) || String.empty;
                var downloadType = media && media.downloadType;
                switch (mediaType) {
                    case Microsoft.Entertainment.Queries.ObjectType.video:
                        if (media.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo)
                            name = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.MusicVideo;
                        else if (media.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode)
                            name = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.TVEpisode;
                        else
                            name = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Movie;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                        name = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.TVSeries;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                        name = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.TVSeason;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.person:
                        name = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Artist;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.album:
                        name = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Album;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.track:
                        name = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Song;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.playlist:
                        name = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Playlist;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.game:
                        if (defaultPlatformType)
                            name = defaultPlatformType + " " + MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Game;
                        else
                            name = downloadType || MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Game;
                        break;
                    default:
                        name = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.unknown;
                        break
                }
                return name
            }, internalLogTelemetryEvent: function internalLogTelemetryEvent(dataPoint, event)
            {
                dataPoint.appendEventName(event);
                for (var i = 2; i < arguments.length - 1; i += 2) {
                    var key = arguments[i];
                    var value = arguments[i + 1];
                    if (key && value !== undefined)
                        dataPoint.appendParameter(key, value)
                }
                this.closeDataPoint(dataPoint)
            }, logTelemetryEvent: function logTelemetryEvent(event) {
                var dataPoint = this.openDataPoint();
                var args = Array.prototype.slice.call(arguments);
                args.unshift(dataPoint);
                this.internalLogTelemetryEvent.apply(this, args)
            }, logKeystoneEvent: function(event) {
                if (!MS.Entertainment.Utilities.isVideoApp2)
                    return;
                var dataPoint = this.openKeystoneDataPoint();
                var args = Array.prototype.slice.call(arguments);
                args.unshift(dataPoint);
                this.internalLogTelemetryEvent.apply(this, args)
            }, logTelemetryEventWithParameterArray: function logTelemetryEventWithParameterArray(event, parameterArray) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(event);
                for (var i = 0; i < parameterArray.length; i++)
                    if (parameterArray[i].parameterName && parameterArray[i].parameterValue !== undefined && parameterArray[i].parameterValue !== null)
                        dataPoint.appendParameter(parameterArray[i].parameterName, parameterArray[i].parameterValue);
                    else
                        MS.Entertainment.Utilities.fail("logTelemetryEventWithParameterArray called with invalid parameterArray element. Event: " + event);
                this.closeDataPoint(dataPoint)
            }, logTelemetryEventWithUIPath: function logTelemetryEventWithUIPath(event, parameterArray) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(event);
                this.appendUIPath(dataPoint);
                if (parameterArray)
                    for (var i = 0; i < parameterArray.length; i++)
                        if (parameterArray[i].parameterName && parameterArray[i].parameterValue !== undefined && parameterArray[i].parameterValue !== null)
                            dataPoint.appendParameter(parameterArray[i].parameterName, parameterArray[i].parameterValue);
                        else
                            MS.Entertainment.Utilities.fail("logTelemetryEventWithUIPath called with invalid parameterArray element. Event: " + event);
                this.closeDataPoint(dataPoint)
            }, logSearchEnter: function logSearchEnter(media) {
                var Queries = Microsoft.Entertainment.Queries;
                if (!media || (media.videoType !== Queries.VideoType.movie && media.mediaType !== Queries.ObjectType.tvSeries && media.mediaType !== Queries.ObjectType.person && media.mediaType !== Queries.ObjectType.album && media.mediaType !== Queries.ObjectType.track))
                    return;
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SearchEnter);
                this.appendUIPath(dataPoint);
                this.appendLastUIPath(dataPoint);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.EDSSearch, true);
                var typeName = this.mediaTypeNameForTelemetry(media);
                var mediaName = media.name || String.empty;
                var bingId = media.canonicalId || MS.Entertainment.Utilities.EMPTY_GUID;
                var zuneId = media.zuneId || MS.Entertainment.Utilities.EMPTY_GUID;
                var impressionGuid = media.impressionGuid || MS.Entertainment.Utilities.EMPTY_GUID;
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SearchImpressionGuid, impressionGuid);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, typeName);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaName, mediaName);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BingMediaId, bingId);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProviderMediaId, zuneId);
                this.closeDataPoint(dataPoint)
            }, logSearchExit: function logSearchExit(media) {
                var Queries = Microsoft.Entertainment.Queries;
                if (!media || (media.videoType !== Queries.VideoType.movie && media.mediaType !== Queries.ObjectType.tvSeries && media.mediaType !== Queries.ObjectType.person && media.mediaType !== Queries.ObjectType.album && media.mediaType !== Queries.ObjectType.track))
                    return;
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SearchExit);
                this.appendUIPath(dataPoint);
                this.appendLastUIPath(dataPoint);
                var typeName = this.mediaTypeNameForTelemetry(media);
                var mediaName = media.name || String.empty;
                var bingId = media.canonicalId || MS.Entertainment.Utilities.EMPTY_GUID;
                var zuneId = media.zuneId || MS.Entertainment.Utilities.EMPTY_GUID;
                var inCollection = media.inCollection || false;
                var impressionGuid = media.impressionGuid || MS.Entertainment.Utilities.EMPTY_GUID;
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SearchImpressionGuid, impressionGuid);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, typeName);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaName, mediaName);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BingMediaId, bingId);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProviderMediaId, zuneId);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.InCollection, inCollection);
                this.closeDataPoint(dataPoint)
            }, logSearchWordWheelEnter: function logSearchWordWheel(title, mediaType, videoType) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SearchWordWheelEnter);
                this.appendUIPath(dataPoint);
                this.appendLastUIPath(dataPoint);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SelectedItemTitle, title);
                var typeName = MS.Entertainment.Utilities.getMediaTypeName(mediaType, videoType);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SelectedItemMediaType, typeName);
                this.closeDataPoint(dataPoint)
            }, logPlayPreview: function logPlayPreview(media, fromAd) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PreviewPlayed);
                this.appendUIPath(dataPoint);
                var typeName = this.mediaTypeNameForTelemetry(media);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaName, media.name);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, typeName);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.FromAd, fromAd);
                if (fromAd)
                    this._adsClicked.push(media.serviceId);
                this._previewsPlayed.push(media.serviceId);
                this.closeDataPoint(dataPoint)
            }, logSubscriptionSignupPrePurchase: function logSubscriptionSignupPrePurchase(subscription) {
                if (!subscription)
                    return;
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SubscriptionSignupPrePurchase);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.OfferId, subscription.offerId);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Title, subscription.title);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Price, subscription.price);
                this.closeDataPoint(dataPoint)
            }, logSubscriptionSignupPurchaseMade: function logSubscriptionSignupPurchaseMade(subscription) {
                if (!subscription)
                    return;
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SubscriptionSignupPurchaseMade);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.OfferId, subscription.offerId);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Title, subscription.title);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Price, subscription.price);
                this.closeDataPoint(dataPoint)
            }, logPurchaseMade: function logPurchaseMade(media, offer) {
                this.logPurchaseHappened(media, offer);
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseMade);
                this.appendUIPath(dataPoint);
                var typeName = this.mediaTypeNameForTelemetry(media);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, typeName);
                if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason) {
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaName, media.seriesTitle + " " + media.name);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, media.seasonServiceId);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, MS.Entertainment.Utilities.Telemetry.getCorrelationId(media.seasonServiceId))
                }
                else {
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaName, media.name);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, media.serviceId);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, MS.Entertainment.Utilities.Telemetry.getCorrelationId(media.serviceId))
                }
                var price = this.priceFromOffer(media, offer);
                if (price)
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Price, price);
                if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason) {
                    var licenseRight = offer.licenseRight;
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.licenseRight, licenseRight)
                }
                if (MS.Entertainment.Utilities.isVideoApp1) {
                    var videoPostRollABTestName = MS.Entertainment.ViewModels.VideoPostRollHelpers.abTestName;
                    var videoPostRollABGroupName = MS.Entertainment.ViewModels.VideoPostRollHelpers.abGroupName;
                    if (videoPostRollABTestName && videoPostRollABGroupName) {
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ABTestName, videoPostRollABTestName);
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ABGroupName, videoPostRollABGroupName)
                    }
                }
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                if (uiStateService.deepLinkSource) {
                    dataPoint.appendParameter("DeepLinkSource", uiStateService.deepLinkSource);
                    dataPoint.appendParameter("DeepLinkSourceID", uiStateService.deepLinkSourceID);
                    var secondsSinceLaunch = (Date.now() - uiStateService.deepLinkLaunchTime) / 1000;
                    dataPoint.appendParameter("DeepLinkSecondsSinceLaunch", secondsSinceLaunch)
                }
                var fromAd = false;
                var fromPreview = false;
                var i;
                for (i = 0; i < this._adsClicked.length; i++)
                    if (this._adsClicked[i] === media.serviceId) {
                        fromAd = true;
                        break
                    }
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.FromAd, fromAd);
                for (i = 0; i < this._previewsPlayed.length; i++)
                    if (this._previewsPlayed[i] === media.serviceId) {
                        fromPreview = true;
                        break
                    }
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.FromPreview, fromPreview);
                this.closeDataPoint(dataPoint)
            }, logVideoPurchaseAttempt: function logVideoPurchaseAttempt(media, offer, purchaseState) {
                if (!media || !offer)
                    return;
                this.logKeystoneVideoPurchase(media, offer, purchaseState);
                if (!purchaseState || purchaseState === this.PurchaseStates.Succeeded)
                    this.logPurchaseMade(media, offer)
            }, logKeystoneVideoPurchase: function logKeystoneVideoPurchase(media, offer, purchaseState) {
                if (!media || !offer)
                    return;
                var ObjectType = Microsoft.Entertainment.Queries.ObjectType;
                var ServiceLocator = MS.Entertainment.ServiceLocator;
                var Services = MS.Entertainment.Services;
                var telemetryParams = [this.KeystoneEvents.Purchase];
                var offerId = offer.offerId;
                if (offerId)
                    telemetryParams.push(this.KeystoneParameterNames.OfferId, offerId);
                var mediaType = media.mediaType;
                var mediaTypeName = this.mediaTypeNameForTelemetry(media);
                telemetryParams.push(this.KeystoneParameterNames.MediaType, mediaTypeName);
                var mediaName,
                    mediaId;
                if (mediaType === ObjectType.tvSeason) {
                    mediaName = media.seriesTitle + " " + media.name;
                    mediaId = media.seasonServiceId
                }
                else {
                    mediaName = media.name;
                    mediaId = media.serviceId
                }
                telemetryParams.push(this.KeystoneParameterNames.MediaName, mediaName);
                var correlationId = MS.Entertainment.Utilities.Telemetry.getCorrelationId(mediaId);
                if (correlationId)
                    telemetryParams.push(this.KeystoneParameterNames.CorrelationId, correlationId);
                var price = this.priceFromOffer(media, offer);
                if (price)
                    telemetryParams.push(this.KeystoneParameterNames.Price, price);
                if (mediaType === ObjectType.video || mediaType === ObjectType.tvSeason) {
                    var rightsTelemetryParams = this._getKeystoneVideoRightsTelemetry(media, mediaType, offer);
                    if (rightsTelemetryParams && Array.isArray(rightsTelemetryParams))
                        telemetryParams = telemetryParams.concat(rightsTelemetryParams)
                }
                var bingId = media.canonicalId;
                if (bingId && !MS.Entertainment.Utilities.isEmptyGuid(bingId))
                    telemetryParams.push(this.KeystoneParameterNames.BingId, bingId);
                var zuneId = media.zuneId;
                if (zuneId && !MS.Entertainment.Utilities.isEmptyGuid(zuneId))
                    telemetryParams.push(this.KeystoneParameterNames.ZuneId, zuneId);
                if (ServiceLocator.isServiceRegistered(Services.signedInUser)) {
                    var signedInUserService = ServiceLocator.getService(Services.signedInUser);
                    var locale = signedInUserService.locale;
                    if (locale)
                        telemetryParams.push(this.KeystoneParameterNames.Locale, locale)
                }
                if (ServiceLocator.isServiceRegistered(Services.navigation)) {
                    var navigationService = ServiceLocator.getService(Services.navigation);
                    var pageMonikers = navigationService.getBackStackPageMonikers();
                    var currentPageMoniker = WinJS.Utilities.getMember("currentPage.iaNode.moniker", navigationService);
                    if (currentPageMoniker)
                        pageMonikers.push(currentPageMoniker);
                    var uiPath;
                    if (pageMonikers && Array.isArray(pageMonikers))
                        uiPath = pageMonikers.reduce(function(prev, curr) {
                            return prev + " / " + curr
                        });
                    if (uiPath)
                        telemetryParams.push(this.KeystoneParameterNames.UiPath, uiPath)
                }
                telemetryParams.push(this.KeystoneParameterNames.State, purchaseState);
                this.logKeystoneEvent.apply(this, telemetryParams)
            }, _getKeystoneVideoRightsTelemetry: function _getKeystoneVideoRightsTelemetry(media, mediaType, offer) {
                var ObjectType = Microsoft.Entertainment.Queries.ObjectType;
                var MarketplaceRight = MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight;
                var telemetryParams = [];
                if (mediaType === ObjectType.video) {
                    var mediaInstanceId = offer.mediaInstanceId;
                    if (mediaInstanceId)
                        telemetryParams.push(this.KeystoneParameterNames.MediaInstanceId, mediaInstanceId);
                    var videoDefinition = offer.videoDefinition;
                    if (videoDefinition)
                        telemetryParams.push(this.KeystoneParameterNames.VideoDefinition, videoDefinition);
                    var videoCodec = offer.videoEncoding;
                    if (videoCodec)
                        telemetryParams.push(this.KeystoneParameterNames.VideoCodec, videoCodec);
                    var audioLanguage = offer.primaryAudioLanguage;
                    if (audioLanguage)
                        telemetryParams.push(this.KeystoneParameterNames.AudioLanguage, audioLanguage);
                    var audioEncoding = offer.encoding;
                    if (audioEncoding)
                        telemetryParams.push(this.KeystoneParameterNames.AudioEncoding, audioEncoding);
                    var videoFileUrl = offer.videoFileUrl;
                    if (videoFileUrl)
                        telemetryParams.push(this.KeystoneParameterNames.VideoFileUrl, videoFileUrl);
                    var hasCaptions = media.hasCaptions;
                    telemetryParams.push(this.KeystoneParameterNames.HasCaptions, hasCaptions)
                }
                var deliveryFormat = offer.deliveryFormat;
                if (deliveryFormat)
                    telemetryParams.push(this.KeystoneParameterNames.DeliveryFormat, deliveryFormat);
                var paymentInstruments = offer.paymentInstruments;
                var paymentInstrumentsString;
                if (Array.isArray(paymentInstruments))
                    paymentInstrumentsString = paymentInstruments.join(", ");
                else if (String.isString(paymentInstruments))
                    paymentInstrumentsString = paymentInstruments;
                if (paymentInstrumentsString)
                    telemetryParams.push(this.KeystoneParameterNames.PaymentInstruments, paymentInstrumentsString);
                var licenseRight = offer.licenseRight;
                if (licenseRight) {
                    var acquisitionType;
                    if (licenseRight === MarketplaceRight.Rent || licenseRight === MarketplaceRight.RentStream)
                        acquisitionType = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Rental;
                    else
                        acquisitionType = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Purchase;
                    telemetryParams.push(this.KeystoneParameterNames.AcquisitionType, acquisitionType)
                }
                return telemetryParams
            }, logShare: function logShare(sharePackage) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.ShareCharm);
                if (sharePackage && sharePackage.package) {
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ShareTitle, sharePackage.package.title);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ShareUri, sharePackage.package.uri);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaId, sharePackage.package.mediaId);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, this.mediaTypeNameForTelemetry(sharePackage.package));
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaName, sharePackage.package.mediaTitle)
                }
                this.appendUIPath(dataPoint);
                this.closeDataPoint(dataPoint)
            }, logAdClicked: function logAdClicked(adInfo) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.X8AdClicked);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AdInfo, adInfo);
                this.appendUIPath(dataPoint);
                this.closeDataPoint(dataPoint)
            }, _logPlaybackControl: function _logPlaybackControl(controlUsed, whereUsed) {
                var dataPoint = this.openDataPoint();
                this.appendUIPath(dataPoint);
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PlaybackControl);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ControlUsed, controlUsed);
                var whereUsedMapped = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Unknown;
                if (whereUsed.indexOf("nowPlayingTransportControls") !== -1 || whereUsed.indexOf("fullScreenNowPlaying-transportControls") !== -1)
                    whereUsedMapped = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.NowPlaying;
                else if (whereUsed.indexOf("globalTransportControls") !== -1)
                    whereUsedMapped = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.GlobalAppbar;
                else if (whereUsed.indexOf("appBarTransportControls") !== -1 || whereUsed.indexOf("appMenuHeader") !== -1)
                    whereUsedMapped = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.AppBar;
                else if (whereUsed.indexOf("homeHubNowPlayingTile") !== -1)
                    whereUsedMapped = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.HomeNPTile;
                else if (whereUsed.indexOf("snappedTransportControls") !== -1)
                    whereUsedMapped = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.SnappedAppBar;
                else if (whereUsed.indexOf("mediaKey") !== -1)
                    whereUsedMapped = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.MediaKey;
                else if (whereUsed.indexOf("voiceCommand") !== -1)
                    whereUsedMapped = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.VoiceCommand;
                else if (whereUsed.indexOf("controls-") !== -1 || whereUsed.indexOf("adControls-") !== -1 || whereUsed.indexOf("currentItem-") !== -1 || whereUsed.indexOf("commonOverlays-transportControls") !== -1)
                    whereUsedMapped = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.MusicTransportControls;
                else
                    MS.Entertainment.Utilities.assert(false, "unrecognised location for playback control telemetry");
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.WhereUsed, whereUsedMapped);
                this.closeDataPoint(dataPoint)
            }, logPlayClicked: function logPlayClicked(whereUsed) {
                this._logPlaybackControl(MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Play, whereUsed)
            }, logPauseClicked: function logPauseClicked(whereUsed) {
                this._logPlaybackControl(MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Pause, whereUsed)
            }, logStopClicked: function logStopClicked(whereUsed) {
                this._logPlaybackControl(MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Stop, whereUsed)
            }, logPreviousClicked: function logPreviousClicked(whereUsed) {
                this._logPlaybackControl(MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Previous, whereUsed)
            }, logNextClicked: function logNextClicked(whereUsed) {
                this._logPlaybackControl(MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Next, whereUsed)
            }, logPlaybackAttempted: function logPlaybackAttempted(mediaInstance) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PlaybackAttempted);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.NetworkStatus, this._getNetworkStatus());
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.OSVersion, this._getOSVersion());
                this._appendPlaybackCommonDataToDataPoint(mediaInstance, dataPoint);
                this.closeDataPoint(dataPoint)
            }, logGetPreferredStreamSucceeded: function logGetPreferredStreamSucceeded(retries) {
                this.logGetPreferredStreamResult(true, null, retries)
            }, logGetPreferredStreamFailed: function logGetPreferredStreamFailed(reason, retries) {
                this.logGetPreferredStreamResult(false, reason, retries)
            }, logGetPreferredStreamResult: function logGetPreferredStreamResult(success, reason, retries) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.GetPreferredStreamResult);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Success, success);
                if (reason)
                    if (reason.number)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Reason, reason.number);
                    else
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Reason, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Unknown);
                else
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Reason, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Unknown);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Retries, retries ? retries : 0);
                this.closeDataPoint(dataPoint)
            }, logSemanticZoom: function logSemanticZoom(initMethod) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SemanticZoom);
                this.appendUIPath(dataPoint);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MethodInitiated, initMethod);
                this.closeDataPoint(dataPoint)
            }, logVolumeSelected: function logVolumeSelected(value) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.VolumeSelected);
                this.appendUIPath(dataPoint);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.VolumeValue, value);
                this.closeDataPoint(dataPoint)
            }, logMuteStateSelected: function logMuteStateSelected(state) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.MuteStateSelected);
                this.appendUIPath(dataPoint);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MuteState, state);
                this.closeDataPoint(dataPoint)
            }, _correlationIds: {}, getCorrelationId: function getCorrelationId(serviceId) {
                var correlationId = String.empty;
                if (!MS.Entertainment.Utilities.isEmptyGuid(serviceId))
                    correlationId = MS.Entertainment.Utilities.Telemetry._correlationIds[serviceId] || String.empty;
                return correlationId
            }, setCorrelationId: function setCorrelationId(serviceId) {
                if (!MS.Entertainment.Utilities.isEmptyGuid(serviceId))
                    MS.Entertainment.Utilities.Telemetry._correlationIds[serviceId] = Microsoft.Entertainment.Marketplace.Marketplace.generateGuid()
            }, findCorrelationIdForMediaItem: function findCorrelationIdForMediaItem(mediaItem) {
                var correlationId;
                if (mediaItem) {
                    var possibleServiceIds = [mediaItem.serviceId, mediaItem.zuneId, mediaItem.canonicalId];
                    var mediaIsTVContent = MS.Entertainment.Utilities.isAnyTV(mediaItem);
                    if (mediaIsTVContent) {
                        possibleServiceIds.push(mediaItem.seriesId);
                        possibleServiceIds.push(mediaItem.seriesZuneId);
                        possibleServiceIds.push(mediaItem.seriesServiceId);
                        possibleServiceIds.push(mediaItem.canonicalSeriesId);
                        possibleServiceIds.push(mediaItem.seasonServiceId);
                        possibleServiceIds.push(mediaItem.canonicalSeasonId);
                        possibleServiceIds.push(mediaItem.seasonZuneId)
                    }
                    for (var i = 0; i < possibleServiceIds.length; i++) {
                        correlationId = MS.Entertainment.Utilities.Telemetry.getCorrelationId(possibleServiceIds[i]);
                        if (correlationId && MS.Entertainment.Utilities.isValidServiceId(correlationId))
                            break
                    }
                }
                return correlationId
            }, getParentProductGuid: function getParentProductGuid(mediaItem) {
                var parentProductId = String.empty;
                if (MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem))
                    parentProductId = mediaItem.seriesId;
                else if (MS.Entertainment.Platform.PlaybackHelpers.isTVEpisode(mediaItem))
                    parentProductId = mediaItem.seasonServiceId || mediaItem.canonicalSeasonId || String.empty;
                return parentProductId
            }, _getNetworkStatus: function _getNetworkStatus() {
                var isOnline = MS.Entertainment.UI.NetworkStatusService.isOnline() ? "online" : "offline";
                var networkStatusStringArray = ["unknown", "unrestricted", "throttled", "onDemand", "localOnly", "none"];
                return isOnline + ":" + networkStatusStringArray[MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).networkStatus]
            }, _getOSVersion: function _getOSVersion() {
                var osVersion = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.unknown;
                if (MS.Entertainment.Utilities.isApp1) {
                    var versionRegex = /NT\s[\d.]+/;
                    var version = versionRegex.exec(window.navigator.appVersion);
                    if (version.length > 0)
                        osVersion = version[0]
                }
                else {
                    var developmentKitProperties = WinJS.Utilities.getMember("Windows.Xbox.System.Internal.DevelopmentKit.DevelopmentKitProperties");
                    if (developmentKitProperties)
                        osVersion = developmentKitProperties["shellVersion"]
                }
                return osVersion
            }, _getFileExtensionFromMediaInstance: function getFileExtensionFromMediaInstance(mediaInstance)
            {
                var extension = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.unknown;
                MS.Entertainment.Platform.Playback.assert(mediaInstance, "tried to determine path for undefined mediaInstance");
                try {
                    if (mediaInstance) {
                        var path = String.empty;
                        if (!mediaInstance.isLocal && mediaInstance.source && !MS.Entertainment.Utilities.isBlobUrl(mediaInstance.source))
                            path = mediaInstance.source;
                        else if (mediaInstance._mediaItem && mediaInstance._mediaItem.data)
                            if (mediaInstance._mediaItem.data.filePath)
                                path = mediaInstance._mediaItem.data.filePath;
                            else if (mediaInstance._mediaItem.data.fileItem) {
                                if (mediaInstance._mediaItem.data.fileItem.fileType)
                                    extension = mediaInstance._mediaItem.data.fileItem.fileType.toLowerCase();
                                else if (mediaInstance._mediaItem.data.fileItem.path)
                                    path = mediaInstance._mediaItem.data.fileItem.path
                            }
                            else if (mediaInstance._mediaItem.data.fileType)
                                extension = mediaInstance._mediaItem.data.fileType.toLowerCase();
                            else if (mediaInstance._mediaItem.data.path)
                                path = mediaInstance._mediaItem.data.path;
                        if (path.length > 0)
                            extension = Windows.Foundation.Uri(path).extension.toLowerCase()
                    }
                }
                catch(e) {
                    MS.Entertainment.Platform.Playback.assert(false, "failed to determine extension for path")
                }
                if (!extension)
                    extension = "no extension";
                return extension
            }, _getUrlFromMediaInstance: function _getUrlFromMediaInstance(mediaInstance) {
                var url = "undetermined";
                MS.Entertainment.Platform.Playback.assert(mediaInstance, "tried to determine url for undefined mediaInstance");
                if (mediaInstance)
                    if ((mediaInstance.isLocal && Microsoft.Entertainment.Configuration.ConfigurationManager().telemetry.flightId) || (!mediaInstance.isLocal && !MS.Entertainment.Utilities.isAmsterdamApp) || (!mediaInstance.isLocal && MS.Entertainment.Utilities.isAmsterdamApp && Microsoft.Entertainment.Configuration.ConfigurationManager().telemetry.flightId))
                        if (!mediaInstance.isLocal && mediaInstance.source && !MS.Entertainment.Utilities.isBlobUrl(mediaInstance.source))
                            url = mediaInstance.source;
                        else if (mediaInstance._mediaItem && mediaInstance._mediaItem.data)
                            if (mediaInstance._mediaItem.data.path)
                                url = mediaInstance._mediaItem.data.path;
                            else if (mediaInstance._mediaItem.data.fileItem && mediaInstance._mediaItem.data.fileItem.path)
                                url = mediaInstance._mediaItem.data.fileItem.path;
                            else if (mediaInstance._mediaItem.data.filePath)
                                url = mediaInstance._mediaItem.data.filePath;
                return url
            }, _getIsDrmFromMediaInstance: function _getDrmStateFromMediaInstance(mediaInstance) {
                var isDRM = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.unknown;
                if (mediaInstance)
                    switch (mediaInstance.protectionState) {
                        case MS.Entertainment.Platform.Playback.ProtectionState.drmProtected:
                            isDRM = "true";
                            break;
                        case MS.Entertainment.Platform.Playback.ProtectionState.unprotected:
                            isDRM = "false";
                            break;
                        case MS.Entertainment.Platform.Playback.ProtectionState.unknown:
                            isDRM = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.unknown;
                            break;
                        default:
                            MS.Entertainment.Platform.Playback.assert(false, "unknown protection state in logging");
                            break
                    }
                return isDRM
            }, _getIdFromMediaInstance: function _getIdFromMediaInstance(mediaInstance) {
                var id = 0;
                if (mediaInstance)
                    id = (mediaInstance.mediaInstanceId ? mediaInstance.mediaInstanceId : mediaInstance.libraryId);
                return id
            }, _getSmidFromMediaInstance: function _getSmidFromMediaInstance(mediaInstance) {
                var id = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.unknown;
                if (mediaInstance && mediaInstance._mediaItem && mediaInstance._mediaItem.data && mediaInstance._mediaItem.data.zuneId)
                    id = mediaInstance._mediaItem.data.zuneId;
                return id
            }, _getParentSmidFromMediaInstance: function _getParentSmidFromMediaInstance(mediaInstance) {
                return WinJS.Utilities.getMember("_mediaItem.data.seasonServiceId", mediaInstance) || WinJS.Utilities.getMember("_mediaItem.data.canonicalSeasonId", mediaInstance) || MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.unknown
            }, _getPlaybackSource: function _getPlaybackSource(mediaInstance) {
                var playbackSource = MS.Entertainment.Platform.PlaybackHelpers.lastPlaybackSource;
                var acquisitionData = WinJS.Utilities.getMember("_mediaItem.data.acquisitionData", mediaInstance);
                if (acquisitionData) {
                    if (!playbackSource && acquisitionData.acquisitionContext)
                        playbackSource = MS.Entertainment.Utilities.getAcquisitionContextFromEnum(acquisitionData.acquisitionContext);
                    if (acquisitionData.acquisitionContextType)
                        playbackSource = (playbackSource ? playbackSource + ": " : String.empty) + MS.Entertainment.Utilities.getAcquisitionContextTypeFromEnum(acquisitionData.acquisitionContextType)
                }
                return playbackSource
            }, _appendPlaybackCommonDataToDataPoint: function _appendPlaybackCommonDataToDataPoint(mediaInstance, dataPoint) {
                try {
                    if (mediaInstance) {
                        var media = mediaInstance;
                        if (mediaInstance && mediaInstance._mediaItem && mediaInstance._mediaItem.data)
                            media = mediaInstance._mediaItem.data;
                        var typeName = this.mediaTypeNameForTelemetry(media);
                        var isSubscription = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signedInUser) ? MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).isSubscription : "false";
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, typeName);
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.IsSubscription, isSubscription);
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.IsDrm, this._getIsDrmFromMediaInstance(mediaInstance));
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.IsStream, mediaInstance.isLocal ? "false" : "true");
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Id, this._getIdFromMediaInstance(mediaInstance));
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Smid, this._getSmidFromMediaInstance(mediaInstance));
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ParentSmid, this._getParentSmidFromMediaInstance(mediaInstance));
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Extension, this._getFileExtensionFromMediaInstance(mediaInstance));
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Url, this._getUrlFromMediaInstance(mediaInstance));
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PlaybackSource, this._getPlaybackSource(mediaInstance));
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.IsPreview, mediaInstance.isPreview ? "true" : "false");
                        var correlationId = MS.Entertainment.Utilities.Telemetry.getCorrelationId(media.serviceId) || MS.Entertainment.Utilities.Telemetry.getCorrelationId(this._getParentSmidFromMediaInstance(mediaInstance));
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, correlationId)
                    }
                    else
                        MS.Entertainment.Utilities.assert(mediaInstance, "MediaInstance is null")
                }
                catch(ex) {
                    MS.Entertainment.Utilities.fail("Unable to append parameter to data point")
                }
            }, logPlaybackHappened: function logPlaybackHappened(mediaInstance) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PlaybackHappened);
                this._appendPlaybackCommonDataToDataPoint(mediaInstance, dataPoint);
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                var playLocation = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.unknown;
                if (uiStateService.isAppVisible) {
                    if (uiStateService.isSnapped)
                        playLocation = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.snapped;
                    else if (uiStateService.nowPlayingVisible || uiStateService.nowPlayingInset)
                        playLocation = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.nowplaying
                }
                else
                    playLocation = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.background;
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PlayLocation, playLocation);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.NetworkStatus, this._getNetworkStatus());
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.OSVersion, this._getOSVersion());
                this.closeDataPoint(dataPoint)
            }, shouldSkipLoggingPlaybackError: function shouldSkipLoggingPlaybackError(error, context) {
                var shouldSkip = false;
                if (error) {
                    if (context.search("forceError") >= 0)
                        return true;
                    var errorCode = (error.msExtendedCode) ? error.msExtendedCode : error.code;
                    switch (errorCode) {
                        case MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_HDMI_OUTPUT_LOST.code:
                            shouldSkip = true;
                            break
                    }
                }
                return shouldSkip
            }, logMediaPlayerPlayback: function logMediaPlayerPlayback(item) {
                var ItemType = MS.Entertainment.Data.MediaBrowser.ItemType;
                if (!item || !item.hydrate || (item.itemType !== ItemType.video && item.itemType !== ItemType.music))
                    return;
                item.hydrate().done(function() {
                    var telemetryParameterArray = [];
                    this._packBaseItemTelemetry(item, telemetryParameterArray);
                    var telemetryEventName;
                    if (item.itemType === ItemType.video) {
                        telemetryEventName = this.TelemetryEvents.MediaPlayerVideoPlayback;
                        this._packVideoItemTelemetry(item, telemetryParameterArray)
                    }
                    else if (item.itemType === ItemType.music) {
                        telemetryEventName = this.TelemetryEvents.MediaPlayerMusicPlayback;
                        this._packMusicItemTelemetry(item, telemetryParameterArray)
                    }
                    this.logTelemetryEventWithParameterArray(telemetryEventName, telemetryParameterArray)
                }.bind(this))
            }, _packBaseItemTelemetry: function _packBaseItemTelemetry(item, telemetryParameterArray) {
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.DriveType, parameterValue: item.driveType || MS.Entertainment.Data.MediaBrowser.DriveType.unknown
                });
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.FileType, parameterValue: item.fileType || String.empty
                })
            }, _packVideoItemTelemetry: function _packVideoItemTelemetry(item, telemetryParameterArray) {
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.AudioCodec, parameterValue: item.audioCodec || MS.Entertainment.Utilities.EMPTY_GUID
                });
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.VideoCodec, parameterValue: item.videoCodec || MS.Entertainment.Utilities.EMPTY_GUID
                });
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.ResolutionHeight, parameterValue: item.height || -1
                });
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.ResolutionWidth, parameterValue: item.width || -1
                });
                var orientation = item.orientation;
                if (!isFinite(orientation) || orientation < 0 || orientation > 270 || orientation % 90 !== 0)
                    orientation = -1;
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.Orientation, parameterValue: orientation
                });
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.Bitrate, parameterValue: item.bitrate || -1
                });
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.Duration, parameterValue: item.duration || -1
                })
            }, _packMusicItemTelemetry: function _packMusicItemTelemetry(item, telemetryParameterArray) {
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.AudioCodec, parameterValue: item.audioCodec || MS.Entertainment.Utilities.EMPTY_GUID
                });
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.Bitrate, parameterValue: item.bitrate || -1
                });
                telemetryParameterArray.push({
                    parameterName: this.TelemetryParameterNames.Duration, parameterValue: item.duration || -1
                })
            }, logPlaybackError: function logPlaybackError(mediaInstance, error, context) {
                if (!mediaInstance)
                    return;
                MS.Entertainment.UI.Controls.assert(error || mediaInstance._errorDescriptor, "null error passed to logPlaybackError");
                if (!error && mediaInstance._errorDescriptor)
                    error = mediaInstance._errorDescriptor;
                var errorContext = context || String.empty;
                if (mediaInstance._errorDescriptor && mediaInstance._errorDescriptor.context && mediaInstance._errorDescriptor.context !== errorContext)
                    errorContext += (errorContext ? "; " : String.empty) + mediaInstance._errorDescriptor.context;
                if (error && error.context && (errorContext !== error.context))
                    errorContext += (errorContext ? "; " : String.empty) + error.context;
                if (this.shouldSkipLoggingPlaybackError(error, errorContext))
                    return;
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PlaybackError);
                this._appendPlaybackCommonDataToDataPoint(mediaInstance, dataPoint);
                var isSubscription = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signedInUser) ? MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).isSubscription : "false";
                var mediaType = this.mediaTypeNameForTelemetry(mediaInstance._mediaItem.data);
                var errorCode = error && error.code ? error.code : 0;
                var msExtendedCode = error && error.msExtendedCode ? error.msExtendedCode : errorCode;
                var networkStatus = this._getNetworkStatus();
                var stackTraceLimitDefault = Error.stackTraceLimit;
                Error.stackTraceLimit = Infinity;
                var stackTrace = MS.Entertainment.UI.Debug.getStackTrace();
                Error.stackTraceLimit = stackTraceLimitDefault;
                stackTrace = stackTrace.replace(/.*at.*(winjs|Function\scode|CoreFX).*\)\n/g, String.empty).replace(/\(.+?.*\//g, "(").replace(/.*at\s/g, String.empty);
                var stackTraceArray = stackTrace.split("\n");
                stackTraceArray.reverse();
                stackTrace = stackTraceArray.join("\n").substring(0, 2048);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, errorCode);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ExtendedCode, msExtendedCode);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorContext, errorContext);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.NetworkStatus, networkStatus);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.OSVersion, this._getOSVersion());
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.StackTrace, stackTrace);
                MS.Entertainment.Platform.Playback.Etw.traceString("Telemetry::Playback::PlaybackError:" + " ErrorCode=" + MS.Entertainment.Platform.Playback.errorToString(errorCode) + "| msExtendedCode=" + MS.Entertainment.Platform.Playback.errorToString(msExtendedCode) + "| ErrorContext=" + errorContext + "| MediaType=" + mediaType + "| isSubscription=" + isSubscription + "| NetworkStatus=" + networkStatus + "| StackTrace=" + stackTrace);
                this._getMediaInfo(mediaInstance).then(function onSuccess(mediaDetail) {
                    var audioSubtype = String.empty;
                    var videoSubtype = String.empty;
                    var mimeType = String.empty;
                    var sourceCharacter = String.empty;
                    if (mediaDetail) {
                        audioSubtype = mediaDetail.audioSubtype;
                        videoSubtype = mediaDetail.videoSubtype;
                        mimeType = mediaDetail.mimeType;
                        sourceCharacter = mediaDetail.sourceCharacter
                    }
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MFSRAudioSubtype, audioSubtype);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MFSRVideoSubtype, videoSubtype);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MFSRMimeType, mimeType);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MFSRSourceCharacter, sourceCharacter);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MFSRIsDRM, "false");
                    this.closeDataPoint(dataPoint);
                    if (mediaInstance.source && mediaInstance.source.match && mediaInstance.source.match(/^blob*:/i))
                        URL.revokeObjectURL(mediaInstance.source);
                    MS.Entertainment.Platform.Playback.Etw.traceString("Telemetry::Playback::PlaybackError: data from MF Source Reader" + " audioSubtype=" + audioSubtype + "| videoSubtype=" + videoSubtype + "| mimeType=" + mimeType + "| sourceCharacter=" + sourceCharacter + "| isDRM=false")
                }.bind(this), function onError(error) {
                    if (error && error.number === MS.Entertainment.Platform.Playback.Error.MF_E_DRM_UNSUPPORTED.code) {
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MFSRIsDRM, "true");
                        MS.Entertainment.Platform.Playback.Etw.traceString("Telemetry::Playback::PlaybackError: data from MF Source Reader isDRM=true")
                    }
                    else {
                        var mfSRError = String.empty;
                        if (error)
                            mfSRError = MS.Entertainment.Platform.Playback.errorToString(error.number);
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MFSRError, mfSRError);
                        MS.Entertainment.Platform.Playback.Etw.traceString("Telemetry::Playback::PlaybackError: error from MF Source Reader" + " error=" + mfSRError)
                    }
                    this.closeDataPoint(dataPoint);
                    if (mediaInstance.source && mediaInstance.source.match && mediaInstance.source.match(/^blob*:/i))
                        URL.revokeObjectURL(mediaInstance.source)
                }.bind(this))
            }, _getMediaInfo: function _getMediaInfo(mediaInstance) {
                var completion = null;
                var error = null;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c;
                        error = e
                    });
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                if (mediaInstance && mediaInstance.isLocal && mediaInstance.source && (MS.Entertainment.Utilities.isWindowsBlue || (MS.Entertainment.Utilities.isAmsterdamApp && configurationManager.amsterdam.onUsbErrorCodecRetrievalEnabled))) {
                    var getFileItemPromise = null;
                    var checkSizePromise = null;
                    var fileItem = null;
                    var retrieveCodecInfo = false;
                    if (mediaInstance._mediaItem.data.mediaType === "music")
                        fileItem = MS.Entertainment.Data.deflate(mediaInstance._mediaItem.data);
                    else if (mediaInstance._mediaItem.data.fileItem && (mediaInstance._mediaItem.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video || mediaInstance._mediaItem.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.track))
                        fileItem = mediaInstance._mediaItem.data.fileItem;
                    if (fileItem)
                        getFileItemPromise = WinJS.Promise.as();
                    else {
                        var filePath = MS.Entertainment.Data.deflate(mediaInstance._mediaItem.data).FilePath;
                        if (filePath)
                            getFileItemPromise = Windows.Storage.StorageFile.getFileFromPathAsync(filePath).then(function onGetFileSuceeded(loadedFile) {
                                fileItem = loadedFile
                            }, function onGetFileFailed(error) {
                                MS.Entertainment.Platform.Playback.Etw.traceString("telemetryUtility::_getMediaInfo() failed to get a file item with error " + MS.Entertainment.Utilities.stringify(error));
                                completion(null);
                                return promise
                            });
                        else {
                            MS.Entertainment.Platform.Playback.Etw.traceString("telemetryUtility::_getMediaInfo() failed to get a file item because the file path was invalid.");
                            completion(null);
                            return promise
                        }
                    }
                    return getFileItemPromise.then(function getFileSize() {
                            if (fileItem && WinJS.Utilities.getMember("properties.retrievePropertiesAsync", fileItem)) {
                                var requestedCodecProperties = ["System.Video.Compression", "System.Audio.Format", "System.MIMEType"];
                                return fileItem.properties.retrievePropertiesAsync(requestedCodecProperties).then(function onPropertiesRetrieved(codecProperties) {
                                        var mediaDetail = {};
                                        mediaDetail.videoSubtype = MS.Entertainment.Utilities.getMediaSubtypeNameFromGuid(codecProperties["System.Video.Compression"]);
                                        mediaDetail.audioSubtype = MS.Entertainment.Utilities.getMediaSubtypeNameFromGuid(codecProperties["System.Audio.Format"]);
                                        mediaDetail.mimeType = codecProperties["System.MIMEType"] ? codecProperties["System.MIMEType"] : "";
                                        mediaDetail.sourceCharacter = String.empty;
                                        completion(mediaDetail);
                                        return promise
                                    }, function onPropertiesFailed(error) {
                                        MS.Entertainment.Platform.Playback.Etw.traceString("telemetryUtility::_getMediaInfo() failed to get file properties with error " + MS.Entertainment.Utilities.stringify(error));
                                        completion(null)
                                    })
                            }
                            else {
                                MS.Entertainment.Platform.Playback.Etw.traceString("telemetryUtility::_getMediaInfo() failed to get file properties because we don't have a valid fileItem.");
                                completion(null);
                                return promise
                            }
                        })
                }
                else {
                    MS.Entertainment.Platform.Playback.Etw.traceString("telemetryUtility::_getMediaInfo(): Codec retrieval was prohibited by policy.");
                    completion(null);
                    return promise
                }
            }, logPlayerBufferState: function logPlayerBufferState(buffered, currentPosition, duration, playerType) {
                var bufferingLevel = 1.0;
                var minBufferedEventsIntervalMs = 15000;
                var maxBufferingLevel = 0.8;
                if (!this._lastBufferedEvent[playerType])
                    this._lastBufferedEvent[playerType] = {};
                var lastBufferedEvent = this._lastBufferedEvent[playerType];
                var startPositions = String.empty,
                    endPositions = String.empty;
                for (var i = 0; i < buffered.length; i++) {
                    startPositions += (buffered.start(i) + ";");
                    endPositions += (buffered.end(i) + ";");
                    bufferingLevel = Math.min(bufferingLevel, currentPosition / buffered.end(i));
                    if (Math.abs(duration - buffered.end(i)) <= 1.0) {
                        this._lastBufferedEvent[playerType] = null;
                        return
                    }
                }
                if (bufferingLevel < maxBufferingLevel && (lastBufferedEvent.timeStamp && Math.abs(Date.now() - lastBufferedEvent.timeStamp) < minBufferedEventsIntervalMs))
                    return;
                if (startPositions !== String.empty || endPositions !== String.empty) {
                    var dataPoint = this.openDataPoint();
                    dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PlayerBufferState);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.EventTime, Date.now());
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PlayerType, playerType);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BufferStart, startPositions);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BufferEnd, endPositions);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CurrentPosition, currentPosition);
                    this.closeDataPoint(dataPoint);
                    MS.Entertainment.Platform.Playback.Etw.traceString("Telemetry::Playback::PlayerBufferState: PlayerType=" + playerType + " BufferStart=" + startPositions + " BufferEnd=" + endPositions + " CurrentPosition=" + currentPosition);
                    if (playerType === "currentPlayer")
                        if (lastBufferedEvent.currentPosition === currentPosition && !lastBufferedEvent.hasStopped) {
                            lastBufferedEvent.hasStopped = true;
                            lastBufferedEvent.lastStoppedTimeStamp = Date.now()
                        }
                        else {
                            if (lastBufferedEvent.hasStopped && lastBufferedEvent.lastStoppedTimeStamp) {
                                var stoppedTimeInterval = Date.now() - lastBufferedEvent.lastStoppedTimeStamp;
                                MS.Entertainment.Platform.Playback.Etw.traceString("Telemetry::Playback::PlayerBufferState: Playback has stopped for " + stoppedTimeInterval + "ms due to buffering.")
                            }
                            lastBufferedEvent.hasStopped = false;
                            lastBufferedEvent.lastStoppedTimeStamp = null
                        }
                    lastBufferedEvent.timeStamp = Date.now();
                    lastBufferedEvent.currentPosition = currentPosition
                }
            }, logPlayToReceiverError: function logPlayToReceiverError(exception, message) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PlayToReceiverError);
                var errorCode = "0x" + (0xFFFFFFFF + exception.number + 1).toString(16);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, errorCode);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Message, message);
                this.closeDataPoint(dataPoint)
            }, logCommandClicked: function logCommandClicked(commandAction) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.CommandUsage);
                this.appendUIPath(dataPoint);
                MS.Entertainment.Utilities.assert(!!commandAction.automationId, "commandAction.automationId is null or undefined, commandAction.id = " + commandAction.id);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.commandId, commandAction.automationId);
                if (commandAction.title)
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.commandLabel, commandAction.title);
                if (commandAction.parameter) {
                    if (commandAction.parameter.abTests)
                        commandAction.parameter.abTests.forEach(function(abTest) {
                            if (abTest.abTestName)
                                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ABTestName, abTest.abTestName);
                            if (abTest.abGroupName)
                                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ABTestName, abTest.abGroupName)
                        });
                    if (commandAction.parameter.mediaItem) {
                        if (commandAction.parameter.mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.game) {
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.mediaType, commandAction.parameter.mediaItem.mediaType);
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.serviceId, commandAction.parameter.mediaItem.serviceId);
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.titleType, commandAction.parameter.mediaItem.titleType);
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.titleId, commandAction.parameter.mediaItem.titleId);
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.defaultPlatformType, commandAction.parameter.mediaItem.defaultPlatformType)
                        }
                        if (commandAction.parameter.mediaItem.name)
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.mediaName, commandAction.parameter.mediaItem.name);
                        if (commandAction.parameter.mediaItem.queryId)
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.queryId, commandAction.parameter.mediaItem.queryId);
                        if (commandAction.parameter.mediaItem.acquisitionData) {
                            if (commandAction.parameter.mediaItem.acquisitionData.acquisitionContext)
                                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContext, MS.Entertainment.Utilities.getAcquisitionContextFromEnum(commandAction.parameter.mediaItem.acquisitionData.acquisitionContext));
                            if (commandAction.parameter.mediaItem.acquisitionData.acquisitionContextType)
                                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContextType, MS.Entertainment.Utilities.getAcquisitionContextTypeFromEnum(commandAction.parameter.mediaItem.acquisitionData.acquisitionContextType));
                            if (commandAction.parameter.mediaItem.acquisitionData.acquisitionContextID)
                                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContextId, commandAction.parameter.mediaItem.acquisitionData.acquisitionContextID)
                        }
                    }
                    else if (commandAction.parameter.hub || commandAction.parameter.page) {
                        if (commandAction.parameter.hub)
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.hub, commandAction.parameter.hub);
                        if (commandAction.parameter.page)
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.page, commandAction.parameter.page);
                        if (commandAction.parameter.queryId)
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.queryId, commandAction.parameter.queryId)
                    }
                    if (commandAction.parameter.actionType)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.actionType, commandAction.parameter.actionType);
                    if (commandAction.parameter.executeLocation)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.executeLocation, commandAction.parameter.executeLocation)
                }
                else if (commandAction.userModel)
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.secondaryGamerTag, commandAction.userModel.gamerTag);
                this.closeDataPoint(dataPoint)
            }, logTransportControlsCommand: function logTransportControlsCommand(automationId, title) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.CommandUsage);
                this.appendUIPath(dataPoint);
                MS.Entertainment.Utilities.assert(!!automationId, "automationId is null or undefined, title = " + title);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.commandId, automationId);
                if (title)
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.commandLabel, title);
                this.closeDataPoint(dataPoint)
            }, logPopoverShown: function logPopoverShown(commandId, mediaItem) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PopoverDisplay);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.UIPart, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Popover);
                this.appendUIPath(dataPoint);
                if (commandId)
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.commandId, commandId);
                if (mediaItem) {
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.mediaType, mediaItem.mediaType);
                    if (mediaItem.serviceId)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.serviceId, mediaItem.serviceId);
                    if (mediaItem.seriesId)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.seriesId, mediaItem.seriesId);
                    if (mediaItem.titleId)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.titleId, mediaItem.titleId);
                    if (mediaItem.queryId)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.queryId, mediaItem.queryId);
                    if (mediaItem.name)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.name, mediaItem.name);
                    if (mediaItem.itemTypeQueryString)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.itemTypeQueryString, mediaItem.itemTypeQueryString)
                }
                this.closeDataPoint(dataPoint)
            }, logModifierClicked: function logModifierClicked(id, label) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.ModifierUsage);
                this.appendUIPath(dataPoint);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Label, label);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Id, id);
                this.closeDataPoint(dataPoint)
            }, logNotification: function logNotification(notification, isNewNotification) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.NotificationUsage);
                this.appendUIPath(dataPoint);
                MS.Entertainment.Utilities.assert(notification, "notification is null or undefined");
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.NotificationTitle, notification.title);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.NotificationCategory, notification.category.name);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.IsNewNotification, isNewNotification ? "Yes" : "No");
                this.closeDataPoint(dataPoint)
            }, logPageAction: function logPageAction(pageContentDataObject, currentLocation, destination, parameterArray) {
                var telemetryParameterNames = MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames;
                var telemetryValueNames = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues;
                if (!currentLocation) {
                    MS.Entertainment.Utilities.fail("Page Action call missing currentLocation");
                    return
                }
                if (!pageContentDataObject) {
                    MS.Entertainment.Utilities.fail("Page Action call missing pageContentDataObject");
                    return
                }
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PageAction);
                dataPoint.appendParameter(telemetryParameterNames.UserId, this._getUserIdValue());
                dataPoint.appendParameter(telemetryParameterNames.Users, this._getUsersValue());
                dataPoint.appendParameter(telemetryParameterNames.ActionTypeId, MS.Entertainment.Utilities.Telemetry.InputActionTypes.Click);
                dataPoint.appendParameter(telemetryParameterNames.ActionInputMethodId, MS.Entertainment.Utilities.Telemetry.InputMethodTypes.Click);
                if (currentLocation.uri) {
                    dataPoint.appendParameter(telemetryParameterNames.PageURI, currentLocation.uri);
                    var splitUri = currentLocation.uri.split("/");
                    if (splitUri)
                        dataPoint.appendParameter(telemetryParameterNames.PageName, splitUri[splitUri.length - 1]);
                    else
                        dataPoint.appendParameter(telemetryParameterNames.PageName, currentLocation.uri)
                }
                else {
                    dataPoint.appendParameter(telemetryParameterNames.PageURI, telemetryValueNames.Unknown);
                    dataPoint.appendParameter(telemetryParameterNames.PageName, telemetryValueNames.Unknown)
                }
                dataPoint.appendParameter(telemetryParameterNames.PageTypeId, currentLocation.pageTypeId);
                dataPoint.appendParameter(telemetryParameterNames.TemplateId, String.empty);
                if (destination) {
                    dataPoint.appendParameter(telemetryParameterNames.DestPageURI, destination.uri);
                    dataPoint.appendParameter(telemetryParameterNames.DestPageTypeId, destination.pageTypeId)
                }
                else {
                    dataPoint.appendParameter(telemetryParameterNames.DestPageURI, telemetryValueNames.None);
                    dataPoint.appendParameter(telemetryParameterNames.DestPageTypeId, telemetryValueNames.None)
                }
                dataPoint.appendParameter(telemetryParameterNames.CampaignId, String.empty);
                dataPoint.appendParameter(telemetryParameterNames.GroupId, String.empty);
                var jsonString = null;
                try {
                    jsonString = JSON.stringify(this._buildPageContentSlotForElement(pageContentDataObject))
                }
                catch(e) {
                    MS.Entertainment.Utilities.fail("failed to stringify page content: " + e);
                    jsonString = String.empty
                }
                dataPoint.appendParameter(telemetryParameterNames.ContentJsonVersion, 1.1);
                dataPoint.appendParameter(telemetryParameterNames.Content, jsonString);
                if (parameterArray && parameterArray.length)
                    for (var i = 0; i < parameterArray.length; i++)
                        if (parameterArray[i].parameterName && parameterArray[i].parameterValue !== undefined && parameterArray[i].parameterValue !== null)
                            dataPoint.appendParameter(parameterArray[i].parameterName, parameterArray[i].parameterValue);
                        else
                            MS.Entertainment.Utilities.fail("logPageAction called with invalid parameterArray element.  parameterName: " + parameterArray[i].parameterName);
                this.closeDataPoint(dataPoint)
            }, logPageView: function logPageView(rootElement, newPageInformation, refererPageInformation) {
                var telemetryParameterNames = MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames;
                var telemetryValueNames = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues;
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PageView);
                dataPoint.appendParameter(telemetryParameterNames.UserId, this._getUserIdValue());
                dataPoint.appendParameter(telemetryParameterNames.Users, this._getUsersValue());
                var refererUri = telemetryValueNames.Unknown;
                var refererTypeId = telemetryValueNames.Unknown;
                if (refererPageInformation) {
                    if (refererPageInformation.uri)
                        refererUri = refererPageInformation.uri;
                    if (refererPageInformation.pageTypeId)
                        refererTypeId = refererPageInformation.pageTypeId
                }
                var newPageUri = telemetryValueNames.Unknown;
                var newPageName = telemetryValueNames.Unknown;
                var newPageType = telemetryValueNames.Unknown;
                if (newPageInformation) {
                    if (newPageInformation.uri) {
                        newPageUri = newPageInformation.uri;
                        var splitUri = newPageInformation.uri.split("/");
                        if (splitUri)
                            newPageName = splitUri[splitUri.length - 1];
                        else
                            newPageName = newPageInformation.uri
                    }
                    if (newPageInformation.pageTypeId)
                        newPageType = newPageInformation.pageTypeId
                }
                dataPoint.appendParameter(telemetryParameterNames.PageURI, newPageUri);
                dataPoint.appendParameter(telemetryParameterNames.PageName, newPageName);
                dataPoint.appendParameter(telemetryParameterNames.RefererPageURI, refererUri);
                dataPoint.appendParameter(telemetryParameterNames.PageTypeId, newPageType);
                dataPoint.appendParameter(telemetryParameterNames.RefererPageTypeId, refererTypeId);
                dataPoint.appendParameter(telemetryParameterNames.PageTags, this._buildPageTagInformation(rootElement));
                dataPoint.appendParameter(telemetryParameterNames.PageParameters, String.empty);
                dataPoint.appendParameter(telemetryParameterNames.ProductCatalogId, String.empty);
                dataPoint.appendParameter(telemetryParameterNames.ProductId, String.empty);
                dataPoint.appendParameter(telemetryParameterNames.TemplateId, String.empty);
                dataPoint.appendParameter(telemetryParameterNames.ResolutionWidth, MS.Entertainment.Utilities.getWindowWidth());
                dataPoint.appendParameter(telemetryParameterNames.ResolutionHeight, MS.Entertainment.Utilities.getWindowHeight());
                var screenState = MS.Entertainment.Utilities.Telemetry.ScreenState.FullScreen;
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.uiState) && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped)
                    screenState = MS.Entertainment.Utilities.Telemetry.ScreenState.Snapped;
                dataPoint.appendParameter(telemetryParameterNames.ScreenState, screenState);
                dataPoint.appendParameter(telemetryParameterNames.ColorDepth, 24000);
                dataPoint.appendParameter(telemetryParameterNames.SkinId, String.empty);
                var authedParameter = MS.Entertainment.Utilities.Telemetry.SignInState.Anonymous;
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn) && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                    authedParameter = MS.Entertainment.Utilities.Telemetry.SignInState.Authenticated;
                dataPoint.appendParameter(telemetryParameterNames.AuthState, authedParameter);
                dataPoint.appendParameter(telemetryParameterNames.CampaignId, String.empty);
                dataPoint.appendParameter(telemetryParameterNames.GroupId, String.empty);
                dataPoint.appendParameter(telemetryParameterNames.ContentJsonVersion, 1.1);
                dataPoint.appendParameter(telemetryParameterNames.Content, this._buildPageContentInformation(rootElement));
                if (MS.Entertainment.Utilities.isVideoApp2 && (newPageInformation.uri === MS.Entertainment.UI.Monikers.movieDetailsPage || newPageInformation.uri === MS.Entertainment.UI.Monikers.tvDetailsPage)) {
                    var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                    var media = WinJS.Utilities.getMember("currentPage.options.mediaItem", navigationService);
                    if (media && media.hasServiceId) {
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaName, media.name);
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, media.serviceId);
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, MS.Entertainment.Utilities.Telemetry.getCorrelationId(media.serviceId))
                    }
                }
                this.closeDataPoint(dataPoint)
            }, _buildPageTagInformation: function _buildPageTagInformation(rootElement) {
                var rootToUse = rootElement ? rootElement : document.querySelector(".pageContainer.currentPage");
                var attributeElements = null;
                var resultString = String.empty;
                var result = null;
                if (rootToUse)
                    attributeElements = rootToUse.querySelectorAll("[data-ent-pagetag-name]");
                if (attributeElements && attributeElements.length)
                    for (var i = 0; i < attributeElements.length; i++) {
                        var pageTagName = null;
                        var pageTagValuePath = null;
                        var pageTagValue = null;
                        var pageTagItem = null;
                        var currentElement = attributeElements[i];
                        if (currentElement.hasAttribute("data-ent-pagetag-name"))
                            pageTagName = currentElement.getAttribute("data-ent-pagetag-name");
                        if (currentElement.hasAttribute("data-ent-pagetag-value"))
                            pageTagValuePath = currentElement.getAttribute("data-ent-pagetag-value");
                        MS.Entertainment.Utilities.assert(pageTagName, "element has data-ent-pagetag-name, but was empty");
                        MS.Entertainment.Utilities.assert(pageTagValuePath, "element has data-ent-pagetag-name, but has no or empty value");
                        if (pageTagValuePath)
                            pageTagValue = WinJS.Utilities.getMember(pageTagValuePath, currentElement.winControl || currentElement);
                        if (pageTagName && pageTagValue) {
                            result = result || {};
                            result[pageTagName] = pageTagValue
                        }
                    }
                if (result)
                    try {
                        resultString = JSON.stringify(result)
                    }
                    catch(e) {
                        MS.Entertainment.Utilities.fail("failed to stringify page tag: " + e)
                    }
                return resultString
            }, _buildPageContentInformation: function _buildPageContentInformation(rootElement) {
                var telemetryValueNames = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues;
                var rootToUse = rootElement ? rootElement : document.querySelector(".pageContainer.currentPage");
                if (!rootToUse)
                    return String.empty;
                var attributedElements = rootToUse.querySelectorAll("[data-ent-pagecontent]");
                var pageContentDataArray = this._buildPageContentArrayForList(attributedElements);
                var jsonString = String.empty;
                var pageContentObject = {SVer: "1.00"};
                pageContentObject.Slots = pageContentDataArray;
                try {
                    jsonString = JSON.stringify(pageContentObject)
                }
                catch(e) {
                    MS.Entertainment.Utilities.fail("failed to stringify page content: " + e)
                }
                return jsonString
            }, _buildPageContentArrayForList: function _buildPageContentObjectForElement(list) {
                var currentElement = null;
                var attributeValue = null;
                var pageContentTelemetryObject = null;
                var pageContentObjectProperty = null;
                var contentArray = [];
                for (var i = 0; i < list.length; i++) {
                    if (!list[i].hasAttribute("data-ent-pagecontent")) {
                        MS.Entertainment.Utilities.fail("element has invalid data-ent-pagecontent value");
                        continue
                    }
                    var attributeValue = list[i].getAttribute("data-ent-pagecontent");
                    if (!attributeValue) {
                        MS.Entertainment.Utilities.fail("element has data-ent-pagecontent, with no value");
                        continue
                    }
                    if (list[i].winControl)
                        pageContentObjectProperty = list[i].winControl[attributeValue];
                    else if (list[i][attributeValue])
                        pageContentObjectProperty = list[i][attributeValue];
                    else
                        pageContentObjectProperty = null;
                    if (pageContentObjectProperty && pageContentObjectProperty.mediaItem)
                        pageContentObjectProperty = pageContentObjectProperty.mediaItem;
                    pageContentTelemetryObject = this._buildPageContentSlotForElement({
                        slot: i, domElement: list[i], itemPropertyBag: pageContentObjectProperty
                    });
                    if (pageContentTelemetryObject)
                        contentArray.push(pageContentTelemetryObject)
                }
                return contentArray
            }, _buildPageContentSlotForElement: function _buildPageContentSlotForElement(pageContentObject) {
                var telemetryValueNames = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues;
                var contentCatalogIds = MS.Entertainment.Utilities.Telemetry.ContentCatalogId;
                var contentSourceIds = MS.Entertainment.Utilities.Telemetry.ContentSourceId;
                var contentTypeIds = MS.Entertainment.Utilities.Telemetry.ContentTypeId;
                var pageContentTelemetryObject = {};
                if (!pageContentObject)
                    return pageContentTelemetryObject;
                if (pageContentObject.slot >= 0)
                    pageContentTelemetryObject.SlotId = pageContentObject.slot.toString();
                else
                    pageContentTelemetryObject.SlotId = "-1";
                if (pageContentObject.itemPropertyBag) {
                    pageContentTelemetryObject.ContentId = pageContentObject.itemPropertyBag.serviceId;
                    pageContentTelemetryObject.ContentCatalogId = pageContentObject.itemPropertyBag.catalogId;
                    pageContentTelemetryObject.ContentSourceId = pageContentObject.itemPropertyBag.sourceId;
                    pageContentTelemetryObject.ContentTypeId = pageContentObject.itemPropertyBag.typeId || contentTypeIds.Editorial;
                    pageContentTelemetryObject.ContentName = pageContentObject.itemPropertyBag.name
                }
                else if (pageContentObject.domElement && pageContentObject.domElement.hasAttribute("data-win-automationid")) {
                    pageContentTelemetryObject.ContentId = pageContentObject.domElement.getAttribute("data-win-automationid");
                    pageContentTelemetryObject.ContentCatalogId = contentCatalogIds.App;
                    pageContentTelemetryObject.ContentSourceId = contentSourceIds.App;
                    pageContentTelemetryObject.ContentTypeId = contentTypeIds.App;
                    pageContentTelemetryObject.ContentName = pageContentTelemetryObject.ContentId
                }
                else {
                    pageContentTelemetryObject.ContentId = pageContentObject.contentId;
                    pageContentTelemetryObject.ContentCatalogId = pageContentObject.contentCatalogId;
                    pageContentTelemetryObject.ContentSourceId = pageContentObject.contentSourceId;
                    pageContentTelemetryObject.ContentTypeId = pageContentObject.contentTypeId;
                    pageContentTelemetryObject.ContentName = pageContentObject.contentName
                }
                var contentTagsValue = String.empty;
                if (pageContentObject.contentTags)
                    try {
                        contentTagsValue = JSON.stringify(pageContentObject.contentTags)
                    }
                    catch(e) {
                        MS.Entertainment.Utilities.fail("failed to stringify content tag: " + e)
                    }
                pageContentTelemetryObject.ContentTags = contentTagsValue;
                pageContentTelemetryObject.ProductCatalogId = String.empty;
                pageContentTelemetryObject.ProductId = String.empty;
                if (pageContentObject.areaName)
                    pageContentTelemetryObject.AreaId = pageContentObject.areaName;
                else if (pageContentObject.domElement)
                    pageContentTelemetryObject.AreaId = this._findAreaFromContentItem(pageContentObject.domElement);
                else
                    pageContentTelemetryObject.AreaId = telemetryValueNames.Unknown;
                pageContentTelemetryObject.CampaignId = String.empty;
                pageContentTelemetryObject.GroupId = String.empty;
                return pageContentTelemetryObject
            }, _findAreaFromContentItem: function _findAreaFromContentItem(element) {
                var currentElement = element;
                var areaName = String.empty;
                while (currentElement && !areaName) {
                    areaName = currentElement.getAttribute("data-ent-areaname") || String.empty;
                    currentElement = currentElement.parentElement
                }
                return areaName
            }, mediaUsageContentTypeName: function mediaUsageContentTypeName(media) {
                var name;
                name = media.edsMediaItemTypeString;
                if (!name) {
                    var mediaType = media.mediaType;
                    switch (mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            if (media.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode)
                                name = MS.Entertainment.Data.Query.edsMediaType.tvEpisode;
                            else if (media.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo)
                                name = MS.Entertainment.Data.Query.edsMediaType.musicVideo;
                            else if (media.videoType === Microsoft.Entertainment.Queries.VideoType.movie)
                                name = MS.Entertainment.Data.Query.edsMediaType.movie;
                            else
                                name = String.empty;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            name = MS.Entertainment.Data.Query.edsMediaType.tvSeries;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            name = MS.Entertainment.Data.Query.edsMediaType.tvSeason;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            name = MS.Entertainment.Data.Query.edsMediaType.musicArtist;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            name = MS.Entertainment.Data.Query.edsMediaType.album;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            name = MS.Entertainment.Data.Query.edsMediaType.track;
                            break;
                        default:
                            name = String.empty;
                            break
                    }
                }
                return name
            }, logMediaUsageHappened: function logMediaUsageHappened(playbackControl, position, eventType, isStartEvent) {
                if (!playbackControl)
                    return;
                var mediaInstance = playbackControl.currentMedia;
                if (playbackControl._player && playbackControl._player._currentMedia)
                    mediaInstance = playbackControl._player._currentMedia;
                var media = null;
                if (mediaInstance && mediaInstance._mediaItem && mediaInstance._mediaItem.data)
                    media = mediaInstance._mediaItem.data;
                if (!media)
                    return;
                var contentType = this.mediaUsageContentTypeName(media);
                if (contentType === MS.Entertainment.Data.Query.edsMediaType.track && mediaInstance) {
                    if (mediaInstance.isAudioAd)
                        contentType = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.MusicAd;
                    else if (mediaInstance.isPreview)
                        contentType = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.MusicPreview
                }
                else if (contentType === MS.Entertainment.Data.Query.edsMediaType.movie && mediaInstance && mediaInstance.isPreview)
                    contentType = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.VideoPreview;
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.MediaUsageEvent);
                dataPoint.appendDestination(Microsoft.Entertainment.Platform.Logging.TelemetryListener.mediaUsage);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.EventType, eventType);
                if (position)
                    position = (position | 0);
                if (position !== this.badPositionMs)
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Position, position);
                else {
                    MS.Entertainment.Utilities.assert(false, "playback position is 604800000(7days), duration is " + playbackControl.duration);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Position, String.empty)
                }
                if (!MS.Entertainment.Utilities.isEmptyGuid(media.canonicalId))
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BingMediaId, media.canonicalId);
                if (!MS.Entertainment.Utilities.isEmptyGuid(media.zuneId))
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProviderMediaId, media.zuneId);
                if (MS.Entertainment.Utilities.isEmptyGuid(media.canonicalId) && MS.Entertainment.Utilities.isEmptyGuid(media.zuneId)) {
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BingMediaId, String.empty);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProviderMediaId, String.empty)
                }
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ContentType, contentType);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.IsStream, mediaInstance && mediaInstance.isLocal ? "false" : "true");
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                if (uiStateService.isAppVisible)
                    if (uiStateService.isSnapped)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ScreenSize, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Docked);
                    else
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ScreenSize, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Full);
                else
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ScreenSize, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Minimized);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.IsDrm, this._getIsDrmFromMediaInstance(mediaInstance));
                var playbackDuration = 0;
                if (isStartEvent) {
                    var now = Date.now();
                    this._totalTimeCounterStart = now
                }
                else if (this._totalTimeCounterStart !== 0) {
                    playbackDuration = Date.now() - this._totalTimeCounterStart;
                    this._totalTimeCounterStart = 0
                }
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PlaybackDurationMs, playbackDuration);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProviderMediaInstanceId, mediaInstance && mediaInstance.mediaInstanceId ? mediaInstance.mediaInstanceId : String.empty);
                if (playbackControl.duration && playbackControl.duration > 0)
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaLengthMs, playbackControl.duration);
                else
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaLengthMs, mediaInstance && mediaInstance.duration ? mediaInstance.duration : String.empty);
                var acquisitionData = media.acquisitionData ? media.acquisitionData : (mediaInstance && mediaInstance.acquisitionData);
                if (acquisitionData) {
                    MS.Entertainment.Utilities.assert(acquisitionData.acquisitionContext, "Expected acquisition context to be defined for media usage event");
                    if (acquisitionData.acquisitionContext)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContext, MS.Entertainment.Utilities.getAcquisitionContextFromEnum(acquisitionData.acquisitionContext));
                    MS.Entertainment.Utilities.assert(acquisitionData.acquisitionContextType, "Expected acquisition context type to be defined for media usage event");
                    if (acquisitionData.acquisitionContextType)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContextType, MS.Entertainment.Utilities.getAcquisitionContextTypeFromEnum(acquisitionData.acquisitionContextType));
                    if (!MS.Entertainment.Utilities.isEmptyGuid(acquisitionData.acquisitionContextID)) {
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContextId, acquisitionData.acquisitionContextID);
                        if (acquisitionData.acquisitionContextType === Microsoft.Entertainment.Platform.AcquisitionContextType.playlist)
                            dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AdditionalContext, acquisitionData.acquisitionAdditionalContext || media.playlistName)
                    }
                    else if (acquisitionData.acquisitionContextType === Microsoft.Entertainment.Platform.AcquisitionContextType.track && !MS.Entertainment.Utilities.isEmptyGuid(media.canonicalId))
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContextId, (media.track && media.track.canonicalId) || media.canonicalId);
                    else if (acquisitionData.acquisitionContextType === Microsoft.Entertainment.Platform.AcquisitionContextType.album && media.album && !MS.Entertainment.Utilities.isEmptyGuid(media.album.canonicalId))
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContextId, media.album.canonicalId);
                    else if (acquisitionData.acquisitionContextType === Microsoft.Entertainment.Platform.AcquisitionContextType.artist && media.artist && !MS.Entertainment.Utilities.isEmptyGuid(media.artist.canonicalId))
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContextId, media.artist.canonicalId);
                    else if (acquisitionData.acquisitionContextType === Microsoft.Entertainment.Platform.AcquisitionContextType.playlist && MS.Entertainment.Utilities.isValidServiceId(media.playlistCloudSyncId)) {
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContextId, media.playlistCloudSyncId);
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AdditionalContext, media.playlistName)
                    }
                    else if (acquisitionData.acquisitionContextType === Microsoft.Entertainment.Platform.AcquisitionContextType.musicVideo && !MS.Entertainment.Utilities.isEmptyGuid(media.canonicalId))
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContextId, (media.musicVideo && media.musicVideo.canonicalId) || media.canonicalId)
                }
                else if (mediaInstance && mediaInstance.isAudioAd) {
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContext, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.MusicAd);
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionContextType, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.MusicAd)
                }
                this.closeDataPoint(dataPoint)
            }, logPlayHappened: function logPlayHappened(playbackControl, position) {
                if (this._somethingPlaying)
                    this.logMediaUsageHappened(playbackControl, position, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Resume, true);
                else
                    this.logMediaUsageHappened(playbackControl, position, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Play, true);
                this._somethingPlaying = true
            }, logPauseHappened: function logPauseHappened(playbackControl, position) {
                if (this._somethingPlaying)
                    this.logMediaUsageHappened(playbackControl, position, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Pause, false)
            }, logEndHappened: function logEndHappened(playbackControl, position) {
                if (this._somethingPlaying)
                    this.logMediaUsageHappened(playbackControl, position, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.End, false);
                this._somethingPlaying = false
            }, logSkipHappened: function logSkipHappened(playbackControl, position) {
                if (this._somethingPlaying)
                    this.logMediaUsageHappened(playbackControl, position, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Skip, false);
                this._somethingPlaying = false
            }, logPurchaseHappened: function logPurchaseHappened(media, offer) {
                if (!media || !offer)
                    return;
                var serviceIdToUse = null;
                if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason)
                    serviceIdToUse = media.seasonServiceId;
                else
                    serviceIdToUse = media.canonicalId;
                if (MS.Entertainment.Utilities.isEmptyGuid(media.zuneId) && MS.Entertainment.Utilities.isEmptyGuid(serviceIdToUse))
                    return;
                var contentType = this.mediaUsageContentTypeName(media);
                if (!contentType)
                    return;
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.MediaUsageEvent);
                dataPoint.appendDestination(Microsoft.Entertainment.Platform.Logging.TelemetryListener.mediaUsage);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.EventType, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Purchase);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Position, 0);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ContentType, contentType);
                if (!MS.Entertainment.Utilities.isEmptyGuid(serviceIdToUse))
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BingMediaId, serviceIdToUse);
                if (!MS.Entertainment.Utilities.isEmptyGuid(media.zuneId))
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProviderMediaId, media.zuneId);
                var acquisitionType = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Purchase;
                if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                    var licenseRight = offer.licenseRight;
                    if (licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent || licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream)
                        acquisitionType = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Rental
                }
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcquisitionType, acquisitionType);
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                if (uiStateService.isAppVisible)
                    if (uiStateService.isSnapped)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ScreenSize, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Docked);
                    else
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ScreenSize, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Full);
                else
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ScreenSize, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Minimized);
                this.closeDataPoint(dataPoint)
            }, logDownloadHappened: function logDownloadHappened(media) {
                if (!media)
                    return;
                if (MS.Entertainment.Utilities.isEmptyGuid(media.zuneId) && MS.Entertainment.Utilities.isEmptyGuid(media.canonicalId))
                    return;
                var contentType = this.mediaUsageContentTypeName(media);
                if (!contentType)
                    return;
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.MediaUsageEvent);
                dataPoint.appendDestination(Microsoft.Entertainment.Platform.Logging.TelemetryListener.mediaUsage);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.EventType, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Download);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Position, 0);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ContentType, contentType);
                if (!MS.Entertainment.Utilities.isEmptyGuid(media.canonicalId))
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BingMediaId, media.canonicalId);
                if (!MS.Entertainment.Utilities.isEmptyGuid(media.zuneId))
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProviderMediaId, media.zuneId);
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                if (uiStateService.isAppVisible)
                    if (uiStateService.isSnapped)
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ScreenSize, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Docked);
                    else
                        dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ScreenSize, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Full);
                else
                    dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ScreenSize, MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Minimized);
                this.closeDataPoint(dataPoint)
            }, logPlaybackErrorConvertedToGeneric: function logPlaybackErrorConvertedToGeneric(originalCode, originalExtendedCode, context) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PlaybackErrorConvertedToGeneric);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, (originalCode ? originalCode : 0));
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ExtendedCode, (originalExtendedCode ? originalExtendedCode : 0));
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Context, (context ? context : ""));
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PlaybackSource, MS.Entertainment.Platform.PlaybackHelpers.lastPlaybackSource);
                this.closeDataPoint(dataPoint)
            }, logDeviceGroupAction: function logDeviceGroupAction(action, errorCode) {
                if (!action)
                    return;
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.DeviceGroup);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Context, action);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, (errorCode ? errorCode : 0));
                this.closeDataPoint(dataPoint)
            }, logRootLicenseAcquisition: function logRootLicenseAcquisition(status, errorCode) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.RootLicenseAcquisition);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Status, status);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, (errorCode ? errorCode : 0));
                this.closeDataPoint(dataPoint)
            }, logReactiveLicenseAcquisitionProgress: function logReactiveLicenseAcquisitionProgress(mediaInstance, kid, state) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.ReactiveLicenseAcquisition);
                this._appendPlaybackCommonDataToDataPoint(mediaInstance, dataPoint);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.State, state);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Kid, kid ? kid : MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Unknown);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Miid, mediaInstance && mediaInstance.mediaInstanceId ? mediaInstance.mediaInstanceId : MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Unknown);
                this.closeDataPoint(dataPoint)
            }, logDRMIndividualization: function logDRMIndividualization(status) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.DRMIndividualization);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Status, status);
                this.closeDataPoint(dataPoint)
            }, logWelcomePanelDismissed: function logWelcomePanelDismissed() {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.WelcomePanelDismissed);
                this.appendUIPath(dataPoint);
                this.closeDataPoint(dataPoint)
            }, logWelcomePanelStartButton: function logWelcomePanelStartButton() {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.WelcomePanelStartButtonClicked);
                this.appendUIPath(dataPoint);
                this.closeDataPoint(dataPoint)
            }, logSignInWelcomePanel: function logSignInWelcomePanel() {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SignInWelcomePanel);
                this.appendUIPath(dataPoint);
                this.closeDataPoint(dataPoint)
            }, logErrorInMediaTagRemoval: function logErrorInMediaTagRemoval(error) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.ErrorInMediaTagRemoval);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Error, error);
                this.closeDataPoint(dataPoint)
            }, logVideoPostRollAction: function logVideoPostRollAction(abTestName, abGroupName, action) {
                var dataPoint = this.openDataPoint();
                dataPoint.appendEventName(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.VideoPostRollAction);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ABTestName, abTestName);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ABGroupName, abGroupName);
                dataPoint.appendParameter(MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.VideoPostRollAction, action);
                this.closeDataPoint(dataPoint)
            }, badPositionMs: 604800000, Events: {CloudMatchStateChangeMethod: "CloudMatchEnabledStateChangeMethod"}, StateChangeMethodValues: {
                dialog: "dialog", toggle: "toggle", notification: "notification"
            }, InputActionTypes: {Click: "1"}, InputMethodTypes: {Click: "8"}, ContentCatalogId: {
                App: "1", Compass: "2", XboxCatalog: "3", EDS: "4"
            }, ContentSourceId: {
                UAD: "1", Compass: "2", App: "3", Recommendation: "4", SDS: "5"
            }, ContentTypeId: {
                Advertisement: "1", Editorial: "2", App: "3", Webpage: "4", Weblink: "5", TextEntry: "6"
            }, PageTypeId: {
                Dash: "1", Webblend: "2", WebPage: "3", Popup: "4", Charm: "5", Menu: "6", AppBar: "7", SmartDJ: "8", Featured: "9", TopMusic: "10", Details: "11", VideoPostRoll: "12", Store: "13"
            }, ScreenState: {
                FullScreen: "FullScreen", Snapped: "Snapped"
            }, SignInState: {
                Authenticated: "Authenticated", Anonymous: "Anonymous"
            }, TelemetryEvents: {
                AccountCreation: "AccountCreation", AuthHeaderResult: "AuthHeaderResult", BlockPurchaseAllItemsFoundOnce: "BlockPurchaseAllItemsFoundOnce", BlockPurchaseAllowed: "BlockPurchaseAllowed", BlockPurchaseFullyOwnedInDb: "BlockPurchaseFullyOwnedInDb", BlockPurchaseFullyOwnedInCloud: "BlockPurchaseFullyOwnedInCloud", BlockPurchaseInventoryCheck: "BlockPurchaseInventoryCheck", BlockPurchaseNavigatedAway: "BlockPurchaseNavigatedAway", BlockPurchaseNoSL2K: "BlockPurchaseNoSL2K", BlockPurchaseErrorGeneric: "BlockPurchaseErrorGeneric", BlockPurchaseErrorPurchase: "BlockPurchaseErrorPurchase", BlockPurchaseErrorRental: "BlockPurchaseErrorRental", BlockPurchaseRegionBlocked: "BlockPurchaseRegionBlocked", CommandUsage: "CommandUsage", DeviceGroup: "DeviceGroup", DlnaDriveBrowse: "DlnaDriveBrowse", DRMIndividualization: "DRMIndividualization", ErrorInMediaTagRemoval: "ErrorInMediaTagRemoval", GetPreferredStreamResult: "GetPreferredStreamResult", HydratorWrongMediaType: "HydratorWrongMediaType", ImmersiveDetailsMetaDataUpdated: "ImmersiveDetailsMetaDataUpdated", MediaPlayerMusicPlayback: "MediaPlayerMusicPlayback", MediaPlayerVideoPlayback: "MediaPlayerVideoPlayback", MediaUsageEvent: "MediaUsageEvent", MuteStateSelected: "MuteStateSelected", ModifierUsage: "ModifierUsage", NetworkService: "NetworkService", NotificationUsage: "NotificationUsage", PageAction: "PageAction", PageView: "PageView", PaymentInstrumentationResponse: "PaymentInstrumentationResponse", PlayAllMusic: "PlayAllMusic", PlaybackAttempted: "PlaybackAttempted", PlaybackControl: "PlaybackControl", PlaybackError: "PlaybackError", PlaybackErrorConvertedToGeneric: "PlaybackErrorConvertedToGeneric", PlaybackHappened: "PlaybackHappened", PlayerBufferState: "PlayerBufferState", PlayToReceiverError: "PlayToReceiverError", PlayToReceiverPlaybackError: "PlayToReceiverPlaybackError", PlayToReceiverSessionCompleted: "PlayToReceiverSessionCompleted", PlayToReceiverSessionRequested: "PlayToReceiverSessionRequested", PlayToSenderAttempted: "PlayToSenderAttempted", PlayToSenderError: "PlayToSenderError", PlayToSenderPlaybackHappened: "PlayToSenderPlaybackHappened", PopoverDisplay: "PopoverDisplay", PreviewPlayed: "PreviewPlayed", PurchaseEntitlementsNotFound: "PurchaseEntitlementsNotFound", PurchaseMade: "PurchaseMade", PurchaseResponse: "PurchaseResponse", PurchaseReviewStart: "PurchaseReviewStart", RecentUpsellPanelShown: "RecentUpsellPanelShown", ReactiveLicenseAcquisition: "ReactiveLicenseAcquisition", RootLicenseAcquisition: "RootLicenseAcquisition", SearchEnter: "SearchEnter", SearchExit: "SearchExit", SearchGlyphClick: "SearchGlyphClick", SearchPanelLaunch: "SearchPanelLaunch", SearchPanelLaunchFailure: "SearchPanelLaunchFailure", SearchQuerySubmitted: "SearchQuerySubmitted", SearchWordWheelEnter: "SearchWordWheelEnter", SemanticZoom: "SemanticZoom", SendASmile: "Send A Smile", Settings: "Settings", ShareCharm: "ShareCharm", ShareEDSWebQueryComplete: "ShareEDSWebQueryInitiated", ShareEDSWebQueryInitiated: "ShareEDSWebQueryInitiated", SignIn: "SignIn", SignInWelcomePanel: "SignInWelcomePanel", SignOut: "SignOut", SubscriptionDetail: "SubscriptionDetail", SubscriptionSignupPrePurchase: "SubscriptionSignupPrePurchase", SubscriptionSignupPurchaseMade: "SubscriptionSignupPurchaseMade", UIFailure: "UIFailure", UnknownDriveBrowse: "UnknownDriveBrowse", UpsellDialogDisplayed: "UpsellDialogDisplayed", UsbDriveBrowse: "UsbDriveBrowse", UserEngagementCollectionMessageClicked: "UserEngagementCollectionMessageClicked", UserEngagementExternalLinkClicked: "UserEngagementExternalLinkClicked", UserEngagementMessageClick: "UserEngagementMessageClick", UserEngagementMessageDisplayed: "UserEngagementMessageDisplayed", VideoPostRollAction: "VideoPostRollAction", VideoPrePurchaseBlocked: "VideoPrePurchaseBlocked", VolumeSelected: "VolumeSelected", WebBlendError: "WebBlendError", WebBlendLaunch: "WebBlendLaunch", WelcomePageEntered: "WelcomePageEntered", WelcomePanelDismissed: "WelcomePanelDismissed", WelcomePanelStartButtonClicked: "WelcomePanelStartButtonClicked", WhatsNewDismissed: "WhatsNewDismissed", X8AdClicked: "X8AdClicked", X8NewPage: "X8NewPage", X8UsageTime: "X8UsageTime"
            }, TelemetryParameterNames: {
                ABGroupName: "ABGroupName", ABTestName: "ABTestName", AcceptTermsOfService: "AcceptTermsOfService", AcquisitionContext: "AcquisitionContext", AcquisitionContextId: "AcquisitionContextId", AcquisitionContextType: "AcquisitionContextType", AcquisitionType: "AcquisitionType", ActionInputMethodId: "ActionInputMethodId", actionType: "actionType", ActionTypeId: "ActionTypeId", AdInfo: "AdInfo", AdditionalContext: "AdditionalContext", AppMode: "AppMode", ArtistServiceId: "ArtistServiceId", AudioCodec: "AudioCodec", AuthHeaderResultText: "AuthHeaderResultText", AuthState: "AuthState", AutomationId: "AutomationId", BingMediaId: "BingMediaId", Bitrate: "Bitrate", BlockPurchaseAllItemFoundOnce: "BlockPurchaseAllItemFoundOnce", BlockPurchaseDatabaseRights: "BlockPurchaseDatabaseRights", BlockPurchaseServiceFailure: "BlockPurchaseServiceFailure", BlockPurchaseServicePurchaseRights: "BlockPurchaseServicePurchaseRights", BlockPurchaseServiceRentalRights: "BlockPurchaseServiceRentalRights", BlockPurchaseRentalConfigSetting: "BlockPurchaseRentalConfigSetting", BlockPurchaseTotalItems: "BlockPurchaseTotalItems", BufferEnd: "BufferEnd", BufferStart: "BufferStart", CampaignId: "CampaignId", CanonicalId: "CanonicalId", CanSignOut: "CanSignOut", ColorDepth: "ColorDepth", commandId: "commandId", commandLabel: "commandLabel", CommentText: "CommentText", Content: "Content", ContentID: "ContentID", ContentIssueType: "ContentIssueType", ContentJsonVersion: "ContentJsonVersion", ContentType: "ContentType", Context: "Context", ControlUsed: "ControlUsed", CorrelationID: "CorrelationID", CreateAccount: "CreateAccount", CurrentPage: "currentPage", CurrentPosition: "CurrentPosition", defaultPlatformType: "defaultPlatformType", DeliveryFormat: "DeliveryFormat", DestPageTypeId: "DestPageTypeId", DestPageURI: "DestPageURI", DialogType: "DialogType", DisplayPrice: "DisplayPrice", DistributionRight: "DistributionRight", DMRFriendlyName: "DMRFriendlyName", DriveSize: "DriveSize", DriveType: "DriveType", DlnaManufacturer: "DlnaManufacturer", DlnaModelName: "DlnaModelName", DlnaModelNumber: "DlnaModelNumber", Duration: "Duration", EdsMediaType: "EdsMediaType", EDSSearch: "EDSSearch", Error: "Error", ErrorCode: "ErrorCode", ErrorContext: "ErrorContext", ErrorId: "ErrorId", ErrorTimestamp: "ErrorTimestamp", EventTime: "EventTime", EventType: "EventType", ExpectedMediaType: "ExpectedEdsMediaType", executeLocation: "executeLocation", ExtendedCode: "ExtendedCode", Extension: "Extension", ExternalLink: "ExternalLink", FeedbackType: "FeedbackType", FileType: "FileType", ForceSignOut: "ForceSignOut", FreePlaysLeft: "FreePlaysLeft", FromAd: "FromAd", FromCollection: "FromCollection", FromPreview: "FromPreview", GroupId: "GroupId", HasLocalContent: "HasLocalContent", HasPurchasedCount: "HasPurchasedCount", HCR: "HCR", hub: "hub", Id: "Id", InCollection: "InCollection", InteractiveUri: "InteractiveUri", IsDrm: "IsDrm", IsLibraryQuery: "IsLibraryQuery", IsNewNotification: "IsNewNotification", IsNextMediaInstance: "IsNextMediaInstance", IsPreview: "IsPreview", IsStream: "IsStream", IsSubscription: "IsSubscription", IssueType: "IssueType", ItemCount: "ItemCount", ItemType: "ItemType", itemTypeQueryString: "itemTypeQueryString", Kid: "Kid", Label: "Label", LastUIPath: "LastUIPath", LiveMembershipLevel: "LiveMembershipLevel", licenseRight: "licenseRight", LicenseRight: "LicenseRight", Location: "Location", MediaId: "MediaId", MediaItem: "MediaItem", MediaItemInstanceId: "MediaItemInstanceId", MediaLengthMs: "MediaLengthMs", MediaName: "MediaName", mediaName: "mediaName", MediaType: "MediaType", mediaType: "mediaType", Message: "Message", MessageText: "MessageText", MethodInitiated: "MethodInitiated", Miid: "Miid", MusicPlaybackBackground: "MusicPlaybackBackground", MusicPlaybackSnapped: "MusicPlaybackSnapped", MusicPlaybackUnsnapped: "MusicPlaybackUnsnapped", MuteState: "MuteState", name: "name", NetworkStatus: "NetworkStatus", NoConnectedAccount: "NoConnectedAccount", NotificationCategory: "NotificationCategory", NotificationTitle: "NotificationTitle", NotSnapped: "NotSnapped", OfferId: "OfferId", Orientation: "Orientation", OSVersion: "OSVersion", page: "page", PageName: "PageName", PageParameters: "PageParameters", PageTags: "PageTags", PageTypeId: "PageTypeId", PageURI: "PageURI", ParentProductGuid: "ParentProductGuid", ParentSmid: "ParentSmid", PivotSelected: "PivotSelected", PlayabilityCloudCounts: "PlayabilityCloudCounts", PlayabilityLocalCounts: "PlayabilityLocalCounts", PlaybackDurationMs: "PlaybackDurationMs", PlaybackSource: "PlaybackSource", PlayerType: "PlayerType", PlayLocation: "PlayLocation", PlayToType: "PlayToType", PurchaseEntitlementsFailureHasFailures: "PurchaseEntitlementsFailureHasFailures", PurchaseEntitlementsFailureAddedEntitlements: "PurchaseEntitlementsFailureAddedEntitlements", MFSRAudioSubtype: "MFSRAudioSubtype", MFSRVideoSubtype: "MFSRVideoSubtype", MFSRMimeType: "MFSRMimeType", MFSRSourceCharacter: "MFSRSourceCharacter", MFSRError: "MFSRError", MFSRIsDRM: "MFSRIsDRM", Position: "Position", Price: "Price", ProductCatalogId: "ProductCatalogId", ProductGuid: "ProductGuid", ProductId: "ProductId", ProtectionState: "ProtectionState", ProviderMediaId: "ProviderMediaId", ProviderMediaInstanceId: "ProviderMediaInstanceId", PurchaseHistoryServiceIsGroveling: "PurchaseHistoryServiceIsGroveling", PurchaseFlowId: "PurchaseFlowId", queryId: "queryId", Reason: "Reason", RefererPageTypeId: "RefererPageTypeId", RefererPageURI: "RefererPageURI", RefreshSignInResult: "RefreshSignInResult", ResolutionHeight: "ResolutionHeight", ResolutionWidth: "ResolutionWidth", Result: "Result", Retries: "Retries", ScreenSize: "ScreenSize", ScreenState: "ScreenState", SearchDestination: "SearchDestination", SearchHCRMediaName: "SearchHCRMediaName", SearchHCRMediaType: "SearchHCRMediaType", SearchImpressionGuid: "SearchImpressionGuid", secondaryGamerTag: "secondaryGamerTag", SelectedItemMediaType: "SelectedItemMediaType", SelectedItemTitle: "SelectedItemTitle", seriesId: "seriesId", ServiceId: "ServiceId", serviceId: "serviceId", SettingsAccountUsage: "SettingsAccountUsage", SettingsHelpUsage: "SettingsHelpUsage", ShareTitle: "ShareTitle", ShareUri: "ShareUri", ShareUrl: "ShareUrl", SignedOfferGuid: "SignedOfferGuid", SignInDuration: "SignInDuration", SignInResult: "SignInResult", SignOutResult: "SignOutResult", SkinId: "SkinId", SMID: "SMID", Smid: "Smid", SnappedMode: "SnappedMode", StackTrace: "StackTrace", State: "State", Status: "Status", Success: "Success", SystemErrorCode: "SystemErrorCode", TaskId: "taskId", TemplateId: "TemplateId", TimeSpent: "TimeSpent", Title: "Title", titleId: "titleId", titleType: "titleType", TotalAudioAdImpressions: "TotalAudioAdImpressions", TotalVideoAdImpressions: "TotalVideoAdImpressions", TrackCount: "TrackCount", TracksLeft: "TracksLeft", UIPart: "UIPart", UIPath: "UIPath", UnsupportedRegion: "UnsupportedRegion", Url: "Url", UserId: "UserId", Users: "Users", VideoCodec: "VideoCodec", VideoPlaybackBackground: "VideoPlaybackBackground", VideoPlaybackSnapped: "VideoPlaybackSnapped", VideoPlaybackUnsnapped: "VideoPlaybackUnsnapped", VideoPostRollAction: "VideoPostRollAction", VolumeValue: "VolumeValue", WhatsNewShownDuration: "WhatsNewOpenedDuration", WhereUsed: "WhereUsed", XCorrelationId: "XCorrelationId", ZuneId: "ZuneId", ZunePass: "ZunePass"
            }, TelemetryParameterValues: {
                Album: "Album", AppBar: "AppBar", Artist: "Artist", background: "background", BillingContactInfoClick: "BillingContactInfoClick", BillingHistoryClick: "BillingHistoryClick", Cancel: "Cancel", CancelSubscriptionSuccess: "CancelSubscriptionSuccess", CancelSubscriptionError: "CancelSubscriptionError", ContactPreferencesClick: "ContactPreferencesClick", Docked: "Docked", Download: "Download", End: "End", Error: "Error", Full: "Full", Game: "Game", GlobalAppbar: "GlobalAppbar", HomeNPTile: "HomeNPTile", Immersive: "Immersive", LoadXboxAccountSummaryPage: "LoadXboxAccountSummaryPage", ManageMusicDevices: "ManageMusicDevices", ManagePaymentOptionsClick: "ManagePaymentOptionsClick", MediaKey: "MediaKey", Minimized: "Minimized", Movie: "Movie", MusicAd: "MusicAd", MusicHelpClicked: "MusicHelpClicked", MusicPassSubscribeClick: "MusicPassSubscribeClick", MusicPreview: "MusicPreview", MusicTransportControls: "MusicTransportControls", MusicVideo: "MusicVideo", Next: "Next", None: "None", nowplaying: "nowplaying", NowPlaying: "NowPlaying", Overlay: "Overlay", Pause: "Pause", Play: "Play", Playlist: "Playlist", PlayToByRef: "PlayToByRef", PlayToUGC: "PlayToUGC", Popover: "Popover", Previous: "Previous", Purchase: "Purchase", PrivacyClick: "PrivacyClick", RedeemCodeClick: "RedeemCodeClick", Rental: "Rental", Resume: "Resume", Skip: "Skip", Song: "Song", snapped: "snapped", SnappedAppBar: "SnappedAppBar", Stop: "Stop", Success: "Success", TVEpisode: "TV Episode", TVSeason: "TV Season", TVSeries: "TV Series", unknown: "unknown", Unknown: "Unknown", UnknownHelpClicked: "UnknownHelpClicked", UserAccountLinkClicked: "UserAccountLinkClicked", VideoHelpClicked: "VideoHelpClicked", VideoPreview: "VideoPreview", VoiceCommand: "VoiceCommand"
            }, KeystoneEvents: {
                AppHeartbeat: "app_heartbeat", Purchase: "kpi_purchase"
            }, KeystoneParameterNames: {
                Mode: "mode", PreviousSessionId: "previous_session_id", OfferId: "offer_id", MediaType: "media_type", MediaName: "media_name", MediaId: "media_id", CorrelationId: "correlation_id", Price: "price", MediaInstanceId: "media_instance_id", VideoDefinition: "video_definition", VideoCodec: "video_codec", AudioLanguage: "audio_language", AudioEncoding: "audio_encoding", VideoFileUrl: "video_file_url", HasCaptions: "has_captions", DeliveryFormat: "delivery_format", PaymentInstruments: "payment_instruments", AcquisitionType: "acquisition_type", BingId: "bing_id", ZuneId: "zune_id", Locale: "locale", UiPath: "ui_path", State: "state"
            }, PurchaseStates: {
                Succeeded: "succeeded", Canceled: "canceled", Failed: "failed"
            }
    })
})()
})();
/* >>>>>>/framework/usertimetelemetrymanager.js:14856 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Framework");
    WinJS.Namespace.define("MS.Entertainment.Framework", {
        UserTimeTelemetryManager: MS.Entertainment.UI.Framework.define(function UserTimeTelemetryManager() {
            this._musicPlaybackTimeTracker = new MS.Entertainment.Framework.PlaybackTimeTracker("Music");
            this._videoPlaybackTimeTracker = new MS.Entertainment.Framework.PlaybackTimeTracker("Video");
            var now = Date.now();
            this._totalTimeCounterStart = now;
            this._snappedModeTimeCounterStart = now;
            this._unsnappedModeTimeCounterStart = now;
            try {
                this._configuration = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                this._userUsageTimeout = this._configuration.telemetry.userTimeEventTimeout
            }
            catch(e) {
                MS.Entertainment.Framework.fail("Failed to access config to get the user time event timeout " + e.toString());
                this._userUsageTimeout = 900000
            }
            if (!MS.Entertainment.Utilities.isTestApp && this._userUsageTimeout && this._userUsageTimeout > 0)
                this._eventFireTimerPromise = WinJS.Promise.timeout(this._userUsageTimeout).then(this._fireTimerTelemetry.bind(this))
        }, {
            _totalTimeCounterStart: 0, _accumulatedTotalTime: 0, _snappedModeTimeCounterStart: 0, _accumulatedSnappedTime: 0, _unsnappedModeTimeCounterStart: 0, _accumulatedUnsnappedTime: 0, _musicPlaybackTimeTracker: null, _videoPlaybackTimeTracker: null, _configuration: null, _startedSnapped: false, _viewModeSwitched: false, _userUsageTimeout: 0, _eventFireTimerPromise: null, _sendDataPoint: function _sendDataPoint() {
                    var totalTime = 0;
                    var snappedTime = 0;
                    var notSnappedTime = 0;
                    var invalidNumbers = false;
                    if (!this._configuration)
                        this._configuration = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (this._configuration.telemetry.timeSpent) {
                        totalTime = this._configuration.telemetry.timeSpent;
                        snappedTime = this._configuration.telemetry.snappedMode;
                        notSnappedTime = this._configuration.telemetry.notSnapped;
                        if ((totalTime < 0) || (snappedTime < 0) || (notSnappedTime < 0))
                            invalidNumbers = true;
                        if (!invalidNumbers) {
                            var telemetryParameterArray = [{
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.TimeSpent, parameterValue: totalTime
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SnappedMode, parameterValue: snappedTime
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.NotSnapped, parameterValue: notSnappedTime
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MusicPlaybackBackground, parameterValue: this._configuration.telemetry.musicPlaybackBackground
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MusicPlaybackSnapped, parameterValue: this._configuration.telemetry.musicPlaybackSnapped
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MusicPlaybackUnsnapped, parameterValue: this._configuration.telemetry.musicPlaybackUnsnapped
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.VideoPlaybackBackground, parameterValue: this._configuration.telemetry.videoPlaybackBackground
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.VideoPlaybackSnapped, parameterValue: this._configuration.telemetry.videoPlaybackSnapped
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.VideoPlaybackUnsnapped, parameterValue: this._configuration.telemetry.videoPlaybackUnsnapped
                                    }];
                            MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.X8UsageTime, telemetryParameterArray)
                        }
                        this._configuration.telemetry.timeSpent = 0;
                        this._configuration.telemetry.snappedMode = 0;
                        this._configuration.telemetry.notSnapped = 0;
                        this._configuration.telemetry.musicPlaybackBackground = 0;
                        this._configuration.telemetry.musicPlaybackSnapped = 0;
                        this._configuration.telemetry.musicPlaybackUnsnapped = 0;
                        this._configuration.telemetry.videoPlaybackBackground = 0;
                        this._configuration.telemetry.videoPlaybackSnapped = 0;
                        this._configuration.telemetry.videoPlaybackUnsnapped = 0
                    }
                    if (!this._eventFireTimerPromise)
                        if (this._userUsageTimeout && this._userUsageTimeout > 0)
                            this._eventFireTimerPromise = WinJS.Promise.timeout(this._userUsageTimeout).then(this._fireTimerTelemetry.bind(this))
                }, appActivated: function appActivated() {
                    this._sendDataPoint();
                    this._startedSnapped = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped
                }, appResumed: function appResumed() {
                    var now = Date.now();
                    this._sendDataPoint();
                    this._totalTimeCounterStart = now;
                    this._accumulatedTotalTime = 0;
                    this._snappedModeTimeCounterStart = now;
                    this._accumulatedSnappedTime = 0;
                    this._unsnappedModeTimeCounterStart = now;
                    this._accumulatedUnsnappedTime = 0;
                    this._viewModeSwitched = false;
                    this._startedSnapped = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped;
                    var sessionManager = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.sessionManager);
                    if (sessionManager) {
                        var currentSession = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).nowPlayingSession;
                        if (currentSession && currentSession.currentMedia && currentSession.currentTransportState === MS.Entertainment.Platform.Playback.TransportState.playing)
                            if (MS.Entertainment.Platform.PlaybackHelpers.isVideo(currentSession.currentMedia))
                                this._videoPlaybackTimeTracker.playbackStart();
                            else if (MS.Entertainment.Platform.PlaybackHelpers.isMusicOrMusicVideo(currentSession.currentMedia))
                                this._musicPlaybackTimeTracker.playbackStart()
                    }
                }, _fireTimerTelemetry: function _fireTimerTelemetry() {
                    this.appSuspended();
                    this.appResumed()
                }, appSuspended: function appSuspended() {
                    if (!this._configuration)
                        this._configuration = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var backgroundTime = 0;
                    this._musicPlaybackTimeTracker.playbackStop();
                    this._videoPlaybackTimeTracker.playbackStop();
                    if (this._eventFireTimerPromise) {
                        this._eventFireTimerPromise.cancel();
                        this._eventFireTimerPromise = null
                    }
                    if (MS.Entertainment.Utilities.isMusicApp)
                        backgroundTime = this._musicPlaybackTimeTracker.accumulatedBackgroundPlaybackTime;
                    this._musicPlaybackTimeTracker.dumpDataPoints();
                    this._videoPlaybackTimeTracker.dumpDataPoints();
                    var accumulatedTotalTimeChange = Date.now() - this._totalTimeCounterStart;
                    this._accumulatedTotalTime += accumulatedTotalTimeChange;
                    this._accumulatedUnsnappedTime += backgroundTime;
                    try
                    {
                        if (this._viewModeSwitched) {
                            this._fixCurrentAccumulatedTime();
                            this._configuration.telemetry.snappedMode = this._accumulatedSnappedTime;
                            this._configuration.telemetry.notSnapped = this._accumulatedUnsnappedTime
                        }
                        else if (this._startedSnapped) {
                            this._configuration.telemetry.snappedMode = this._accumulatedTotalTime / 1000;
                            this._configuration.telemetry.notSnapped = "0"
                        }
                        else {
                            this._configuration.telemetry.snappedMode = "0";
                            this._configuration.telemetry.notSnapped = this._accumulatedTotalTime / 1000
                        }
                        this._configuration.telemetry.timeSpent = this._accumulatedTotalTime / 1000
                    }
                    catch(exception) {
                        MS.Entertainment.Framework.fail("exception in suspend " + exception.toString())
                    }
                }, _fixCurrentAccumulatedTime: function _fixCurrentAccumulatedTime() {
                    var now = Date.now();
                    if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped) {
                        var accumulatedSnappedChange = now - this._snappedModeTimeCounterStart;
                        this._accumulatedSnappedTime += (accumulatedSnappedChange / 1000)
                    }
                    else {
                        var accumulatedUnsnappedChange = now - this._unsnappedModeTimeCounterStart;
                        this._accumulatedUnsnappedTime += (accumulatedUnsnappedChange / 1000)
                    }
                }, switchedToSnappedMode: function switchedToSnappedMode() {
                    var now = Date.now();
                    var accumulatedUnsnappedChange = now - this._unsnappedModeTimeCounterStart;
                    this._accumulatedUnsnappedTime += (accumulatedUnsnappedChange / 1000);
                    this._unsnappedModeTimeCounterStart = now;
                    this._snappedModeTimeCounterStart = now;
                    this._musicPlaybackTimeTracker.snappedModeChanged();
                    this._videoPlaybackTimeTracker.snappedModeChanged();
                    this._viewModeSwitched = true
                }, switchedToUnsnappedMode: function switchedToUnsnappedMode() {
                    var now = Date.now();
                    var accumulatedSnappedChange = now - this._snappedModeTimeCounterStart;
                    this._accumulatedSnappedTime += (accumulatedSnappedChange / 1000);
                    this._snappedModeTimeCounterStart = now;
                    this._unsnappedModeTimeCounterStart = now;
                    this._musicPlaybackTimeTracker.snappedModeChanged();
                    this._videoPlaybackTimeTracker.snappedModeChanged();
                    this._viewModeSwitched = true
                }, appVisibilityChanged: function appVisibilityChanged() {
                    if (!MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isAppVisible) {
                        var accumulatedTotalTimeChange = Date.now() - this._totalTimeCounterStart;
                        this._accumulatedTotalTime += accumulatedTotalTimeChange;
                        if (this._viewModeSwitched)
                            this._fixCurrentAccumulatedTime()
                    }
                    else {
                        var now = Date.now();
                        this._snappedModeTimeCounterStart = now;
                        this._unsnappedModeTimeCounterStart = now;
                        this._totalTimeCounterStart = now
                    }
                    this._musicPlaybackTimeTracker.appVisibilityChanged();
                    this._videoPlaybackTimeTracker.appVisibilityChanged()
                }, musicPlaybackStart: function musicPlaybackStart() {
                    this._musicPlaybackTimeTracker.playbackStart()
                }, videoPlaybackStart: function videoPlaybackStart() {
                    this._videoPlaybackTimeTracker.playbackStart()
                }, musicPlaybackStop: function musicPlaybackStop() {
                    this._musicPlaybackTimeTracker.playbackStop()
                }, videoPlaybackStop: function videoPlaybackStop() {
                    this._videoPlaybackTimeTracker.playbackStop()
                }
        }, null), PlaybackTimeTracker: MS.Entertainment.UI.Framework.define(function PlaybackTimeTracker(name) {
                this._name = name
            }, {
                accumulatedUnsnappedPlaybackTime: 0, accumulatedSnappedPlaybackTime: 0, accumulatedBackgroundPlaybackTime: 0, _playbackTimeCounterStart: 0, _isSnapped: false, _isVisible: false, _name: "", _configuration: null, _accumulatedBackgroundConfig: null, _accumulatedSnappedConfig: null, _accumulatedUnsnappedConfig: null, lastStateChange: 0, currentlyPlaying: false, _sleepTimeFudgeFactor: 1500000, snappedModeChanged: function switchedSnappedMode() {
                        if (this._playbackTimeCounterStart !== 0)
                            if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped !== this._isSnapped) {
                                this.playbackStop();
                                this.playbackStart()
                            }
                    }, appVisibilityChanged: function appVisibilityChanged() {
                        if (this._playbackTimeCounterStart !== 0)
                            if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isAppVisible !== this._isVisible) {
                                this.playbackStop();
                                this.playbackStart()
                            }
                    }, playbackStart: function playbackStart() {
                        this.playbackStop();
                        this._playbackTimeCounterStart = Date.now();
                        this._isSnapped = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped;
                        this._isVisible = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isAppVisible
                    }, playbackStop: function playbackStop() {
                        var now = Date.now();
                        if (this._playbackTimeCounterStart !== 0) {
                            if (this._isVisible)
                                if (this._isSnapped)
                                    this.accumulatedSnappedPlaybackTime += (now - this._playbackTimeCounterStart) / 1000;
                                else
                                    this.accumulatedUnsnappedPlaybackTime += (now - this._playbackTimeCounterStart) / 1000;
                            else if (this._name === "Music") {
                                if (now - this.lastStateChange <= this._sleepTimeFudgeFactor)
                                    this.accumulatedBackgroundPlaybackTime += (now - this._playbackTimeCounterStart) / 1000
                            }
                            else
                                this.accumulatedBackgroundPlaybackTime += (now - this._playbackTimeCounterStart) / 1000;
                            this._playbackTimeCounterStart = 0;
                            this.lastStateChange = now
                        }
                    }, dumpDataPoints: function dumpDataPoints(dataPoint) {
                        try {
                            if (!this._configuration)
                                this._configuration = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            if (this._name === "Music") {
                                this._configuration.telemetry.musicPlaybackBackground = this.accumulatedBackgroundPlaybackTime;
                                this._configuration.telemetry.musicPlaybackSnapped = this.accumulatedSnappedPlaybackTime;
                                this._configuration.telemetry.musicPlaybackUnsnapped = this.accumulatedUnsnappedPlaybackTime
                            }
                            else if (this._name === "Video") {
                                this._configuration.telemetry.videoPlaybackBackground = this.accumulatedBackgroundPlaybackTime;
                                this._configuration.telemetry.videoPlaybackSnapped = this.accumulatedSnappedPlaybackTime;
                                this._configuration.telemetry.videoPlaybackUnsnapped = this.accumulatedUnsnappedPlaybackTime
                            }
                            this.accumulatedBackgroundPlaybackTime = 0;
                            this.accumulatedSnappedPlaybackTime = 0;
                            this.accumulatedUnsnappedPlaybackTime = 0
                        }
                        catch(error) {}
                    }
            }, null)
    });
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.userTimeTelemetryManager, function getUserTimeTelemetryManager() {
        return new MS.Entertainment.Framework.UserTimeTelemetryManager
    }, true);
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.userTimeTelemetryManager)
})()
})();
/* >>>>>>/monikers.js:15109 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI", {Monikers: {
            actorDetailsPage: "actorDetailsPage", albumDetails: "albumDetails", albumMusicVideos: "albumMusicVideos", albumMusicVideosMarketplace: "albumMusicVideosMarketplace", allVideoCollection: "allVideoCollection", allVideoCollectionPanel: "allVideoCollectionPanel", artistAlbums: "artistAlbums", artistAlbumsCollection: "artistAlbumsCollection", artistAlbumsMarketplace: "artistAlbumsMarketplace", artistMusicVideos: "artistMusicVideos", artistMusicVideosMarketplace: "artistMusicVideosMarketplace", artistSearchAction: "artistSearchAction", artistSearchActionPivot: "artistSearchActionPivot", browseByActor: "browseByActor", browseByActorHub: "browseByActorHub", browseMoviesByActor: "browseMoviesByActor", browseTVSeriesByActor: "browseTVSeriesByActor", companionFeatured: "companionFeatured", companionFeaturedGamesPanel: "companionFeaturedGamesPanel", companionFeaturedMusicPanel: "companionFeaturedMusicPanel", companionFeaturedMoviesPanel: "companionFeaturedMoviesPanel", companionFeaturedTVPanel: "companionFeaturedTVPanel", companionNowPlaying: "companionNowPlaying", companionNowPlayingPanel: "companionNowPlayingPanel", companionQuickplay: "companionQuickplay", companionQuickplayPanel: "companionQuickplayPanel", companionSearch: "companionSearch", companionSearchPanel: "companionSearchPanel", dashboard: "dashboard", fullScreenNowPlaying: "fullScreenNowPlaying", homeHub: "homeHub", homeSpotlight: "homeSpotlight", filteredMovieMarketplace: "filteredMovieMarketplace", filteredTvMarketplace: "filteredTvMarketplace", filteredMovieMarketplaceSingleStudio: "filteredMovieMarketplaceSingleStudio", filteredMovieMarketplaceSingleStudioPanel: "filteredMovieMarketplaceSingleStudioPanel", filteredTvMarketplaceSingleNetwork: "filteredTvMarketplaceSingleNetwork", filteredTvMarketplaceSingleNetworkPanel: "filteredTvMarketplaceSingleNetworkPanel", flexHubPage: "flexHubPage", flexHub: "flexHub", flexHubPanel: "flexHubPanel", featuredSetsPage: "featuredSetsPage", featuredSets: "featuredSets", featuredSetsPanel: "featuredSetsPanel", immersiveDetails: "immersiveDetails", albumsSearch: "albumsSearch", allMusicSearch: "allMusicSearch", allVideoSearch: "allVideoSearch", allVideoSearchPanel: "allVideoSearchPanel", artistsSearch: "artistsSearch", searchPage: "searchPage", playlistsSearch: "playlistsSearch", playlistDetails: "playlistDetails", tracksSearch: "tracksSearch", musicVideosSearch: "musicVideosSearch", movieCollection: "movieCollection", movieCollectionPanel: "movieCollectionPanel", movieDetailsPage: "movieDetailsPage", movieMarketplace: "movieMarketplace", movieMarketplaceFeatured: "movieMarketplaceFeatured", movieMarketplaceFeaturedPanel: "movieMarketplaceFeaturedPanel", movieMarketplaceNewReleases: "movieMarketplaceNewReleases", movieMarketplaceNewReleasesPanel: "movieMarketplaceNewReleasesPanel", movieMarketplaceTopPurchased: "movieMarketplaceTopPurchased", movieMarketplaceTopPurchasedPanel: "movieMarketplaceTopPurchasedPanel", movieMarketplaceTopRented: "movieMarketplaceTopRented", movieMarketplaceTopRentedPanel: "movieMarketplaceTopRentedPanel", movieMarketplaceTopRated: "movieMarketplaceTopRated", movieMarketplaceTopRatedPanel: "movieMarketplaceTopRatedPanel", movieMarketplaceHub: "movieMarketplaceHub", movieMarketplacePanel: "movieMarketplacePanel", movieMarketplacePanel2: "movieMarketplacePanel2", movieRecommendations: "movieRecommendations", movieRecommendationsPanel: "movieRecommendationsPanel", movieSpotlight: "movieSpotlight", studioAndNetworkGallery: "studioAndNetworkGallery", movieStudioGalleryHub: "movieStudioGalleryHub", movieStudioGalleryHubPanel: "movieStudioGalleryHubPanel", movieTrailerBrowse: "movieTrailerBrowse", musicHub: "musicHub", musicCollection: "musicCollection", musicCollectionHub: "musicCollectionHub", musicCollectionPanel: "musicCollectionPanel", musicPlaylistCollection: "musicPlaylistCollection", musicMarketplace: "musicMarketplace", musicMarketplaceAlbums: "musicMarketplaceAlbums", musicMarketplaceAlbumsPanel: "musicMarketplaceAlbumsPanel", musicMarketplaceArtists: "musicMarketplaceArtists", musicMarketplaceArtistsPanel: "musicMarketplaceArtistsPanel", musicMarketplaceFeatured: "musicMarketplaceFeatured", musicMarketplaceFeaturedPanel: "musicMarketplaceFeaturedPanel", musicMarketplaceGenres: "musicMarketplaceGenres", musicMarketplaceGenresPanel: "musicMarketplaceGenresPanel", musicMarketplaceHub: "musicMarketplaceHub", musicMarketplacePanel: "musicMarketplacePanel", musicCollectionByAlbum: "musicCollectionByAlbum", musicCollectionByAlbumPanel: "musicCollectionByAlbumPanel", musicCollectionByArtist: "musicCollectionByArtist", musicCollectionByArtistPanel: "musicCollectionByArtistPanel", musicCollectionSmartDJs: "musicCollectionSmartDJs", musicCollectionSmartDJsPivot: "musicCollectionSmartDJsPivot", musicCollectionBySong: "musicCollectionBySong", musicCollectionBySongPanel: "musicCollectionBySongPanel", musicCollectionPlaylists: "musicCollectionPlaylists", musicCollectionPlaylistsPanel: "musicCollectionPlaylistsPanel", musicCollectionNewlyAdded: "musicCollectionNewlyAdded", musicCollectionMusicVideos: "musicCollectionMusicVideos", musicExploreHub: "musicExploreHub", musicNewReleases: "musicNewReleases", musicNewReleasesPanel: "musicNewReleasesPanel", musicNewReleasesGallery: "musicNewReleasesGallery", musicNewVideosGallery: "musicNewVideosGallery", musicPopularGallery: "musicPopularGallery", musicRecentsPanel: "musicRecentsPanel", musicSmartDJs: "musicSmartDJs", musicSmartDJsPanel: "musicSmartDJsPanel", musicTopMusic: "musicTopMusic", musicTopArtistsPanel: "musicTopArtistsPanel", musicTopAlbumsPanel: "musicTopAlbumsPanel", musicTopVideosPanel: "musicTopVideosPanel", musicVideoCollection: "musicVideoCollection", musicVideoCollectionPanel: "musicVideoCollectionPanel", navigationPopover: "navigationPopover", otherVideoCollection: "otherVideoCollection", otherVideoCollectionPanel: "otherVideoCollectionPanel", playToSpinner: "playToSpinner", playToLandingPage: "playToLandingPage", recommendationsPage: "recommendationsPage", recommendations: "recommendations", recommendationsPanel: "recommendationsPanel", root: "root", searchHub: "searchHub", selectPlaylist: "selectPlaylist", selectPlaylistPivot: "selectPlaylistPivot", tempMusicPanel: "tempMusicPanel", tempSocialPanel: "tempSocialPanel", tempVideoPanel: "tempVideoPanel", tvCollection: "tvCollection", tvCollectionPanel: "tvCollectionPanel", tvDetailsPage: "tvDetailsPage", tvMarketplace: "tvMarketplace", tvMarketplaceFeatured: "tvMarketplaceFeatured", tvMarketplaceFeaturedPanel: "tvMarketplaceFeaturedPanel", tvMarketplaceNewReleases: "tvMarketplaceNewReleases", tvMarketplaceNewReleasesPanel: "tvMarketplaceNewReleasesPanel", tvMarketplaceLastNight: "tvMarketplaceLastNight", tvMarketplaceLastNightPanel: "tvMarketplaceLastNightPanel", tvMarketplaceTopPurchased: "tvMarketplaceTopPurchased", tvMarketplaceTopPurchasedPanel: "tvMarketplaceTopPurchasedPanel", tvMarketplaceTopRated: "tvMarketplaceTopRated", tvMarketplaceTopRatedPanel: "tvMarketplaceTopRatedPanel", tvMarketplaceGenres: "tvMarketplaceGenres", tvMarketplaceGenresPanel: "tvMarketplaceGenresPanel", tvMarketplaceHub: "tvMarketplaceHub", tvMarketplaceNetworks: "tvMarketplaceNetworks", tvMarketplaceNetworksPanel: "tvMarketplaceNetworksPanel", tvMarketplacePanel: "tvMarketplacePanel", tvMarketplacePanel2: "tvMarketplacePanel2", tvNetworkGallery: "tvNetworkGallery", tvNetworkGalleryHub: "tvNetworkGalleryHub", tvNetworkGalleryHubPanel: "tvNetworkGalleryHubPanel", tvRecommendations: "tvRecommendations", tvRecommendationsPanel: "tvRecommendationsPanel", tvSpotlight: "tvSpotlight", videoHub: "videoHub", videoHubIsolated: "videoHubIsolated", videoCollection: "videoCollection", videoCollectionHub: "videoCollectionHub", videoCollectionPanel: "videoCollectionPanel", videoMarketplace: "videoMarketplace", videoMovieCollectionPanel: "videoMovieCollectionPanel", videoOtherCollectionPanel: "videoOtherCollectionPanel", videoTvCollectionPanel: "videoTvCollectionPanel", videoWatchlist: "videoWatchlist", videoWatchlistPage: "videoWatchlistPage", videoWatchlistPanel: "videoWatchlistPanel", movieStorePage: "movieStorePage", tvStorePage: "tvStorePage", welcomeHub: "welcomeHub", welcomePanel: "welcomePanel"
        }})
})()
})();
/* >>>>>>/framework/uistateservice.js:15120 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var observableProperty = MS.Entertainment.UI.Framework.observableProperty;
    var UiStateService = WinJS.Class.derive(MS.Entertainment.UI.Framework.ObservableBase, function uiStateService() {
            var currentView = Windows.UI.ViewManagement.InputPane.getForCurrentView();
            currentView.addEventListener("showing", function uiStateService_SoftKeyboardShown() {
                if (this._hidingPromise)
                    this._hidingPromise.cancel();
                this.softKeyboardOpen = true
            }.bind(this));
            currentView.addEventListener("hiding", function uiStateService_SoftKeyboardHiding(e) {
                this._hidingPromise = WinJS.Promise.timeout(250).then(function uiStateService_SoftKeyboardHidden() {
                    this._hidingPromise = null;
                    this.softKeyboardOpen = false
                }.bind(this), function(){})
            }.bind(this));
            window.addEventListener("resize", function uiStateService_WindowResizing() {
                if (!this.softKeyboardOpen)
                    this.dispatchEvent("windowresize")
            }.bind(this))
        }, {
            animationsEnabled: {get: function() {
                    return MS.Entertainment.UI.Framework.animationsEnabled
                }}, activationKind: observableProperty("activationKind", null), activeListening: observableProperty("activeListening", false), activityOverlayVisible: observableProperty("activityOverlayVisible", false), appBarVisible: observableProperty("appBarVisible", false), applicationTitle: observableProperty("applicationTitle", String.empty), deepLinkSource: observableProperty("deepLinkSource", String.empty), deepLinkSourceID: observableProperty("deepLinkSourceID", String.empty), deepLinkLaunchTime: observableProperty("deepLinkLaunchTime", String.empty), engageVisible: observableProperty("engageVisible", false), gestureEngaged: observableProperty("gestureEngaged", false), isAppVisible: observableProperty("isAppVisible", true, true), isInRestrictedBackground: observableProperty("isInRestrictedBackground", false), isFilled: observableProperty("isFilled", false, true), isFirstLaunch: observableProperty("isFirstLaunch", true), isFullScreenVideo: observableProperty("isFullScreenVideo", false), isFullScreenMusic: observableProperty("isFullScreenMusic", false), isHubStripVisible: observableProperty("isHubStripVisible", false), isScrolling: observableProperty("isScrolling", false), isSearchPaneVisible: observableProperty("isSearchPaneVisible", false), isSettingsCharmVisible: observableProperty("isSettingsCharmVisible", false), isSnapped: observableProperty("isSnapped", false, true), networkStatus: observableProperty("networkStatus", null), nowPlayingConstrainedMode: observableProperty("nowPlayingConstrainedMode", false), nowPlayingVisible: observableProperty("nowPlayingVisible", false), nowPlayingInset: observableProperty("nowPlayingInset", false), nowPlayingTileVisible: observableProperty("nowPlayingTileVisible", false), nuiEngaged: observableProperty("nuiEngaged", false), overlayVisible: observableProperty("overlayVisible", false), postRollAnimationState: observableProperty("postRollAnimationState", null), servicesEnabled: observableProperty("servicesEnabled", true), shouldShowAdsForFreePlay: observableProperty("shouldShowAdsForFreePlay", false), showingPostRoll: observableProperty("showingPostRoll", false), showingTransportControls: observableProperty("showingTransportControls", false), softKeyboardOpen: observableProperty("softKeyboardOpen", false), stageThreeActivated: observableProperty("stageThreeActivated", false), visibleButNotFocused: observableProperty("visibleButNotFocused", false), xboxControllerVisible: observableProperty("xboxControllerVisible", false), primarySessionId: observableProperty("primarySessionId", String.empty)
        });
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.uiState, function getUiStateService() {
        return new UiStateService
    }, true)
})()
})();
/* >>>>>>/framework/observablearray.js:15154 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment");
    WinJS.Namespace.define("MS.Entertainment", {ObservableArray: MS.Entertainment.UI.Framework.define(function observableArrayConstructor(data) {
            this._listeners = [];
            this._indexableItems = WinJS.Binding.as({length: 0});
            if (!data)
                this._data = [];
            else
                this._data = data.slice();
            this._updateBindableItems()
        }, {
            _getObservable: function() {
                return this
            }, _data: null, _listeners: null, _indexableItems: null, _validateIndex: function validateIndex(index) {
                    if ((index < 0) || (index > this.length - 1))
                        throw new Error("Index out of bounds");
                }, _raiseChangeEvent: function raiseChangeEvent(operation, index, item) {
                    var changeObject = {
                            type: operation, index: index, item: item
                        };
                    for (var i = 0; i < this._listeners.length; i++) {
                        var listener = this._listeners[i];
                        if (listener)
                            listener(changeObject)
                    }
                }, _updateBindableItems: function _updateBindableItems() {
                    if (this._data.length === this._indexableItems.length)
                        return;
                    var that = this;
                    var difference = this._data.length - this._indexableItems;
                    for (var i = 0; i < this._data.length; i++) {
                        if (this._indexableItems.hasOwnProperty("item" + i))
                            continue;
                        (function(index) {
                            Object.defineProperty(that._indexableItems, "item" + index, {get: function() {
                                    return that._data[index]
                                }})
                        })(i)
                    }
                    if (difference > 0)
                        for (var j = this._data.length; j < this._indexableItems.length; j++)
                            delete this._indexableItems["item" + j];
                    this._indexableItems.length = this._data.length
                }, addChangeListener: function addChangeListener(handler) {
                    if (!handler)
                        throw new Error("Argument was invalid: undefined/null");
                    this._listeners.push(handler)
                }, removeChangeListener: function removeChangeListener(handler) {
                    var handlerIndex = this._listeners.indexOf(handler);
                    if (handlerIndex === -1)
                        return;
                    this._listeners.splice(handlerIndex, 1)
                }, length: {get: function() {
                        return this._data.length
                    }}, getArray: function getArray() {
                    return [].concat(this._data)
                }, indexOf: function indexOf(item) {
                    return this._data.indexOf(item)
                }, lastIndexOf: function lastIndexOf(item, startFrom) {
                    return this._data.lastIndexOf(item, startFrom)
                }, contains: function contains(item) {
                    return (this.indexOf(item) !== -1)
                }, item: function item(index) {
                    this._validateIndex(index);
                    return this._data[index]
                }, clear: function clear() {
                    this._data.length = 0;
                    this._indexableItems = WinJS.Binding.as({length: 0});
                    this._raiseChangeEvent(MS.Entertainment.ObservableArray.OperationTypes.reset, -1, null)
                }, add: function add(item) {
                    this.insert(this.length, item)
                }, remove: function remove(item) {
                    var index = this.indexOf(item);
                    if (index < 0)
                        return;
                    return this.removeAt(index)
                }, removeAt: function removeAt(index) {
                    var removedItems = null;
                    this._validateIndex(index);
                    var item = this.item(index);
                    removedItems = this._data.splice(index, 1);
                    MS.Entertainment.assert(removedItems.length === 1, "expecting to remove more than one item.  Removed: " + removedItems.length);
                    this._updateBindableItems();
                    this._raiseChangeEvent(MS.Entertainment.ObservableArray.OperationTypes.remove, index, item);
                    return removedItems.length > 0 ? removedItems[0] : null
                }, insert: function insert(index, item) {
                    if ((index < 0) || (index > this.length))
                        throw new Error("Index out of bounds");
                    this._data.splice(index, 0, item);
                    this._updateBindableItems();
                    this._raiseChangeEvent(MS.Entertainment.ObservableArray.OperationTypes.add, index, item)
                }, slice: function slice(start, end) {
                    return this._data.slice(start, end)
                }, some: function some(callback) {
                    return this._data.some(callback)
                }, spliceArray: function spliceArray(index, count, array) {
                    this.splice.bind(this, index, count).apply(this, array)
                }, unique: function unique() {
                    var uniqueValues = this._data ? this._data.unique() : [];
                    return uniqueValues
                }, clone: function clone() {
                    var clonedValues = this._data ? this._data.clone() : [];
                    return clonedValues
                }, push: function push(item) {
                    this.add(item);
                    return this.length
                }, pop: function pop() {
                    if (this.length < 1)
                        return;
                    var index = this.length - 1;
                    return this.removeAt(index)
                }, filter: function filter(callback, that) {
                    if (!this._data)
                        return null;
                    return this._data.filter(callback, that)
                }, shift: function shift() {
                    if (this.length < 1)
                        return;
                    return this.removeAt(0)
                }, splice: function splice(index, count) {
                    var removedItems = [];
                    if (count !== 0)
                        this._validateIndex(index + count - 1);
                    for (var i = index; i < index + count; i++)
                        removedItems.push(this.removeAt(index));
                    if (arguments.length > 2)
                        for (var j = 2; j < arguments.length; j++)
                            this.insert(index + j - 2, arguments[j]);
                    return removedItems
                }, unshift: function unshift(item) {
                    this.insert(0, item);
                    return this.length
                }, bindableItems: {get: function() {
                        return this._indexableItems
                    }}, forEach: function(callback, that) {
                    if (this._data)
                        this._data.forEach(callback, that)
                }
        }, {OperationTypes: MS.Entertainment.UI.Framework.define(null, null, {
                add: "add", remove: "remove", reset: "reset"
            })})})
})()
})();
/* >>>>>>/framework/data/factory.js:15302 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data");
    var blockAssertValueNotHydrated = function blockAssertValueNotHydrated(){};
    var unblockAssertValueNotHydrated = function unblockAssertValueNotHydrated(){};
    var assertValueNotHydrated = function assertValueNotHydrated(property, propertyPath){};
    WinJS.Namespace.defineWithParent(MSE, "Data", {
        stringParser: {
            dateFromUTC: function(string, delimiter) {
                var date = null;
                if (string && string.constructor === String) {
                    if (delimiter === undefined)
                        delimiter = "-";
                    var pattern = new RegExp("(\\d{4})" + delimiter + "(\\d{2})" + delimiter + "(\\d{2})(.(\\d{2}):(\\d{2}):(\\d{2})){0,1}");
                    var parts = string.match(pattern);
                    MS.Entertainment.Data.assert(parts, "Parsing string dateFromUTC did not match RegExp pattern");
                    if (parts)
                        date = new Date(Date.UTC(parseInt(parts[1]), parseInt(parts[2], 10) - 1, parseInt(parts[3], 10), parseInt(parts[5] || "0", 10), parseInt(parts[6] || "0", 10), parseInt(parts[7] || "0", 10), 0))
                }
                return date
            }, timeSpanFromXmlDuration: function timeSpanFromXmlDuration(data) {
                    var years = 0;
                    var months = 0;
                    var days = 0;
                    var hours = 0;
                    var minutes = 0;
                    var seconds = 0;
                    var regexp,
                        parts;
                    if (data) {
                        regexp = /(-?)P(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)D)?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?)?/i;
                        parts = data.match(regexp);
                        if (parts) {
                            years = parseInt(parts[2] || 0);
                            months = parseInt(parts[3] || 0);
                            days = parseInt(parts[4] || 0);
                            hours = parseInt(parts[5] || 0);
                            minutes = parseInt(parts[6] || 0);
                            seconds = parseInt(parts[7] || 0);
                            parts = null
                        }
                        else {
                            regexp = /^(-?)(\d+)\:(\d+)\:(\d+)$/i;
                            parts = data.match(regexp)
                        }
                        if (parts) {
                            hours = parseInt(parts[2] || 0);
                            minutes = parseInt(parts[3] || 0);
                            seconds = parseInt(parts[4] || 0)
                        }
                    }
                    var timeSpan = new Date(years, months, days, hours, minutes, seconds, 0);
                    return timeSpan
                }
        }, Augmentation: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function augmentation(augmentBackingData) {
                this._cache = {};
                this._backingAugmentation = {};
                this._setAugmentBackingData(augmentBackingData || {})
            }, {
                _hydratePromise: null, _backingAugmentation: null, _preventObservableInheritance: true, _hydrated: false, hydrating: MS.Entertainment.UI.Framework.observableProperty("hydrating", false), isFailed: MS.Entertainment.UI.Framework.observableProperty("isFailed", false), hydrated: {
                        get: function get_hydrated() {
                            return this._hydrated
                        }, set: function set_hydrated(value) {
                                if (value !== this._hydrated) {
                                    var oldValue = this._hydrated;
                                    this._hydrated = value;
                                    if (!value)
                                        this._hydratePromise = null;
                                    this.dispatchChangeAndNotify("hydrated", value, oldValue)
                                }
                            }
                    }, instance: {
                        get: function get_instance() {
                            return this._updatedInstance || this
                        }, set: function set_instance(value) {
                                this._updatedInstance = value
                            }, enumerable: true, configurable: false
                    }, _augmentBackingData: {
                        value: null, writable: true, enumerable: true, configurable: false
                    }, _backingData: {
                        get: function get_backingData() {
                            return this._cache
                        }, enumerable: true, configurable: false
                    }, _cache: {
                        value: null, writable: true, enumerable: true, configurable: false
                    }, _updatedInstance: {
                        value: null, writable: true, enumerable: true, configurable: false
                    }, _setCacheValue: {
                        value: function _setCacheValue(key, value) {
                            if (this._cache)
                                this._cache[key] = value
                        }, enumerable: true
                    }, _getAugmentBackingValue: {
                        value: function _getAugmentBackingValue(key, defaultValue) {
                            return (this._augmentBackingData && key in this._augmentBackingData) ? this._augmentBackingData[key] : defaultValue
                        }, enumerable: true, configurable: false
                    }, _setAugmentBackingValue: {
                        value: function _setAugmentBackingValue(key, newValue) {
                            if (this._augmentBackingData) {
                                var oldValue = this._getAugmentBackingValue(key);
                                this._augmentBackingData[key] = newValue;
                                if (newValue !== oldValue)
                                    this.dispatchChangeAndNotify(key, newValue, oldValue)
                            }
                        }, enumerable: true, configurable: false
                    }, _getCacheValue: {
                        value: function _getCacheValue(key, defaultValue) {
                            return (this._cache && key in this._cache) ? this._cache[key] : defaultValue
                        }, enumerable: true
                    }, _getPropertyValueFromInner: function _getPropertyValueFromInner(key, innerProperty, source) {
                        var cache;
                        var cacheable = innerProperty ? innerProperty.cacheable : false;
                        source = source || this;
                        if (cacheable)
                            cache = this._getCacheValue(key);
                        if (cache === undefined) {
                            if (innerProperty && innerProperty.get)
                                cache = innerProperty.get.call(source, !source._augmentBackingData);
                            else
                                cache = innerProperty;
                            if (cacheable)
                                this._setCacheValue(key, cache)
                        }
                        return cache
                    }, _setPropertyValueFromInner: function _setPropertyValueFromInner(key, innerProperty, newValue, source) {
                        blockAssertValueNotHydrated();
                        source = source || this;
                        var cacheable = innerProperty ? innerProperty.cacheable : false;
                        var oldValue = this._getPropertyValueFromInner(key, innerProperty);
                        if (cacheable)
                            this._setCacheValue(key, newValue);
                        if (innerProperty && innerProperty.set)
                            innerProperty.set.call(source, newValue);
                        if (newValue !== oldValue)
                            this.dispatchChangeAndNotify(key, newValue, oldValue);
                        unblockAssertValueNotHydrated()
                    }, _getInitializablePropertyValueFromInner: function _getInitializablePropertyValueFromInner(key, innerProperty) {
                        var initialized = this._getCacheValue(key);
                        if (!initialized && innerProperty && innerProperty.initializer) {
                            innerProperty.initializer.call(this);
                            this._setCacheValue(key, true)
                        }
                        if (innerProperty && innerProperty.get)
                            return innerProperty.get.call(this)
                    }, _setInitializablePropertyValueFromInner: function _setInitializablePropertyValueFromInner(key, innerProperty, newValue) {
                        blockAssertValueNotHydrated();
                        var oldValue = this._getInitializablePropertyValueFromInner(key, innerProperty);
                        if (innerProperty && innerProperty.set)
                            innerProperty.set.call(this, newValue);
                        if (newValue !== oldValue)
                            this.dispatchChangeAndNotify(key, newValue, oldValue);
                        unblockAssertValueNotHydrated()
                    }, clone: function clone() {
                        var clone = MS.Entertainment.Data.augment(MS.Entertainment.Data.deflate(this), WinJS.Binding.unwrap(this).constructor);
                        return clone
                    }, cloneWithHydration: function cloneWithHydration() {
                        var clone = this.clone();
                        if (this.hydrated && clone)
                            clone._setHydratedValues(this);
                        return clone
                    }, hydrate: function hydrate(options) {
                        if (!this._hydratePromise && this.onHydrated) {
                            this.hydrated = false;
                            this.hydrating = true;
                            this.isFailed = false;
                            var hydratePromise = this._hydratePromise = WinJS.Promise.as(this.onHydrated.call(this, this, options));
                            hydratePromise = hydratePromise.then(function hydratedCompleted(values) {
                                if (hydratePromise === this._hydratePromise) {
                                    this.hydrating = false;
                                    if (values) {
                                        this._setHydratedValues(values);
                                        this.hydrated = true
                                    }
                                    else
                                        this._hydratePromise = null
                                }
                            }.bind(this), function hydratedFailed(error) {
                                if (hydratePromise === this._hydratePromise) {
                                    this.hydrating = false;
                                    if (!error || error.message !== "Canceled")
                                        this.isFailed = true;
                                    this._hydratePromise = null
                                }
                            }.bind(this)).then(function hydratedFinally() {
                                return this
                            }.bind(this));
                            if (this._hydratePromise)
                                this._hydratePromise = hydratePromise
                        }
                        return WinJS.Promise.as(this._hydratePromise || this)
                    }, refresh: function refresh(options) {
                        if (!this.hydrating) {
                            this._hydratePromise = null;
                            this.hydrated = false;
                            return this.hydrate(options)
                        }
                        else
                            return WinJS.Promise.as(this._hydratePromise)
                    }, onHydrated: null, _setAugmentBackingData: function _setAugmentBackingData(data) {
                        var key;
                        if (!this._augmentBackingData && data)
                            this._augmentBackingData = data
                    }, _setHydratedValues: function _setHydratedValues(values) {
                        blockAssertValueNotHydrated();
                        var key,
                            property,
                            propertyValue,
                            override;
                        var augmentationShape = MSE.Data.augmentationShape(this);
                        values = values || {};
                        for (key in augmentationShape) {
                            property = augmentationShape[key];
                            if (property && property.hydrated)
                                if (key in values) {
                                    propertyValue = values[key];
                                    if (property.hydratedComparer)
                                        override = property.hydratedComparer(this[key], values[key]) > 0;
                                    else
                                        override = MS.Entertainment.Data.Comparer.notFalsy(null, values[key]) > 0;
                                    if (override)
                                        this[key] = values[key]
                                }
                                else if (!property.hydratedIfAvailable)
                                    MSE.Data.fail("Expected key missing from hydrated values. Key = " + key)
                        }
                        unblockAssertValueNotHydrated()
                    }, _assertValueNotHydrated: function _assertValueNotHydrated(property, propertyPath) {
                        if (!this.hydrated)
                            assertValueNotHydrated(property, propertyPath)
                    }
            }, {
                isAugmentation: function isAugmentation(object) {
                    return MS.Entertainment.Data.Augmentation.prototype.isPrototypeOf(object)
                }, addProperties: function addProperties(object, innerPropertiesOrValues) {
                        if (object && innerPropertiesOrValues)
                            for (var key in innerPropertiesOrValues)
                                MS.Entertainment.Data.Augmentation.addProperty(object, key, innerPropertiesOrValues[key]);
                        return object
                    }, addProperty: function addProperty(object, key, innerPropertyOrValue) {
                        if (!object)
                            return object;
                        var override = (innerPropertyOrValue && innerPropertyOrValue.override);
                        if (!(key in object) || override) {
                            innerPropertyOrValue = MS.Entertainment.Data.Augmentation.defineProperty(key, innerPropertyOrValue);
                            if (innerPropertyOrValue.get || innerPropertyOrValue.set)
                                Object.defineProperty(object, key, innerPropertyOrValue)
                        }
                        else if (!innerPropertyOrValue)
                            object[key] = innerPropertyOrValue;
                        else if (!innerPropertyOrValue.get && !innerPropertyOrValue.set && innerPropertyOrValue !== "function")
                            object[key] = innerPropertyOrValue;
                        return object
                    }, defineProperty: function defineProperty(key, innerProperty) {
                        var result = innerProperty;
                        var type = typeof innerProperty;
                        var validObject = innerProperty && type === "object";
                        if (validObject && innerProperty.initializer)
                            result = MSE.Data.Augmentation.defineInitializerProperty(key, innerProperty);
                        else if (validObject && (innerProperty.get || innerProperty.set))
                            result = MSE.Data.Augmentation.defineCacheableProperty(key, innerProperty);
                        else if (innerProperty !== "function")
                            result = MSE.Data.Augmentation.defineNotifyProperty(key, innerProperty);
                        return result
                    }, defineAugmentProperty: function defineAugmentProperty(key) {
                        return {
                                get: function() {
                                    return this._getAugmentBackingValue(key)
                                }, set: function(newValue) {
                                        this._setAugmentBackingValue(key, newValue)
                                    }, enumerable: true, configurable: true
                            }
                    }, defineNotifyProperty: function defineNotifyProperty(key, innerValue) {
                        return {
                                get: function() {
                                    return this._getCacheValue(key, innerValue)
                                }, set: function(newValue) {
                                        var oldValue = this._getCacheValue(key, innerValue);
                                        this._setCacheValue(key, newValue);
                                        if (newValue !== oldValue)
                                            this.dispatchChangeAndNotify(key, newValue, oldValue)
                                    }, enumerable: true, configurable: true
                            }
                    }, defineCacheableProperty: function defineCacheableProperty(key, innerProperty) {
                        return {
                                get: function() {
                                    return this._getPropertyValueFromInner(key, innerProperty)
                                }, set: function(value) {
                                        return this._setPropertyValueFromInner(key, innerProperty, value)
                                    }, enumerable: (!innerProperty || innerProperty.enumerable === undefined) ? true : innerProperty.enumerable, configurable: (!innerProperty || innerProperty.configurable === undefined) ? true : innerProperty.configurable
                            }
                    }, defineInitializerProperty: function defineInitializer(key, innerProperty) {
                        return {
                                get: function() {
                                    return this._getInitializablePropertyValueFromInner(key, innerProperty)
                                }, set: function(value) {
                                        return this._setInitializablePropertyValueFromInner(key, innerProperty, value)
                                    }, enumerable: (!innerProperty || innerProperty.enumerable === undefined) ? true : innerProperty.enumerable, configurable: (!innerProperty || innerProperty.configurable === undefined) ? true : innerProperty.configurable
                            }
                    }
            }), _mix: (function() {
                function defineMixedProperty(deflate, propertyPath, key, innerProperty) {
                    var hasGetter;
                    var hasSetter;
                    if (innerProperty && innerProperty.augmented) {
                        hasGetter = !!innerProperty.get;
                        hasSetter = !!innerProperty.set
                    }
                    if (!hasGetter && !hasSetter)
                        return innerProperty;
                    else {
                        var propertyPathFragments = MSE.Data.Property._getPropertyPathFragments(null, propertyPath);
                        return {
                                get: function() {
                                    var result;
                                    var that;
                                    var source;
                                    if (deflate)
                                        source = MSE.Data.deflate(this);
                                    else
                                        source = this;
                                    if (hasGetter && MSE.Data.Property._hasPropertyPathFragments(source, propertyPathFragments))
                                        that = MSE.Data.Property._valueFromPropertyPathFragments(source, propertyPathFragments);
                                    if (that && this._getPropertyValueFromInner)
                                        result = this._getPropertyValueFromInner(key, innerProperty, that);
                                    return result
                                }, set: function(value) {
                                        var that;
                                        var source;
                                        if (deflate)
                                            source = MSE.Data.deflate(this);
                                        else
                                            source = this;
                                        if (hasSetter && MSE.Data.Property._hasPropertyPathFragments(source, propertyPathFragments))
                                            that = MSE.Data.Property._valueFromPropertyPathFragments(source, propertyPathFragments);
                                        if (that && this._setPropertyValueFromInner)
                                            this._setPropertyValueFromInner(key, innerProperty, value, that)
                                    }, augmented: true, cacheable: innerProperty.cacheable, enumerable: innerProperty.enumerable, configurable: innerProperty.configurable, hydrated: innerProperty.hydrated, hydratedRequired: innerProperty.hydratedRequired, hydratedComparer: innerProperty.hydratedComparer
                            }
                    }
                }
                {};
                return function _mix(deflate, augmentations) {
                        var instanceMembers = {};
                        var shape;
                        var property;
                        var key;
                        var shapeKey;
                        var constructors = [];
                        for (key in augmentations) {
                            constructors.push(augmentations[key].prototype.constructor);
                            shape = MSE.Data.augmentationShape(augmentations[key].prototype);
                            for (shapeKey in shape) {
                                property = shape[shapeKey];
                                instanceMembers[shapeKey] = defineMixedProperty(deflate, key, shapeKey, shape[shapeKey])
                            }
                        }
                        var mixConstructor = function mixConstructor() {
                                var args = arguments;
                                constructors.forEach(function(constructor) {
                                    constructor.apply(this, args)
                                }, this)
                            };
                        return MSE.Data.define(mixConstructor, instanceMembers)
                    }
            })(), mix: function mix(augmentations) {
                return this._mix(true, augmentations)
            }, mixNoDeflate: function mixNoDeflate(augmentations) {
                return this._mix(false, augmentations)
            }, define: function define(constructor, instanceMembers, staticMembers) {
                return MSE.Data.derive(null, constructor, instanceMembers, staticMembers)
            }, derive: (function() {
                return function derive(base, constructor, instanceMembers, staticMembers) {
                        base = base || MSE.Data.Augmentation;
                        if (!constructor)
                            constructor = function defaultConstructor() {
                                this.base.apply(this, arguments)
                            };
                        var adjustedInstanceMembers = {_augmentationShape: instanceMembers};
                        for (var key in instanceMembers)
                            adjustedInstanceMembers[key] = MSE.Data.Augmentation.defineProperty(key, instanceMembers[key]);
                        if (adjustedInstanceMembers._augmentationShape && base && base.prototype)
                            adjustedInstanceMembers._augmentationShape._baseAugmentationShape = base.prototype._augmentationShape;
                        return MS.Entertainment.derive(base, constructor, adjustedInstanceMembers, staticMembers)
                    }
            })(), augment: function augment(data, Augmentation) {
                var result;
                if (data === null)
                    return null;
                if (typeof data !== "object")
                    throw new Error("Can't augment a non-object types. " + (typeof data));
                if (Augmentation) {
                    result = new Augmentation(data);
                    MSE.Data.assert(result._augmentBackingData === data, "During augmentation the the backing data didn't equal the expected value. Are you sure your Augmentation definition is calling the base constructor?")
                }
                else
                    result = data;
                return result
            }, augmentArrayItems: function(data, augmentationOrFactory) {
                if (!Array.isArray(data))
                    throw new Error("Can't call augmentArrayItems a non-array types. " + (typeof data));
                var itemFactory;
                if (!augmentationOrFactory || MSE.Data.Augmentation.prototype.isPrototypeOf(augmentationOrFactory.prototype))
                    itemFactory = MSE.Data.Factory.createAugmentationFactory(augmentationOrFactory);
                else
                    itemFactory = augmentationOrFactory;
                var result = data;
                if (itemFactory) {
                    result = [];
                    for (var i = 0; i < data.length; i++)
                        result[i] = itemFactory(data[i])
                }
                return result
            }, augmentationShape: function augmentationShape(data) {
                var key;
                var result = {};
                var shape = (data && data._augmentationShape) ? data._augmentationShape : (data && data.prototype) ? data.prototype._augmentationShape : null;
                while (shape) {
                    for (key in shape)
                        if (!(key in result))
                            result[key] = shape[key];
                    shape = shape._baseAugmentationShape
                }
                return result
            }, hydratedProperties: function hydratedProperties(data) {
                var key;
                var result = [];
                var augmentationShape = MSE.Data.augmentationShape(data);
                for (key in augmentationShape)
                    if (augmentationShape[key].hydrated)
                        result.push(key);
                return result
            }, deflate: function(data) {
                return data ? WinJS.Binding.unwrap(data)._augmentBackingData || data : data
            }, deflateOrFail: function(data) {
                return WinJS.Binding.unwrap(data)._augmentBackingData
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Merger", {
        defaultMerger: function defaultMerger(item1, item2) {
            return new MSE.Data.Property.MergedItem(item1, item2)
        }, self: function self(item1, item2) {
                return item1 || item2
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Comparer", {
        defaultComparer: function defaultComparer(item1, item2) {
            if (item1 === item2)
                return 0;
            else if (item1 < item2 || item2 === null || item2 === undefined)
                return -1;
            else if (item1 > item2 || item1 === null || item1 === undefined)
                return 1;
            else
                return 0
        }, inverseDefaultComparer: function inverseDefaultComparer(item1, item2) {
                if (item1 === item2)
                    return 0;
                else if (item1 > item2 || item2 === null || item2 === undefined)
                    return -1;
                else if (item1 < item2 || item1 === null || item1 === undefined)
                    return 1;
                else
                    return 0
            }, dateComparer: function dateComparer(date1, date2) {
                var isDate1 = date1 && date1.getTime;
                var isDate2 = date2 && date2.getTime;
                if (isDate1 && isDate2)
                    return MS.Entertainment.Data.Comparer.defaultComparer(date1.getTime(), date2.getTime());
                else if (isDate1 && !isDate2)
                    return -1;
                else if (isDate2 && !isDate1)
                    return 1;
                else
                    return 0
            }, inverseDateComparer: function dateComparer(date1, date2) {
                var isDate1 = date1 && date1.getTime;
                var isDate2 = date2 && date2.getTime;
                if (isDate1 && isDate2)
                    return MS.Entertainment.Data.Comparer.inverseDefaultComparer(date1.getTime(), date2.getTime());
                else if (isDate1 && !isDate2)
                    return -1;
                else if (isDate2 && !isDate1)
                    return 1;
                else
                    return 0
            }, notFalsy: function notFalsy(item1, item2) {
                var emptyOrNull1 = item1 === null || item1 === undefined || item1 === String.empty;
                var emptyOrNull2 = item2 === null || item2 === undefined || item2 === String.empty;
                if (emptyOrNull1 && emptyOrNull2)
                    return NaN;
                else if (emptyOrNull2)
                    return -1;
                else if (emptyOrNull1)
                    return 1;
                else
                    return 0
            }, preferSecond: function preferSecond(item1, item2) {
                return 1
            }, createPropertyComparer: function(propertyPath, innerComparer, secondPropertyPath) {
                innerComparer = innerComparer || MS.Entertainment.Data.Comparer.defaultComparer;
                return function propertyComparer(item1, item2) {
                        var propertyFragments = MSE.Utilities.getPropertyPathFragments(propertyPath);
                        var secondPropertyFragments = (secondPropertyFragments === undefined) ? propertyFragments : MSE.Utilities.getPropertyPathFragments(secondPropertyPath);
                        item1 = MSE.Data.Property._valueFromPropertyPathFragments(item1, propertyFragments);
                        item2 = MSE.Data.Property._valueFromPropertyPathFragments(item2, secondPropertyFragments);
                        return innerComparer(item1, item2)
                    }
            }, createFilterComparer: function(filter) {
                filter = filter || MS.Entertainment.Data.Filter.defaultFilter;
                return function filterComparer(item1, item2) {
                        var item = item1;
                        var result = -1;
                        if ((item1 === null || item1 === undefined) && (item2 !== null && item2 !== undefined)) {
                            item = item2;
                            result = 1
                        }
                        if (filter(item))
                            result = NaN;
                        return result
                    }
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Filter", {
        defaultFilter: function defaultFilter(item) {
            return false
        }, createPropertyFilter: function createPropertyFilter(propertyPath, filterOrValue) {
                if (typeof filterOrValue === "function")
                    return function filter(item) {
                            var propertyFragments = MSE.Utilities.getPropertyPathFragments(propertyPath);
                            item = MSE.Data.Property._valueFromPropertyPathFragments(item, propertyFragments);
                            return filterOrValue(item)
                        };
                else
                    return function filter(item) {
                            var propertyFragments = MSE.Utilities.getPropertyPathFragments(propertyPath);
                            item = MSE.Data.Property._valueFromPropertyPathFragments(item, propertyFragments);
                            return item !== filterOrValue
                        }
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Property", {
        _getArray: function _getArray(original, propertyPathFragments) {
            var data;
            var returnResult = {
                    length: 0, data: []
                };
            if (MSE.Data.Property._hasPropertyPathFragments(original, propertyPathFragments)) {
                data = MSE.Data.Property._valueFromPropertyPathFragments(original, propertyPathFragments);
                if (MSE.Data.VectorViewWrapper.isVectorView(data)) {
                    returnResult.length = MSE.Data.VectorViewWrapper.getLength(data);
                    returnResult.data = data
                }
                else if (Array.isArray(data)) {
                    returnResult.length = data.length;
                    returnResult.data = data
                }
                else {
                    returnResult.length = 1;
                    returnResult.data = [data]
                }
            }
            return returnResult
        }, MergedItem: MS.Entertainment.UI.Framework.define(function _mergedItem(source1, source2) {
                this.source = [];
                if (source1 !== undefined)
                    this.source[0] = source1;
                if (source2 !== undefined)
                    this.source[1] = source2
            }, {
                source: null, primary: {get: function() {
                            return this.source[0] !== undefined ? this.source[0] : this.source[1]
                        }}
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Property", {
        _getPropertyPathFragments: function _getPropertyPathFragments(source, propertyPath) {
            if (Array.isArray(propertyPath) && source) {
                var propertyPathArray = propertyPath;
                propertyPath = null;
                for (var i = 0; i < propertyPathArray.length; i++) {
                    propertyPath = propertyPathArray[i];
                    if (MSE.Data.Property._hasPropertyPath(source, propertyPath))
                        break
                }
            }
            var result;
            if (Array.isArray(propertyPath)) {
                result = [];
                for (var j = 0; j < propertyPath.length; j++)
                    result.push(MSE.Utilities.getPropertyPathFragments(propertyPath[j]))
            }
            else
                result = MSE.Utilities.getPropertyPathFragments(propertyPath);
            return result
        }, _valueFromPropertyPathFragments: function _valueFromPropertyPathFragments(original, fragments) {
                var result;
                if (Array.isArray(fragments) && Array.isArray(fragments[0])) {
                    result = [];
                    for (var i = 0; i < fragments.length; i++)
                        result.push(MSE.Utilities.valueFromPropertyPathFragments(original, fragments[i]))
                }
                else
                    result = MSE.Utilities.valueFromPropertyPathFragments(original, fragments);
                return result
            }, _setFromPropertyPathFragments: function _setFromPropertyPathFragments(original, fragments, value) {
                if (Array.isArray(fragments) && Array.isArray(fragments[0]))
                    MSE.Utilities.setFromPropertyPathFragments(original, fragments[0], value);
                else
                    MSE.Utilities.setFromPropertyPathFragments(original, fragments, value)
            }, _hasPropertyPath: function _hasPropertyPath(source, propertyPath) {
                var hasPath = false;
                if (Array.isArray(propertyPath)) {
                    for (var i = 0; i < propertyPath.length; i++)
                        if (MSE.Utilities.hasPropertyPath(source, propertyPath[i])) {
                            hasPath = true;
                            break
                        }
                }
                else
                    hasPath = MSE.Utilities.hasPropertyPath(source, propertyPath);
                return hasPath
            }, _hasPropertyPathFragments: function _hasPropertyPathFragments(source, propertyPathFragments) {
                var hasPath = false;
                if (Array.isArray(propertyPathFragments) && Array.isArray(propertyPathFragments[0])) {
                    for (var i = 0; i < propertyPathFragments.length; i++)
                        if (MSE.Utilities.hasPropertyPathFragments(source, propertyPathFragments[i])) {
                            hasPath = true;
                            break
                        }
                }
                else
                    hasPath = MSE.Utilities.hasPropertyPathFragments(source, propertyPathFragments);
                return hasPath
            }, _getDefaultValue: function _getDefaultValue(defaultValue, source) {
                if (defaultValue && typeof defaultValue === "function")
                    defaultValue = defaultValue.call(source);
                return defaultValue
            }, _getFeatureEnabled: function _getFeatureEnabled(options) {
                var featureEnabled = true;
                if (options && options.feature !== undefined) {
                    var feature = options.feature;
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    if (Array.isArray(feature))
                        for (var i = 0; i < feature.length; i++) {
                            featureEnabled = featureEnablement.isEnabled(feature[i]);
                            if (featureEnabled)
                                break
                        }
                    else
                        featureEnabled = featureEnablement.isEnabled(feature)
                }
                return featureEnabled
            }, hydrated: function hydrated(property, overrideComparer) {
                if (!property)
                    throw new Error("Invalid parameter. Property was not defined");
                property.hydrated = true;
                if (overrideComparer)
                    property.hydratedComparer = overrideComparer;
                return property
            }, hydratedRequired: function hydratedRequired(property, overrideComparer) {
                property = MSE.Data.Property.hydrated(property, overrideComparer);
                property.hydratedRequired = true;
                return property
            }, hydratedIfAvailable: function hydratedIfAvailable(property, overrideComparer) {
                property = MSE.Data.Property.hydrated(property, overrideComparer);
                property.hydratedIfAvailable = true;
                return property
            }, uncachable: function uncachable(property) {
                property.cacheable = false;
                return property
            }, copyHydrated: function copyHydrated(destination, source) {
                if (source && destination) {
                    destination.hydrated = source.hydrated;
                    destination.hydratedRequired = source.hydratedRequired;
                    destination.hydratedComparer = source.hydratedComparer
                }
                return destination
            }, value: function value(defaultValue) {
                var property = {
                        get: function() {
                            if (this._assertValueNotHydrated)
                                this._assertValueNotHydrated(property);
                            return MS.Entertainment.Data.Property._getDefaultValue(defaultValue, this)
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true
                    };
                return property
            }, _alias: function _alias(deflate, source, defaultValue) {
                var property = {
                        get: function() {
                            var byPassDeflate = arguments[0];
                            var original = (deflate && !byPassDeflate) ? MSE.Data.deflateOrFail(this) : this;
                            var fragments = MSE.Data.Property._getPropertyPathFragments(original, source);
                            if (MSE.Data.Property._hasPropertyPathFragments(original, fragments))
                                return MSE.Data.Property._valueFromPropertyPathFragments(original, fragments);
                            else {
                                if (this._assertValueNotHydrated)
                                    this._assertValueNotHydrated(property);
                                return MS.Entertainment.Data.Property._getDefaultValue(defaultValue, this)
                            }
                        }, set: function(value) {
                                if (this._cache) {
                                    var original = (deflate) ? MSE.Data.deflate(this) : this;
                                    var fragments = MSE.Data.Property._getPropertyPathFragments(original, source);
                                    MSE.Data.Property._setFromPropertyPathFragments(original, fragments, value)
                                }
                            }, augmented: true, enumerable: true, configurable: true
                    };
                return property
            }, alias: function(source, defaultValue) {
                return MSE.Data.Property._alias(true, source, defaultValue)
            }, _convertOriginal: function _convertOriginal(deflate, source, initializerCallback, defaultValue) {
                if (!initializerCallback)
                    throw new Error("Invalid augument to convertOriginal. The given callback was null or undefined. Source = " + source);
                var property = MSE.Data.Property._alias(deflate, source, defaultValue);
                property.initializer = function initializer() {
                    var byPassDeflate = arguments[0];
                    var original = (deflate && !byPassDeflate) ? MSE.Data.deflateOrFail(this) : this;
                    var fragments = MSE.Data.Property._getPropertyPathFragments(original, source);
                    if (MSE.Data.Property._hasPropertyPathFragments(original, fragments))
                        initializerCallback(original, fragments, original, fragments);
                    else if (this._assertValueNotHydrated)
                        this._assertValueNotHydrated(property)
                };
                return property
            }, convertOriginal: function convertOriginal(source, callback, defaultValue) {
                return MSE.Data.Property._convertOriginal(true, source, callback, defaultValue)
            }, convertOriginalNoDeflate: function convertOriginalNoDeflate(source, callback, defaultValue) {
                return MSE.Data.Property._convertOriginal(false, source, callback, defaultValue)
            }, _convert: function _convert(deflate, source, parser, defaultValue, options) {
                if (!parser)
                    throw new Error("Invalid augument. The given parser was null or undefined. Source = " + source);
                var property = {
                        get: function() {
                            var result;
                            var byPassDeflate = arguments[0];
                            var original = (deflate && !byPassDeflate) ? MSE.Data.deflateOrFail(this) : this;
                            var fragments = MSE.Data.Property._getPropertyPathFragments(original, source);
                            var featureEnabled = MSE.Data.Property._getFeatureEnabled(options);
                            if (!featureEnabled)
                                result = MS.Entertainment.Data.Property._getDefaultValue(defaultValue, this);
                            else if (MSE.Data.Property._hasPropertyPathFragments(original, fragments))
                                result = parser(MSE.Data.Property._valueFromPropertyPathFragments(original, fragments));
                            else {
                                if (this._assertValueNotHydrated)
                                    this._assertValueNotHydrated(property);
                                result = MS.Entertainment.Data.Property._getDefaultValue(defaultValue, this)
                            }
                            return result
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true
                    };
                return property
            }, convert: function convert(source, parser, defaultValue, options) {
                return MSE.Data.Property._convert(true, source, parser, defaultValue, options)
            }, convertNoDeflate: function(source, parser, defaultValue, options) {
                return MSE.Data.Property._convert(false, source, parser, defaultValue, options)
            }, _augment: function(deflate, source, augmentationOrFactory, defaultValue) {
                if (!augmentationOrFactory)
                    throw new Error("Invalid augument. The given augmentationOrFactory definition was null or undefined. Source = " + source);
                var itemFactory;
                if (!augmentationOrFactory || MSE.Data.Augmentation.prototype.isPrototypeOf(augmentationOrFactory.prototype))
                    itemFactory = MSE.Data.Factory.createAugmentationFactory(augmentationOrFactory);
                else
                    itemFactory = augmentationOrFactory;
                var property = {
                        get: function() {
                            var result;
                            var byPassDeflate = arguments[0];
                            var original = (deflate && !byPassDeflate) ? MSE.Data.deflateOrFail(this) : this;
                            var fragments = MSE.Data.Property._getPropertyPathFragments(original, source);
                            if (MSE.Data.Property._hasPropertyPathFragments(original, fragments)) {
                                original = MSE.Data.Property._valueFromPropertyPathFragments(original, fragments);
                                if (Array.isArray(original))
                                    result = MSE.Data.augmentArrayItems(original, itemFactory);
                                else
                                    result = itemFactory(original)
                            }
                            else {
                                if (this._assertValueNotHydrated)
                                    this._assertValueNotHydrated(property);
                                result = MS.Entertainment.Data.Property._getDefaultValue(defaultValue, this)
                            }
                            return result
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true, augmentation: MSE.Data.Property._augment, augmentationOptions: {
                                deflate: deflate, source: source, augmentation: augmentationOrFactory, defaultValue: defaultValue
                            }
                    };
                return property
            }, augment: function(source, augmentation, defaultValue) {
                return MSE.Data.Property._augment(true, source, augmentation, defaultValue)
            }, augmentNoDeflate: function(source, augmentation, defaultValue) {
                return MSE.Data.Property._augment(false, source, augmentation, defaultValue)
            }, sortArray: function sortArray(source, comparer, augmentation, defaultValue) {
                var result = MSE.Data.Property.augment(source, augmentation, defaultValue);
                var oldGetter = result.get;
                if (!comparer)
                    throw new Error("Invalid augument. The given comparer was null or undefined. Comparer = " + comparer);
                return {
                        get: function() {
                            var result = oldGetter.apply(this);
                            if (Array.isArray(result))
                                result = result.sort(comparer);
                            return result
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true, augmentation: MSE.Data.Property.sortArray, augmentationOptions: {
                                source: source, comparer: comparer, augmentation: augmentation, defaultValue: defaultValue
                            }
                    }
            }, format: function(source, stringId, defaultValue) {
                if (!stringId) {
                    MSE.Data.fail("Invalid augument. The given stringId was null or undefined. Source = " + source);
                    return String.empty
                }
                var property = {
                        get: function() {
                            var result = defaultValue;
                            var byPassDeflate = arguments[0];
                            var original = !byPassDeflate ? MSE.Data.deflateOrFail(this) : this;
                            var fragments = MSE.Data.Property._getPropertyPathFragments(original, source);
                            if (source === null)
                                result = String.load(stringId);
                            else if (MSE.Data.Property._hasPropertyPathFragments(original, fragments))
                                result = String.load(stringId).format(MSE.Data.Property._valueFromPropertyPathFragments(original, fragments));
                            else if (this._assertValueNotHydrated)
                                this._assertValueNotHydrated(property);
                            return result
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true
                    };
                return property
            }, _collect: function _collect(deflate, sources, parser, defaultValue) {
                var property = {
                        get: function() {
                            var i,
                                currentParser,
                                fragments;
                            var result = [];
                            var byPassDeflate = arguments[0];
                            var original = (deflate && !byPassDeflate) ? MSE.Data.deflateOrFail(this) : this;
                            if (sources)
                                for (i = 0; i < sources.length; i += 1) {
                                    currentParser = (Array.isArray(parser)) ? parser[i] : parser;
                                    fragments = MSE.Data.Property._getPropertyPathFragments(original, sources[i]);
                                    if (MSE.Data.Property._hasPropertyPathFragments(original, fragments)) {
                                        var item = MSE.Data.Property._valueFromPropertyPathFragments(original, fragments);
                                        if (currentParser)
                                            item = currentParser(item);
                                        result.push(item)
                                    }
                                    else if (defaultValue !== undefined) {
                                        var item = defaultValue;
                                        if (currentParser)
                                            item = currentParser(item);
                                        result.push(item)
                                    }
                                    else if (this._assertValueNotHydrated)
                                        this._assertValueNotHydrated(property)
                                }
                            return result
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true
                    };
                return property
            }, collect: function collect(sources, parser, defaultValue) {
                return MS.Entertainment.Data.Property._collect(true, sources, parser, defaultValue)
            }, collectNoDeflate: function collectNoDeflate(sources, parser, defaultValue) {
                return MS.Entertainment.Data.Property._collect(false, sources, parser, defaultValue)
            }, _filterArray: function _filterArray(deflate, source, filter, augmentation) {
                var property = MSE.Data.Property._filter(deflate, source, filter, augmentation);
                property.resultConstructor = Array.prototype.constructor;
                var originalGet = property.get;
                property.get = function get() {
                    MS.Entertainment.Data.Property.copyHydrated(originalGet, property);
                    var list = originalGet.call(this);
                    var array = (list && list.source) ? list.source : [];
                    return MS.Entertainment.Data.augmentArrayItems(array, augmentation)
                };
                property.augmentation = MSE.Data.Property._filterArray;
                property.augmentationOptions = {
                    deflate: deflate, source: source, filter: filter, augmentation: augmentation
                };
                return property
            }, filterArray: function filterArray(source, filter, augmentation) {
                return MS.Entertainment.Data.Property._filterArray(true, source, filter, augmentation)
            }, filterArrayNoDeflate: function filterArrayNoDeflate(source, filter, augmentation) {
                return MS.Entertainment.Data.Property._filterArray(false, source, filter, augmentation)
            }, _search: function _search(deflate, source, filter, defaultValue) {
                if (!source)
                    throw new Error("Invalid augument. The given source was null or undefined. Source = " + source);
                if (!filter)
                    throw new Error("Invalid augument. The given filter function was null or undefined. Filter = " + filter);
                var property = {
                        get: function() {
                            var i;
                            var result = null;
                            var byPassDeflate = arguments[0];
                            var original = (deflate && !byPassDeflate) ? MSE.Data.deflateOrFail(this) : this;
                            var fragments = MSE.Data.Property._getPropertyPathFragments(original, source);
                            if (MSE.Data.Property._hasPropertyPathFragments(original, fragments)) {
                                var sourceValue = MSE.Data.Property._valueFromPropertyPathFragments(original, fragments);
                                if (Array.isArray(sourceValue)) {
                                    for (i = 0; i < sourceValue.length; i++)
                                        if (!filter(sourceValue[i])) {
                                            result = sourceValue[i];
                                            break
                                        }
                                }
                                else if (!filter(sourceValue))
                                    result = sourceValue
                            }
                            else {
                                if (this._assertValueNotHydrated)
                                    this._assertValueNotHydrated(property);
                                result = MS.Entertainment.Data.Property._getDefaultValue(defaultValue, this)
                            }
                            return result
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true
                    };
                return property
            }, search: function search(source, filter, defaultValue) {
                return MS.Entertainment.Data.Property._search(true, source, filter, defaultValue)
            }, searchNoDeflate: function search(source, filter, defaultValue) {
                return MS.Entertainment.Data.Property._search(false, source, filter, defaultValue)
            }, isList: function isList(augmentation) {
                return augmentation && augmentation.resultConstructor === MSE.Data.VirtualList.prototype.constructor
            }, createAugmentation: function createAugmentation(original, optionOverrides) {
                var result = null;
                var key;
                var augmentationOptions;
                if (original && original.augmentation && original.augmentationOptions) {
                    optionOverrides = optionOverrides || {};
                    augmentationOptions = [];
                    for (key in original.augmentationOptions)
                        if (key in optionOverrides)
                            augmentationOptions.push(optionOverrides[key]);
                        else
                            augmentationOptions.push(original.augmentationOptions[key]);
                    result = original.augmentation.apply(this, augmentationOptions)
                }
                return result
            }, list: function(source, itemAugmentationOrFactory, defaultValue) {
                var itemFactory;
                if (!itemAugmentationOrFactory || MSE.Data.Augmentation.prototype.isPrototypeOf(itemAugmentationOrFactory.prototype))
                    itemFactory = MSE.Data.Factory.createAugmentationFactory(itemAugmentationOrFactory);
                else
                    itemFactory = itemAugmentationOrFactory;
                var property = {
                        get: function() {
                            var result = MS.Entertainment.Data.Property._getDefaultValue(defaultValue, this);
                            var byPassDeflate = arguments[0];
                            var original = !byPassDeflate ? MSE.Data.deflateOrFail(this) : this;
                            var fragments = MSE.Data.Property._getPropertyPathFragments(original, source);
                            if (MSE.Data.Property._hasPropertyPathFragments(original, fragments)) {
                                result = MSE.Data.Property._valueFromPropertyPathFragments(original, fragments);
                                result = new MSE.Data.VirtualList(itemFactory, result)
                            }
                            else if (this._assertValueNotHydrated)
                                this._assertValueNotHydrated(property);
                            return result
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true, resultConstructor: MSE.Data.VirtualList.prototype.constructor, augmentation: MSE.Data.Property.list, augmentationOptions: {
                                source: source, itemAugmentationOrFactory: itemAugmentationOrFactory, defaultValue: defaultValue
                            }
                    };
                return property
            }, listWithContext: function listWithContext(source, context, itemAugmentationOrFactory, defaultValue) {
                var innerItemFactory;
                if (!itemAugmentationOrFactory || MSE.Data.Augmentation.prototype.isPrototypeOf(itemAugmentationOrFactory.prototype))
                    innerItemFactory = MSE.Data.Factory.createAugmentationFactory(itemAugmentationOrFactory);
                else
                    innerItemFactory = itemAugmentationOrFactory;
                var property = MSE.Data.Property.list(source, itemAugmentationOrFactory, defaultValue);
                var oldGetter = property.get;
                property.get = function() {
                    var result = oldGetter.apply(this, arguments);
                    var byPassDeflate = arguments[0];
                    var original = !byPassDeflate ? MSE.Data.deflateOrFail(this) : this;
                    var contextFragments = MSE.Data.Property._getPropertyPathFragments(original, context);
                    if (MSE.Data.Property._hasPropertyPathFragments(original, contextFragments)) {
                        var contextValue = MSE.Data.Property._valueFromPropertyPathFragments(original, contextFragments);
                        var itemFactoryWithContext = function itemFactoryWithContext(sourceItem) {
                                return innerItemFactory(sourceItem, contextValue)
                            };
                        itemFactoryWithContext.listItemFactory = innerItemFactory.listItemFactory;
                        result.setItemFactory(itemFactoryWithContext)
                    }
                    return result
                };
                property.augmentation = MSE.Data.Property.listWithContext,
                property.augmentationOptions = {
                    source: source, context: context, itemAugmentationOrFactory: itemAugmentationOrFactory, defaultValue: defaultValue
                };
                return property
            }, _sort: function _sort(deflate, source, comparer, filter, itemAugmentationOrFactory) {
                var itemFactory;
                if (!itemAugmentationOrFactory || MSE.Data.Augmentation.prototype.isPrototypeOf(itemAugmentationOrFactory.prototype))
                    itemFactory = MSE.Data.Factory.createAugmentationFactory(itemAugmentationOrFactory);
                else
                    itemFactory = itemAugmentationOrFactory;
                comparer = comparer || MS.Entertainment.Data.Comparer.defaultComparer;
                var property = {
                        get: function union() {
                            var byPassDeflate = arguments[0];
                            var original = (deflate && !byPassDeflate) ? MSE.Data.deflateOrFail(this) : this;
                            var fragments = MSE.Data.Property._getPropertyPathFragments(original, source);
                            var array = source !== undefined ? MSE.Data.Property._getArray(original, fragments).data : [];
                            var arrayLength = array.length;
                            var sortedArray = [];
                            if (filter)
                                array = array.filter(filter);
                            sortedArray = array.sort(comparer);
                            return new MSE.Data.VirtualList(itemFactory, sortedArray)
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true, resultConstructor: MSE.Data.VirtualList.prototype.constructor
                    };
                return property
            }, sort: function sort(source, comparer, filter, itemAugmentationOrFactory) {
                var result = MSE.Data.Property._sort(true, source, comparer, filter, itemAugmentationOrFactory);
                result.augmentation = MSE.Data.Property.sort;
                result.augmentationOptions = {
                    source: source, comparer: comparer, filter: filter, itemAugmentationOrFactory: itemAugmentationOrFactory
                };
                return result
            }, sortNoDeflate: function sortNoDeflate(source, comparer, filter, itemAugmentationOrFactory) {
                var result = MSE.Data.Property._sort(false, source, comparer, filter, itemAugmentationOrFactory);
                result.augmentation = MSE.Data.Property.sortNoDeflate;
                result.augmentationOptions = {
                    source: source, comparer: comparer, filter: filter, itemAugmentationOrFactory: itemAugmentationOrFactory
                };
                return result
            }, _union: function(deflate, source1, source2, comparer, merger, itemAugmentationOrFactory) {
                var itemFactory;
                if (!itemAugmentationOrFactory || MSE.Data.Augmentation.prototype.isPrototypeOf(itemAugmentationOrFactory.prototype))
                    itemFactory = MSE.Data.Factory.createAugmentationFactory(itemAugmentationOrFactory);
                else
                    itemFactory = itemAugmentationOrFactory;
                comparer = comparer || MS.Entertainment.Data.Comparer.defaultComparer;
                merger = merger || MS.Entertainment.Data.Merger.defaultMerger;
                var property = {
                        get: function union() {
                            var byPassDeflate = arguments[0];
                            var original = (deflate && !byPassDeflate) ? MSE.Data.deflateOrFail(this) : this;
                            var fragments1 = MSE.Data.Property._getPropertyPathFragments(original, source1);
                            var fragments2 = MSE.Data.Property._getPropertyPathFragments(original, source2);
                            var array1 = source1 !== undefined ? MSE.Data.Property._getArray(original, fragments1) : [];
                            var array2 = source2 !== undefined ? MSE.Data.Property._getArray(original, fragments2) : [];
                            var array1Length = array1.length;
                            var array2Length = array2.length;
                            var empty,
                                item1,
                                item2;
                            var combinedArray = [];
                            var i = 0,
                                j = 0;
                            array1 = array1.data;
                            array2 = array2.data;
                            while ((i < array1Length || j < array2Length) && (i <= array1Length && j <= array2Length)) {
                                item1 = (i < array1Length) ? array1[i] : empty;
                                item2 = (j < array2Length) ? array2[j] : empty;
                                var compareResult = comparer(item1, item2);
                                var mergedResult = null;
                                if (compareResult === 0) {
                                    mergedResult = merger(item1, item2);
                                    i++;
                                    j++
                                }
                                else if (compareResult < 0) {
                                    mergedResult = merger(item1);
                                    i++
                                }
                                else if (!isNaN(compareResult)) {
                                    mergedResult = merger(empty, item2);
                                    j++
                                }
                                else {
                                    if (i < array1Length)
                                        i++;
                                    {};
                                    if (j < array2Length)
                                        j++;
                                    {}
                                }
                                if (mergedResult !== null && mergedResult !== undefined)
                                    combinedArray.push(mergedResult)
                            }
                            return new MSE.Data.VirtualList(itemFactory, combinedArray)
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true, resultConstructor: MSE.Data.VirtualList.prototype.constructor
                    };
                return property
            }, union: function(source1, source2, comparer, merger, itemAugmentationOrFactory) {
                var result = MSE.Data.Property._union(true, source1, source2, comparer, merger, itemAugmentationOrFactory);
                result.augmentation = MSE.Data.Property.union;
                result.augmentationOptions = {
                    source1: source1, source2: source2, comparer: comparer, merger: merger, itemAugmentationOrFactory: itemAugmentationOrFactory
                };
                return result
            }, unionNoDeflate: function(source1, source2, comparer, merger, itemAugmentationOrFactory) {
                var result = MSE.Data.Property._union(false, source1, source2, comparer, merger, itemAugmentationOrFactory);
                result.augmentation = MSE.Data.Property.unionNoDeflate;
                result.augmentationOptions = {
                    source1: source1, source2: source2, comparer: comparer, merger: merger, itemAugmentationOrFactory: itemAugmentationOrFactory
                };
                return result
            }, _reorder: function(deflate, orderSource, parentSource, itemAugmentationOrFactory, returnArray) {
                var itemFactory;
                if (!itemAugmentationOrFactory || MSE.Data.Augmentation.prototype.isPrototypeOf(itemAugmentationOrFactory.prototype))
                    itemFactory = MSE.Data.Factory.createAugmentationFactory(itemAugmentationOrFactory);
                else
                    itemFactory = itemAugmentationOrFactory;
                var property = {
                        get: function reorder() {
                            var byPassDeflate = arguments[0];
                            var original = (deflate && !byPassDeflate) ? MSE.Data.deflateOrFail(this) : this;
                            var orderSourceFragments = MSE.Data.Property._getPropertyPathFragments(original, orderSource);
                            var orderArray = (orderSource !== undefined) ? MSE.Data.Property._getArray(original, orderSourceFragments) : [];
                            var newArray = [];
                            if (orderArray.data)
                                newArray = orderArray.data.map(function(key) {
                                    var fragments = MSE.Data.Property._getPropertyPathFragments(original, parentSource + "." + key);
                                    return MSE.Data.Property._valueFromPropertyPathFragments(original, fragments)
                                }.bind(this));
                            if (returnArray)
                                return MS.Entertainment.Data.augmentArrayItems(newArray, itemFactory);
                            else
                                return new MSE.Data.VirtualList(itemFactory, newArray)
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true, resultConstructor: (returnArray) ? Array.prototype.constructor : MSE.Data.VirtualList.prototype.constructor
                    };
                return property
            }, reorder: function(orderSource, parentSource, itemAugmentationOrFactory) {
                var result = MSE.Data.Property._reorder(true, orderSource, parentSource, itemAugmentationOrFactory);
                result.augmentation = MSE.Data.Property.reorder;
                result.augmentationOptions = {
                    orderSource: orderSource, parentSource: parentSource, itemAugmentationOrFactory: itemAugmentationOrFactory
                };
                return result
            }, reorderNoDeflate: function(orderSource, parentSource, itemAugmentationOrFactory) {
                var result = MSE.Data.Property._reorder(false, orderSource, parentSource, itemAugmentationOrFactory);
                result.augmentation = MSE.Data.Property.reorder;
                result.augmentationOptions = {
                    orderSource: orderSource, parentSource: parentSource, itemAugmentationOrFactory: itemAugmentationOrFactory
                };
                return result
            }, reorderArray: function(orderSource, parentSource, itemAugmentationOrFactory) {
                var result = MSE.Data.Property._reorder(true, orderSource, parentSource, itemAugmentationOrFactory, true);
                result.augmentation = MSE.Data.Property.reorder;
                result.augmentationOptions = {
                    orderSource: orderSource, parentSource: parentSource, itemAugmentationOrFactory: itemAugmentationOrFactory
                };
                return result
            }, reorderArrayNoDeflate: function(orderSource, parentSource, itemAugmentationOrFactory) {
                var result = MSE.Data.Property._reorder(false, orderSource, parentSource, itemAugmentationOrFactory, true);
                result.augmentation = MSE.Data.Property.reorder;
                result.augmentationOptions = {
                    orderSource: orderSource, parentSource: parentSource, itemAugmentationOrFactory: itemAugmentationOrFactory
                };
                return result
            }, intersection: function(source1, source2, comparer, merger, itemAugmentationOrFactory) {
                var itemFactory;
                if (!itemAugmentationOrFactory || MSE.Data.Augmentation.prototype.isPrototypeOf(itemAugmentationOrFactory.prototype))
                    itemFactory = MSE.Data.Factory.createAugmentationFactory(itemAugmentationOrFactory);
                else
                    itemFactory = itemAugmentationOrFactory;
                comparer = comparer || MS.Entertainment.Data.Comparer.defaultComparer;
                merger = merger || MS.Entertainment.Data.Merger.defaultMerger;
                var property = {
                        get: function intersection() {
                            var original = MSE.Data.deflate(this);
                            var fragments1 = MSE.Data.Property._getPropertyPathFragments(original, source1);
                            var fragments2 = MSE.Data.Property._getPropertyPathFragments(original, source2);
                            var array1 = MSE.Data.Property._getArray(original, fragments1);
                            var array2 = MSE.Data.Property._getArray(original, fragments2);
                            var array1Length = array1.length;
                            var array2Length = array2.length;
                            var combinedArray = [];
                            var i = 0,
                                j = 0;
                            var empty,
                                item1,
                                item2;
                            array1 = array1.data;
                            array2 = array2.data;
                            while ((i < array1Length || j < array2Length) && (i <= array1Length && j <= array2Length)) {
                                item1 = (i < array1Length) ? array1[i] : empty;
                                item2 = (j < array2Length) ? array2[j] : empty;
                                var compareResult = comparer(item1, item2);
                                var mergedResult = null;
                                if (compareResult === 0) {
                                    mergedResult = merger(item1, item2);
                                    i++;
                                    j++
                                }
                                else if (compareResult < 0)
                                    i++;
                                else
                                    j++;
                                if (mergedResult !== null && mergedResult !== undefined)
                                    combinedArray.push(mergedResult)
                            }
                            return new MSE.Data.VirtualList(itemFactory, combinedArray)
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true, resultConstructor: MSE.Data.VirtualList.prototype.constructor, augmentation: MSE.Data.Property.list, augmentationOptions: {
                                source1: source1, source2: source2, comparer: comparer, merger: merger, itemAugmentationOrFactory: itemAugmentationOrFactory
                            }
                    };
                return property
            }, _filter: function _filter(deflate, source, filter, itemAugmentationOrFactory) {
                var merger = MS.Entertainment.Data.Merger.self;
                var comparer = MS.Entertainment.Data.Comparer.createFilterComparer(filter);
                var undefinedVariable;
                return MSE.Data.Property._union(deflate, source, undefinedVariable, comparer, merger, itemAugmentationOrFactory)
            }, filter: function filter(source, filter, itemAugmentationOrFactory) {
                var result = MSE.Data.Property._filter(true, source, filter, itemAugmentationOrFactory);
                result.augmentation = MSE.Data.Property.filter;
                result.augmentationOptions = {
                    source: source, filter: filter, itemAugmentationOrFactory: itemAugmentationOrFactory
                };
                return result
            }, filterNoDeflate: function filterNoDeflate(source, filter, itemAugmentationOrFactory) {
                var result = MSE.Data.Property._filter(false, source, filter, itemAugmentationOrFactory);
                result.augmentation = MSE.Data.Property.filterNoDeflate;
                result.augmentationOptions = {
                    source: source, filter: filter, itemAugmentationOrFactory: itemAugmentationOrFactory
                };
                return result
            }, containsRight: function containsRight(right) {
                var property = {
                        get: function() {
                            if (this.rights)
                                for (var i = 0; i < this.rights.length; i++)
                                    if (this.rights[i].licenseRight === right)
                                        return true;
                            return false
                        }, augmented: true, cacheable: true, enumerable: true, configurable: true
                    };
                return property
            }
    });
    WinJS.Namespace.defineWithParent(MSE.Data, "Factory", {
        array: function(data) {
            if (data !== undefined)
                return [data];
            else
                return []
        }, joinStrings: function joinStrings() {
                var strings = [];
                if (arguments)
                    for (var i = 0; i < arguments.length; i++)
                        strings.push(arguments[i]);
                return strings.join()
            }, arrayJoin: function arrayJoin(data, seperator) {
                seperator = seperator || "/";
                var result = String.empty;
                if (Array.isArray(data)) {
                    data = data.filter(function removeNullsAndNonStrings(element) {
                        return element !== null && element !== undefined && typeof element === "string"
                    });
                    result = data.join(seperator)
                }
                return result
            }, arrayJoinWithNewLines: function arrayJoinWithNewLines(data) {
                return MSE.Data.Factory.arrayJoin(data, "\n\n")
            }, bool: function bool(data) {
                return (data) ? true : false
            }, not: function not(data) {
                return (!data) ? true : false
            }, boolFromString: function boolFromString(data) {
                var re = /^((t)|(true)|(1)|(y)|(yes))$/i;
                var type = typeof(data);
                if (type === "boolean")
                    return data;
                else
                    return (data && typeof(data) === "string" && data.match(re)) ? true : false
            }, string: function string(data) {
                return (data) ? "" + data : null
            }, stringNoNewLines: function stringNoNewLines(data) {
                if (data) {
                    data = "" + data;
                    data = data.replace(/(\r\n)|(\r)|(\n)|(\u2028)|(\u2029)/g, " ")
                }
                {};
                return data
            }, stringOrEmpty: function stringOrEmpty(data) {
                if (typeof data === "string")
                    return data;
                else
                    return ""
            }, stringOrUnknown: function stringOrUnknown(data) {
                var result = MS.Entertainment.Data.Factory.string(data);
                return result || String.load(String.id.IDS_UNKNOWN_VALUE)
            }, intNumber: function intNumber(data) {
                return parseInt(data)
            }, formattedIntNumber: function formattedIntNumber(data) {
                var intValue = parseInt(data);
                var formattedNum = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber.format(intValue);
                return formattedNum
            }, floatNumber: function floatNumber(data) {
                return parseFloat(data)
            }, date: function date(data) {
                var returnValue;
                if (!data)
                    returnValue = null;
                else if (data.constructor === Date)
                    returnValue = new Date(data);
                else if (data.constructor === String) {
                    var matches = data.match(/^\/Date\((-{0,1}[0-9]*)(\+|-){0,1}([0-9]{4}){0,1}\)\/$/);
                    if (matches && matches[1]) {
                        returnValue = new Date(parseInt(matches[1]));
                        if (matches[2] && matches[3])
                            if (matches[2] === "+")
                                returnValue.setUTCHours(returnValue.getUTCHours() - parseInt(matches[3]));
                            else
                                returnValue.setUTCHours(returnValue.getUTCHours() + parseInt(matches[3]))
                    }
                    else
                        returnValue = MSE.Data.stringParser.dateFromUTC(data)
                }
                else if (data.universalTime !== undefined)
                    returnValue = new Date(data.universalTime);
                else
                    returnValue = null;
                return returnValue
            }, databaseDateFromYear: function databaseDateFromYear(year) {
                var date = null;
                var databaseDate = null;
                var parsedYear = parseInt(year);
                if (parsedYear >= 0) {
                    date = new Date(year, 1, 2, 0, 0, 0, 0);
                    databaseDate = MS.Entertainment.Formatters.formatDatabaseDataFromReleaseDate(date)
                }
                else
                    MS.Entertainment.Data.fail("Factory::databaseDateFromYear. Invalid year: " + year);
                return databaseDate
            }, dateNow: function dateNow() {
                return new Date
            }, databaseDate: function databaseDate(data) {
                var returnValue;
                if (!data || (data.constructor === String && (data === "0001-01-01T00:00:00.000Z" || data === "1601-01-01T00:00:00Z")))
                    returnValue = null;
                else
                    returnValue = MSE.Data.Factory.date(data);
                return returnValue
            }, secondsToMilliseconds: function secondsToMilliseconds(data) {
                return parseInt(data) * 1000
            }, year: function year(data) {
                var resultValue = null;
                if (!data)
                    resultValue = null;
                else if (data.constructor === Date)
                    resultValue = data.getFullYear();
                else
                    resultValue = data;
                return resultValue
            }, localizedYear: function localizedYear(date) {
                var year = String.empty;
                var yearNumber = NaN;
                if (date && date.constructor !== Date) {
                    if (String.isString(date))
                        yearNumber = parseInt(date);
                    if (isNaN(yearNumber))
                        date = new Date(date);
                    else {
                        date = new Date;
                        date.setFullYear(yearNumber)
                    }
                }
                if (date && !isNaN(date.getTime())) {
                    var formattedYear = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).year;
                    year = formattedYear.format(date)
                }
                return year
            }, randomDate: function randomDate(data) {
                var daysBefore = Math.floor(Math.random() * 9 + 1);
                var daysBeforeMS = daysBefore * 24 * 60 * 60 * 1000;
                var returnValue = new Date((new Date).getTime() - daysBeforeMS);
                returnValue.setMilliseconds(0);
                returnValue.setSeconds(0);
                returnValue.setMinutes(0);
                returnValue.setHours(0);
                return returnValue
            }, timeSpan: function timeSpan(data) {
                var returnValue;
                if (typeof data === "string")
                    returnValue = MSE.Data.stringParser.timeSpanFromXmlDuration(data);
                return returnValue
            }, guid: function guid(data) {
                if (data && data.replace && data.toLowerCase) {
                    data = data.toLowerCase();
                    data = data.replace(/(^http.*%2f)|(^urn:uuid:)|(^\s)|(\s$)/ig, String.empty)
                }
                return data
            }, normalizeSpacing: function normalizeSpacing(source) {
                if (source)
                    source = (source + "").trim().replace(/(\s+)/g, " ");
                return source
            }, appendCharacterDirection: function appendCharacterDirection(value) {
                var result = value;
                if (value && String.isString(value)) {
                    var appTextDirection = MSE.Utilities.getTextDirection();
                    var dataTextDirection = MSE.Utilities.detectStringDirection(value);
                    if (appTextDirection !== dataTextDirection) {
                        var directionMarkerCharacter = (dataTextDirection === MSE.Utilities.TextDirections.RightToLeft) ? String.rtlm : String.ltrm;
                        var firstCharacterDirection = MSE.Utilities.detectCharacterDirection(value.charCodeAt(0));
                        if (!firstCharacterDirection)
                            result = [directionMarkerCharacter, value, directionMarkerCharacter].join(String.empty);
                        else
                            result = value + directionMarkerCharacter
                    }
                }
                return result
            }, normalizeTextDirection: function normalizeTextDirection(source, sourcePropertyPath, destination, destinationPropertyPath) {
                var newString;
                var oldString = MSE.Data.Property._valueFromPropertyPathFragments(source, sourcePropertyPath);
                if (oldString === null || oldString === undefined || typeof oldString === "object")
                    newString = String.empty;
                else if (oldString)
                    newString = MSE.Data.Factory.appendCharacterDirection(oldString);
                if (newString || newString === String.empty)
                    MSE.Data.Property._setFromPropertyPathFragments(destination, destinationPropertyPath, newString)
            }, normalizeStringForVoice: function normalizeStringForVoice(stringToScrub) {
                return MSE.Data.Factory.stringOrEmpty(stringToScrub)
            }, normalizeStringForVoiceShort: function normalizeStringForVoiceShort(stringToScrub) {
                return MSE.Data.Factory.stringOrEmpty(stringToScrub)
            }, normalizeStringForVoiceLong: function normalizeStringForVoiceLong(stringToScrub) {
                return MSE.Data.Factory.stringOrEmpty(stringToScrub)
            }, oneTimeUseBlob: function oneTimeUseBlob(data) {
                var resultValue = null;
                if (data)
                    resultValue = URL.createObjectURL(data, {oneTimeOnly: true});
                return resultValue
            }, parseJSON: function parseJSON(data) {
                var result = null;
                if (data)
                    try {
                        result = JSON.parse(data)
                    }
                    catch(error) {
                        MS.Entertainment.Data.fail("Failed to parse JSON. Error: " + (error && error.message))
                    }
                return result
            }, self: function self(data) {
                return data
            }, ListItemWrapper: MS.Entertainment.UI.Framework.define(function listItemWrapper(source, factory, initializer) {
                Object.defineProperty(this, "_privateDataCache", {
                    value: {
                        source: source, factory: factory, initializer: initializer, group: null, isNonSourceData: false, isHeader: false, itemIndex: -1, groupIndexHint: null, groupKey: null, groupData: null, firstItemDescription: null, firstItemIndexHint: -1, firstItemKey: null
                    }, enumerable: false
                })
            }, {
                key: null, data: {get: function() {
                            if (this._privateDataCache.factory) {
                                this._privateDataCache.data = this._privateDataCache.factory(this._privateDataCache.source);
                                if (this._privateDataCache.initializer)
                                    this._privateDataCache.initializer(this._source, this._privateData);
                                this._privateDataCache.initializer = null;
                                this._privateDataCache.source = null;
                                this._privateDataCache.factory = null
                            }
                            return this._privateDataCache.data
                        }}, itemIndex: {
                        get: function() {
                            return this._privateDataCache.itemIndex
                        }, set: function(value) {
                                this._privateDataCache.itemIndex = value
                            }, enumerable: false
                    }, firstItemDescription: {
                        get: function() {
                            return this._privateDataCache.firstItemDescription || {sourceIndexHint: this.data && typeof this.data.firstItemIndexSourceHint === "number" ? this.data.firstItemIndexSourceHint : -1}
                        }, set: function(value) {
                                this._privateDataCache.firstItemDescription = value
                            }, enumerable: false
                    }, firstItemIndexHint: {
                        get: function() {
                            return this._privateDataCache.firstItemIndexHint
                        }, set: function(value) {
                                this._privateDataCache.firstItemIndexHint = value
                            }, enumerable: false
                    }, firstItemKey: {
                        get: function() {
                            return this._privateDataCache.firstItemKey
                        }, set: function(value) {
                                this._privateDataCache.firstItemKey = value
                            }, enumerable: false
                    }, groupIndexHint: {
                        get: function() {
                            return this._privateDataCache.groupIndexHint
                        }, set: function(value) {
                                this._privateDataCache.groupIndexHint = value
                            }, enumerable: false
                    }, groupKey: {
                        get: function() {
                            return this._privateDataCache.groupKey || (this.group && this.group.parentKey)
                        }, set: function(value) {
                                this._privateDataCache.groupKey = value
                            }, enumerable: false
                    }, groupData: {
                        get: function() {
                            return this._privateDataCache.groupData || this.data
                        }, set: function(value) {
                                this._privateDataCache.groupData = value
                            }, enumerable: false
                    }, isNonSourceData: {
                        get: function() {
                            return this._privateDataCache.isNonSourceData
                        }, set: function(value) {
                                this._privateDataCache.isNonSourceData = value
                            }, enumerable: false
                    }, isHeader: {
                        get: function() {
                            return this._privateDataCache.isHeader
                        }, set: function(value) {
                                this._privateDataCache.isHeader = value
                            }, enumerable: false
                    }, group: {
                        get: function() {
                            return this._privateDataCache.group
                        }, set: function(value) {
                                this._privateDataCache.group = value
                            }, enumerable: false
                    }, cached: {
                        get: function() {
                            return (!!this._privateDataCache.factory) || (this._privateDataCache.data !== undefined && this._privateDataCache !== null)
                        }, enumerable: false
                    }, clearCache: function clearCache() {
                        this._privateDataCache.data = null;
                        this._privateDataCache.initializer = null;
                        this._privateDataCache.source = null;
                        this._privateDataCache.factory = null
                    }
            }, {
                copyData: function copyData(destination, source, factory, initializer) {
                    destination._privateDataCache.data = null;
                    destination._privateDataCache.source = source;
                    destination._privateDataCache.factory = factory;
                    destination._privateDataCache.initializer = initializer;
                    return destination
                }, addFirstItemKey: function firstItemKey(item, callback) {
                        this._addProperty("firstItemKey", item, callback)
                    }, addFirstItemIndexHint: function addFirstItemIndexHint(item, callback) {
                        this._addProperty("firstItemIndexHint", item, callback)
                    }, _addProperty: function _addProperty(property, item, callback) {
                        if (callback)
                            Object.defineProperty(item, property, {
                                get: function() {
                                    if (callback)
                                        return callback();
                                    else
                                        return this._privateDataCache && this._privateDataCache["firstItemIndexHint"]
                                }, set: function(value) {
                                        callback = null;
                                        this._privateDataCache["firstItemIndexHint"] = value
                                    }, enumerable: false
                            })
                    }
            })
    });
    WinJS.Namespace.defineWithParent(MSE.Data, "Factory", {
        GroupHintWrapper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Factory.ListItemWrapper", function groupHintWrapper(source, factory, initializer) {
            MSE.Data.Factory.ListItemWrapper.prototype.constructor.apply(this, arguments)
        }, {getHashCode: function getHashCode() {
                return this.data && this.data.groupKey
            }}), ListHeaderWrapper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Factory.ListItemWrapper", function listHeaderWrapper(group, firstItemIndexHint) {
                MSE.Data.Factory.ListItemWrapper.prototype.constructor.call(this);
                this._privateDataCache.data = group.data;
                this.group = group;
                this.isNonSourceData = true;
                this.isHeader = true;
                this.firstItemIndexHint = firstItemIndexHint
            }, {preventAugmentation: true}), ListActionItemWrapper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Factory.ListItemWrapper", function listHeaderWrapper(data) {
                MSE.Data.Factory.ListItemWrapper.prototype.constructor.call(this);
                this._privateDataCache.data = data;
                this.isNonSourceData = true;
                this.groupKey = MS.Entertainment.Data.emptyGroupKey;
                this.groupIndexHint = 0
            }, {
                isAction: true, preventAugmentation: true
            }), ListNoHeaderItemWrapper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.Factory.ListItemWrapper", function listNoHeaderItemWrapper(data) {
                MSE.Data.Factory.ListItemWrapper.prototype.constructor.call(this);
                this._privateDataCache.data = data;
                this.isNonSourceData = true;
                this.groupKey = MS.Entertainment.Data.emptyGroupKey;
                this.groupIndexHint = 0
            }, {
                noHeader: true, preventAugmentation: true
            }), createAugmentationFactory: function createAugmentationFactory(augmentation) {
                return function augmentationFactory(sourceItem) {
                        return MSE.Data.augment(sourceItem, augmentation)
                    }
            }, createDerivedAugmentationOrFactory: function createDerivedAugmentationOrFactory(augmentationOrFactory, definition) {
                var result;
                if (!augmentationOrFactory || MSE.Data.Augmentation.prototype.isPrototypeOf(augmentationOrFactory.prototype))
                    result = MS.Entertainment.Data.derive(augmentationOrFactory || null, null, definition);
                else
                    result = function augmentationFactory(sourceItem) {
                        var value = augmentationOrFactory(sourceItem);
                        return MS.Entertainment.Data.Augmentation.addProperties(value, definition)
                    };
                return result
            }, createListItemAugmentationFactory: function createListItemAugmentationFactory(augmentation, initializer, ListItemWrapperConstructor) {
                return MSE.Data.Factory.createListItemFactory(MSE.Data.Factory.createAugmentationFactory(augmentation), initializer, ListItemWrapperConstructor)
            }, createListItemFactory: function createListItemFactory(innerFactory, initializer, ListItemWrapperConstructor) {
                if (!innerFactory)
                    throw"must provide an inner factory if creating a lazy factory method";
                var factory = function factoryMethod(source, destination) {
                        if (source && source.preventAugmentation)
                            return source;
                        else if (destination)
                            return MS.Entertainment.Data.Factory.ListItemWrapper.copyData(destination, source, innerFactory, initializer);
                        else if (ListItemWrapperConstructor)
                            return new ListItemWrapperConstructor(source, innerFactory, initializer);
                        else
                            return new MS.Entertainment.Data.Factory.ListItemWrapper(source, innerFactory, initializer)
                    };
                factory.listItemFactory = true;
                return factory
            }
    })
})()
})();
/* >>>>>>/framework/data/ranges.js:16918 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data");
(function(MSE, undefined) {
    "use strict";
    WinJS.Namespace.defineWithParent(MSE, "Data", {Ranges: MS.Entertainment.UI.Framework.define(function ranges(initialRanges) {
            this._ranges = [];
            if (Array.isArray(initialRanges))
                initialRanges.forEach(function addRange(range) {
                    this._ranges.push(this._createRange(range.start, range.end))
                }, this);
            else if (initialRanges)
                this._ranges.push(this._createRange(initialRanges.start, initialRanges.end))
        }, {
            singleItems: false, _ranges: null, _cachedTotal: -1, _createRange: function _createRange(index, endIndex) {
                    return {
                            start: index, end: isNaN(endIndex) ? index : endIndex
                        }
                }, total: {get: function get_total() {
                        this._initializeTotal();
                        return this._cachedTotal
                    }}, ranges: {get: function() {
                        return this._ranges.map(function(item) {
                                return this._createRange(item.start, item.end)
                            }, this)
                    }}, printRanges: function printRanges() {
                    Debug.console.log(0, "[START PRINT RANGES]");
                    this._ranges.forEach(function(item) {
                        Debug.console.log(0, "[RANGE] [start = " + item.start + "] [end = " + item.end + "]")
                    }, this);
                    Debug.console.log(0, "[END PRINT RANGES]")
                }, shift: function shift(startIndex, forward) {
                    var i;
                    var increase = (forward) ? 1 : -1;
                    var foundRangeIndex = -1;
                    var foundRange;
                    for (i = 0; i < this._ranges.length; i++)
                        if ((this._ranges[i].start > startIndex) || (this._ranges[i].end >= startIndex)) {
                            foundRangeIndex = i;
                            break
                        }
                    if (foundRangeIndex >= 0) {
                        foundRange = this._ranges[foundRangeIndex];
                        if (foundRange.start < startIndex && foundRange.end >= startIndex) {
                            if (increase > 0) {
                                this._ranges.splice(foundRangeIndex, 0, this._createRange(foundRange.start, startIndex - 1));
                                foundRange.start = startIndex
                            }
                            else
                                foundRange.end += increase;
                            if (foundRange.end < foundRange.start)
                                this._ranges.splice(foundRangeIndex, 1);
                            else
                                foundRangeIndex++
                        }
                        for (i = foundRangeIndex; i < this._ranges.length; i++) {
                            this._ranges[i].start += increase;
                            this._ranges[i].end += increase
                        }
                        if (!this.singleItems) {
                            var right = this._ranges[foundRangeIndex + 1];
                            if (right && right.start <= foundRange.end + 1) {
                                foundRange.end = right.end;
                                this._ranges.splice(foundRangeIndex + 1, 1)
                            }
                            var left = this._ranges[foundRangeIndex - 1];
                            if (left && left.end >= foundRange.start - 1) {
                                foundRange.start = left.start;
                                this._ranges.splice(foundRangeIndex - 1, 1)
                            }
                        }
                    }
                }, get: function get(index) {
                    return this._ranges ? this._ranges[index] : null
                }, forEach: function forEach(callback, that) {
                    if (this._ranges)
                        for (var i = 0; i < this._ranges.length; i++)
                            if (callback.call(that || window, this._ranges[i]))
                                break
                }, findLessThanOrEqual: function findLessThanOrEqual(index) {
                    var i;
                    var foundRangeIndex = -1;
                    for (i = 0; i < this._ranges.length; i++) {
                        if (this._ranges[i].end > index)
                            break;
                        foundRangeIndex = i
                    }
                    return foundRangeIndex
                }, findIndex: function findIndex(index) {
                    var i;
                    var foundRangeIndex = -1;
                    for (i = 0; i < this._ranges.length; i++)
                        if (this._ranges[i].start <= index && this._ranges[i].end >= index) {
                            foundRangeIndex = i;
                            break
                        }
                    return foundRangeIndex
                }, find: function find(index) {
                    var foundRange = null;
                    var foundRangeIndex = this.findIndex(index);
                    if (foundRangeIndex >= 0)
                        foundRange = this._ranges[foundRangeIndex];
                    return foundRange
                }, insert: function insert(index) {
                    var i;
                    var foundRangeIndex = -1;
                    var foundRange;
                    var inserted = true;
                    for (i = 0; i < this._ranges.length; i++)
                        if (this._ranges[i].end + 1 >= index && this._ranges[i].start - 1 <= index && !this.singleItems) {
                            foundRangeIndex = i;
                            foundRange = this._ranges[foundRangeIndex];
                            break
                        }
                        else if (this._ranges[i].start > index) {
                            foundRangeIndex = i;
                            break
                        }
                    if (foundRangeIndex < 0)
                        foundRangeIndex = this._ranges.length;
                    if (!foundRange) {
                        foundRange = this._createRange(index);
                        this._ranges.splice(foundRangeIndex, 0, foundRange)
                    }
                    else if (foundRange.end + 1 === index)
                        foundRange.end = index;
                    else if (foundRange.start - 1 === index)
                        foundRange.start = index;
                    else
                        inserted = false;
                    if (!this.singleItems) {
                        var right = this._ranges[foundRangeIndex + 1];
                        if (right && right.start - 1 <= foundRange.end) {
                            foundRange.end = right.end;
                            this._ranges.splice(foundRangeIndex + 1, 1)
                        }
                        var left = this._ranges[foundRangeIndex - 1];
                        if (left && left.end + 1 >= foundRange.start) {
                            foundRange.start = left.start;
                            this._ranges.splice(foundRangeIndex - 1, 1)
                        }
                    }
                    if (inserted)
                        this._updateCachedTotal(1);
                    return foundRange
                }, remove: function remove(index) {
                    var i;
                    var foundRangeIndex = -1;
                    var foundRange;
                    var rangeRemovedFrom;
                    var split = false;
                    var removed = false;
                    for (i = 0; i < this._ranges.length; i++)
                        if (this._ranges[i].end >= index && this._ranges[i].start <= index) {
                            foundRangeIndex = i;
                            break
                        }
                    rangeRemovedFrom = foundRange = this._ranges[foundRangeIndex];
                    if (foundRange && foundRange.start <= index) {
                        split = true;
                        removed = true;
                        if (foundRange.start === index) {
                            split = false;
                            foundRange.start = index + 1
                        }
                        if (foundRange.end === index) {
                            split = false;
                            foundRange.end = index - 1
                        }
                        if (foundRange.start > foundRange.end) {
                            split = false;
                            foundRange = null;
                            this._ranges.splice(foundRangeIndex, 1)
                        }
                    }
                    if (split) {
                        this._ranges.splice(foundRangeIndex + 1, 0, this._createRange(index + 1, foundRange.end));
                        foundRange.end = Math.max(0, index - 1)
                    }
                    if (foundRange && !this.singleItems) {
                        var right = this._ranges[foundRangeIndex + 1];
                        if (right && right.start - 1 <= foundRange.end) {
                            foundRange.end = right.end;
                            this._ranges.splice(foundRangeIndex + 1, 1)
                        }
                        var left = this._ranges[foundRangeIndex - 1];
                        if (left && left.end + 1 >= foundRange.start) {
                            foundRange.start = left.start;
                            this._ranges.splice(foundRangeIndex - 1, 1)
                        }
                    }
                    if (removed)
                        this._updateCachedTotal(-1);
                    return rangeRemovedFrom
                }, exclusionCount: function exclusionCount(startIndex, endIndex, consecutive) {
                    return this._count(startIndex, endIndex, consecutive, true)
                }, count: function count(startIndex, endIndex, consecutive) {
                    return this._count(startIndex, endIndex, consecutive, false)
                }, _count: function _count(startIndex, endIndex, consecutive, exclusion) {
                    var i,
                        range,
                        start,
                        end,
                        delta;
                    var count = 0;
                    if (startIndex > endIndex && !isNaN(endIndex))
                        return count;
                    for (i = 0; i < this._ranges.length; i++) {
                        range = this._ranges[i];
                        start = range.start;
                        end = range.end;
                        if (exclusion && start === startIndex) {
                            delta = end - start + 1;
                            startIndex += delta;
                            endIndex += delta;
                            count += delta
                        }
                        if (end < startIndex)
                            continue;
                        else if (start > endIndex)
                            break;
                        if (start < startIndex)
                            start = startIndex;
                        if (end > endIndex)
                            end = endIndex;
                        delta = end - start + 1;
                        if (exclusion && startIndex !== endIndex)
                            endIndex += delta;
                        count += delta;
                        if (consecutive) {
                            if (start > startIndex)
                                count = 0;
                            break
                        }
                    }
                    return count
                }, countFromEnd: function countFromEnd(startIndex, endIndex, inclusive) {
                    var i,
                        range,
                        start,
                        end;
                    var count = 0;
                    if (startIndex > endIndex)
                        return count;
                    for (i = this._ranges.length - 1; i >= 0; i--) {
                        range = this._ranges[i];
                        start = range.start;
                        end = range.end;
                        if (end < startIndex || start > endIndex)
                            continue;
                        if (start < startIndex)
                            start = startIndex;
                        if (end > endIndex)
                            end = endIndex;
                        count += end - start + 1;
                        if (inclusive) {
                            if (end < endIndex)
                                count = 0;
                            break
                        }
                    }
                    return count
                }, _initializeTotal: function _initializeTotal() {
                    if (this._cachedTotal < 0)
                        this._cachedTotal = this.count(0);
                    return this._cachedTotal
                }, _updateCachedTotal: function _updateCachedTotal(change) {
                    if (this._cachedTotal >= 0) {
                        this._cachedTotal += change;
                        MS.Entertainment.Data.assert(this._cachedTotal >= 0, "Cache total has gotten out of wack. cached total = " + this._cachedTotal)
                    }
                    return this._cachedTotal
                }
        })})
})(WinJS.Namespace.define("MS.Entertainment", null))
})();
/* >>>>>>/framework/data/grouper.js:17196 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data");
(function(MSE, undefined) {
    "use strict";
    WinJS.Namespace.defineWithParent(MSE, "Data", {
        listGrouperEvents: {batchChange: "batchChange"}, emptyGrouper: {
                isEmpty: true, noHeaderGroups: true, execute: function execute() {
                        return null
                    }
            }, emptyGroupKey: "noGroupHeader", ListGrouperBase: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Utilities.EventInvoker", function listGrouper(grouper, dataSource) {
                if (grouper && !grouper.execute)
                    throw new Error("Invalid galleryGrouper passed to ListGrouper");
                if (dataSource && dataSource.setGrouper)
                    this._dataSource = dataSource;
                this._grouper = grouper;
                this._reset()
            }, {
                _dataSourceReadySignal: null, _dataSource: null, _grouper: null, _groups: null, _groupHints: null, _headerRanges: null, _pendingChanges: null, _stopInsertingGroupHintHeaders: false, _groupHintsDispatchCount: 100, _pendingInserts: 0, _tracingId: 0, dispose: function dispose() {
                        if (this._dataSourceReadySignal) {
                            this._dataSourceReadySignal.error(new Error("Grouper has been disposed"));
                            this._dataSourceReadySignal = null
                        }
                        if (this._dataSource) {
                            this._dataSource.setGrouper(null);
                            this._dataSource = null
                        }
                    }, dataSource: {get: function get_dataSource() {
                            return this._dataSource
                        }}, dataSourceReady: {get: function get_dataSourceReady() {
                            return WinJS.Promise.as(this._dataSourceReadySignal && this._dataSourceReadySignal.promise)
                        }}, groupHints: {
                        get: function() {
                            return this._groupHints
                        }, set: function(value) {
                                this.setGroupHints(value)
                            }
                    }, grouper: {get: function() {
                            return this._grouper
                        }}, isGrouperEmpty: {get: function() {
                            return !this._grouper || !!this._grouper.isEmpty
                        }}, isInlineGrouper: {get: function get_isInlineGrouper() {
                            MS.Entertainment.Data.fail("Derived classes must define isInlineGrouper.")
                        }}, headerRanges: {get: function() {
                            if (this._headerRanges)
                                return this._headerRanges.ranges;
                            else
                                return []
                        }}, headerIndices: {get: function() {
                            var result = [];
                            if (this._headerRanges)
                                this._headerRanges.ranges.forEach(function(item) {
                                    result.push(item.start)
                                });
                            return result
                        }}, headerCount: {get: function get_headerCount() {
                            var result = 0;
                            if (this._headerRanges)
                                result = this._headerRanges.total;
                            return result
                        }}, reset: function reset() {
                        this._reset();
                        this._onReset()
                    }, _getTracingId: function _getTracingId() {
                        this._tracingId++;
                        return this._tracingId
                    }, _reset: function _reset() {
                        this._headerRanges = new MS.Entertainment.Data.Ranges;
                        this._headerRanges.singleItems = true;
                        this._groups = {};
                        this._groupHints = null;
                        this._pendingChanges = null;
                        this._stopInsertingGroupHintHeaders = false;
                        if (this._dataSourceReadySignal) {
                            this._dataSourceReadySignal.error(new Error("ListGrouper has been reset"));
                            this._dataSourceReadySignal = null
                        }
                        if (this.dataSource) {
                            this._dataSourceReadySignal = new MS.Entertainment.UI.Framework.Signal;
                            this.dataSource.setGrouper(this).done(function setGrouperSucceeded() {
                                if (this._dataSourceReadySignal)
                                    this._dataSourceReadySignal.complete()
                            }.bind(this), function setGrouperFailed(error) {
                                if (this._dataSourceReadySignal)
                                    this._dataSourceReadySignal.error(error)
                            }.bind(this))
                        }
                    }, _onReset: function _onReset(){}, clear: function clear() {
                        var ranges;
                        if (this._headerRanges && this.isInlineGrouper)
                            ranges = this._headerRanges.ranges;
                        else {
                            this._headerRanges = new MS.Entertainment.Data.Ranges;
                            this._headerRanges.singleItems = true
                        }
                        if (ranges)
                            for (var i = ranges.length - 1; i >= 0; i--)
                                this._removeHeader(ranges[i].start);
                        this._dispatchChanges();
                        this._groups = {}
                    }, setGroupHints: function setGroupHints(value) {
                        var result;
                        var tracingId = this._getTracingId();
                        if (this._groupHints !== value) {
                            msWriteProfilerMark("ent:ListGrouperBase:setGroupHints: " + tracingId + ",StartTM");
                            var oldValue = this._groupHints;
                            this._groupHints = value;
                            result = this._onGroupHintsChanged(value, oldValue).then(function setGroupHints(promiseResult) {
                                this._groupHints = value;
                                msWriteProfilerMark("ent:ListGrouperBase:setGroupHints: " + tracingId + ",StopTM");
                                return promiseResult
                            }.bind(this))
                        }
                        return WinJS.Promise.as(result)
                    }, groupHintIndexFromIndex: function groupHintIndexFromIndex(index) {
                        var result = -1;
                        if (this._groupHints && this._groupHints.forEach) {
                            var async = true;
                            this._groupHints.forEach(function(args) {
                                if (args.item.firstItemIndexHint <= index && args.item.firstItemIndexHint + args.item.data.totalCount - 1 >= index) {
                                    result = args.item.itemIndex;
                                    args.stop = true
                                }
                            }).done(function() {
                                async = false
                            }, function ignoreErrors(error) {
                                MS.Entertainment.Data.fail("Unexcepted error searching for source index. error: " + (error && error.message))
                            });
                            MS.Entertainment.Data.assert(!async, "The groupHints data source should not be an async data source.")
                        }
                        return result
                    }, groupHintIndexFromGroupHintKey: function groupHintIndexFromGroupHintKey(key) {
                        var result = -1;
                        if (key && this._groupHints && this._groupHints.indexFromKey)
                            result = this._groupHints.indexFromKey(key);
                        return result
                    }, firstItemIndexFromGroupHintKey: function firstItemIndexFromGroupHintKey(groupHintKey) {
                        var index = -1;
                        var groupHintIndex = -1;
                        var groupHint;
                        if (this._groupHints && this._groupHints.indexFromKey)
                            groupHintIndex = this._groupHints.indexFromKey(groupHintKey);
                        if (groupHintIndex >= 0 && groupHintIndex < this._groupHints.count)
                            groupHint = this._groupHints.getItem(groupHintIndex);
                        if (groupHint)
                            index = groupHint.firstItemIndexHint;
                        return index
                    }, groupIndexFromSourceIndex: function groupIndexFromSourceIndex(sourceIndex) {
                        var result = -1;
                        if (this._headerRanges)
                            result = this._headerRanges.findLessThanOrEqual(sourceIndex);
                        return result
                    }, groupSizeFromGroupIndex: function groupSizeFromGroupIndex(groupIndex) {
                        var groupSize = 0;
                        var groupCache = null;
                        var groupCacheAfter = null;
                        var listSize = 0;
                        if (this.dataSource)
                            listSize = this.dataSource.count;
                        if (this._headerRanges) {
                            groupCache = this._headerRanges.get(groupIndex);
                            groupCacheAfter = this._headerRanges.get(groupIndex + 1)
                        }
                        if (groupCache)
                            if (groupCacheAfter)
                                groupSize = groupCacheAfter.start - groupCache.start;
                            else if (listSize > 0)
                                groupSize = listSize - groupCache.start;
                        if (groupSize > 0 && this.isInlineGrouper)
                            groupSize--;
                        return groupSize
                    }, _leftGroupFromSourceIndex: function _leftGroupFromSourceIndex(sourceIndex) {
                        var group = null;
                        var index = -1;
                        var range = null;
                        if (this._headerRanges)
                            index = this._headerRanges.findLessThanOrEqual(sourceIndex);
                        if (index >= 0)
                            range = this._headerRanges.get(index);
                        if (range && range.data)
                            group = range.data;
                        return group
                    }, _leftGroupHintFromSourceIndex: function _leftGroupHintFromSourceIndex(sourceIndex) {
                        return this.groupHintIndexFromGroup(this._leftGroupFromSourceIndex(sourceIndex))
                    }, groupIndexFromKey: function groupIndexFromKey(groupKey) {
                        var result = -1;
                        var currentIndex = -1;
                        if (this._headerRanges)
                            this._headerRanges.forEach(function(range) {
                                var exit = false;
                                currentIndex++;
                                if (range.data && range.data.key === key) {
                                    result = currentIndex;
                                    exit = true
                                }
                                return exit
                            });
                        return result
                    }, firstGroupItemIndexFromKey: function firstGroupItemIndexFromKey(groupKey) {
                        var result = -1;
                        if (this._groups && this._groups[groupKey])
                            result = this._groups[groupKey].start;
                        return result
                    }, groupHintIndexFromGroup: function groupHintIndexFromGroup(group) {
                        var groupHintIndex = -1;
                        if (group && group.parentKey && this.groupHints && this.groupHints.indexFromKey) {
                            groupHintIndex = this.groupHints.indexFromKey(group.parentKey);
                            if (typeof groupHintIndex !== "number")
                                groupHintIndex = -1
                        }
                        return groupHintIndex
                    }, countHeaders: function countHeaders(startIndex, endIndex) {
                        return 0
                    }, exclusionCountHeaders: function exclusionCountHeaders(startIndex, endIndex) {
                        return 0
                    }, calculate: function calculate(item) {
                        return (item && item.group) || (this._grouper ? this._grouper.execute(item) : null)
                    }, copy: function copy(item, oldItem) {
                        if (item && oldItem) {
                            item.group = oldItem.group;
                            item.isHeader = oldItem.isHeader
                        }
                        return item
                    }, isValidGroupOrParentGroup: function isValidGroupOrParentGroup(group) {
                        return !!(group && group.key) || !!(group && group.parentKey)
                    }, isValidGroup: function isValidGroup(group) {
                        return !!(group && group.key)
                    }, update: function update(index, item, existingItems) {
                        return this._insert(index, item, existingItems, true)
                    }, insert: function insert(index, item, existingItems) {
                        return this._insert(index, item, existingItems, false)
                    }, remove: function remove(index, item, existingItems) {
                        return this._remove(index, item, existingItems)
                    }, _sourceIndexFromIndex: function _sourceIndexFromIndex(index) {
                        var sourceIndex = index;
                        if (this._dataSource && this._dataSource.indexToSourceIndex)
                            sourceIndex = this._dataSource.indexToSourceIndex(index);
                        return sourceIndex
                    }, _sourceIndexToIndex: function _sourceIndexToIndex(sourceIndex) {
                        var index = sourceIndex;
                        if (this._dataSource && this._dataSource.indexFromSourceIndex)
                            index = this._dataSource.indexFromSourceIndex(index);
                        return index
                    }, _addGetHashCode: function _addGetHashCode(listItem, group) {
                        if (listItem && !listItem.getHashCode && group && group.parentKey) {
                            var parentKey = group.parentKey;
                            listItem.getHashCode = function getHashCode() {
                                return parentKey
                            }
                        }
                        listItem = null;
                        group = null
                    }, _createGroupHintListItem: function _createGroupHintListItem(firstItemIndex, group) {
                        var groupHint = {
                                Name: group.parentData && group.parentData.title, GroupId: group.parentKey
                            };
                        if (this._groupHints && this._groupHints.createItem) {
                            groupHint = this._groupHints.createItem(groupHint);
                            groupHint.preventAugmentation = true;
                            this._addGetHashCode(groupHint, group)
                        }
                        return groupHint
                    }, _insertGroupHintFromGroupIfNeeded: function _insertGroupHintFromGroupIfNeeded(firstItemIndex, group, itemBefore, itemAfter) {
                        if (!this._groupHints || !group)
                            return false;
                        var inserted = false;
                        var groupHintIndex = this.groupHintIndexFromGroup(group);
                        if (this._groupHints && groupHintIndex >= 0 && groupHintIndex < this._groupHints.count)
                            this._updateGroupHintSize(this._groupHints.getItem(groupHintIndex), 1);
                        else {
                            var itemBeforeGroupHintIndex = this.groupHintIndexFromGroup(itemBefore && itemBefore.group);
                            var itemAfterGroupHintIndex = this.groupHintIndexFromGroup(itemAfter && itemAfter.group);
                            var groupHint = this._createGroupHintListItem(firstItemIndex, group);
                            if (itemBeforeGroupHintIndex >= 0)
                                groupHintIndex = itemBeforeGroupHintIndex + 1;
                            else if (itemAfterGroupHintIndex >= 0)
                                groupHintIndex = itemAfterGroupHintIndex;
                            else if (this._groupHints.count === 0 || this._isStartOrEnd(itemBefore))
                                groupHintIndex = 0;
                            else if (this._isStartOrEnd(itemAfter))
                                groupHintIndex = this._groupHints.count;
                            else
                                groupHintIndex = this._leftGroupHintFromSourceIndex(firstItemIndex);
                            MS.Entertainment.Data.assert(groupHintIndex >= 0 || (this._isUnknown(itemBefore) && this._isUnknown(itemAfter)), "Couldn't find a spot for the missing group hint.");
                            if (groupHintIndex >= 0) {
                                var async = true;
                                inserted = true;
                                this._groupHints.insertAt(groupHintIndex, groupHint).done(function() {
                                    async = false
                                }, function ignoreError(error) {
                                    MS.Entertainment.Data.assert(WinJS.Promise.isCanceledError(error), "An unknown error occurred while adding a new group hint. error: " + (error && error.message))
                                });
                                MS.Entertainment.Data.assert(!async, "The groupHints data source should not be an async data source.");
                                this._initializeGroupHintAndSizes(this._groupHints.getItem(groupHintIndex), this._sourceIndexFromIndex(firstItemIndex))
                            }
                        }
                        return inserted
                    }, _insertHeaderIfNeeded: function _insertHeaderIfNeeded(index, group, itemBefore, itemAfter) {
                        var inserted = false;
                        if (group && this.isValidGroup(group)) {
                            var lastKnownIndex = -1;
                            if (this._groups[group.key])
                                lastKnownIndex = this._groups[group.key].start;
                            if (lastKnownIndex < 0) {
                                this._insertHeader(index, group, itemBefore, itemAfter);
                                lastKnownIndex = index;
                                inserted = true
                            }
                        }
                        return inserted
                    }, _updateHeaderIfNeeded: function _updateHeaderIfNeeded(newGroup) {
                        if (newGroup && !newGroup.fromGroupHint) {
                            var groupRange = this._groups[newGroup.key];
                            var firstItemIndex = -1;
                            var groupListItem = null;
                            if (groupRange && groupRange.data && groupRange.data.fromGroupHint) {
                                firstItemIndex = groupRange.start;
                                groupRange.data = null
                            }
                            if (firstItemIndex >= 0) {
                                groupListItem = new MS.Entertainment.Data.Factory.ListHeaderWrapper(newGroup, firstItemIndex);
                                this._pushPendingChange({
                                    change: "Update", absoluteIndex: firstItemIndex, value: groupListItem, groupIndex: this.groupIndexFromSourceIndex(firstItemIndex)
                                });
                                this._onHeaderUpdated(firstItemIndex, groupListItem)
                            }
                        }
                    }, _onHeaderUpdated: function _onHeaderUpdated(firstItemIndex, groupListItem){}, _createHeaderItem: function _createHeaderItem(firstItemIndex, group) {
                        return new MS.Entertainment.Data.Factory.ListHeaderWrapper(group, firstItemIndex)
                    }, _insertItem: function _insertItem(index, item, itemBefore, itemAfter) {
                        this._insertGroupHintFromGroupIfNeeded(index, item && item.group, itemBefore, itemAfter)
                    }, _updateItem: function _updateItem(index, item, itemBefore, itemAfter, oldGroup) {
                        var groupHintIndex = -1;
                        var newGroup = item && item.group;
                        if (oldGroup && newGroup && !this._areGroupsEqual(oldGroup, newGroup))
                            groupHintIndex = this.groupHintIndexFromGroupHintKey(oldGroup.parentKey);
                        if (groupHintIndex >= 0) {
                            this._removeItemFromGroupHint(groupHintIndex);
                            this._insertGroupHintFromGroupIfNeeded(index, item && item.group, itemBefore, itemAfter)
                        }
                    }, _updateHeader: function _updateHeader(firstItemIndex, group) {
                        var groupListItem = this._createHeaderItem(firstItemIndex, group);
                        MS.Entertainment.Data.assert(group, "The group header being inserted is null");
                        MS.Entertainment.Data.assert(this._groups[group.key], "Updating a header that doesn't exist, this should not happen");
                        var groupCache = this._groups[group.key];
                        if (groupCache)
                            groupCache.data = group;
                        this._pushPendingChange({
                            change: "Update", absoluteIndex: firstItemIndex, value: groupListItem, groupIndex: this.groupIndexFromSourceIndex(firstItemIndex)
                        })
                    }, _insertHeader: function _insertHeader(firstItemIndex, group, itemBefore, itemAfter) {
                        var groupListItem = this._createHeaderItem(firstItemIndex, group);
                        MS.Entertainment.Data.assert(group, "The group header being inserted is null");
                        MS.Entertainment.Data.assert(!group || group.key, "The group header key being inserted is null");
                        MS.Entertainment.Data.assert(!this._groups[group.key], "Inserting a header that already exists, this should not happen");
                        if (this.isInlineGrouper) {
                            this._insertItem(firstItemIndex, groupListItem, itemBefore, itemAfter);
                            this._headerRanges.shift(firstItemIndex, true)
                        }
                        this._groups[group.key] = this._headerRanges.insert(firstItemIndex);
                        this._groups[group.key].data = group;
                        this._pendingInserts++;
                        this._pushPendingChange({
                            change: "Add", absoluteIndex: firstItemIndex, value: groupListItem, groupIndex: this.groupIndexFromSourceIndex(firstItemIndex)
                        });
                        this._onHeaderInserted(firstItemIndex, groupListItem)
                    }, _onHeaderInserted: function _onHeaderInserted(firstItemIndex, groupListItem){}, _removeItem: function _removeItem(index) {
                        var groupHintIndex = this.groupHintIndexFromIndex(index);
                        this._removeItemFromGroupHint(groupHintIndex)
                    }, _removeItemFromGroupHint: function _removeItemFromGroupHint(groupHintIndex) {
                        var groupHint;
                        if (this._groupHints && groupHintIndex >= 0 && groupHintIndex < this._groupHints.count)
                            groupHint = this._groupHints.getItem(groupHintIndex);
                        if (groupHint) {
                            this._updateGroupHintSize(groupHint, -1);
                            if (groupHint.data && groupHint.data.totalCount <= 0)
                                this._groupHints.removeAt(groupHintIndex)
                        }
                    }, _removeHeader: function _removeHeader(firstItemIndex, group) {
                        MS.Entertainment.Data.assert(firstItemIndex >= 0, "Item index should be negative");
                        this._pushPendingChange({
                            change: "Remove", absoluteIndex: firstItemIndex, groupIndex: this.groupIndexFromSourceIndex(firstItemIndex)
                        });
                        this._onHeaderRemoved(firstItemIndex);
                        var removedRange = !!this._headerRanges.remove(firstItemIndex);
                        MS.Entertainment.Data.assert(removedRange, "No range was removed");
                        if (!group && removedRange)
                            group = removedRange.data;
                        MS.Entertainment.Data.assert(!removedRange || !removedRange.data || !group || group.key === removedRange.data.key, "We removed the wrong range from the header ranges.");
                        if (group && group.key && group.key in this._groups)
                            delete this._groups[group.key];
                        if (this.isInlineGrouper) {
                            this._removeItem(firstItemIndex);
                            this._headerRanges.shift(firstItemIndex + 1, false)
                        }
                    }, _onHeaderRemoved: function _onHeaderRemoved(firstItemIndex){}, _onDispatchingChanges: function _onDispatchingChanges(changes){}, _pushPendingChange: function _pushPendingChange(change) {
                        this._pendingChanges = this._pendingChanges || [];
                        this._pendingChanges.push(change)
                    }, _dispatchChanges: function _dispatchChanges() {
                        var tracingId = this._getTracingId();
                        var pendingChanges = this._pendingChanges;
                        this._pendingChanges = null;
                        this._pendingInserts = 0;
                        if (pendingChanges && pendingChanges.length) {
                            msWriteProfilerMark("ent:ListGrouperBase:_dispatchChanges: " + tracingId + ",StartTM");
                            this._onDispatchingChanges(pendingChanges);
                            this.dispatchEvent(MS.Entertainment.Data.listGrouperEvents.batchChange, {
                                sender: this, changes: pendingChanges
                            });
                            msWriteProfilerMark("ent:ListGrouperBase:_dispatchChanges: " + tracingId + ",StopTM")
                        }
                    }, _onGroupHintsChanged: function _onGroupHintsChanged(newValue, oldValue) {
                        var firstGroupHints = !!newValue && !oldValue;
                        var ranges = [];
                        var headersInserted = 0;
                        var tracingId = this._getTracingId();
                        if (!firstGroupHints)
                            this._stopInsertingGroupHintHeaders = true;
                        if (!newValue)
                            return WinJS.Promise.wrap();
                        var returnPromise = newValue.forEachAll(function addItem(args) {
                                var item = args.item;
                                this._initializeGroupHint(item)
                            }.bind(this)).then(null, function handleError(error) {
                                MS.Entertainment.Data.fail("forEachAll failed when expanding group hints. error: " + (error && error.message))
                            });
                        if (!this._stopInsertingGroupHintHeaders) {
                            msWriteProfilerMark("ent:ListGrouperBase:instertGroupHintAsHeader: " + tracingId + ",StartTM");
                            newValue.forEachAll(function addItem(args) {
                                if (this._stopInsertingGroupHintHeaders) {
                                    args.stop = true;
                                    return
                                }
                                var item = args.item;
                                this._insertGroupFromGroupHint(item);
                                if (this._groupHintsDispatchCount > 0 && this.headerCount % this._groupHintsDispatchCount === 0) {
                                    this._dispatchChanges();
                                    return WinJS.Promise.timeout()
                                }
                            }.bind(this)).then(null, function ingoreError(){}).done(function dispatchChanges() {
                                this._dispatchChanges();
                                msWriteProfilerMark("ent:ListGrouperBase:instertGroupHintAsHeader: " + tracingId + ",StopTM")
                            }.bind(this))
                        }
                        return returnPromise
                    }, _insertGroupFromGroupHint: function _insertGroupFromGroupHint(groupHint) {
                        var group;
                        if (!groupHint || !groupHint.data)
                            return;
                        var subGroupHint;
                        var subGroupHintsLength = groupHint.data.subGroupHints ? groupHint.data.subGroupHints.length : 0;
                        if (subGroupHintsLength && groupHint.data.firstItemIndexSourceHint >= 0)
                            for (var i = 0; i < subGroupHintsLength; i++) {
                                subGroupHint = groupHint.data.subGroupHints[i];
                                this._insertGroupFromGroupHint({data: subGroupHint})
                            }
                        else if (!subGroupHintsLength && groupHint.data.firstItemIndexSourceHint >= 0)
                            group = this.calculate(groupHint);
                        if (group) {
                            group.fromGroupHint = true;
                            this._insertGroupHeaderFromGroupHint(groupHint, group)
                        }
                    }, _groupFromKey: function _groupFromKey(key) {
                        return (this._groups && this._groups[key] && this._groups[key].data) || null
                    }, _groupFromGroupIndex: function _groupFromGroupIndex(index) {
                        var groupCache = null;
                        var group = null;
                        if (this._groups)
                            groupCache = this._headerRanges.get(index);
                        if (groupCache)
                            group = groupCache.data;
                        return group
                    }, _isKnownGroup: function _isKnownGroup(group) {
                        return !!(group && this._groupFromKey(group.key))
                    }, _isStartOrEnd: function _isStartOrEnd(item) {
                        return item === undefined
                    }, _isHeader: function _isHeader(item) {
                        return !!(item && item.isHeader)
                    }, _isUnknown: function _isUnknown(item) {
                        return item === null
                    }, _areGroupsEqual: function _areGroupsEqual(group1, group2) {
                        var equal = false;
                        if (!group1 && !group2)
                            equal = true;
                        else
                            equal = !!(group1 && group2 && group1.key === group2.key);
                        return equal
                    }, _isMatch: function _isMatch(item, group) {
                        return !!(item && this._areGroupsEqual(group, item.group))
                    }, _isNotMatch: function _isNotMatch(item, group) {
                        return !!((this._isStartOrEnd(item)) || (item && group && item.group && item.group.key !== group.key))
                    }, _calculateAndApplyGroup: function _calculateAndApplyGroup(item) {
                        var group = this.calculate(item);
                        if (this.isValidGroupOrParentGroup(group)) {
                            if (this._isKnownGroup(group) && this.isValidGroup(group)) {
                                group = this._groups[group.key].data;
                                MS.Entertainment.Data.assert(!!group, "A known group shouldn't have null data")
                            }
                            this._setGroup(item, group)
                        }
                        return group
                    }, _setGroup: function _setGroup(listItem, group) {
                        if (listItem)
                            listItem.group = group;
                        return listItem
                    }, _shiftHeaderRanges: function _shiftHeaderRanges(startIndex, increase) {
                        this._headerRanges.shift(startIndex, increase)
                    }, _insert: function _insert(index, item, existingItems, updating) {
                        MS.Entertainment.Data.fail("Derived classes must define _insert")
                    }, _insertGroupHeaderFromGroupHint: function _insertGroupHeaderFromGroupHint(groupHint, group) {
                        MS.Entertainment.Data.fail("Derived classes must define _insertGroupHeaderFromGroupHint")
                    }, _remove: function _remove(index, item, existingItems) {
                        MS.Entertainment.Data.fail("Derived classes must define _remove")
                    }, _initializeGroupHintAndSizes: function _initializeGroupHintAndSizes(groupHint, firstItemIndexSourceHint) {
                        if (groupHint && this._groupHints) {
                            groupHint.data.firstItemIndexSourceHint = firstItemIndexSourceHint;
                            groupHint.data.totalCount = 0;
                            this._updateGroupHintSize(groupHint, 1);
                            this._initializeGroupHint(groupHint)
                        }
                    }, _initializeGroupHint: function _initializeGroupHint(groupHint) {
                        if (groupHint && groupHint.data) {
                            var dataSource = this._dataSource;
                            if (dataSource)
                                MS.Entertainment.Data.Factory.ListItemWrapper.addFirstItemIndexHint(groupHint, function() {
                                    var index = groupHint.data.firstItemIndexSourceHint;
                                    if (dataSource.indexFromSourceIndex)
                                        index = dataSource.indexFromSourceIndex(index);
                                    return index
                                })
                        }
                    }, _updateGroupHintSize: function _updateGroupHintSize(groupHint, increase) {
                        if (groupHint && this._groupHints) {
                            var groupHintIndex = groupHint.itemIndex;
                            var currentItem = groupHint;
                            if (increase >= 0 || currentItem.data.totalCount >= 0) {
                                currentItem.data.totalCount += increase;
                                for (var i = groupHintIndex + 1; i < this._groupHints.count; i++) {
                                    currentItem = this._groupHints.getItem(i);
                                    currentItem.data.firstItemIndexSourceHint += increase
                                }
                            }
                        }
                    }
            }, {clearGroup: function clearGroup(item) {
                    if (item) {
                        item.group = null;
                        item.isHeader = false
                    }
                }})
    });
    WinJS.Namespace.defineWithParent(MSE, "Data", {ListGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.ListGrouperBase", function listGrouper(grouper, dataSource) {
            MS.Entertainment.Data.ListGrouperBase.prototype.constructor.call(this, grouper, dataSource)
        }, {
            isInlineGrouper: {get: function get_isInlineGrouper() {
                    return true
                }}, countHeaders: function countHeaders(startIndex, endIndex) {
                    return this._headerRanges.count(startIndex, endIndex)
                }, exclusionCountHeaders: function exclusionCountHeaders(startIndex, endIndex) {
                    return this._headerRanges.exclusionCount(startIndex, endIndex)
                }, _insert: function _insert(index, item, existingItems, updating) {
                    if (!item || item.isHeader || (updating && item.group) || this.isGrouperEmpty)
                        return index;
                    var itemBefore = existingItems(index - 1);
                    var itemAfter = existingItems(updating ? index + 1 : index);
                    var group = this.calculate(item);
                    if (!this.isValidGroup(group)) {
                        if (!updating)
                            this._insertItem(index, item, itemBefore, itemAfter);
                        return index
                    }
                    var groupHeaderIndex = -1;
                    if (this._isNotMatchingHeader(itemBefore, group)) {
                        if (updating)
                            this._removeHeader(index - 1, itemBefore.group);
                        else
                            itemAfter = itemBefore;
                        index--;
                        itemBefore = existingItems(index - 1)
                    }
                    if (this._canInsertHeaderUsingGroup(item, group))
                        index = this._moveOrInsertHeaderIfNeeded(index, group, itemBefore, itemAfter).index;
                    this._updateHeaderIfNeeded(group);
                    item.group = group;
                    if (!updating) {
                        this._shiftHeaderRanges(index, true);
                        this._insertItem(index, item, itemBefore, itemAfter)
                    }
                    if (itemAfter) {
                        if (this._canInsertHeaderUsingGroup(itemAfter, itemAfter.group)) {
                            var moveResult = this._moveOrInsertHeaderIfNeeded(index + 1, itemAfter.group, item, null);
                            if (moveResult.oldHeaderIndex >= 0 && moveResult.oldHeaderIndex < index && moveResult.oldHeaderIndex !== moveResult.newHeaderIndex)
                                index--
                        }
                        this._updateHeaderIfNeeded(itemAfter.group)
                    }
                    this._dispatchChanges();
                    return index
                }, _isNotMatchingHeader: function isNotMatchingHeader(item, group) {
                    return !!(item && item.isHeader && this._isNotMatch(item, group))
                }, _canInsertHeaderUsingGroup: function _canInsertHeaderUsingGroup(item, group) {
                    return !!(item && group && !item.isAction && !item.isHeader && !item.noHeader)
                }, _canInsertHeader: function _canInsertHeader(item) {
                    return !!(item && this._canInsertHeaderUsingGroup(item, item.group))
                }, _remove: function _remove(index, item, existingItems) {
                    item = item || {};
                    if (!item.isHeader && !this.isGrouperEmpty) {
                        var itemBefore = existingItems(index - 1);
                        var itemAfter = existingItems(index + 1);
                        this._removeItem(index, item);
                        if (this.isValidGroup(item && item.group)) {
                            if ((this._isStartOrEnd(itemBefore) || this._isHeader(itemBefore)) && (this._isStartOrEnd(itemAfter) || this._isHeader(itemAfter))) {
                                index--;
                                this._removeHeader(index, itemBefore && itemBefore.group)
                            }
                            this._shiftHeaderRanges(index + 1, false)
                        }
                        item.group = null;
                        this._dispatchChanges()
                    }
                    return index
                }, _moveOrInsertHeaderIfNeeded: function _moveOrInsertHeaderIfNeeded(index, group, itemBefore, itemAfter) {
                    var result = {
                            index: index, oldHeaderIndex: -1, newHeaderIndex: -1
                        };
                    var atBoundary = this._isNotMatch(itemBefore, group);
                    if (this._groups[group.key])
                        result.oldHeaderIndex = result.newHeaderIndex = this._groups[group.key].start;
                    if (atBoundary)
                        if (result.oldHeaderIndex === index)
                            index++;
                        else if (result.oldHeaderIndex >= 0 && result.oldHeaderIndex !== index - 1) {
                            this._removeHeader(result.oldHeaderIndex, group);
                            if (result.oldHeaderIndex < index)
                                index--;
                            result.newHeaderIndex = index;
                            this._insertHeader(index, group, itemBefore, itemAfter);
                            index++
                        }
                        else if (this._insertHeaderIfNeeded(index, group, itemBefore, itemAfter)) {
                            result.newHeaderIndex = index;
                            index++
                        }
                    result.index = index;
                    return result
                }, _insertGroupHeaderFromGroupHint: function _insertGroupHeaderFromGroupHint(groupHint, group) {
                    var firstItemIndexHint = this._sourceIndexToIndex(groupHint.data.firstItemIndexSourceHint);
                    this._insertHeaderIfNeeded(firstItemIndexHint + this._pendingInserts, group, null, null)
                }
        })})
})(WinJS.Namespace.define("MS.Entertainment", null))
})();
/* >>>>>>/framework/data/list.js:17850 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data");
(function(MSE, undefined) {
    "use strict";
    WinJS.Namespace.defineWithParent(MSE, "Data", {
        chunkerEvents: {
            batchChange: "batchChange", reset: "reset"
        }, listEvents: {
                itemChanged: "itemChanged", countChanged: "countChanged", itemInserted: "itemInserted", itemMoved: "itemMoved", itemRemoved: "itemRemoved", beginNotifications: "beginNotifications", endNotifications: "endNotifications"
            }, observableListMixin: {
                count: 0, itemFactory: null, instance: null
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data", {ObservableList: WinJS.Class.mix(function observableList() {
            this._initObservable(Object.create(MS.Entertainment.Data.observableListMixin));
            this.status = MSE.Data.queryStatus.idle
        }, WinJS.Utilities.eventMixin, WinJS.Binding.mixin, MS.Entertainment.UI.Framework.UpdatePropertyMixin, WinJS.Binding.expandProperties(MS.Entertainment.Data.observableListMixin))});
    WinJS.Namespace.defineWithParent(MSE, "Data", {List: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.ObservableList", function listConstructor(itemFactory) {
            MS.Entertainment.Data.ObservableList.prototype.constructor.call(this);
            this._data = [];
            this._keyMap = {};
            this.instance = this;
            this.setItemFactory(itemFactory)
        }, {
            _data: null, _keyMap: null, _nextDefaultKey: 0, _disposed: false, dispose: function dispose() {
                    this._data = [];
                    this._keyMap = {};
                    this._disposed = true
                }, _maxCount: -1, isDisposed: {get: function get_isDisposed() {
                        return this._disposed
                    }}, maxCount: {
                    get: function() {
                        return this._maxCount
                    }, set: function(value) {
                            if (this._maxCount !== value) {
                                this._maxCount = value;
                                if (this._maxCount >= 0)
                                    this._setCount(Math.min(this._maxCount, this.count))
                            }
                        }
                }, hasMaxCount: {get: function() {
                        return this.maxCount >= 0
                    }}, count: {
                    get: function() {
                        var count = this.getProperty("count");
                        return (count < 0) ? 0 : count
                    }, set: function(value) {
                            if (this.hasMaxCount)
                                value = Math.min(this._maxCount, value);
                            this.setProperty("count", value)
                        }
                }, hasCount: {get: function() {
                        return this.getProperty("count") >= 0
                    }}, setItemFactory: function setItemFactory(itemFactory) {
                    this.itemFactory = itemFactory || MSE.Data.Factory.self;
                    if (!this.itemFactory.listItemFactory)
                        this.itemFactory = MSE.Data.Factory.createListItemFactory(this.itemFactory)
                }, createItem: function createItem(source) {
                    return this.itemFactory(source === undefined ? null : source)
                }, copyItem: function copyItem(source, destination) {
                    return this.itemFactory(source === undefined ? null : source, destination)
                }, insert: function insert() {
                    return this._insertAt(this.count, null)
                }, insertAt: function insertAt(index, data) {
                    this._insertAt(index, data);
                    return WinJS.Promise.wrap(this._item(index))
                }, forEach: function forEach(callback, index, countAfter) {
                    return this._forEach(callback, index, countAfter)
                }, forEachAll: function forEachAll(callback, index, countAfter) {
                    return this.forEach(callback, index, countAfter)
                }, toArray: function(startIndex, maxCount) {
                    return this._toArray(false, startIndex, maxCount)
                }, toArrayAll: function(startIndex, maxCount) {
                    return this._toArray(true, startIndex, maxCount)
                }, _toArray: function _toArray(all, startIndex, maxCount) {
                    startIndex = startIndex || 0;
                    var result = [];
                    var countAfter;
                    var forFunction = all ? this.forEachAll : this.forEach;
                    if (!isNaN(maxCount))
                        countAfter = maxCount - 1;
                    return forFunction.call(this, function addItem(args) {
                            if (args.item && args.item.data)
                                result.push(args.item.data)
                        }, 0, countAfter).then(null, function ignoreError(){}).then(function returnItems() {
                            return result
                        })
                }, _indexFromItemDescription: function _indexFromItemDescription(itemDescription) {
                    var result = -1;
                    if (itemDescription && !isNaN(itemDescription.sourceIndexHint) && itemDescription.sourceIndexHint >= 0)
                        result = itemDescription.sourceIndexHint;
                    else
                        MSE.Data.fail("Invalid item description was given to _indexFromItemDescription(). Descriptions must have a valid sourceIndexHint");
                    return result
                }, itemsFromDescription: function itemsFromDescription(itemDescription, countBefore, countAfter) {
                    var result;
                    var index = this._indexFromItemDescription(itemDescription);
                    if (index >= 0)
                        result = this.itemsFromIndex(index, 0, 0).then(function examineResult(result) {
                            return result
                        });
                    else
                        result = WinJS.Promise.wrapError(new Error("Unable to locate item from the given description"));
                    return result
                }, itemsFromIndex: function itemsFromIndex(index, countBefore, countAfter) {
                    var result = this._onItemsFromIndex(index, countBefore, countAfter).then(function _itemsFromIndex() {
                            return _items(index, countBefore, countAfter)
                        }.bind(this));
                    return result
                }, _onItemsFromIndex: function _onItemsFromIndex(index, countBefore, countAfter) {
                    return WinJS.Promise.wrap()
                }, createListAdaptor: function createListAdaptor() {
                    return {
                            compareByIdentity: true, getCount: this.getCount.bind(this), itemsFromIndex: this.itemsFromIndex.bind(this), itemsFromDescription: this.itemsFromDescription.bind(this), insertAtStart: function insertAtStart(key, data) {
                                    return WinJS.Promise.wrap(this._insertAt(0, data))
                                }, insertBefore: function insertBefore(key, data, nextKey, nextIndexHint) {
                                    return WinJS.Promise.wrap(this._insertAt(this._indexFromKey(nextKey), data))
                                }, insertAfter: function insertAfter(key, data, previousKey, previousIndexHint) {
                                    return WinJS.Promise.wrap(this._insertAt(this._indexFromKey(previousKey) + 1, data))
                                }, insertAtEnd: function insertAtEnd(key, data) {
                                    return WinJS.Promise.wrap(this._insertAt(this.count, data))
                                }, change: function change(key, newData, indexHint) {
                                    return WinJS.Promise.wrap(this._changeByKey(key, newData))
                                }, moveToStart: function moveToStart(key, indexHint) {
                                    return WinJS.Promise.wrap(this._moveByKey(key, 0))
                                }, moveBefore: function moveBefore(key, nextKey, indexHint, nextIndexHint) {
                                    return WinJS.Promise.wrap(this._moveByKey(key, this._indexFromKey(nextKey)))
                                }, moveAfter: function moveAfter(key, previousKey, indexHint, previousIndexHint) {
                                    return WinJS.Promise.wrap(this._moveByKey(key, this._indexFromKey(previousKey) + 1))
                                }, moveToEnd: function moveToEnd(key, indexHint) {
                                    return WinJS.Promise.wrap(this._moveByKey(key, this.count))
                                }, remove: function remove(key, indexHint) {
                                    return WinJS.Promise(this._removeAtKey(key))
                                }
                        }
                }, getCount: function getCount() {
                    return this._onGetCount().then(function _getCount() {
                            if (this.count < 0)
                                return WinJS.Promise.wrapError(MSE.Data.List.CountResult.unknown);
                            else
                                return WinJS.Promise.wrap(this.count)
                        }.bind(this))
                }, _onGetCount: function _onGetCount() {
                    return WinJS.Promise.wrap()
                }, getItem: function getItem(destinationIndex) {
                    this._validateIndex(destinationIndex);
                    return this._item(destinationIndex)
                }, keyFromIndex: function keyFromIndex(key) {
                    return this._keyFromIndex(key)
                }, indexFromKey: function indexFromKey(key) {
                    return this._indexFromKey(key)
                }, _insertAt: function _insertAt(index, data, noTranslation, isSourceData) {
                    this._validateInsertIndex(index);
                    var dataToCache = (noTranslation) ? data : this.createItem(data, !isSourceData);
                    dataToCache = this._cacheData(index, dataToCache);
                    this._addCount(1);
                    this._updateItemKeyMap(dataToCache.itemIndex);
                    return dataToCache
                }, _insertRangeAt: function _insertRangeAt(startIndex, sourceData, noTranslation, isSourceData) {
                    var dataToCache;
                    var index = startIndex;
                    this._validateInsertIndex(index);
                    if (Array.isArray(sourceData))
                        sourceData.forEach(function _insertRangeAtLoop(item) {
                            dataToCache = (noTranslation) ? item : this.createItem(item, !isSourceData);
                            dataToCache = this._cacheData(index, dataToCache);
                            this._addCount(1);
                            index = dataToCache.itemIndex + 1
                        }, this);
                    this._updateItemKeyMap(startIndex);
                    return index - startIndex
                }, _updateRangeAt: function _updateRangeAt(sourceStartIndex, sourceData, noTranslation) {
                    var dataToCache;
                    var sourceIndex = sourceStartIndex;
                    var startIndex = this.indexFromSourceIndex(sourceStartIndex);
                    var isSourceData = true;
                    this._validateInsertIndex(startIndex);
                    if (Array.isArray(sourceData))
                        sourceData.forEach(function _insertRangeAtLoop(item) {
                            dataToCache = (noTranslation) ? item : this.createItem(item, !isSourceData);
                            dataToCache = this._updateCacheData(this.indexFromSourceIndex(sourceIndex), dataToCache);
                            sourceIndex++
                        }, this);
                    this._updateItemKeyMap(startIndex);
                    return sourceIndex - sourceStartIndex
                }, _removeAt: function _removeAt(index) {
                    this._validateIndex(index);
                    var data = this._uncacheData(index, 1)[0];
                    MSE.Data.assert(!data || data.itemIndex === index, "The index of the stored data didn't match the removed index.");
                    this._removeDataKey(data);
                    this._addCount(-1);
                    this._updateItemKeyMap(index);
                    return data
                }, _removeDataKey: function _removeDataKey(data) {
                    var key;
                    if (data && data.key) {
                        key = data.key;
                        delete this._keyMap[data.key]
                    }
                    return key
                }, _removeRangeAt: function _removeRangeAt(index, count) {
                    this._validateIndex(index);
                    this._validateIndex(index + count - 1);
                    var removed = this._uncacheData(index, count);
                    if (removed) {
                        this._addCount(-removed.length);
                        removed.forEach(function _removeRangeAtLoop(removedItem) {
                            delete this._keyMap[removedItem.key]
                        }, this);
                        this._updateItemKeyMap(removed.length ? removed[removed.length - 1].itemIndex : index)
                    }
                    return removed
                }, _removeAtKey: function _removeAtKey(key) {
                    return this._removeAt(this._indexFromKey(key))
                }, _validateInsertIndex: function _validateInsertIndex(index) {
                    if (index < 0 || (index > this.count && this.hasCount))
                        throw new Error("index out of range. index: " + index);
                }, _validateIndex: function _validateIndex(index) {
                    if ((index < 0) || (index >= this.count && this.hasCount))
                        throw new Error("index out of range in List. index: " + index);
                }, _validateIndexNoThrow: function _validateIndexNoThrow(index) {
                    return (index >= 0) && (index < this.count && this.hasCount)
                }, _setCount: function _setCount(value) {
                    if (value < 0)
                        throw"new count is out of range";
                    if (value !== undefined && value !== null) {
                        var oldValue = this.count;
                        this.count = value;
                        if (oldValue !== value)
                            this.dispatchEvent(MS.Entertainment.Data.listEvents.countChanged, {
                                newValue: value, oldValue: oldValue
                            })
                    }
                }, _addCount: function _addCount(addition) {
                    this._setCount(this.count + addition)
                }, _trimData: function _trimData(newLength) {
                    if (this._data.length > newLength)
                        this._uncacheData(newLength, this._data.length - newLength)
                }, _forEach: function _forEach(callback, index, countAfter) {
                    index = index || 0;
                    countAfter = countAfter === undefined ? this.count : countAfter;
                    var totalCount = Math.min(this.count, this._data.length);
                    var first = Math.max(index, 0);
                    var last = Math.min(index + countAfter, totalCount - 1);
                    if (first >= this.count && !(first === 0 && this.count === 0))
                        throw"index is out of range";
                    return new WinJS.Promise(function promiseInitialization(completed, error) {
                            this._forEachIteration({
                                callback: callback, index: first, last: last, completed: completed, error: error, getCount: function getCount() {
                                        return this.count
                                    }.bind(this), getItem: function getItem(index) {
                                        return this._item(index)
                                    }.bind(this)
                            })
                        }.bind(this))
                }, _forEachIteration: function _forEachIteration(iterationArgs) {
                    var promise,
                        args;
                    var promiseCompleted = true;
                    MSE.Data.assert(iterationArgs, "invalid argument. iterationArgs was null or undefined.");
                    while (iterationArgs.index <= iterationArgs.last && iterationArgs.index < iterationArgs.getCount()) {
                        args = {
                            item: iterationArgs.getItem(iterationArgs.index), stop: false
                        };
                        try {
                            promise = WinJS.Promise.as(iterationArgs.callback(args))
                        }
                        catch(exception) {
                            MS.Entertainment.Data.assert(false, "ForEach callback throw an exception. " + exception);
                            promise = WinJS.Promise.wrapError(exception)
                        }
                        promiseCompleted = false;
                        promise.done(function() {
                            if (args.stop) {
                                if (iterationArgs.cancel)
                                    iterationArgs.cancel();
                                iterationArgs.index = iterationArgs.last + 1
                            }
                            else
                                iterationArgs.index = iterationArgs.index + 1;
                            promiseCompleted = true
                        }, function ignoreError(){});
                        if (!promiseCompleted) {
                            promise.done(function() {
                                this._forEachIteration(iterationArgs)
                            }.bind(this), function(error) {
                                iterationArgs.error(error)
                            });
                            break
                        }
                    }
                    if (promiseCompleted)
                        iterationArgs.completed()
                }, _items: function _items(index, countBefore, countAfter) {
                    var safeCount = this._data.length;
                    var first = (countBefore !== undefined && !isNaN(countBefore)) ? Math.max(index - countBefore, 0) : 0;
                    var last = (countAfter !== undefined && !isNaN(countAfter)) ? Math.min(index + countAfter, safeCount - 1) : safeCount - 1;
                    var data = [];
                    var offset = Math.max(index - first, 0);
                    if (first < this.count && first <= last)
                        data = this._data.slice(first, last + 1);
                    return {
                            items: data, offset: offset, totalCount: this.count, absoluteIndex: first + offset
                        }
                }, _emptyItems: function _emptyItems(index) {
                    return {
                            items: [], offset: 0, totalCount: this.count, absoluteIndex: index
                        }
                }, _item: function _item(index) {
                    this._validateIndex(index);
                    return this._itemNoValidate(index)
                }, _itemNoValidate: function(index) {
                    var data = this._data[index];
                    if (data) {
                        this._keyMap[this._itemKey(data)] = index;
                        data.itemIndex = index
                    }
                    else if ((index >= 0) && (index < this.count))
                        data = null;
                    return data
                }, _itemFromKey: function _itemFromKey(key) {
                    return this._item(this._indexFromKey(key))
                }, _updateCacheData: function _updateCacheData(index, data) {
                    this._validateIndex(index);
                    if (this._data.length <= index)
                        this._data.length = index + 1;
                    this._data[index] = data;
                    return data
                }, _cacheData: function _cacheData(index, data) {
                    if (index < this._data.length)
                        this._data.splice(index, 0, data);
                    else if (index >= 0) {
                        if (this._data.length <= index)
                            this._data.length = index + 1;
                        this._data[index] = data
                    }
                    return data
                }, _uncacheData: function _uncacheData(startIndex, count) {
                    return this._data.splice(startIndex, count)
                }, _createEmptyItem: function _createEmptyItem() {
                    var emptyItem = new MS.Entertainment.Data.Factory.ListItemWrapper;
                    emptyItem.key = this._createItemKey(item);
                    return emptyItem
                }, _createPlaceholderItem: function _createPlaceholderItem(index) {
                    var item = this._item(index);
                    if (!item)
                        item = this._cacheData(index, this._createEmptyItem());
                    return item
                }, _createItemKey: function _createItemKey(data) {
                    var key;
                    if (data && data.getHashCode) {
                        key = data.getHashCode();
                        if (key !== null && key !== undefined)
                            key += String.empty;
                        if (!key || key in this._keyMap) {
                            MS.Entertainment.Data.fail("Key is null or undefined or already exists in list. Key = " + key);
                            key = null
                        }
                    }
                    while (!key || key in this._keyMap)
                        key = (this._nextDefaultKey++) + String.empty;
                    return key
                }, _itemKey: function _itemKey(data) {
                    if (!data.key)
                        data.key = this._createItemKey(data);
                    return data.key
                }, _updateItemKeyMap: function _updateItemKeyMap(startIndex, endIndex) {
                    endIndex = endIndex || this._data.length;
                    for (var i = startIndex; i < this._data.length && i <= endIndex; i++)
                        this._itemNoValidate(i)
                }, _keyFromIndex: function _keyFromIndex(index) {
                    var data;
                    if (index >= 0 && index < this.count)
                        data = this._item(index);
                    if (data)
                        return data.key
                }, _indexFromKey: function _indexFromKey(key) {
                    return this._keyMap[key]
                }, indexFromSourceIndex: function indexFromSourceIndex(index) {
                    return index
                }, indexToSourceIndex: function indexToSourceIndex(index) {
                    return index
                }, _setAt: function _setAt(index, newData) {
                    this._validateIndex(index);
                    var oldItem = this._item(index);
                    var newItem = this.createItem(newData, oldItem.isNonSourceData);
                    this._updateCacheData(index, newItem);
                    newItem.key = oldItem.key;
                    return newItem
                }, _changeByKey: function _changeByKey(key, newData) {
                    var index = this._indexFromKey(key);
                    return this._setAt(index, newData)
                }, _moveByKey: function _moveByKey(fromKey, toIndex) {
                    var fromIndex = this._indexFromKey(fromKey);
                    return this._moveByIndex(fromIndex, toIndex)
                }, _moveByIndex: function _moveByIndex(fromIndex, toIndex) {
                    this._validateIndex(fromIndex);
                    this._validateInsertIndex(toIndex);
                    if (fromIndex < toIndex)
                        toIndex--;
                    var data = this._uncacheData(fromIndex, 1)[0];
                    fromIndex = data.itemIndex;
                    data = this._cacheData(toIndex, data);
                    this._updateItemKeyMap(Math.min(fromIndex, toIndex));
                    return data
                }
        }, {
            isList: function isList(list) {
                return MS.Entertainment.Data.List.prototype.isPrototypeOf(list)
            }, isListOrArray: function isListOrArray(listOrArray) {
                    return Array.isArray(listOrArray) || MS.Entertainment.Data.List.prototype.isPrototypeOf(listOrArray)
                }, getData: function getData(list, index) {
                    var result;
                    if (Array.isArray(list))
                        result = list[index];
                    else if (MS.Entertainment.Data.List.isList(list))
                        result = list.itemsFromIndex(index, 0, 0).then(function(result) {
                            return result.items[result.offset].data
                        });
                    else
                        result = list;
                    return WinJS.Promise.as(result)
                }, dataFromIndex: function dataFromIndex(list, index) {
                    var returnValue = list;
                    if (MS.Entertainment.Data.List.isList(list))
                        returnValue = list.itemsFromIndex(index, 0, 0).then(function gotItems(args) {
                            var item = args.items[args.offset];
                            return item ? item.data : null
                        });
                    return WinJS.Promise.as(returnValue)
                }, listToArray: function listToArray(list, startIndex, maxCount) {
                    var result;
                    if (isNaN(startIndex))
                        startIndex = 0;
                    if (Array.isArray(list)) {
                        var endIndex = (!isNaN(maxCount)) ? startIndex + maxCount + 1 : undefined;
                        result = WinJS.Promise.wrap(list.slice(startIndex, endIndex))
                    }
                    else if (MS.Entertainment.Data.List.isList(list))
                        result = list.toArrayAll(startIndex, maxCount);
                    else if (list)
                        result = WinJS.Promise.wrap([list]);
                    else
                        result = WinJS.Promise.wrap([]);
                    return result
                }, CountResult: {unknown: "unknown"}, FetchError: {
                    noResponse: "noResponse", doesNotExist: "doesNotExist"
                }, ErrorMessage: {
                    ListChanged: "List has changed", isListChangedError: function isListChangedError(error) {
                            return error && error.message === MS.Entertainment.Data.List.ErrorMessage.ListChanged
                        }
                }
        })})
})(WinJS.Namespace.define("MS.Entertainment", null))
})();
/* >>>>>>/framework/data/virtuallist.js:18308 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data");
(function(MSE, undefined) {
    "use strict";
    WinJS.Namespace.defineWithParent(MSE, "Data", {
        chunkingType: {
            nothing: 0, next: 1, previous: 2
        }, VirtualListBase: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.List", function virtualListBaseConstructor(itemFactory, chunker) {
                MS.Entertainment.Data.List.prototype.constructor.call(this, itemFactory);
                this._chunker = chunker;
                this._loadedRanges = new MS.Entertainment.Data.Ranges;
                this._loadedNonSourceRanges = new MS.Entertainment.Data.Ranges;
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                this._cacheLifespanMS = configurationManager.shell.randomAccessCacheLifespanMS
            }, {
                _uncacheTimer: null, _cacheLifespanMS: 0, _chunkingDirection: 0, _chunkingPreviousIndex: 0, _chunkingWorkerPromise: null, _chunkerEvents: null, _notificationHandler: null, _groupHinter: null, _pendingGroupHinter: null, _groupHinterExecuted: false, _currentGroupHinterPromise: null, _delayGroupHinterPromise: null, _chunker: null, _chunkerCount: -1, _loadedRanges: null, _loadedNonSourceRanges: null, _editCount: 0, _maxRandomAccessIndexSeen: -1, _allowValidateRanges: 0, _grouper: null, _grouperEvents: null, _groupHinterRefreshDelayMS: 1000, dispose: function dispose() {
                        MS.Entertainment.Data.List.prototype.dispose.call(this);
                        this._stopLazyValidation();
                        this._notificationHandler = null;
                        this._loadedRanges = new MS.Entertainment.Data.Ranges;
                        this._loadedNonSourceRanges = new MS.Entertainment.Data.Ranges;
                        if (this._grouper)
                            this._grouper.dispose();
                        this.chunker = null;
                        if (this._grouperEvents) {
                            this._grouperEvents.cancel();
                            this._grouperEvents = null
                        }
                        if (this._currentGroupHinterPromise) {
                            this._currentGroupHinterPromise.cancel();
                            this._currentGroupHinterPromise = null
                        }
                        if (this._delayGroupHinterPromise) {
                            this._delayGroupHinterPromise.cancel();
                            this._delayGroupHinterPromise = null
                        }
                        this._grouper = null;
                        this._stopUncacheTimer()
                    }, chunkingEnabled: {get: function() {
                            return (!!this._chunker)
                        }}, chunker: {
                        get: function() {
                            return this._chunker
                        }, set: function(value) {
                                if (value !== this._chunker) {
                                    var wasCacheClearingEnabled = this._randomAccessCachingEnabled;
                                    var chunkerCount = (value) ? typeof value.totalCount === "number" ? value.totalCount : -1 : -1;
                                    var count = chunkerCount;
                                    this._chunker = value;
                                    if (this._chunker && !this.randomAccessChunking && this.sequentialChunking)
                                        this._chunker.chunkDestination = this.createSequentialChunkDestination();
                                    if (this._chunker)
                                        count = chunkerCount;
                                    else if (wasCacheClearingEnabled)
                                        this.clear();
                                    else
                                        count = this.sourceCount;
                                    if (count >= 0)
                                        this.count = count + this._loadedNonSourceRanges.count(0);
                                    this._chunkerCount = chunkerCount;
                                    this._updateChunkerEventHandlers();
                                    this._notifyInvalidateList();
                                    MS.Entertainment.Data.assert(!this._chunker || this.randomAccessChunking || this.sequentialChunking, "The chunker doesn't support sequential or random access chunking. The chunker can't be meaningfully used.")
                                }
                            }
                    }, handleChunkerChanges: {get: function() {
                            return !!this._chunkerEvents
                        }}, chunkerCount: {get: function() {
                            return this._chunkerCount
                        }}, loadedCount: {get: function get_loadedCount() {
                            var loadedCount;
                            if (this.randomAccessChunking)
                                loadedCount = this.count;
                            else
                                loadedCount = this._loadedRanges.count(0, this.count);
                            MS.Entertainment.Data.assert(loadedCount <= this._data.length, "The loaded count shouldn't be larger than the cached data length");
                            return loadedCount
                        }}, sourceCount: {get: function get_sourceCount() {
                            var count = this.loadedSourceCount;
                            if (!this.randomAccessChunking && count < this._sourceCount)
                                count = this._sourceCount;
                            return count
                        }}, loadedSourceCount: {get: function get_loadedSourceCount() {
                            var loadedCount = this.loadedCount;
                            var nonSourceCount = this.nonSourceCount;
                            MS.Entertainment.Data.assert(this.randomAccessChunking || nonSourceCount > 0 || loadedCount === this._data.length, "When sequential chunking and there is no non-source, the loaded count should equal the cached data length");
                            return loadedCount - nonSourceCount
                        }}, hasChunkerCount: {get: function() {
                            return this.chunkerCount >= 0
                        }}, sequentialChunking: {get: function() {
                            return (!!this._chunker && !!this._chunker.loadPreviousChunk && !!this._chunker.loadNextChunk)
                        }}, randomAccessChunking: {get: function() {
                            return (!!this._chunker && this.hasChunkerCount && !!this._chunker.loadChunk && !this._chunker.isDisposed)
                        }}, hasNextChunk: {get: function get_hasNextChunk() {
                            return (this._chunker) ? this._chunker.hasNextChunk && (!this.hasMaxCount || this.loadedCount < this.maxCount) : false
                        }}, hasPreviousChunk: {get: function() {
                            return (this._chunker) ? this._chunker.hasPreviousChunk : false
                        }}, chunkSize: {get: function() {
                            return (this._chunker) ? this._chunker.chunkSize : 0
                        }}, groupHinter: {
                        get: function() {
                            return this._pendingGroupHinter || this._groupHinter
                        }, set: function(value) {
                                if (this._groupHinter !== value && this._pendingGroupHinter !== value)
                                    this._pendingGroupHinter = value
                            }
                    }, groups: {get: function get_groups() {
                            var groups = null;
                            if (this._grouper && this._grouper.groups)
                                groups = this._grouper.groups;
                            return groups
                        }}, groupHints: {get: function() {
                            return (this._grouper && this._grouper.groupHints)
                        }}, hasGroupHints: {get: function() {
                            var hasGroupHintsOrListIstEmpty = !!this.groupHints && (this.groupHints.count > 0 || this.count === 0);
                            return (!!this._groupHinter || !!this._pendingGroupHinter) && (!this._groupHinterExecuted || hasGroupHintsOrListIstEmpty)
                        }}, isGroupHintsReady: {get: function() {
                            return this.hasGroupHints && !!this.groupHints && this.groupHints.count > 0
                        }}, source: {get: function() {
                            return this._source
                        }}, grouper: {get: function() {
                            return (this._grouper) ? this._grouper.grouper : null
                        }}, headerIndices: {get: function() {
                            if (this._grouper)
                                return this._grouper.headerIndices;
                            else
                                return []
                        }}, nonSourceIndices: {get: function() {
                            var result = [];
                            if (this._loadedNonSourceRanges)
                                this._loadedNonSourceRanges.ranges.forEach(function(item) {
                                    for (var i = item.start; i <= item.end; i++)
                                        result.push(i)
                                });
                            return result
                        }}, nonSourceCount: {get: function() {
                            var result = 0;
                            if (this._loadedNonSourceRanges)
                                result = this._loadedNonSourceRanges.count(0, this.count);
                            return result
                        }}, _randomAccessCachingEnabled: {get: function() {
                            return (this._cacheLifespanMS > 0) && (this.randomAccessChunking)
                        }}, createItem: function createItem(source, isNonSourceData) {
                        var item = MS.Entertainment.Data.List.prototype.createItem.apply(this, arguments);
                        item.isNonSourceData = (isNonSourceData === undefined) ? true : isNonSourceData;
                        return item
                    }, setGrouper: function setGrouper(value) {
                        if ((this._disposed && value) || (this._grouper && this._grouper === value) || (!this._grouper && !value))
                            return WinJS.Promise.wrap();
                        return this._setGrouper(value)
                    }, _ensureGrouper: function _ensureGrouper() {
                        if (!this._grouper)
                            this._setGrouper(new MS.Entertainment.Data.ListGrouper(MS.Entertainment.Data.emptyGrouper, this))
                    }, _setGrouper: function _setGrouper(value) {
                        if (this._disposed && value)
                            return WinJS.Promise.wrap();
                        var oldGrouper = this._grouper;
                        this._grouper = null;
                        if (this._grouperEvents) {
                            this._grouperEvents.cancel();
                            this._grouperEvents = null
                        }
                        if (oldGrouper && !this._disposed)
                            oldGrouper.clear();
                        if (value) {
                            MS.Entertainment.Data.assert(value instanceof MS.Entertainment.Data.ListGrouperBase, "Invalid grouper passed to the virtual list");
                            this._grouper = value;
                            if (this._grouper.isInlineGrouper)
                                this._grouperEvents = MS.Entertainment.Utilities.addEventHandlers(this._grouper, {batchChange: this._onBatchChange.bind(this)})
                        }
                        if ((oldGrouper && oldGrouper.grouper && oldGrouper.isInlineGrouper) || (this._grouper && this._grouper.grouper && this._grouper.isInlineGrouper))
                            return this._updateGroups();
                        else
                            return WinJS.Promise.wrap()
                    }, getGroupHints: function getGroupHints() {
                        return this._loadPendingGroupHints(true).then(null, function ignoreError(){}).then(function returnGroupHints() {
                                return this.groupHints
                            }.bind(this))
                    }, _forceRefreshGroupHints: function forceRefreshGroupHints() {
                        return this._loadPendingGroupHints(true)
                    }, _loadPendingGroupHints: function _loadPendingGroupHints(refreshAlways, useTimeout) {
                        if (this._pendingGroupHinter) {
                            this._groupHinter = this._pendingGroupHinter;
                            this._pendingGroupHinter = null;
                            return this._refreshGroupHints(useTimeout)
                        }
                        else if (refreshAlways)
                            return this._refreshGroupHints(useTimeout)
                    }, _refreshGroupHints: function _refreshGroupHints(useTimeout) {
                        this._groupHinterExecuted = false;
                        if (useTimeout)
                            return this._delayRefreshGroupHints();
                        else
                            return this._noDelayRefreshGroupHints()
                    }, _delayRefreshGroupHints: function _delayRefreshGroupHints() {
                        if (this._delayGroupHinterPromise)
                            this._delayGroupHinterPromise.cancel();
                        this._delayGroupHinterPromise = WinJS.Promise.timeout(this._groupHinterRefreshDelayMS).then(this._noDelayRefreshGroupHints.bind(this), function ignoreError(){});
                        return this._delayGroupHinterPromise
                    }, _noDelayRefreshGroupHints: function _noDelayRefreshGroupHints() {
                        var groupHintsPromise = null;
                        var pauseOperation;
                        if (this._delayGroupHinterPromise) {
                            this._delayGroupHinterPromise.cancel();
                            this._delayGroupHinterPromise = null
                        }
                        if ((this._disposed) || (this._currentGroupHinterPromise) || (!this._groupHinter && !this.groupHints))
                            return WinJS.Promise.as(this._currentGroupHinterPromise);
                        this._currentGroupHinterPromise = groupHintsPromise = this._pauseChunkerEvents();
                        this._currentGroupHinterPromise = groupHintsPromise = groupHintsPromise.then(function pausedChunkerEvents(pauseResult) {
                            var result;
                            pauseOperation = pauseResult;
                            if (!this._groupHinter)
                                result = null;
                            else if (!this._groupHinter.getItems) {
                                MS.Entertainment.Data.fail("A groupHinter must implement a getItems() function");
                                result = null
                            }
                            else
                                result = this._groupHinter.getItems();
                            return result
                        }.bind(this)).then(function gotGroupHints(groupHints) {
                            return groupHints
                        }.bind(this), function handleGetGroupHintsError(error) {
                            MS.Entertainment.Data.assert(WinJS.Promise.isCanceledError(error), "For some reason getting the group hints failed. Error: " + (error && error.message));
                            return null
                        }.bind(this)).then(function setGroupHints(groupHints) {
                            if (this._currentGroupHinterPromise === groupHintsPromise) {
                                this._groupHinterExecuted = true;
                                return this._setGroupHints(groupHints)
                            }
                        }.bind(this)).then(function setGroupHintsCompleted() {
                            if (this._currentGroupHinterPromise === groupHintsPromise)
                                this._currentGroupHinterPromise = null;
                            if (pauseOperation)
                                pauseOperation.cancel();
                            return this.groupHints
                        }.bind(this));
                        return WinJS.Promise.as(groupHintsPromise)
                    }, _setGroupHints: function _setGroupHints(groupHints) {
                        if (groupHints)
                            this._ensureGrouper();
                        if (this._grouper && groupHints !== this._grouper.groupHints) {
                            var oldValue = this._grouper.groupHints;
                            return this._grouper.setGroupHints(groupHints).then(function notifyChanges() {
                                    if (groupHints)
                                        this._forceListenToAllRandomAccessChanges();
                                    this.dispatchChangeAndNotify("groupHints", groupHints, oldValue)
                                }.bind(this), function handleSetGroupHintsError(error) {
                                    MS.Entertainment.Data.fail("Failed to set group hints. Error message = " + (error && error.message))
                                })
                        }
                    }, _pauseChunkerEvents: function _pauseChunkerEvents() {
                        var promise;
                        var cancelOperation;
                        if (this.chunker && this.chunker.pause) {
                            promise = this.chunker.pause();
                            cancelOperation = {cancel: function cancel() {
                                    if (cancelOperation) {
                                        this._unpauseChunkerEvents();
                                        cancelOperation = null
                                    }
                                }.bind(this)}
                        }
                        return WinJS.Promise.as(promise).then(null, function ignoreError(){}).then(function pauseCompleted() {
                                return cancelOperation || {cancel: function(){}}
                            })
                    }, _unpauseChunkerEvents: function _unpauseChunkerEvents() {
                        var promise;
                        if (this.chunker && this.chunker.unpause)
                            promise = this.chunker.unpause();
                        return WinJS.Promise.as(promise)
                    }, _delayCancelOperation: function _delayCancelOperation(operation) {
                        if (operation && operation.cancel)
                            MS.Entertainment.Utilities.schedulePromiseBelowNormal(null, "VirtualList::_delayCancelOperation").done(function _delayCancelOperationWork() {
                                operation.cancel()
                            })
                    }, _needToUpdateRandomAccessChangesRange: {get: function() {
                            return this.chunker && this.randomAccessChunking && this.count && this.hasCount && this.groupHints && this._maxRandomAccessIndexSeen < this.count - 1
                        }}, _randomAccessIndexSeen: function _randomAccessIndexSeen(index) {
                        if (index > this._maxRandomAccessIndexSeen)
                            this._maxRandomAccessIndexSeen = index
                    }, _forceListenToAllRandomAccessChanges: function _forceListenToAllRandomAccessChanges() {
                        if (this._needToUpdateRandomAccessChangesRange) {
                            var pauseOperation;
                            this._pendingRandomAccessChangesRange = this._pendingRandomAccessChangesRange || this._pauseChunkerEvents().then(function chunkerPaused(result) {
                                pauseOperation = result;
                                return this._safeChunkWork(function loadLastChunk() {
                                        if (this._needToUpdateRandomAccessChangesRange) {
                                            this._pendingRandomAccessChangesRange = null;
                                            this._randomAccessIndexSeen(this.count - 1);
                                            return this.chunker.loadChunk(this.indexToSourceIndex(this.count - 1), 0, 0)
                                        }
                                    }.bind(this))
                            }.bind(this)).then(null, function ignoreError(){}).then(function unpauseChunker() {
                                if (pauseOperation)
                                    pauseOperation.cancel()
                            })
                        }
                    }, setNotificationHandler: function setNotificationHandler(notificationHandler) {
                        if (this._disposed)
                            return;
                        this._notificationHandler = notificationHandler
                    }, preventNotifications: false, _clearChunkerEventHandlers: function _clearChunkerEventHandlers() {
                        if (this._chunkerEvents) {
                            this._chunkerEvents.cancel();
                            this._chunkerEvents = null
                        }
                    }, _updateChunkerEventHandlers: function _updateChunkerEventHandler() {
                        this._clearChunkerEventHandlers();
                        if (this.chunker)
                            this._chunkerEvents = MS.Entertainment.Utilities.addEvents(this.chunker, {
                                batchChange: this._onBatchChange.bind(this), reset: this._handleChunkerReset.bind(this)
                            })
                    }, _onBatchChange: function _onBatchChange(args) {
                        var nonSourceData = args.detail.sender === this._grouper;
                        var changes = args.detail.changes;
                        return this._handleBatchChanges(changes, nonSourceData)
                    }, applyBatchChanges: function applyBatchChanges(changes) {
                        return this._handleBatchChanges(changes, false)
                    }, _handleBatchChanges: function _handleBatchChanges(changes, nonSourceData) {
                        return this._copyFromSourceIfNeededAndEdit().then(function readyForEdit() {
                                var data,
                                    oldData,
                                    key,
                                    index,
                                    lastChange;
                                var lastChangeIndex = -1;
                                var startIndex = this.count;
                                var failure = false;
                                var reload = false;
                                var batch = this._startNotificationBatch(MSE.Data.VirtualListBase.changeType.source);
                                try {
                                    changes.forEach(function applyChange(change) {
                                        data = null;
                                        lastChange = change;
                                        lastChangeIndex++;
                                        if (change.absoluteIndex >= 0)
                                            index = change.absoluteIndex;
                                        else
                                            index = this._indexFromSourceIndex(change.index, change.change === "Add");
                                        switch (change.change) {
                                            case"Add":
                                                this._validateInsertIndex(index);
                                                data = this.createItem(change.value, nonSourceData);
                                                this._ensureGroupLink(data);
                                                this._addCount(1);
                                                data = this._cacheData(index, data);
                                                startIndex = Math.min(startIndex, data.itemIndex);
                                                batch.inserted(data, this._keyFromIndex(data.itemIndex - 1), this._keyFromIndex(data.itemIndex + 1), data.itemIndex);
                                                break;
                                            case"Remove":
                                                this._validateIndex(index);
                                                startIndex = Math.min(startIndex, index);
                                                data = this._uncacheData(index, 1)[0];
                                                key = this._removeDataKey(data);
                                                this._addCount(-1);
                                                if (data)
                                                    batch.removed(key, data.itemIndex);
                                                break;
                                            case"Update":
                                                oldData = this._itemNoValidate(index);
                                                if (change.value) {
                                                    data = this.createItem(change.value, nonSourceData);
                                                    this._ensureGroupLink(data)
                                                }
                                                if (oldData && data) {
                                                    data = this._updateCacheData(index, data);
                                                    data.key = oldData.key;
                                                    batch.changed(data, oldData)
                                                }
                                                break;
                                            case"Reload":
                                                reload = true;
                                                break
                                        }
                                        {}
                                    }.bind(this))
                                }
                                catch(error) {
                                    MS.Entertainment.Data.fail("Exception occured while handling change event. Error message: " + (error && error.message), null, MS.Entertainment.UI.Debug.errorLevel.low);
                                    failure = true;
                                    reload = false
                                }
                                if (failure && this._canResetCaches)
                                    this._resetCaches();
                                else {
                                    if (this._validateIndexNoThrow(startIndex))
                                        this._updateItemKeyMap(startIndex);
                                    if (reload) {
                                        this._cancelNotificationBatch();
                                        this._notifyReload()
                                    }
                                    else
                                        this._endNotificationBatch();
                                    this._safeStartUncacheTimer();
                                    this._startLazyValidation()
                                }
                            }.bind(this))
                    }, forEach: function forEach(callback, index, countAfter) {
                        var that = this;
                        index = index || 0;
                        var sourceCount = countAfter !== undefined && countAfter !== null ? index + countAfter : undefined;
                        return this._copyFromSourceAsync(sourceCount).then(function copiedSourceItems() {
                                return that._forEach(callback, index, countAfter)
                            }, function copyFailed(error) {
                                return WinJS.Promise.wrapError(error)
                            })
                    }, forEachAll: function forEachAll(callback, index, countAfter) {
                        index = index || 0;
                        var callbacks = {
                                iteration: callback, completed: null, error: null, cancel: function() {
                                        callbacks.cancelled = true
                                    }, cancelled: false
                            };
                        var promise = new WinJS.Promise(function startForEachAll(completed, error) {
                                callbacks.completed = completed;
                                callbacks.error = error;
                                this._forEachAll(callbacks, index, countAfter)
                            }.bind(this), function cancelForEachAll() {
                                callbacks.cancel()
                            });
                        promise.done(function forEachAllCompleted() {
                            callbacks = null
                        }, function forEachAllError() {
                            callbacks = null
                        });
                        return promise
                    }, _forEachAll: function _forEachAll(callbacks, index, countAfter) {
                        index = index || 0;
                        var itemsFromIndexCountAfter = countAfter;
                        var itemsFromIndexPromise;
                        if (isNaN(itemsFromIndexCountAfter))
                            itemsFromIndexCountAfter = this.chunkSize > 0 ? this.chunkSize : 100;
                        if (this._disposed)
                            itemsFromIndexPromise = WinJS.Promise.wrapError(new Error("forEachAll stopped because the list has been disposed."));
                        else
                            itemsFromIndexPromise = this.itemsFromIndex(index, 0, itemsFromIndexCountAfter);
                        itemsFromIndexPromise.then(function gotItems(result) {
                            if (callbacks.cancelled)
                                return;
                            var oldIndex = index;
                            var adjustedCountAfter = isNaN(countAfter) ? result.totalCount - index - 1 : Math.min(countAfter, result.totalCount - index - 1);
                            var lastNeededIndex = index + adjustedCountAfter;
                            var lastLoadedAfter = result.items.length - result.offset;
                            var lastLoadedIndex = index + lastLoadedAfter - 1;
                            var maxItemsIndex;
                            if (lastNeededIndex <= lastLoadedIndex) {
                                index = -1;
                                maxItemsIndex = result.items.length - (lastLoadedIndex - lastNeededIndex) - 1
                            }
                            else if (lastLoadedAfter >= 0) {
                                countAfter = countAfter - lastLoadedAfter;
                                index = lastLoadedIndex + 1;
                                maxItemsIndex = result.items.length - 1
                            }
                            else if (!this.randomAccessChunking)
                                index = -1;
                            return new WinJS.Promise(function promiseInitialization(completed, error) {
                                    this._forEachIteration({
                                        callback: callbacks.iteration, cancel: callbacks.cancel, index: result.offset, last: maxItemsIndex, completed: completed, error: error, stopped: false, getCount: function getCount() {
                                                return !result.items ? 0 : result.items.length
                                            }, getItem: function getItem(index) {
                                                return !result.items ? null : result.items[index]
                                            }
                                    })
                                }.bind(this))
                        }.bind(this)).done(function checkIfMoreDataNeeded() {
                            if (callbacks.cancelled || index < 0)
                                callbacks.completed();
                            else
                                this._forEachAll(callbacks, index, countAfter)
                        }.bind(this), function forEachAllFailed(error) {
                            if (error && error.shouldRetry)
                                this._forEachAll(callbacks, index, countAfter);
                            else {
                                MS.Entertainment.Data.fail("forEachAll interation has failed. error: " + (error && error.message));
                                callbacks.error(error)
                            }
                        }.bind(this))
                    }, isHeader: function isHeader(index) {
                        return this._grouper ? this._grouper.countHeaders(index, index) === 1 : 0
                    }, headerCount: {get: function getHeaderCount() {
                            return this._grouper ? this._grouper.countHeaders(0, this.count) : 0
                        }}, _items: function _items(index, countBefore, countAfter) {
                        var result = MS.Entertainment.Data.List.prototype._items.apply(this, arguments);
                        if (this._shouldCalculateGroupIndexHint() && result && result.items)
                            result.items.forEach(this._ensureGroupLink.bind(this));
                        this._loadPendingGroupHints();
                        return result
                    }, _shouldCalculateGroupIndexHint: function _shouldCalculateGroupIndexHint() {
                        return this.groupHinter && (!this._grouper || (this._grouper.grouper && this._grouper.grouper.noHeaderGroups))
                    }, _ensureGroupLink: function _ensureGroupLink(item) {
                        if (this._shouldCalculateGroupIndexHint() && item) {
                            if (this._grouper)
                                item.groupIndexHint = this._grouper.groupHintIndexFromIndex(item.itemIndex);
                            if (item.groupIndexHint < 0 || !item.groupIndexHint)
                                item.groupIndexHint = 0
                        }
                    }, itemsFromKey: function itemsFromKey(key, countBefore, countAfter) {
                        var result;
                        var index = this._indexFromKey(key);
                        var validIndex = typeof index === "number" && index >= 0;
                        if (!validIndex) {
                            result = new Error("Invalid index supplied, likely the item has since been removed");
                            result.name = WinJS.UI.FetchError.doesNotExist;
                            result = WinJS.Promise.wrapError(result)
                        }
                        else
                            result = this._itemsFromIndex(index, countBefore, countAfter, key);
                        return result
                    }, itemsFromDescription: function itemsFromDescription(itemDescription, countBefore, countAfter) {
                        var result;
                        var index = this._indexFromItemDescription(itemDescription);
                        index = this._indexFromSourceIndex(index) - this._loadedNonSourceRanges.exclusionCount(index, index);
                        if (index >= 0)
                            result = this._itemsFromIndex(index, countBefore, countAfter, null).then(function examineResult(result) {
                                result.totalCount = null;
                                return result
                            }.bind(this));
                        else
                            result = WinJS.Promise.wrapError(new Error("Unable to locate item from the given description"));
                        return result
                    }, itemsFromIndex: function itemsFromIndex(index, countBefore, countAfter) {
                        return this._itemsFromIndex(index, countBefore, countAfter)
                    }, _itemsFromIndex: function _itemsFromIndex(index, countBefore, countAfter, keyHint) {
                        if (!this._indexFromKey(keyHint))
                            keyHint = null;
                        return this._onItemsFromIndex(index, countBefore, countAfter).then(function _itemsFromIndex() {
                                if (this.randomAccessChunking)
                                    return this._itemsFromIndexRandomChunking(index, countBefore, countAfter, keyHint);
                                else
                                    return this._itemsFromIndexSequentialChunking(index, countBefore, countAfter)
                            }.bind(this))
                    }, _itemsFromIndexRandomChunking: function _itemsFromIndexRandomChunking(index, countBefore, countAfter, keyHint) {
                        var cacheStartCount = 0;
                        var cacheEndCount = 0;
                        var cacheMiddleCount = 0;
                        var chunkingWorkerPromise = this._chunkingWorkerPromise || WinJS.Promise.wrap();
                        var editCount = this._editCount;
                        var originalBefore = countBefore;
                        var originalAfter = countAfter;
                        var clampRange = false;
                        if (isNaN(countBefore)) {
                            countBefore = 0;
                            clampRange = true
                        }
                        if (isNaN(countAfter)) {
                            countAfter = Math.max(0, this.chunkSize - 1);
                            clampRange = true
                        }
                        if (this.chunkSize) {
                            if (clampRange && countBefore + 1 + countAfter > this.chunkSize)
                                if (countBefore > countAfter) {
                                    countAfter = Math.max(0, this.chunkSize - (countBefore + 1));
                                    countBefore = Math.max(0, this.chunkSize - (countAfter + 1))
                                }
                                else {
                                    countBefore = Math.max(0, this.chunkSize - (countAfter + 1));
                                    countAfter = Math.max(0, this.chunkSize - (countBefore + 1))
                                }
                            countBefore = index - (Math.floor((index - countBefore) / this.chunkSize) * this.chunkSize);
                            countAfter = ((Math.floor((index + countAfter) / this.chunkSize) + 1) * this.chunkSize) - 1 - index
                        }
                        if (index - countBefore < 0 || countBefore < 0)
                            countBefore = index;
                        if (this.count >= 0 && index + countAfter >= this.count)
                            countAfter = this.count - index - 1;
                        var pauseChunkerEventsPromise = this._pauseChunkerEvents();
                        var pauseOperation = null;
                        var lastRandomChunkFinished = function lastRandomChunkFinished() {
                                return pauseChunkerEventsPromise.then(function chunkerPaused(operation) {
                                        pauseOperation = operation;
                                        if (editCount !== this._editCount)
                                            return this._createRetryError(MS.Entertainment.Data.List.ErrorMessage.ListChanged);
                                        this._stopUncacheTimer();
                                        this._startNotificationBatch(MSE.Data.VirtualListBase.changeType.source);
                                        return this._copyFromSourceIfNeeded()
                                    }.bind(this))
                            }.bind(this);
                        return this._chunkingWorkerPromise = chunkingWorkerPromise.then(lastRandomChunkFinished, lastRandomChunkFinished).then(function copiedFromSource() {
                                if (!this.randomAccessChunking)
                                    return WinJS.Promise.wrapError(new Error("Item request has failed because the list has likely been disposed"));
                                editCount = this._editCount;
                                var rangeCount0,
                                    rangeCount1,
                                    rangeCount2,
                                    rangeCount3,
                                    rangeCount4;
                                var cacheSourceOrigin,
                                    cacheSourceStartToEnd,
                                    cacheSourceStartToOrigin,
                                    cacheSourceEndToOrigin;
                                var adjustedIndex,
                                    adjustedBefore,
                                    adjustedAfter,
                                    firstIndex,
                                    lastIndex,
                                    requestLength;
                                var keyIndex;
                                if (keyHint) {
                                    keyIndex = this._indexFromKey(keyHint);
                                    index = (keyIndex !== undefined) ? keyIndex : index
                                }
                                firstIndex = index - countBefore;
                                lastIndex = index + countAfter;
                                requestLength = countBefore + 1 + countAfter;
                                cacheStartCount = this._loadedRanges.count(firstIndex, lastIndex, true);
                                cacheEndCount = this._loadedRanges.countFromEnd(index, lastIndex, true);
                                cacheMiddleCount = Math.max(0, this._loadedRanges.count(firstIndex, lastIndex) - cacheStartCount - cacheEndCount);
                                if (editCount !== this._editCount)
                                    adjustedBefore = -1;
                                else if (cacheStartCount <= 0 && cacheEndCount <= 0 && cacheMiddleCount <= 0) {
                                    adjustedIndex = index - this._loadedNonSourceRanges.count(0, index - countBefore - 1);
                                    adjustedBefore = countBefore;
                                    adjustedAfter = countAfter
                                }
                                else if (cacheStartCount === requestLength)
                                    adjustedBefore = -1;
                                else {
                                    rangeCount0 = this._loadedNonSourceRanges.count(index, index);
                                    rangeCount1 = this._loadedNonSourceRanges.count(0, index - 1);
                                    rangeCount2 = this._loadedNonSourceRanges.count(firstIndex, index - 1);
                                    rangeCount3 = this._loadedNonSourceRanges.count(index + 1, lastIndex);
                                    rangeCount4 = this._loadedNonSourceRanges.count(firstIndex, lastIndex);
                                    cacheSourceOrigin = this._loadedRanges.count(index, index, true);
                                    cacheSourceOrigin -= this._loadedNonSourceRanges.count(index, index + cacheSourceOrigin);
                                    cacheSourceStartToEnd = cacheStartCount - this._loadedNonSourceRanges.count(firstIndex, firstIndex + cacheStartCount - 1);
                                    cacheSourceStartToOrigin = this._loadedRanges.count(firstIndex, index - 1, true);
                                    cacheSourceStartToOrigin -= this._loadedNonSourceRanges.count(firstIndex, firstIndex + cacheSourceStartToOrigin - 1);
                                    cacheSourceEndToOrigin = this._loadedRanges.countFromEnd(index, lastIndex, true);
                                    cacheSourceEndToOrigin -= this._loadedNonSourceRanges.count(lastIndex - cacheSourceEndToOrigin + 1, lastIndex);
                                    adjustedIndex = index - rangeCount1 + (cacheSourceStartToEnd - cacheSourceStartToOrigin);
                                    adjustedBefore = countBefore - rangeCount2 - cacheSourceStartToOrigin;
                                    adjustedAfter = countAfter - rangeCount3 - (cacheSourceEndToOrigin) - (rangeCount0 + cacheSourceStartToEnd - cacheSourceStartToOrigin);
                                    if (adjustedAfter < 0) {
                                        adjustedIndex = adjustedIndex + adjustedAfter;
                                        adjustedBefore = adjustedBefore + adjustedAfter;
                                        adjustedAfter = 0
                                    }
                                }
                                if (adjustedBefore >= 0 && adjustedAfter >= 0)
                                    return this.chunker.loadChunk(adjustedIndex, adjustedBefore, adjustedAfter)
                            }.bind(this)).then(function loadedChunk(chunkResult) {
                                var j = 0;
                                var currentItem;
                                var lastCount = 0;
                                var chunkResultLength = (chunkResult) ? chunkResult.items.length : 0;
                                var chunkFailed = (chunkResult) ? chunkResult.error : false;
                                var absoluteIndex = index - countBefore;
                                var maxAbsoluteIndex = -1;
                                var result;
                                if (editCount === this._editCount) {
                                    if (chunkResult)
                                        this._setCountFromChunker(chunkResult.totalCount);
                                    maxAbsoluteIndex = Math.min(this.count - 1, index + countAfter)
                                }
                                if (cacheStartCount > 0 && absoluteIndex <= maxAbsoluteIndex)
                                    absoluteIndex += cacheStartCount;
                                while (absoluteIndex <= maxAbsoluteIndex && j < chunkResultLength) {
                                    currentItem = this._item(absoluteIndex);
                                    if (!currentItem || !currentItem.isNonSourceData) {
                                        lastCount = this.count;
                                        currentItem = this._cacheSourceItemData(absoluteIndex, chunkResult.items[j]);
                                        maxAbsoluteIndex += (this.count - lastCount);
                                        absoluteIndex += (currentItem.itemIndex - absoluteIndex);
                                        j++
                                    }
                                    else if (currentItem && !currentItem.cached) {
                                        result = new Error("Data is not up to data. Please try again.");
                                        maxAbsoluteIndex = -1;
                                        break
                                    }
                                    absoluteIndex += 1
                                }
                                if (chunkFailed)
                                    result = this._emptyItems(index);
                                else if (maxAbsoluteIndex >= 0 || this.count === 0) {
                                    var keyIndex;
                                    if (keyHint)
                                        keyIndex = this._indexFromKey(keyHint);
                                    countAfter = Math.max(0, Math.min(maxAbsoluteIndex - index, countAfter));
                                    if (keyIndex !== index && keyIndex !== undefined && keyIndex >= index - originalBefore && keyIndex <= index + originalAfter) {
                                        var keyIndexDelta = keyIndex - index;
                                        result = this._items(keyIndex, Math.max(originalBefore - keyIndexDelta, keyIndex - (index - originalBefore)), Math.min(Math.max(0, originalAfter + keyIndexDelta), (index + originalAfter) - keyIndex))
                                    }
                                    else
                                        result = this._items(index, originalBefore, originalAfter)
                                }
                                if (!result)
                                    result = this._createRetryError(MS.Entertainment.Data.List.ErrorMessage.ListChanged);
                                this._endNotificationBatch();
                                if (result.items)
                                    this._startUncacheTimer();
                                else
                                    result = WinJS.Promise.wrapError(result);
                                this._startLazyValidation();
                                return result
                            }.bind(this)).then(function handleSuccess(result) {
                                this._delayCancelOperation(pauseOperation);
                                return result
                            }.bind(this), function handleLoadChunkError(error) {
                                MS.Entertainment.Data.assert(this.isDisposed || WinJS.Promise.isCanceledError(error) || MS.Entertainment.Data.List.ErrorMessage.isListChangedError(error), "Couldn't load the chunk of data. error: " + (error && error.message));
                                this._delayCancelOperation(pauseOperation);
                                this._startLazyValidation();
                                return WinJS.Promise.wrapError(error)
                            }.bind(this))
                    }, _createRetryError: function _createRetryError(message) {
                        var error = new Error(message);
                        error.shouldRetry = true;
                        return error
                    }, _itemsFromIndexSequentialChunking: function _itemsFromIndexSequentialChunking(index, countBefore, countAfter) {
                        countBefore = isNaN(countBefore) ? 0 : countBefore;
                        countAfter = isNaN(countAfter) ? this.chunkSize - 1 : countAfter;
                        if (countBefore < 0)
                            countBefore = 0;
                        var maxEndIndex;
                        var maxStartIndex;
                        var minStartIndex;
                        var minEndIndex;
                        var startedAtEnd = countAfter + index + 1 >= this.count;
                        minStartIndex = Math.max(index - countBefore, 0);
                        minEndIndex = Math.min(index + countAfter, this.count - 1);
                        if (this.chunkSize > 0) {
                            maxEndIndex = Math.max(0, (minEndIndex + this.chunkSize - 1) - (minEndIndex % this.chunkSize));
                            maxStartIndex = Math.max(0, minStartIndex - (minStartIndex % this.chunkSize))
                        }
                        else {
                            maxEndIndex = this.count > 0 ? this.count - 1 : 0;
                            maxStartIndex = 0
                        }
                        return this._prefetchData(minStartIndex, minEndIndex, maxStartIndex, maxEndIndex).then(function prefetchCompleted() {
                                return this._copyFromSourceAsync(maxEndIndex)
                            }.bind(this)).then(function copiedFromSource() {
                                if (isNaN(countAfter) || countAfter < 0 || countAfter + index >= this.count)
                                    countAfter = Math.max(0, this.count - index - 1);
                                if (this.hasNextChunk && startedAtEnd)
                                    countAfter = countAfter - 1;
                                if (!this.hasNextChunk && !this.hasPreviousChunk)
                                    this._setSequentialCount(this.loadedCount);
                                var itemsResult = this._items(index, countBefore, countAfter);
                                this._startLazyValidation();
                                return itemsResult
                            }.bind(this))
                    }, createSequentialChunkDestination: function createSequentialChunkDestination() {
                        var result = null;
                        if (this.sequentialChunking)
                            result = {
                                insertRangeAtEnd: this._insertSequentialChunkedSourceAtEnd.bind(this), insertRangeAtStart: this._insertSequentialChunkedSourceAtStart.bind(this), setItemFactory: this.setItemFactory.bind(this)
                            };
                        else
                            MS.Entertainment.Data.fail("Shouldn't be creating a 'sequential' chunk destination on something that doesn't support sequential loading of data.");
                        return result
                    }, createListAdaptor: function createListAdaptor() {
                        return {
                                compareByIdentity: !this.randomAccessChunking, getCount: this.getCount.bind(this), itemsFromKey: this.itemsFromKey.bind(this), itemsFromIndex: this.itemsFromIndex.bind(this), itemsFromDescription: this.itemsFromDescription.bind(this), setNotificationHandler: this.setNotificationHandler.bind(this), itemSignature: function(data) {
                                        var result;
                                        if (!data)
                                            result = data;
                                        else if (data.itemSignature !== undefined)
                                            result = data.itemSignature;
                                        else {
                                            result = JSON.stringify(MS.Entertainment.Data.deflate(data));
                                            if (!result === undefined)
                                                throw new Error("item signature could not be created");
                                            data.itemSignature = result
                                        }
                                        return result
                                    }.bind(this), insertAtStart: function insertAtStart(key, data) {
                                        return this._insertAtAsync(0, data)
                                    }.bind(this), insertBefore: function insertBefore(key, data, nextKey, nextIndexHint) {
                                        return this._insertAtAsync(this._indexFromKey(nextKey), data, nextKey)
                                    }.bind(this), insertAfter: function insertAfter(key, data, previousKey, previousIndexHint) {
                                        return this._insertAtAsync(this._indexFromKey(previousKey), data, previousKey, 1)
                                    }.bind(this), insertAtEnd: function insertAtEnd(key, data) {
                                        return this._insertAtAsync(this.count, data)
                                    }.bind(this), change: function change(key, newData, indexHint) {
                                        var that = this;
                                        var index = this._indexFromKey(key);
                                        return this._editingListPrivate(index).then(function copiedFromSource() {
                                                var oldItem = that._item(index);
                                                var newItem = that._changeByKey(key, newData);
                                                this._dispatchItemChanged(newItem, oldItem, index);
                                                return newItem
                                            }.bind(this), function copyFailed(error) {
                                                return WinJS.Promise.wrapError(error)
                                            })
                                    }.bind(this), moveToStart: function moveToStart(key, indexHint) {
                                        return this._moveByKeyAsync(key, 0)
                                    }.bind(this), moveBefore: function moveBefore(key, nextKey, indexHint, nextIndexHint) {
                                        return this._moveByKeyAsync(key, this._indexFromKey(nextKey), nextKey)
                                    }.bind(this), moveAfter: function moveAfter(key, previousKey, indexHint, previousIndexHint) {
                                        return this._moveByKeyAsync(key, this._indexFromKey(previousKey), previousKey, 1)
                                    }.bind(this), moveToEnd: function moveToEnd(key, indexHint) {
                                        return this._moveByKeyAsync(key, this.count)
                                    }.bind(this), remove: function remove(key, indexHint) {
                                        var that = this;
                                        return this._editingListPrivate(this._indexFromKey(key), 0, this.count).then(function copiedFromSource() {
                                                var index = that._indexFromKey(key);
                                                var removedItem = that._removeAt(index);
                                                this._dispatchRemoved(key, index);
                                                return removedItem
                                            }.bind(this), function copyFailed(error) {
                                                return WinJS.Promise.wrapError(error)
                                            })
                                    }.bind(this)
                            }
                    }, insertAt: function insertAt(index, data, options) {
                        var that = this;
                        var insertedData;
                        options = options || {};
                        return this._testEditingSource(options).then(function testEditingSourceDone() {
                                return this._copyFromSourceIfNeededAndEdit()
                            }.bind(this)).then(function copiedFromSource() {
                                index = that._indexFromNoHeaderIndex(index, true);
                                insertedData = that._insertAt(index, data, false, options.isSourceData);
                                if (!options.suppressEvents)
                                    that._notifyInsertedItem(insertedData, insertedData.itemIndex);
                                {};
                                return insertedData
                            }, function copyFailed(error) {
                                return WinJS.Promise.wrapError(error)
                            })
                    }, removeAt: function removeAt(index, options) {
                        options = options || {};
                        var that = this;
                        return this._editingListPrivate(index, 0, this.count).then(function copiedFromSource() {
                                index = that._indexFromNoHeaderIndex(index);
                                var removedItem = that._removeAt(index);
                                if (removedItem && !options.suppressEvents)
                                    that._notifyRemoved(removedItem.key, removedItem.itemIndex);
                                return removedItem
                            }, function copyFailed(error) {
                                return WinJS.Promise.wrapError(error)
                            })
                    }, moveAt: function moveAt(fromIndex, toIndex, options) {
                        options = options || {};
                        var that = this;
                        return this._editingListPrivate(0, 0, Math.max(fromIndex, toIndex)).then(function copiedFromSource() {
                                fromIndex = that._indexFromNoHeaderIndex(fromIndex);
                                toIndex = that._indexFromNoHeaderIndex(toIndex, true);
                                var item = null;
                                if (fromIndex !== toIndex)
                                    item = that._moveByIndex(fromIndex, toIndex);
                                if (item && !options.suppressEvents)
                                    that._notifyMoved(item, fromIndex);
                                return item
                            }, function moveFailed(error) {
                                return WinJS.Promise.wrapError(error)
                            })
                    }, moveIndices: function moveIndices(indices, toIndex, options) {
                        indices = indices || [];
                        var ranges = indices.map(function mapIndex(index) {
                                return {
                                        firstIndex: index, lastIndex: index
                                    }
                            });
                        return this.moveRanges(ranges, toIndex, options)
                    }, moveRanges: function moveRanges(ranges, toIndex, options) {
                        options = options || {};
                        if (!ranges)
                            throw new Error("Parameter 'ranges' was null or empty");
                        var minIndex = NaN;
                        ranges.forEach(function(range) {
                            minIndex = isNaN(minIndex) || minIndex > range.firstIndex ? range.firstIndex : minIndex
                        });
                        var that = this;
                        return this._editingListPrivate(minIndex, 0, this.count).then(function copiedFromSource() {
                                toIndex = that._indexFromNoHeaderIndex(toIndex, true);
                                var fromIndex = 0;
                                var adjustments = 0;
                                var item = null;
                                var movedItems = [];
                                if (!options.suppressEvents)
                                    that._notifyBeginNotifications();
                                for (var i = ranges.length - 1; i >= 0; i--)
                                    for (var j = ranges[i].lastIndex; j >= ranges[i].firstIndex; j--) {
                                        fromIndex = that._indexFromNoHeaderIndex(j);
                                        if (fromIndex >= toIndex) {
                                            fromIndex += adjustments;
                                            adjustments++
                                        }
                                        var item = that._moveByIndex(fromIndex, toIndex);
                                        toIndex = item.itemIndex;
                                        if (!options.suppressEvents)
                                            that._notifyMoved(item, fromIndex);
                                        movedItems.splice(0, 0, item)
                                    }
                                if (!options.suppressEvents)
                                    that._notifyEndNotifications();
                                return movedItems
                            })
                    }, changeAt: function changeAt(index, data, options) {
                        options = options || {};
                        return this._editingListPrivate(index, 0, 0).then(function copiedFromSource() {
                                var oldItem = this._item(index);
                                var newItem = this._setAt(index, data);
                                if (item && !options.suppressEvents)
                                    this._notifyChanged(newItem, oldItem);
                                return newItem
                            }.bind(this), function copyFailed(error) {
                                return WinJS.Promise.wrapError(error)
                            })
                    }, insertRangeAtEnd: function insertRangeAtEnd(range, options) {
                        options = options || {};
                        return this._testEditingSource(options).then(function testEditingSourceDone() {
                                return this._copyFromSourceIfNeededAndEdit()
                            }.bind(this)).then(function() {
                                var startIndex = this.count;
                                var count = this._insertRangeAt(startIndex, range, false, options.isSourceData);
                                if (!options.suppressEvents)
                                    this._notifyRangeInserted(startIndex, count)
                            }.bind(this), function(error) {
                                throw error;
                            })
                    }, _insertSequentialChunkedSourceAtEnd: function _insertSequentialChunkedSourceAtEnd(range) {
                        if (!this.sequentialChunking)
                            return;
                        return this._copyFromSourceIfNeededAndEdit().then(function _insertSequentialChunkedSourceAtEndWork() {
                                if (!this.sequentialChunking)
                                    return;
                                var insertOrUpdateAt = this.hasChunkerCount ? this._updateRangeAt : this._insertRangeAt;
                                var startIndex = this.loadedSourceCount;
                                insertOrUpdateAt.call(this, startIndex, range, false, true)
                            }.bind(this))
                    }, insertRangeAtStart: function insertRangeAtStart(range, options) {
                        options = options || {};
                        return this._testEditingSource(options).then(function testEditingSourceDone() {
                                return this._copyFromSourceIfNeededAndEdit()
                            }.bind(this)).then(function() {
                                var count = this._insertRangeAt(0, range, false, options.isSourceData);
                                if (!options.suppressEvents)
                                    this._notifyRangeInserted(0, count)
                            }.bind(this), function(error) {
                                throw error;
                            })
                    }, _insertSequentialChunkedSourceAtStart: function _insertSequentialChunkedSourceAtStart(range) {
                        if (!this.sequentialChunking)
                            return;
                        return this._copyFromSourceIfNeededAndEdit().then(function _insertSequentialChunkedSourceAtStartWork() {
                                if (!this.sequentialChunking)
                                    return;
                                var insertOrUpdateAt = this.hasChunkerCount ? this._updateRangeAt : this._insertRangeAt;
                                insertOrUpdateAt.call(this, 0, range, false, true)
                            }.bind(this))
                    }, insertRangeAt: function insertRangeAt(index, range, options) {
                        options = options || {};
                        return this._testEditingSource(options).then(function testEditingSourceDone() {
                                return this._copyFromSourceIfNeededAndEdit()
                            }.bind(this)).then(function() {
                                index = this._indexFromNoHeaderIndex(index, true);
                                var count = this._insertRangeAt(index, range, false, options.isSourceData);
                                if (!options.suppressEvents)
                                    this._notifyRangeInserted(index, count)
                            }.bind(this), function(error) {
                                throw error;
                            })
                    }, removeIndices: function removeIndices(indices, options) {
                        indices = indices || [];
                        var ranges = indices.map(function mapIndex(index) {
                                return {
                                        firstIndex: index, lastIndex: index
                                    }
                            });
                        return this.removeRanges(ranges, options)
                    }, removeRangeAt: function removeRangeAt(index, count, options) {
                        options = options || {};
                        return this._editingListPrivate(index, 0, this.count).then(function() {
                                index = this._indexFromNoHeaderIndex(index);
                                var removed = this._removeRangeAt(index, count);
                                if (!options.suppressEvents)
                                    this._notifyRangeRemoved(removed)
                            }.bind(this), function(error) {
                                throw error;
                            })
                    }, removeRanges: function removeRanges(ranges, options) {
                        options = options || {};
                        if (!ranges)
                            throw new Error("Parameter 'ranges' was null or empty");
                        var minIndex = NaN;
                        ranges.forEach(function(range) {
                            minIndex = isNaN(minIndex) || minIndex > range.firstIndex ? range.firstIndex : minIndex
                        });
                        return this._editingListPrivate(minIndex, 0, this.count).then(function() {
                                var removed = [];
                                for (var i = ranges.length - 1; i >= 0; i--)
                                    removed = removed.concat(this._removeRangeAt(ranges[i].firstIndex, ranges[i].lastIndex - ranges[i].firstIndex + 1));
                                if (!options.suppressEvents)
                                    this._notifyRangeRemoved(removed);
                                return removed
                            }.bind(this), function(error) {
                                throw error;
                            })
                    }, _setCountFromChunker: function _setCountFromChunker(count) {
                        if (count >= 0) {
                            this.count = count + this._loadedNonSourceRanges.count(0);
                            this._chunkerCount = count;
                            this._forceListenToAllRandomAccessChanges()
                        }
                    }, _setSequentialCount: function _setSequentialCount(count) {
                        if (!this.randomAccessChunking)
                            this.count = count
                    }, _setEmptyCount: function _setEmptyCount(count) {
                        if (this.count < 0)
                            this.count = count
                    }, _insertAtAsync: function _insertAtAsync(index, data, key, offset, isSourceData) {
                        var that = this;
                        offset = offset || 0;
                        return this._testEditingSource({isSourceData: isSourceData}).then(function testEditingSourceDone() {
                                return this._copyFromSourceIfNeededAndEdit()
                            }.bind(this)).then(function copiedFromSource() {
                                index = (isNaN(index)) ? that._indexFromKey(key) : index;
                                var item = that._insertAt(index + offset, data, false, isSourceData);
                                if (item)
                                    this._dispatchInsertedItem(item, item.itemIndex);
                                return item
                            }.bind(this), function copyFailed(error) {
                                return WinJS.Promise.wrapError(error)
                            })
                    }, _moveByKeyAsync: function _moveByKeyAsync(fromKey, toIndex, toKey, toOffset) {
                        var that = this;
                        toOffset = toOffset || 0;
                        toIndex = (isNaN(toIndex)) ? that._indexFromKey(toKey) : toIndex;
                        return this._editingListPrivate(0, 0, Math.max(this._indexFromKey(fromKey), toIndex)).then(function copiedFromSource() {
                                var oldIndex = that._indexFromKey(fromKey);
                                var item = that._moveByKey(fromKey, toIndex + toOffset);
                                that._dispatchMoved(item, oldIndex);
                                return item
                            }, function copyFailed(error) {
                                return WinJS.Promise.wrapError(error)
                            })
                    }, indexFromSourceIndex: function indexFromSourceIndex(index) {
                        return this._indexFromSourceIndex(index, false)
                    }, indexToSourceIndex: function indexToSourceIndex(index) {
                        return index - this._loadedNonSourceRanges.count(0, index)
                    }, noHeaderIndexFromSourceIndex: function noHeaderIndexFromSourceIndex(index) {
                        return this._indexToNoHeaderIndex(this._indexFromSourceIndex(index, false))
                    }, _indexFromSourceIndex: function _indexFromSourceIndex(index, insert) {
                        return index + this._loadedNonSourceRanges.exclusionCount(0, insert && index ? index - 1 : index)
                    }, _indexToNoHeaderIndex: function _indexToNoHeaderIndex(index) {
                        if (this._grouper)
                            index -= this._grouper.countHeaders(0, index);
                        return index
                    }, _indexFromNoHeaderIndex: function _indexFromNoHeaderIndex(index, insert) {
                        if (this._grouper)
                            index += this._grouper.exclusionCountHeaders(0, insert && index ? index - 1 : index);
                        return index
                    }, _copyItemTo: function _copyItemTo(item, oldItem) {
                        if (oldItem) {
                            item.key = oldItem.key;
                            item.itemIndex = oldItem.itemIndex;
                            if (this._grouper)
                                this._grouper.copy(item, oldItem)
                        }
                    }, _updateCacheData: function _updateCacheData(index, data) {
                        if (data && data.cached) {
                            if (this._grouper)
                                index = this._grouper.update(index, data, this._itemNoValidate.bind(this));
                            data.itemIndex = index
                        }
                        data = MSE.Data.List.prototype._updateCacheData.call(this, index, data);
                        this._updateCacheDataRanges(index, data);
                        this._randomAccessIndexSeen(index);
                        return data
                    }, _updateCacheDataRanges: function _updateCacheDataRanges(index, data) {
                        if (data) {
                            if (data.cached) {
                                this._loadedRanges.insert(index);
                                if (data.isNonSourceData)
                                    this._loadedNonSourceRanges.insert(index)
                            }
                            else {
                                this._loadedRanges.remove(index);
                                if (data.isNonSourceData)
                                    this._loadedNonSourceRanges.remove(index)
                            }
                            this._validateCacheAt(index - 1);
                            this._validateCacheAt(index);
                            this._validateCacheAt(index + 1);
                            this._validateRanges(data.isHeader)
                        }
                    }, _cacheData: function _cacheData(index, data) {
                        if (data && data.cached) {
                            if (this._grouper)
                                index = this._grouper.insert(index, data, this._itemNoValidate.bind(this));
                            data.itemIndex = index
                        }
                        data = MSE.Data.List.prototype._cacheData.call(this, index, data);
                        if (data) {
                            this._loadedRanges.shift(index, true);
                            this._loadedNonSourceRanges.shift(index, true);
                            if (data.cached) {
                                this._loadedRanges.insert(index);
                                if (data.isNonSourceData)
                                    this._loadedNonSourceRanges.insert(index)
                            }
                            this._validateCacheAt(index);
                            this._validateRanges(data.isHeader);
                            this._randomAccessIndexSeen(index)
                        }
                        return data
                    }, _uncacheData: function _uncacheData(startIndex, count) {
                        var result = [];
                        var data;
                        for (var index = startIndex + count - 1, j = 0; j < count; index--, j++) {
                            if (this._grouper)
                                index = this._grouper.remove(index, this._itemNoValidate(index), this._itemNoValidate.bind(this));
                            data = MSE.Data.List.prototype._uncacheData.call(this, index, 1)[0];
                            if (data) {
                                if (data.cached) {
                                    this._loadedRanges.remove(index);
                                    if (data.isNonSourceData)
                                        this._loadedNonSourceRanges.remove(index)
                                }
                                data.itemIndex = index
                            }
                            this._loadedRanges.shift(index + 1, false);
                            this._loadedNonSourceRanges.shift(index + 1, false);
                            result.push(data);
                            this._validateCacheAt(index);
                            this._validateRanges(data && data.isHeader)
                        }
                        return result
                    }, _validateCacheAt: function _validateCacheAt(index){}, _startLazyValidation: function _startLazyValidation(startIndex){}, _stopLazyValidation: function _stopLazyValidation(){}, _validateRangesFromData: function _validtaeRangesFromData(startIndex, count) {
                        var item;
                        var cached;
                        var nonSourceCached;
                        var isHeader;
                        var i = typeof startIndex === "number" ? startIndex : 0;
                        var length = Math.min(this._data.length, typeof count === "number" ? count : this._data.length);
                        for (; i < this._data.length; i++) {
                            item = this._data[i];
                            cached = this._loadedRanges.count(i, i) === 1;
                            nonSourceCached = this._loadedNonSourceRanges.count(i, i) === 1;
                            isHeader = !!this._grouper && this._grouper.countHeaders(i, i) === 1;
                            MS.Entertainment.Data.assert(!item || (item.cached && cached) || (!item.cached && !cached), "Item's cached flag and cache range do not match. index: " + i);
                            MS.Entertainment.Data.assert(!item || (item.isNonSourceData === nonSourceCached), "Item's isNonSourceData and the range indices do not match. index: " + i);
                            MS.Entertainment.Data.assert(!this._grouper || !item || (item.isHeader === isHeader), "Item's isHeader and the range indices do not match. index: " + i)
                        }
                    }, _validateRanges: function _validateRanges(disallowGroupValidates) {
                        if (this._allowValidateRanges <= 0)
                            return;
                        var ranges;
                        var item;
                        this._validateRangesFromData();
                        if (this._allowValidateRanges <= 1)
                            return;
                        ranges = this._loadedRanges.ranges;
                        ranges.forEach(function(item) {
                            MS.Entertainment.Data.assert(item && item.start <= item.end, "A loaded data range is not correct")
                        });
                        ranges = this._loadedNonSourceRanges.ranges;
                        ranges.forEach(function(item) {
                            MS.Entertainment.Data.assert(item && item.start <= item.end, "A loaded non-source data range is not correct")
                        });
                        if (this._allowValidateRanges <= 2)
                            return;
                        if (this._grouper && this._grouper.isInlineGrouper && !disallowGroupValidates) {
                            ranges = this._grouper.headerRanges;
                            ranges.forEach(function(item) {
                                if (!item)
                                    return;
                                var listStartItem = this._itemNoValidate(item.start);
                                var listEndItem = this._itemNoValidate(item.end);
                                MS.Entertainment.Data.assert(listStartItem && listStartItem.isHeader, "A header range is invalid, was expecting a header item");
                                MS.Entertainment.Data.assert(listEndItem && listEndItem.isHeader, "A header range is invalid, was expecting a header item");
                                MS.Entertainment.Data.assert((item.start === item.end) || (item.start === item.end - 1 && listStartItem.isHeader && listEndItem.isHeader && listStartItem.group.key !== listEndItem.group.key), "A header range is larger than expected.")
                            }, this)
                        }
                    }, _cacheSourceItemData: function _cacheSourceItemData(index, sourceItem) {
                        var data;
                        if (!(index in this._data)) {
                            data = this.createItem(sourceItem, false);
                            data = this._updateCacheData(index, data);
                            this._updateItemKeyMap(data.itemIndex, data.itemIndex)
                        }
                        else {
                            data = this._item(index);
                            if (!data.cached) {
                                this.copyItem(sourceItem, data);
                                this._updateCacheDataRanges(index, data)
                            }
                        }
                        return data
                    }, _uncacheSourceItemData: function _uncacheSourceItemData(index) {
                        var uncachedItem;
                        var item = this._itemNoValidate(index);
                        if (item && !item.isNonSourceData) {
                            uncachedItem = new MS.Entertainment.Data.Factory.ListItemWrapper;
                            this._copyItemTo(uncachedItem, item);
                            this._updateCacheData(index, uncachedItem)
                        }
                    }, _safeChunkWork: function _safeChunkWork(worker) {
                        var chunkingWorkerPromise = this._chunkingWorkerPromise || WinJS.Promise.wrap();
                        var newChunkingWorkerPromise = this._chunkingWorkerPromise = new WinJS.Promise(function initializePromise(complete) {
                                chunkingWorkerPromise.then(function safeToWork() {
                                    var promise;
                                    if (worker)
                                        promise = worker();
                                    return WinJS.Promise.as(promise)
                                }, function ignoreChunkingWorkerPromiseError(){}).then(null, function handleSafeChunkWorkerError(error) {
                                    MS.Entertainment.Data.fail("Failed to execute work inside _safeChunkWork. Error message = " + error && error.message)
                                }).done(function finallyCompleteWork() {
                                    complete()
                                }.bind(this))
                            }.bind(this));
                        return this._chunkingWorkerPromise
                    }, _safeStartUncacheTimer: function _safeStartUncacheTimer() {
                        var noChunking = false;
                        if (this._randomAccessCachingEnabled)
                            WinJS.Promise.as(this._chunkingWorkerPromise).done(function testChunking() {
                                noChunking = true
                            }, function testChunkingHandleError() {
                                noChunking = true
                            });
                        if (noChunking)
                            this._startUncacheTimer()
                    }, _startUncacheTimer: function _startUncacheTimer() {
                        if (this._disposed)
                            return;
                        this._stopUncacheTimer();
                        if (this._randomAccessCachingEnabled)
                            this._uncacheTimer = WinJS.Promise.timeout(this._cacheLifespanMS).then(function _uncacheDataTimer() {
                                if (!this._uncacheTimer)
                                    return;
                                var end,
                                    i,
                                    range;
                                this._loadedRanges.ranges.forEach(function(range) {
                                    end = range.end;
                                    for (i = range.start; i <= end; i++)
                                        this._uncacheSourceItemData(i)
                                }, this);
                                this._uncacheTimer = null
                            }.bind(this), function _uncacheDataTimerFailed(error) {
                                if (!WinJS.Promise.isCanceledError(error))
                                    MS.Entertainment.Data.fail("Uncache timer failed to fire. Error message = " + (error && error.message))
                            })
                    }, _stopUncacheTimer: function _stopUncacheTimer() {
                        if (this._uncacheTimer) {
                            this._uncacheTimer.cancel();
                            this._uncacheTimer = null
                        }
                    }, _handleChunkerReset: function _handleChunkerReset(args) {
                        this._resetCaches(args && args.detail && args.detail.totalCount)
                    }, _canResetCaches: {get: function get_canResetCaches() {
                            return this.randomAccessChunking
                        }}, clear: function clear() {
                        this._setSource([]).done(null, function ignoreError(){});
                        if (this._grouper)
                            this._grouper.reset();
                        this._notifyReload()
                    }, _resetCaches: function _resetCaches(totalCountHint) {
                        var pauseOperation;
                        if (this._canResetCaches) {
                            window.msWriteProfilerMark("ent:virtualList_resetCaches:" + this._debugId + ",StartTM");
                            this._pauseChunkerEvents().then(function resetCachesWork(operation) {
                                pauseOperation = operation;
                                var i;
                                var item;
                                var nonSourceData = [];
                                var nonSourceIndices = this.nonSourceIndices;
                                var headerCount = this.headerCount;
                                var totalCount = typeof totalCountHint === "number" && totalCountHint >= 0 ? totalCountHint : this.hasChunkerCount ? this.chunkerCount : 0;
                                this._clearChunkerEventHandlers();
                                this.preventNotifications = true;
                                this._clearChunkerEventHandlers();
                                for (i = 0; i < nonSourceIndices.length; i++) {
                                    item = nonSourceIndices[i];
                                    if (headerCount >= nonSourceIndices.length - i)
                                        break;
                                    if (!this.isHeader(item)) {
                                        nonSourceData.length = item + 1;
                                        nonSourceData[item] = this._data[item]
                                    }
                                }
                                this._loadedRanges = new MS.Entertainment.Data.Ranges;
                                this._loadedNonSourceRanges = new MS.Entertainment.Data.Ranges;
                                this._maxRandomAccessIndexSeen = -1;
                                this._setSource([]).done(null, function ignoreError(){});
                                this._setCount(totalCount);
                                this._forceListenToAllRandomAccessChanges();
                                this.preventNotifications = false;
                                this._notifyReload();
                                if (this._grouper)
                                    this._grouper.reset();
                                for (i = 0; i < nonSourceData.length; i++) {
                                    item = nonSourceData[i];
                                    if (item)
                                        this.insertAt(i, item, {suppressEvents: true})
                                }
                                this._updateChunkerEventHandlers();
                                return this._forceRefreshGroupHints()
                            }.bind(this)).then(null, function ignoreError(){}).done(function resetWorkComplete() {
                                if (pauseOperation)
                                    pauseOperation.cancel();
                                window.msWriteProfilerMark("ent:virtualList_resetCaches:" + this._debugId + ",StopTM")
                            }.bind(this))
                        }
                        else
                            MS.Entertainment.Data.fail("This list's caches can't be cleared and restored. _resetCaches shouldn't be invoked")
                    }, _copyFromSourceAsync: function _copyFromSourceAsync(endIndex) {
                        if (this._copyingFromSource || this.isEmptySource())
                            return WinJS.Promise.wrap();
                        var startIndex = this._data.length;
                        this._copyingFromSource = true;
                        var allSourceLoaded = false;
                        var promise = this._getSourceCountAsync().then(function gotCount(count) {
                                if (!isNaN(count)) {
                                    this._setEmptyCount(count);
                                    endIndex = isNaN(endIndex) ? count - 1 : Math.min(count - 1, endIndex)
                                }
                                else
                                    endIndex = isNaN(endIndex) ? startIndex : endIndex;
                                allSourceLoaded = endIndex + 1 >= count;
                                if (startIndex <= endIndex)
                                    return this._getSourceItemsAsync(startIndex, endIndex)
                            }.bind(this), function getFailed(error) {
                                if (error !== MSE.Data.List.CountResult.unknown)
                                    return new WinJS.Promise.wrapError(error)
                            }.bind(this)).then(function gotSourceItems(result) {
                                var absoluteIndex = startIndex;
                                var insertedItem;
                                if (result && result.items) {
                                    if (!isNaN(result.totalCount))
                                        this._setSequentialCount(result.totalCount);
                                    for (var i = 0; i < result.items.length; i++) {
                                        insertedItem = this._cacheSourceItemData(absoluteIndex, result.items[i]);
                                        absoluteIndex = insertedItem.itemIndex + 1
                                    }
                                    if (allSourceLoaded)
                                        this._clearSourceItems()
                                }
                            }.bind(this));
                        this._copyingFromSource = false;
                        return promise
                    }, _copyFromSourceIfNeeded: function _copyFromSourceIfNeeded() {
                        var result;
                        if (!this.isEmptySource || !this.isEmptySource())
                            result = this._copyFromSourceAsync();
                        return WinJS.Promise.as(result)
                    }, _copyFromSourceIfNeededAndEdit: function _copyFromSourceIfNeededAndEdit() {
                        return this._copyFromSourceIfNeeded().then(function copiedFromSource() {
                                return this._editingListPrivate()
                            }.bind(this))
                    }, _testEditingSource: function _testEditingSource(editOptions) {
                        var promise;
                        if (editOptions && editOptions.isSourceData)
                            promise = this._editingSource();
                        return WinJS.Promise.as(promise)
                    }, _editingSource: function _editingSource() {
                        this._clearChunkerEventHandlers();
                        this._preventCacheClearing();
                        return this._pauseChunkerEvents()
                    }, _preventCacheClearing: function _preventCacheClearing() {
                        this._stopUncacheTimer();
                        this._cacheLifespanMS = -1
                    }, _editingListPrivate: function _editingListPrivate(index, countBefore, countAfter) {
                        var loadingPromise;
                        this._editCount++;
                        if (index >= 0) {
                            countBefore = isNaN(countBefore) ? 0 : countBefore;
                            countAfter = isNaN(countAfter) ? 0 : countAfter;
                            loadingPromise = this.itemsFromIndex(index, countBefore, countAfter)
                        }
                        return WinJS.Promise.as(loadingPromise).then(function loadedData(result) {
                                var changingSourceItem = false;
                                var items = result && result.items;
                                if (items) {
                                    var startIndex = Math.max(0, result.offset - countBefore);
                                    var endIndex = Math.min(items.length - 1, result.offset + countAfter);
                                    for (var i = startIndex; i <= endIndex && !changingSourceItem; i++)
                                        changingSourceItem = !items[i].isNonSourceData
                                }
                                if (changingSourceItem)
                                    return this._editingSource()
                            }.bind(this)).then(null, function ignoreError(error) {
                                MS.Entertainment.Data.assert(WinJS.Promise.isCanceledError(error) || MS.Entertainment.Data.List.ErrorMessage.isListChangedError(error), "Getting the list ready for editting has failed. error: " + (error && error.message))
                            }).then(function doneEditing() {
                                this._editCount++
                            }.bind(this))
                    }, isEmptySource: function isEmptySource() {
                        return false
                    }, _clearSourceItems: function _clearSourceItems() {
                        throw new Error("_clearSourceItems hasn't been defined");
                    }, _getSourceItemsAsync: function _getSourceItemsAsync(startIndex, endIndex) {
                        throw new Error("_getSourceItemsAync hasn't been defined");
                    }, _getSourceCountAsync: function _getSourceCountAsync() {
                        throw new Error("_getSourceCountAsync hasn't been defined");
                    }, _updateGroups: function _updateGroups() {
                        return this._copyFromSourceIfNeededAndEdit().then(function updateGroups() {
                                var item;
                                var absoluteIndex = 0;
                                this._startNotificationBatch(MSE.Data.VirtualListBase.changeType.source);
                                while (absoluteIndex < this._data.length) {
                                    item = this._item(absoluteIndex);
                                    if (item && !item.isHeader) {
                                        MS.Entertainment.Data.ListGrouperBase.clearGroup(item);
                                        item = this._updateCacheData(absoluteIndex, item);
                                        absoluteIndex = item.itemIndex
                                    }
                                    absoluteIndex++
                                }
                                this._endNotificationBatch()
                            }.bind(this))
                    }, _prefetchWorker: function _prefetchWorker(chunkDirections, result) {
                        var returnPromise;
                        var countCurrent = this.count;
                        var loadFunction = this._preChunkStep(chunkDirections.pop());
                        if (loadFunction)
                            returnPromise = loadFunction().then(function handleLoadSuccess() {
                                if (this._isChunkingNext())
                                    result.chunkedAfter = this.count - countCurrent;
                                else
                                    result.chunkedBefore = this.count - countCurrent;
                                this._postChunkStep();
                                return this._prefetchWorker(chunkDirections, result)
                            }.bind(this), function handleLoadFailures() {
                                this._postChunkStep();
                                return result
                            }.bind(this));
                        else {
                            this._postChunkStep();
                            returnPromise = WinJS.Promise.wrap(result)
                        }
                        return returnPromise
                    }, _prefetchData: function _prefetchData(minStartIndex, minEndIndex, maxStartIndex, maxEndIndex) {
                        var chunkDirections;
                        var returnPromise;
                        var block = false;
                        var result = {
                                chunkedAfter: 0, chunkedBefore: 0
                            };
                        if (this.chunkingEnabled) {
                            if (this.hasNextChunk) {
                                var count = Math.max(this.sourceCount, this.loadedCount);
                                if (minEndIndex + 1 >= count) {
                                    block = true;
                                    chunkDirections = [MSE.Data.chunkingType.next]
                                }
                                else if (maxEndIndex + 1 >= count)
                                    chunkDirections = [MSE.Data.chunkingType.next]
                            }
                            if (this.hasPreviousChunk)
                                if (minStartIndex < 0) {
                                    block = true;
                                    chunkDirections = chunkDirections || [];
                                    chunkDirections.push(MSE.Data.chunkingType.previous)
                                }
                                else if (maxStartIndex <= 0) {
                                    chunkDirections = chunkDirections || [];
                                    chunkDirections.push(MSE.Data.chunkingType.previous)
                                }
                        }
                        if (!chunkDirections)
                            returnPromise = WinJS.Promise.wrap(result);
                        else {
                            if (!this._chunkingWorkerPromise) {
                                this._chunkingWorkerPromise = this._prefetchWorker(chunkDirections, result);
                                this._chunkingWorkerPromise.done(function() {
                                    this._chunkingWorkerPromise = null;
                                    block = false
                                }.bind(this))
                            }
                            if (block)
                                returnPromise = this._chunkingWorkerPromise.then(function() {
                                    return this._prefetchData(minStartIndex, minEndIndex, maxStartIndex, maxEndIndex)
                                }.bind(this));
                            else
                                returnPromise = WinJS.Promise.wrap(result)
                        }
                        return WinJS.Promise.as(returnPromise)
                    }, _isChunking: function _isChunking() {
                        return this._chunkingDirection === MSE.Data.chunkingType.next || this._chunkingDirection === MSE.Data.chunkingType.previous
                    }, _isChunkingNext: function _isChunkingNext() {
                        return this._chunkingDirection === MSE.Data.chunkingType.next
                    }, _isChunkingPrevious: function _isChunkingPrevious() {
                        return this._chunkingDirection === MSE.Data.chunkingType.previous
                    }, _isChunkingNothing: function _isChunkingNothing() {
                        return this._chunkingDirection === MSE.Data.chunkingType.nothing
                    }, _preChunkStep: function _preChunkStep(newChunkingDirection) {
                        var that = this;
                        this._chunkingDirection = newChunkingDirection || MSE.Data.chunkingType.nothing;
                        return (this._isChunkingNext()) ? function() {
                                return that._chunker.loadNextChunk()
                            } : (this._isChunkingPrevious()) ? function() {
                                return that._chunker.loadPreviousChunk()
                            } : (null)
                    }, _postChunkStep: function _postChunkStep() {
                        this._chunkingDirection = MSE.Data.chunkingType.nothing;
                        this._chunkingPreviousIndex = 0
                    }, _startNotificationBatch: function _startNotificationBatch(changeType) {
                        if (!this._notificationBatch)
                            this._notificationBatch = new MS.Entertainment.Data.UpdateBatch(this._createNotificationHandler());
                        this._notificationBatch.changeType = changeType;
                        this._notificationBatch.start();
                        return this._notificationBatch
                    }, _endNotificationBatch: function _endNotificationBatch() {
                        if (this._notificationBatch)
                            if (this._notificationBatch.end())
                                this._notificationBatch = null
                    }, _cancelNotificationBatch: function _cancelNotificationBatch() {
                        this._notificationBatch = null
                    }, _notifyBeginNotifications: function _notifyBeginNotifications() {
                        if (!this.preventNotifications && this._notificationHandler && this._notificationHandler.beginNotifications)
                            this._notificationHandler.beginNotifications();
                        this.dispatchEvent(MS.Entertainment.Data.listEvents.beginNotifications, {sender: this})
                    }, _notifyEndNotifications: function _notifyEndNotifications() {
                        if (!this.preventNotifications && this._notificationHandler && this._notificationHandler.endNotifications)
                            this._notificationHandler.endNotifications();
                        this.dispatchEvent(MS.Entertainment.Data.listEvents.endNotifications, {sender: this})
                    }, _notifyInvalidateList: function _notifyInvalidateList() {
                        if (!this.preventNotifications && this._notificationHandler && this._notificationHandler.invalidateAll)
                            this._notificationHandler.invalidateAll()
                    }, _notifyReload: function _notifyReload() {
                        if (!this.preventNotifications && this._notificationHandler)
                            if (this._notificationHandler.reload)
                                this._notificationHandler.reload();
                            else if (this._notificationHandler.invalidateAll)
                                this._notificationHandler.invalidateAll()
                    }, _notifyInsertedItem: function _notifyInsertedItem(item, index, changeType) {
                        this._notifyInsertedItemWithKeys(item, this._keyFromIndex(index - 1), this._keyFromIndex(index + 1), index, changeType)
                    }, _notifyInsertedItemWithKeys: function _notifyInsertedItem(item, keyBefore, keyAfter, index, changeType) {
                        if (!this.preventNotifications && this._notificationHandler && this._notificationHandler.inserted)
                            this._notificationHandler.inserted(item, keyBefore, keyAfter, index);
                        this._dispatchInsertedItem(item, index, changeType)
                    }, _dispatchInsertedItem: function _dispatchInsertedItem(item, index, changeType) {
                        this.dispatchEvent(MS.Entertainment.Data.listEvents.itemInserted, {
                            sender: this, newValue: item, index: index, changeType: changeType
                        })
                    }, _notifyRangeInserted: function _notifyRangeInserted(startIndex, count, changeType) {
                        if (count > 0 && count + startIndex <= this.count && startIndex >= 0 && startIndex < this.count && !this.preventNotifications) {
                            var batch = this._startNotificationBatch(changeType);
                            var previousKey = this._keyFromIndex(startIndex - 1);
                            var nextKey = this._keyFromIndex(startIndex + count);
                            var i;
                            if (!nextKey && !previousKey) {
                                batch.inserted(this._item(startIndex), null, null, startIndex);
                                previousKey = this._keyFromIndex(startIndex);
                                startIndex + 1
                            }
                            if (nextKey)
                                for (i = 0; i < count; i++)
                                    batch.inserted(this._item(i + startIndex), null, nextKey, startIndex);
                            else
                                for (i = count - 1; i >= 0; i--)
                                    batch.inserted(this._item(i + startIndex), previousKey, null, startIndex);
                            this._endNotificationBatch()
                        }
                    }, _notifyRangeRemoved: function _notifyRangeRemoved(itemsRemoved, changeType) {
                        var removedItem;
                        var i;
                        if (itemsRemoved && itemsRemoved.length > 0) {
                            if (!this.preventNotifications && this._notificationHandler && this._notificationHandler.beginNotifications && this._notificationHandler.removed && this._notificationHandler.endNotifications) {
                                this._notificationHandler.beginNotifications();
                                itemsRemoved.forEach(function notifyHandler(removedItem) {
                                    this._notificationHandler.removed(removedItem.key, removedItem.itemIndex)
                                }, this);
                                this._notificationHandler.endNotifications()
                            }
                            itemsRemoved.forEach(function notifyListeners(removedItem) {
                                this.dispatchEvent(MS.Entertainment.Data.listEvents.itemRemoved, {
                                    sender: this, key: removedItem.key, index: removedItem.itemIndex, changeType: changeType
                                })
                            }, this)
                        }
                    }, _notifyChanged: function _notifyChanged(newValue, oldValue, changeType) {
                        if (newValue) {
                            var index = this._indexFromKey(newValue.key);
                            if (!this.preventNotifications && this._notificationHandler && this._notificationHandler.changed)
                                this._notificationHandler.changed(newValue, oldValue);
                            this._dispatchItemChanged(newValue, oldValue, index, changeType)
                        }
                    }, _dispatchItemChanged: function _dispatchItemChanged(newValue, oldValue, index, changeType) {
                        this.dispatchEvent(MS.Entertainment.Data.listEvents.itemChanged, {
                            sender: this, newValue: newValue, oldValue: oldValue, index: index, changeType: changeType
                        })
                    }, _notifyMoved: function _notifyMoved(item, oldIndex, changeType) {
                        if (!this.preventNotifications && this._notificationHandler && this._notificationHandler.moved) {
                            var newIndex = this._indexFromKey(item.key);
                            this._notificationHandler.moved(item, this._keyFromIndex(newIndex - 1), this._keyFromIndex(newIndex + 1), oldIndex, newIndex)
                        }
                        this._dispatchMoved(item, oldIndex, changeType)
                    }, _dispatchMoved: function _dispatchMoved(item, oldIndex, changeType) {
                        this.dispatchEvent(MS.Entertainment.Data.listEvents.itemMoved, {
                            sender: this, value: item, oldIndex: oldIndex, newIndex: item.itemIndex, changeType: changeType
                        })
                    }, _notifyRemoved: function _notifyRemoved(key, index, changeType) {
                        if (key && !this.preventNotifications && this._notificationHandler && this._notificationHandler.removed)
                            this._notificationHandler.removed(key, index);
                        this._dispatchRemoved(key, index, changeType)
                    }, _dispatchRemoved: function _dispatchRemoved(key, index, changeType) {
                        this.dispatchEvent(MS.Entertainment.Data.listEvents.itemRemoved, {
                            sender: this, key: key, index: index, changeType: changeType
                        })
                    }, _createNotificationHandler: function _createNotificationHandler() {
                        return {
                                changed: this._notifyChanged.bind(this), removed: this._notifyRemoved.bind(this), moved: this._notifyMoved.bind(this), inserted: this._notifyInsertedItemWithKeys.bind(this), beginNotifications: this._notifyBeginNotifications.bind(this), endNotifications: this._notifyEndNotifications.bind(this)
                            }
                    }, _nextInsertIndex: function _nextInsertIndex() {
                        return this._isChunkingPrevious() ? this._chunkingPreviousIndex++ : this._data.length
                    }, _undoInsertIndex: function _undoInsertIndex() {
                        if (this._isChunkingPrevious())
                            this._chunkingPreviousIndex--
                    }
            }, {changeType: {
                    source: "source", user: "user"
                }}), UpdateBatch: MS.Entertainment.UI.Framework.define(function updateBatch(notificationHandler) {
                if (!notificationHandler || !notificationHandler.changed || !notificationHandler.moved || !notificationHandler.removed || !notificationHandler.inserted || !notificationHandler.endNotifications || !notificationHandler.beginNotifications)
                    throw new Error("Invalid notification handler given to the update batch class");
                this._notificationHandler = notificationHandler;
                this._batch = []
            }, {
                _changeType: null, _notificationHandler: null, _batch: null, _startCount: 0, _createBatchItem: function _createBatchItem(callback, args) {
                        this._batch.push({
                            callback: callback, arguments: args
                        })
                    }, changeType: {
                        get: function get_changeType() {
                            return this._changeType || MSE.Data.VirtualListBase.changeType.user
                        }, set: function set_changeType(value) {
                                this._changeType = value
                            }
                    }, _appendChangeType: function _appendChangeType(args) {
                        var newArgs = [];
                        if (args)
                            for (var i = 0; i < args.length; i++)
                                newArgs.push(args[i]);
                        newArgs.push(this.changeType);
                        return newArgs
                    }, changed: function changed(newItem, oldItem) {
                        this._createBatchItem(this._notificationHandler.changed, this._appendChangeType(arguments))
                    }, moved: function moved(item, oldIndex) {
                        this._createBatchItem(this._notificationHandler.moved, this._appendChangeType(arguments))
                    }, removed: function removed(key, index) {
                        this._createBatchItem(this._notificationHandler.removed, this._appendChangeType(arguments))
                    }, inserted: function inserted(item, keyBefore, keyAfter, index) {
                        this._createBatchItem(this._notificationHandler.inserted, this._appendChangeType(arguments))
                    }, start: function start() {
                        this._startCount++
                    }, end: function end() {
                        var executed = false;
                        this._startCount--;
                        MS.Entertainment.Data.assert(this._startCount >= 0, "UpdateBatch::end called too many times");
                        if (this._startCount === 0) {
                            this.execute();
                            executed = true
                        }
                        else if (this._startCount < 0)
                            this._startCount = 0;
                        return executed
                    }, execute: function execute() {
                        this._notificationHandler.beginNotifications();
                        this._batch.forEach(function(event) {
                            if (event && event.callback)
                                event.callback.apply(null, event.arguments)
                        });
                        this._notificationHandler.endNotifications();
                        this._batch = []
                    }
            }), DatabaseListWrapper: MS.Entertainment.UI.Framework.define(function databaseListWrapper(list) {
                this._source = list
            }, {
                _source: null, length: {get: function() {
                            return this._source.dataItemsCount || 0
                        }}, getItem: function(index) {
                        return this._source.getItem(index)
                    }
            }), VectorViewWrapper: MS.Entertainment.UI.Framework.define(function vectorViewWrapper(list) {
                this._source = list
            }, {
                _source: null, length: {get: function() {
                            return this._source.length || this._source.size || 0
                        }}, getItem: function(index) {
                        return this._source[index]
                    }
            }, {
                isVectorView: function isVectorView(object) {
                    return object && !MS.Entertainment.Data.VectorViewWrapper.isVectorViewWrapper(object) && !Array.isArray(object) && (typeof object === "object") && (typeof object.size === "number" || typeof object.length === "number")
                }, isVectorViewWrapper: function isVectorViewWrapper(object) {
                        return MS.Entertainment.Data.VectorViewWrapper.prototype.isPrototypeOf(object)
                    }, getLength: function getLength(object) {
                        return object.size
                    }
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data", {VirtualList: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.VirtualListBase", function virtualListConstructor(itemFactory, source, chunker) {
            MS.Entertainment.Data.VirtualListBase.prototype.constructor.call(this, itemFactory, chunker);
            this.setSource(source).done(null, function(){})
        }, {
            _source: null, _sourceCount: 0, dispose: function dispose() {
                    MS.Entertainment.Data.VirtualListBase.prototype.dispose.call(this);
                    this._source = null
                }, isEmptySource: function isEmptySource() {
                    return this._source === MSE.Data.VirtualList.emptySource
                }, isSourceArray: function isSourceArray() {
                    return this._source ? Array.isArray(this._source) : false
                }, isSourceVector: function isSourceVector() {
                    return this._source ? typeof this._source.getItem === "function" : false
                }, isSourceList: function isSourceList() {
                    return this._source ? typeof this._source.itemsFromIndex === "function" : false
                }, setSource: function setSource(source) {
                    if (MSE.Data.VectorViewWrapper.isVectorView(source))
                        source = new MSE.Data.VectorViewWrapper(source);
                    else if (source && !Array.isArray(source) && !MSE.Data.VirtualList.is(source) && !MSE.Data.VectorViewWrapper.isVectorViewWrapper(source))
                        throw new Error("Invalid operation. Attempting to convert an unsupported source type to a virtual list");
                    source = source || MSE.Data.VirtualList.emptySource;
                    if (this._source !== source)
                        return this._setSource(source);
                    else
                        return WinJS.Promise.wrap()
                }, _clearOldSource: function _clearOldSource() {
                    this._keyMap = {};
                    this._data = [];
                    this._loadedRanges = new MS.Entertainment.Data.Ranges;
                    this._loadedNonSourceRanges = new MS.Entertainment.Data.Ranges;
                    this._source = MSE.Data.VirtualList.emptySource;
                    this._sourceCount = 0;
                    this._selectionCountLocked = 0;
                    if (this._selectedItemsPromise) {
                        this._selectedItemsPromise.cancel();
                        this._selectedItemsPromise = null
                    }
                }, _setSource: function _setSource(source) {
                    var returnPromise;
                    source = source || MSE.Data.VirtualList.emptySource;
                    this._clearOldSource();
                    this._source = source;
                    this._sourceCount = -1;
                    this.count = -1;
                    returnPromise = this._getSourceCountAsync().then(function gotCount(value) {
                        this._sourceCount = value;
                        if (this.randomAccessChunking)
                            this.count = this.chunkerCount;
                        else
                            this.count = value || 0;
                        if (!value)
                            this._source = MSE.Data.VirtualList.emptySource;
                        this._notifyInvalidateList()
                    }.bind(this));
                    return returnPromise
                }, _clearSourceItems: function _clearSourceItems() {
                    this._source = MSE.Data.VirtualList.emptySource
                }, _getSourceItemsAsync: function _getSourceItemsAsync(startIndex, lastIndex) {
                    var promise;
                    if (startIndex > lastIndex || startIndex < 0 || this.isEmptySource())
                        promise = this._getEmptySourceItems();
                    else if (this.isSourceArray())
                        promise = this._getArraySourceItems(this.source, startIndex, lastIndex);
                    else if (this.isSourceList())
                        promise = this._getVirtualListSourceItems(this.source, startIndex, lastIndex);
                    else if (this.isSourceVector())
                        promise = this._getVectorSourceItems(this.source, startIndex, lastIndex);
                    else
                        promise = WinJS.Promise.wrapError(new Error("Unknown source item type"));
                    return promise
                }, _getSourceCountAsync: function _getSourceCountAsync() {
                    var promise;
                    if (this.isEmptySource())
                        promise = WinJS.Promise.wrapError(MSE.Data.List.CountResult.unknown);
                    else if (!this._source)
                        promise = WinJS.Promise.wrap(0);
                    else if (typeof this._source.length === "number")
                        promise = WinJS.Promise.wrap(this._source.length);
                    else if (typeof this._source.getCount === "function")
                        promise = this._source.getCount();
                    else
                        promise = WinJS.Promise.wrap(0);
                    return promise
                }, _createSourceItemsResult: function _createSourceItemsResult(items, totalCount) {
                    if (isNaN(totalCount))
                        return {items: items};
                    else
                        return {
                                items: items, totalCount: totalCount
                            }
                }, _getEmptySourceItems: function _getEmptySourceItems() {
                    return this._createSourceItemsResult([])
                }, _getArraySourceItems: function _getArraySourceItems(source, startIndex, lastIndex) {
                    return WinJS.Promise.wrap(this._createSourceItemsResult(source.slice(startIndex, lastIndex + 1)))
                }, _getVectorSourceItems: function _getVectorSourceItems(source, startIndex, lastIndex) {
                    var result = [];
                    for (var i = startIndex; i <= lastIndex; i++)
                        result.push(source.getItem(i));
                    return WinJS.Promise.wrap(this._createSourceItemsResult(result))
                }, _getVirtualListSourceItems: function _getVirtualListSourceItems(source, startIndex, lastIndex) {
                    var count = Math.max(0, lastIndex - startIndex);
                    return source.itemsFromIndex(startIndex, 0, count).then(function handleResult(args) {
                            var result = [];
                            for (var i = args.offset; i < args.items.length; i++)
                                result.push(args.items[i].data);
                            return this._createSourceItemsResult(result)
                        }.bind(this))
                }
        }, {
            emptySource: [], is: function isVirtualList(object) {
                    return MSE.Data.VirtualList.prototype.isPrototypeOf(object)
                }, wrapArray: function wrapArray(array) {
                    var virtualList = new MS.Entertainment.Data.VirtualList;
                    return virtualList.setSource(array).then(function returnVirtualList() {
                            return virtualList
                        })
                }, copy: function copy(list) {
                    var result = null;
                    if (MS.Entertainment.Data.List.isList(list))
                        result = list.toArrayAll().then(function gotArray(array) {
                            return new MS.Entertainment.Data.VirtualList(null, array)
                        });
                    else if (Array.isArray(list))
                        result = new MS.Entertainment.Data.VirtualList(null, list);
                    else if (list !== null && list !== undefined)
                        result = new MS.Entertainment.Data.VirtualList(null, [list]);
                    return WinJS.Promise.as(result)
                }
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data", {SelectionList: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.VirtualList", function selectionListConstructor() {
            MSE.Data.VirtualList.prototype.constructor.call(this);
            this._preventCacheClearing()
        }, {
            _chunkerSource: null, _selection: null, _selectedItemsPromise: null, _selectedEverything: false, _selectionCountLocked: 0, _selectionLocked: false, copy: function copy() {
                    var list = new MS.Entertainment.Data.SelectionList;
                    list.setSource(this._chunkerSource, this._selection, this._selectedEverything);
                    list._lockSelection();
                    return list
                }, isLocked: {get: function get_isLocked() {
                        return !!this._selectedItemsPromise
                    }}, chunkSize: {get: function() {
                        return 100
                    }}, originalSelectionIndices: {get: function get_originalSelectionIndices() {
                        var result;
                        if (this._selection && this._selection.getIndices)
                            result = this._selection.getIndices();
                        return result || []
                    }}, originalSelectionSourceIndices: {get: function get_originalSelectionSourceIndices() {
                        var result = this.originalSelectionIndices;
                        if (this._chunkerSource && this._chunkerSource.indexToSourceIndex)
                            result = result.map(function(index) {
                                return this._chunkerSource.indexToSourceIndex(index)
                            }, this);
                        return result
                    }}, _selectionCount: {get: function() {
                        if (this._selectedEverything)
                            return this._chunkerSource ? this._chunkerSource.count - this._chunkerSource.nonSourceCount : 0;
                        else
                            return this._selection ? this._selection.count() : this._selectionCountLocked
                    }}, _createChunker: function() {
                    return {
                            totalCount: this._selectionCount, loadChunk: this._loadChunkFromSource.bind(this)
                        }
                }, setSource: function setSource(source, selection, selectedEverything) {
                    if (selection && !selection.count && !selection.getItems && !selection.getIndices)
                        throw new Error("Invalid selection type was passed to SelectionList");
                    var initialCount = selection ? selection.count() : 0;
                    if (initialCount > 1 && source && !source.forEachAll)
                        throw new Error("Invalid source type was passed to SelectionList.  At the moment multi-selection only supports a VirtualList source");
                    this._clearOldSource();
                    this._selection = selection;
                    this._selectedEverything = selectedEverything;
                    this._chunkerSource = source;
                    this.chunker = this._createChunker();
                    return MSE.Data.VirtualList.prototype.setSource.call(this, null)
                }, _lockSelection: function _lockSelection() {
                    if (!this._selectedEverything && !this._selectedItemsPromise) {
                        this._selectionCountLocked = this._selection ? this._selection.count() : 0;
                        this._selectedItemsPromise = (this._selection ? this._selection.getItems() : WinJS.Promise.wrap([])).then(null, function ignoreCancels(error) {
                            var result = [];
                            if (!WinJS.Promise.isCanceledError(error))
                                result = WinJS.Promise.wrapError(error);
                            return result
                        });
                        this._selection = null
                    }
                }, _getSelectedItems: function _getSelectedItems() {
                    if (this._selection)
                        return this._selection.getItems();
                    else if (this._selectedItemsPromise)
                        return this._selectedItemsPromise;
                    else
                        return WinJS.Promise.wrap([])
                }, _getEmptyChunk: function _getEmptyChunk() {
                    return this._createChunkResult(null, null, null, true)
                }, _createChunkResult: function _createChunkResult(items, offset, count, error) {
                    return WinJS.Promise.wrap({
                            items: items || [], offset: offset || 0, error: !!error, totalCount: count || this._selectionCount
                        })
                }, _loadChunkFromSource: function _loadChunkFromSource(index, countBefore, countAfter) {
                    countAfter = countAfter || 0;
                    countBefore = countBefore || 0;
                    var selectionCount = this._selectionCount;
                    if (index - countBefore < 0 || countBefore < 0 || countAfter < 0 || selectionCount === 0)
                        return this._getEmptyChunk();
                    else if (this._selectedEverything && selectionCount > 1)
                        return this._getChunkAllSelected(index, countBefore, countAfter);
                    else
                        return this._getChunkSomeSelected(index, countBefore, countAfter)
                }, _getChunkAllSelected: function _getChunkAllSelected(index, countBefore, countAfter) {
                    var items = [];
                    var offset = countBefore;
                    var startIndex = this._chunkerSource.indexFromSourceIndex(index - countBefore);
                    var totalNeeded = countBefore + 1 + countAfter;
                    return this._chunkerSource.forEachAll(function iteration(args) {
                            if (!args.item.isNonSourceData)
                                items.push(args.item.data);
                            if (items.length >= totalNeeded)
                                args.stop = true
                        }.bind(this), startIndex).then(function gotItems() {
                            return this._createChunkResult(items, offset)
                        }.bind(this))
                }, _getChunkSomeSelected: function _getChunkSomeSelected(index, countBefore, countAfter) {
                    var selectionCount = this._selectionCount;
                    var startIndex = index - countBefore;
                    var endIndex = index + countAfter;
                    return this._getSelectedItems().then(function(selectionItems) {
                            var items = [];
                            selectionItems = selectionItems || [];
                            for (var i = startIndex; i <= endIndex && i < selectionItems.length; i++)
                                items.push(selectionItems[i] ? selectionItems[i].data : null);
                            return this._createChunkResult(items, countBefore, selectionCount)
                        }.bind(this))
                }
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data", {TrimmedList: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.VirtualList", function virtualListConstructor(itemFactory, source, chunker) {
            MSE.Data.VirtualList.prototype.constructor.call(this, itemFactory, source, chunker)
        }, {
            _maxCount: -1, maxCount: {
                    get: function() {
                        return this._maxCount
                    }, set: function(value) {
                            if (this._maxCount !== value)
                                this._maxCount = value;
                            if (this._maxCount >= 0)
                                this.count = Math.min(this._maxCount, this.count)
                        }
                }, count: {
                    get: function() {
                        return this.getProperty("count")
                    }, set: function(value) {
                            if (this.maxCount >= 0)
                                value = Math.min(this._maxCount, value);
                            this.setProperty("count", value)
                        }
                }
        })})
})(WinJS.Namespace.define("MS.Entertainment", null))
})();
/* >>>>>>/framework/data/query.js:20256 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data");
(function(undefined) {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    var logJsonFailure = function logJsonFailure(message, error, json) {
            MSE.Data.fail(["JSON parse failed. \n\t[message: ", (message), "] \n\t[error message: ", (error && error.message), "] \n\t[json string length: ", (json ? json.length : "<JSON NULL>"), "] \n\t[json string: \'", (json), "\']"].join(String.empty))
        };
    WinJS.Namespace.defineWithParent(MSE, "Data", {queryStatus: {
            idle: 0, requestingData: 1, processingData: 2, augmentingData: 3, completed: 4, failed: 5, max: 5, isWorking: function isWorking(status) {
                    return status === MSE.Data.queryStatus.requestingData || status === MSE.Data.queryStatus.processingData || status === MSE.Data.queryStatus.augmentingData
                }, hasCompleted: function isWorking(status) {
                    return status === MSE.Data.queryStatus.completed
                }, hasFailed: function isWorking(status) {
                    return status === MSE.Data.queryStatus.failed
                }, hasCompletedOrFailed: function isWorking(status) {
                    return status === MSE.Data.queryStatus.completed || status === MSE.Data.queryStatus.failed
                }
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Query.edsIdType", {
        amg: "AMG", canonical: "Canonical", mediaNet: "MediaNet", offer: "Offer", providerContentId: "ProviderContentId", xboxHexTitle: "XboxHexTitle", zuneCatalog: "ZuneCatalog", zuneMediaInstance: "ZuneMediaInstance"
    });
    WinJS.Namespace.defineWithParent(MSE, "Data", {observableQueryMixin: {
            enabled: false, status: MSE.Data.queryStatus.idle, cookie: null, errorCode: 0, errorObject: null, result: null, totalCount: -1
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data", {ObservableQuery: WinJS.Class.mix(function observableQuery() {
            this._initObservable(Object.create(MS.Entertainment.Data.observableQueryMixin))
        }, WinJS.Utilities.eventMixin, WinJS.Binding.mixin, WinJS.Binding.expandProperties(MS.Entertainment.Data.observableQueryMixin))});
    WinJS.Namespace.defineWithParent(MSE, "Data", {
        Disposer: MS.Entertainment.UI.Framework.define(null, {
            dispose: function dispose() {
                var keys = Object.getOwnPropertyNames(this);
                for (var key in keys)
                    this.disposeOnly(key)
            }, disposeOnly: function disposeOnly(key) {
                    var object = this[key];
                    if (object && object.dispose)
                        object.dispose();
                    if (key !== "dispose" && key !== "disposeOnly")
                        delete this[key]
                }
        }), MainQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.ObservableQuery", function mainQueryConstructor() {
                MSE.Data.ObservableQuery.prototype.constructor.call(this);
                this.status = MSE.Data.queryStatus.idle;
                this.autoUpdateProperties = this.autoUpdateProperties || {};
                this.autoUpdateProperties.enabled = true
            }, {
                _generation: 0, _referenceCount: 0, resultFactory: null, provider: null, autoUpdateProperties: null, debugInstanceId: null, listDestinationHint: null, generation: {get: function() {
                            return this._generation
                        }}, addReference: function addReference() {
                        this._logQueryActions("AddRef");
                        this._referenceCount++
                    }, release: function release() {
                        this._logQueryActions("Release");
                        if (this._referenceCount > 0)
                            this._referenceCount--;
                        else
                            MS.Entertainment.Platform.Playback.Etw.traceString("MainQuery::release() Reference count is already at zero.")
                    }, dispose: function dispose() {
                        this._logQueryActions("Dispose");
                        if (this._referenceCount > 0)
                            MS.Entertainment.Platform.Playback.Etw.traceString("MainQuery::dispose() Reference count is not zero. Could be disposing a query that is still being consumed by another component. Or query may not have been correctly released.")
                    }, createResultObject: function createResultObject() {
                        return this.resultFactory(null, this)
                    }, createPendingResultObject: function createPendingResultObject(resultOverride) {
                        this._generation++;
                        var result = {
                                generation: this._generation, result: ((resultOverride) || this.createResultObject())
                            };
                        return result
                    }, execute: function execute(cookie) {
                        return WinJS.Promise.wrapError(this)
                    }, refresh: function refresh() {
                        var promise;
                        if (this.enabled)
                            promise = this.execute();
                        else
                            promise = WinJS.Promise.wrap(this);
                        return promise
                    }, getItems: function getItems() {
                        return this.execute().then(function executeCompleted() {
                                return this._getList()
                            }.bind(this))
                    }, getItemsAndIgnoreErrors: function getItemsAndIgnoreErrors() {
                        return this.getItems().then(function handleResult(result) {
                                return result
                            }, function handleError(error) {
                                MS.Entertainment.Data.fail("getItems failed. error.message = " + error && error.message);
                                return null
                            })
                    }, getItemsArrayAndIgnoreErrors: function getItemsArrayAndIgnoreErrors() {
                        return this.getItemsAndIgnoreErrors().then(function handleResult(result) {
                                return result ? result.toArrayAll() : []
                            }, function handleError(error) {
                                MS.Entertainment.Data.fail("getItemsAndIgnoreErrors failed. error.message = " + error && error.message);
                                return []
                            }).then(function handleResult(result) {
                                return result
                            }, function handleError(error) {
                                MS.Entertainment.Data.fail("toArrayAll failed. error.message = " + error && error.message);
                                return []
                            })
                    }, createGroupsQuery: function createGroupsQuery() {
                        return null
                    }, restore: function restore(cookie) {
                        return this.execute(cookie)
                    }, loadPreviousChunk: function loadPreviousChunk() {
                        return WinJS.Promise.wrap(this)
                    }, loadNextChunk: function loadNextChunk() {
                        return WinJS.Promise.wrap(this)
                    }, notify: function notify(propertyName, newValue, oldValue) {
                        if (!this.isDisposed && this.autoUpdateProperties && newValue !== oldValue && this.autoUpdateProperties[propertyName])
                            this.refresh().done(null, function error(){});
                        MSE.Data.ObservableQuery.prototype.notify.apply(this, arguments)
                    }, clone: function clone() {
                        var prototype = Object.getPrototypeOf(this);
                        var QueryConstructor = (prototype.constructor);
                        var newQuery = new QueryConstructor;
                        var addToPropertyValues = function addToPropertyValues(key) {
                                if (key !== "isLive")
                                    newQuery[key] = this[key]
                            }.bind(this);
                        while (prototype && prototype.constructor !== MS.Entertainment.Data.observableQueryMixin) {
                            Object.keys(prototype).forEach(addToPropertyValues);
                            prototype = Object.getPrototypeOf(prototype)
                        }
                        return newQuery
                    }, _getList: function _getList(resultOverride) {
                        var result = resultOverride || this.result;
                        var list = null;
                        if (this.listDestinationHint)
                            list = this._getListWorker(MS.Entertainment.Utilities.valueFromPropertyPath(result, this.listDestinationHint), 0, this.listDestinationHint);
                        if (!list)
                            list = this._getListWorker(result);
                        return list
                    }, _getListWorker: function _getListWorker(currentValue, depth, currentPath) {
                        var updatedPath,
                            key,
                            updatedValue;
                        var list = null;
                        depth = depth || 0;
                        currentPath = currentPath || String.empty;
                        currentValue = WinJS.Binding.unwrap(currentValue);
                        if (this._isListType(currentValue)) {
                            this.listDestinationHint = currentPath;
                            list = currentValue
                        }
                        else if (currentValue && typeof currentValue === "object" && !Array.isArray(currentValue) && depth < MSE.Data.MainQuery.maxListDepth)
                            for (key in currentValue)
                                if (key && key[0] !== "_")
                                    try {
                                        updatedValue = currentValue[key];
                                        updatedPath = currentPath ? currentPath + "." + key : key;
                                        list = this._getListWorker(updatedValue, depth + 1, updatedPath);
                                        if (list)
                                            break
                                    }
                                    catch(exception) {}
                        return list
                    }, _isListType: function _isListType(value) {
                        return MSE.Data.List.is(value)
                    }, _setResult: function _setResult(result, totalCount, error) {
                        this.result = result;
                        this.totalCount = totalCount;
                        this.dispatchEvent(MS.Entertainment.Data.MainQuery.events.resultChanged, {
                            sender: this, result: result, totalCount: totalCount, error: error
                        })
                    }, _handleEnabled: function _handleEnabled() {
                        this.refresh()
                    }, _logQueryActions: function _logActions(action) {
                        if (this.debugInstanceId && action && MSE.Platform && MSE.Platform.Playback && MSE.Platform.Playback.Etw) {
                            var queryType = "isLive" in this ? " LibraryWrapperQuery" : " PlaybackQuery";
                            var traceString = "MainQuery:: " + action.toUpperCase() + queryType + " id=" + this.debugInstanceId;
                            MSE.Platform.Playback.Etw.traceString(traceString)
                        }
                    }
            }, {
                maxListDepth: 3, events: {resultChanged: "resultChanged"}, isQuery: function MainQuery_isQuery(object) {
                        return MS.Entertainment.Data.MainQuery.prototype.isPrototypeOf(object)
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data", {
        RandomAccessChunk: MS.Entertainment.UI.Framework.define(function randomAccessChunk(startIndex, count) {
            this.startIndex = startIndex;
            this.count = count
        }, {
            startIndex: 0, count: 0
        }, {is: function randomAccessChunk_is(object) {
                return MS.Entertainment.Data.RandomAccessChunk.prototype.isPrototypeOf(object)
            }}), AugmentQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.MainQuery", function() {
                MSE.Data.MainQuery.prototype.constructor.call(this)
            }, {
                _originalChunkDestination: null, _chunkDestination: null, _nextChunk: null, _previousChunk: null, _resultShape: null, _disposed: false, lastChunkedResult: null, resultFactory: MSE.Data.Factory.self, resultAugmentation: null, allowGroupHints: false, hasTotalCount: false, aggregateChunks: false, chunked: true, chunkSize: 100, currentChunk: null, clearResultOnFailure: false, dispose: function dispose() {
                        MSE.Data.MainQuery.prototype.dispose.call(this);
                        this.createPendingResultObject();
                        if (this._originalChunkDestination && this._originalChunkDestination.dispose)
                            this._originalChunkDestination.dispose();
                        this._clearChunkDestination();
                        this._clearListQueryHinter();
                        this._disposed = true
                    }, isDisposed: {get: function() {
                            return this._disposed
                        }}, nextChunk: {
                        get: function() {
                            return this._nextChunk
                        }, set: function(value) {
                                this._nextChunk = value
                            }
                    }, previousChunk: {
                        get: function() {
                            return this._previousChunk
                        }, set: function(value) {
                                this._previousChunk = value
                            }
                    }, hasNextChunk: {get: function() {
                            return (this.nextChunk !== null && this.nextChunk !== undefined && this.nextChunk !== MSE.Data.AugmentQuery.invalidNextChunk)
                        }}, hasPreviousChunk: {get: function() {
                            return (this.previousChunk !== null && this.previousChunk !== undefined && this.previousChunk !== MSE.Data.AugmentQuery.invalidPreviousChunk)
                        }}, isLoadingFromStart: {get: function() {
                            return this.currentChunk === null || this.currentChunk === undefined
                        }}, chunkDestinationHint: {
                        get: function() {
                            return this.listDestinationHint
                        }, set: function(value) {
                                this.listDestinationHint = value
                            }
                    }, chunkDestination: {
                        get: function get_chunkDesination() {
                            return this._chunkDestination
                        }, set: function set_chunkDesination(value) {
                                if (this._disposed)
                                    return;
                                this._chunkDestination = value
                            }
                    }, execute: function execute(cookie) {
                        this.currentChunk = (cookie === null || cookie === undefined) ? null : cookie;
                        return this._execute()
                    }, loadPreviousChunk: function loadPreviousChunk() {
                        if (this.previousChunk !== null && this.previousChunk !== undefined && this.previousChunk !== MSE.Data.AugmentQuery.invalidPreviousChunk) {
                            this.currentChunk = this.previousChunk;
                            return this._execute()
                        }
                        else
                            return WinJS.Promise.wrap(this)
                    }, loadNextChunk: function loadNextChunk() {
                        if (this.nextChunk !== null && this.nextChunk !== undefined && this.nextChunk !== MSE.Data.AugmentQuery.invalidNextChunk) {
                            this.currentChunk = this.nextChunk;
                            return this._execute()
                        }
                        else
                            return WinJS.Promise.wrap(this)
                    }, isValidChunk: function isValidChunk(chunk) {
                        return chunk !== null && chunk !== undefined && chunk !== MSE.Data.AugmentQuery.invalidNextChunk && chunk !== MSE.Data.AugmentQuery.invalidPreviousChunk
                    }, _isListType: function _isListType(value) {
                        return MSE.Data.VirtualList.is(value)
                    }, _getChunkDestination: function _getChunkDestination(resultOverride) {
                        return this._getList(resultOverride)
                    }, _setChunkDestination: function _setChunkDestination() {
                        if (this.aggregateChunks) {
                            this._chunkDestination = this._originalChunkDestination = this._getChunkDestination();
                            if (this._originalChunkDestination)
                                this._originalChunkDestination.chunker = this
                        }
                        else
                            this._clearChunkDestination()
                    }, _clearChunkDestination: function _clearChunkDestination() {
                        if (this._originalChunkDestination) {
                            if (WinJS.Binding.unwrap(this._originalChunkDestination.chunker) === this)
                                this._originalChunkDestination.chunker = null;
                            this._originalChunkDestination = null;
                            this._chunkDestination = null
                        }
                    }, _setListQueryHinter: function _setListQueryHinter() {
                        var groupHintsQuery;
                        this._clearListQueryHinter();
                        if (this.allowGroupHints) {
                            groupHintsQuery = this.createGroupsQuery();
                            this._queryHinterDestination = this._getList()
                        }
                        if (this._queryHinterDestination && groupHintsQuery)
                            this._queryHinterDestination.groupHinter = groupHintsQuery
                    }, _clearListQueryHinter: function _clearListQueryHints() {
                        if (this._queryHinterDestination) {
                            if (WinJS.Binding.unwrap(this._queryHinterDestination.groupHinter) === this)
                                this._queryHinterDestination.groupHinter = null;
                            this._queryHinterDestination = null
                        }
                    }, _parseInnerResult: function _parseInnerResult(result) {
                        return result
                    }, _parseInnerProgress: function _parseInnerProgress(result) {
                        return result
                    }, _parseTotalCount: function _parseTotalCount(result) {
                        return (!this.hasTotalCount || !result || isNaN(result.totalCount)) ? -1 : result.totalCount
                    }, _getResultAugmentation: function _getResultAugmentation() {
                        return this.resultAugmentation
                    }, _calculateNextChunkKey: function _calculateNextChunkKey(result) {
                        return MSE.Data.AugmentQuery.invalidNextChunk
                    }, _calculatePreviousChunkKey: function _calculatePreviousChunkKey(result) {
                        return MSE.Data.AugmentQuery.invalidPreviousChunk
                    }, _startExecute: function _startExecute(){}, _preInnerExecute: function _preInnerExecute() {
                        return WinJS.Promise.wrap()
                    }, _startInnerExecute: function _startInnerExecute() {
                        return WinJS.Promise.wrapError()
                    }, _retryInnerExecute: function _retryInnerExecute(result, error) {
                        return false
                    }, _endInnerExecute: function _endInnerExecute(result){}, _preInsertChunk: function _preInsertChunk(destination, chunk){}, _execute: function _execute(chunkDestinationOverride) {
                        var innerPromise;
                        var that = this;
                        var pendingResult = this.createPendingResultObject();
                        var loadingFromStart = this.isLoadingFromStart;
                        var chunkingNext = this.nextChunk !== null && this.nextChunk !== undefined && this.currentChunk === this.nextChunk;
                        var chunkingPrevious = this.previousChunk !== null && this.previousChunk !== undefined && this.currentChunk === this.previousChunk;
                        var chunkingRandom = !loadingFromStart && MS.Entertainment.Data.RandomAccessChunk.is(this.currentChunk);
                        var aggregateChunking = this.aggregateChunks && (chunkingNext || chunkingPrevious || chunkingRandom);
                        var progressCallback;
                        function cleanUp() {
                            innerPromise = null;
                            pendingResult = null
                        }
                        {};
                        function cancelInnerPromiseNoError() {
                            if (innerPromise) {
                                if (pendingResult)
                                    pendingResult.generation = -1;
                                try {
                                    innerPromise.cancel()
                                }
                                catch(exception) {}
                            }
                            cleanUp()
                        }
                        {};
                        function cancelInnerPromise(cancelReason) {
                            cancelInnerPromiseNoError();
                            cancelReason = cancelReason || "unknown";
                            cancelReason = "Query was canceled. Cancel reason: " + cancelReason + ".";
                            return WinJS.Promise.wrapError(that._createError({
                                    name: "Canceled", description: cancelReason, message: cancelReason
                                }))
                        }
                        {};
                        function updateStatus(status) {
                            that.status = status;
                            progressCallback(that)
                        }
                        {};
                        function updateError(error) {
                            that.errorObject = that._createError(error);
                            that.errorCode = that.errorObject.number
                        }
                        {};
                        function clearErrorCode() {
                            that.errorCode = 0;
                            that.errorObject = null
                        }
                        {};
                        function handleInnerPromiseEvent(result, callback, preventFailure) {
                            if (pendingResult && pendingResult.generation === that.generation)
                                return callback(result);
                            else if (!preventFailure && !pendingResult)
                                return cancelInnerPromise("the cancel was invoked on the execute promise");
                            else if (!preventFailure && pendingResult.generation >= 0)
                                return cancelInnerPromise("the query.execute was invoked after this execution, " + (that.generation - pendingResult.generation) + " time(s)")
                        }
                        {};
                        function parseInnerResult(result) {
                            updateStatus(MSE.Data.queryStatus.augmentingData);
                            result = that._parseInnerResult(result);
                            return MSE.Data.augment(result, that._getResultAugmentation())
                        }
                        {};
                        function handleInnerCompleted(result) {
                            pendingResult.result = result;
                            that._setResult(pendingResult.result, that._parseTotalCount(pendingResult.result));
                            that._setChunkDestination();
                            that._setListQueryHinter();
                            return WinJS.Promise.wrap()
                        }
                        {};
                        function handleInnerCompletedChunked(result) {
                            pendingResult.result = result;
                            that.totalCount = that._parseTotalCount(pendingResult.result);
                            if (chunkingRandom)
                                return that._insertChunkAt(that.currentChunk.startIndex, that._getChunkDestination(result), chunkDestinationOverride);
                            else
                                return that._insertChunk(chunkingNext, that._getChunkDestination(result), chunkDestinationOverride)
                        }
                        {};
                        function handleInnerFailure(result) {
                            updateStatus(MSE.Data.queryStatus.failed);
                            updateError(result);
                            var newResult = that.clearResultOnFailure ? null : that.result;
                            that._setResult(newResult, that._parseTotalCount(newResult), result);
                            return WinJS.Promise.wrapError(result)
                        }
                        {};
                        function handleInnerProgress(result) {
                            updateStatus(that._parseInnerProgress(result))
                        }
                        {};
                        function executeCompleted() {
                            if (!that.chunked || !that.chunkSize)
                                that._nextChunk = null;
                            else if (chunkingNext || loadingFromStart || chunkingRandom || that._nextChunk === null || that._nextChunk === undefined)
                                that._nextChunk = that._calculateNextChunkKey(pendingResult.result);
                            if (that._nextChunk === null || that._nextChunk === undefined)
                                that._nextChunk = MSE.Data.AugmentQuery.invalidNextChunk;
                            if (!that.chunked || !that.chunkSize)
                                that._previousChunk = null;
                            else if (chunkingPrevious || loadingFromStart || chunkingRandom || that._previousChunk === null || that._previousChunk === undefined)
                                that._previousChunk = that._calculatePreviousChunkKey(pendingResult.result);
                            if (that._previousChunk === null || that._previousChunk === undefined)
                                that._previousChunk = MSE.Data.AugmentQuery.invalidPreviousChunk;
                            if (chunkingPrevious || chunkingNext || chunkingRandom)
                                that.lastChunkedResult = pendingResult.result;
                            that._endInnerExecute(pendingResult.result);
                            updateStatus(MSE.Data.queryStatus.completed)
                        }
                        {};
                        function wrapPromiseHandler(callback, preventFailure) {
                            return function(result) {
                                    return handleInnerPromiseEvent(result, callback, preventFailure)
                                }
                        }
                        {};
                        function handlePromiseFailure(error) {
                            return WinJS.Promise.wrapError(error)
                        }
                        {};
                        function testRetry(result, error) {
                            var promise;
                            if (result)
                                result = parseInnerResult(result);
                            if (that._retryInnerExecute(result, error))
                                promise = startInnerExecute();
                            else {
                                var promise = !!error ? wrapPromiseHandler(handleInnerFailure)(error) : wrapPromiseHandler(aggregateChunking ? handleInnerCompletedChunked : handleInnerCompleted)(result);
                                promise = WinJS.Promise.as(promise).then(wrapPromiseHandler(executeCompleted), handlePromiseFailure)
                            }
                            return promise
                        }
                        {};
                        function testRetryOnSuccess(result) {
                            return testRetry(result)
                        }
                        {};
                        function testRetryOnError(error) {
                            return testRetry(null, error)
                        }
                        {};
                        function createInnerPromise(completed, failed, progress) {
                            progressCallback = progressCallback || progress;
                            clearErrorCode();
                            updateStatus(MSE.Data.queryStatus.requestingData);
                            innerPromise = that._startInnerExecute().then(wrapPromiseHandler(testRetryOnSuccess), wrapPromiseHandler(testRetryOnError), wrapPromiseHandler(handleInnerProgress, true)).then(function innerPromiseCompleted() {
                                completed(that);
                                cleanUp()
                            }, function innerPromiseFailed(error) {
                                failed(that._createError(error));
                                cleanUp()
                            })
                        }
                        this._startExecute();
                        function startInnerExecute() {
                            if (!aggregateChunking)
                                that._clearChunkDestination();
                            return WinJS.Promise.as(that._preInnerExecute()).then(function() {
                                    return new WinJS.Promise(createInnerPromise, cancelInnerPromiseNoError)
                                })
                        }
                        return startInnerExecute()
                    }, _createError: function _createError(error, description) {
                        var newError = new Error(description);
                        if (error)
                            MS.Entertainment.Utilities.BindingAgnostic.setProperties(newError, error);
                        newError.errorCode = newError.number;
                        newError.originalError = error;
                        newError.details = {query: this};
                        return newError
                    }, _insertChunkAt: function(startIndex, list, chunkDestinationOverride) {
                        var promise;
                        var destination = chunkDestinationOverride || this.chunkDestination;
                        if (!destination)
                            promise = WinJS.Promise.wrapError(new Error("no destination was found when inserting chunk at index"));
                        else if (list && destination.insertRangeAt) {
                            this._preInsertChunk(destination, list);
                            promise = destination.insertRangeAt(startIndex, list.source, {
                                suppressEvents: true, isSourceData: true
                            })
                        }
                        else
                            promise = WinJS.Promise.wrap()
                    }, _insertChunk: function(nextChunk, list, chunkDestinationOverride) {
                        var promise;
                        var destination = chunkDestinationOverride || this.chunkDestination;
                        if (!destination)
                            promise = WinJS.Promise.wrapError(new Error("no destination was found when inserting chunk"));
                        else if (list && destination.insertRangeAtEnd && destination.insertRangeAtStart) {
                            this._preInsertChunk(destination, list);
                            if (nextChunk)
                                promise = destination.insertRangeAtEnd(list.source, {
                                    suppressEvents: true, isSourceData: true
                                });
                            else
                                promise = destination.insertRangeAtStart(list.source, {
                                    suppressEvents: true, isSourceData: true
                                })
                        }
                        else
                            promise = WinJS.Promise.wrap();
                        return promise
                    }, _getChunkResultSize: function _getChunkResultSize(result) {
                        var resultSize = 0;
                        var listResult;
                        if (result && !isNaN(result.count))
                            resultSize = result.count;
                        else
                            listResult = this._getChunkDestination(result);
                        if (listResult)
                            if (listResult.hasCount)
                                resultSize = listResult.count;
                            else if (listResult.source)
                                resultSize - listResult.source.length;
                        return resultSize || 0
                    }
            }, {
                invalidNextChunk: {}, invalidPreviousChunk: {}, _findAugmentation: function _findAugmentation(augmentation, testCallback) {
                        var propertyName;
                        var propertyAugmentation;
                        var itemAugmentationOrFactory;
                        var key;
                        var augmentationShape = MS.Entertainment.Data.augmentationShape(augmentation);
                        if (augmentationShape)
                            for (key in augmentationShape) {
                                propertyAugmentation = augmentationShape[key];
                                if (testCallback(key, propertyAugmentation)) {
                                    propertyName = key;
                                    break
                                }
                                propertyAugmentation = null
                            }
                        if (propertyAugmentation && propertyAugmentation.augmentationOptions && propertyAugmentation.augmentationOptions.itemAugmentationOrFactory)
                            itemAugmentationOrFactory = propertyAugmentation.augmentationOptions.itemAugmentationOrFactory;
                        return {
                                key: propertyName, augmentation: propertyAugmentation, itemAugmentationOrFactory: itemAugmentationOrFactory
                            }
                    }, findAugmentation: function findAugmentation(augmentation, key) {
                        return MS.Entertainment.Data.AugmentQuery._findAugmentation(augmentation, function isList(testKey, testAugmentation) {
                                return testKey === key
                            })
                    }, findListAugmentation: function findListAugmentation(augmentation) {
                        return MS.Entertainment.Data.AugmentQuery._findAugmentation(augmentation, function isList(testKey, testAugmentation) {
                                return MS.Entertainment.Data.Property.isList(testAugmentation)
                            })
                    }, modifyResultAugmentation: function modifyResultAugmentation(augmentation, key, definition) {
                        var result = augmentation;
                        var itemAugmentation;
                        var rootDefinition;
                        var property = MS.Entertainment.Data.AugmentQuery.findAugmentation(augmentation, key);
                        if (property.key && property.augmentation) {
                            rootDefinition = {};
                            itemAugmentation = property.augmentation.augmentationOptions ? property.augmentation.augmentationOptions.augmentation : null;
                            itemAugmentation = MS.Entertainment.Data.Factory.createDerivedAugmentationOrFactory(itemAugmentation, definition);
                            rootDefinition[property.key] = MS.Entertainment.Data.Property.createAugmentation(property.augmentation, {augmentation: itemAugmentation})
                        }
                        if (augmentation && rootDefinition)
                            result = MS.Entertainment.Data.derive(augmentation, null, rootDefinition);
                        return result
                    }, modifyListResultAugmentation: function modifyListResultAugmentation(augmentation, definition) {
                        var result = augmentation;
                        var listPropertyAugmentation;
                        var listItemAugmentation;
                        var rootDefinition;
                        var listProperty = MS.Entertainment.Data.AugmentQuery.findListAugmentation(augmentation);
                        if (listProperty.key && listProperty.augmentation) {
                            rootDefinition = {};
                            listItemAugmentation = MS.Entertainment.Data.Factory.createDerivedAugmentationOrFactory(listProperty.itemAugmentationOrFactory, definition);
                            rootDefinition[listProperty.key] = MS.Entertainment.Data.Property.createAugmentation(listProperty.augmentation, {itemAugmentationOrFactory: listItemAugmentation})
                        }
                        if (augmentation && rootDefinition)
                            result = MS.Entertainment.Data.derive(augmentation, null, rootDefinition);
                        return result
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data", {AggregateQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentQuery", function aggregateQuery() {
            MSE.Data.AugmentQuery.prototype.constructor.call(this);
            this.queries = []
        }, {
            queries: null, executeSequentially: false, resultAugmentationFactory: null, _handleIntermediateResult: function _handleIntermediateResult(sourceIndex, sourceResult){}, _startNonSequentialExecution: function _startSequentialExecution() {
                    var executePromises = [];
                    var index = 0;
                    var queryChunk = null;
                    this.queries.forEach(function executeQuery(query) {
                        queryChunk = this._getQueryChunk(index);
                        if (query && queryChunk !== undefined) {
                            query.aggregateChunks = this.chunked ? false : query.aggregateChunks;
                            executePromises.push(query.execute(queryChunk))
                        }
                        else
                            executePromises.push(WinJS.Promise.as({}));
                        index++
                    }, this);
                    return WinJS.Promise.join(executePromises)
                }, _startSequentialExecution: function _startSequentialExecution() {
                    var results = [];
                    return new WinJS.Promise(function initializePromise(completeCallback, errorCallback) {
                            this._continueSequentialExecution(0, results, completeCallback, errorCallback)
                        }.bind(this))
                }, _continueSequentialExecution: function _continueSequentialExecution(index, results, completeCallback, errorCallback) {
                    if (index >= this.queries.length) {
                        completeCallback(results);
                        return
                    }
                    var query = this.queries[index];
                    var queryChunk = this._getQueryChunk(index);
                    var queryExecutePromise;
                    if (query && queryChunk !== undefined) {
                        query.aggregateChunks = this.chunked ? false : query.aggregateChunks;
                        queryExecutePromise = query.execute(queryChunk)
                    }
                    else
                        queryExecutePromise = WinJS.Promise.as({});
                    queryExecutePromise.then(function queryFinished(result) {
                        results[index] = result;
                        this._handleIntermediateResult(index, result.result);
                        this._continueSequentialExecution(index + 1, results, completeCallback, errorCallback)
                    }.bind(this), function queryFailed(error) {
                        errorCallback(error)
                    }.bind(this))
                }, _getQueryChunk: function _getQueryChunk(index) {
                    var executeChunk;
                    if (this.isLoadingFromStart || !this.chunked)
                        executeChunk = null;
                    else if (this.isValidChunk(this.currentChunk[index]))
                        executeChunk = this.currentChunk[index];
                    return executeChunk
                }, _startInnerExecute: function _startInnerExecute() {
                    var innerPromise;
                    var lowestProgressValue = MSE.Data.queryStatus.max;
                    var loadingFromStart = this.isLoadingFromStart;
                    if (!this.resultAugmentation && this.resultAugmentationFactory && this.resultAugmentationFactory.create)
                        this.resultAugmentation = this.resultAugmentationFactory.create();
                    var returnedProgress;
                    function handleCompleted(result) {
                        returnedProgress(MSE.Data.queryStatus.processingData);
                        var wrapped = new MS.Entertainment.Data.Property.MergedItem;
                        result.forEach(function appendItem(item) {
                            wrapped.source.push(WinJS.Binding.unwrap(item ? item.result : {}))
                        }, this);
                        return wrapped
                    }
                    {};
                    function handleError(error) {
                        var result = error;
                        if (Array.isArray(error))
                            for (var i = 0; i < error.length; i++)
                                if (error[i] && error[i].errorObject) {
                                    error = error[i].errorObject;
                                    break
                                }
                        return WinJS.Promise.wrapError(error || {})
                    }
                    {};
                    function initializePromise(completed, failed, progress) {
                        returnedProgress = progress;
                        if (this.executeSequentially)
                            innerPromise = this._startSequentialExecution();
                        else
                            innerPromise = this._startNonSequentialExecution();
                        innerPromise.then(handleCompleted.bind(this), handleError.bind(this)).then(function innerCompleted(wrapped) {
                            completed(wrapped)
                        }.bind(this), function innerFailed(error) {
                            failed(error)
                        }.bind(this))
                    }
                    {};
                    function cancelPromise() {
                        if (innerPromise) {
                            innerPromise.cancel();
                            innerPromise = null
                        }
                    }
                    {};
                    return new WinJS.Promise(initializePromise.bind(this), cancelPromise.bind(this))
                }, _calculateNextChunkKey: function _calculateNextChunkKey(result) {
                    var nextChunk = null;
                    var index = 0;
                    if (this.queries && this.queries.length && (!this.aggregateChunks || this._getChunkResultSize(result)))
                        this.queries.forEach(function(query) {
                            if (query && query.nextChunk) {
                                nextChunk = nextChunk || [];
                                nextChunk.length = index + 1;
                                nextChunk[index] = query.nextChunk
                            }
                            index++
                        }, this);
                    return nextChunk
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Data", {
        InnerGroupsQuery: MS.Entertainment.UI.Framework.define(function InnerGroupsQuery(innerQuery)
        {
            if (!innerQuery || !innerQuery.getGroupsAsync)
                throw new Error("Invalid argument passed to InnerGroupsQuery");
            this._innerQuery = innerQuery
        }, {
            _innerQuery: null, currentPage: null, previousPage: null, nextPage: null, dispose: function dispose() {
                    this._innerQuery = null
                }, setCursorPosition: function setCursorPosition(){}, execute: function execute() {
                    return this.executeAsync()
                }, executeAsync: function executeAsync() {
                    var result;
                    if (this._innerQuery)
                        result = this._innerQuery.getGroupsAsync().then(function extractJson(result) {
                            if (result && "json" in result)
                                result = result.json;
                            return result
                        });
                    else
                        result = WinJS.Promise.wrapError("InnerGroupsQuery has been disposed of");
                    return result
                }
        }), WrapperQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentQuery", function() {
                MSE.Data.AugmentQuery.prototype.constructor.call(this)
            }, {
                _innerQuery: null, _innerGroupsQuery: null, _innerQueryChunked: true, queryId: null, acquisitionData: null, groupsAugmentation: null, dispose: function dispose() {
                        MSE.Data.AugmentQuery.prototype.dispose.call(this);
                        this.releaseInnerQuery()
                    }, createInnerQuery: function createInnerQuery() {
                        return null
                    }, createGroupsQuery: function createGroupsQuery() {
                        var result = this._innerGroupsQuery;
                        var innerQuery;
                        if (!result) {
                            if (this.allowGroupHints)
                                innerQuery = this._getInnerQuery();
                            if (innerQuery && innerQuery.getGroupsAsync) {
                                result = new MSE.Data.WrapperQuery;
                                result.resultAugmentation = WinJS.Binding.unwrap(this.groupsAugmentation);
                                result.chunked = false;
                                result._innerQuery = new MSE.Data.InnerGroupsQuery(innerQuery)
                            }
                            this._innerGroupsQuery = result
                        }
                        return result
                    }, releaseInnerQuery: function releaseInnerQuery() {
                        if (this._innerQuery && this._innerQuery.dispose) {
                            this._innerQuery.dispose();
                            this._innerQuery = null
                        }
                        if (this._innerQuery && this._innerQuery.close) {
                            this._innerQuery.close();
                            this._innerQuery = null
                        }
                        if (this._innerGroupsQuery && this._innerGroupsQuery.dispose) {
                            this._innerGroupsQuery.dispose();
                            this._innerGroupsQuery = null
                        }
                        if (this._innerGroupsQuery && this._innerGroupsQuery.close) {
                            this._innerGroupsQuery.close();
                            this._innerGroupsQuery = null
                        }
                        this._onReleaseInnerQuery()
                    }, _onReleaseInnerQuery: function _onReleaseInnerQuery(){}, _parseInnerResult: function _parseInnerResult(result) {
                        if (result)
                            try {
                                return JSON.parse(result)
                            }
                            catch(error) {
                                logJsonFailure("WrapperQuery::_parseInnerResult has failed because JSON.parse failed.", error, result);
                                throw error;
                            }
                        else
                            throw new Error("WrapperQuery._parseInnerResult failed. Result was null or empty");
                    }, _parseInnerProgress: function _parseInnerProgress(result) {
                        var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                        eventProvider.traceServiceQuery_QueryReturn(this._innerQuery ? this._innerQuery.uri : String.empty);
                        return MSE.Data.queryStatus.processingData
                    }, _prepareQueryForInnerExecute: function _prepareQueryForInnerExecute(query){}, _startInnerExecute: function _startInnerExecute() {
                        if (this.isDisposed) {
                            MSE.Data.assert(false, "Attempting to execute a disposed wrapper query.");
                            return WinJS.Promise.wrapError(new Error("Attempting to execute a disposed wrapper query."))
                        }
                        var returnPromise;
                        var innerQuery = this._getInnerQuery();
                        return this._startInnerExecuteWork(innerQuery)
                    }, _startInnerExecuteWork: function _startInnerExecuteWork(innerQuery) {
                        if (!MS.Entertainment.Data.RandomAccessChunk.is(this.currentChunk) && this._innerQueryChunked)
                            innerQuery.currentPage = this.currentChunk;
                        else
                            innerQuery.currentPage = null;
                        var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                        eventProvider.traceServiceQuery_QueryStart(innerQuery.uri);
                        return (innerQuery.executeAsync) ? innerQuery.executeAsync() : innerQuery.execute()
                    }, _getInnerQuery: function _getInnerQuery() {
                        this._innerQuery = this._innerQuery || this.createInnerQuery();
                        this._prepareQueryForInnerExecute(this._innerQuery);
                        return this._innerQuery
                    }, _calculateNextChunkKey: function _calculateNextChunkKey(result) {
                        if (this._innerQuery && this._getChunkResultSize(result))
                            return this._innerQuery.nextPage;
                        else
                            return null
                    }, _calculatePreviousChunkKey: function _calculatePreviousChunkKey(result) {
                        if (this._innerQuery && this._getChunkResultSize(result))
                            return this._innerQuery.previousPage;
                        else
                            return null
                    }, _endInnerExecute: function _endInnerExecute(result) {
                        if (this._innerQuery) {
                            var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                            eventProvider.traceServiceQuery_ParseComplete(this._innerQuery.uri);
                            if (this._innerQueryChunked)
                                this.currentChunk = this._innerQuery.currentPage
                        }
                    }, _getResultAugmentation: function _getResultAugmentation() {
                        var resultAugmentation = MSE.Data.AugmentQuery.prototype._getResultAugmentation.call(this);
                        var expandedAugmentation = null;
                        if (this.queryId) {
                            expandedAugmentation = expandedAugmentation || {};
                            expandedAugmentation.queryId = this.queryId
                        }
                        if (this.acquisitionData) {
                            expandedAugmentation = expandedAugmentation || {};
                            expandedAugmentation.acquisitionData = this.acquisitionData
                        }
                        if (resultAugmentation && expandedAugmentation) {
                            resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyListResultAugmentation(resultAugmentation, expandedAugmentation);
                            resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyResultAugmentation(resultAugmentation, "item", expandedAugmentation);
                            resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyResultAugmentation(resultAugmentation, "itemsArray", expandedAugmentation)
                        }
                        return resultAugmentation
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data", {
        ServiceWrapperQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.WrapperQuery", function() {
            MSE.Data.WrapperQuery.prototype.constructor.call(this)
        }, {
            _shouldAuthenticate: false, _signInHandler: null, autoEncodeUri: true, useCache: null, useIfMatchCache: null, serviceType: 0, expirationTimeSeconds: 0, resourceURI: null, parameters: null, pluralizers: null, headers: null, postData: null, requestType: null, requireResponseData: true, _authenticationHeader: null, forceLowercaseJsonProperties: false, stampChunkInformation: false, dispose: function dispose() {
                    MSE.Data.WrapperQuery.prototype.dispose.call(this);
                    this._unregisterForSignInEvents()
                }, shouldAuthenticate: {
                    get: function() {
                        return this._shouldAuthenticate
                    }, set: function(value) {
                            if (this._shouldAuthenticate !== value) {
                                var oldValue = value;
                                this._shouldAuthenticate = value;
                                this.notify("shouldAuthenticate", value, oldValue);
                                this._unregisterForSignInEvents();
                                this._registerForSignInEvents()
                            }
                        }
                }, endpointSupportsAuthentication: {get: function get_endpointSupportsAuthentication() {
                        return true
                    }}, addAuthenticationHeader: {get: function get_authenticate() {
                        var signedIn = false;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn)) {
                            var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            signedIn = signInService.isSignedIn || (this.useApp2UserIfAvailable && signInService.isApp2UserAvailable)
                        }
                        return (this.shouldAuthenticate && this.endpointSupportsAuthentication && signedIn)
                    }}, autoUpdateItemFactory: {get: function get_autoUpdateItemFactory() {
                        return this.stampChunkInformation
                    }}, getResourceEndpointID: function getResourceEndpointID() {
                    MSE.Data.fail("Derived classes must define this function in order for authentication to work.");
                    return null
                }, getResourceEndpoint: function getResourceEndpoint() {
                    var endpoint = String.empty;
                    var endpointID = this.getResourceEndpointID();
                    if (endpointID)
                        endpoint = MS.Entertainment.Endpoint.load(endpointID);
                    return endpoint
                }, createResourceURI: function createResourceURI() {
                    return this.resourceURI
                }, createPostData: function createPostData() {
                    return WinJS.Binding.unwrap(this.postData)
                }, createParameters: function createParameters() {
                    return WinJS.Binding.unwrap(this.parameters)
                }, createHeaders: function createHeaders() {
                    return WinJS.Binding.unwrap(this.headers)
                }, _createAuthenticationHeader: function _createAuthenticationHeader() {
                    return WinJS.Binding.unwrap(this._authenticationHeader)
                }, hasAuthenticationHeader: function hasAuthenticationHeader() {
                    var header = this._createAuthenticationHeader();
                    return !!header && !!header.value
                }, createPluralizers: function createPluralizers() {
                    return this.pluralizers
                }, addHeader: function addHeader(key, value) {
                    if (!this.headers)
                        this.headers = {};
                    this.headers[key] = value
                }, createInnerQuery: function createInnerQuery() {
                    return new Microsoft.Entertainment.Queries.ServiceXMLQuery
                }, getResponseVersion: function getResponseVersion(result){}, _registerForSignInEvents: function _registerForSignInEvents() {
                    this._unregisterForSignInEvents();
                    if (this.shouldAuthenticate && this.endpointSupportsAuthentication && this.autoUpdateProperties && this.autoUpdateProperties.isSignedIn) {
                        var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        this._signInHandler = WinJS.Binding.bind(signInService, {isSignedIn: function(value, oldValue) {
                                if (oldValue !== undefined)
                                    this.notify("isSignedIn", value, oldValue)
                            }.bind(this)})
                    }
                }, _unregisterForSignInEvents: function _unregisterForSignInEvents() {
                    if (this._signInHandler) {
                        this._signInHandler.cancel();
                        this._signInHandler = null
                    }
                }, _addParameters: function _addParameters(query, parameters) {
                    var key;
                    var value;
                    if (parameters && query)
                        for (key in parameters)
                            if (parameters.hasOwnProperty(key)) {
                                value = parameters[key];
                                if (value || value === 0)
                                    query.addParameter(window.encodeURIComponent(key), window.encodeURIComponent(value).replace(/%2B/gi, "+"))
                            }
                }, _prepareQueryForInnerExecute: function _prepareQueryForInnerExecute(query) {
                    var pluralizers;
                    var parameters;
                    var key;
                    var value;
                    var uri;
                    uri = this.createResourceURI();
                    query.uri = this.autoEncodeUri ? window.encodeURI(uri) : uri;
                    query.serviceType = this.serviceType;
                    pluralizers = this.createPluralizers();
                    if (pluralizers)
                        query.pluralizationRules = pluralizers;
                    this._addParameters(query, this.createParameters());
                    var headers = this.createHeaders();
                    if (headers)
                        for (key in headers)
                            if (headers.hasOwnProperty(key)) {
                                value = headers[key];
                                if (value || value === 0)
                                    query.addHeader(key, value.toString())
                            }
                    var authenticationHeader = this._createAuthenticationHeader();
                    if (authenticationHeader)
                        query.addHeader(authenticationHeader.key, authenticationHeader.value.toString());
                    var postData = this.createPostData();
                    if (postData && postData.contentType && postData.data)
                        query.setPostData(postData.contentType, postData.data);
                    if (this.requestType)
                        query.requestType = this.requestType;
                    if (this.useCache !== null)
                        query.useCache = this.useCache;
                    if (this.expirationTimeSeconds !== 0)
                        query.expirationDate = new Date(Date.now() + (this.expirationTimeSeconds * 1000));
                    if (this.useIfMatchCache !== null)
                        query.useIfMatchCache = this.useIfMatchCache;
                    query.forceLowercaseJsonProperties = this.forceLowercaseJsonProperties;
                    this._registerForSignInEvents()
                }, _getAuthHeader: function _getAuthHeader() {
                    var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    var promise = signInService.getXToken(this.getResourceEndpointID());
                    return promise
                }, _preInnerExecute: function _preInnerExecute() {
                    var promise;
                    var signInService = null;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn))
                        signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    if (this.addAuthenticationHeader)
                        promise = this._getAuthHeader().then(function setAuthHeader(header) {
                            this._authenticationHeader = header
                        }.bind(this), function getAuthHeaderFailed(error) {
                            this._clearAuthentication();
                            return WinJS.Promise.wrapError(this._createError(error, "Invalid header for authenticated ServiceWrapperQuery"))
                        }.bind(this));
                    else
                        this._clearAuthentication();
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (configurationManager.service.enableTimeTravel && !promise && signInService)
                        if (this.serviceType === MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json)
                            promise = signInService.signIn().then(function success() {
                                return this._getAuthHeader().then(function setAuthHeader(header) {
                                        this._authenticationHeader = header
                                    }.bind(this), function getAuthHeaderFailed(error) {
                                        this._clearAuthentication();
                                        return WinJS.Promise.wrapError(this._createError(error, "Invalid header for authenticated ServiceWrapperQuery"))
                                    }.bind(this))
                            }.bind(this));
                        else
                            promise = signInService.getPassportTicket(MS.Entertainment.Utilities.SignIn.TicketType.MBI_SSL, MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_Passport), true, Microsoft.Entertainment.Util.SignInPromptType.doNotPrompt).then(function setHeader(ticket) {
                                this._authenticationHeader = {
                                    key: "Authorization", value: "WLID1.0 " + ticket
                                }
                            }.bind(this), function getHeaderFailed(error) {
                                return WinJS.Promise.wrapError(this._createError(error, "Invalid header for authenticated ServiceWrapperQuery"))
                            }.bind(this));
                    return WinJS.Promise.as(promise)
                }, _endInnerExecute: function _endInnerExecute(result) {
                    MS.Entertainment.Data.WrapperQuery.prototype._endInnerExecute.apply(this, arguments);
                    var version = this.getResponseVersion(result);
                    if (version && this.useIfMatchCache) {
                        var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        mediaStore.offlineDetailProvider.setIfMatchValueWithKeyAsync(this._innerQuery.uri, version).done(function setIfMatchValueWithKeyAsync_completed(){}, function setIfMatchValueWithKeyAsync_error() {
                            MSE.Data.assert(false, "Failed to write cache version for if-match query")
                        })
                    }
                }, _clearAuthentication: function _clearAuthentication() {
                    if (this._authenticationHeader)
                        this._authenticationHeader = {
                            key: this._authenticationHeader.key, value: String.empty
                        }
                }, _parseInnerResult: function _parseInnerResult(result) {
                    if (result && result.json)
                        try {
                            return JSON.parse(result.json)
                        }
                        catch(error) {
                            var uri = this._innerQuery && this._innerQuery.uri;
                            logJsonFailure("ServiceWrapperQuery::_parseInnerResult has failed because JSON.parse failed. Resource uri was \'" + uri + "\'", error, result && result.json);
                            throw error;
                        }
                    else if (this.requireResponseData)
                        throw new Error("ServiceWrapperQuery._parseInnerResult failed. Result was null or empty");
                    else
                        return WinJS.Promise.wrap({})
                }, _calculatePreviousChunkKey: function _calculatePreviousChunkKey(result) {
                    return MSE.Data.AugmentQuery.invalidPreviousChunk
                }, _preInsertChunk: function _preInsertChunk(destination, chunk) {
                    MS.Entertainment.Data.WrapperQuery.prototype._preInsertChunk.apply(this, arguments);
                    if (this.autoUpdateItemFactory && destination && destination.setItemFactory && chunk && chunk.itemFactory)
                        destination.setItemFactory(chunk.itemFactory)
                }, _getResultAugmentation: function _getResultAugmentation() {
                    var resultAugmentation = MSE.Data.WrapperQuery.prototype._getResultAugmentation.call(this);
                    var expandedAugmentation = null;
                    if (this.stampChunkInformation) {
                        expandedAugmentation = expandedAugmentation || {};
                        expandedAugmentation.chunkInformation = this._createChunkInformation()
                    }
                    if (resultAugmentation && expandedAugmentation) {
                        resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyListResultAugmentation(resultAugmentation, expandedAugmentation);
                        resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyResultAugmentation(resultAugmentation, "item", expandedAugmentation);
                        resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyResultAugmentation(resultAugmentation, "itemsArray", expandedAugmentation)
                    }
                    return resultAugmentation
                }, _createChunkInformation: function _createChunkInformation() {
                    return this.currentChunk
                }
        }, {
            ServiceTypes: {json: 1}, RequestTypes: {
                    head: 1, get: 2, post: 3, put: 4, deleteRequest: 5
                }, isServiceWrapperQuery: function isServiceWrapperQuery(object) {
                    return MS.Entertainment.Data.ServiceWrapperQuery.prototype.isPrototypeOf(object)
                }
        }), LibraryWrapperQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.WrapperQuery", function() {
                this.debugInstanceId = ++MSE.Data.DebugInstanceId;
                this._logQueryActions("Creation");
                MSE.Data.WrapperQuery.prototype.constructor.call(this);
                this._currentStateChangePromise = WinJS.Promise.wrap()
            }, {
                hasTotalCount: true, allowReset: false, _isLive: false, _isAttached: false, _queryEventHandlers: null, _pauseCount: 0, _pausedQuery: null, _currentStateChangePromise: null, isLive: {
                        get: function get_isLive() {
                            var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            return this._isLive && configurationManager.shell.uiRefresh
                        }, set: function set_isLive(value) {
                                if (value !== this._isLive) {
                                    if (this._isAttached) {
                                        MSE.Data.assert(!value, "Cannot set a query back to live after it has been run.");
                                        if (!value)
                                            this.releaseInnerQuery()
                                    }
                                    this._isLive = value
                                }
                            }
                    }, isPaused: {get: function get_isPaused() {
                            return this._pauseCount > 0
                        }}, pause: function pause(innerQuery) {
                        if (this.isDisposed)
                            return WinJS.Promise.wrap();
                        this._pauseCount++;
                        return this._commitPause(this._innerQuery)
                    }, _commitPause: function _commitPause(innerQuery) {
                        if (this.isDisposed)
                            return WinJS.Promise.wrap();
                        var promise;
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        if (configurationManager.shell.uiRefresh && innerQuery && this.isLive && this._pauseCount > 0) {
                            var queryPause = function queryPause() {
                                    var paused = false;
                                    if (innerQuery && innerQuery.pauseAsync && this.isLive)
                                        paused = innerQuery.pauseAsync();
                                    innerQuery = null;
                                    return paused
                                }.bind(this);
                            if (this._pausedQuery !== innerQuery) {
                                this._pausedQuery = innerQuery;
                                promise = this._currentStateChangePromise = this._currentStateChangePromise.then(queryPause, queryPause)
                            }
                            else
                                promise = this._currentStateChangePromise
                        }
                        return WinJS.Promise.as(promise)
                    }, unpause: function unpause() {
                        if (this.isDisposed)
                            return WinJS.Promise.wrap();
                        var promise;
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        this._pauseCount--;
                        if (configurationManager.shell.uiRefresh && this._pausedQuery && this._pauseCount === 0 && this.isLive) {
                            var pausedQuery = this._pausedQuery;
                            this._pausedQuery = null;
                            var queryResume = function queryResume() {
                                    var unpaused = false;
                                    if (pausedQuery && pausedQuery.resumeAsync && this.isLive)
                                        unpaused = pausedQuery.resumeAsync();
                                    pausedQuery = null;
                                    return unpaused
                                }.bind(this);
                            promise = this._currentStateChangePromise = this._currentStateChangePromise.then(queryResume, queryResume)
                        }
                        if (this._pauseCount < 0)
                            this._pauseCount = 0;
                        return WinJS.Promise.as(promise)
                    }, forceLiveRefresh: function forceLiveRefresh() {
                        var refreshPromise;
                        if (this.isLive && this._innerQuery && this._innerQuery.refreshAsync)
                            refreshPromise = this._innerQuery.refreshAsync();
                        return WinJS.Promise.as(refreshPromise)
                    }, loadChunk: function loadChunk(startIndex, countBefore, countAfter, destinationList) {
                        var endIndex = startIndex;
                        var originalStartIndex = startIndex;
                        destinationList = destinationList || true;
                        if (isNaN(startIndex))
                            throw new Error("loadChunk failed. startIndex is not a number: " + startIndex);
                        else if (startIndex < 0)
                            throw new Error("loadChunk failed. startIndex is out of range: " + startIndex);
                        else if (this.totalCount < 0)
                            throw new Error("loadChunk failed. totalCount is unknown, thus random access is not possible");
                        countBefore = (isNaN(countBefore) || countBefore < 0) ? 0 : countBefore;
                        countAfter = (isNaN(countAfter) || countAfter < 0) ? 0 : countAfter;
                        endIndex = startIndex + countAfter;
                        startIndex = Math.max(0, startIndex - countBefore);
                        this.currentChunk = new MS.Entertainment.Data.RandomAccessChunk(startIndex, endIndex - startIndex + 1);
                        this.nextChunk = MS.Entertainment.Data.AugmentQuery.invalidNextChunk;
                        this.previousChunk = MS.Entertainment.Data.AugmentQuery.invalidPreviousChunk;
                        return this._execute(destinationList).then(function(result) {
                                var list = this._getChunkDestination(this.lastChunkedResult);
                                list = (list) ? list.source : [];
                                return {
                                        items: list, offset: originalStartIndex - startIndex, totalCount: this.totalCount
                                    }
                            }.bind(this), function error() {
                                return {
                                        items: [], offset: 0, error: true, totalCount: this.totalCount
                                    }
                            }.bind(this))
                    }, execute: function execute(cookie) {
                        this.releaseInnerQuery();
                        return MSE.Data.WrapperQuery.prototype.execute.apply(this, arguments)
                    }, _onReleaseInnerQuery: function _onReleaseInnerQuery() {
                        if (this._pausedQuery) {
                            this._pauseCount = 0;
                            this._pausedQuery = null
                        }
                        this._isAttached = false;
                        this._cancelQueryEventHandlers()
                    }, _parseInnerResult: function _parseInnerResult(result) {
                        if (result) {
                            var jsonString;
                            if (typeof result === "string")
                                jsonString = result;
                            else if (typeof result === "object" && result.json)
                                jsonString = result.json;
                            try {
                                return JSON.parse(jsonString)
                            }
                            catch(error) {
                                logJsonFailure("LibraryWrapperQuery::_parseInnerResult has failed because JSON.parse failed.", error, jsonString);
                                throw error;
                            }
                        }
                        throw new Error("LibraryWrapperQuery._parseInnerResult failed.");
                    }, _prepareQueryForInnerExecute: function _prepareQueryForInnerExecute(innerQuery) {
                        if (MS.Entertainment.Data.RandomAccessChunk.is(this.currentChunk)) {
                            innerQuery.pageSize = this.currentChunk.count;
                            innerQuery.setCursorPosition(this.currentChunk.startIndex)
                        }
                        else {
                            innerQuery.pageSize = this.chunkSize;
                            innerQuery.setCursorPosition(0)
                        }
                        innerQuery.groupsEnabled = this.allowGroupHints;
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        if (configurationManager.shell.uiRefresh && !this._isAttached) {
                            this._cancelQueryEventHandlers();
                            if (this.isLive)
                                this._queryEventHandlers = MS.Entertainment.Utilities.addEvents(innerQuery, {querychanged: this._resultChanged.bind(this)});
                            else if (innerQuery.dispose)
                                innerQuery.dispose();
                            else if (innerQuery.close)
                                innerQuery.close();
                            this._isAttached = true
                        }
                    }, _startInnerExecuteWork: function _startInnerExecuteWork(innerQuery) {
                        var promise = MSE.Data.WrapperQuery.prototype._startInnerExecuteWork.call(this, innerQuery);
                        if (this.isPaused)
                            this._commitPause(innerQuery);
                        return promise
                    }, _cancelQueryEventHandlers: function _cancelQueryEventHandlers() {
                        if (this._queryEventHandlers) {
                            this._queryEventHandlers.cancel();
                            this._queryEventHandlers = null
                        }
                    }, _resultChanged: function _resultChanged(args) {
                        if (args && args.target !== this._innerQuery)
                            return;
                        MSE.Data.assert(args && args.json, "Invalid args given to _resultsChanged");
                        var result;
                        var changes;
                        var maxChanges = 300;
                        var totalCount = NaN;
                        if (this.chunkDestination) {
                            try {
                                if (args)
                                    result = JSON.parse(args.json);
                                else
                                    result = {}
                            }
                            catch(error) {
                                logJsonFailure("LibraryWrapperQuery::_resultsChanged has failed because JSON.parse failed.", error, args && args.json);
                                result = {}
                            }
                            if (result.TotalCount !== null && !isNaN(result.TotalCount))
                                totalCount = this.totalCount = result.TotalCount;
                            changes = result.changes || [];
                            if (changes.length > maxChanges && this.allowReset)
                                this.dispatchEvent(MS.Entertainment.Data.chunkerEvents.reset, {
                                    sender: this, totalCount: totalCount
                                });
                            else
                                this.dispatchEvent(MS.Entertainment.Data.chunkerEvents.batchChange, {
                                    sender: this, changes: changes, totalCount: totalCount
                                })
                        }
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data", {JSonWrapperQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentQuery", function() {
            MSE.Data.AugmentQuery.prototype.constructor.call(this)
        }, {
            _innerQuery: null, headers: {}, createResourceUri: function createResourceUri() {
                    throw new Error("createResourceUri is not defined");
                }, _parseInnerResult: function _parseInnerResult(result) {
                    if (result && result.response)
                        try {
                            return JSON.parse(result.response)
                        }
                        catch(error) {
                            logJsonFailure("JSonWrapperQuery::_parseInnerResult has failed because JSON.parse failed.", error, result && result.response);
                            throw error;
                        }
                    else
                        throw new Error("response was null or empty. status code: " + (result ? result.status : "null"));
                }, _parseInnerProgress: function _parseInnerProgress(result) {
                    var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                    eventProvider.traceServiceQuery_QueryReturn(this.currentChunk);
                    return MSE.Data.queryStatus.processingData
                }, _startInnerExecute: function _startInnerExecute() {
                    var that = this;
                    var returnPromise;
                    if (!this.currentChunk)
                        this.currentChunk = this.createResourceUri();
                    if (this.currentChunk)
                        returnPromise = that._xmlHttpRequest({
                            url: this.currentChunk, async: true, headers: WinJS.Binding.unwrap(this.headers)
                        });
                    else
                        returnPromise = WinJS.Promise.WrapError(this);
                    var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                    eventProvider.traceServiceQuery_QueryStart(this.currentChunk);
                    return returnPromise
                }, _calculateNextChunkKey: function _calculateNextChunkKey(result) {
                    if (result)
                        return this._createUriFromChunkKey(result.nextPage);
                    else
                        return null
                }, _calculatePreviousChunkKey: function _calculatePreviousChunkKey(result) {
                    if (result)
                        return this._createUriFromChunkKey(result.previousPage);
                    else
                        return null
                }, _createUriFromChunkKey: function _createUriFromChunkKey(chunkKey) {
                    var uri = null;
                    var baseUrl = this.createResourceUri();
                    var expression = /\?/;
                    if (expression.test(baseUrl))
                        baseUrl = baseUrl + "&";
                    else
                        baseUrl = baseUrl + "?";
                    if (chunkKey)
                        uri = baseUrl + chunkKey;
                    return uri
                }, _xmlHttpRequest: function _xmlHttpRequest(values) {
                    return MSE.ServiceLocator.getService(MSE.Services.xhr).execute(values)
                }, _endInnerExecute: function _endInnerExecute(result) {
                    var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                    eventProvider.traceServiceQuery_ParseComplete(this.currentChunk)
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Data", {EDSWrapperQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.ServiceWrapperQuery", function edsServiceWrapperQuery() {
            MS.Entertainment.Data.ServiceWrapperQuery.prototype.constructor.call(this);
            this.shouldAuthenticate = true
        }, {
            serviceType: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json
            }), requestFields: null, targetDeviceType: null, forceSecureEndpoint: false, useApp2UserIfAvailable: false, enabledImpressionGuid: false, impressionGuid: null, relevancyTrackingContent: null, includeContentRestrictionHeader: false, _requestFieldsToken: null, _anonymousClientIdHeader: null, _impressionGuids: null, _retryCount: 0, dispose: function dispose() {
                    MS.Entertainment.Data.ServiceWrapperQuery.prototype.dispose.call(this);
                    if (this._impressionGuids)
                        this._impressionGuids.splice(0)
                }, autoUpdateOnSignIn: {
                    get: function() {
                        return this.autoUpdateProperties ? !!this.autoUpdateProperties.isSignedIn : false
                    }, set: function(value) {
                            this.autoUpdateProperties = this.autoUpdateProperties || {};
                            this.autoUpdateProperties.isSignedIn = value
                        }
                }, autoUpdateItemFactory: {get: function get_autoUpdateItemFactory() {
                        return this.stampChunkInformation || this.enabledImpressionGuid
                    }}, endpointSupportsAuthentication: {get: function get_endpointSupportsAuthentication() {
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        var secureEDSEndpointsEnabled = this.forceSecureEndpoint || featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.secureEDSEndpointsEnabled);
                        if (!MS.Entertainment.Data.EDSWrapperQuery._cachedIsHttps)
                            MS.Entertainment.Data.EDSWrapperQuery._cachedIsHttps = {};
                        var authenticatedEndpointID = this.getAuthenticatedResourceEndpointID();
                        if (!MS.Entertainment.Data.EDSWrapperQuery._cachedIsHttps[authenticatedEndpointID])
                            MS.Entertainment.Data.EDSWrapperQuery._cachedIsHttps[authenticatedEndpointID] = /^https:\/\//i.test(MS.Entertainment.Endpoint.load(authenticatedEndpointID));
                        return secureEDSEndpointsEnabled && MS.Entertainment.Data.EDSWrapperQuery._cachedIsHttps[authenticatedEndpointID]
                    }}, useAuthenticatedEndpoint: {get: function get_useAuthenticatedEndpoint() {
                        var useAuthenticatedEndpoint = false;
                        var signedInOrOffline = false;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn)) {
                            var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            signedInOrOffline = signInService.isSignedIn || (this.useApp2UserIfAvailable && signInService.isApp2UserAvailable)
                        }
                        if (!signedInOrOffline && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.uiState) && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.networkStatus)) {
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            var networkStatus = uiStateService.networkStatus;
                            signedInOrOffline = networkStatus !== MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unknown && networkStatus !== MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unrestricted && networkStatus !== MS.Entertainment.UI.NetworkStatusService.NetworkStatus.throttled
                        }
                        return signedInOrOffline && this.endpointSupportsAuthentication && this.shouldAuthenticate
                    }}, addAuthenticationHeader: {get: function get_authenticate() {
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        var signedIn = false;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn)) {
                            var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            signedIn = signInService.isSignedIn || (this.useApp2UserIfAvailable && signInService.isApp2UserAvailable)
                        }
                        return configurationManager.service.enableTimeTravel || (this.useAuthenticatedEndpoint && signedIn)
                    }}, edsHeaders: null, edsParameters: null, createRequestFields: function createRequestFields() {
                    return WinJS.Binding.unwrap(this.requestFields)
                }, createTargetDeviceType: function createTargetDeviceType() {
                    return this.targetDeviceType
                }, createEDSHeaders: function createEDSHeaders() {
                    var edsHeaders = WinJS.Binding.unwrap(this.edsHeaders);
                    if (!edsHeaders)
                        edsHeaders = {
                            Accept: "application/json", "x-xbl-contract-version": "3.2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion, "x-xbl-build-version": "current"
                        };
                    if (this.includeContentRestrictionHeader && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.contentRestrictionService)) {
                        var contentRestrictionHeaderName = "x-xbl-contentRestrictions";
                        var contentRestrictionHeaderValue = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionService).getContentRestrictionHeader();
                        if (edsHeaders[contentRestrictionHeaderName] && !contentRestrictionHeaderValue)
                            delete edsHeaders[contentRestrictionHeaderName];
                        else if (contentRestrictionHeaderValue)
                            edsHeaders[contentRestrictionHeaderName] = contentRestrictionHeaderValue
                    }
                    return edsHeaders
                }, createEDSParameters: function createEDSParameters() {
                    var edsParameters = WinJS.Binding.unwrap(this.edsParameters);
                    if (this.includeContentRestrictionHeader && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.contentRestrictionService)) {
                        var contentRestrictionParameterName = "contentRestrictions";
                        var contentRestrictionParameterValue = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionService).getContentRestrictionUrlParameter();
                        edsParameters = edsParameters || {};
                        if (edsParameters[contentRestrictionParameterName] && !contentRestrictionParameterValue)
                            delete edsParameters[contentRestrictionParameterName];
                        else if (contentRestrictionParameterValue)
                            edsParameters[contentRestrictionParameterName] = contentRestrictionParameterValue
                    }
                    return edsParameters
                }, getHeaderDeviceType: function getHeaderDeviceType() {
                    return MS.Entertainment.Utilities.defaultEdsHeaderDeviceTypeFromApp
                }, getAuthenticatedResourceEndpointID: function getAuthenticatedResourceEndpointID() {
                    return MS.Entertainment.Endpoint.id.seid_EDSServiceAuth
                }, getResourceEndpointID: function getResourceEndpointID() {
                    var endpointID = null;
                    if (this.useAuthenticatedEndpoint)
                        endpointID = MS.Entertainment.Endpoint.id.seid_EDSServiceAuth;
                    else
                        endpointID = MS.Entertainment.Endpoint.id.seid_EDSServiceAnon;
                    return endpointID
                }, getResourceEndpoint: function getResourceEndpoint(edsEndpointType) {
                    var endpoint = MS.Entertainment.Data.ServiceWrapperQuery.prototype.getResourceEndpoint.call(this);
                    if (endpoint && edsEndpointType)
                        endpoint = endpoint + "/" + edsEndpointType;
                    return endpoint
                }, _clearAnonymousClientIdHeader: function _clearAnonymousClientIdHeader() {
                    if (this._anonymousClientIdHeader)
                        this._anonymousClientIdHeader = {
                            key: MS.Entertainment.Data.EDSWrapperQuery.clientIdHeader, value: String.empty
                        }
                }, _createAnonymousClientIdHeader: function _createAnonymousClientIdHeader() {
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var visitorId = configurationManager.telemetry.visitorId;
                    if (visitorId)
                        this._anonymousClientIdHeader = {
                            key: MS.Entertainment.Data.EDSWrapperQuery.clientIdHeader, value: visitorId
                        };
                    else
                        this._clearAnonymousClientIdHeader()
                }, _startExecute: function _startExecute() {
                    this._retryCount = 0
                }, _preInnerExecute: function _preInnerExecute() {
                    var basePromise = MS.Entertainment.Data.ServiceWrapperQuery.prototype._preInnerExecute.apply(this, arguments);
                    var returnPromise = basePromise;
                    if (this.includeContentRestrictionHeader && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.contentRestrictionService)) {
                        var contentRestrictionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionService);
                        returnPromise = returnPromise.then(function basePromiseCompleted() {
                            return contentRestrictionService.getBrowsePolicyUpdatePromise()
                        })
                    }
                    this._requestFieldsToken = null;
                    var fieldString;
                    var requestFields = this.createRequestFields();
                    MS.Entertainment.Data.assert(Array.isArray(requestFields), "createRequestFields() did not return a valid set of request fields. We must have a valid set of request fields before executing an EDS query. If it is known that the query doesn't except a fieldsToken, createRequestFields() should return an empty array.");
                    if (Array.isArray(requestFields) && requestFields.length) {
                        fieldString = requestFields.join(".");
                        returnPromise = returnPromise.then(function fetchFields() {
                            return MS.Entertainment.Data.EDSWrapperQuery.fetchRequestFields(fieldString).then(function setRequestFields(requestFieldsToken) {
                                    this._requestFieldsToken = requestFieldsToken
                                }.bind(this))
                        }.bind(this))
                    }
                    return returnPromise
                }, _prepareQueryForInnerExecute: function _prepareQueryForInnerExecute(query) {
                    MS.Entertainment.Data.ServiceWrapperQuery.prototype._prepareQueryForInnerExecute.apply(this, arguments);
                    var value;
                    if (!isNaN(this.chunkSize) && this.chunkSize > 0)
                        query.addParameter(window.encodeURIComponent(MS.Entertainment.Data.EDSWrapperQuery.maxItemsParameter), window.encodeURIComponent(this.chunkSize));
                    if (this._requestFieldsToken)
                        query.addParameter(window.encodeURIComponent(MS.Entertainment.Data.EDSWrapperQuery.fieldsParameter), window.encodeURIComponent(this._requestFieldsToken));
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (configurationManager.service.enableTimeTravel)
                        query.addParameter(window.encodeURIComponent(MS.Entertainment.Data.EDSWrapperQuery.timeTravelInstantParameter), window.encodeURIComponent(configurationManager.service.timeTravelStartDate));
                    var targetDeviceType = this.createTargetDeviceType();
                    if (targetDeviceType)
                        query.addParameter(MS.Entertainment.Data.EDSWrapperQuery.targetDevicesParameter, targetDeviceType);
                    var headers = this.createEDSHeaders();
                    if (headers)
                        for (var key in headers)
                            if (headers.hasOwnProperty(key)) {
                                value = headers[key];
                                if (value || value === 0)
                                    query.addHeader(key, value.toString())
                            }
                    this._addParameters(query, this.createEDSParameters());
                    if (this.hasAuthenticationHeader())
                        this._clearAnonymousClientIdHeader();
                    else
                        this._createAnonymousClientIdHeader();
                    if (this._anonymousClientIdHeader)
                        query.addHeader(this._anonymousClientIdHeader.key, this._anonymousClientIdHeader.value.toString());
                    if (this.impressionGuid) {
                        query.addHeader(MS.Entertainment.Data.EDSWrapperQuery.impressionGuidHeader, this.impressionGuid);
                        if (this.relevancyTrackingContent && this.relevancyTrackingContent.kValue && this.relevancyTrackingContent.kValueNamespace) {
                            query.addHeader(MS.Entertainment.Data.EDSWrapperQuery.kValueHeader, this.relevancyTrackingContent.kValue);
                            query.addHeader(MS.Entertainment.Data.EDSWrapperQuery.kValueNamespaceHeader, this.relevancyTrackingContent.kValueNamespace)
                        }
                    }
                    else
                        query.removeHeader(MS.Entertainment.Data.EDSWrapperQuery.impressionGuidHeader)
                }, _getResultAugmentation: function _getResultAugmentation() {
                    var resultAugmentation = MSE.Data.ServiceWrapperQuery.prototype._getResultAugmentation.call(this);
                    var expandedAugmentation = null;
                    if (this.enabledImpressionGuid)
                        expandedAugmentation = {impressionGuid: this._createNextImpressionGuidCallback()};
                    if (this.acquisitionData) {
                        expandedAugmentation = expandedAugmentation || {};
                        expandedAugmentation.acquisitionData = this.acquisitionData
                    }
                    if (resultAugmentation && expandedAugmentation) {
                        resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyListResultAugmentation(resultAugmentation, expandedAugmentation);
                        resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyResultAugmentation(resultAugmentation, "item", expandedAugmentation);
                        resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyResultAugmentation(resultAugmentation, "itemsArray", expandedAugmentation)
                    }
                    return resultAugmentation
                }, _initializeImpressionGuids: function _initializeImpressionGuids() {
                    if (!this._disposed && !this._impressionGuids && this.enabledImpressionGuid)
                        this._impressionGuids = []
                }, _createNextImpressionGuidCallback: function _createNextImpressionGuidCallback() {
                    this._initializeImpressionGuids();
                    var impressionGuids = this._impressionGuids;
                    var index = impressionGuids.length;
                    var propertyValue = MS.Entertainment.Data.Property.convert(String.empty, function getImpressionGuid() {
                            return impressionGuids ? impressionGuids[index] : null
                        });
                    propertyValue.override = true;
                    return propertyValue
                }, _retryInnerExecute: function _retryInnerExecute(result, error) {
                    var retry = false;
                    if (result && result.responseInfo === MS.Entertainment.Data.EDSWrapperQuery.responseInfo.tryAgain && this._retryCount < MS.Entertainment.Data.EDSWrapperQuery._maxRetries) {
                        this._retryCount++;
                        retry = true
                    }
                    return retry
                }, _endInnerExecute: function _endInnerExecute(result) {
                    MS.Entertainment.Data.ServiceWrapperQuery.prototype._endInnerExecute.apply(this, arguments);
                    this._initializeImpressionGuids();
                    if (this._impressionGuids)
                        this._impressionGuids.push(result ? result.impressionGuid : null)
                }
        }, {
            requestFieldsNotNeeded: [], _cachedIsHttps: null, _cachedFieldTokens: {}, _maxRetries: 3, _currentVersion: null, clientType: {get: function get_clientType() {
                        return "X13"
                    }}, currentVersion: {get: function get_currentVersion() {
                        if (!MS.Entertainment.Data.EDSWrapperQuery._currentVersion) {
                            var currentPackage = Windows.ApplicationModel.Package.current;
                            var currentVersion = currentPackage && currentPackage.id && currentPackage.id.version;
                            if (currentVersion)
                                MS.Entertainment.Data.EDSWrapperQuery._currentVersion = currentVersion.major + "." + currentVersion.minor + "." + currentVersion.build + "." + currentVersion.revision
                        }
                        return MS.Entertainment.Data.EDSWrapperQuery._currentVersion
                    }}, fetchRequestFields: function fetchRequestFields(fieldString) {
                    var returnPromise = null;
                    if (MS.Entertainment.Data.EDSWrapperQuery._cachedFieldTokens[fieldString])
                        returnPromise = WinJS.Promise.as(MS.Entertainment.Data.EDSWrapperQuery._cachedFieldTokens[fieldString]);
                    else {
                        var query = new MS.Entertainment.Data.EDSFieldQuery;
                        query.fields = fieldString;
                        returnPromise = query.execute().then(function cacheQueryResult(completedQuery) {
                            MS.Entertainment.Data.EDSWrapperQuery._cachedFieldTokens[fieldString] = completedQuery.result.fields;
                            return completedQuery.result.fields
                        })
                    }
                    return returnPromise
                }, maxItemsParameter: "maxItems", fieldsParameter: "fields", targetDevicesParameter: "targetDevices", timeTravelInstantParameter: "currentTime", clientIdHeader: "x-fd-client", impressionGuidHeader: "x-xbl-ig", kValueHeader: "x-xbl-kvalue", kValueNamespaceHeader: "x-xbl-kvalue-namespace", responseInfo: {tryAgain: "TryAgain"}
        })});
    WinJS.Namespace.define("MS.Entertainment.Data", {EDSFieldQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.EDSWrapperQuery", function edsFieldQuery() {
            MS.Entertainment.Data.EDSWrapperQuery.prototype.constructor.call(this)
        }, {
            fields: null, requestFields: MS.Entertainment.UI.Framework.lazyDefine(function() {
                    return MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded
                }), chunkSize: 0, createResourceURI: function() {
                    return this.getResourceEndpoint(MS.Entertainment.Data.Query.edsEndpointType.fields)
                }, createParameters: function createParameters() {
                    return {desired: this.fields}
                }, resultAugmentation: MS.Entertainment.UI.Framework.lazyDefine(function() {
                    return MS.Entertainment.Data.define(null, {fields: MS.Entertainment.Data.Property.alias("Fields", null)})
                })
        })});
    WinJS.Namespace.define("MS.Entertainment.Data", {
        BrowseDetailQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AggregateQuery", function browseDetailQuery() {
            MS.Entertainment.Data.AggregateQuery.prototype.constructor.apply(this, arguments);
            this.queries.length = 2
        }, {
            browseConstructor: null, detailConstructor: null, executeSequentially: {
                    get: function() {
                        var sequentially = true;
                        if (this.detail && MS.Entertainment.Data.Query && MS.Entertainment.Data.Query.edsIdType && (!this.detail.idType || this.detail.idType === MS.Entertainment.Data.Query.edsIdType.canonical))
                            sequentially = false;
                        return sequentially
                    }, set: function(value) {
                            MSE.Data.fail("Shouldn't set executeSequentially on a BrowseDetailQuery.")
                        }
                }, chunked: {
                    get: function() {
                        return false
                    }, set: function(value) {
                            MSE.Data.fail("Shouldn't set chunked on a BrowseDetailQuery.")
                        }
                }, browse: {get: function() {
                        if (!this.browseConstructor)
                            return null;
                        if (!this.queries[1])
                            this.queries[1] = new this.browseConstructor;
                        return this.queries[1]
                    }}, detail: {get: function() {
                        if (!this.detailConstructor)
                            return null;
                        if (!this.queries[0])
                            this.queries[0] = new this.detailConstructor;
                        return this.queries[0]
                    }}, impressionGuid: {
                    get: function getImpressionGuid() {
                        return this.browse ? this.browse.impressionGuid : null
                    }, set: function setImpressionGuid(value) {
                            if (this.browse && "impressionGuid" in this.browse)
                                this.browse.impressionGuid = value;
                            if (this.detail && "impressionGuid" in this.detail)
                                this.detail.impressionGuid = value
                        }
                }, relevancyTrackingContent: {
                    get: function getRelevancyTrackingContent() {
                        return this.detail ? this.detail.relevancyTrackingContent : null
                    }, set: function setRelevancyTrackingContent(value) {
                            if (this.detail && "relevancyTrackingContent" in this.detail)
                                this.detail.relevancyTrackingContent = value
                        }
                }, _preInnerExecute: function _preInnerExecute() {
                    var browseQuery = this.browse;
                    var detailsQuery = this.detail;
                    return WinJS.Promise.as()
                }, _handleIntermediateResult: function _handleIntermediateResult(sourceIndex, sourceResult) {
                    if (sourceIndex === 0 && sourceResult.item && (sourceResult.item.canonicalId || sourceResult.item.serviceId) && this.browse) {
                        this.browse.impressionGuid = sourceResult.item.impressionGuid;
                        this.browse.id = sourceResult.item.canonicalId || sourceResult.item.serviceId;
                        this.browse.idType = sourceResult.item.canonicalId ? MS.Entertainment.Data.Query.edsIdType.canonical : MS.Entertainment.Data.Query.edsIdType.zuneCatalog
                    }
                }
        }, {mixAugmentation: function mixAugmentation(browseAugmentation, detailAugmentation) {
                var augmentations = {};
                augmentations["source[0]"] = detailAugmentation;
                augmentations["source[1]"] = browseAugmentation;
                return MS.Entertainment.Data.mix(augmentations)
            }}), AugmentationWrapperQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.MainQuery", function AugmentationWrapperQuery(query) {
                MSE.Data.MainQuery.prototype.constructor.apply(this, arguments);
                this.query = query
            }, {
                _query: null, _queryNotify: null, _queryEvents: null, autoDisposeQuery: true, query: {
                        get: function() {
                            return this._query
                        }, set: function(value) {
                                if (this.value !== this._query) {
                                    if (this._query) {
                                        this._query.notify = this._queryNotify;
                                        this._queryNotify = null
                                    }
                                    if (this._queryEvents) {
                                        this._queryEvents.cancel();
                                        this._queryEvents = null
                                    }
                                    this._query = value;
                                    if (this._query) {
                                        this._queryNotify = this._query.notify;
                                        this._query.notify = this._notifyProxy.bind(this);
                                        this._queryEvents = MS.Entertainment.Utilities.addEvents(this._query, {resultChanged: this._queryResultChanged.bind(this)})
                                    }
                                }
                            }
                    }, clearResultOnFailure: {
                        get: function() {
                            return this.query ? this.query.clearResultOnFailure : false
                        }, set: function(value) {
                                if (this.query)
                                    this.query.clearResultOnFailure = value
                            }
                    }, chunkDestination: {
                        get: function get_chunkDesination() {
                            return this.query ? this.query.chunkDestination : null
                        }, set: function set_chunkDesination(value) {
                                if (this.query)
                                    this.query.chunkDestination = value
                            }
                    }, enabled: {
                        get: function() {
                            return this.query ? this.query.enabled : false
                        }, set: function(value) {
                                if (this.query)
                                    this.query.enabled = value
                            }
                    }, status: {
                        get: function() {
                            return this.query ? this.query.status : MSE.Data.queryStatus.idle
                        }, set: function(value) {
                                if (this.query)
                                    this.query.status = value
                            }
                    }, cookie: {
                        get: function() {
                            return this.query ? this.query.cookie : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.cookie = value
                            }
                    }, errorCode: {
                        get: function() {
                            return this.query ? this.query.errorCode : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.errorCode = value
                            }
                    }, errorObject: {
                        get: function() {
                            return this.query ? this.query.errorObject : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.errorObject = value
                            }
                    }, result: {
                        get: function() {
                            return this.query ? this.query.result : null
                        }, set: function(value) {
                                if (this.query && this.query.result)
                                    this.query.result = value
                            }
                    }, totalCount: {
                        get: function() {
                            return this.query ? this.query.totalCount : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.totalCount = value
                            }
                    }, impressionGuid: {
                        get: function getImpressionGuid() {
                            return this.query ? this.query.impressionGuid : null
                        }, set: function setImpressionGuid(value) {
                                if (this.query && "impressionGuid" in this.query)
                                    this.query.impressionGuid = value
                            }
                    }, acquisitionData: {
                        get: function() {
                            return this.query ? this.query.acquisitionData : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.acquisitionData = value
                            }
                    }, lastChunkedResult: {
                        get: function() {
                            return this.query ? this.query.lastChunkedResult : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.lastChunkedResult = value
                            }
                    }, resultFactory: {
                        get: function() {
                            return this.query ? this.query.resultFactory : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.resultFactory = value
                            }
                    }, resultAugmentation: {
                        get: function() {
                            return this.query ? this.query.resultAugmentation : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.resultAugmentation = value
                            }
                    }, aggregateChunks: {
                        get: function() {
                            return this.query ? this.query.aggregateChunks : false
                        }, set: function(value) {
                                if (this.query)
                                    this.query.aggregateChunks = value
                            }
                    }, chunked: {
                        get: function() {
                            return this.query ? this.query.chunked : false
                        }, set: function(value) {
                                if (this.query)
                                    this.query.chunked = value
                            }
                    }, chunkSize: {
                        get: function() {
                            return this.query ? this.query.chunkSize : 0
                        }, set: function(value) {
                                if (this.query)
                                    this.query.chunkSize = value
                            }
                    }, currentChunk: {
                        get: function() {
                            return this.query ? this.query.currentChunk : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.currentChunk = value
                            }
                    }, nextChunk: {
                        get: function() {
                            return this.query ? this.query.nextChunk : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.nextChunk = value
                            }
                    }, previousChunk: {
                        get: function() {
                            return this.query ? this.query.previousChunk : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.previousChunk = value
                            }
                    }, hasNextChunk: {get: function() {
                            return this.query ? this.query.hasNextChunk : null
                        }}, hasPreviousChunk: {get: function() {
                            return this.query ? this.query.hasPreviousChunk : null
                        }}, isLoadingFromStart: {get: function() {
                            return this.query ? this.query.isLoadingFromStart : null
                        }}, isDisposed: {get: function() {
                            return this.query ? this.query.isDisposed : false
                        }}, dispose: function dispose() {
                        if (this.query && this.autoDisposeQuery) {
                            this.query.dispose();
                            this.query = null
                        }
                        if (this._queryEvents) {
                            this._queryEvents.cancel();
                            this._queryEvents = null
                        }
                    }, execute: function execute(cookie) {
                        var result;
                        if (this.query)
                            result = this.query.execute(cookie);
                        else
                            result = WinJS.Promise.wrapError(new Error("Invalid state for executing. The query property was not set to a valid value."));
                        return result
                    }, loadPreviousChunk: function loadPreviousChunk() {
                        var result;
                        if (this.query)
                            result = this.query.loadPreviousChunk();
                        else
                            result = WinJS.Promise.wrapError(new Error("Invalid state for loading previous chunk. The query property was not set to a valid value."));
                        return result
                    }, loadNextChunk: function loadNextChunk() {
                        var result;
                        if (this.query)
                            result = this.query.loadNextChunk();
                        else
                            result = WinJS.Promise.wrapError(new Error("Invalid state for loading next chunk. The query property was not set to a valid value."));
                        return result
                    }, isValidChunk: function isValidChunk(chunk) {
                        var result;
                        if (this.query)
                            result = this.query.isValidChunk(chunk);
                        else
                            result = false;
                        return result
                    }, _notifyProxy: function _notifyProxy(name, value, oldValue) {
                        if (this._queryNotify && this.query)
                            this._queryNotify.apply(this.query, arguments);
                        this.notify(name, value, oldValue)
                    }, _queryResultChanged: function _queryResultChanged(args) {
                        if (args && args.detail)
                            this.dispatchEvent(MS.Entertainment.Data.MainQuery.events.resultChanged, {
                                sender: this, result: args.detail.result, totalCount: args.detail.totalCount, error: args.detail.error
                            })
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data", {
        DebugInstanceId: 0, PlaybackQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentationWrapperQuery", function PlaybackQuery(query) {
                MSE.Data.AugmentationWrapperQuery.prototype.constructor.call(this, query);
                this.debugInstanceId = ++MS.Entertainment.Data.DebugInstanceId;
                this._logQueryActions("Creation");
                query.debugInstanceId = this.debugInstanceId
            }, {
                _playbackSessionBindings: null, _hasStarted: false, _playbackOptions: null, _onLastTrackPromise: null, aggregateChunks: {
                        get: function() {
                            return false
                        }, set: function(value){}
                    }, chunked: {
                        get: function() {
                            return false
                        }, set: function(value){}
                    }, dispose: function dispose() {
                        if (this._onLastTrackPromise) {
                            this._onLastTrackPromise.cancel();
                            this._onLastTrackPromise = null
                        }
                        MS.Entertainment.Platform.Playback.Etw.traceString("Disposing PlaybackQuery id=" + this.debugInstanceId + ":" + (this.query ? this.query.id : "null"));
                        MSE.Data.AugmentationWrapperQuery.prototype.dispose.apply(this);
                        this._unbindPrimaryPlaybackSession();
                        this._playbackOptions = null
                    }, execute: function execute(cookie) {
                        if (this.isDisposed)
                            return;
                        this._hasStarted = false;
                        this._playbackOptions = this._getPlaybackOptions();
                        this._prepareInnerQuery();
                        var result = MSE.Data.AugmentationWrapperQuery.prototype.execute.call(this, cookie);
                        return result.then(function executeCompleted(promiseResult) {
                                this._bindPrimaryPlaybackSession();
                                return promiseResult
                            }.bind(this))
                    }, _loadNextChunk: function _loadNextChunk() {
                        if (this.isDisposed)
                            return WinJS.Promise.as();
                        this._prepareInnerQuery();
                        var result = MSE.Data.AugmentationWrapperQuery.prototype.loadNextChunk.call(this);
                        return result.then(function(promiseResult) {
                                var list = this._getChunkDestination();
                                var options = this._getPlaybackOptions();
                                if (list && !this.isDisposed && this._playbackOptions.smartDJSeed === options.smartDJSeed)
                                    MS.Entertainment.Platform.PlaybackHelpers.playMedia2(list, this._playbackOptions);
                                else if (!this.isDisposed)
                                    this.dispose();
                                return promiseResult
                            }.bind(this))
                    }, _bindPrimaryPlaybackSession: function _bindPrimaryPlaybackSession() {
                        if (this._playbackSessionBindings || this.isDisposed)
                            return;
                        var sessionId = MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying;
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        if (sessionManager && sessionManager.primarySession && sessionManager.primarySession.sessionId === sessionId) {
                            this._playbackSessionBindings = WinJS.Binding.bind(sessionManager.primarySession, {
                                currentTransportState: this._onCurrentTransportStateChanged.bind(this), mediaCollection: this._onMediaCollectionChanged.bind(this)
                            });
                            this._sessionEventHandlers = MS.Entertainment.Utilities.addEvents(sessionManager.primarySession, {
                                sessionStateChanged: this._onCurrentSessionStateChanged.bind(this), lastTrackPlayingChanged: this._onLastTrackPlayingChanged.bind(this)
                            })
                        }
                    }, _unbindPrimaryPlaybackSession: function _unbindPrimaryPlaybackSession() {
                        if (this._playbackSessionBindings) {
                            this._playbackSessionBindings.cancel();
                            this._playbackSessionBindings = null
                        }
                        if (this._sessionEventHandlers) {
                            this._sessionEventHandlers.cancel();
                            this._sessionEventHandlers = null
                        }
                    }, _onMediaCollectionChanged: function _onMediaCollectionChanged(newValue) {
                        if (this._playbackSessionBindings && this._hasStarted && newValue)
                            this.dispose()
                    }, _onCurrentTransportStateChanged: function _onCurrentTransportStateChanged(newValue) {
                        if (this._playbackSessionBindings && !this._hasStarted && newValue !== MS.Entertainment.Platform.Playback.TransportState.starting) {
                            this._hasStarted = newValue !== MS.Entertainment.Platform.Playback.TransportState.stopped;
                            if (this._hasStarted)
                                this._logQueryActions("Started")
                        }
                    }, _onLastTrack: function onLastTrack() {
                        var pagedPromise = WinJS.Promise.as();
                        if (this.isDisposed || !this._playbackSessionBindings)
                            return pagedPromise;
                        var sessionManager = this._getValidSessionManager();
                        if (sessionManager) {
                            var networkReleaseHandle = null;
                            pagedPromise = sessionManager.requestNetworkAndDelay("PlaybackQuery").then(function onNetworkAcquired(result) {
                                if (result) {
                                    networkReleaseHandle = result;
                                    return this._loadNextChunk()
                                }
                            }.bind(this)).then(null, function ignoreError(){}).then(function onLoadComplete() {
                                if (networkReleaseHandle)
                                    networkReleaseHandle.release();
                                this._onLastTrackPromise = null
                            }.bind(this))
                        }
                        return pagedPromise
                    }, _pageMoreData: function _pageMoreData() {
                        if (this._onLastTrackPromise)
                            this._onLastTrackPromise.cancel();
                        this._onLastTrackPromise = MS.Entertainment.Utilities.schedulePromiseNormal().then(this._onLastTrack.bind(this), function(err){})
                    }, _onCurrentSessionStateChanged: function _onCurrentPlayerSSessionChanged(event) {
                        MS.Entertainment.Platform.Playback.Etw.traceString("Query.js: session state: " + event.detail.newValue);
                        if (this.isDisposed || !this._sessionEventHandlers)
                            return;
                        var sessionManager = this._getValidSessionManager();
                        var state = event.detail.newValue;
                        if (state === MS.Entertainment.Platform.Playback.SessionState.endedWithError || state === MS.Entertainment.Platform.Playback.SessionState.ended)
                            this._pageMoreData()
                    }, _onLastTrackPlayingChanged: function _onLastTrackPlayingChangedChanged(event) {
                        if (this.isDisposed || !this._sessionEventHandlers)
                            return;
                        var lastTrackPlaying = event.detail.newValue;
                        if (lastTrackPlaying)
                            this._pageMoreData()
                    }, _getValidSessionManager: function _getValidSessionManager() {
                        var sessionId = MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying;
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        if (!sessionManager || !sessionManager.primarySession || sessionManager.primarySession.sessionId !== sessionId || !sessionManager.primarySession.mediaCollection)
                            sessionManager = null;
                        return sessionManager
                    }, _prepareInnerQuery: function _prepareInnerQuery() {
                        if (this.query)
                            this.query.aggregateChunks = false
                    }, _getPlaybackOptions: function _getPlaybackOptions() {
                        var sessionId = MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying;
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        var playbackSession = sessionManager.primarySession || {};
                        return {
                                autoPlay: true, preservePlayContext: true, queueMedia: true, smartDJSeed: playbackSession.smartDJSeed, sessionId: sessionId
                            }
                    }, _getChunkDestination: function _getChunkDestination() {
                        var result = null;
                        if (this.query)
                            result = this.query._getChunkDestination();
                        return result
                    }
            }), ModelQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentQuery", function() {
                MSE.Data.AugmentQuery.prototype.constructor.apply(this, arguments)
            }, {
                _innerQuery: null, chunkSize: 0, currentIndex: {get: function() {
                            return ((this.currentChunk && typeof this.currentChunk.startIndex === "number") ? this.currentChunk.startIndex : 0)
                        }}, createModel: function createModel(startIndex, count) {
                        return null
                    }, createAsyncModel: function createAsyncModel(startIndex, count) {
                        return null
                    }, _parseInnerProgress: function _parseInnerProgress(result) {
                        return MSE.Data.queryStatus.processingData
                    }, _startInnerExecute: function _startInnerExecute() {
                        var that = this;
                        var requestPromise,
                            model;
                        var asyncModel = this.createAsyncModel(this.currentIndex, this.chunkSize);
                        if (asyncModel)
                            requestPromise = asyncModel;
                        else {
                            model = this.createModel(this.currentIndex, this.chunkSize);
                            if (model)
                                requestPromise = WinJS.Promise.wrap(model)
                        }
                        if (!requestPromise)
                            requestPromise = WinJS.Promise.wrapError(this);
                        return requestPromise
                    }, _getChunkResultSize: function _getChunkResultSize(result) {
                        return (result && result.items && result.items.source) ? result.items.source.length : 0
                    }, _calculateNextChunkKey: function _calculateNextChunkKey(result) {
                        var resultSize = this._getChunkResultSize(result);
                        var chunk = null;
                        if (resultSize && this.chunkSize && resultSize >= this.chunkSize)
                            chunk = {startIndex: this.currentIndex + resultSize};
                        return chunk
                    }, _calculatePreviousChunkKey: function _calculatePreviousChunkKey(result) {
                        var resultSize = this._getChunkResultSize(result);
                        var chunk = null;
                        if (resultSize && this.currentIndex > this.chunkSize && this.chunkSize)
                            chunk = {startIndex: this.currentIndex + resultSize};
                        return chunk
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data", {QueryDebugger: MS.Entertainment.UI.Framework.define(null, {}, {
            queryType: {
                image: "image", service: "service", database: "database"
            }, logQuery: (function() {
                    return function logQuery(){}
                })()
        })})
})()
})();
/* >>>>>>/framework/keyboardnavigationmanager.js:22293 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.Framework", {KeyboardNavigationManager: MS.Entertainment.UI.Framework.define(function KeyboardNavigationManager(element, scroller, setTabIndex) {
            this._element = element;
            this._scroller = scroller || element;
            this._setTabIndex = setTabIndex;
            if (!MS.Entertainment.Utilities.isApp2)
                this._element.addEventListener("keydown", this._handleKeyInput.bind(this));
            this._element.addEventListener("focusout", this._handleBlur.bind(this));
            this._element.addEventListener("focusin", this._handleFocus.bind(this))
        }, {
            _element: null, _scroller: null, _focusStyleClass: "acc-keyboardFocusTarget", _setTabIndex: null, _itemWithTabIndex: null, _currentlyFocusedItem: null, _handleKeyInput: function _handleKeyInput(e) {
                    if (MS.Entertainment.Framework.KeyboardNavigationManager._validKeys.indexOf(e.keyCode) === -1 || this.doesElementSupportKeyboardInput(document.activeElement, e.keyCode))
                        return;
                    if (e.keyCode === WinJS.Utilities.Key.enter || e.keyCode === WinJS.Utilities.Key.space) {
                        this._handleClick(e);
                        return
                    }
                    var initialResults = this._element.querySelectorAll(".win-focusable");
                    var results = [];
                    var currentInitialItem = null;
                    var initialItemAvailable = true;
                    for (var j = 0; j < initialResults.length; j++) {
                        currentInitialItem = initialResults[j];
                        if (this._checkItemValidTarget(currentInitialItem))
                            results.push(currentInitialItem)
                    }
                    if (results.length < 1)
                        return;
                    if (!this._currentlyFocusedItem) {
                        initialItemAvailable = false;
                        for (var i = 0; i < results.length; i++)
                            if (MS.Entertainment.Utilities.isElementInHorizontalViewportOfParent(results[i], this._scroller)) {
                                this._currentlyFocusedItem = results[i];
                                break
                            }
                    }
                    var currentItemOffset = {
                            left: 0, top: 0
                        };
                    if (!this._currentlyFocusedItem && (e.keyCode !== WinJS.Utilities.Key.home && e.keyCode !== WinJS.Utilities.Key.end))
                        return;
                    else
                        currentItemOffset = MS.Entertainment.Utilities.getRelativeOffset(this._currentlyFocusedItem, this._element);
                    var checkElementOffset;
                    var checkElementRight;
                    var checkElementBottom;
                    var currentClosest = null;
                    var currentEdge;
                    var currentItemCheck = null;
                    var currentBestItemCheck = null;
                    if ((initialItemAvailable && currentItemOffset) || (e.keyCode === WinJS.Utilities.Key.home) || (e.keyCode === WinJS.Utilities.Key.end))
                        if (results.length === 1 && !e.ctrlKey)
                            currentClosest = {element: results[0]};
                        else if (e.keyCode === WinJS.Utilities.Key.leftArrow && !e.ctrlKey) {
                            for (var i = 0; i < results.length; i++)
                                if (results[i] !== this._currentlyFocusedItem) {
                                    checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                    if (checkElementOffset) {
                                        checkElementRight = checkElementOffset.left + results[i].clientWidth;
                                        if (currentItemOffset.left > checkElementOffset.left)
                                            if (currentClosest) {
                                                if (currentItemOffset.left - checkElementOffset.left > currentItemOffset.left - currentClosest.left)
                                                    continue;
                                                currentItemCheck = Math.abs(checkElementRight - currentItemOffset.left);
                                                currentBestItemCheck = Math.abs(currentClosest.right - currentItemOffset.left);
                                                if (currentItemCheck < currentBestItemCheck)
                                                    currentClosest = {
                                                        element: results[i], right: checkElementRight, left: checkElementOffset.left, top: checkElementOffset.top
                                                    };
                                                else if (currentItemCheck === currentBestItemCheck)
                                                    if (Math.abs(checkElementOffset.top - currentItemOffset.top) <= Math.abs(currentClosest.top - currentItemOffset.top))
                                                        currentClosest = {
                                                            element: results[i], right: checkElementRight, left: checkElementOffset.left, top: checkElementOffset.top
                                                        }
                                            }
                                            else
                                                currentClosest = {
                                                    element: results[i], right: checkElementRight, left: checkElementOffset.left, top: checkElementOffset.top
                                                }
                                    }
                                }
                        }
                        else if (e.keyCode === WinJS.Utilities.Key.rightArrow && !e.ctrlKey) {
                            currentEdge = this._currentlyFocusedItem.clientWidth + currentItemOffset.left;
                            for (var i = 0; i < results.length; i++)
                                if (results[i] !== this._currentlyFocusedItem) {
                                    checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                    if (checkElementOffset) {
                                        checkElementRight = checkElementOffset.left + results[i].clientWidth;
                                        if (checkElementOffset.left >= currentEdge)
                                            if (currentClosest) {
                                                if (checkElementOffset.left - currentEdge > currentClosest.left - currentEdge)
                                                    continue;
                                                currentItemCheck = Math.abs(checkElementOffset.left - currentEdge);
                                                currentBestItemCheck = Math.abs(currentClosest.left - currentEdge);
                                                if (currentItemCheck < currentBestItemCheck)
                                                    currentClosest = {
                                                        element: results[i], left: checkElementOffset.left, right: checkElementRight, top: checkElementOffset.top
                                                    };
                                                else if (currentItemCheck === currentBestItemCheck)
                                                    if (Math.abs(checkElementOffset.top - currentItemOffset.top) <= Math.abs(currentClosest.top - currentItemOffset.top))
                                                        currentClosest = {
                                                            element: results[i], left: checkElementOffset.left, right: checkElementRight, top: checkElementOffset.top
                                                        }
                                            }
                                            else
                                                currentClosest = {
                                                    element: results[i], left: checkElementOffset.left, right: checkElementRight, top: checkElementOffset.top
                                                }
                                    }
                                }
                        }
                        else if (e.keyCode === WinJS.Utilities.Key.downArrow) {
                            currentEdge = this._currentlyFocusedItem.clientHeight + currentItemOffset.top;
                            for (var i = 0; i < results.length; i++)
                                if (results[i] !== this._currentlyFocusedItem) {
                                    checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                    if (checkElementOffset) {
                                        checkElementBottom = checkElementOffset.top + results[i].clientHeight;
                                        if (checkElementBottom > currentEdge)
                                            if (currentClosest) {
                                                if (checkElementBottom - currentEdge > currentClosest.bottom - currentEdge)
                                                    continue;
                                                if (checkElementOffset.left >= currentItemOffset.left && checkElementOffset.left - currentItemOffset.left < currentClosest.left - currentItemOffset.left)
                                                    currentClosest = {
                                                        element: results[i], left: checkElementOffset.left, bottom: checkElementBottom
                                                    }
                                            }
                                            else if (checkElementOffset.left >= currentItemOffset.left)
                                                currentClosest = {
                                                    element: results[i], left: checkElementOffset.left, bottom: checkElementBottom
                                                }
                                    }
                                }
                        }
                        else if (e.keyCode === WinJS.Utilities.Key.upArrow) {
                            for (var i = 0; i < results.length; i++)
                                if (results[i] !== this._currentlyFocusedItem) {
                                    checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                    if (checkElementOffset && currentItemOffset.top > checkElementOffset.top)
                                        if (currentClosest) {
                                            if (currentItemOffset.top - checkElementOffset.top > currentItemOffset.top - currentClosest.top)
                                                continue;
                                            if (checkElementOffset.left >= currentItemOffset.left && checkElementOffset.left - currentItemOffset.left <= currentClosest.left - currentItemOffset.left)
                                                currentClosest = {
                                                    element: results[i], left: checkElementOffset.left, top: checkElementOffset.top
                                                }
                                        }
                                        else if (checkElementOffset.left >= currentItemOffset.left)
                                            currentClosest = {
                                                element: results[i], left: checkElementOffset.left, top: checkElementOffset.top
                                            }
                                }
                        }
                        else if (e.keyCode === WinJS.Utilities.Key.home) {
                            currentClosest = {element: results[0]};
                            if (this._scroller)
                                this._scroller.scrollLeft = 0
                        }
                        else if (e.keyCode === WinJS.Utilities.Key.end) {
                            currentClosest = {element: results[results.length - 1]};
                            if (this._scroller)
                                this._scroller.scrollLeft = this._scroller.scrollWidth
                        }
                        else if (e.keyCode === WinJS.Utilities.Key.pageDown) {
                            currentEdge = this._currentlyFocusedItem.clientWidth + currentItemOffset.left;
                            for (var i = 0; i < results.length; i++)
                                if (results[i] !== this._currentlyFocusedItem) {
                                    checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                    if (checkElementOffset && checkElementOffset.left - currentEdge >= 0)
                                        if (!MS.Entertainment.Utilities.isElementInHorizontalViewportOfParent(results[i], this._scroller)) {
                                            currentClosest = {element: results[i]};
                                            break
                                        }
                                }
                            if (!currentClosest)
                                currentClosest = {element: results[results.length - 1]}
                        }
                        else if (e.keyCode === WinJS.Utilities.Key.pageUp) {
                            for (var i = 0; i < results.length; i++)
                                if (results[i] !== this._currentlyFocusedItem) {
                                    checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                    if (checkElementOffset) {
                                        checkElementRight = checkElementOffset.left + results[i].clientWidth;
                                        if (currentItemOffset.left - checkElementRight >= 0)
                                            if (!MS.Entertainment.Utilities.isElementInHorizontalViewportOfParent(results[i], this._scroller)) {
                                                currentClosest = {element: results[i]};
                                                break
                                            }
                                    }
                                }
                            if (!currentClosest)
                                currentClosest = {element: results[0]}
                        }
                    if (currentClosest && currentClosest.element)
                        this.setFocusedItem(currentClosest.element, true);
                    else if (this._currentlyFocusedItem)
                        this.setFocusedItem(this._currentlyFocusedItem, true);
                    e.preventDefault()
                }, doesElementSupportKeyboardInput: function doesElementSupportKeyboardInput(element, keyCode) {
                    return MS.Entertainment.Utilities.doesElementSupportKeyboardInput(element)
                }, getFocusedItem: function getFocusedItem() {
                    if (!this._currentlyFocusedItem)
                        this.focusFirstItemInContainer(this._element);
                    return this._currentlyFocusedItem
                }, getTabIndexedItem: function getTabIndexedItem() {
                    return this._itemWithTabIndex
                }, setFocusedItem: function setFocusedItem(item, setStyle, skipSettingFocus, skipScroll) {
                    if (item) {
                        this._setInternalFocusState(item, setStyle);
                        if (!skipSettingFocus && this._currentlyFocusedItem)
                            MS.Entertainment.UI.Framework.focusElement(this._currentlyFocusedItem, skipScroll)
                    }
                }, _setInternalFocusState: function _setInternalFocusState(item, setStyle) {
                    if (item) {
                        if (this._currentlyFocusedItem)
                            WinJS.Utilities.removeClass(this._currentlyFocusedItem, this._focusStyleClass);
                        this._currentlyFocusedItem = item;
                        if (this._currentlyFocusedItem && setStyle)
                            WinJS.Utilities.addClass(this._currentlyFocusedItem, this._focusStyleClass);
                        if (this._setTabIndex)
                            this.setTabIndexedItem(this._currentlyFocusedItem)
                    }
                }, setTabIndexedItem: function setTabIndexedItem(element) {
                    if (this._itemWithTabIndex)
                        this._itemWithTabIndex.setAttribute("tabindex", -1);
                    if (element) {
                        element.setAttribute("tabindex", "0");
                        this._itemWithTabIndex = element
                    }
                }, getFocusableChildren: function getFocusableChildren() {
                    return WinJS.Utilities.query(".win-focusable", this._element) || []
                }, focusFirstItemInContainer: function focusFirstItemInContainer(container, setStyle, skipSettingFocus, skipScroll) {
                    if (container && MS.Entertainment.UI.Framework.canMoveFocus(container)) {
                        var initialResults = container.querySelectorAll(".win-focusable");
                        var results = [];
                        var currentInitialItem = null;
                        for (var j = 0; j < initialResults.length; j++) {
                            currentInitialItem = initialResults[j];
                            if (this._checkItemValidTarget(currentInitialItem)) {
                                this.setFocusedItem(currentInitialItem, setStyle, skipSettingFocus, skipScroll);
                                break
                            }
                        }
                    }
                }, _checkItemValidTarget: function _checkItemValidTarget(item) {
                    if (item) {
                        var disabledAttribute = item.getAttribute("disabled");
                        return item.currentStyle && item.currentStyle.visibility !== "hidden" && item.currentStyle.display !== "none" && disabledAttribute !== "disabled" && disabledAttribute !== "" && item.clientHeight !== 0 && item.clientWidth !== 0
                    }
                    else
                        return false
                }, _handleClick: function _handleClick(e) {
                    if (this._currentlyFocusedItem && this._currentlyFocusedItem.click && this._checkItemValidTarget(this._currentlyFocusedItem) && e.target && e.target.tagName && e.target.tagName.toLowerCase() !== "button") {
                        this._currentlyFocusedItem.click();
                        e.stopPropagation();
                        e.preventDefault()
                    }
                }, _handleBlur: function _handleBlur(e) {
                    if (this._currentlyFocusedItem && document.activeElement !== this._currentlyFocusedItem) {
                        WinJS.Utilities.removeClass(this._currentlyFocusedItem, this._focusStyleClass);
                        this._currentlyFocusedItem = null
                    }
                }, _handleFocus: function _handleFocus(e) {
                    var tryFocus = this._currentlyFocusedItem !== document.activeElement;
                    if (tryFocus) {
                        var listViews = this._element.querySelectorAll(".win-listview");
                        for (var i = 0; i < listViews.length; i++)
                            if (listViews[i].contains(document.activeElement)) {
                                tryFocus = false;
                                break
                            }
                    }
                    if (tryFocus)
                        this._setInternalFocusStateFromActiveElement()
                }, _setInternalFocusStateFromActiveElement: function _setInternalFocusStateFromActiveElement() {
                    if (document.activeElement && WinJS.Utilities.hasClass(document.activeElement, "win-focusable"))
                        this._setInternalFocusState(document.activeElement, true)
                }
        }, {_validKeys: [WinJS.Utilities.Key.leftArrow, WinJS.Utilities.Key.rightArrow, WinJS.Utilities.Key.upArrow, WinJS.Utilities.Key.downArrow, WinJS.Utilities.Key.home, WinJS.Utilities.Key.end, WinJS.Utilities.Key.pageDown, WinJS.Utilities.Key.pageUp, WinJS.Utilities.Key.enter, WinJS.Utilities.Key.space, WinJS.Utilities.Key.g]})});
    WinJS.Namespace.define("MS.Entertainment.Framework", {OnScreenKeyboardNavigationManager: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Framework.KeyboardNavigationManager", function OnScreenKeyboardNavigationManager(element, scroller, setTabIndex) {
            this.base(element, scroller, setTabIndex)
        }, {setFocusedItem: function setFocusedItem(item, setStyle, skipSettingFocus) {
                if (!item || !(MS.Entertainment.Utilities.isElementInViewportOfParent(item, this._scroller)))
                    return;
                this._setInternalFocusState(item, setStyle);
                if (!skipSettingFocus && this._currentlyFocusedItem)
                    MS.Entertainment.UI.Framework.focusElement(this._currentlyFocusedItem)
            }}, null)});
    WinJS.Namespace.define("MS.Entertainment.Framework", {
        VerticalKeyboardNavigationManager: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Framework.KeyboardNavigationManager", function VerticalKeyboardNavigationManager(element, scroller, setTabIndex) {
            this._element = element;
            this._scroller = scroller || element;
            this._setTabIndex = setTabIndex;
            if (!MS.Entertainment.Utilities.isApp2)
                this._element.addEventListener("keydown", this._handleKeyInput.bind(this));
            this._element.addEventListener("focusout", this._handleBlur.bind(this));
            this._element.addEventListener("focusin", this._handleFocus.bind(this))
        }, {_handleKeyInput: function _handleKeyInput(e) {
                if (MS.Entertainment.Framework.KeyboardNavigationManager._validKeys.indexOf(e.keyCode) === -1 || MS.Entertainment.Utilities.doesElementSupportKeyboardInput(document.activeElement))
                    return;
                if (e.keyCode === WinJS.Utilities.Key.enter || e.keyCode === WinJS.Utilities.Key.space) {
                    this._handleClick(e);
                    return
                }
                var initialResults = this._element.querySelectorAll(".win-focusable");
                var results = [];
                var currentInitialItem = null;
                var initialItemAvailable = true;
                var currentIndex = 0;
                for (var j = 0; j < initialResults.length; j++) {
                    currentInitialItem = initialResults[j];
                    if (this._checkItemValidTarget(currentInitialItem))
                        results.push(currentInitialItem)
                }
                if (results.length < 1)
                    return;
                if (!this._currentlyFocusedItem) {
                    initialItemAvailable = false;
                    for (var i = 0; i < results.length; i++)
                        if (MS.Entertainment.Utilities.isElementInVerticalViewportOfParent(results[i], this._scroller)) {
                            this._currentlyFocusedItem = results[i];
                            break
                        }
                }
                currentIndex = results.indexOf(this._currentlyFocusedItem);
                if (!this._currentlyFocusedItem && (e.keyCode !== WinJS.Utilities.Key.home && e.keyCode !== WinJS.Utilities.Key.end) || currentIndex < 0)
                    return;
                var currentClosest = null;
                if (initialItemAvailable || (e.keyCode === WinJS.Utilities.Key.home) || (e.keyCode === WinJS.Utilities.Key.end))
                    if (results.length === 1 && !e.ctrlKey)
                        currentClosest = {element: results[0]};
                    else if (e.keyCode === WinJS.Utilities.Key.downArrow) {
                        if (currentIndex < results.length - 1)
                            currentClosest = {element: results[currentIndex + 1]}
                    }
                    else if (e.keyCode === WinJS.Utilities.Key.upArrow) {
                        if (currentIndex > 0)
                            currentClosest = {element: results[currentIndex - 1]}
                    }
                    else if (e.keyCode === WinJS.Utilities.Key.home) {
                        currentClosest = {element: results[0]};
                        if (this._scroller)
                            this._scroller.scrollLeft = 0
                    }
                    else if (e.keyCode === WinJS.Utilities.Key.end) {
                        currentClosest = {element: results[results.length - 1]};
                        if (this._scroller)
                            this._scroller.scrollLeft = this._scroller.scrollWidth
                    }
                if (currentClosest && currentClosest.element)
                    this.setFocusedItem(currentClosest.element, true);
                else if (this._currentlyFocusedItem)
                    this.setFocusedItem(this._currentlyFocusedItem, true);
                e.preventDefault()
            }}, null), FormKeyboardNavigationManager: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Framework.KeyboardNavigationManager", function FormKeyboardNavigationManager(element, scroller) {
                this.base(element, scroller, true);
                var focusableChildern = this.getFocusableChildren();
                if (focusableChildern.length)
                    this._setInternalFocusState(focusableChildern[0], true)
            }, {
                doesElementSupportKeyboardInput: function doesElementSupportKeyboardInput(element, keyCode) {
                    var supportsInput = false;
                    var tagName = element && element.tagName;
                    var isMultiLine = element && element.isMultiLine;
                    if ((tagName !== "INPUT") || (isMultiLine) || (keyCode !== WinJS.Utilities.Key.downArrow && keyCode !== WinJS.Utilities.Key.upArrow))
                        supportsInput = MS.Entertainment.Utilities.doesElementSupportKeyboardInput(element);
                    return supportsInput
                }, setFocusedItem: function setFocusedItem(item, setStyle, skipSettingFocus, skipScroll) {
                        MS.Entertainment.Framework.KeyboardNavigationManager.prototype.setFocusedItem.call(this, item, setStyle, true, skipScroll);
                        if (item && !skipSettingFocus && this._currentlyFocusedItem)
                            MS.Entertainment.UI.Framework.focusElement(this._currentlyFocusedItem, skipScroll, true)
                    }, setTabIndexedItem: function setTabIndexedItem(element) {
                        if (this._itemWithTabIndex) {
                            var inputs = WinJS.Utilities.query("input,select", this._itemWithTabIndex) || [];
                            inputs.forEach(function(child) {
                                child.setAttribute("tabindex", "-1")
                            })
                        }
                        MS.Entertainment.Framework.KeyboardNavigationManager.prototype.setTabIndexedItem.call(this, element);
                        if (this._itemWithTabIndex) {
                            this._itemWithTabIndex.setAttribute("tabindex", "-1");
                            var inputs = WinJS.Utilities.query("input,select", this._itemWithTabIndex) || [];
                            inputs.forEach(function(child) {
                                child.setAttribute("tabindex", "0")
                            })
                        }
                    }, _setInternalFocusStateFromActiveElement: function _setInternalFocusStateFromActiveElement() {
                        if (document.activeElement)
                            if (WinJS.Utilities.hasClass(document.activeElement, "win-focusable"))
                                this._setInternalFocusState(document.activeElement, true);
                            else if (this._element.contains(document.activeElement)) {
                                var focusableChildern = this.getFocusableChildren();
                                var focusableChild;
                                for (var j = 0; j < focusableChildern.length; j++) {
                                    focusableChild = focusableChildern[j];
                                    if (focusableChild.contains(document.activeElement)) {
                                        this._setInternalFocusState(focusableChild, true);
                                        break
                                    }
                                }
                            }
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Framework", {DashboardKeyboardNavigationManager: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Framework.KeyboardNavigationManager", function DashboardKeyboardNavigationManager(element, scroller, setTabIndex) {
            this._element = element;
            this._scroller = scroller || element;
            this._setTabIndex = setTabIndex;
            if (!MS.Entertainment.Utilities.isApp2)
                this._element.addEventListener("keydown", this._handleKeyInput.bind(this));
            this._element.addEventListener("focusout", this._handleBlur.bind(this));
            this._element.addEventListener("focusin", this._handleFocus.bind(this))
        }, {
            _pivotsFocused: false, _handleKeyInput: function _handleKeyInput(e) {
                    if (MS.Entertainment.Framework.KeyboardNavigationManager._validKeys.indexOf(e.keyCode) === -1 || MS.Entertainment.Utilities.doesElementSupportKeyboardInput(document.activeElement))
                        return;
                    if (e.ctrlKey && e.altKey && e.keyCode === WinJS.Utilities.Key.g)
                        if (this._currentlyFocusedItem)
                            if (this._currentlyFocusedItem.getAttribute("data-ent-panelHeader") === "true" && this._currentlyFocusedItem.click)
                                this._currentlyFocusedItem.click();
                            else {
                                this._focusNearestPanelHeader(this._currentlyFocusedItem, true);
                                if (this._currentlyFocusedItem.getAttribute("data-ent-panelHeader") === "true")
                                    this._handleClick(e)
                            }
                    if (e.keyCode === WinJS.Utilities.Key.enter || e.keyCode === WinJS.Utilities.Key.space) {
                        this._handleClick(e);
                        return
                    }
                    if ((e.keyCode !== WinJS.Utilities.Key.home) && (e.keyCode !== WinJS.Utilities.Key.end) && this._currentlyFocusedItem && this._currentlyFocusedItem.getAttribute("data-ent-panelHeader") === "true")
                        if (e.keyCode === WinJS.Utilities.Key.downArrow)
                            this._focusFirstItemInPanelBody(this._currentlyFocusedItem, true);
                        else {
                            var initialPivotsResults = this._element.querySelectorAll("[data-ent-panelheader='true']");
                            var pivotsResults = [];
                            var initialItemIndex;
                            for (var j = 0; j < initialPivotsResults.length; j++) {
                                currentInitialItem = initialPivotsResults[j];
                                if (this._checkItemValidTarget(currentInitialItem))
                                    pivotsResults.push(currentInitialItem)
                            }
                            if (MS.Entertainment.Utilities.getTextDirection() === MS.Entertainment.Utilities.TextDirections.RightToLeft)
                                pivotsResults.reverse();
                            initialItemIndex = pivotsResults.indexOf(this._currentlyFocusedItem);
                            if (pivotsResults.length > 0 && initialItemIndex >= 0)
                                if (e.keyCode === WinJS.Utilities.Key.leftArrow && !e.ctrlKey) {
                                    if (initialItemIndex > 0)
                                        this.setFocusedItem(pivotsResults[initialItemIndex - 1], true)
                                }
                                else if (e.keyCode === WinJS.Utilities.Key.rightArrow && !e.ctrlKey)
                                    if (initialItemIndex < pivotsResults.length - 1)
                                        this.setFocusedItem(pivotsResults[initialItemIndex + 1], true)
                        }
                    else {
                        var initialResults = this._element.querySelectorAll(".win-focusable");
                        var results = [];
                        var currentInitialItem = null;
                        var initialItemAvailable = true;
                        for (var j = 0; j < initialResults.length; j++) {
                            currentInitialItem = initialResults[j];
                            if (this._checkItemValidTargetNoPivot(currentInitialItem))
                                results.push(currentInitialItem)
                        }
                        if (results.length < 1)
                            return;
                        if (!this._currentlyFocusedItem) {
                            initialItemAvailable = false;
                            for (var i = 0; i < results.length; i++)
                                if (MS.Entertainment.Utilities.isElementInHorizontalViewportOfParent(results[i], this._scroller)) {
                                    this._currentlyFocusedItem = results[i];
                                    break
                                }
                        }
                        if (MS.Entertainment.Utilities.getTextDirection() === MS.Entertainment.Utilities.TextDirections.RightToLeft)
                            results.reverse();
                        var currentItemOffset = {
                                left: 0, top: 0
                            };
                        if (!this._currentlyFocusedItem && (e.keyCode !== WinJS.Utilities.Key.home && e.keyCode !== WinJS.Utilities.Key.end))
                            return;
                        else
                            currentItemOffset = MS.Entertainment.Utilities.getRelativeOffset(this._currentlyFocusedItem, this._element);
                        var checkElementOffset;
                        var checkElementRight;
                        var checkElementBottom;
                        var currentClosest = null;
                        var currentEdge;
                        var currentItemCheck = null;
                        var currentBestItemCheck = null;
                        var goingUp = false;
                        if ((initialItemAvailable && currentItemOffset) || (e.keyCode === WinJS.Utilities.Key.home) || (e.keyCode === WinJS.Utilities.Key.end))
                            if (results.length === 1 && !e.ctrlKey)
                                currentClosest = {element: results[0]};
                            else if (e.keyCode === WinJS.Utilities.Key.leftArrow && !e.ctrlKey) {
                                for (var i = 0; i < results.length; i++)
                                    if (results[i] !== this._currentlyFocusedItem) {
                                        checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                        if (checkElementOffset) {
                                            checkElementRight = checkElementOffset.left + results[i].clientWidth;
                                            if (currentItemOffset.left > checkElementOffset.left)
                                                if (currentClosest) {
                                                    if (currentItemOffset.left - checkElementOffset.left > currentItemOffset.left - currentClosest.left)
                                                        continue;
                                                    currentItemCheck = Math.abs(checkElementRight - currentItemOffset.left);
                                                    currentBestItemCheck = Math.abs(currentClosest.right - currentItemOffset.left);
                                                    if (currentItemCheck < currentBestItemCheck)
                                                        currentClosest = {
                                                            element: results[i], right: checkElementRight, left: checkElementOffset.left, top: checkElementOffset.top
                                                        };
                                                    else if (currentItemCheck === currentBestItemCheck)
                                                        if (Math.abs(checkElementOffset.top - currentItemOffset.top) <= Math.abs(currentClosest.top - currentItemOffset.top))
                                                            currentClosest = {
                                                                element: results[i], right: checkElementRight, left: checkElementOffset.left, top: checkElementOffset.top
                                                            }
                                                }
                                                else
                                                    currentClosest = {
                                                        element: results[i], right: checkElementRight, left: checkElementOffset.left, top: checkElementOffset.top
                                                    }
                                        }
                                    }
                            }
                            else if (e.keyCode === WinJS.Utilities.Key.rightArrow && !e.ctrlKey) {
                                currentEdge = this._currentlyFocusedItem.clientWidth + currentItemOffset.left;
                                for (var i = 0; i < results.length; i++)
                                    if (results[i] !== this._currentlyFocusedItem) {
                                        checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                        if (checkElementOffset) {
                                            checkElementRight = checkElementOffset.left + results[i].clientWidth;
                                            if (checkElementOffset.left > currentEdge)
                                                if (currentClosest) {
                                                    if (checkElementOffset.left - currentEdge > currentClosest.left - currentEdge)
                                                        continue;
                                                    currentItemCheck = Math.abs(checkElementOffset.left - currentEdge);
                                                    currentBestItemCheck = Math.abs(currentClosest.left - currentEdge);
                                                    if (currentItemCheck < currentBestItemCheck)
                                                        currentClosest = {
                                                            element: results[i], left: checkElementOffset.left, right: checkElementRight, top: checkElementOffset.top
                                                        };
                                                    else if (currentItemCheck === currentBestItemCheck)
                                                        if (Math.abs(checkElementOffset.top - currentItemOffset.top) <= Math.abs(currentClosest.top - currentItemOffset.top))
                                                            currentClosest = {
                                                                element: results[i], left: checkElementOffset.left, right: checkElementRight, top: checkElementOffset.top
                                                            }
                                                }
                                                else
                                                    currentClosest = {
                                                        element: results[i], left: checkElementOffset.left, right: checkElementRight, top: checkElementOffset.top
                                                    }
                                        }
                                    }
                            }
                            else if (e.keyCode === WinJS.Utilities.Key.downArrow) {
                                currentEdge = this._currentlyFocusedItem.clientHeight + currentItemOffset.top;
                                for (var i = 0; i < results.length; i++)
                                    if (results[i] !== this._currentlyFocusedItem) {
                                        checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                        if (checkElementOffset) {
                                            checkElementBottom = checkElementOffset.top + results[i].clientHeight;
                                            if (checkElementBottom > currentEdge)
                                                if (currentClosest) {
                                                    if (checkElementBottom - currentEdge > currentClosest.bottom - currentEdge)
                                                        continue;
                                                    if (checkElementOffset.left >= currentItemOffset.left && checkElementOffset.left - currentItemOffset.left <= currentClosest.left - currentItemOffset.left)
                                                        currentClosest = {
                                                            element: results[i], left: checkElementOffset.left, bottom: checkElementBottom
                                                        }
                                                }
                                                else if (checkElementOffset.left >= currentItemOffset.left)
                                                    currentClosest = {
                                                        element: results[i], left: checkElementOffset.left, bottom: checkElementBottom
                                                    }
                                        }
                                    }
                            }
                            else if (e.keyCode === WinJS.Utilities.Key.upArrow) {
                                goingUp = true;
                                for (var i = 0; i < results.length; i++)
                                    if (results[i] !== this._currentlyFocusedItem) {
                                        checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                        if (checkElementOffset && currentItemOffset.top > checkElementOffset.top)
                                            if (currentClosest) {
                                                if (currentItemOffset.top - checkElementOffset.top > currentItemOffset.top - currentClosest.top)
                                                    continue;
                                                if (checkElementOffset.left >= currentItemOffset.left && checkElementOffset.left - currentItemOffset.left <= currentClosest.left - currentItemOffset.left)
                                                    currentClosest = {
                                                        element: results[i], left: checkElementOffset.left, top: checkElementOffset.top
                                                    }
                                            }
                                            else if (checkElementOffset.left >= currentItemOffset.left)
                                                currentClosest = {
                                                    element: results[i], left: checkElementOffset.left, top: checkElementOffset.top
                                                }
                                    }
                            }
                            else if (e.keyCode === WinJS.Utilities.Key.home) {
                                currentClosest = {element: results[0]};
                                if (this._scroller)
                                    this._scroller.scrollLeft = 0
                            }
                            else if (e.keyCode === WinJS.Utilities.Key.end) {
                                currentClosest = {element: results[results.length - 1]};
                                if (this._scroller)
                                    this._scroller.scrollLeft = this._scroller.scrollWidth
                            }
                            else if (e.keyCode === WinJS.Utilities.Key.pageDown) {
                                currentEdge = this._currentlyFocusedItem.clientWidth + currentItemOffset.left;
                                for (var i = 0; i < results.length; i++)
                                    if (results[i] !== this._currentlyFocusedItem) {
                                        checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                        if (checkElementOffset && checkElementOffset.left - currentEdge >= 0)
                                            if (!MS.Entertainment.Utilities.isElementInHorizontalViewportOfParent(results[i], this._scroller)) {
                                                currentClosest = {element: results[i]};
                                                break
                                            }
                                    }
                                if (!currentClosest)
                                    currentClosest = {element: results[results.length - 1]}
                            }
                            else if (e.keyCode === WinJS.Utilities.Key.pageUp) {
                                for (var i = results.length - 1; i >= 0; i--)
                                    if (results[i] !== this._currentlyFocusedItem) {
                                        checkElementOffset = MS.Entertainment.Utilities.getRelativeOffset(results[i], this._element);
                                        if (checkElementOffset) {
                                            checkElementRight = checkElementOffset.left + results[i].clientWidth;
                                            if (currentItemOffset.left - checkElementRight >= 0)
                                                if (!MS.Entertainment.Utilities.isElementInHorizontalViewportOfParent(results[i], this._scroller)) {
                                                    currentClosest = {element: results[i]};
                                                    break
                                                }
                                        }
                                    }
                                if (!currentClosest)
                                    currentClosest = {element: results[0]}
                            }
                    }
                    if (currentClosest && currentClosest.element)
                        this.setFocusedItem(currentClosest.element, true);
                    else if (goingUp)
                        this._focusNearestPanelHeader(this._currentlyFocusedItem, true);
                    else if (this._currentlyFocusedItem)
                        this.setFocusedItem(this._currentlyFocusedItem, true);
                    e.preventDefault()
                }, _findParentContainer: function _findParentContainer(item) {
                    var ancestor = item;
                    var container = null;
                    do {
                        if (ancestor.domElement)
                            ancestor = ancestor.domElement;
                        if (ancestor.getAttribute("data-ent-dashboardpanel") === "true") {
                            container = ancestor;
                            break
                        }
                        ancestor = ancestor.parentNode
                    } while (ancestor);
                    return container
                }, _focusNearestPanelHeader: function _focusNearestPanelHeader(item, setStyle) {
                    var container = this._findParentContainer(item);
                    var panelHeader;
                    if (container)
                        this.focusFirstItemInContainer(container.querySelector(".panelTitle"), setStyle)
                }, _focusFirstItemInPanelBody: function _focusFirstItemInPanelBody(item, setStyle) {
                    var container = this._findParentContainer(item);
                    var panelHeader;
                    if (container)
                        this.focusFirstItemInContainer(container.querySelector(".panelContainer"), setStyle)
                }, _checkItemValidTargetNoPivot: function _checkItemValidTargetNoPivot(item) {
                    if (item) {
                        var disabledAttribute = item.getAttribute("disabled");
                        var pivotAttribute = item.getAttribute("data-ent-panelheader");
                        return item.currentStyle && pivotAttribute !== "true" && item.currentStyle.visibility !== "hidden" && item.currentStyle.display !== "none" && disabledAttribute !== "disabled" && disabledAttribute !== "" && item.clientHeight !== 0 && item.clientWidth !== 0
                    }
                    else
                        return false
                }
        }, null)})
})()
})();
/* >>>>>>/framework/querywatcher.js:22976 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.Framework", {QueryWatcher: MS.Entertainment.defineObservable(function QueryWatcher(moniker) {
            this._moniker = moniker;
            this._queries = []
        }, {
            _firstQueryLogged: false, _moniker: null, _queries: null, autoClear: true, lowestStatus: MS.Entertainment.Data.queryStatus.idle, registerQuery: function registerQuery(query) {
                    if (query !== null) {
                        this._checkAndFireInitialEvent();
                        var that = this;
                        var callback = function statusChangeCallback(status) {
                                var i;
                                var currentStatus;
                                var newLowestStatus = MS.Entertainment.Data.queryStatus.max;
                                var fireCompletedEvent = true;
                                for (i = 0; i < that._queries.length; i++) {
                                    currentStatus = that._queries[i].savedQuery.status;
                                    if (currentStatus < newLowestStatus)
                                        newLowestStatus = currentStatus;
                                    if (currentStatus < MS.Entertainment.Data.queryStatus.completed)
                                        fireCompletedEvent = false
                                }
                                that.lowestStatus = newLowestStatus;
                                if (fireCompletedEvent) {
                                    var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                                    eventProvider.traceQueries_Complete(that._moniker);
                                    if (that.autoClear)
                                        that.clearQueries()
                                }
                            };
                        this._queries.push({
                            savedQuery: query, savedCallback: callback
                        });
                        query.bind("status", callback)
                    }
                }, _checkAndFireInitialEvent: function _checkAndFireInitialEvent() {
                    if (!this._firstQueryLogged) {
                        this._firstQueryLogged = true;
                        var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                        eventProvider.traceQueries_Begin(this._moniker)
                    }
                }, clearQueries: function clearQueries() {
                    var i = this._queries.length;
                    for (i = 0; i < this._queries.length; i++)
                        this._queries[i].savedQuery.unbind("status", this._queries[i].savedCallback);
                    this._queries.length = 0;
                    this._firstQueryLogged = false
                }
        }, null)})
})()
})();
/* >>>>>>/framework/actionidentifiers.js:23031 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

WinJS.Namespace.define("MS.Entertainment.UI.Actions.ActionIdentifiers", {
    actionPassThrough: "actionPassThrough", addArtistToNowPlaying: "addArtistToNowPlaying", addTo: "addTo", addToNowPlaying: "addToNowPlaying", addToPlaylist: "addToPlaylist", addRemoveItemWatchlist: "addRemoveItemWatchlist", albumDetailsNavigate: "albumDetailsNavigate", albumDeviceDetailsNavigate: "albumDeviceDetailsNavigate", albumPurchase: "albumPurchase", artistMediaNavigate: "artistMediaNavigate", artistDetailsNavigate: "artistDetailsNavigate", collectionNavigate: "collectionNavigate", copy: "copy", createPlaylist: "createPlaylist", deepLinkConfigureMemoryLeakTracking: "deepLinkConfigureMemoryLeakTracking", deepLinkLocation: "deepLinkLocation", deepLinkSearch: "deepLinkSearch", deepLinkDetails: "deepLinkDetails", deepLinkPlay: "deepLinkPlay", deepLinkPlayPin: "deepLinkPlayPin", deepLinkPlayTo: "deepLinkPlayTo", deepLinkLaunchTitle: "deepLinkLaunchTitle", deepLinkLaunchFeedbackFlyout: "deepLinkLaunchFeedbackFlyout", deepLinkShowPerfTrackLog: "deepLinkShowPerfTrackLog", deeplinkSetDlna: "deeplinkSetDlna", deeplinkTunerConfig: "deeplinkTunerConfig", deepLinkVideoProtocolConverter: "deepLinkVideoProtocolConverter", deepLinkXBLDefault: "deepLinkXBLDefault", deepLinkXBLDetails: "deepLinkXBLDetails", deepLinkXBLPlayback: "deepLinkXBLPlayback", deleteMedia: "deleteMedia", deleteSmartDJ: "deleteSmartDJ", depthGalleryNavigate: "depthGalleryNavigate", disabled: "disabled", download: "download", downloadAgain: "downloadAgain", downloadCancel: "downloadCancel", downloadPause: "downloadPause", downloadResume: "downloadResume", downloadRemove: "downloadRemove", downloadSeason: "downloadSeason", downloadDemo: "downloadDemo", editMetadata: "editMetadata", editMetadataImage: "editMetadataImage", editMetadataMatchAlbumInfo: "editMetadataMatchAlbumInfo", exploreHubNavigate: "exploreHubNavigate", externalNavigate: "externalNavigate", externalAdNavigate: "externalAdNavigate", featuredSetsNavigate: "featuredSetsNavigate", findAlbumInfo: "findAlbumInfo", flexHubNavigate: "flexHubNavigate", genericPlay: "genericPlay", importPlaylists: "importPlaylists", invoke: "invoke", invokeGlobalCommand: "invokeGlobalCommand", launchApp: "launchApp", launchHelpApp: "launchHelpApp", launchInteractiveApp: "launchInteractiveApp", manageFolders: "manageFolders", mediaItemDetailsNavigate: "mediaItemDetailsNavigate", mediaStatusSubscriptionSignupAction: "mediaStatusSubscriptionSignupAction", more: "more", moveListItemDown: "moveListItemDown", moveListItemToBottom: "moveListItemToBottom", moveListItemToTop: "moveListItemToTop", moveListItemUp: "moveListItemUp", musicCollectionNavigate: "musicCollectionNavigate", musicDeepLinkDetails: "musicDeepLinkDetails", musicDeepLinkLocation: "musicDeepLinkLocation", musicPinToStartPlayAndNavigate: "musicPinToStartPlayAndNavigate", navigate: "navigate", navigateToDefault: "navigateToDefault", navigateToVideoDetails: "navigateToVideoDetails", newMusicMarketplaceNavigate: "newMusicMarketplaceNavigate", notificationClear: "notificationClear", nowPlayingNavigate: "nowPlayingNavigate", openAbout: "openAbout", openFeedbackDialog: "openFeedbackDialog", openFile: "openFile", pickPlaylist: "pickPlaylist", pinMediaItem: "pinMediaItem", pinToStartScreen: "pinToStartScreen", playAll: "playAll", playArtist: "playArtist", playFreeOffer: "playFreeOffer", playMedia: "playMedia", playPlaylist: "playPlaylist", playQuery: "playQuery", playSmartDJ: "playSmartDJ", playOnXbox: "playOnXbox", playlistDetailsNavigate: "playlistDetailsNavigate", purchase: "purchase", purchaseSubscriptionOffer: "purchaseSubscriptionOffer", radioNavigate: "radioNavigate", readerAction: "readerAction", refreshCollection: "refreshCollection", renamePlaylist: "renamePlaylist", removeFromPlaybackSession: "removeFromPlaybackSession", removeFromList: "removeFromList", removeFromPlaylist: "removeFromPlaylist", repeatNowPlaying: "repeatNowPlaying", resetSearchFilter: "resetSearchFilter", resetSearchHub: "resetSearchHub", restorePurchases: "restorePurchases", saveNowPlayingPlaylist: "saveNowPlayingPlaylist", search: "search", searchByContext: "searchByContext", searchArtist: "searchArtist", searchResultsNavigate: "searchResultsNavigate", selectArtist: "selectArtist", selectPlaylist: "selectPlaylist", setBackgroundImage: "setBackgroundImage", share: "share", shiftDashboard: "shiftDashboard", shuffleNowPlaying: "shuffleNowPlaying", showAccountPicker: "showAccountPicker", showFindFriendsFlyout: "showFindFriendsFlyout", showItemDetails: "showItemDetails", showImmersiveDetails: "showImmersiveDetails", showActivityOverlay: "showActivityOverlay", showLocalGrovelInfoDialog: "showLocalGrovelInfoDialog", showMusicVideoContextualAppbar: "showMusicVideoContextualAppbar", showPlaylistItemInformation: "showPlaylistItemInformation", showTrackContextualAppbar: "showTrackContextualAppbar", showSwitcherOverlay: "showSwitcherOverlay", showVideoDownloadManager: "showVideoDownloadManager", showWebHostDialog: "showWebHostDialog", showPopOver: "showPopOver", shuffleAllMusic: "shuffleAllMusic", signIn: "signIn", signInRequiredNavigate: "signInRequiredNavigate", signInAndOnlineRequiredNavigate: "signInAndOnlineRequiredNavigate", signOut: "signOut", skipBackward: "skipBackward", skipForward: "skipForward", studiosAndNetworksGalleryNavigate: "studiosAndNetworksGalleryNavigate", subscriptionAddToMyMusic: "subscriptionAddToMyMusic", subscriptionDownload: "subscriptionDownload", subscriptionSignup: "subscriptionSignup", subscriptionWithSignIn: "subscriptionWithSignIn", switchVideoDefinition: "switchVideoDefinition", toggleMusicVideoPlayback: "toggleMusicVideoPlayback", topMusicMarketplaceNavigate: "topMusicMarketplaceNavigate", trackPurchase: "trackPurchase", switchLanguage: "switchLanguage", unpinFromStartScreen: "unpinFromStartScreen", userEngagementCollectionMessage: "userEngagementCollectionMessage", videoCollectionMovieNavigate: "videoCollectionMovieNavigate", videoCollectionNavigate: "videoCollectionNavigate", videoCollectionOtherNavigate: "videoCollectionOtherNavigate", videoCollectionTvNavigate: "videoCollectionTvNavigate", videoDetailsNavigate: "videoDetailsNavigate", videoDeepLinkLocation: "videoDeepLinkLocation", videoMarketplaceNavigate: "videoMarketplaceNavigate", videoPostRollNavigate: "videoPostRollNavigate", videoRecommendationsNavigate: "videoRecommendationsNavigate", videoWatchlistNavigate: "videoWatchlistNavigate", watchOnXbox: "watchOnXbox", testAction: "testAction", testAction2: "testAction2", testPanelAction: "testPanelAction", testPanelAction2: "testPanelAction2", testPanelAction3: "testPanelAction3", testPanelAction4: "testPanelAction4", notificationCloudContent: "notificationCloudContent", notificationCloudContentV2: "notificationCloudContentV2", notificationDetailsNetworkStatus: "notificationDetailsNetworkStatus", notificationLocalContent: "notificationLocalContent", notificationNetworkStatus: "notificationNetworkStatus", notificationPartialContent: "notificationPartialContent"
});
WinJS.Namespace.define("MS.Entertainment.UI", {AppBarActions: {
        addTo: "addTo", addToNowPlaying: "addToNowPlaying", addLocalArtistToNowPlaying: "addLocalArtistToNowPlaying", addMarketplaceArtistToNowPlaying: "addMarketplaceArtistToNowPlaying", addToMyMusic: "addToMyMusic", addToPlaylist: "addToPlaylist", addToOtherPlaylist: "addToOtherPlaylist", addTrackToPlaylist: "addTrackToPlaylist", artistDetails: "artistDetails", buyCurrentSeason: "buyCurrentSeason", buyEpisode: "buyEpisode", buySeason: "buySeason", buyVideo: "buyVideo", clearSelection: "clearSelection", closeSmartGlassActivity: "closeSmartglassActivity", closeSmartGlassController: "closeSmartGlassController", createNewPlaylist: "createNewPlaylist", deleteMedia: "deleteMedia", deleteSeries: "deleteSeries", deletePlaylist: "deletePlaylist", deleteSmartDJ: "deleteSmartDJ", downloadFromMarketplace: "downloadFromMarketplace", downloadSeason: "downloadSeason", editMetadata: "editMetadata", editMetadataImage: "editMetadataImage", editMetadataMatchAlbumInfo: "editMetadataMatchAlbumInfo", exploreAlbum: "exploreAlbum", findAlbumInfo: "findAlbumInfo", getOnXbox360: "getOnXbox360", globalCommandHelpApp: "globalCommandHelpApp", pinToStartScreen: "pinToStartScreen", unpinFromStartScreen: "unpinFromStartScreen", importPlaylists: "importPlaylists", mediaProperties: "mediaProperties", moveListItemDown: "moveListItemDown", moveListItemToBottom: "moveListItemToBottom", moveListItemToTop: "moveListItemToTop", moveListItemUp: "moveListItemUp", movieDetails: "movieDetails", navigateBack: "navigateBack", navigateToDefault: "navigateToDefault", navigateToHome: "navigateToHome", navigateToNowPlaying: "navigateToNowPlaying", navigateToWatchlist: "navigateToWatchlist", openAbout: "openAbout", openFeedbackDialog: "openFeedbackDialog", openFile: "openFile", playContinuous: "playContinuous", playFreeOffer: "playFreeOffer", playMusicVideo: "playMusicVideo", playMusicVideoFromTrack: "playMusicVideoFromTrack", playNow: "playNow", playDisabled: "playDisabled", playOnXbox360: "playOnXbox360", playTrackOnXbox360: "playTrackOnXbox360", playSelection: "playSelection", playSelectionContinuous: "playSelectionContinuous", playSmartDJ: "playSmartDJ", playTopSongs: "playTopSongs", playTrailer: "playTrailer", playVideo: "playVideo", previewSelection: "previewSelection", previewTrack: "previewTrack", purchaseTrackFromMarketplace: "purchaseTrackFromMarketplace", purchaseAlbumFromMarketplace: "purchaseAlbumFromMarketplace", removeFailedVideo: "removeFailedVideo", removeFromList: "removeFromList", removeFromPlaylist: "removeFromPlaylist", removeFromNowPlaying: "removeFromNowPlaying", removeFailedDownload: "removeFailedDownload", renamePlaylist: "renamePlaylist", rentVideo: "rentVideo", restorePurchases: "restorePurchases", restartVideo: "restartVideo", resumeVideo: "resumeVideo", saveNowPlayingPlaylist: "saveNowPlayingPlaylist", search: "search", seasonDetails: "seasonDetails", seriesDetails: "seriesDetails", setBackgroundImage: "setBackgroundImage", showDownloadManager: "showDownloadManager", showPlaylistItemInformation: "showPlaylistItemInformation", signIn: "signIn", subscriptionDownload: "subscriptionDownload", tryDownloadAgain: "tryDownloadAgain", toggleSwitcher: "toggleSwitcher", toggleMusicVideoPlayback: "toggleMusicVideoPlayback", subscriptionSignup: "subscriptionSignup"
    }})
})();
/* >>>>>>/framework/videoactionidentifiers.js:23042 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Actions) {
                (function(ActionIdentifiers) {
                    ActionIdentifiers.changeTvSeason = "changeTvSeason";
                    ActionIdentifiers.deepLinkConfigureVideoQualitySelector = "deepLinkConfigureVideoQualitySelector";
                    ActionIdentifiers.featuredMoviesMarketplaceNavigate = "featuredMoviesMarketplaceNavigate";
                    ActionIdentifiers.featuredTvMarketplaceNavigate = "featuredTvMarketplaceNavigate";
                    ActionIdentifiers.lastNightTvMarketplaceNavigate = "lastNightTvMarketplaceNavigate";
                    ActionIdentifiers.moviesFeaturedSetsMarketplaceNavigate = "moviesFeaturedSetsMarketplaceNavigate";
                    ActionIdentifiers.moviesStoreNavigate = "moviesStoreNavigate";
                    ActionIdentifiers.newMoviesMarketplaceNavigate = "newMoviesMarketplaceNavigate";
                    ActionIdentifiers.newTvMarketplaceNavigate = "newTvMarketplaceNavigate";
                    ActionIdentifiers.personalVideoNavigate = "personalVideoNavigate";
                    ActionIdentifiers.topMoviesMarketplaceNavigate = "topMoviesMarketplaceNavigate";
                    ActionIdentifiers.topTvMarketplaceNavigate = "topTvMarketplaceNavigate";
                    ActionIdentifiers.tvFeaturedSetsMarketplaceNavigate = "tvFeaturedSetsMarketplaceNavigate";
                    ActionIdentifiers.tvStoreNavigate = "tvStoreNavigate";
                    ActionIdentifiers.videoDeepLinkDetails = "videoDeepLinkDetails"
                })(Actions.ActionIdentifiers || (Actions.ActionIdentifiers = {}));
                var ActionIdentifiers = Actions.ActionIdentifiers
            })(UI.Actions || (UI.Actions = {}));
            var Actions = UI.Actions
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/automationidentifiers.js:23076 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.UI.AutomationIds", {
        accountProvisioningChildWebLink: "accountProvisioningChildWebLink", accountProvisioningTOS: "accountProvisioningTOS", accountProvisioningPrivacy: "accountProvionsingPrivacy", addToPlaylistAction: "addToPlaylistAction", addToNowPlaying: "addToNowPlaying", albumDetailsNavigate: "albumDetailsNavigate", albumDeviceDetailsNavigate: "albumDeviceDetailsNavigate", albumPurchase: "albumPurchase", artistMediaNavigate: "artistMediaNavigate", artistDetailsNavigate: "artistDetailsNavigate", appBarAddLocalArtistToNowPlaying: "appBarAddLocalArtistToNowPlaying", appBarAddMarketplaceArtistToNowPlaying: "appBarAddMarketplaceArtistToNowPlaying", appBarAddTo: "appBarAddTo", appBarAddToMyMusic: "appBarAddToMyMusic", appBarSubscriptionAddToMyMusic: "appBarSubscriptionAddToMyMusic", appBarAddToCloud: "appBarAddToCloud", appBarAddToNowPlaying: "appBarAddToNowPlaying", appBarArtistDetails: "appBarArtistDetails", appBarBuyCurrentSeason: "appBarBuyCurrentSeason", appBarBuyEpisode: "appBarBuyEpisode", appBarBuySeason: "appBarBuySeason", appBarBuyVideo: "appBarBuyVideo", appBarCloseCommandingPopover: "appBarCloseCommandingPopover", appBarClearSelection: "appBarClearSelection", appBarCloseSmartGlassActivity: "appBarCloseSmartGlassActivity", appBarCloseSmartGlassController: "appBarCloseSmartGlassController", appBarDeleteSmartDJ: "appBarDeleteSmartDJ", appBarDownloadAgain: "appBarDownloadAgain", appBarDownloadFromMarketplace: "appBarDownloadFromMarketplace", appBarDownloadSeason: "appBarDownloadSeason", appBarExploreAlbum: "appBarExploreAlbum", appBarFindAlbumInfo: "appBarFindAlbumInfo", appBarGetOnXbox360: "appBarGetOnXbox360", appBarPinToStartScreen: "appBarPinToStartScreen", appBarMediaProperties: "appBarMediaProperties", appBarMovieDetails: "appBarMovieDetails", appBarNavigateBack: "appBarNavigateBack", appBarNavigateToDefault: "appBarNavigateToDefault", appBarNavigateToHome: "appBarNavigateToHome", appBarNavigateToNowPlaying: "appBarNavigateToNowPlaying", appBarNavigateToWatchlist: "appBarNavigateToWatchlist", appBarOpenAbout: "appBarOpenAbout", appBarOpenFile: "appBarOpenFile", appBarPlayFreeVideoOffer: "appBarPlayFreeVideoOffer", appBarPlayDisabled: "appBarPlayDisabled", appBarPlayNow: "appBarPlayNow", appBarPlayOnXbox360: "appBarPlayOnXbox360", appBarPlaySelection: "appBarPlaySelection", appBarPlaySmartDJ: "appBarPlaySmartDJ", appBarPlayTopSongs: "appBarPlayTopSongs", appBarPlayTrackOnXbox360: "appBarPlayTrackOnXbox360", appBarPlayTrailer: "appBarPlayTrailer", appBarPreviewTrack: "appBarPreviewTrack", appBarPurchaseAlbumFromMarketplace: "appBarPurchaseAlbumFromMarketplace", appBarPurchaseTrackFromMarketplace: "appBarPurchaseTrackFromMarketplace", appBarRemoveDownload: "appBarRemoveDownload", appBarRentVideo: "appBarRentVideo", appBarRestartVideo: "appBarRestartVideo", appBarResumeVideo: "appBarResumeVideo", appBarRestorePurchases: "appBarRestorePurchases", appBarSaveNowPlaying: "appBarSaveNowPlaying", appBarSeasonDetails: "appBarSeasonDetails", appBarSearch: "appBarSearch", appBarSeriesDetail: "appBarSeriesDetail", appBarShowDownloadManager: "appBarShowDownloadManager", appBarSignIn: "appBarSignIn", appBarSubscriptionDownload: "appBarSubscriptionDownload", appBarSubscriptionSignup: "appBarSubscriptionSignup", appBarToggleSwitcher: "appBarToggleSwitcher", appBarUnpinFromStartScreen: "appBarUnpinFromStartScreen", appBarUpsellPlayPause: "appBarUpsellPlayPause", criticReviewSelect: "criticReviewSelect", collectionCreatePlaylist: "collectionCreatePlaylist", collectionCreateSmartDJ: "collectionCreateSmartDJ", collectionEmptyShowAllMusicLink: "collectionEmptyShowAllMusicLink", collectionFilterLink: "collectionFilterLink", collectionNavigate: "collectionNavigate", collectionImportPlaylist: "collectionImportPlaylist", copy: "copy", createPlaylist: "createPlaylist", dashboardNewReleasesMoreButton: "dashboardNewReleasesMoreButton", dashboardNewMusicVideosButton: "dashboardNewMusicVideosButton", dashboardHomePlaylistsButton: "dashboardHomePlaylistsButton", dashboardHomeCollectionButton: "dashboardHomeCollectionButton", dashboardHomeSearch: "dashboardHomeSearch", dashboardFeaturedSearch: "dashboardFeaturedSearch", dashboardSmartDJCollection: "dashboardSmartDJCollection", dashboardSmartDJSearch: "dashboardSmartDJSearch", dashboardSmartDJSearchArtist: "dashboardSmartDJSearchArtist", dashboardTopMusicSearch: "dashboardTopMusicSearch", dashboardHomeUpsellPanelStartTrial: "dashboardHomeUpsellPanelStartTrial", dashboardHomeUpsellPanelLearnMore: "dashboardHomeUpsellPanelLearnMore", dashboardFeaturedMoreButton: "dashboardFeaturedMoreButton", dashboardTopMusicFirstColumnMoreButton: "dashboardTopMusicFirstColumnMoreButton", dashboardTopMusicSecondColumnMoreButton: "dashboardTopMusicSecondColumnMoreButton", dashboardVideoBrowseMovieMarketplace: "dashboardVideoBrowseMovieMarketplace", dashboardVideoBrowseTvMarketplace: "dashboardVideoBrowseTvMarketplace", dashboardVideoFeaturedSets: "dashboardVideoFeaturedSets", dashboardVideoRecommendations: "dashboardVideoRecommendations", deepLink: "deepLink", deepLinkFeatureEnablementAction: "deepLinkFeatureEnablementAction", deepLinkLaunchFeedbackFlyout: "deepLinkLaunchFeedbackFlyout", deepLinkShowPerfTrackLog: "deepLinkShowPerfTrackLog", deepLinkPlay: "deepLinkPlay", deepLinkPlayArtist: "deepLinkPlayArtist", deepLinkPlayPin: "deepLinkPlayPin", deepLinkPlaySmartDJ: "deepLinkPlaySmartDJ", deviceDomainHelpPage: "deviceDomainHelpPage", deviceDomainShowDevices: "deviceDomainShowDevices", doubleClickPlay: "doubleClickPlay", editMetadata: "editMetadata", editMetadataImage: "editMetadataImage", editMetadataMatchAlbumInfo: "editMetadataMatchAlbumInfo", explicitAlbumNotification: "explicitAlbumNotification", explicitAlbumMixedNotification: "explicitAlbumMixedNotification", exploreHubNavigate: "exploreHubNavigate", exploreUpsellLearnMore: "exploreUpsellLearnMore", exploreUpsellMusicPassSignIn: "exploreUpsellMusicPassSignIn", exploreUpsellMusicPassSignUp: "exploreUpsellMusicPassSignUp", failedPanelNavigateToMarketplace: "failedPanelNavigateToMarketplace", flexHubNavigate: "flexHubNavigate", flexHubSelected: "flexHubSelected", flyoutAddToPlaylist: "flyoutAddToPlaylist", flyoutAddTrackToPlaylist: "flyoutAddTrackToPlaylist", flyoutCreatePlaylist: "flyoutCreatePlaylist", flyoutPlayArtist: "flyoutPlayArtist", flyoutPlaySmartDJ: "flyoutPlaySmartDJ", flyoutOtherPlaylist: "flyoutOtherPlaylist", freeTrialButton: "freeTrialButton", freeLimitsSubscriptionSignup: "freeLimitsSubscriptionSignup", galleryPlaySmartDJ: "galleryPlaySmartDJ", genericPlay: "genericPlay", genrePivot: "genre", globalCommandHelpApp: "globalCommandHelpApp", invokeGlobalCommand: "invokeGlobalCommand", launchAppDeepLinkPurchasePDLC: "launchAppDeepLinkPurchasePDLC", launchAppMoreAboutLibraries: "launchAppMoreAboutLibraries", launchAppMusicApp: "launchAppMusicApp", launchAppPlayToXbox: "launchAppPlayToXbox", launchAppPurchaseGame: "launchAppPurchaseGame", launchAppStoreUpgrade: "launchAppStoreUpgrade", launchAppVideoApp: "launchAppVideoApp", libraryPlaySmartDJ: "libraryPlaySmartDJ", mediaItemDetailsNavigate: "mediaItemDetailsNavigate", miniProfileHubPanelSignIn: "miniProfileHubPanelSignIn", mouseNavigateBack: "mouseNavigateBack", moveListItemDown: "moveListItemDown", moveListItemToBottom: "moveListItemToBottom", moveListItemToTop: "moveListItemToTop", moveListItemUp: "moveListItemUp", musicDeepLinkLocation: "musicDeepLinkLocation", musicDeepLinkDetails: "musicDeepLinkDetails", musicPinToStartPlayAndNavigate: "musicPinToStartPlayAndNavigate", muteVolume: "muteVolume", navigate: "navigate", navigateToDefault: "navigateToDefault", navigateToVideoDetails: "navigateToVideoDetails", navPaneCreatePlaylist: "navPaneCreatePlaylist", navPaneImportPlaylists: "navPaneImportPlaylists", newMusicMarketplaceNavigate: "newMusicMarketplaceNavigate", nowPlayingNavigate: "nowPlayingNavigate", nowPlayingTransportPause: "nowPlayingTransportPause", nowPlayingTransportPlay: "nowPlayingTransportPlay", nowPlayingTransportPlayPause: "nowPlayingTransportPlayPause", nowPlayingTransportSkipBack: "nowPlayingTransportSkipBack", nowPlayingTransportSkipBackHold: "nowPlayingTransportSkipBackHold", nowPlayingTransportSkipForward: "nowPlayingTransportSkipForward", nowPlayingTransportSkipForwardHold: "nowPlayingTransportSkipForwardHold", nowPlayingTransportVolume: "nowPlayingTransportVolume", nowPlayingTransportVolumeHold: "nowPlayingTransportVolumeHold", offlineFullyStreamingAlbumNotification: "offlineFullyStreamingAlbumNotification", offlineFullyStreamingPlaylistNotification: "offlineFullyStreamingPlaylistNotification", offlinePartiallyStreamingAlbumNotification: "offlinePartiallyStreamingAlbumNotification", offlinePartiallyStreamingPlaylistNotification: "offlinePartiallyStreamingPlaylistNotification", openFeedbackDialog: "openFeedbackDialog", playbackSkipBackward: "playbackSkipBackward", playbackSkipForward: "playbackSkipForward", playMedia: "playMedia", playMusicVideo: "playMusicVideo", playMusicVideoFromTrack: "playMusicVideoFromTrack", playQueryAction: "playQueryAction", playlistAddToActivePlaylistAction: "playlistAddToActivePlaylistAction", playlistAddToPlaylistAction: "playlistAddToPlaylistAction", playlistAddTrackToActivePlaylistAction: "playlistAddTrackToActivePlaylistAction", playlistAddTrackToPlaylistAction: "playlistAddTrackToPlaylistAction", playlistCreatePlaylistAction: "playlistCreatePlaylistAction", playlistCreatePlaylistFromNowPlayingAction: "playlistCreatePlaylistFromNowPlayingAction", playlistDeletePlaylist: "playlistDeletePlaylist", playlistDetailsNavigate: "playlistDetailsNavigate", playlistFlyoutAddToPlaylist: "playlistFlyoutAddToPlaylist", playlistFlyoutAddTrackToPlaylist: "playlistFlyoutAddTrackToPlaylist", playlistFlyoutCreatePlaylist: "playlistFlyoutCreatePlaylist", playlistMoveTrackDown: "playlistMoveTrackDown", playlistMoveTrackUp: "playlistMoveTrackUp", playlistNewPlaylistNameEntry: "playlistNewPlaylistNameEntry", playlistRemoveFromPlaylist: "playlistRemoveFromPlaylist", playlistRemoveFromNowPlaying: "playlistRemoveFromNowPlaying", playlistRenamePlaylistAction: "playlistRenamePlaylistAction", playlistRenamePlaylistNameEntry: "playlistRenamePlaylistNameEntry", playlistSaveNowPlayingPlaylistNameEntry: "playlistSaveNowPlayingPlaylistNameEntry", playlistShowPlaylistInformation: "playlistShowPlaylistInformation", playlistSubscriptionAddToMyMusic: "playlistSubscriptionAddToMyMusic", playlistWebCreatePlaylistAction: "playlistWebCreatePlaylistAction", pinToStartPlay: "pinToStartPlay", radioNavigate: "radioNavigate", readerAction: "readerAction", removeFromList: "removeFromList", refreshPanel: "refreshPanel", runTestDeepLinkAction: "runTestDeepLinkAction", searchResultsNavigate: "searchResultsNavigate", setBackgroundImageAction: "setBackgroundImageAction", settingsAccountBillingContact: "settingsAccountBillingContact", settingsAccountBillingHistory: "settingsAccountBillingHistory", settingsAccountContactPreferences: "settingsAccountContactPreferences", settingsAccountManageDevices: "settingsAccountManageDevices", settingsAccountManagePayment: "settingsAccountManagePayment", settingsAccountPrivacy: "settingsAccountPrivacy", settingsShowDevice: "settingsShowDevice", settingsSubscriptionSignup: "settingsSubscriptionSignup", settingsHelp: "settingsHelp", showAccountPicker: "showAccountPicker", showDownloadManager: "showDownloadManager", showImmersiveDetails: "showImmersiveDetails", showItemDetails: "showItemDetails", showLocalGrovelInfoDialog: "showLocalGrovelInfoDialog", showMusicVideoContextualAppbar: "showMusicVideoContextualAppbar", showNowPlayingMoreActions: "showNowPlayingMoreActions", showTrackContextualAppbar: "showTrackContextualAppbar", showPlaylist: "showPlaylist", showPopover: "showPopover", shuffleAllMusic: "shuffleAllMusic", signIn: "signIn", smartButtonAddToDisabled: "smartButtonAddToDisabled", smartButtonAddToFromPopover: "smartButtonAddToFromPopover", smartButtonAddToFromTrackInline: "smartButtonAddToFromTrackInline", smartButtonAddToFromArtistImmersive: "smartButtonAddToFromArtistImmersive", smartButtonAddToFromAlbumDetails: "smartButtonAddToFromAlbumDetails", smartButtonLaunchInteractiveApp: "smartButtonLaunchInteractiveApp", smartButtonWatch: "smartButtonWatch", smartButtonBuyVideo: "smartButtonBuyVideo", smartButtonBuyEpisode: "smartButtonBuyEpisode", smartButtonRentVideo: "smartButtonRentVideo", smartBuyPlayFreeVideoOffer: "smartBuyPlayFreeVideoOffer", smartButtonPlay: "smartButtonPlay", smartButtonPlayTrack: "smartButtonPlayTrack", smartButtonPlayNowPlayingTrack: "smartButtonPlayNowPlayingTrack", smartButtonRestart: "smartButtonRestart", smartButtonResume: "smartButtonResume", smartButtonPlayDisabled: "smartButtonPlayDisabled", smartButtonSwitchVideoDefinition: "smartButtonSwitchVideoDefinition", smartButtonSwitchLanguage: "smartButtonSwitchLanguage", smartButtonFindAlbumInfo: "smartButtonFindAlbumInfo", smartButtonAddToNowPlaying: "smartButtonAddToNowPlaying", smartButtonAddAlbumToNowPlaying: "smartButtonAddAlbumToNowPlaying", smartButtonAddPlaylistToNowPlaying: "smartButtonAddPlaylistToNowPlaying", smartButtonAddTrackToNowPlaying: "smartButtonAddTrackToNowPlaying", smartButtonContentNotAvailable: "smartButtonContentNotAvailable", smartButtonAddMarketplaceArtistToNowPlaying: "smartButtonAddMarketplaceArtistToNowPlaying", smartButtonAddLocalArtistToNowPlaying: "smartButtonAddLocalArtistToNowPlaying", smartButtonAddRemoveItemWatchlist: "smartButtonAddRemoveItemWatchlist", smartButtonMoveListItemDown: "smartButtonMoveListItemDown", smartButtonMoveListItemToBottom: "smartButtonMoveListItemToBottom", smartButtonMoveListItemToTop: "smartButtonMoveListItemToTop", smartButtonMoveListItemUp: "smartButtonMoveListItemUp", smartButtonOverflowAction: "smartButtonOverflowAction", smartButtonPinToDashboard: "smartButtonPinToDashboard", smartButtonPlaySeason: "smartButtonPlaySeason", smartButtonPlayAnyArtist: "smartButtonPlayAnyArtist", smartButtonPlayPlaylist: "smartButtonPlayPlaylist", smartButtonNewSmartDj: "smartButtonNewSmartDj", smartButtonPinToStartScreen: "smartButtonPinToStartScreen", smartButtonUnpinFromStartScreen: "smartButtonUnpinFromStartScreen", smartButtonPlayArtist: "smartButtonPlayArtist", smartButtonPlayArtistSmartDj: "smartButtonPlayArtistSmartDj", smartButtonDelete: "smartButtonDelete", smartButtonDeleteSmartDj: "smartButtonDeleteSmartDj", smartButtonAddToMyMusic: "smartButtonAddToMyMusic", smartButtonAddToMyMusicAlbum: "smartButtonAddToMyMusicAlbum", smartButtonAddToMyMusicAlbumOp: "smartButtonAddToMyMusicAlbumOp", smartButtonAddToMyMusicTrack: "smartButtonAddToMyMusicTrack", smartButtonAddToMyMusicTrackOp: "smartButtonAddToMyMusicTrackOp", smartButtonDownload: "smartButtonDownload", smartButtonDownloadCancel: "smartButtonDownloadCancel", smartButtonDownloadFreeExtra: "smartButtonDownloadFreeExtra", smartButtonDownloadPause: "smartButtonDownloadPause", smartButtonDownloadResume: "smartButtonDownloadResume", smartButtonDownloadRetry: "smartButtonDownloadRetry", smartButtonDownloadSeason: "smartButtonDownloadSeason", smartButtonTryAgain: "smartButtonTryAgain", smartButtonRemove: "smartButtonRemove", smartButtonRenamePlaylist: "smartButtonRenamePlaylist", smartButtonMusicPassSignup: "smartButtonMusicPassSignup", smartButtonPlayTrailer: "smartButtonPlayTrailer", smartButtonPlayGameTrailer: "smartButtonPlayGameTrailer", smartButtonPlayOnXbox: "smartButtonPlayOnXbox", smartButtonWatchTrailer: "smartButtonWatchTrailer", smartButtonWatchOnXbox: "smartButtonWatchOnXbox", smartButtonMovieDetails: "smartButtonMovieDetails", smartButtonArtistDetails: "smartButtonArtistDetails", smartButtonSeriesDetails: "smartButtonSeriesDetails", smartButtonSeasonDetails: "smartButtonSeasonDetails", smartButtonGameDetails: "smartButtonGameDetails", smartButtonCompareGameActivities: "smartButtonCompareGameActivities", smartButtonGameExtras: "smartButtonGameExtras", smartButtonBuyModernGame: "smartButtonBuyModernGame", smartButtonPlayOnPc: "smartButtonPlayOnPc", smartButtonPlayAlbum: "smartButtonPlayAlbum", smartButtonPlayAlbumPreview: "smartButtonPlayAlbumPreview", smartButtonPlayTrackPreview: "smartButtonPlayTrackPreview", smartButtonPlayArtistPreview: "smartButtonPlayArtistPreview", smartButtonArtistLocalPlayAll: "smartButtonArtistLocalPlayAll", smartButtonArtistMarketplacePlayAll: "smartButtonArtistMarketplacePlayAll", smartButtonArtistPlayVideos: "smartButtonArtistPlayVideos", smartButtonBuyAlbum: "smartButtonBuyAlbum", smartButtonBuyTrack: "smartButtonBuyTrack", smartButtonDisabledBuyTrack: "smartButtonDisabledBuyTrack", smartButtonBuyExtra: "smartButtonBuyExtra", smartButtonBuyGame: "smartButtonBuyGame", smartButtonBuySeason: "smartButtonBuySeason", smartButtonBuyCurrentSeason: "smartButtonBuyCurrentSeason", smartButtonBuyCurrentSeasonPass: "smartButtonBuyCurrentSeasonPass", smartButtonBuyNextSeason: "smartButtonBuyNextSeason", smartButtonBuyNextSeasonPass: "smartButtonBuyNextSeasonPass", smartButtonExtraPurchasedDisabled: "smartButtonExtraPurchasedDisabled", smartButtonGamePurchasedDisabled: "smartButtonGamePurchasedDisabled", smartButtonDemoPurchasedDisabled: "smartButtonDemoPurchasedDisabled", smartButtonTryGameDemo: "smartButtonTryGameDemo", smartButtonShowDownloadManager: "smartButtonShowDownloadManager", smartButtonShowPlaylist: "smartButtonShowPlaylist", smartButtonRemoveFromList: "smartButtonRemoveFromList", smartButtonRemoveFromPlaylist: "smartButtonRemoveFromPlaylist", smartButtonRemoveFromNowPlaying: "smartButtonRemoveFromNowPlaying", smartButtonDeleteMedia: "smartButtonDeleteMedia", smartButtonDeleteSeries: "smartButtonDeleteSeries", smartButtonDeletePlaylist: "smartButtonDeletePlaylist", smartButtonMediaProperties: "smartButtonMediaProperties", smartButtonShuffleAll: "smartButtonShuffleAll", smartButtonBrowseAllMusic: "smartButtonBrowseAllMusic", smartButtonGetFreeMusicPassTrial: "smartButtonGetFreeMusicPassTrial", smartButtonBuyActivity: "smartButtonBuyActivity", smartButtonPlayActivity: "smartButtonPlayActivity", smartButtonGetGold: "smartButtonGetGold", smartButtonPlaylistItemInformation: "smartButtonPlaylistItemInformation", smartButtonSaveNowPlayingPlaylist: "smartButtonSaveNowPlayingPlaylist", smartButtonPlayRelatedArtist: "smartButtonPlayRelatedArtist", smartButtonRatingPicker: "smartButtonRatingPicker", smartButtonChangeSeason: "smartButtonChangeSeason", smartButtonInCollection: "smartButtonInCollection", smartButtonViewInCollection: "smartButtonViewInCollection", startRadioStation: "startRadioStation", subscriptionDownload: "subscriptionDownload", subscriptionSignup: "subscriptionSignup", subscriptionSignupWithSignIn: "subscriptionSignupWithSignIn", subscriptionSignupPurchaseOffer: "subscriptionSignupPurchaseOffer", subscriptionSignupRedeemCode: "subscriptionSignupRedeemCode", socialBuzzNavigateToProfile: "socialBuzzNavigateToProfile", subgenrePivot: "subgenre", textMessageDeleteButton: "textMessageDeleteButton", textMessageReplyButton: "textMessageReplyButton", toggleMusicVideoPlayback: "toggleMusicVideoPlayback", topMusicMarketplaceButton: "topMusicMarketplaceButton", topMusicMarketplaceNavigate: "topMusicMarketplaceNavigate", trackPurchase: "trackPurchase", transportClosedCaption: "transportClosedCaption", transportNextTrack: "transportNextTrack", transportPause: "transportPause", transportPlay: "transportPlay", transportPlayPause: "transportPlayPause", transportPreviousTrack: "transportPreviousTrack", transportRepeat: "transportRepeat", transportPlaybackOptions: "transportPlaybackOptions", transportShuffle: "transportShuffle", transportSkipBack: "transportSkipBack", transportSkipBackHold: "transportSkipBackHold", transportSkipForward: "transportSkipForward", transportSkipForwardHold: "transportSkipForwardHold", transportSmartGlass: "transportSmartGlass", transportXbox: "transportXbox", transportVolume: "transportVolume", transportVolumeHold: "transportVolumeHold", unsnapButtonAction: "unsnapButtonAction", userFeedbackDialogPrivacyLink: "userFeedbackDialogPrivacyLink", verticalPivotSelected: "verticalPivotSelected", videoAdSubscriptionSignup: "videoAdSubscriptionSignup", videoDeepLinkLocation: "videoDeepLinkLocation", videoNavigateToPreviewBrowse: "videoNavigateToPreviewBrowse", videoPostRollPlayTimer: "videoPostRollPlayTimer", viewMoreImmersive: "viewMoreImmersive", voiceNavigateBack: "voiceNavigateBack", whatsNewLink: "whatsNewLink"
    })
})()
})();
/* >>>>>>/framework/videoautomationidentifiers.js:23087 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(AutomationIds) {
                AutomationIds.changeTvSeason = "changeTvSeason";
                AutomationIds.externalRottenTomatoesLinkNavigate = "externalRottenTomatoesLinkNavigate";
                AutomationIds.featuredMoviesMarketplaceNavigate = "featuredMoviesMarketplaceNavigate";
                AutomationIds.featuredTvMarketplaceNavigate = "featuredTvMarketplaceNavigate";
                AutomationIds.lastNightTvMarketplaceNavigate = "lastNightTvMarketplaceNavigate";
                AutomationIds.moviesFeaturedSetsMarketplaceNavigate = "moviesFeaturedSetsMarketplaceNavigate";
                AutomationIds.moviesStoreNavigate = "moviesStoreNavigate";
                AutomationIds.newMoviesMarketplaceNavigate = "newMoviesMarketplaceNavigate";
                AutomationIds.newTvMarketplaceNavigate = "newTvMarketplaceNavigate";
                AutomationIds.offlineHeaderNotification = "offlineHeaderNotification";
                AutomationIds.personalVideoNavigate = "personalVideoNavigate";
                AutomationIds.showLocalGrovelInfoDialog = "showLocalGrovelInfoDialog";
                AutomationIds.topMoviesMarketplaceNavigate = "topMoviesMarketplaceNavigate";
                AutomationIds.topTvMarketplaceNavigate = "topTvMarketplaceNavigate";
                AutomationIds.tvFeaturedSetsMarketplaceNavigate = "tvFeaturedSetsMarketplaceNavigate";
                AutomationIds.tvStoreNavigate = "tvStoreNavigate";
                AutomationIds.videoDeepLinkDetails = "videoDeepLinkDetails";
                AutomationIds.videoSearchFilterAll = "videoSearchFilterAll";
                AutomationIds.videoSearchFilterMovies = "videoSearchFilterMovies";
                AutomationIds.videoSearchFilterTv = "videoSearchFilterTv"
            })(UI.AutomationIds || (UI.AutomationIds = {}));
            var AutomationIds = UI.AutomationIds
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/action.js:23123 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        ActionArray: MS.Entertainment.UI.Framework.derive("Array", null, {
            subActions: null, actionsWithSubActions: null, pushSubAction: function addSubAction(actionId, subActionId) {
                    MS.Entertainment.UI.Actions.assert(actionId, "actionId must be defined");
                    MS.Entertainment.UI.Actions.assert(subActionId, "subActionId must be defined");
                    this.actionsWithSubActions = this.actionsWithSubActions || [];
                    this.subActions = this.subActions || {};
                    if (!this.subActions[actionId])
                        this.actionsWithSubActions.push(actionId);
                    this.subActions[actionId] = this.subActions[actionId] || [];
                    this.subActions[actionId].push(subActionId)
                }, hasSubActions: function hasSubActions(actionId) {
                    MS.Entertainment.UI.Actions.assert(actionId, "actionId must be defined");
                    return this.subActions && this.subActions[actionId] && this.subActions[actionId].length > 0
                }
        }, {areSubActionsEqual: function areSubActionsEqual(actionArray1, actionArray2) {
                var arraysAreEqual = true;
                var subActions1 = (actionArray1 && actionArray1.subActions) || {};
                var subActions2 = (actionArray2 && actionArray2.subActions) || {};
                var actionsWithSubActions1 = (actionArray1 && actionArray1.actionsWithSubActions) || [];
                var actionsWithSubActions2 = (actionArray2 && actionArray2.actionsWithSubActions) || [];
                var subActionValues1;
                var subActionValues2;
                if (actionsWithSubActions1.length !== actionsWithSubActions2.length)
                    arraysAreEqual = false;
                else
                    for (var i = 0; arraysAreEqual && i < actionsWithSubActions1.length; i++) {
                        subActionValues1 = subActions1[actionsWithSubActions1[i]];
                        subActionValues2 = subActions1[actionsWithSubActions2[i]];
                        for (var j = 0; j < subActionValues1.length; j++)
                            if (subActionValues1[j] !== subActionValues2[j]) {
                                arraysAreEqual = false;
                                break
                            }
                    }
                return arraysAreEqual
            }}), ExecutionLocation: {
                activity: "activity", canvas: "canvas", engage: "engage", gallery: "gallery", invokeInline: "invokeInline", opportunity: "opportunity", popover: "popover", selection: "selection", nowPlaying: "nowPlaying"
            }, ActionWrapperType: {
                appbarAction: "appbarAction", button: "button"
            }, ActionService: MS.Entertainment.UI.Framework.define(function actionServiceConstructor() {
                this._actionFactories = {}
            }, {
                _actionFactories: null, register: function register(id, factory) {
                        MS.Entertainment.UI.Actions.assert(MS.Entertainment.UI.Actions.ActionIdentifiers.hasOwnProperty(id), "Identifier wasn't found in action list: " + id);
                        MS.Entertainment.UI.Actions.assert(!this._actionFactories.hasOwnProperty(id), "This action identifier has already been registered: " + id);
                        MS.Entertainment.UI.Actions.assert(typeof factory === "function", "Factory method was not a function");
                        this._actionFactories[id] = factory
                    }, isRegistered: function isRegistered(id) {
                        return this._actionFactories.hasOwnProperty(id)
                    }, getAction: function getAction(id) {
                        if (!this._actionFactories.hasOwnProperty(id))
                            throw"Supplied Action Identifier was not registered: " + id;
                        var newAction = this._actionFactories[id]();
                        newAction.id = id;
                        return newAction
                    }, _unregister: function _unregister(id) {
                        delete this._actionFactories[id]
                    }
            })
    });
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.actions, function actionServiceFactory() {
        return new MS.Entertainment.UI.Actions.ActionService
    }, true);
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        Action: MS.Entertainment.defineObservable(function actionConstructor() {
            var that = this;
            var firstCall = true;
            this.bind("parameter", function parameterChanged() {
                if (firstCall) {
                    firstCall = false;
                    return
                }
                that.requeryCanExecute();
                that.requeryCanShow()
            })
        }, {
            parameter: null, shouldShow: false, isEnabled: true, title: null, voiceDisableOverride: false, subActions: null, hasSubActions: false, onComplete: null, onExecuting: null, useRelativePositioning: false, id: null, automationId: null, shouldAutomaticallySendTelemetry: true, isDragAndDropResponse: false, type: null, label: null, section: null, tooltip: null, _getTranslatedDragAndDropParameters: function _getTranslatedDragAndDropParameters() {
                    if (!this.translateDragAndDropParams)
                        return this.parameter;
                    var source = this.parameter && this.parameter.source;
                    var target = this.parameter && this.parameter.target;
                    MS.Entertainment.UI.Actions.assert(source, "Drag-and-drop action parameters do not contain a source parameter, so we don't know what is being dragged.");
                    return this.translateDragAndDropParams(source, target)
                }, execute: function execute(referenceDomElement) {
                    var result;
                    var onExecuting;
                    this.requeryCanExecute();
                    if (this.isEnabled && this.executed) {
                        var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                        eventProvider.traceAction_Invoked(this.id);
                        onExecuting = this.onExecuting && this.onExecuting();
                        onExecuting = WinJS.Promise.as(onExecuting);
                        var parameter = this.parameter;
                        if (this.isDragAndDropResponse)
                            parameter = this._getTranslatedDragAndDropParameters();
                        if (this.shouldAutomaticallySendTelemetry)
                            MS.Entertainment.Utilities.Telemetry.logCommandClicked(this);
                        result = onExecuting.then(function onExecutingComplete() {
                            return this.executed(parameter, referenceDomElement)
                        }.bind(this))
                    }
                    return WinJS.Promise.as(result).then(function onComplete() {
                            if (this.onComplete)
                                return this.onComplete();
                            else
                                return WinJS.Promise.wrap()
                        }.bind(this))
                }, requeryCanShow: function requeryCanShow() {
                    var parameter = this.parameter;
                    if (this.isDragAndDropResponse)
                        parameter = this._getTranslatedDragAndDropParameters();
                    if (this.canShow)
                        this.shouldShow = !!this.canShow(parameter)
                }, requeryCanExecute: function requeryCanExecute() {
                    if (!this.executed) {
                        this.isEnabled = false;
                        return
                    }
                    var parameter = this.parameter;
                    if (this.isDragAndDropResponse)
                        parameter = this._getTranslatedDragAndDropParameters();
                    if (this.canExecute)
                        this.isEnabled = !!this.canExecute(parameter)
                }, setSubActions: function setSubActions(newSubActions) {
                    this.subActions = newSubActions
                }, useOverrideTitleIfExists: function useOverrideTitleIfExists() {
                    if ("overrideTitle" in this)
                        this.title = this["overrideTitle"]
                }
        }), extractMediaItemFromParam: function extractMediaItemFromParam(param) {
                var mediaItem;
                if (param && param.mediaItem)
                    mediaItem = param.mediaItem;
                else
                    mediaItem = param;
                return mediaItem
            }, extractButtonFromParam: function extractButtonFromParam(param) {
                var button;
                if (param && param.button)
                    button = param.button;
                else
                    button = param;
                return button
            }
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {InvokeAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function invokeAction() {
            this.base();
            this.invoker = new MS.Entertainment.Utilities.EventInvoker
        }, {
            invoker: null, invokeEvent: "invoked", executed: function executed(param) {
                    return this.invoker.dispatchEvent(this.invokeEvent, param)
                }, canExecute: function canExecute(param) {
                    return true
                }
        })});
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.invoke, function() {
        return new MS.Entertainment.UI.Actions.InvokeAction
    })
})();
(function runVoiceMixins() {
    MS.Entertainment.Utilities.runVoicePropertyMixins(MS.Entertainment.UI.Actions.Action)
})()
})();
/* >>>>>>/controls/listcontrols.js:23294 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ItemsControl: MS.Entertainment.UI.Framework.defineUserControl(null, function itemsControlConstructor(element, options) {
            this.repeaterContainer = element;
            this._handleChangesInDataSource = this._handleChangesInDataSource.bind(this);
            if (!this.keyboardNavigationManagerClass)
                this.keyboardNavigationManagerClass = MS.Entertainment.Framework.KeyboardNavigationManager;
            if (MS.Entertainment.UI.Framework.getTextDirection() === MS.Entertainment.UI.Framework.TextDirections.RightToLeft) {
                var left = this.bringIntoViewLeftMargin;
                var right = this.bringIntoViewRightMargin;
                this.bringIntoViewLeftMargin = right;
                this.bringIntoViewRightMargin = left
            }
            if (this.virtualize) {
                if (!this.itemSize && !this.getItemSize)
                    throw new Error("itemSize required when using virtualization");
                if (!this.virtualizationAxis)
                    throw new Error("virtualizationOrientation required when using virtualization");
                if (!this.singleAxis && (!this.itemSize.width || !this.itemSize.height))
                    throw new Error("When using multiaxis, you need to supply an itemSize that has a width and height");
                if (this._scroller.attachEvent)
                    this._scrollerAttachEvent = (function(handler, element) {
                        element.attachEvent("onresize", handler);
                        return {cancel: function() {
                                    element.detachEvent("onresize", handler)
                                }}
                    })(this._handleElementResizing.bind(this), this._scroller);
                this._scrollerEvents = MS.Entertainment.UI.Framework.addEventHandlers(this._scroller, {
                    mselementresize: this._handleElementResizing.bind(this), scroll: this._handleScrollingForVirtualization.bind(this)
                })
            }
            this._constructed = true
        }, {
            delayInitializeChildren: false, _constructed: false, keyboardNavigable: false, keyboardNavigationManagerClass: null, keyboardNavigationSetTabIndex: false, _keyboardNavigationManager: null, raisePanelReady: false, ignoreChildrenInitialization: true, _restoreFocusAfterRender: false, deferForLongLists: false, longListDeferralItemLimit: 10, firstItemTabIndex: -1, itemSize: null, getItemSize: null, fireFirstTimeRenderedEventOnEmptyObservableArray: false, _firstTimeRenderCompleted: false, _internalDeclarativeRenderHelper: null, _declarativeRenderHelper: {get: function() {
                        if (!this._internalDeclarativeRenderHelper)
                            this._internalDeclarativeRenderHelper = new MS.Entertainment.UI.Controls.DeclarativeItemsControlRenderHelper;
                        return this._internalDeclarativeRenderHelper
                    }}, _scroller: {get: function() {
                        if (this.useParentAsScrollContainer)
                            if (this.parentScroller)
                                return this.parentScroller;
                            else
                                return this.repeaterContainer.parentElement;
                        return this.repeaterContainer
                    }}, _itemTemplate: null, _itemTemplateSet: null, itemTemplate: {
                    get: function() {
                        return this._itemTemplate
                    }, set: function(value) {
                            this._itemTemplate = value;
                            this._itemTemplateProvider = null;
                            if (this._itemTemplate && this._itemTemplateSet) {
                                this._itemTemplateSet(value);
                                this._itemTemplateSet = null
                            }
                        }
                }, _virtualize: false, virtualize: {
                    get: function itemsControl_virtualize_get() {
                        return this._virtualize
                    }, set: function itemsControl_virtualize_set(value) {
                            if (this._constructed)
                                throw new Error("Can't set the virtualization setting after construction");
                            this._virtualize = value
                        }
                }, singleAxis: true, containerStyle: null, animateIn: true, bringIntoViewRightMargin: 0, bringIntoViewLeftMargin: 0, _highestIndexItemToRender: -1, _scrollTopPosition: -1, _scrollLeftPosition: -1, _scrollerHeight: -1, _scrollerWidth: -1, _firstVerticalItemScrollOffset: -1, _firstHorizontalItemScrollOffset: -1, _itemTemplateProvider: null, _workingDataSource: null, _pendedBringItemIntoViewItem: null, controlName: "ItemsControl", _dataSource: undefined, _firstTimeRenderedCount: -1, _isRTL: null, _frozen: false, repeaterContainer: null, isFirstTimeRendered: false, dataSource: {
                    get: function() {
                        return this._dataSource
                    }, set: function(value) {
                            if (value === this._dataSource)
                                return;
                            var oldValue = this._dataSource;
                            this._dataSource = value;
                            if (this._dataBindingHandler)
                                this._dataBindingHandler(value, oldValue);
                            else
                                this._listChangedHandler(value, oldValue);
                            if (!oldValue && value)
                                this._initializeWithData();
                            this.notify("dataSource", value, oldValue)
                        }
                }, initialize: function initialize() {
                    if (this.dataSource)
                        this._initializeWithData()
                }, unload: function unload() {
                    if (this._workingDataSource) {
                        this._workingDataSource.removeChangeListener(this._handleChangesInDataSource);
                        this._workingDataSource = null
                    }
                    if (this._scrollerEvents) {
                        this._scrollerEvents.cancel();
                        this._scrollerEvents = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, freeze: function freeze() {
                    this._frozen = true;
                    MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                }, thaw: function thaw() {
                    MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this);
                    this._frozen = false
                }, _initializeWithData: function _initializeWithData() {
                    this._loadItemTemplateIgnoreErrors();
                    if (this.keyboardNavigable)
                        this._keyboardNavigationManager = new this.keyboardNavigationManagerClass(this.repeaterContainer, null, this.keyboardNavigationSetTabIndex)
                }, loadItemTemplate: function loadItemTemplate() {
                    var completePromise;
                    if (!this._itemTemplateProvider)
                        completePromise = this._loadTemplate(this.itemTemplate, null, true);
                    else
                        completePromise = WinJS.Promise.wrap(this._itemTemplateProvider);
                    completePromise = completePromise || WinJS.Promise.wrapError(new Error("No item template provided"));
                    return completePromise.then(function(template) {
                            this._itemTemplateProvider = template;
                            return template
                        }.bind(this))
                }, _loadItemTemplateIgnoreErrors: function _loadItemTemplateIgnoreErrors() {
                    this.loadItemTemplate().done(null, function(){})
                }, selectTemplate: function(item) {
                    return this.loadItemTemplate().then(function() {
                            return this._itemTemplateProvider
                        }.bind(this))
                }, render: function(sourceChanged) {
                    if (this.virtualize)
                        MS.Entertainment.UI.Controls.assert(this.repeaterContainer.children.length === 0, "List should not have items");
                    this._setSizeForScrolling();
                    if (this._workingDataSource && this._workingDataSource.length) {
                        if (this.applyPanelTemplate)
                            this.applyPanelTemplate();
                        var loadTemplatePromise = null;
                        if ((!this._firstTimeRenderCompleted && this.repeaterContainer.children.length) || !this.itemTemplate)
                            loadTemplatePromise = WinJS.Promise.as();
                        else
                            loadTemplatePromise = this.loadItemTemplate();
                        loadTemplatePromise.then(function renderOnceTemplateProviderLoaded() {
                            var workingLength = this._workingDataSource ? this._workingDataSource.length : 0;
                            if (this.virtualize && this.highestIndexItemToRender !== 0)
                                workingLength = Math.min(this.highestIndexItemToRender, workingLength);
                            if (this._firstTimeRenderCompleted)
                                MS.Entertainment.UI.Framework.empty(this.repeaterContainer);
                            if (this._firstTimeRenderedCount === -1) {
                                this._firstTimeRenderedCount = this.deferForLongLists ? Math.min(workingLength, this.longListDeferalItemLimit) : workingLength;
                                for (var i = this.repeaterContainer.children.length - 1; i >= this._firstTimeRenderedCount; i--)
                                    this.repeaterContainer.removeChild(this.repeaterContainer.children[i])
                            }
                            for (var i = 0; i < workingLength; i++) {
                                if (this.deferForLongLists && (i === this.longListDeferalItemLimit))
                                    break;
                                this._renderItem(this._workingDataSource.item(i), i)
                            }
                            if (this.deferForLongLists && i < workingLength)
                                window.requestAnimationFrame(function() {
                                    for (; i < workingLength; i++) {
                                        if ((i % (this.longListDeferalItemLimit * 2)) === 0)
                                            MS.Entertainment.UI.Framework.forceFullLayout();
                                        this._renderItem(this._workingDataSource.item(i))
                                    }
                                }.bind(this));
                            if (this.itemsRendered)
                                this.itemsRendered();
                            if (this.restoreFocus)
                                this.restoreFocus()
                        }.bind(this))
                    }
                    else {
                        if (sourceChanged)
                            MS.Entertainment.UI.Framework.empty(this.repeaterContainer);
                        var isEmptyArray = (this.dataSource && Array.isArray(this.dataSource) && this.dataSource.length === 0);
                        var isEmptyObservableArray = (this.dataSource && this.dataSource instanceof MS.Entertainment.ObservableArray && this.dataSource.length === 0);
                        if (isEmptyArray || (isEmptyObservableArray && this.fireFirstTimeRenderedEventOnEmptyObservableArray))
                            if (this._firstTimeRenderedCount === -1) {
                                this._firstTimeRenderedCount = 0;
                                this._sendFirstTimeRenderedEvent()
                            }
                    }
                    this._firstTimeRenderCompleted = true
                }, highestIndexItemToRender: {get: function highestIndexItemToRender_get() {
                        if (this._highestIndexItemToRender === -1)
                            if (!this.virtualize)
                                this._highestIndexItemToRender = this._workingDataSource.length;
                            else {
                                var minTargetPositionWidth = WinJS.Utilities.getMember("domElement.currentStyle.maxWidth", this);
                                var minTargetPositionHeight = WinJS.Utilities.getMember("domElement.currentStyle.maxHeight", this);
                                minTargetPositionWidth = parseInt(minTargetPositionWidth) || 0;
                                minTargetPositionHeight = parseInt(minTargetPositionHeight) || 0;
                                var targetPosition = {
                                        horizontal: this.scrollLeftPosition + Math.max(this.scrollerWidth, minTargetPositionWidth), vertical: this.scrollTopPosition + Math.max(this.scrollerHeight, minTargetPositionHeight)
                                    };
                                this._highestIndexItemToRender = this.getHighestItemToRenderForScrollPosition(targetPosition)
                            }
                        return this._highestIndexItemToRender
                    }}, getHighestItemToRenderForScrollPosition: function getHighestItemToRenderForScrollPosition(targetPosition) {
                    var itemCount;
                    if (this.singleAxis) {
                        var axis;
                        if (this.virtualizationAxis === MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.horizontal)
                            axis = "horizontal";
                        else if (this.virtualizationAxis === MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.vertical)
                            axis = "vertical";
                        itemCount = (targetPosition[axis] - this.firstItemScrollOffset) / this.itemSize
                    }
                    else
                        itemCount = this._multipleAxisItemCount(targetPosition);
                    return Math.ceil(Math.abs(itemCount))
                }, _getVerticalAxisItemCount: function _getVerticalAxisItemCount(targetVerticalPosition) {
                    var viewportHeight = targetVerticalPosition - this.firstVerticalItemScrollOffset;
                    var verticalItems = viewportHeight / this.itemSize.height;
                    return verticalItems
                }, _getHorizontalAxisItemCount: function _getHorizontalAxisItemCount(targetHorizontalPosition) {
                    var viewportWidth = targetHorizontalPosition - this.firstHorizontalItemScrollOffset;
                    var horizontalItems = viewportWidth / this.itemSize.width;
                    return horizontalItems
                }, _multipleAxisItemCount: function _multipleAxisItemCount(targetPosition) {
                    var verticalItems;
                    var horizontalItems;
                    switch (this.virtualizationAxis) {
                        case MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.horizontal:
                            verticalItems = Math.floor(this._getVerticalAxisItemCount(targetPosition.vertical));
                            horizontalItems = Math.ceil(this._getHorizontalAxisItemCount(targetPosition.horizontal));
                            break;
                        case MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.vertical:
                            verticalItems = Math.ceil(this._getVerticalAxisItemCount(targetPosition.vertical));
                            horizontalItems = Math.floor(this._getHorizontalAxisItemCount(targetPosition.horizontal));
                            break;
                        default:
                            MS.Entertainment.UI.Controls.fail("Unexpected Axis: " + this.virtualizationAxis);
                            verticalItems = 0;
                            horizontalItems = 0;
                            break
                    }
                    return horizontalItems * verticalItems
                }, firstItemScrollOffset: {get: function itemsControl_firstItemScrollOffset() {
                        if (this.virtualizationAxis === MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.horizontal)
                            return this.firstHorizontalItemScrollOffset;
                        else if (this.virtualizationAxis === MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.vertical)
                            return this.firstVerticalItemScrollOffset
                    }}, firstVerticalItemScrollOffset: {get: function itemsControl_firstVerticalItemScrollOffset() {
                        if (!this.useParentAsScrollContainer)
                            return 0;
                        if (this._firstVerticalItemScrollOffset === -1) {
                            var relativePosition = MS.Entertainment.Utilities.getRelativeOffset(this.repeaterContainer, this._scroller).top;
                            this._firstVerticalItemScrollOffset = relativePosition
                        }
                        return this._firstVerticalItemScrollOffset
                    }}, firstHorizontalItemScrollOffset: {get: function itemsControl_firstHorizonalItemScrollOffset() {
                        if (!this.useParentAsScrollContainer)
                            return 0;
                        if (this._firstHorizontalItemScrollOffset === -1) {
                            var relativePosition = MS.Entertainment.Utilities.getRelativeOffset(this.repeaterContainer, this._scroller).left;
                            if (this.isRTL)
                                relativePosition += ((this.repeaterContainer.calculatedSize || this.repeaterContainer.clientWidth) - this.scrollerWidth);
                            this._firstHorizontalItemScrollOffset = Math.abs(relativePosition)
                        }
                        return this._firstHorizontalItemScrollOffset
                    }}, getItemSizeForIndex: function getItemSizeForIndex(index) {
                    return this.itemSize
                }, scrollLeftPosition: {get: function itemsControl_scrollLeftPosition() {
                        if (this._scrollLeftPosition === -1 && this._scroller) {
                            this._skipResize = true;
                            this._scrollLeftPosition = this._scroller.scrollLeft;
                            this._skipResize = false
                        }
                        return this._scrollLeftPosition
                    }}, scrollTopPosition: {get: function itemsControl_scrollTopPosition() {
                        if (this._scrollTopPosition === -1 && this._scroller) {
                            this._skipResize = true;
                            this._scrollTopPosition = this._scroller.scrollTop;
                            this._skipResize = false
                        }
                        return this._scrollTopPosition
                    }}, scrollerHeight: {get: function itemsControl_scrollerHeight() {
                        if (this._scrollerHeight === -1 && this._scroller) {
                            this._skipResize = true;
                            this._scrollerHeight = this._scroller.clientHeight;
                            this._skipResize = false
                        }
                        return this._scrollerHeight
                    }}, scrollerWidth: {get: function itemsControl_scrollerWidth() {
                        if (this._scrollerWidth === -1 && this._scroller) {
                            this._skipResize = true;
                            this._scrollerWidth = this._scroller.clientWidth;
                            this._skipResize = false
                        }
                        return this._scrollerWidth
                    }}, viewportWidth: {get: function viewportWidth_get() {
                        return this.scrollLeftPosition + this.scrollerWidth - this.firstHorizontalItemScrollOffset
                    }}, viewportHeight: {get: function viewportHeight_get() {
                        return this.scrollTopPosition + this.scrollerHeight - this.firstVerticalItemScrollOffset
                    }}, itemsPerColumn: {get: function itemsPerColumn_get() {
                        return Math.floor(this.viewportHeight / this.itemSize.height)
                    }}, isRTL: {get: function isRTL_get() {
                        if (this._isRTL === null)
                            this._isRTL = (MS.Entertainment.UI.Framework.getTextDirectionForElement(this.domElement) === MS.Entertainment.UI.Framework.TextDirections.RightToLeft);
                        return this._isRTL
                    }}, _isIndexInRealizedArea: function _isIndexInRealizedArea(index) {
                    if (!this.virtualize)
                        return true;
                    if (index < this.highestIndexItemToRender)
                        return true;
                    return false
                }, _ensureRealizedToRealizedItemLimit: function _ensureRealizedToRealizedItemLimit() {
                    if (!this._workingDataSource || !this._workingDataSource.length)
                        return;
                    if (this.repeaterContainer.children.length > this.highestIndexItemToRender)
                        return;
                    if ((this._workingDataSource.length < this.highestIndexItemToRender) && (this.repeaterContainer.children.length === this._workingDataSource.length))
                        return;
                    if (this.virtualize)
                        this._firstTimeRenderedCount = Math.min(this._firstTimeRenderedCount, this.highestIndexItemToRender);
                    if (!this._firstTimeRenderCompleted)
                        return;
                    for (var i = this.repeaterContainer.children.length; i < this._workingDataSource.length; i++)
                        this._renderItem(this._workingDataSource.item(i), i)
                }, _handleElementResizing: function _handleElementResizing() {
                    if (this._skipResize)
                        return;
                    this._resetVirtualizationCaches();
                    this._ensureRealizedToRealizedItemLimit()
                }, _resetVirtualizationCaches: function _resetVirtualizatonCaches() {
                    this._scrollerHeight = -1;
                    this._scrollerWidth = -1;
                    this._scrollLeftPosition = -1;
                    this._scrollTopPosition = -1;
                    this._firstHorizontalItemScrollOffset = -1;
                    this._firstVerticalItemScrollOffset = -1;
                    this._highestIndexItemToRender = -1;
                    if (this.repeaterContainer)
                        this.repeaterContainer.calculatedSize = undefined
                }, _handleScrollingForVirtualization: function _handleScrollingForVirtualization() {
                    this._scrollLeftPosition = -1;
                    this._scrollTopPosition = -1;
                    this._highestIndexItemToRender = -1;
                    this._ensureRealizedToRealizedItemLimit();
                    this.dispatchEvent("itemsControlScrolled")
                }, _setSizeForScrolling: function _setSizeForScrolling() {
                    if (!(this.useParentAsScrollContainer && this.virtualize))
                        return;
                    var size = 0;
                    if (this._workingDataSource && this._workingDataSource.length)
                        if (this.singleAxis)
                            size = (this.itemSize * this._workingDataSource.length);
                        else
                            size = this._getMultipleAxisScrollingSize();
                    var axis;
                    if (this.virtualizationAxis === MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.horizontal)
                        axis = "width";
                    else if (this.virtualizationAxis === MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.vertical)
                        axis = "height";
                    this.repeaterContainer.style[axis] = (size ? size + "px" : String.empty);
                    this.repeaterContainer.calculatedSize = size;
                    this.dispatchEvent("scrollSizeChanged")
                }, _getMultipleAxisScrollingSize: function _getMultipleAxisScrollingSize() {
                    var itemCount;
                    var itemSize;
                    switch (this.virtualizationAxis) {
                        case MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.horizontal:
                            itemCount = this._workingDataSource.length / Math.floor(this._getVerticalAxisItemCount(this.viewportHeight));
                            itemSize = this.itemSize.width;
                            break;
                        case MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.vertical:
                            itemCount = this._workingDataSource.length / Math.floor(this._getHorizontalAxisItemCount(this.viewportWidth));
                            itemSize = this.itemSize.height;
                            break;
                        default:
                            MS.Entertainment.UI.Controls.fail("Unexpected Axis: " + this.virtualizationAxis);
                            itemCount = 0;
                            itemSize = 0;
                            break
                    }
                    itemCount = Math.ceil(itemCount);
                    return itemSize * itemCount
                }, processItemData: function processItemData(data, index) {
                    return data
                }, bringItemIntoView: function bringItemIntoView(item, options) {
                    options = options || {};
                    MS.Entertainment.UI.Controls.assert(item, "You need an item to bring into view");
                    var itemBroughtIntoView = WinJS.Promise.as();
                    if (!item)
                        return itemBroughtIntoView;
                    if (!this._workingDataSource) {
                        var pendeditem = {
                                item: item, completePromise: null
                            };
                        this._pendedBringItemIntoViewItem = pendeditem;
                        return new WinJS.Promise(function(c) {
                                pendeditem.completePromise = c
                            })
                    }
                    var index = this._workingDataSource ? this._workingDataSource.indexOf(item) : -1;
                    MS.Entertainment.assert(index > -1, "item not found in data source");
                    var element = this.repeaterContainer.children[index];
                    if (!element) {
                        var pendeditem = {
                                item: item, completePromise: null
                            };
                        this._pendedBringItemIntoViewItem = pendeditem;
                        return new WinJS.Promise(function(c) {
                                pendeditem.completePromise = c
                            })
                    }
                    if (!options.bringOnMinimally && !options.animated)
                        element.scrollIntoView();
                    else {
                        var targetPosition = this.getScrollPositionToShowItem(item, {
                                bringOnMinimally: options.bringOnMinimally, alwaysAlignLeftEdge: options.alwaysAlignLeftEdge
                            });
                        if (targetPosition != -1)
                            itemBroughtIntoView = this._performScroll(targetPosition, options.animated, options.ignoreMissingStarts)
                    }
                    return itemBroughtIntoView
                }, scrollToPosition: function scrollToPosition(scrollPosition, options) {
                    this._performScroll(scrollPosition, options.animated, options.ignoreMissingStarts, options.useZoomTo)
                }, getScrollPositionToShowItemFromIndex: function getScrollPositionToShowItemFromIndex(index) {
                    if (this.singleAxis) {
                        if (index === 0)
                            return 0;
                        return Math.min(this.firstItemScrollOffset + ((index - 1) * this.itemSize), (this._scroller.scrollWidth - this.scrollerWidth))
                    }
                    else {
                        var verticalAxisItemCount = this.itemsPerColumn;
                        if (!verticalAxisItemCount)
                            return 0;
                        var column = Math.floor(index / verticalAxisItemCount);
                        return Math.min(this.firstItemScrollOffset + ((column - 1) * this.itemSize.width), (this._scroller.scrollWidth - this.scrollerWidth))
                    }
                }, getScrollPositionToShowItem: function(item, options) {
                    options = options || {};
                    var result = -1;
                    MS.Entertainment.UI.Controls.assert(item, "Required an item");
                    if (!item)
                        return result;
                    var index = this._workingDataSource ? this._workingDataSource.indexOf(item) : -1;
                    MS.Entertainment.assert(index > -1, "item not found in data source");
                    var element = this.repeaterContainer.children[index];
                    if (!element)
                        return result;
                    var rightMargin = this.bringIntoViewRightMargin;
                    var leftMargin = this.bringIntoViewLeftMargin;
                    if (!options.bringOnMinimally) {
                        rightMargin = 0;
                        leftMargin = 0
                    }
                    var minRightEdgeOnScreen = (element.offsetLeft + element.clientWidth + rightMargin) - this._scroller.clientWidth;
                    var minLeftEdgeOnScreen = Math.max(0, element.offsetLeft - leftMargin);
                    if (MS.Entertainment.UI.Framework.getTextDirection() === MS.Entertainment.UI.Framework.TextDirections.RightToLeft) {
                        minLeftEdgeOnScreen = (this._scroller.clientWidth - element.offsetLeft - element.clientWidth - rightMargin);
                        minRightEdgeOnScreen = leftMargin - element.offsetLeft
                    }
                    var isRightEdgeOnScreen = this._scroller.scrollLeft >= minRightEdgeOnScreen;
                    var isLeftEdgeOnScreen = this._scroller.scrollLeft <= minLeftEdgeOnScreen;
                    var targetScrollPosition = -1;
                    if (options.alwaysAlignLeftEdge) {
                        minLeftEdgeOnScreen = Math.min(minLeftEdgeOnScreen, Math.max(0, (this._scroller.scrollWidth - this._scroller.clientWidth)));
                        targetScrollPosition = minLeftEdgeOnScreen
                    }
                    else if (!(isRightEdgeOnScreen && isLeftEdgeOnScreen))
                        if (!isRightEdgeOnScreen)
                            targetScrollPosition = minRightEdgeOnScreen;
                        else if (!isLeftEdgeOnScreen)
                            targetScrollPosition = minLeftEdgeOnScreen;
                    return targetScrollPosition
                }, getElementForItem: function getElementForItem(item) {
                    var index = this._workingDataSource ? this._workingDataSource.indexOf(item) : -1;
                    return this.repeaterContainer.children[index]
                }, getElementForIndex: function getElementForIndex(index) {
                    if (!(this.repeaterContainer && this.repeaterContainer.children)) {
                        MS.Entertainment.UI.Controls.fail("getElementForIndex called on items control with no repeater");
                        return null
                    }
                    return this.repeaterContainer.children[index]
                }, getIndexForElement: function getElementForIndex(element) {
                    var currentItem = 0;
                    var returnIndex = -1;
                    if (this.repeaterContainer && this.repeaterContainer.children)
                        for (var i = 0; i < this.repeaterContainer.children.length; i++) {
                            currentItem = this.repeaterContainer.children[i];
                            if (currentItem === element || currentItem.contains(element)) {
                                returnIndex = i;
                                break
                            }
                        }
                    return returnIndex
                }, _performScroll: function _performScroll(scrollLeft, animated, ignoreMissingStarts, useZoomTo) {
                    if (useZoomTo) {
                        this._scroller.msZoomTo({contentX: scrollLeft});
                        return WinJS.Promise.as()
                    }
                    if (!animated) {
                        this._scroller.scrollLeft = scrollLeft;
                        return WinJS.Promise.as()
                    }
                    return MS.Entertainment.UI.Framework.scrollIntoViewWithAnimation(this._scroller, scrollLeft, ignoreMissingStarts)
                }, _loadTemplate: function _loadTemplate(template) {
                    var completePromise = WinJS.Promise.as(template);
                    if (!template)
                        completePromise = new WinJS.Promise(function(c, e, p) {
                            this._itemTemplateSet = c
                        }.bind(this));
                    completePromise = completePromise.then(function(validTemplate) {
                        if (typeof validTemplate === "string")
                            return MS.Entertainment.UI.Framework.loadTemplate(validTemplate, null, true);
                        else if (validTemplate)
                            return WinJS.Promise.wrap(validTemplate.winControl)
                    });
                    return completePromise
                }, _listChangedHandler: function _listChangedHandler(newValue, oldValue) {
                    if (this._unloaded)
                        return;
                    if (!newValue) {
                        if (this._workingDataSource) {
                            this._workingDataSource.removeChangeListener(this._handleChangesInDataSource);
                            this._workingDataSource = null;
                            this._resetDomState()
                        }
                        if (newValue === null && this.itemsRendered)
                            this.itemsRendered();
                        return
                    }
                    if (this._workingDataSource)
                        this._workingDataSource.removeChangeListener(this._handleChangesInDataSource);
                    var tempWorkingData = WinJS.Binding.unwrap(newValue);
                    if (!(newValue instanceof MS.Entertainment.ObservableArray))
                        tempWorkingData = new MS.Entertainment.ObservableArray(newValue);
                    if (tempWorkingData)
                        tempWorkingData.addChangeListener(this._handleChangesInDataSource);
                    this._workingDataSource = tempWorkingData;
                    if (this.itemsChanged)
                        this.itemsChanged();
                    if (newValue || oldValue) {
                        if (this._firstTimeRenderCompleted)
                            this._resetDomState();
                        this.render(newValue && oldValue)
                    }
                }, _renderItem: function _renderItemToIndex(item, index) {
                    if (this.virtualize) {
                        MS.Entertainment.UI.Controls.assert(this.repeaterContainer.children.length <= this._workingDataSource.length, "Found more children that we should have had");
                        MS.Entertainment.UI.Controls.assert(this.repeaterContainer.children.length <= this.dataSource.length, "Found more children that we should have had")
                    }
                    if (!this._isIndexInRealizedArea(index))
                        return;
                    item = this.processItemData(item, index);
                    var container = null;
                    var selectionPromise = null;
                    if (!this._firstTimeRenderCompleted && index < this.repeaterContainer.children.length) {
                        container = this.repeaterContainer.children[index];
                        selectionPromise = WinJS.Promise.as(this._declarativeRenderHelper)
                    }
                    else
                        selectionPromise = this.selectTemplate(item);
                    selectionPromise.then(function withSelectedTemplate(itemTemplateProvider) {
                        var element;
                        if (!container)
                            container = document.createElement(itemTemplateProvider.element.tagName);
                        var that = this;
                        var upperBound = (this._workingDataSource && this._workingDataSource.length - 1) || 0;
                        var end;
                        var start;
                        if (upperBound < 0)
                            upperBound = 0;
                        end = (index >= upperBound) || (index === undefined);
                        start = (index < 1);
                        if (!end || !(end && start) && index)
                            element = this.repeaterContainer.children[index];
                        if (end || (end && start) || !element)
                            that.repeaterContainer.appendChild(container);
                        else
                            that.repeaterContainer.insertBefore(container, element);
                        if (that.containerStyle)
                            WinJS.Utilities.addClass(container, that.containerStyle);
                        if (this.virtualize) {
                            MS.Entertainment.UI.Controls.assert(this.repeaterContainer.children.length <= this._workingDataSource.length, "Found more children that we should have had");
                            MS.Entertainment.UI.Controls.assert(this.repeaterContainer.children.length <= this.dataSource.length, "Found more children that we should have had")
                        }
                        itemTemplateProvider.render(item, container).then(function(child) {
                            var animationPromise;
                            if (that.applyItemTemplate)
                                container = that.applyItemTemplate(container, item, index);
                            if (that._pendedBringItemIntoViewItem && that._pendedBringItemIntoViewItem.item === item) {
                                var complete = that._pendedBringItemIntoViewItem.completePromise;
                                that._pendedBringItemIntoViewItem = null;
                                that.bringItemIntoView(item, {bringOnMinimally: true}).then(complete)
                            }
                            if (container && that.animateIn && MS.Entertainment.UI.Framework.beginShowAnimations) {
                                var elementToAnimate = container;
                                if (that.useFirstChildForAnimations && container.children.length)
                                    elementToAnimate = container.children[0];
                                animationPromise = MS.Entertainment.UI.Framework.beginShowAnimations(elementToAnimate)
                            }
                            if (that._firstTimeRenderedCount > 0) {
                                that._firstTimeRenderedCount--;
                                if (that._firstTimeRenderedCount === 0)
                                    that._sendFirstTimeRenderedEvent()
                            }
                            if (index === 0 && that.firstItemTabIndex !== -1) {
                                var firstFocusElement = container.querySelector(".win-focusable");
                                if (firstFocusElement)
                                    firstFocusElement.tabIndex = that.firstItemTabIndex
                            }
                            if (index === 0 && that.focusFirstItemOnRender)
                                WinJS.Promise.as(animationPromise).done(function setFocusOnAnimationComplete() {
                                    var firstFocusElement = container.querySelector(".win-focusable");
                                    if (firstFocusElement)
                                        MS.Entertainment.UI.Framework.focusElement(firstFocusElement)
                                });
                            if (that.delayInitializeChildren)
                                that._delayInitializeContainer(container);
                            that.dispatchEvent("itemRendered", {
                                element: container, item: item, index: index
                            })
                        })
                    }.bind(this))
                }, itemsRendered: function itemsRendered() {
                    if (this.raisePanelReady)
                        MS.Entertainment.UI.Controls.Panel.raisePanelReady(this.repeaterContainer);
                    if (MS.Entertainment.UI.Controls.Panel)
                        MS.Entertainment.UI.Controls.Panel.raisePanelReadyTest(this.repeaterContainer);
                    if (this.itemsRenderedCallback)
                        this.itemsRenderedCallback()
                }, _delayInitializeContainer: function _delayInitializeContainer(container) {
                    if (!this.isDelayInitialized || !container || this._unloaded)
                        return;
                    MS.Entertainment.UI.Framework.delayInitializeChildren(container)
                }, _sendFirstTimeRenderedEvent: function _sendFirstTimeRenderedEvent() {
                    WinJS.Promise.timeout(1).then(function sendFirstTimeRenderedEvent() {
                        this.isFirstTimeRendered = true;
                        if (this.repeaterContainer) {
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("firstTimeRendered", true, true);
                            this.repeaterContainer.dispatchEvent(domEvent)
                        }
                    }.bind(this))
                }, _removeChildrenFromIndex: function _removeChildrenFromIndex(index) {
                    for (var i = this.repeaterContainer.children.length - 1; i >= index; i--)
                        this.repeaterContainer.removeChild(this.repeaterContainer.children[i])
                }, _resetDomState: function _resetDomState() {
                    MS.Entertainment.UI.Framework.empty(this.repeaterContainer);
                    this._resetVirtualizationCaches()
                }, _handleChangesInDataSource: function _handleChangesInDataSource(notification) {
                    if (this.itemsChanged)
                        this.itemsChanged(notification);
                    this._highestIndexItemToRender = -1;
                    switch (notification.type) {
                        case MS.Entertainment.ObservableArray.OperationTypes.add:
                            if (this.virtualize && !this._isIndexInRealizedArea(notification.index))
                                this._removeChildrenFromIndex(notification.index);
                            else
                                this._renderItem(notification.item, notification.index);
                            break;
                        case MS.Entertainment.ObservableArray.OperationTypes.remove:
                            var child = this.repeaterContainer.children[notification.index];
                            if (child) {
                                this.repeaterContainer.removeChild(child);
                                if (this._handleItemRemoved)
                                    this._handleItemRemoved(child);
                                if (this.virtualize && !this._isIndexInRealizedArea(notification.index))
                                    this._removeChildrenFromIndex(notification.index);
                                this._scrollLeftPosition = -1
                            }
                            if (this.virtualize)
                                this._ensureRealizedToRealizedItemLimit();
                            break;
                        case MS.Entertainment.ObservableArray.OperationTypes.reset:
                            this._resetDomState();
                            break;
                        default:
                            MS.Entertainment.assert(false, "unsupported notification type: " + notification.type);
                            break
                    }
                    this._setSizeForScrolling()
                }
        }, null, {
            waitForItemsControlRenderEvents: function waitForItemsControlRenderEvents(domElement, numEvents) {
                return MS.Entertainment.Utilities.waitForDomEventMultipleTimes("firstTimeRendered", domElement, numEvents)
            }, loadAllItemTemplates: function loadAllItemTemplates() {
                    MS.Entertainment.UI.Controls.assert(Array.isArray(this.itemTemplate), "expected an array");
                    var templateLoadPromises = this.itemTemplate.map(function(templatePath) {
                            return MS.Entertainment.UI.Framework.loadTemplate(templatePath, null, true)
                        });
                    return WinJS.Promise.join(templateLoadPromises)
                }, handleItemsChanged: function handleItemsChanged(domElement, numEvents) {
                    if (this.repeaterContainer.contains(document.activeElement))
                        this._restoreFocusAfterRender = true;
                    WinJS.Promise.timeout(700).done(function restoreFocus() {
                        if (!document.activeElement && this._restoreFocusAfterRender && MS.Entertainment.UI.Framework.canMoveFocus(this.repeaterContainer))
                            MS.Entertainment.UI.Framework.focusFirstInSubTree(this.repeaterContainer);
                        this._restoreFocusAfterRender = false
                    }.bind(this))
                }, ContainerStyles: {
                    none: "", horizontalFlow: "horizontalFlow", verticalFlow: "verticalFlow", listFlowLeft: "listFlowLeft"
                }, VirtualizationAxis: {
                    horizontal: "horizontal", vertical: "vertical"
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {FlexibleItemsControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ItemsControl", null, function(element, options) {
            WinJS.Utilities.addClass(element, "flexibleItemsControlContainer");
            this.applyPanelTemplate = this.applyPanelTemplate.bind(this);
            this.onItemClicked = this._onItemClicked.bind(this)
        }, {
            dataContext: null, itemTemplates: null, itemSize: null, rowLayout: false, fixedRowCount: null, fixedColumnCount: null, skipSettingWidth: false, skipSettingHeight: false, reflowOnWindowSizeChanged: false, restoreFocusOnUpdate: false, restoreFocusAfterBackNavigate: false, enableClickEvents: false, _loadTemplatePromise: null, _restoreFocusAfterRender: false, _restoreFocusAfterBackNavigate: false, applyPanelTemplate: function applyPanelTemplate() {
                    var dataLength = this._workingDataSource ? this._workingDataSource.length : 1;
                    var rowCount;
                    var columnCount;
                    var hasFixedRowCount = typeof this.fixedRowCount === "number";
                    var hasFixedColumnCount = typeof this.fixedColumnCount === "number";
                    if (hasFixedRowCount && !hasFixedColumnCount) {
                        rowCount = this.fixedRowCount;
                        columnCount = Math.max(Math.ceil(dataLength / rowCount), 1)
                    }
                    else if (!hasFixedRowCount && hasFixedColumnCount) {
                        columnCount = this.fixedColumnCount;
                        rowCount = Math.max(Math.ceil(dataLength / columnCount), 1)
                    }
                    else if (hasFixedRowCount && hasFixedColumnCount) {
                        rowCount = this.fixedRowCount;
                        columnCount = this.fixedColumnCount
                    }
                    else {
                        rowCount = MS.Entertainment.Utilities.getRowCountForResolution();
                        columnCount = Math.max(Math.ceil(dataLength / rowCount), 1)
                    }
                    MS.Entertainment.UI.Controls.assert(dataLength <= (rowCount * columnCount), "FlexibleItemsControl_applyPanelTemplate: Items don't fit in the container.");
                    var explicitWidth = (columnCount * this.itemSize.width) + "px";
                    var explicitHeight = (rowCount * this.itemSize.height) + "px";
                    if (!this.skipSettingWidth && this.repeaterContainer.style.width !== explicitWidth)
                        this.repeaterContainer.style.width = explicitWidth;
                    if (!this.skipSettingHeight && this.repeaterContainer.style.height !== explicitHeight)
                        this.repeaterContainer.style.height = explicitHeight;
                    if (this.rowLayout)
                        WinJS.Utilities.addClass(this.repeaterContainer, "flexRowLayout");
                    var domEvent = document.createEvent("Event");
                    domEvent.initEvent("SizeAdjusted", true, true);
                    this.repeaterContainer.dispatchEvent(domEvent)
                }, itemsChanged: function itemsChanged() {
                    if (this.restoreFocusOnUpdate && this.repeaterContainer.contains(document.activeElement))
                        this._restoreFocusAfterRender = true;
                    this.applyPanelTemplate();
                    WinJS.Promise.timeout(1).done(function restoreFocus() {
                        if (!document.activeElement)
                            this.restoreFocus()
                    }.bind(this))
                }, restoreFocus: function restoreFocus() {
                    if ((this._restoreFocusAfterRender || this._restoreFocusAfterBackNavigate) && MS.Entertainment.UI.Framework.canMoveFocus(this.repeaterContainer)) {
                        MS.Entertainment.UI.Framework.focusFirstInSubTree(this.repeaterContainer);
                        this._restoreFocusAfterBackNavigate = false
                    }
                    this._restoreFocusAfterRender = false
                }, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.initialize.apply(this, arguments);
                    if (this.reflowOnWindowSizeChanged && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.uiState))
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).addEventListener("windowresize", this.applyPanelTemplate);
                    if (this.enableClickEvents)
                        this.repeaterContainer.addEventListener("click", this.onItemClicked)
                }, thaw: function thaw() {
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.thaw.call(this);
                    if (this.dataContext && this.dataContext.thaw)
                        this.dataContext.thaw();
                    if (!document.activeElement && this.restoreFocusAfterBackNavigate)
                        this.restoreFocus()
                }, unload: function unload() {
                    if (this.reflowOnWindowSizeChanged && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.uiState))
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).removeEventListener("windowresize", this.applyPanelTemplate);
                    if (this.enableClickEvents)
                        this.repeaterContainer.removeEventListener("click", this.onItemClicked);
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.unload.call(this)
                }, applyItemTemplate: function applyItemTemplate(container, item, index) {
                    WinJS.Utilities.addClass(container, "flexibleItemsControlItemContainer");
                    if (index !== null && index !== undefined) {
                        WinJS.Utilities.addClass(container, "item" + index);
                        if (item && item.automaticFocusOverride) {
                            var focusItem = container.querySelector(".win-focusable");
                            if (focusItem)
                                focusItem.setAttribute("data-win-focus", item.automaticFocusOverride)
                        }
                    }
                    return container
                }, resetItemTemplate: function resetItemTemplate() {
                    if (this._loadTemplatePromise) {
                        this._loadTemplatePromise.cancel();
                        this._loadTemplatePromise = null
                    }
                    this.loadItemTemplate()
                }, loadItemTemplate: function() {
                    MS.Entertainment.UI.Controls.assert(!this.itemTemplate, "Do not support non-array template");
                    MS.Entertainment.UI.Controls.assert(Array.isArray(this.itemTemplates), "expected an array");
                    if (this._loadTemplatePromise)
                        return this._loadTemplatePromise;
                    var templateLoadPromises = [];
                    var loadedTemplates = {};
                    this.itemTemplates.forEach(function(item) {
                        var promise = MS.Entertainment.UI.Framework.loadTemplate(item.template, null, true).then(function(template) {
                                loadedTemplates[item.value] = template
                            });
                        templateLoadPromises.push(promise)
                    });
                    this._loadTemplatePromise = WinJS.Promise.join(templateLoadPromises).then(function() {
                        this._itemTemplateProviders = loadedTemplates
                    }.bind(this));
                    return this._loadTemplatePromise
                }, selectTemplate: function selectTemplate(item) {
                    return this.loadItemTemplate().then(function() {
                            var propertyValue = WinJS.Utilities.getMember(this._getPropertyToCheck(item), item);
                            MS.Entertainment.UI.Controls.assert(propertyValue, "Couldn't find that property on the data, it was falsey.");
                            var template = this._itemTemplateProviders[propertyValue];
                            MS.Entertainment.UI.Controls.assert(template, "Couldn't find a template for property: " + this.propertyName + " with value: " + propertyValue);
                            return template
                        }.bind(this))
                }, _getPropertyToCheck: function _getPropertyToCheck(item) {
                    if (!Array.isArray(this.propertyName))
                        return this.propertyName;
                    var propertyName;
                    for (var i = 0; i < this.propertyName.length; i++)
                        if (item[this.propertyName[i]]) {
                            propertyName = this.propertyName[i];
                            break
                        }
                    return propertyName
                }, _onItemClicked: function _onItemClicked(e) {
                    var element = e.srcElement;
                    while (element && element !== this.repeaterContainer) {
                        if (element.clickDataContext && element.clickDataContext.doclick) {
                            element.clickDataContext.doclick({
                                target: element.clickDataContext, domElement: element
                            });
                            e.stopPropagation();
                            if (this.restoreFocusAfterBackNavigate)
                                this._restoreFocusAfterBackNavigate = true;
                            return
                        }
                        element = element.parentElement
                    }
                }
        }, {})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        DeclarativeItemsControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ItemsControl", null, null, null, {isDeclarativeControlContainer: true}), DeclarativeItemsControlRenderHelper: MS.Entertainment.UI.Framework.define(function DeclarativeItemsControlRenderHelper(){}, {render: function render(dataContext, container) {
                    return WinJS.UI.processAll(container).then(function bindingProcessAllAfterControlProcessAll() {
                            return WinJS.Binding.processAll(container, dataContext)
                        }).then(function returnContainer() {
                            return container
                        })
                }})
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ItemsControlWithViewModel: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ItemsControl", null, function itemsControlWithViewModel(element, options){}, {
            listViewModel: null, controlName: "ItemsControlWithViewModel", processItemData: function processItemData(itemData, index) {
                    return new MS.Entertainment.UI.Controls.ItemsControlViewModel(itemData, this.listViewModel, index)
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ItemsControlWithVariableSizeItems: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ItemsControl", null, function ItemsControlWithVariableSizeItems(element, options) {
            if (!this.getItemSize)
                throw new Error("getItemSize function is required when using variable sized items");
        }, {
            virtualize: true, additionalScrollContainerPadding: 0, additionalItemsToRealize: 0, _restoreFocusPromise: null, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.initialize.call(this);
                    this._restoreFocus = this._restoreFocus.bind(this);
                    WinJS.Utilities.addClass(this.domElement, "listContainer")
                }, unload: function unload() {
                    this._clearFocusPromise();
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.unload.call(this)
                }, freeze: function freeze() {
                    this._clearFocusPromise();
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.freeze.call(this)
                }, getHighestItemToRenderForScrollPosition: function getHighestItemToRenderForScrollPosition(targetPosition) {
                    var itemCount = 0;
                    var axis;
                    if (this.virtualizationAxis === MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.horizontal)
                        axis = "horizontal";
                    else if (this.virtualizationAxis === MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.vertical)
                        axis = "vertical";
                    var currentHighestViewportPosition = targetPosition[axis] - this.firstItemScrollOffset;
                    var summedSize = 0;
                    var workingLength = this._workingDataSource.length;
                    while (summedSize < currentHighestViewportPosition && itemCount < workingLength) {
                        summedSize += this.getItemSize(this._workingDataSource.item(itemCount), itemCount);
                        itemCount++
                    }
                    if (this.additionalItemsToRealize) {
                        var adjustedItemIndex = Math.min(itemCount + this.additionalItemsToRealize, workingLength);
                        itemCount = adjustedItemIndex
                    }
                    return itemCount
                }, getScrollPositionToShowItemFromIndex: function getScrollPositionToShowItemFromIndex(index) {
                    var summedSize = 0;
                    for (var i = 0; i < index - 1; i++)
                        summedSize += this.getItemSize(this._workingDataSource.item(i), i);
                    return summedSize
                }, _setSizeForScrolling: function _setSizeForScrolling() {
                    if (!(this.useParentAsScrollContainer && this.virtualize))
                        return;
                    var size = String.empty;
                    if (this._workingDataSource && this._workingDataSource.length) {
                        var summedSize = 0;
                        this._workingDataSource.forEach(function sumItemSize(item, index) {
                            summedSize += this.getItemSize(item, index)
                        }.bind(this));
                        summedSize += this.additionalScrollContainerPadding;
                        size = summedSize + "px"
                    }
                    var axis;
                    if (this.virtualizationAxis === MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.horizontal)
                        axis = "width";
                    else if (this.virtualizationAxis === MS.Entertainment.UI.Controls.ItemsControl.VirtualizationAxis.vertical)
                        axis = "height";
                    this.repeaterContainer.style[axis] = size;
                    this.repeaterContainer.calculatedSize = size;
                    this.dispatchEvent("scrollSizeChanged")
                }, getItemSizeForIndex: function getItemSizeForIndex(index) {
                    if (index < this._workingDataSource.length)
                        return this.getItemSize(this._workingDataSource.item(index))
                }, itemsRendered: function itemsRendered() {
                    if (this.focusFirstItemOnRender)
                        this._restoreFocus();
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.itemsRendered.call(this)
                }, _restoreFocus: function _restoreFocus() {
                    this._clearFocusPromise();
                    var firstItemFocused = false;
                    if (this._unloaded)
                        return;
                    if (!MS.Entertainment.UI.Framework.focusedItemInContainer(this.repeaterContainer)) {
                        var firstItemFromSelector = this.repeaterContainer.querySelector(".listContainer > :first-child .win-focusable");
                        if (firstItemFromSelector)
                            MS.Entertainment.UI.Framework.focusElement(firstItemFromSelector)
                    }
                    if (MS.Entertainment.UI.Framework.focusedItemInContainer(this.repeaterContainer))
                        firstItemFocused = true;
                    if (!firstItemFocused)
                        this._createFocusPromise()
                }, _createFocusPromise: function _createFocusPromise(timeout) {
                    timeout = isNaN(timeout) ? 100 : timeout;
                    this._clearFocusPromise();
                    this._restoreFocusPromise = WinJS.Promise.timeout(timeout).then(this._restoreFocus)
                }, _clearFocusPromise: function _clearFocusPromise() {
                    if (this._restoreFocusPromise) {
                        this._restoreFocusPromise.cancel();
                        this._restoreFocusPromise = null
                    }
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ItemsControlViewModel: MS.Entertainment.UI.Framework.define(function itemsControlViewModel(data, listViewModel, index) {
            this.data = data;
            this.listViewModel = listViewModel;
            this.index = index
        }, {
            listViewModel: null, data: null, index: -1, instance: {get: function() {
                        return this
                    }}
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {CarouselItemsControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ItemsControl", null, function carouselItemsControl(element, options) {
            this.delayInitializeChildren = true;
            if (!this.itemSize)
                throw new Error("itemSize required when using a carousel");
            if (!this.virtualizationAxis)
                throw new Error("virtualizationOrientation required when using virtualization");
        }, {
            controlName: "CarouselItemsControl", leftOffset: 0, maxLeftOffset: 0, marginLeftOffset: 0, transitionDuration: 0, _defaultTimeoutMS: 500, _defaultTransitionDuration: 100, applyPanelTemplate: function applyPanelTemplate() {
                    if (this._workingDataSource) {
                        this.repeaterContainer.style.marginLeft = (this.marginLeftOffset - ((this.maxLeftOffset - this.leftOffset) * this.itemSize)) + "px";
                        var marginLeft = WinJS.Utilities.convertToPixels(this.repeaterContainer, window.getComputedStyle(this.repeaterContainer, null)["margin-Left"]);
                        var marginRight = WinJS.Utilities.convertToPixels(this.repeaterContainer, window.getComputedStyle(this.repeaterContainer, null)["margin-Right"]);
                        var buffer = marginLeft + marginRight;
                        this.repeaterContainer.style.width = (this._workingDataSource.length * this.itemSize + buffer) + "px"
                    }
                }, applyItemTemplate: function applyItemTemplate(container, item, index) {
                    return container
                }, scrollAnimated: function scrollAnimated(count, removeIndex, timeout) {
                    if (count === 0)
                        return WinJS.Promise.as();
                    if (!MS.Entertainment.UI.Framework.animationsEnabled)
                        return WinJS.Promise.as();
                    var translateDelta = -count * this.itemSize;
                    if (this.repeaterContainer.isAnimatingScroll)
                        return WinJS.Promise.as();
                    var updateItemPosition = function updateItemPosition() {
                            var marginLeft;
                            var actualOffsetLeft = (this.maxLeftOffset - this.leftOffset);
                            var actualOffset = actualOffsetLeft * this.itemSize;
                            marginLeft = (this.marginLeftOffset - actualOffset) + "px";
                            if (removeIndex >= 0) {
                                if (this.repeaterContainer.children.length > removeIndex) {
                                    var child = this.repeaterContainer.children[removeIndex];
                                    WinJS.Utilities.addClass(child, "removeFromDisplay")
                                }
                                this.dataSource.removeAt(removeIndex)
                            }
                            this.repeaterContainer.style.marginLeft = marginLeft;
                            WinJS.Utilities.removeClass(this.repeaterContainer, "scrollAnimation");
                            this.repeaterContainer.style.msTransform = "";
                            this.repeaterContainer.isAnimatingScroll = null
                        }.bind(this);
                    timeout = timeout || this._defaultTimeoutMS;
                    var timeoutPromise = WinJS.Promise.timeout(timeout).then(function resetAnimatingFlag() {
                            scrollComplete.cancel();
                            timeoutPromise = null
                        }.bind(this));
                    var scrollComplete = this.repeaterContainer.isAnimatingScroll;
                    if (!scrollComplete)
                        scrollComplete = MS.Entertainment.UI.Framework.waitForStartedTransitionsToComplete(this.repeaterContainer.parentElement, true, "scrollAnimation").then(function() {
                            if (timeoutPromise) {
                                timeoutPromise.cancel();
                                timeoutPromise = null
                            }
                            updateItemPosition()
                        }.bind(this), function animationFailed() {
                            updateItemPosition()
                        }.bind(this));
                    else
                        MS.Entertainment.UI.Framework.resetStartedTransitionCount(this.repeaterContainer);
                    WinJS.Utilities.addClass(this.repeaterContainer, "scrollAnimation");
                    var transformStyle = "translateX(" + translateDelta + "px)";
                    var duration = this._defaultTransitionDuration;
                    this.repeaterContainer.transitionDuration = duration;
                    this.repeaterContainer.style.msTransform = transformStyle;
                    this.repeaterContainer.isAnimatingScroll = scrollComplete;
                    return scrollComplete
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {FocusHandlingItemsControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ItemsControl", null, null, {
            _restoreFocusPromise: null, _actionsHadFocusOnButtonChange: false, ignoreNextRestoreFocus: false, useSetActive: false, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.initialize.call(this);
                    this._restoreFocus = this._restoreFocus.bind(this);
                    WinJS.Utilities.addClass(this.domElement, "listContainer")
                }, unload: function unload() {
                    this._clearFocusPromise();
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.unload.call(this)
                }, freeze: function freeze() {
                    this._clearFocusPromise();
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.freeze.call(this)
                }, thaw: function thaw() {
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.thaw.call(this);
                    this.restoreFocus()
                }, itemsRendered: function itemsRendered() {
                    WinJS.Promise.timeout(1).done(function raiseReadyEvent() {
                        if (this.repeaterContainer) {
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("itemsReady", true, true);
                            this.repeaterContainer.dispatchEvent(domEvent)
                        }
                    }.bind(this))
                }, restoreFocus: function restoreFocus(forceSetFocus) {
                    if (this._frozen || this._unloaded)
                        return;
                    if (this.ignoreNextRestoreFocus) {
                        this.ignoreNextRestoreFocus = false;
                        return
                    }
                    this._clearFocusPromise();
                    if (forceSetFocus)
                        this._actionsHadFocusOnButtonChange = forceSetFocus;
                    if (!this._actionsHadFocusOnButtonChange)
                        return;
                    this._createFocusPromise()
                }, _restoreFocus: function _restoreFocus() {
                    this._clearFocusPromise();
                    if (this._frozen || this._unloaded)
                        return;
                    if (MS.Entertainment.UI.Framework.isFlyoutVisible())
                        return;
                    if (MS.Entertainment.UI.Framework.isFlyoutVisible())
                        return;
                    if (this._actionsHadFocusOnButtonChange && !MS.Entertainment.UI.Framework.focusedItemInContainer(this.repeaterContainer)) {
                        var firstItemFromSelector = this.repeaterContainer.querySelector(".listContainer > :first-child .win-focusable");
                        if (firstItemFromSelector)
                            MS.Entertainment.UI.Framework.focusElement(firstItemFromSelector, this.useSetActive)
                    }
                    if (MS.Entertainment.UI.Framework.focusedItemInContainer(this.repeaterContainer))
                        this._actionsHadFocusOnButtonChange = false;
                    if (this._actionsHadFocusOnButtonChange)
                        this._createFocusPromise()
                }, _listChangedHandler: function _listChangedHandler(newValue, oldValue) {
                    if (this._unloaded)
                        return;
                    this._actionsHadFocusOnButtonChange = this._actionsHadFocusOnButtonChange || !document.activeElement || MS.Entertainment.UI.Framework.focusedItemInContainer(this.repeaterContainer);
                    MS.Entertainment.UI.Controls.ItemsControl.prototype._listChangedHandler.apply(this, arguments)
                }, _createFocusPromise: function _createFocusPromise(timeout) {
                    timeout = isNaN(timeout) ? 100 : timeout;
                    this._clearFocusPromise();
                    this._restoreFocusPromise = WinJS.Promise.timeout(timeout).then(this._restoreFocus)
                }, _clearFocusPromise: function _clearFocusPromise() {
                    if (this._restoreFocusPromise) {
                        this._restoreFocusPromise.cancel();
                        this._restoreFocusPromise = null
                    }
                }
        })})
})()
})();
/* >>>>>>/framework/selectionmanager.js:24380 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Framework");
    WinJS.Namespace.define("MS.Entertainment.UI.Framework", {SelectionManager: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function selectionManager(dataSource, defaultSelectionIndex, settingsKey, overrideUserSettingOnce) {
            MS.Entertainment.UI.Framework.ObservableBase.prototype.constructor.call(this);
            this._handleChangesInDataSource = this._handleChangesInDataSource.bind(this);
            this._dataSource = dataSource;
            this._settingsKey = settingsKey;
            this._defaultSelectionIndex = defaultSelectionIndex;
            this._overrideUserSettingOnce = !!overrideUserSettingOnce;
            this._updateWorkingDataSource();
            this._updateDefaultSelection();
            var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
            this.enableSaving = !configurationManager.shell.preventSelectionManagerSettingSaves
        }, {
            _dataSource: null, _workingDataSource: null, _bindings: null, _settingsKey: null, _overrideUserSettingOnce: false, _isRoamingSetting: true, _defaultSelectionIndex: -1, _selectedItem: null, _selectedIndex: -1, _disposed: false, enableSaving: true, compareById: false, dispose: function dispose() {
                    if (this._bindings) {
                        this._bindings.cancel();
                        this._bindings = null
                    }
                    this._setSelected(this._selectedItem, false);
                    this._dataSource = null;
                    this._selectedItem = null;
                    this._disposed = true
                }, dataSource: {
                    get: function() {
                        return this._dataSource
                    }, set: function(value) {
                            value = WinJS.Binding.unwrap(value);
                            var oldValue = this._dataSource;
                            var nullOrArray = !value || Array.isArray(value) || value instanceof MS.Entertainment.ObservableArray;
                            MS.Entertainment.UI.Framework.assert(nullOrArray, "Source was not an array. Only array's are supported");
                            if (value !== this._dataSource && nullOrArray && !this._disposed) {
                                this.updateAndNotify("dataSource", value);
                                this._updateWorkingDataSource();
                                this._updateDefaultSelection()
                            }
                        }
                }, defaultSelectionIndex: {
                    get: function() {
                        return this._defaultSelectionIndex
                    }, set: function(value) {
                            this.updateAndNotify("defaultSelectionIndex", value)
                        }
                }, isRoamingSetting: {
                    get: function() {
                        return this._isRoamingSetting
                    }, set: function(value) {
                            var oldValue = this._isRoamingSetting;
                            if (value !== this._isRoamingSetting) {
                                this._isRoamingSetting = value;
                                this.saveSelection();
                                this.dispatchChangeAndNotify("isRoamingSetting", value, oldValue)
                            }
                        }
                }, settingsKey: {
                    get: function() {
                        return this._settingsKey
                    }, set: function(value) {
                            this.updateAndNotify("settingsKey", value)
                        }
                }, selectedIndex: {
                    get: function() {
                        return this._selectedIndex
                    }, set: function(value) {
                            if (value !== this._selectedIndex) {
                                var oldValue = this._selectedIndex;
                                this._selectedIndex = value;
                                this._onSelectedIndexChanged(value, oldValue)
                            }
                        }
                }, selectedItem: {
                    get: function() {
                        return this._item(this.selectedIndex)
                    }, set: function(value) {
                            var oldValue = WinJS.Binding.unwrap(this.selectedItem);
                            value = WinJS.Binding.unwrap(value);
                            if (value !== oldValue) {
                                var index = -1;
                                if (this._workingDataSource)
                                    for (var i = 0; i < this._workingDataSource.length; i++)
                                        if (WinJS.Binding.unwrap(this._workingDataSource.item(i)) === value) {
                                            index = i;
                                            break
                                        }
                                this.selectedIndex = index
                            }
                        }
                }, clear: function clear() {
                    if (this._selectedIndex !== -1) {
                        var oldValue = this._selectedIndex;
                        this._selectedIndex = -1;
                        this._onSelectedIndexChanged(this._selectedIndex, oldValue)
                    }
                }, reselect: function reselect() {
                    this.dispatchEvent(MS.Entertainment.UI.Framework.SelectionManager.events.reselected, {
                        sender: this, selection: {
                                item: this.selectedItem, index: this.selectedIndex
                            }
                    })
                }, _setSelected: function _setSelected(item, value) {
                    if (item && item instanceof Object && "selected" in item)
                        item.selected = value
                }, _item: function _item(index) {
                    return (this._workingDataSource && index >= 0 && index < this._workingDataSource.length) ? this._workingDataSource.item(index) : null
                }, _indexFromId: function _indexFromId(id) {
                    var index = -1;
                    if (this._workingDataSource)
                        this._workingDataSource.some(function(item, itemIndex) {
                            if (item && item.id === id) {
                                index = itemIndex;
                                return true
                            }
                        });
                    return index
                }, _indexFromSettingsValue: function _indexFromSettingsValue(settingsValue) {
                    var index = settingsValue;
                    if (this.compareById)
                        index = this._indexFromId(settingsValue);
                    return index
                }, _settingsValueFromIndex: function _settinsValueFromIndex(index) {
                    var settingsValue = index;
                    if (this.compareById) {
                        var item = this._item(index);
                        settingsValue = item && item.id;
                        settingsValue = settingsValue || String.empty
                    }
                    return settingsValue
                }, _updateWorkingDataSource: function _updateWorkingDataSource() {
                    if (this._workingDataSource)
                        this._workingDataSource.removeChangeListener(this._handleChangesInDataSource);
                    if (!this._dataSource) {
                        this._workingDataSource = null;
                        return
                    }
                    var tempWorkingData = WinJS.Binding.unwrap(this._dataSource);
                    if (!(this._dataSource instanceof MS.Entertainment.ObservableArray))
                        tempWorkingData = new MS.Entertainment.ObservableArray(this._dataSource);
                    if (tempWorkingData)
                        tempWorkingData.addChangeListener(this._handleChangesInDataSource);
                    this._workingDataSource = tempWorkingData
                }, _updateDefaultSelection: function _updateDefaultSelection() {
                    var newIndex = -1;
                    if (this.settingsKey && this.enableSaving)
                        if (this.isRoamingSetting && !MS.Entertainment.Utilities.isVideoApp2)
                            newIndex = this._indexFromSettingsValue(MS.Entertainment.Utilities.getUserRoamingSetting(this.settingsKey));
                        else
                            newIndex = this._indexFromSettingsValue(Windows.Storage.ApplicationData.current.localSettings.values[this.settingsKey]);
                    if (this._overrideUserSettingOnce || newIndex < 0 || isNaN(newIndex) || (this._workingDataSource && newIndex >= this._workingDataSource.length))
                        newIndex = (isNaN(this._defaultSelectionIndex)) ? 0 : this._defaultSelectionIndex;
                    if (!this._workingDataSource || newIndex >= this._workingDataSource.length)
                        newIndex = -1;
                    if (newIndex !== this.selectedIndex)
                        this.selectedIndex = newIndex;
                    else if (newIndex >= 0)
                        this._onSelectedIndexChanged(newIndex, newIndex)
                }, _onSelectedIndexChanged: function _onSelectedIndexChanged(newValue, oldValue) {
                    if (!this._disposed) {
                        var oldSelectedItem = this._selectedItem;
                        var newSelectedItem = this._item(newValue);
                        var selectedIndexChanged = newValue !== oldValue;
                        var selectedItemChanged = newSelectedItem !== oldSelectedItem;
                        this._setSelected(oldSelectedItem, false);
                        if (selectedIndexChanged)
                            this.dispatchChangeAndNotify("selectedIndex", newValue, oldValue);
                        if (selectedItemChanged)
                            this.notify("selectedItem", newSelectedItem, oldSelectedItem);
                        this._selectedItem = newSelectedItem;
                        this._setSelected(newSelectedItem, true);
                        if (!this._overrideUserSettingOnce)
                            this._saveSelection(newValue);
                        else
                            this._overrideUserSettingOnce = false;
                        if (selectedItemChanged)
                            this.dispatchEvent(MS.Entertainment.UI.Framework.SelectionManager.events.selectedItemChanged, {
                                sender: this, newSelection: {
                                        item: newSelectedItem, index: newValue
                                    }, oldSelection: {
                                        item: oldSelectedItem, index: oldValue
                                    }
                            })
                    }
                }, saveSelection: function saveSelection() {
                    if (this.dataSource && this.dataSource.length)
                        this._saveSelection(this.selectedIndex)
                }, _saveSelection: function _saveSelection(value) {
                    if (this.settingsKey && this.enableSaving && value >= 0)
                        if (this.isRoamingSetting && !MS.Entertainment.Utilities.isVideoApp2)
                            MS.Entertainment.Utilities.setUserRoamingSetting(this.settingsKey, this._settingsValueFromIndex(value));
                        else
                            Windows.Storage.ApplicationData.current.localSettings.values[this.settingsKey] = this._settingsValueFromIndex(value)
                }, _handleChangesInDataSource: function _handleChangesInDataSource(notification) {
                    var newIndex = this.selectedIndex;
                    switch (notification.type) {
                        case MS.Entertainment.ObservableArray.OperationTypes.add:
                            if (notification.index <= this.selectedIndex)
                                this.selectedIndex = this.selectedIndex + 1;
                            break;
                        case MS.Entertainment.ObservableArray.OperationTypes.remove:
                            if (notification.index <= this.selectedIndex && this.selectedIndex > 0)
                                this.selectedIndex = this.selectedIndex - 1;
                            else if (notification.index === this.selectedIndex)
                                this._onSelectedIndexChanged(notification.index, this.selectedIndex);
                            break;
                        case MS.Entertainment.ObservableArray.OperationTypes.reset:
                            this.selectedIndex = this._defaultSelectionIndex;
                            break;
                        default:
                            MS.Entertainment.UI.Controls.assert(false, "unsupported notification type: " + notification.type);
                            break
                    }
                    if (this.selectedIndex < 0 && this._workingDataSource.length > this._defaultSelectionIndex)
                        this.selectedIndex = this._defaultSelectionIndex
                }
        }, {events: {
                selectedItemChanged: "selectedItemChanged", reselected: "reselected"
            }})})
})()
})();
/* >>>>>>/controls/pivotcontrols.js:24603 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        PivotsControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ItemsControl", null, function pivotsControlConstructor() {
            this._keyDown = this._keyDown.bind(this);
            this._onGlobalKeyDown = this._onGlobalKeyDown.bind(this);
            this.domElement.addEventListener("keydown", this._keyDown);
            if (MS.Entertainment.Utilities.isApp2)
                this.selectedIndex = 0
        }, {
            _applyItemTemplateCounter: 0, focusItemOnSelectedIndexChanged: true, manageDownNavigation: false, delayListeningForGlobalNavigation: false, _globalHandlerEvents: null, focusOverrideData: {down: '.currentPage .modifierControl:not([tabIndex=\'-1\'])'}, controlName: "PivotsControl", initialize: function initialize() {
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.initialize.call(this, arguments);
                    this.bind("selectedIndex", this._selectedIndexChanged.bind(this));
                    if (!this.delayListeningForGlobalNavigation)
                        this._listenForGlobalNavigation()
                }, applyItemTemplate: function applyItemTemplate(container, dataContext, index) {
                    var child = container.children[0];
                    child.setAttribute("data-win-automationId", "pivot{0}".format(index));
                    child.pivotPropertyChangeHandler = this._onPropertyChange.bind(this);
                    MS.Entertainment.Utilities.attachPropertyChangeEvent(child, child.pivotPropertyChangeHandler);
                    if (MS.Entertainment.Utilities.isApp2 && this.manageDownNavigation && this.focusOverrideData)
                        child.setAttribute("data-win-focus", JSON.stringify(this.focusOverrideData));
                    if (this.isVoiceEnabled) {
                        this.addVoiceAttribute(child, true, false);
                        WinJS.Utilities.addClass(child, this.voiceTextStyle);
                        if (child.winControl && dataContext && dataContext.options && dataContext.options.voice)
                            this.updateVoiceProperties(child.winControl, dataContext.options.voice)
                    }
                    if (this.selectedIndex === this._applyItemTemplateCounter) {
                        child.setAttribute("tabindex", "0");
                        WinJS.Utilities.addClass(child, "selected");
                        child.setAttribute("aria-selected", true);
                        if (this.focusItemOnSelectedIndexChanged)
                            MS.Entertainment.UI.Framework.focusElement(child)
                    }
                    this._applyItemTemplateCounter++;
                    return container
                }, setTabPanel: function setTabPanel(tabPanel) {
                    for (var i = 0; i < this.domElement.children.length; i++)
                        MS.Entertainment.Framework.AccUtils.createAndAddAriaLink(this._getChildDomElement(i), tabPanel, "aria-controls")
                }, enableGlobalNavigation: function enableGlobalNavigation() {
                    this._listenForGlobalNavigation()
                }, _onPropertyChange: function _onPropertyChange(evt) {
                    if (evt && evt.propertyName === "aria-selected")
                        if (evt.srcElement.getAttribute("aria-selected") === "true")
                            if (this.focusItemOnSelectedIndexChanged) {
                                MS.Entertainment.UI.Framework.focusElement(evt.srcElement);
                                evt.srcElement.click()
                            }
                }, unload: function unload() {
                    for (var i = 0; i < this.domElement.children.length; i++) {
                        var childElement = this._getChildDomElement(i);
                        MS.Entertainment.Utilities.detachPropertyChangeEvent(childElement, childElement.pivotPropertyChangeHandler);
                        childElement.pivotPropertyChangeHandler = null
                    }
                    this._stopListeningForGlobalNavigation();
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.unload.call(this)
                }, freeze: function freeze() {
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.freeze.call(this);
                    this._stopListeningForGlobalNavigation()
                }, thaw: function thaw() {
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.thaw.call(this);
                    this._listenForGlobalNavigation()
                }, _listenForGlobalNavigation: function _listenForGlobalNavigation() {
                    if (!MS.Entertainment.Utilities.isApp2)
                        return;
                    var currentPage = MS.Entertainment.Utilities.findParentElementByClassName(this.domElement, "currentPage");
                    if (!currentPage)
                        return;
                    this._globalHandlerEvents = MS.Entertainment.Utilities.addEventHandlers(currentPage, {keydown: this._onGlobalKeyDown})
                }, _stopListeningForGlobalNavigation: function _stopListeningForGlobalNavigation() {
                    if (!MS.Entertainment.Utilities.isApp2)
                        return;
                    if (!this._globalHandlerEvents)
                        return;
                    this._globalHandlerEvents.cancel()
                }, focusLogicalRight: function focusLogicalRight() {
                    if (MS.Entertainment.Utilities.getTextDirection() === MS.Entertainment.Utilities.TextDirections.RightToLeft)
                        return this._focusLogicalLeftImpl();
                    return this._focusLogicalRightImpl()
                }, _focusLogicalRightImpl: function _focusLogicalRightImpl() {
                    if (this.selectedIndex < this.domElement.children.length - 1) {
                        var childElement = this._getChildDomElement(this.selectedIndex + 1);
                        if (MS.Entertainment.Utilities.isApp2)
                            childElement.setAttribute("tabindex", 0);
                        if (!MS.Entertainment.Utilities.isApp2 || this.domElement.contains(document.activeElement))
                            MS.Entertainment.UI.Framework.focusElement(childElement);
                        childElement.click()
                    }
                    return true
                }, focusLogicalLeft: function focusLogicalLeft() {
                    if (MS.Entertainment.Utilities.getTextDirection() === MS.Entertainment.Utilities.TextDirections.RightToLeft)
                        return this._focusLogicalRightImpl();
                    return this._focusLogicalLeftImpl()
                }, _focusLogicalLeftImpl: function _focusLogicalLeftImpl() {
                    if (this.selectedIndex > 0) {
                        var childElement = this._getChildDomElement(this.selectedIndex - 1);
                        if (MS.Entertainment.Utilities.isApp2)
                            childElement.setAttribute("tabindex", 0);
                        if (!MS.Entertainment.Utilities.isApp2 || this.domElement.contains(document.activeElement))
                            MS.Entertainment.UI.Framework.focusElement(childElement);
                        childElement.click();
                        return true
                    }
                    else
                        return false
                }, _onGlobalKeyDown: function _onGlobalKeyDown(e) {
                    if (MS.Entertainment.Utilities.getDirectionFromGlobalKeyInput(e))
                        this._keyDown(e);
                    return
                }, _keyDown: function _keyDown(e) {
                    if (MS.Entertainment.Utilities.isApp1 && e.altKey)
                        return;
                    var handled = false;
                    switch (e.keyCode) {
                        case WinJS.Utilities.Key.rightArrow:
                        case WinJS.Utilities.Key.rArrow:
                        case WinJS.Utilities.Key.rOtherArrow:
                        case WinJS.Utilities.Key.rGlobal:
                        case WinJS.Utilities.Key.pageDown:
                            handled = this.focusLogicalRight();
                            break;
                        case WinJS.Utilities.Key.leftArrow:
                        case WinJS.Utilities.Key.lArrow:
                        case WinJS.Utilities.Key.lOtherArrow:
                        case WinJS.Utilities.Key.lGlobal:
                        case WinJS.Utilities.Key.pageUp:
                            handled = this.focusLogicalLeft();
                            break;
                        default:
                            return
                    }
                    if (handled) {
                        e.stopPropagation();
                        e.preventDefault()
                    }
                }, _selectedIndexChanged: function _selectedIndexChanged(newIndex, oldIndex) {
                    for (var i = 0; i < this.domElement.children.length; i++) {
                        var childElement = this._getChildDomElement(i);
                        WinJS.Utilities.removeClass(childElement, "selected");
                        childElement.setAttribute("tabindex", -1);
                        childElement.setAttribute("aria-selected", false)
                    }
                    var newSelectedChildElement = this._getChildDomElement(newIndex);
                    if (newSelectedChildElement) {
                        WinJS.Utilities.addClass(newSelectedChildElement, "selected");
                        newSelectedChildElement.setAttribute("tabindex", "0");
                        newSelectedChildElement.setAttribute("aria-selected", true);
                        if (this.focusItemOnSelectedIndexChanged || (this.domElement && this.domElement.contains(document.activeElement)))
                            MS.Entertainment.UI.Framework.focusElement(newSelectedChildElement);
                        this.selectedIndex = newIndex
                    }
                }, _getChildDomElement: function _getChildDomElement(index) {
                    if (index >= 0 && index < this.domElement.children.length)
                        return this.domElement.children[index].children[0];
                    return null
                }, _selectedIndex: -1, selectedIndex: {
                    get: function() {
                        return this._selectedIndex
                    }, set: function(val) {
                            if (val === this._selectedIndex)
                                return;
                            var old = this._selectedIndex;
                            this._selectedIndex = val;
                            this.notify("selectedIndex", val, old)
                        }
                }
        }, {}), VerticalPivotControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ItemsControlWithViewModel", null, null, {
                _expandedItems: null, _expandBindings: null, _navigationControlEvents: null, _navigationControlBindings: null, _dividerTemplateProvider: null, _selectionManagerHandlers: null, _selectionManager: null, _tabPanelId: null, keyboardNavigable: true, keyboardNavigationManagerClass: MS.Entertainment.Framework.VerticalKeyboardNavigationManager, keyboardNavigationSetTabIndex: true, focusItemOnSelectedIndexChanged: true, dividers: true, reselectWhenAlreadySelected: false, containerStyle: MS.Entertainment.UI.Controls.ItemsControl.ContainerStyles.verticalFlow, itemTemplate: "/Controls/PivotControls.html#verticalPivotButtonTemplate", dividerTemplate: "/Controls/PivotControls.html#verticalDividerTemplate", initialize: function initialize() {
                        MS.Entertainment.UI.Controls.ItemsControlWithViewModel.prototype.initialize.call(this);
                        this._navigationControlEvents = MS.Entertainment.Utilities.addEvents(this, {
                            click: this._onClick.bind(this), keydown: this._onKeyDown.bind(this)
                        })
                    }, unload: function unload() {
                        if (this._navigationControlBindings) {
                            this._navigationControlBindings.cancel();
                            this._navigationControlBindings = null
                        }
                        if (this._expandBindings) {
                            this._expandBindings.cancel();
                            this._expandBindings = null
                        }
                        if (this._navigationControlEvents) {
                            this._navigationControlEvents.cancel();
                            this._navigationControlEvents = null
                        }
                        for (var i = 0; i < this.domElement.children.length; i++)
                            this._detachItemListeners(this.domElement.children[i]);
                        MS.Entertainment.UI.Controls.ItemsControlWithViewModel.prototype.unload.call(this)
                    }, selectionManager: {
                        get: function() {
                            return this._selectionManager
                        }, set: function(value) {
                                if (this._selectionManager !== value) {
                                    var oldValue = this._selectionManager;
                                    this._selectionManager = value;
                                    if (this._navigationControlBindings) {
                                        this._navigationControlBindings.cancel();
                                        this._navigationControlBindings = null
                                    }
                                    if (this._selectionManagerEvents) {
                                        this._selectionManagerEvents.cancel();
                                        this._selectionManagerEvents = null
                                    }
                                    this._navigationControlBindings = WinJS.Binding.bind(this._selectionManager, {
                                        dataSource: this._selectionManagerDataSourceChangeHandler.bind(this), selectedIndex: this._expand.bind(this)
                                    });
                                    this._selectionManagerEvents = MS.Entertainment.UI.Framework.addEventHandlers(this._selectionManager, {selectedItemChanged: this._selectedItemChanged.bind(this)});
                                    this.notify("selectionManager", value, oldValue)
                                }
                            }
                    }, loadItemTemplate: function loadItemTemplate() {
                        if (!this.dividers)
                            return MS.Entertainment.UI.Controls.ItemsControlWithViewModel.prototype.loadItemTemplate.apply(this, arguments);
                        var completePromise;
                        if (!this._dividerTemplateProvider)
                            completePromise = this._loadTemplate(this.dividerTemplate);
                        else
                            completePromise = WinJS.Promise.wrap(this._dividerTemplateProvider);
                        return completePromise.then(function baseLoadTemplate(template) {
                                this._dividerTemplateProvider = template;
                                return MS.Entertainment.UI.Controls.ItemsControlWithViewModel.prototype.loadItemTemplate.apply(this)
                            }.bind(this))
                    }, selectTemplate: function(item) {
                        if (!this.dividers)
                            return MS.Entertainment.UI.Controls.ItemsControlWithViewModel.prototype.selectTemplate.apply(this, arguments);
                        return this.loadItemTemplate().then(function() {
                                if (item && WinJS.Binding.unwrap(item.data) === MS.Entertainment.UI.Controls.VerticalPivotControl.divider)
                                    return this._dividerTemplateProvider;
                                else
                                    return this._itemTemplateProvider
                            }.bind(this))
                    }, applyItemTemplate: function applyItemTemplate(container, dataContext) {
                        var item = this._item(dataContext.index);
                        if (item) {
                            item.tabPanelId = this._tabPanelId;
                            if (container) {
                                var buttonElement = this._getButtonElementFromItem(container);
                                if (buttonElement) {
                                    var automationId = this._getAutomationId(item);
                                    if (automationId)
                                        buttonElement.setAttribute("data-win-automationId", automationId + "_view");
                                    buttonElement.pivotPropertyChangeHandler = this._onPropertyChange.bind(this);
                                    MS.Entertainment.Utilities.attachPropertyChangeEvent(buttonElement, buttonElement.pivotPropertyChangeHandler);
                                    if (item.selected) {
                                        WinJS.Utilities.query(".win-focusable.selected", this.domElement).forEach(function(element) {
                                            WinJS.Utilities.removeClass(element, "selected")
                                        });
                                        WinJS.Utilities.addClass(buttonElement, "selected")
                                    }
                                    if (item.selected || (dataContext.index === 0 && this.selectionManager && !this.selectionManager.selectedItem))
                                        if (this.keyboardNavigable)
                                            WinJS.Promise.timeout().done(function _setTabIndexOnSelectedItem() {
                                                if (this._keyboardNavigationManager)
                                                    this._keyboardNavigationManager.setTabIndexedItem(buttonElement)
                                            }.bind(this))
                                }
                            }
                        }
                        return container
                    }, _getButtonElementFromItem: function _getButtonElementFromItem(element) {
                        var foundButtonElement;
                        if (element) {
                            if (element.tagName === "BUTTON")
                                foundButtonElement = element;
                            else
                                foundButtonElement = element.querySelector("BUTTON");
                            if (!foundButtonElement && element.firstElementChild)
                                foundButtonElement = element.firstElementChild.firstElementChild
                        }
                        return foundButtonElement
                    }, _onPropertyChange: function _onPropertyChange(evt) {
                        if (evt && evt.propertyName === "aria-selected" && evt.srcElement.getAttribute("aria-selected") === "true") {
                            if (this.focusItemOnSelectedIndexChanged)
                                MS.Entertainment.UI.Framework.focusElement(evt.srcElement);
                            var index = -1;
                            if (evt.srcElement.winControl && !MS.Entertainment.UI.Framework.checkIsElementOnly(evt.srcElement))
                                index = this._findIndexFromControl(evt.srcElement.winControl);
                            else
                                index = this._findIndexFromElement(evt.srcElement);
                            if (index >= 0 && index !== this.selectionManager.selectedIndex)
                                this._selectItemAt(index)
                        }
                    }, _selectItemAt: function _selectItemAt(index) {
                        if (this.selectionManager && this._isValidIndex(index))
                            if (index !== this.selectionManager.selectedIndex) {
                                var item = this._item(index) || {};
                                if (!item.isDisabled)
                                    this.selectionManager.selectedIndex = index
                            }
                            else if (this.reselectWhenAlreadySelected)
                                this.selectionManager.reselect();
                            else if (this._expandedItems && this._expandedItems.indexOf(this._item(index)) < 0)
                                this._unexpand();
                            else
                                this._expand(index)
                    }, _nextValidIndex: function _nextValidIndex(direction) {
                        var newIndex = 0;
                        if (this.selectionManager && this.selectionManager.dataSource) {
                            var newItem = null;
                            var firstIndex = this.selectionManager.selectedIndex;
                            newIndex = firstIndex;
                            do {
                                newIndex += direction;
                                if (this._isValidIndex(newIndex))
                                    newItem = this._item(newIndex);
                                else {
                                    newIndex = firstIndex;
                                    break
                                }
                            } while (!newItem || newItem.isDisabled)
                        }
                        return newIndex
                    }, setTabPanelId: function setTabPanelId(tabPanelId) {
                        this._tabPanelId = tabPanelId
                    }, _onClick: function _onClick(args) {
                        var target = args && args.target;
                        var winControl = target && target.winControl;
                        if (winControl && !MS.Entertainment.UI.Framework.checkIsElementOnly(target)) {
                            var index = this._findIndexFromControl(winControl);
                            this._selectItemAt(index)
                        }
                        else if (target) {
                            var index = this._findIndexFromElement(target);
                            this._selectItemAt(index)
                        }
                    }, _onKeyDown: function _onKeyDown(e) {
                        if (!this._keyboardNavigationManager)
                            return;
                        if (e.keyCode === WinJS.Utilities.Key.rightArrow) {
                            var focusedItem = this._keyboardNavigationManager.getFocusedItem();
                            var index = focusedItem ? this._findIndexFromControl(focusedItem.winControl) : -1;
                            if (this._isValidIndex(index) && !this._isSubItem(index)) {
                                var item = this._item(index);
                                if (item && "items" in item)
                                    if (!item.expanded) {
                                        if (this.selectionManager.selectedIndex !== index)
                                            this.selectionManager.selectedIndex = index;
                                        this._expand(index)
                                    }
                                    else if (this._expandedItems && this._expandedItems.length) {
                                        var firstChildIndex = index + 2;
                                        this._keyboardNavigationManager.setFocusedItem(this.domElement.children[firstChildIndex], true)
                                    }
                            }
                        }
                        else if (e.keyCode === WinJS.Utilities.Key.leftArrow) {
                            var focusedItem = this._keyboardNavigationManager.getFocusedItem();
                            var index = focusedItem ? this._findIndexFromControl(focusedItem.winControl) : -1;
                            if (this._isValidIndex(index))
                                if (this._isSubItem(index)) {
                                    var parentIndex = this._indexOf(this._expandedItems[0]) - 1;
                                    this._keyboardNavigationManager.setFocusedItem(this.domElement.children[parentIndex], true)
                                }
                                else {
                                    var item = this._item(index);
                                    if (item && item.expanded) {
                                        if (this.selectionManager.selectedIndex !== index)
                                            this.selectionManager.selectedIndex = index;
                                        this._unexpand()
                                    }
                                }
                        }
                        return true
                    }, _findIndexFromElement: function _findIndexFromElement(element) {
                        var index = -1;
                        var children = this.domElement && this.domElement.children;
                        if (children)
                            for (var i = 0; i < children.length; i++)
                                if (children[i] === element || children[i].contains(element)) {
                                    index = i;
                                    break
                                }
                        return index
                    }, _findIndexFromControl: function _findIndexFromControl(winControl) {
                        var result;
                        if (!winControl)
                            return -1;
                        if (winControl.data)
                            result = this._indexOf(winControl.data);
                        if (!result && !isNaN(winControl.index))
                            result = winControl.index;
                        return result
                    }, _selectionManagerDataSourceChangeHandler: function _selectionManagerDataSourceChangeHandler(newValue, oldValue) {
                        if (newValue)
                            this.dataSource = newValue;
                        else if (this.dataSource === oldValue)
                            this.dataSource = null
                    }, _listChangedHandler: function _listChangedHandler(newValue, oldValue) {
                        if (this.selectionManager && newValue)
                            this.selectionManager.dataSource = newValue;
                        MS.Entertainment.UI.Controls.ItemsControlWithViewModel.prototype._listChangedHandler.apply(this, arguments)
                    }, _detachItemListeners: function _detachItemListeners(element) {
                        var buttonElement = this._getButtonElementFromItem(element);
                        if (buttonElement) {
                            MS.Entertainment.Utilities.detachPropertyChangeEvent(buttonElement, buttonElement.pivotPropertyChangeHandler);
                            buttonElement.pivotPropertyChangeHandler = null
                        }
                    }, _handleItemRemoved: function _handleItemRemoved(element) {
                        if (!element)
                            return;
                        this._detachItemListeners(element);
                        if (this.keyboardNavigable && this._keyboardNavigationManager) {
                            var currentItemWithTabIndex = this._keyboardNavigationManager.getTabIndexedItem();
                            if (currentItemWithTabIndex && (currentItemWithTabIndex === element || element.contains(currentItemWithTabIndex)))
                                this._keyboardNavigationManager.focusFirstItemInContainer(this.domElement, false, false, true)
                        }
                    }, _item: function _item(index) {
                        return this._isValidIndex(index) ? (Array.isArray(this.selectionManager.dataSource) ? this.selectionManager.dataSource[index] : this.selectionManager.dataSource.item(index)) : null
                    }, _isSubItem: function _isChildItem(index) {
                        return this._expandedItems && this._expandedItems.indexOf(this._item(index)) >= 0
                    }, _indexOf: function _indexOf(item) {
                        var result = -1;
                        if (this.selectionManager && this.selectionManager.dataSource) {
                            result = this.selectionManager.dataSource.indexOf(item);
                            if (result < 0)
                                result = this.selectionManager.dataSource.indexOf(WinJS.Binding.as(item))
                        }
                        return result
                    }, _lastIndexOf: function _indexOf(item, fromIndex) {
                        var result = -1;
                        if (this.selectionManager && this.selectionManager.dataSource) {
                            result = this.selectionManager.dataSource.lastIndexOf(item, fromIndex);
                            if (result < 0)
                                result = this.selectionManager.dataSource.lastIndexOf(WinJS.Binding.as(item))
                        }
                        return result
                    }, _selectedItemChanged: function _selectedItemChanged(args) {
                        var detail = args.detail;
                        WinJS.Utilities.query(".win-focusable.selected", this.domElement).forEach(function(element) {
                            WinJS.Utilities.removeClass(element, "selected")
                        });
                        if (!detail.newSelection)
                            return;
                        var newSelectedElement = this.domElement.children[detail.newSelection.index];
                        if (!newSelectedElement)
                            return;
                        if (newSelectedElement && !WinJS.Utilities.hasClass(newSelectedElement, "win-focusable"))
                            newSelectedElement = newSelectedElement.querySelector(".win-focusable");
                        if (!newSelectedElement)
                            return;
                        WinJS.Utilities.addClass(newSelectedElement, "selected")
                    }, _expand: function _expand(index, oldIndex, preventBinding) {
                        WinJS.Promise.timeout().done(function _updateTabIndexedItem() {
                            if (this._unloaded)
                                return;
                            if (!(this._keyboardNavigationManager && this.keyboardNavigable))
                                return;
                            if (index >= 0 && index < this.domElement.children.length) {
                                var child = this.domElement.children[index];
                                if (child && this._keyboardNavigationManager) {
                                    var focusableElement = WinJS.Utilities.hasClass(child, "win-focusable") ? child : child.querySelector(".win-focusable");
                                    this._keyboardNavigationManager.setTabIndexedItem(focusableElement)
                                }
                            }
                        }.bind(this));
                        var item = this._item(index);
                        if (item && oldIndex !== undefined && !preventBinding) {
                            var telemetryParameters = {
                                    title: this._getAutomationId(item), automationId: MS.Entertainment.UI.AutomationIds.verticalPivotSelected
                                };
                            MS.Entertainment.Utilities.Telemetry.logCommandClicked(telemetryParameters)
                        }
                        if (this._expandedItems && (this._expandedItems.indexOf(this._item(index + 1)) >= 0 || this._expandedItems.indexOf(item) >= 0))
                            return;
                        this._unexpand();
                        if (this._expandBindings) {
                            this._expandBindings.cancel();
                            this._expandBindings = null
                        }
                        if (item && item.items && item.items.length !== 0 && this.selectionManager.selectedIndex === index) {
                            this._expandedItems = this._addExpandedItems(index + 1, item.items);
                            if ("expanded" in item)
                                item.expanded = true
                        }
                        else if (!preventBinding && item && this.selectionManager.selectedIndex === index)
                            this._expandBindings = WinJS.Binding.bind(item, {items: function(newValue, oldValue) {
                                    if (oldValue !== undefined)
                                        this._expand(index, oldIndex, true)
                                }.bind(this)})
                    }, _unexpand: function _unexpand() {
                        var items = this._expandedItems;
                        this._expandedItems = null;
                        if (!items || !items.length || !this.selectionManager || !this.selectionManager.dataSource)
                            return;
                        var startIndex = this._indexOf(items[0]);
                        var endIndex = this._lastIndexOf(items[items.length - 1], startIndex + items.length - 1);
                        var expandedItem = this._item(startIndex - 1);
                        if (startIndex >= 0 && endIndex >= 0 && endIndex >= startIndex)
                            this.selectionManager.dataSource.splice(startIndex, endIndex - startIndex + 1);
                        if (expandedItem) {
                            if ("childIds" in expandedItem)
                                expandedItem.childIds = null;
                            if ("expanded" in expandedItem)
                                expandedItem.expanded = false
                        }
                    }, _addExpandedItems: function _addExpandedItems(index, items) {
                        if (!items || !items.length || !this.selectionManager || !this.selectionManager.dataSource)
                            return null;
                        var parentItem = this._item(index - 1);
                        var divider = MS.Entertainment.UI.Controls.VerticalPivotControl.divider;
                        var result = [divider].concat(items, [divider]);
                        var args = [index, 0].concat(result);
                        this.selectionManager.dataSource.splice.apply(this.selectionManager.dataSource, args);
                        if (parentItem && "childIds" in parentItem) {
                            parentItem.childIds = [];
                            for (var i = index + 1; i < index + items.length + 1; i++) {
                                var childElement = this.domElement.children[i];
                                MS.Entertainment.Framework.AccUtils.createAriaLinkId(childElement);
                                parentItem.childIds.push(childElement.id)
                            }
                        }
                        return result
                    }, _isValidIndex: function _isValidIndex(index) {
                        return this.selectionManager && this.selectionManager.dataSource && this.selectionManager.dataSource.length > index && index >= 0
                    }, _getAutomationId: function _getAutomationId(item) {
                        return item.id || (item.isRoot ? MS.Entertainment.UI.AutomationIds.genrePivot : MS.Entertainment.UI.AutomationIds.subgenrePivot)
                    }
            }, {}, {divider: {divider: true}})
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {DeclarativeVerticalPivotControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.VerticalPivotControl", null, null, null, null, {isDeclarativeControlContainer: true})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {HorizontalPivotControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.VerticalPivotControl", null, function() {
            this._onGlobalKeyDown = this._onGlobalKeyDown.bind(this)
        }, {
            _globalHandlerEvents: null, focusOverrideData: {down: '.currentPage .modifierControl:not([tabIndex=\'-1\'])'}, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.VerticalPivotControl.prototype.initialize.apply(this, arguments);
                    this._listenForGlobalNavigation()
                }, unload: function unload() {
                    this._stopListeningForGlobalNavigation();
                    MS.Entertainment.UI.Controls.VerticalPivotControl.prototype.unload.call(this)
                }, freeze: function freeze() {
                    MS.Entertainment.UI.Controls.VerticalPivotControl.prototype.freeze.call(this);
                    this._stopListeningForGlobalNavigation()
                }, thaw: function thaw() {
                    MS.Entertainment.UI.Controls.VerticalPivotControl.prototype.thaw.call(this);
                    this._listenForGlobalNavigation()
                }, applyItemTemplate: function applyItemTemplate(container, dataContext) {
                    var result = MS.Entertainment.UI.Controls.VerticalPivotControl.prototype.applyItemTemplate.apply(this, arguments);
                    var child = result.querySelector("button");
                    if (child && MS.Entertainment.Utilities.isApp2 && this.focusOverrideData)
                        child.setAttribute("data-win-focus", JSON.stringify(this.focusOverrideData));
                    return result
                }, _listenForGlobalNavigation: function _listenForGlobalNavigation() {
                    if (!MS.Entertainment.Utilities.isApp2)
                        return;
                    var currentPage = MS.Entertainment.Utilities.findParentElementByClassName(this.domElement, "currentPage");
                    if (!currentPage)
                        return;
                    this._globalHandlerEvents = MS.Entertainment.Utilities.addEventHandlers(currentPage, {keydown: this._onGlobalKeyDown})
                }, _stopListeningForGlobalNavigation: function _stopListeningForGlobalNavigation() {
                    if (!MS.Entertainment.Utilities.isApp2)
                        return;
                    if (!this._globalHandlerEvents)
                        return;
                    this._globalHandlerEvents.cancel()
                }, _expand: function _expand(index, oldIndex, preventBinding) {
                    MS.Entertainment.UI.Controls.VerticalPivotControl.prototype._expand.apply(this, arguments);
                    var unselectedItems = WinJS.Utilities.query("button:not(.selected)", this.domElement);
                    unselectedItems.forEach(function(item) {
                        item.tabIndex = -1
                    })
                }, _onGlobalKeyDown: function _onGlobalKeyDown(e) {
                    switch (e.keyCode) {
                        case WinJS.Utilities.Key.rGlobal:
                        case WinJS.Utilities.Key.lGlobal:
                            this._onKeyDown(e);
                            break;
                        case WinJS.Utilities.Key.pageUp:
                        case WinJS.Utilities.Key.pageDown:
                            if (e.altKey)
                                this._onKeyDown(e);
                            break
                    }
                    return
                }, _onKeyDown: function _onKeyDown(e) {
                    if (!this._keyboardNavigationManager)
                        return;
                    if (MS.Entertainment.Utilities.isApp1 && e.altKey)
                        return;
                    switch (e.keyCode) {
                        case WinJS.Utilities.Key.rightArrow:
                        case WinJS.Utilities.Key.rArrow:
                        case WinJS.Utilities.Key.rOtherArrow:
                        case WinJS.Utilities.Key.rGlobal:
                        case WinJS.Utilities.Key.pageDown:
                            this._selectItemAt(this._nextValidIndex(1));
                            break;
                        case WinJS.Utilities.Key.leftArrow:
                        case WinJS.Utilities.Key.lArrow:
                        case WinJS.Utilities.Key.lOtherArrow:
                        case WinJS.Utilities.Key.lGlobal:
                        case WinJS.Utilities.Key.pageUp:
                            this._selectItemAt(this._nextValidIndex(-1));
                            break;
                        default:
                            return
                    }
                    e.stopPropagation()
                }, containerStyle: MS.Entertainment.UI.Controls.ItemsControl.ContainerStyles.horizontalFlow, itemTemplate: "/Controls/PivotControls.html#horizontalPivotButtonTemplate", dividerTemplate: "/Controls/PivotControls.html#horizontalDividerTemplate"
        })})
})();
(function runVoiceMixins() {
    MS.Entertainment.Utilities.runVoiceControlMixins(MS.Entertainment.UI.Controls.PivotsControl)
})()
})();
/* >>>>>>/framework/winjsnavigation.js:25212 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Framework) {
                var fx = MS.Entertainment.UI.Framework;
                var PivotData = (function(_super) {
                        __extends(PivotData, _super);
                        function PivotData(dataContext, template, title, icon, moniker, onNavigateStart, onNavigateComplete, dropActionId, supportsSnapped) {
                            if (typeof supportsSnapped === "undefined")
                                supportsSnapped = false;
                            _super.call(this);
                            this.dataContext = dataContext;
                            this.template = template;
                            this.title = title;
                            this.icon = icon;
                            this.moniker = moniker;
                            this.onNavigateStart = onNavigateStart;
                            this.onNavigateComplete = onNavigateComplete;
                            this.dropActionId = dropActionId;
                            this.supportsSnapped = supportsSnapped;
                            this._selected = false
                        }
                        Object.defineProperty(PivotData.prototype, "selected", {
                            get: function() {
                                return this._selected
                            }, set: function(value) {
                                    this.updateAndNotify("selected", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(PivotData.prototype, "id", {
                            get: function() {
                                return this.moniker
                            }, enumerable: true, configurable: true
                        });
                        return PivotData
                    })(MS.Entertainment.UI.Framework.ObservableBase);
                Framework.PivotData = PivotData;
                var NavigationOperation = (function() {
                        function NavigationOperation(dataContext, template, contentComplete, skipUI, animatePageTransition, dataContextParameter, monikerData, supportsSnapped) {
                            if (typeof supportsSnapped === "undefined")
                                supportsSnapped = false;
                            this.dataContext = null;
                            this.template = null;
                            this.contentComplete = null;
                            this.skipUI = false;
                            this.animatePageTransition = false;
                            this.supportsSnapped = false;
                            this.dataContext = dataContext;
                            this.template = template;
                            this.contentComplete = contentComplete;
                            if (skipUI === null || skipUI === undefined)
                                this.skipUI = false;
                            else
                                this.skipUI = skipUI;
                            if (animatePageTransition === null || animatePageTransition === undefined)
                                this.animatePageTransition = true;
                            else
                                this.animatePageTransition = animatePageTransition;
                            this.dataContextParameter = dataContextParameter;
                            this.monikerData = monikerData;
                            this.supportsSnapped = supportsSnapped
                        }
                        return NavigationOperation
                    })();
                Framework.NavigationOperation = NavigationOperation;
                var Navigation = (function(_super) {
                        __extends(Navigation, _super);
                        function Navigation(_contentContainer, pivots) {
                            _super.call(this);
                            this._contentContainer = _contentContainer;
                            this._suppressNavigationOnNextSelectionChange = false;
                            this._skipUICreationOnNextPivotChange = false;
                            this._firstNavigate = true;
                            this.animatePageTransitions = false;
                            this.focusImmediatelyOnBackNavigation = false;
                            this.forceFUENavigation = false;
                            this.playBackNavigationSound = false;
                            this.clearCachesOnNavigation = false;
                            this.setFocusContainerOnNavigation = false;
                            this.blockInputOnHiddenPages = false;
                            this._onFUEPage = false;
                            this._isFirstLocationLoaded = false;
                            this._isNavigationInProgress = false;
                            this._deferTemplateLoads = false;
                            this._defaultPivotIndex = 0;
                            this.focusTimeout = Navigation.DEFAULT_FOCUS_TIMEOUT;
                            this._journal = Navigation.getJournal();
                            this._journalEvents = fx.addEventHandlers(this._journal, {
                                beforenavigate: this._handleBeforeNavigate.bind(this), navigating: this._handleNavigating.bind(this), navigated: this._handleNavigated.bind(this)
                            });
                            fx.currentContentContainer = document.querySelector(".control-app")
                        }
                        Object.defineProperty(Navigation.prototype, "primaryPivots", {
                            get: function() {
                                return this._primaryPivots
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(Navigation.prototype, "currentSupportsSnapped", {
                            get: function() {
                                var currentSupportsSnapped = false;
                                if (this._journal && this._journal.state)
                                    currentSupportsSnapped = !!this._journal.state.supportsSnapped;
                                return currentSupportsSnapped
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(Navigation.prototype, "realizedDataContext", {
                            get: function() {
                                return this._journal && this._journal.state && this._journal.state.realizedDataContext
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(Navigation.prototype, "currentMonikerData", {
                            get: function() {
                                return WinJS.Utilities.getMember("_journal.state.monikerData", this)
                            }, enumerable: true, configurable: true
                        });
                        Navigation.prototype.initialize = function(pivots, defaultPivot, fueNavigationOperation) {
                            var _this = this;
                            if (fueNavigationOperation) {
                                this._fueNavigationOperation = fueNavigationOperation;
                                fueNavigationOperation.animatePageTransition = false;
                                var originalContentComplete = fueNavigationOperation.contentComplete;
                                fueNavigationOperation.contentComplete = function() {
                                    _this._onFUEPage = true;
                                    if (originalContentComplete)
                                        originalContentComplete()
                                }
                            }
                            this._defaultPivotIndex = (typeof defaultPivot === "undefined") ? 0 : defaultPivot;
                            this._primaryPivots = pivots;
                            MS.Entertainment.UI.Framework.addEventHandlers(this._primaryPivots, {
                                selectedItemChanged: function(args) {
                                    var selectedPivot = (args && args.detail && args.detail.newSelection && args.detail.newSelection.item);
                                    if (selectedPivot)
                                        _this._handlePivotChange(selectedPivot, args.detail.newSelection.index)
                                }, reselected: function(args) {
                                        var navigationJournal = MS.Entertainment.UI.Framework.Navigation.getJournal();
                                        if (!navigationJournal.canGoBack) {
                                            if (WinJS.Utilities.getMember("_journal.state.realizedDataContext.dataContextParameterChanged", _this)) {
                                                _this._journal.state.realizedDataContext.dataContextParameterChanged(_this._dataContextParameterForNextPivotChange);
                                                _this._dataContextParameterForNextPivotChange = null
                                            }
                                            return
                                        }
                                        var reselectedPivot = (WinJS.Utilities.getMember("detail.selection.item", args));
                                        if (reselectedPivot)
                                            _this._handlePivotChange(reselectedPivot, WinJS.Utilities.getMember("detail.selection.index", args))
                                    }
                            })
                        };
                        Navigation.prototype._getCurrentPivotChangePromise = function() {
                            return this._inProgressNavigation
                        };
                        Navigation.prototype.cancelInProgressNavigation = function() {
                            if (this._inProgressNavigation) {
                                this._inProgressNavigation.cancel();
                                this._resetInProgressNavigation()
                            }
                        };
                        Navigation.prototype._handlePivotChange = function(selectedPivot, index) {
                            this.cancelInProgressNavigation();
                            if (this._suppressNavigationOnNextSelectionChange) {
                                this._suppressNavigationOnNextSelectionChange = false;
                                return WinJS.Promise.as()
                            }
                            if (selectedPivot.onNavigateStart)
                                selectedPivot.onNavigateStart();
                            var navigationJournal = MS.Entertainment.UI.Framework.Navigation.getJournal();
                            var navigationPreviousLocation = navigationJournal ? navigationJournal.location : String.empty;
                            this.clearHistory();
                            var navigationPromise = this.navigateTo(new NavigationOperation(selectedPivot.dataContext, selectedPivot.template, selectedPivot.onNavigateComplete, this._skipUICreationOnNextPivotChange, undefined, this._dataContextParameterForNextPivotChange, selectedPivot.moniker, selectedPivot.supportsSnapped));
                            this._dataContextParameterForNextPivotChange = null;
                            var contentCatalogIds = MS.Entertainment.Utilities.Telemetry.ContentCatalogId;
                            var contentSourceIds = MS.Entertainment.Utilities.Telemetry.ContentSourceId;
                            var contentTypeIds = MS.Entertainment.Utilities.Telemetry.ContentTypeId;
                            var navigationLocation = navigationJournal ? navigationJournal.location : String.empty;
                            MS.Entertainment.Utilities.Telemetry.logPageAction({
                                slot: index, areaName: "NavBarArea1", contentId: selectedPivot.moniker, contentCatalogId: contentCatalogIds.App, contentSourceId: contentSourceIds.App, contentTypeId: contentTypeIds.App, contentName: selectedPivot.moniker
                            }, {
                                uri: navigationPreviousLocation, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                            }, {
                                uri: navigationLocation, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                            });
                            return navigationPromise
                        };
                        Navigation.prototype._adjustScroller = function() {
                            if (this._contentContainer.children.length > 1) {
                                if (!this._contentContainerHeight)
                                    this._contentContainerHeight = this.contentContainer.getBoundingClientRect().height;
                                var scrollLimit = ((this._contentContainer.children.length - 1) * this._contentContainerHeight);
                                this._contentContainer.style.msScrollLimitYMin = scrollLimit + "px"
                            }
                            else {
                                this._contentContainer.style.msScrollLimitYMin = "";
                                this._contentContainer.scrollTop = 0
                            }
                        };
                        Navigation.prototype._handleElementSizeChanged = function() {
                            var newWindowHeight = MS.Entertainment.Utilities.getWindowHeight();
                            if (this._previousWindowHeight && (this._previousWindowHeight === newWindowHeight))
                                return;
                            this._previousWindowHeight = newWindowHeight;
                            this._contentContainerHeight = 0;
                            this._adjustScroller()
                        };
                        Navigation.prototype._getPreviousStackLocation = function() {
                            var previousLocation = String.empty;
                            var oldState;
                            var backStack = this._journal.history.backStack;
                            if (backStack.length > 1) {
                                oldState = backStack[backStack.length - 1].state;
                                if (oldState && oldState.location)
                                    previousLocation = oldState.location
                            }
                            return previousLocation
                        };
                        Navigation.prototype._dropInput = function(e) {
                            switch (e.keyCode) {
                                case WinJS.Utilities.Key.invokeGlobalCommand:
                                case WinJS.Utilities.Key.searchButton:
                                case WinJS.Utilities.Key.dismissButton:
                                    return
                            }
                            e.preventDefault();
                            e.stopPropagation();
                            e.stopImmediatePropagation()
                        };
                        Navigation.prototype._loadPage = function(state, template, removeOldContent, skipEnterPage) {
                            var _this = this;
                            var dataContext = state.initialDataContext;
                            window.msWriteProfilerMark("ent:Shell.WinJSNavigation.LoadTemplate:" + template + ",StartTM");
                            return fx.loadTemplate(template, null, !this._deferTemplateLoads).then(function(control) {
                                    window.msWriteProfilerMark("ent:Shell.WinJSNavigation.LoadTemplate:" + template + ",StopTM");
                                    var container = document.createElement("div");
                                    WinJS.Utilities.addClass(container, "nav-currentPage");
                                    WinJS.Utilities.addClass(container, "hideFromDisplay");
                                    _this._waitOnContentComplete(container).done(function() {
                                        MS.Entertainment.Utilities.Telemetry.logPageView(container, {uri: template}, {uri: _this._getPreviousStackLocation()})
                                    });
                                    _this.contentContainer.appendChild(container);
                                    _this._adjustScroller();
                                    state.domElement = container;
                                    var realizedDataContext = null;
                                    if (dataContext) {
                                        if (!(dataContext instanceof Function))
                                            throw new Error("You must supply a function as a data context");
                                        window.msWriteProfilerMark("ent:Shell.WinJSNavigation.NavigateTo:" + template + ":CreateDataContext,StartTM");
                                        realizedDataContext = dataContext(state.dataContextCreationParameter);
                                        state.dataContextCreationParameter = null;
                                        window.msWriteProfilerMark("ent:Shell.WinJSNavigation.NavigateTo:" + template + ":CreateDataContext,StopTM")
                                    }
                                    container.__navigationState = state;
                                    state.realizedDataContext = realizedDataContext;
                                    window.msWriteProfilerMark("ent:Shell.WinJSNavigation.EnterPage:" + template + ",StartTM");
                                    return WinJS.Promise.join({
                                            element: control.render(realizedDataContext, container), exitPage: removeOldContent
                                        })
                                }).then(function(result) {
                                    var element = result.element;
                                    var animateTransition = true;
                                    if (!skipEnterPage) {
                                        animateTransition = state.animatePageTransition;
                                        WinJS.Utilities.removeClass(element, "hideFromDisplay")
                                    }
                                    else
                                        animateTransition = false;
                                    var enterPageResult = WinJS.Promise.join({
                                            enterpage: _this._enterPage(element, animateTransition).then(function() {
                                                window.msWriteProfilerMark("ent:Shell.WinJSNavigation.EnterPage:" + template + ",StopTM")
                                            }), element: element
                                        });
                                    _this._resetInProgressNavigation();
                                    return enterPageResult
                                })
                        };
                        Navigation.prototype._handleForwardNavigation = function(state, template) {
                            var _this = this;
                            window.msWriteProfilerMark("ent:Shell.WinJSNavigation.NavigateTo:" + template + ",StartTM");
                            if (state.skipUI) {
                                this._resetInProgressNavigation();
                                return WinJS.Promise.as()
                            }
                            if (this.clearCachesOnNavigation && Entertainment.Utilities.isAboveMemoryCleanupThreshold())
                                Framework.clearCaches(true);
                            var oldState;
                            var backStack = this._journal.history.backStack;
                            var removeOldContent;
                            if (this._firstNavigate) {
                                this.removeContent(this.contentContainer.firstElementChild);
                                removeOldContent = WinJS.Promise.as();
                                this._firstNavigate = false;
                                this._waitOnContentComplete(this.contentContainer).done(function() {
                                    _this._isFirstLocationLoaded = true
                                })
                            }
                            else {
                                this._isFirstLocationLoaded = true;
                                if (this._journal.canGoBack && backStack[backStack.length - 1]) {
                                    oldState = backStack[backStack.length - 1].state;
                                    if (oldState.domElement) {
                                        if (this.blockInputOnHiddenPages) {
                                            var dropInput = this._dropInput.bind(this);
                                            oldState.inputBlockEventHandlers = Framework.addEventHandlers(oldState.domElement, {
                                                keydown: dropInput, keyup: dropInput, keypress: dropInput
                                            }, true)
                                        }
                                        if (oldState.domElement.contains(document.activeElement))
                                            oldState.previouslyFocusedItem = this._extractFocusElementInformation(oldState.domElement);
                                        MS.Entertainment.assert(oldState, "Given we can go back, expected to be able to get information from the backstack");
                                        removeOldContent = this._exitPage().then(function() {
                                            WinJS.Utilities.removeClass(oldState.domElement, "nav-currentPage");
                                            MS.Entertainment.UI.Framework.freezeControlsInSubtree(oldState.domElement)
                                        })
                                    }
                                    else
                                        removeOldContent = WinJS.Promise.as()
                                }
                            }
                            if (!template) {
                                window.msWriteProfilerMark("ent:Shell.WinJSNavigation.NavigateTo:NoTemplate,StopTM");
                                return removeOldContent
                            }
                            var pageLoadedSignal = new fx.Signal;
                            this._wasInteractedBeforeTimeout(this.contentContainer, pageLoadedSignal.promise).then(function(wasInteracted) {
                                if (wasInteracted)
                                    return;
                                if (state === _this._journal.state) {
                                    if (!MS.Entertainment.UI.Framework.canMoveFocus(state.domElement))
                                        return;
                                    MS.Entertainment.UI.Framework.focusFirstInSubTree(state.domElement)
                                }
                            }).done(null, function(error) {
                                MS.Entertainment.fail("Failure setting focus: " + (error && error.message))
                            });
                            return this._loadPage(state, template, removeOldContent).then(function(result) {
                                    if (oldState && oldState.domElement && (oldState != _this._journal.state))
                                        WinJS.Utilities.addClass(oldState.domElement, "hideFromDisplay");
                                    if (!oldState || oldState !== _this._journal.state) {
                                        if (_this.setFocusContainerOnNavigation)
                                            fx.currentContentContainer = state.domElement;
                                        MS.Entertainment.UI.Framework.setFocusRoot(state.domElement)
                                    }
                                    pageLoadedSignal.complete();
                                    window.msWriteProfilerMark("ent:Shell.WinJSNavigation.NavigateTo:" + template + ",StopTM")
                                })
                        };
                        Navigation.prototype._handleBackNavigation = function(newState) {
                            var _this = this;
                            var oldContentRemovedPromise;
                            var createdPage = false;
                            window.msWriteProfilerMark("ent:Shell.WinJSNavigation.NavigatingBack:" + newState.location + ",StartTM");
                            if (this.playBackNavigationSound)
                                Entertainment.Utilities.playBackButtonClick();
                            var historyItem = this._journal.history.forwardStack.shift();
                            MS.Entertainment.assert(historyItem, "Expected to find some history state");
                            if (historyItem && historyItem.state) {
                                var oldState = historyItem.state;
                                MS.Entertainment.Utilities.Telemetry.logPageAction({
                                    slot: 0, areaName: "BackButtonArea", contentId: "BackButton", contentCatalogId: MS.Entertainment.Utilities.Telemetry.ContentCatalogId.App, contentSourceId: MS.Entertainment.Utilities.Telemetry.ContentCatalogId.App, contentTypeId: MS.Entertainment.Utilities.Telemetry.ContentTypeId.App, contentName: "BackButton"
                                }, {
                                    uri: oldState.location, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                                }, {
                                    uri: newState.location, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                                });
                                oldContentRemovedPromise = this._exitPage().then(function() {
                                    _this.removeContent(oldState.domElement)
                                })
                            }
                            else
                                oldContentRemovedPromise = WinJS.Promise.as();
                            return oldContentRemovedPromise.then(function() {
                                    if (newState.domElement)
                                        return;
                                    window.msWriteProfilerMark("ent:Shell.WinJSNavigation.NavigatingBack.CreatingPage:" + newState.location);
                                    createdPage = true;
                                    return _this._loadPage(newState, newState.location, oldContentRemovedPromise, true)
                                }).then(function() {
                                    WinJS.Utilities.addClass(newState.domElement, "nav-currentPage");
                                    WinJS.Utilities.removeClass(newState.domElement, "hideFromDisplay");
                                    MS.Entertainment.UI.Framework.thawControlsInSubtree(newState.domElement);
                                    if (_this.setFocusContainerOnNavigation)
                                        fx.currentContentContainer = newState.domElement;
                                    MS.Entertainment.UI.Framework.setFocusRoot(newState.domElement);
                                    if (newState.inputBlockEventHandlers) {
                                        newState.inputBlockEventHandlers.cancel();
                                        newState.inputBlockEventHandlers = null
                                    }
                                    _this._journal.history.forwardStack = [];
                                    var enterPagePromise = _this._enterPage(newState.domElement, newState.animatePageTransition);
                                    if (createdPage)
                                        return;
                                    if (WinJS.Utilities.getMember("realizedDataContext.navigatedBackTo", newState))
                                        newState.realizedDataContext.navigatedBackTo();
                                    {};
                                    _this._resetInProgressNavigation();
                                    var checkForInteractionPromise;
                                    if (_this.focusImmediatelyOnBackNavigation)
                                        checkForInteractionPromise = WinJS.Promise.wrap(false);
                                    else
                                        checkForInteractionPromise = _this._wasInteractedBeforeTimeout(newState.domElement, enterPagePromise);
                                    checkForInteractionPromise.then(function(wasInteraction) {
                                        if (wasInteraction)
                                            return;
                                        if (!document.body.contains(newState.domElement))
                                            return;
                                        if (!MS.Entertainment.UI.Framework.canMoveFocus(newState.domElement) || MS.Entertainment.UI.Framework.focusedItemInContainer(newState.domElement))
                                            return;
                                        var focusState = newState.previouslyFocusedItem;
                                        newState.previouslyFocusedItem = null;
                                        if (focusState)
                                            if (focusState.listView && focusState.currentItem) {
                                                focusState.currentItem.showFocus = MS.Entertainment.Framework.KeyboardInteractionListener.showKeyboardFocus;
                                                focusState.listView.currentItem = focusState.currentItem
                                            }
                                            else
                                                MS.Entertainment.UI.Framework.focusFirstFocusableAncestor(focusState.focusedElement);
                                        else if (newState === _this._journal.state) {
                                            if (!MS.Entertainment.UI.Framework.canMoveFocus(newState.domElement))
                                                return;
                                            MS.Entertainment.UI.Framework.focusFirstInSubTree(newState.domElement)
                                        }
                                    }).done(null, function(error) {
                                        MS.Entertainment.fail("Failure setting focus: " + (error && error.message))
                                    });
                                    return enterPagePromise
                                }).then(function() {
                                    window.msWriteProfilerMark("ent:Shell.WinJSNavigation.NavigatingBack:" + newState.location + ",StopTM");
                                    MS.Entertainment.Utilities.Telemetry.logPageView(newState.domElement, {uri: newState.location}, {uri: oldState && oldState.location});
                                    if (_this.clearCachesOnNavigation && Entertainment.Utilities.isAboveMemoryCleanupThreshold())
                                        Framework.clearCaches(true).then(function() {
                                            return WinJS.Promise.timeout(1000)
                                        }).then(function() {
                                            Framework.clearCaches(true)
                                        })
                                })
                        };
                        Navigation.prototype._handleBeforeNavigate = function(args) {
                            var proposed = args.detail.state;
                            var current = this._journal.state;
                            var backstack = this._journal.history.backStack;
                            if (!current)
                                return;
                            if (window.onNewVideoPage && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                                var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                var isCurrentLocationOldPage = MS.Entertainment.UI.Monikers && navigationService && navigationService.currentPage && navigationService.currentPage.iaNode.moniker !== MS.Entertainment.UI.Monikers.homeHub;
                                if (isCurrentLocationOldPage) {
                                    var navigateBackAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.navigate);
                                    navigateBackAction.automationId = "newBackNavigate";
                                    navigateBackAction.parameter = MS.Entertainment.UI.Actions.navigate.NavigateLocation.back;
                                    navigateBackAction.execute();
                                    args.preventDefault()
                                }
                            }
                            var backStack = this._journal.history.backStack;
                            if (WinJS.Utilities.getMember("length", backStack) && backStack[backStack.length - 1].state === proposed && WinJS.Utilities.getMember("realizedDataContext.goBack", current) && current.realizedDataContext.goBack())
                                args.preventDefault();
                            if (proposed && (current.location === proposed.location) && WinJS.Utilities.getMember("realizedDataContext.dataContextParameterChanged", current)) {
                                current.realizedDataContext.dataContextParameterChanged(proposed.dataContextCreationParameter);
                                args.preventDefault()
                            }
                        };
                        Navigation.prototype._handleNavigating = function(args) {
                            args.detail.setPromise(WinJS.Promise.as(args.detail.delta < 0))
                        };
                        Navigation.prototype._handleNavigated = function(args) {
                            var _this = this;
                            var isBackNavigation = args.detail.value;
                            var navigationDetail = args.detail;
                            var navigationPromise;
                            this._updatePivotSelection(navigationDetail.state.monikerData);
                            if (!isBackNavigation)
                                navigationPromise = this._handleForwardNavigation(navigationDetail.state, navigationDetail.location);
                            else
                                navigationPromise = this._handleBackNavigation(navigationDetail.state);
                            navigationDetail.setPromise(navigationPromise.then(null, function(error) {
                                var message = (error && error.toString()) || String.empty;
                                if (!WinJS.Promise.isCanceledError(error))
                                    MS.Entertainment.fail("Navigation failed with: " + message);
                                _this._resetInProgressNavigation();
                                return WinJS.Promise.wrapError(error)
                            }))
                        };
                        Navigation.prototype._updatePivotSelection = function(monikerData) {
                            if (!monikerData)
                                return;
                            window.msWriteProfilerMark("ent:Shell.WinJSNavigation.UpdatePivotSelection:" + monikerData + ",StartTM");
                            var dataSource = WinJS.Utilities.getMember("_primaryPivots.dataSource", this) || [];
                            var itemToSelect = -1;
                            dataSource.forEach(function(item, index) {
                                if (item.moniker !== monikerData)
                                    return;
                                itemToSelect = index
                            });
                            if (itemToSelect > -1) {
                                if (this.primaryPivots.selectedIndex !== itemToSelect) {
                                    this._suppressNavigationOnNextSelectionChange = true;
                                    this.primaryPivots.selectedIndex = itemToSelect
                                }
                            }
                            else
                                this.dispatchEvent("unknownMonikerEncountered", {monikerData: monikerData});
                            window.msWriteProfilerMark("ent:Shell.WinJSNavigation.UpdatePivotSelection:" + monikerData + ",StopTM")
                        };
                        Navigation.prototype.navigateTo = function(operation) {
                            var _this = this;
                            if (this._isNavigationInProgress)
                                return WinJS.Promise.cancel;
                            operation = operation || new NavigationOperation(null);
                            if (this._onFUEPage) {
                                this._onFUEPage = false;
                                var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                config.fue.showLXFUE = false;
                                this.forceFUENavigation = false
                            }
                            if (!operation.monikerData)
                                if (this._suppressedMoniker)
                                    operation.monikerData = this._suppressedMoniker;
                                else if (this._journal.state)
                                    operation.monikerData = this._journal.state.monikerData;
                            this._suppressedMoniker = null;
                            this._isNavigationInProgress = true;
                            this._inProgressNavigation = this._journal.navigate(operation.template, {
                                initialDataContext: operation.dataContext, location: operation.template, contentComplete: operation.contentComplete, skipUI: operation.skipUI, animatePageTransition: operation.animatePageTransition, supportsSnapped: operation.supportsSnapped, dataContextCreationParameter: operation.dataContextParameter, monikerData: operation.monikerData
                            }).then(null, function(error) {
                                _this._resetInProgressNavigation();
                                return WinJS.Promise.wrapError(error)
                            });
                            return this._inProgressNavigation
                        };
                        Navigation.prototype.navigateToDefault = function() {
                            if (!this.primaryPivots.dataSource || (this.primaryPivots.dataSource.length < 1))
                                return WinJS.Promise.wrapError(new Error("Nothing to navigate to"));
                            var showFUEPromise = this._showFUEIfNeeded();
                            if (showFUEPromise)
                                return showFUEPromise;
                            var defaultPivotIndex = this._defaultPivotIndex;
                            if (defaultPivotIndex < 0 || defaultPivotIndex > this.primaryPivots.dataSource.length - 1)
                                defaultPivotIndex = 0;
                            if (this.primaryPivots.selectedIndex !== defaultPivotIndex) {
                                this._suppressNavigationOnNextSelectionChange = true;
                                this.primaryPivots.selectedIndex = defaultPivotIndex
                            }
                            var selectedPivot = this.primaryPivots.selectedItem;
                            return this._handlePivotChange(this.primaryPivots.selectedItem, this.primaryPivots.selectedIndex)
                        };
                        Navigation.prototype._showFUEIfNeeded = function() {
                            var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                            if (this._fueNavigationOperation && (config.fue.showLXFUE || this.forceFUENavigation)) {
                                this.primaryPivots.clear();
                                return this.navigateTo(this._fueNavigationOperation)
                            }
                            return null
                        };
                        Navigation.prototype.navigateToMoniker = function(moniker, skipUI, skipBackStack, dataContextParameter) {
                            var dataSource = this._primaryPivots.dataSource;
                            if (!dataSource || !dataSource.length)
                                throw new Error("Nothing to navigate to");
                            var itemToSelect = -1;
                            dataSource.forEach(function(item, index) {
                                if (item.moniker != moniker)
                                    return;
                                itemToSelect = index
                            });
                            if (itemToSelect === -1)
                                throw new Error("Moniker wasn't found in the list of pivots");
                            this._skipUICreationOnNextPivotChange = !!skipUI;
                            this._suppressNavigationOnNextSelectionChange = !!skipBackStack;
                            if (this._suppressNavigationOnNextSelectionChange)
                                this._suppressedMoniker = moniker;
                            this._dataContextParameterForNextPivotChange = dataContextParameter;
                            if (this._primaryPivots.selectedIndex === itemToSelect)
                                this._primaryPivots.reselect();
                            else
                                this._primaryPivots.selectedIndex = itemToSelect;
                            this._skipUICreationOnNextPivotChange = false;
                            this._dataContextParameterForNextPivotChange = null
                        };
                        Navigation.prototype.navigateBack = function() {
                            var result;
                            if (WinJS.Navigation.canGoBack)
                                result = WinJS.Navigation.back();
                            else
                                result = this.navigateToDefault();
                            return WinJS.Promise.as(result)
                        };
                        Object.defineProperty(Navigation.prototype, "contentContainer", {
                            get: function() {
                                if (!this._contentContainer) {
                                    this._contentContainer = document.querySelector(".control-app .app-body");
                                    this._containerEvents = fx.addEventHandlers(this._contentContainer, {mselementresize: this._handleElementSizeChanged.bind(this)})
                                }
                                return this._contentContainer
                            }, enumerable: true, configurable: true
                        });
                        Navigation.prototype.removeContent = function(container) {
                            if (!container)
                                return;
                            var context = container.__navigationState;
                            window.msWriteProfilerMark("ent:Shell.WinJSNavigation.ContentRemoved,StartTM");
                            if (container.parentElement)
                                container.parentElement.removeChild(container);
                            window.msWriteProfilerMark("ent:Shell.WinJSNavigation.ContentRemoved,StopTM");
                            this._adjustScroller();
                            if (context) {
                                if (context.inputBlockEventHandlers) {
                                    context.inputBlockEventHandlers.cancel();
                                    context.inputBlockEventHandlers = null
                                }
                                if (context.realizedDataContext && context.realizedDataContext.dispose) {
                                    window.msWriteProfilerMark("ent:Shell.WinJSNavigation.DataContextDisposed,StartTM");
                                    context.realizedDataContext.dispose();
                                    context.realizedDataContext = null;
                                    window.msWriteProfilerMark("ent:Shell.WinJSNavigation.DataContextDisposed,StopTM")
                                }
                            }
                        };
                        Navigation.prototype._extractFocusElementInformation = function(pageContainer) {
                            var listViews = WinJS.Utilities.query(".win-listview", pageContainer);
                            var result = {
                                    listView: null, currentItem: null, focusedElement: document.activeElement
                                };
                            if (listViews.length < 1)
                                return result;
                            var containingListView = listViews.filter(function(item) {
                                    return item.contains(document.activeElement)
                                });
                            if (containingListView.length < 1)
                                return result;
                            var listView = containingListView[0].winControl;
                            if (listView) {
                                result.listView = listView;
                                result.currentItem = listView.currentItem
                            }
                            return result
                        };
                        Navigation.prototype._waitOnContentComplete = function(el) {
                            var signal = new fx.Signal;
                            var _listeners = fx.addEventHandlers(el, {ContentComplete: function() {
                                        if (_listeners) {
                                            _listeners.cancel();
                                            _listeners = null;
                                            signal.complete()
                                        }
                                    }});
                            return signal.promise
                        };
                        Navigation.prototype._wasInteractedBeforeTimeout = function(element, waitPromise) {
                            var _this = this;
                            var signal = new fx.Signal;
                            var timeout;
                            waitPromise = waitPromise || WinJS.Promise.as();
                            var interactionHandler = function() {
                                    if (bindings) {
                                        bindings.cancel();
                                        bindings = null
                                    }
                                    if (signal) {
                                        signal.complete(true);
                                        signal = null
                                    }
                                    if (timeout)
                                        timeout.cancel()
                                };
                            var bindings = MS.Entertainment.UI.Framework.addEventHandlers(element, {
                                    MSManipulationStateChanged: interactionHandler, mousewheel: interactionHandler
                                });
                            waitPromise.then(function() {
                                if (!signal)
                                    return;
                                timeout = WinJS.Promise.timeout(_this.focusTimeout);
                                return timeout
                            }).done(function() {
                                if (bindings) {
                                    bindings.cancel();
                                    bindings = null
                                }
                                if (signal) {
                                    signal.complete(false);
                                    signal = null
                                }
                            }, function(){});
                            return signal.promise
                        };
                        Navigation.prototype._enterPage = function(el, animatePageTransition) {
                            var result;
                            if (this.animatePageTransitions && animatePageTransition) {
                                el.style.overflow = "hidden";
                                el.style.opacity = "0.0";
                                result = WinJS.UI.Animation.enterPage(el).then(function() {
                                    el.style.overflow = String.empty;
                                    el.style.opacity = String.empty
                                })
                            }
                            else
                                result = WinJS.Promise.as();
                            return WinJS.Promise.timeout().then(function() {
                                    return result
                                })
                        };
                        Navigation.prototype._exitPage = function() {
                            return WinJS.Promise.timeout()
                        };
                        Navigation.prototype._resetInProgressNavigation = function() {
                            if (this._inProgressNavigation)
                                this._inProgressNavigation = null;
                            this._isNavigationInProgress = false
                        };
                        Navigation.prototype.clearHistory = function() {
                            var _this = this;
                            window.msWriteProfilerMark("ent:Shell.WinJSNavigation.ClearHistory,StartTM");
                            var children = WinJS.Utilities.children(this.contentContainer);
                            children.forEach(function(element) {
                                _this.removeContent(element)
                            });
                            this._journal.history = {};
                            window.msWriteProfilerMark("ent:Shell.WinJSNavigation.ClearHistory,StopTM")
                        };
                        Navigation.prototype.trimBackStack = function() {
                            var _this = this;
                            var backstackToTrim = this._journal.history.backStack;
                            backstackToTrim.forEach(function(historyItem) {
                                var state = historyItem.state;
                                _this.removeContent(state.domElement);
                                state.domElement = null;
                                state.previouslyFocusedItem = null
                            })
                        };
                        Navigation.prototype.freezeCurrentPage = function() {
                            var currentPageElement = WinJS.Utilities.getMember("_journal.state.domElement", this);
                            if (!currentPageElement)
                                return;
                            Framework.freezeControlsInSubtree(currentPageElement)
                        };
                        Navigation.prototype.thawCurrentPage = function() {
                            var currentPageElement = WinJS.Utilities.getMember("_journal.state.domElement", this);
                            if (!currentPageElement)
                                return;
                            Framework.thawControlsInSubtree(currentPageElement)
                        };
                        Object.defineProperty(Navigation.prototype, "location", {
                            get: function() {
                                var journal = Navigation.getJournal();
                                return journal && journal.location || String.empty
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(Navigation.prototype, "isFirstLocationLoaded", {
                            get: function() {
                                return this._isFirstLocationLoaded
                            }, enumerable: true, configurable: true
                        });
                        Navigation.prototype.setPreviouslyFocusedItem = function(focusedElement, listView, currentItem) {
                            var journal = Navigation.getJournal();
                            var state = journal && journal.state;
                            if (state)
                                state.previouslyFocusedItem = {
                                    listView: listView, currentItem: currentItem, focusedElement: focusedElement
                                }
                        };
                        Navigation.prototype.clearPreviouslyFocusedItem = function() {
                            var journal = Navigation.getJournal();
                            var state = journal && journal.state;
                            if (state)
                                state.previouslyFocusedItem = null
                        };
                        Object.defineProperty(Navigation.prototype, "currentlySelectedPivotMoniker", {
                            get: function() {
                                if (!WinJS.Utilities.getMember("_primaryPivots.selectedItem", this))
                                    return null;
                                return this._primaryPivots.selectedItem.moniker
                            }, enumerable: true, configurable: true
                        });
                        Navigation.raiseContentComplete = function(element) {
                            var domEvent = document.createEvent("event");
                            domEvent.initEvent("ContentComplete", true, true);
                            element.dispatchEvent(domEvent);
                            var journal = WinJS.Navigation;
                            if (journal && journal.state && journal.state.contentComplete) {
                                var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                                eventProvider.traceWinJSNavigation_ContentComplete(journal.state.location);
                                journal.state.contentComplete();
                                journal.state.contentComplete = null
                            }
                        };
                        Navigation.getJournal = function() {
                            return Navigation.testJournalInstance || WinJS.Navigation
                        };
                        Navigation.DEFAULT_FOCUS_TIMEOUT = 1000;
                        return Navigation
                    })(MS.Entertainment.UI.Framework.ObservableBase);
                Framework.Navigation = Navigation;
                MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.winJSNavigation, function() {
                    return new Navigation
                })
            })(UI.Framework || (UI.Framework = {}));
            var Framework = UI.Framework
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}));

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Actions) {
                (function(NavigationActions) {
                    var NavigateToDefaultAction = (function(_super) {
                            __extends(NavigateToDefaultAction, _super);
                            function NavigateToDefaultAction() {
                                _super.apply(this, arguments);
                                this.automationId = MS.Entertainment.UI.AutomationIds.navigateToDefault
                            }
                            NavigateToDefaultAction.prototype.canExecute = function(param) {
                                return MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation)
                            };
                            NavigateToDefaultAction.prototype.executed = function(param) {
                                var navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                                navigation.navigateToDefault()
                            };
                            return NavigateToDefaultAction
                        })(Actions.Action);
                    NavigationActions.NavigateToDefaultAction = NavigateToDefaultAction
                })(Actions.NavigationActions || (Actions.NavigationActions = {}));
                var NavigationActions = Actions.NavigationActions;
                MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.navigateToDefault, function() {
                    return new MS.Entertainment.UI.Actions.NavigationActions.NavigateToDefaultAction
                })
            })(UI.Actions || (UI.Actions = {}));
            var Actions = UI.Actions
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/components/signin/signinerrors.js:26061 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

WinJS.Namespace.define("MS.Entertainment.Utilities.SignInErrors", {
    NS_E_WMPIM_USEROFFLINE: 0xC00D1126 - 0xFFFFFFFF - 1, NS_E_SIGNIN_TAG_CHANGE_REQUIRED: 0xC00D1375 - 0xFFFFFFFF - 1, ZEST_E_TOS_NOT_ACCEPTED: 0xC101A21B - 0xFFFFFFFF - 1, ZUNE_E_SIGNIN_TERMS_OF_SERVICE_CHILD: 0xC1010017 - 0xFFFFFFFF - 1, NS_E_SIGNIN_TERMS_OF_SERVICE: 0xC00D1376 - 0xFFFFFFFF - 1, NS_E_SIGNIN_ACCOUNT_SUSPENDED: 0xC00D1377 - 0xFFFFFFFF - 1, NS_E_SIGNIN_SUBSCRIPTION_SUSPENDED: 0xC00D1378 - 0xFFFFFFFF - 1, NS_E_SIGNIN_BILLING_UNAVAILABLE: 0xC00D1379 - 0xFFFFFFFF - 1, NS_E_SIGNIN_PASSPORT_UNKNOWN_ERROR: 0xC00D1389 - 0xFFFFFFFF - 1, NS_E_SIGNIN_NOT_SUPPORTED_REGION: 0xC00D1388 - 0xFFFFFFFF - 1, NS_E_SIGNIN_INVALID_REGION: 0xC00D1353 - 0xFFFFFFFF - 1, NS_E_SIGNIN_VERSION_NOT_SUPPORTED: 0xC00D1390 - 0xFFFFFFFF - 1, NS_E_SIGNIN_CHILD_ACCOUNT_CREATION_BLOCKED: 0xC00D1394 - 0xFFFFFFFF - 1, NS_E_SIGNIN_REGION_MISMATCH_ERROR: 0xC00D1398 - 0xFFFFFFFF - 1, XONLINE_E_WCMUSIC_ACCOUNT_NOT_PROVISIONED: 0x80172008 - 0xFFFFFFFF - 1, NO_CONNECTED_ACCOUNT: 0x80070525 - 0xFFFFFFFF - 1, NS_E_INVALID_USERNAME_AND_PASSWORD: 0x8007052e - 0xFFFFFFFF - 1, ZUNE_E_SIGNIN_ERROR_CANCELLED: 0x800704C7 - 0xFFFFFFFF - 1, ERROR_NETWORK_UNREACHABLE: 0x800704CF - 0xFFFFFFFF - 1, NS_E_NO_ACCOUNT_PROOF: 0x800434ed - 0xFFFFFFFF - 1, NS_E_ACCOUNT_PROOF_NOT_VERIFIED: 0x800434ef - 0xFFFFFFFF - 1, INET_E_RESOURCE_NOT_FOUND: 0x800C0005 - 0xFFFFFFFF - 1, INET_E_DOWNLOAD_FAILURE: 0x800c0008 - 0xFFFFFFFF - 1, INET_E_CONNECTION_TIMEOUT: 0x800c000b - 0xFFFFFFFF - 1, HTTP_E_STATUS_DENIED: 0x80190191 - 0xFFFFFFFF - 1, ONL_E_ACCESS_DENIED_BY_TOU: 0x80860002 - 0xFFFFFFFF - 1, ONL_E_PASSWORD_UPDATE_REQUIRED: 0x80860004 - 0xFFFFFFFF - 1, ONL_E_ACCOUNT_UPDATE_REQUIRED: 0x80860005 - 0xFFFFFFFF - 1, ONL_E_FORCESIGNIN: 0x80860006 - 0xFFFFFFFF - 1, ONL_E_PARENTAL_CONSENT_REQUIRED: 0x80860008 - 0xFFFFFFFF - 1, ONL_E_EMAIL_VERIFICATION_REQUIRED: 0x80860009 - 0xFFFFFFFF - 1, ONL_E_ACTION_REQUIRED: 0x8086000C - 0xFFFFFFFF - 1, XBL_SERVER_CONNECTION_FAILURE: 0x82bc0008 - 0xFFFFFFFF - 1, XO_E_ACCOUNT_CREATION_REQUIRED: 0x8015DC09 - 0xFFFFFFFF - 1, XO_E_ACCOUNT_TERMS_OF_USE_NOT_ACCEPTED: 0x8015DC0A - 0xFFFFFFFF - 1, ZEST_E_SIGNIN_REQUIRED: 0xC101A24B - 0xFFFFFFFF - 1, X8_E_SIGNIN_MISMATCH: 0xC101010E - 0xFFFFFFFF - 1
})
})();
/* >>>>>>/components/signin/signin.js:26069 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Utilities");
(function() {
    "use strict";
    var observableProperty = MS.Entertainment.UI.Framework.observableProperty;
    WinJS.Namespace.define("MS.Entertainment.Utilities", {SignedInUser: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Utilities.User", function signedInUser() {
            MS.Entertainment.Utilities.SignedInUser._instanceCount++;
            MS.Entertainment.Utilities.assert(MS.Entertainment.Utilities.SignedInUser._instanceCount === 1, "Use MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser)");
            this.refresh(null, true)
        }, {
            gamerTag: MS.Entertainment.UI.Framework.observableProperty("gamerTag", String.empty), xuid: MS.Entertainment.UI.Framework.observableProperty("xuid", String.empty), locale: MS.Entertainment.UI.Framework.observableProperty("locale", String.empty), isParentallyControlled: MS.Entertainment.UI.Framework.observableProperty("isParentallyControlled", false), hasExplicitPrivilege: MS.Entertainment.UI.Framework.observableProperty("hasExplicitPrivilege", false), isSubscription: MS.Entertainment.UI.Framework.observableProperty("isSubscription", false), membershipLevel: MS.Entertainment.UI.Framework.observableProperty("membershipLevel", String.empty), meteringCertificate: MS.Entertainment.UI.Framework.observableProperty("meteringCertificate", String.empty), signInName: MS.Entertainment.UI.Framework.observableProperty("signInName", String.empty), firstName: MS.Entertainment.UI.Framework.observableProperty("firstName", String.empty), lastName: MS.Entertainment.UI.Framework.observableProperty("lastName", String.empty), _userPuid: MS.Entertainment.UI.Framework.observableProperty("_userPuid", String.empty), _userCid: MS.Entertainment.UI.Framework.observableProperty("_userCid", String.empty), _userAnid: MS.Entertainment.UI.Framework.observableProperty("_userAnid", String.empty), canSignOut: MS.Entertainment.UI.Framework.observableProperty("canSignOut", false), isTunerActivated: MS.Entertainment.UI.Framework.observableProperty("isTunerActivated", false), isTunerActivatable: MS.Entertainment.UI.Framework.observableProperty("isTunerActivatable", false), isGamerTag: function isGamerTag(gamerTag) {
                    return gamerTag && this.gamerTag && this.gamerTag.match(new RegExp("^" + gamerTag + "$", "i")) !== null
                }, isGold: function isGold() {
                    return this.membershipLevel === MS.Entertainment.Utilities.SignedInUser.membershipStringMap.Gold || this.membershipLevel === MS.Entertainment.Utilities.SignedInUser.membershipStringMap.FamilyGold || this.membershipLevel === MS.Entertainment.Utilities.SignedInUser.membershipStringMap.Family
                }, isSilver: function isSilver() {
                    return this.membershipLevel === MS.Entertainment.Utilities.SignedInUser.membershipStringMap.Silver
                }, getUserAnid: function getUserAnid() {
                    if (this._userAnid)
                        return this.userAnid;
                    if (!this._userPuid)
                        return String.empty;
                    var padding = [];
                    for (var w = 0; w < (MS.Entertainment.Utilities.SignedInUser._initialPuidLength - this._userPuid.length); w++)
                        padding[w] = "0";
                    var puidToUse = padding.join(String.empty).concat(this._userPuid);
                    try {
                        var macAlgorithmProvider = Windows.Security.Cryptography.Core.MacAlgorithmProvider.openAlgorithm("HMAC_MD5");
                        var keyMaterial = Windows.Security.Cryptography.CryptographicBuffer.createFromByteArray([99, 202, 90, 90, 191, 64, 70, 72, 58, 206, 107, 87, 165, 187, 152, 8]);
                        var key = macAlgorithmProvider.createKey(keyMaterial);
                        var encodedPuid = Windows.Security.Cryptography.CryptographicBuffer.convertStringToBinary(puidToUse, Windows.Security.Cryptography.BinaryStringEncoding.utf16LE);
                        var bytes = null;
                        bytes = Windows.Security.Cryptography.CryptographicBuffer.copyToByteArray(encodedPuid);
                        var bytes2 = [];
                        for (var i = 0; i < bytes.length; i++)
                            bytes2[i] = bytes[i];
                        for (var k = bytes.length - 1; k < MS.Entertainment.Utilities.SignedInUser._encodedMaterialLength; k++)
                            bytes2[k] = 0;
                        var finalEncodedPuid = Windows.Security.Cryptography.CryptographicBuffer.createFromByteArray(bytes2);
                        var signatureBuffer = Windows.Security.Cryptography.Core.CryptographicEngine.sign(key, finalEncodedPuid);
                        var signature = Windows.Security.Cryptography.CryptographicBuffer.encodeToHexString(signatureBuffer);
                        var finalString = signature.slice(0, MS.Entertainment.Utilities.SignedInUser._anidSliceLength).concat(MS.Entertainment.Utilities.SignedInUser._paddingForPuidHash);
                        this._userAnid = finalString
                    }
                    catch(e) {
                        MS.Entertainment.Utilities.fail("Failed to hash anid " + e);
                        return null
                    }
                    return finalString
                }, refresh: function refresh(signInProvider, doNotUpdatePropertyCache) {
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    this.nativeUserModel = [null];
                    this._userAnid = null;
                    if (signInProvider) {
                        this.gamerTag = signInProvider.gamerTag;
                        this.xuid = signInProvider.xuid;
                        this.locale = signInProvider.locale;
                        this.isParentallyControlled = signInProvider.parentallyControlled;
                        this.hasExplicitPrivilege = signInProvider.explicitPrivilege;
                        this.isSubscription = signInProvider.isSubscription;
                        this.membershipLevel = signInProvider.membershipLevel;
                        this.subscriptionOfferID = signInProvider.subscriptionOfferID;
                        this.meteringCertificate = signInProvider.meteringCertificate;
                        this.signInName = signInProvider.signInName;
                        this.firstName = signInProvider.firstName;
                        this.lastName = signInProvider.lastName;
                        this._userPuid = signInProvider.id;
                        this._userCid = signInProvider.cid;
                        this.canSignOut = signInProvider.canSignOut;
                        this.isTunerActivated = signInProvider.isTunerActivated;
                        this.isTunerActivatable = signInProvider.isTunerActivatable
                    }
                    else {
                        this.gamerTag = String.empty;
                        this.xuid = String.empty;
                        this.locale = String.empty;
                        this.isParentallyControlled = false;
                        this.hasExplicitPrivilege = false;
                        this.isSubscription = false;
                        this.membershipLevel = String.empty;
                        this.subscriptionOfferID = String.empty;
                        this.meteringCertificate = String.empty;
                        this.signInName = String.empty;
                        this.firstName = String.empty;
                        this.lastName = String.empty;
                        this._userPuid = null;
                        this._userCid = null;
                        this.canSignOut = false;
                        this.isTunerActivated = false;
                        this.isTunerActivatable = false
                    }
                    if (!doNotUpdatePropertyCache)
                        this.updateLastSignedInUserPropertyCache()
                }, updateLastSignedInUserPropertyCache: function updateLastSignedInUserPropertyCache() {
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (!configurationManager.service.enableTimeTravel) {
                        configurationManager.service.lastSignedInUserParentControl = this.isParentallyControlled;
                        configurationManager.service.lastSignedInUserExplicitPrivilege = this.hasExplicitPrivilege;
                        configurationManager.service.lastSignedInUserSubscription = this.isSubscription;
                        configurationManager.service.lastSignedInUserMembership = this.membershipLevel ? MS.Entertainment.Utilities.SignedInUser.membershipStringMap[this.membershipLevel] : MS.Entertainment.Utilities.SignedInUser.membershipStringMap.Silver;
                        configurationManager.service.lastSignedInUserGamerTag = this.gamerTag;
                        configurationManager.service.lastSignedInUserXuid = this.xuid;
                        configurationManager.service.lastSignedInUserCid = this._userCid;
                        configurationManager.service.lastSignedInUserSignInName = this.signInName;
                        configurationManager.service.lastSignedInUserAccountLocale = this.locale
                    }
                }
        }, {
            factory: function factory() {
                return new MS.Entertainment.Utilities.SignedInUser
            }, _instanceCount: 0, _initialPuidLength: 16, _anidSliceLength: 24, _paddingForPuidHash: "FFFFFFFF", _encodedMaterialLength: 66, membershipStringMap: {
                    None: "None", Silver: "Free", Gold: "Gold", Family: "Family", FamilyGold: "FamilyGold"
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.signedInUser, MS.Entertainment.Utilities.SignedInUser.factory, true);
    WinJS.Namespace.define("MS.Entertainment.Utilities", {SignIn: MS.Entertainment.UI.Framework.derive(MS.Entertainment.UI.Framework.ObservableBase, function SignIn_constructor() {
            MS.Entertainment.Utilities.SignIn._instanceCount++;
            MS.Entertainment.Utilities.assert(MS.Entertainment.Utilities.SignIn._instanceCount === 1, "Use MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn)");
            this._signInProvider = new Microsoft.Entertainment.Util.SignIn;
            this._liveIdChangeCompleteHandler = this._liveIdChangeCompleteHandler.bind(this);
            Object.defineProperty(this, "appNotificationService", {get: function _getAppNotificationService() {
                    if (!this._appNotificationService && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appNotification))
                        this._appNotificationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification);
                    return this._appNotificationService
                }.bind(this)});
            if ((new Microsoft.Entertainment.Configuration.ConfigurationManager).service.enableNativeSignIn) {
                var serviceEventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.ServiceEventProvider;
                this._signInEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this._signInProvider, {
                    signinstarted: function handleSignInStartedEvent() {
                        serviceEventProvider.traceServiceSignInStarted()
                    }, signoutstarted: function handleSignOutStartedEvent() {
                            serviceEventProvider.traceServiceSignOutStarted()
                        }, signincompleted: function handleSignInCompletedEvent() {
                            serviceEventProvider.traceServiceSignInCompleted()
                        }, signoutcompleted: function handleSignOutCompletedEvent() {
                            serviceEventProvider.traceServiceSignOutCompleted()
                        }
                })
            }
            if (WinJS.Utilities.getMember("Social.UI")) {
                Windows.UI.WebUI.WebUIApplication.addEventListener("resuming", this._handleApp2AppResume.bind(this));
                var profilePickerContainer = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.profilePickerContainer);
                if (profilePickerContainer && profilePickerContainer.firstElementChild) {
                    var pickerControlElement = profilePickerContainer.firstElementChild;
                    this.handleApp2CurrentUserChanged = this.handleApp2CurrentUserChanged.bind(this);
                    pickerControlElement.addEventListener("currentuserchanged", this.handleApp2CurrentUserChanged);
                    pickerControlElement.suppressUnload = true;
                    if (pickerControlElement.winControl)
                        pickerControlElement.winControl.domElement = profilePickerContainer.firstElementChild
                }
            }
        }, {
            isSignedIn: observableProperty("isSignedIn", false), isApp2UserAvailable: observableProperty("isApp2UserAvailable", false), isSigningIn: observableProperty("isSigningIn", false), signInError: observableProperty("signInError", 0), isSigningOut: observableProperty("isSigningOut", false), isSignInEnabled: observableProperty("isSignInEnabled", true), _partnerToken: null, _appNotificationService: null, _liveIdChangeTaskName: "LiveIdChange", _networkStatusBinding: null, _lastSignedInUserRegion: null, _signInStartTime: null, _offlineErrorRetryCount: 0, _lastRefreshSignInFailed: false, signIn: function signIn(dontShowErrors, dontShowAccountCreation, dontShowNotifications, dontShowCredUI, dontShowTOS) {
                    var that = this;
                    if (this.isSignedIn)
                        return WinJS.Promise.wrap(MS.Entertainment.Utilities.SignIn.SignInResult.success);
                    else if (this.isSigningIn)
                        return WinJS.Promise.wrap(MS.Entertainment.Utilities.SignIn.SignInResult.signingIn);
                    else if (this.isSigningOut)
                        return WinJS.Promise.wrap(MS.Entertainment.Utilities.SignIn.SignInResult.signingOut);
                    else {
                        this.signInError = 0;
                        this.isSigningIn = true;
                        return this._doSignIn(dontShowErrors, dontShowAccountCreation, dontShowNotifications, dontShowCredUI, dontShowTOS)
                    }
                }, signInApp2User: function signInApp2User() {
                    if (!MS.Entertainment.Utilities.isApp2 || MS.Entertainment.isAppModeOverride)
                        return;
                    var currentUser = this.getAppCurrentUser();
                    if (!currentUser && !WinJS.Utilities.getMember("App2.ApplicationModel.Core.CoreApplicationContext.currentUser")) {
                        this.isApp2UserAvailable = false;
                        return
                    }
                    currentUser = App2.ApplicationModel.Core.CoreApplicationContext.currentUser;
                    if (!currentUser.isGuest && currentUser.isSignedIn) {
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        configurationManager.service.lastSignedInUserXuid = currentUser.xboxUserId;
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        signedInUser.xuid = currentUser.xboxUserId;
                        signedInUser.gamerTag = currentUser.displayInfo.gamertag;
                        this._updateCurrentUser(currentUser);
                        this.isApp2UserAvailable = true
                    }
                    else
                        this.isApp2UserAvailable = false
                }, _authenticateUserHelper: function _authenticateUserHelper(dontShowNotifications) {
                    var globalizationManager = new Microsoft.Entertainment.Util.GlobalizationManager;
                    this._lastSignedInUserRegion = globalizationManager.getRegion();
                    return this.getPassportTicket(MS.Entertainment.Utilities.SignIn.TicketType.MBI_SSL, MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_Passport), true, Microsoft.Entertainment.Util.SignInPromptType.promptIfNeeded).then(function(passportTicket) {
                            return this._signInProvider.authenticateUser(passportTicket)
                        }.bind(this)).then(function authenticateUserSuccess() {
                            return this._onSignInComplete(MS.Entertainment.Utilities.SignIn.SignInResult.success, false, false, false, false)
                        }.bind(this), function intialPassportTicketError(err) {
                            return this._onSignInComplete(err.number, false, true, true, true)
                        }.bind(this))
                }, _doSignIn: function _doSignIn(dontShowErrors, dontShowAccountCreation, dontShowNotifications, dontShowCredUI, dontShowTOS) {
                    if ((new Microsoft.Entertainment.Configuration.ConfigurationManager).shell.retailExperience)
                        return WinJS.Promise.as();
                    this._signInStartTime = this._signInProvider.startTime = new Date;
                    if ((new Microsoft.Entertainment.Configuration.ConfigurationManager).service.enableNativeSignIn)
                        return this._authenticateUserHelper(dontShowNotifications);
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    var isSignInAvailable = false;
                    var isSupported = true;
                    if (MS.Entertainment.Utilities.isMusicApp)
                        isSignInAvailable = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSignInAvailable);
                    else if (MS.Entertainment.Utilities.isVideoApp)
                        isSignInAvailable = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.videoSignInAvailable);
                    else
                        isSignInAvailable = true;
                    var stateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.upgradeReminderDisplayer))
                        isSupported = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.upgradeReminderDisplayer).checkAndRunUpgradeReminder(!dontShowErrors);
                    if (!isSupported || !stateService.servicesEnabled) {
                        this.isSignInEnabled = false;
                        return this._onSignInComplete(MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_VERSION_NOT_SUPPORTED, dontShowErrors, dontShowAccountCreation, dontShowNotifications, dontShowTOS)
                    }
                    if (!isSignInAvailable) {
                        this.isSignInEnabled = false;
                        return this._onSignInComplete(MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_NOT_SUPPORTED_REGION, (dontShowErrors || MS.Entertainment.Utilities.isVideoApp2), dontShowAccountCreation, true, dontShowTOS)
                    }
                    var promptType = Microsoft.Entertainment.Util.SignInPromptType.promptIfNeeded;
                    if (dontShowCredUI)
                        promptType = Microsoft.Entertainment.Util.SignInPromptType.doNotPrompt;
                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    if (uiStateService.networkStatus && (uiStateService.networkStatus === MS.Entertainment.UI.NetworkStatusService.NetworkStatus.none || uiStateService.networkStatus === MS.Entertainment.UI.NetworkStatusService.NetworkStatus.localOnly))
                        return this._onSignInComplete(MS.Entertainment.Utilities.SignInErrors.NS_E_WMPIM_USEROFFLINE, dontShowErrors, dontShowAccountCreation, dontShowNotifications, dontShowTOS);
                    var globalizationManager = new Microsoft.Entertainment.Util.GlobalizationManager;
                    this._lastSignedInUserRegion = globalizationManager.getRegion();
                    var accountPickerPromise = WinJS.Promise.as();
                    if (MS.Entertainment.Utilities.isApp2) {
                        var currentUser = this.getAppCurrentUser();
                        if (!currentUser && App2 && App2.ApplicationModel && App2.ApplicationModel.Core && App2.ApplicationModel.Core.CoreApplicationContext)
                            currentUser = App2.ApplicationModel.Core.CoreApplicationContext.currentUser;
                        var useAccountPicker = !dontShowCredUI;
                        if ((!currentUser || currentUser.isGuest || !currentUser.isSignedIn) && useAccountPicker)
                            accountPickerPromise = MS.Entertainment.UI.Shell.AccountPicker.showAccountPickerAsync().then(function showAccountPickerAsyncComplete(result) {
                                if (!result || !result.user)
                                    return this._onSignInComplete(MS.Entertainment.Utilities.SignInErrors.NO_CONNECTED_ACCOUNT, dontShowErrors, dontShowAccountCreation, dontShowNotifications, dontShowTOS);
                                this._updateCurrentUser(result.user);
                                if (WinJS.Utilities.getMember("Social.UI")) {
                                    var profilePicker = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.profilePicker);
                                    if (profilePicker)
                                        profilePicker.currentUser = result.user
                                }
                            }.bind(this), function showAccountPickerAsyncError(error) {
                                var dontShowErrorMessage = dontShowErrors;
                                if (WinJS.Promise.isCanceledError(error))
                                    dontShowErrorMessage = true;
                                return this._onSignInComplete(error, dontShowErrorMessage, dontShowAccountCreation, dontShowNotifications, dontShowTOS)
                            }.bind(this));
                        else if (currentUser && currentUser.isSignedIn && !currentUser.isGuest)
                            this._updateCurrentUser(currentUser)
                    }
                    return accountPickerPromise.then(function accountPickerComplete() {
                            var intialPassportTicketRequest = WinJS.Promise.as(String.empty);
                            if (!MS.Entertainment.Utilities.isAmsterdamApp)
                                intialPassportTicketRequest = this.getPassportTicket(MS.Entertainment.Utilities.SignIn.TicketType.MBI_SSL, MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_Passport), true, promptType);
                            return intialPassportTicketRequest.then(function getPassportTicketSuccess(passportTicket) {
                                    if (!(Windows.ApplicationModel.Search && MS.Entertainment.Utilities.isApp2))
                                        MS.Entertainment.Utilities.assert(passportTicket, "No passport ticket");
                                    if (this.appNotificationService) {
                                        this.appNotificationService.removeNotificationByCategory(MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError);
                                        if (!dontShowNotifications)
                                            this.appNotificationService.send(new MS.Entertainment.UI.Notification({
                                                notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: String.load(String.id.IDS_SIGNIN_PROGRESS), subTitle: String.empty, moreDetails: String.empty, icon: WinJS.UI.AppBarIcon.sync, action: null, category: MS.Entertainment.Utilities.SignIn.NotificationCategory.signInInfo, isPersistent: true, iconClassName: MS.Entertainment.Utilities.SignIn.NotificationIconClass
                                            }))
                                    }
                                    return this._signInInternal(passportTicket).then(function signInInternalSuccess() {
                                            return this._onSignInComplete(MS.Entertainment.Utilities.SignIn.SignInResult.success, dontShowErrors, dontShowAccountCreation, dontShowNotifications, dontShowTOS)
                                        }.bind(this), function signInInternalError(err) {
                                            return this._onSignInComplete(err.number, dontShowErrors, dontShowAccountCreation, dontShowNotifications, dontShowTOS)
                                        }.bind(this))
                                }.bind(this), function getPassportTicketError(errTicket) {
                                    return this._onSignInComplete(errTicket.number, dontShowErrors, dontShowAccountCreation, dontShowNotifications, dontShowTOS)
                                }.bind(this))
                        }.bind(this))
                }, _registerUserChangedEvents: function _registerUserChangedEvents() {
                    if (!MS.Entertainment.Utilities.isApp2) {
                        this._unregisterLiveIdChangeEvent();
                        this._registerLiveIdChangeEvent()
                    }
                }, _handleApp2AppResume: function _handleApp2AppResume(eventArgs) {
                    var profilePicker = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.profilePicker);
                    if (profilePicker && profilePicker._currentUserChanged)
                        profilePicker._currentUserChanged()
                }, handleApp2CurrentUserChanged: function handleApp2CurrentUserChanged(eventArgs) {
                    var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.ServiceEventProvider;
                    eventProvider.traceServiceUserChanged("handleApp2CurrentUserChanged invoked");
                    var newUser = null;
                    if (eventArgs && eventArgs.detail)
                        newUser = eventArgs.detail.newCurrentUser;
                    if (!newUser || (newUser.isGuest || !newUser.isSignedIn)) {
                        this.signOut();
                        return
                    }
                    eventProvider.traceServiceUserChanged("New User:" + newUser.xboxUserId);
                    var previousUser = null;
                    try {
                        previousUser = this._signInProvider.currentUser
                    }
                    catch(ex) {}
                    if (!this.isSignedIn || !previousUser || (previousUser.xboxUserId !== newUser.xboxUserId)) {
                        if (previousUser && newUser && (previousUser.xboxUserId !== newUser.xboxUserId))
                            this._showLoadingCursorOnUserSwitch();
                        this.signOut().then(function signOutComplete() {
                            this._updateCurrentUser(newUser);
                            this.signIn()
                        }.bind(this))
                    }
                    else if (previousUser && previousUser.xboxUserId === newUser.xboxUserId)
                        this._updateCurrentUser(newUser)
                }, _showLoadingCursorOnUserSwitch: function _showLoadingCursorOnUserSwitch() {
                    MS.Entertainment.UI.Controls.Overlay.showLoadingOverlay({
                        userControl: "MS.Entertainment.UI.Controls.LoadingControl", hideOnNowPlaying: true, enableKeyboardLightDismiss: false, onInitialize: function setModel(overlayContent) {
                                var progressControl = document.createElement("progress");
                                WinJS.Utilities.addClass(progressControl, "loadingRing win-ring win-large");
                                overlayContent.appendChild(progressControl);
                                return WinJS.Promise.wrap()
                            }, userControlOptions: {
                                isBusy: true, height: null, displayDelay: 0
                            }, overlayCustomStyle: "loadingControlOverlayBackground", showAnimation: function showAnimation(element) {
                                WinJS.Utilities.addClass(element, "fadeIn");
                                return WinJS.Promise.as()
                            }, hideAnimation: function hideAnimation(element) {
                                WinJS.Utilities.removeClass(element, "fadeIn");
                                WinJS.Utilities.addClass(element, "fadeOut");
                                return WinJS.Promise.as()
                            }, closeTimeoutMS: MS.Entertainment.Utilities.SignIn.SIGNIN_SWITCH_USER_LOAD_TIMEOUT
                    })
                }, _updateCurrentUser: function _updateCurrentUser(newUser) {
                    if (newUser === undefined)
                        MS.Entertainment.Utilities.fail("signIn.js _updateCurrentUser: newUser is undefined");
                    var oldUser = null;
                    try {
                        oldUser = this._signInProvider.currentUser
                    }
                    catch(ex) {}
                    this._signInProvider.currentUser = newUser
                }, _registerLiveIdChangeEvent: function _registerLiveIdChangeEvent() {
                    try {
                        var trigger = new Windows.ApplicationModel.Background.SystemTrigger(Windows.ApplicationModel.Background.SystemTriggerType.onlineIdConnectedStateChange, false);
                        var taskBuilder = new Windows.ApplicationModel.Background.BackgroundTaskBuilder;
                        taskBuilder.name = this._liveIdChangeTaskName;
                        taskBuilder.taskEntryPoint = "LiveIdChange.js";
                        taskBuilder.setTrigger(trigger);
                        var task = taskBuilder.register();
                        task.addEventListener("completed", this._liveIdChangeCompleteHandler)
                    }
                    catch(ex) {}
                }, _unregisterLiveIdChangeEvent: function _unregisterLiveIdChangeEvent() {
                    var iterator = Windows.ApplicationModel.Background.BackgroundTaskRegistration.allTasks.first();
                    var hasCurrentTask = iterator.hasCurrent;
                    while (hasCurrentTask) {
                        var currentTask = iterator.current.value;
                        if (currentTask.name === this._liveIdChangeTaskName)
                            currentTask.unregister(true);
                        hasCurrentTask = iterator.moveNext()
                    }
                }, _liveIdChangeCompleteHandler: function _liveIdChangeCompleteHandler() {
                    this.signOut().then(function signOutComplete() {
                        this.signInOnStart()
                    }.bind(this))
                }, getAppCurrentUser: function getAppCurrentUser() {
                    var user;
                    try {
                        user = this._signInProvider.currentUser;
                        if (!(user && user.isSignedIn))
                            user = null
                    }
                    catch(ex) {}
                    return user
                }, getToBeProvisionedUserName: function getToBeProvisionedUserName() {
                    var user;
                    try {
                        user = this._signInProvider.signInName
                    }
                    catch(ex) {}
                    return user
                }, switchCurrentUser: function switchCurrentUser() {
                    MS.Entertainment.UI.Shell.AccountPicker.showAccountPickerAsync().done(function showAccountPickerAsyncComplete(result) {
                        if (!result || !result.user)
                            return;
                        var previousUser = this.getAppCurrentUser();
                        if (previousUser && previousUser.xboxUserId !== result.user.xboxUserId)
                            this.signOut().done(function signOutComplete() {
                                this._updateCurrentUser(result.user);
                                this.signIn()
                            }.bind(this))
                    }.bind(this), null)
                }, signInOnStart: function signInOnStart() {
                    return this.signIn(true, true, false, true, false).then(null, function signInError(){})
                }, getSignInPromise: function getSignInPromise() {
                    var signedInSignal = new MS.Entertainment.UI.Framework.Signal;
                    var signInBindings;
                    var signInPromise = WinJS.Promise.wrap();
                    var cleanupSignInBindings = function() {
                            if (!signInBindings)
                                return;
                            signInBindings.cancel();
                            signInBindings = null;
                            signedInSignal.complete()
                        };
                    if (this.isSigningIn) {
                        signInBindings = WinJS.Binding.bind(this, {isSigningIn: cleanupSignInBindings});
                        signInPromise = signedInSignal.promise
                    }
                    return signInPromise
                }, signOut: function signOut(forceSignOut, persistUserDB, dontShowNotifications) {
                    if (this.isSigningOut)
                        return WinJS.Promise.wrap(MS.Entertainment.Utilities.SignIn.SignInResult.signingOut);
                    this.isSigningOut = true;
                    var signOutComplete = function signOutComplete(signOutResult, dontShowNotifications) {
                            if (this.isSignedIn) {
                                this.isSignedIn = this.isApp2UserAvailable = false;
                                if (MS.Entertainment.Utilities.isApp2)
                                    this._updateCurrentUser(null);
                                this.signInError = MS.Entertainment.Utilities.SignInErrors.ZEST_E_SIGNIN_REQUIRED;
                                this.isSigningIn = false;
                                (new Microsoft.Entertainment.Configuration.ConfigurationManager).generalSettings.alwaysPromptOnPurchase = true;
                                (new Microsoft.Entertainment.Configuration.ConfigurationManager).generalSettings.promptOnPurchaseFirstRun = true;
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                signedInUser.refresh(null, forceSignOut);
                                MS.Entertainment.Utilities.SignIn.dispatchEvent("signOutComplete", true);
                                if (!forceSignOut)
                                    this._resetNavigationState()
                            }
                            this.isSigningOut = false;
                            if (this._refreshSignInPromise) {
                                this._refreshSignInPromise.cancel();
                                this._refreshSignInPromise = null
                            }
                            if (!dontShowNotifications)
                                this._showSignInNotification();
                            if (!forceSignOut) {
                                this._lastSignedInUserRegion = null;
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                configurationManager.service.lastSignInAccountRegion = ""
                            }
                            var signOutResultText = signOutResult;
                            if (typeof signOutResult === "number")
                                signOutResultText = MS.Entertainment.Utilities.convertToHexString(signOutResult);
                            var telemetryParameterArray = [{
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignOutResult, parameterValue: signOutResultText
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ForceSignOut, parameterValue: !!forceSignOut
                                    }];
                            MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SignOut, telemetryParameterArray);
                            return signOutResult
                        }.bind(this);
                    if (this.isSignedIn || forceSignOut)
                        return this._signOutInternal(persistUserDB).then(function(signIn) {
                                return signOutComplete(MS.Entertainment.Utilities.SignIn.SignInResult.success, dontShowNotifications)
                            }, function(err) {
                                return signOutComplete(err.number, dontShowNotifications)
                            });
                    else {
                        this.isSigningOut = false;
                        return WinJS.Promise.wrap()
                    }
                }, forgetUserInformation: function forgetUserInformation()
                {
                    return Microsoft.Entertainment.Fulfillment.Reading.Entitlements.clearUserHashAsync().then(function() {
                            return MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn)._forgetUserInformationInternal()
                        })
                }, _resetNavigationState: function resetNavigationState() {
                    var navigationService = null;
                    var winJSNavigationService = null;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.videoQueryCacheService)) {
                        var videoQueryCacheService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.videoQueryCacheService);
                        videoQueryCacheService.reloadQueries()
                    }
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                        navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        navigationService.navigateToDefaultPage()
                    }
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation)) {
                        winJSNavigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                        winJSNavigationService.navigateToDefault()
                    }
                }, getPassportTicket: function getPassportTicket(policy, service, ignoreSignInState, promptType) {
                    var upgradeService;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.upgradeReminderDisplayer))
                        upgradeService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.upgradeReminderDisplayer);
                    if ((this.isSignedIn && (!upgradeService || !upgradeService.upgradeRequired)) || ignoreSignInState)
                        return this._getPassportTicketInternal(policy, service, ignoreSignInState, promptType).then(function(passport) {
                                if (passport)
                                    return passport.passportTicket
                            });
                    else
                        return WinJS.Promise.wrapError(null)
                }, getWebAuthToken: function getWebAuthToken(startUri, endUri, ignoreSignInState, webAuthOptions) {
                    var upgradeService;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.upgradeReminderDisplayer))
                        upgradeService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.upgradeReminderDisplayer);
                    var WebAuthOptions = Windows.Security.Authentication.Web.WebAuthenticationOptions;
                    if ((this.isSignedIn && (!upgradeService || !upgradeService.upgradeRequired)) || ignoreSignInState)
                        return Windows.Security.Authentication.Web.WebAuthenticationBroker.authenticateAsync(webAuthOptions || WebAuthOptions.none, startUri, endUri).then(function(result) {
                                var WebAuthStatus = Windows.Security.Authentication.Web.WebAuthenticationStatus;
                                switch (result.responseStatus) {
                                    case WebAuthStatus.errorHttp:
                                        return WinJS.Promise.wrapError(result.responseData);
                                        break;
                                    case WebAuthStatus.userCancel:
                                        return WinJS.Promise.cancel;
                                        break;
                                    case WebAuthStatus.success:
                                        return result.responseData;
                                        break
                                }
                            });
                    else
                        return WinJS.Promise.wrapError(null)
                }, getAuthHeaderForEndpoint: function getAuthHeaderForEndpoint(endpointId, ignoreSignInState) {
                    var upgradeService;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.upgradeReminderDisplayer))
                        upgradeService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.upgradeReminderDisplayer);
                    if (this.isSignedIn && (!upgradeService || !upgradeService.upgradeRequired))
                        return this._getAuthHeaderForEndpointInternal(endpointId, ignoreSignInState).then(function complete(result) {
                                this._triggerRefreshIfNeeded();
                                return result
                            }.bind(this), function error(err) {
                                if (err.number)
                                    this._sendXSTSTelemetry(err.number);
                                return WinJS.Promise.wrapError(err)
                            }.bind(this));
                    else
                        return WinJS.Promise.wrapError(null)
                }, getAuthHeader: function getAuthHeader() {
                    var upgradeService;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.upgradeReminderDisplayer))
                        upgradeService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.upgradeReminderDisplayer);
                    if (this.isSignedIn && (!upgradeService || !upgradeService.upgradeRequired))
                        return this._getAuthHeaderInternal().then(function complete(result) {
                                this._triggerRefreshIfNeeded();
                                return result
                            }.bind(this), function error(err) {
                                if (err.number)
                                    this._sendXSTSTelemetry(err.number);
                                return WinJS.Promise.wrapError(err)
                            }.bind(this));
                    else
                        return WinJS.Promise.wrapError(null)
                }, getXToken: function getXToken(endpointId, ignoreSignInState) {
                    return this._getXToken(function() {
                            return this._getXTokenInternal(endpointId)
                        }.bind(this), ignoreSignInState)
                }, getXTokenByRelyingParty: function getXTokenByRelyingParty(relyingParty, ignoreSignInState) {
                    return this._getXToken(function() {
                            return this._getXTokenByRelyingPartyInternal(relyingParty)
                        }.bind(this), ignoreSignInState)
                }, _getXToken: function _getXToken(nativeOperation, ignoreSignInState) {
                    var upgradeService;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.upgradeReminderDisplayer))
                        upgradeService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.upgradeReminderDisplayer);
                    if ((this.isSignedIn || this.isApp2UserAvailable) && (!upgradeService || !upgradeService.upgradeRequired) || ignoreSignInState)
                        return nativeOperation().then(function complete(result) {
                                if (result) {
                                    this._triggerRefreshIfNeeded();
                                    return {
                                            key: "Authorization", value: result.token
                                        }
                                }
                            }.bind(this), function error(err) {
                                return WinJS.Promise.wrapError(err)
                            });
                    else
                        return WinJS.Promise.wrapError(null)
                }, _triggerRefreshIfNeeded: function _triggerRefreshIfNeeded() {
                    if (this._lastRefreshSignInFailed) {
                        this._refreshSignIn(MS.Entertainment.Utilities.SignIn.SIGNIN_REFRESH_INTERVAL_OVERRIDE);
                        this._lastRefreshSignInFailed = false
                    }
                }, setIsSignInSupported: function setIsSignInSupported(isSupported) {
                    this._signInProvider.isSignInSupported = isSupported
                }, _sendXSTSTelemetry: function _sendXSTSTelemetry(result) {
                    var authHeaderResultText = result;
                    if (typeof result === "number")
                        authHeaderResultText = "0x" + (result + 0xFFFFFFFF + 1).toString(16);
                    var telemetryParameterArray = [{
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AuthHeaderResultText, parameterValue: authHeaderResultText
                            }];
                    MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.AuthHeaderResult, telemetryParameterArray)
                }, refreshSignInState: function refreshSignInState() {
                    this._signInProvider.clearTokenMap();
                    return this._doSignIn(true, true, true, true, true)
                }, provisionUserAccount: function provisionUserAccount() {
                    var asyncSignInOp = null;
                    try {
                        asyncSignInOp = this._signInProvider.provisionUserAccount()
                    }
                    catch(err) {
                        return WinJS.Promise.wrapError(err)
                    }
                    return asyncSignInOp
                }, _onSignInComplete: function _onSignInComplete(signInResult, dontShowErrors, dontShowAccountCreation, dontShowNotifications, dontShowTOS) {
                    this.isSigningIn = false;
                    this.isSignedIn = this.isApp2UserAvailable = this._signInProvider.isSignedIn();
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (this.isSignedIn) {
                        this.signInError = 0;
                        if (this.appNotificationService) {
                            if (!dontShowNotifications)
                                this.appNotificationService.send(new MS.Entertainment.UI.Notification({
                                    notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: String.load(String.id.IDS_SIGNIN_COMPLETE), subTitle: String.empty, moreDetails: null, icon: MS.Entertainment.UI.Icon.player, action: null, category: MS.Entertainment.Utilities.SignIn.NotificationCategory.signInInfo, isPersistent: false
                                }));
                            this.appNotificationService.removeNotificationByCategory(MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError)
                        }
                    }
                    else {
                        if (this.appNotificationService)
                            this.appNotificationService.removeNotificationByCategory(MS.Entertainment.Utilities.SignIn.NotificationCategory.signInInfo);
                        this.signInError = signInResult
                    }
                    if (this.isSignedIn) {
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        signedInUser.refresh(this._signInProvider);
                        MS.Entertainment.Utilities.SignIn.dispatchEvent("signInComplete", true);
                        if (this._partnerToken)
                            this._sendPartnerTokenToMDS(this._partnerToken);
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.richPresence)) {
                            var richPresenceService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.richPresence);
                            richPresenceService.setRichPresence(MS.Entertainment.Services.RichPresenceActionType.browsingApp)
                        }
                    }
                    this._sendTelemetry(signInResult);
                    this._registerUserChangedEvents();
                    var that = this;
                    switch (signInResult) {
                        case MS.Entertainment.Utilities.SignIn.SignInResult.success:
                            var globalizationManager = new Microsoft.Entertainment.Util.GlobalizationManager;
                            var userXboxRegion = globalizationManager.getRegion();
                            var userAccountRegion = this._lastSignedInUserRegion;
                            if (userAccountRegion !== userXboxRegion) {
                                var userRegionSupported = this._checkUserRegionIsSupported(userXboxRegion);
                                if (userRegionSupported)
                                    if (MS.Entertainment.Utilities.isApp1)
                                        MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_SIGNIN_MIXED_REGION_ERROR_TITLE), String.load(String.id.IDS_SIGNIN_MIXED_REGION_ERROR_DESC)).done(function() {
                                            MSApp.terminateApp(new Error("Region Changed because signed in user has different xbox live region"))
                                        });
                                    else
                                        this._resetNavigationState();
                                else {
                                    if (this.appNotificationService)
                                        this.appNotificationService.removeNotificationByCategory(MS.Entertainment.Utilities.SignIn.NotificationCategory.signInInfo);
                                    if (!userRegionSupported) {
                                        this.signInError = MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_NOT_SUPPORTED_REGION;
                                        this._sendTelemetry(this.signInError)
                                    }
                                    this._lastSignedInUserRegion = null;
                                    configurationManager.service.lastSignInAccountRegion = String.empty;
                                    if (!dontShowErrors) {
                                        var msgPromise = MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_SIGNIN_ERROR_CAPTION), MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_NOT_SUPPORTED_REGION);
                                        return msgPromise.then(function showSignInErrorComplete() {
                                                that.signOut(true, false, dontShowNotifications);
                                                return MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_NOT_SUPPORTED_REGION
                                            })
                                    }
                                    else {
                                        this.signOut(true, false, dontShowNotifications);
                                        return WinJS.Promise.wrapError(MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_NOT_SUPPORTED_REGION)
                                    }
                                }
                            }
                            this._offlineErrorRetryCount = 0;
                            that._refreshSignIn();
                            return WinJS.Promise.wrap(signInResult);
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.XONLINE_E_WCMUSIC_ACCOUNT_NOT_PROVISIONED:
                        case MS.Entertainment.Utilities.SignInErrors.XO_E_ACCOUNT_CREATION_REQUIRED:
                            if (!dontShowAccountCreation && !MS.Entertainment.Utilities.isApp2)
                                return MS.Entertainment.Accounts.AccountProvisioningDialog.showAccountProvisioningDialog().then(function createAccountComplete() {
                                        return this.signIn(true, true, false, true, true)
                                    }.bind(this), function createAccountError(error) {
                                        if (error.number === MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_CHILD_ACCOUNT_CREATION_BLOCKED || error.number === MS.Entertainment.Utilities.SignInErrors.ONL_E_PARENTAL_CONSENT_REQUIRED)
                                            return MS.Entertainment.Accounts.ChildAccountProvisioningDialog.showChildAccountProvisioningDialog().then(function childAccountProvisioningComplete() {
                                                    return this.signIn(true, true, false, true, true)
                                                }.bind(this));
                                        else
                                            return MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_SIGNIN_ERROR_CAPTION), error.number).then(function callSignIn() {
                                                    return this.signIn(true, true, false, true, true)
                                                }.bind(this))
                                    }.bind(this));
                            else {
                                this.signOut(true, false, dontShowNotifications);
                                return WinJS.Promise.wrapError(signInResult)
                            }
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_TERMS_OF_SERVICE:
                        case MS.Entertainment.Utilities.SignInErrors.XO_E_ACCOUNT_TERMS_OF_USE_NOT_ACCEPTED:
                            if (!dontShowTOS && !MS.Entertainment.Utilities.isApp2)
                                return MS.Entertainment.Accounts.AcceptTermsOfService.doAcceptTermsOfService().then(function acceptTermsOfServiceComplete() {
                                        return that.signIn(true, true, false, true, true)
                                    });
                            else {
                                this.signOut(true, true);
                                return WinJS.Promise.wrapError(signInResult)
                            }
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_VERSION_NOT_SUPPORTED:
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.NO_CONNECTED_ACCOUNT:
                            this._showSignInNotification();
                            var persistUserDB = true;
                            if (configurationManager.service.lastSignedInUserGamerTag && configurationManager.service.lastSignedInUserGamerTag !== String.empty)
                                persistUserDB = false;
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            signedInUser.refresh(null);
                            this.signOut(true, persistUserDB, true);
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.ERROR_NETWORK_UNREACHABLE:
                        case MS.Entertainment.Utilities.SignInErrors.INET_E_RESOURCE_NOT_FOUND:
                        case MS.Entertainment.Utilities.SignInErrors.NS_E_WMPIM_USEROFFLINE:
                        case MS.Entertainment.Utilities.SignInErrors.INET_E_DOWNLOAD_FAILURE:
                        case MS.Entertainment.Utilities.SignInErrors.INET_E_CONNECTION_TIMEOUT:
                        case MS.Entertainment.Utilities.SignInErrors.XBL_SERVER_CONNECTION_FAILURE:
                            this._resetNetworkStatusBinding();
                            this._offlineErrorRetryCount++;
                            if (this._offlineErrorRetryCount < configurationManager.service.signInNetworkErrorRetryCount)
                                this._networkStatusBinding = WinJS.Binding.bind(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {networkStatus: this._onNetworkStatusChanged.bind(this)});
                            else
                                this._showSignInNotification();
                            if (!dontShowErrors)
                                return MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_SIGNIN_ERROR_CAPTION), MS.Entertainment.Utilities.SignInErrors.NS_E_WMPIM_USEROFFLINE).then(function showSignInErrorComplete() {
                                        return signInResult
                                    });
                            else
                                return WinJS.Promise.wrapError(signInResult);
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_NOT_SUPPORTED_REGION:
                            if (!dontShowErrors)
                                return MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_SIGNIN_ERROR_CAPTION), signInResult).then(function showSignInErrorComplete() {
                                        that.signOut(true, false, dontShowNotifications);
                                        return signInResult
                                    });
                            else {
                                this.signOut(true, false, dontShowNotifications);
                                return WinJS.Promise.wrapError(signInResult)
                            }
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.NS_E_INVALID_USERNAME_AND_PASSWORD:
                        case MS.Entertainment.Utilities.SignInErrors.ONL_E_FORCESIGNIN:
                        case MS.Entertainment.Utilities.SignInErrors.ONL_E_ACCESS_DENIED_BY_TOU:
                        case MS.Entertainment.Utilities.SignInErrors.ONL_E_PASSWORD_UPDATE_REQUIRED:
                        case MS.Entertainment.Utilities.SignInErrors.ONL_E_ACCOUNT_UPDATE_REQUIRED:
                        case MS.Entertainment.Utilities.SignInErrors.ONL_E_ACTION_REQUIRED:
                            return this.signIn();
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.NS_E_NO_ACCOUNT_PROOF:
                        case MS.Entertainment.Utilities.SignInErrors.NS_E_ACCOUNT_PROOF_NOT_VERIFIED:
                            return this.signIn();
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.ZUNE_E_SIGNIN_ERROR_CANCELLED:
                            this._showSignInNotification();
                            return WinJS.Promise.wrapError(signInResult);
                        default:
                            var that = this;
                            var signInAction = WinJS.Utilities.markSupportedForProcessing(function() {
                                    that.signIn()
                                });
                            if (this.appNotificationService)
                                this.appNotificationService.send(new MS.Entertainment.UI.Notification({
                                    notificationType: MS.Entertainment.UI.Notification.Type.Critical, title: String.load(String.id.IDS_SIGNIN_ERROR), subTitle: String.load(String.id.IDS_SIGNIN_RETRY), moreDetails: null, icon: WinJS.UI.AppBarIcon.sync, action: signInAction, category: MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError, isPersistent: true
                                }));
                            this.signOut(true, true);
                            if (!dontShowErrors)
                                return MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_SIGNIN_ERROR_CAPTION), signInResult).then(function showSignInErrorComplete() {
                                        return signInResult
                                    });
                            else
                                return WinJS.Promise.wrapError(signInResult);
                            break
                    }
                    return WinJS.Promise.wrapError(signInResult)
                }, _checkUserRegionIsSupported: function _checkUserRegionIsSupported(userRegion) {
                    var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var supportedRegions;
                    var isSignInSupported = true;
                    if (MS.Entertainment.Utilities.isMusicApp)
                        supportedRegions = config.features.musicSignInAvailable;
                    else if (MS.Entertainment.Utilities.isVideoApp)
                        supportedRegions = config.features.videoSignInAvailable;
                    else
                        isSignInSupported = true;
                    if (supportedRegions !== "ALL" && supportedRegions.toLowerCase().indexOf(userRegion.toLowerCase()) < 0)
                        isSignInSupported = false;
                    return isSignInSupported
                }, _onNetworkStatusChanged: function _onNetworkStatusChanged(newValue) {
                    switch (newValue) {
                        case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unknown:
                        case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unrestricted:
                        case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.throttled:
                            if (!this.isSignedIn)
                                WinJS.Promise.timeout(1000).then(function _delay() {
                                    this.signIn(true, true, false, true, true).done(function success() {
                                        this._resetNetworkStatusBinding()
                                    }.bind(this), function error() {
                                        this._resetNetworkStatusBinding()
                                    }.bind(this))
                                }.bind(this));
                            break
                    }
                }, _resetNetworkStatusBinding: function _resetNetworkStatusBinding() {
                    if (this._networkStatusBinding) {
                        this._networkStatusBinding.cancel();
                        this._networkStatusBinding = null
                    }
                }, _launchStore: function _launchStore() {
                    var launchInfo = "ms-windows-store:Updates";
                    var appAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.launchApp);
                    appAction.automationId = MS.Entertainment.UI.AutomationIds.launchAppStoreUpgrade;
                    appAction.parameter = {
                        uri: launchInfo, appendSource: true, appendGamerTag: false
                    };
                    appAction.execute()
                }, _isNetworkError: function _isNetworkError(error) {
                    switch (error) {
                        case MS.Entertainment.Utilities.SignInErrors.ERROR_NETWORK_UNREACHABLE:
                        case MS.Entertainment.Utilities.SignInErrors.INET_E_RESOURCE_NOT_FOUND:
                        case MS.Entertainment.Utilities.SignInErrors.NS_E_WMPIM_USEROFFLINE:
                        case MS.Entertainment.Utilities.SignInErrors.INET_E_DOWNLOAD_FAILURE:
                        case MS.Entertainment.Utilities.SignInErrors.INET_E_CONNECTION_TIMEOUT:
                        case MS.Entertainment.Utilities.SignInErrors.XBL_SERVER_CONNECTION_FAILURE:
                            return true;
                        default:
                            return false
                    }
                    return false
                }, _refreshSignIn: function _refreshSignIn(signInInterval) {
                    var refreshInterval = signInInterval ? signInInterval : MS.Entertainment.Utilities.SignIn.SIGNIN_REFRESH_INTERVAL;
                    if (this._refreshSignInPromise) {
                        this._refreshSignInPromise.cancel();
                        this._refreshSignInPromise = null
                    }
                    this._refreshSignInPromise = WinJS.Promise.timeout(refreshInterval).then(function _silentSignIn() {
                        var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.ServiceEventProvider;
                        eventProvider.traceServiceRefreshSignInStarted();
                        var requestNetwork = function requestNetwork() {
                                if (MS.Entertainment.Utilities.isMusicApp1) {
                                    var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                                    return sessionManager.requestNetworkAndDelay("SignIn")
                                }
                                else
                                    return WinJS.Promise.as()
                            };
                        requestNetwork().then(function onNetworkRequested(networkReleaseHandle) {
                            this._doSignIn(true, true, true, true, true).then(function success() {
                                eventProvider.traceServiceRefreshSignInCompleted();
                                MS.Entertainment.Utilities.SignIn.dispatchEvent("signInRefreshed", true);
                                this._signInProvider.clearTokenMap();
                                MS.Entertainment.Utilities.SignIn._signInRefreshRetryCount = 3;
                                this._lastRefreshSignInFailed = false;
                                if (networkReleaseHandle)
                                    networkReleaseHandle.release()
                            }.bind(this), function error(signInResult) {
                                var signInResultText = signInResult;
                                if (typeof signInResult === "number")
                                    signInResultText = MS.Entertainment.Utilities.convertToHexString(signInResult);
                                var telemetryParameterArray = [{
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.RefreshSignInResult, parameterValue: signInResultText
                                        }];
                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SignIn, telemetryParameterArray);
                                this._signInProvider.clearTokenMap();
                                if (this._isNetworkError(signInResult))
                                    if (MS.Entertainment.Utilities.SignIn._signInRefreshRetryCount > 0) {
                                        MS.Entertainment.Utilities.SignIn._signInRefreshRetryCount--;
                                        this._refreshSignIn(MS.Entertainment.Utilities.SignIn.SIGNIN_REFRESH_INTERVAL_OVERRIDE)
                                    }
                                    else {
                                        MS.Entertainment.Utilities.SignIn._signInRefreshRetryCount = 3;
                                        this._lastRefreshSignInFailed = true
                                    }
                                else
                                    this._lastRefreshSignInFailed = true;
                                if (networkReleaseHandle)
                                    networkReleaseHandle.release()
                            }.bind(this))
                        }.bind(this))
                    }.bind(this))
                }, _signInInternal: function _signInInternal(passportTicket) {
                    var asyncSignInOp = null;
                    try {
                        asyncSignInOp = this._signInProvider.signInUser(passportTicket)
                    }
                    catch(err) {
                        return WinJS.Promise.wrapError(err)
                    }
                    return asyncSignInOp
                }, _signOutInternal: function _signOutInternal(persistUserDB) {
                    var asyncSignInOp = null;
                    try {
                        asyncSignInOp = this._signInProvider.signOut(persistUserDB || false)
                    }
                    catch(err) {
                        return WinJS.Promise.wrapError(err)
                    }
                    return asyncSignInOp
                }, _forgetUserInformationInternal: function _forgetUserInformationInternal() {
                    var asyncForgetUserInformationOp = null;
                    try {
                        asyncForgetUserInformationOp = this._signInProvider.forgetUserInformation()
                    }
                    catch(err) {
                        return WinJS.Promise.wrapError(err)
                    }
                    return asyncForgetUserInformationOp
                }, _getPassportTicketInternal: function _getPassportTicketInternal(policy, service, ignoreSignInState, promptType) {
                    var asyncSignInOp = null;
                    if (!promptType)
                        promptType = Microsoft.Entertainment.Util.SignInPromptType.promptIfNeeded;
                    try {
                        asyncSignInOp = this._signInProvider.getTicket(policy, service, ignoreSignInState, promptType)
                    }
                    catch(err) {
                        return WinJS.Promise.wrapError(err)
                    }
                    return asyncSignInOp
                }, _getAuthHeaderForEndpointInternal: function _getAuthHeaderForEndpointInternal(endpointId, ignoreSignInState) {
                    var asyncAuthHeaderOp = null;
                    try {
                        asyncAuthHeaderOp = this._signInProvider.getAuthHeaderForEndpoint(endpointId, ignoreSignInState)
                    }
                    catch(err) {
                        return WinJS.Promise.wrapError(err)
                    }
                    return asyncAuthHeaderOp
                }, _getAuthHeaderInternal: function _getAuthHeaderInternal() {
                    var asyncAuthHeaderOp = null;
                    try {
                        asyncAuthHeaderOp = this._signInProvider.getAuthHeader()
                    }
                    catch(err) {
                        return WinJS.Promise.wrapError(err)
                    }
                    return asyncAuthHeaderOp
                }, _getXTokenInternal: function _getXTokenInternal(endpointId) {
                    var asyncSignInOp = null;
                    try {
                        asyncSignInOp = this._signInProvider.getXTokenAsyncOp(endpointId)
                    }
                    catch(err) {
                        return WinJS.Promise.wrapError(err)
                    }
                    return asyncSignInOp
                }, _getXTokenByRelyingPartyInternal: function _getXTokenByRelyingPartyInternal(endpointId) {
                    var asyncSignInOp = null;
                    try {
                        asyncSignInOp = this._signInProvider.getXTokenByRelyingPartyAsyncOp(endpointId)
                    }
                    catch(err) {
                        return WinJS.Promise.wrapError(err)
                    }
                    return asyncSignInOp
                }, _sendTelemetry: function _sendTelemetry(signInResult) {
                    var signInResultText = signInResult;
                    if (typeof signInResult === "number")
                        signInResultText = MS.Entertainment.Utilities.convertToHexString(signInResult);
                    var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                    eventProvider.traceSignInResult(signInResultText);
                    var telemetryParameterArray = [{
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignInResult, parameterValue: signInResultText
                            }];
                    switch (signInResult) {
                        case MS.Entertainment.Utilities.SignIn.SignInResult.success:
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            telemetryParameterArray.push({
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ZunePass, parameterValue: signedInUser.isSubscription
                            });
                            telemetryParameterArray.push({
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CanSignOut, parameterValue: signedInUser.canSignOut
                            });
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.NO_CONNECTED_ACCOUNT:
                            telemetryParameterArray.push({
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.NoConnectedAccount, parameterValue: true
                            });
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.XONLINE_E_WCMUSIC_ACCOUNT_NOT_PROVISIONED:
                        case MS.Entertainment.Utilities.SignInErrors.XO_E_ACCOUNT_CREATION_REQUIRED:
                            telemetryParameterArray.push({
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CreateAccount, parameterValue: true
                            });
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_TERMS_OF_SERVICE:
                            telemetryParameterArray.push({
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AcceptTermsOfService, parameterValue: true
                            });
                            break;
                        case MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_NOT_SUPPORTED_REGION:
                            var region = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service.lastSignInAccountRegion;
                            if (!region) {
                                var globalizationManager = new Microsoft.Entertainment.Util.GlobalizationManager;
                                region = globalizationManager.getRegion()
                            }
                            telemetryParameterArray.push({
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.UnsupportedRegion, parameterValue: region
                            });
                            break;
                        default:
                            break
                    }
                    var stopTime = new Date;
                    var durationMsec;
                    if (this._signInStartTime) {
                        durationMsec = stopTime.valueOf() - this._signInStartTime.valueOf();
                        this._signInStartTime = null
                    }
                    if (durationMsec) {
                        if (durationMsec < 0)
                            durationMsec = -10 * 60 * 1000;
                        else if (durationMsec > 5 * 60 * 1000)
                            durationMsec = 10 * 60 * 1000;
                        telemetryParameterArray.push({
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignInDuration, parameterValue: durationMsec.toString()
                        })
                    }
                    MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SignIn, telemetryParameterArray)
                }, _showSignInNotification: function _showSignInNotification() {
                    if (!this.appNotificationService)
                        return;
                    var signInAction = WinJS.Utilities.markSupportedForProcessing(function() {
                            this.signIn().done(null, function(){})
                        }.bind(this));
                    var notificationTitle;
                    var notificationSubtitle;
                    var notificationIcon;
                    if (this.signInError === MS.Entertainment.Utilities.SignInErrors.XONLINE_E_WCMUSIC_ACCOUNT_NOT_PROVISIONED || this.signInError === MS.Entertainment.Utilities.SignInErrors.XO_E_ACCOUNT_CREATION_REQUIRED) {
                        notificationTitle = String.load(String.id.IDS_SIGNIN_NOTIFICATION_SIGNUP_TITLE);
                        notificationSubtitle = String.load(String.id.IDS_SIGNIN_NOTIFICATION_SIGNUP_TEXT);
                        notificationIcon = WinJS.UI.AppBarIcon.sync
                    }
                    else {
                        notificationTitle = String.load(String.id.IDS_SIGNIN_NOTIFICATION_SIGNIN_TITLE);
                        notificationSubtitle = String.load(String.id.IDS_SIGNIN_NOTIFICATION_SIGNIN_TEXT);
                        notificationIcon = WinJS.UI.AppBarIcon.sync
                    }
                    this.appNotificationService.removeNotificationByCategory(MS.Entertainment.Utilities.SignIn.NotificationCategory.signInInfo);
                    this.appNotificationService.send(new MS.Entertainment.UI.Notification({
                        notificationType: MS.Entertainment.UI.Notification.Type.Critical, title: notificationTitle, subTitle: notificationSubtitle, moreDetails: null, icon: notificationIcon, action: signInAction, category: MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError, isPersistent: true
                    }))
                }, _sendPartnerTokenToMDS: function _sendPartnerTokenToMDS(partnerToken) {
                    var mdsCall = this._signInProvider.updatePartnerToken(partnerToken);
                    mdsCall.then(null, function(e) {
                        MS.Entertainment.Utilities.fail("Error trying to send partnerToken to MDS: " + (e & e.message))
                    }).done(function() {
                        this._partnerToken = null
                    }.bind(this))
                }, updatePartnerToken: function updatePartnerToken(partnerToken) {
                    MS.Entertainment.Utilities.assert(partnerToken, "No partner token provided to sign in");
                    if (!partnerToken)
                        return;
                    if (this.isSignedIn)
                        this._sendPartnerTokenToMDS(partnerToken);
                    else
                        this._partnerToken = partnerToken
                }
        }, {
            factory: function factory() {
                return new MS.Entertainment.Utilities.SignIn
            }, TicketType: {
                    MBI: "MBI", MBI_SSL: "MBI_SSL", HBI: "HBI", SA_20MIN: "SA_20MIN", JWT: "JWT"
                }, SignInResult: {
                    success: "success", cancel: "cancel", signingIn: "signingIn", signingOut: "signingOut"
                }, NotificationCategory: {
                    signInError: "signInError", signInInfo: "signInInfo"
                }, NotificationIconClass: "rotate360Animation", _instanceCount: 0, listeners: null, SIGNIN_REFRESH_INTERVAL: 3 * 3600 * 1000, SIGNIN_REFRESH_INTERVAL_OVERRIDE: 900 * 1000, SIGNIN_SWITCH_USER_LOAD_TIMEOUT: 30 * 1000, _signInRefreshRetryCount: 3, addEventListener: function(eventType, listener, capture) {
                    if (MS.Entertainment.Utilities.SignIn.listeners === null) {
                        var ListenerType = WinJS.Class.mix(WinJS.Class.define(null), WinJS.Utilities.eventMixin);
                        MS.Entertainment.Utilities.SignIn.listeners = new ListenerType
                    }
                    MS.Entertainment.Utilities.SignIn.listeners.addEventListener(eventType, listener, capture)
                }, dispatchEvent: function(eventType, details) {
                    if (MS.Entertainment.Utilities.SignIn.listeners !== null)
                        return MS.Entertainment.Utilities.SignIn.listeners.dispatchEvent(eventType, details)
                }, removeEventListener: function(eventType, listener, capture) {
                    MS.Entertainment.Utilities.SignIn.listeners.removeEventListener(eventType, listener, capture)
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.signIn, MS.Entertainment.Utilities.SignIn.factory, true);
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        signIn: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.UI.Actions.Action, function signInAction() {
                    this.base()
                }, {
                    automationId: MS.Entertainment.UI.AutomationIds.signIn, executed: function executed() {
                            var commandingPopOver = MS.Entertainment.UI.Controls.CommandingPopOver;
                            if (commandingPopOver)
                                commandingPopOver.hideCurrentCommandingPopover();
                            var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            signIn.signIn().done(null, function(){})
                        }, canExecute: function canExecute(param) {
                            return true
                        }
                })
        }), signInRequiredNavigate: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.UI.Actions.navigate, function signInRequiredNavigate_constructor() {
                        this.base();
                        MS.Entertainment.Utilities.SignIn.addEventListener("signInComplete", this.requeryCanExecute.bind(this), false);
                        MS.Entertainment.Utilities.SignIn.addEventListener("signOutComplete", this.requeryCanExecute.bind(this), false)
                    }, {canExecute: function signInRequiredNavigate_canExecute(param) {
                            var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            return signIn.isSignedIn
                        }})
            }), signInAndOnlineRequiredNavigate: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.UI.Actions.signInRequiredNavigate, function signInAndOnlineRequiredNavigate_constructor() {
                        this.base();
                        this._networkStatusBinding = WinJS.Binding.bind(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {networkStatus: this.onNetworkStatusChanged.bind(this)})
                    }, {
                        _networkStatusBinding: null, _isOnline: null, canExecute: function signInAndOnlineRequiredNavigate_canExecute(param) {
                                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                return (signIn.isSignedIn && this._isOnline)
                            }, onNetworkStatusChanged: function onNetworkStatusChanged(newValue) {
                                var isOnline = this.isNetworkStatusCodeOnline(newValue);
                                if (isOnline !== this._isOnline)
                                    this._isOnline = isOnline
                            }, isNetworkStatusCodeOnline: function isNetworkStatusCodeOnline(status) {
                                var isOnline = false;
                                switch (status) {
                                    case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unknown:
                                    case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unrestricted:
                                    case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.throttled:
                                    case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.onDemand:
                                        isOnline = true;
                                        break;
                                    case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.localOnly:
                                    case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.none:
                                        isOnline = false;
                                        break
                                }
                                return isOnline
                            }
                    })
            }), showAccountPicker: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.UI.Actions.Action, function showAccountPickerAction() {
                        this.base()
                    }, {
                        automationId: MS.Entertainment.UI.AutomationIds.showAccountPicker, executed: function executed() {
                                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                signIn.switchCurrentUser().done(null, function error(){})
                            }, canExecute: function canExecute(param) {
                                return true
                            }
                    })
            })
    });
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.signIn, function() {
        return new MS.Entertainment.UI.Actions.signIn
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.signInRequiredNavigate, function() {
        return new MS.Entertainment.UI.Actions.signInRequiredNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.signInAndOnlineRequiredNavigate, function() {
        return new MS.Entertainment.UI.Actions.signInAndOnlineRequiredNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.showAccountPicker, function() {
        return new MS.Entertainment.UI.Actions.showAccountPicker
    })
})()
})();
/* >>>>>>/framework/endpoints.js:27231 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment", {Endpoint: {
            id: Microsoft.Entertainment.Util.Endpoints.EndpointId, load: function load(endpointId) {
                    var endpointManager = new Microsoft.Entertainment.Util.EndpointManager;
                    return endpointManager.getEndpointUri(endpointId)
                }, getCulture: function getCulture() {
                    var endpointManager = new Microsoft.Entertainment.Util.EndpointManager;
                    return endpointManager.getEndpointCulture()
                }
        }})
})()
})();
/* >>>>>>/framework/accutils.js:27248 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.Framework", {
        KeyboardInteractionListener: MS.Entertainment.UI.Framework.define(function KeyboardInteractionListener() {
            var keyboardHandler = this._onKeyDown.bind(this);
            var mouseHandler = this._onMouseDown.bind(this);
            var focusInHandler = this._handleFocusIn.bind(this);
            var focusOutHandler = this._handleFocusOut.bind(this);
            var keyDownHandler = this.handleKeyDown.bind(this);
            var keyUpHandler = this._handleKeyUp.bind(this);
            var pointerDownHandler = this._handlePointerDown.bind(this);
            var pointerUpHandler = this._handlePointerUp.bind(this);
            var pointOutHandler = this._handlePointerOut.bind(this);
            var gestureEngagedHandler = this._gestureEngagedHandler.bind(this);
            var gestureDisengagedHandler = this._gestureDisengagedHandler.bind(this);
            MS.Entertainment.Framework.KeyboardInteractionListener.showKeyboardFocus = MS.Entertainment.Utilities.isApp2;
            document.addEventListener("keydown", keyboardHandler, true);
            document.addEventListener("MSPointerDown", mouseHandler, false);
            document.addEventListener("pointerdown", mouseHandler, false);
            if (MS.Entertainment.Utilities.isApp2) {
                document.addEventListener("MSPointerMove", mouseHandler, false);
                document.addEventListener("MSPointerHover", mouseHandler, false);
                document.addEventListener("pointermove", mouseHandler, false);
                document.addEventListener("pointerhover", mouseHandler, false);
                document.addEventListener("keydown", keyDownHandler, true);
                document.addEventListener("keyup", keyUpHandler, true);
                document.addEventListener("MSPointerDown", pointerDownHandler, false);
                document.addEventListener("MSPointerUp", pointerUpHandler, false);
                document.addEventListener("MSPointerOut", pointOutHandler, false);
                window.addEventListener("focusin", focusInHandler, false);
                window.addEventListener("focusout", focusOutHandler, false);
                window.addEventListener("gestureengaged", gestureEngagedHandler, false);
                window.addEventListener("gesturedisengaged", gestureDisengagedHandler, false);
                this._documentLastHadFocus = document.hasFocus()
            }
            if (WinJS.Utilities.hasWinRT) {
                var commandUI = Windows.UI.Input.EdgeGesture.getForCurrentView();
                commandUI.addEventListener("completed", this._onAppBarGesture.bind(this))
            }
        }, {
            _keyboardStyleSet: false, _mouseStyleSet: false, _mouseHoverTimeout: null, _mouseHoverResetTime: 10000, _documentLastHadFocus: false, _onKeyDown: function KeyboardInteractionListener_onKeyDown(evt) {
                    this.lastInputType = MS.Entertainment.Framework.KeyboardInteractionListener.LastInputType.keyboard;
                    if (!this._keyboardStyleSet && MS.Entertainment.Framework.KeyboardInteractionListener._isKeyboardNavigationEvent(evt))
                        this._setKeyboardMode(evt)
                }, _setKeyboardMode: function _setKeyboardMode(evt) {
                    this._keyboardStyleSet = true;
                    this._mouseStyleSet = false;
                    WinJS.Utilities.addClass(document.body, MS.Entertainment.Framework.KeyboardInteractionListener.keyboardFocusClassName);
                    WinJS.Utilities.removeClass(document.body, MS.Entertainment.Framework.KeyboardInteractionListener.mouseHoverClassName);
                    MS.Entertainment.Framework.KeyboardInteractionListener.showKeyboardFocus = true;
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).nuiEngaged = false
                }, _onAppBarGesture: function _onAppBarGesture(evt) {
                    if (evt && evt.kind === Windows.UI.Input.EdgeGestureKind.keyboard) {
                        this._keyboardStyleSet = true;
                        WinJS.Utilities.addClass(document.body, MS.Entertainment.Framework.KeyboardInteractionListener.keyboardFocusClassName);
                        WinJS.Utilities.removeClass(document.body, MS.Entertainment.Framework.KeyboardInteractionListener.mouseHoverClassName);
                        MS.Entertainment.Framework.KeyboardInteractionListener.showKeyboardFocus = true
                    }
                }, _onMouseDown: function KeyboardInteractionListener_onMouseDown(evt) {
                    this.lastInputType = MS.Entertainment.Framework.KeyboardInteractionListener.LastInputType.mouse;
                    if (!this._mouseStyleSet) {
                        this._keyboardStyleSet = false;
                        this._mouseStyleSet = true;
                        WinJS.Utilities.removeClass(document.body, MS.Entertainment.Framework.KeyboardInteractionListener.keyboardFocusClassName);
                        WinJS.Utilities.addClass(document.body, MS.Entertainment.Framework.KeyboardInteractionListener.mouseHoverClassName);
                        if (MS.Entertainment.Utilities.isApp2) {
                            if (this._mouseHoverTimeout)
                                this._mouseHoverTimeout.cancel();
                            this._mouseHoverTimeout = WinJS.Promise.timeout(this._mouseHoverResetTime).then(this._setKeyboardMode.bind(this))
                        }
                    }
                    MS.Entertainment.Framework.KeyboardInteractionListener.showKeyboardFocus = false;
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).nuiEngaged = true
                }, _handleFocusIn: function _handleFocusIn(evt) {
                    var documentHasFocus = document.hasFocus();
                    if (documentHasFocus && !this._documentLastHadFocus) {
                        this._setKeyboardMode();
                        WinJS.Utilities.removeClass(document.body, "win-visiblebutnotfocused");
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).visibleButNotFocused = false
                    }
                    this._documentLastHadFocus = documentHasFocus
                }, _handleFocusOut: function _handleFocusOut(evt) {
                    var documentHasFocus = document.hasFocus();
                    if (!documentHasFocus) {
                        WinJS.Utilities.removeClass(document.body, MS.Entertainment.Framework.KeyboardInteractionListener.keyboardFocusClassName);
                        WinJS.Utilities.removeClass(document.body, MS.Entertainment.Framework.KeyboardInteractionListener.mouseHoverClassName);
                        this._keyboardStyleSet = false;
                        this._mouseStyleSet = false;
                        WinJS.Utilities.addClass(document.body, "win-visiblebutnotfocused");
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).visibleButNotFocused = true
                    }
                    this._documentLastHadFocus = documentHasFocus
                }, handleKeyDown: function handleKeyDown(evt) {
                    if (document.activeElement && (evt.key === "Spacebar" || evt.key === "Enter" || evt.keyCode === WinJS.Utilities.Key.invokeButton) && !evt.repeat)
                        WinJS.Utilities.addClass(document.activeElement, "win-itemcontainer-active")
                }, _handleKeyUp: function _handleKeyUp(evt) {
                    if ((evt.key === "Spacebar" || evt.key === "Enter" || evt.keyCode === WinJS.Utilities.Key.invokeButton) && !evt.repeat)
                        MS.Entertainment.Framework.KeyboardInteractionListener._cleanUpActiveItemContainers()
                }, _handlePointerDown: function _handlePointerDown() {
                    this.lastInputType = MS.Entertainment.Framework.KeyboardInteractionListener.LastInputType.touch;
                    if (document.activeElement)
                        WinJS.Utilities.addClass(document.activeElement, "win-itemcontainer-active")
                }, _handlePointerUp: function _handlePointerUp() {
                    MS.Entertainment.Framework.KeyboardInteractionListener._cleanUpActiveItemContainers()
                }, _handlePointerOut: function _handlePointerOut() {
                    MS.Entertainment.Framework.KeyboardInteractionListener._cleanUpActiveItemContainers()
                }, _gestureEngagedHandler: function _gestureEngagedHandler() {
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).gestureEngaged = true
                }, _gestureDisengagedHandler: function _gestureDisengagedHandler() {
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).gestureEngaged = false
                }, lastInputType: -1
        }, {
            LastInputType: {
                unknown: -1, mouse: 1, keyboard: 2, touch: 3
            }, keyboardFocusClassName: "showKeyboardFocus", mouseHoverClassName: "showPointerHover", showKeyboardFocus: false, instance: null, _cleanUpActiveItemContainers: function _cleanUpActiveItemContainers() {
                    WinJS.Utilities.query(".win-itemcontainer-active").forEach(function(item) {
                        WinJS.Utilities.removeClass(item, "win-itemcontainer-active")
                    })
                }, _isKeyboardNavigationEvent: function _isKeyboardNavigationEvent(evt) {
                    if (evt.keyCode === WinJS.Utilities.Key.tab)
                        return true;
                    else if (evt.keyCode === WinJS.Utilities.Key.leftArrow || evt.keyCode === WinJS.Utilities.Key.rightArrow || evt.keyCode === WinJS.Utilities.Key.downArrow || evt.keyCode === WinJS.Utilities.Key.upArrow || evt.keyCode === WinJS.Utilities.Key.home || evt.keyCode === WinJS.Utilities.Key.end || evt.keyCode === WinJS.Utilities.Key.pageUp || evt.keyCode === WinJS.Utilities.Key.pageDown || evt.keyCode === WinJS.Utilities.Key.escape || evt.keyCode === WinJS.Utilities.Key.backspace || evt.keyCode === WinJS.Utilities.Key.leftArrow || evt.keyCode === WinJS.Utilities.Key.lArrow || evt.keyCode === WinJS.Utilities.Key.lOtherArrow || evt.keyCode === WinJS.Utilities.Key.rightArrow || evt.keyCode === WinJS.Utilities.Key.rArrow || evt.keyCode === WinJS.Utilities.Key.rOtherArrow || evt.keyCode === WinJS.Utilities.Key.upArrow || evt.keyCode === WinJS.Utilities.Key.uArrow || evt.keyCode === WinJS.Utilities.Key.uOtherArrow || evt.keyCode === WinJS.Utilities.Key.downArrow || evt.keyCode === WinJS.Utilities.Key.dArrow || evt.keyCode === WinJS.Utilities.Key.dOtherArrow)
                        return !MS.Entertainment.Utilities.doesElementSupportKeyboardInput(document.activeElement);
                    return false
                }, init: function KeyboardInteractionListener_init() {
                    if (!MS.Entertainment.Framework.KeyboardInteractionListener.instance)
                        MS.Entertainment.Framework.KeyboardInteractionListener.instance = new MS.Entertainment.Framework.KeyboardInteractionListener
                }, wasLastInputMouse: {get: function KeyboardInteractionListener_get_wasLastInputMouse() {
                        var instance = MS.Entertainment.Framework.KeyboardInteractionListener.instance;
                        if (!instance)
                            return false;
                        return instance.lastInputType === MS.Entertainment.Framework.KeyboardInteractionListener.LastInputType.mouse
                    }}, wasLastInputTouch: {get: function KeyboardInteractionListener_get_wasLastInputTouch() {
                        var instance = MS.Entertainment.Framework.KeyboardInteractionListener.instance;
                        if (!instance)
                            return false;
                        return instance.lastInputType === MS.Entertainment.Framework.KeyboardInteractionListener.LastInputType.touch
                    }}
        }), AccUtils: MS.Entertainment.UI.Framework.define(null, null, {
                idCounter: 0, createAriaLinkId: function createAriaLinkId(linkedElement) {
                        if (!linkedElement.id) {
                            linkedElement.id = "accid" + MS.Entertainment.Framework.AccUtils.idCounter;
                            MS.Entertainment.Framework.AccUtils.idCounter++
                        }
                    }, addAriaLink: function addAriaAttribute(element, linkedElementId, attribute) {
                        element.setAttribute(attribute, linkedElementId)
                    }, createAndAddAriaLink: function createAndAddAriaLink(element, linkedElement, attribute) {
                        MS.Entertainment.Framework.AccUtils.createAriaLinkId(linkedElement);
                        MS.Entertainment.Framework.AccUtils.addAriaLink(element, linkedElement.id, attribute)
                    }, checkAndSetAriaAttribute: WinJS.Utilities.markSupportedForProcessing(function checkAndSetAriaAttribute(value, targetElement, targetProperty) {
                        targetProperty = "" + targetProperty;
                        switch (targetProperty) {
                            case"label":
                                MS.Entertainment.Utilities.setAccessibilityText(targetElement, value);
                                break;
                            case"role":
                                value ? targetElement.setAttribute("role", value) : targetElement.removeAttribute("role");
                                break;
                            case"level":
                                value ? targetElement.setAttribute("aria-level", value) : targetElement.removeAttribute("aria-level");
                                break;
                            case"setsize":
                                value || value === 0 ? targetElement.setAttribute("aria-setsize", value) : targetElement.removeAttribute("aria-setsize");
                                break;
                            case"posinset":
                                value || value === 0 ? targetElement.setAttribute("aria-posinset", value) : targetElement.removeAttribute("aria-posinset");
                                break;
                            case"expanded":
                                typeof value === "boolean" ? targetElement.setAttribute("aria-expanded", value) : targetElement.removeAttribute("aria-expanded");
                                break;
                            case"selected":
                                typeof value === "boolean" ? targetElement.setAttribute("aria-selected", value) : targetElement.removeAttribute("aria-selected");
                                break;
                            case"controls":
                                value ? targetElement.setAttribute("aria-controls", value) : targetElement.removeAttribute("aria-controls");
                                break;
                            case"owns":
                                Array.isArray(value) && value.length ? targetElement.setAttribute("aria-owns", value.join(" ")) : targetElement.removeAttribute("aria-owns");
                                break;
                            default:
                                MS.Entertainment.Utilities.assert(false, "Attempted to bind to invalid ARIA attribute: " + targetProperty);
                                break
                        }
                    }), setAriaAttribute: MS.Entertainment.Utilities.weakElementBindingInitializer(function setAriaAttribute(text, targetElement, targetProperty) {
                        if (Array.isArray(targetProperty))
                            targetProperty = targetProperty[0];
                        MS.Entertainment.Framework.AccUtils.checkAndSetAriaAttribute(text, targetElement, targetProperty)
                    }), setAriaAttributeFromStringId: MS.Entertainment.Utilities.weakElementBindingInitializer(function setAriaAttributeFromStringId(stringId, targetElement, targetProperty) {
                        if (Array.isArray(targetProperty))
                            targetProperty = targetProperty[0];
                        MS.Entertainment.Framework.AccUtils.checkAndSetAriaAttribute(stringId && String.load(stringId), targetElement, targetProperty)
                    }), setAriaAttributeFromStaticStringId: WinJS.Utilities.markSupportedForProcessing(function setAriaAttributeFromStaticStringId(sourceObject, staticStringId, targetElement, targetProperty) {
                        var data = String.id[staticStringId[0]];
                        MS.Entertainment.Formatters.assert(String.id[data], "Formatters_formatStringId must be passed a valid string id, received: " + data);
                        if (String.id[data])
                            MS.Entertainment.Framework.AccUtils.checkAndSetAriaAttribute(String.load(data), targetElement, targetProperty)
                    }), setAriaSliderBounds: function setAriaSliderPosition(element, min, max) {
                        if (!element)
                            return;
                        element = element.domElement ? element.domElement : element;
                        if (element) {
                            MS.Entertainment.Utilities.assert(typeof min === "number", "Expected parameter min to be numeric in setAriaSliderBounds.");
                            MS.Entertainment.Utilities.assert(typeof max === "number", "Expected parameter max to be numeric in setAriaSliderBounds.");
                            element.setAttribute("aria-valuemin", min);
                            element.setAttribute("aria-valuemax", max)
                        }
                    }, setAriaSliderPosition: function setAriaSliderPosition(element, value, valueText) {
                        if (!element)
                            return;
                        element = element.domElement ? element.domElement : element;
                        if (element) {
                            MS.Entertainment.Utilities.assert(typeof value === "number", "Expected parameter value to be numeric in setAriaSliderPosition.");
                            element.setAttribute("aria-valuenow", value);
                            if (valueText)
                                element.setAttribute("aria-valuetext", valueText)
                        }
                    }
            })
    })
})()
})();
/* >>>>>>/framework/pluralizationutilities.js:27473 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    (function(Entertainment) {
        (function(Utilities) {
            var PluralizationRule = (function() {
                    function PluralizationRule(captureExpression, resultString) {
                        this._matches = PluralizationRule._createMatchFunction(captureExpression);
                        this._resultString = resultString
                    }
                    PluralizationRule._stringStartsWith = function(str, expression) {
                        return str.length !== expression.length && str.lastIndexOf(expression, 0) === 0
                    };
                    PluralizationRule._countEndsWith = function(count, expression, expressionModuloFactor) {
                        return count !== expression && (count % expressionModuloFactor) === expression
                    };
                    PluralizationRule._createRangeRuleFunction = function(captureExpression, indexOfRange) {
                        var firstNumber = Number(captureExpression.substr(0, indexOfRange));
                        var lastNumber = Number(captureExpression.substr(indexOfRange + 1));
                        MS.Entertainment.Utilities.assert(firstNumber < lastNumber, "Malformed rule detected. First number in a range must be less than the last number.");
                        if (!isNaN(firstNumber) && !isNaN(lastNumber))
                            return function(count) {
                                    return count >= firstNumber && count <= lastNumber
                                };
                        MS.Entertainment.Utilities.fail("Malformed rule detected. One or both ends of a range rule were not valid numbers.", captureExpression);
                        return function(count) {
                                return false
                            }
                    };
                    PluralizationRule._createWildcardRuleFunction = function(captureExpression, indexOfWildcard) {
                        if (captureExpression === "*")
                            return function(count) {
                                    return true
                                };
                        else if (indexOfWildcard === 0) {
                            var captureExpressionEnding = Number(captureExpression.substr(1));
                            if (!isNaN(captureExpressionEnding)) {
                                var expressionModuloFactor = Math.pow(10, captureExpression.length - 1);
                                return function(count) {
                                        return PluralizationRule._countEndsWith(count, captureExpressionEnding, expressionModuloFactor)
                                    }
                            }
                            else
                                MS.Entertainment.Utilities.fail("Malformed rule detected. Wildcard rule must end with a number.")
                        }
                        else if (indexOfWildcard === captureExpression.length - 1) {
                            var captureExpressionBeginning = captureExpression.substr(0, captureExpression.length - 1);
                            return function(count) {
                                    var countText = String.empty + count;
                                    return PluralizationRule._stringStartsWith(countText, captureExpressionBeginning)
                                }
                        }
                        MS.Entertainment.Utilities.fail("Malformed rule detected. Wildcard was found in the middle of the expression.", captureExpression);
                        return function(count) {
                                return false
                            }
                    };
                    PluralizationRule._createMatchFunction = function(captureExpression) {
                        var indexOfRange = captureExpression.indexOf("-");
                        if (indexOfRange >= 0)
                            return PluralizationRule._createRangeRuleFunction(captureExpression, indexOfRange);
                        else {
                            var indexOfWildcard = captureExpression.indexOf("*");
                            if (indexOfWildcard >= 0)
                                return PluralizationRule._createWildcardRuleFunction(captureExpression, indexOfWildcard);
                            else {
                                var numericForm = Number(captureExpression);
                                if (!isNaN(numericForm))
                                    if (numericForm >= 0)
                                        return function(count) {
                                                return count === numericForm
                                            };
                                    else
                                        MS.Entertainment.Utilities.fail("Malformed rule detected. Negative numbers are not supported for pluralization.", captureExpression);
                                else
                                    MS.Entertainment.Utilities.fail("Malformed rule detected.", captureExpression)
                            }
                        }
                        return function(count) {
                                return false
                            }
                    };
                    Object.defineProperty(PluralizationRule.prototype, "matches", {
                        get: function() {
                            return this._matches
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PluralizationRule.prototype, "resultString", {
                        get: function() {
                            return this._resultString
                        }, enumerable: true, configurable: true
                    });
                    return PluralizationRule
                })();
            Utilities.PluralizationRule = PluralizationRule;
            var Pluralization = (function() {
                    function Pluralization(){}
                    Pluralization._resetState = function() {
                        this._initializedIdVisionCheck = false;
                        this._initializedPseudoLocCheck = false;
                        MS.Entertainment.Utilities.Pluralization._pluralizationRulesets = {}
                    };
                    Pluralization.getPluralizedString = function(stringId, count) {
                        MS.Entertainment.Utilities.Pluralization._pluralizationRulesets = MS.Entertainment.Utilities.Pluralization._pluralizationRulesets || {};
                        if (!MS.Entertainment.Utilities.Pluralization._pluralizationRulesets[stringId]) {
                            var newRuleset = MS.Entertainment.Utilities.Pluralization._createRuleset(stringId);
                            if (!newRuleset || !Array.isArray(newRuleset)) {
                                MS.Entertainment.Utilities.fail("Expected ruleset for this string ID to be a defined array.", stringId);
                                newRuleset = []
                            }
                            MS.Entertainment.Utilities.Pluralization._pluralizationRulesets[stringId] = newRuleset
                        }
                        var resultString = String.empty;
                        var ruleset = MS.Entertainment.Utilities.Pluralization._pluralizationRulesets[stringId];
                        var matchFound = ruleset.some(function(rule) {
                                if (rule.matches(count)) {
                                    resultString = rule.resultString;
                                    return true
                                }
                                return false
                            });
                        if (!matchFound)
                            MS.Entertainment.Utilities.fail("Failed to find a pluralization rule that matches {0} in ruleset {1}.".format(count, stringId));
                        return resultString
                    };
                    Object.defineProperty(Pluralization, "_useIdVision", {
                        get: function() {
                            if (!Pluralization._initializedIdVisionCheck) {
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                Pluralization.__useIdVision = configurationManager.shell.idVision;
                                Pluralization._initializedIdVisionCheck = true
                            }
                            return Pluralization.__useIdVision
                        }, enumerable: true, configurable: true
                    });
                    Pluralization._createRuleset = function(stringId) {
                        var ruleset = [];
                        var rulesString = String.load(stringId, true);
                        if (rulesString) {
                            var firstPseudoLocSectionLength = 0;
                            var lastPseudoLocSectionLength = 0;
                            var hasPseudoLocSections = false;
                            if (!Pluralization._initializedPseudoLocCheck || Pluralization._isPseudoLoc) {
                                var firstPseudoLocSectionLength = rulesString.indexOf("[[");
                                var lastPseudoLocSectionLength = rulesString.length - rulesString.lastIndexOf("]") - 1;
                                hasPseudoLocSections = (firstPseudoLocSectionLength > 0 || lastPseudoLocSectionLength > 0);
                                if (!Pluralization._initializedPseudoLocCheck)
                                    Pluralization._isPseudoLoc = hasPseudoLocSections;
                                Pluralization._initializedPseudoLocCheck = true
                            }
                            var actualRulesLength = rulesString.length - (firstPseudoLocSectionLength + lastPseudoLocSectionLength);
                            var idVisionId = null;
                            if (Pluralization._useIdVision)
                                idVisionId = "[" + String.idVisionIds[stringId] + "] ";
                            var regexp = /(?:\[\[([0-9\-\*]+)\]([^\]]*?)\])+?/g;
                            var numGroups = 3;
                            var parts;
                            while (parts = regexp.exec(rulesString)) {
                                MS.Entertainment.Utilities.assert(parts.length === numGroups, "Expected one result string for each capture expression.");
                                var captureExpression = parts[1];
                                var resultString = parts[2];
                                if (hasPseudoLocSections) {
                                    var resultPseudoLocRatio = actualRulesLength > 0 ? resultString.length / actualRulesLength : 0;
                                    var beginningPseudoLoc = firstPseudoLocSectionLength > 0 ? rulesString.substr(0, Math.ceil(firstPseudoLocSectionLength * resultPseudoLocRatio)) : String.empty;
                                    var endingPseudoLoc = lastPseudoLocSectionLength > 0 ? rulesString.substr(rulesString.length - Math.ceil(lastPseudoLocSectionLength * resultPseudoLocRatio)) : String.empty;
                                    resultString = beginningPseudoLoc + resultString + endingPseudoLoc
                                }
                                if (idVisionId)
                                    resultString = idVisionId + resultString;
                                ruleset.push(new PluralizationRule(captureExpression, resultString))
                            }
                            MS.Entertainment.Utilities.assert(ruleset.length > 0, "Parsing failure for string " + stringId)
                        }
                        return ruleset
                    };
                    Pluralization._pluralizationRulesets = {};
                    return Pluralization
                })();
            Utilities.Pluralization = Pluralization
        })(Entertainment.Utilities || (Entertainment.Utilities = {}));
        var Utilities = Entertainment.Utilities
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/formatters.js:27660 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Formatters");
    WinJS.Namespace.define("MS.Entertainment.Formatters", {DateTimeFormatters: MS.Entertainment.UI.Framework.define(function dateTimeFormatters(){}, {
            _year: null, _monthYear: null, _abbreviatedMonthYear: null, _abbreviatedMonth: null, _dayMonthYear: null, _shortDate: null, _decimalNumber: null, _groupedDecimalNumber: null, _percentNumber: null, year: {get: function() {
                        if (!this._year)
                            try {
                                this._year = new Windows.Globalization.DateTimeFormatting.DateTimeFormatter("year")
                            }
                            catch(e) {
                                var error = e && e.message;
                                MS.Entertainment.Formatters.fail("Could not instantiate new DateTimeFormatter(\"year\") object.  Error: " + error);
                                this._year = this._defaultFormatter
                            }
                        return this._year
                    }}, abbreviatedMonthYear: {get: function() {
                        if (!this._abbreviatedMonthYear)
                            try {
                                this._abbreviatedMonthYear = new Windows.Globalization.DateTimeFormatting.DateTimeFormatter("month.abbreviated year")
                            }
                            catch(e) {
                                var error = e && e.message;
                                MS.Entertainment.Formatters.fail("Could not instantiate new DateTimeFormatter(\"month.abbreviated year\") object.  Error: " + error);
                                this._abbreviatedMonthYear = this._defaultFormatter
                            }
                        return this._abbreviatedMonthYear
                    }}, abbreviatedMonth: {get: function() {
                        if (!this._abbreviatedMonth)
                            try {
                                this._abbreviatedMonth = new Windows.Globalization.DateTimeFormatting.DateTimeFormatter("month.abbreviated")
                            }
                            catch(e) {
                                var error = e && e.message;
                                MS.Entertainment.Formatters.fail("Could not instantiate new DateTimeFormatter(\"month.abbreviated\") object.  Error: " + error);
                                this._abbreviatedMonth = this._defaultFormatter
                            }
                        return this._abbreviatedMonth
                    }}, monthYear: {get: function() {
                        if (!this._monthYear)
                            try {
                                this._monthYear = new Windows.Globalization.DateTimeFormatting.DateTimeFormatter("month year")
                            }
                            catch(e) {
                                var error = e && e.message;
                                MS.Entertainment.Formatters.fail("Could not instantiate new DateTimeFormatter(\"month year\") object.  Error: " + error);
                                this._abbreviatedMonth = this._defaultFormatter
                            }
                        return this._monthYear
                    }}, shortDate: {get: function() {
                        if (!this._shortDate)
                            try {
                                this._shortDate = new Windows.Globalization.DateTimeFormatting.DateTimeFormatter("shortdate")
                            }
                            catch(e) {
                                var error = e && e.message;
                                MS.Entertainment.Formatters.fail("Could not instantiate new DateTimeFormatter(\"shortdate\") object.  Error: " + error);
                                this._shortDate = this._defaultFormatter
                            }
                        return this._shortDate
                    }}, dayMonthYear: {get: function() {
                        if (!this._dayMonthYear)
                            try {
                                this._dayMonthYear = new Windows.Globalization.DateTimeFormatting.DateTimeFormatter("day month year")
                            }
                            catch(e) {
                                var error = e && e.message;
                                MS.Entertainment.Formatters.fail("Could not instantiate new DateTimeFormatter(\"day month year\") object.  Error: " + error);
                                this._dayMonthYear = this._defaultFormatter
                            }
                        return this._dayMonthYear
                    }}, decimalNumber: {get: function() {
                        if (!this._decimalNumber) {
                            this._decimalNumber = new Windows.Globalization.NumberFormatting.DecimalFormatter;
                            this._decimalNumber.fractionDigits = 0;
                            this._decimalNumber.isGrouped = false;
                            this._decimalNumber.integerDigits = MS.Entertainment.Formatters.DateTimeFormatters.defaultDecimalDigits
                        }
                        return this._decimalNumber
                    }}, groupedDecimalNumber: {get: function() {
                        if (!this._groupedDecimalNumber) {
                            this._groupedDecimalNumber = new Windows.Globalization.NumberFormatting.DecimalFormatter;
                            this._groupedDecimalNumber.fractionDigits = 0;
                            this._groupedDecimalNumber.isGrouped = true;
                            this._groupedDecimalNumber.integerDigits = MS.Entertainment.Formatters.DateTimeFormatters.defaultDecimalDigits
                        }
                        return this._groupedDecimalNumber
                    }}, percentNumber: {get: function() {
                        if (!this._percentNumber) {
                            this._percentNumber = new Windows.Globalization.NumberFormatting.PercentFormatter;
                            this._percentNumber.fractionDigits = 0;
                            this._percentNumber.integerDigits = 0;
                            this._percentNumber.isDecimalPointAlwaysDisplayed = false;
                            this._percentNumber.isGrouped = true
                        }
                        return this._percentNumber
                    }}, _defaultFormatter: {get: function() {
                        return {format: function format() {
                                    return String.empty
                                }}
                    }}
        }, {
            create: function create() {
                return new MS.Entertainment.Formatters.DateTimeFormatters
            }, defaultDecimalDigits: 1
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.dateTimeFormatters, MS.Entertainment.Formatters.DateTimeFormatters.create);
    WinJS.Namespace.define("MS.Entertainment.Formatters", {
        MediaSortFormatter: MS.Entertainment.defineOptionalObservable(function mediaSortFormatter() {
            this.bind("totalCount", this._updateResult.bind(this))
        }, {
            _countStringId: null, _unknownStringId: null, _countOnly: null, _filter: null, initialize: function initialize(countStringId, unknownStringId, countOnly, filter) {
                    this._countStringId = countStringId;
                    this._unknownStringId = unknownStringId;
                    this._countOnly = countOnly;
                    this._filter = filter;
                    this._updateResult()
                }, _updateResult: function _updateResult() {
                    var countFormatter;
                    if (this.count >= 0) {
                        var mediaStringWithCount = MS.Entertainment.Utilities.Pluralization.getPluralizedString(this._countStringId, this.totalCount);
                        countFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                        countFormatter.isGrouped = true;
                        this.result = String.load(this._filter ? String.id.IDS_N_FILTER_IN : String.id.IDS_N_SORTED_BY).format(countFormatter.format(this.totalCount), String.load(mediaStringWithCount));
                        countFormatter.isGrouped = false
                    }
                    else if (this._unknownStringId)
                        this.result = String.load(this._filter ? String.id.IDS_FILTER_IN : String.id.IDS_SORTED_BY).format(String.load(this._unknownStringId));
                    else if (this._countOnly) {
                        countFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                        this.result = countFormatter.format(this.totalCount)
                    }
                    else
                        this.result = null
                }
        }, {
            totalCount: 0, result: null
        }), formatDestinationHelper: WinJS.Utilities.markSupportedForProcessing(function formatHelper(destination, destinationProperty, value) {
                if (destinationProperty.length > 1) {
                    var prop = destination[destinationProperty[0]];
                    for (var x = 1; x < destinationProperty.length - 1; x++)
                        prop = prop[destinationProperty[x]];
                    prop[destinationProperty[x]] = value
                }
                else
                    destination[destinationProperty] = value
            }), formatSourceHelper: WinJS.Utilities.markSupportedForProcessing(function formatSourceHelper(source, sourceProperty) {
                var sourceData;
                if (Array.isArray(sourceProperty)) {
                    sourceData = source[sourceProperty[0]];
                    for (var i = 1; i < sourceProperty.length; i++)
                        sourceData = sourceData[sourceProperty[i]]
                }
                else
                    sourceData = source[sourceProperty];
                return sourceData
            }), formatStringOrStringId: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function(value) {
                var sourceDataType = typeof value;
                var result = String.empty;
                if (sourceDataType === "string")
                    result = (String.id[value]) ? String.load(value) : value;
                else if (value)
                    MS.Entertainment.Formatters.fail("Unrecognized string type in formatter: " + sourceDataType);
                return result
            })), _formatStringStripHTML: function _formatStringStripHTML(value) {
                var sourceDataType = typeof value;
                var result = String.empty;
                if (sourceDataType === "string") {
                    if (value)
                        result = toStaticHTML(value.replace(/<(?:.|\n)*?>/gm, ""))
                }
                else if (value)
                    MS.Entertainment.Formatters.fail("Unrecognized string type in formatter: " + sourceDataType);
                return result
            }, _formatStringStripHTMLAndDecode: function _formatStringStripHTMLAndDecode(value) {
                var sourceDataType = typeof value;
                var result = String.empty;
                if (sourceDataType === "string") {
                    if (value)
                        result = MS.Entertainment.Utilities.unEscapeHTML(value)
                }
                else if (value)
                    MS.Entertainment.Formatters.fail("Unrecognized string type in formatter: " + sourceDataType);
                return result
            }, formatStringStripHTML: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function(value) {
                return MS.Entertainment.Formatters._formatStringStripHTML(value)
            })), formatStringStripHTMLAndDecode: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function(value) {
                return MS.Entertainment.Formatters._formatStringStripHTMLAndDecode(value)
            })), formatStringId: WinJS.Utilities.markSupportedForProcessing(function formatStringOrStringId(source, sourceProperty, destination, destinationProperty) {
                MS.Entertainment.Formatters.assert(sourceProperty[0] === "String", "Formatters_formatStringId must be passed a valid string id");
                var len = sourceProperty.length;
                var data = String;
                for (var i = 1; i < len && data; i++)
                    data = data[sourceProperty[i]];
                MS.Entertainment.Formatters.assert(String.id[data], "Formatters_formatStringId must be passed a valid string id");
                var result = (String.id[data] && String.load(data)) || String.empty;
                MS.Entertainment.Formatters.formatDestinationHelper(destination, destinationProperty, result)
            }), formatStringIdNoAssert: WinJS.Utilities.markSupportedForProcessing(function formatStringIdNoAssert(source, sourceProperty, destination, destinationProperty) {
                MS.Entertainment.Formatters.assert(sourceProperty[0] === "String", "Formatters_formatStringId must be passed a valid string id");
                var len = sourceProperty.length;
                var data = String;
                for (var i = 1; i < len && data; i++)
                    data = data[sourceProperty[i]];
                var result = (String.id[data] && String.load(data)) || String.empty;
                MS.Entertainment.Formatters.formatDestinationHelper(destination, destinationProperty, result)
            }), formatYearFromDateNonConverter: function formatYearFromDateNonConverter(sourceData) {
                var date = null;
                var year = null;
                if (sourceData) {
                    date = new Date(sourceData);
                    if (date) {
                        var formattedYear = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).year;
                        year = formattedYear.format(date)
                    }
                }
                return year || String.empty
            }, formatYearFromDate: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatReleaseYear(sourceData) {
                return MS.Entertainment.Formatters.formatYearFromDateNonConverter(sourceData)
            })), formatDatabaseDataFromReleaseDate: function formatDatabaseDataFromReleaseDate(sourceData) {
                var date = null;
                if (sourceData && sourceData.toISOString)
                    date = sourceData.toISOString().replace("T", " ").substring(0, 19);
                else
                    MS.Entertainment.Formatters.fail("Expected date to be provided as source data.  Cannot format releaseDate");
                return date || String.empty
            }, formatShortDate: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatYearMonthDate(sourceValue) {
                return MS.Entertainment.Formatters.formatShortDateNonConverter(sourceValue)
            })), formatShortDateNonConverter: function formatShortDateNonConverter(sourceValue) {
                if (sourceValue) {
                    var dateFormat = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).shortDate;
                    sourceValue = dateFormat.format(sourceValue)
                }
                return sourceValue || String.empty
            }, formatLongDate: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatYearMonthDate(sourceValue) {
                if (sourceValue) {
                    var dateFormat = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).dayMonthYear;
                    sourceValue = dateFormat.format(sourceValue)
                }
                return sourceValue || String.empty
            })), formatDurationFromDate: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatDurationFromDate(sourceData) {
                return MS.Entertainment.Formatters.formatDurationFromDateNonConverter(sourceData)
            })), formatDurationFromDateNonConverter: function formatDurationFromDateNonConverter(sourceData) {
                var date = sourceData;
                if (typeof sourceData !== "number")
                    date = new Date(sourceData);
                var duration = MS.Entertainment.Utilities.formatTimeString(date);
                return duration
            }, formatDurationFromDateNoSeconds: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatDurationFromDateNoSeconds(sourceData) {
                return MS.Entertainment.Formatters.formatDurationFromDateNoSecondsNonConverter(sourceData)
            })), formatDurationFromDateNoSecondsNonConverter: function formatDurationFromDateNoSecondsNonConverter(sourceData) {
                var duration = MS.Entertainment.Utilities.formatTimeString(sourceData, {excludeSeconds: true});
                return duration
            }, formatDurationGreaterThanZeroFromDate: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatDurationGreaterThanZeroFromDate(sourceData) {
                return MS.Entertainment.Formatters.formatDurationGreaterThanZeroFromDateNonConverter(sourceData)
            })), formatDurationGreaterThanZeroFromDateNonConverter: function formatDurationGreaterThanZeroFromDateNonConverter(sourceData) {
                var date = null;
                var forceEmptyString = false;
                if (typeof sourceData === "number")
                    if (sourceData > 0)
                        date = MS.Entertainment.Utilities._millisecondsToDate(sourceData);
                    else
                        forceEmptyString = true;
                else
                    date = new Date(sourceData);
                var duration = sourceData && !forceEmptyString ? MS.Entertainment.Utilities.formatTimeString(date) : String.empty;
                return duration
            }, milliSecondsFromTimeSpan: function milliSecondsFromTimeSpan(days, hours, minutes, seconds, milliseconds) {
                return ((((days ? days : 0) * 24 + (hours ? hours : 0)) * 60 + (minutes ? minutes : 0)) * 60 + (seconds ? seconds : 0)) * 1000 + (milliseconds ? milliseconds : 0)
            }, formatCount: function formatCount(count, countTextFunction) {
                if (count === undefined || count === -1)
                    return String.empty;
                return countTextFunction(count)
            }, countText: function countText(count, countFormatStringId) {
                var numberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                return MS.Entertainment.Formatters.countTextWithCustomFormatter(numberFormatter, count, countFormatStringId)
            }, countTextWithoutOrderFormat: function countTextWithoutOrderFormat(count, countFormatStringId) {
                var formatString = String.load(String.id.IDS_MUSIC_RELATED_PANEL_FORMAT);
                var formattedCount = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber.format(count);
                var countLabel = MS.Entertainment.Utilities.Pluralization.getPluralizedString(countFormatStringId, count);
                return formatString.format(formattedCount, countLabel)
            }, countTextWithCustomFormatter: function countTextWithCustomFormatter(numberFormatter, count, countFormatStringId) {
                var formattedCount = numberFormatter.format(count);
                return MS.Entertainment.Utilities.Pluralization.getPluralizedString(countFormatStringId, count).format(formattedCount)
            }, formatGenresList: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatGenresList(genres) {
                return MS.Entertainment.Formatters.formatGenresListNonConverter(genres)
            })), formatGenresListNonConverter: function formatGenresListNonConverter(genres) {
                if (!genres)
                    return String.empty;
                var genreNames = [];
                if (Array.isArray(genres)) {
                    genres.forEach(function forEachGenresList(genre) {
                        if (genre)
                            genreNames.push(genre.name)
                    });
                    return genreNames.join(String.load(String.id.IDS_DETAILS_INFO_SEPERATOR))
                }
                else if (typeof genres !== "string" && genres.forEach) {
                    MS.Entertainment.Formatters.fail("Supplied with virtual list. Don't know how to handle this. Don't think it's used any more");
                    return String.empty
                }
                else if (typeof genres === "string")
                    return genres
            }, formatStringOrUnknown: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatStringOrUnknown(result) {
                if (!result || result === "null")
                    result = String.load(String.id.IDS_UNKNOWN_VALUE);
                return result
            })), formatStringOrEmpty: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatStringOrEmpty(result) {
                if (!result || result === "null")
                    result = String.empty;
                return result
            })), formatStringOrEmptyOneTime: WinJS.Utilities.markSupportedForProcessing(function formatStringOrEmptyOneTime(source, sourceProperties, dest, destProperties) {
                var result = MS.Entertainment.Utilities.valueFromPropertyPathFragments(source, sourceProperties);
                if (!result || result === "null")
                    result = String.empty;
                MS.Entertainment.Utilities.setFromPropertyPathFragments(dest, destProperties, result)
            }), formatDecimalNumber: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatDecimalNumber(num) {
                if (num === undefined || num === null || typeof(num) !== "number")
                    return String.empty;
                var formattedNum;
                formattedNum = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber.format(num);
                return formattedNum
            })), formatDecimalNumberIncrement: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatDecimalNumberIncrement(num) {
                if (num === undefined || num === null || typeof(num) !== "number")
                    return String.empty;
                var formattedNum;
                formattedNum = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber.format(num + 1);
                return formattedNum
            })), formatDecimalNumberIncrementOneTime: WinJS.Utilities.markSupportedForProcessing(function formatDecimalNumberIncrementOneTime(source, sourceProperties, dest, destProperties) {
                var formattedNum = String.empty;
                var number = MS.Entertainment.Utilities.valueFromPropertyPathFragments(source, sourceProperties);
                if (typeof number === "number" && !isNaN(number))
                    formattedNum = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber.format(number + 1);
                MS.Entertainment.Utilities.setFromPropertyPathFragments(dest, destProperties, formattedNum)
            }), formatIcon: WinJS.Utilities.markSupportedForProcessing(function formatIcon(source, sourceProperty, destination, destinationProperty) {
                var icon = MS.Entertainment.Utilities.valueFromPropertyPathFragments(WinJS.Utilities.getMember(sourceProperty[0]), sourceProperty.slice(1));
                MS.Entertainment.Formatters.formatDestinationHelper(destination, destinationProperty, icon)
            }), setPropertyFromStatic: WinJS.Utilities.markSupportedForProcessing(function setPropertyFromStatic(source, sourceProperty, destination, destinationProperty) {
                var valueFromProperty = MS.Entertainment.Utilities.valueFromPropertyPathFragments(WinJS.Utilities.getMember(sourceProperty[0]), sourceProperty.slice(1));
                MS.Entertainment.Formatters.formatDestinationHelper(destination, destinationProperty, valueFromProperty)
            }), formatGenre: function formatGenre(sourceValue) {
                var result = String.empty;
                if (sourceValue.genre)
                    if (Array.isArray(sourceValue.genre)) {
                        var genreNames = [];
                        sourceValue.genre.forEach(function(genre) {
                            if (genre)
                                genreNames.push(genre.name)
                        });
                        result = genreNames.join(String.load(String.id.IDS_DETAILS_INFO_SEPERATOR))
                    }
                    else if (sourceValue.genre.name)
                        result = sourceValue.genre.name;
                    else
                        result = sourceValue.genre;
                else if (sourceValue.genreName)
                    result = sourceValue.genreName;
                return result
            }, getUsbDeviceNameForDashboard: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function getUsbDeviceNameForDashboard(sourceData) {
                var text = String.load(String.id.IDS_MEDIABROWSER_LANDING_PAGE_USB_TITLE).format(sourceData);
                return text
            })), canShowExpiredFlag: function canShowExpiredFlag() {
                var isUsingXdlcForIngestion = MS.Entertainment.Utilities.isVideoApp;
                if (!isUsingXdlcForIngestion)
                    return true;
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.purchaseHistory)) {
                    var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                    return !!(purchaseHistoryService && purchaseHistoryService.hasGrovelEverCompleted)
                }
                return false
            }, formatRentalExpirationFromSpanInt: function formatRentalExpirationFromSpanInt(milliSeconds, useLongRentalExpiredString) {
                var message;
                var seconds = Math.floor(milliSeconds / 1000);
                var minutes = Math.floor(seconds / 60);
                var minutesNormalized = minutes % 60;
                var hours = Math.floor(minutes / 60);
                var hoursNormalized = hours % 24;
                var days = Math.floor(hours / 24);
                if (milliSeconds < 0)
                    if (MS.Entertainment.Formatters.canShowExpiredFlag())
                        message = (useLongRentalExpiredString ? String.load(String.id.IDS_VIDEO_RENTAL_EXPIRED) : String.load(String.id.IDS_VIDEO_RENTAL_EXPIRED_ONLY));
                    else
                        message = String.empty;
                else if (milliSeconds >= MS.Entertainment.Formatters.milliSecondsFromTimeSpan(2))
                    message = String.load(String.id.IDS_VIDEO_RENTAL_EXPIRES_DAYS).format(days);
                else if (hours > 1)
                    message = String.load(String.id.IDS_VIDEO_RENTAL_EXPIRES_HRS).format(hours);
                else if (hoursNormalized === 1)
                    if (minutesNormalized === 0)
                        message = String.load(String.id.IDS_VIDEO_RENTAL_EXPIRES_HR);
                    else if (minutesNormalized === 1)
                        message = String.load(String.id.IDS_VIDEO_RENTAL_EXPIRES_HR_MIN);
                    else
                        message = String.load(String.id.IDS_VIDEO_RENTAL_EXPIRES_HR_MINS).format(minutesNormalized);
                else if (hoursNormalized === 0)
                    if (minutesNormalized === 0)
                        message = String.load(String.id.IDS_VIDEO_RENTAL_EXPIRES_LESS_THAN_MIN);
                    else if (minutesNormalized === 1)
                        message = String.load(String.id.IDS_VIDEO_RENTAL_EXPIRES_MIN);
                    else
                        message = String.load(String.id.IDS_VIDEO_RENTAL_EXPIRES_MINS).format(minutesNormalized);
                return message
            }, formatRentalExpirationFromSpan: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatRentalExpirationFromSpan(sourceData) {
                return MS.Entertainment.Formatters.formatRentalExpirationFromSpanInt(sourceData)
            })), formatSeason: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatSeason(value) {
                return MS.Entertainment.Formatters.formatCount(value, MS.Entertainment.Formatters.seasonCountText)
            })), seasonCountText: function seasonCountText(count) {
                return MS.Entertainment.Formatters.countText(count, String.id.IDS_TV_SEASONS_LABEL_PLURAL)
            }, formatNumberOfRatings: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatNumberOfRatings(number) {
                if (!number)
                    return String.empty;
                var groupedNumberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).groupedDecimalNumber;
                return MS.Entertainment.Formatters.countTextWithCustomFormatter(groupedNumberFormatter, number, String.id.IDS_DETAILS_RATINGS_PLURAL)
            })), formatNumberOfReviews: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatNumberOfReviews(number) {
                if (!number)
                    return String.empty;
                var groupedNumberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).groupedDecimalNumber;
                return MS.Entertainment.Formatters.countTextWithCustomFormatter(groupedNumberFormatter, number, String.id.IDS_VIDEO_REVIEW_COUNT_ONLY_PLURAL)
            })), formatPercentage: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatPercentage(number) {
                number = Number(number);
                if (!number)
                    return String.empty;
                number = number / 100;
                var percentNumber = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).percentNumber.format(number);
                percentNumber = percentNumber.replace(" ", "");
                return percentNumber
            })), formatTVEpisode: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatTVEpisode(episodeCount) {
                var formattedCount;
                if (episodeCount === undefined || episodeCount < 0)
                    return String.empty;
                formattedCount = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber.format(episodeCount);
                var result = String.empty;
                if (episodeCount === 0)
                    result = String.load(String.id.IDS_TV_NOEPISODES_LABEL).format(formattedCount);
                if (episodeCount === 1)
                    result = String.load(String.id.IDS_TV_EPISODE_LABEL).format(formattedCount);
                else
                    result = String.load(String.id.IDS_TV_EPISODES_LABEL).format(formattedCount);
                return result
            })), formatSeasonOwnedEpisodes: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatSeasonOwnedEpisodes(sourceValue) {
                var result = String.empty;
                if (sourceValue)
                    result = String.load(String.id.IDS_VIDEO2_TV_SEASON_EPISODES_OWNED).format(sourceValue);
                return result
            })), formatAddPeriod: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatAddPeriod(sourceValue) {
                var result = String.empty;
                if (sourceValue)
                    result = String.load(String.id.IDS_DETAILS_TRACK_NUM_FORMAT).format(sourceValue);
                return result
            })), formatTVSeasonNumberInt: function formatTVSeasonNumberInt(seasonNumber, isLowerCase) {
                var formattedNumber;
                if (seasonNumber === undefined)
                    return String.empty;
                var seasonExtraStringId = isLowerCase ? String.id.IDS_TV_SEASON_0_NAME_LC : String.id.IDS_TV_SEASON_0_NAME;
                var seasonNameStringId = isLowerCase ? String.id.IDS_TV_SEASON_NAME_LC : String.id.IDS_TV_SEASON_NAME;
                formattedNumber = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber.format(seasonNumber);
                var result = (seasonNumber <= 0) ? String.load(seasonExtraStringId) : String.load(seasonNameStringId).format(formattedNumber);
                return result
            }, formatTVSeasonNumber: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatTVSeasonNumber(sourceValue) {
                return MS.Entertainment.Formatters.formatTVSeasonNumberInt(sourceValue)
            })), formatTVSeasonEpisodeNumberInt: function formatTVSeasonEpisodeNumberInt(sourceValue) {
                var result = String.empty;
                var formattedEpisodeNumber;
                var formattedSeasonNumber;
                var numberFormatter;
                if (sourceValue === undefined || sourceValue === null)
                    return String.emtpy;
                if ((sourceValue.seriesTitle && sourceValue.seasonNumber !== undefined && sourceValue.episodeNumber !== undefined) || (sourceValue.contentType === "TVEpisode")) {
                    numberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                    var seasonNumber = sourceValue.seasonNumber;
                    if (sourceValue.season && sourceValue.season.number)
                        seasonNumber = sourceValue.season.number;
                    formattedSeasonNumber = numberFormatter.format(seasonNumber);
                    var seasonNumber = (seasonNumber <= 0) ? String.load(String.id.IDS_TV_SEASON_0_NAME) : String.load(String.id.IDS_TV_SEASON_NAME).format(formattedSeasonNumber);
                    var episodeNumber;
                    if (sourceValue.episodeNumber > 0) {
                        formattedEpisodeNumber = numberFormatter.format(sourceValue.episodeNumber);
                        episodeNumber = String.load(String.id.IDS_TV_NUMBERED_EPISODE_NAME).format(formattedEpisodeNumber)
                    }
                    else
                        episodeNumber = String.load(String.id.IDS_TV_NUMBERED_EPISODE_0_NAME);
                    if (seasonNumber !== 0 || episodeNumber !== 0)
                        result = String.load(String.id.IDS_COMMA_SEPARATOR).format(seasonNumber, episodeNumber);
                    else
                        result = episodeNumber
                }
                return result
            }, formatTVSeasonEpisodeNumber: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatTVSeasonEpisodeNumber(sourceValue) {
                return MS.Entertainment.Formatters.formatTVSeasonEpisodeNumberInt(sourceValue)
            })), formatEpisodeSeriesTitleSeasonEpisodeNumberFileSize: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatVideoDownloadMovieDescription(sourceValue) {
                var result = String.empty;
                if (sourceValue === undefined || sourceValue === null)
                    return String.emtpy;
                if (sourceValue.seriesTitle)
                    result = sourceValue.seriesTitle;
                var seasonEpisodeNumber = MS.Entertainment.Formatters.formatTVSeasonEpisodeNumberInt(sourceValue);
                if (seasonEpisodeNumber)
                    if (result.length > 0)
                        result = String.load(String.id.IDS_COMMA_SEPARATOR).format(result, seasonEpisodeNumber);
                    else
                        result = seasonEpisodeNumber;
                return result
            })), formatMovieGenreReleaseYear: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatMovieGenreReleaseYear(sourceValue) {
                var result = String.empty;
                if (sourceValue === undefined || sourceValue === null)
                    return String.emtpy;
                if (sourceValue.genreName)
                    result = sourceValue.genreName;
                if (sourceValue.releaseDate) {
                    var dateFormat = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).year;
                    var year = dateFormat.format(sourceValue.releaseDate);
                    if (result.length > 0)
                        result = String.load(String.id.IDS_COMMA_SEPARATOR).format(result, year);
                    else
                        result = year
                }
                return result
            })), formatContentRatingsList: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatContentRatingsList(contentIncludes) {
                if (!contentIncludes)
                    return Stirng.empty;
                if (typeof contentIncludes !== "string") {
                    var contentFeatures = [];
                    contentIncludes.forEach(function forEachContentIncludes(contentIncludes) {
                        contentFeatures.push(contentIncludes.label)
                    });
                    return contentFeatures.join(String.load(String.id.IDS_DETAILS_INFO_SEPERATOR))
                }
                else
                    return contentIncludes
            })), formatEpisodeMetadata: function formatEpisodeMetadata(episode, options) {
                var values = [];
                var options = options || {};
                if (options.releaseDate) {
                    var releaseDate = null;
                    if (episode.releaseDate) {
                        var formatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).year;
                        if (MS.Entertainment.Platform.PlaybackHelpers.isTVEpisode(episode))
                            formatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).shortDate;
                        var date = new Date(episode.releaseDate);
                        releaseDate = formatter.format(date)
                    }
                    if (releaseDate)
                        values.push(releaseDate)
                }
                if (options.genres) {
                    var genres = null;
                    if (episode.genre)
                        if (Array.isArray(episode.genre)) {
                            var genreNames = [];
                            episode.genre.forEach(function(genre) {
                                if (genre)
                                    genreNames.push(genre.name)
                            });
                            genres = genreNames.join(String.load(String.id.IDS_DETAILS_INFO_SEPERATOR))
                        }
                        else
                            genres = episode.genre;
                    else if (episode.genreName)
                        genres = episode.genreName;
                    if (genres)
                        values.push(genres)
                }
                if (options.network)
                    if (episode.network)
                        values.push(episode.network);
                    else if (episode.networks && episode.networks.length > 0 && episode.networks[0].name)
                        values.push(episode.networks[0].name);
                if (options.languages) {
                    var languages = MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.getLanguagesForRights(episode, MS.Entertainment.Utilities.defaultClientTypeFromApp);
                    if (languages && languages.length === 1)
                        values.push(String.load(String.id.IDS_DETAILS_AUDIO_LANGUAGE).format(MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(languages[0])))
                }
                if (options.rating)
                    if (episode.localizedRatingStringLong)
                        values.push(episode.localizedRatingStringLong);
                if (options.videoDefinition)
                    if (episode.libraryDefinitions)
                        values.push(episode.libraryDefinitions);
                    else if (episode.videoDefinitions && episode.videoDefinitions !== String.load(String.id.IDS_UNKNOWN_VALUE))
                        values.push(episode.videoDefinitions);
                if (options.duration) {
                    var duration = null;
                    if (episode.duration && episode.duration !== -1)
                        duration = MS.Entertainment.Utilities.formatTimeString(episode.duration);
                    if (duration)
                        values.push(duration)
                }
                var seperator = String.load(String.id.IDS_DETAILS_INFO_SEPERATOR);
                if (MS.Entertainment.Utilities.isVideoApp2)
                    seperator = String.load(String.id.IDS_DETAILS_METADATA_SEPERATOR);
                return values.join(seperator)
            }, formatPresaleFulfillmentDate: function formatPresaleFulfillmentDate(fulfillmentDate) {
                if (!fulfillmentDate)
                    return;
                var fulfillmentOffset = new Date(fulfillmentDate.getTime());
                fulfillmentOffset.setHours(fulfillmentDate.getHours() + 12);
                var formatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).shortDate;
                var fulfillmentDayMonthYear = formatter.format(fulfillmentOffset);
                return fulfillmentDayMonthYear
            }, formatMoviePresaleMetadata: function formatMoviePresaleMetadata(mediaItem, stateInfo) {
                if (!mediaItem || !stateInfo)
                    return;
                var moviePresaleMetadata = null;
                if (mediaItem.isPresale || stateInfo.marketplace.isPresale) {
                    var formattedFulfillmentDate = null;
                    var presaleFulfillmentDate = mediaItem.presaleFulfillmentDate || stateInfo.marketplace.presaleFulfillmentDate;
                    if (presaleFulfillmentDate) {
                        var fulfillmentDate = presaleFulfillmentDate;
                        if (Date.isValidExpirationDate(fulfillmentDate)) {
                            var now = new Date;
                            if (now < fulfillmentDate)
                                formattedFulfillmentDate = MS.Entertainment.Formatters.formatPresaleFulfillmentDate(fulfillmentDate)
                        }
                    }
                    moviePresaleMetadata = {};
                    if (stateInfo.marketplace.hasPurchased) {
                        moviePresaleMetadata.title = String.load(String.id.IDS_VIDEO_DETAILS_COMMERCE_HEADER_PREPURCHASED_SC);
                        if (formattedFulfillmentDate)
                            moviePresaleMetadata.text = String.load(String.id.IDS_VIDEO_PREPURCHASE_POST_UPSELL_DATE_KNOWN).format(formattedFulfillmentDate);
                        else
                            moviePresaleMetadata.text = String.load(String.id.IDS_VIDEO_PREPURCHASE_POST_UPSELL_DATE_UNKNOWN)
                    }
                    else {
                        moviePresaleMetadata.title = String.load(String.id.IDS_VIDEO_DETAILS_COMMERCE_HEADER_PREPURCHASE_SC);
                        if (formattedFulfillmentDate)
                            moviePresaleMetadata.text = String.load(String.id.IDS_VIDEO_PREPURCHASE_PRE_UPSELL_DATE_KNOWN).format(formattedFulfillmentDate);
                        else
                            moviePresaleMetadata.text = String.load(String.id.IDS_VIDEO_PREPURCHASE_PRE_UPSELL_DATE_UNKNOWN)
                    }
                }
                return moviePresaleMetadata
            }, formatIsDownloaded: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatCanPlayLocally(source) {
                var result = String.empty;
                if (!source && MS.Entertainment.Utilities.isApp1)
                    result = MS.Entertainment.UI.Icon.inlineStreaming;
                return result
            })), issueCountText: function issueCountText(count) {
                return MS.Entertainment.Formatters.countText(count, String.id.IDS_READ_ISSUE_COUNT_PLURAL)
            }, formatIssueCount: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatIssueCount(count) {
                return MS.Entertainment.Formatters.formatCount(count, MS.Entertainment.Formatters.issueCountText)
            })), formatIsSample: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatIsSample(source) {
                if (source && source === true)
                    return String.load(String.id.IDS_READ_SAMPLE_TEXT);
                return String.empty
            })), formatStringForVoice: WinJS.Binding.converter(WinJS.Utilities.markSupportedForProcessing(function formatStringForVoice(source) {
                return MS.Entertainment.UI.App2.VoiceStatics.normalizeStringForVoice(source)
            }))
    })
})()
})();
/* >>>>>>/framework/navigatetopageaction.js:28312 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Actions) {
                var NavigateToPageAction = (function(_super) {
                        __extends(NavigateToPageAction, _super);
                        function NavigateToPageAction() {
                            _super.apply(this, arguments);
                            this.animatePageTransition = true
                        }
                        Object.defineProperty(NavigateToPageAction.prototype, "pivotMoniker", {
                            get: function() {
                                return this._pivotMoniker
                            }, set: function(value) {
                                    this._pivotMoniker = value
                                }, enumerable: true, configurable: true
                        });
                        NavigateToPageAction.prototype.getPivotMoniker = function(key) {
                            Trace.fail("NavigateToPageAction::getPivotMoniker is abstract and must be subclassed.");
                            return null
                        };
                        NavigateToPageAction.prototype.canExecute = function(param) {
                            return Entertainment.ServiceLocator.isServiceRegistered(Entertainment.Services.winJSNavigation)
                        };
                        NavigateToPageAction.prototype._navigateTo = function(dataContext, template, referenceElement, contentCompleteCallback, perfStartTime, itemPropertyBag, supportsSnapped) {
                            if (typeof supportsSnapped === "undefined")
                                supportsSnapped = false;
                            if (referenceElement)
                                MS.Entertainment.Utilities.Telemetry.logPageAction({
                                    domElement: referenceElement, itemPropertyBag: itemPropertyBag
                                }, {
                                    uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                                }, {
                                    uri: template, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                                });
                            if (perfStartTime)
                                MS.Entertainment.Instrumentation.PerfTrack.setStartTime(perfStartTime);
                            var pivotMoniker = null;
                            if (this.parameter && this.parameter.pivotMoniker)
                                pivotMoniker = this.getPivotMoniker(this.parameter.pivotMoniker);
                            else if (this.pivotMoniker)
                                pivotMoniker = this.getPivotMoniker(this.pivotMoniker);
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                            navigationService.navigateTo(new MS.Entertainment.UI.Framework.NavigationOperation(dataContext, template, contentCompleteCallback, null, this.animatePageTransition, null, pivotMoniker, supportsSnapped))
                        };
                        return NavigateToPageAction
                    })(Actions.Action);
                Actions.NavigateToPageAction = NavigateToPageAction
            })(UI.Actions || (UI.Actions = {}));
            var Actions = UI.Actions
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/video_win/videonavigationactions.js:28382 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Actions) {
                (function(VideoNavigation) {
                    (function(Monikers) {
                        Monikers[Monikers["explore"] = 1] = "explore"
                    })(VideoNavigation.Monikers || (VideoNavigation.Monikers = {}));
                    var Monikers = VideoNavigation.Monikers
                })(Actions.VideoNavigation || (Actions.VideoNavigation = {}));
                var VideoNavigation = Actions.VideoNavigation;
                var VideoNavigateToPageAction = (function(_super) {
                        __extends(VideoNavigateToPageAction, _super);
                        function VideoNavigateToPageAction() {
                            _super.apply(this, arguments)
                        }
                        VideoNavigateToPageAction.prototype.getPivotMoniker = function(key) {
                            return VideoNavigation.Monikers[key]
                        };
                        return VideoNavigateToPageAction
                    })(Actions.NavigateToPageAction);
                Actions.VideoNavigateToPageAction = VideoNavigateToPageAction;
                var MoviesStoreNavigateAction = (function(_super) {
                        __extends(MoviesStoreNavigateAction, _super);
                        function MoviesStoreNavigateAction() {
                            _super.apply(this, arguments);
                            this.automationId = UI.AutomationIds.moviesStoreNavigate
                        }
                        MoviesStoreNavigateAction.prototype.executed = function() {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                            navigationService.navigateToMoniker("moviesStore")
                        };
                        return MoviesStoreNavigateAction
                    })(VideoNavigateToPageAction);
                Actions.MoviesStoreNavigateAction = MoviesStoreNavigateAction;
                var TvStoreNavigateAction = (function(_super) {
                        __extends(TvStoreNavigateAction, _super);
                        function TvStoreNavigateAction() {
                            _super.apply(this, arguments);
                            this.automationId = UI.AutomationIds.tvStoreNavigate
                        }
                        TvStoreNavigateAction.prototype.executed = function() {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                            navigationService.navigateToMoniker("tvStore")
                        };
                        return TvStoreNavigateAction
                    })(VideoNavigateToPageAction);
                Actions.TvStoreNavigateAction = TvStoreNavigateAction;
                (function(VideoMarketplaceGalleryActions) {
                    var NavigateToMarketplaceGalleryAction = (function(_super) {
                            __extends(NavigateToMarketplaceGalleryAction, _super);
                            function NavigateToMarketplaceGalleryAction() {
                                _super.apply(this, arguments)
                            }
                            NavigateToMarketplaceGalleryAction.prototype._createViewModel = function(param) {
                                Trace.fail("NavigateToMarketplaceGalleryAction::_createViewModel must be overridden by subclass.")
                            };
                            NavigateToMarketplaceGalleryAction.prototype._perfTrackEventCompleteCallBack = function() {
                                Trace.fail("NavigateToMarketplaceGalleryAction::_perfTrackEventCompleteCallBack must be overridden by subclass.")
                            };
                            NavigateToMarketplaceGalleryAction.prototype._perfTrackStartTime = function() {
                                Trace.fail("NavigateToMarketplaceGalleryAction::_perfTrackStartTime must be overridden by subclass.")
                            };
                            NavigateToMarketplaceGalleryAction.prototype.executed = function(param, referenceElement) {
                                var _this = this;
                                this._navigateTo(function() {
                                    return _this._createViewModel(param)
                                }, "/Components/Video_Win/VideoMarketplacePageTemplate.html#marketplacePageBody", referenceElement, function() {
                                    return _this._perfTrackEventCompleteCallBack()
                                }, this._perfTrackStartTime())
                            };
                            return NavigateToMarketplaceGalleryAction
                        })(VideoNavigateToPageAction);
                    VideoMarketplaceGalleryActions.NavigateToMarketplaceGalleryAction = NavigateToMarketplaceGalleryAction;
                    var NewMoviesNavigateAction = (function(_super) {
                            __extends(NewMoviesNavigateAction, _super);
                            function NewMoviesNavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.newMoviesMarketplaceNavigate
                            }
                            NewMoviesNavigateAction.prototype._perfTrackStartTime = function() {
                                return MS.Entertainment.Instrumentation.PerfTrack.StartPoints.NewMoviesPageRequest
                            };
                            NewMoviesNavigateAction.prototype._perfTrackEventCompleteCallBack = function() {
                                MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioNewMoviesPageRequest()
                            };
                            NewMoviesNavigateAction.prototype._createViewModel = function(param) {
                                return new Entertainment.ViewModels.EditorialVideoMarketplaceViewModel(Entertainment.ViewModels.EditorialVideoMarketplaceViewModel.ViewTypes.newMovies)
                            };
                            return NewMoviesNavigateAction
                        })(NavigateToMarketplaceGalleryAction);
                    VideoMarketplaceGalleryActions.NewMoviesNavigateAction = NewMoviesNavigateAction;
                    var FeaturedMoviesNavigateAction = (function(_super) {
                            __extends(FeaturedMoviesNavigateAction, _super);
                            function FeaturedMoviesNavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.featuredMoviesMarketplaceNavigate
                            }
                            FeaturedMoviesNavigateAction.prototype._perfTrackStartTime = function() {
                                return MS.Entertainment.Instrumentation.PerfTrack.StartPoints.FeaturedMoviesPageRequest
                            };
                            FeaturedMoviesNavigateAction.prototype._perfTrackEventCompleteCallBack = function() {
                                MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioFeaturedMoviesPageRequest()
                            };
                            FeaturedMoviesNavigateAction.prototype._createViewModel = function(param) {
                                return new Entertainment.ViewModels.EditorialVideoMarketplaceViewModel(Entertainment.ViewModels.EditorialVideoMarketplaceViewModel.ViewTypes.featuredMovies)
                            };
                            return FeaturedMoviesNavigateAction
                        })(NavigateToMarketplaceGalleryAction);
                    VideoMarketplaceGalleryActions.FeaturedMoviesNavigateAction = FeaturedMoviesNavigateAction;
                    var FlexHubNavigateAction = (function(_super) {
                            __extends(FlexHubNavigateAction, _super);
                            function FlexHubNavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.flexHubNavigate
                            }
                            FlexHubNavigateAction.prototype._perfTrackStartTime = function() {
                                return MS.Entertainment.Instrumentation.PerfTrack.StartPoints.FlexHubPageRequest
                            };
                            FlexHubNavigateAction.prototype._perfTrackEventCompleteCallBack = function() {
                                MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioFlexHubPageRequest()
                            };
                            FlexHubNavigateAction.prototype._createViewModel = function(param) {
                                return new Entertainment.ViewModels.FlexHubViewModel(param.targetFeed)
                            };
                            return FlexHubNavigateAction
                        })(NavigateToMarketplaceGalleryAction);
                    VideoMarketplaceGalleryActions.FlexHubNavigateAction = FlexHubNavigateAction;
                    var TopMoviesNavigateAction = (function(_super) {
                            __extends(TopMoviesNavigateAction, _super);
                            function TopMoviesNavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.topMoviesMarketplaceNavigate
                            }
                            TopMoviesNavigateAction.prototype._perfTrackStartTime = function() {
                                return MS.Entertainment.Instrumentation.PerfTrack.StartPoints.TopSellingMoviesPageRequest
                            };
                            TopMoviesNavigateAction.prototype._perfTrackEventCompleteCallBack = function() {
                                MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioTopSellingMoviesPageRequest()
                            };
                            TopMoviesNavigateAction.prototype._createViewModel = function(param) {
                                return new Entertainment.ViewModels.TopMoviesMarketplaceViewModel(Entertainment.ViewModels.TopMoviesMarketplaceViewModel.ViewTypes.topMovies, param.pivotType)
                            };
                            return TopMoviesNavigateAction
                        })(NavigateToMarketplaceGalleryAction);
                    VideoMarketplaceGalleryActions.TopMoviesNavigateAction = TopMoviesNavigateAction;
                    var TopTvNavigateAction = (function(_super) {
                            __extends(TopTvNavigateAction, _super);
                            function TopTvNavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.topTvMarketplaceNavigate
                            }
                            TopTvNavigateAction.prototype._perfTrackStartTime = function() {
                                return MS.Entertainment.Instrumentation.PerfTrack.StartPoints.TopSellingTvPageRequest
                            };
                            TopTvNavigateAction.prototype._perfTrackEventCompleteCallBack = function() {
                                MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioTopSellingTvPageRequest()
                            };
                            TopTvNavigateAction.prototype._createViewModel = function(param) {
                                return new Entertainment.ViewModels.TopTvMarketplaceViewModel(Entertainment.ViewModels.TopTvMarketplaceViewModel.ViewTypes.topTv, param.pivotType)
                            };
                            return TopTvNavigateAction
                        })(NavigateToMarketplaceGalleryAction);
                    VideoMarketplaceGalleryActions.TopTvNavigateAction = TopTvNavigateAction;
                    var NewTvNavigateAction = (function(_super) {
                            __extends(NewTvNavigateAction, _super);
                            function NewTvNavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.newTvMarketplaceNavigate
                            }
                            NewTvNavigateAction.prototype._perfTrackStartTime = function() {
                                return MS.Entertainment.Instrumentation.PerfTrack.StartPoints.NewTvPageRequest
                            };
                            NewTvNavigateAction.prototype._perfTrackEventCompleteCallBack = function() {
                                MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioNewTvPageRequest()
                            };
                            NewTvNavigateAction.prototype._createViewModel = function(param) {
                                return new Entertainment.ViewModels.EditorialVideoMarketplaceViewModel(Entertainment.ViewModels.EditorialVideoMarketplaceViewModel.ViewTypes.newTv)
                            };
                            return NewTvNavigateAction
                        })(NavigateToMarketplaceGalleryAction);
                    VideoMarketplaceGalleryActions.NewTvNavigateAction = NewTvNavigateAction;
                    var FeaturedTvNavigateAction = (function(_super) {
                            __extends(FeaturedTvNavigateAction, _super);
                            function FeaturedTvNavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.featuredTvMarketplaceNavigate
                            }
                            FeaturedTvNavigateAction.prototype._perfTrackStartTime = function() {
                                return MS.Entertainment.Instrumentation.PerfTrack.StartPoints.FeaturedTvPageRequest
                            };
                            FeaturedTvNavigateAction.prototype._perfTrackEventCompleteCallBack = function() {
                                MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioFeaturedTvPageRequest()
                            };
                            FeaturedTvNavigateAction.prototype._createViewModel = function(param) {
                                return new Entertainment.ViewModels.EditorialVideoMarketplaceViewModel(Entertainment.ViewModels.EditorialVideoMarketplaceViewModel.ViewTypes.featuredTv)
                            };
                            return FeaturedTvNavigateAction
                        })(NavigateToMarketplaceGalleryAction);
                    VideoMarketplaceGalleryActions.FeaturedTvNavigateAction = FeaturedTvNavigateAction;
                    var LastNightTvNavigateAction = (function(_super) {
                            __extends(LastNightTvNavigateAction, _super);
                            function LastNightTvNavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.lastNightTvMarketplaceNavigate
                            }
                            LastNightTvNavigateAction.prototype._perfTrackStartTime = function() {
                                return MS.Entertainment.Instrumentation.PerfTrack.StartPoints.LastNightsTvPageRequest
                            };
                            LastNightTvNavigateAction.prototype._perfTrackEventCompleteCallBack = function() {
                                MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioLastNightsTvPageRequest()
                            };
                            LastNightTvNavigateAction.prototype._createViewModel = function(param) {
                                return new Entertainment.ViewModels.EditorialVideoMarketplaceViewModel(Entertainment.ViewModels.EditorialVideoMarketplaceViewModel.ViewTypes.lastNightTv)
                            };
                            return LastNightTvNavigateAction
                        })(NavigateToMarketplaceGalleryAction);
                    VideoMarketplaceGalleryActions.LastNightTvNavigateAction = LastNightTvNavigateAction;
                    var TvFeaturedSetsNavigateAction = (function(_super) {
                            __extends(TvFeaturedSetsNavigateAction, _super);
                            function TvFeaturedSetsNavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.tvFeaturedSetsMarketplaceNavigate
                            }
                            TvFeaturedSetsNavigateAction.prototype._perfTrackStartTime = function() {
                                return MS.Entertainment.Instrumentation.PerfTrack.StartPoints.FlexHubPageRequest
                            };
                            TvFeaturedSetsNavigateAction.prototype._perfTrackEventCompleteCallBack = function() {
                                MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioFlexHubPageRequest()
                            };
                            TvFeaturedSetsNavigateAction.prototype._createViewModel = function(param) {
                                return new Entertainment.ViewModels.FeaturedSetsMarketplaceViewModel(Entertainment.ViewModels.FeaturedSetsMarketplaceViewModel.ViewTypes.tvFeaturedSets)
                            };
                            return TvFeaturedSetsNavigateAction
                        })(NavigateToMarketplaceGalleryAction);
                    VideoMarketplaceGalleryActions.TvFeaturedSetsNavigateAction = TvFeaturedSetsNavigateAction;
                    var MoviesFeaturedSetsNavigateAction = (function(_super) {
                            __extends(MoviesFeaturedSetsNavigateAction, _super);
                            function MoviesFeaturedSetsNavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.moviesFeaturedSetsMarketplaceNavigate
                            }
                            MoviesFeaturedSetsNavigateAction.prototype._perfTrackStartTime = function() {
                                return MS.Entertainment.Instrumentation.PerfTrack.StartPoints.FlexHubPageRequest
                            };
                            MoviesFeaturedSetsNavigateAction.prototype._perfTrackEventCompleteCallBack = function() {
                                MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioFlexHubPageRequest()
                            };
                            MoviesFeaturedSetsNavigateAction.prototype._createViewModel = function(param) {
                                return new Entertainment.ViewModels.FeaturedSetsMarketplaceViewModel(Entertainment.ViewModels.FeaturedSetsMarketplaceViewModel.ViewTypes.movieFeaturedSets)
                            };
                            return MoviesFeaturedSetsNavigateAction
                        })(NavigateToMarketplaceGalleryAction);
                    VideoMarketplaceGalleryActions.MoviesFeaturedSetsNavigateAction = MoviesFeaturedSetsNavigateAction;
                    var ShowLocalGrovelInfoDialogAction = (function(_super) {
                            __extends(ShowLocalGrovelInfoDialogAction, _super);
                            function ShowLocalGrovelInfoDialogAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.showLocalGrovelInfoDialog
                            }
                            ShowLocalGrovelInfoDialogAction.prototype.canExecute = function(param) {
                                return WinJS.Utilities.getMember("Windows.Storage.StorageLibrary")
                            };
                            ShowLocalGrovelInfoDialogAction.prototype.executed = function() {
                                return UI.Controls.ManageFoldersDialog.show()
                            };
                            return ShowLocalGrovelInfoDialogAction
                        })(VideoNavigateToPageAction);
                    VideoMarketplaceGalleryActions.ShowLocalGrovelInfoDialogAction = ShowLocalGrovelInfoDialogAction;
                    var PersonalVideoNavigationAction = (function(_super) {
                            __extends(PersonalVideoNavigationAction, _super);
                            function PersonalVideoNavigationAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.personalVideoNavigate
                            }
                            Object.defineProperty(PersonalVideoNavigationAction.prototype, "currentDataContext", {
                                get: function() {
                                    var winJSNavigationService = Entertainment.ServiceLocator.getService(Entertainment.Services.winJSNavigation);
                                    return winJSNavigationService.realizedDataContext
                                }, enumerable: true, configurable: true
                            });
                            PersonalVideoNavigationAction.prototype.executed = function(event) {
                                MS.Entertainment.UI.Actions.assert(event, "Cannot navigate without defining parameter");
                                var folderId = WinJS.Utilities.getMember("data.folderId", event);
                                if (folderId) {
                                    var currentDataContext = this.currentDataContext;
                                    if (currentDataContext && currentDataContext.openFolder)
                                        currentDataContext.openFolder(folderId)
                                }
                                else if (event.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video && event.data.videoType === Microsoft.Entertainment.Queries.VideoType.other) {
                                    MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PlayCommand);
                                    MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayNonProtectedInApp();
                                    MS.Entertainment.Platform.PlaybackHelpers.showImmersiveDetails(event.data, false, true)
                                }
                            };
                            return PersonalVideoNavigationAction
                        })(VideoNavigateToPageAction);
                    VideoMarketplaceGalleryActions.PersonalVideoNavigationAction = PersonalVideoNavigationAction
                })(Actions.VideoMarketplaceGalleryActions || (Actions.VideoMarketplaceGalleryActions = {}));
                var VideoMarketplaceGalleryActions = Actions.VideoMarketplaceGalleryActions;
                (function(VideoDetailsActions) {
                    var NavigateToDetailsAction = (function(_super) {
                            __extends(NavigateToDetailsAction, _super);
                            function NavigateToDetailsAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.navigateToVideoDetails
                            }
                            NavigateToDetailsAction.prototype._createViewModel = function(param) {
                                var mediaItem = param && param.data;
                                var mediaType = WinJS.Utilities.getMember("actionType.mediaType", mediaItem);
                                if (mediaItem)
                                    if (Entertainment.Utilities.isMovie(mediaItem))
                                        return Entertainment.ViewModels.MovieDetailsViewModel.create(mediaItem, param.viewModelParams);
                                    else if (Entertainment.Utilities.isTVSeason(mediaItem) || Entertainment.Utilities.isTVSeries(mediaItem))
                                        return Entertainment.ViewModels.TvDetailsViewModel.create(mediaItem, param.viewModelParams);
                                    else if (Entertainment.Utilities.isTVEpisode(mediaItem))
                                        return Entertainment.ViewModels.EpisodeDetailsViewModel.create(mediaItem, param.viewModelParams);
                                    else if (mediaType === MS.Entertainment.Data.Augmenter.Spotlight.MediaType.FlexHub)
                                        return new Entertainment.ViewModels.FlexHubViewModel(mediaItem.actionTarget);
                                    else {
                                        Actions.fail("Unrecognized media item type!");
                                        return null
                                    }
                            };
                            NavigateToDetailsAction.prototype.canExecute = function(param) {
                                return Entertainment.ServiceLocator.isServiceRegistered(Entertainment.Services.winJSNavigation)
                            };
                            NavigateToDetailsAction.prototype.executed = function(param, referenceElement) {
                                var _this = this;
                                var mediaItem = param && param.data;
                                var mediaType = WinJS.Utilities.getMember("actionType.mediaType", mediaItem);
                                if (MS.Entertainment.Utilities.isMovie(mediaItem))
                                    this._navigateTo(function() {
                                        return _this._createViewModel(param)
                                    }, "/Components/Video_Win/MovieDetails.html#movieDetailsBody", referenceElement, function() {
                                        MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioMovieDetailsRequest()
                                    }, MS.Entertainment.Instrumentation.PerfTrack.StartPoints.MovieDetailsRequest);
                                else if (MS.Entertainment.Utilities.isTVSeason(mediaItem) || MS.Entertainment.Utilities.isTVSeries(mediaItem))
                                    this._navigateTo(function() {
                                        return _this._createViewModel(param)
                                    }, "/Components/Video_Win/TvDetails.html#tvDetailsBody", referenceElement, function() {
                                        MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioTVDetailsRequest()
                                    }, MS.Entertainment.Instrumentation.PerfTrack.StartPoints.TVDetailsRequest);
                                else if (MS.Entertainment.Utilities.isTVEpisode(mediaItem))
                                    this._navigateTo(function() {
                                        return _this._createViewModel(param)
                                    }, "/Components/Video_Win/EpisodeDetails.html#episodeDetailsBody", referenceElement);
                                else if (mediaType === MS.Entertainment.Data.Augmenter.Spotlight.MediaType.FlexHub)
                                    this._navigateTo(function() {
                                        return _this._createViewModel(param)
                                    }, "/Components/Video_Win/VideoMarketplacePageTemplate.html#marketplacePageBody", referenceElement, function() {
                                        MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioFlexHubPageRequest()
                                    }, MS.Entertainment.Instrumentation.PerfTrack.StartPoints.FlexHubPageRequest);
                                else if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.other) {
                                    MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PlayCommand);
                                    MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayNonProtectedInApp();
                                    var immersiveOptions = {startFullScreen: true};
                                    var playPreviewOnly = (mediaItem && mediaItem.playPreviewOnly) ? mediaItem.playPreviewOnly : false;
                                    var playOptions = {
                                            autoPlay: true, showImmersive: true, immersiveOptions: immersiveOptions, playPreviewOnly: playPreviewOnly, playbackSource: MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.details
                                        };
                                    if (MS.Entertainment.Platform && MS.Entertainment.Platform.PlaybackHelpers && MS.Entertainment.Platform.PlaybackHelpers.playMedia2)
                                        MS.Entertainment.Platform.PlaybackHelpers.playMedia2(mediaItem, playOptions)
                                }
                                else
                                    Actions.fail("Unrecognized media item type!")
                            };
                            return NavigateToDetailsAction
                        })(VideoNavigateToPageAction);
                    VideoDetailsActions.NavigateToDetailsAction = NavigateToDetailsAction;
                    var ChangeTvSeasonAction = (function(_super) {
                            __extends(ChangeTvSeasonAction, _super);
                            function ChangeTvSeasonAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.changeTvSeason
                            }
                            ChangeTvSeasonAction.prototype.canExecute = function(param) {
                                var mediaItem = param && param.data;
                                var model = param && param.model;
                                return (MS.Entertainment.Utilities.isTVSeason(mediaItem) && model)
                            };
                            ChangeTvSeasonAction.prototype.executed = function(param, referenceElement) {
                                var mediaItem = param && param.data;
                                var model = param && param.model;
                                model.updateFromSeason(mediaItem)
                            };
                            return ChangeTvSeasonAction
                        })(Actions.Action);
                    VideoDetailsActions.ChangeTvSeasonAction = ChangeTvSeasonAction
                })(Actions.VideoDetailsActions || (Actions.VideoDetailsActions = {}));
                var VideoDetailsActions = Actions.VideoDetailsActions;
                (function(VideoSearchActions) {
                    var NavigateAction = (function(_super) {
                            __extends(NavigateAction, _super);
                            function NavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = UI.AutomationIds.searchResultsNavigate
                            }
                            NavigateAction.prototype.canExecute = function(param) {
                                return !!param
                            };
                            NavigateAction.prototype.executed = function(param, referenceElement) {
                                var searchText = param.searchText;
                                var searchPageUri = NavigateAction._searchFullResultsPageUri;
                                var navigationService = Entertainment.ServiceLocator.getService(Entertainment.Services.winJSNavigation);
                                var existingSearchText = WinJS.Utilities.getMember("realizedDataContext.searchText", navigationService);
                                if (searchText === existingSearchText && searchPageUri === navigationService.location)
                                    return;
                                var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                                var isViewingCollection = (navigationService && (navigationService.location === "/Components/Video_Win/VideoCollection.html#collectionBody"));
                                this._navigateTo(function() {
                                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                    var isTvMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace);
                                    var isMoviesMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace);
                                    var searchScope;
                                    if ((!isTvMarketplaceEnabled && !isMoviesMarketplaceEnabled) || !UI.NetworkStatusService.isOnline() || isViewingCollection)
                                        searchScope = 0;
                                    else
                                        searchScope = 1;
                                    var viewModel = new Entertainment.ViewModels.VideoSearchGalleryViewModelBase(searchText, searchScope);
                                    viewModel.loadModules();
                                    return viewModel
                                }, searchPageUri, referenceElement, Entertainment.Instrumentation.PerfTrack.triggerScenarioSearchGalleryRequestToLoad, Entertainment.Instrumentation.PerfTrack.StartPoints.SearchGalleryRequest)
                            };
                            NavigateAction._searchFullResultsPageUri = "/Components/Video_Win/SearchResultsPage.html#searchResults";
                            return NavigateAction
                        })(VideoNavigateToPageAction);
                    VideoSearchActions.NavigateAction = NavigateAction
                })(Actions.VideoSearchActions || (Actions.VideoSearchActions = {}));
                var VideoSearchActions = Actions.VideoSearchActions;
                (function() {
                    var actionService = Entertainment.ServiceLocator.getService(Entertainment.Services.actions);
                    actionService.register(Actions.ActionIdentifiers.changeTvSeason, function() {
                        return new VideoDetailsActions.ChangeTvSeasonAction
                    });
                    actionService.register(Actions.ActionIdentifiers.moviesStoreNavigate, function() {
                        return new MoviesStoreNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.featuredMoviesMarketplaceNavigate, function() {
                        return new VideoMarketplaceGalleryActions.FeaturedMoviesNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.flexHubNavigate, function() {
                        return new VideoMarketplaceGalleryActions.FlexHubNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.navigateToVideoDetails, function() {
                        return new VideoDetailsActions.NavigateToDetailsAction
                    });
                    actionService.register(Actions.ActionIdentifiers.newMoviesMarketplaceNavigate, function() {
                        return new VideoMarketplaceGalleryActions.NewMoviesNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.topMoviesMarketplaceNavigate, function() {
                        return new VideoMarketplaceGalleryActions.TopMoviesNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.topTvMarketplaceNavigate, function() {
                        return new VideoMarketplaceGalleryActions.TopTvNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.newTvMarketplaceNavigate, function() {
                        return new VideoMarketplaceGalleryActions.NewTvNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.featuredTvMarketplaceNavigate, function() {
                        return new VideoMarketplaceGalleryActions.FeaturedTvNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.lastNightTvMarketplaceNavigate, function() {
                        return new VideoMarketplaceGalleryActions.LastNightTvNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.tvFeaturedSetsMarketplaceNavigate, function() {
                        return new VideoMarketplaceGalleryActions.TvFeaturedSetsNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.moviesFeaturedSetsMarketplaceNavigate, function() {
                        return new VideoMarketplaceGalleryActions.MoviesFeaturedSetsNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.tvStoreNavigate, function() {
                        return new TvStoreNavigateAction
                    });
                    actionService.register(Actions.ActionIdentifiers.showLocalGrovelInfoDialog, function() {
                        return new VideoMarketplaceGalleryActions.ShowLocalGrovelInfoDialogAction
                    });
                    actionService.register(Actions.ActionIdentifiers.personalVideoNavigate, function() {
                        return new VideoMarketplaceGalleryActions.PersonalVideoNavigationAction
                    });
                    actionService.register(Actions.ActionIdentifiers.searchResultsNavigate, function() {
                        return new VideoSearchActions.NavigateAction
                    })
                })()
            })(UI.Actions || (UI.Actions = {}));
            var Actions = UI.Actions
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/deeplink.js:28888 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.DeepLink");
    WinJS.Namespace.define("MS.Entertainment.UI.DeepLink", {
        _hideDeepLinkLoadingOverlayTimeoutMS: 10000, _deepLinksFactories: {}, isRegistered: function isRegistered(appMode) {
                return !!MS.Entertainment.UI.DeepLink._deepLinksFactories[appMode]
            }, registerDeepLinksFactory: function registerDeepLinksFactory(appMode, factory) {
                MS.Entertainment.UI.DeepLink._deepLinksFactories[appMode] = factory
            }, getTestHooks: function getTestHooks() {
                return {getRegisteredDeepLinksFactory: function getRegisteredDeepLinksFactory() {
                            return MS.Entertainment.UI.DeepLink._deepLinksFactories
                        }}
            }, ParamType: {
                identifier: /^[_a-zA-Z][_a-zA-Z0-9]*$/g, guid: /^(\{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0,1})$/g, mediaId: /^((\{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0,1})|[0-9]+)$/g, boolean: /^true|false$/gi, integer: /^[-+]?[0-9]+$/g, unsigned_integer: /^[0-9]+$/g, stringFormat: /.+/g, test: function test(type, value) {
                        type.lastIndex = 0;
                        return type.test(value)
                    }
            }, PlayStateType: {
                play: "play", pause: "pause"
            }, processDeepLink: (function processDeepLink(command, params) {
                var _deepLinks = null;
                function convertToActionableParam(paramInput, paramType) {
                    var type = MS.Entertainment.UI.DeepLink.ParamType;
                    switch (paramType) {
                        case type.identifier:
                        case type.stringFormat:
                        case type.guid:
                            return paramInput;
                        case type.boolean:
                            return (paramInput.toLowerCase() === "true");
                        case type.integer:
                        case type.unsigned_integer:
                            return parseInt(paramInput);
                        case type.mediaId:
                            if (type.test(type.guid, paramInput))
                                return paramInput;
                            else if (type.test(type.unsigned_integer, paramInput))
                                return parseInt(paramInput);
                            else {
                                MS.Entertainment.UI.DeepLink.fail("The parameter input of type mediaId was invalid.  ParamInput=" + paramInput);
                                return null
                            }
                        default:
                            MS.Entertainment.UI.DeepLink.fail("The parameter type is not known.  ParamType=" + paramType);
                            return null
                    }
                }
                return function processDeepLink(command, params) {
                        if (!command)
                            throw"processDeepLink: command parameter is mandatory";
                        if (!params)
                            throw"processDeepLink: params parameter is mandatory";
                        var type = MS.Entertainment.UI.DeepLink.ParamType;
                        if (!_deepLinks) {
                            var factory = MS.Entertainment.UI.DeepLink._deepLinksFactories[MS.Entertainment.appMode];
                            if (factory)
                                _deepLinks = factory();
                            if (!_deepLinks)
                                return false;
                            for (var name in _deepLinks) {
                                var deepLink = _deepLinks[name];
                                MS.Entertainment.UI.DeepLink.assert(deepLink.actionId, "DeepLink definition: 'actionId' field not specified");
                                MS.Entertainment.UI.DeepLink.assert(deepLink.params, "DeepLink definition: 'params' field not specified");
                                for (var paramName in deepLink.params) {
                                    var param = deepLink.params[paramName];
                                    MS.Entertainment.UI.DeepLink.assert(typeof param.required === "boolean", "DeepLink definition: 'required' field not specified");
                                    MS.Entertainment.UI.DeepLink.assert(param.type, "DeepLink definition: 'type' field not specified")
                                }
                            }
                        }
                        deepLink = _deepLinks[command];
                        if (!deepLink)
                            return false;
                        if (MS.Entertainment.Utilities.isApp2)
                            params = this._normalizeObjectProperties(params, deepLink.params);
                        for (name in deepLink.params)
                            if (deepLink.params[name].required && !params[name])
                                return false;
                        for (name in params) {
                            var parameterInfo = deepLink.params[name];
                            if (!parameterInfo)
                                return false;
                            parameterInfo.type.lastIndex = 0;
                            if (!type.test(parameterInfo.type, params[name]))
                                return false;
                            if (parameterInfo.values)
                                if (parameterInfo.caseInsensitive) {
                                    var parameterValue = params[name].toLocaleLowerCase();
                                    var validValue = false;
                                    for (var i = 0; i < parameterInfo.values.length; i++) {
                                        var itemValue = parameterInfo.values[i];
                                        if (itemValue && (itemValue.toLocaleLowerCase() === parameterValue)) {
                                            validValue = true;
                                            break
                                        }
                                    }
                                    if (!validValue)
                                        return false
                                }
                                else {
                                    var actionParam = convertToActionableParam(params[name], deepLink.params[name].type);
                                    if (actionParam === undefined || actionParam === null || deepLink.params[name].values.indexOf(actionParam) === -1)
                                        return false
                                }
                        }
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        if (!actionService.isRegistered(deepLink.actionId))
                            return false;
                        var action = actionService.getAction(deepLink.actionId);
                        if (!action.automationId)
                            action.automationId = MS.Entertainment.UI.AutomationIds.deepLink;
                        var actionParams = {};
                        for (name in params) {
                            actionParams[name] = convertToActionableParam(params[name], deepLink.params[name].type);
                            if (actionParams[name] === undefined || actionParams[name] === null)
                                return false
                        }
                        if (MS.Entertainment.Utilities.isMusicApp2)
                            actionParams["navigationDelay"] = 2000;
                        action.parameter = actionParams;
                        action.command = command;
                        action.execute();
                        if (MS.Entertainment.Utilities.isMusicApp2 && !deepLink.hideOverlay)
                            MS.Entertainment.UI.DeepLink._showDeepLinkLoadingOverlay();
                        return true
                    }
            })(), processProtocol: function processProtocol(url, dataPoint, parameters) {
                var decodedUrl;
                try {
                    decodedUrl = decodeURI(url)
                }
                catch(e) {
                    MS.Entertainment.UI.DeepLink.fail("processProtocol: decodeURI failed for " + url);
                    return false
                }
                var match = /^[a-zA-Z0-9-]+:\/\/([a-zA-Z-]+)\/?\?(.*)$/g.exec(decodedUrl);
                if (!match && parameters)
                    match = /^([a-zA-Z-]+)\/?\?(.*)$/g.exec(parameters);
                if (!match || !match[1])
                    return false;
                var command = match[1];
                var isValid = true;
                var deepLinkSource = String.empty;
                var params = {};
                if (match[2]) {
                    var nameValuePairs = match[2].split("&");
                    for (var i = 0; i < nameValuePairs.length; i++) {
                        var nameValuePair = nameValuePairs[i];
                        match = /([_a-zA-Z][_a-zA-Z0-9-]*)=(.*)$/g.exec(nameValuePair);
                        if (match && match[1] && match[2] && !params[match[1]])
                            switch (match[1].toLowerCase()) {
                                case"source":
                                    if (dataPoint)
                                        dataPoint.appendParameter("DeeplinkSource", match[2]);
                                    deepLinkSource = match[2];
                                    break;
                                case"partnertoken":
                                    MS.Entertainment.UI.DeepLink.assert(match[2], "No partner token received when processing deep link: " + url);
                                    if (dataPoint)
                                        dataPoint.appendParameter("DeepLinkPartnerToken", match[2]);
                                    this._updateSignInWithPartnerToken(match[2]);
                                    break;
                                case"eventtype":
                                    break;
                                default:
                                    params[match[1]] = match[2];
                                    break
                            }
                        else {
                            isValid = false;
                            break
                        }
                    }
                }
                if (deepLinkSource) {
                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    uiStateService.deepLinkSource = deepLinkSource;
                    if (params["ContentID"])
                        uiStateService.deepLinkSourceID = params["ContentID"];
                    uiStateService.deepLinkLaunchTime = Date.now();
                    if (dataPoint) {
                        dataPoint.appendParameter("DeepLinkSourceID", uiStateService.deepLinkSourceID);
                        dataPoint.appendParameter("DeepLinkLaunchTime", uiStateService.deepLinkLaunchTime)
                    }
                }
                if (isValid)
                    isValid = this.processDeepLink(command, params);
                var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                if (isValid)
                    eventProvider.traceDeepLink_Protocol_Invoked(url);
                else
                    eventProvider.traceDeepLink_Protocol_Failed(url);
                return isValid
            }, _updateSignInWithPartnerToken: function _updateSignInWithPartnerToken(partnerToken) {
                MS.Entertainment.UI.DeepLink.assert(partnerToken, "No partner token received when processing deep link");
                if (!partnerToken || !MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn)) {
                    MS.Entertainment.UI.DeepLink.fail("Unable to get sign in service for registering partner token");
                    return
                }
                var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                signInService.updatePartnerToken(partnerToken)
            }, processTile: function processTile(tileArgs) {
                if (typeof tileArgs.command !== "string")
                    return false;
                var command = tileArgs.command;
                var params = {};
                for (var name in tileArgs)
                    if (name !== "command" && typeof tileArgs[name] === "string")
                        params[name] = tileArgs[name];
                var isValid = this.processDeepLink(command, params);
                var argumentsAsText = "command=" + command;
                for (name in params)
                    argumentsAsText = argumentsAsText + ", " + name + "=" + params[name];
                var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                if (isValid)
                    eventProvider.traceDeepLink_Tile_Invoked(argumentsAsText);
                else
                    eventProvider.traceDeepLink_Tile_Failed(argumentsAsText);
                return isValid
            }, _showDeepLinkLoadingOverlay: function _showDeepLinkLoadingOverlay() {
                MS.Entertainment.UI.Controls.Overlay.showLoadingOverlay({
                    userControl: "MS.Entertainment.UI.Controls.LoadingControl", hideOnNowPlaying: true, enableKeyboardLightDismiss: false, onInitialize: function setModel(overlayContent) {
                            var progressControl = document.createElement("progress");
                            WinJS.Utilities.addClass(progressControl, "loadingRing win-ring win-large");
                            overlayContent.appendChild(progressControl);
                            return WinJS.Promise.wrap()
                        }, userControlOptions: {
                            isBusy: true, height: null
                        }, closeTimeoutMS: MS.Entertainment.UI.DeepLink._hideDeepLinkLoadingOverlayTimeoutMS, focusFirstElementOnNavigate: false
                })
            }, _normalizeObjectProperties: function _normalizeObjectProperties(unNormalizedObject, templateObject) {
                var normalizedObject = {};
                for (var unNormalizedPropertyName in unNormalizedObject)
                    for (var templatePropertyName in templateObject)
                        if (templatePropertyName.toLocaleLowerCase() === unNormalizedPropertyName.toLocaleLowerCase()) {
                            normalizedObject[templatePropertyName] = unNormalizedObject[unNormalizedPropertyName];
                            break
                        }
                return normalizedObject
            }
    });
    MS.Entertainment.UI.DeepLink.registerDeepLinksFactory(Microsoft.Entertainment.Application.AppMode.video, function() {
        var type = MS.Entertainment.UI.DeepLink.ParamType;
        return {
                location: {
                    actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkLocation, params: {
                            id: {
                                type: type.identifier, required: true, values: [MS.Entertainment.UI.Monikers.homeHub, MS.Entertainment.UI.Monikers.movieMarketplaceFeatured, MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases, MS.Entertainment.UI.Monikers.tvMarketplaceFeatured, MS.Entertainment.UI.Monikers.tvMarketplaceNewReleases, ]
                            }, gamerTag: {
                                    type: type.stringFormat, required: false
                                }
                        }
                }, details: {
                        actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkDetails, params: {
                                id: {
                                    type: type.guid, required: true
                                }, autoPlayPreview: {
                                        type: type.boolean, required: false
                                    }, autoPlay: {
                                        type: type.boolean, required: false
                                    }, startPositionMsec: {
                                        type: type.unsigned_integer, required: false
                                    }, desiredMediaItemType: {
                                        type: type.identifier, required: false, values: [MS.Entertainment.Data.Query.edsMediaType.movie, MS.Entertainment.Data.Query.edsMediaType.tvSeries, MS.Entertainment.Data.Query.edsMediaType.tvSeason, MS.Entertainment.Data.Query.edsMediaType.tvEpisode, ], caseInsensitive: true
                                    }, idType: {
                                        type: type.identifier, required: false, values: [MS.Entertainment.Data.Query.edsIdType.canonical, MS.Entertainment.Data.Query.edsIdType.zuneCatalog, ], caseInsensitive: true
                                    }
                            }
                    }, playPin: {
                        actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkPlayPin, params: {
                                id: {
                                    type: type.stringFormat, required: true
                                }, idType: {
                                        type: type.identifier, required: false, values: [MS.Entertainment.Data.Query.edsIdType.canonical, MS.Entertainment.Data.Query.edsIdType.zuneCatalog, ], caseInsensitive: true
                                    }, mediaType: {
                                        type: type.integer, required: true, values: [Microsoft.Entertainment.Queries.ObjectType.video, Microsoft.Entertainment.Queries.ObjectType.tvSeason, Microsoft.Entertainment.Queries.ObjectType.tvSeries, ]
                                    }, seriesZuneId: {
                                        type: type.stringFormat, required: false
                                    }, seasonNumber: {
                                        type: type.integer, required: false
                                    }
                            }
                    }, showPerfTrackLog: {
                        actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkShowPerfTrackLog, params: {enable: {
                                    type: type.boolean, required: true
                                }}
                    }, configureMemoryLeakTracking: {
                        actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkConfigureMemoryLeakTracking, params: {enable: {
                                    type: type.boolean, required: true
                                }}
                    }
            }
    });
    MS.Entertainment.UI.DeepLink.registerDeepLinksFactory(Microsoft.Entertainment.Application.AppMode.video2, function() {
        var type = MS.Entertainment.UI.DeepLink.ParamType;
        return {
                location: {
                    actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkLocation, params: {
                            id: {
                                type: type.identifier, required: true, values: [MS.Entertainment.UI.Monikers.homeHub, MS.Entertainment.UI.Monikers.movieMarketplaceFeatured, MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases, MS.Entertainment.UI.Monikers.tvMarketplaceFeatured, MS.Entertainment.UI.Monikers.tvMarketplaceNewReleases, MS.Entertainment.UI.Monikers.flexHub]
                            }, targetId: {
                                    type: type.stringFormat, required: false
                                }, gamerTag: {
                                    type: type.stringFormat, required: false
                                }
                        }
                }, details: {
                        actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkDetails, params: {
                                id: {
                                    type: type.guid, required: true
                                }, autoPlayPreview: {
                                        type: type.boolean, required: false
                                    }, autoPlay: {
                                        type: type.boolean, required: false
                                    }, startPositionMsec: {
                                        type: type.unsigned_integer, required: false
                                    }, desiredMediaItemType: {
                                        type: type.identifier, required: false, values: [MS.Entertainment.Data.Query.edsMediaType.movie, MS.Entertainment.Data.Query.edsMediaType.tvSeries, MS.Entertainment.Data.Query.edsMediaType.tvSeason, MS.Entertainment.Data.Query.edsMediaType.tvEpisode, ], caseInsensitive: true
                                    }, idType: {
                                        type: type.identifier, required: false, values: [MS.Entertainment.Data.Query.edsIdType.canonical, MS.Entertainment.Data.Query.edsIdType.zuneCatalog, ], caseInsensitive: true
                                    }
                            }
                    }, playto: {
                        actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkPlayTo, params: {}
                    }, "media-details": {
                        actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkVideoProtocolConverter, params: {
                                ContentID: {
                                    type: type.guid, required: true
                                }, ContentType: {
                                        type: type.stringFormat, required: false
                                    }, DeepLinkInfo: {
                                        type: type.stringFormat, required: false
                                    }
                            }
                    }, "media-playback": {
                        actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkVideoProtocolConverter, params: {
                                ContentID: {
                                    type: type.guid, required: true
                                }, ContentType: {
                                        type: type.stringFormat, required: false
                                    }, DeepLinkInfo: {
                                        type: type.stringFormat, required: false
                                    }, Time: {
                                        type: type.stringFormat, required: false
                                    }, PlayState: {
                                        type: type.stringFormat, required: false, caseInsensitive: true, values: [MS.Entertainment.UI.DeepLink.PlayStateType.play, MS.Entertainment.UI.DeepLink.PlayStateType.pause]
                                    }
                            }
                    }, "media-purchase": {
                        actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkVideoProtocolConverter, params: {
                                ContentID: {
                                    type: type.guid, required: true
                                }, ContentType: {
                                        type: type.stringFormat, required: false
                                    }, DeepLinkInfo: {
                                        type: type.stringFormat, required: false
                                    }
                            }
                    }, tunerConfig: {
                        actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deeplinkTunerConfig, params: {
                                namespace: {
                                    type: type.stringFormat, required: true, values: ["features"]
                                }, key: {
                                        type: type.stringFormat, required: true, values: ["videoWatchlist", ]
                                    }, value: {
                                        type: type.stringFormat, required: true
                                    }
                            }
                    }
            }
    })
})()
})();
/* >>>>>>/framework/video_win/videodeeplinks.js:29265 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
MS.Entertainment.UI.DeepLink.registerDeepLinksFactory(Microsoft.Entertainment.Application.AppMode.video, function() {
    var mediaTypes = ["Movie", "TvSeries", "TvSeason", "TvEpisode"];
    var mediaIdTypes = ["Canonical", "ZuneCatalog"];
    var type = MS.Entertainment.UI.DeepLink.ParamType;
    return {
            location: {
                actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.videoDeepLinkLocation, params: {
                        id: {
                            type: type.identifier, required: true, values: [MS.Entertainment.UI.Monikers.homeHub, MS.Entertainment.UI.Monikers.movieMarketplaceFeatured, MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases, MS.Entertainment.UI.Monikers.tvMarketplaceFeatured, MS.Entertainment.UI.Monikers.tvMarketplaceNewReleases]
                        }, gamerTag: {
                                type: type.stringFormat, required: false
                            }
                    }
            }, details: {
                    actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.videoDeepLinkDetails, params: {
                            id: {
                                type: type.guid, required: true
                            }, autoPlayPreview: {
                                    type: type.boolean, required: false
                                }, autoPlay: {
                                    type: type.boolean, required: false
                                }, startPositionMsec: {
                                    type: type.unsigned_integer, required: false
                                }, desiredMediaItemType: {
                                    type: type.identifier, required: false, values: mediaTypes, caseInsensitive: true
                                }, idType: {
                                    type: type.identifier, required: false, values: mediaIdTypes, caseInsensitive: true
                                }
                        }
                }, playPin: {
                    actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkPlayPin, params: {
                            id: {
                                type: type.stringFormat, required: true
                            }, idType: {
                                    type: type.identifier, required: false, values: mediaIdTypes, caseInsensitive: true
                                }, mediaType: {
                                    type: type.integer, required: true, values: [Microsoft.Entertainment.Queries.ObjectType.video, Microsoft.Entertainment.Queries.ObjectType.tvSeason, Microsoft.Entertainment.Queries.ObjectType.tvSeries]
                                }, seriesZuneId: {
                                    type: type.stringFormat, required: false
                                }, seasonNumber: {
                                    type: type.integer, required: false
                                }
                        }
                }, showPerfTrackLog: {
                    actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkShowPerfTrackLog, params: {enable: {
                                type: type.boolean, required: true
                            }}
                }, configureMemoryLeakTracking: {
                    actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkConfigureMemoryLeakTracking, params: {enable: {
                                type: type.boolean, required: true
                            }}
                }, configureVideoQualitySelector: {
                    actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkConfigureVideoQualitySelector, params: {enable: {
                                type: type.boolean, required: true
                            }}
                }
        }
})
})();
/* >>>>>>/framework/video_win/videodeeplinksactions.js:29327 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Actions) {
                var DeepLinkActionBase = (function(_super) {
                        __extends(DeepLinkActionBase, _super);
                        function DeepLinkActionBase() {
                            _super.apply(this, arguments)
                        }
                        DeepLinkActionBase.prototype.executed = function(params) {
                            Actions.fail("executed should be overridden by its subclass");
                            return null
                        };
                        DeepLinkActionBase.prototype._loadScriptsForVideoDeepLinkActions = function() {
                            return MS.Entertainment.UI.Framework.loadScripts("/ViewModels/MediaItemModel.js", "/ViewModels/PurchaseFlow/SmartBuyStateEngine.js", "/ViewModels/PurchaseFlow/VideoSmartBuyStateEngine.js", "/framework/formatters.js", "/framework/iaservice.js", "/framework/navigation.js", "/framework/data/augmenters/commonaugmenters.js", "/framework/data/augmenters/commonHydrators.js", "/framework/data/augmenters/edsAugmenters.js", "/framework/data/augmenters/videoHydrators.js", "/framework/data/augmenters/videoAugmenters.js", "/framework/data/queries/edsqueries.js", "/Framework/data/queries/videoQueries.js", "/ViewModels/PurchaseFlow/SmartBuyButtons.js")
                        };
                        return DeepLinkActionBase
                    })(Actions.Action);
                Actions.DeepLinkActionBase = DeepLinkActionBase;
                (function(VideoDeepLinksActions) {
                    var NavigateAction = (function(_super) {
                            __extends(NavigateAction, _super);
                            function NavigateAction() {
                                _super.apply(this, arguments);
                                this.automationId = MS.Entertainment.UI.AutomationIds.videoDeepLinkLocation
                            }
                            NavigateAction.prototype._executeNavigateAction = function(actionId, params) {
                                var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                var action = actionService.getAction(actionId);
                                action.parameter = params;
                                if (!action.automationId)
                                    action.automationId = MS.Entertainment.UI.AutomationIds.deepLink;
                                action.execute()
                            };
                            NavigateAction.prototype.executed = function(params) {
                                var _this = this;
                                switch (params.id) {
                                    case MS.Entertainment.UI.Monikers.homeHub:
                                        var winJSNavigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                                        winJSNavigation.navigateToDefault();
                                        break;
                                    case MS.Entertainment.UI.Monikers.movieMarketplaceFeatured:
                                        this._executeNavigateAction(MS.Entertainment.UI.Actions.ActionIdentifiers.featuredMoviesMarketplaceNavigate, params);
                                        break;
                                    case MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases:
                                        this._executeNavigateAction(MS.Entertainment.UI.Actions.ActionIdentifiers.newMoviesMarketplaceNavigate, params);
                                        break;
                                    case MS.Entertainment.UI.Monikers.movieMarketplaceTopPurchased:
                                        this._executeNavigateAction(MS.Entertainment.UI.Actions.ActionIdentifiers.topMoviesMarketplaceNavigate, params);
                                        break;
                                    case MS.Entertainment.UI.Monikers.tvMarketplaceNewReleases:
                                        this._executeNavigateAction(MS.Entertainment.UI.Actions.ActionIdentifiers.newTvMarketplaceNavigate, params);
                                        break;
                                    case MS.Entertainment.UI.Monikers.tvMarketplaceFeatured:
                                        this._executeNavigateAction(MS.Entertainment.UI.Actions.ActionIdentifiers.featuredTvMarketplaceNavigate, params);
                                        break;
                                    case MS.Entertainment.UI.Monikers.tvMarketplaceLastNight:
                                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                        var lastNightOnTvEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvLastNightQuery);
                                        if (lastNightOnTvEnabled)
                                            this._executeNavigateAction(MS.Entertainment.UI.Actions.ActionIdentifiers.lastNightTvMarketplaceNavigate, params);
                                        break;
                                    case MS.Entertainment.UI.Monikers.tvMarketplaceTopPurchased:
                                        this._executeNavigateAction(MS.Entertainment.UI.Actions.ActionIdentifiers.topTvMarketplaceNavigate, params);
                                        break;
                                    default:
                                        var stageThreeCompleted = new MS.Entertainment.UI.Framework.Signal;
                                        var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                                        if (uiState.stageThreeActivated)
                                            stageThreeCompleted.complete(true);
                                        else {
                                            var handlers = MS.Entertainment.UI.Framework.addEventHandlers(uiState, {stageThreeActivatedChanged: function() {
                                                        if (!uiState.stageThreeActivated)
                                                            return;
                                                        handlers.cancel();
                                                        stageThreeCompleted.complete(true)
                                                    }});
                                            var winJSNavigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                                            winJSNavigation.navigateToDefault()
                                        }
                                        stageThreeCompleted.promise.done(function() {
                                            _this._executeNavigateAction(MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkLocation, params)
                                        });
                                        break
                                }
                            };
                            return NavigateAction
                        })(Actions.Action);
                    VideoDeepLinksActions.NavigateAction = NavigateAction;
                    var DetailsAction = (function(_super) {
                            __extends(DetailsAction, _super);
                            function DetailsAction() {
                                _super.apply(this, arguments);
                                this.automationId = MS.Entertainment.UI.AutomationIds.videoDeepLinkDetails
                            }
                            DetailsAction.prototype._showVideoDetails = function(mediaItem, params) {
                                var _this = this;
                                if (!mediaItem)
                                    return WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_showVideoDetails: invalid media item specified."));
                                var autoPlay = params.autoPlay;
                                var startPaused = params.startPaused;
                                var autoPlayPreview = params.autoPlayPreview && !!mediaItem.videoPreviewUrl;
                                if (autoPlayPreview)
                                    mediaItem.playPreviewOnly = true;
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                var isMovie = MS.Entertainment.Utilities.isMovie(mediaItem);
                                var isSeries = MS.Entertainment.Utilities.isTVSeries(mediaItem);
                                var isSeason = MS.Entertainment.Utilities.isTVSeason(mediaItem);
                                var isEpisode = MS.Entertainment.Utilities.isTVEpisode(mediaItem);
                                var canPlay = false;
                                var getVideoToPlayPromise;
                                if ((autoPlay || autoPlayPreview || startPaused) && (!isSeries || configurationManager.video.videoPlaySeasonDeepLinkEnabled))
                                    if (isSeries || isSeason) {
                                        var hydrateSeries = WinJS.Promise.wrap();
                                        var series = isSeries ? mediaItem : null;
                                        var season = isSeason ? mediaItem : null;
                                        if (isSeason) {
                                            series = MS.Entertainment.Utilities.convertMediaItemToTvSeries(mediaItem);
                                            hydrateSeries = series.hydrate()
                                        }
                                        getVideoToPlayPromise = hydrateSeries.then(function() {
                                            var episodeProgressionHelper = new MS.Entertainment.Components.Video.EpisodeProgressionHelper(series);
                                            return episodeProgressionHelper.findNextEpisode(season)
                                        }).then(function(results) {
                                            if (!season || WinJS.Utilities.getMember("episode.seasonNumber", results) === season.seasonNumber) {
                                                var playMedia = results.episode;
                                                canPlay = playMedia && playMedia.inCollection;
                                                return playMedia
                                            }
                                            else if (season)
                                                return _this._getFreePlayPromise(season, true).then(function(succeeded) {
                                                        canPlay = false;
                                                        return null
                                                    });
                                            else {
                                                canPlay = false;
                                                return null
                                            }
                                        })
                                    }
                                    else if (isMovie || isEpisode) {
                                        getVideoToPlayPromise = WinJS.Promise.as(mediaItem);
                                        canPlay = mediaItem.inCollection || autoPlayPreview
                                    }
                                return WinJS.Promise.as(getVideoToPlayPromise).then(function(video) {
                                        if (!video)
                                            return mediaItem;
                                        if (video && (video.inCollection || autoPlayPreview))
                                            return video;
                                        return _this._getFreePlayPromise(video, false).then(function(succeeded) {
                                                canPlay = false;
                                                return video
                                            })
                                    }).then(function(video) {
                                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                        var navigateAction = actionService.getAction(Actions.ActionIdentifiers.navigateToVideoDetails);
                                        navigateAction.parameter = {data: video};
                                        var navigatePromise = navigateAction.execute();
                                        if (canPlay && video)
                                            MS.Entertainment.Platform.PlaybackHelpers.playMedia2(video, {
                                                autoPlay: autoPlay && !startPaused, playPreviewOnly: autoPlayPreview, startPositionMsec: params.startPositionMsec, playbackSource: MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.deepLink
                                            });
                                        return navigatePromise
                                    })
                            };
                            DetailsAction.prototype._executeUnknownMediaTypeDetails = function(params) {
                                var _this = this;
                                Trace.assert(params.id, "DeepLinkDetailsAction::_executeUnknownMediaTypeDetails: params.id is undefined.");
                                MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus);
                                var idType = params.idType || MS.Entertainment.Data.Query.edsIdType.canonical;
                                return MS.Entertainment.Utilities.getMediaByServiceId(params.id, idType).then(function(mediaItem) {
                                        if (!mediaItem)
                                            return WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeUnknownMediaTypeDetails: getMediaByServiceId returned an invalid media item. "));
                                        return mediaItem.hydrate()
                                    }).then(function(mediaItem) {
                                        if (mediaItem.isValid)
                                            return _this._showVideoDetails(mediaItem, params);
                                        return WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeUnknownMediaTypeDetails: hydrate returned and invalid media item."))
                                    })
                            };
                            DetailsAction.prototype._executeVideoDetails = function(params) {
                                var _this = this;
                                if (!params)
                                    WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeVideoDetails: params is null."));
                                return this._getSignInPromise().then(function() {
                                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                        var isMoviesMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace);
                                        var isTvMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace);
                                        var isVideoMarketplaceNetworkEnabled = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus).isEnabled(1);
                                        var isMovieDeeplink = params.desiredMediaItemType.toLocaleLowerCase() === MS.Entertainment.Data.Query.edsMediaType.movie.toLocaleLowerCase();
                                        var isTvDeeplink = params.desiredMediaItemType.toLocaleLowerCase() === MS.Entertainment.Data.Query.edsMediaType.tvSeries.toLocaleLowerCase() || params.desiredMediaItemType.toLocaleLowerCase() === MS.Entertainment.Data.Query.edsMediaType.tvSeason.toLocaleLowerCase() || params.desiredMediaItemType.toLocaleLowerCase() === MS.Entertainment.Data.Query.edsMediaType.tvEpisode.toLocaleLowerCase();
                                        Trace.assert(params.desiredMediaItemType && (isMovieDeeplink || isTvDeeplink), "DeepLinkDetailsAction::_executeVideoDetails: Unknown desiredMediaItemType.");
                                        if (isMovieDeeplink && !isMoviesMarketplaceEnabled)
                                            return WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeVideoDetails: Movies marketplace is not enabled. Cannot execute to movie deeplink."));
                                        if (isTvDeeplink && !isTvMarketplaceEnabled)
                                            return WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeVideoDetails: TV marketplace is not enabled. Cannot execute to tv deeplink."));
                                        if (!isVideoMarketplaceNetworkEnabled)
                                            return WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeVideoDetails: Video marketplace network is not enabled. Cannot execute to video details deeplink."));
                                        Trace.assert(params.id, "DeepLinkDetailsAction::_executeVideoDetails: paramss.id not defined");
                                        var useCanonicalId = true;
                                        if (params.idType) {
                                            var idType = params.idType.toLocaleLowerCase();
                                            if (idType === MS.Entertainment.Data.Query.edsIdType.canonical.toLocaleLowerCase())
                                                useCanonicalId = true;
                                            else if (idType.toLocaleLowerCase() === MS.Entertainment.Data.Query.edsIdType.zuneCatalog.toLocaleLowerCase())
                                                useCanonicalId = false;
                                            else
                                                Trace.fail("DeepLinkDetailsAction::_executeVideoDetails: Unknown media ID type.")
                                        }
                                        if (params.id) {
                                            var mediaItem;
                                            var augmenter;
                                            var isValid;
                                            if (useCanonicalId)
                                                mediaItem = {ID: params.id};
                                            else
                                                mediaItem = {ZuneId: params.id};
                                            mediaItem.location = MS.Entertainment.Data.ItemLocation.marketplace;
                                            switch (params.desiredMediaItemType.toLocaleLowerCase()) {
                                                case MS.Entertainment.Data.Query.edsMediaType.movie.toLocaleLowerCase():
                                                    augmenter = Entertainment.Data.Augmenter.Marketplace.EdsMovie;
                                                    isValid = MS.Entertainment.Utilities.isMovie;
                                                    break;
                                                case MS.Entertainment.Data.Query.edsMediaType.tvSeries.toLocaleLowerCase():
                                                    augmenter = Entertainment.Data.Augmenter.Marketplace.EdsTVSeries;
                                                    isValid = MS.Entertainment.Utilities.isTVSeries;
                                                    break;
                                                case MS.Entertainment.Data.Query.edsMediaType.tvSeason.toLocaleLowerCase():
                                                    augmenter = Entertainment.Data.Augmenter.Marketplace.EdsTVSeason;
                                                    isValid = MS.Entertainment.Utilities.isTVSeason;
                                                    break;
                                                case MS.Entertainment.Data.Query.edsMediaType.tvEpisode.toLocaleLowerCase():
                                                    augmenter = Entertainment.Data.Augmenter.Marketplace.EdsTVEpisode;
                                                    isValid = MS.Entertainment.Utilities.isTVEpisode;
                                                    break;
                                                default:
                                                    Trace.fail("DeepLinkDetailsAction::_executeVideoDetails: Unknown desired media type.");
                                                    return WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeVideoDetails: Unknown desired media type."));
                                                    break
                                            }
                                            return _this._processMediaItemDeepLink(mediaItem, augmenter, isValid, params)
                                        }
                                        else
                                            return WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeVideoDetails: Invalid id. Cannot execute to video details deeplink."))
                                    })
                            };
                            DetailsAction.prototype._processMediaItemDeepLink = function(item, augmenter, isValid, params) {
                                var _this = this;
                                if (!item || !augmenter || !isValid)
                                    return WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeVideoDetails: Function is missing required parameters."));
                                var navigationPromise;
                                var mediaItem = MS.Entertainment.Data.augment(item, augmenter);
                                if (mediaItem && isValid(mediaItem))
                                    navigationPromise = mediaItem.hydrate().then(function() {
                                        if (mediaItem.hasServiceId && mediaItem.isValid) {
                                            if (params.autoPlay || params.startPaused)
                                                return _this._prepareMediaItemForPlayback(mediaItem);
                                            return mediaItem
                                        }
                                        return WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeVideoDetails: Invalid mediaItem object. Cannot execute details deeplink. Service ID " + params.id))
                                    }).then(function() {
                                        return _this._showVideoDetails(mediaItem, params)
                                    });
                                else
                                    navigationPromise = WinJS.Promise.wrapError(new Error("DeepLinkDetailsAction::_executeVideoDetails: Invalid mediaItem object. Cannot execute details deeplink. Service ID " + params.id));
                                return navigationPromise
                            };
                            DetailsAction.prototype._getOfferIds = function(mediaItem) {
                                var offerIds = [];
                                var defaultClientTypeFromApp = MS.Entertainment.Utilities.defaultClientTypeFromApp;
                                var rights = MS.Entertainment.ViewModels.SmartBuyStateHandlers.getMatchingRights(mediaItem, defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream]);
                                if (rights)
                                    for (var i = 0; i < rights.length; ++i) {
                                        var currentRight = rights[i];
                                        if (currentRight && offerIds.indexOf(currentRight.offerId) === -1) {
                                            Trace.assert(currentRight.offerId, "DeepLinkDetailsAction::_getOfferIds: Invalid offerId: " + currentRight.offerId);
                                            offerIds.push(currentRight.offerId)
                                        }
                                    }
                                return offerIds
                            };
                            DetailsAction.prototype._prepareMediaItemForPlayback = function(mediaItem) {
                                var offerIds = this._getOfferIds(mediaItem);
                                return MS.Entertainment.UI.PurchaseHistoryService.refreshVideoOffersAsync(offerIds).then(function() {
                                        return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(mediaItem)
                                    }).then(null, function(error) {
                                        if (WinJS.Promise.isCanceledError(error))
                                            return WinJS.Promise.wrapError(error)
                                    })
                            };
                            DetailsAction.prototype._getFreePlayPromise = function(media, isSeason) {
                                var freePlayPromise = WinJS.Promise.as(false);
                                var bestFreeRight = isSeason ? MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.getBestFreeSeasonRight(media) : MS.Entertainment.ViewModels.VideoSmartBuyStateEngine.getBestFreeRight(media, false);
                                if (bestFreeRight) {
                                    var offerId = bestFreeRight.offerId;
                                    var currencyCode = bestFreeRight.priceCurrencyCode;
                                    var purchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY;
                                    if (bestFreeRight.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent || bestFreeRight.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream)
                                        purchaseType = MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_RENT;
                                    freePlayPromise = MS.Entertainment.Platform.PurchaseHelpers.freePurchaseFlow(media, offerId, currencyCode, purchaseType, true, bestFreeRight.signedOffer, bestFreeRight, MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.deepLink).then(function() {
                                        return true
                                    }, function() {
                                        return false
                                    })
                                }
                                return freePlayPromise
                            };
                            DetailsAction.prototype._getSignInPromise = function() {
                                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                return signIn.getSignInPromise()
                            };
                            DetailsAction.prototype.executed = function(params) {
                                var _this = this;
                                if (!params) {
                                    Trace.assert(params, "DeepLinkDetailsAction: params not defined");
                                    return
                                }
                                this._loadScriptsForVideoDeepLinkActions().then(function() {
                                    return params.desiredMediaItemType ? _this._executeVideoDetails(params) : _this._executeUnknownMediaTypeDetails(params)
                                }).done(null, function(error) {
                                    var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                                    var navigateToDefaultPromise = navigationService.navigateToDefault();
                                    if (!error || !error.doNotShowErrorDialog)
                                        WinJS.Promise.join([MS.Entertainment.UI.Framework.loadTemplate("/Controls/MessageBox.html", "messageBoxTemplate", true), navigateToDefaultPromise]).done(function() {
                                            MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_VIDEO_DEEPLINK_ERROR_GENERIC_TITLE), String.load(String.id.IDS_VIDEO_DEEPLINK_ERROR_GENERIC_DESC), {dismissOnNavigateDelay: 30000})
                                        }, function(error) {
                                            return Actions.fail("Failed to load MessageBox loadTemplate for deeplink action: " + error && error.message)
                                        })
                                })
                            };
                            return DetailsAction
                        })(DeepLinkActionBase);
                    VideoDeepLinksActions.DetailsAction = DetailsAction;
                    var deepLinkConfigureVideoQualitySelector = (function(_super) {
                            __extends(deepLinkConfigureVideoQualitySelector, _super);
                            function deepLinkConfigureVideoQualitySelector() {
                                _super.apply(this, arguments)
                            }
                            deepLinkConfigureVideoQualitySelector.prototype.executed = function(params) {
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                configurationManager.playback.enableVideoQualitySelector = params.enable;
                                if (!params.enable && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.sessionManager)) {
                                    var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                                    if (sessionMgr && sessionMgr.nowPlayingSession) {
                                        if (sessionMgr.nowPlayingSession.enableVideoNetstats)
                                            sessionMgr.nowPlayingSession.enableVideoNetstats = false;
                                        if (sessionMgr.nowPlayingSession.currentMedia)
                                            sessionMgr.nowPlayingSession.selectVideoBitrate(null)
                                    }
                                }
                                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation)) {
                                    var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                                    if (!navigationService.currentPage)
                                        navigationService.navigateToDefault()
                                }
                            };
                            return deepLinkConfigureVideoQualitySelector
                        })(Actions.Action);
                    VideoDeepLinksActions.deepLinkConfigureVideoQualitySelector = deepLinkConfigureVideoQualitySelector
                })(Actions.VideoDeepLinksActions || (Actions.VideoDeepLinksActions = {}));
                var VideoDeepLinksActions = Actions.VideoDeepLinksActions;
                var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.deepLinkConfigureVideoQualitySelector, function() {
                    return new MS.Entertainment.UI.Actions.VideoDeepLinksActions.deepLinkConfigureVideoQualitySelector
                });
                actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.videoDeepLinkLocation, function() {
                    return new MS.Entertainment.UI.Actions.VideoDeepLinksActions.NavigateAction
                });
                actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.videoDeepLinkDetails, function() {
                    return new MS.Entertainment.UI.Actions.VideoDeepLinksActions.DetailsAction
                })
            })(UI.Actions || (UI.Actions = {}));
            var Actions = UI.Actions
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/framework/shortcutmanager.js:29720 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Framework");
    WinJS.Namespace.define("MS.Entertainment.Framework", {
        ShortcutCategory: {keyboardShortcut: "keyboardShortcut"}, ShortcutManager: MS.Entertainment.UI.Framework.define(null, {
                _registeredHandlers: [], _registeredShortcuts: [], blockKeyboardShortcuts: false, registerShortcutCategoryHandler: function registerShortcutCategoryHandler(shortcutCategory, handler) {
                        if (MS.Entertainment.Framework.ShortcutCategory.hasOwnProperty(shortcutCategory)) {
                            var registered = this._getCategoryRegistrationIndex(shortcutCategory);
                            if (registered === -1)
                                if (handler && handler.registerShortcut && handler.unregisterShortcut)
                                    this._registeredHandlers.push({
                                        shortcutCategory: shortcutCategory, handler: handler
                                    });
                                else
                                    MS.Entertainment.Framework.assert(false, "Shortcut Handler does not meet contract");
                            else
                                MS.Entertainment.Framework.assert(false, "Already registered Handler for " + shortcutCategory)
                        }
                        else
                            MS.Entertainment.Framework.assert(false, "Unrecognized shortcut category " + shortcutCategory)
                    }, unregisterShortcutCategoryHandler: function unregisterShortcutCategoryHandler(shortcutCategory) {
                        var removed;
                        var index = this._getCategoryRegistrationIndex(shortcutCategory);
                        if (index > -1)
                            removed = this._registeredHandlers.splice(index, 1);
                        if (removed && removed[0] && removed[0].handler && removed[0].handler.dispose)
                            removed[0].handler.dispose()
                    }, registerShortcut: function registerShortcut(shortcutCategory, shortcut, action) {
                        if (MS.Entertainment.Framework.ShortcutCategory.hasOwnProperty(shortcutCategory)) {
                            var index = this._getCategoryRegistrationIndex(shortcutCategory);
                            if (index > -1)
                                this._registeredHandlers[index].handler.registerShortcut(shortcut, action);
                            else
                                MS.Entertainment.Framework.assert(false, "No registered Handler for " + shortcutCategory)
                        }
                        else
                            MS.Entertainment.Framework.assert(false, "Unrecognized shortcut category " + shortcutCategory)
                    }, unregisterShortcut: function unregisterShortcut(shortcutCategory, shortcut) {
                        var handlerIndex = this._getCategoryRegistrationIndex(shortcutCategory);
                        if (index > -1)
                            var success = this._registeredHandlers[index].handler.unregisterShortcut(shortcut)
                    }, _getCategoryRegistrationIndex: function _getCategoryRegistrationIndex(shortcutCategory) {
                        var index = -1;
                        for (var i = 0; i < this._registeredHandlers.length; i++)
                            if (this._registeredHandlers[i].shortcutCategory === shortcutCategory) {
                                index = i;
                                break
                            }
                        return index
                    }
            }, null)
    });
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.shortcutManager, function ShortcutManagerFactory() {
        return new MS.Entertainment.Framework.ShortcutManager
    })
})()
})();
/* >>>>>>/framework/keyboardshortcuthandler.js:29781 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Framework");
    WinJS.Namespace.define("MS.Entertainment.Framework", {
        KeyboardShortcutModifiers: {
            ctrl: "ctrl", alt: "alt", shift: "shift"
        }, KeyboardShortcutHandler: MS.Entertainment.UI.Framework.define(function KeyboardShortcutHandler() {
                this._keyModifiers = MS.Entertainment.Framework.KeyboardShortcutModifiers
            }, {
                initialize: function initialize() {
                    if (this._documentEvents) {
                        this._documentEvents.cancel();
                        this._documentEvents = null
                    }
                    var documentEvents;
                    if (MS.Entertainment.Utilities.isApp2)
                        documentEvents = {keyup: this._handleKey.bind(this)};
                    else
                        documentEvents = {keydown: this._handleKey.bind(this)};
                    this._documentEvents = MS.Entertainment.Utilities.addEventHandlers(document, documentEvents, false)
                }, _handleKey: function _handleKey(event) {
                        var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                        var shortcutManagerService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shortcutManager);
                        var flyoutFocused = WinJS.UI.AutomaticFocus && WinJS.UI.AutomaticFocus.focusRoot && WinJS.Utilities.hasClass(WinJS.UI.AutomaticFocus.focusRoot, "win-flyout");
                        var overlayVisible = flyoutFocused || uiStateService.overlayVisible;
                        var globalButtonPressed = MS.Entertainment.Utilities.isApp2 && (event.keyCode === WinJS.Utilities.Key.invokeGlobalCommand || event.keyCode === WinJS.Utilities.Key.ltButton || event.keyCode === WinJS.Utilities.Key.rtButton || (event.altKey && event.keyCode === WinJS.Utilities.Key.enter));
                        var allowDismissButton = !overlayVisible || WinJS.Utilities.getMember("MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.allowBackNavigate");
                        var dismissButtonPressed = event.keyCode === WinJS.Utilities.Key.dismissButton && allowDismissButton;
                        if (!dismissButtonPressed && shortcutManagerService.blockKeyboardShortcuts)
                            return;
                        if (overlayVisible && !globalButtonPressed && !dismissButtonPressed)
                            return;
                        var keys = {};
                        if (event.shiftKey)
                            keys.shift = true;
                        if (event.ctrlKey)
                            keys.ctrl = true;
                        if (event.altKey)
                            keys.alt = true;
                        if (event.keyCode)
                            keys.key = event.keyCode;
                        var index = this._checkShortcutRegistration(keys);
                        if (index > -1) {
                            var shortcut = this._registeredShortcuts[index];
                            if (!((MS.Entertainment.Utilities.doesElementSupportKeyboardInput(event.target) || event.target.isContentEditable) && !shortcut.shortcut.allowInEditControls))
                                shortcut.action.execute()
                        }
                    }, _registeredShortcuts: [], _keyModifiers: null, _windowEvents: null, _documentEvents: null, dispose: function dispose() {
                        if (this._windowEvents) {
                            this._windowEvents.cancel();
                            this._windowEvents = null
                        }
                        if (this._documentEvents) {
                            this._documentEvents.cancel();
                            this._documentEvents = null
                        }
                    }, registerShortcut: function registerShortcut(shortcut, action) {
                        if (shortcut && shortcut.key && action) {
                            var registered = this._checkShortcutRegistration(shortcut);
                            if (registered === -1)
                                this._registeredShortcuts.push({
                                    shortcut: shortcut, action: action
                                });
                            else
                                Trace.fail("Shortcut already registered " + shortcut.key)
                        }
                        else {
                            Trace.assert(shortcut, "Invalid shortcut, shortcut variable is falsy");
                            Trace.assert(action, "Invalid shortcut, action variable is falsy")
                        }
                    }, unregisterShortcut: function unregisterShortcut(shortcut) {
                        var index = this._checkShortcutRegistration(shortcut);
                        if (index > -1)
                            this._registeredShortcuts.splice(index, 1)
                    }, _checkShortcutRegistration: function _checkShortcutRegistration(shortcut) {
                        var index = -1;
                        var registeredShortcut = null;
                        for (var i = 0; i < this._registeredShortcuts.length; i++) {
                            registeredShortcut = this._registeredShortcuts[i].shortcut;
                            if ((registeredShortcut.alt === shortcut.alt) && (registeredShortcut.ctrl === shortcut.ctrl) && (registeredShortcut.shift === shortcut.shift) && (registeredShortcut.key === shortcut.key)) {
                                index = i;
                                break
                            }
                        }
                        return index
                    }
            }, {
                _instance: null, instance: {get: function() {
                            if (!MS.Entertainment.Framework.KeyboardShortcutHandler._instance)
                                MS.Entertainment.Framework.KeyboardShortcutHandler._instance = new MS.Entertainment.Framework.KeyboardShortcutHandler;
                            return MS.Entertainment.Framework.KeyboardShortcutHandler._instance
                        }}
            })
    });
    var shortcutManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shortcutManager);
    shortcutManager.registerShortcutCategoryHandler(MS.Entertainment.Framework.ShortcutCategory.keyboardShortcut, MS.Entertainment.Framework.KeyboardShortcutHandler.instance)
})()
})();
/* >>>>>>/framework/networkstatusservice.js:29883 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            var NetworkStatusService = (function(_super) {
                    __extends(NetworkStatusService, _super);
                    function NetworkStatusService() {
                        _super.call(this);
                        this._approachingDataLimit = false;
                        this._networkStatusChangedBinding = null;
                        this._overLimit = false;
                        this._uiStateService = null;
                        this._offlineDelayPromise = null;
                        this._offlineDelayTimerInMS = 5000;
                        this._networkedFeatureStatusTable = null;
                        this._lastNotificationId = "-1";
                        this._uiStateService = Entertainment.ServiceLocator.getService(Entertainment.Services.uiState);
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        if (configurationManager.shell.retailExperience || configurationManager.shell.mockNetworkStatusOffline)
                            this._uiStateService.networkStatus = 5;
                        else
                            this._startListening();
                        this._initializeNetworkedFeaturesTable()
                    }
                    Object.defineProperty(NetworkStatusService.prototype, "approachingDataLimit", {
                        get: function() {
                            return this._approachingDataLimit
                        }, set: function(value) {
                                this.updateAndNotify("approachingDataLimit", value)
                            }, enumerable: true, configurable: true
                    });
                    NetworkStatusService.isOnline = function() {
                        var isOnline = true;
                        switch (Entertainment.ServiceLocator.getService(Entertainment.Services.uiState).networkStatus) {
                            case null:
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                isOnline = true;
                                break;
                            case 4:
                            case 5:
                                isOnline = false;
                                break;
                            default:
                                UI.fail("Current network state is not a valid MS.Entertainment.UI.NetworkStatusService.NetworkStatus value.")
                        }
                        return isOnline
                    };
                    NetworkStatusService.prototype.isEnabled = function(feature) {
                        Entertainment.Utilities.validateIsMemberOrThrow(feature, NetworkStatusService.NetworkedFeature);
                        var networkStatus = !this._uiStateService.networkStatus ? 5 : this._uiStateService.networkStatus;
                        var featureStatusArray = this._networkedFeatureStatusTable[feature];
                        UI.assert(featureStatusArray, "Unknown feature");
                        UI.assert(featureStatusArray[networkStatus] !== undefined, "Unknown network status for this feature");
                        return featureStatusArray ? featureStatusArray[networkStatus] : false
                    };
                    NetworkStatusService.prototype.dispose = function() {
                        if (this._networkStatusChangedBinding) {
                            this._networkStatusChangedBinding.cancel();
                            this._networkStatusChangedBinding = null
                        }
                    };
                    NetworkStatusService.prototype._initializeNetworkedFeaturesTable = function() {
                        this._networkedFeatureStatusTable = {};
                        var musicMarketplace = {};
                        musicMarketplace[0] = true;
                        musicMarketplace[1] = true;
                        musicMarketplace[2] = true;
                        musicMarketplace[3] = false;
                        musicMarketplace[4] = false;
                        musicMarketplace[5] = false;
                        this._networkedFeatureStatusTable[0] = musicMarketplace;
                        var videoMarketplace = {};
                        videoMarketplace[0] = true;
                        videoMarketplace[1] = true;
                        videoMarketplace[2] = true;
                        videoMarketplace[3] = false;
                        videoMarketplace[4] = false;
                        videoMarketplace[5] = false;
                        this._networkedFeatureStatusTable[1] = videoMarketplace
                    };
                    NetworkStatusService.prototype._startListening = function() {
                        var _this = this;
                        this._networkStatusChangedBinding = Entertainment.Utilities.addEventHandlers(Windows.Networking.Connectivity.NetworkInformation, {networkstatuschanged: function() {
                                return _this._onNetworkStatusChanged()
                            }});
                        this._updateNetworkStatus(true)
                    };
                    NetworkStatusService.prototype._onNetworkStatusChanged = function() {
                        this._updateNetworkStatus(false)
                    };
                    NetworkStatusService.prototype._updateNetworkStatus = function(immediateStatusUpdate) {
                        var _this = this;
                        if (Entertainment.Utilities.isApp2) {
                            this._uiStateService.networkStatus = 1;
                            return
                        }
                        if (this._offlineDelayPromise) {
                            this._offlineDelayPromise.cancel();
                            this._offlineDelayPromise = null
                        }
                        var internetProfile = null;
                        try {
                            internetProfile = Windows.Networking.Connectivity.NetworkInformation.getInternetConnectionProfile()
                        }
                        catch(e) {
                            UI.fail("Exception accessing: NetworkInformation.getInternetConnectionProfile: " + e.toString())
                        }
                        if (!internetProfile) {
                            if (immediateStatusUpdate)
                                this._uiStateService.networkStatus = 5;
                            else
                                this._offlineDelayPromise = WinJS.Promise.timeout(this._offlineDelayTimerInMS).then(function() {
                                    return _this._uiStateService.networkStatus = 5
                                });
                            return
                        }
                        var stringId = String.empty;
                        var raiseNotification = false;
                        var isCritical = false;
                        try {
                            switch (internetProfile.getNetworkConnectivityLevel()) {
                                case Windows.Networking.Connectivity.NetworkConnectivityLevel.none:
                                    this._uiStateService.networkStatus = 5;
                                    break;
                                case Windows.Networking.Connectivity.NetworkConnectivityLevel.localAccess:
                                case Windows.Networking.Connectivity.NetworkConnectivityLevel.constrainedInternetAccess:
                                    this._uiStateService.networkStatus = 4;
                                    stringId = String.id.IDS_NETWORK_STATUS_LOCAL_ONLY;
                                    raiseNotification = false;
                                    break;
                                case Windows.Networking.Connectivity.NetworkConnectivityLevel.internetAccess:
                                    var connectionCost = internetProfile.getConnectionCost();
                                    try {
                                        this.approachingDataLimit = connectionCost.approachingDataLimit;
                                        switch (connectionCost.networkCostType) {
                                            case Windows.Networking.Connectivity.NetworkCostType.unknown:
                                            case Windows.Networking.Connectivity.NetworkCostType.unrestricted:
                                                this._uiStateService.networkStatus = 1;
                                                break;
                                            case Windows.Networking.Connectivity.NetworkCostType.fixed:
                                            case Windows.Networking.Connectivity.NetworkCostType.variable:
                                                if (connectionCost.overDataLimit) {
                                                    this._uiStateService.networkStatus = 3;
                                                    stringId = String.id.IDS_NETWORK_STATUS_OVER_THE_LIMIT;
                                                    raiseNotification = true;
                                                    isCritical = true
                                                }
                                                else if (connectionCost.roaming) {
                                                    this._uiStateService.networkStatus = 3;
                                                    stringId = String.id.IDS_NETWORK_STATUS_ROAMING;
                                                    raiseNotification = true;
                                                    isCritical = true
                                                }
                                                else {
                                                    this._uiStateService.networkStatus = 2;
                                                    stringId = String.id.IDS_NETWORK_STATUS_THROTTLED;
                                                    raiseNotification = true
                                                }
                                                break;
                                            default:
                                                UI.assert(false, "Unknown ConnectivityLevel");
                                                this._uiStateService.networkStatus = 0;
                                                stringId = String.empty;
                                                break
                                        }
                                    }
                                    catch(e) {
                                        UI.fail("Exception accessing: networkCostType: " + e.toString());
                                        this._uiStateService.networkStatus = 0;
                                        stringId = String.empty
                                    }
                                    break;
                                default:
                                    this._uiStateService.networkStatus = 0;
                                    stringId = String.empty;
                                    break
                            }
                        }
                        catch(e) {
                            UI.fail("Exception accessing: Windows.Networking.Connectivity.NetworkConnectivityLevel: " + e.toString());
                            this._uiStateService.networkStatus = 5
                        }
                        if (this._uiStateService.networkStatus)
                            this._sendTelemetry(this._uiStateService.networkStatus);
                        if (raiseNotification)
                            this._sendNotification(stringId, isCritical);
                        else
                            this._lastNotificationId = stringId
                    };
                    NetworkStatusService.prototype._sendTelemetry = function(status) {
                        var telemetryParameterArray = [{
                                    parameterName: Entertainment.Utilities.Telemetry.TelemetryParameterNames.NetworkStatus, parameterValue: NetworkStatusService.NetworkStatus[status]
                                }];
                        Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(Entertainment.Utilities.Telemetry.TelemetryEvents.NetworkService, telemetryParameterArray)
                    };
                    NetworkStatusService.prototype._sendNotification = function(stringId, isCritical) {
                        if (stringId === this._lastNotificationId)
                            return;
                        var appNotificationService = Entertainment.ServiceLocator.getService(Entertainment.Services.appNotification);
                        appNotificationService.removeNotificationByCategory(NetworkStatusService._notificationCategory);
                        this._lastNotificationId = stringId;
                        appNotificationService.send(new UI.Notification({
                            notificationType: isCritical ? UI.Notification.Type.Critical : UI.Notification.Type.Informational, title: String.load(String.id.IDS_NETWORK_STATUS_HEADER), subTitle: String.load(stringId), moreDetails: null, icon: UI.Icon.inlineStreaming, action: null, category: NetworkStatusService._notificationCategory, isPersistent: !!isCritical
                        }))
                    };
                    NetworkStatusService._notificationCategory = "networkStatus";
                    return NetworkStatusService
                })(UI.Framework.ObservableBase);
            UI.NetworkStatusService = NetworkStatusService;
            (function(NetworkStatusService) {
                (function(NetworkStatus) {
                    NetworkStatus[NetworkStatus["unknown"] = 0] = "unknown";
                    NetworkStatus[NetworkStatus["unrestricted"] = 1] = "unrestricted";
                    NetworkStatus[NetworkStatus["throttled"] = 2] = "throttled";
                    NetworkStatus[NetworkStatus["onDemand"] = 3] = "onDemand";
                    NetworkStatus[NetworkStatus["localOnly"] = 4] = "localOnly";
                    NetworkStatus[NetworkStatus["none"] = 5] = "none"
                })(NetworkStatusService.NetworkStatus || (NetworkStatusService.NetworkStatus = {}));
                var NetworkStatus = NetworkStatusService.NetworkStatus;
                (function(NetworkedFeature) {
                    NetworkedFeature[NetworkedFeature["musicMarketplace"] = 0] = "musicMarketplace";
                    NetworkedFeature[NetworkedFeature["videoMarketplace"] = 1] = "videoMarketplace"
                })(NetworkStatusService.NetworkedFeature || (NetworkStatusService.NetworkedFeature = {}));
                var NetworkedFeature = NetworkStatusService.NetworkedFeature
            })(UI.NetworkStatusService || (UI.NetworkStatusService = {}));
            var NetworkStatusService = UI.NetworkStatusService;
            MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.networkStatus, function() {
                return new NetworkStatusService
            })
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/components/search/typetosearchservice.js:30134 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI", {TypeToSearchService: MS.Entertainment.UI.Framework.define(function() {
            this._handleFocusIn = this._handleFocusIn.bind(this)
        }, {
            _isEnabledForApp: {get: function() {
                    var result = false;
                    if (MS.Entertainment.Utilities.isVideoApp1 || (MS.Entertainment.Utilities.isMusicApp1))
                        result = true;
                    return result
                }}, typeToSearchPropertyName: "showOnKeyboardInput", getTypeToSearchHost: function getTypeToSearchHost() {
                    var host = MS.Entertainment.ViewModels.SearchContractViewModel.getForCurrentView();
                    if (!host)
                        host = {};
                    return host
                }, shouldEnableTypeToSearchForElement: function shouldEnableTypeToSearchForElement(element) {
                    return MS.Entertainment.Utilities.doesElementSupportKeyboardInput(element)
                }, _isListeningForFocus: false, _disabledCount: 0, _listenForFocus: function _listenForFocus() {
                    if (this._isListeningForFocus)
                        return;
                    this._isListeningForFocus = true;
                    document.body.addEventListener("focusin", this._handleFocusIn)
                }, _stopListeningForFocus: function _stopListeningForFocus() {
                    if (!this._isListeningForFocus)
                        return;
                    document.body.removeEventListener("focusin", this._handleFocusIn);
                    this._isListeningForFocus = false
                }, _handleFocusIn: function _handleFocusIn() {
                    if (this.shouldEnableTypeToSearchForElement(document.activeElement))
                        this._suspendTypeToSearch();
                    else
                        this._resumeTypeToSearch()
                }, _suspendTypeToSearch: function _suspendTypeToSearch() {
                    this.getTypeToSearchHost()[this.typeToSearchPropertyName] = false;
                    window.msWriteProfilerMark("ent:TypeToSearch:Suspended")
                }, _resumeTypeToSearch: function _resumeTypeToSearch() {
                    this.getTypeToSearchHost()[this.typeToSearchPropertyName] = true;
                    window.msWriteProfilerMark("ent:TypeToSearch:Resume")
                }, disableTypeToSearch: function disableTypeToSearch() {
                    if (!this._isEnabledForApp)
                        return;
                    this._stopListeningForFocus();
                    this._suspendTypeToSearch();
                    this._disabledCount++;
                    window.msWriteProfilerMark("ent:TypeToSearch:Disabled")
                }, enableTypeToSearch: function enableTypeToSearch() {
                    if (!this._isEnabledForApp)
                        return;
                    if (this._disabledCount > 0) {
                        this._disabledCount--;
                        if (this._disabledCount > 0)
                            return
                    }
                    this._resumeTypeToSearch();
                    window.msWriteProfilerMark("ent:TypeToSearch:Enabled");
                    this._listenForFocus()
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.typeToSearch, function createTypeToSearchService() {
        return new MS.Entertainment.UI.TypeToSearchService
    })
})()
})();
/* >>>>>>/components/shell/appnotification.js:30200 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI");
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI", {
        Notification: WinJS.Class.define(function notificationConstructor(options) {
            var property;
            for (property in options)
                this[property] = options[property]
        }, {
            notificationType: null, title: "", subTitle: "", subTitleCaret: false, moreDetails: "", icon: null, dismissIcon: MS.Entertainment.UI.Icon.close, category: null, isPersistent: false, iconClassName: "", acknowledged: false, visible: true, attachedNotification: null, dismissOnSignOut: false, hideDefaultRing: false, automationId: null, _action: null, _actionParams: null, _actions: null, _actionParamsArray: null, _actionArray: null, _dismissAction: null, _dismissActionObject: null, _dismissActionParams: null, action: {
                    get: function get_action() {
                        return this._action
                    }, set: function set_action(value) {
                            if (this._action !== value) {
                                this._action = value;
                                this._actionArray = null
                            }
                        }
                }, actions: {
                    get: function get_actions() {
                        return this._actions
                    }, set: function set_actions(value) {
                            if (this._actions !== value) {
                                this._actions = value;
                                this._actionArray = null
                            }
                        }
                }, actionParams: {
                    get: function get_actionParams() {
                        return this._actionParams
                    }, set: function set_actionParams(value) {
                            this._actionParams = value;
                            if (this._actionArray && this._actionArray.item(0))
                                this._actionArray.item(0) = value
                        }
                }, actionParamsArray: {
                    get: function get_actionParamsArray() {
                        return this._actionParamsArray
                    }, set: function set_actionParamsArray(value) {
                            this._actionParamsArray = value;
                            if (this._actionArray && this._actionParamsArray)
                                for (var i = 0; i < this._actionParamsArray.length; i++)
                                    if (this._actionParamsArray[i])
                                        WinJS.UI.setOptions(this._actionArray.item(i), this._actionParamsArray[i])
                        }
                }, bindableActionArray: {get: function get_bindableActionArray() {
                        return this.actionArray && this.actionArray.bindableItems
                    }}, actionArray: {
                    get: function get_actionArray() {
                        if (this._actionArray)
                            return this._actionArray;
                        var actions = null;
                        if (this._actions)
                            actions = this._actions;
                        else
                            actions = this._convertToArray(this._action);
                        this._actionArray = new MS.Entertainment.ObservableArray;
                        for (var i = 0; i < actions.length; i++)
                            if (actions[i] && typeof actions[i] === "string") {
                                this._actionArray.push(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(actions[i]));
                                if (this._actionArray.item(i))
                                    if (this._actionParamsArray && this._actionParamsArray[i])
                                        WinJS.UI.setOptions(this._actionArray.item(i), this._actionParamsArray[i]);
                                    else if (this._actionParams)
                                        WinJS.UI.setOptions(this._actionArray.item(i), this._actionParams)
                            }
                        return this._actionArray
                    }, set: function set_actionArray(value) {
                            this._actionArray = value
                        }
                }, dismissAction: {
                    get: function get_action() {
                        return this._dismissAction
                    }, set: function set_action(value) {
                            if (this._dismissAction !== value) {
                                this._dismissAction = value;
                                this._dismissActionObject = null
                            }
                        }
                }, dismissActionParams: {
                    get: function get_dismissActionParamss() {
                        return this._dismissActionParams
                    }, set: function set_dismissActionParams(value) {
                            this._dismissActionParams = value;
                            if (this._dismissActionObject)
                                this._dismissActionObject.parameter = value
                        }
                }, dismissActionObject: {get: function get_dismissActionObject() {
                        if (!this._dismissActionObject && this.dismissAction)
                            this._dismissActionObject = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(this.dismissAction);
                        if (this._dismissActionObject)
                            this._dismissActionObject.parameter = this.dismissActionParams;
                        return this._dismissActionObject
                    }}, toJSON: function toJSON() {
                    var resultObject = {};
                    for (var key in this)
                        if (key && key[0] !== "_" && key !== "toJSON" && key !== "actionArray" && key !== "bindableActionArray" && key !== "dismissActionObject")
                            resultObject[key] = this[key];
                    return resultObject
                }, _convertToArray: function _convertToArray(item) {
                    var array = [];
                    if (!Array.isArray(item) && item)
                        array = [item];
                    return array
                }
        }, {Type: {
                Informational: "Informational", Critical: "Critical"
            }}), AppNotificationService: MS.Entertainment.defineObservable(function AppNotificationServiceConstructor() {
                MS.Entertainment.UI.AppNotificationService._instanceCount++;
                MS.Entertainment.Utilities.assert(MS.Entertainment.UI.AppNotificationService._instanceCount === 1, "Use MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification)");
                this.infoNotifications = new MS.Entertainment.ObservableArray;
                this.criticalNotifications = new MS.Entertainment.ObservableArray;
                this._dismissOnSignOutCategories = [];
                var waitPromise = WinJS.Promise.as();
                if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn))
                    waitPromise = WinJS.Promise.timeout(4000);
                waitPromise.then(function() {
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.signIn))
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).bind("isSignedIn", this._onSignInChange.bind(this))
                }.bind(this))
            }, {
                _dismissOnSignOutCategories: null, infoNotifications: null, _infoNotificationContainer: null, criticalNotifications: null, _criticalNotificationContainer: null, _filterNotification: function _filterNotification(notification) {
                        return MS.Entertainment.Utilities.isApp2 && (notification.notificationType === MS.Entertainment.UI.Notification.Type.Informational)
                    }, send: function send(notification) {
                        if (!notification || this._filterNotification(notification))
                            return;
                        if (!notification.isPersistent)
                            MS.Entertainment.UI.assert(notification.notificationType === MS.Entertainment.UI.Notification.Type.Informational, "Non-persistent notifications must be informational only");
                        if (!notification.category) {
                            MS.Entertainment.UI.assert(!notification.isPersistent, "Expected a category on persistent notifications.");
                            MS.Entertainment.UI.assert(!notification.dismissOnSignOut, "Expected a category on dismiss-on-signout notifications.")
                        }
                        else if (notification.dismissOnSignOut && this._dismissOnSignOutCategories.indexOf(notification.category) < 0)
                            this._dismissOnSignOutCategories.push(notification.category);
                        notification = WinJS.Binding.as(notification);
                        (new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell).traceNotification_NotificationArrived(notification.title);
                        switch (notification.notificationType) {
                            case MS.Entertainment.UI.Notification.Type.Informational:
                                var existingIndex = this._indexOfNotification(this.infoNotifications, notification.category);
                                if (existingIndex >= 0)
                                    if (!notification.isPersistent) {
                                        this.infoNotifications.splice(existingIndex, 1);
                                        this.infoNotifications.push(notification)
                                    }
                                    else {
                                        this.infoNotifications.item(existingIndex).title = notification.title;
                                        this.infoNotifications.item(existingIndex).subTitle = notification.subTitle
                                    }
                                else
                                    this.infoNotifications.push(notification);
                                break;
                            case MS.Entertainment.UI.Notification.Type.Critical:
                                var existingIndex = this._indexOfNotification(this.criticalNotifications, notification.category);
                                if (existingIndex < 0)
                                    this.criticalNotifications.push(notification);
                                break
                        }
                    }, removeNotificationByCategory: function removeNotificationByCategory(category) {
                        var index = this._indexOfNotification(this.criticalNotifications, category);
                        if (index >= 0)
                            this.criticalNotifications.splice(index, 1);
                        index = this._indexOfNotification(this.infoNotifications, category);
                        if (index >= 0)
                            this.infoNotifications.splice(index, 1)
                    }, _indexOfNotification: function _indexOfNotification(queue, category) {
                        if (category)
                            for (var index = 0; index < queue.length; index++) {
                                var notification = queue.item(index);
                                if (notification.category === category)
                                    return index
                            }
                        return -1
                    }, _onSignInChange: function _onSignInChange(isSignedIn) {
                        if (!isSignedIn) {
                            for (var i = 0; i < this._dismissOnSignOutCategories.length; i++)
                                this.removeNotificationByCategory(this._dismissOnSignOutCategories[i]);
                            this._dismissOnSignOutCategories = []
                        }
                    }
            }, {
                factory: function factory() {
                    var appNotificationService = new MS.Entertainment.UI.AppNotificationService;
                    Object.defineProperty(appNotificationService, "infoNotificationContainer", {get: function() {
                            if (!this._infoNotificationContainer)
                                this._infoNotificationContainer = document.querySelector(".infoNotificationContainer");
                            return this._infoNotificationContainer
                        }});
                    Object.defineProperty(appNotificationService, "criticalNotificationContainer", {get: function() {
                            if (!this._criticalNotificationContainer)
                                this._criticalNotificationContainer = document.querySelector(".criticalNotificationContainer");
                            return this._criticalNotificationContainer
                        }});
                    return appNotificationService
                }, _instanceCount: 0
            })
    });
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.appNotification, MS.Entertainment.UI.AppNotificationService.factory);
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {InfoNotification: MS.Entertainment.UI.Framework.defineUserControl("/Components/Shell/appNotification.html#infoNotificationTemplate", function infoNotification(element, options){}, {
            _appNotificationService: null, _navigation: null, _timer: null, _notificationItemTemplate: null, _uiSettings: new Windows.UI.ViewManagement.UISettings, _initialized: false, _selfEventHandlers: null, _webUIApplicationEventHandlers: null, _navigationBindings: null, itemTemplate: "/Components/Shell/appNotification.html#infoNotificationItemTemplate", notificationDataSourcePropertyName: "infoNotifications", initialize: function initialize(){}, delayedInitialize: function delayedInitialize() {
                    return MS.Entertainment.UI.Framework.loadTemplate(this.itemTemplate).then(function(templateProvider) {
                            this._notificationItemTemplate = templateProvider.element;
                            this._appNotificationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification);
                            this._onPropertyChange = this._onPropertyChange.bind(this);
                            this._onDataSourceChanged = this._onDataSourceChanged.bind(this);
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                                this._navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                this._navigationBindings = WinJS.Binding.bind(this._navigation, {currentPage: this._onPropertyChange})
                            }
                            this._selfEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {keydown: this.onKeyDown.bind(this)});
                            this.notificationContainer.itemTemplate = this._notificationItemTemplate;
                            this._appNotificationService[this.notificationDataSourcePropertyName].addChangeListener(this._onDataSourceChanged);
                            this._initialized = true;
                            this.notificationContainer.dataSource = this._appNotificationService[this.notificationDataSourcePropertyName]
                        }.bind(this))
                }, onKeyDown: function onKeyDown(event) {
                    if (event.keyCode === WinJS.Utilities.Key.enter || event.keyCode === WinJS.Utilities.Key.space)
                        this.onItemClick(event)
                }, _playTransitionAnimation: function _playTransitionAnimation(element) {
                    var incomingPageMove = {
                            left: "60px", top: "0px"
                        };
                    element.style.left = "0px";
                    element.style.top = "0px";
                    element.style.opacity = 0.0;
                    return WinJS.UI.Animation.enterContent(element, [incomingPageMove], {mechanism: "transition"})
                }, _onTimerHandler: function _onTimerHandler() {
                    if (this._appNotificationService[this.notificationDataSourcePropertyName].length === 1) {
                        var item = this._appNotificationService.infoNotifications.item(0);
                        if (item.isPersistent) {
                            this._resetTimer();
                            return
                        }
                    }
                    var elements = this.notificationContainer.domElement.querySelectorAll(".win-template");
                    var currentElement = elements[0];
                    var nextElement = elements[1];
                    if (currentElement)
                        WinJS.UI.Animation.fadeOut(currentElement).done(function() {
                            var item = this._appNotificationService.infoNotifications.shift();
                            if (item && item.isPersistent)
                                this._appNotificationService[this.notificationDataSourcePropertyName].push(item);
                            if (nextElement)
                                this._playTransitionAnimation(nextElement)
                        }.bind(this));
                    if (this._appNotificationService.infoNotifications.length > 0)
                        this._resetTimer();
                    else {
                        window.clearTimeout(this._timer);
                        this._timer = null
                    }
                }, _resetTimer: function _restartTimer() {
                    window.clearTimeout(this._timer);
                    var notificationTimeoutMs = this._uiSettings.messageDuration * 1000;
                    this._timer = window.setTimeout(function() {
                        this._onTimerHandler()
                    }.bind(this), notificationTimeoutMs)
                }, _shouldHideNotifications: function _shouldHideNotifications() {
                    var notificationVisibility = ((this._appNotificationService[this.notificationDataSourcePropertyName].length > 0) && this._initialized);
                    if (this._navigation && this._navigation.currentPage)
                        notificationVisibility = notificationVisibility && this._navigation.currentPage.showNotifications;
                    return !notificationVisibility
                }, _onDataSourceChanged: function _onDataSourceChanged() {
                    this.hideNotifications = this._shouldHideNotifications();
                    if (!this.hideNotifications)
                        if (this.notificationDataSourcePropertyName === "infoNotifications")
                            if (!this._timer)
                                this._resetTimer();
                    this._updateLiveRegionContainer()
                }, _updateLiveRegionContainer: function _updateLiveRegionContainer() {
                    WinJS.Promise.timeout(300).then(function() {
                        var items = this.notificationContainer.domElement.querySelectorAll(".notificationContent");
                        if (items && items[0] && this._liveRegionContainer && this._buttonContainer) {
                            this._buttonContainer.removeChild(this._liveRegionContainer);
                            this._liveRegionContainer = document.createElement("div");
                            WinJS.Utilities.addClass(this._liveRegionContainer, "removeFromDisplay");
                            this._liveRegionContainer.setAttribute("role", "tooltip");
                            this._liveRegionContainer.setAttribute("aria-live", "polite");
                            this._buttonContainer.appendChild(this._liveRegionContainer);
                            this._liveRegionContainer.setAttribute("aria-label", items[0].textContent)
                        }
                    }.bind(this))
                }, unload: function unload() {
                    if (this._selfEventHandlers) {
                        this._selfEventHandlers.cancel();
                        this._selfEventHandlers = null
                    }
                    if (this._appNotificationService && this._appNotificationService.infoNotifications)
                        this._appNotificationService.infoNotifications.removeChangeListener(this._onDataSourceChanged);
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, onItemClick: function onItemClick(event) {
                    if (this._appNotificationService.infoNotifications.length <= 0)
                        return;
                    var currentItem = this._appNotificationService.infoNotifications.item(0);
                    if (currentItem && currentItem.action) {
                        if (currentItem.action.execute)
                            currentItem.action.execute();
                        else if (typeof currentItem.action === "function")
                            currentItem.action();
                        return
                    }
                }, _onPropertyChange: function _onPropertyChange() {
                    if (this._appNotificationService[this.notificationDataSourcePropertyName]) {
                        var dataSource = this._appNotificationService[this.notificationDataSourcePropertyName];
                        if (dataSource !== this.notificationContainer.dataSource)
                            this.notificationContainer.dataSource = this._appNotificationService[this.notificationDataSourcePropertyName]
                    }
                    this.hideNotifications = this._shouldHideNotifications();
                    if (!this.hideNotifications)
                        if (this.notificationDataSourcePropertyName === "infoNotifications")
                            if (!this._timer)
                                this._resetTimer()
                }
        }, {hideNotifications: true})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {CriticalNotification: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.InfoNotification", "/Components/Shell/appNotification.html#criticalNotificationTemplate", function criticalNotification(element, options){}, {
            itemTemplate: "/Components/Shell/appNotification.html#criticalNotificationItemTemplate", notificationDataSourcePropertyName: "criticalNotifications", _criticalSelfEventHandlers: null, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.InfoNotification.prototype.initialize.call(this)
                }, unload: function unload() {
                    MS.Entertainment.UI.Controls.InfoNotification.prototype.unload.call(this);
                    if (this._criticalSelfEventHandlers) {
                        this.this._criticalSelfEventHandlers.cancel();
                        this.this._criticalSelfEventHandlers = null
                    }
                }, onItemClick: function onItemClick(event) {
                    var currentItem = this._appNotificationService.criticalNotifications.item(0);
                    var item = this._appNotificationService.criticalNotifications.shift();
                    if (item && item.action) {
                        item.action();
                        (new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell).traceNotification_NotificationClicked(item.title)
                    }
                }
        })})
})()
})();
/* >>>>>>/controls/video_win/devicelimiterror.js:30537 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Video) {
                var DeviceLimitErrorDialog = (function(_super) {
                        __extends(DeviceLimitErrorDialog, _super);
                        function DeviceLimitErrorDialog(element, options) {
                            this.templateStorage = "/Controls/Video_Win/DeviceLimitError.html";
                            this.templateName = "deviceLimitErrorDialog";
                            this._actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            _super.call(this, element, options)
                        }
                        DeviceLimitErrorDialog.prototype.initialize = function(){};
                        DeviceLimitErrorDialog.prototype.showDevicesClicked = function(e) {
                            if (e && e.keyCode && !(e.keyCode === WinJS.Utilities.Key.enter || e.keyCode === WinJS.Utilities.Key.space))
                                return;
                            var externalNavigationAction = this._actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.externalNavigate);
                            externalNavigationAction.parameter = "http://go.microsoft.com/fwlink/?LinkId=614900&ref=videosetting";
                            externalNavigationAction.automationId = MS.Entertainment.UI.AutomationIds.deviceDomainShowDevices;
                            externalNavigationAction.execute()
                        };
                        DeviceLimitErrorDialog._handleFileTransferNotification = function(notification) {
                            if (notification.transferType !== MS.Entertainment.UI.FileTransferType.download)
                                return;
                            var taskStatus = notification.task.taskStatus;
                            var shouldUnregister = (taskStatus === Microsoft.Entertainment.FileTransferStatus.error || taskStatus === Microsoft.Entertainment.FileTransferStatus.canceled || taskStatus === Microsoft.Entertainment.FileTransferStatus.completed);
                            if (shouldUnregister) {
                                var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                                fileTransferService.unregisterListener(MS.Entertainment.UI.Video.DeviceLimitErrorDialog._deviceLimitNotificationListenerId)
                            }
                            if (taskStatus === Microsoft.Entertainment.FileTransferStatus.error && notification.task.responseCode === MS.Entertainment.UI.Video.DeviceLimitErrorDialog.DEVICEGROUP_MAX_DEVICES_REACHED)
                                MS.Entertainment.UI.Video.DeviceLimitErrorDialog.showDeviceLimitErrorDialog()
                        };
                        DeviceLimitErrorDialog.listenForDownloadNotification = function() {
                            var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                            fileTransferService.registerListener(MS.Entertainment.UI.Video.DeviceLimitErrorDialog._deviceLimitNotificationListenerId, MS.Entertainment.Framework.DownloadInfo.getMarketplaceDownloadTaskKeyFunction(Microsoft.Entertainment.Queries.ObjectType.video), null, {
                                add: MS.Entertainment.UI.Video.DeviceLimitErrorDialog._handleFileTransferNotification, pending: MS.Entertainment.UI.Video.DeviceLimitErrorDialog._handleFileTransferNotification, update: MS.Entertainment.UI.Video.DeviceLimitErrorDialog._handleFileTransferNotification, complete: MS.Entertainment.UI.Video.DeviceLimitErrorDialog._handleFileTransferNotification, error: MS.Entertainment.UI.Video.DeviceLimitErrorDialog._handleFileTransferNotification, cancel: MS.Entertainment.UI.Video.DeviceLimitErrorDialog._handleFileTransferNotification
                            }, this)
                        };
                        DeviceLimitErrorDialog.showDeviceLimitErrorDialog = function() {
                            if (MS.Entertainment.UI.Video.DeviceLimitErrorDialog._isDialogOpen)
                                return WinJS.Promise.wrap();
                            MS.Entertainment.UI.Video.DeviceLimitErrorDialog._isDialogOpen = true;
                            var controlOptions = {
                                    defaultButtonIndex: -1, cancelButtonIndex: 1, persistOnNavigate: true, buttons: [WinJS.Binding.as({
                                                title: String.load(String.id.IDS_VIDEO_TH_DEVICEDOMAIN_HELP_LINK), execute: function(d) {
                                                        var externalNavigationAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.externalNavigate);
                                                        externalNavigationAction.parameter = "http://go.microsoft.com/fwlink/?LinkId=532939";
                                                        externalNavigationAction.automationId = MS.Entertainment.UI.AutomationIds.deviceDomainHelpPage;
                                                        externalNavigationAction.execute();
                                                        MS.Entertainment.UI.Video.DeviceLimitErrorDialog._isDialogOpen = false;
                                                        d.hide()
                                                    }
                                            }), WinJS.Binding.as({
                                                title: String.load(String.id.IDS_VIDEO_TH_DEVICEDOMAIN_REGISTEREDDEVICES_CLOSE_BUTTON), execute: function(d) {
                                                        MS.Entertainment.UI.Video.DeviceLimitErrorDialog._isDialogOpen = false;
                                                        d.hide()
                                                    }
                                            })]
                                };
                            return MS.Entertainment.UI.Shell.showDialog(String.load(String.id.IDS_VIDEO_TH_DEVICEDOMAIN_DEVICELIMIT_ERROR_HEADER), "MS.Entertainment.UI.Video.DeviceLimitErrorDialog", controlOptions).done(null, function(error) {
                                    MS.Entertainment.fail("Error showing Device Limit Error Dialog: " + (error && error.message))
                                })
                        };
                        DeviceLimitErrorDialog.DEVICEGROUP_MAX_DEVICES_REACHED = 0xC3380262;
                        DeviceLimitErrorDialog._deviceLimitNotificationListenerId = "DeviceLimitDialogListener_" + MS.Entertainment.Utilities.getSessionUniqueInteger();
                        return DeviceLimitErrorDialog
                    })(MS.Entertainment.UI.Framework.UserControl);
                Video.DeviceLimitErrorDialog = DeviceLimitErrorDialog;
                WinJS.Utilities.markSupportedForProcessing(DeviceLimitErrorDialog)
            })(UI.Video || (UI.Video = {}));
            var Video = UI.Video
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/coreapplication.js:30629 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Shell) {
                var fx = MS.Entertainment.UI.Framework;
                var utils = MS.Entertainment.Utilities;
                var lightDismissLimit = 1024;
                var stateCollapsedClass = "state-collapsed";
                var stateExpandedClass = "state-expanded";
                var collapsedNavBarWidth = 90;
                var CoreApplication = (function(_super) {
                        __extends(CoreApplication, _super);
                        function CoreApplication() {
                            _super.apply(this, arguments);
                            this.clearLastActivatedEventArgsAfterHandling = true;
                            this._activated = false;
                            this._isPrelaunched = false;
                            this._navPaneToggleState = false;
                            this._wasRecentlyResumed = false;
                            this._snappedWatcher = null;
                            this._windowShrinksMediaMatch = null;
                            this.delayInitializationComplete = false;
                            this.setStageThreeCompletedOnFirstPage = true;
                            this.skipNotificationInitialization = false;
                            this._clearQueryAfterSearch = true;
                            this.hideMenuAriaLabelStringId = String.id.IDS_NAV_PANE_HIDE_MENU;
                            this.showMenuAriaLabelStringId = String.id.IDS_NAV_PANE_SHOW_MENU;
                            this.loadAppBar = true;
                            this.updateBranding = true;
                            this.snappedModeMaxWidthPx = 479
                        }
                        Object.defineProperty(CoreApplication.prototype, "marketPlaceEnabled", {
                            get: function() {
                                return false
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(CoreApplication.prototype, "defaultPivotIndex", {
                            get: function() {
                                return 0
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(CoreApplication.prototype, "minAppSupportedVersion", {
                            get: function() {
                                MS.Entertainment.UI.Actions.fail("minAppSupportedVersion() should be overrided by subclass");
                                return "1.0.0.0"
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(CoreApplication.prototype, "minServiceSupportedVersion", {
                            get: function() {
                                MS.Entertainment.UI.Actions.fail("minServiceSupportedVersion() should be overrided by subclass");
                                return "1.0.0.0"
                            }, enumerable: true, configurable: true
                        });
                        CoreApplication.prototype.afterAppReady = function(){};
                        CoreApplication.prototype.afterProcessAllCompleted = function(){};
                        CoreApplication.prototype.afterAppBarReady = function(){};
                        CoreApplication.prototype.beforeUICreation = function(){};
                        CoreApplication.prototype.getAppTitle = function() {
                            MS.Entertainment.UI.Actions.fail("getAppTitle() should be overrided by subclass");
                            return String.empty
                        };
                        CoreApplication.prototype.getAppPivots = function() {
                            MS.Entertainment.UI.Actions.fail("getAppPivots() should be overrided by subclass");
                            return []
                        };
                        CoreApplication.prototype.onNavPaneFirstTimeRender = function(){};
                        CoreApplication.prototype.onPrimaryPivotsSelectionChange = function(newPivot){};
                        CoreApplication.prototype.beforeProtocolProcessPromise = function(deepLink) {
                            return null
                        };
                        CoreApplication.prototype.afterProtocolProcessed = function(deepLink, requiredDependencies){};
                        CoreApplication.prototype.beforeAppActivation = function(){};
                        CoreApplication.prototype.beforeAppActivationHandling = function(){};
                        CoreApplication.prototype.beforeSearchActivation = function(){};
                        CoreApplication.prototype.handleFileActivation = function(isFirstRun, args) {
                            return false
                        };
                        Object.defineProperty(CoreApplication.prototype, "isNavPaneAnimating", {
                            get: function() {
                                return !!this._animatingNavBarPromise
                            }, enumerable: true, configurable: true
                        });
                        CoreApplication.prototype.afterSnappedSet = function(isSnapped){};
                        CoreApplication.prototype.beforeDelayInitializeCompletes = function(){};
                        CoreApplication.prototype.afterAppResume = function(){};
                        CoreApplication.prototype.afterAppSuspends = function(e){};
                        CoreApplication.prototype.getDeeplinkUri = function(args) {
                            var deeplinkUri = args.uri;
                            if (!deeplinkUri && args.arguments)
                                try {
                                    deeplinkUri = new Windows.Foundation.Uri(this.appProtocolName + "://" + args.arguments)
                                }
                                catch(e) {
                                    MS.Entertainment.fail("Failed to create a URI from an argument: " + (e && e.message));
                                    return null
                                }
                            return deeplinkUri
                        };
                        CoreApplication.prototype.getStartedFromParamForProtocolActivation = function(args) {
                            var deeplinkUri = args.uri;
                            var startedFrom;
                            if (!deeplinkUri && args.arguments) {
                                var tile = args.tileId;
                                if (tile)
                                    startedFrom = "Pin";
                                else
                                    startedFrom = "Tile"
                            }
                            else
                                startedFrom = "Deeplink";
                            return startedFrom
                        };
                        Object.defineProperty(CoreApplication.prototype, "configurationManager", {
                            get: function() {
                                if (!this._configurationManager)
                                    this._configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                return this._configurationManager
                            }, enumerable: true, configurable: true
                        });
                        CoreApplication.prototype.getSavedNavigationMonikerData = function() {
                            return this.configurationManager.shell.lastUsedAppNavigationMonikerData
                        };
                        CoreApplication.prototype.setSavedNavigationMonikerData = function(value) {
                            this.configurationManager.shell.lastUsedAppNavigationMonikerData = value
                        };
                        CoreApplication.prototype.saveCurrentNavigationMonikerData = function() {
                            var monikerData = this.navigation.currentMonikerData;
                            if (monikerData)
                                this.setSavedNavigationMonikerData(monikerData.toString())
                        };
                        CoreApplication.prototype.clearNavigationMonikerData = function() {
                            this.setSavedNavigationMonikerData(String.empty)
                        };
                        CoreApplication.prototype.navigateToInitialPage = function() {
                            var savedMonikerData = this.getSavedNavigationMonikerData();
                            var validMonikerData = false;
                            if (savedMonikerData)
                                this.getAppPivots().forEach(function(item, index) {
                                    if (item.moniker === savedMonikerData)
                                        validMonikerData = true
                                });
                            if (validMonikerData) {
                                this.navigation.navigateToMoniker(savedMonikerData);
                                this.clearNavigationMonikerData()
                            }
                            else
                                this._navigateToDefault()
                        };
                        Object.defineProperty(CoreApplication.prototype, "applicationLifetimeManager", {
                            get: function() {
                                if (!this._applicationLifetimeManager)
                                    this._applicationLifetimeManager = new Microsoft.Entertainment.ApplicationLifetimeManager;
                                return this._applicationLifetimeManager
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(CoreApplication.prototype, "commonTraceProvider", {
                            get: function() {
                                if (!this._commonTraceProvider)
                                    this._commonTraceProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Common;
                                return this._commonTraceProvider
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(CoreApplication.prototype, "telemetryManager", {
                            get: function() {
                                if (!this._telemetryManager)
                                    this._telemetryManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.userTimeTelemetryManager);
                                return this._telemetryManager
                            }, enumerable: true, configurable: true
                        });
                        CoreApplication.prototype.initialize = function() {
                            var _this = this;
                            WinJS.strictProcessing();
                            WinJS.Binding.optimizeBindingReferences = true;
                            MS.Entertainment.Utilities.updateHtmlDirectionAttribute();
                            fx.enableAutoControlCleanup();
                            WinJS.Application.onerror = MS.Entertainment.UI.Debug.unhandledPromiseErrorHandler;
                            var webUI = Windows.UI.WebUI.WebUIApplication;
                            this._webUIEvents,
                            fx.addEventHandlers(webUI, {
                                activated: this.activated.bind(this), suspending: this.suspending.bind(this), resuming: this.resuming.bind(this)
                            });
                            this._windowEvents = fx.addEventHandlers(window, {unload: this.unload.bind(this)});
                            this._documentEvents = fx.addEventHandlers(document, {
                                visibilitychange: this.visibilityChanged.bind(this), dragstart: function(e) {
                                        if (e.target.tagName === "IMG")
                                            e.preventDefault()
                                    }
                            });
                            MS.Entertainment.Utilities.systemAppListenersAttached = true;
                            this.beforeUICreation();
                            this.startupBindingProcessed = new MS.Entertainment.UI.Framework.Signal;
                            window.msWriteProfilerMark("ent:Startup.ControlsProcessedAndDataBound,StartTM");
                            MS.Entertainment.Utilities.processAllOnDocumentLoaded(document.body, this).done(function() {
                                window.msWriteProfilerMark("ent:Startup.ControlsProcessedAndDataBound,StopTM");
                                _this.afterProcessAllCompleted();
                                if (_this.updateBranding)
                                    _this._updateBranding();
                                _this.initializeControlEventHandlers();
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                MS.Entertainment.UI.Framework.flags.attachCookieToRemovedDomElements = configurationManager.shell.attachCookieToRemovedDomElements;
                                MS.Entertainment.UI.Framework.flags.attachLargeObjectToUnloadedControl = configurationManager.shell.attachLargeObjectToUnloadedControl;
                                _this.startupBindingProcessed.complete()
                            })
                        };
                        CoreApplication.prototype._updateBranding = function() {
                            var titleElement = document.querySelector("[data-ent-member=_appTitleLabel]");
                            var navPaneHeader = document.querySelector("[data-ent-member=_navPaneHeader]");
                            if (!(titleElement && navPaneHeader)) {
                                MS.Entertainment.fail("Unable to get branding elements. Something very bad is happening");
                                return
                            }
                            if (!this.marketPlaceEnabled)
                                WinJS.Utilities.addClass(navPaneHeader, "navpane-noMarketplace");
                            titleElement.textContent = this.getAppTitle()
                        };
                        CoreApplication.prototype._loadDelayedInitFragment = function(critical) {
                            var delayedStartupContainer = document.getElementById("delayedStartupContainer");
                            if (!this._delayedInitFragmentPromise) {
                                var signal = new MS.Entertainment.UI.Framework.Signal;
                                this._delayedInitFragmentPromise = signal.promise;
                                msWriteProfilerMark("ent:loadDelayedInitFragment,StartTM");
                                var loadDelayedInitFragment = function() {
                                        msWriteProfilerMark("ent:loadDelayedInitFragment,StopTM");
                                        MS.Entertainment.Utilities.loadHtmlPage("/delayedStageThreeStartup.html", delayedStartupContainer).then(function() {
                                            signal.complete()
                                        })
                                    };
                                if (!critical)
                                    MS.Entertainment.Utilities.schedulePromiseIdle().done(function() {
                                        loadDelayedInitFragment()
                                    });
                                else
                                    loadDelayedInitFragment()
                            }
                            return this._delayedInitFragmentPromise
                        };
                        CoreApplication.prototype.delayInitializeApplication = function() {
                            var _this = this;
                            if (!this._delayedInitPromise)
                                this._delayedInitPromise = this._loadDelayedInitFragment().then(function() {
                                    _this._delayInitializeWork()
                                });
                            return this._delayedInitPromise
                        };
                        CoreApplication.prototype.activated = function(args, wasPreviouslyPrelaunched) {
                            var _this = this;
                            this.lastActivatedEventArgs = utils.cloneActivationArguments(args);
                            var kind;
                            var isFirstRun = !this._activated;
                            try {
                                kind = args.kind
                            }
                            catch(e) {
                                var error = e && e.detail && e.detail.error;
                                var description = e && e.detail && e.detail.exception.toString();
                                MS.Entertainment.fail("Exception while trying to determine the activation kind. Error exception was:" + description + "." + "\n Error was:" + error);
                                MS.Entertainment.Instrumentation.PerfTrack.disableAllStartupScenarios();
                                return
                            }
                            var startTime;
                            if (!wasPreviouslyPrelaunched && args.prelaunchActivated) {
                                this._handlePrelaunch();
                                return
                            }
                            if (args.arguments === MS.Entertainment.Utilities.retailExperienceArgument)
                                MS.Entertainment.Utilities.setRetailExperienceState(true);
                            if (window.sessionStorage["NewAppNavigated"] !== "true" && !wasPreviouslyPrelaunched)
                                this.applicationLifetimeManager.raiseActivated(args);
                            if (this._activated)
                                this.telemetryManager.appActivated();
                            if (!this._activated) {
                                MS.Entertainment.Framework.KeyboardInteractionListener.init();
                                WinJS.Application.start();
                                this.commonTraceProvider.traceProcessInitializeEventStart();
                                startTime = new Date;
                                this._app = new Microsoft.Entertainment.Application.Application;
                                this._app.init(Microsoft.Entertainment.Application.ExecMode.foreground);
                                this.beforeAppActivation();
                                this._appInitDuration = (new Date).valueOf() - startTime.valueOf();
                                this._activated = true;
                                var deferSplashScreen;
                                if (args.activatedOperation)
                                    deferSplashScreen = args.activatedOperation.getDeferral();
                                this._contentContainerEvents = MS.Entertainment.UI.Framework.addEventHandlers(this.navigation.contentContainer, {ContentComplete: this._waitForFirstPageCompleted.bind(this)});
                                this.startupBindingProcessed.promise.done(function() {
                                    if (deferSplashScreen)
                                        deferSplashScreen.complete()
                                })
                            }
                            this.beforeAppActivationHandling();
                            var dataPoint = new Microsoft.Entertainment.Platform.Logging.DataPoint(Microsoft.Entertainment.Platform.Logging.LoggingLevel.telemetry, Microsoft.Entertainment.Platform.Logging.TelemetryAuthMethod.unauthenticated);
                            dataPoint.appendEventName("X8Run");
                            dataPoint.appendParameter("ClientResolution", window.screen.width + "x" + window.screen.height);
                            if (kind === Windows.ApplicationModel.Activation.ActivationKind.launch && !args.url && args.arguments)
                                kind = Windows.ApplicationModel.Activation.ActivationKind.protocol;
                            MS.Entertainment.Utilities.schedulePromiseIdle().done(function() {
                                _this._handleVersionChecks()
                            });
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).activationKind = kind;
                            switch (kind) {
                                case Windows.ApplicationModel.Activation.ActivationKind.launch:
                                    dataPoint.appendParameter("StartedFrom", "launch");
                                    this.navigateToInitialPage();
                                    MS.Entertainment.Instrumentation.PerfTrack.enableScenarioAppLaunch();
                                    var navPane = document.getElementById("navPane");
                                    MS.Entertainment.assert(navPane, "Nav-pane div does not exist!");
                                    var navPaneRendered = MS.Entertainment.UI.Framework.addEventHandlers(navPane, {firstTimeRendered: function() {
                                                _this.onNavPaneFirstTimeRender();
                                                navPaneRendered.cancel();
                                                MS.Entertainment.Utilities.schedulePromiseIdle().done(function() {
                                                    _this._focusPivots()
                                                })
                                            }});
                                    break;
                                case Windows.ApplicationModel.Activation.ActivationKind.file:
                                    dataPoint.appendParameter("StartedFrom", "File");
                                    this._navigateToDefault();
                                    if (!this.handleFileActivation(isFirstRun, args))
                                        this._loadDelayedInitFragment(true).done(function() {
                                            MS.Entertainment.Activation.fileActivationHandler(args, !isFirstRun, true)
                                        });
                                    if (this.clearLastActivatedEventArgsAfterHandling)
                                        this.lastActivatedEventArgs = null;
                                    else {
                                        this.lastActivatedEventArgs.files = null;
                                        this.lastActivatedEventArgs.kind = Windows.ApplicationModel.Activation.ActivationKind.launch
                                    }
                                    break;
                                case Windows.ApplicationModel.Activation.ActivationKind.protocol:
                                    var deepLink = this.getDeeplinkUri(args);
                                    if (!deepLink)
                                        return this._navigateToDefault();
                                    var startedFrom = this.getStartedFromParamForProtocolActivation(args);
                                    dataPoint.appendParameter("StartedFrom", startedFrom);
                                    var dependenciesPromise = this.beforeProtocolProcessPromise(deepLink);
                                    WinJS.Promise.as(dependenciesPromise).done(function() {
                                        if (!MS.Entertainment.UI.DeepLink.processProtocol(deepLink.rawUri, dataPoint, args.arguments)) {
                                            MS.Entertainment.Instrumentation.PerfTrack.disableAllStartupScenarios();
                                            _this._navigateToDefault()
                                        }
                                        else {
                                            _this.afterProtocolProcessed(deepLink, !!dependenciesPromise);
                                            if (_this.lastActivatedEventArgs) {
                                                _this.lastActivatedEventArgs.uri = null;
                                                _this.lastActivatedEventArgs.kind = Windows.ApplicationModel.Activation.ActivationKind.launch
                                            }
                                        }
                                    });
                                    break;
                                case Windows.ApplicationModel.Activation.ActivationKind.search:
                                    this.beforeSearchActivation();
                                    this._navigateToSearch(args.queryText, true);
                                    if (this._clearQueryAfterSearch) {
                                        this.lastActivatedEventArgs.kind = Windows.ApplicationModel.Activation.ActivationKind.launch;
                                        this.lastActivatedEventArgs.queryText = null
                                    }
                                    break;
                                default:
                                    this._navigateToDefault();
                                    MS.Entertainment.fail("Unexpected Activation kind: " + kind);
                                    break
                            }
                            MS.Entertainment.Utilities.schedulePromiseIdle().done(function() {
                                dataPoint.write()
                            })
                        };
                        CoreApplication.prototype.isCurrentVersionSupported = function() {
                            var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            var currentPackage = Windows.ApplicationModel.Package.current;
                            var currentVersion = currentPackage.id.version;
                            var minVersionSupported = MS.Entertainment.Utilities.parseVersionString(this.minAppSupportedVersion);
                            var minServiceVersionSupported = MS.Entertainment.Utilities.parseVersionString(this.minServiceSupportedVersion);
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            var versionSupported = (MS.Entertainment.Utilities.compareVersions(currentVersion, minVersionSupported) >= 0);
                            uiStateService.servicesEnabled = (MS.Entertainment.Utilities.compareVersions(currentVersion, minServiceVersionSupported) >= 0);
                            return versionSupported
                        };
                        CoreApplication.prototype._handleVersionChecks = function() {
                            var versionSupported = this.isCurrentVersionSupported();
                            if (!versionSupported) {
                                WinJS.Promise.timeout().done(function() {
                                    window.location.href = "UpdateApp.html"
                                });
                                MS.Entertainment.Instrumentation.PerfTrack.disableAllStartupScenarios();
                                return
                            }
                        };
                        CoreApplication.prototype._waitForFirstPageCompleted = function() {
                            var _this = this;
                            this._cleanupContentContainerEvents();
                            this.telemetryManager.appActivated();
                            this.commonTraceProvider.traceProcessInitializeEventStop(this._appInitDuration);
                            this.delayInitializeApplication();
                            (new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell).traceHubStrip_Ready("dashboard");
                            this._windowShrinksMediaMatch = matchMedia("all and (max-width: 1023px)");
                            var windowShrinksHandlerFunction = this._windowMadeSmaller.bind(this);
                            this._windowShrinksMediaMatch.addListener(windowShrinksHandlerFunction);
                            this._windowShrinksHandler = {cancel: function() {
                                    return _this._windowShrinksMediaMatch.removeListener(windowShrinksHandlerFunction)
                                }};
                            this._updateNavPaneToggleAriaLabel();
                            this._initializeSnappedWatcher();
                            var searchBoxElement = document.querySelector(".control-app .searchInputBox");
                            if (searchBoxElement) {
                                var searchBoxControl = searchBoxElement.winControl;
                                if (searchBoxControl)
                                    searchBoxControl.searchHistoryDisabled = false
                            }
                            if (this.setStageThreeCompletedOnFirstPage) {
                                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                                uiStateService.stageThreeActivated = true
                            }
                            this.afterAppReady()
                        };
                        CoreApplication.prototype._getFileTransferNotificationHandler = function() {
                            MS.Entertainment.UI.Actions.fail("_getFileTransfeNotificationHandler() should be overrided by subclass");
                            return null
                        };
                        CoreApplication.prototype._delayInitializeWork = function() {
                            var _this = this;
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus);
                            if (MS.Entertainment.FeatureEnablement)
                                MS.Entertainment.FeatureEnablement.initialize();
                            this._initializeAppNotifications().then(function() {
                                return WinJS.Promise.timeout(1000)
                            }).done(function() {
                                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                signIn.signInOnStart()
                            });
                            var appFileTransferNotificationHandler = this._getFileTransferNotificationHandler();
                            if (appFileTransferNotificationHandler)
                                appFileTransferNotificationHandler.startTransferListener();
                            this.beforeDelayInitializeCompletes();
                            MS.Entertainment.Framework.KeyboardInteractionListener.init();
                            MS.Entertainment.Framework.KeyboardShortcutHandler.instance.initialize();
                            MS.Entertainment.UI.Shell.createShellKeyboardShortcuts();
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.shareSender)) {
                                var sender = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareSender);
                                sender.setDefaultEmptyMessage()
                            }
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.tileManager))
                                this._tileManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.tileManager);
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.typeToSearch))
                                MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.typeToSearch).enableTypeToSearch();
                            var delayedStartupContainer = document.getElementById("delayedStartupContainer");
                            var appBarPromise = WinJS.Promise.as();
                            if (this.loadAppBar)
                                appBarPromise = MS.Entertainment.UI.Framework.loadTemplate("/Controls/AppBar/BottomAppBar.html#bottomAppBarTemplate").then(function() {
                                    var appBarDiv = document.createElement("div");
                                    appBarDiv.setAttribute("data-win-control", "WinJS.UI.AppBar");
                                    appBarDiv.setAttribute("data-win-options", JSON.stringify({
                                        placement: "bottom", layout: "custom"
                                    }));
                                    appBarDiv.setAttribute("data-win-automationid", "bottomAppBar");
                                    WinJS.Utilities.addClass(appBarDiv, "bottomAppBar");
                                    var appBarContent = document.createElement("div");
                                    appBarContent.setAttribute("data-ent-id", "BottomAppBar");
                                    appBarContent.setAttribute("data-win-control", "MS.Entertainment.UI.Controls.BottomAppBar");
                                    appBarDiv.appendChild(appBarContent);
                                    document.body.appendChild(appBarDiv);
                                    return WinJS.UI.processAll(appBarDiv).then(function() {
                                            var bottomAppBar = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                                            if (bottomAppBar)
                                                bottomAppBar.deferredInit()
                                        })
                                });
                            appBarPromise.done(function() {
                                _this.afterAppBarReady()
                            });
                            if (WinJS.Utilities.getMember("MS.Entertainment.ViewModels.SearchContractViewModel"))
                                MS.Entertainment.ViewModels.SearchContractViewModel.init();
                            this.delayInitializationComplete = true
                        };
                        CoreApplication.prototype._initializeAppNotifications = function() {
                            var infoNotification = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appInfoNotification);
                            var criticalNotification = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appCriticalNotification);
                            if (this.skipNotificationInitialization || !(infoNotification && criticalNotification))
                                return WinJS.Promise.as();
                            return WinJS.Promise.join({
                                    info: WinJS.UI.process(infoNotification), critical: WinJS.UI.process(criticalNotification)
                                }).then(function(result) {
                                    return WinJS.Promise.join([result.info.delayedInitialize(), result.critical.delayedInitialize()])
                                }).then(function() {
                                    if (MS.Entertainment.Utilities.getRetailExperienceState())
                                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification).send(new MS.Entertainment.UI.Notification({
                                            notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: String.load(String.id.IDS_DEMO_IN_DEMO_MODE), subTitle: "", moreDetails: "", action: null, category: "demo", isPersistent: true
                                        }))
                                })
                        };
                        CoreApplication.prototype._cleanupContentContainerEvents = function() {
                            if (!this._contentContainerEvents)
                                return;
                            this._contentContainerEvents.cancel();
                            this._contentContainerEvents = null
                        };
                        CoreApplication.prototype._focusPivots = function() {
                            var navContent = document.querySelector(".app-navpane .navpane-content");
                            MS.Entertainment.UI.Framework.focusFirstInSubTree(navContent)
                        };
                        CoreApplication.prototype._handlePrelaunch = function() {
                            var _this = this;
                            this._isPrelaunched = true;
                            var visibility = fx.addEventHandlers(document, {visibilitychange: function() {
                                        if (document.hidden)
                                            return;
                                        visibility.cancel();
                                        MS.Entertainment.Utilities.resetPerfTrackStartTime();
                                        _this._isPrelaunched = false;
                                        _this.activated(_this.lastActivatedEventArgs, true)
                                    }})
                        };
                        CoreApplication.prototype.suspending = function(e) {
                            if (this._isPrelaunched)
                                return;
                            this._cancelPendingBackStackTrim();
                            var startTime = new Date;
                            this.commonTraceProvider.traceProcessSuspendEventStart();
                            this.applicationLifetimeManager.raiseSuspending();
                            this.saveCurrentNavigationMonikerData();
                            this.commonTraceProvider.traceProcessSuspendTelemetryStart();
                            this.telemetryManager.appSuspended();
                            this.commonTraceProvider.traceProcessSuspendTelemetryStop();
                            MS.Entertainment.Instrumentation.PerfTrack.onSuspending();
                            var duration = (new Date).valueOf() - startTime.valueOf();
                            this.commonTraceProvider.traceProcessSuspendEventStop(duration);
                            this.afterAppSuspends(e)
                        };
                        CoreApplication.prototype.resuming = function() {
                            if (this._isPrelaunched)
                                return;
                            this._cancelPendingBackStackTrim();
                            var startTime = new Date;
                            this.commonTraceProvider.traceProcessResumeEventStart();
                            this.applicationLifetimeManager.raiseResuming();
                            if (this._tileManager)
                                this._tileManager.updateTile();
                            this.commonTraceProvider.traceProcessResumeTelemetryStart();
                            this.telemetryManager.appResumed();
                            this.commonTraceProvider.traceProcessResumeTelemetryStop();
                            MS.Entertainment.Instrumentation.PerfTrack.onResuming();
                            this._wasRecentlyResumed = true;
                            var duration = (new Date).valueOf() - startTime.valueOf();
                            this.commonTraceProvider.traceProcessResumeEventStop(duration);
                            this.afterAppResume()
                        };
                        CoreApplication.prototype.visibilityChanged = function() {
                            if (this._isPrelaunched)
                                return;
                            var isVisible = !document.hidden;
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            uiStateService.isAppVisible = isVisible;
                            this.commonTraceProvider.traceAppVisibilityChanged(isVisible);
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.userTimeTelemetryManager).appVisibilityChanged();
                            if (isVisible) {
                                this._cancelPendingBackStackTrim();
                                this.navigation.thawCurrentPage();
                                WinJS.Utilities.query(".overlayAnchor", document.body).forEach(function(overlay) {
                                    fx.thawControlsInSubtree(overlay)
                                });
                                if (this._wasRecentlyResumed) {
                                    this._wasRecentlyResumed = false;
                                    if (WinJS.Utilities.getMember("Microsoft.PerfTrack.PerfTrackTimePoint.responsive"))
                                        MS.Entertainment.Instrumentation.PerfTrack.getLogger().writeResumeStopEvent(Microsoft.PerfTrack.PerfTrackTimePoint.responsive)
                                }
                            }
                            else {
                                this.navigation.freezeCurrentPage();
                                WinJS.Utilities.query(".overlayAnchor", document.body).forEach(function(overlay) {
                                    fx.freezeControlsInSubtree(overlay)
                                });
                                this._trimBackStackAfterIdlePeriod()
                            }
                        };
                        CoreApplication.prototype._trimBackStackAfterIdlePeriod = function() {
                            var _this = this;
                            this._cancelPendingBackStackTrim();
                            if (!this.configurationManager.shell.backgroundBackStackTrimmingDelay)
                                return;
                            this._pendingBackStackTrim = WinJS.Promise.timeout(this.configurationManager.shell.backgroundBackStackTrimmingDelay).then(function() {
                                _this.navigation.trimBackStack();
                                _this._pendingBackStackTrim = null
                            }, function(){})
                        };
                        CoreApplication.prototype._cancelPendingBackStackTrim = function() {
                            if (!this._pendingBackStackTrim)
                                return;
                            this._pendingBackStackTrim.cancel();
                            this._pendingBackStackTrim = null
                        };
                        CoreApplication.prototype.unload = function() {
                            if (this._app)
                                this._app.shutdownAsync();
                            if (this._documentEvents) {
                                this._documentEvents.cancel();
                                this._documentEvents = null
                            }
                            if (this._windowEvents) {
                                this._windowEvents.cancel();
                                this._windowEvents = null
                            }
                            if (this._webUIEvents) {
                                this._webUIEvents.cancel();
                                this._webUIEvents = null
                            }
                            if (this._searchBoxEvents) {
                                this._searchBoxEvents.cancel();
                                this._searchBoxEvents = null
                            }
                            if (this._windowShrinksHandler) {
                                this._windowShrinksHandler.cancel();
                                this._windowShrinksHandler = null
                            }
                            if (this._toggleNavMenuEventHandlers) {
                                this._toggleNavMenuEventHandlers.cancel();
                                this._toggleNavMenuEventHandlers = null
                            }
                            if (this._dragEnterEventHandlers) {
                                this._dragEnterEventHandlers.cancel();
                                this._dragEnterEventHandlers = null
                            }
                            this._cleanupLightDismissNavPaneHandlers();
                            this._cleanupContentContainerEvents()
                        };
                        CoreApplication.prototype._handleNavMenuClicked = function() {
                            this._handleNavMenuClickedImpl()
                        };
                        CoreApplication.prototype._handleNavMenuClickedImpl = function(dontAnimate) {
                            var navPane = document.getElementById("navPane");
                            var contentPane = document.getElementById("contentHost");
                            if (!navPane)
                                return;
                            var navPaneExpanding = WinJS.Utilities.hasClass(navPane, stateCollapsedClass);
                            if (MS.Entertainment.Utilities.getWindowWidth() < lightDismissLimit)
                                this._toggleLightDismissNavPane(navPane, dontAnimate);
                            else {
                                if (this.isNavPaneAnimating)
                                    return;
                                if (navPaneExpanding)
                                    window.msWriteProfilerMark("ent:X13App.NavPane.Expanding");
                                else
                                    window.msWriteProfilerMark("ent:X13App.NavPane.Collapsing");
                                this._toggleNavPane(navPaneExpanding, navPane, contentPane, dontAnimate)
                            }
                            var contentCatalogIds = MS.Entertainment.Utilities.Telemetry.ContentCatalogId;
                            var contentSourceIds = MS.Entertainment.Utilities.Telemetry.ContentSourceId;
                            var contentTypeIds = MS.Entertainment.Utilities.Telemetry.ContentTypeId;
                            if (this._navPaneToggleButton) {
                                var navButtonId = this._navPaneToggleButton.getAttribute("data-win-automationid");
                                if (navPaneExpanding)
                                    navButtonId += ":Expanding";
                                else
                                    navButtonId += ":Collapsing";
                                var navigationJournal = MS.Entertainment.UI.Framework.Navigation.getJournal();
                                var navigationLocation = navigationJournal ? navigationJournal.location : String.empty;
                                MS.Entertainment.Utilities.Telemetry.logPageAction({
                                    slot: 0, areaName: "NavBarArea1", contentId: navButtonId, contentCatalogId: contentCatalogIds.App, contentSourceId: contentSourceIds.App, contentTypeId: contentTypeIds.App, contentName: navButtonId
                                }, {
                                    uri: navigationLocation, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                                })
                            }
                        };
                        CoreApplication.prototype._toggleNavPane = function(expanding, navPane, contentPane, dontAnimate) {
                            var _this = this;
                            if (contentPane || dontAnimate) {
                                if (contentPane) {
                                    WinJS.Utilities.toggleClass(contentPane, stateExpandedClass);
                                    WinJS.Utilities.toggleClass(navPane, stateCollapsedClass)
                                }
                                else
                                    WinJS.Utilities.toggleClass(navPane, stateExpandedClass);
                                this.navPaneToggleState = !expanding;
                                return
                            }
                            var navPaneClientWidth = navPane.clientWidth;
                            if (expanding) {
                                this._animatingNavBarPromise = MS.Entertainment.Utilities.schedulePromiseNormal().then(function() {
                                    WinJS.Utilities.toggleClass(navPane, stateExpandedClass);
                                    return WinJS.UI.Animation.showPanel(navPane, {
                                            top: "0px", left: "-" + navPaneClientWidth + "px", rtlflip: true
                                        })
                                });
                                this._animatingNavBarPromise.done(function() {
                                    _this.navPaneToggleState = false;
                                    _this._animatingNavBarPromise = null
                                })
                            }
                            else {
                                var targetLeft = navPaneClientWidth - collapsedNavBarWidth;
                                this._animatingNavBarPromise = WinJS.Utilities.Scheduler.schedulePromiseNormal().then(function() {
                                    var transformStyle = "translateX(-" + targetLeft + "px)";
                                    if (MS.Entertainment.Utilities.getTextDirection() === MS.Entertainment.Utilities.TextDirections.RightToLeft)
                                        transformStyle = "translateX(" + targetLeft + "px)";
                                    navPane.style.msTransform = transformStyle;
                                    WinJS.Utilities.addClass(navPane, "state-collapsing");
                                    return WinJS.UI.Animation.hidePanel(navPane, {
                                            top: "0px", left: "-" + targetLeft + "px", rtlflip: true
                                        })
                                });
                                this._animatingNavBarPromise.done(function() {
                                    WinJS.Utilities.toggleClass(navPane, stateExpandedClass);
                                    _this._animatingNavBarPromise = null;
                                    _this.navPaneToggleState = true;
                                    navPane.style.msTransform = "";
                                    WinJS.Utilities.removeClass(navPane, "state-collapsing")
                                })
                            }
                        };
                        CoreApplication.prototype._isNavMenuExpanded = function() {
                            var navPane = document.getElementById("navPane");
                            if (MS.Entertainment.Utilities.getWindowWidth() < lightDismissLimit)
                                return WinJS.Utilities.hasClass(navPane, stateExpandedClass);
                            else
                                return !WinJS.Utilities.hasClass(navPane, stateCollapsedClass)
                        };
                        CoreApplication.prototype._handleInvokeSearchClicked = function() {
                            var searchInputBox = document.querySelector("[data-ent-member=searchInputBox] .win-searchbox-input");
                            this._handleNavMenuClicked();
                            MS.Entertainment.Utilities.schedulePromiseIdle().done(function() {
                                var searchBoxControl = searchInputBox;
                                if (searchBoxControl)
                                    MS.Entertainment.UI.Framework.focusElement(searchBoxControl, true, true)
                            })
                        };
                        CoreApplication.prototype._toggleLightDismissNavPane = function(navPane, dontAnimate) {
                            var _this = this;
                            if (!navPane)
                                return;
                            var expanding = !WinJS.Utilities.hasClass(navPane, stateExpandedClass);
                            if (expanding) {
                                window.msWriteProfilerMark("ent:X13App.NavPane.Expanding");
                                var bottomAppBar = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                                if (bottomAppBar && bottomAppBar.hide)
                                    bottomAppBar.hide();
                                navPane.winControl.enabled = true;
                                this._cleanupLightDismissNavPaneHandlers();
                                this._navPaneLightDismissHandlers = MS.Entertainment.UI.Framework.addEventHandlers(navPane, {
                                    keydown: function(evt) {
                                        if (evt.keyCode !== WinJS.Utilities.Key.escape)
                                            return;
                                        _this._toggleLightDismissNavPane(navPane)
                                    }, focusout: function() {
                                            if (navPane.contains(document.activeElement) || _this._focusIsInOverlayFromNavPane(document.activeElement))
                                                return;
                                            _this._toggleLightDismissNavPane(navPane)
                                        }
                                });
                                var mediaWatcher = window.matchMedia("all and (min-width: 1024px)");
                                var mediaMatchedHandler = function() {
                                        if (!mediaWatcher.matches)
                                            return;
                                        _this._toggleLightDismissNavPane(navPane, true)
                                    };
                                mediaWatcher.addListener(mediaMatchedHandler);
                                this._navPaneWindowChangedHandlers = {cancel: function() {
                                        mediaWatcher.removeListener(mediaMatchedHandler)
                                    }}
                            }
                            else {
                                window.msWriteProfilerMark("ent:X13App.NavPane.Collapsing");
                                navPane.winControl.enabled = false;
                                this._cleanupLightDismissNavPaneHandlers()
                            }
                            this._toggleNavPane(expanding, navPane, null, dontAnimate)
                        };
                        CoreApplication.prototype._focusIsInOverlayFromNavPane = function(element) {
                            var navPane = document.getElementById("navPane");
                            var candidates = WinJS.Utilities.query(".overlayAnchor", document.body).filter(function(overlayElement) {
                                    var containerElement = overlayElement.winControl && overlayElement.winControl.referenceContainer && overlayElement.winControl.referenceContainer.domElement;
                                    return containerElement && navPane.contains(containerElement) && overlayElement.contains(element)
                                });
                            return candidates.length > 0
                        };
                        CoreApplication.prototype._cleanupLightDismissNavPaneHandlers = function() {
                            if (this._navPaneLightDismissHandlers) {
                                this._navPaneLightDismissHandlers.cancel();
                                this._navPaneLightDismissHandlers = null
                            }
                            if (this._navPaneWindowChangedHandlers) {
                                this._navPaneWindowChangedHandlers.cancel();
                                this._navPaneWindowChangedHandlers = null
                            }
                        };
                        Object.defineProperty(CoreApplication.prototype, "navPaneToggleState", {
                            get: function() {
                                return this._navPaneToggleState
                            }, set: function(value) {
                                    this.updateAndNotify("navPaneToggleState", value);
                                    this._updateNavPaneToggleAriaLabel()
                                }, enumerable: true, configurable: true
                        });
                        CoreApplication.prototype._updateNavPaneToggleAriaLabel = function() {
                            if (!this._navPaneToggleButton)
                                return;
                            var navPane = document.getElementById("navPane");
                            var ariaLabelStringId = this.hideMenuAriaLabelStringId;
                            if (MS.Entertainment.Utilities.getWindowWidth() < lightDismissLimit)
                                if (WinJS.Utilities.hasClass(navPane, stateExpandedClass))
                                    ariaLabelStringId = this.hideMenuAriaLabelStringId;
                                else
                                    ariaLabelStringId = this.showMenuAriaLabelStringId;
                            else if (WinJS.Utilities.hasClass(navPane, stateCollapsedClass))
                                ariaLabelStringId = this.showMenuAriaLabelStringId;
                            else
                                ariaLabelStringId = this.hideMenuAriaLabelStringId;
                            if (ariaLabelStringId) {
                                MS.Entertainment.Framework.AccUtils.checkAndSetAriaAttribute(String.load(ariaLabelStringId), this._navPaneToggleButton, "label");
                                if (this._navPaneToggleButton.winControl)
                                    this._navPaneToggleButton.winControl.innerHTML = String.load(ariaLabelStringId)
                            }
                        };
                        CoreApplication.prototype.initializeControlEventHandlers = function() {
                            var _this = this;
                            var searchBoxElement = document.querySelector(".control-app .searchInputBox");
                            var searchBoxControl;
                            if (searchBoxElement)
                                searchBoxControl = (searchBoxElement).winControl;
                            if (searchBoxControl) {
                                this._searchBoxElement = searchBoxElement;
                                searchBoxControl.placeholderText = String.load(String.id.IDS_SEARCH_BUTTON);
                                var typeToSearchService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.typeToSearch);
                                typeToSearchService.typeToSearchPropertyName = "focusOnKeyboardInput";
                                typeToSearchService.getTypeToSearchHost = function() {
                                    return searchBoxControl
                                };
                                typeToSearchService.shouldEnableTypeToSearchForElement = function(element) {
                                    if (searchBoxControl.element.contains(element))
                                        return false;
                                    return MS.Entertainment.UI.TypeToSearchService.prototype.shouldEnableTypeToSearchForElement.apply(_this, arguments)
                                };
                                this._searchBoxEvents = MS.Entertainment.UI.Framework.addEventHandlers(searchBoxControl, {
                                    querysubmitted: function(e) {
                                        if (_this._searchBoxElement) {
                                            var submitButton = _this._searchBoxElement.querySelector(".win-searchbox-button");
                                            if (submitButton)
                                                submitButton.focus()
                                        }
                                        if (e.detail.queryText && e.detail.queryText.match(/\S/)) {
                                            _this._navigateToSearch(e.detail.queryText, false, e.detail.language);
                                            if ((MS.Entertainment.Utilities.getWindowWidth() < lightDismissLimit) && _this._isNavMenuExpanded())
                                                _this._handleNavMenuClicked()
                                        }
                                    }, suggestionsrequested: function(e) {
                                            var currentSearchContract = WinJS.Utilities.getMember("MS.Entertainment.ViewModels.SearchContractViewModel.current");
                                            if (!currentSearchContract)
                                                return null;
                                            return currentSearchContract.searchKeywordSuggestionRequested({
                                                    language: e.detail.language, linguisticDetails: e.detail.linguisticDetails, queryText: e.detail.queryText, request: e.detail
                                                })
                                        }, receivingfocusonkeyboardinput: function() {
                                            if (!searchBoxElement.contains(document.activeElement))
                                                searchBoxControl.queryText = String.empty;
                                            if (!_this._isNavMenuExpanded())
                                                _this._handleNavMenuClickedImpl(true)
                                        }
                                })
                            }
                            var toggleNavButton = document.querySelector("[data-ent-member=toggleNavMenu]");
                            if (toggleNavButton) {
                                this._navPaneToggleButton = toggleNavButton;
                                this._toggleNavMenuEventHandlers = MS.Entertainment.UI.Framework.addEventHandlers(toggleNavButton, {click: this._handleNavMenuClicked.bind(this)})
                            }
                            var invokeSearchButton = document.querySelector("[data-ent-member=invokeSearchButton]");
                            if (invokeSearchButton)
                                this._invokeSearchEventHandlers = MS.Entertainment.UI.Framework.addEventHandlers(invokeSearchButton, {click: this._handleInvokeSearchClicked.bind(this)});
                            var navPane = document.getElementById("navPane");
                            if (navPane)
                                this._dragEnterEventHandlers = UI.Framework.addEventHandlers(navPane, {dragenter: function() {
                                        if (!_this._isNavMenuExpanded())
                                            _this._handleNavMenuClicked()
                                    }})
                        };
                        CoreApplication.prototype._navigateToDefault = function() {
                            var windowWidth = MS.Entertainment.Utilities.getWindowWidth();
                            if (windowWidth <= this.snappedModeMaxWidthPx)
                                this._setSnapped(true);
                            else
                                this.navigation.navigateToDefault()
                        };
                        CoreApplication.prototype._navigateToSearch = function(searchText, isCatalogSearch, searchLanguage) {
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var navigateToSearchPage = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.searchResultsNavigate);
                            navigateToSearchPage.parameter = {
                                searchText: searchText, isCatalogSearch: isCatalogSearch
                            };
                            navigateToSearchPage.execute(document.querySelector(".control-app .searchInputBox"))
                        };
                        CoreApplication.prototype._initializeSnappedWatcher = function() {
                            var configuration = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            if (!this._snappedWatcher) {
                                this._snappedWatcher = window.matchMedia("all and (min-width: 320px) and (max-width: " + this.snappedModeMaxWidthPx + "px)");
                                this._snappedWatcher.addListener(this._onSnappedModeChanged.bind(this));
                                if (this._snappedWatcher.matches)
                                    this._onSnappedModeChanged()
                            }
                        };
                        CoreApplication.prototype._onSnappedModeChanged = function() {
                            this._setSnapped(!!(this._snappedWatcher && this._snappedWatcher.matches))
                        };
                        CoreApplication.prototype._setSnapped = function(snapped) {
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            if (uiStateService.isSnapped !== snapped) {
                                uiStateService.isSnapped = snapped;
                                this.afterSnappedSet(snapped)
                            }
                        };
                        CoreApplication.prototype._windowMadeSmaller = function() {
                            var navPane = document.getElementById("navPane");
                            if (!navPane || !this._navPaneToggleButton)
                                return;
                            if (this._isNavMenuExpanded() && this._windowShrinksMediaMatch.matches)
                                this._toggleLightDismissNavPane(navPane);
                            if (!navPane.contains(document.activeElement) && !this._searchBoxElement.contains(document.activeElement))
                                return;
                            MS.Entertainment.UI.Framework.focusElement(this._navPaneToggleButton, false, true)
                        };
                        Object.defineProperty(CoreApplication.prototype, "navigation", {
                            get: function() {
                                var _this = this;
                                if (!this._navigation) {
                                    var fueNavigationOperation = this._getFUENavigationOperation();
                                    this._navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                                    this._navigation.initialize(this._getPrimaryPivots(), this.defaultPivotIndex, fueNavigationOperation);
                                    this._initializeNavigation();
                                    MS.Entertainment.UI.Framework.addEventHandlers(this._navigation.primaryPivots, {selectedItemChanged: function(args) {
                                            var selectedPivot = (args && args.detail && args.detail.newSelection && args.detail.newSelection.item);
                                            _this.onPrimaryPivotsSelectionChange(selectedPivot)
                                        }})
                                }
                                return this._navigation
                            }, enumerable: true, configurable: true
                        });
                        CoreApplication.prototype._initializeNavigation = function() {
                            this._navigation.animatePageTransitions = true
                        };
                        CoreApplication.prototype._getFUENavigationOperation = function() {
                            MS.Entertainment.UI.Actions.fail("_getFUENavigationOperation() should be overrided by subclass");
                            return null
                        };
                        CoreApplication.prototype._getPrimaryPivots = function() {
                            var appPivots = this.getAppPivots();
                            return new fx.SelectionManager(appPivots, -1)
                        };
                        Object.defineProperty(CoreApplication.prototype, "pivots", {
                            get: function() {
                                return this.navigation.primaryPivots
                            }, enumerable: true, configurable: true
                        });
                        CoreApplication.prototype._traceTimeFromStart = function(message) {
                            message = message + ": " + (Date.now() - window.PerfTrack.LaunchInformation.getStartTime());
                            WinJS.Promise.timeout(2000).done(function() {
                                return alert(message)
                            })
                        };
                        return CoreApplication
                    })(MS.Entertainment.UI.Framework.ObservableBase);
                Shell.CoreApplication = CoreApplication
            })(UI.Shell || (UI.Shell = {}));
            var Shell = UI.Shell
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
/* >>>>>>/videowinmain.js:31607 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    (function(Entertainment) {
        (function(UI) {
            (function(Shell) {
                var perfTrack = MS.Entertainment.Instrumentation.PerfTrack;
                var fx = MS.Entertainment.UI.Framework;
                window.onNewVideoPage = true;
                var VideoApplication = (function(_super) {
                        __extends(VideoApplication, _super);
                        function VideoApplication() {
                            _super.call(this);
                            this.classicAppActivated = false;
                            this.setStageThreeCompletedOnFirstPage = false;
                            this.skipNotificationInitialization = true;
                            this.loadAppBar = false;
                            this.appProtocolName = "microsoftvideo";
                            this.clearLastActivatedEventArgsAfterHandling = false;
                            this._clearQueryAfterSearch = false
                        }
                        VideoApplication.prototype.cancelPendingVideoResume = function() {
                            if (WinJS.Utilities.getMember("Entertainment.Video.VideoFullScreenNowPlaying.pendingAutoResumeFilePath", MS))
                                MS.Entertainment.Video.VideoFullScreenNowPlaying.pendingAutoResumeFilePath = String.empty;
                            if (this._resumePersonalVideoPlaybackPromise) {
                                this._resumePersonalVideoPlaybackPromise.cancel();
                                this._resumePersonalVideoPlaybackPromise = null
                            }
                        };
                        VideoApplication.prototype.beforeAppActivationHandling = function() {
                            this.cancelPendingVideoResume()
                        };
                        VideoApplication.prototype.afterAppResume = function() {
                            var _this = this;
                            var pendingVideoToResume = WinJS.Utilities.getMember("Entertainment.Video.VideoFullScreenNowPlaying.pendingAutoResumeFilePath", MS);
                            var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            var isAutoResumeEnabled = config.video.videoLXAutoResumePersonalVideos;
                            if (!isAutoResumeEnabled || !pendingVideoToResume)
                                return;
                            var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                            var playbackSession = sessionMgr && sessionMgr.primarySession;
                            if (!playbackSession)
                                return;
                            var lastPlayedMediaFilePath = WinJS.Utilities.getMember("lastPlayedMedia.fileItem.path", playbackSession) || WinJS.Utilities.getMember("lastPlayedMedia.filePath", playbackSession);
                            if (lastPlayedMediaFilePath && (pendingVideoToResume === lastPlayedMediaFilePath)) {
                                this.cancelPendingVideoResume();
                                var startPositionMs = playbackSession.lastPlayedPosition - 3000;
                                if (startPositionMs < 0)
                                    startPositionMs = 1;
                                this._resumePersonalVideoPlaybackPromise = MS.Entertainment.Utilities.schedulePromiseBelowNormal().then(function() {
                                    return _this.navigation.navigateToDefault()
                                }).then(function() {
                                    return MS.Entertainment.Platform.PlaybackHelpers.playMedia2(playbackSession.lastPlayedMedia, {
                                            autoPlay: true, playPreviewOnly: false, startPositionMsec: startPositionMs, playbackSource: MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.resumeApp
                                        })
                                })
                            }
                        };
                        Object.defineProperty(VideoApplication.prototype, "defaultPivotIndex", {
                            get: function() {
                                var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                var defaultPivotIndex = config.video.defaultPivotIndex;
                                if (MS.Entertainment.Utilities.isLaunchToCollectionSettingEnabled)
                                    defaultPivotIndex = 0;
                                return defaultPivotIndex
                            }, enumerable: true, configurable: true
                        });
                        VideoApplication.prototype.getSavedNavigationMonikerData = function() {
                            return _super.prototype.getSavedNavigationMonikerData.call(this)
                        };
                        VideoApplication.prototype.setSavedNavigationMonikerData = function(value) {
                            if (!MS.Entertainment.Utilities.isLaunchToCollectionSettingEnabled)
                                _super.prototype.setSavedNavigationMonikerData.call(this, value)
                        };
                        Object.defineProperty(VideoApplication.prototype, "minAppSupportedVersion", {
                            get: function() {
                                var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                return config.fue.minVideoAppSupportedVersion
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(VideoApplication.prototype, "minServiceSupportedVersion", {
                            get: function() {
                                var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                return config.service.minVideoServiceSupportedVersion
                            }, enumerable: true, configurable: true
                        });
                        VideoApplication.prototype.getAppTitle = function() {
                            return this.marketPlaceEnabled ? String.load(String.id.IDS_XBOX_VIDEO_APP_TITLE) : String.load(String.id.IDS_VIDEO_APP_TITLE)
                        };
                        VideoApplication.prototype.getAppPivots = function() {
                            var videoPivots = new MS.Entertainment.ObservableArray;
                            videoPivots.push(this._createVideoCollectionPivot());
                            var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                            if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace))
                                videoPivots.push(this._createMoviesStorePivot());
                            if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                videoPivots.push(this._createTvStorePivot());
                            return videoPivots
                        };
                        VideoApplication.prototype.handleFileActivation = function(isFirstRun, args) {
                            var loadDelayedInitFragmentPromise = this._loadDelayedInitFragment(true);
                            var loadClassicAppPromise = this.loadClassicApp(true);
                            MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PlayCommand);
                            MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayNonProtectedInApp();
                            WinJS.Promise.join([loadDelayedInitFragmentPromise, loadClassicAppPromise]).done(function() {
                                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.playbackErrorDisplayService))
                                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playbackErrorDisplayService).initialize();
                                MS.Entertainment.Activation.fileActivationHandler(args, !isFirstRun, true)
                            }, function(error) {
                                MS.Entertainment.Utilities.assertError("VideoWinMain::handleFileActivation: Unexpected Error from _loadDelayedInitFragment(): ", error)
                            });
                            return true
                        };
                        VideoApplication.prototype._createVideoCollectionPivot = function() {
                            return new UI.Framework.PivotData(function() {
                                    return Entertainment.ViewModels.VideoCollectionLX.createVideoCollectionLX()
                                }, "/Components/Video_Win/VideoCollection.html#collectionBody", String.load(String.id.IDS_VIDEO_LX_COLLECTION_PIVOT_TC), UI.Icon.videoCollection, "collection", function() {
                                    perfTrack.setStartTime(perfTrack.StartPoints.VideoCollectionPageRequest)
                                }, function() {
                                    perfTrack.triggerScenarioVideoCollectionPageRequestToLoad();
                                    perfTrack.triggerScenarioAppLaunchToVideoCollection()
                                })
                        };
                        VideoApplication.prototype._createMoviesStorePivot = function() {
                            return new UI.Framework.PivotData(function() {
                                    return new Entertainment.ViewModels.MoviesStoreHubViewModel
                                }, "/Components/Video_Win/MoviesStore.html#moviesStoreBody", String.load(String.id.IDS_VIDEO_LX_MOVIES_STORE_PIVOT_TC), UI.Icon.movies, "moviesStore", function() {
                                    perfTrack.setStartTime(perfTrack.StartPoints.MoviesStorePageRequest)
                                }, function() {
                                    perfTrack.triggerScenarioMoviesStorePageRequestToLoad();
                                    perfTrack.triggerScenarioAppLaunchToMoviesStore()
                                })
                        };
                        VideoApplication.prototype._createTvStorePivot = function() {
                            return new UI.Framework.PivotData(function() {
                                    return new Entertainment.ViewModels.TvStoreHubViewModel
                                }, "/Components/Video_Win/TvStore.html#tvStoreBody", String.load(String.id.IDS_VIDEO_LX_TV_STORE_PIVOT_TC), UI.Icon.tvMonitor, "tvStore", function() {
                                    perfTrack.setStartTime(perfTrack.StartPoints.TvStorePageRequest)
                                }, function() {
                                    perfTrack.triggerScenarioTvStorePageRequestToLoad();
                                    perfTrack.triggerScenarioAppLaunchToTvStore()
                                })
                        };
                        VideoApplication._tryGetDeeplinkParameter = function(queryParsed, paramName) {
                            if (queryParsed && queryParsed.size > 0)
                                try {
                                    return queryParsed.getFirstValueByName(paramName)
                                }
                                catch(e) {}
                            return null
                        };
                        VideoApplication.prototype.beforeProtocolProcessPromise = function(deeplink) {
                            var autoPlayAttribute = VideoApplication._tryGetDeeplinkParameter(deeplink.queryParsed, "autoPlay");
                            var autoPlayPreviewAttribute = VideoApplication._tryGetDeeplinkParameter(deeplink.queryParsed, "autoPlayPreview");
                            if ((autoPlayAttribute && autoPlayAttribute.toLowerCase() === "true") || (autoPlayPreviewAttribute && autoPlayPreviewAttribute.toLowerCase() === "true"))
                                return WinJS.Promise.join([this._loadDelayedInitFragment(true), this.loadClassicApp(true, true)]);
                            return _super.prototype.beforeProtocolProcessPromise.call(this, deeplink)
                        };
                        VideoApplication.prototype.afterProcessAllCompleted = function() {
                            var _this = this;
                            var contentComplete = MS.Entertainment.UI.Framework.addEventHandlers(this.navigation.contentContainer, {ContentComplete: function() {
                                        contentComplete.cancel();
                                        _this.loadClassicApp()
                                    }});
                            if ((new Microsoft.Entertainment.Configuration.ConfigurationManager).video.videoLXDefaultToClassic)
                                MS.Entertainment.UI.Framework.Navigation.raiseContentComplete(document.body.querySelector("[data-win-automationid=contentContainer]"))
                        };
                        Object.defineProperty(VideoApplication.prototype, "marketPlaceEnabled", {
                            get: function() {
                                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                var moviesMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace);
                                var tvMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace);
                                return !!(moviesMarketplaceEnabled || tvMarketplaceEnabled)
                            }, enumerable: true, configurable: true
                        });
                        VideoApplication.prototype._getFUENavigationOperation = function() {
                            return null
                        };
                        VideoApplication.prototype.onNavPaneFirstTimeRender = function() {
                            MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioAppLaunch();
                            MS.Entertainment.Instrumentation.PerfTrack.enableScenarioAppLaunchToMoviesStore();
                            MS.Entertainment.Instrumentation.PerfTrack.enableScenarioAppLaunchToTvStore();
                            MS.Entertainment.Instrumentation.PerfTrack.enableScenarioAppLaunchToVideoCollection()
                        };
                        VideoApplication.prototype._getFileTransferNotificationHandler = function() {
                            if (MS.Entertainment.UI.FileTransferNotificationHandlers)
                                return new MS.Entertainment.UI.FileTransferNotificationHandlers;
                            return null
                        };
                        VideoApplication.prototype._loadClassicFragment = function(critical) {
                            var _this = this;
                            var shouldLoadClassicApp = (new Microsoft.Entertainment.Configuration.ConfigurationManager).shell.loadClassicApp;
                            if (!shouldLoadClassicApp)
                                return WinJS.Promise.as();
                            var classicContainer = document.querySelector(".app-classicContainer");
                            if (!this._loadClassicFragmentPromise) {
                                var signal = new MS.Entertainment.UI.Framework.Signal;
                                this._loadClassicFragmentPromise = signal.promise;
                                msWriteProfilerMark("ent:loadClassicFragment,StartTM");
                                var loadClassicFragment = function() {
                                        msWriteProfilerMark("ent:loadClassicFragment,StopTM");
                                        MS.Entertainment.Utilities.loadHtmlPage("/Classic/main.html", classicContainer).then(function() {
                                            var appBarContainer = classicContainer.querySelector(".bottomAppBar");
                                            var flyoutEater = document.body.querySelector(".win-appbarclickeater");
                                            document.body.insertBefore(appBarContainer, flyoutEater);
                                            _this.startListeningForClassicNavigationChanges();
                                            signal.complete()
                                        })
                                    };
                                if (!critical)
                                    WinJS.Utilities.Scheduler.schedule(loadClassicFragment, WinJS.Utilities.Scheduler.Priority.idle);
                                else
                                    loadClassicFragment()
                            }
                            return this._loadClassicFragmentPromise
                        };
                        VideoApplication.prototype.loadClassicApp = function(critical, mapToLaunchActivationKind) {
                            var _this = this;
                            if (!(new Microsoft.Entertainment.Configuration.ConfigurationManager).shell.loadClassicApp)
                                return WinJS.Promise.as();
                            if (!this._loadClassicAppPromise)
                                this._loadClassicAppPromise = this._loadClassicFragment(critical).then(function() {
                                    var classicContainer = document.querySelector(".app-classicContainer");
                                    if (_this.lastActivatedEventArgs) {
                                        if (mapToLaunchActivationKind) {
                                            _this.lastActivatedEventArgs.kind = Windows.ApplicationModel.Activation.ActivationKind.launch;
                                            _this.lastActivatedEventArgs.arguments = null
                                        }
                                        MS.Entertainment.UI.Application.Activation.activated(_this.lastActivatedEventArgs, true);
                                        _this.lastActivatedEventArgs = null
                                    }
                                    _this.classicAppActivated = true;
                                    var hubStripVisible = new fx.Signal;
                                    var classicNavigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                    if (classicNavigation.currentPage)
                                        hubStripVisible.complete();
                                    else
                                        var hubStripVisibleEvent = MS.Entertainment.UI.Framework.addEventHandlers(classicContainer, {HubStripVisible: function() {
                                                    hubStripVisibleEvent.cancel();
                                                    hubStripVisible.complete()
                                                }});
                                    return hubStripVisible.promise
                                });
                            return this._loadClassicAppPromise
                        };
                        VideoApplication.prototype.startListeningForClassicNavigationChanges = function() {
                            var classicNavigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            this._classicNavigationEvents = MS.Entertainment.UI.Framework.addEventHandlers(classicNavigationService, {canNavigateBackChanged: this._canNavigateBackChanged.bind(this)})
                        };
                        VideoApplication.prototype._canNavigateBackChanged = function(args) {
                            var classicContainer = document.querySelector(".app-classicContainer");
                            var newContainer = document.querySelector(".control-app");
                            if (args.detail.newValue || ((new Microsoft.Entertainment.Configuration.ConfigurationManager).video.videoLXDefaultToClassic))
                                WinJS.UI.Animation.fadeOut(newContainer).done(function() {
                                    WinJS.Utilities.removeClass(classicContainer, "hideFromDisplay");
                                    WinJS.Utilities.addClass(newContainer, "hideFromDisplay")
                                });
                            else {
                                WinJS.Utilities.addClass(classicContainer, "hideFromDisplay");
                                WinJS.Utilities.removeClass(newContainer, "hideFromDisplay");
                                if (args.detail.oldValue !== undefined)
                                    WinJS.UI.Animation.fadeIn(newContainer)
                            }
                        };
                        VideoApplication.prototype.unload = function() {
                            if (this._classicNavigationEvents) {
                                this._classicNavigationEvents.cancel();
                                this._classicNavigationEvents = null
                            }
                            _super.prototype.unload.call(this)
                        };
                        return VideoApplication
                    })(MS.Entertainment.UI.Shell.CoreApplication);
                Shell.VideoApplication = VideoApplication;
                var ClassicAppHelper = (function(_super) {
                        __extends(ClassicAppHelper, _super);
                        function ClassicAppHelper(element, options) {
                            _super.call(this, element, options)
                        }
                        ClassicAppHelper.prototype.initialize = function() {
                            var hubStripVisibleEvent = document.createEvent("Event");
                            hubStripVisibleEvent.initEvent("HubStripVisible", true, true);
                            var hubStripReadyEvent = document.createEvent("Event");
                            hubStripReadyEvent.initEvent("HubStripReady", true, true);
                            this.domElement.dispatchEvent(hubStripVisibleEvent);
                            this.domElement.dispatchEvent(hubStripReadyEvent);
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            uiStateService.isHubStripVisible = true;
                            WinJS.Promise.timeout(200).done(function() {
                                fx.currentContentContainer = document.querySelector(".control-app")
                            })
                        };
                        ClassicAppHelper.prototype.thaw = function() {
                            _super.prototype.thaw.call(this);
                            fx.currentContentContainer = document.querySelector(".control-app")
                        };
                        return ClassicAppHelper
                    })(MS.Entertainment.UI.Framework.UserControl);
                Shell.ClassicAppHelper = ClassicAppHelper;
                WinJS.Utilities.markSupportedForProcessing(ClassicAppHelper);
                var BlankPageHelper = (function(_super) {
                        __extends(BlankPageHelper, _super);
                        function BlankPageHelper(element, options) {
                            _super.call(this, element, options)
                        }
                        BlankPageHelper.prototype.initialize = function() {
                            var _this = this;
                            WinJS.Promise.timeout(750).done(function() {
                                MS.Entertainment.UI.Framework.Navigation.raiseContentComplete(_this.domElement)
                            })
                        };
                        BlankPageHelper.navigateToMovieGallery = function() {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            if (navigationService)
                                navigationService.navigateTo(MS.Entertainment.UI.Monikers.movieMarketplace, MS.Entertainment.UI.Monikers.movieMarketplaceNewReleases)
                        };
                        BlankPageHelper.navigateToTVGallery = function() {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            if (navigationService)
                                navigationService.navigateTo(MS.Entertainment.UI.Monikers.tvMarketplace, MS.Entertainment.UI.Monikers.tvMarketplaceFeatured)
                        };
                        BlankPageHelper.navigateToMovieCollection = function() {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            if (navigationService)
                                navigationService.navigateTo(MS.Entertainment.UI.Monikers.videoCollection, null, MS.Entertainment.UI.Monikers.movieCollectionPanel)
                        };
                        BlankPageHelper.navigateToTVCollection = function() {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            if (navigationService)
                                navigationService.navigateTo(MS.Entertainment.UI.Monikers.videoCollection, null, MS.Entertainment.UI.Monikers.tvCollectionPanel)
                        };
                        BlankPageHelper.navigateToOtherCollection = function() {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            if (navigationService)
                                navigationService.navigateTo(MS.Entertainment.UI.Monikers.videoCollection)
                        };
                        return BlankPageHelper
                    })(MS.Entertainment.UI.Framework.UserControl);
                Shell.BlankPageHelper = BlankPageHelper;
                WinJS.Utilities.markSupportedForProcessing(BlankPageHelper);
                var videoApp = new VideoApplication;
                videoApp.initialize()
            })(UI.Shell || (UI.Shell = {}));
            var Shell = UI.Shell
        })(Entertainment.UI || (Entertainment.UI = {}));
        var UI = Entertainment.UI
    })(MS.Entertainment || (MS.Entertainment = {}));
    var Entertainment = MS.Entertainment
})(MS || (MS = {}))
})();
