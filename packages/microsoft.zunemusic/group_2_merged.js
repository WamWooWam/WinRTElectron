/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* >>>>>>/animations/galleryanimations.js:2 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.Animations.Gallery", {
        animateListExpandCollapse: function animateListExpandCollapse(unused1, unused2, affectedItems, inserted) {
            var promises = [];
            var view = null;
            var itemKeys = Object.keys(affectedItems);
            if (itemKeys && itemKeys.length > 0)
                view = MS.Entertainment.Utilities.findParentElementByClassName(affectedItems[itemKeys[0]].element, "win-viewport");
            for (var item in affectedItems)
                promises.push(MS.Entertainment.Animations.Gallery.slideElement(affectedItems[item].element, affectedItems[item]));
            for (item in inserted)
                inserted[item].element.style.opacity = 1.0;
            if (view)
                view.animationPromise = WinJS.Promise.join(promises);
            return {getCompletionPromise: function getCompletionPromise() {
                        return WinJS.Promise.join(promises)
                    }}
        }, slide: function slide(element, className) {
                var completion;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                var slideInEnd = function(event) {
                        element.removeEventListener("animationend", slideInEnd, false);
                        WinJS.Utilities.removeClass(element, className);
                        WinJS.Utilities.addClass(element, "visible");
                        completion()
                    };
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    element.addEventListener("animationend", slideInEnd, false);
                    var delay = 0;
                    if (element.parentElement !== null && element.parentElement.offsetParent !== null) {
                        var delayBase = 100;
                        var leftOffSet = element.parentElement.offsetParent.offsetLeft;
                        var itemIndex = leftOffSet / (element.clientWidth + 10);
                        delay = itemIndex * delayBase;
                        if (element.parentElement.offsetParent.offsetTop > 0)
                            delay += delayBase
                    }
                    element.style.msAnimationDelay = delay + "ms";
                    WinJS.Utilities.addClass(element, className)
                }
                else {
                    WinJS.Utilities.addClass(element, "visible");
                    completion()
                }
                return promise
            }, slideIn: function slideIn(element) {
                return MS.Entertainment.Animations.Gallery.slide(element, "thumbnailButtonFadeIn")
            }, slideOut: function slideOut(element) {
                return MS.Entertainment.Animations.Gallery.slide(element, "thumbnailButtonFadeOut")
            }, loadImage: function loadImage(element, container, animationTarget) {
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    container.appendChild(element);
                    if (animationTarget)
                        WinJS.UI.Animation.fadeIn(animationTarget)
                }
                else {
                    container.appendChild(element);
                    if (animationTarget)
                        animationTarget.style.opacity = 1
                }
            }, enableTextContainerFade: function enableTextContainerFade(textContainer) {
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled)
                    WinJS.UI.Animation.enterContent(textContainer, null)
            }, fadeInTextContainer: function fadeInTextContainer(textContainer) {
                return MS.Entertainment.Animations.Gallery._fadeOutTextContainer(textContainer, true)
            }, fadeOutTextContainer: function fadeOutTextContainer(textContainer) {
                return MS.Entertainment.Animations.Gallery._fadeOutTextContainer(textContainer, false)
            }, _fadeOutTextContainer: function _fadeOutTextContainer(textContainer, fadeIn) {
                var completion;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                var transitionEnd = function(event) {
                        textContainer.removeEventListener("transitionend", transitionEnd, false);
                        completion()
                    };
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled)
                    if (fadeIn && WinJS.Utilities.hasClass(textContainer, "fadeOut")) {
                        WinJS.Utilities.removeClass(textContainer, "fadeOut");
                        textContainer.addEventListener("transitionend", transitionEnd, false);
                        WinJS.Utilities.addClass(textContainer, "fadeIn")
                    }
                    else if (!fadeIn && WinJS.Utilities.hasClass(textContainer, "fadeIn")) {
                        WinJS.Utilities.removeClass(textContainer, "fadeIn");
                        textContainer.addEventListener("transitionend", transitionEnd, false);
                        WinJS.Utilities.addClass(textContainer, "fadeOut")
                    }
                    else
                        completion();
                else {
                    if (fadeIn)
                        WinJS.Utilities.removeClass(textContainer, "hidden");
                    else
                        WinJS.Utilities.addClass(textContainer, "hidden");
                    completion()
                }
                return promise
            }, slideElement: function slideElement(element, destination) {
                var completion;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                function animationEnd(event) {
                    if (event.srcElement === element) {
                        element.removeEventListener("transitionend", animationEnd, false);
                        element.animationEnd = null;
                        WinJS.Utilities.removeClass(element, "listViewElementTransition");
                        element.style.msTransform = "";
                        element.style.left = destination.left + "px";
                        element.style.top = destination.top + "px";
                        element.animating = false;
                        completion()
                    }
                }
                {};
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    if (!element.animating) {
                        element.style.left = destination.oldLeft + "px";
                        element.style.top = destination.oldTop + "px";
                        element.animating = true
                    }
                    else {
                        element.removeEventListener("transitionend", element.animationEnd, false);
                        element.animationEnd = null
                    }
                    element.animationEnd = animationEnd;
                    element.addEventListener("transitionend", animationEnd, false);
                    window.getComputedStyle(listView._viewport);
                    requestAnimationFrame(function() {
                        WinJS.Utilities.addClass(element, "listViewElementTransition");
                        var translate = "";
                        if (destination.left !== destination.oldLeft)
                            translate += "translateX(" + (destination.left - destination.oldLeft) + "px) ";
                        if (destination.top !== destination.oldTop)
                            translate += "translateY(" + (destination.top - destination.oldTop) + "px)";
                        element.style.msTransform = translate
                    })
                }
                else {
                    element.style.left = destination.left + "px";
                    element.style.top = destination.top + "px";
                    completion()
                }
                return promise
            }, scrollListView: function scrollListView(listView, destinationOffset) {
                var completion;
                var animationComplete = false;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                function animationEnd(event) {
                    if (event.srcElement === listView._viewport) {
                        listView._viewport.removeEventListener("transitionend", animationEnd, false);
                        listView.animationEnd = null;
                        animationComplete = true;
                        cleanupStrip()
                    }
                }
                {};
                function cleanupStrip() {
                    if (!animationComplete)
                        return;
                    WinJS.Utilities.removeClass(listView._viewport, "listViewScrollTransition");
                    listView._viewport.style.msTransform = "";
                    listView._viewport.style.overflow = "";
                    listView.scrollPosition = destinationOffset;
                    listView.animating = false;
                    animationComplete = false;
                    completion()
                }
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    if (!listView.animating) {
                        var offset = listView.scrollPosition;
                        listView._viewport.style.overflow = "visible";
                        listView._viewport.style.msTransform = "translateX(-" + offset + "px)";
                        listView.animating = true
                    }
                    else {
                        listView._viewport.removeEventListener("transitionend", listView.animationEnd, false);
                        listView.animationEnd = null
                    }
                    listView.animationEnd = animationEnd;
                    listView._viewport.addEventListener("transitionend", animationEnd, false);
                    window.getComputedStyle(listView._viewport);
                    requestAnimationFrame(function() {
                        WinJS.Utilities.addClass(listView._viewport, "listViewScrollTransition");
                        listView._viewport.style.msTransform = "translateX(-" + destinationOffset + "px)"
                    })
                }
                else {
                    listView._viewport.scrollLeft = destinationOffset;
                    completion()
                }
                return promise
            }, _simpleAnimateIn: function simpleAnimate(element, animationClass, hiddenClass) {
                var completion;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                var animationEnd = function(event) {
                        if (event.srcElement === element) {
                            element.removeEventListener("animationend", animationEnd, false);
                            WinJS.Utilities.removeClass(element, animationClass);
                            completion()
                        }
                    };
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    element.addEventListener("animationend", animationEnd, false);
                    WinJS.Utilities.removeClass(element, hiddenClass);
                    WinJS.Utilities.addClass(element, animationClass)
                }
                else
                    completion();
                return promise
            }, _simpleAnimateOut: function simpleAnimateOut(element, animationClass, hiddenClass) {
                var completion;
                var promise = new WinJS.Promise(function(c, e, p) {
                        completion = c
                    });
                var animationEnd = function(event) {
                        if (event.srcElement === element) {
                            element.removeEventListener("animationend", animationEnd, false);
                            WinJS.Utilities.removeClass(element, animationClass);
                            WinJS.Utilities.addClass(element, hiddenClass);
                            completion()
                        }
                    };
                if (!MS.Entertainment.ServiceLocator || MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).animationsEnabled) {
                    element.addEventListener("animationend", animationEnd, false);
                    WinJS.Utilities.addClass(element, animationClass)
                }
                else
                    completion();
                return promise
            }, fadeInActionButtons: function fadeInActionButtons(element) {
                return MS.Entertainment.Animations.Gallery._simpleAnimateIn(element, "detailsActionButtonFadeIn", "inlineDetailsHidden")
            }, fadeOutActionButtons: function fadeOutActionButtons(element) {
                return MS.Entertainment.Animations.Gallery._simpleAnimateOut(element, "detailsActionButtonFadeOut", "inlineDetailsHidden")
            }, fadeInActionText: function fadeInActionText(element) {
                return MS.Entertainment.Animations.Gallery._simpleAnimateIn(element, "detailsActionTextFadeIn", "inlineDetailsHidden")
            }, fadeOutActionText: function fadeOutActionText(element) {
                return MS.Entertainment.Animations.Gallery._simpleAnimateOut(element, "detailsActionTextFadeOut", "inlineDetailsHidden")
            }
    })
})()
})();
/* >>>>>>/framework/scriptutilities.js:255 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var Framework;
        (function(Framework) {
            var ScriptUtilities;
            (function(ScriptUtilities) {
                function setOptions(target, options, setPublicMembersOnly) {
                    if (!target || !options || typeof options !== "object")
                        return;
                    Object.keys(options).forEach(function(key) {
                        var privateKey = "_" + key;
                        var value = options[key];
                        if (privateKey in target && !setPublicMembersOnly)
                            target[privateKey] = value;
                        else if (key in target)
                            target[key] = value
                    })
                }
                ScriptUtilities.setOptions = setOptions;
                function waitForSnappedIfNeeded(disallowUserDismiss) {
                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    var waitForSnappedPromise = WinJS.Promise.as();
                    if (uiStateService.isSnapped)
                        waitForSnappedPromise = Entertainment.UI.Framework.loadTemplate("/Controls/PleaseResizeDialog.html", "pleaseResizeDialog", true).then(function() {
                            return Entertainment.UI.Controls.PleaseResizeDialog.waitForWindowResize(!!disallowUserDismiss)
                        });
                    return waitForSnappedPromise
                }
                ScriptUtilities.waitForSnappedIfNeeded = waitForSnappedIfNeeded;
                function _getTabStopsForElementsSubtree(element, includeNegativeTabStops) {
                    var tabStops = WinJS.Utilities.query("*", element).filter(function(candidateTabstop) {
                            if ((candidateTabstop.tabIndex < 0) && !includeNegativeTabStops)
                                return false;
                            if (candidateTabstop.hasAttribute("tabindex"))
                                return true;
                            switch (candidateTabstop.tagName.toLocaleLowerCase()) {
                                case"button":
                                    return true;
                                default:
                                    return false
                            }
                        });
                    return tabStops
                }
                function suppressTabbing(element) {
                    _getTabStopsForElementsSubtree(element, false).forEach(function(item) {
                        item.previousTabIndex = item.tabIndex;
                        item.tabIndex = -1
                    })
                }
                ScriptUtilities.suppressTabbing = suppressTabbing;
                function restoreTabbing(element) {
                    _getTabStopsForElementsSubtree(element, true).forEach(function(item) {
                        if (item.previousTabIndex === undefined)
                            return;
                        item.tabIndex = item.previousTabIndex;
                        item.previousTabIndex = undefined
                    })
                }
                ScriptUtilities.restoreTabbing = restoreTabbing;
                function initializeControlWithDeclarativeControls(control) {
                    Framework.assert(Entertainment.Utilities.isApp2, "initializeControlWithDeclarativeControls should only be called in app2");
                    var members = control.domElement.querySelectorAll("[data-win-blockbinding]");
                    var promises = [WinJS.UI.processAll(control.domElement.firstElementChild), function() {
                                return WinJS.UI.processAll(control.domElement)
                            }];
                    for (var i = members.length - 1; i >= 0; i--)
                        ScriptUtilities.addConstructionPromisesForElementTree(members[i], promises);
                    promises.push(function() {
                        MS.Entertainment.UI.Framework.processDeclMembers(control.domElement, control)
                    });
                    for (var i = 0; i < members.length; i++)
                        ScriptUtilities.addBindingsForElementTreePromise(members[i], promises);
                    ScriptUtilities.addBindingProcessPromise(control.domElement, promises);
                    for (var i = 0; i < members.length; i++)
                        ScriptUtilities.addBindingProcessPromise(members[i], promises);
                    var result = promises.reduce(function(c, n) {
                            return c.then(n)
                        });
                    return result.then(null, function(error) {
                            Framework.fail("Error binding declarative controls: " + (error && error.message))
                        })
                }
                ScriptUtilities.initializeControlWithDeclarativeControls = initializeControlWithDeclarativeControls;
                function addConstructionPromisesForElementTree(element, promises) {
                    promises.push(function() {
                        return WinJS.UI.processAll(element.firstElementChild)
                    });
                    promises.push(function() {
                        return WinJS.UI.processAll(element)
                    });
                    promises.push(function() {
                        MS.Entertainment.UI.Framework.processDeclMembers(element, element.winControl)
                    });
                    promises.push(function() {
                        MS.Entertainment.UI.Framework.processDeclEvents(element)
                    })
                }
                ScriptUtilities.addConstructionPromisesForElementTree = addConstructionPromisesForElementTree;
                function addBindingsForElementTreePromise(element, promises) {
                    promises.push(function() {
                        var firstParentElement = element.parentElement;
                        while (firstParentElement && !firstParentElement.getAttribute("data-win-control"))
                            firstParentElement = firstParentElement.parentElement;
                        var promise = WinJS.Promise.as();
                        if (firstParentElement) {
                            var parentControl = firstParentElement.winControl;
                            var blockBinding = element.getAttribute("data-win-blockbinding");
                            var binds = blockBinding.split(';');
                            binds.forEach(function(bindingPairString) {
                                var bindingPair = bindingPairString.split(':');
                                if (bindingPair.length > 1) {
                                    var paths = bindingPair[1].trim().split('.');
                                    var bindingPath = {};
                                    var workingPath = bindingPath;
                                    for (var j = 0; j < paths.length - 1; j++) {
                                        workingPath[paths[j]] = {};
                                        workingPath = workingPath[paths[j]]
                                    }
                                    workingPath[paths[paths.length - 1]] = function(newValue) {
                                        element.winControl[bindingPair[0].trim()] = newValue;
                                        element.winControl.notify(bindingPair[0].trim(), newValue)
                                    };
                                    WinJS.Binding.bind(parentControl, bindingPath)
                                }
                                else if (bindingPair.length > 2)
                                    Framework.fail("Binding block format is incorrect.")
                            })
                        }
                        return WinJS.Promise.as()
                    })
                }
                ScriptUtilities.addBindingsForElementTreePromise = addBindingsForElementTreePromise;
                function addBindingProcessPromise(element, promises) {
                    promises.push(function() {
                        WinJS.Binding.processAll(element.firstElementChild, element.winControl)
                    })
                }
                ScriptUtilities.addBindingProcessPromise = addBindingProcessPromise
            })(ScriptUtilities = Framework.ScriptUtilities || (Framework.ScriptUtilities = {}));
            var PlayValidation;
            (function(PlayValidation) {
                var MediaPlayValidation = (function() {
                        function MediaPlayValidation(){}
                        MediaPlayValidation.prototype.validatePlayMedia = function(mediaItemToPlay) {
                            var _this = this;
                            return this.getSigningInPromise().then(function() {
                                    return _this.mediaPlaybackPromise(mediaItemToPlay)
                                })
                        };
                        MediaPlayValidation.prototype.getSigningInPromise = function() {
                            var signIn = Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            var signedInSignal = new MS.Entertainment.UI.Framework.Signal;
                            var signInBindings;
                            var signInPromise = WinJS.Promise.wrap();
                            var cleanupSignInBindings = function() {
                                    if (!signInBindings)
                                        return;
                                    signInBindings.cancel();
                                    signInBindings = null;
                                    if (signedInSignal)
                                        signedInSignal.complete()
                                };
                            if (signIn.isSigningIn) {
                                signInBindings = WinJS.Binding.bind(signIn, {isSigningIn: cleanupSignInBindings});
                                signInPromise = signedInSignal.promise
                            }
                            return signInPromise
                        };
                        MediaPlayValidation.prototype.mediaPlaybackPromise = function(invokedMedia) {
                            if (!Entertainment.ServiceLocator.isServiceRegistered(Entertainment.Services.adService))
                                return WinJS.Promise.wrap();
                            var signal = new Entertainment.UI.Framework.Signal;
                            var adService = Entertainment.ServiceLocator.getService(Entertainment.Services.adService);
                            adService.isStreamingBlocked(invokedMedia).done(function(signInNeeded) {
                                var dialogDismissedSignal = new Entertainment.UI.Framework.Signal;
                                var dialogDismissed = function() {
                                        dialogDismissedSignal.complete()
                                    };
                                dialogDismissedSignal.promise.then(function() {
                                    var signIn = Entertainment.ServiceLocator.getService(Entertainment.Services.signIn);
                                    return (!signInNeeded || signIn.isSignedIn) ? adService.playVideoAdIfRequired(invokedMedia, null) : false
                                }).then(function(adPlayedIfNeeded) {
                                    if (adPlayedIfNeeded)
                                        signal.complete();
                                    else
                                        signal.promise.cancel();
                                    return WinJS.Promise.as()
                                }, function(error) {
                                    Entertainment.ViewModels.fail("playVideoAdIfRequired_failed: " + (error && error.message));
                                    signal.complete()
                                });
                                if (signInNeeded) {
                                    var featureEnablement = Entertainment.ServiceLocator.getService(Entertainment.Services.featureEnablement);
                                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                    if (!featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlayAnonymous))
                                        Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed);
                                    else if (configurationManager.service.lastSignedInUserXuid)
                                        Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_EXISTING_USER_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForExistingUser, Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed);
                                    else
                                        Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_NEW_USER_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForNewUser, Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed)
                                }
                                else
                                    dialogDismissed()
                            }, function(error) {
                                Entertainment.ViewModels.fail("isStreamingBlocked_failed: " + (error && error.message));
                                signal.error(error)
                            });
                            return signal.promise
                        };
                        return MediaPlayValidation
                    })();
                PlayValidation.MediaPlayValidation = MediaPlayValidation
            })(PlayValidation = Framework.PlayValidation || (Framework.PlayValidation = {}))
        })(Framework = Entertainment.Framework || (Entertainment.Framework = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/modulebase.js:478 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var ModuleBase = (function(_super) {
                    __extends(ModuleBase, _super);
                    function ModuleBase(name) {
                        _super.call(this);
                        this._lockedViewState = -3;
                        this._moduleState = -3;
                        this._items = null;
                        this._bindableItems = null;
                        this._isModuleStateLocked = false;
                        this._count = -1;
                        this._searchText = null;
                        this._minimumItemCount = 1;
                        this._maximumItemCount = -1;
                        this._name = name
                    }
                    Object.defineProperty(ModuleBase.prototype, "isExcludedFromPageState", {
                        get: function() {
                            return this._isExcludedFromPageState
                        }, set: function(value) {
                                this.updateAndNotify("isExcludedFromPageState", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "name", {
                        get: function() {
                            return this._name
                        }, set: function(value) {
                                this.updateAndNotify("name", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "count", {
                        get: function() {
                            return this._count
                        }, set: function(value) {
                                this.updateAndNotify("count", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "minimumItemCount", {
                        get: function() {
                            return this._minimumItemCount
                        }, set: function(value) {
                                this.updateAndNotify("minimumItemCount", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "maximumItemCount", {
                        get: function() {
                            return this._maximumItemCount
                        }, set: function(value) {
                                this.updateAndNotify("maximumItemCount", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "items", {
                        get: function() {
                            return this._items
                        }, set: function(value) {
                                this.updateAndNotify("items", value);
                                this.bindableItems = new Entertainment.ObservableArray(this.items).bindableItems
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "bindableItems", {
                        get: function() {
                            if (!this._bindableItems) {
                                Trace.assert(this.items, "items are expected to be populated before this accessor is called");
                                this._bindableItems = new Entertainment.ObservableArray(this.items).bindableItems
                            }
                            return this._bindableItems
                        }, set: function(value) {
                                this.updateAndNotify("bindableItems", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "moduleAction", {
                        get: function() {
                            if (!this._moduleAction)
                                this._moduleAction = this._createHeaderAction();
                            return this._moduleAction
                        }, set: function(value) {
                                this.updateAndNotify("moduleAction", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "moduleState", {
                        get: function() {
                            return this._moduleState
                        }, set: function(value) {
                                if (this._isModuleStateLocked)
                                    this._lockedViewState = value;
                                else
                                    this.updateAndNotify("moduleState", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "searchText", {
                        get: function() {
                            return this._searchText
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ModuleBase.prototype, "isDisposed", {
                        get: function() {
                            return this._isDisposed
                        }, enumerable: true, configurable: true
                    });
                    ModuleBase.prototype.dispose = function() {
                        if (this._asyncDelayInitializeWork) {
                            this._asyncDelayInitializeWork.cancel();
                            this._asyncDelayInitializeWork = null
                        }
                        this._bindableItems = null;
                        this._isDisposed = true
                    };
                    ModuleBase.prototype.delayInitialize = function() {
                        var _this = this;
                        if (this.scheduledDelayInitialize && !this.isDisposed && !this._asyncDelayInitializeWork)
                            this._asyncDelayInitializeWork = Entertainment.Utilities.schedulePromiseBelowNormal("ModuleBase::delayInitialize").then(function() {
                                if (!_this.isDisposed)
                                    _this.scheduledDelayInitialize();
                                _this._asyncDelayInitializeWork = null
                            }, function(error) {
                                MS.Entertainment.ViewModels.assert(WinJS.Promise.isCanceledError(error), "ModuleBase::delayInitialize() Unexcepted error. Error: " + (error && error.message));
                                _this._asyncDelayInitializeWork = null
                            })
                    };
                    ModuleBase.prototype.refreshItems = function(){};
                    ModuleBase.prototype.getItems = function() {
                        MS.Entertainment.UI.fail("getItems() should be overridden by its subclass");
                        return null
                    };
                    ModuleBase.prototype.isAvailable = function() {
                        return WinJS.Promise.as(true)
                    };
                    ModuleBase.prototype.load = function() {
                        var _this = this;
                        this.moduleState = 1;
                        return this.isAvailable().then(function(isAvailable) {
                                if (!isAvailable) {
                                    _this.items = [];
                                    _this.moduleState = -5;
                                    return WinJS.Promise.as()
                                }
                                else
                                    return _this.getItems()
                            }).then(function(moduleItemsResult) {
                                if (_this.moduleState === -5)
                                    return;
                                MS.Entertainment.UI.assert(moduleItemsResult && (!moduleItemsResult.items || Array.isArray(moduleItemsResult.items) || moduleItemsResult.items instanceof Entertainment.ObservableArray), "Module subclass returned an object that isn't an array or an observable array.");
                                _this.items = moduleItemsResult && moduleItemsResult.items;
                                var totalCount = moduleItemsResult && moduleItemsResult.totalCount;
                                var itemsCount = _this.items ? _this.items.length : 0;
                                if (itemsCount >= _this.minimumItemCount) {
                                    _this.moduleState = 2;
                                    _this.count = (totalCount === null || totalCount === undefined) ? itemsCount : totalCount
                                }
                                else {
                                    _this.moduleState = 0;
                                    _this.count = 0
                                }
                            }, function(error) {
                                _this.count = 0;
                                _this._getItemsPromise = null;
                                _this.moduleState = -1;
                                var isOnline = Entertainment.UI.NetworkStatusService.isOnline();
                                MS.Entertainment.UI.assert(!isOnline || !error || WinJS.Promise.isCanceledError(error), "ModuleBase::load(). Failed to load module. Error message: " + (error && error.message), String.empty, Entertainment.UI.Debug.errorLevel.low)
                            })
                    };
                    ModuleBase.prototype.reload = function() {
                        this._getItemsPromise = null;
                        return this.load()
                    };
                    ModuleBase.prototype.lockModuleState = function() {
                        this._isModuleStateLocked = true
                    };
                    ModuleBase.prototype.unLockModuleState = function() {
                        this._isModuleStateLocked = false;
                        this.updateAndNotify("moduleState", this._lockedViewState)
                    };
                    ModuleBase.prototype.wrapModuleError = function(error, customMessage) {
                        if (error && !WinJS.Promise.isCanceledError(error) && customMessage)
                            error = new Error(customMessage + " Error message: " + (error && error.message));
                        return WinJS.Promise.wrapError(error)
                    };
                    ModuleBase.isValidSearchText = function(searchText) {
                        try {
                            if (searchText)
                                encodeURIComponent(searchText);
                            return true
                        }
                        catch(error) {
                            return false
                        }
                    };
                    ModuleBase.prototype.freeze = function(){};
                    ModuleBase.prototype.thaw = function(){};
                    ModuleBase.prototype._createHeaderAction = function(args) {
                        MS.Entertainment.UI.fail("_createHeaderAction() should be overridden by its subclass");
                        return null
                    };
                    return ModuleBase
                })(Entertainment.UI.Framework.ObservableBase);
            ViewModels.ModuleBase = ModuleBase
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/pageviewmodelbase.js:696 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var UI = MS.Entertainment.UI;
            MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
            var PageViewModelBase = (function(_super) {
                    __extends(PageViewModelBase, _super);
                    function PageViewModelBase() {
                        _super.call(this);
                        this._disposed = false;
                        this._isDelayInitialized = false;
                        this._modules = null;
                        this._networkStatusListener = null;
                        this._isOnline = true;
                        this._notificationList = null;
                        this._applyGlobalNotifications = false;
                        this.mediaItemPromise = null;
                        this.notificationListPromise = null;
                        this.mediaItemPromise = WinJS.Promise.wrap();
                        this._isOnline = UI.NetworkStatusService.isOnline();
                        this._enableNetworkStatusListener()
                    }
                    Object.defineProperty(PageViewModelBase.prototype, "disposed", {
                        get: function() {
                            return this._disposed
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "modules", {
                        get: function() {
                            return this._modules
                        }, set: function(value) {
                                this._modules = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "applyGlobalNotifications", {
                        get: function() {
                            return this._applyGlobalNotifications
                        }, set: function(value) {
                                this._applyGlobalNotifications = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "moduleWaitTime", {
                        get: function() {
                            var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            return configManager.music.pageLoadTimeUntilSpinner
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "viewStateViewModel", {
                        get: function() {
                            MS.Entertainment.UI.fail("viewStateViewModel property should be overridden by its subclass");
                            return null
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "isFirstLocationLoaded", {
                        get: function() {
                            if (Entertainment.ServiceLocator.isServiceRegistered(Entertainment.Services.winJSNavigation))
                                return Entertainment.ServiceLocator.getService(Entertainment.Services.winJSNavigation).isFirstLocationLoaded;
                            return false
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "isOnline", {
                        get: function() {
                            return this._isOnline
                        }, set: function(value) {
                                this.updateAndNotify("isOnline", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "notificationList", {
                        get: function() {
                            return this._notificationList && this._notificationList.dataSource
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(PageViewModelBase.prototype, "isDelayInitialized", {
                        get: function() {
                            return this._isDelayInitialized
                        }, enumerable: true, configurable: true
                    });
                    PageViewModelBase.prototype.dispose = function() {
                        if (this._disposed)
                            return;
                        if (this._moduleViewStateListeners)
                            this._moduleViewStateListeners.forEach(function(listener) {
                                listener.cancel()
                            });
                        if (this.modules) {
                            this.modules.forEach(function(pageModule) {
                                pageModule.dispose()
                            });
                            this.modules = null
                        }
                        if (this._asyncDelayInitializeWork) {
                            this._asyncDelayInitializeWork.cancel();
                            this._asyncDelayInitializeWork = null
                        }
                        this._releaseNotifications();
                        this._cancelNetworkStatusListener();
                        this._disposed = true
                    };
                    Object.defineProperty(PageViewModelBase.prototype, "isDisposed", {
                        get: function() {
                            return this._disposed
                        }, enumerable: true, configurable: true
                    });
                    PageViewModelBase.prototype.freeze = function() {
                        this._cancelNetworkStatusListener();
                        if (this.modules)
                            this.modules.forEach(function(pageModule) {
                                if (pageModule && pageModule.freeze)
                                    pageModule.freeze()
                            })
                    };
                    PageViewModelBase.prototype.listenForModuleViewStateChanges = function() {
                        var _this = this;
                        if (this.modules && this.modules.length > 0)
                            this._moduleViewStateListeners = this.modules.map(function(newModule) {
                                return UI.Framework.addEventHandlers(newModule, {moduleStateChanged: _this._onModuleViewStateChanged.bind(_this)})
                            })
                    };
                    PageViewModelBase.prototype.loadModules = function(){};
                    PageViewModelBase.prototype.delayInitialize = function() {
                        var _this = this;
                        if (this._isDelayInitialized || this.isDisposed)
                            return;
                        this._isDelayInitialized = true;
                        if (this.scheduledDelayInitialize && !this._asyncDelayInitializeWork)
                            this._asyncDelayInitializeWork = Entertainment.Utilities.schedulePromiseBelowNormal("PageViewModelBase::delayInitialize").then(function() {
                                if (!_this.isDisposed)
                                    _this.scheduledDelayInitialize();
                                _this._asyncDelayInitializeWork = null
                            }, function(error) {
                                MS.Entertainment.ViewModels.assert(WinJS.Promise.isCanceledError(error), "PageViewModelBase::delayInitialize() Unexcepted error. Error: " + (error && error.message));
                                _this._asyncDelayInitializeWork = null
                            });
                        if (Entertainment.ServiceLocator.isServiceRegistered(Entertainment.Services.listNotification))
                            this._initializeNotificationList()
                    };
                    PageViewModelBase.prototype.refreshViewState = function() {
                        this._onModuleViewStateChanged()
                    };
                    PageViewModelBase.prototype.thaw = function() {
                        this._enableNetworkStatusListener();
                        if (this.modules)
                            this.modules.forEach(function(pageModule) {
                                if (pageModule && pageModule.thaw)
                                    pageModule.thaw()
                            })
                    };
                    PageViewModelBase.prototype._initializeLocalNotifications = function() {
                        var notifications = [];
                        return WinJS.Promise.as(notifications)
                    };
                    PageViewModelBase.prototype._getModuleByName = function(moduleName) {
                        ViewModels.assert(moduleName, "PageViewModelBase::_getModuleByName: moduleName parameter is required.");
                        ViewModels.assert(this.modules, "PageViewModelBase::_getModuleByName: this.modules is null or undefined.");
                        var foundModule = null;
                        var pageModules = this.modules.filter(function(pageModule) {
                                return pageModule.name === moduleName
                            });
                        if (pageModules && pageModules.length > 0)
                            foundModule = pageModules[0];
                        else
                            ViewModels.fail("PageViewModelBase::_getModuleByName: Module not found: " + moduleName, null, UI.Debug.errorLevel.low);
                        return foundModule
                    };
                    PageViewModelBase.prototype._globalNotificationsFilter = function(notification) {
                        return false
                    };
                    PageViewModelBase.prototype._reinitializeNotificationList = function() {
                        if (this.notificationList)
                            this._initializeNotificationList()
                    };
                    PageViewModelBase.prototype._releaseNotificationListPromise = function() {
                        if (this.notificationListPromise) {
                            this.notificationListPromise.cancel();
                            this.notificationListPromise = null
                        }
                    };
                    PageViewModelBase.prototype._releaseNotifications = function() {
                        this._releaseNotificationListPromise();
                        if (this._notificationList) {
                            this._notificationList.dispose();
                            this._notificationList = null
                        }
                    };
                    PageViewModelBase.prototype._initializeNotificationList = function() {
                        var _this = this;
                        if (!this.isDisposed) {
                            this._releaseNotifications();
                            this.notificationListPromise = this._initializeLocalNotifications();
                            this.notificationListPromise.done(function(notifications) {
                                if (_this.isDisposed)
                                    return;
                                var notificationList = new UI.ObservableListNotificationAdapter(!_this.applyGlobalNotifications, _this._globalNotificationsFilter.bind(_this));
                                notificationList.append(notifications);
                                _this._setNotificationList(notificationList)
                            }, function(error) {
                                ViewModels.assert(WinJS.Promise.isCanceledError(error), "PageViewModelBase::_initializeNotificationList() Failed to get notifications with error: " + error && error.message)
                            })
                        }
                    };
                    PageViewModelBase.prototype._setNotificationList = function(value) {
                        if (!this._notificationList || !this._notificationList.isEqual(value)) {
                            var oldNotificationList = this._notificationList;
                            var oldDataSource = this.notificationList;
                            this._notificationList = value;
                            var newDataSource = this.notificationList;
                            this.dispatchChangeAndNotify("notificationList", newDataSource, oldDataSource);
                            if (oldNotificationList)
                                oldNotificationList.dispose()
                        }
                    };
                    PageViewModelBase.prototype._addModuleAccessorProperties = function() {
                        var _this = this;
                        if (!this.modules)
                            return;
                        this.modules.forEach(function(pageModule) {
                            var moduleName = pageModule && pageModule.name;
                            if (!moduleName)
                                return;
                            Object.defineProperty(_this, moduleName, {
                                get: function() {
                                    return pageModule
                                }, enumerable: true, configurable: true
                            })
                        })
                    };
                    PageViewModelBase.prototype._updateSmartBuyStateEngineState = function() {
                        if (this._smartBuyStateEngine)
                            this._smartBuyStateEngine.updateState()
                    };
                    PageViewModelBase.prototype._enableNetworkStatusListener = function() {
                        var _this = this;
                        this._cancelNetworkStatusListener();
                        this._networkStatusListener = UI.Framework.addEventHandlers(Entertainment.ServiceLocator.getService(Entertainment.Services.uiState), {networkStatusChanged: function() {
                                return _this._onNetworkStatusChanged()
                            }});
                        this._onNetworkStatusChanged()
                    };
                    PageViewModelBase.prototype._cancelNetworkStatusListener = function() {
                        if (this._networkStatusListener) {
                            this._networkStatusListener.cancel();
                            this._networkStatusListener = null
                        }
                    };
                    PageViewModelBase.prototype._isNeededForPageReady = function(pageModule) {
                        return pageModule && !pageModule.isExcludedFromPageState
                    };
                    PageViewModelBase.prototype._onModuleViewStateChanged = function() {
                        var _this = this;
                        var allModulesExist = this.modules.every(function(m) {
                                return !!m
                            });
                        if (!allModulesExist)
                            return;
                        this._refreshEmptyViewState();
                        var moduleStates = this.modules.filter(function(m) {
                                return _this._isNeededForPageReady(m)
                            }).map(function(m) {
                                return m.moduleState
                            });
                        var someModulesLoading = moduleStates.some(function(state) {
                                return state === 1
                            });
                        if (someModulesLoading) {
                            this.viewStateViewModel.viewState = 1;
                            return
                        }
                        var allModulesCompleted = moduleStates.every(function(state) {
                                return Entertainment.Utilities.ViewState.isStateCompleted(state)
                            });
                        if (!allModulesCompleted)
                            return;
                        var someModulesInError = moduleStates.some(function(state) {
                                return state === -1
                            });
                        if (someModulesInError) {
                            if (this.isOnline)
                                this.viewStateViewModel.viewState = -1;
                            else
                                this.viewStateViewModel.viewState = -2;
                            return
                        }
                        var allModulesEmpty = moduleStates.every(function(state) {
                                return state === 0
                            });
                        if (allModulesEmpty) {
                            this.viewStateViewModel.viewState = 0;
                            return
                        }
                        this.viewStateViewModel.viewState = 2
                    };
                    PageViewModelBase.prototype._onNetworkStatusChanged = function() {
                        this.isOnline = UI.NetworkStatusService.isOnline();
                        if (this.viewStateViewModel.isSupportedViewState(-2) && Entertainment.Utilities.ViewState.isStateCompleted(this.viewStateViewModel.viewState) && this.viewStateViewModel.viewState !== 2 && this.viewStateViewModel.viewState !== 0)
                            this.loadModules();
                        this._updateSmartBuyStateEngineState();
                        if (this.isOnline)
                            this._onNetworkAvailable();
                        else
                            this._onNetworkUnavailable()
                    };
                    PageViewModelBase.prototype._onNetworkAvailable = function() {
                        var offlineNotificationIndex = this._getOfflineNotificationIndex();
                        if (this.notificationList && offlineNotificationIndex >= 0)
                            this.notificationList.removeAt(offlineNotificationIndex)
                    };
                    PageViewModelBase.prototype._onNetworkUnavailable = function() {
                        if (this.notificationList && this._getOfflineNotificationIndex() < 0) {
                            var offlineNotification = this._createOfflineNotification();
                            if (offlineNotification)
                                this.notificationList.push(offlineNotification)
                        }
                    };
                    PageViewModelBase.prototype._getOfflineNotificationIndex = function() {
                        if (this.notificationList) {
                            var matches = this.notificationList.filter(function(item) {
                                    return item.category === UI.NotificationCategoryEnum.networkStatus
                                });
                            var notification = matches && matches.length > 0 ? matches[0] : null
                        }
                        return this.notificationList ? this.notificationList.indexOf(notification) : -1
                    };
                    PageViewModelBase.prototype._createOfflineNotification = function() {
                        return null
                    };
                    PageViewModelBase.prototype._initializeModules = function(){};
                    PageViewModelBase.prototype._refreshEmptyViewState = function(){};
                    PageViewModelBase.prototype._updateModuleAndNotify = function(moduleKey, name, value) {
                        var oldValue = this.modules[moduleKey];
                        this.modules[moduleKey] = value;
                        this.dispatchChangeAndNotify(name, value, oldValue)
                    };
                    return PageViewModelBase
                })(UI.Framework.ObservableBase);
            ViewModels.PageViewModelBase = PageViewModelBase
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/components/music/cloudmatchoptindialog.js:1051 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Music");
    WinJS.Namespace.define("MS.Entertainment.Music", {CloudMatchOptIn: MS.Entertainment.UI.Framework.defineUserControl("Components/Music/CloudMatchOptInDialog.html#cloudMatchOptInTemplate", function cloudMatchOptIn(element, options) {
            this._cloudCollectionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
            this._matchButton = WinJS.Binding.as({
                title: String.load(String.id.IDS_MUSIC_CLOUD_MATCH_ACCEPT_BUTTON), execute: this._onMatch.bind(this)
            });
            this._cancelButton = WinJS.Binding.as({
                title: String.load(String.id.IDS_MUSIC_CLOUD_MATCH_CANCEL_BUTTON), execute: this._onCancel.bind(this)
            });
            this._closeButton = WinJS.Binding.as({
                title: String.load(String.id.IDS_MUSIC_CLOUD_ICON_CLOSE_BUTTON), execute: this._onClose.bind(this)
            });
            this.subHeaderString = String.load(String.id.IDS_MUSIC_CLOUD_MATCH_HEADER);
            this.paragraphTwoText = String.empty;
            var showOptInText = !this._cloudCollectionService.isCloudMatchOptedIn;
            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
            if (signedInUser.isSubscription) {
                this.paragraphOneText = String.load(String.id.IDS_MUSIC_CLOUD_MATCH_PARA_1_XMP);
                if (showOptInText)
                    this.paragraphTwoText = String.load(String.id.IDS_MUSIC_CLOUD_MATCH_PARA_2_XMP)
            }
            else {
                this.paragraphOneText = String.load(String.id.IDS_MUSIC_CLOUD_MATCH_PARA_1_FREE);
                if (showOptInText)
                    this.paragraphTwoText = String.load(String.id.IDS_MUSIC_CLOUD_MATCH_PARA_2_FREE);
                this.footerText = String.load(String.id.IDS_MUSIC_CLOUD_MATCH_FOOTER_ALT_FREE)
            }
            this.footerLinkText = String.load(String.id.IDS_MUSIC_CLOUD_ICON_LEARN_MORE_TEXT);
            this.footerLinkUrl = MS.Entertainment.UI.FWLink.musicIntro
        }, {
            _matchButton: null, _cancelButton: null, _closeButton: null, _container: null, _cloudCollectionService: null, subHeaderString: String.empty, paragraphOneText: String.empty, paragraphTwoText: String.empty, footerText: String.empty, footerLinkText: String.empty, footerLinkUrl: String.empty, dialogResult: null, setOverlay: function setOverlay(container) {
                    this._container = container;
                    container.buttons = this._cloudCollectionService.isCloudMatchOptedIn ? [this._closeButton] : [this._matchButton, this._cancelButton]
                }, _onMatch: function _onMatch() {
                    this._cloudCollectionService.setCloudMatchOptIn(MS.Entertainment.CloudCollectionService.CloudMatchStatus.OptedIn);
                    MS.Entertainment.Utilities.Telemetry.logTelemetryEvent(MS.Entertainment.Utilities.PreferenceSettingsWrapper.TelemetryEvents.CloudMatchEnabledStateChanged, MS.Entertainment.Utilities.PreferenceSettingsWrapper.States.CloudMatchEnabledState, true, MS.Entertainment.Utilities.Telemetry.Events.CloudMatchStateChangeMethod, MS.Entertainment.Utilities.Telemetry.StateChangeMethodValues.dialog);
                    this.dialogResult = MS.Entertainment.Music.CloudMatchOptIn.DialogResult.optIn;
                    this._container.hide()
                }, _onCancel: function _onCancel() {
                    MS.Entertainment.Utilities.Telemetry.logTelemetryEvent(MS.Entertainment.Music.CloudMatchOptIn.TelemetryEvent.CloudMatchDialogResultMaybeLater);
                    this.dialogResult = MS.Entertainment.Music.CloudMatchOptIn.DialogResult.maybeLater;
                    this._container.hide()
                }, _onClose: function _onClose() {
                    this._container.hide()
                }
        }, null, {
            DialogResult: {
                optIn: "optIn", maybeLater: "maybeLater"
            }, TelemetryEvent: {CloudMatchDialogResultMaybeLater: "CloudMatchDialogResultMaybeLater"}
        })});
    WinJS.Namespace.define("MS.Entertainment.Music", {cloudMatchOptInDialog: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Dialog", "Components/Music/CloudMatchOptInDialog.html#dialogTemplate", null, {}, null, {
            _dialog: null, show: function show(dismissAction) {
                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    var options = {
                            width: "900px", height: "725px", cancelButtonIndex: 1, defaultButtonIndex: 0, title: signedInUser.isSubscription ? String.load(String.id.IDS_MUSIC_CLOUD_MATCH_SUB_HEADER_XMP) : String.load(String.id.IDS_MUSIC_CLOUD_MATCH_SUB_HEADER_FREE), userControl: "MS.Entertainment.Music.CloudMatchOptIn", userControlOptions: {}, persistOnNavigate: false
                        };
                    if (!this._dialog) {
                        this._dialog = new MS.Entertainment.Music.cloudMatchOptInDialog(document.createElement("div"), options);
                        return this._dialog.show().then(function dialogClosed() {
                                if (dismissAction)
                                    dismissAction(this._dialog.userControlInstance.dialogResult);
                                this._dialog = null
                            }.bind(this))
                    }
                    else
                        return WinJS.Promise.wrap()
                }
        })})
})()
})();
/* >>>>>>/framework/music1/listnotificationactions.js:1126 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
this.scriptValidator();

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Actions;
            (function(Actions) {
                var ListNotificationAutomationIds = (function() {
                        function ListNotificationAutomationIds(){}
                        ListNotificationAutomationIds.clearAction = "clearAction";
                        ListNotificationAutomationIds.localContentAction = "localContentAction";
                        ListNotificationAutomationIds.partialContentAction = "partialContentAction";
                        ListNotificationAutomationIds.cloudContentAction = "cloudContentAction";
                        ListNotificationAutomationIds.cloudContentV2Action = "cloudContentV2Action";
                        ListNotificationAutomationIds.networkStatusAction = "networkStatusAction";
                        ListNotificationAutomationIds.detailsNetworkStatusAction = "detailsNetworkStatusAction";
                        return ListNotificationAutomationIds
                    })();
                Actions.ListNotificationAutomationIds = ListNotificationAutomationIds;
                var ListNotificationActions;
                (function(ListNotificationActions) {
                    var ListNotificationAction = (function(_super) {
                            __extends(ListNotificationAction, _super);
                            function ListNotificationAction() {
                                _super.apply(this, arguments)
                            }
                            ListNotificationAction.prototype.canExecute = function(param) {
                                this.useOverrideTitleIfExists();
                                return true
                            };
                            ListNotificationAction.prototype._getCurrentViewModel = function() {
                                var navigationService = Entertainment.ServiceLocator.getService(Entertainment.Services.winJSNavigation);
                                return navigationService.realizedDataContext
                            };
                            return ListNotificationAction
                        })(Actions.Action);
                    ListNotificationActions.ListNotificationAction = ListNotificationAction;
                    var ClearAction = (function(_super) {
                            __extends(ClearAction, _super);
                            function ClearAction() {
                                _super.call(this);
                                this.automationId = ListNotificationAutomationIds.clearAction;
                                this.optOut = false;
                                this.title = String.load(String.id.IDS_CLOSE_BUTTON)
                            }
                            ClearAction.prototype.canExecute = function(param) {
                                return param != null && param != undefined && param.category != null
                            };
                            ClearAction.prototype.executed = function(param) {
                                if (this.canExecute(param)) {
                                    var listNotificationService = Entertainment.ServiceLocator.getService(Entertainment.Services.listNotification);
                                    if (this.optOut) {
                                        (Entertainment.ServiceLocator.getService(Entertainment.Services.cloudCollection)).setCloudMatchOptIn(Entertainment.CloudCollectionService.CloudMatchStatus.OptedOut);
                                        Entertainment.Utilities.Telemetry.logTelemetryEvent(Entertainment.Utilities.PreferenceSettingsWrapper.TelemetryEvents.CloudMatchEnabledStateChanged, Entertainment.Utilities.PreferenceSettingsWrapper.States.CloudMatchEnabledState, false, Entertainment.Utilities.Telemetry.Events.CloudMatchStateChangeMethod, Entertainment.Utilities.Telemetry.StateChangeMethodValues.notification);
                                        listNotificationService.clear(param.category, true)
                                    }
                                    else
                                        listNotificationService.clear(param.category)
                                }
                            };
                            return ClearAction
                        })(ListNotificationAction);
                    ListNotificationActions.ClearAction = ClearAction;
                    var LocalContentAction = (function(_super) {
                            __extends(LocalContentAction, _super);
                            function LocalContentAction() {
                                _super.apply(this, arguments);
                                this.automationId = ListNotificationAutomationIds.localContentAction
                            }
                            LocalContentAction.prototype.executed = function(param) {
                                Entertainment.Music.localGrovelInfoDialog.show()
                            };
                            return LocalContentAction
                        })(ListNotificationAction);
                    ListNotificationActions.LocalContentAction = LocalContentAction;
                    var PartialContentAction = (function(_super) {
                            __extends(PartialContentAction, _super);
                            function PartialContentAction() {
                                _super.apply(this, arguments);
                                this.automationId = ListNotificationAutomationIds.partialContentAction
                            }
                            PartialContentAction.prototype.executed = function(param) {
                                var supportUri = new Windows.Foundation.Uri(UI.FWLink.cloudGrovelPartialMatchLearnMore);
                                Windows.System.Launcher.launchUriAsync(supportUri).then(function(){}, function(error) {
                                    Actions.fail("Failed to launch help topic for the partial content notification with the following failure" + (error && error.message))
                                })
                            };
                            return PartialContentAction
                        })(ListNotificationAction);
                    ListNotificationActions.PartialContentAction = PartialContentAction;
                    var CloudContentAction = (function(_super) {
                            __extends(CloudContentAction, _super);
                            function CloudContentAction() {
                                _super.apply(this, arguments);
                                this.automationId = ListNotificationAutomationIds.cloudContentAction;
                                this.consentDialog = false;
                                this.matchingDialog = false;
                                this._consentDialogAutomationTitle = "consentDialog";
                                this._matchingDialogAutomationTitle = "matchingDialog";
                                this._infoDialogAutomationTitle = "infoDialog"
                            }
                            CloudContentAction.prototype.executed = function(param) {
                                if (this.consentDialog) {
                                    this.automationId = this._consentDialogAutomationTitle;
                                    Actions.assert(param.category, "Cannot execute cloud opt-in dialog without category.");
                                    var consentDialogCallback = function onCloudMatchOptInDialogClose(dialogResult) {
                                            if (dialogResult && dialogResult === Entertainment.Music.CloudMatchOptIn.DialogResult.optIn) {
                                                var listNotificationService = Entertainment.ServiceLocator.getService(Entertainment.Services.listNotification);
                                                var optInCloudNotification = listNotificationService.getNotificationByCategory(UI.NotificationCategoryEnum.cloudContent);
                                                if (optInCloudNotification && optInCloudNotification.attachedNotification)
                                                    listNotificationService.send(optInCloudNotification.attachedNotification);
                                                else
                                                    listNotificationService.clear(param.category, true)
                                            }
                                        };
                                    if (UI.NetworkStatusService.isOnline()) {
                                        var signInService = Entertainment.ServiceLocator.getService(Entertainment.Services.signIn);
                                        if (signInService && signInService.isSignedIn)
                                            Entertainment.Music.cloudMatchOptInDialog.show(consentDialogCallback);
                                        else
                                            signInService.signIn().then(function() {
                                                Entertainment.Music.cloudMatchOptInDialog.show(consentDialogCallback)
                                            })
                                    }
                                    else
                                        Entertainment.Music.MusicBrandDialog.showOfflineDialog()
                                }
                                else if (this.matchingDialog) {
                                    var navigationService = UI.CollectionChangeNotifierService.navigationService;
                                    if (navigationService && navigationService.canExecute(param))
                                        navigationService.execute();
                                    else {
                                        this.automationId = this._matchingDialogAutomationTitle;
                                        Entertainment.Music.cloudMatchIconDialog.show()
                                    }
                                }
                                else {
                                    this.automationId = this._infoDialogAutomationTitle;
                                    Entertainment.Music.cloudGrovelInfoDialog.show()
                                }
                            };
                            return CloudContentAction
                        })(ListNotificationAction);
                    ListNotificationActions.CloudContentAction = CloudContentAction;
                    var NetworkStatusAction = (function(_super) {
                            __extends(NetworkStatusAction, _super);
                            function NetworkStatusAction() {
                                _super.apply(this, arguments);
                                this.automationId = ListNotificationAutomationIds.networkStatusAction
                            }
                            NetworkStatusAction.prototype.canExecute = function(param) {
                                var collectionViewModel = this._getCurrentViewModel();
                                return _super.prototype.canExecute.call(this, param) && !!collectionViewModel && collectionViewModel.view === Entertainment.ViewModels.MusicCollectionLX.ViewTypes.collection && !!collectionViewModel.setCurrentFilter
                            };
                            NetworkStatusAction.prototype.executed = function(param) {
                                var collectionViewModel = this._getCurrentViewModel();
                                collectionViewModel.setCurrentFilter(Entertainment.ViewModels.MusicCollectionAutomationIds.collectionFilterAvailableOffline);
                                var listNotificationService = Entertainment.ServiceLocator.getService(Entertainment.Services.listNotification);
                                listNotificationService.clear(UI.NotificationCategoryEnum.networkStatus);
                                var educationFlyout = new UI.Controls.EducationFlyout(0);
                                educationFlyout.showFlyout()
                            };
                            return NetworkStatusAction
                        })(ListNotificationAction);
                    ListNotificationActions.NetworkStatusAction = NetworkStatusAction;
                    var DetailsNetworkStatusAction = (function(_super) {
                            __extends(DetailsNetworkStatusAction, _super);
                            function DetailsNetworkStatusAction() {
                                _super.apply(this, arguments);
                                this.automationId = ListNotificationAutomationIds.detailsNetworkStatusAction
                            }
                            DetailsNetworkStatusAction.prototype.canExecute = function(param) {
                                var detailsPageViewModel = this._getCurrentViewModel();
                                return _super.prototype.canExecute.call(this, param) && !!detailsPageViewModel && !!detailsPageViewModel.applyFilter
                            };
                            DetailsNetworkStatusAction.prototype.executed = function(param) {
                                var detailsPageViewModel = this._getCurrentViewModel();
                                detailsPageViewModel.applyFilter(Microsoft.Entertainment.Platform.MediaAvailability.availableOffline)
                            };
                            return DetailsNetworkStatusAction
                        })(ListNotificationAction);
                    ListNotificationActions.DetailsNetworkStatusAction = DetailsNetworkStatusAction;
                    var CloudContentV2Action = (function(_super) {
                            __extends(CloudContentV2Action, _super);
                            function CloudContentV2Action() {
                                _super.apply(this, arguments);
                                this.automationId = ListNotificationAutomationIds.cloudContentV2Action;
                                this.contentFoundDialog = false;
                                this.getMoreInfoDialog = false;
                                this.dedupeDialog = false
                            }
                            CloudContentV2Action.prototype.canExecute = function(param) {
                                var canExecute = _super.prototype.canExecute.call(this, param);
                                if (this.contentFoundDialog) {
                                    var collectionViewModel = this._getCurrentViewModel();
                                    canExecute = canExecute && !!collectionViewModel && collectionViewModel.view === Entertainment.ViewModels.MusicCollectionLX.ViewTypes.collection && !!collectionViewModel.setCurrentFilter
                                }
                                return canExecute
                            };
                            CloudContentV2Action.prototype.executed = function(param) {
                                if (this.dedupeDialog)
                                    this._showDeduplicationDialog();
                                else if (this.contentFoundDialog) {
                                    var collectionViewModel = this._getCurrentViewModel();
                                    collectionViewModel.setCurrentFilter(Entertainment.ViewModels.MusicCollectionAutomationIds.collectionFilterRoamsViaCloudDrive);
                                    var listNotificationService = Entertainment.ServiceLocator.getService(Entertainment.Services.listNotification);
                                    listNotificationService.clear(UI.NotificationCategoryEnum.cloudContentV2);
                                    var educationFlyout = new UI.Controls.EducationFlyout(1);
                                    educationFlyout.showFlyout()
                                }
                                else if (this.getMoreInfoDialog) {
                                    var supportUri = new Windows.Foundation.Uri(UI.FWLink.cloudContentV2GetMoreInfo);
                                    Windows.System.Launcher.launchUriAsync(supportUri).then(function(){}, function(error) {
                                        Actions.fail("Failed to launch help topic for the cloud collection V2 notification with the following failure" + (error && error.message))
                                    })
                                }
                            };
                            CloudContentV2Action.prototype._showDeduplicationDialog = function() {
                                var _this = this;
                                UI.Shell.showMessageBox(String.load(String.id.IDS_MUSIC_ONEDRIVE_DEDUP_DIALOG_TITLE), String.load(String.id.IDS_MUSIC_ONEDRIVE_DEDUP_DIALOG_BODY), {
                                    defaultButtonIndex: 0, autoSetFocus: true, ignoreEscapeKeyPress: true, buttons: [{
                                                title: String.load(String.id.IDS_MUSIC_ONEDRIVE_DEDUP_DIALOG_ACTION_YES), execute: function(dialog) {
                                                        _this._dedupeStrategyChosen(dialog, true)
                                                    }
                                            }, {
                                                title: String.load(String.id.IDS_MUSIC_ONEDRIVE_DEDUP_DIALOG_ACTION_NO), execute: function(dialog) {
                                                        _this._dedupeStrategyChosen(dialog, false)
                                                    }
                                            }]
                                })
                            };
                            CloudContentV2Action.prototype._dedupeStrategyChosen = function(dialog, shouldActivateDeduplication) {
                                var cloudCollectionService = Entertainment.ServiceLocator.getService(Entertainment.Services.cloudCollection);
                                var listNotificationService = Entertainment.ServiceLocator.getService(Entertainment.Services.listNotification);
                                if (shouldActivateDeduplication)
                                    cloudCollectionService.activateDeduplicationStrategy();
                                else
                                    cloudCollectionService.deactivateDeduplicationStrategy();
                                var oneDriveNotification = listNotificationService.getNotificationByCategory(UI.NotificationCategoryEnum.cloudContentV2);
                                listNotificationService.clear(UI.NotificationCategoryEnum.cloudContentV2, true);
                                if (oneDriveNotification) {
                                    if (oneDriveNotification.attachedNotification) {
                                        oneDriveNotification.category.completed = false;
                                        var previousNotification = UI.ListNotification.createNotification(UI.NotificationCategoryEnum.cloudContentV2, String.load(String.id.IDS_COLLECTION_CLOUDV2_BANNER2_TITLE), String.empty, [Actions.ActionIdentifiers.notificationCloudContentV2], [{
                                                    contentFoundDialog: true, getMoreInfoDialog: false, title: String.load(String.id.IDS_COLLECTION_CLOUDV2_BANNER2_ACTION)
                                                }]);
                                        listNotificationService.send(previousNotification)
                                    }
                                    oneDriveNotification.category.completed = true
                                }
                                dialog.hide()
                            };
                            return CloudContentV2Action
                        })(ListNotificationAction);
                    ListNotificationActions.CloudContentV2Action = CloudContentV2Action
                })(ListNotificationActions = Actions.ListNotificationActions || (Actions.ListNotificationActions = {}))
            })(Actions = UI.Actions || (UI.Actions = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
(function() {
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.notificationClear, function() {
        return new MS.Entertainment.UI.Actions.ListNotificationActions.ClearAction
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.notificationLocalContent, function() {
        return new MS.Entertainment.UI.Actions.ListNotificationActions.LocalContentAction
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.notificationPartialContent, function() {
        return new MS.Entertainment.UI.Actions.ListNotificationActions.PartialContentAction
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.notificationCloudContent, function() {
        return new MS.Entertainment.UI.Actions.ListNotificationActions.CloudContentAction
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.notificationCloudContentV2, function() {
        return new MS.Entertainment.UI.Actions.ListNotificationActions.CloudContentV2Action
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.notificationNetworkStatus, function() {
        return new MS.Entertainment.UI.Actions.ListNotificationActions.NetworkStatusAction
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.notificationDetailsNetworkStatus, function() {
        return new MS.Entertainment.UI.Actions.ListNotificationActions.DetailsNetworkStatusAction
    })
})()
})();
/* >>>>>>/controls/signincontrol.js:1426 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                var SignInControl = (function(_super) {
                        __extends(SignInControl, _super);
                        function SignInControl(element, options) {
                            this.templateStorage = "/Controls/SignInControl.html";
                            this.templateName = "signInControlTemplate";
                            _super.call(this, element, options)
                        }
                        SignInControl.prototype.initialize = function() {
                            var _this = this;
                            _super.prototype.initialize.call(this);
                            this._signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            this._uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                                this._navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                this._navigationBinding = WinJS.Binding.bind(this._navigation, {currentPage: function() {
                                        return _this._onPropertyChange()
                                    }})
                            }
                            this._signInBinding = WinJS.Binding.bind(this._signIn, {
                                isSigningIn: function() {
                                    return _this._onPropertyChange()
                                }, signInError: function() {
                                        return _this._onPropertyChange()
                                    }
                            });
                            this._uiStateBinding = WinJS.Binding.bind(this._uiState, {isHubStripVisible: function() {
                                    return _this._onPropertyChange()
                                }})
                        };
                        SignInControl.prototype.unload = function() {
                            if (this._signInBinding) {
                                this._signInBinding.cancel();
                                this._signInBinding = null
                            }
                            if (this._uiStateBinding) {
                                this._uiStateBinding.cancel();
                                this._uiStateBinding = null
                            }
                            if (this._navigationBinding) {
                                this._navigationBinding.cancel();
                                this._uiStateBinding = null
                            }
                            _super.prototype.unload.call(this)
                        };
                        SignInControl.prototype.onClick = function() {
                            if (!this._signIn.isSigningIn)
                                this._signIn.signIn().done(null, function signInError(){})
                        };
                        SignInControl.prototype._onPropertyChange = function() {
                            var _this = this;
                            var isSigningIn = this._signIn.isSigningIn;
                            var signInError = (this._signIn.signInError !== 0);
                            var hubStripVisible = this._uiState.isHubStripVisible;
                            var showNotifications = this.settings || (this._navigation && this._navigation.currentPage && this._navigation.currentPage.showNotifications);
                            if (isSigningIn)
                                this._showSignedIn = true;
                            else if (signInError)
                                this._showSignedIn = false;
                            var signInNotification = (isSigningIn || signInError || this._showSignedIn);
                            this.visibility = signInNotification && (this.settings || hubStripVisible) && showNotifications;
                            if (signInError) {
                                WinJS.Utilities.removeClass(this._signInError.domElement, "hideFromDisplay");
                                WinJS.Utilities.removeClass(this._signInRetry.domElement, "hideFromDisplay")
                            }
                            else {
                                WinJS.Utilities.addClass(this._signInError.domElement, "hideFromDisplay");
                                WinJS.Utilities.addClass(this._signInRetry.domElement, "hideFromDisplay")
                            }
                            if (isSigningIn)
                                WinJS.Utilities.removeClass(this._signInProgress.domElement, "hideFromDisplay");
                            else
                                WinJS.Utilities.addClass(this._signInProgress.domElement, "hideFromDisplay");
                            if (this._showSignedIn && !signInError && !isSigningIn) {
                                WinJS.Utilities.removeClass(this._signInComplete.domElement, "hideFromDisplay");
                                WinJS.Promise.timeout(2500).then(function() {
                                    WinJS.Utilities.addClass(_this._signInComplete.domElement, "hideFromDisplay");
                                    _this.visibility = false
                                });
                                this._showSignedIn = false
                            }
                            else
                                WinJS.Utilities.addClass(this._signInComplete.domElement, "hideFromDisplay");
                            if (isSigningIn)
                                WinJS.Utilities.addClass(this._signInRetrySpinner, "spinNoticationRetrySpinner");
                            else
                                WinJS.Utilities.removeClass(this._signInRetrySpinner, "spinNoticationRetrySpinner")
                        };
                        return SignInControl
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.SignInControl = SignInControl;
                WinJS.Utilities.markSupportedForProcessing(SignInControl)
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/music/upsellviewmodel.js:1543 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
            var Configuration = Microsoft.Entertainment.Configuration;
            var Utilities = MS.Entertainment.Utilities;
            var UpsellViewModel = (function(_super) {
                    __extends(UpsellViewModel, _super);
                    function UpsellViewModel(isDevicesUpsell) {
                        _super.call(this);
                        this._actionText = String.empty;
                        this._hasImage = true;
                        this._imageSource = String.empty;
                        this._isDevicesUpsell = false;
                        this._learnMoreText = String.empty;
                        this._message = String.empty;
                        this._shouldShowUpsell = false;
                        this._signInBinding = null;
                        this._subscriptionBinding = null;
                        this._isDevicesUpsell = isDevicesUpsell;
                        this._initialize()
                    }
                    Object.defineProperty(UpsellViewModel.prototype, "action", {
                        get: function() {
                            var signIn = Entertainment.ServiceLocator.getService(Entertainment.Services.signIn);
                            var actionService = Entertainment.ServiceLocator.getService(Entertainment.Services.actions);
                            var action = null;
                            if (!signIn.isSignedIn) {
                                action = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.signIn);
                                action.automationId = Entertainment.UI.AutomationIds.exploreUpsellMusicPassSignIn
                            }
                            else {
                                action = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup);
                                action.automationId = Entertainment.UI.AutomationIds.exploreUpsellMusicPassSignUp
                            }
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.freePlayLimits)) {
                                var freeLimits = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.freePlayLimits);
                                freeLimits.clearAppNotifications()
                            }
                            if (!this._isDevicesUpsell)
                                action.parameter = {abTests: [{
                                            abTestName: Utilities.ABTestsEnum.musicUpsellBannerMessage, abGroupName: this.message
                                        }, {
                                            abTestName: Utilities.ABTestsEnum.musicUpsellBannerAction, abGroupName: this.actionText
                                        }]};
                            return action
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "actionText", {
                        get: function() {
                            return this._actionText
                        }, set: function(value) {
                                this.updateAndNotify("actionText", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "imageSource", {
                        get: function() {
                            return this._imageSource
                        }, set: function(value) {
                                this.updateAndNotify("imageSource", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "hasImage", {
                        get: function() {
                            return this._hasImage
                        }, set: function(value) {
                                this.updateAndNotify("hasImage", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "isFreeStreamingMarket", {
                        get: function() {
                            var featureEnablement = Entertainment.ServiceLocator.getService(Entertainment.Services.featureEnablement);
                            var isFreePlayAvailable = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                            return isFreePlayAvailable
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "isSubscriptionMarket", {
                        get: function() {
                            var featureEnablement = Entertainment.ServiceLocator.getService(Entertainment.Services.featureEnablement);
                            var isMusicSubscriptionAvailable = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSubscription);
                            return !!isMusicSubscriptionAvailable
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "isSubscriptionSigned", {
                        get: function() {
                            return (new Configuration.ConfigurationManager).service.lastSignedInUserSubscription
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "showFreeEarlyAnnounce", {
                        get: function() {
                            return this.isFreeStreamingMarket && (new Configuration.ConfigurationManager).music.freePlayAnnounce
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "learnMoreAction", {
                        get: function() {
                            var actionService = Entertainment.ServiceLocator.getService(Entertainment.Services.actions);
                            var externalNavigationAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.externalNavigate);
                            externalNavigationAction.parameter = Entertainment.UI.FWLink.cloudGrovelLearnMore;
                            externalNavigationAction.automationId = Entertainment.UI.AutomationIds.exploreUpsellLearnMore;
                            return externalNavigationAction
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "learnMoreText", {
                        get: function() {
                            return this._learnMoreText
                        }, set: function(value) {
                                this.updateAndNotify("learnMoreText", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "message", {
                        get: function() {
                            return this._message
                        }, set: function(value) {
                                this.updateAndNotify("message", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UpsellViewModel.prototype, "shouldShowUpsell", {
                        get: function() {
                            return this._shouldShowUpsell
                        }, set: function(value) {
                                this.updateAndNotify("shouldShowUpsell", value)
                            }, enumerable: true, configurable: true
                    });
                    UpsellViewModel.prototype.dispose = function() {
                        if (this._signInBinding) {
                            this._signInBinding.cancel();
                            this._signInBinding = null
                        }
                        if (this._subscriptionBinding) {
                            this._subscriptionBinding.cancel();
                            this._subscriptionBinding = null
                        }
                    };
                    UpsellViewModel.prototype._initialize = function() {
                        var _this = this;
                        if (!this._isDevicesUpsell)
                            this._registerABTests();
                        if (this.isSubscriptionMarket) {
                            var signIn = Entertainment.ServiceLocator.getService(Entertainment.Services.signIn);
                            this._signInBinding = WinJS.Binding.bind(signIn, {isSignedIn: function() {
                                    return _this._onUserStatusChanged()
                                }});
                            var signedInUser = Entertainment.ServiceLocator.getService(Entertainment.Services.signedInUser);
                            this._subscriptionBinding = WinJS.Binding.bind(signedInUser, {isSubscription: function() {
                                    return _this._onUserStatusChanged()
                                }})
                        }
                    };
                    UpsellViewModel.prototype._onUserStatusChanged = function() {
                        var isSignedIn = Entertainment.ServiceLocator.getService(Entertainment.Services.signIn).isSignedIn;
                        var isParentallyControlled = Entertainment.ServiceLocator.getService(Entertainment.Services.signedInUser).isParentallyControlled;
                        if (this._isDevicesUpsell) {
                            this.message = String.load(String.id.IDS_MUSIC_DEVICES_UPSELL_HEADER);
                            this.actionText = String.load(String.id.IDS_MUSIC_DEVICES_UPSELL_LINK);
                            this.learnMoreText = String.empty;
                            this.imageSource = String.empty;
                            this.hasImage = false
                        }
                        else {
                            var abMessageGroup = Utilities.ABTesting.createABGroupNumber(Utilities.ABTestsEnum.musicUpsellBannerMessage);
                            var abActionGroup = Utilities.ABTesting.createABGroupNumber(Utilities.ABTestsEnum.musicUpsellBannerAction);
                            if (isSignedIn)
                                if (this.showFreeEarlyAnnounce) {
                                    this.message = String.load(String.id.IDS_MUSIC_UPSELL_BANNER_TEXT5);
                                    this.actionText = String.load(String.id.IDS_MUSIC_UPSELL_BANNER_SIGN_UP_ACTION2_ASTERISK);
                                    this.learnMoreText = String.load(String.id.IDS_MUSIC_UPSELL_BANNER_LEARN_MORE);
                                    this.imageSource = String.empty;
                                    this.hasImage = false
                                }
                                else {
                                    this.message = String.load(abMessageGroup.format(UpsellViewModel._authMessageStringFormat));
                                    this.actionText = String.load(abActionGroup.format(UpsellViewModel._authActionStringFormat));
                                    this.learnMoreText = String.load(String.id.IDS_MUSIC_UPSELL_BANNER_LEARN_MORE);
                                    switch (abMessageGroup.format(UpsellViewModel._authMessageStringFormat)) {
                                        case"IDS_MUSIC_UPSELL_BANNER_TEXT":
                                        case"IDS_MUSIC_UPSELL_BANNER_TEXT3":
                                            this.imageSource = Entertainment.UI.ImagePaths.musicUpsellDevices;
                                            this.hasImage = true;
                                            break;
                                        case"IDS_MUSIC_UPSELL_BANNER_TEXT2":
                                            this.imageSource = Entertainment.UI.ImagePaths.musicUpsellOffline;
                                            this.hasImage = true;
                                            break;
                                        case"IDS_MUSIC_UPSELL_BANNER_TEXT4":
                                            this.imageSource = String.empty;
                                            this.hasImage = false;
                                            break;
                                        default:
                                            break
                                    }
                                }
                            else {
                                this.message = String.load(abMessageGroup.format(UpsellViewModel._unAuthMessageStringFormat));
                                this.actionText = String.load(abActionGroup.format(UpsellViewModel._unAuthActionStringFormat));
                                this.learnMoreText = String.empty;
                                this.imageSource = Entertainment.UI.ImagePaths.musicUpsellSignIn;
                                this.hasImage = true
                            }
                        }
                        if (!this.isFreeStreamingMarket)
                            this.shouldShowUpsell = isSignedIn && !this.isSubscriptionSigned && !isParentallyControlled;
                        else
                            this.shouldShowUpsell = this.isSubscriptionMarket && !this.isSubscriptionSigned && !isParentallyControlled
                    };
                    UpsellViewModel.prototype._registerABTests = function() {
                        var abMessageGroups = new Array;
                        abMessageGroups.push(new Utilities.ABGroup(Utilities.ABGroupNames.MusicUpsellBannerMessage.option1));
                        abMessageGroups.push(new Utilities.ABGroup(Utilities.ABGroupNames.MusicUpsellBannerMessage.option2));
                        abMessageGroups.push(new Utilities.ABGroup(Utilities.ABGroupNames.MusicUpsellBannerMessage.option3));
                        abMessageGroups.push(new Utilities.ABGroup(Utilities.ABGroupNames.MusicUpsellBannerMessage.option4));
                        Utilities.ABTesting.registerABTest(Utilities.ABTestsEnum.musicUpsellBannerMessage, abMessageGroups);
                        var abActionGroups = new Array;
                        abActionGroups.push(new Utilities.ABGroup(Utilities.ABGroupNames.MusicUpsellBannerAction.option1));
                        abActionGroups.push(new Utilities.ABGroup(Utilities.ABGroupNames.MusicUpsellBannerAction.option2));
                        Utilities.ABTesting.registerABTest(Utilities.ABTestsEnum.musicUpsellBannerAction, abActionGroups)
                    };
                    UpsellViewModel._authActionStringFormat = "UP";
                    UpsellViewModel._authMessageStringFormat = String.empty;
                    UpsellViewModel._unAuthMessageStringFormat = "UNAUTH_";
                    UpsellViewModel._unAuthActionStringFormat = "IN";
                    return UpsellViewModel
                })(Entertainment.UI.Framework.ObservableBase);
            ViewModels.UpsellViewModel = UpsellViewModel
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/framework/data/augmenters/edsaugmenters.js:1786 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MSE, undefined) {
    "use strict";
    var alias = MSE.Data.Property.alias;
    var augment = MSE.Data.Property.augment;
    var convert = MSE.Data.Property.convert;
    var convertNoDeflate = MSE.Data.Property.convertNoDeflate;
    var convertOriginal = MSE.Data.Property.convertOriginal;
    var convertOriginalNoDeflate = MSE.Data.Property.convertOriginalNoDeflate;
    var searchNoDeflate = MSE.Data.Property.searchNoDeflate;
    var list = MSE.Data.Property.list;
    var format = MSE.Data.Property.format;
    var collect = MSE.Data.Property.collect;
    var sortArray = MSE.Data.Property.sortArray;
    var value = MSE.Data.Property.value;
    var hydrated = MSE.Data.Property.hydrated;
    var hydratedRequired = MSE.Data.Property.hydratedRequired;
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data");
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Marketplace", {
        edsDate: function edsDate(data) {
            var returnValue = MS.Entertainment.Data.Factory.date(data);
            if (returnValue)
                returnValue = (returnValue.getFullYear() === 2799) ? null : returnValue;
            return returnValue
        }, edsMediaTypeIntegerToString: function edsMediaTypeIntegerToString(integer) {
                var result;
                if (isNaN(integer) || typeof integer !== "number")
                    result = MSE.Data.Factory.Marketplace.edsMediaTypeValidate(integer);
                else if (integer in MS.Entertainment.Data.Query.edsMediaTypeIntegerToStringMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeIntegerToStringMappings[integer];
                else
                    MS.Entertainment.Data.fail("Invalid integer. Can not find string media type mapping: " + integer, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToDatabaseMediaType: function edsMediaTypeToDatabaseMediaType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToDatabaseMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToDatabaseMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find database media type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeFromDatabaseTypes: function edsMediaTypeFromDatabaseTypes(types) {
                types = types || {};
                var databaseMediaType = types.mediaType;
                var subTypeName = MSE.Data.Factory.Library.mediaTypeToSubTypeNameMappings[types.mediaType];
                var subTypeMappings = MS.Entertainment.Data.Query.databaseMediaTypeToSubTypeMappingMappings[types.mediaType];
                if (Array.isArray(subTypeName)) {
                    databaseMediaType = [];
                    subTypeName.forEach(function(key) {
                        databaseMediaType.push(types[key])
                    })
                }
                else if (subTypeName && subTypeMappings)
                    databaseMediaType = types[subTypeName];
                return MSE.Data.Factory.Marketplace.edsMediaTypeFromDatabaseType(databaseMediaType, subTypeMappings)
            }, edsMediaTypeFromDatabaseType: function edsMediaTypeFromDatabaseType(mediaType, mappings) {
                var key;
                var result;
                var mappingValue;
                var match = false;
                var i = 0;
                mappings = mappings || MS.Entertainment.Data.Query.edsMediaTypeToDatabaseMappings;
                if (Array.isArray(mediaType))
                    for (key in mappings) {
                        match = true;
                        mappingValue = mappings[key];
                        for (i = 0; i < mappingValue.length; i++)
                            if (mappingValue[i] !== mediaType[i]) {
                                match = false;
                                break
                            }
                        if (match) {
                            result = key;
                            break
                        }
                    }
                else
                    for (key in mappings)
                        if (mappings[key] === mediaType) {
                            result = key;
                            break
                        }
                return result
            }, edsMediaTypeToVideoType: function edsMediaTypeToVideoType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToVideoTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToVideoTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find database video type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToGameType: function edsMediaTypeToGameType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToGameTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToGameTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find database game type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToGameTitleType: function edsMediaTypeToGameTitleType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToGameTitleTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToGameTitleTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find database game title type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToPersonType: function edsMediaTypeToPersonType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToPersonTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToPersonTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find database person type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToHcrType: function edsMediaTypeToHcrType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToZuneHcrTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToZuneHcrTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find hcr type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToContentType: function edsMediaTypeToContentType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToContentTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToContentTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find content type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToGamePlatformType: function edsMediaTypeToGamePlatformType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToGamePlatformTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToGamePlatformTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find game platform type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsMediaTypeToPurchaseHelperType: function edsMediaTypeToPurchaseHelperType(type) {
                var result;
                type = MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString(type);
                if (type in MS.Entertainment.Data.Query.edsMediaTypeToPurchaseHelperTypeMappings)
                    result = MS.Entertainment.Data.Query.edsMediaTypeToPurchaseHelperTypeMappings[type];
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find purchase helper type mapping: " + type, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsPaymentTypeIntegerToString: function edsPaymentTypeIntegerToString(integer) {
                var result;
                if (integer in MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentTypeIntegerToStringMappings)
                    result = MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentTypeIntegerToStringMappings[integer];
                else
                    MS.Entertainment.Data.fail("Invalid integer. Can not find string payment type mapping: " + integer, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsEditorialId: function edsEditorialId(id) {
                id = id.replace(/\//g, "_");
                id = id.replace(/&/g, "!");
                return "xm-" + id
            }, edsServiceIdType: function edsServiceIdType(idHost) {
                var idType;
                if (idHost)
                    if ("ZuneId" in idHost)
                        idType = MS.Entertainment.Data.Query.edsIdType.zuneCatalog;
                    else if ("ID" in idHost || "id" in idHost)
                        idType = MS.Entertainment.Data.Query.edsIdType.canonical;
                return idType
            }, edsServiceIdTypeLegacy: function edsServiceIdTypeLegacy() {
                return MS.Entertainment.Data.Query.edsIdType.zuneCatalog
            }, edsRights: function edsRights(providers, providerId, deviceType, offerAugmenter, includeExpiredOffers) {
                var result = [];
                var currentDate;
                offerAugmenter = offerAugmenter || MSE.Data.Augmenter.Marketplace.EDSModernOfferRight;
                if (Array.isArray(providers)) {
                    currentDate = new Date;
                    providers.forEach(function providerItem(provider) {
                        if (provider && Array.isArray(provider.ProviderContents) && (!providerId || provider.ID === providerId) && (!deviceType || provider.DeviceType === deviceType))
                            provider.ProviderContents.forEach(function augmentItem(content) {
                                if (content && Array.isArray(content.OfferInstances))
                                    content.OfferInstances.forEach(function augmentOffer(offer) {
                                        var endDate = MS.Entertainment.Data.Factory.date(offer.EndDate);
                                        var offerDisplay = offer && offer.OfferDisplay && JSON.parse(offer.OfferDisplay);
                                        if (!endDate || currentDate <= endDate || includeExpiredOffers)
                                            result.push(MSE.Data.augment({
                                                provider: provider, content: content, offer: offer, offerDisplay: offerDisplay
                                            }, offerAugmenter))
                                    })
                            })
                    })
                }
                return result
            }, edsRightsIEBProviders: function edsRightsIEBProviders(providers) {
                return MS.Entertainment.Data.Factory.Marketplace.edsRights(providers)
            }, edsRightsZuneProviders: function edsRightsZuneProviders(providers) {
                return MS.Entertainment.Data.Factory.Marketplace.edsRights(providers, MS.Entertainment.Data.Augmenter.Marketplace.edsProviderId.xboxVideo)
            }, edsRightsCurrentClientProviders: function edsRightsCurrentClientProviders(providers) {
                var deviceType;
                return MS.Entertainment.Data.Factory.Marketplace.edsRights(providers, null, deviceType)
            }, edsUnfilteredRightsCurrentClientProviders: function edsUnfilteredRightsCurrentClientProviders(providers) {
                var deviceType;
                return MS.Entertainment.Data.Factory.Marketplace.edsRights(providers, null, deviceType, null, true)
            }, edsMediaTypeValidate: function edsMediaTypeValidate(mediaType) {
                return mediaType
            }, edsDeviceTypesValidate: function edsDeviceTypesValidate(deviceTypes) {
                if (!Array.isArray(deviceTypes))
                    deviceTypes = [deviceTypes];
                return deviceTypes
            }, edsPaymentTypesValidate: function edsPaymentTypesValidate(paymentTypeContainer) {
                var result;
                if (paymentTypeContainer) {
                    result = paymentTypeContainer.PaymentTypes;
                    if (Array.isArray(result));
                    else if (paymentTypeContainer.DistributionRight === MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchase || paymentTypeContainer.DistributionRight === MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchaseToOwn || paymentTypeContainer.DistributionRight === MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.rent)
                        result = [MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentType.creditCard]
                }
                return result || []
            }, edsResolutionFormatValidate: function edsResolutionFormatValidate(resolutionFormat) {
                return resolutionFormat
            }, edsFriendlyResolutionFormatValidate: function edsFriendlyResolutionFormatValidate(resolutionFormat) {
                resolutionFormat = MSE.Data.Factory.Marketplace.edsResolutionFormatValidate(resolutionFormat);
                if (resolutionFormat === MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd1080p)
                    resolutionFormat = MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat.hd;
                return resolutionFormat
            }, edsAudioEncodingValidate: function edsAudioEncodingValidate(audioEncoding) {
                return audioEncoding
            }, edsConvertToRightType: function edsConvertToRightType(distributionRight, mappings) {
                var result = distributionRight;
                mappings = mappings || MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRightToRightTypeMappings;
                if (distributionRight in mappings)
                    result = mappings[distributionRight] || distributionRight;
                else
                    MS.Entertainment.Data.fail("Invalid type. Can not find license right type mapping for distribution right. " + distributionRight, null, MS.Entertainment.UI.Debug.errorLevel.low);
                return result
            }, edsSetImpressionGuid: function edsSetImpressionGuid(values) {
                var result = null;
                var impressionGuid = null;
                if (values && values.length >= 2) {
                    impressionGuid = values[0];
                    result = values[1]
                }
                return result
            }, edsSetImpressionGuidAndAcquisition: function edsSetImpressionGuidAndAcquisition(values) {
                var result = null;
                var impressionGuid = null;
                var acquisitionData = null;
                if (values && values.length >= 3) {
                    result = values[0];
                    impressionGuid = values[1];
                    acquisitionData = values[2]
                }
                if (result && impressionGuid)
                    result.impressionGuid = impressionGuid;
                if (result && acquisitionData)
                    result.acquisitionData = acquisitionData;
                return result
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Augmenter.Marketplace", {
        edsImagePurpose: {
            background: "Background", backLText: "BackLText", backRText: "BackRText", boxArt: "BoxArt", cover: "Cover", featurePage: "FeaturePage", foreground: "Foreground", icon: "Icon", image: "Image", hero: "Hero", logo: "Logo", mobile: "Mobile", nowPlaying: "NowPlaying", pcBackground: "PCBackground", pcLogo: "PCLogo", sideStage: "SideStage", sellImage: "SellImage", subHero: "SubHero", superHero: "SuperHero", thumbnail: "Thumbnail", weRecommend: "WeRecommend", wideBackground: "WideBackgroundImage", xboxBackground: "XboxBackground"
        }, edsProviderId: {
                cinemaNow: "0x333207D1", vudu: "0x325a07d1", xfinity: "0x473007D1", xboxVideo: "0x3D705025", zune: "0x5848085B"
            }, edsDeviceType: {
                all: "All", pc: "WindowsPC", xblWinClient: "XblWinClient", xbox360: "Xbox360", xboxOne: "XboxOne", zuneDevice: "Zune3.0", zuneMobile: "ZuneMobile"
            }, edsResolutionFormat: {
                hd: "HD", hd1080p: "HD1080p", sd: "SD", xd: "XD"
            }, edsVideoEncoding: {
                h264: "H.264", vc1: "VC-1", vc1mbr: "MBR VC-1 Video"
            }, edsAudioEncoding: {
                ddp: "DolbyDigitalPlus", mp3: "MP3", flac: "FLAC", na: "NA", wma: "WMA", wma10p: "Windows Media Audio 10 Professional"
            }, edsAcceptedPaymentTypes: {
                creditCard: "CreditCard", currencyStoredValue: "CurrencyStoredValue", currencyStoredValueWithCreditCardTopOff: "CurrencyStoredValueWithCreditCardTopOff", none: "None", paypal: "Paypal", tokens: "Tokens"
            }, edsDistributionRight: {
                adSupported: "AdSupported", albumOnlyPurchase: "AlbumOnlyPurchase", albumPurchase: "AlbumPurchase", free: "Free", freeStream: "FreeStream", freeWithAds: "FreeWithAds", freeWithSubscription: "FreeWithSubscription", groupMediaPurchaseToOwn: "GroupMediaPurchaseToOwn", payPerView: "PayPerView", preview: "Preview", purchase: "Purchase", purchaseStream: "PurchaseStream", purchaseToOwn: "PurchaseToOwn", rent: "Rent", rentStream: "RentStream", seasonPurchase: "SeasonPurchase", seasonPurchaseStream: "SeasonPurchaseStream", stream: "Stream", subscription: "Subscription", subscriptionFree: "SubscriptionFree", trackAvailable: "TrackAvailable", trial: "Trial"
            }, edsOfferDistributionType: {
                full: "Full", presale: "Presale"
            }, edsPaymentType: {
                creditCard: "Credit Card", currency: "Currency", mobileOperator: "Mobile Operator", points: "Microsoft Points"
            }, edsCriticReviewSourceType: {
                metaCritic: "Metacritic", rottenTomatoes: "Rotten Tomatoes", rovi: "Rovi"
            }, edsContributorRole: {
                director: "Director", actor: "Actor", writer: "Writer", creator: "Creator"
            }, edsDeliveryFormat: {
                streaming: "Streaming", download: "Progressive"
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Augmenter.Marketplace", {
        Tuner: {
            All: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.all, Xbox360: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.xbox360, XboxOne: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.xboxOne, Windows: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.pc, Zune30: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.zuneDevice, ZuneMobile: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.zuneMobile
        }, edsImagePurposeToRankMappings: (function() {
                var mappings = {};
                mappings[MSE.Data.Augmenter.Marketplace.edsImagePurpose.pcBackground] = 5;
                mappings[MSE.Data.Augmenter.Marketplace.edsImagePurpose.background] = 4;
                mappings[MSE.Data.Augmenter.Marketplace.edsImagePurpose.wideBackground] = 3;
                mappings[MSE.Data.Augmenter.Marketplace.edsImagePurpose.pcLogo] = 2;
                mappings[MSE.Data.Augmenter.Marketplace.edsImagePurpose.logo] = 1;
                return mappings
            })(), edsDistributionRightToRightTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.adSupported] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.albumOnlyPurchase] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.albumPurchase] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.albumPurchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.free] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.freeStream] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.freeWithAds] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.freeWithSubscription] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.payPerView] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.groupMediaPurchaseToOwn] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.seasonPurchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.preview] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.preview;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchase] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.purchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchaseStream] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.purchaseStream;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchaseToOwn] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.purchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.rent] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.rent;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.rentStream] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.rentStream;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.seasonPurchase] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.seasonPurchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.seasonPurchaseStream] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.seasonPurchaseStream;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.stream] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.stream;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.subscription] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.subscription;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.subscriptionFree] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.subscriptionFree;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.trial] = null;
                return mapping
            })(), edsDistributionRightToAlbumRightTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.freeStream] = null;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.preview] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.preview;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchase] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.albumPurchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.purchaseToOwn] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.albumPurchase;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.stream] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.stream;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.subscription] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.subscription;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.subscriptionFree] = MS.Entertainment.Data.Augmenter.Marketplace.RightType.subscriptionFree;
                mapping[MS.Entertainment.Data.Augmenter.Marketplace.edsDistributionRight.trackAvailable] = null;
                return mapping
            })(), edsPaymentTypeIntegerToStringMappings: {
                1: MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentType.points, 3: MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentType.currency
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Comparer.Marketplace", {edsCompareImage: function edsCompareImage(image1, image2) {
            var result;
            image1 = MSE.Data.deflate(image1);
            image2 = MSE.Data.deflate(image2);
            if (image1 === image2)
                result = 0;
            else if (!image2)
                result = -1;
            else if (!image1)
                result = 1;
            else {
                var biggestSize1 = (image1.Width > image1.Height) ? image1.Width : image1.Height;
                var biggestSize2 = (image2.Width > image2.Height) ? image2.Width : image2.Height;
                biggestSize1 = isNaN(biggestSize1) ? 0 : biggestSize1;
                biggestSize2 = isNaN(biggestSize1) ? 0 : biggestSize2;
                if (biggestSize1 > biggestSize2)
                    result = -1;
                else if (biggestSize1 < biggestSize2)
                    result = 1;
                else if (image1.Order < image2.Order)
                    result = -1;
                else if (image1.Order > image2.Order)
                    result = 1;
                else
                    result = 0
            }
            return result
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Filter.Marketplace", {edsCreateImageFilter: function edsCreateImageFilter(imagePurpose, filterImagePurpose, minWidth, minHeight, maxWidth, maxHeight, minAspectRatio, maxAspectRatio) {
            if (imagePurpose && !Array.isArray(imagePurpose))
                imagePurpose = [imagePurpose];
            if (filterImagePurpose && !Array.isArray(filterImagePurpose))
                filterImagePurpose = [filterImagePurpose];
            return function edsImageFilter(image) {
                    var filter = true;
                    var i;
                    var aspectRatio;
                    var currentImagePurpose = imagePurpose;
                    image = MS.Entertainment.Data.deflate(image);
                    if ((minAspectRatio || maxAspectRatio) && (image && image.Width && image.Height))
                        aspectRatio = image.Width / image.Height;
                    if (image && (isNaN(minWidth) || minWidth === null || image.Width >= minWidth) && (isNaN(minHeight) || minHeight === null || image.Height >= minHeight) && (isNaN(maxWidth) || maxWidth === null || image.Width <= maxWidth) && (isNaN(maxHeight) || maxHeight === null || image.Height <= maxHeight) && (!minAspectRatio || !aspectRatio || aspectRatio >= minAspectRatio) && (!maxAspectRatio || !aspectRatio || aspectRatio <= maxAspectRatio))
                        filter = false;
                    if (!filter && image.Purposes) {
                        filter = currentImagePurpose && currentImagePurpose.length ? true : false;
                        for (i = 0; i < image.Purposes.length; i++)
                            if (filterImagePurpose && filterImagePurpose.indexOf(image.Purposes[i]) >= 0) {
                                filter = true;
                                break
                            }
                            else if (currentImagePurpose && currentImagePurpose.indexOf(image.Purposes[i]) >= 0) {
                                filter = false;
                                currentImagePurpose = null;
                                if (!filterImagePurpose)
                                    break
                            }
                    }
                    return filter
                }
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Filter.Marketplace", {
        edsFilterNonStaticBackgrounds: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.background, MSE.Data.Augmenter.Marketplace.edsImagePurpose.thumbnail, MSE.Data.Augmenter.Marketplace.edsImagePurpose.pcBackground, MSE.Data.Augmenter.Marketplace.edsImagePurpose.wideBackground, MSE.Data.Augmenter.Marketplace.edsImagePurpose.featurePage], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.backLText, MSE.Data.Augmenter.Marketplace.edsImagePurpose.backRText], 240, null, 3000, 3000), edsFilterNonStaticXboxBackgrounds: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.xboxBackground], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.backLText, MSE.Data.Augmenter.Marketplace.edsImagePurpose.backRText], 1280, 720), edsFilterNonStaticStudioBackgrounds: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.background], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.backLText, MSE.Data.Augmenter.Marketplace.edsImagePurpose.backRText], 1280, 720), edsFilterNonLogos: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.pcLogo, MSE.Data.Augmenter.Marketplace.edsImagePurpose.logo]), edsFilterNonNowPlayingBackgrounds: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.foreground, MSE.Data.Augmenter.Marketplace.edsImagePurpose.background, MSE.Data.Augmenter.Marketplace.edsImagePurpose.pcBackground, MSE.Data.Augmenter.Marketplace.edsImagePurpose.wideBackground, MSE.Data.Augmenter.Marketplace.edsImagePurpose.featurePage], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.backLText, MSE.Data.Augmenter.Marketplace.edsImagePurpose.backRText], 500, 500, null, null, 1), edsFilterNonCoversNonThumbnailsWideOrTall: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.thumbnail, MSE.Data.Augmenter.Marketplace.edsImagePurpose.boxArt, MSE.Data.Augmenter.Marketplace.edsImagePurpose.cover, MSE.Data.Augmenter.Marketplace.edsImagePurpose.featurePage], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.backLText, MSE.Data.Augmenter.Marketplace.edsImagePurpose.backRText]), edsFilterNonCoversNonThumbnails: MSE.Data.Filter.Marketplace.edsCreateImageFilter([MSE.Data.Augmenter.Marketplace.edsImagePurpose.thumbnail, MSE.Data.Augmenter.Marketplace.edsImagePurpose.boxArt, MSE.Data.Augmenter.Marketplace.edsImagePurpose.cover, MSE.Data.Augmenter.Marketplace.edsImagePurpose.featurePage], [MSE.Data.Augmenter.Marketplace.edsImagePurpose.background], null, null, null, null, null, 1)
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        PartnerApplicationLaunchInfoEDS: MSE.Data.define(null, {
            deepLinkInfo: alias("DeepLinkInfo", String.empty), consoleTitleId: alias("TitleId", String.empty), clientType: alias("ClientType", String.empty)
        }), ProviderContent: MSE.Data.define(null, {
                device: alias("Device", String.empty), imageUri: alias("Image.Url", String.empty)
            }), EDSGenre: MSE.Data.define(null, {
                name: alias("Name", String.empty), serviceId: alias("Name", String.empty), mediaType: Microsoft.Entertainment.Queries.ObjectType.genre
            }), EDSImage: MSE.Data.define(null, {
                width: alias("Width", 0), height: alias("Height", 0), purpose: alias("Purpose", 0), url: alias(["ResizeUrl", "Url"], null), resizeUrl: alias("ResizeUrl", null)
            }), EDSOffer: MSE.Data.define(null, {
                offerId: alias("OfferId", 0), price: alias("Price", 0), displayPrice: alias("DisplayPrice", String.empty), paymentType: convert("PaymentType", MSE.Data.Factory.Marketplace.edsPaymentTypeIntegerToString, String.empty)
            }), EDSDetailsResult: MSE.Data.define(null, {
                item: null, impressionGuid: convert("ImpressionGuid", MSE.Data.Factory.guid, String.empty)
            }), EDSBrowseResult: MSE.Data.define(null, {
                items: null, total: alias("Totals[0].Count", -1), totalCount: alias("Totals[0].Count", -1), impressionGuid: convert("ImpressionGuid", MSE.Data.Factory.guid, String.empty)
            }), EDSOfferRight: MSE.Data.define(null, {
                hasOffer: convert("offer", MSE.Data.Factory.bool, false), mediaInstanceId: convert("content.MediaInstanceID", MSE.Data.Factory.guid, String.empty), providerId: convert("provider.ID", MSE.Data.Factory.self, null), offerId: convert("offer.OfferId", MSE.Data.Factory.guid, String.empty), offerInstanceId: convert("offer.OfferInstanceId", MSE.Data.Factory.guid, String.empty), fulfillmentTicket: alias("offer.FulfillmentTicket", String.empty), fulfillmentTicketExpirationDate: alias("offer.Expiration", String.empty), licenseRight: convert("offer.DistributionRight", MSE.Data.Factory.Marketplace.edsConvertToRightType, String.empty), videoDefinition: convert("content.VideoAttributes.ResolutionFormat", MSE.Data.Factory.Marketplace.edsResolutionFormatValidate, String.empty), videoFriendlyDefinition: convert("content.VideoAttributes.ResolutionFormat", MSE.Data.Factory.Marketplace.edsFriendlyResolutionFormatValidate, String.empty), videoEncoding: alias("content.VideoAttributes.VideoEncoding", String.empty), primaryAudioLanguage: alias("content.VideoAttributes.PrimaryAudioLanguage", String.empty), encoding: convert("content.AudioAttributes.Encoding", MSE.Data.Factory.Marketplace.edsAudioEncodingValidate, String.empty), videoFileSizeInBytes: alias("content.SizeInBytes", 0), videoFileUrl: alias("content.Url", String.empty), clientTypes: convert("provider.DeviceType", MSE.Data.Factory.Marketplace.edsDeviceTypesValidate, MSE.Data.Factory.array), paymentInstruments: convert("offer", MSE.Data.Factory.Marketplace.edsPaymentTypesValidate, MSE.Data.Factory.array), price: alias("offer.Price", 0), priceCurrencyCode: alias("offer.CurrencyCode", null), endDate: alias("offer.EndDate", null), startDate: alias("offer.StartDate", null), displayPrice: alias("offer.DisplayPrice", null), deliveryFormat: alias("offer.DeliveryFormat", null), isFullRight: {get: function get_isFullRight() {
                            return !!this.mediaInstanceId || !!this.offerId
                        }}
            }), BBXAutoSuggestItem: MSE.Data.define(null, {
                isSuggestion: true, name: alias("Txt", String.empty)
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {EDSModernOfferRight: MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSOfferRight, null, {
            licenseRight: convert("offer.DistributionRight", MSE.Data.Factory.Marketplace.edsConvertToRightType, String.empty), price: alias("offerDisplay.price", 0), displayPrice: alias("offerDisplay.displayPrice", 0), acceptablePaymentInstrumentTypes: alias("offerDisplay.acceptablePaymentInstrumentTypes", MSE.Data.Factory.array), priceCurrencyCode: alias("offerDisplay.currencyCode", null), distributionType: alias("offerDisplay.distributionType", null), presaleFulfillmentDate: convert("offerDisplay.fulfillmentDate", MSE.Data.Factory.date, null), signedLicensePolicyTicket: alias("offer.SignedLicensePolicyTicket", null), signedOffer: alias("offer.SignedOffer", null), isBundle: convert("offerDisplay.isBundle", MSE.Data.Factory.boolFromString, false), bundledItems: alias("offerDisplay.bundledEntitlements", MSE.Data.Factory.array), isFullRight: {get: function get_isFullRight() {
                        return !!this.mediaInstanceId || !!this.offerId || !!this.signedOffer
                    }}
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {EDSMediaItem: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.MediaItem, null, {
                    serviceId: convert(["ZuneId", "ID", "id"], MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID), serviceIdType: convert(String.empty, MSE.Data.Factory.Marketplace.edsServiceIdType, null), zuneId: hydrated(convert("ZuneId", MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), canonicalId: hydrated(convert(["ID", "id"], MSE.Data.Factory.guid, MS.Entertainment.Utilities.EMPTY_GUID)), libraryId: hydrated(value(-1)), edsMediaGroup: alias("MediaGroup", null), edsMediaItemType: alias("MediaItemType", null), edsMediaItemTypeString: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeIntegerToString, String.empty), name: hydratedRequired(convertOriginal(["Name", "name"], MSE.Data.Factory.normalizeTextDirection, String.empty)), title: hydratedRequired(convertOriginal(["Name", "name"], MSE.Data.Factory.normalizeTextDirection, String.empty)), images: hydrated(sortArray("Images", MSE.Data.Comparer.Marketplace.edsCompareImage, MSE.Data.Augmenter.Marketplace.EDSImage, MSE.Data.Factory.array)), primaryImage: searchNoDeflate("images", MSE.Data.Filter.Marketplace.edsFilterNonCoversNonThumbnails, null), backgroundImage: searchNoDeflate("images", MSE.Data.Filter.Marketplace.edsFilterNonStaticBackgrounds, null), xboxBackgroundImage: searchNoDeflate("images", MSE.Data.Filter.Marketplace.edsFilterNonStaticXboxBackgrounds, null), imageUri: hydrated(convertNoDeflate("primaryImage.url", MSE.Data.Factory.self, null)), imageResizeUri: hydrated(convertNoDeflate("primaryImage.resizeUrl", MSE.Data.Factory.self, null)), primaryImageUri: hydrated(convertNoDeflate("primaryImage.url", MSE.Data.Factory.self, null)), backgroundImageUri: hydrated(convertNoDeflate("backgroundImage.url", MSE.Data.Factory.self, null)), backgroundImageResizeUri: convertNoDeflate("backgroundImage.resizeUrl", MSE.Data.Factory.self, null), xboxBackgroundImageUri: hydrated(convertNoDeflate("xboxBackgroundImage.url", MSE.Data.Factory.self, null)), xboxBackgroundImageResizeUri: hydrated(convertNoDeflate("xboxBackgroundImage.resizeUrl", MSE.Data.Factory.self, null)), rights: hydrated(convert("Providers", MSE.Data.Factory.Marketplace.edsRightsIEBProviders, null)), hasEDSMediaItemType: convert("MediaItemType", MSE.Data.Factory.bool, false), kValue: alias("KValue", null), kValueNamespace: alias("KValueNamespace", null), sevenDaysPlayCount: alias("SevenDaysPlayCount", null), mediaTypeString: {get: function() {
                                return this.edsMediaItemTypeString
                            }}, expectedMediaTypeString: {get: function() {
                                return MSE.Data.Factory.Marketplace.edsMediaTypeFromDatabaseTypes(this)
                            }}, isValid: {get: function() {
                                var hasId = this.hasServiceId || this.inCollection || this.hasCanonicalId;
                                var expectedEDSMediaType = MSE.Data.Factory.Marketplace.edsMediaTypeFromDatabaseTypes(this);
                                return hasId && this.hasEDSMediaItemType && expectedEDSMediaType === this.edsMediaItemTypeString
                            }}, isValidType: {get: function() {
                                var expectedEDSMediaType = MSE.Data.Factory.Marketplace.edsMediaTypeFromDatabaseTypes(this);
                                return expectedEDSMediaType === this.edsMediaItemTypeString
                            }}, relevancyTrackingContent: {get: function() {
                                return {
                                        impressionGuid: this.impressionGuid, kValue: this.kValue, kValueNamespace: this.kValueNamespace
                                    }
                            }}
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {EDSGenericItem: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSMediaItem, null, {
                    mediaType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToDatabaseMediaType, null), personType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToPersonType, null), videoType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToVideoType, null), type: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToHcrType, null), contentType: convert("MediaItemType", MSE.Data.Factory.Marketplace.edsMediaTypeToContentType, null)
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Marketplace", {
        EDSSearchResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                    items: list("Items", MSE.Data.Augmenter.Marketplace.EDSGenericItem, null), total: alias("Totals[0].Count", 0)
                })
        }), EDSGenericResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.derive(MSE.Data.Augmenter.Marketplace.EDSBrowseResult, null, {
                        item: augment("Items[0]", MSE.Data.Augmenter.Marketplace.EDSGenericItem, null), total: alias("Totals[0].Count", 0)
                    })
            }), BBXAutoSuggestResult: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        items: list("AS.Results[0].Suggests", MSE.Data.Augmenter.Marketplace.BBXAutoSuggestItem, null), itemsArray: augment("AS.Results[0].Suggests", MSE.Data.Augmenter.Marketplace.BBXAutoSuggestItem, MSE.Data.Factory.array), total: alias("AS.Results[0].Suggests.length", 0)
                    })
            }), EDSPinnedListResults: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.Data.define(null, {
                        items: augment("ListItems", MS.Entertainment.Data.Factory.Common.createMediaItemFromPinnedItem), listVersion: alias("ListMetadata.ListVersion", 0), totalCount: alias("ListMetadata.ListCount", -1)
                    })
            })
    })
})(MS.Entertainment)
})();
/* >>>>>>/framework/data/augmenters/spotlightaugmenters.js:2261 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MSE, undefined) {
    "use strict";
    var alias = MSE.Data.Property.alias;
    var augment = MSE.Data.Property.augment;
    var convert = MSE.Data.Property.convert;
    var convertNoDeflate = MSE.Data.Property.convertNoDeflate;
    var convertOriginal = MSE.Data.Property.convertOriginal;
    var convertOriginalNoDeflate = MSE.Data.Property.convertOriginalNoDeflate;
    var filter = MSE.Data.Property.filter;
    var filterArray = MSE.Data.Property.filterArray;
    var list = MSE.Data.Property.list;
    var format = MSE.Data.Property.format;
    var collect = MSE.Data.Property.collect;
    var value = MSE.Data.Property.value;
    var defaultVoiceConfidence = MSE.Data.Factory.defaultVoiceConfidence;
    WinJS.Namespace.defineWithParent(MSE, "Data.Factory.Spotlight", {createMediaItemFromSpotlightItem: function createMediaItemFromSpotlightItem(spotlightItem) {
            var mediaType = null;
            if (WinJS.Utilities.getMember("Action.type", spotlightItem))
                mediaType = MSE.Data.Augmenter.Spotlight.parseActionType(spotlightItem.Action.type).mediaType;
            else if (WinJS.Utilities.getMember("ItemType", spotlightItem))
                mediaType = spotlightItem.ItemType;
            else {
                mediaType = MS.Entertainment.Data.Augmenter.Spotlight.MediaType.None;
                Trace.fail("Spotlight augmenter - unable to determine media type for given spotlight item")
            }
            var augmentation = MS.Entertainment.Utilities.getSpotlightItemAugmentation(mediaType);
            return MSE.Data.augment(spotlightItem, augmentation)
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {ItemType: {
            Ad: "Ad", Media: "Media", VideoMarketplace: "VideoMarketplace", GameMarketplace: "GameMarketplace", WebBlend: "WebBlend"
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {ActionType: {
            Web: "Web", WebBlend: "WebBlend", FlexHub: "FlexHub", ZuneFlexHub: "ZuneFlexHub"
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {MediaType: {
            None: -1, Movie: "Movie", Season: "Season", Series: "Series", Artist: "Artist", Album: "Album", ModernGame: "Modern", ModernPDLC: "ModernDLC", WindowsGame: "GFWL", PhoneGame: "Windows Phone", XboxGame: "Xbox", Web: "Web", WebBlend: "WebBlend", FlexHub: "FlexHub", ZuneFlexHub: "ZuneFlexHub", Episode: "Episode", Playlist: "Playlist"
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {ContentType: {
            None: "", Movies: "Movies", TV: "TV"
        }});
    WinJS.Namespace.defineWithParent(MSE, "Data.Filter.Spotlight", {
        DiscoverySpotlightSupportedMusicApp1ItemTypes: [MSE.Data.Augmenter.Spotlight.MediaType.Album, MSE.Data.Augmenter.Spotlight.MediaType.Artist, MSE.Data.Augmenter.Spotlight.MediaType.Web, ], DiscoverySpotlightSupportedMusicApp2ItemTypes: [MSE.Data.Augmenter.Spotlight.MediaType.Album, MSE.Data.Augmenter.Spotlight.MediaType.Artist, MSE.Data.Augmenter.Spotlight.MediaType.FlexHub, MSE.Data.Augmenter.Spotlight.MediaType.Playlist, ], filterDiscoverySupportedMediaTypes: function filterDiscoverySupportedMediaTypes(spotlightItem) {
                var supportedItemTypes = MS.Entertainment.Utilities.isApp1 ? MSE.Data.Filter.Spotlight.DiscoverySpotlightSupportedMusicApp1ItemTypes : MSE.Data.Filter.Spotlight.DiscoverySpotlightSupportedMusicApp2ItemTypes;
                var shouldFilterItem = supportedItemTypes.indexOf(spotlightItem.ItemType) === -1;
                return shouldFilterItem
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {
        parseActionType: function parseActionType(value) {
            var result = null;
            if (value)
                switch (value) {
                    case MS.Entertainment.Data.Augmenter.Spotlight.ActionType.FlexHub:
                        result = {
                            location: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.FlexHub, mediaType: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.FlexHub
                        };
                        break;
                    case MS.Entertainment.Data.Augmenter.Spotlight.ActionType.ZuneFlexHub:
                        result = {
                            location: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.ZuneFlexHub, mediaType: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.ZuneFlexHub
                        };
                        break;
                    case MS.Entertainment.Data.Augmenter.Spotlight.ActionType.Web:
                        result = {
                            location: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Web, mediaType: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.Web
                        };
                        break;
                    case MS.Entertainment.Data.Augmenter.Spotlight.ActionType.WebBlend:
                        result = {
                            location: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.WebBlend, mediaType: MS.Entertainment.Data.Augmenter.Spotlight.MediaType.WebBlend
                        };
                        break;
                    default:
                        var elements = value.split("/");
                        result = {
                            location: elements[0], mediaType: (elements.length > 1 && elements[1]) ? elements[1] : MSE.Data.Augmenter.Spotlight.MediaType.None
                        };
                        break
                }
            return result
        }, parseIcon: function parseIcon(actionType) {
                var type = MSE.Data.Augmenter.Spotlight.parseActionType(actionType);
                var icon = null;
                if (type)
                    switch (type.mediaType) {
                        case MSE.Data.Augmenter.Spotlight.MediaType.XboxGame:
                            icon = MS.Entertainment.UI.Icon.smartGlassConsole;
                            break
                    }
                return icon
            }
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {SpotlightAction: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.Data.define(null, {
                    target: convert("Target", MSE.Data.Factory.guid, null), type: alias("type", null), contentType: alias("PrimaryContent", MSE.Data.Augmenter.Spotlight.ContentType.None)
                })
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {SpotlightSlot: MSE.Data.define(null, {
            sequenceId: convert("SequenceId", MSE.Data.Factory.intNumber, -1), items: augment("Slot", MSE.Data.Factory.Spotlight.createMediaItemFromSpotlightItem, null)
        })});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.MediaDiscovery", {SlotGroupItem: MSE.Data.define(null, {editorialItem: augment("Slot[0]", MSE.Data.Factory.Spotlight.createMediaItemFromSpotlightItem, null)})});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {
        SpotlightContent: MSE.Data.define(null, {
            entries: filter("Items", MSE.Data.Filter.Spotlight.filterDiscoverySupportedMediaTypes, MSE.Data.Factory.Spotlight.createMediaItemFromSpotlightItem, null), items: filter("Items", MSE.Data.Filter.Spotlight.filterDiscoverySupportedMediaTypes, MSE.Data.Factory.Spotlight.createMediaItemFromSpotlightItem, null), itemsArray: filterArray("Items", MSE.Data.Filter.Spotlight.filterDiscoverySupportedMediaTypes, MSE.Data.Factory.Spotlight.createMediaItemFromSpotlightItem, null), name: convertOriginal("Title", MSE.Data.Factory.normalizeTextDirection, String.empty)
        }), VideoSpotlightContent: MSE.Data.define(null, {
                entries: list("ContentManifest.Content.Channel.SlotGroup", MSE.Data.Augmenter.Spotlight.SpotlightSlot, null), itemsArray: augment("ContentManifest.Content.Channel.SlotGroup", MSE.Data.Augmenter.Spotlight.SpotlightSlot, null), name: convertOriginal("ContentManifest.Name", MSE.Data.Factory.normalizeTextDirection, String.empty)
            })
    });
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {EditorialOverrideSlot: MSE.Data.derive(MSE.Data.Augmenter.Spotlight.SpotlightSlot, null, {overrideSequenceId: convertOriginal("SequenceId", MSE.Data.Factory.string, String.empty)})});
    WinJS.Namespace.defineWithParent(MSE, "Data.Augmenter.Spotlight", {EditorialOverrideContent: MSE.Data.derive(MSE.Data.Augmenter.Spotlight.SpotlightContent, null, {
            entries: list("ContentManifest.Content.SlotGroup", MSE.Data.Augmenter.Spotlight.EditorialOverrideSlot, null), itemsArray: augment("ContentManifest.Content.SlotGroup", MSE.Data.Augmenter.Spotlight.EditorialOverrideSlot, null)
        })})
})(MS.Entertainment)
})();
/* >>>>>>/framework/data/queries/marketplacequeries.js:2379 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    var VER_CLIENTTYPE_STR = "PC/Windows";
    var BROWSE_CHUNK_SIZE = 50;
    var BROWSE_TOP_CHUNK_SIZE = 100;
    var SEARCH_CHUNK_SIZE = 20;
    var EXTRAS_CHUNK_SIZE = 30;
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {errorCodeWrapperQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.ServiceWrapperQuery, function errorCodeWrapperQuery(errorCode) {
                    this.base();
                    if (errorCode < 0)
                        errorCode += 0xFFFFFFFF + 1;
                    var languageName = MS.Entertainment.Utilities.getResourceLanguage();
                    this.postData = {
                        contentType: MSE.Data.Query.errorCodeWrapperQuery.contentType, data: MSE.Data.Query.errorCodeWrapperQuery.postDataFormat.format(errorCode.toString(16), languageName)
                    };
                    this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post
                }, {
                    createResourceURI: function() {
                        return MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_XboxSupport) + "/Services/ErrorCodeLookupService.asmx"
                    }, headers: {SOAPAction: "\"ErrorCodeLookup/LookupFullParam\""}, useCache: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Common.ErrorCode
                }, {
                    postDataFormat: "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"><soap:Body><LookupFullParam xmlns=\"ErrorCodeLookup\"><errorCode>{0}</errorCode><searchMode>ExactOnly</searchMode><locale>{1}</locale></LookupFullParam></soap:Body></soap:Envelope>", contentType: "text/xml; charset=utf-8"
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data.Query, "Shared", {SetRichPresence: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.ServiceWrapperQuery, function setRichPresence(queryData) {
                    this.base();
                    this.postData = {
                        contentType: MS.Entertainment.Data.Query.Shared.SetRichPresence.contentType, data: JSON.stringify(queryData)
                    };
                    this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post;
                    this.serviceType = MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json
                }, {
                    getResourceEndpointID: function() {
                        return MS.Entertainment.Endpoint.id.seid_RichPresence
                    }, getResourceEndpoint: function() {
                            return MS.Entertainment.Endpoint.load(this.getResourceEndpointID())
                        }, createResourceURI: function() {
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            var suffix = MS.Entertainment.Data.Query.Shared.SetRichPresence.resourceSuffix.format(signedInUser.xuid);
                            return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                        }, requireResponseData: false, addAuthenticationHeader: true
                }, {
                    resourceSuffix: "users/xuid({0})/devices/current/titles/current", contentType: "application/json"
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data.Query, "Shared", {SetRecommendationFeeback: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.ServiceWrapperQuery, function setRecommendationFeeback(queryData) {
                    this.base();
                    this.postData = {
                        contentType: MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.contentType, data: JSON.stringify(queryData)
                    };
                    this.addHeader("x-xbl-contract-version", MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.contractVersion);
                    this.addHeader("Accept", MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.contentType);
                    this.addHeader("Content-Type", MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.contentType);
                    this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post;
                    this.serviceType = MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json
                }, {
                    getResourceEndpointID: function() {
                        return MS.Entertainment.Endpoint.id.seid_Feedback
                    }, getResourceEndpoint: function() {
                            return MS.Entertainment.Endpoint.load(this.getResourceEndpointID())
                        }, createResourceURI: function() {
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            var languageName = MS.Entertainment.Utilities.getResourceLanguage();
                            var suffix = MS.Entertainment.Data.Query.Shared.SetRecommendationFeeback.resourceSuffix.format(signedInUser.xuid, languageName);
                            return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                        }, requireResponseData: false, addAuthenticationHeader: true
                }, {
                    resourceSuffix: "xuid({0})/feedback?locale={1}", contractVersion: "1", contentType: "application/json", notInterestedFeedbackValue: "NotInterested"
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {MovieHub: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.marketplaceWrapperQuery, null, {
                    createHeaders: function createHeaders() {
                        return MS.Entertainment.Data.Query.createEditorialHeaders()
                    }, getResourceEndpointID: function getResourceEndpointID() {
                            return MS.Entertainment.Endpoint.id.seid_MediaDiscovery
                        }, createResourceURI: function() {
                            var serviceConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service;
                            var uri = MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), serviceConfig.videoAppMovieHubSuffix);
                            return uri
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.channelPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotGroupPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotPluralizer], resultAugmentation: MSE.Data.Augmenter.Video.MovieHubContent, aggregateChunks: false, supportsContentNotifications: true, queryType: "MovieHub"
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {MovieHubNewReleasesQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MS.Entertainment.Data.Query.MovieHub, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Video.MovieHubNewReleaseContent})
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {MovieHubFeaturedQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MS.Entertainment.Data.Query.MovieHub, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Video.MovieHubFeaturedContent})
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {TvHub: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.marketplaceWrapperQuery, null, {
                    createHeaders: function createHeaders() {
                        return MS.Entertainment.Data.Query.createEditorialHeaders()
                    }, getResourceEndpointID: function getResourceEndpointID() {
                            return MS.Entertainment.Endpoint.id.seid_MediaDiscovery
                        }, createResourceURI: function() {
                            var serviceConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service;
                            var uri = MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), serviceConfig.videoAppTvHubSuffix);
                            return uri
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.channelPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotGroupPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotPluralizer], queryType: "TvHub", resultAugmentation: MSE.Data.Augmenter.Video.TvHubContent, aggregateChunks: false
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {TvHubNewReleasesQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MS.Entertainment.Data.Query.TvHub, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Video.TvHubNewReleaseContent})
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {TvHubFeaturedQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MS.Entertainment.Data.Query.TvHub, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Video.TvHubFeaturedContent})
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {
        marketplaceOrderBy: {
            downloadRank: "downloadRank", none: "", playRank: "playRank", releaseDate: "releaseDate", rentalRank: "rentalRank", salesRank: "salesRank", title: "title"
        }, marketplaceWrapperQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MSE.derive(MSE.Data.ServiceWrapperQuery, null, {
                        getResourceEndpointID: function getResourceEndpointID() {
                            return MS.Entertainment.Endpoint.id.seid_RootCatalog
                        }, createParameters: function createParameters() {
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                if (configurationManager.service.enableTimeTravel)
                                    return {instant: (new Microsoft.Entertainment.Configuration.ConfigurationManager).service.timeTravelStartDate};
                                else
                                    return null
                            }
                    }, {
                        entriesPluralizer: "entry", rightsPluralizer: "rights/right", closedCaptionPluralizer: "closedCaptionFiles/closedCaptionFile", clientTypesPluralizer: "clientTypes/clientType", genresPluralizer: "genres/genre", peerGenresPluralizer: "peerGenres/genre", subGenresPluralizer: "subGenres/genre", categoriesPluralizer: "categories/category", imagesPluralizer: "entry/instances/imageInstance", editorialItemsPluralizer: "editorialItems/editorialItem", channelPluralizer: "Content/Channel", slotGroupPluralizer: "Channel/SlotGroup", slotPluralizer: "SlotGroup/Slot", featuresPluralizer: "features/feature", albumsPluralizer: "albums/album", paymentTypesPluralizer: "paymentTypes/paymentType", reviewSourcesPluralizer: "ReviewSources/ReviewSource", criticReviewsPluralizer: "CriticReviews/CriticReview"
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {BrowseDiscoveryFlexHub: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.ServiceWrapperQuery, null, {
                    serviceType: MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json, target: "", createResourceURI: function() {
                            Trace.assert(this.target, "BrowseDiscoveryFlexHub: No target defined.");
                            var resourceUri = null;
                            if (MS.Entertainment.Utilities.verifyUrl(this.target))
                                resourceUri = window.encodeURI(this.target);
                            else {
                                Trace.assert(MS.Entertainment.Utilities.isMusicApp, "Only music flexhub queries supported.");
                                var serviceConfig = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service;
                                var suffix = serviceConfig.musicAppSpotlightVersion.split("/");
                                suffix.push(window.encodeURI(this.target));
                                resourceUri = MS.Entertainment.Utilities.UriFactory.create(MS.Entertainment.Endpoint.id.seid_MediaDiscovery, suffix)
                            }
                            return resourceUri
                        }, createHeaders: function createHeaders() {
                            return MS.Entertainment.Data.Query.createEditorialHeaders()
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.entriesPluralizer, MSE.Data.Query.marketplaceWrapperQuery.rightsPluralizer, MSE.Data.Query.marketplaceWrapperQuery.clientTypesPluralizer, MSE.Data.Query.marketplaceWrapperQuery.editorialItemsPluralizer], resultAugmentation: MSE.Data.Augmenter.Spotlight.SpotlightContent
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {prefixQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.Query.marketplaceWrapperQuery, null, {
                    keyword: "", createResourceURI: function() {
                            return this.getResourceEndpoint()
                        }, createParameters: function createParameters() {
                            return {
                                    prefix: this.keyword, includeTracks: true, includeAlbums: true, includeArtists: true, includeMovies: true, includeTVSeries: true, isActionable: true, clientType: VER_CLIENTTYPE_STR
                                }
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.entriesPluralizer], resultAugmentation: MSE.Data.Augmenter.Marketplace.PrefixResult
                })
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {HubsOverride: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MSE.derive(MSE.Data.ServiceWrapperQuery, null, {
                    getResourceEndpointID: function getResourceEndpointID() {
                        return MS.Entertainment.Endpoint.id.seid_WinPhoneXboxDotCom
                    }, getSpotlightFeedVersionSubPath: function getSpotlightFeedVersionSubPath() {
                            return String.empty
                        }, createResourceURI: function() {
                            return this.getResourceEndpoint() + this.getSpotlightFeedVersionSubPath() + this.appString
                        }, pluralizers: [MSE.Data.Query.marketplaceWrapperQuery.slotGroupPluralizer, MSE.Data.Query.marketplaceWrapperQuery.slotPluralizer], resultAugmentation: MSE.Data.Augmenter.Spotlight.EditorialOverrideContent, supportsContentNotifications: true
                })
        })})
})()
})();
/* >>>>>>/framework/data/queries/edsqueries.js:2558 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    var VER_CLIENTTYPE_STR_EDS = "PCWindows";
    var VER_SERVICEVERSION_STR_EDS = "1.4";
    var SEARCH_CHUNK_SIZE = 20;
    var BROWSE_CHUNK_SIZE = 25;
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {
        edsMediaGroup: {
            appType: "AppType", enhancedContentType: "EnhancedContentType", gameType: "GameType", movieType: "MovieType", musicType: "MusicType", musicArtistType: "MusicArtistType", tvType: "TVType", unknown: "Unknown", webVideoType: "WebVideoType"
        }, edsSortOrder: {
                allTimeAverageRating: "AllTimeAverageRating", allTimePlayCount: "AllTimePlayCount", allTimePurchaseCount: "AllTimePurchaseCount", allTimeRatingCount: "AllTimeRatingCount", allTimeRentalCount: "AllTimeRentalCount", allTimeUserRating: "AllTimeUserRating", criticRating: "CriticRating", digitalReleaseDate: "DigitalReleaseDate", freeAndPaidCountDaily: "FreeAndPaidCountDaily", mostPopular: "MostPopular", paidCountAllTime: "PaidCountAllTime", paidCountDaily: "PaidCountDaily", releaseDate: "ReleaseDate", sevenDaysAverageRating: "SevenDaysAverageRating", sevenDaysPlayCount: "SevenDaysPlayCount", sevenDaysPurchaseCount: "SevenDaysPurchaseCount", sevenDaysRentalCount: "SevenDaysRentalCount", sevenDaysRatingCount: "SevenDaysRatingCount", userRating: "UserRating"
            }, edsQueryRefiner: {
                decade: "Decade", genre: "Genre", network: "Network", studio: "Studio"
            }, edsEndpointType: {
                browse: "browse", crossMediaGroupSearch: "crossMediaGroupSearch", details: "details", fields: "fields", mediaGuide: "mediaGuide", metadata: "metadata", metadataMovieGenres: "metadata/mediaItemTypes/Movie/queryRefiners/genre", metadataMovieStudios: "metadata/mediaItemTypes/Movie/queryRefiners/studio", metadataMusicGenres: "metadata/mediaItemTypes/Album/queryRefiners/genre", metadataMusicSubGenres: "metadata/mediaItemTypes/Album/queryRefiners/genre/subQueryRefinerValues", metadataTvGenres: "metadata/mediaItemTypes/TVSeries/queryRefiners/genre", metadataTvNetworks: "metadata/mediaItemTypes/TVSeries/queryRefiners/network", recommendations: "recommendations", related: "related", searchTerms: "searchTerms", singleMediaGroupSearch: "singleMediaGroupSearch"
            }, edsFields: {
                allTimeAverageRating: "AllTimeAverageRating", allTimePlayCount: "AllTimePlayCount", allTimeRatingCount: "AllTimeRatingCount", amgId: "AmgId", availabilities: "Availabilities", awards: "Awards", contributors: "Contributors", copyright: "Copyright", criticRating: "CriticRating", description: "Description", duration: "Duration", episodeCount: "EpisodeCount", episodeNumber: "EpisodeNumber", explanation: "Explanation", explanations: "Explanations", genres: "Genres", hasActivities: "HasActivities", hasSeasons: "HasSeasons", hasTrackMediaGuide: "HasTrackMediaGuide", id: "ID", images: "Images", isExplicit: "IsExplicit", isHero: "IsHero", isSeasonComplete: "IsSeasonComplete", label: "Label", labelOwner: "LabelOwner", latestEpisode: "LatestEpisode", latestSeason: "LatestSeason", legacyAmgId: "LegacyAmgId", legacyIds: "LegacyIds", mediaGroup: "MediaGroup", mediaItemType: "MediaItemType", mediaNetId: "MediaNetId", mergedMetadata: "MergedMetadata", musicAlbumType: "MusicAlbumType", musicVideoId: "MusicVideoId", name: "Name", network: "Network", networks: "Networks", parentAlbum: "ParentAlbum", parentalRating: "ParentalRating", parentalRatings: "ParentalRatings", parentalRatingReasons: "ParentalRatingReasons", parentalRatingSystem: "ParentalRatingSystem", parentItems: "ParentItems", parentSeason: "ParentSeason", parentSeries: "ParentSeries", previewDuration: "PreviewDuration", previewUrl: "PreviewUrl", primaryArtist: "PrimaryArtist", providers: "Providers", ratingId: "RatingId", relationType: "RelationType", relatedMedia: "RelatedMedia", releaseDate: "ReleaseDate", reviewSources: "ReviewSources", seasonCount: "SeasonCount", seasonNumber: "SeasonNumber", sevenDaysAverageRating: "SevenDaysAverageRating", sevenDaysPlayCount: "SevenDaysPlayCount", sevenDaysRatingCount: "SevenDaysRatingCount", sortName: "SortName", studio: "Studio", studios: "Studios", subGenres: "SubGenres", subTitle: "SubTitle", thirtyDaysAverageRating: "ThirtyDaysAverageRating", thirtyDaysPlayCount: "ThirtyDaysPlayCount", thirtyDaysRatingCount: "ThirtyDaysRatingCount", trackCount: "TrackCount", trackId: "TrackId", trackNumber: "TrackNumber", vuiDisplayName: "VuiDisplayName", zuneId: "ZuneId", zuneEpisodeCount: "ZuneEpisodeCount", zuneSeasonCount: "ZuneSeasonCount"
            }, bbxMediaType: {
                app: "bbxapps", album: "bbxalbum", allMovie: "bbxmovies", allTv: "bbxtv", allVideo: "bbxvideo", artist: "bbxartist", artistSmartDj: "bbxartisttrkmg", game: "bbxgames", firstParty: "bbxallfirstparty", movie: "bbxmoviesfirstparty", music: "bbxmusic", musicVideo: "bbxmusicvideo", track: "bbxtrack", tv: "bbxtvfirstparty", video: "bbxvideofirstparty", webVideo: "bbxwebvideo"
            }, edsArray: function edsArray(array) {
                var result;
                if (Array.isArray(array))
                    result = array.join(".");
                else if (array)
                    result = [array];
                return result
            }, edsString: function edsString(string) {
                if (string)
                    string = string.replace(/\s+/g, '+');
                return string
            }, edsSearchString: function edsSearchString(string) {
                if (string)
                    string = string.replace(/\+/g, '%2B').replace(/\</g, '%3C');
                return string
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.edsMediaType", {
        appActivity: "AppActivity", avatarItem: "AvatarItem", gameActivity: "GameActivity", gameLayer: "GameLayer", metroGame: "MetroGame", metroGameConsumable: "MetroGameConsumable", metroGameContent: "MetroGameContent", mobileGame: "MobileGame", movie: "Movie", subscription: "Subscription", tvEpisode: "TVEpisode", tvSeason: "TVSeason", tvSeries: "TVSeries", tvShow: "TVShow", videoActivity: "VideoActivity", webGame: "WebGame", webVideo: "WebVideo", webVideoCollection: "WebVideoCollection", xbox360Game: "Xbox360Game", xbox360GameContent: "Xbox360GameContent", xbox360GameDemo: "Xbox360GameDemo", xboxApp: "XboxApp", xboxArcadeGame: "XboxArcadeGame", xboxBundle: "XboxBundle", xboxGameConsumable: "XboxGameConsumable", xboxGameTrailer: "XboxGameTrailer", xboxGameTrial: "XboxGameTrial", xboxGamerTile: "XboxGamerTile", xboxGameVideo: "XboxGameVideo", xboxMarketplace: "XboxMarketplace", xboxOriginalGame: "XboxOriginalGame", xboxTheme: "XboxTheme", xboxXnaCommunityGame: "XboxXnaCommunityGame", xboxMobilePDLC: "XboxMobilePDLC", xboxMobileConsumable: "XboxMobileConsumable"
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {
        edsMediaTypeToDatabaseMappings: (function() {
            var mapping = {};
            mapping[MS.Entertainment.Data.Query.edsMediaType.album] = Microsoft.Entertainment.Queries.ObjectType.album;
            mapping[MS.Entertainment.Data.Query.edsMediaType.avatarItem] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.appActivity] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.gameActivity] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.videoActivity] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.gameLayer] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.metroGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameConsumable] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameContent] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.mobileGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.movie] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.musicArtist] = Microsoft.Entertainment.Queries.ObjectType.person;
            mapping[MS.Entertainment.Data.Query.edsMediaType.musicVideo] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.track] = Microsoft.Entertainment.Queries.ObjectType.track;
            mapping[MS.Entertainment.Data.Query.edsMediaType.tvEpisode] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeason] = Microsoft.Entertainment.Queries.ObjectType.tvSeason;
            mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeries] = Microsoft.Entertainment.Queries.ObjectType.tvSeries;
            mapping[MS.Entertainment.Data.Query.edsMediaType.tvShow] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.webGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.webVideo] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.webVideoCollection] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360Game] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameContent] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxApp] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxBundle] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameConsumable] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameTrailer] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameTrial] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGamerTile] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameVideo] = Microsoft.Entertainment.Queries.ObjectType.video;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxMarketplace] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxOriginalGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxTheme] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame] = Microsoft.Entertainment.Queries.ObjectType.game;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxMobilePDLC] = null;
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxMobileConsumable] = null;
            return mapping
        })(), edsMediaTypeIntegerToStringMappings: {
                1: MS.Entertainment.Data.Query.edsMediaType.xbox360Game, 5: MS.Entertainment.Data.Query.edsMediaType.xboxGameTrial, 18: MS.Entertainment.Data.Query.edsMediaType.xbox360GameContent, 19: MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo, 20: MS.Entertainment.Data.Query.edsMediaType.xboxTheme, 21: MS.Entertainment.Data.Query.edsMediaType.xboxOriginalGame, 22: MS.Entertainment.Data.Query.edsMediaType.xboxGamerTile, 23: MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame, 30: MS.Entertainment.Data.Query.edsMediaType.xboxGameVideo, 37: MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame, 47: MS.Entertainment.Data.Query.edsMediaType.avatarItem, 61: MS.Entertainment.Data.Query.edsMediaType.xboxApp, 62: MS.Entertainment.Data.Query.edsMediaType.metroGame, 63: MS.Entertainment.Data.Query.edsMediaType.metroGameContent, 64: MS.Entertainment.Data.Query.edsMediaType.metroGameConsumable, 66: MS.Entertainment.Data.Query.edsMediaType.gameActivity, 67: MS.Entertainment.Data.Query.edsMediaType.appActivity, 901: MS.Entertainment.Data.Query.edsMediaType.videoActivity, 1000: MS.Entertainment.Data.Query.edsMediaType.movie, 1002: MS.Entertainment.Data.Query.edsMediaType.tvShow, 1003: MS.Entertainment.Data.Query.edsMediaType.tvEpisode, 1004: MS.Entertainment.Data.Query.edsMediaType.tvSeries, 1005: MS.Entertainment.Data.Query.edsMediaType.tvSeason, 1006: MS.Entertainment.Data.Query.edsMediaType.album, 1007: MS.Entertainment.Data.Query.edsMediaType.track, 1008: MS.Entertainment.Data.Query.edsMediaType.musicVideo, 1009: MS.Entertainment.Data.Query.edsMediaType.musicArtist
            }, edsMediaTypeToVideoTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.movie] = Microsoft.Entertainment.Queries.VideoType.movie;
                mapping[MS.Entertainment.Data.Query.edsMediaType.musicVideo] = Microsoft.Entertainment.Queries.VideoType.musicVideo;
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvEpisode] = Microsoft.Entertainment.Queries.VideoType.tvEpisode;
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvShow] = Microsoft.Entertainment.Queries.VideoType.other;
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeries] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeason] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.webVideo] = Microsoft.Entertainment.Queries.VideoType.other;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameTrailer] = Microsoft.Entertainment.Queries.VideoType.other;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameVideo] = Microsoft.Entertainment.Queries.VideoType.other;
                return mapping
            })(), edsMediaTypeToGameTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.avatarItem] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGame] = Microsoft.Entertainment.Queries.GameType.windows;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameConsumable] = Microsoft.Entertainment.Queries.GameType.windows;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameContent] = Microsoft.Entertainment.Queries.GameType.windows;
                mapping[MS.Entertainment.Data.Query.edsMediaType.mobileGame] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.webGame] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxApp] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGamerTile] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameTrial] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameVideo] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxOriginalGame] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360Game] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameContent] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxTheme] = Microsoft.Entertainment.Queries.GameType.console;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame] = Microsoft.Entertainment.Queries.GameType.console;
                return mapping
            })(), edsMediaTypeToGameTitleTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.avatarItem] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGame] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameConsumable] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGameContent] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.mobileGame] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.webGame] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxApp] = Microsoft.Entertainment.Queries.GameTitleType.application;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame] = Microsoft.Entertainment.Queries.GameTitleType.arcade;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGamerTile] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameTrial] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxGameVideo] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxOriginalGame] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360Game] = Microsoft.Entertainment.Queries.GameTitleType.standard;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameContent] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo] = Microsoft.Entertainment.Queries.GameTitleType.demo;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxTheme] = null;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame] = null;
                return mapping
            })(), edsMediaTypeToPersonTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.musicArtist] = Microsoft.Entertainment.Queries.PersonType.artist;
                return mapping
            })(), edsMediaTypeToZuneHcrTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.album] = "Album";
                mapping[MS.Entertainment.Data.Query.edsMediaType.movie] = "Movie";
                mapping[MS.Entertainment.Data.Query.edsMediaType.musicArtist] = "Artist";
                mapping[MS.Entertainment.Data.Query.edsMediaType.track] = "Track";
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeries] = "Series";
                return mapping
            })(), edsMediaTypeToContentTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.album] = "Album";
                mapping[MS.Entertainment.Data.Query.edsMediaType.movie] = "Movie";
                mapping[MS.Entertainment.Data.Query.edsMediaType.musicArtist] = "Artist";
                mapping[MS.Entertainment.Data.Query.edsMediaType.musicVideo] = "MusicVideo";
                mapping[MS.Entertainment.Data.Query.edsMediaType.track] = "Track";
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvEpisode] = "Episode";
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeason] = "Season";
                mapping[MS.Entertainment.Data.Query.edsMediaType.tvSeries] = "Series";
                return mapping
            })(), edsMediaTypeToGamePlatformTypeMappings: (function() {
                var mapping = {};
                mapping[MS.Entertainment.Data.Query.edsMediaType.metroGame] = MSE.Data.Augmenter.GamePlatform.Modern;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360Game] = MSE.Data.Augmenter.GamePlatform.Xbox;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame] = MSE.Data.Augmenter.GamePlatform.Xbox;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxOriginalGame] = MSE.Data.Augmenter.GamePlatform.Xbox;
                mapping[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame] = MSE.Data.Augmenter.GamePlatform.Xbox;
                return mapping
            })(), edsMediaTypeToPurchaseHelperTypeMappings: (function() {
                var mapping = {};
                return mapping
            })(), edsSortOrderToLegacySortOrder: (function() {
                var mapping = {};
                var marketplaceOrderBy = WinJS.Utilities.getMember("MS.Entertainment.Data.Query.marketplaceOrderBy") || {};
                mapping[MS.Entertainment.Data.Query.edsSortOrder.allTimePurchaseCount] = marketplaceOrderBy.salesRank;
                mapping[MS.Entertainment.Data.Query.edsSortOrder.mostPopular] = marketplaceOrderBy.playRank;
                mapping[MS.Entertainment.Data.Query.edsSortOrder.releaseDate] = marketplaceOrderBy.releaseDate;
                mapping[MS.Entertainment.Data.Query.edsSortOrder.sevenDaysRentalCount] = marketplaceOrderBy.rentalRank;
                mapping[MS.Entertainment.Data.Query.edsSortOrder.sevenDaysPurchaseCount] = marketplaceOrderBy.downloadRank;
                return mapping
            })(), convertToLegacySortIfNeeded: function convertToLegacySortIfNeeded(edsSort) {
                return edsSort
            }
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {edsMediaTypeToGameTypeGameTitleTypeMappings: (function() {
            var mapping = {};
            var edsMediaTypeToGameTypeMappings = MS.Entertainment.Data.Query.edsMediaTypeToGameTypeMappings;
            var edsMediaTypeToGameTitleTypeMappings = MS.Entertainment.Data.Query.edsMediaTypeToGameTitleTypeMappings;
            mapping[MS.Entertainment.Data.Query.edsMediaType.metroGame] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.metroGame], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.metroGame]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.mobileGame] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.mobileGame], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.mobileGame]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.webGame] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.webGame], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.webGame]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxApp] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxApp], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxApp]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxArcadeGame]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360Game] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xbox360Game], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xbox360Game]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xbox360GameDemo]];
            mapping[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame] = [edsMediaTypeToGameTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame], edsMediaTypeToGameTitleTypeMappings[MS.Entertainment.Data.Query.edsMediaType.xboxXnaCommunityGame]];
            return mapping
        })()});
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {databaseMediaTypeToSubTypeMappingMappings: (function() {
            var mapping = {};
            mapping[Microsoft.Entertainment.Queries.ObjectType.album] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.game] = MS.Entertainment.Data.Query.edsMediaTypeToGameTypeGameTitleTypeMappings;
            mapping[Microsoft.Entertainment.Queries.ObjectType.person] = MS.Entertainment.Data.Query.edsMediaTypeToPersonTypeMappings;
            mapping[Microsoft.Entertainment.Queries.ObjectType.playlist] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.smartDJ] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.track] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.tvSeason] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.tvSeries] = null;
            mapping[Microsoft.Entertainment.Queries.ObjectType.video] = MS.Entertainment.Data.Query.edsMediaTypeToVideoTypeMappings;
            return mapping
        })()});
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {edsRequestFields: {basic: [MS.Entertainment.Data.Query.edsFields.id, MS.Entertainment.Data.Query.edsFields.mediaGroup, MS.Entertainment.Data.Query.edsFields.mediaItemType, MS.Entertainment.Data.Query.edsFields.name, ]}});
    WinJS.Namespace.define("MS.Entertainment.Data.Query", {EDSDeviceQuery: MSE.derive(MSE.Data.EDSWrapperQuery, null, {createTargetDeviceType: function createTargetDeviceType() {
                return MS.Entertainment.Utilities.defaultEdsTargetDeviceTypeFromApp
            }})});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {
        CrossMediaSearch: MS.Entertainment.deferredDerive(MS.Entertainment.Data.Query.EDSDeviceQuery, null, {
            search: null, keyword: null, groupTypes: null, chunkSize: 1, enabledImpressionGuid: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSSearchResult, forceSecureEndpoint: true, includeContentRestrictionHeader: true, createResourceURI: function() {
                    return this.getResourceEndpoint(MS.Entertainment.Data.Query.edsEndpointType.crossMediaGroupSearch)
                }, createParameters: function createParameters() {
                    return {
                            q: MS.Entertainment.Data.Query.edsSearchString(this.search || this.keyword), desiredMediaItemTypes: MS.Entertainment.Data.Query.edsArray(this.groupTypes), firstPartyOnly: true
                        }
                }
        }), AutoSuggest: MS.Entertainment.deferredDerive(MS.Entertainment.Data.ServiceWrapperQuery, null, {
                search: null, keyword: null, mediaType: MS.Entertainment.Data.Query.bbxMediaType.firstParty, serviceType: MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.BBXAutoSuggestResult, getResourceEndpointID: function getResourceEndpointID() {
                        return MS.Entertainment.Endpoint.id.seid_BingAutoSuggest
                    }, createResourceURI: function() {
                        return this.getResourceEndpoint()
                    }, createParameters: function createParameters() {
                        if (!MS.Entertainment.Data.Query.AutoSuggest.cachedMarket) {
                            var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            MS.Entertainment.Data.Query.AutoSuggest.cachedMarket = configurationManager.marketplace.marketplaceCulture
                        }
                        return {
                                FORM: "XBOXQ5", q: this.search || this.keyword, ds: this.mediaType
                            }
                    }
            }, {cachedMarket: null}), edsWrapperQuery: MSE.derive(MSE.Data.ServiceWrapperQuery, null, {getResourceEndpointID: function getResourceEndpointID() {
                    return MS.Entertainment.Endpoint.id.seid_EDSSearch
                }}, {
                itemsPluralizer: "Items/Item", genresPluralizer: "Genres/Genre", providersPluralizer: "Providers/Provider", partnerApplicationLaunchInfosPluralizer: "PartnerApplicationLaunchInfos/PartnerApplicationLaunchInfo", providerContentsPluralizer: "ProviderContents/ProviderContent", searchTermsPluralizer: "SearchTerms/SearchTerm"
            })
    });
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {videoDetailsFromTitleIdAssetId: MSE.derive(MSE.Data.Query.edsWrapperQuery, null, {
            assetId: "", titleId: "", createResourceURI: function() {
                    return this.getResourceEndpoint() + "/titles/" + this.titleId + "/content"
                }, createParameters: function createParameters() {
                    return {
                            version: VER_SERVICEVERSION_STR_EDS, clientType: VER_CLIENTTYPE_STR_EDS, clientContext: "video", contentId: this.assetId
                        }
                }, pluralizers: [MSE.Data.Query.edsWrapperQuery.genresPluralizer, MSE.Data.Query.edsWrapperQuery.providersPluralizer, MSE.Data.Query.edsWrapperQuery.partnerApplicationLaunchInfosPluralizer], resultAugmentation: MSE.Data.Augmenter.Marketplace.VideoResultEDS
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {ESListServiceWrapperQuery: WinJS.Class.derive(MSE.Data.EDSWrapperQuery, function ESListService() {
            MS.Entertainment.Data.EDSWrapperQuery.prototype.constructor.call(this);
            this.shouldAuthenticate = true
        }, {
            getAuthenticatedResourceEndpointID: function getAuthenticationResourceEndpointID() {
                return MS.Entertainment.Endpoint.id.seid_ESListService
            }, getResourceEndpointID: function getResourceEndpointID() {
                    return MS.Entertainment.Endpoint.id.seid_ESListService
                }
        })});
    WinJS.Namespace.defineWithParent(MSE.Data, "Query", {GenericDetails: MS.Entertainment.deferredDerive(MS.Entertainment.Data.EDSWrapperQuery, null, {
            id: null, idType: null, serviceId: null, chunkSize: 0, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSGenericResult, requestFields: MS.Entertainment.Data.Query.edsRequestFields.basic, createResourceURI: function() {
                    return this.getResourceEndpoint(MS.Entertainment.Data.Query.edsEndpointType.details)
                }, createParameters: function createParameters() {
                    return {
                            ids: this.id || this.serviceId, idType: (this.idType !== MS.Entertainment.Data.Query.edsIdType.canonical) ? this.idType : null, mediaGroup: MS.Entertainment.Data.Query.edsMediaGroup.unknown, firstPartyOnly: true
                        }
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Shared", {
        PinnedList: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function PinnedList() {
                    this.base()
                }, {
                    clearResultOnFailure: true, useCache: true, useIfMatchCache: true, chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSPinnedListResults, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, forceSecureEndpoint: true, hasTotalCount: true, xuid: String.empty, createResourceURI: function() {
                            var suffix = MS.Entertainment.Data.Query.Shared.PinnedList.defaultSuffix.format(this.xuid);
                            return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                        }, createEDSHeaders: function createEDSHeaders() {
                            return {
                                    "Content-Type": "application/json", Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion
                                }
                        }, getResponseVersion: function getResponseVersion(result) {
                            return result.listVersion
                        }
                }, {defaultSuffix: "users/xuid({0})/lists/PINS/XBLPins"})
        }), PinnedListAdd: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function pinnedListAdd(mediaItem, listVersion) {
                        this.base();
                        var provider = MS.Entertainment.Utilities.titleId;
                        if (mediaItem) {
                            var edsMediaItem;
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            var locale = signedInUser.locale;
                            switch (mediaItem.mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.musicPlaylist, ItemId: null, ProviderId: mediaItem.cloudSyncItemId || mediaItem.serviceId, Provider: provider, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    if (mediaItem.tracks)
                                        this.getImagePromise = function getImagePromise() {
                                            return MS.Entertainment.Data.List.listToArray(mediaItem.tracks, 0, 1).then(function getTrackImage(items) {
                                                    if (items && items[0]) {
                                                        var url = MS.Entertainment.UI.Shell.ImageLoader.getNewImageServiceUri(items[0], MS.Entertainment.Utilities.playlistPinImageSize.width, MS.Entertainment.Utilities.playlistPinImageSize.height);
                                                        if (url) {
                                                            edsMediaItem.ImageUrl = url;
                                                            this._updatePostData(edsMediaItem)
                                                        }
                                                    }
                                                }.bind(this), function onError(error) {
                                                    return WinJS.Promise.wrapError("pinnedListAdd getImageUri failed: " + error && error.message)
                                                })
                                        }.bind(this);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.album, ItemId: null, ProviderId: mediaItem.canonicalId, Provider: provider, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.musicArtist, ItemId: null, ProviderId: mediaItem.canonicalId, Provider: provider, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.video:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.movie, ItemId: null, ProviderId: mediaItem.canonicalId, Provider: provider, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.tvSeries, ItemId: null, ProviderId: mediaItem.canonicalId, Provider: provider, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                default:
                                    MS.Entertainment.ViewModels.fail("Object type " + mediaItem.mediaType + " is not pinnable");
                                    break
                            }
                            this._listVersion = listVersion;
                            this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post;
                            this._updatePostData(edsMediaItem)
                        }
                    }, {
                        chunkSize: 0, useCache: false, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, getImagePromise: null, createResourceURI: function() {
                                var suffix;
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                var suffix = MS.Entertainment.Data.Query.Shared.PinnedList.defaultSuffix.format(signedInUser.xuid);
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createEDSHeaders: function createEDSHeaders() {
                                return {
                                        Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion, "if-match": this._listVersion
                                    }
                            }, execute: function execute() {
                                if (this.getImagePromise)
                                    return this.getImagePromise().then(function onImageAquired() {
                                            return MS.Entertainment.Data.Query.ESListServiceWrapperQuery.prototype.execute.apply(this, arguments)
                                        }.bind(this), function onImageError() {
                                            return MS.Entertainment.Data.Query.ESListServiceWrapperQuery.prototype.execute.apply(this, arguments)
                                        }.bind(this));
                                else
                                    return MS.Entertainment.Data.Query.ESListServiceWrapperQuery.prototype.execute.apply(this, arguments)
                            }, _updatePostData: function _updatePostData(edsMediaItem) {
                                var data = {Items: [edsMediaItem]};
                                this.postData = {
                                    contentType: "application/json", data: JSON.stringify(data)
                                }
                            }
                    }, {contentType: "application/json"})
            }), PinnedListDelete: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function pinnedListDelete(listIndex, listVersion) {
                        this.base();
                        this._indices = listIndex;
                        this._listVersion = listVersion;
                        this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.deleteRequest
                    }, {
                        chunkSize: 0, useCache: false, _indices: String.empty, _listVersion: 0, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, createResourceURI: function() {
                                var suffix;
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                var suffix = MS.Entertainment.Data.Query.Shared.PinnedList.defaultSuffix.format(signedInUser.xuid);
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createEDSHeaders: function createEDSHeaders() {
                                return {
                                        Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion, "if-match": this._listVersion
                                    }
                            }, createParameters: function createParameters() {
                                return {indexes: this._indices}
                            }
                    })
            })
    })
})()
})();
/* >>>>>>/framework/data/queries/musicqueries.js:2955 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var edsArray = MS.Entertainment.Data.Query.edsArray;
    var edsEndpointType = MS.Entertainment.Data.Query.edsEndpointType;
    var edsIdType = MS.Entertainment.Data.Query.edsIdType;
    var edsMediaGroup = MS.Entertainment.Data.Query.edsMediaGroup;
    var edsMediaType = MS.Entertainment.Data.Query.edsMediaType;
    var edsSortOrder = MS.Entertainment.Data.Query.edsSortOrder;
    var edsString = MS.Entertainment.Data.Query.edsString;
    var edsSearchString = MS.Entertainment.Data.Query.edsSearchString;
    var edsFields = MS.Entertainment.Data.Query.edsFields;
    var edsEditorialId = MS.Entertainment.Data.Factory.Marketplace && MS.Entertainment.Data.Factory.Marketplace.edsEditorialId;
    var SEARCH_CHUNK_SIZE = 20;
    var BROWSE_CHUNK_SIZE = 25;
    var MAX_LIST_DELETE = 100;
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data.Query.Music");
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music", {
        EDSMusicQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.EDSWrapperQuery, null, {createTargetDeviceType: function createTargetDeviceType() {
                        return MS.Entertainment.Utilities.defaultEdsTargetDeviceTypeFromApp
                    }})
        }), EDSMusicFirstPartyQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicQuery, null, {
                        includeContentRestrictionHeader: true, createEDSParameters: function createEDSParameters() {
                                var edsParameters = MS.Entertainment.Data.Query.Music.EDSMusicQuery.prototype.createEDSParameters.call(this);
                                edsParameters = edsParameters || {};
                                edsParameters.firstPartyOnly = true;
                                return edsParameters
                            }
                    })
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music", {requestFields: {
            crossMediaSearch: [edsFields.duration, edsFields.genres, edsFields.hasTrackMediaGuide, edsFields.id, edsFields.images, edsFields.isExplicit, edsFields.label, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.musicAlbumType, edsFields.musicVideoId, edsFields.name, edsFields.parentAlbum, edsFields.primaryArtist, edsFields.providers, edsFields.releaseDate, edsFields.subGenres, edsFields.subTitle, edsFields.trackCount, edsFields.trackNumber, edsFields.zuneId], albumDetails: [edsFields.duration, edsFields.id, edsFields.images, edsFields.isExplicit, edsFields.genres, edsFields.label, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.primaryArtist, edsFields.providers, edsFields.releaseDate, edsFields.reviewSources, edsFields.subGenres, edsFields.subTitle, edsFields.trackCount, edsFields.zuneId], albumReview: [edsFields.id, edsFields.reviewSources, ], albumBrowse: [edsFields.duration, edsFields.id, edsFields.images, edsFields.isExplicit, edsFields.genres, edsFields.label, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.primaryArtist, edsFields.providers, edsFields.releaseDate, edsFields.subTitle, edsFields.subGenres, edsFields.trackCount, edsFields.zuneId], artistsDetails: [edsFields.description, edsFields.genres, edsFields.hasTrackMediaGuide, edsFields.id, edsFields.images, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.relatedMedia, edsFields.sortName, edsFields.subGenres, edsFields.zuneId], artistsSearch: [edsFields.genres, edsFields.hasTrackMediaGuide, edsFields.images, edsFields.id, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.sortName, edsFields.subGenres, edsFields.zuneId], artists: [edsFields.genres, edsFields.hasTrackMediaGuide, edsFields.images, edsFields.id, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.subGenres, edsFields.zuneId], minimalArtists: [edsFields.genres, edsFields.hasTrackMediaGuide, edsFields.id, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.subGenres, edsFields.zuneId], artistBio: [edsFields.description], artistImages: [edsFields.images], related: [edsFields.relatedMedia], songs: [edsFields.duration, edsFields.genres, edsFields.hasTrackMediaGuide, edsFields.images, edsFields.id, edsFields.isExplicit, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.musicVideoId, edsFields.name, edsFields.parentAlbum, edsFields.providers, edsFields.primaryArtist, edsFields.releaseDate, edsFields.subGenres, edsFields.subTitle, edsFields.trackNumber, edsFields.zuneId], songsNoAlbum: [edsFields.duration, edsFields.genres, edsFields.hasTrackMediaGuide, edsFields.images, edsFields.id, edsFields.isExplicit, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.musicVideoId, edsFields.name, edsFields.providers, edsFields.primaryArtist, edsFields.releaseDate, edsFields.subGenres, edsFields.subTitle, edsFields.trackNumber, edsFields.zuneId], musicVideos: [edsFields.duration, edsFields.genres, edsFields.hasTrackMediaGuide, edsFields.images, edsFields.id, edsFields.isExplicit, edsFields.mediaGroup, edsFields.mediaItemType, edsFields.name, edsFields.parentAlbum, edsFields.providers, edsFields.primaryArtist, edsFields.releaseDate, edsFields.subGenres, edsFields.subTitle, edsFields.trackId, edsFields.trackNumber, edsFields.zuneId, edsFields.availabilities, ], subscriptions: [edsFields.availabilities, ]
        }});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data, "Query", {
        searchTracks: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.marketplaceWrapperQuery, null, {
                    search: "", chunkSize: SEARCH_CHUNK_SIZE, createResourceURI: function() {
                            return this.getResourceEndpoint() + "/music/track"
                        }, createParameters: function createParameters() {
                            return {
                                    chunkSize: this.chunkSize, q: this.search
                                }
                        }, pluralizers: [MS.Entertainment.Data.Query.marketplaceWrapperQuery.entriesPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.rightsPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.clientTypesPluralizer], resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.TracksResult
                })
        }), genreTracks: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.marketplaceWrapperQuery, null, {
                        genreId: "", chunkSize: BROWSE_CHUNK_SIZE, createResourceURI: function() {
                                var suffix;
                                if (this.genreId)
                                    suffix = "music/genre/" + this.genreId + "/tracks";
                                else
                                    suffix = "music/track";
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createParameters: function createParameters() {
                                return {chunkSize: this.chunkSize}
                            }, pluralizers: [MS.Entertainment.Data.Query.marketplaceWrapperQuery.entriesPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.rightsPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.clientTypesPluralizer], resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.TracksResult, aggregateChunks: true
                    })
            })
    });
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data, "Query", {searchArtists: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.marketplaceWrapperQuery, null, {
                    search: "", chunkSize: SEARCH_CHUNK_SIZE, createResourceURI: function() {
                            return this.getResourceEndpoint() + "/music/artist"
                        }, createParameters: function createParameters() {
                            return {
                                    chunkSize: this.chunkSize, q: this.search, startIndex: 1, isActionable: true
                                }
                        }, pluralizers: [MS.Entertainment.Data.Query.marketplaceWrapperQuery.entriesPluralizer], resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.ArtistsResult
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data, "Query", {searchAlbums: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.marketplaceWrapperQuery, null, {
                    search: "", chunkSize: SEARCH_CHUNK_SIZE, createResourceURI: function() {
                            return this.getResourceEndpoint() + "/music/album"
                        }, createParameters: function createParameters() {
                            return {
                                    chunkSize: this.chunkSize, q: this.search, startIndex: 1, isActionable: true
                                }
                        }, pluralizers: [MS.Entertainment.Data.Query.marketplaceWrapperQuery.entriesPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.rightsPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.clientTypesPluralizer], resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.AlbumsResult
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data, "Query", {searchPlaylists: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.marketplaceWrapperQuery, null, {
                    search: "", chunkSize: SEARCH_CHUNK_SIZE, createResourceURI: function() {
                            return this.getResourceEndpoint() + "/music/playlist"
                        }, createParameters: function createParameters() {
                            return {
                                    chunkSize: this.chunkSize, q: this.search, startIndex: 1, isActionable: true
                                }
                        }, pluralizers: [MS.Entertainment.Data.Query.marketplaceWrapperQuery.entriesPluralizer], resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.PlaylistsResult
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data, "Query", {searchMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.marketplaceWrapperQuery, null, {
                    search: "", chunkSize: SEARCH_CHUNK_SIZE, createResourceURI: function() {
                            return this.getResourceEndpoint() + "/music/musicvideo"
                        }, createParameters: function createParameters() {
                            return {
                                    chunkSize: this.chunkSize, q: this.search, startIndex: 1, isActionable: true, streamableOnly: true
                                }
                        }, pluralizers: [MS.Entertainment.Data.Query.marketplaceWrapperQuery.entriesPluralizer], resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSMusicVideosResult
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data, "Query", {musicSubGenre: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.marketplaceWrapperQuery, null, {
                    genreId: null, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.SubGenresResult, pluralizers: [MS.Entertainment.Data.Query.marketplaceWrapperQuery.subGenresPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.peerGenresPluralizer], createResourceURI: function() {
                            return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), "music/genre/" + this.genreId)
                        }
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data, "Query", {musicGenres: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.marketplaceWrapperQuery, null, {
                    createResourceURI: function() {
                        return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), "/music/genre")
                    }, pluralizers: [MS.Entertainment.Data.Query.marketplaceWrapperQuery.entriesPluralizer], resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.GenresResult, aggregateChunks: true
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data, "Query", {MusicHubsOverride: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.HubsOverride, null, {
                    appString: "/Override-Music", getSpotlightFeedVersionSubPath: function getSpotlightFeedVersionSubPath() {
                            var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            return configurationManager.service.musicAppSpotlightVersion
                        }
                })
        })});
    WinJS.Namespace.defineWithParent(MS.Entertainment.Data, "Query", {FilterMusicBrowseRestrictedContentWrapperQuery: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentationWrapperQuery", function FilterSpotlightRestrictedContentWrapperQuery(QueryType) {
            MS.Entertainment.Data.AugmentationWrapperQuery.prototype.constructor.call(this, new QueryType)
        }, {
            genreId: {
                set: function setGenreId(value) {
                    this.query.genreId = value
                }, get: function getGenreId() {
                        return this.query.genreId
                    }
            }, subGenreId: {
                    set: function setGenreId(value) {
                        this.query.subGenreId = value
                    }, get: function getGenreId() {
                            return this.query.subGenreId
                        }
                }, chunkSize: {
                    set: function setGenreId(value) {
                        this.query.chunkSize = value
                    }, get: function getGenreId() {
                            return this.query.chunkSize
                        }
                }, resultAugmentation: {
                    set: function setResultAugmentation(value) {
                        this.query.resultAugmentation = value
                    }, get: function getResultAugmentation() {
                            return this.query.resultAugmentation
                        }
                }, target: {
                    set: function setTarget(value) {
                        this.query.target = value
                    }, get: function getResultAugmentation() {
                            return this.query.target
                        }
                }, _notifyProxy: function _notifyProxy(name, value, oldValue){}, execute: function execute(cookie) {
                    if (!this.query)
                        return WinJS.Promise.wrapError(new Error("Invalid state for executing. The query property was not set to a valid value."));
                    if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.contentRestrictionService) || !MS.Entertainment.Utilities.isApp2)
                        return this.query.execute(cookie);
                    return this.query.execute(cookie).then(function filterQueryContent(query) {
                            var contentRestrictionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionService);
                            var items = query.result.itemsArray || [];
                            return contentRestrictionService.filterRestrictedMediaItems(items)
                        }).then(function filteringComplete(filteredArray) {
                            this.query.result.itemsArray = filteredArray;
                            return MS.Entertainment.Data.VirtualList.wrapArray(filteredArray)
                        }.bind(this)).then(function wrappingComplete(filteredResult) {
                            this.query.result.items = filteredResult;
                            return this.query
                        }.bind(this))
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music", {
        BrowseFeaturedAlbums: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.MusicMediaDiscoverySpotlightQuery, null, {
                    genreId: null, aggregateChunks: false, autoEncodeUri: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.MediaDiscoveryAlbumsResult, autoUpdateProperties: {}, createResourceURI: function() {
                            return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), "music/newreleases")
                        }, createParameters: function createParameters() {
                            var parameters = WinJS.Binding.unwrap(this.parameters) || {};
                            if (this.genreId) {
                                var editorialGenreId = MS.Entertainment.Data.Factory.Marketplace.edsEditorialId(this.genreId);
                                parameters.genre = editorialGenreId
                            }
                            return parameters
                        }
                })
        }), BrowseFeaturedMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.MusicMediaDiscoverySpotlightQuery, null, {
                        aggregateChunks: false, autoEncodeUri: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.MediaDiscoveryMusicVideosResult, autoUpdateProperties: {}, getResourceEndpointID: function getResourceEndpointID() {
                                return MS.Entertainment.Endpoint.id.seid_MediaDiscovery
                            }, pluralizers: [MS.Entertainment.Data.Query.marketplaceWrapperQuery.entriesPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.rightsPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.clientTypesPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.editorialItemsPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.featuresPluralizer, MS.Entertainment.Data.Query.marketplaceWrapperQuery.albumsPluralizer, ], createResourceURI: function() {
                                var suffix;
                                suffix = "music/musicvideos";
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }
                    })
            }), BrowseNewMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicQuery, null, {
                        genreId: null, aggregateChunks: true, autoEncodeUri: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSMusicVideosResult, requestFields: MS.Entertainment.Data.Query.Music.requestFields.musicVideos, chunkSize: BROWSE_CHUNK_SIZE, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.browse)
                            }, createParameters: function createParameters() {
                                return {
                                        desiredMediaItemTypes: edsMediaType.musicVideo, orderBy: edsSortOrder.releaseDate, genre: edsString(this.genreId), streamableOnly: true, firstPartyOnly: true
                                    }
                            }
                    })
            }), ArtistDetails: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicQuery, null, {
                        id: null, idType: null, chunked: false, chunkSize: 0, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSArtistDetailResultItem, requestFields: MS.Entertainment.Data.Query.Music.requestFields.artistsDetails, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.details)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id, "The given artist details service id is invalid");
                                return {
                                        ids: this.id, idType: (this.idType !== edsIdType.canonical) ? this.idType : null, mediaGroup: edsMediaGroup.musicArtistType, firstPartyOnly: true
                                    }
                            }
                    })
            }), AlbumDetails: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicFirstPartyQuery, null, {
                        id: null, idType: null, chunked: false, chunkSize: 0, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSAlbumDetailsResultItem, requestFields: MS.Entertainment.Data.Query.Music.requestFields.albumDetails, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.details)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id, "The given album details service id is invalid");
                                return {
                                        ids: this.id, idType: (this.idType !== edsIdType.canonical) ? this.idType : null, mediaGroup: edsMediaGroup.musicType
                                    }
                            }
                    })
            }), AlbumReview: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.AlbumDetails, null, {
                        id: null, idType: null, chunked: false, chunkSize: 0, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSAlbumReviewResultItem, requestFields: MS.Entertainment.Data.Query.Music.requestFields.albumReview, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.details)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id, "The given album details service id is invalid");
                                return {
                                        ids: this.id, idType: (this.idType !== edsIdType.canonical) ? this.idType : null, mediaGroup: edsMediaGroup.musicType
                                    }
                            }
                    })
            }), CloudPlaylist: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return WinJS.Class.derive(MS.Entertainment.Data.EDSWrapperQuery, function PlaylistDetails() {
                        MS.Entertainment.Data.EDSWrapperQuery.prototype.constructor.call(this);
                        this.shouldAuthenticate = false
                    }, {
                        id: null, idType: null, page: 0, useCache: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.CloudPlaylist, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, getResourceEndpointID: function getResourceEndpointID() {
                                return MS.Entertainment.Endpoint.id.seid_CloudCollectionPlaylist
                            }, getAuthenticatedResourceEndpointID: function getAuthenticationResourceEndpointID() {
                                return MS.Entertainment.Endpoint.id.seid_CloudCollectionPlaylist
                            }, createResourceURI: function() {
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), "cloudcollection/playlists/" + this.id + "/version(0)/1/False/-1")
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id, "The given playlist details service id is invalid");
                                return {
                                        page: this.page, lightSchema: true, format: 1
                                    }
                            }, createEDSHeaders: function createEDSHeaders() {
                                return {
                                        "Content-Type": "application/json", Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": "1.0", "xbl-authz-optout-10": true
                                    }
                            }
                    })
            }), SongDetails: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicQuery, null, {
                        id: null, idType: null, chunked: false, chunkSize: 0, inflateParentItems: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSTrackDetailsResultItem, requestFields: MS.Entertainment.Data.Query.Music.requestFields.songs, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.details)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id, "The given song details service id is invalid");
                                return {
                                        ids: this.id, idType: (this.idType !== edsIdType.canonical) ? this.idType : null, inflateParentItems: (this.inflateParentItems) ? true : null, mediaGroup: edsMediaGroup.musicType, firstPartyOnly: true
                                    }
                            }
                    })
            }), Artists: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicFirstPartyQuery, null, {
                        chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSArtistsResult, orderBy: null, genreId: null, subGenreId: null, hasSmartDJ: null, requestFields: MS.Entertainment.Data.Query.Music.requestFields.artists, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.browse)
                            }, createParameters: function createParameters() {
                                return {
                                        desiredMediaItemTypes: edsMediaType.musicArtist, orderBy: this.orderBy, genre: edsString(this.genreId), subgenre: edsString(this.subGenreId), hasTrackMediaGuide: this.hasSmartDJ
                                    }
                            }
                    })
            }), RelatedArtists: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicFirstPartyQuery, null, {
                        id: null, chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSArtistsResult, orderBy: null, requestFields: MS.Entertainment.Data.Query.Music.requestFields.artists, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.related)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id, "The given related artist service id is invalid");
                                return {
                                        id: this.id, desiredMediaItemTypes: edsMediaType.musicArtist, mediaItemType: edsMediaType.musicArtist, orderBy: this.orderBy
                                    }
                            }
                    })
            }), InfluenceArtists: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicFirstPartyQuery, null, {
                        id: null, chunkSize: 0, aggregateChunks: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSRelatedResult, orderBy: null, requestFields: MS.Entertainment.Data.Query.Music.requestFields.related, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.details)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id, "The given influence artist service id is invalid");
                                return {
                                        ids: this.id, mediaGroup: edsMediaGroup.musicArtistType, orderBy: this.orderBy
                                    }
                            }
                    })
            }), Albums: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicFirstPartyQuery, null, {
                        chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSAlbumsResult, orderBy: null, genreId: null, subGenreId: null, requestFields: MS.Entertainment.Data.Query.Music.requestFields.albumBrowse, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.browse)
                            }, createParameters: function createParameters() {
                                return {
                                        desiredMediaItemTypes: edsMediaType.album, orderBy: this.orderBy, genre: edsString(this.genreId), subgenre: edsString(this.subGenreId)
                                    }
                            }
                    })
            }), Songs: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicFirstPartyQuery, null, {
                        chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, inflateParentItems: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSTracksResult, orderBy: null, genreId: null, subGenreId: null, requestFields: MS.Entertainment.Data.Query.Music.requestFields.songs, includeContentRestrictionHeader: false, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.browse)
                            }, createParameters: function createParameters() {
                                return {
                                        desiredMediaItemTypes: edsMediaType.track, orderBy: this.orderBy, genre: edsString(this.genreId), subgenre: edsString(this.subGenreId), inflateParentItems: (this.inflateParentItems) ? true : null
                                    }
                            }
                    })
            }), MusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicFirstPartyQuery, null, {
                        chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, inflateParentItems: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSMusicVideosResult, orderBy: null, genreId: null, subGenreId: null, requestFields: MS.Entertainment.Data.Query.Music.requestFields.musicVideos, includeContentRestrictionHeader: false, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.browse)
                            }, createParameters: function createParameters() {
                                return {
                                        desiredMediaItemTypes: edsMediaType.musicVideo, orderBy: this.orderBy, genre: edsString(this.genreId), subgenre: edsString(this.subGenreId), inflateParentItems: (this.inflateParentItems) ? true : null, streamableOnly: true, firstPartyOnly: true
                                    }
                            }
                    })
            }), Genres: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.EDSWrapperQuery, null, {
                        chunkSize: 0, genreId: null, id: null, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSGenresResult, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, createResourceURI: function() {
                                var endpointType;
                                if (this.genreId || this.id)
                                    endpointType = edsEndpointType.metadataMusicSubGenres;
                                else
                                    endpointType = edsEndpointType.metadataMusicGenres;
                                return this.getResourceEndpoint(endpointType)
                            }, createParameters: function createParameters() {
                                return {queryRefinerValue: this.genreId || this.id}
                            }
                    })
            }), CrossMusicSearch: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.CrossMediaSearch, null, {
                        requestFields: MS.Entertainment.Data.Query.Music.requestFields.crossMediaSearch, groupTypes: [edsMediaType.track, edsMediaType.album, edsMediaType.musicArtist], resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSMusicSearchResult
                    })
            }), AutoSuggest: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.AutoSuggest, null, {mediaType: MS.Entertainment.Data.Query.bbxMediaType.music})
            }), IntroPanel: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.ServiceWrapperQuery, null, {
                        chunked: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.IntroPanelResult, createResourceURI: function() {
                                return MS.Entertainment.Utilities.UriFactory.create(MS.Entertainment.Endpoint.id.seid_WinPhoneXboxDotCom, "x8/feeds/1.1/Intro-Music")
                            }, pluralizers: ["BodyText/p"]
                    })
            }), Subscriptions: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.EDSMusicQuery, null, {
                        chunked: false, chunkSize: 0, useCache: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSSubscriptionDetailResultItem, requestFields: MS.Entertainment.Data.Query.Music.requestFields.subscriptions, forceSecureEndpoint: true, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.details)
                            }, createParameters: function createParameters() {
                                var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                return {
                                        ids: config.service.subscriptionProductId, desiredMediaItemTypes: edsMediaType.subscription
                                    }
                            }
                    })
            }), FreeAlbums: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.spotlightContentQuery, null, {
                        serviceType: MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.MediaDiscoveryAlbumsResult, getResourceEndpointID: function getResourceEndpointID() {
                                return MS.Entertainment.Endpoint.id.seid_MediaDiscovery
                            }, getSpotlightFeedVersionSubPath: function getSpotlightFeedVersionSubPath() {
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                return configurationManager.service.musicAppSpotlightVersion
                            }, createResourceURI: function createResourceURI() {
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpointID(), this.getSpotlightFeedVersionSubPath() + "fl_music_row2")
                            }
                    })
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music", {
        MusicVideoDetails: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.SongDetails, null, {
                    id: null, idType: null, chunked: false, chunkSize: 0, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSMusicVideoDetailsResultItem, requestFields: MS.Entertainment.Data.Query.Music.requestFields.musicVideos, createResourceURI: function() {
                            return this.getResourceEndpoint(edsEndpointType.details)
                        }, createParameters: function createParameters() {
                            MS.Entertainment.Data.Query.Music.assert(!!this.id, "The given music video service id is invalid");
                            return {
                                    ids: this.id, idType: (this.idType !== edsIdType.canonical) ? this.idType : null, mediaGroup: edsMediaGroup.musicType, inflateParentItems: (this.inflateParentItems) ? true : null, firstPartyOnly: true
                                }
                        }
                })
        }), SmartDJInnerQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Songs, null, {
                        id: null, chunkSize: -1, useCache: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSSmartDJTracksResult, forceSecureEndpoint: true, includeContentRestrictionHeader: true, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.mediaGuide)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id, "The given smart dj service id is invalid");
                                return {
                                        id: this.id, mediaItemType: edsMediaType.musicArtist, desiredMediaItemTypes: edsMediaType.track, inflateParentItems: (this.inflateParentItems) ? true : null, firstPartyOnly: true
                                    }
                            }
                    })
            }), ArtistSearch: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Artists, null, {
                        chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSArtistsResult, requestFields: MS.Entertainment.Data.Query.Music.requestFields.artistsSearch, search: null, autoSuggestSeed: false, enabledImpressionGuid: true, forceSecureEndpoint: true, hasSmartDJ: null, hasTotalCount: true, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.singleMediaGroupSearch)
                            }, createParameters: function createParameters() {
                                return {
                                        q: edsSearchString(this.search), desiredMediaItemTypes: edsMediaType.musicArtist, hasTrackMediaGuide: this.hasSmartDJ
                                    }
                            }, createHeaders: function createHeaders() {
                                return {"x-xbl-autoSuggest-seed-text": this.autoSuggestSeed && this.search ? window.encodeURIComponent(this.search) : null}
                            }
                    })
            }), AlbumSearch: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Albums, null, {
                        chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSAlbumsResult, search: null, autoSuggestSeed: false, enabledImpressionGuid: true, forceSecureEndpoint: true, hasTotalCount: true, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.singleMediaGroupSearch)
                            }, createParameters: function createParameters() {
                                return {
                                        q: edsSearchString(this.search), desiredMediaItemTypes: edsMediaType.album
                                    }
                            }, createHeaders: function createHeaders() {
                                return {"x-xbl-autoSuggest-seed-text": this.autoSuggestSeed && this.search ? window.encodeURIComponent(this.search) : null}
                            }
                    })
            }), MusicVideoSearch: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.MusicVideos, null, {
                        chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSMusicVideosResult, search: null, autoSuggestSeed: false, enabledImpressionGuid: true, forceSecureEndpoint: true, hasSmartDJ: null, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.singleMediaGroupSearch)
                            }, createParameters: function createParameters() {
                                return {
                                        q: edsSearchString(this.search), desiredMediaItemTypes: edsMediaType.musicVideo, streamableOnly: true, firstPartyOnly: true
                                    }
                            }, createHeaders: function createHeaders() {
                                return {"x-xbl-autoSuggest-seed-text": this.autoSuggestSeed && this.search ? window.encodeURIComponent(this.search) : null}
                            }
                    })
            }), ArtistAlbums: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Albums, null, {
                        id: null, artistId: null, aggregateChunks: true, chunkSize: BROWSE_CHUNK_SIZE, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSAlbumsResult, orderBy: edsSortOrder.releaseDate, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.browse)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id || !!this.artistId, "The given artist album service id is invalid");
                                return {
                                        id: this.id || this.artistId, mediaItemType: edsMediaType.musicArtist, desiredMediaItemTypes: edsMediaType.album, orderBy: this.orderBy
                                    }
                            }
                    })
            }), ArtistSongs: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Songs, null, {
                        id: null, artistId: null, aggregateChunks: true, chunkSize: BROWSE_CHUNK_SIZE, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSArtistTracksResult, orderBy: edsSortOrder.releaseDate, includeContentRestrictionHeader: true, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.browse)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id || !!this.artistId, "The given artist songs service id is invalid");
                                return {
                                        id: this.id || this.artistId, mediaItemType: edsMediaType.musicArtist, desiredMediaItemTypes: edsMediaType.track, orderBy: this.orderBy, inflateParentItems: (this.inflateParentItems) ? true : null
                                    }
                            }
                    })
            }), ArtistMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.MusicVideos, null, {
                        id: null, artistId: null, aggregateChunks: true, chunkSize: BROWSE_CHUNK_SIZE, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSArtistMusicVideosResult, requestFields: MS.Entertainment.Data.Query.Music.requestFields.musicVideos, orderBy: edsSortOrder.releaseDate, includeContentRestrictionHeader: true, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.browse)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id || !!this.artistId, "The given artist songs service id is invalid");
                                return {
                                        id: this.id || this.artistId, mediaItemType: edsMediaType.musicArtist, desiredMediaItemTypes: edsMediaType.musicVideo, orderBy: this.orderBy, inflateParentItems: (this.inflateParentItems) ? true : null, streamableOnly: true, firstPartyOnly: true
                                    }
                            }
                    })
            }), AlbumSongs: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Songs, null, {
                        id: null, albumId: null, aggregateChunks: true, chunkSize: BROWSE_CHUNK_SIZE, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSAlbumTracksResult, orderBy: null, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.browse)
                            }, createParameters: function createParameters() {
                                MS.Entertainment.Data.Query.Music.assert(!!this.id || !!this.albumId, "The given album songs service id is invalid");
                                return {
                                        id: this.id || this.albumId, mediaItemType: edsMediaType.album, desiredMediaItemTypes: edsMediaType.track, orderBy: this.orderBy, inflateParentItems: (this.inflateParentItems) ? true : null
                                    }
                            }
                    })
            }), AlbumMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.AlbumSongs, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSAlbumMusicVideosResult})
            }), LibraryAlbumMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.libraryTracks, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Library.TrackMusicVideoResult})
            }), LibraryPlaylistMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.libraryVideoMusic, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Library.MusicVideosResult})
            }), SongSearch: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Songs, null, {
                        chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: false, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSTracksResult, search: null, autoSuggestSeed: false, enabledImpressionGuid: true, forceSecureEndpoint: true, includeContentRestrictionHeader: true, hasTotalCount: true, createResourceURI: function() {
                                return this.getResourceEndpoint(edsEndpointType.singleMediaGroupSearch)
                            }, createParameters: function createParameters() {
                                return {
                                        q: edsSearchString(this.search), desiredMediaItemTypes: edsMediaType.track, inflateParentItems: (this.inflateParentItems) ? true : null
                                    }
                            }, createHeaders: function createHeaders() {
                                return {"x-xbl-autoSuggest-seed-text": this.autoSuggestSeed && this.search ? window.encodeURIComponent(this.search) : null}
                            }
                    })
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music", {
        SmartDJ: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return WinJS.Class.derive(MS.Entertainment.Data.PlaybackQuery, function SmartDJ() {
                    MS.Entertainment.Data.PlaybackQuery.prototype.constructor.call(this, new MS.Entertainment.Data.Query.Music.SmartDJInnerQuery)
                }, {
                    id: {
                        get: function() {
                            return this.query ? this.query.id : null
                        }, set: function(value) {
                                if (this.query)
                                    this.query.id = value
                            }
                    }, impressionGuid: {
                            get: function() {
                                return this.query ? this.query.impressionGuid : null
                            }, set: function(value) {
                                    if (this.query && "impressionGuid" in this.query)
                                        this.query.impressionGuid = value
                                }
                        }
                })
        }), ArtistBio: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.ArtistDetails, null, {requestFields: MS.Entertainment.Data.Query.Music.requestFields.artistBio})
            }), LibraryAlbum: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.libraryAlbums, function LibraryAlbum() {
                        MS.Entertainment.Data.Query.libraryAlbums.prototype.constructor.call(this)
                    }, {
                        resultAugmentation: MS.Entertainment.Data.Augmenter.Library.AlbumResult, groupsAugmentation: null, chunkSize: 1, chunked: false
                    })
            }), LibraryTrack: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.libraryTracks, function LibraryTrack() {
                        MS.Entertainment.Data.Query.libraryTracks.prototype.constructor.call(this)
                    }, {
                        resultAugmentation: MS.Entertainment.Data.Augmenter.Library.TrackResult, groupsAugmentation: null, chunkSize: 1, chunked: false
                    })
            }), LibraryAlbumWithTracks: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return WinJS.Class.derive(MS.Entertainment.Data.BrowseDetailQuery, function AlbumWithTracks() {
                        MS.Entertainment.Data.BrowseDetailQuery.prototype.constructor.call(this)
                    }, {
                        _resultAlbum: null, browseConstructor: MS.Entertainment.Data.Query.libraryTracks, detailConstructor: MS.Entertainment.Data.Query.Music.LibraryAlbum, resultAugmentation: MS.Entertainment.Data.Augmenter.Library.AlbumWithTracksResult, id: {
                                get: function() {
                                    if (this.detail)
                                        return this.detail.albumId;
                                    else
                                        return null
                                }, set: function(value) {
                                        if (this.browse) {
                                            this.browse.albumId = value;
                                            this.browse.sort = Microsoft.Entertainment.Queries.TracksSortBy.numberAscending
                                        }
                                        if (this.detail)
                                            this.detail.albumId = value
                                    }
                            }
                    })
            }), AlbumWithTracks: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return WinJS.Class.derive(MS.Entertainment.Data.BrowseDetailQuery, function AlbumWithTracks() {
                        MS.Entertainment.Data.BrowseDetailQuery.prototype.constructor.call(this);
                        this._resultAlbum = {
                            data: null, overrideData: null
                        }
                    }, {
                        _resultAlbum: null, browseConstructor: MS.Entertainment.Data.Query.Music.AlbumSongs, detailConstructor: MS.Entertainment.Data.Query.Music.AlbumDetails, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSAlbumWithTracksResult, dispose: function dispose() {
                                MS.Entertainment.Data.BrowseDetailQuery.prototype.dispose.call(this);
                                this._resultAlbum = null
                            }, idType: {
                                get: function() {
                                    if (this.detail)
                                        return this.detail.idType;
                                    else
                                        return null
                                }, set: function(value) {
                                        if (this.detail)
                                            this.detail.idType = value
                                    }
                            }, id: {
                                get: function() {
                                    if (this.browse)
                                        return this.browse.id;
                                    else
                                        return null
                                }, set: function(value) {
                                        if (this.browse)
                                            this.browse.id = value;
                                        if (this.detail)
                                            this.detail.id = value
                                    }
                            }, setTrackAlbum: function setTrackAlbum(album) {
                                if (this._resultAlbum)
                                    this._resultAlbum.overrideData = album
                            }, _preInnerExecute: function _preInnerExecute() {
                                var promise = MS.Entertainment.Data.BrowseDetailQuery.prototype._preInnerExecute.call(this);
                                this.browse.inflateParentItems = false;
                                this.browse.requestFields = MS.Entertainment.Data.Query.Music.requestFields.songsNoAlbum;
                                if (MS.Entertainment.Utilities.AcquisitionData)
                                    this.browse.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.album);
                                this.browse.resultAugmentation = this._createTrackResultAugmentation(this.browse.resultAugmentation, this._resultAlbum);
                                return promise
                            }, _createTrackResultAugmentation: function _createTrackResultAugmentation(baseAugmentation, resultAlbum) {
                                return MS.Entertainment.Data.AugmentQuery.modifyListResultAugmentation(baseAugmentation, {
                                        album: MS.Entertainment.Data.Property.convert(String.empty, function() {
                                            return resultAlbum && (resultAlbum.overrideData || resultAlbum.data)
                                        }), albumServiceId: MS.Entertainment.Data.Property.convertNoDeflate("album.canonicalId", MS.Entertainment.Data.Factory.self), albumName: MS.Entertainment.Data.Property.convertNoDeflate("album.name", MS.Entertainment.Data.Factory.self)
                                    })
                            }, _endInnerExecute: function _endInnerExecute() {
                                MS.Entertainment.Data.BrowseDetailQuery.prototype._endInnerExecute.call(this);
                                if (this.result && this.result.item) {
                                    if (this._resultAlbum)
                                        this._resultAlbum.data = this.result.item;
                                    if (this.browse && this.browse.acquisitionData)
                                        this.browse.acquisitionData.acquisitionContextID = MS.Entertainment.Utilities.isValidServiceId(this.result.item.canonicalId) ? this.result.item.canonicalId : String.empty
                                }
                            }
                    })
            }), ArtistTopSongs: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.ArtistSongs, null, {orderBy: edsSortOrder.allTimePlayCount})
            }), ArtistNewSongs: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.ArtistSongs, null, {orderBy: edsSortOrder.releaseDate})
            }), ArtistTopMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.ArtistMusicVideos, null, {orderBy: edsSortOrder.allTimePlayCount})
            }), ArtistNewMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.ArtistMusicVideos, null, {orderBy: edsSortOrder.releaseDate})
            }), ArtistTopAlbums: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.ArtistAlbums, null, {orderBy: edsSortOrder.mostPopular})
            }), ArtistNewAlbums: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.ArtistAlbums, null, {orderBy: edsSortOrder.releaseDate})
            }), TopArtists: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Artists, null, {orderBy: edsSortOrder.mostPopular})
            }), TopAlbums: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Albums, null, {orderBy: edsSortOrder.mostPopular})
            }), TopSongs: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Songs, null, {
                        includeContentRestrictionHeader: true, orderBy: edsSortOrder.mostPopular
                    })
            }), LimitedTopSongs: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.TopSongs, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.LimitedEDSTracksResult})
            }), TopMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.MusicVideos, null, {
                        includeContentRestrictionHeader: true, orderBy: edsSortOrder.mostPopular
                    })
            }), LimitedTopMusicVideos: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.TopMusicVideos, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.LimitedEDSMusicVideosResult})
            }), NewAlbums: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Albums, null, {orderBy: edsSortOrder.releaseDate})
            }), SubGenres: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.Genres, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSSubGenresResult})
            }), ArtistImages: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.ArtistDetails, null, {
                        requestFields: MS.Entertainment.Data.Query.Music.requestFields.artistImages, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSArtistImagesResult
                    })
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music", {
        TopSongsAlbumWithTracks: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.ArtistTopSongs, null, {resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSTopSongsAlbumDetailsResultItem})
        }), SmartDJList: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function SmartDJList() {
                        this.base()
                    }, {
                        clearResultOnFailure: true, useCache: true, useIfMatchCache: true, chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSSmartDJResults, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, forceSecureEndpoint: true, hasTotalCount: true, useApp2UserIfAvailable: true, xuid: String.empty, includeContentRestrictionHeader: true, createResourceURI: function() {
                                var suffix = "users/xuid(" + this.xuid + ")/lists/recn/xblsmartdj";
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createEDSHeaders: function createEDSHeaders() {
                                return {
                                        "Content-Type": "application/json", Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": "1.0"
                                    }
                            }, getResponseVersion: function getResponseVersion(result) {
                                return result.listVersion
                            }
                    })
            }), SmartDJAdd: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function smartDJAdd(artist, featuredArtistsNames) {
                        this.base();
                        if (artist) {
                            var data = {Items: [MS.Entertainment.Data.Query.Music.SmartDJAdd.convertArtistToSmartDJ(artist, featuredArtistsNames)]};
                            this.postData = {
                                contentType: MS.Entertainment.Data.Query.Music.SmartDJAdd.contentType, data: JSON.stringify(data)
                            };
                            this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post
                        }
                    }, {
                        chunkSize: 0, useCache: false, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, createResourceURI: function() {
                                var suffix;
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                suffix = "users/xuid(" + signedInUser.xuid + ")/lists/recn/xblsmartdj";
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createEDSHeaders: function createEDSHeaders() {
                                return {
                                        Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion, "If-Match": 0
                                    }
                            }
                    }, {
                        contentType: "application/json", convertArtistToSmartDJ: function convertArtistToSmartDJ(artist, featuredArtistsNames) {
                                var smartDJ;
                                if (artist) {
                                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                    var locale = signedInUser.locale;
                                    var subtitle = String.empty;
                                    if (featuredArtistsNames)
                                        if (featuredArtistsNames.length >= 2)
                                            subtitle = String.load(String.id.IDS_SMARTDJ_2_FEATURED_ARTISTS).format(featuredArtistsNames[0], featuredArtistsNames[1]);
                                        else if (featuredArtistsNames.length === 1)
                                            subtitle = String.load(String.id.IDS_SMARTDJ_1_FEATURED_ARTIST).format(featuredArtistsNames[0]);
                                    smartDJ = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.musicArtist, ItemId: artist.canonicalId, ImageUrl: artist.imageResizeUri || artist.imageUri || String.empty, Title: artist.name, SubTitle: subtitle, Locale: locale
                                    }
                                }
                                return smartDJ || {}
                            }
                    })
            }), SmartDJDelete: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function smartDJDelete(listIndices, listVersion) {
                        this.base();
                        if (listIndices && listIndices.length > 0) {
                            var length = Math.min(listIndices.length, MAX_LIST_DELETE);
                            this._indices = [];
                            for (var i = 0; i < length; i++)
                                if (typeof listIndices[i] === "number" && listIndices[i] >= 0)
                                    this._indices.push(listIndices[i]);
                                else
                                    MS.Entertainment.Data.Query.Music.fail("Invalid index passed to SmartDJDelete. index: " + listIndices[i]);
                            this._indices = this._indices.join()
                        }
                        this._listVersion = listVersion;
                        this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.deleteRequest
                    }, {
                        chunkSize: 0, useCache: false, _indices: String.empty, _listVersion: 0, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, createResourceURI: function() {
                                var suffix;
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                suffix = "users/xuid(" + signedInUser.xuid + ")/lists/recn/xblsmartdj";
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createEDSHeaders: function createEDSHeaders() {
                                return {
                                        Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion, "if-match": this._listVersion
                                    }
                            }, createParameters: function createParameters() {
                                return {indexes: this._indices}
                            }
                    })
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music", {
        RecentList: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function RecentList() {
                    this.base();
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    this.xuid = configurationManager.service.lastSignedInUserXuid
                }, {
                    clearResultOnFailure: true, useCache: true, chunkSize: BROWSE_CHUNK_SIZE, aggregateChunks: true, resultAugmentation: MS.Entertainment.Data.Augmenter.Marketplace.EDSRecentListResults, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, forceSecureEndpoint: true, useApp2UserIfAvailable: true, hasTotalCount: true, xuid: String.empty, includeContentRestrictionHeader: true, createResourceURI: function() {
                            var suffix = MS.Entertainment.Data.Query.Music.RecentList.defaultSuffix.format(this.xuid);
                            return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                        }, createEDSHeaders: function createEDSHeaders() {
                            return {
                                    "Content-Type": "application/json", Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion
                                }
                        }, getResponseVersion: function getResponseVersion(result) {
                            return result.listVersion
                        }
                }, {defaultSuffix: "users/xuid({0})/lists/RECN/MusicRecents"})
        }), RecentListAdd: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function recentListAdd(mediaItem, listVersion) {
                        this.base();
                        if (mediaItem) {
                            var edsMediaItem;
                            var cloudProviderId = "X13Music";
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            var locale = signedInUser.locale;
                            switch (mediaItem.mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.musicPlaylist, ItemId: null, ProviderId: mediaItem.cloudSyncItemId, Provider: cloudProviderId, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.album, ItemId: mediaItem.canonicalId, ProviderId: null, Provider: null, ImageUrl: mediaItem.imageResizeUri, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                                    edsMediaItem = {
                                        ContentType: MS.Entertainment.Data.Query.edsMediaType.musicArtist, ItemId: mediaItem.canonicalId, ProviderId: null, Provider: null, ImageUrl: mediaItem.imageResizeUri || mediaItem.ImageUrl, Title: mediaItem.name, Locale: locale
                                    };
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    var trackImage = mediaItem.imageResizeUri;
                                    mediaItem = mediaItem.album;
                                    if (mediaItem)
                                        edsMediaItem = {
                                            ContentType: MS.Entertainment.Data.Query.edsMediaType.album, ItemId: mediaItem.canonicalId, ProviderId: null, Provider: null, AltImageUrl: mediaItem.imageResizeUri || trackImage, Title: mediaItem.name, Locale: locale
                                        };
                                    break;
                                default:
                                    MS.Entertainment.ViewModels.fail("Object type " + mediaItem.mediaType + " is unable to push to the recent service");
                                    break
                            }
                            if (edsMediaItem) {
                                var data = {Items: [edsMediaItem]};
                                this.postData = {
                                    contentType: MS.Entertainment.Data.Query.Music.SmartDJAdd.contentType, data: JSON.stringify(data)
                                }
                            }
                            this._listVersion = listVersion;
                            this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post
                        }
                    }, {
                        chunkSize: 0, useCache: false, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, getImagePromise: null, createResourceURI: function() {
                                var suffix;
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                var suffix = MS.Entertainment.Data.Query.Music.RecentList.defaultSuffix.format(signedInUser.xuid);
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createEDSHeaders: function createEDSHeaders() {
                                return {
                                        Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion, "if-match": this._listVersion
                                    }
                            }, execute: function execute() {
                                if (this.postData)
                                    return MS.Entertainment.Data.Query.ESListServiceWrapperQuery.prototype.execute.apply(this, arguments);
                                else
                                    return WinJS.Promise.as()
                            }
                    }, {contentType: "application/json"})
            }), RecentListDelete: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.ESListServiceWrapperQuery, function RecentListDelete(listIndices, listVersion) {
                        this.base();
                        if (listIndices && listIndices.length > 0) {
                            var length = Math.min(listIndices.length, MAX_LIST_DELETE);
                            this._indices = [];
                            for (var i = 0; i < length; i++)
                                if (typeof listIndices[i] === "number" && listIndices[i] >= 0)
                                    this._indices.push(listIndices[i]);
                                else
                                    MS.Entertainment.Data.Query.Music.fail("Invalid index passed to RecentListDelete. index: " + listIndices[i]);
                            this._indices = this._indices.join()
                        }
                        this._listVersion = listVersion;
                        this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.deleteRequest
                    }, {
                        chunkSize: 0, useCache: false, _indices: String.empty, _listVersion: 0, forceSecureEndpoint: true, requestFields: MS.Entertainment.Data.EDSWrapperQuery.requestFieldsNotNeeded, createResourceURI: function() {
                                var suffix;
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                suffix = MS.Entertainment.Data.Query.Music.RecentList.defaultSuffix.format(signedInUser.xuid);
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createEDSHeaders: function createEDSHeaders() {
                                return {
                                        Accept: "application/json", "x-xbl-contract-version": "2", "x-xbl-client-type": MS.Entertainment.Data.EDSWrapperQuery.clientType, "x-xbl-device-type": this.getHeaderDeviceType(), "x-xbl-client-version": MS.Entertainment.Data.EDSWrapperQuery.currentVersion, "if-match": this._listVersion
                                    }
                            }, createParameters: function createParameters() {
                                return {indexes: this._indices}
                            }
                    })
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music.WebPlaylist", {
        ConfigurationOperation: {
            defaultSites: "webPlaylist", filters: "webPlaylistFilters"
        }, ConfigurationQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return WinJS.Class.derive(MS.Entertainment.Data.ServiceWrapperQuery, function ConfigurationQuery() {
                        MS.Entertainment.Data.ServiceWrapperQuery.prototype.constructor.apply(this, arguments)
                    }, {
                        operation: null, chunked: false, serviceType: MS.Entertainment.UI.Framework.lazyDefine(function() {
                                return MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json
                            }), getResourceEndpointID: function getResourceEndpointID() {
                                return MS.Entertainment.Endpoint.id.seid_WinPhoneXboxDotCom
                            }, createResourceURI: function createResourceURI() {
                                var suffix = "music/config/x13/" + this.createOperation();
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createOperation: function createOperation() {
                                return WinJS.Binding.unwrap(this.operation)
                            }
                    })
            }), DefaultSites: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return WinJS.Class.derive(MS.Entertainment.Data.Query.Music.WebPlaylist.ConfigurationQuery, function ConfigurationQuery() {
                        MS.Entertainment.Data.Query.Music.WebPlaylist.ConfigurationQuery.prototype.constructor.apply(this, arguments)
                    }, {
                        operation: MS.Entertainment.Data.Query.Music.WebPlaylist.ConfigurationOperation.defaultSites, resultAugmentation: MS.Entertainment.Data.Augmenter.WebPlaylist.WebSitesResult
                    })
            }), Filters: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return WinJS.Class.derive(MS.Entertainment.Data.Query.Music.WebPlaylist.ConfigurationQuery, function ConfigurationQuery() {
                        MS.Entertainment.Data.Query.Music.WebPlaylist.ConfigurationQuery.prototype.constructor.apply(this, arguments)
                    }, {operation: MS.Entertainment.Data.Query.Music.WebPlaylist.ConfigurationOperation.filters})
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music.EchoNest", {
        EchoNestOperation: {artistExtract: "artist/extract"}, EchoNestBucket: {familiarity: "familiarity"}, echonestApiKey: MS.Entertainment.UI.Framework.lazyDefine(function() {
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                return configurationManager.service.echoNestApiKey
            }), EchoNestQuery: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return WinJS.Class.derive(MS.Entertainment.Data.ServiceWrapperQuery, function echoNestQuery() {
                        MS.Entertainment.Data.ServiceWrapperQuery.prototype.constructor.apply(this, arguments)
                    }, {
                        _innerQueryChunked: false, apiKey: null, operation: null, serviceType: MS.Entertainment.UI.Framework.lazyDefine(function() {
                                return MS.Entertainment.Data.ServiceWrapperQuery.ServiceTypes.json
                            }), getResourceEndpointID: function getResourceEndpointID() {
                                return MS.Entertainment.Endpoint.id.seid_EchoNestDeveloperApi
                            }, createResourceURI: function createResourceURI() {
                                var suffix = this.createOperation();
                                return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                            }, createParameters: function createParameters() {
                                var parameters = WinJS.Binding.unwrap(this.parameters) || {};
                                parameters.api_key = this.apiKey || MS.Entertainment.Data.Query.Music.EchoNest.echonestApiKey;
                                parameters.format = "json";
                                return parameters
                            }, createOperation: function createOperation() {
                                return WinJS.Binding.unwrap(this.operation)
                            }
                    })
            }), ExtractArtists: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return WinJS.Class.derive(MS.Entertainment.Data.Query.Music.EchoNest.EchoNestQuery, function echoNestQuery() {
                        MS.Entertainment.Data.Query.Music.EchoNest.EchoNestQuery.prototype.constructor.apply(this, arguments);
                        this.minPopularity = MS.Entertainment.Data.Query.Music.EchoNest.ExtractArtists.s_defaultMinPopularity;
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        this._maxTextChunkSize = configurationManager.service.echoNestTextExtractMaxSize;
                        this._maxTextSize = this._maxTextChunkSize * configurationManager.service.echoNestTextExtractMaxChunks
                    }, {
                        resultAugmentation: MS.Entertainment.Data.Augmenter.EchoNest.ArtistsResult, aggregateChunks: true, chunkSize: -1, operation: MS.Entertainment.Data.Query.Music.EchoNest.EchoNestOperation.artistExtract, text: null, minPopularity: -1, _maxTextChunkSize: -1, _maxTextSize: -1, _vistedText: 0, visitedText: {get: function get_visitedText() {
                                    return this._vistedText
                                }}, maxTextChunkSize: {get: function get_maxTextChunkSize() {
                                    return this._maxTextChunkSize
                                }}, nextTextChunk: {get: function get_nextTextChunk() {
                                    var textOffset = 0;
                                    if (this.currentChunk)
                                        textOffset = this.currentChunk.textOffset;
                                    return this.text && this.text.substring(textOffset, textOffset + this._maxTextChunkSize)
                                }}, createParameters: function createParameters() {
                                var parameters = MS.Entertainment.Data.Query.Music.EchoNest.EchoNestQuery.prototype.createParameters.apply(this, arguments);
                                parameters = parameters || {};
                                parameters.results = 100;
                                parameters.bucket = MS.Entertainment.Data.Query.Music.EchoNest.EchoNestBucket.familiarity;
                                parameters.min_familiarity = this.minPopularity >= 0 ? this.minPopularity : MS.Entertainment.Data.Query.Music.EchoNest.ExtractArtists.s_defaultMinPopularity;
                                parameters.text = this.nextTextChunk;
                                this._vistedText += parameters.text.length;
                                return parameters
                            }, _createChunkInformation: function _createChunkInformation() {
                                var index = this.currentChunk ? this.currentChunk.textOffset : 0;
                                var length = this._vistedText - index;
                                return {
                                        firstIndex: index, lastIndex: (index + length) - 1, length: length
                                    }
                            }, _preInnerExecute: function _preInnerExecute() {
                                var returnResult = MS.Entertainment.Data.Query.Music.EchoNest.EchoNestQuery.prototype._preInnerExecute.apply(this, arguments);
                                if (!this.currentChunk)
                                    this._vistedText = 0;
                                return returnResult
                            }, _calculateNextChunkKey: function _calculateNextChunkKey(result) {
                                var newTextOffset = 0;
                                var nextChunk = null;
                                var maxTextSize = 0;
                                if (this.text)
                                    maxTextSize = this.text.length;
                                if (this._maxTextSize >= 0)
                                    maxTextSize = Math.min(maxTextSize, this._maxTextSize);
                                newTextOffset = this._vistedText;
                                if (this.text && newTextOffset > 0 && newTextOffset < maxTextSize)
                                    nextChunk = {textOffset: newTextOffset};
                                return nextChunk
                            }
                    }, {s_defaultMinPopularity: 0.50})
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music.WMIS", {
        queryEndpoint: null, getAlbumDetailsEndpoint: null, WMISQueryWrapper: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.ServiceWrapperQuery, null, {_preInnerExecute: function _preInnerExecute() {
                            var basePromise = MS.Entertainment.Data.ServiceWrapperQuery.prototype._preInnerExecute.apply(this, arguments);
                            var returnPromise = basePromise;
                            if (!MS.Entertainment.Data.Query.Music.WMIS.queryEndpoint || !MS.Entertainment.Data.Query.Music.WMIS.getAlbumDetailsEndpoint)
                                returnPromise = basePromise.then(function executeFieldsQuery() {
                                    var query = new MS.Entertainment.Data.Query.Music.WMIS.Endpoints;
                                    return query.execute()
                                }.bind(this)).then(function queryComplete(q) {
                                    MS.Entertainment.Data.Query.Music.WMIS.queryEndpoint = q.result.queryEndpoint;
                                    MS.Entertainment.Data.Query.Music.WMIS.getAlbumDetailsEndpoint = q.result.getAlbumDetailsEndpoint
                                }.bind(this));
                            return returnPromise
                        }})
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music.WMIS", {
        AlbumSearch: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.WMIS.WMISQueryWrapper, null, {
                    search: null, resultAugmentation: MS.Entertainment.Data.Augmenter.WMIS.AlbumsResult, createResourceURI: function() {
                            return MS.Entertainment.Data.Query.Music.WMIS.queryEndpoint
                        }, createParameters: function createParameters() {
                            return {
                                    SearchString: this.search, maxNumberOfResults: 100, resultTypeString: "album", countOnly: false
                                }
                        }, pluralizers: ["Result"]
                })
        }), AlbumWithTracks: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.Query.Music.WMIS.WMISQueryWrapper, null, {
                        id: null, chunked: false, chunkSize: 0, resultAugmentation: MS.Entertainment.Data.Augmenter.WMIS.AlbumWithTracksResult, createResourceURI: function() {
                                return MS.Entertainment.Data.Query.Music.WMIS.getAlbumDetailsEndpoint
                            }, createParameters: function createParameters() {
                                return {
                                        albumId: this.id, volume: 1
                                    }
                            }, pluralizers: ["track"]
                    })
            }), Endpoints: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.derive(MS.Entertainment.Data.ServiceWrapperQuery, null, {
                        id: null, resultAugmentation: MS.Entertainment.Data.Augmenter.WMIS.EndpointsResult, createResourceURI: function() {
                                return MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_WMISEndpoints)
                            }, createParameters: function createParameters() {
                                return {apiVersion: "1.0"}
                            }, pluralizers: ["ENDPOINT"]
                    })
            })
    });
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music.MusicMatch", {AlbumSearch: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.WrapperQuery, null, {
                    albumLibraryId: null, resultAugmentation: MS.Entertainment.Data.Augmenter.MusicMatch.AlbumsResult, createInnerQuery: function createInnerQuery() {
                            return {executeAsync: function executeAsync() {
                                        return Microsoft.Entertainment.Marketplace.Marketplace.getAlbumsSuggestAsync(this.albumLibraryId)
                                    }.bind(this)}
                        }
                })
        })});
    WinJS.Namespace.define("MS.Entertainment.Data.Query.Music", {ResetCloudCollection: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return MS.Entertainment.derive(MS.Entertainment.Data.ServiceWrapperQuery, function ResetCloudCollection() {
                    this.base();
                    this.requestType = MS.Entertainment.Data.ServiceWrapperQuery.RequestTypes.post;
                    this.shouldAuthenticate = true
                }, {
                    chunkSize: 0, useCache: false, forceSecureEndpoint: true, deleteMusicPassContent: false, deletePurchasedContent: false, deletePlaylists: false, getResourceEndpointID: function getResourceEndpointID() {
                            return MS.Entertainment.Endpoint.id.seid_CloudCollection
                        }, getAuthenticatedResourceEndpointID: function getAuthenticationResourceEndpointID() {
                            return MS.Entertainment.Endpoint.id.seid_CloudCollection
                        }, createResourceURI: function() {
                            var parameters;
                            if (this.deleteMusicPassContent)
                                parameters = "libraryItemOwnerships=Catalog";
                            if (this.deletePurchasedContent)
                                if (parameters)
                                    parameters += ".Purchased";
                                else
                                    parameters = "libraryItemOwnerships=Purchased";
                            if (this.deletePlaylists)
                                if (parameters)
                                    parameters += "&deletePlaylists=true";
                                else
                                    parameters = "deletePlaylists=true";
                            var suffix;
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            suffix = "users/xuid(" + signedInUser.xuid + ")/cloudcollection/music/queuereset/?" + parameters;
                            return MS.Entertainment.Utilities.UriFactory.create(this.getResourceEndpoint(), suffix)
                        }
                }, {contentType: "application/json"})
        })})
})()
})();
/* >>>>>>/framework/upgradereminderdisplayer.js:4021 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI", {UpgradeReminderDisplayer: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function() {
            this._appNotificationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification)
        }, {
            _appNotificationService: null, upgradeRequired: MS.Entertainment.UI.Framework.observableProperty("upgradeRequired", false), forceUpgradeRequired: false, checkAndRunUpgradeReminder: function checkAndRunUpgradeReminder(showDialog) {
                    var versionSupported = this._checkVersionSupported();
                    var stateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    if (!versionSupported || !stateService.servicesEnabled) {
                        this._showUpgradeNotification();
                        if (showDialog)
                            this.showUpgradeDialog()
                    }
                    if (this.forceUpgradeRequired) {
                        WinJS.Promise.timeout().then(function _delay() {
                            window.location.href = "UpdateApp.html"
                        });
                        MS.Entertainment.Instrumentation.PerfTrack.disableAllStartupScenarios()
                    }
                    return versionSupported
                }, _checkVersionSupported: function _checkVersionSupported() {
                    if (MS.Entertainment.Utilities.isApp2)
                        return true;
                    var currentPackage = Windows.ApplicationModel.Package.current;
                    var currentVersion = currentPackage.id.version;
                    var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var minVersionSupported;
                    var minServiceVersionSupported;
                    var minAppVersionSupported;
                    if (MS.Entertainment.Utilities.isMusicApp1) {
                        minVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.service.minMusicSignInSupportedVersion);
                        minAppVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.fue.minMusicAppSupportedVersion);
                        minServiceVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.service.minMusicServiceSupportedVersion)
                    }
                    else if (MS.Entertainment.Utilities.isVideoApp1) {
                        minVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.service.minVideoSignInSupportedVersion);
                        minAppVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.fue.minVideoAppSupportedVersion);
                        minServiceVersionSupported = MS.Entertainment.Utilities.parseVersionString(config.service.minVideoServiceSupportedVersion)
                    }
                    else {
                        minVersionSupported = MS.Entertainment.Utilities.parseVersionString("1.0.0.0");
                        minAppVersionSupported = MS.Entertainment.Utilities.parseVersionString("1.0.0.0");
                        minServiceVersionSupported = MS.Entertainment.Utilities.parseVersionString("1.0.0.0")
                    }
                    var versionSupported = MS.Entertainment.Utilities.compareVersions(currentVersion, minVersionSupported) >= 0 ? true : false;
                    var stateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    stateService.servicesEnabled = (MS.Entertainment.Utilities.compareVersions(currentVersion, minServiceVersionSupported) >= 0);
                    this.forceUpgradeRequired = (MS.Entertainment.Utilities.compareVersions(currentVersion, minAppVersionSupported) < 0);
                    this.upgradeRequired = !versionSupported || !stateService.servicesEnabled;
                    var appSignIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    appSignIn.setIsSignInSupported(!this.upgradeRequired);
                    return versionSupported
                }, _showUpgradeNotification: function _showUpgradeNotification() {
                    var upgradeAction = WinJS.Utilities.markSupportedForProcessing(function() {
                            this.launchStore();
                            this._appNotificationService.removeNotificationByCategory(MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError);
                            this._appNotificationService.send(new MS.Entertainment.UI.Notification({
                                notificationType: MS.Entertainment.UI.Notification.Type.Critical, title: String.load(String.id.IDS_VERSION_CHECK_SERVICE_TITLE), subTitle: String.load(String.id.IDS_VERSION_CHECK_SIGNIN_TEXT), moreDetails: null, icon: WinJS.UI.AppBarIcon.download, action: upgradeAction, category: MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError, isPersistent: true
                            }))
                        }.bind(this));
                    this._appNotificationService.removeNotificationByCategory(MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError);
                    this._appNotificationService.send(new MS.Entertainment.UI.Notification({
                        notificationType: MS.Entertainment.UI.Notification.Type.Critical, title: String.load(String.id.IDS_VERSION_CHECK_SERVICE_TITLE), subTitle: String.load(String.id.IDS_VERSION_CHECK_SIGNIN_TEXT), moreDetails: null, icon: WinJS.UI.AppBarIcon.download, action: upgradeAction, category: MS.Entertainment.Utilities.SignIn.NotificationCategory.signInError, isPersistent: true
                    }))
                }, showUpgradeDialog: function showUpgradeDialog() {
                    var cancelConfirmDialogButtons = [{
                                title: String.load(String.id.IDS_VERSION_CHECK_UPGRADE_LINK), execute: function onOk(overlay) {
                                        this.launchStore();
                                        overlay.hide()
                                    }.bind(this)
                            }, {
                                title: String.load(String.id.IDS_CANCEL_BUTTON), execute: function onCancel(overlay) {
                                        overlay.hide()
                                    }
                            }];
                    var upgradeTitleStringId = MS.Entertainment.Utilities.isVideoApp1 ? String.id.IDS_VIDEO_LX_VERSION_CHECK_SERVICE_TITLE : String.id.IDS_VERSION_CHECK_SERVICE_TITLE;
                    var upgradeDescriptionStringId = MS.Entertainment.Utilities.isVideoApp1 ? String.id.IDS_VIDEO_LX_VERSION_CHECK_SERVICE_FOR_FEATURES_TEXT : String.id.IDS_VERSION_CHECK_SERVICE_FOR_FEATURES_TEXT;
                    MS.Entertainment.UI.Shell.showMessageBox(String.load(upgradeTitleStringId), String.load(upgradeDescriptionStringId), {
                        persistOnNavigate: MS.Entertainment.Utilities.isVideoApp1, buttons: cancelConfirmDialogButtons, defaultButtonIndex: 0, cancelButtonIndex: 1
                    })
                }, launchStore: function launchStore() {
                    var launchInfo = "ms-windows-store:Updates";
                    var appAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.launchApp);
                    appAction.automationId = MS.Entertainment.UI.AutomationIds.launchAppStoreUpgrade;
                    appAction.parameter = {
                        uri: launchInfo, appendSource: true, appendGamerTag: false
                    };
                    appAction.execute()
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.upgradeReminderDisplayer, function createUpgradeReminderDisplayerService() {
        return new MS.Entertainment.UI.UpgradeReminderDisplayer
    })
})()
})();
/* >>>>>>/components/music/musicappstate.js:4119 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {
        _MusicState: {
            _featureEnablement: null, _networkStatus: null, _signInService: null, _signedInUserService: null, _navigationService: null, _uiStateService: null, _sessionManager: null, _cloudServiceManager: null, _initialized: false, _inMusicApp: false, _downloadEnabled: false, _musicMarketplaceEnabled: false, _musicSubscriptionEnabled: false, _freeStreamEnabled: false, _consoleRegionEnabled: false, _shouldDownloadOnAdd: false, _pinToStartScreenEnabled: false, _metadataEditEnabled: false, _actions: null, _init: function _init() {
                    if (!this._initialized) {
                        this._featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        this._configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        this._networkStatus = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus);
                        this._signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        this._signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        this._uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                        this._musicMarketplaceEnabled = this._featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace);
                        this._musicSubscriptionEnabled = this._featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSubscription);
                        this._musicSmartDJEnabled = this._featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.smartDJMarketplace);
                        this._musicSmartVJEnabled = this._featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.smartVJMarketplace);
                        this._freeStreamEnabled = this._featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                        this._consoleRegionEnabled = this._featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.xbox360ConsoleRegions);
                        this._metadataEditEnabled = !!this._featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.metadataEdit);
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                            this._navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        this._actions = MS.Entertainment.UI.AppBarActions;
                        this._inMusicApp = MS.Entertainment.Utilities.isMusicApp;
                        this._downloadEnabled = MS.Entertainment.Utilities.isMusicApp1;
                        this._pinToStartScreenEnabled = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.pinToStartScreen);
                        if (this._inMusicApp)
                            this._cloudServiceManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
                        this._initialized = true
                    }
                }, getCurrentState: function getCurrentState(media, stateInfo) {
                    this._init();
                    var isRemoteSession = false;
                    if (media.mediaType !== undefined) {
                        this._sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        isRemoteSession = this._sessionManager && this._sessionManager.primarySession && this._sessionManager.primarySession.isRemoteSession && this._sessionManager.primarySession.isRemoteSession()
                    }
                    var isSnapped = this._uiStateService.isSnapped;
                    var musicMarketplaceConnected = this._musicMarketplaceEnabled && this._networkStatus.isEnabled(MS.Entertainment.UI.NetworkStatusService.NetworkedFeature.musicMarketplace);
                    var currentLocation = MS.Entertainment.Utilities.getCurrentUserLocation();
                    var isMarketplaceArtist = (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.person && media.hasServiceId);
                    var showArtistDetails;
                    if (isSnapped)
                        showArtistDetails = false;
                    else if (window.onNewMusicPage) {
                        var isCurrentLocationLXPage;
                        if (this._navigationService)
                            isCurrentLocationLXPage = MS.Entertainment.UI.Monikers && this._navigationService.currentPage && this._navigationService.currentPage.iaNode.moniker === MS.Entertainment.UI.Monikers.homeHub;
                        else
                            isCurrentLocationLXPage = true;
                        showArtistDetails = isCurrentLocationLXPage && (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.person || media.artist)
                    }
                    else if (MS.Entertainment.Utilities.isMusicApp2)
                        showArtistDetails = !!media.artist;
                    else
                        showArtistDetails = musicMarketplaceConnected && (media.artist && media.artist.hasServiceId || isMarketplaceArtist);
                    if (showArtistDetails && MS.Entertainment.UI.Monikers && currentLocation === MS.Entertainment.UI.Monikers.immersiveDetails) {
                        var currentPageArtist = this._navigationService && this._navigationService.currentPage && this._navigationService.currentPage.options && this._navigationService.currentPage.options.mediaItem;
                        currentPageArtist = currentPageArtist.artist || currentPageArtist;
                        if (currentPageArtist && media.isChildOf && media.isEqual)
                            showArtistDetails = !media.isEqual(currentPageArtist) && !media.isChildOf(currentPageArtist);
                        else if (media.mediaType && media.mediaType === Microsoft.Entertainment.Queries.ObjectType.person)
                            showArtistDetails = false
                    }
                    var isSignedIn = this._signInService.isSignedIn;
                    var signedInUserHasSubscription = isSignedIn && this._signedInUserService.isSubscription;
                    var cachedSubscriptionStatus = this._configurationManager.service.lastSignedInUserSubscription;
                    var isExplicitBlocked = media && (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) && (media.isExplicit && (!media.fromCollection && !media.inCollection && !stateInfo.marketplace.hasPurchased)) && (isSignedIn && !this._signedInUserService.hasExplicitPrivilege);
                    var doNotBlockActionsForMediaItem = (!isExplicitBlocked || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album);
                    var canAddToNowPlaying = (!this._sessionManager || !this._sessionManager.primarySession.smartDJSeed) && doNotBlockActionsForMediaItem;
                    var canRemoveFromNowPlaying = !this._sessionManager || !this._sessionManager.primarySession.smartDJSeed;
                    var canSaveNowPlaying = this._sessionManager && (!this._sessionManager.playContext || !this._sessionManager.playContext.activationFilePath);
                    var isPlaylistTrack = media.playlistItemId >= 0;
                    var canDelete = media.isRemovable;
                    var isOnline = MS.Entertainment.UI.NetworkStatusService.isOnline();
                    var isFileOnly = (!!media.activationFilePath && !media.hasServiceId) || (!!media.fileItem && !!media.fileItem.folderRelativeId);
                    var canFindAlbumInfo = musicMarketplaceConnected && media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album && media.fromCollection && media.roamingViaOneDriveTrackCount <= 0 && stateInfo && stateInfo.collection.playability.counts.local > 0;
                    var canPlayOnXbox = musicMarketplaceConnected && this._musicSubscriptionEnabled && this.shouldPlayOnXbox360() && signedInUserHasSubscription && this._consoleRegionEnabled && media.mediaType && media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.playlist && media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.smartDJ && ((signedInUserHasSubscription && media.fromCollection && stateInfo && stateInfo.collection.canStreamFromCloud) || (isMarketplaceArtist || MS.Entertainment.ViewModels.MusicStateHelpers._canXboxAccessMusicMedia(media, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream])));
                    var canDownloadPurchasedMedia = this._downloadEnabled && stateInfo && stateInfo.marketplace.hasPurchased && stateInfo.marketplace.canDownload && stateInfo.download.items.length === 0 && media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.person;
                    var isDownloadingPurchasedMedia = this._downloadEnabled && stateInfo && stateInfo.marketplace.hasPurchased && stateInfo.marketplace.canDownload && stateInfo.download.items.length > 0 && media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.person;
                    var canShowMediaProperties = !isSnapped && media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && (media.hydrated || media.fromCollection);
                    var canSubscriptionDownload = false;
                    if (musicMarketplaceConnected && this._musicSubscriptionEnabled && signedInUserHasSubscription)
                        if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist)
                            canSubscriptionDownload = (media.count > 0);
                        else
                            canSubscriptionDownload = doNotBlockActionsForMediaItem && ((!media.hasLocalContent && media.hasServiceId) || (stateInfo && stateInfo.collection.playability.counts.cloudOnly > 0 && stateInfo.collection.playability.counts.cloudOnly > stateInfo.collection.playability.counts.downloading));
                    var canPlayLocallyOrStreamFromCloud = stateInfo && (stateInfo.collection.canPlayLocally || (stateInfo.collection.canStreamFromCloud && musicMarketplaceConnected));
                    var freeStreamEnabled = this._musicMarketplaceEnabled && this._freeStreamEnabled && (!isSignedIn || !signedInUserHasSubscription);
                    var canFreeStream = false;
                    var freeStreamBlockedByFreeLimits = false;
                    var isFreeLimitsExceeded = false;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.freePlayLimits)) {
                        var freePlayLimits = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.freePlayLimits);
                        canFreeStream = (freeStreamEnabled && musicMarketplaceConnected && (MS.Entertainment.Utilities.isWindowsBlue || !isRemoteSession) && (media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.track || MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(media)));
                        isFreeLimitsExceeded = freePlayLimits.isMonthlyFreeLimitExceeded || media.isFreeStreamRestrictedByIndividualLimit || media.isFreeStreamRestrictedByMonthlyLimit;
                        freeStreamBlockedByFreeLimits = canFreeStream && media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && isFreeLimitsExceeded
                    }
                    var smartDJEnabled = this._musicSmartDJEnabled && this._musicMarketplaceEnabled && ((isSignedIn && this._signedInUserService.isSubscription) || freeStreamEnabled);
                    var smartVJEnabled = this._musicSmartVJEnabled && this._musicMarketplaceEnabled && ((isSignedIn && this._signedInUserService.isSubscription) || freeStreamEnabled);
                    var canPlaySmartDJ = musicMarketplaceConnected && (media.hasSmartDJ || (media.artist && media.artist.hasSmartDJ)) && smartDJEnabled && (MS.Entertainment.Utilities.isWindowsBlue || !isRemoteSession);
                    var hasSmartDJ = media.hasSmartDJ || (media.artist && media.artist.hasSmartDJ);
                    var canPlaySmartVJ = musicMarketplaceConnected && (media.hasSmartVJ || (media.artist && media.artist.hasSmartVJ)) && smartVJEnabled && (MS.Entertainment.Utilities.isWindowsBlue || !isRemoteSession);
                    var cloudServiceEnabled = this._cloudServiceManager && this._cloudServiceManager.isEnabled;
                    var canAddToCloud = this._cloudServiceManager && !this._cloudServiceManager.isV2Enabled && this._cloudServiceManager.isFeatureEnabled && (cloudServiceEnabled || !isSignedIn) && media.fromCollection && isOnline && !isSnapped && !media.hasTakenDown && stateInfo && (stateInfo.collection.playability.counts.cloud === 0 || stateInfo.collection.playability.counts.localOnly > 0) && (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track);
                    var canPlayTopSongs = isMarketplaceArtist && ((this._musicSubscriptionEnabled && signedInUserHasSubscription) || canFreeStream);
                    var downloadOrLocalOrCloudCount = stateInfo ? stateInfo.collection.playability.counts.downloading + stateInfo.collection.playability.counts.localOrCloud : 0;
                    var marketplaceCount = 1;
                    if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                        if (media.tracks && media.tracks.count > (media.trackCount || 0))
                            marketplaceCount = media.tracks.count;
                        else
                            marketplaceCount = media.trackCount >= 0 ? media.trackCount : downloadOrLocalOrCloudCount + 1;
                    var canAddToMyMusic = musicMarketplaceConnected && doNotBlockActionsForMediaItem && (canFreeStream || (this._musicSubscriptionEnabled && signedInUserHasSubscription) || (stateInfo && stateInfo.marketplace.hasPurchased && cloudServiceEnabled)) && ((downloadOrLocalOrCloudCount < marketplaceCount) || (media.collectionState === Microsoft.Entertainment.Queries.ItemCollectionState.notInCollectionValidRights)) && media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.person && ((media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.video) || (media.trackId && !MS.Entertainment.Utilities.isEmptyGuid(media.trackId) && stateInfo && stateInfo.track && !stateInfo.track.inCollection));
                    var canAddToPlaylist = doNotBlockActionsForMediaItem && ((media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.person) || ((media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) && media.trackId && !MS.Entertainment.Utilities.isEmptyGuid(media.trackId))) && (!stateInfo || (stateInfo.collection.playability.counts.downloading > 0) || (stateInfo.collection.playability.counts.localOrCloud > 0) || (musicMarketplaceConnected && (canFreeStream || (this._musicSubscriptionEnabled && signedInUserHasSubscription) || (stateInfo.marketplace.hasPurchased && cloudServiceEnabled))));
                    var canPinToStartScreen = this._pinToStartScreenEnabled && doNotBlockActionsForMediaItem && ((media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.person) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.smartVJ) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.smartDJ));
                    var downloadOnAddToMyMusicCloud = this._cloudServiceManager && this._cloudServiceManager.shouldDownloadOnAdd;
                    var showRelatedArtists = !!(media.artist && media.artist.hasCanonicalId);
                    var isDTOMarket = this._musicMarketplaceEnabled && !canFreeStream && !this._musicSubscriptionEnabled;
                    var isDevicesPage = false;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation)) {
                        var winJSNavigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                        var currentDataContext = winJSNavigationService.realizedDataContext;
                        isDevicesPage = currentDataContext && currentDataContext.isDevicesPage
                    }
                    var canEditMediaType = (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track);
                    var canEdit = canEditMediaType && media.fromCollection && media.inCollection && this._metadataEditEnabled;
                    return {
                            actions: this._actions, musicMarketplaceConnected: musicMarketplaceConnected, musicSubscriptionEnabled: this._musicSubscriptionEnabled, smartDJEnabled: smartDJEnabled, smartVJEnabled: smartVJEnabled, canPlayOnXbox: canPlayOnXbox, consoleRegionEnabled: this._consoleRegionEnabled, showAlbumDetailsAction: function() {
                                    return !isSnapped && media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && media.album && (media.album.hasServiceId || media.album.hasLibraryId) && (MS.Entertainment.Utilities.isValidLibraryId(media.playlistId) || !MS.Entertainment.UI.Controls.PopOver.isPopoverOpen)
                                }.bind(this), showArtistDetailsButton: showArtistDetails, showArtistDetailsAction: function() {
                                    var elements;
                                    var nonPlaylistPopOverOpen;
                                    if (showArtistDetails && (!media || !MS.Entertainment.Utilities.isValidLibraryId(media.playlistId)))
                                        nonPlaylistPopOverOpen = MS.Entertainment.UI.Controls.PopOver.isPopoverOpen;
                                    return showArtistDetails && !nonPlaylistPopOverOpen
                                }.bind(this), canPinToStartScreen: canPinToStartScreen, isSignedIn: isSignedIn, signedInUserHasSubscription: signedInUserHasSubscription, cachedSubscriptionStatus: cachedSubscriptionStatus, isPlaylistTrack: isPlaylistTrack, isFileOnly: isFileOnly, isOnline: isOnline, isSnapped: isSnapped, canDelete: canDelete, canAddToNowPlaying: canAddToNowPlaying, canRemoveFromNowPlaying: canRemoveFromNowPlaying, canEdit: canEdit, canSaveNowPlaying: canSaveNowPlaying, hasSmartDJ: hasSmartDJ, canPlaySmartDJ: canPlaySmartDJ, canPlaySmartVJ: canPlaySmartVJ, canShowMediaProperties: canShowMediaProperties, canSubscriptionDownload: canSubscriptionDownload, canFreeStream: canFreeStream, canPlayTopSongs: canPlayTopSongs, canPlayLocallyOrStreamFromCloud: canPlayLocallyOrStreamFromCloud, freeStreamEnabled: this._freeStreamEnabled, canFindAlbumInfo: canFindAlbumInfo, canAddToCloud: canAddToCloud, isRemoteSession: isRemoteSession, cloudServiceEnabled: cloudServiceEnabled, canAddToMyMusic: canAddToMyMusic, canAddToPlaylist: canAddToPlaylist, canDownloadPurchasedMedia: canDownloadPurchasedMedia, isDownloadingPurchasedMedia: isDownloadingPurchasedMedia, downloadOnAddToMyMusicCloud: downloadOnAddToMyMusicCloud, showRelatedArtists: showRelatedArtists, freeStreamBlockedByFreeLimits: freeStreamBlockedByFreeLimits, isDTOMarket: isDTOMarket, isDevicesPage: isDevicesPage, isFreeLimitsExceeded: isFreeLimitsExceeded, isExplicitBlocked: isExplicitBlocked
                        }
                }, shouldPlayOnXbox360: function shouldPlayOnXbox360() {
                    return !MS.Entertainment.Utilities.isWindowsBlue
                }
        }, MusicStateHelpers: {
                _canXboxAccessMusicMedia: function _canXboxAccessMusicMedia(media, rights) {
                    MS.Entertainment.ViewModels.assert(media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.person || MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(media), "Unexpected mediaType: " + media.mediaType);
                    var currentIndex = 0;
                    var canAccess = false;
                    var mediaToCheck;
                    if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album) {
                        mediaToCheck = media.tracks || media.marketplaceTracks;
                        if (MS.Entertainment.Data.List.isList(mediaToCheck)) {
                            var mediaToCheckArray = [];
                            mediaToCheck.forEach(function addMedia(args) {
                                mediaToCheckArray.push(args.item.data)
                            });
                            mediaToCheck = mediaToCheckArray
                        }
                    }
                    if (!mediaToCheck)
                        mediaToCheck = [media];
                    while (!canAccess && currentIndex < mediaToCheck.length) {
                        canAccess = MS.Entertainment.ViewModels.SmartBuyStateHandlers._canXboxAccessMedia(mediaToCheck[currentIndex], rights);
                        currentIndex++
                    }
                    return canAccess
                }, _getDownloadAppBarActions: function _getDownloadAppBarActions(appState, stateInfo, mediaItem) {
                        if (!appState) {
                            MS.Entertainment.UI.fail("Expected app state to be defined.");
                            return []
                        }
                        var downloadActionSet = {
                                tryDownloadAgain: appState.actions.tryDownloadAgain, removeFailedDownload: appState.actions.removeFailedDownload, subscriptionDownload: appState.actions.subscriptionDownload, downloadFromMarketplace: appState.actions.downloadFromMarketplace
                            };
                        return MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadActions(appState, stateInfo, mediaItem, downloadActionSet)
                    }, _getDownloadButtons: function _getDownloadButtons(appState, mediaButtons, stateInfo, mediaItem) {
                        if (!mediaButtons) {
                            MS.Entertainment.UI.fail("Expected button set to be defined.");
                            return []
                        }
                        var downloadActionSet = {
                                tryDownloadAgain: mediaButtons.tryAgain, removeFailedDownload: mediaButtons.remove, subscriptionDownload: mediaButtons.subscriptionDownload, downloadFromMarketplace: mediaButtons.download
                            };
                        return MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadActions(appState, stateInfo, mediaItem, downloadActionSet)
                    }, _getDownloadActions: function _getDownloadActions(appState, stateInfo, mediaItem, downloadActionSet) {
                        MS.Entertainment.UI.assert(appState && mediaItem && stateInfo, "This function requires a valid appState, media item and state info.");
                        mediaItem = mediaItem || {};
                        if (!stateInfo)
                            return actions;
                        var actions = [];
                        if (stateInfo.download.hasFailed)
                            if (stateInfo.download.hasRetryable) {
                                MS.Entertainment.UI.assert(downloadActionSet.tryDownloadAgain, "Missing action: tryDownloadAgain");
                                actions.push(downloadActionSet.tryDownloadAgain)
                            }
                            else {
                                MS.Entertainment.UI.assert(downloadActionSet.removeFailedDownload, "Missing action: removeFailedDownload");
                                actions.push(downloadActionSet.removeFailedDownload)
                            }
                        else if (mediaItem.canPurchaseDownload && !stateInfo.collection.canPlayLocally && !stateInfo.download.hasActive) {
                            MS.Entertainment.UI.assert(downloadActionSet.downloadFromMarketplace, "Missing action: downloadFromMarketplace");
                            actions.push(downloadActionSet.downloadFromMarketplace)
                        }
                        else if (mediaItem.canSubscriptionDownload && appState.canSubscriptionDownload && !stateInfo.collection.canPlayLocally && !stateInfo.download.hasActive) {
                            MS.Entertainment.UI.assert(downloadActionSet.subscriptionDownload, "Missing action: subscriptionDownload");
                            actions.push(downloadActionSet.subscriptionDownload)
                        }
                        else {
                            var hasDownloads = false;
                            var shouldRunMachineActivationCheck = true;
                            var playabilityItems = stateInfo.collection.playability.items;
                            var entitlements = stateInfo.marketplace.entitlements;
                            if (playabilityItems && playabilityItems.length > 0 && entitlements && entitlements.length > 0) {
                                var hasNonLocalMedia = false;
                                var nonLocalMedia = {};
                                for (var i = 0; i < playabilityItems.length; i++) {
                                    var playabilityItem = playabilityItems[i];
                                    if (playabilityItem && playabilityItem.mediaId && !playabilityItem.isDownloading && !playabilityItem.locallyPlayable) {
                                        nonLocalMedia[playabilityItem.mediaId.toLowerCase()] = playabilityItem;
                                        hasNonLocalMedia = true
                                    }
                                }
                                if (hasNonLocalMedia)
                                    for (var i = 0; i < entitlements.length; i++) {
                                        var entitlement = entitlements[i];
                                        if (entitlement && entitlement.canFullyDownload && nonLocalMedia[entitlement.serviceMediaId.toLowerCase()]) {
                                            hasDownloads = true;
                                            var downloadLicenseRight = 200;
                                            if (entitlement.purchase.download.isAvailable && downloadLicenseRight !== entitlement.purchase.download.licenseRight) {
                                                shouldRunMachineActivationCheck = false;
                                                break
                                            }
                                        }
                                    }
                            }
                            if (hasDownloads)
                                if (shouldRunMachineActivationCheck) {
                                    MS.Entertainment.UI.assert(downloadActionSet.subscriptionDownload, "Missing action: subscriptionDownload");
                                    actions.push(downloadActionSet.subscriptionDownload)
                                }
                                else {
                                    MS.Entertainment.UI.assert(downloadActionSet.downloadFromMarketplace, "Missing action: downloadFromMarketplace");
                                    actions.push(downloadActionSet.downloadFromMarketplace)
                                }
                        }
                        MS.Entertainment.UI.Actions.assert(actions.length <= 1, "Expected at most 1 action to be returned, actual: " + actions.length);
                        return actions
                    }
            }
    })
})()
})();
/* >>>>>>/components/shell/apptoolbarservice.js:4373 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI");
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI", {
        AppToolbarService: MS.Entertainment.UI.Framework.define(function AppToolbarServiceConstructor() {
            MS.Entertainment.Utilities.assertIfCalledBeforeCriticalWorkCompleted();
            this.currentAppbarActions = new MS.Entertainment.ObservableArray;
            this._mediaContextStack = [];
            this.pushDefaultContext()
        }, {
            __availableActions: null, __defaultActions: null, currentAppbarActions: null, _mediaContextStack: null, _defaultActions: {
                    get: function get_defaultActions() {
                        if (!this.__defaultActions && MS.Entertainment.ViewModels.SmartAppbarActions)
                            this.__defaultActions = MS.Entertainment.ViewModels.SmartAppbarActions.defaultActions;
                        return this.__defaultActions || []
                    }, set: function set_defaultActions(value) {
                            this.__defaultActions = value
                        }
                }, _availableActions: {
                    get: function get_availableActions() {
                        if (!this.__availableActions && MS.Entertainment.ViewModels.SmartAppbarActions && MS.Entertainment.ViewModels.SmartAppbarActions.getAppbarActions)
                            this.__availableActions = MS.Entertainment.ViewModels.SmartAppbarActions.getAppbarActions();
                        return this.__availableActions || []
                    }, set: function set_availableActions(value) {
                            this.__availableActions = value
                        }
                }, _resetActionWithSubActions: function _resetActionWithSubActions(action) {
                    if (!action || !action.hasSubActions)
                        return;
                    action.parameter = {};
                    action.requeryCanExecute();
                    if (action.setSubActions)
                        action.setSubActions([])
                }, pushDefaultContext: function pushDefaultContext(actions) {
                    var actionIds = actions || this._defaultActions;
                    var mediaContext = this.pushMediaContext(null, null, actionIds, null, 0);
                    return mediaContext
                }, currentMediaContext: {get: function() {
                        MS.Entertainment.UI.assert(this._mediaContextStack.length > 0, "currentMediaContext called when we have no stored mediaContext");
                        return this._mediaContextStack[this._mediaContextStack.length - 1]
                    }}, _setToolbarActions: function _setToolbarActions(actionIds, cookie) {
                    MS.Entertainment.UI.assert(actionIds, "Set called without a valid actionIds array");
                    var mediaContext;
                    var isActiveMediaContent = true;
                    for (var i = this._mediaContextStack.length - 1; i >= 0; i--) {
                        if (this._mediaContextStack[i].cookie === cookie) {
                            mediaContext = this._mediaContextStack[i];
                            break
                        }
                        isActiveMediaContent = false
                    }
                    if (mediaContext)
                        mediaContext.actionIds = actionIds;
                    else
                        MS.Entertainment.UI.fail("Couldn't find mediaContext with cookie: " + cookie);
                    if (isActiveMediaContent) {
                        var i;
                        var enabledActions = {};
                        actionIds.forEach(function addId(id) {
                            MS.Entertainment.UI.assert(id, "Missing action Id");
                            enabledActions[id] = true
                        });
                        for (i = (this.currentAppbarActions.length - 1); i >= 0; i--) {
                            var currentItem = this.currentAppbarActions.item(i);
                            var action = null;
                            if (currentItem)
                                action = currentItem.action;
                            if (action && !enabledActions[action.id]) {
                                this.currentAppbarActions.removeAt(i);
                                this._resetActionWithSubActions(action);
                                if (action.wrappedAction)
                                    this._resetActionWithSubActions(action.wrappedAction)
                            }
                        }
                        var action;
                        var actionId;
                        var currentIndex = 0;
                        var actionLength = this._availableActions.length;
                        for (i = 0; i < actionLength; i++) {
                            actionId = this._availableActions[i].id || this._availableActions[i].action.id;
                            if (enabledActions[actionId]) {
                                action = this._availableActions[i].action;
                                if (this.currentAppbarActions.length <= currentIndex)
                                    this.currentAppbarActions.push({action: action});
                                else if (this.currentAppbarActions.item(currentIndex).action.id !== action.id)
                                    this.currentAppbarActions.insert(currentIndex, {action: action});
                                currentIndex++
                            }
                        }
                        for (i = 0; i < this.currentAppbarActions.length; i++) {
                            var action = this.currentAppbarActions.item(i);
                            action = (action && action.action) || {};
                            var unwrappedAction;
                            if (action.requeryCanExecute)
                                action.requeryCanExecute();
                            unwrappedAction = action.wrappedAction || action;
                            if (mediaContext.actionIds.hasSubActions && mediaContext.actionIds.hasSubActions(action.id))
                                unwrappedAction.setSubActions(mediaContext.actionIds.subActions[action.id])
                        }
                    }
                }, getToolbarAction: function getToolbarAction(id) {
                    var action;
                    var toolbarActions = this._availableActions;
                    for (var key in toolbarActions)
                        if (toolbarActions.hasOwnProperty(key)) {
                            action = toolbarActions[key];
                            if (action.action)
                                action = action.action;
                            if (action.id === id)
                                return action
                        }
                    return null
                }, pushMediaContext: function pushMediaContext(mediaItem, eventHandlers, initialActionIds, options, stackPriority) {
                    var mediaContext;
                    var contextCookie = MS.Entertainment.Utilities.getSessionUniqueInteger();
                    var eventSource = new MS.Entertainment.Utilities.EventSource;
                    if (eventHandlers) {
                        eventHandlers = Array.isArray(eventHandlers) ? eventHandlers : [eventHandlers];
                        for (var i = 0; i < eventHandlers.length; i++)
                            eventSource.addEventHandlers(eventHandlers[i])
                    }
                    MS.Entertainment.UI.assert(!stackPriority || stackPriority >= 0, "Negative stackPriorities are not allowed");
                    MS.Entertainment.UI.assert(!stackPriority, "stack priorities are currently only enabled in companion");
                    mediaContext = {
                        mediaItem: mediaItem || {}, collectionFilter: Microsoft.Entertainment.Platform.MediaAvailability.available, actionIds: initialActionIds || this._defaultActions, options: options || {executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas}, stackPriority: stackPriority || 0, _contextRemoved: false, setToolbarActions: function setToolbarActions(actionIds) {
                                this._setToolbarActions(actionIds, mediaContext.cookie)
                            }.bind(this), clearToolbarActions: function clearToolbarActions() {
                                this._setToolbarActions([], mediaContext.cookie)
                            }.bind(this), updateMediaItem: function updateMediaItem(newMediaItem) {
                                mediaContext.mediaItem = newMediaItem
                            }, addEventHandlers: function addEventHandlers(events) {
                                MS.Entertainment.UI.assert(!Array.isArray(events), "Events passed in cannot be an array");
                                return eventSource.addEventHandlers(events)
                            }, dispatchEvent: function dispatchEvent(event, parameters) {
                                MS.Entertainment.UI.assert(event, "event must be defined");
                                eventSource.dispatchEvent(event, parameters)
                            }, clearContext: function clearContext() {
                                if (mediaContext._contextRemoved) {
                                    MS.Entertainment.UI.fail("clearContext called on mediaContext which has already been cleared");
                                    return
                                }
                                MS.Entertainment.UI.assert(this._mediaContextStack.length > 0, "clearContext called when we have no stored mediaContexts");
                                var topRemoved = true;
                                for (var i = this._mediaContextStack.length - 1; i >= 0; i--) {
                                    if (this._mediaContextStack[i].cookie === mediaContext.cookie) {
                                        this._mediaContextStack.splice(i, 1);
                                        mediaContext._contextRemoved = true;
                                        break
                                    }
                                    topRemoved = false
                                }
                                if (topRemoved) {
                                    var newTop = this._mediaContextStack[this._mediaContextStack.length - 1];
                                    newTop.setToolbarActions(newTop.actionIds)
                                }
                                eventSource.dispose()
                            }.bind(this)
                    };
                    Object.defineProperty(mediaContext, "cookie", {get: function() {
                            return contextCookie
                        }});
                    var topItem = this._mediaContextStack[this._mediaContextStack.length - 1] || {stackPriority: 0};
                    if (mediaContext.stackPriority >= topItem.stackPriority)
                        this._mediaContextStack.push(mediaContext);
                    else
                        for (var i = this._mediaContextStack.length - 1; i >= 0; i--)
                            if (mediaContext.stackPriority >= this._mediaContextStack[i].stackPriority) {
                                this._mediaContextStack.splice(i - 1, 0, mediaContext);
                                break
                            }
                    mediaContext.setToolbarActions(mediaContext.actionIds);
                    return mediaContext
                }
        }), ToolbarAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function toolbarActionConstructor() {
                this.base();
                this.isEnabled = true
            }, {
                icon: null, hideOnDisable: false, visibility: null, canExecute: function canExecute(parameter) {
                        return true
                    }
            })
    });
    if (MS.Entertainment.Utilities.isMain)
        MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.appToolbar, function AppToolbarServiceFactory() {
            return new MS.Entertainment.UI.AppToolbarService
        })
})()
})();
/* >>>>>>/components/shell/openfileaction.js:4565 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Components.Shell");
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Components.Shell", {OpenFileAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.ToolbarAction", function() {
            this.base();
            this.id = MS.Entertainment.UI.AppBarActions.openFile;
            this.automationId = MS.Entertainment.UI.AutomationIds.appBarOpenFile;
            this.title = String.load(String.id.IDS_DETAILS_FILE_OPEN_LABEL);
            this.icon = WinJS.UI.AppBarIcon.openfile
        }, {
            executed: function executed(params) {
                this.parameter = {
                    actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas
                };
                var fileOpenPicker = null;
                try {
                    fileOpenPicker = new Windows.Storage.Pickers.FileOpenPicker
                }
                catch(e) {
                    MS.Entertainment.UI.Components.Shell.fail("failed to create file open picker");
                    return
                }
                var openFile = function openFile(file) {
                        if (file && file.size !== 0) {
                            if (MS.Entertainment.Utilities.isVideoApp)
                                file = [file];
                            WinJS.Promise.as(MS.Entertainment.Activation.retrievePropertiesAndPlay(file, 0)).done(null, function(error) {
                                MS.Entertainment.UI.Components.Shell.fail("OpenFileAction::openFile(). Failed to retrieve file properties. Error: " + (error && error.message))
                            })
                        }
                    };
                if (MS.Entertainment.Utilities.isVideoApp)
                    try {
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        var playbackSession = sessionMgr.getSession(MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying);
                        var initialPlaybackState = playbackSession.currentTransportState;
                        if (initialPlaybackState === MS.Entertainment.Platform.Playback.TransportState.playing)
                            playbackSession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.paused;
                        var validFileExtensions = [".3g2", ".3gp", ".3gpp", ".asf", ".avi", ".divx", ".m2ts", ".m2t", ".m4v", ".mod", ".mov", ".mp4", ".mp4v", ".mpe", ".mpeg", ".mpg", ".mpv2", ".mts", ".tod", ".ts", ".tts", ".wm", ".wmv", ".xvid"];
                        fileOpenPicker.fileTypeFilter.replaceAll(validFileExtensions);
                        fileOpenPicker.suggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.videosLibrary;
                        fileOpenPicker.viewMode = Windows.Storage.Pickers.PickerViewMode.thumbnail;
                        fileOpenPicker.pickSingleFileAsync().then(function fileOpenPickerFunction(file) {
                            if (file && file.size !== 0)
                                openFile(file);
                            else if (initialPlaybackState === MS.Entertainment.Platform.Playback.TransportState.playing)
                                playbackSession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.playing
                        })
                    }
                    catch(e) {
                        MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_MEDIA_ERROR_CAPTION), e.number)
                    }
                else if (MS.Entertainment.Utilities.isMusicApp)
                    try {
                        fileOpenPicker.fileTypeFilter.replaceAll([".aac", ".adt", ".adts", ".m3u", ".m4a", ".mp3", ".mp4", ".mpa", ".wav", ".wma", ".wpl", ".zpl", ".flac"]);
                        fileOpenPicker.suggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.musicLibrary;
                        fileOpenPicker.viewMode = Windows.Storage.Pickers.PickerViewMode.list;
                        fileOpenPicker.pickMultipleFilesAsync().then(function fileOpenPickerFunction(file) {
                            openFile(file)
                        })
                    }
                    catch(e) {
                        MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_MEDIA_ERROR_CAPTION), e.number)
                    }
            }, canExecute: function canExecute() {
                    return (MS.Entertainment.Utilities.isVideoApp || MS.Entertainment.Utilities.isMusicApp)
                }
        }, {
            getOpenFileAction: function getOpenFileAction() {
                if (!MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction)
                    MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction = new MS.Entertainment.UI.Components.Shell.OpenFileAction;
                return {action: MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction}
            }, openFileAction: null
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.openFile, function() {
        if (!MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction)
            MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction = new MS.Entertainment.UI.Components.Shell.OpenFileAction;
        return MS.Entertainment.UI.Components.Shell.OpenFileAction.openFileAction
    })
})()
})();
/* >>>>>>/components/shell/ipintostartscreeninterop.js:4651 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Components;
            (function(Components) {
                var Shell;
                (function(Shell) {
                    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Components.Shell")
                })(Shell = Components.Shell || (Components.Shell = {}))
            })(Components = UI.Components || (UI.Components = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/components/shell/pintostartscreeninterop.js:4672 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Components;
            (function(Components) {
                var Shell;
                (function(Shell) {
                    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Components.Shell");
                    var PinToStartScreenInterop = (function() {
                            function PinToStartScreenInterop(){}
                            PinToStartScreenInterop.prototype.findAllTilesAsync = function() {
                                return Windows.UI.StartScreen.SecondaryTile.findAllAsync()
                            };
                            PinToStartScreenInterop.prototype.getServiceImageUrlAsync = function(media, width, height, requestedImage, imageIdType, defaultImageUri, imageContentType, mediaType) {
                                return MS.Entertainment.UI.Shell.ImageLoader.getServiceImageUrl(media, width, height, requestedImage, imageIdType, defaultImageUri, imageContentType)
                            };
                            PinToStartScreenInterop.prototype.requestCreateAsync = function(tile) {
                                return tile.requestCreateAsync()
                            };
                            PinToStartScreenInterop.prototype.requestCreateForSelectionAsync = function(tile, flyOverPosition, flyOverPlacement) {
                                return tile.requestCreateForSelectionAsync(flyOverPosition, flyOverPlacement)
                            };
                            PinToStartScreenInterop.prototype.requestDeleteAsync = function(tile) {
                                return tile.requestDeleteAsync()
                            };
                            PinToStartScreenInterop.prototype.requestDeleteForSelectionAsync = function(tile, flyOverPosition, flyOverPlacement) {
                                return tile.requestDeleteForSelectionAsync(flyOverPosition, flyOverPlacement)
                            };
                            PinToStartScreenInterop.prototype.updateTileBadge = function(tileId, xmlDocument) {
                                var badgeNotification = new Windows.UI.Notifications.BadgeNotification(xmlDocument);
                                Windows.UI.Notifications.BadgeUpdateManager.createBadgeUpdaterForSecondaryTile(tileId).update(badgeNotification)
                            };
                            PinToStartScreenInterop.prototype.updateTileMetadata = function(tileId, xmlDocument) {
                                var tileNotification = new Windows.UI.Notifications.TileNotification(xmlDocument);
                                Windows.UI.Notifications.TileUpdateManager.createTileUpdaterForSecondaryTile(tileId).update(tileNotification)
                            };
                            PinToStartScreenInterop.create = function() {
                                return new MS.Entertainment.UI.Components.Shell.PinToStartScreenInterop
                            };
                            return PinToStartScreenInterop
                        })();
                    Shell.PinToStartScreenInterop = PinToStartScreenInterop
                })(Shell = Components.Shell || (Components.Shell = {}))
            })(Components = UI.Components || (UI.Components = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.pinToStartScreenInterop, MS.Entertainment.UI.Components.Shell.PinToStartScreenInterop.create)
})();
/* >>>>>>/components/shell/pintostartscreen.js:4728 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Components;
            (function(Components) {
                var Shell;
                (function(Shell) {
                    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Components.Shell");
                    var PinToStartScreen = (function() {
                            function PinToStartScreen(){}
                            Object.defineProperty(PinToStartScreen, "_interop", {
                                get: function() {
                                    return Entertainment.ServiceLocator.getService(Entertainment.Services.pinToStartScreenInterop)
                                }, enumerable: true, configurable: true
                            });
                            PinToStartScreen.prototype._generateMediaTileIds = function(media) {
                                var tileIds = [];
                                if (media) {
                                    if (media.libraryId !== undefined && media.libraryId !== -1)
                                        tileIds.push(PinToStartScreen._tileName + "_" + media.mediaType + "_" + media.libraryId);
                                    if (Entertainment.Utilities.isValidServiceId(media.zuneId))
                                        tileIds.push(PinToStartScreen._tileName + "_" + media.mediaType + "_" + media.zuneId);
                                    if (Entertainment.Utilities.isValidServiceId(media.serviceId))
                                        tileIds.push(PinToStartScreen._tileName + "_" + media.mediaType + "_" + media.serviceId);
                                    if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason && Entertainment.Utilities.isValidServiceId(media.seriesZuneId))
                                        tileIds.push(PinToStartScreen._tileName + "_" + media.mediaType + "_" + media.seriesZuneId + "_" + media.seasonNumber)
                                }
                                return tileIds
                            };
                            PinToStartScreen.prototype._generateMediaActivationArguments = function(media, tileId) {
                                if (media.inCollection && Entertainment.Utilities.isValidLibraryId(media.libraryId))
                                    return "{0}/?mediaType={1}&id={2}&tileId={3}".format(PinToStartScreen._deepLinkName, media.mediaType, media.libraryId, tileId);
                                if (media.hasCanonicalId)
                                    return "{0}/?mediaType={1}&id={2}&idType={3}&tileId={4}".format(PinToStartScreen._deepLinkName, media.mediaType, media.canonicalId, Entertainment.Data.Query.edsIdType.canonical, tileId);
                                if (Entertainment.Utilities.isValidServiceId(media.serviceId))
                                    return "{0}/?mediaType={1}&id={2}&idType={3}&tileId={4}".format(PinToStartScreen._deepLinkName, media.mediaType, media.serviceId, media.serviceIdType || Entertainment.Data.Query.edsIdType.zuneCatalog, tileId);
                                if (Entertainment.Utilities.isValidServiceId(media.zuneId)) {
                                    if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason && Entertainment.Utilities.isValidServiceId(media.seriesZuneId))
                                        return "{0}/?mediaType={1}&id={2}&seriesZuneId={3}&seasonNumber={4}&idType={5}&tileId={6}".format(PinToStartScreen._deepLinkName, media.mediaType, media.zuneId, media.seriesZuneId, media.seasonNumber, Entertainment.Data.Query.edsIdType.zuneCatalog, tileId);
                                    return "{0}/?mediaType={1}&id={2}&idType={3}&tileId={4}".format(PinToStartScreen._deepLinkName, media.mediaType, media.zuneId, Entertainment.Data.Query.edsIdType.zuneCatalog, tileId)
                                }
                                return null
                            };
                            PinToStartScreen.prototype._generateTileOptions = function(media) {
                                return Windows.UI.StartScreen.TileOptions.none
                            };
                            PinToStartScreen.prototype.getFirstMatchingTileAsync = function(tileIds) {
                                return PinToStartScreen._interop.findAllTilesAsync().then(function(allTilesArray) {
                                        for (var i = 0; i < allTilesArray.length; i++) {
                                            var currentTile = allTilesArray[i];
                                            if (tileIds.indexOf(currentTile.tileId) !== -1)
                                                return WinJS.Promise.as(currentTile)
                                        }
                                        return WinJS.Promise.as()
                                    }, function() {
                                        return WinJS.Promise.as()
                                    })
                            };
                            PinToStartScreen.prototype.getTileForMediaAsync = function(media) {
                                var tileIds = this._generateMediaTileIds(media);
                                return this.getFirstMatchingTileAsync(tileIds)
                            };
                            PinToStartScreen.prototype.pinMediaAsync = function(media, flyOverPosition, flyOverPlacement, smallLogo, wideTileImage) {
                                if (flyOverPosition === void 0)
                                    flyOverPosition = null;
                                if (flyOverPlacement === void 0)
                                    flyOverPlacement = Windows.UI.Popups.Placement.above;
                                if (smallLogo === void 0)
                                    smallLogo = null;
                                if (wideTileImage === void 0)
                                    wideTileImage = null;
                                var tileIds = this._generateMediaTileIds(media);
                                if (!tileIds || tileIds.length === 0)
                                    return WinJS.Promise.as();
                                var tileActivationArguments = this._generateMediaActivationArguments(media, tileIds[0]);
                                var tileShortName;
                                var isSeason = Entertainment.Platform.PlaybackHelpers.isTVSeason(media);
                                var isEpisode = Entertainment.Platform.PlaybackHelpers.isTVEpisode(media);
                                var isSmartDj = media && media.mediaType === Microsoft.Entertainment.Queries.ObjectType.smartDJ;
                                if (isEpisode || isSeason)
                                    tileShortName = "{0}, {1}".format(media.seriesTitle, media.title);
                                else if (isSmartDj)
                                    tileShortName = String.load(String.id.IDS_MUSIC_PIN_RADIO_TILE_NAME).format(media.name);
                                else
                                    tileShortName = media.title || media.name;
                                var tile = null;
                                var tileImage = null;
                                var tileDisplayName = tileShortName;
                                var tileOptions = this._generateTileOptions(media);
                                var defaultImageUri = Entertainment.Utilities.isVideoApp ? PinToStartScreen._defaultImageUri.video : PinToStartScreen._defaultImageUri.music;
                                return PinToStartScreen._interop.getServiceImageUrlAsync(media, 320, 320, Entertainment.ImageRequested.primaryImage, Entertainment.Data.ImageIdType.image, defaultImageUri, Entertainment.ImageContentType.jpeg, media.mediaType).then(function(url) {
                                        if (!url) {
                                            Shell.fail("PinToStartScreen::pinMediaAsync(). Unable to get a valid url which is required for this tile type.");
                                            return WinJS.Promise.wrap(false)
                                        }
                                        tileImage = new Windows.Foundation.Uri(url);
                                        tile = wideTileImage ? new Windows.UI.StartScreen.SecondaryTile(tileIds[0], tileShortName, tileDisplayName, tileActivationArguments, tileOptions, tileImage, wideTileImage) : new Windows.UI.StartScreen.SecondaryTile(tileIds[0], tileShortName, tileDisplayName, tileActivationArguments, tileOptions, tileImage);
                                        tile.roamingEnabled = !media.inCollection;
                                        if (smallLogo)
                                            tile.smallLogo = smallLogo;
                                        if (flyOverPosition && !flyOverPosition.isEmpty)
                                            return PinToStartScreen._interop.requestCreateForSelectionAsync(tile, flyOverPosition, flyOverPlacement);
                                        else
                                            return PinToStartScreen._interop.requestCreateAsync(tile)
                                    }).then(function(isCreated) {
                                        if (!isCreated)
                                            return WinJS.Promise.as();
                                        media.isPinnedToStartScreen = true;
                                        var notifications = Windows.UI.Notifications;
                                        var tileTemplate;
                                        var tileXmlDocument;
                                        if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist) {
                                            tileTemplate = notifications.TileTemplateType.tileSquareText02;
                                            tileXmlDocument = notifications.TileUpdateManager.getTemplateContent(tileTemplate)
                                        }
                                        else {
                                            tileTemplate = notifications.TileTemplateType.tileSquarePeekImageAndText02;
                                            tileXmlDocument = notifications.TileUpdateManager.getTemplateContent(tileTemplate);
                                            var tileImageNodes = tileXmlDocument.getElementsByTagName("image");
                                            tileImageNodes[0].setAttribute("src", tileImage.rawUri)
                                        }
                                        var tileTextNodes = tileXmlDocument.getElementsByTagName("text");
                                        var xboxLogo = MS.Entertainment.Framework.TileManager.xboxLogo;
                                        tileTextNodes[0].appendChild(tileXmlDocument.createTextNode(xboxLogo));
                                        var tileText = Entertainment.Utilities.simpleEscapeHTML(tile.displayName);
                                        tileTextNodes[1].appendChild(tileXmlDocument.createTextNode(tileText));
                                        PinToStartScreen._interop.updateTileMetadata(tileIds[0], tileXmlDocument);
                                        if (media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.tvSeason) {
                                            var badgeXmlDocument = notifications.BadgeUpdateManager.getTemplateContent(notifications.BadgeTemplateType.badgeNumber);
                                            var badgeAttributes = badgeXmlDocument.getElementsByTagName("badge");
                                            var badgeName = media.mediaType === Microsoft.Entertainment.Queries.ObjectType.person ? "none" : "playing";
                                            badgeAttributes[0].setAttribute("value", badgeName);
                                            PinToStartScreen._interop.updateTileBadge(tileIds[0], badgeXmlDocument)
                                        }
                                    })
                            };
                            PinToStartScreen.prototype.unpinAsync = function(tileIds, flyOverPosition, flyOverPlacement) {
                                if (!flyOverPosition)
                                    flyOverPosition = null;
                                if (!flyOverPlacement)
                                    flyOverPlacement = Windows.UI.Popups.Placement.above;
                                if (!tileIds || tileIds.length === 0)
                                    return WinJS.Promise.wrap();
                                var deleteTilePromises = [];
                                return PinToStartScreen._interop.findAllTilesAsync().then(function(allTilesArray) {
                                        var deleteTilePromises = allTilesArray.map(function(currentTile) {
                                                if (tileIds.indexOf(currentTile.tileId) !== -1)
                                                    if (flyOverPosition && !flyOverPosition.isEmpty)
                                                        return PinToStartScreen._interop.requestDeleteForSelectionAsync(currentTile, flyOverPosition, flyOverPlacement);
                                                    else
                                                        return PinToStartScreen._interop.requestDeleteAsync(currentTile)
                                            });
                                        return WinJS.Promise.join(deleteTilePromises)
                                    }).then(function(deleteResults) {
                                        return WinJS.Promise.wrap(deleteResults)
                                    }, function(error) {
                                        Shell.fail("PinToStartScreen::unpinAsync() Failed to remove pin. error: " + (error && error.message));
                                        return WinJS.Promise.wrap([false])
                                    })
                            };
                            PinToStartScreen.prototype.unpinMediaAsync = function(media, flyOverPosition, flyOverPlacement) {
                                if (flyOverPosition === void 0)
                                    flyOverPosition = null;
                                if (flyOverPlacement === void 0)
                                    flyOverPlacement = Windows.UI.Popups.Placement.above;
                                if (!media)
                                    return WinJS.Promise.wrap();
                                var tileIds = this._generateMediaTileIds(media);
                                return this.unpinAsync(tileIds, flyOverPosition, flyOverPlacement).then(function(deleteResults) {
                                        var allTilesDeletedForMedia = deleteResults.every(function(isDeleted) {
                                                return isDeleted === true || isDeleted === undefined
                                            });
                                        media.isPinnedToStartScreen = !allTilesDeletedForMedia
                                    })
                            };
                            PinToStartScreen.create = function() {
                                return new Components.Shell.PinToStartScreen
                            };
                            PinToStartScreen._tileName = "XboxPin";
                            PinToStartScreen._deepLinkName = "playPin";
                            PinToStartScreen._defaultImageUri = {
                                video: "ms-appx:///images/tiles/XBL_VIDEO_150x150_A.png", music: "ms-appx:///images/tiles/XBL_MUSIC_150x150_A.png"
                            };
                            return PinToStartScreen
                        })();
                    Shell.PinToStartScreen = PinToStartScreen
                })(Shell = Components.Shell || (Components.Shell = {}))
            })(Components = UI.Components || (UI.Components = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.pinToStartScreen, MS.Entertainment.UI.Components.Shell.PinToStartScreen.create)
})();
/* >>>>>>/components/shell/purchasehelpers.js:4928 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.PurchaseHelpers");
    WinJS.Namespace.define("MS.Entertainment.Platform.PurchaseHelpers", {
        CONSOLE_TARGET: "XBox", PC_TARGET: "X8", METRO_TARGET: "Windows", PURCHASE_TYPE_RENT: "Rent", PURCHASE_TYPE_BUY: "Buy", AVATAR_TYPE: "AvatarItem", PDLC_TYPE: "PDLCItem", GAME_ADDON_TYPE: "GameAddon", GAME_DEMO_TYPE: "GameDemo", GAME_VIDEO_TYPE: "GameVideo", GAMER_PICTURE_TYPE: "GamerPic", GAME_THEME_TYPE: "Theme", METRO_GAME_CONSUMABLE: "MetroGameConsumable", METRO_GAME_CONTENT: "MetroGameContent", METRO_GAME_ID: 62, METRO_AVATAR_ITEM_ID: 47, METRO_GAME_CONTENT_ID: 63, METRO_GAME_CONSUMABLE_ID: 64, XBOX_GAME_CONTENT: "Xbox360GameContent", XBOX_GAME: "Xbox360Game", XBOX_GAME_TRIAL: "XboxGameTrial", XBOX_GAME_DEMO: "Xbox360GameDemo", XBOX_THEME: "XboxTheme", XBOX_GAMER_TILE: "XboxGamerTile", XBOX_GAME_VIDEO: "XboxGameVideo", XBOX_GAME_TRAILER: "XboxGameTrailer", XBOX_GAME_CONTENT_ID: 18, XBOX_GAME_ID: 1, XBOX_ARCADE_ID: 23, XBOX_INDIE_ID: 37, XBOX_GAME_TRIAL_ID: 5, XBOX_GAME_DEMO_ID: 19, XBOX_THEME_ID: 20, XBOX_GAMER_TILE_ID: 22, XBOX_GAME_VIDEO_ID: 30, GAME_TYPE: "Game", MOVIE_TYPE: "Movie", TV_EPISODE_TYPE: "TVEpisode", TV_SEASON_TYPE: "TVSeason", ALBUM_TYPE: "Album", TRACK_TYPE: "Track", WATCH_ON_CONSOLE_TARGET: "360", WATCH_ON_PC_TARGET: "X8", DELIVERY_FORMAT_STREAMING: "Streaming", ERROR_CONTENT_ALREADY_OWNED: "CONTENT_ALREADY_OWNED", ERROR_SIGN_IN_FAILED: "SIGN_IN_FAILED", SUCCESS: "SUCCESS", FAILURE: "FAILURE", CANCELLED: "CANCELLED", ERROR_BLOCK_PURCHASE: "BLOCK_PURCHASE", ERROR_NO_PURCHASE_FLOW_PROVIDER: "NO_PURCHASE_FLOW_PROVIDER", ERROR_NO_PURCHASE_FLOW_EXP: "NO_PURCHASE_FLOW_EXP", LicenseRightMap: {
                _scriptLicenseRights: null, _delayLoadScriptLicenseRights: function _delayLoadScriptLicenseRights() {
                        if (!MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._scriptLicenseRights)
                            MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._scriptLicenseRights = [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Subscription, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SubscriptionFree, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.TransferToPortableDevice, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PreviewStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Trial, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.FreeStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Download, ]
                    }, toNative: function toNative(licenseRight) {
                        if (typeof(licenseRight) === "number")
                            return licenseRight;
                        if (typeof(licenseRight) !== "string")
                            return Microsoft.Entertainment.Marketplace.MarketplaceMediaRights.unknownMediaRight;
                        MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._delayLoadScriptLicenseRights();
                        return MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._scriptLicenseRights.indexOf(licenseRight)
                    }, toScript: function toScript(licenseRight) {
                        if (typeof(licenseRight) === "string")
                            return licenseRight;
                        MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._delayLoadScriptLicenseRights();
                        if (typeof(licenseRight) !== "number" || licenseRight < 0 || licenseRight >= MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._scriptLicenseRights.length)
                            return null;
                        return MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap._scriptLicenseRights[licenseRight]
                    }, ModernLicenseRight: {
                        Invalid: 0, AlbumPurchase: 100, Download: 200, FreeStream: 300, FreeStreamLimitExceeded: 301, Preview: 400, PreviewStream: 500, Purchase: 600, PurchaseStream: 700, Rent: 800, RentStream: 900, Root: 1000, SeasonPurchase: 1100, SeasonPurchaseStream: 1200, Stream: 1300, Subscription: 1400, SubscriptionFree: 1500, TakeDown: 1600, TransferToPortableDevice: 1700, Trial: 1800
                    }, fromModernToNative: function fromModernToNative(licenseRight) {
                        var LicenseRightMap = MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap;
                        var MarketplaceRight = MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight;
                        switch (licenseRight) {
                            case LicenseRightMap.ModernLicenseRight.AlbumPurchase:
                                return LicenseRightMap.toNative(MarketplaceRight.AlbumPurchase);
                            case LicenseRightMap.ModernLicenseRight.Download:
                                return LicenseRightMap.toNative(MarketplaceRight.Download);
                            case LicenseRightMap.ModernLicenseRight.FreeStream:
                                return LicenseRightMap.toNative(MarketplaceRight.FreeStream);
                            case LicenseRightMap.ModernLicenseRight.Preview:
                                return LicenseRightMap.toNative(MarketplaceRight.Preview);
                            case LicenseRightMap.ModernLicenseRight.PreviewStream:
                                return LicenseRightMap.toNative(MarketplaceRight.PreviewStream);
                            case LicenseRightMap.ModernLicenseRight.Purchase:
                                return LicenseRightMap.toNative(MarketplaceRight.Purchase);
                            case LicenseRightMap.ModernLicenseRight.PurchaseStream:
                                return LicenseRightMap.toNative(MarketplaceRight.PurchaseStream);
                            case LicenseRightMap.ModernLicenseRight.Rent:
                                return LicenseRightMap.toNative(MarketplaceRight.Rent);
                            case LicenseRightMap.ModernLicenseRight.RentStream:
                                return LicenseRightMap.toNative(MarketplaceRight.RentStream);
                            case LicenseRightMap.ModernLicenseRight.SeasonPurchase:
                                return LicenseRightMap.toNative(MarketplaceRight.SeasonPurchase);
                            case LicenseRightMap.ModernLicenseRight.SeasonPurchaseStream:
                                return LicenseRightMap.toNative(MarketplaceRight.SeasonPurchaseStream);
                            case LicenseRightMap.ModernLicenseRight.Stream:
                                return LicenseRightMap.toNative(MarketplaceRight.Stream);
                            case LicenseRightMap.ModernLicenseRight.Subscription:
                                return LicenseRightMap.toNative(MarketplaceRight.Subscription);
                            case LicenseRightMap.ModernLicenseRight.SubscriptionFree:
                                return LicenseRightMap.toNative(MarketplaceRight.SubscriptionFree);
                            case LicenseRightMap.ModernLicenseRight.TransferToPortableDevice:
                                return LicenseRightMap.toNative(MarketplaceRight.TransferToPortableDevice);
                            case LicenseRightMap.ModernLicenseRight.Trial:
                                return LicenseRightMap.toNative(MarketplaceRight.Trial);
                            case LicenseRightMap.ModernLicenseRight.Invalid:
                            case LicenseRightMap.ModernLicenseRight.FreeStreamLimitExceeded:
                            case LicenseRightMap.ModernLicenseRight.Root:
                            case LicenseRightMap.ModernLicenseRight.TakeDown:
                            default:
                                throw new Error("Unsupported license right.");
                        }
                    }
            }, Error: {
                NS_E_EXPLICIT_CONTENT_DOWNLOAD_BLOCKED: (0xC00D1393 - 0xFFFFFFFF - 1), NS_E_ERROR_CANCELLED_HR_FROM_WIN32: (0x800704c7 - 0xFFFFFFFF - 1), NS_E_ERROR_NO_SUCH_USER_HR_FROM_WIN32: (0x80070525 - 0xFFFFFFFF - 1)
            }, displayPurchaseBlockingDialog: function displayPurchaseBlockingDialog(mediaItem) {
                if (!MS.Entertainment.Utilities.isVideoApp)
                    return WinJS.Promise.wrap(false);
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.purchaseHistory)) {
                    var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                    if (purchaseHistoryService.inPurchaseFlow)
                        return WinJS.Promise.wrap(true)
                }
                MS.Entertainment.UI.PurchaseHistoryService.enterPurchaseFlowActivity();
                MS.Entertainment.assert(mediaItem, "PurchaseHelpers: Invalid mediaItem passed into displayPurchaseBlockingDialog");
                var displaySL2KCertBlock = WinJS.Promise.wrap(false);
                if (MS.Entertainment.Utilities.isVideoApp2 && !MS.Entertainment.isAppModeOverride && !MS.Entertainment.Utilities.supportsProtectedContent) {
                    var completionSignal = new MS.Entertainment.UI.Framework.Signal;
                    MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_VIDEO2_PURCHASE_WARNING_TITLE), String.load(String.id.IDS_VIDEO2_PURCHASE_WARNING_BODY), {
                        defaultButtonIndex: 1, cancelButtonIndex: 1, autoSetFocus: true, useGoBackForVoice: true, buttons: [{
                                    title: String.load(String.id.IDS_OK_BUTTON), execute: function(dialog) {
                                            dialog.hide();
                                            completionSignal.complete(false)
                                        }
                                }, {
                                    title: String.load(String.id.IDS_CANCEL_BUTTON), execute: function(dialog) {
                                            dialog.hide();
                                            completionSignal.complete(true)
                                        }
                                }, ]
                    });
                    displaySL2KCertBlock = completionSignal.promise
                }
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                return displaySL2KCertBlock.then(function onDisplaySL2KDialog(blockFor2KCert) {
                        if (blockFor2KCert)
                            return {sl2KBlocked: true};
                        var signedInSignal = new MS.Entertainment.UI.Framework.Signal;
                        var signedInBindings;
                        var signInPromise;
                        if (signIn.isSigningIn) {
                            signedInBindings = WinJS.Binding.bind(signIn, {isSignedIn: function onSignedIn() {
                                    if (!signedInBindings)
                                        return;
                                    signedInBindings.cancel();
                                    signedInBindings = null;
                                    signedInSignal.complete()
                                }});
                            signInPromise = signedInSignal.promise
                        }
                        else
                            signInPromise = signIn.signIn();
                        return signInPromise.then(function onSignInComplete(value) {
                                var successfulSignIn = signIn.isSignedIn && !signIn.isSigningOut;
                                var showRegionMismatchDialog = false;
                                var navigationService = MS.Entertainment.Utilities.isVideoApp2 && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                if (MS.Entertainment.Utilities.isVideoApp2)
                                    showRegionMismatchDialog = successfulSignIn && !MS.Entertainment.Utilities.appRegionMatchesMachineRegion();
                                if (showRegionMismatchDialog)
                                    return MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_VIDEO2_REGION_WARNING_TITLE), String.load(String.id.IDS_VIDEO2_REGION_WARNING_BODY), {dismissOnNavigateDelay: 30000}).then(function onDialogDismissed() {
                                            return {regionBlocked: true}
                                        });
                                else if (navigationService && navigationService.checkUserLocation(MS.Entertainment.UI.Monikers.root))
                                    return WinJS.Promise.wrap({navigatedAway: true});
                                else if (successfulSignIn) {
                                    var mediaItemsToCheck = (mediaItem && mediaItem.isBundle) ? mediaItem.bundledItems : [mediaItem];
                                    var purchasePromises = mediaItemsToCheck.map(function checkItem(mediaItem) {
                                            if (!mediaItem)
                                                return WinJS.Promise.as();
                                            return this._getDatabaseAndServiceRights(mediaItem)
                                        }.bind(this));
                                    return WinJS.Promise.join(purchasePromises).then(function onComplete(completedArray) {
                                            if (!completedArray || !Array.isArray(completedArray))
                                                return WinJS.Promise.wrapError(new Error("Invalid result returned from promise chain"));
                                            var totalItems = 0;
                                            var databaseHasAnyRights = 0;
                                            var serviceRights = 0;
                                            var serviceFailures = false;
                                            var aggregatedResults = {
                                                    isFullyOwnedInDb: false, isFullyOwnedInCloud: false, allItemsFoundOnce: true
                                                };
                                            completedArray.forEach(function aggregateResults(completePromise) {
                                                if (!completePromise)
                                                    return;
                                                totalItems += 1;
                                                var completedPromiseDbRights = completePromise.databaseRights;
                                                var hasDatabaseRights = completedPromiseDbRights.canPurchaseDownload || completedPromiseDbRights.canPurchaseStream || completedPromiseDbRights.canRentDownload || completedPromiseDbRights.canRentStream;
                                                databaseHasAnyRights += hasDatabaseRights ? 1 : 0;
                                                serviceRights += WinJS.Utilities.getMember("serviceRights.addedEntitlements", completePromise) ? 1 : 0;
                                                if (WinJS.Utilities.getMember("serviceRights.hasFailures", completePromise)) {
                                                    serviceFailures = true;
                                                    return
                                                }
                                                if (!databaseHasAnyRights && !serviceRights)
                                                    aggregatedResults.allItemsFoundOnce = false
                                            });
                                            aggregatedResults.isFullyOwnedInDb = (databaseHasAnyRights >= totalItems);
                                            aggregatedResults.isFullyOwnedInCloud = (serviceRights >= totalItems);
                                            var telemetryParameterArray = [];
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseTotalItems, parameterValue: totalItems
                                            });
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseDatabaseRights, parameterValue: databaseHasAnyRights
                                            });
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseServicePurchaseRights, parameterValue: serviceRights
                                            });
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseServiceFailure, parameterValue: serviceFailures
                                            });
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseRentalConfigSetting, parameterValue: configurationManager.service.blockVideoRentalsDuringGrovel
                                            });
                                            telemetryParameterArray.push({
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BlockPurchaseAllItemFoundOnce, parameterValue: aggregatedResults.allItemsFoundOnce
                                            });
                                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseInventoryCheck, mediaItem, null, telemetryParameterArray);
                                            if (serviceFailures)
                                                return WinJS.Promise.wrapError(new Error("RefreshAsync had a service Failure"));
                                            return aggregatedResults
                                        }.bind(this))
                                }
                                else
                                    return WinJS.Promise.wrapError(new Error("User did not sign in during purchase attempt"))
                            }.bind(this))
                    }.bind(this)).then(function onServiceEntitlementsCheck(contentRights) {
                        contentRights = contentRights || {};
                        if (contentRights.regionBlocked) {
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseRegionBlocked, mediaItem);
                            return true
                        }
                        if (contentRights.navigatedAway) {
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseNavigatedAway, mediaItem);
                            return true
                        }
                        if (contentRights.sl2KBlocked) {
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseNoSL2K, mediaItem);
                            return true
                        }
                        var blockPurchaseDialog = false;
                        if (contentRights.isFullyOwnedInDb) {
                            blockPurchaseDialog = true;
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseFullyOwnedInDb, mediaItem)
                        }
                        else if (contentRights.isFullyOwnedInCloud) {
                            this._showNoPurchaseDuringGrovelMessageBox();
                            blockPurchaseDialog = true;
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseFullyOwnedInCloud, mediaItem)
                        }
                        else if (contentRights.allItemsFoundOnce) {
                            this._showNoPurchaseDuringGrovelMessageBox();
                            blockPurchaseDialog = true;
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseAllItemsFoundOnce, mediaItem)
                        }
                        if (!blockPurchaseDialog)
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseAllowed, mediaItem);
                        return blockPurchaseDialog
                    }.bind(this)).then(function returnBlockDialog(blockPurchaseDialog) {
                        if (blockPurchaseDialog)
                            MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false);
                        return blockPurchaseDialog
                    }, function onError(error) {
                        var blockPurchaseOnServiceFailure = configurationManager.service.blockPurchaseOnServiceFailure;
                        var isServiceFailure;
                        if (!WinJS.Promise.isCanceledError(error) && error !== MS.Entertainment.Platform.PurchaseHelpers.Error.NS_E_ERROR_CANCELLED_HR_FROM_WIN32 && error !== MS.Entertainment.Platform.PurchaseHelpers.Error.NS_E_ERROR_NO_SUCH_USER_HR_FROM_WIN32 && !Array.isArray(error)) {
                            MS.Entertainment.fail("displayPurchaseBlockingDialog failed with error: " + ((error && error.message) || error));
                            this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseErrorGeneric, mediaItem, error)
                        }
                        if (error && Array.isArray(error))
                            for (var i = 0; i < error.length; i++) {
                                var serviceRightsQuery = error[i] && error[i].serviceRights;
                                if (serviceRightsQuery instanceof Error && !WinJS.Promise.isCanceledError(serviceRightsQuery)) {
                                    isServiceFailure = true;
                                    MS.Entertainment.fail("Inventory call for purchased items failed with error code: " + serviceRightsQuery.number + " and message: " + serviceRightsQuery.message);
                                    this._sendPurchaseBlockTelemetry(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.BlockPurchaseErrorPurchase, mediaItem, serviceRightsQuery)
                                }
                            }
                        if (isServiceFailure && blockPurchaseOnServiceFailure)
                            MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_PURCHASE_ERROR_MESSAGE_TITLE), String.load(String.id.IDS_PURCHASE_ERROR_MESSAGE));
                        var blockPurchase = (!signIn.isSignedIn || signIn.isSigningOut || blockPurchaseOnServiceFailure);
                        if (blockPurchase)
                            MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true);
                        return blockPurchase
                    }.bind(this))
            }, _sendPurchaseBlockTelemetry: function _sendPurchaseBlockTelemetry(telemetryEvent, media, error, telemetryParameterArray) {
                var telemetryParameterArray = telemetryParameterArray || [];
                if (!MS.Entertainment.Utilities.isEmptyGuid(media.canonicalId))
                    telemetryParameterArray.push({
                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.BingMediaId, parameterValue: media.canonicalId
                    });
                if (!MS.Entertainment.Utilities.isEmptyGuid(media.zuneId))
                    telemetryParameterArray.push({
                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProviderMediaId, parameterValue: media.zuneId
                    });
                if (error && error.message)
                    telemetryParameterArray.push({
                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Error, parameterValue: error.message
                    });
                if (error && error.number)
                    telemetryParameterArray.push({
                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, parameterValue: error.number
                    });
                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(telemetryEvent, telemetryParameterArray)
            }, freePurchaseFlow: function freePurchaseFlow(mediaItem, offerId, currencyCode, purchaseType, startPlayback, signedOffer, offer, playbackSource) {
                MS.Entertainment.Utilities.assert(mediaItem, "freePurchaseFlow requires a mediaItem");
                if (!playbackSource)
                    playbackSource = MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.details;
                var mediaIsTVSeason = MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem);
                var productGuid = mediaIsTVSeason ? mediaItem.edsId || mediaItem.canonicalId : mediaItem.serviceId || mediaItem.zuneId;
                var commonTelemetryParams = [{
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: MS.Entertainment.Utilities.Telemetry.getCorrelationId(productGuid)
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PurchaseFlowId, parameterValue: Microsoft.Entertainment.Marketplace.Marketplace.generateGuid()
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: productGuid || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ParentProductGuid, parameterValue: MS.Entertainment.Utilities.Telemetry.getParentProductGuid(mediaItem)
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignedOfferGuid, parameterValue: offerId || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DeliveryFormat, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.DELIVERY_FORMAT_STREAMING
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DistributionRight, parameterValue: purchaseType || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DisplayPrice, parameterValue: WinJS.Utilities.getMember("price", offer) || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PageURI, parameterValue: MS.Entertainment.Utilities.getCurrentUserLocation()
                        }];
                var navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                var fullScreenNowPlayingOptions = {
                        mediaItem: mediaItem, showNotifications: false
                    };
                var didNavigate = navigation.navigateTo(MS.Entertainment.UI.Monikers.fullScreenNowPlaying, null, null, fullScreenNowPlayingOptions);
                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                var signInPromise = signIn.signIn();
                return signInPromise.then(function signInComplete(value) {
                        if (value === MS.Entertainment.Utilities.SignIn.SignInResult.success)
                            return MS.Entertainment.Platform.PurchaseHelpers.getItemPurchaseAndRentStateAsync(mediaItem, true).then(function onGetItemPurchaseAndRentState(state) {
                                    var ownItem = (state.canPurchaseDownload || state.canPurchaseStream);
                                    if (ownItem) {
                                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_CONTENT_ALREADY_OWNED
                                                }]);
                                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                                        MS.Entertainment.Platform.PlaybackHelpers.playMedia2(mediaItem, {
                                            doNotNavigate: didNavigate, sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, startPositionMsec: 0, showImmersive: true, playbackSource: playbackSource, immersiveOptions: {
                                                    sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, startFullScreen: true
                                                }
                                        });
                                        return WinJS.Promise.wrapError("Content Already Owned")
                                    }
                                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                    if (signedInUser.isParentallyControlled)
                                        return WinJS.Promise.wrapError("Parental Controlled User");
                                    if (MS.Entertainment.Utilities.isVideoApp2) {
                                        var currentUser = signIn.getAppCurrentUser();
                                        return Windows.Xbox.ApplicationModel.Store.Product.checkPrivilegeAsync(currentUser, 193, false, String.empty).then(function success(result) {
                                                if (result === Windows.Xbox.ApplicationModel.Store.PrivilegeCheckResult.restricted)
                                                    return WinJS.Promise.wrapError("Free Content Blocked User");
                                                return WinJS.Promise.wrap()
                                            }, function error() {
                                                return WinJS.Promise.wrapError("Unexpected Error")
                                            })
                                    }
                                    return WinJS.Promise.wrap()
                                });
                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_SIGN_IN_FAILED
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                        return WinJS.Promise.wrapError("Sign in Failed")
                    }, function signInError(error) {
                        if (didNavigate) {
                            navigation.navigateBack();
                            didNavigate = false
                        }
                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_SIGN_IN_FAILED
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                        return WinJS.Promise.wrapError("Sign in Failed")
                    }).then(function signIn_complete() {
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseReviewStart, commonTelemetryParams);
                        return Microsoft.Entertainment.Fulfillment.Video.Entitlements.purchaseOfferAsync(signedOffer)
                    }).then(function purchaseOfferAsync_complete() {
                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.SUCCESS
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray);
                        MS.Entertainment.Platform.PurchaseHelpers.downloadClosedCaptionFiles(mediaItem);
                        return MS.Entertainment.Platform.PurchaseHelpers.addMedia(mediaItem, [offerId], true)
                    }).then(function addMediaComplete() {
                        if (startPlayback)
                            if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason) {
                                if (mediaItem.episodes && mediaItem.episodes.count > 0)
                                    mediaItem.episodes.itemsFromIndex(0, 0, mediaItem.episodes.count).done(function gotLatestEpisode(latestEpisodes) {
                                        if (latestEpisodes && latestEpisodes.items && latestEpisodes.items.length > 0) {
                                            var firstEpisode = null;
                                            var i = 0;
                                            for (i = 0; i < latestEpisodes.items.length; i++) {
                                                var episode = latestEpisodes.items[i].data;
                                                if (episode.episodeNumber !== 0) {
                                                    firstEpisode = episode;
                                                    break
                                                }
                                            }
                                            if (!firstEpisode)
                                                firstEpisode = latestEpisodes.items[0].data;
                                            if (episode)
                                                MS.Entertainment.Platform.PlaybackHelpers.playMedia2(episode, {
                                                    doNotNavigate: didNavigate, sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, startPositionMsec: 0, showImmersive: true, playbackSource: playbackSource, immersiveOptions: {
                                                            sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, startFullScreen: true
                                                        }
                                                })
                                        }
                                    })
                            }
                            else {
                                var tunerConfigSignal = new MS.Entertainment.UI.Framework.Signal;
                                if (MS.Entertainment.Utilities.isVideoApp2) {
                                    var configuration = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                    var minDate = new Date(Date.now() - 24 * 60 * 60 * 1000);
                                    if (configuration.service.configLastDownload < minDate) {
                                        var tunerConfigDownloaded = function tunerConfigDownloaded() {
                                                tunerConfigSignal.complete();
                                                MS.Entertainment.FeatureEnablement._featureEnablement.removeEventListener("featureschangedevent", tunerConfigDownloaded, false)
                                            };
                                        MS.Entertainment.FeatureEnablement._featureEnablement.addEventListener("featureschangedevent", tunerConfigDownloaded, false);
                                        (new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement).checkForNewFeatures()
                                    }
                                    else
                                        tunerConfigSignal.complete()
                                }
                                else
                                    tunerConfigSignal.complete();
                                tunerConfigSignal.promise.done(function playTheMedia() {
                                    MS.Entertainment.Platform.PlaybackHelpers.playMedia2(mediaItem, {
                                        doNotNavigate: didNavigate, sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, startPositionMsec: 0, showImmersive: true, playbackSource: playbackSource, immersiveOptions: {
                                                sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, startFullScreen: true
                                            }
                                    })
                                })
                            }
                    }, function purchaseFreeOfferError(error) {
                        if (didNavigate) {
                            navigation.navigateBack();
                            didNavigate = false
                        }
                        if (error !== "Sign in Failed" && error !== "Content Already Owned") {
                            var target = MS.Entertainment.Utilities.isApp1 ? MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET : MS.Entertainment.Platform.PurchaseHelpers.CONSOLE_TARGET;
                            MS.Entertainment.Platform.PurchaseHelpers.launchPurchaseFlow(mediaItem, target, purchaseType, null, offerId, null, null, signedOffer)
                        }
                    })
            }, launchPurchaseFlow: function launchPurchaseFlow(mediaItem, target, purchaseType, eventHandlers, offerId, returnUri, gamerTag, signedOffer, offer, fireErrorOnCancel) {
                if (!offerId || !signedOffer) {
                    MS.Entertainment.fail("PurchaseHelpers: No offerId or signedOffer defined");
                    if (eventHandlers && eventHandlers.onShowWebHostDialogComplete)
                        eventHandlers.onShowWebHostDialogComplete();
                    return
                }
                var mediaIsTVSeason = MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem);
                var productGuid = mediaIsTVSeason ? mediaItem.edsId || mediaItem.canonicalId : mediaItem.serviceId || mediaItem.zuneId;
                var purchaseFlowId = Microsoft.Entertainment.Marketplace.Marketplace.generateGuid();
                var commonTelemetryParams = [{
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: MS.Entertainment.Utilities.Telemetry.getCorrelationId(productGuid)
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PurchaseFlowId, parameterValue: purchaseFlowId
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: productGuid || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ParentProductGuid, parameterValue: MS.Entertainment.Utilities.Telemetry.getParentProductGuid(mediaItem)
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignedOfferGuid, parameterValue: offerId || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DistributionRight, parameterValue: purchaseType || String.empty
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PageURI, parameterValue: MS.Entertainment.Utilities.getCurrentUserLocation()
                        }, {
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DisplayPrice, parameterValue: WinJS.Utilities.getMember("price", offer) || String.empty
                        }];
                if (!MS.Entertainment.UI.NetworkStatusService.isOnline())
                {
                    var error = MS.Entertainment.Platform.Playback.Error.NS_E_WMPIM_USEROFFLINE;
                    MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_FAILED_PANEL_HEADER), error.code);
                    var telemetryParameterArray = commonTelemetryParams.concat([{
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, parameterValue: error.code
                            }, {
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: error.name
                            }]);
                    MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                    if (eventHandlers && eventHandlers.onShowWebHostDialogComplete)
                        eventHandlers.onShowWebHostDialogComplete();
                    return
                }
                var serviceId = mediaItem.hasZuneId ? mediaItem.zuneId : mediaItem.serviceId;
                var unsnappingPromise;
                if (!target)
                    target = this.PC_TARGET;
                var indivPromise = MS.Entertainment.Utilities.isVideoApp ? MS.Entertainment.Utilities.DRM.individualizationAsync() : WinJS.Promise.as();
                WinJS.Promise.join({
                    blockPurchase: MS.Entertainment.Platform.PurchaseHelpers.displayPurchaseBlockingDialog(mediaItem), indivPromise: indivPromise
                }).done(function(args) {
                    if (args.blockPurchase) {
                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_BLOCK_PURCHASE
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                        if (eventHandlers && eventHandlers.onShowWebHostDialogComplete)
                            eventHandlers.onShowWebHostDialogComplete();
                        return
                    }
                    var flowProvider;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.purchaseFlowProvider))
                        flowProvider = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseFlowProvider);
                    if (flowProvider) {
                        var purchaseFlow = flowProvider.getPurchaseFlow(mediaItem, serviceId, target, purchaseType, offerId, returnUri, gamerTag);
                        if (purchaseFlow && purchaseFlow.purchaseExp) {
                            if (eventHandlers) {
                                purchaseFlow.purchaseExp.onStartEvent = eventHandlers.onStartEvent;
                                purchaseFlow.purchaseExp.onMessageEvent = eventHandlers.onMessageEvent;
                                purchaseFlow.purchaseExp.onErrorEvent = eventHandlers.onErrorEvent;
                                purchaseFlow.purchaseExp.onFinishedEvent = eventHandlers.onFinishedEvent;
                                purchaseFlow.purchaseExp.onCancelEvent = eventHandlers.onCancelEvent;
                                purchaseFlow.purchaseExp.onPageLoadEvent = eventHandlers.onPageLoadEvent;
                                purchaseFlow.purchaseExp.onMediaAddedEvent = eventHandlers.onMediaAddedEvent
                            }
                            if (Windows.UI.ViewManagement.ApplicationView && Windows.UI.ViewManagement.ApplicationView.tryUnsnap())
                                unsnappingPromise = WinJS.Promise.timeout();
                            WinJS.Promise.as(unsnappingPromise).then(function applicationIsUnsnapped() {
                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseReviewStart, commonTelemetryParams);
                                purchaseFlow.purchaseExp.mediaItem = mediaItem;
                                purchaseFlow.purchaseExp.offerIds = [offerId];
                                return MS.Entertainment.UI.Shell.showWebHostDialog(null, {
                                        desiredLeft: "0%", desiredTop: null, desiredHeight: (new Microsoft.Entertainment.Configuration.ConfigurationManager).service.modernWebBlendHeight, showBackButton: false, showCancelButton: false
                                    }, {
                                        sourceUrl: String.empty, authenticatedSourceUrl: purchaseFlow.purchaseUrl, webHostExperience: purchaseFlow.purchaseExp, taskId: purchaseFlow.taskId, isDialog: true, offer: signedOffer, flowId: purchaseFlowId, finishedListener: function purchaseFlowSucceeded() {
                                                var telemetryParameterArray = commonTelemetryParams.concat([{
                                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.SUCCESS
                                                        }]);
                                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray)
                                            }, errorListener: function purchaseFlowError(errorCode) {
                                                var telemetryParameterArray = commonTelemetryParams.concat([{
                                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.FAILURE
                                                        }, {
                                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SystemErrorCode, parameterValue: errorCode
                                                        }]);
                                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray)
                                            }, cancelListener: function purchaseFlowCancelled() {
                                                var telemetryParameterArray = commonTelemetryParams.concat([{
                                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.FAILURE
                                                        }, {
                                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.CANCELLED
                                                        }]);
                                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray)
                                            }
                                    })
                            }).done(function showWebHostDialogComplete() {
                                if (offerId && mediaItem && MS.Entertainment.Utilities.isApp2 && !MS.Entertainment.isAppModeOverride) {
                                    MS.Entertainment.Platform.PurchaseHelpers.addMedia(mediaItem, [offerId], true);
                                    var telemetryParameterArray = commonTelemetryParams.concat([{
                                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.SUCCESS
                                            }]);
                                    MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray);
                                    MS.Entertainment.Utilities.Telemetry.logVideoPurchaseAttempt(mediaItem, offer, MS.Entertainment.Utilities.Telemetry.PurchaseStates.Succeeded)
                                }
                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false);
                                if (eventHandlers && eventHandlers.onShowWebHostDialogComplete)
                                    eventHandlers.onShowWebHostDialogComplete()
                            }, function showWebHostDialogError(error) {
                                var telemetryParameterArray = commonTelemetryParams.concat([{
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.Result, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.FAILURE
                                        }]);
                                if (error && error.name)
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: error.name
                                    });
                                if (error && error.number)
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SystemErrorCode, parameterValue: error.number
                                    });
                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseResponse, telemetryParameterArray);
                                var canceled = error && error.name === "Canceled";
                                var purchaseState;
                                if (canceled)
                                    purchaseState = MS.Entertainment.Utilities.Telemetry.PurchaseStates.Canceled;
                                else
                                    purchaseState = MS.Entertainment.Utilities.Telemetry.PurchaseStates.Failed;
                                MS.Entertainment.Utilities.Telemetry.logVideoPurchaseAttempt(mediaItem, offer, purchaseState);
                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(!canceled);
                                if ((!canceled || fireErrorOnCancel) && eventHandlers && eventHandlers.onShowWebHostDialogError)
                                    eventHandlers.onShowWebHostDialogError()
                            })
                        }
                        else {
                            var telemetryParameterArray = commonTelemetryParams.concat([{
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_NO_PURCHASE_FLOW_EXP
                                    }]);
                            MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                            MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                        }
                    }
                    else {
                        var telemetryParameterArray = commonTelemetryParams.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.Platform.PurchaseHelpers.ERROR_NO_PURCHASE_FLOW_PROVIDER
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                        MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                    }
                })
            }, getServiceIdAsync: function(fileItem) {
                var extraPropIds = [];
                extraPropIds.push("System.Media.UniqueFileIdentifier");
                return fileItem.properties.retrievePropertiesAsync(extraPropIds).then(function onRetrieveUniqueFileIdentifierSuccess(extraProps) {
                        var uniqueFileIdentifier = extraProps["System.Media.UniqueFileIdentifier"];
                        var serviceId = null;
                        if (uniqueFileIdentifier) {
                            var matched = uniqueFileIdentifier.match(/(X_id=\{[^;]*})/);
                            if (matched) {
                                serviceId = matched[0];
                                serviceId = serviceId.match(/{.+}/)[0];
                                serviceId = serviceId.substring(1, serviceId.length - 1)
                            }
                        }
                        return serviceId
                    }, function onRetrieveUniqueFileIdentifierError() {
                        return null
                    })
            }, queryMediaDetailForCacheItemAsync: function queryMediaDetailForCacheItemAsync(cacheItemWithData, mediaType) {
                if (!cacheItemWithData)
                    return WinJS.Promise.wrapError(new Error("Expected a valid item."));
                var getSmid;
                if (!cacheItemWithData.data.zuneId || MS.Entertainment.Utilities.isEmptyGuid(cacheItemWithData.data.zuneId))
                    if (!cacheItemWithData.data.fileItem)
                        return WinJS.Promise.wrapError(new Error("Expected a valid marketplace service id."));
                if (!mediaType) {
                    mediaType = cacheItemWithData.data.mediaType;
                    if (!mediaType)
                        return WinJS.Promise.wrapError(new Error("Expected a valid media type."))
                }
                var getSmid = WinJS.Promise.as(cacheItemWithData.data.zuneId);
                if (!cacheItemWithData.data.zuneId && cacheItemWithData.data.fileItem)
                    getSmid = this.getServiceIdAsync(cacheItemWithData.data.fileItem);
                return getSmid.then(function(smid) {
                        if (!cacheItemWithData.data.zuneId && !smid)
                            return WinJS.Promise.wrapError(new Error("Expected a valid marketplace service id."));
                        cacheItemWithData.data.zuneId = smid;
                        var detailProperty;
                        var query;
                        if (mediaType === Microsoft.Entertainment.Queries.ObjectType.track) {
                            detailProperty = "Music.SongDetails";
                            query = new MS.Entertainment.Data.Query.Music.SongDetails
                        }
                        else if (mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                            detailProperty = "Video.EdsDetailMovie";
                            query = new MS.Entertainment.Data.Query.Video.EdsDetailMovie
                        }
                        else
                            return WinJS.Promise.wrapError(new Error("The media type is not supported."));
                        if (cacheItemWithData.data[detailProperty])
                            return WinJS.Promise.wrap(cacheItemWithData.data[detailProperty]);
                        query.id = smid;
                        query.idType = cacheItemWithData.data.serviceIdType;
                        query.impressionGuid = cacheItemWithData.data.impressionGuid;
                        query.relevancyTrackingContent = cacheItemWithData.data.relevancyTrackingContent;
                        return query.execute().then(function(detail) {
                                cacheItemWithData.data[detailProperty] = detail;
                                return WinJS.Promise.wrap(detail)
                            })
                    })
            }, getPreferredRight: function getPreferredRight(rights, licenseRightsOrderedByPreference) {
                if (!Array.isArray(rights) || !Array.isArray(licenseRightsOrderedByPreference))
                    return null;
                for (var i = 0; i < licenseRightsOrderedByPreference.length; i++) {
                    var nativeLicenseRight = MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(licenseRightsOrderedByPreference[i]);
                    for (var j = 0; j < rights.length; j++)
                        if (nativeLicenseRight === MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(rights[j].licenseRight))
                            return rights[j]
                }
                return null
            }, filterRights: function filterRights(sourceRights, filterLicenseRights) {
                var rights = [];
                if (!Array.isArray(sourceRights))
                    return rights;
                if (!Array.isArray(filterLicenseRights) || filterLicenseRights.length === 0)
                    return sourceRights;
                for (var i = 0; i < filterLicenseRights.length; i++)
                    for (var j = 0; j < sourceRights.length; j++)
                        if (MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(filterLicenseRights[i]) === MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(sourceRights[j].licenseRight)) {
                            rights.push(sourceRights[j]);
                            break
                        }
                return rights
            }, mapLicenseRightArrayToNative: function mapLicenseRightArrayToNative(licenseRights) {
                var nativeLicenseRights = [];
                if (!Array.isArray(licenseRights))
                    return nativeLicenseRights;
                for (var i = 0; i < licenseRights.length; i++)
                    nativeLicenseRights.push(MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(licenseRights[i]));
                return nativeLicenseRights
            }, getAssetLocationsRequestInfo: function getAssetLocationsRequestInfo(serviceMediaId, rights, filterLicenseRights) {
                var requestInfo = {
                        serviceMediaIds: [], mediaInstanceIds: [], nativeLicenseRights: [], offerIds: []
                    };
                if (serviceMediaId && !MS.Entertainment.Utilities.isEmptyGuid(serviceMediaId)) {
                    var rights = MS.Entertainment.Platform.PurchaseHelpers.filterRights(rights, filterLicenseRights);
                    var mediaInstanceIds = [];
                    for (var i = 0; i < rights.length; i++) {
                        var mediaInstanceId = rights[i].mediaInstanceId;
                        var offerId = rights[i].offerId;
                        if (mediaInstanceId && !MS.Entertainment.Utilities.isEmptyGuid(mediaInstanceId)) {
                            requestInfo.serviceMediaIds.push(serviceMediaId);
                            requestInfo.mediaInstanceIds.push(mediaInstanceId);
                            requestInfo.nativeLicenseRights.push(MS.Entertainment.Platform.PurchaseHelpers.LicenseRightMap.toNative(rights[i].licenseRight));
                            requestInfo.offerIds.push((!offerId || MS.Entertainment.Utilities.isEmptyGuid(offerId)) ? null : offerId)
                        }
                    }
                }
                return requestInfo
            }, getAssetLocationsAsync: function getAssetLocationsAsync(serviceMediaId, rights, filterLicenseRights, autoActivateMachine, context, ticket, skipSubscriptionFiltering) {
                var requestInfo = MS.Entertainment.Platform.PurchaseHelpers.getAssetLocationsRequestInfo(serviceMediaId, rights, filterLicenseRights);
                return MS.Entertainment.Platform.PurchaseHelpers.getAssetLocationsUsingRequestInfoAsync(requestInfo, autoActivateMachine, context, ticket, skipSubscriptionFiltering)
            }, getAssetLocationsUsingRequestInfoAsync: function getAssetLocationsUsingRequestInfoAsync(requestInfo, autoActivateMachine, context, ticket, skipSubscriptionFiltering) {
                if (!requestInfo || !Array.isArray(requestInfo.mediaInstanceIds) || requestInfo.mediaInstanceIds.length === 0)
                    return WinJS.Promise.wrap([]);
                if (!Array.isArray(requestInfo.nativeLicenseRights) || requestInfo.mediaInstanceIds.length !== requestInfo.nativeLicenseRights.length)
                    return WinJS.Promise.wrapError(new Error("The input mediaInstanceIds and licenseRights must be arrays of equal length."));
                if (!Array.isArray(requestInfo.offerIds) || requestInfo.mediaInstanceIds.length !== requestInfo.offerIds.length)
                    return WinJS.Promise.wrapError(new Error("The input mediaInstanceIds and offerIds must be arrays of equal length."));
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                if (!skipSubscriptionFiltering && (!ticket || !configurationManager.service.lastSignedInUserSubscription))
                    for (var i = 0; i < requestInfo.nativeLicenseRights.length; i++)
                        switch (requestInfo.nativeLicenseRights[i]) {
                            case Microsoft.Entertainment.Marketplace.MarketplaceMediaRights.subscriptionDownload:
                            case Microsoft.Entertainment.Marketplace.MarketplaceMediaRights.subscriptionStream:
                                requestInfo.serviceMediaIds.splice(i, 1);
                                requestInfo.mediaInstanceIds.splice(i, 1);
                                requestInfo.nativeLicenseRights.splice(i, 1);
                                requestInfo.offerIds.splice(i, 1);
                                i--;
                                break
                        }
                if (requestInfo.mediaInstanceIds.length === 0)
                    return WinJS.Promise.wrap([]);
                if (requestInfo.nativeLicenseRights.length === 1 && requestInfo.nativeLicenseRights[0] === Microsoft.Entertainment.Marketplace.MarketplaceMediaRights.freeStream && !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                    ticket = null;
                requestInfo = {
                    serviceMediaIds: [requestInfo.serviceMediaIds[0]], mediaInstanceIds: [requestInfo.mediaInstanceIds[0]], nativeLicenseRights: [requestInfo.nativeLicenseRights[0]], offerIds: [requestInfo.offerIds[0]]
                };
                return Microsoft.Entertainment.Marketplace.Marketplace.getAssetLocationsAsync(ticket ? ticket : String.empty, requestInfo.serviceMediaIds, requestInfo.mediaInstanceIds, requestInfo.nativeLicenseRights, [], context ? [context] : [], !!autoActivateMachine).then(function getAssetLocationsAsync_complete(jsonAssetLocations) {
                        var assetLocations = JSON.parse(jsonAssetLocations).results;
                        assetLocations[0].offerId = requestInfo.offerIds[0];
                        return WinJS.Promise.wrap(assetLocations)
                    }.bind(this))
            }, ensurePreownedMediaAddedAsync: function ensurePreownedMediaAddedAsync(media) {
                var addMediaResult = MS.Entertainment.Platform.PurchaseHelpers.createAddMediaResult();
                if (!media || !media.mediaType || (!MS.Entertainment.Utilities.isMusicApp && !MS.Entertainment.Utilities.isVideoApp))
                    return WinJS.Promise.wrap(addMediaResult);
                var promise = WinJS.Promise.wrap();
                var mediaList = [];
                var zuneIdList = [];
                var virtualMediaList = null;
                switch (media.mediaType) {
                    case Microsoft.Entertainment.Queries.ObjectType.video:
                    case Microsoft.Entertainment.Queries.ObjectType.track:
                        if (media.inCollection)
                            addMediaResult.addMedia(media);
                        else if (media.hasZuneId) {
                            mediaList.push(media);
                            zuneIdList.push(media.zuneId)
                        }
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.album:
                        virtualMediaList = media.tracks;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                        virtualMediaList = media.episodes;
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.playlist:
                        virtualMediaList = media.tracks;
                        break;
                    default:
                        return WinJS.Promise.wrap(addMediaResult)
                }
                if (virtualMediaList)
                    promise = virtualMediaList.forEachAll(function itemsFromIndex_complete(args) {
                        var item = args.item.data;
                        if (item)
                            if (item.inCollection)
                                addMediaResult.addMedia(item);
                            else if (item.hasZuneId) {
                                mediaList.push(item);
                                zuneIdList.push(item.zuneId)
                            }
                    });
                return promise.then(function processMediaForAdding() {
                        if (!mediaList.length)
                            return WinJS.Promise.wrap(addMediaResult);
                        return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync(zuneIdList).then(function getMediaEntitlementsAsync_complete(result) {
                                var entitlements = JSON.parse(result).result.entitlements;
                                var promises = [];
                                for (var i = 0; i < mediaList.length; i++)
                                    if (MS.Entertainment.Utilities.isVideoApp) {
                                        var offerIds = [];
                                        if (entitlements[i].purchase.stream.isAvailable)
                                            offerIds.push(entitlements[i].purchase.stream.offerId);
                                        if (entitlements[i].purchase.download.isAvailable)
                                            offerIds.push(entitlements[i].purchase.download.offerId);
                                        if (entitlements[i].rent.stream.isAvailable)
                                            offerIds.push(entitlements[i].rent.stream.offerId);
                                        if (entitlements[i].rent.download.isAvailable)
                                            offerIds.push(entitlements[i].rent.download.offerId);
                                        if (offerIds.length > 0)
                                            promises.push(MS.Entertainment.Platform.PurchaseHelpers.addMedia(mediaList[i], offerIds).then(function addMedia_complete(addMediaResultInner) {
                                                addMediaResult.concat(addMediaResultInner);
                                                return WinJS.Promise.wrap(addMediaResultInner)
                                            }))
                                    }
                                    else if (entitlements[i].purchase.isAvailable || entitlements[i].rent.isAvailable || (entitlements[i].hasPurchase && entitlements[i].canFullyDownload))
                                        promises.push(MS.Entertainment.Platform.PurchaseHelpers.addMedia(mediaList[i]).then(function addMedia_complete(addMediaResultInner) {
                                            addMediaResult.concat(addMediaResultInner);
                                            return WinJS.Promise.wrap(addMediaResultInner)
                                        }));
                                return WinJS.Promise.join(promises).then(function addMedia_joinComplete() {
                                        return WinJS.Promise.wrap(addMediaResult)
                                    })
                            })
                    })
            }, addNonCollectionMediaToLibrary: function addNonCollectionMediaToLibrary(mediaItemsArray) {
                return MS.Entertainment.Platform.PurchaseHelpers._addNonCollectionMediaToLibrary(mediaItemsArray, false)
            }, tryAddNonCollectionMediaToLibrary: function tryAddNonCollectionMediaToLibrary(mediaItemsArray) {
                return MS.Entertainment.Platform.PurchaseHelpers._addNonCollectionMediaToLibrary(mediaItemsArray, true)
            }, _addNonCollectionMediaToLibrary: function _addNonCollectionMediaToLibrary(mediaItemsArray, ignoreErrors) {
                var serviceMediaIds = mediaItemsArray.map(function getServiceMediaId(mediaItem) {
                        return !MS.Entertainment.Utilities.isEmptyGuid(mediaItem.zuneId) ? mediaItem.zuneId : MS.Entertainment.Utilities.EMPTY_GUID
                    });
                var mediaTypes = mediaItemsArray.map(function getMediaType(mediaItem) {
                        return mediaItem.mediaType
                    });
                var mediaPropertySet = new Windows.Foundation.Collections.PropertySet;
                var propertySetPromises = mediaItemsArray.map(function populatePropertySets(mediaItem) {
                        return MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForMedia(mediaPropertySet, mediaItem)
                    });
                var marketplaceService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.marketplace);
                var addMedia = ignoreErrors ? marketplaceService.tryAddMedia : marketplaceService.addMedia;
                return WinJS.Promise.join(propertySetPromises).then(function propertySetPopulationComplete() {
                        return addMedia(serviceMediaIds, mediaTypes, [], mediaPropertySet, false)
                    }).then(function addMediaComplete(addMediaResult) {
                        var result = MS.Entertainment.Platform.PurchaseHelpers.parseJsonAddMediaResult(addMediaResult);
                        return WinJS.Promise.wrap(result)
                    })
            }, _populatePropertySetForArtist: function _populatePropertySetForArtist(artistPropertySet, artist) {
                var artistSimpleProperties = ["name", "hasSmartDJ", "hasSmartVJ", "imageResizeUri"];
                MS.Entertainment.Platform.PurchaseHelpers._addPropertiesToPropertySet(artistPropertySet, artist, artistSimpleProperties);
                if (artist.hasZuneId)
                    artistPropertySet["zuneId"] = artist.zuneId;
                if (artist.serviceIdType === MS.Entertainment.Data.Query.edsIdType.canonical)
                    artistPropertySet["bingId"] = artist.serviceId
            }, _populatePropertySetForAlbum: function _populatePropertySetForAlbum(propertySet, album) {
                MS.Entertainment.Platform.PurchaseHelpers.assert(album.hasZuneId, "Media passed into _populatePropertySetForAlbum does not have a valid zuneId");
                var albumPropertySet;
                var trackList = [];
                var albumSimpleProperties = ["imageResizeUri", "isExplicit", "name", "primaryGenreName", "releaseDate", "trackCount", "zuneId"];
                if (album.hasZuneId) {
                    albumPropertySet = MS.Entertainment.Platform.PurchaseHelpers._getOrCreatePropertySetWithKey(propertySet, album.zuneId);
                    MS.Entertainment.Platform.PurchaseHelpers._addPropertiesToPropertySet(albumPropertySet, album, albumSimpleProperties);
                    if (album.serviceIdType === MS.Entertainment.Data.Query.edsIdType.canonical)
                        albumPropertySet["bingId"] = album.serviceId;
                    if (album.rights)
                        MS.Entertainment.Platform.PurchaseHelpers._populateRightsForMedia(albumPropertySet, album);
                    if (album.artist) {
                        albumPropertySet["Artist"] = new Windows.Foundation.Collections.PropertySet;
                        MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForArtist(albumPropertySet["Artist"], album.artist)
                    }
                    if (album.tracks)
                        return album.tracks.forEachAll(function pushTrack(args) {
                                var track = args.item.data;
                                if (track) {
                                    trackList.push(track.zuneId);
                                    MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForTrack(propertySet, track)
                                }
                            }).then(function trackListPopulated() {
                                albumPropertySet["TrackList"] = trackList
                            }, function trackListError(e) {
                                albumPropertySet["TrackList"] = null
                            });
                    else
                        return WinJS.Promise.wrap()
                }
                return WinJS.Promise.wrap()
            }, _getOrCreatePropertySetWithKey: function _getOrCreatePropertySetWithKey(parentPropertySet, key) {
                if (!parentPropertySet.hasKey(key))
                    parentPropertySet[key] = new Windows.Foundation.Collections.PropertySet;
                return parentPropertySet[key]
            }, _addPropertiesToPropertySet: function _addPropertiesToPropertySet(propertySet, item, itemPropertiesList) {
                for (var itemProperty in itemPropertiesList)
                    propertySet[itemPropertiesList[itemProperty]] = item[itemPropertiesList[itemProperty]]
            }, _populateRightsForMedia: function _populateRightsForMedia(mediaPropertySet, media) {
                MS.Entertainment.Platform.PurchaseHelpers.assert(media.rights, "media did not have rights property");
                var rightsList = [];
                if (media.rights)
                    media.rights.forEach(function addRightToPropertySet(right) {
                        var rightPropertySet = new Windows.Foundation.Collections.PropertySet;
                        rightPropertySet["ProviderId"] = right.providerId;
                        rightPropertySet["LicenseRight"] = right.licenseRight;
                        rightPropertySet["Encoding"] = right.encoding;
                        rightPropertySet["MediaInstanceId"] = right.mediaInstanceId;
                        rightPropertySet["OfferId"] = right.offerId;
                        rightPropertySet["ClientTypes"] = right.clientTypes;
                        if (right.fulfillmentTicket)
                            rightPropertySet["FulfillmentTicket"] = right.fulfillmentTicket;
                        if (right.fulfillmentTicketExpirationDate)
                            rightPropertySet["FulfillmentTicketExpirationDate"] = right.fulfillmentTicketExpirationDate;
                        if (right.signedLicensePolicyTicket)
                            rightPropertySet["SignedLicensePolicyTicket"] = right.signedLicensePolicyTicket;
                        if (right.signedOffer)
                            rightPropertySet["SignedOffer"] = right.signedOffer;
                        rightsList.push(rightPropertySet)
                    });
                mediaPropertySet["Rights"] = rightsList
            }, _populatePropertySetForTrack: function _populatePropertySetForTrack(propertySet, track) {
                MS.Entertainment.Platform.PurchaseHelpers.assert(track.hasZuneId || track.fileItem, "Media passed into _populatePropertySetForMedia does not have a valid zuneId");
                var trackPropertySet;
                var trackSimpleProperties = ["durationSeconds", "genreName", "isExplicit", "imageResizeUri", "name", "releaseDate", "trackNumber", "zuneId"];
                if (track.hasZuneId) {
                    trackPropertySet = MS.Entertainment.Platform.PurchaseHelpers._getOrCreatePropertySetWithKey(propertySet, track.zuneId);
                    MS.Entertainment.Platform.PurchaseHelpers._addPropertiesToPropertySet(trackPropertySet, track, trackSimpleProperties);
                    if (track.artist) {
                        trackPropertySet["Artist"] = new Windows.Foundation.Collections.PropertySet;
                        MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForArtist(trackPropertySet["Artist"], track.artist)
                    }
                    if (track.rights)
                        MS.Entertainment.Platform.PurchaseHelpers._populateRightsForMedia(trackPropertySet, track);
                    if (track.serviceIdType === MS.Entertainment.Data.Query.edsIdType.canonical)
                        trackPropertySet["bingId"] = track.serviceId;
                    else if (track.serviceIdType === MS.Entertainment.Data.Query.edsIdType.amg)
                        trackPropertySet["amgId"] = track.serviceId;
                    if (track.album) {
                        if (track.album.artist) {
                            trackPropertySet["AlbumArtist"] = new Windows.Foundation.Collections.PropertySet;
                            MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForArtist(trackPropertySet["AlbumArtist"], track.album.artist)
                        }
                        trackPropertySet["albumZuneId"] = track.album.zuneId;
                        if (track.album.serviceIdType === MS.Entertainment.Data.Query.edsIdType.canonical)
                            trackPropertySet["albumBingId"] = track.album.serviceId;
                        trackPropertySet["albumName"] = track.album.name
                    }
                }
                return WinJS.Promise.wrap()
            }, _populatePropertySetForMedia: function _populatePropertySetForMedia(propertySet, media) {
                MS.Entertainment.Platform.PurchaseHelpers.assert(media.hasZuneId || media.fileItem, "Media passed into _populatePropertySetForMedia does not have a valid zuneId");
                var populatePromise;
                switch (media.mediaType) {
                    case Microsoft.Entertainment.Queries.ObjectType.album:
                        populatePromise = MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForAlbum(propertySet, media);
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.track:
                        populatePromise = MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForTrack(propertySet, media);
                        break;
                    default:
                        MS.Entertainment.Platform.PurchaseHelpers.assert(false, "Unknown mediaType passed to _populatePropertySetForMedia");
                        populatePromise = WinJS.Promise.wrap();
                        break
                }
                return populatePromise
            }, _showNoPurchaseDuringGrovelMessageBox: function _showNoPurchaseDuringGrovelMessageBox() {
                var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                var purchaseHistoryServiceIsGroveling = !!purchaseHistoryService.isGroveling;
                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.VideoPrePurchaseBlocked, [{
                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PurchaseHistoryServiceIsGroveling, parameterValue: purchaseHistoryServiceIsGroveling
                    }]);
                MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_DIALOG_PURCHASE_DURING_GROVEL_TITLE), String.load(String.id.IDS_DIALOG_PURCHASE_DURING_GROVEL_CAPTION));
                if (!purchaseHistoryServiceIsGroveling)
                    purchaseHistoryService.grovel()
            }, _getDatabaseAndServiceRights: function _getDatabaseAndServiceRights(mediaItem) {
                var i;
                var purchaseOfferIds = [];
                var rentalOfferIds = [];
                var defaultClientTypeFromApp = MS.Entertainment.Utilities.defaultClientTypeFromApp;
                var purchaseRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers.getMatchingRights(mediaItem, defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.SeasonPurchaseStream, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PurchaseStream, ], {
                        freeOnly: false, excludeFree: false, allowPartialRights: false, includeExpired: true, useUnfilteredRights: true
                    });
                var rentalRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers.getMatchingRights(mediaItem, defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Rent, MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.RentStream, ]);
                var filterToOfferIds = [];
                for (i = 0; i < purchaseRights.length; ++i) {
                    var currentRight = purchaseRights[i];
                    if (currentRight && filterToOfferIds.indexOf(currentRight.offerId) === -1) {
                        MS.Entertainment.assert(currentRight.offerId, "PurchaseHelpers: Invalid offerId: " + currentRight.offerId);
                        filterToOfferIds.push(currentRight.offerId)
                    }
                }
                for (i = 0; i < rentalRights.length; ++i) {
                    var currentRight = rentalRights[i];
                    if (currentRight && filterToOfferIds.indexOf(currentRight.offerId) === -1) {
                        MS.Entertainment.assert(currentRight.offerId, "PurchaseHelpers: Invalid offerId: " + currentRight.offerId);
                        filterToOfferIds.push(currentRight.offerId)
                    }
                }
                return WinJS.Promise.join({
                        databaseRights: MS.Entertainment.Platform.PurchaseHelpers.getItemPurchaseAndRentStateAsync(mediaItem, true), serviceRights: MS.Entertainment.UI.PurchaseHistoryService.refreshVideoOffersAsync(filterToOfferIds)
                    })
            }, addSubscriptionMedia: function addSubscriptionMedia(media) {
                MS.Entertainment.Platform.PurchaseHelpers.assert(media, "Invalid media item passed into addSubscriptionMedia");
                var serviceIds = [];
                var mediaTypes = [];
                var mediaItemsToHydrate = null;
                var getServiceIdsPromise = null;
                var populatePromise = null;
                var hasExplicitPrivilege = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).hasExplicitPrivilege;
                if (MS.Entertainment.Data.List.isListOrArray(media))
                    getServiceIdsPromise = MS.Entertainment.Data.List.listToArray(media).then(function _addServiceIdsToArray(mediaItemsArray) {
                        var fileTransferNotifications = null;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.fileTransferNotifications))
                            fileTransferNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransferNotifications);
                        var explicitContentBlocked = false;
                        var propertySetPromises = [];
                        var mediaPropertySet = new Windows.Foundation.Collections.PropertySet;
                        mediaItemsToHydrate = mediaItemsArray;
                        mediaItemsArray.forEach(function _getMediaData(mediaItem) {
                            var hydratePromise = WinJS.Promise.as();
                            if (MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(mediaItem)) {
                                mediaItem = mediaItem.track;
                                hydratePromise = mediaItem.hydrate()
                            }
                            propertySetPromises.push(hydratePromise.then(function _addMediaItem() {
                                MS.Entertainment.Platform.PurchaseHelpers.assert(mediaItem.hasZuneId, "Media passed into addSubscriptionMedia does not have a valid zuneId");
                                if (!hasExplicitPrivilege && mediaItem.isExplicit) {
                                    if (fileTransferNotifications)
                                        fileTransferNotifications.setItemError(mediaItem.zuneId, MS.Entertainment.Platform.PurchaseHelpers.Error.NS_E_EXPLICIT_CONTENT_DOWNLOAD_BLOCKED);
                                    explicitContentBlocked = true
                                }
                                else {
                                    serviceIds.push(mediaItem.zuneId);
                                    mediaTypes.push(mediaItem.mediaType)
                                }
                                if (mediaItem.hydrated)
                                    return MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForMedia(mediaPropertySet, mediaItem)
                            }))
                        });
                        if (!mediaTypes.length && explicitContentBlocked)
                            return WinJS.Promise.wrapError(MS.Entertainment.Platform.PurchaseHelpers.Error.NS_E_EXPLICIT_CONTENT_DOWNLOAD_BLOCKED);
                        return WinJS.Promise.join(propertySetPromises).then(function returnData() {
                                return {
                                        serviceIds: serviceIds, mediaTypes: mediaTypes, mediaPropertySet: (propertySetPromises.length === 0) ? null : mediaPropertySet
                                    }
                            })
                    });
                else {
                    MS.Entertainment.Platform.PurchaseHelpers.assert(media.hasZuneId, "Media passed into addSubscriptionMedia does not have a valid zuneId");
                    serviceIds.push(media.zuneId);
                    mediaTypes.push(media.mediaType);
                    mediaItemsToHydrate = [media];
                    var mediaPropertySet = new Windows.Foundation.Collections.PropertySet;
                    populatePromise = MS.Entertainment.Platform.PurchaseHelpers._populatePropertySetForMedia(mediaPropertySet, media);
                    getServiceIdsPromise = populatePromise.then(function returnData() {
                        return {
                                serviceIds: serviceIds, mediaTypes: mediaTypes, mediaPropertySet: mediaPropertySet
                            }
                    })
                }
                return getServiceIdsPromise.then(function addIds(data) {
                        if (data.serviceIds.length)
                            return Microsoft.Entertainment.Marketplace.Marketplace.addMedia(data.serviceIds, data.mediaTypes, [], data.mediaPropertySet, true);
                        else
                            return WinJS.Promise.wrapError()
                    }).then(function addSubscriptionMedia_complete(jsonAddMediaResult) {
                        var addMediaResult = MS.Entertainment.Platform.PurchaseHelpers.parseJsonAddMediaResult(jsonAddMediaResult);
                        return addMediaResult.hydrateLibraryInfoAsync(mediaItemsToHydrate).then(function hydrateLibraryIdsAsync_complete() {
                                return addMediaResult
                            })
                    })
            }, createAddMediaResult: function createAddMediaResult() {
                return {
                        mediaIdentifiers: [], dbMediaIds: [], dbMediaTypes: [], addMedia: function addMedia(media) {
                                this.concat({mediaIdentifiers: [{
                                            libraryId: media.libraryId, libraryType: media.mediaType, mediaId: media.zuneId
                                        }]})
                            }, concat: function concat(addMediaResult) {
                                var countAdded = 0;
                                if (addMediaResult && addMediaResult.mediaIdentifiers)
                                    for (var i = 0; i < addMediaResult.mediaIdentifiers.length; i++)
                                        if (!this.contains(addMediaResult.mediaIdentifiers[i].libraryId, addMediaResult.mediaIdentifiers[i].libraryType)) {
                                            var addMediaResultElement = addMediaResult.mediaIdentifiers[i];
                                            this.mediaIdentifiers.push({
                                                libraryId: addMediaResultElement.libraryId, libraryType: addMediaResultElement.libraryType, mediaId: addMediaResultElement.mediaId
                                            });
                                            this.dbMediaIds.push(addMediaResultElement.libraryId);
                                            this.dbMediaTypes.push(addMediaResultElement.libraryType);
                                            countAdded++
                                        }
                                return countAdded
                            }, contains: function contains(libraryId, libraryType) {
                                for (var i = 0; i < this.mediaIdentifiers.length; i++)
                                    if (this.mediaIdentifiers[i].libraryId === libraryId && this.mediaIdentifiers[i].libraryType === libraryType)
                                        return true;
                                return false
                            }, getLibraryIdFromServiceMediaId: function getLibraryIdFromServiceMediaId(mediaId) {
                                if (mediaId && typeof(mediaId) === "string") {
                                    mediaId = mediaId.toLowerCase();
                                    for (var i = 0; i < this.mediaIdentifiers.length; i++)
                                        if (this.mediaIdentifiers[i].mediaId.toLowerCase() === mediaId)
                                            return this.mediaIdentifiers[i].libraryId
                                }
                                return -1
                            }, _hydrateSingleLibraryInfoAsync: function _hydrateSingleLibraryInfoAsync(mediaItem) {
                                if (!mediaItem || !mediaItem.mediaType)
                                    return WinJS.Promise.as();
                                return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(mediaItem).then(function hydrateLibraryInfoAsyncComplete() {
                                        if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                                            return mediaItem.tracks;
                                        else if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason)
                                            return mediaItem.episodes
                                    }).then(function populateVirtualList(virtualList) {
                                        if (virtualList)
                                            return virtualList.itemsFromIndex(0, 0, virtualList.count)
                                    }).then(function hydrateListItems(list) {
                                        if (list) {
                                            var hydratedListItems = list.items.map(function hydrateListItem(item) {
                                                    return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(item.data)
                                                });
                                            return WinJS.Promise.join(hydratedListItems)
                                        }
                                    })
                            }, hydrateLibraryInfoAsync: function hydrateLibraryInfoAsync(media) {
                                var hydratePromise;
                                if (!MS.Entertainment.Data.List.isListOrArray(media))
                                    hydratePromise = this._hydrateSingleLibraryInfoAsync(media);
                                else
                                    hydratePromise = MS.Entertainment.Data.List.listToArray(media).then(function _gotMediaArray(mediaItemsArray) {
                                        if (mediaItemsArray.length) {
                                            var hydrateLibraryInfoPromises = mediaItemsArray.map(this._hydrateSingleLibraryInfoAsync.bind(this));
                                            return WinJS.Promise.join(hydrateLibraryInfoPromises)
                                        }
                                    }.bind(this)).then(function _absorbResult(){});
                                return WinJS.Promise.as(hydratePromise)
                            }
                    }
            }, parseJsonAddMediaResult: function parseJsonAddMediaResult(jsonAddMediaResult) {
                var addMediaResult = MS.Entertainment.Platform.PurchaseHelpers.createAddMediaResult();
                addMediaResult.concat(JSON.parse(jsonAddMediaResult));
                return addMediaResult
            }, addMedia: function addMedia(media, filterToOfferIds, inPurchaseFlow) {
                var serviceId = null;
                if (media)
                    serviceId = media.zuneId;
                if (!serviceId || MS.Entertainment.Utilities.isEmptyGuid(serviceId))
                    return WinJS.Promise.wrapError(new Error("Cannot add non-marketplace content to the collection."));
                if (inPurchaseFlow)
                    MS.Entertainment.UI.PurchaseHistoryService.enterPurchaseFlowActivity();
                var logPurchaseIngestionFailure = function(media, refreshAsyncResult) {
                        var telemetryParameterArray = [{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: media.mediaType
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaName, parameterValue: media.name
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SMID, parameterValue: media.serviceId
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: MS.Entertainment.Utilities.Telemetry.getCorrelationId(media.serviceId)
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: media.zuneId || media.serviceId || String.empty
                                }];
                        if (refreshAsyncResult) {
                            telemetryParameterArray.push({
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PurchaseEntitlementsFailureHasFailures, parameterValue: refreshAsyncResult.hasFailures
                            });
                            telemetryParameterArray.push({
                                parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.PurchaseEntitlementsFailureAddedEntitlements, parameterValue: refreshAsyncResult.addedEntitlements
                            })
                        }
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.PurchaseEntitlementsNotFound, telemetryParameterArray)
                    };
                MS.Entertainment.Platform.PurchaseHelpers.assert(!MS.Entertainment.Utilities.isVideoApp || (filterToOfferIds && filterToOfferIds.length > 0), "Offer ids are required when not using the add media ingestion flow.");
                if (MS.Entertainment.Utilities.isVideoApp && filterToOfferIds && filterToOfferIds.length > 0) {
                    var addMediaResult = MS.Entertainment.Platform.PurchaseHelpers.createAddMediaResult();
                    return MS.Entertainment.UI.PurchaseHistoryService.refreshVideoOffersAsync(filterToOfferIds).then(function refreshAsync_complete(refreshAsyncResult) {
                            if (refreshAsyncResult.hasFailures || !refreshAsyncResult.addedEntitlements)
                                logPurchaseIngestionFailure(media, refreshAsyncResult);
                            return addMediaResult.hydrateLibraryInfoAsync(media)
                        }).then(function hydrateLibraryInfoAsync_complete() {
                            if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                                return media.tracks.itemsFromIndex(0, 0, media.tracks.count);
                            else if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason)
                                return media.episodes.itemsFromIndex(0, 0, media.episodes.count);
                            else if (media.inCollection)
                                addMediaResult.addMedia(media)
                        }).then(function itemsFromIndex_complete(list) {
                            if (list && list.items)
                                list.items.map(function hydrateListItem(item) {
                                    if (item && item.data && item.data.inCollection)
                                        addMediaResult.addMedia(item.data)
                                });
                            if (inPurchaseFlow)
                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false);
                            return addMediaResult
                        }, function itemsFromIndex_error(error) {
                            if (error && error.number && typeof error.number === "number")
                                error = error.number;
                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_PURCHASE_ERROR_CAPTION), error);
                            if (inPurchaseFlow)
                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                        })
                }
                return new WinJS.Promise(function addMedia_async(c, e, p) {
                        if (!filterToOfferIds)
                            filterToOfferIds = [];
                        var addMediaPromise;
                        try {
                            addMediaPromise = Microsoft.Entertainment.Marketplace.Marketplace.addMedia([serviceId], [media.mediaType], filterToOfferIds, null, true)
                        }
                        catch(ex) {
                            addMediaPromise = WinJS.Promise.wrapError(ex)
                        }
                        addMediaPromise.then(function addMedia_complete(jsonAddMediaResult) {
                            var addMediaResult = MS.Entertainment.Platform.PurchaseHelpers.parseJsonAddMediaResult(jsonAddMediaResult);
                            return addMediaResult.hydrateLibraryInfoAsync(media).then(function hydrateLibraryIdsAsync_complete() {
                                    if (c)
                                        c(addMediaResult);
                                    if (inPurchaseFlow)
                                        MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false)
                                })
                        }, function addMedia_error(error) {
                            if (error && error.number && typeof error.number === "number")
                                error = error.number;
                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_PURCHASE_ERROR_CAPTION), error);
                            if (inPurchaseFlow)
                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                        })
                    })
            }, getClosedCaptionVideos: function getClosedCaptionVideos(media) {
                var mediaWithClosedCaptions = [];
                var getClosedCaptionPromiseVideosPromise = null;
                if (media)
                    if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                        if (media.hasZuneId && media.closedCaptionFiles && media.closedCaptionFiles.length > 0) {
                            mediaWithClosedCaptions.push(media);
                            getClosedCaptionPromiseVideosPromise = WinJS.Promise.wrap(mediaWithClosedCaptions)
                        }
                    }
                    else if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason)
                        getClosedCaptionPromiseVideosPromise = media.episodes.forEachAll(function itemsFromIndex_complete(args) {
                            var episode = args.item.data;
                            if (episode && episode.hasZuneId && episode.closedCaptionFiles && episode.closedCaptionFiles.length > 0)
                                mediaWithClosedCaptions.push(episode)
                        }).then(function gotClosedCaptions() {
                            return WinJS.Promise.wrap(mediaWithClosedCaptions)
                        });
                return getClosedCaptionPromiseVideosPromise
            }, downloadClosedCaptionFiles: function downloadClosedCaptionFiles(media) {
                var getClosedCaptionPromiseVideosPromise = MS.Entertainment.Platform.PurchaseHelpers.getClosedCaptionVideos(media);
                if (getClosedCaptionPromiseVideosPromise)
                    getClosedCaptionPromiseVideosPromise.done(function onGetClosedCaptionPromiseVideosPromise(mediaWithClosedCaptions) {
                        mediaWithClosedCaptions.forEach(function forEachMedia(ccMedia) {
                            if (ccMedia)
                                Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync([ccMedia.zuneId]).done(function getMediaEntitlementsAsync_complete(result) {
                                    try {
                                        var entitlement = JSON.parse(result).result.entitlements[0];
                                        if (entitlement.best.download.isAvailable) {
                                            var bestDownloadServiceMediaInstanceId = entitlement.best.download.serviceMediaInstanceId || MS.Entertainment.Utilities.EMPTY_GUID;
                                            if (bestDownloadServiceMediaInstanceId !== MS.Entertainment.Utilities.EMPTY_GUID) {
                                                bestDownloadServiceMediaInstanceId = bestDownloadServiceMediaInstanceId.toLowerCase();
                                                for (var iClosedCaptionFile = 0; iClosedCaptionFile < ccMedia.closedCaptionFiles.length; iClosedCaptionFile++) {
                                                    var ccFile = ccMedia.closedCaptionFiles[iClosedCaptionFile];
                                                    if (ccFile && ccFile.mediaInstanceId && ccFile.mediaInstanceId.toLowerCase() === bestDownloadServiceMediaInstanceId) {
                                                        var ccServiceMediaId = entitlement.serviceMediaId;
                                                        var ccServiceMediaInstanceId = ccFile.mediaInstanceId;
                                                        var ccFileUri = ccFile.fileUri;
                                                        var ccLCID = ccFile.lcid;
                                                        var ccName = ccFile.name;
                                                        Microsoft.Entertainment.ClosedCaptionDownloader.downloadClosedCaptionFileAsync(ccFileUri, ccServiceMediaId, ccServiceMediaInstanceId, ccName, ccLCID)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    catch(ex) {}
                                }, function failed(info){})
                        })
                    }, function failed(info){})
            }, downloadMedia: function downloadMedia(media, dbMediaIds, dbMediaTypes, isBundleAlbum, inPurchaseFlow, contextMediaId, contextMediaType) {
                if (MS.Entertainment.Utilities.isApp2)
                    return WinJS.Promise.wrap([]);
                if (inPurchaseFlow)
                    MS.Entertainment.UI.PurchaseHistoryService.enterPurchaseFlowActivity();
                var preferStandardDef = false;
                var promptForStandardDef = WinJS.Promise.as();
                var downloadFile = true;
                if (MS.Entertainment.Utilities.isVideoApp) {
                    var storedDownloadPreference = MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference;
                    if (storedDownloadPreference)
                        preferStandardDef = (MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.storedDownloadPreference === MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition.sd);
                    else
                        promptForStandardDef = MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.getAvailableResolutions(media).then(function checkForHD(info) {
                            if (info.hasHD && info.hasSD)
                                return MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.getDialogSizes(media).then(function showDialog(dataSource) {
                                        return MS.Entertainment.UI.Controls.ChooseDownloadQualityOverlay.show(dataSource).then(function onDialogDismissed(result) {
                                                if (result && result.userControlInstance) {
                                                    downloadFile = result.userControlInstance.downloadFile;
                                                    preferStandardDef = !result.userControlInstance.hdSelected
                                                }
                                                else
                                                    downloadFile = false;
                                                return WinJS.Promise.as()
                                            })
                                    });
                            return WinJS.Promise.as()
                        })
                }
                MS.Entertainment.Platform.PurchaseHelpers.downloadClosedCaptionFiles(media);
                return new WinJS.Promise(function(c, e, p) {
                        if (dbMediaIds && dbMediaIds.length && dbMediaTypes && dbMediaTypes.length) {
                            var signInProvider = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            signInProvider.getPassportTicket(MS.Entertainment.Utilities.SignIn.TicketType.MBI_SSL, MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_Passport)).then(function getPassportTicketComplete(ticket) {
                                promptForStandardDef.done(function doDownload() {
                                    if (downloadFile)
                                        Microsoft.Entertainment.Marketplace.Marketplace.download(ticket, dbMediaIds, dbMediaTypes, contextMediaId || 0, contextMediaType || 0, preferStandardDef).then(function downloadComplete(result) {
                                            var firstErrorCode = 0;
                                            var successfulTaskIds = [];
                                            for (var i = 0; i < result.hresults.size; i++) {
                                                var errorCode = result.hresults[i];
                                                if (isBundleAlbum && errorCode !== 0 && dbMediaTypes[i] === Microsoft.Entertainment.Queries.ObjectType.video)
                                                    errorCode = 0;
                                                if (errorCode === 0) {
                                                    successfulTaskIds.push(result.taskIds[i]);
                                                    MS.Entertainment.Utilities.createMediaItemByLibraryInfo(dbMediaIds[i], dbMediaTypes[i]).then(function mediaItemHydrated(downloadedMedia) {
                                                        if (downloadedMedia)
                                                            MS.Entertainment.Utilities.Telemetry.logDownloadHappened(downloadedMedia)
                                                    })
                                                }
                                                else if (firstErrorCode === 0)
                                                    if (errorCode < 0)
                                                        firstErrorCode = errorCode
                                            }
                                            if (firstErrorCode !== 0)
                                                MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), firstErrorCode);
                                            if (c)
                                                c(successfulTaskIds);
                                            if (inPurchaseFlow)
                                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false)
                                        }, function downloadError(error) {
                                            if (error && error.number && typeof error.number === "number")
                                                error = error.number;
                                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), error);
                                            if (inPurchaseFlow)
                                                MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                                        })
                                })
                            }, function getPassportTicketError(error) {
                                if (inPurchaseFlow)
                                    MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(true)
                            })
                        }
                        else if (inPurchaseFlow)
                            MS.Entertainment.UI.PurchaseHistoryService.leavePurchaseFlowActivity(false)
                    })
            }, itemSupportsPurchase: function itemSupportsPurchase(mediaItem) {
                if (mediaItem) {
                    var mediaType = mediaItem.mediaType;
                    if (mediaType === Microsoft.Entertainment.Queries.ObjectType.game || mediaType === Microsoft.Entertainment.Queries.ObjectType.video || mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason || mediaType === Microsoft.Entertainment.Queries.ObjectType.album || mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                        return true
                }
                return false
            }, getItemPurchaseAndRentStateAsync: function getItemPurchaseAndRentStateAsync(mediaItem, force) {
                if (!force && mediaItem.canPurchaseStream !== undefined)
                    return WinJS.Promise.wrap({
                            canPurchaseStream: mediaItem.canPurchaseStream, canPurchaseDownload: mediaItem.canPurchaseDownload, canRentStream: mediaItem.canRentStream, canRentDownload: mediaItem.canRentDownload
                        });
                return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync([mediaItem.zuneId]).then(function getMediaEntitlements_complete(result) {
                        result = JSON.parse(result).result.entitlements[0];
                        return WinJS.Promise.wrap({
                                canPurchaseStream: result.purchase.stream.isAvailable, canPurchaseDownload: result.purchase.download.isAvailable, canRentStream: result.rent.stream.isAvailable, canRentDownload: result.rent.download.isAvailable
                            })
                    })
            }, MarketplaceService: WinJS.Class.define(null, {
                addMedia: function addMedia(serviceMediaIds, mediaTypes, filterToOfferIds, mediaPropertyMap, addToCollection) {
                    return Microsoft.Entertainment.Marketplace.Marketplace.addMedia(serviceMediaIds, mediaTypes, filterToOfferIds, mediaPropertyMap, addToCollection)
                }, tryAddMedia: function tryAddMedia(serviceMediaIds, mediaTypes, filterToOfferIds, mediaPropertyMap, addToCollection) {
                        return Microsoft.Entertainment.Marketplace.Marketplace.tryAddMedia(serviceMediaIds, mediaTypes, filterToOfferIds, mediaPropertyMap, addToCollection)
                    }
            }, {createMarketplaceService: function createMarketplaceService() {
                    return new MS.Entertainment.Platform.PurchaseHelpers.MarketplaceService
                }})
    });
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.marketplace, MS.Entertainment.Platform.PurchaseHelpers.MarketplaceService.createMarketplaceService)
})()
})();
/* >>>>>>/components/music/music1statehandlers.js:6288 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    var fileScope = {
            MAX_TRACK_BUTTON_NUM: 2, MAX_POPOVER_BUTTON_NUM: 4
        };
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {MusicStateHandlers: {
            _getAddToSubActionsForAlbum: function _getAddToSubActionsForAlbum(appState, stateInfo, hasAddToMyMusicRights) {
                MS.Entertainment.UI.assert(appState, "appState is required!");
                MS.Entertainment.UI.assert(stateInfo, "stateInfo is required!");
                var addToSubActions = [];
                if (appState.canAddToMyMusic && hasAddToMyMusicRights)
                    addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                else if (appState.canAddToCloud)
                    addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToCloud);
                if (appState.canAddToNowPlaying && (!appState.isDTOMarket || stateInfo.collection.canPlayLocally))
                    addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                return addToSubActions
            }, _addButtonsForAlbumDownloading: function _addButtonsForAlbumDownloading(appState, stateInfo, isfromCollection, hasAddToMyMusicRights, albumButtons) {
                    MS.Entertainment.UI.assert(appState, "appState is required!");
                    MS.Entertainment.UI.assert(stateInfo, "stateInfo is required!");
                    MS.Entertainment.UI.assert(albumButtons, "albumButtons is required!");
                    var buttons = [];
                    var actions = [];
                    var preconditionPromises = [];
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        preconditionPromises.push(pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            existingStartScreenTile = startScreenTile
                        }))
                    }
                    return WinJS.Promise.join(preconditionPromises).then(function preconditionsComplete() {
                            if (isfromCollection || hasAddToMyMusicRights)
                                if (stateInfo.canPlay && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                                    buttons.push(albumButtons.play);
                                else
                                    buttons.push(albumButtons.playDisabled);
                            else
                                buttons.push(albumButtons.albumPlayPreview);
                            albumButtons.addTo.setSubActions(MS.Entertainment.ViewModels.MusicStateHandlers._getAddToSubActionsForAlbum(appState, stateInfo, hasAddToMyMusicRights));
                            buttons.push(albumButtons.addTo);
                            if (appState.showArtistDetailsButton)
                                buttons.push(albumButtons.artistDetails);
                            if (appState.canPlaySmartDJ)
                                buttons.push(albumButtons.playArtistSmartDJ);
                            if (appState.canPlayOnXbox)
                                actions.push(appState.actions.playOnXbox360);
                            if (appState.canPinToStartScreen)
                                if (!existingStartScreenTile)
                                    actions.push(appState.actions.pinToStartScreen);
                                else
                                    actions.push(appState.actions.unpinFromStartScreen);
                            return WinJS.Promise.wrap({
                                    smartButtons: buttons, appbarActions: actions
                                })
                        })
                }, _addButtonsForAlbumDownloadFailed: function _addButtonsForAlbumDownloadFailed(appState, stateInfo, isfromCollection, hasAddToMyMusicRights, albumButtons) {
                    MS.Entertainment.UI.assert(appState, "appState is required!");
                    MS.Entertainment.UI.assert(stateInfo, "stateInfo is required!");
                    MS.Entertainment.UI.assert(albumButtons, "albumButtons is required!");
                    var buttons = [];
                    var actions = [];
                    var preconditionPromises = [];
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        preconditionPromises.push(pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            existingStartScreenTile = startScreenTile
                        }))
                    }
                    return WinJS.Promise.join(preconditionPromises).then(function preconditionsComplete() {
                            if (isfromCollection || hasAddToMyMusicRights) {
                                if (stateInfo.canPlay && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                                    buttons.push(albumButtons.play)
                            }
                            else
                                buttons.push(albumButtons.albumPlayPreview);
                            albumButtons.addTo.setSubActions(MS.Entertainment.ViewModels.MusicStateHandlers._getAddToSubActionsForAlbum(appState, stateInfo, hasAddToMyMusicRights));
                            buttons.push(albumButtons.addTo);
                            if (stateInfo.download.hasRetryable)
                                buttons.push(albumButtons.tryAgain);
                            else
                                buttons.push(albumButtons.remove);
                            if (appState.showArtistDetailsButton)
                                buttons.push(albumButtons.artistDetails);
                            if (appState.canPlaySmartDJ)
                                if (buttons.length < fileScope.MAX_POPOVER_BUTTON_NUM)
                                    buttons.push(albumButtons.playArtistSmartDJ);
                                else
                                    actions.push(appState.actions.playSmartDJ);
                            if (appState.canPlayOnXbox)
                                actions.push(appState.actions.playOnXbox360);
                            if (appState.canPinToStartScreen)
                                if (!existingStartScreenTile)
                                    actions.push(appState.actions.pinToStartScreen);
                                else
                                    actions.push(appState.actions.unpinFromStartScreen);
                            if (appState.canDelete)
                                actions.push(appState.actions.deleteMedia);
                            return WinJS.Promise.wrap({
                                    smartButtons: buttons, appbarActions: actions
                                })
                        })
                }, _addButtonsForAlbumDownloadPending: function _addButtonsForAlbumDownloadPending(appState, stateInfo, isfromCollection, hasAddToMyMusicRights, albumButtons) {
                    MS.Entertainment.UI.assert(appState, "appState is required!");
                    MS.Entertainment.UI.assert(stateInfo, "stateInfo is required!");
                    MS.Entertainment.UI.assert(albumButtons, "albumButtons is required!");
                    var buttons = [];
                    var actions = [];
                    var preconditionPromises = [];
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        preconditionPromises.push(pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            existingStartScreenTile = startScreenTile
                        }))
                    }
                    return WinJS.Promise.join(preconditionPromises).then(function preconditionsComplete() {
                            if (isfromCollection || hasAddToMyMusicRights) {
                                if (stateInfo.canPlay && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                                    buttons.push(albumButtons.play)
                            }
                            else
                                buttons.push(albumButtons.albumPlayPreview);
                            albumButtons.addTo.setSubActions(MS.Entertainment.ViewModels.MusicStateHandlers._getAddToSubActionsForAlbum(appState, stateInfo, hasAddToMyMusicRights));
                            buttons.push(albumButtons.addTo);
                            buttons.push(albumButtons.download);
                            if (appState.showArtistDetailsButton)
                                buttons.push(albumButtons.artistDetails);
                            if (appState.canPlaySmartDJ)
                                if (buttons.length < fileScope.MAX_POPOVER_BUTTON_NUM)
                                    buttons.push(albumButtons.playArtistSmartDJ);
                                else
                                    actions.push(appState.actions.playSmartDJ);
                            if (appState.canPlayOnXbox)
                                actions.push(appState.actions.playOnXbox360);
                            if (appState.canPinToStartScreen)
                                if (!existingStartScreenPin)
                                    actions.push(appState.actions.pinToStartScreen);
                                else
                                    actions.push(appState.actions.unpinFromStartScreen);
                            return WinJS.Promise.wrap({
                                    smartButtons: buttons, appbarActions: actions
                                })
                        })
                }, _getAddToMyMusicRights: function _getAddToMyMusicRights(appState, media) {
                    MS.Entertainment.UI.assert(appState, "appState is required!");
                    MS.Entertainment.UI.assert(media, "media is required!");
                    return MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getAlbumRights(media).then(function getAlbumRights_complete(rights) {
                            var allowSubscriptionActions = appState.musicSubscriptionEnabled && appState.signedInUserHasSubscription;
                            var allowFreeStreamActions = appState.canFreeStream;
                            var hasSubscriptionDownloadRights = allowSubscriptionActions && rights.subscriptionDownload;
                            var hasSubscriptionStreamingRights = allowSubscriptionActions && rights.subscriptionStream;
                            var hasFreeStreamingRights = allowFreeStreamActions && rights.freeStream;
                            return hasSubscriptionStreamingRights || hasFreeStreamingRights || hasSubscriptionDownloadRights
                        })
                }, onAlbumPopoverStateChanged: function onAlbumPopoverStateChanged(stateInfo) {
                    MS.Entertainment.UI.assert(this.media, "this.media should be defined!");
                    var buttons = [];
                    var actions = [];
                    var addToSubActions = [];
                    var preconditionPromises = [];
                    var appState = MS.Entertainment.ViewModels._MusicState.getCurrentState(this.media, stateInfo);
                    var showCollectionDetails = MS.Entertainment.ViewModels.MusicStateHandlers.shouldShowCollectionDetails(this.media, stateInfo);
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        preconditionPromises.push(pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            existingStartScreenTile = startScreenTile
                        }))
                    }
                    return WinJS.Promise.join(preconditionPromises).then(function preconditionsComplete() {
                            if (stateInfo.download.hasActive)
                                return MS.Entertainment.ViewModels.MusicStateHandlers._getAddToMyMusicRights(appState, this.media).then(function getAddToMyMusicRights_complete(hasAddToMyMusicRights) {
                                        return MS.Entertainment.ViewModels.MusicStateHandlers._addButtonsForAlbumDownloading(appState, stateInfo, this.media && this.media.fromCollection, hasAddToMyMusicRights, this.buttons)
                                    }.bind(this));
                            else if (stateInfo.collection.canPlayLocallyOrStreamFromCloud && showCollectionDetails) {
                                if (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession)
                                    if (stateInfo.collection.canPlayLocally || stateInfo.collection.canPlayLocallyOrStreamFromCloud)
                                        buttons.push(this.buttons.play);
                                    else
                                        buttons.push(this.buttons.playDisabled);
                                else
                                    buttons.push(this.buttons.remotePlayDisabled);
                                if (appState.canAddToCloud)
                                    addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToCloud);
                                if (appState.canAddToNowPlaying && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                                    addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                this.buttons.addTo.setSubActions(addToSubActions);
                                buttons.push(this.buttons.addTo);
                                if (appState.showArtistDetailsButton)
                                    buttons.push(this.buttons.artistDetails);
                                if (appState.canPlaySmartDJ)
                                    buttons.push(this.buttons.playArtistSmartDJ);
                                if (appState.canPlayOnXbox)
                                    actions.push(appState.actions.playOnXbox360);
                                if (appState.canPinToStartScreen)
                                    if (!existingStartScreenTile)
                                        actions.push(appState.actions.pinToStartScreen);
                                    else
                                        actions.push(appState.actions.unpinFromStartScreen);
                                if (appState.canDelete)
                                    actions.push(appState.actions.deleteMedia);
                                if (appState.canFindAlbumInfo)
                                    actions.push(appState.actions.findAlbumInfo);
                                if ((this.media.hasPurchasableTracks || !this.media.fromCollection) && appState.musicMarketplaceConnected && this.media.tracks && stateInfo.marketplace.hasPurchased < this.media.tracks.count)
                                    actions.push(appState.actions.purchaseAlbumFromMarketplace);
                                MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadAppBarActions(appState, stateInfo, this.media).forEach(function addAction(action) {
                                    actions.push(action)
                                })
                            }
                            else if (stateInfo.download.hasFailed)
                                return MS.Entertainment.ViewModels.MusicStateHandlers._getAddToMyMusicRights(appState, this.media).then(function getAddToMyMusicRights_complete(hasAddToMyMusicRights) {
                                        return MS.Entertainment.ViewModels.MusicStateHandlers._addButtonsForAlbumDownloadFailed(appState, stateInfo, this.media && this.media.fromCollection, hasAddToMyMusicRights, this.buttons)
                                    }.bind(this));
                            else if (stateInfo.download.hasPending)
                                return MS.Entertainment.ViewModels.MusicStateHandlers._getAddToMyMusicRights(appState, this.media).then(function getAddToMyMusicRights_complete(hasAddToMyMusicRights) {
                                        return MS.Entertainment.ViewModels.MusicStateHandlers._addButtonsForAlbumDownloadPending(appState, stateInfo, this.media && this.media.fromCollection, hasAddToMyMusicRights, this.buttons)
                                    }.bind(this));
                            else if (this.media.location === MS.Entertainment.Data.ItemLocation.collection) {
                                if (appState.showArtistDetailsButton)
                                    buttons.push(this.buttons.artistDetails);
                                if (appState.canPlaySmartDJ)
                                    buttons.push(this.buttons.playArtistSmartDJ);
                                if (appState.canPinToStartScreen)
                                    if (!existingStartScreenTile)
                                        actions.push(appState.actions.pinToStartScreen);
                                    else
                                        actions.push(appState.actions.unpinFromStartScreen);
                                if (appState.canDelete)
                                    actions.push(appState.actions.deleteMedia)
                            }
                            else {
                                if (!this.media.hydrated || !this.media.tracks)
                                    return WinJS.Promise.wrap(null);
                                return MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getAlbumRights(this.media).then(function getAlbumRights_complete(rights) {
                                        var allowSubscriptionActions = appState.musicSubscriptionEnabled && appState.signedInUserHasSubscription;
                                        var allowFreeStreamActions = appState.canFreeStream;
                                        var allowSubscriptionOrFreeStreamActions = (allowSubscriptionActions || allowFreeStreamActions);
                                        var hasSubscriptionDownloadRights = allowSubscriptionActions && rights.subscriptionDownload;
                                        var hasSubscriptionStreamingRights = allowSubscriptionActions && rights.subscriptionStream;
                                        var hasFreeStreamingRights = allowFreeStreamActions && rights.freeStream;
                                        var hasAddToMyMusicRights = hasSubscriptionStreamingRights || hasFreeStreamingRights || hasSubscriptionDownloadRights;
                                        var showMusicPassOptions = allowSubscriptionActions && (hasSubscriptionStreamingRights || hasSubscriptionDownloadRights);
                                        var showFreeStreamOptions = allowFreeStreamActions && hasFreeStreamingRights;
                                        if (showMusicPassOptions) {
                                            if (rights.subscriptionStream)
                                                if (!MS.Entertainment.Utilities.isWindowsBlue && appState.isRemoteSession)
                                                    buttons.push(this.buttons.remotePlayDisabled);
                                                else
                                                    buttons.push(this.buttons.play);
                                            if (appState.canAddToMyMusic && hasAddToMyMusicRights)
                                                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                                            if (appState.canAddToPlaylist && appState.isSignedIn)
                                                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                            if (appState.canAddToNowPlaying && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                            if (addToSubActions.length > 0) {
                                                this.buttons.addTo.setSubActions(addToSubActions);
                                                buttons.push(this.buttons.addTo)
                                            }
                                            if (rights.subscriptionDownload && !appState.downloadOnAddToMyMusicCloud)
                                                actions.push(appState.actions.subscriptionDownload);
                                            if (rights.albumPurchase)
                                                buttons.push(this.buttons.buyAlbum);
                                            if (appState.showArtistDetailsButton)
                                                buttons.push(this.buttons.artistDetails);
                                            if (appState.canPlaySmartDJ && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                                actions.push(appState.actions.playSmartDJ);
                                            if (appState.canPlayOnXbox || (appState.musicMarketplaceConnected && appState.consoleRegionEnabled && rights.playOnXbox))
                                                actions.push(appState.actions.playOnXbox360)
                                        }
                                        else if (showFreeStreamOptions) {
                                            if (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession)
                                                buttons.push(this.buttons.play);
                                            if (appState.canAddToMyMusic && hasAddToMyMusicRights)
                                                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                                            if (appState.canAddToPlaylist && appState.isSignedIn)
                                                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                            if (appState.canAddToNowPlaying && appState.isSignedIn)
                                                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                            if (addToSubActions.length > 0) {
                                                this.buttons.addTo.setSubActions(addToSubActions);
                                                buttons.push(this.buttons.addTo)
                                            }
                                            if (rights.albumPurchase)
                                                buttons.push(this.buttons.buyAlbum);
                                            if (appState.showArtistDetailsButton)
                                                buttons.push(this.buttons.artistDetails);
                                            if (appState.canPlaySmartDJ)
                                                actions.push(appState.actions.playSmartDJ);
                                            if (appState.canPlayOnXbox)
                                                actions.push(appState.actions.playOnXbox360)
                                        }
                                        else {
                                            if (rights.preview && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                                buttons.push(this.buttons.albumPlayPreview);
                                            if (stateInfo.marketplace.hasPurchased && appState.cloudServiceEnabled)
                                                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                                            if (appState.canAddToNowPlaying && rights.preview && (!appState.canFreeStream || appState.isSignedIn))
                                                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                            if (addToSubActions.length > 0) {
                                                this.buttons.addTo.setSubActions(addToSubActions);
                                                buttons.push(this.buttons.addTo)
                                            }
                                            if (rights.albumPurchase)
                                                buttons.push(this.buttons.buyAlbum);
                                            if (appState.showArtistDetailsButton)
                                                buttons.push(this.buttons.artistDetails);
                                            if (appState.canPlaySmartDJ)
                                                if (buttons.length < 4)
                                                    buttons.push(this.buttons.playArtistSmartDJ);
                                                else
                                                    actions.push(appState.actions.playSmartDJ);
                                            if (appState.canPlayOnXbox)
                                                actions.push(appState.actions.playOnXbox360)
                                        }
                                        if (appState.canPinToStartScreen)
                                            if (!existingStartScreenTile)
                                                actions.push(appState.actions.pinToStartScreen);
                                            else
                                                actions.push(appState.actions.unpinFromStartScreen);
                                        if (!buttons.length)
                                            buttons.push(this.buttons.contentNotAvailable);
                                        return WinJS.Promise.wrap({
                                                smartButtons: buttons, appbarActions: actions
                                            })
                                    }.bind(this))
                            }
                            return WinJS.Promise.wrap({
                                    smartButtons: buttons, appbarActions: actions
                                })
                        }.bind(this))
                }, onPlaylistPopoverStateChanged: function onPlaylistPopoverStateChanged(stateInfo) {
                    var buttons = [];
                    var actions = [];
                    var addToSubActions = [];
                    var preconditionPromises = [];
                    var appState = MS.Entertainment.ViewModels._MusicState.getCurrentState(this.media, stateInfo);
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        preconditionPromises.push(pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            existingStartScreenTile = startScreenTile
                        }))
                    }
                    return WinJS.Promise.join(preconditionPromises).then(function preconditionsComplete() {
                            if (stateInfo.collection.canPlayLocally || this.media.inCollection)
                                if (this.media.count > 0) {
                                    buttons.push(this.buttons.play);
                                    if (appState.canAddToNowPlaying)
                                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                    addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist)
                                }
                                else
                                    buttons.push(this.buttons.playDisabled);
                            else
                                buttons.push(this.buttons.playDisabled);
                            if (addToSubActions.length > 0) {
                                this.buttons.addTo.setSubActions(addToSubActions);
                                buttons.push(this.buttons.addTo)
                            }
                            actions.push(appState.actions.renamePlaylist);
                            actions.push(appState.actions.deleteMedia);
                            MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadAppBarActions(appState, stateInfo, this.media).forEach(function addAction(action) {
                                actions.push(action)
                            });
                            if (appState.canPinToStartScreen)
                                if (!existingStartScreenTile)
                                    actions.push(appState.actions.pinToStartScreen);
                                else
                                    actions.push(appState.actions.unpinFromStartScreen);
                            return WinJS.Promise.wrap({
                                    smartButtons: buttons, appbarActions: actions
                                })
                        }.bind(this))
                }, onLocalArtistPopoverStateChanged: function onLocalArtistPopoverStateChanged(stateInfo) {
                    var buttons = [];
                    var actions = [];
                    var addToSubActions = [];
                    var preconditionPromises = [];
                    var appState = MS.Entertainment.ViewModels._MusicState.getCurrentState(this.media, stateInfo);
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        preconditionPromises.push(pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            existingStartScreenTile = startScreenTile
                        }))
                    }
                    return WinJS.Promise.join(preconditionPromises).then(function preconditionsComplete() {
                            if (stateInfo.collection.canPlayLocallyOrStreamFromCloud) {
                                if (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally)
                                    buttons.push(this.buttons.playAllLocalArtist);
                                else
                                    buttons.push(this.buttons.remotePlayDisabled);
                                if (appState.canAddToNowPlaying && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                                    addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addLocalArtistToNowPlaying);
                                addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                this.buttons.addTo.setSubActions(addToSubActions);
                                buttons.push(this.buttons.addTo);
                                if (appState.canDelete)
                                    actions.push(appState.actions.deleteMedia)
                            }
                            else if (stateInfo.download.hasActive)
                                if (appState.signedInUserHasSubscription && appState.musicSubscriptionEnabled && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                    buttons.push(this.buttons.playAllMarketplaceArtist);
                                else
                                    buttons.push(this.buttons.playDisabled);
                            else if (stateInfo.download.hasFailed) {
                                if (appState.signedInUserHasSubscription && appState.musicSubscriptionEnabled && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                    buttons.push(this.buttons.playAllMarketplaceArtist);
                                else
                                    buttons.push(this.buttons.playDisabled);
                                if (stateInfo.download.hasRetryable)
                                    buttons.push(this.buttons.tryAgain);
                                else
                                    buttons.push(this.buttons.remove);
                                if (appState.canDelete)
                                    actions.push(appState.actions.deleteMedia)
                            }
                            else if (stateInfo.download.hasPending) {
                                if (appState.signedInUserHasSubscription && appState.musicSubscriptionEnabled && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                    buttons.push(this.buttons.playAllMarketplaceArtist);
                                else
                                    buttons.push(this.buttons.playDisabled);
                                buttons.push(this.buttons.download)
                            }
                            if (appState.showArtistDetailsButton)
                                buttons.push(this.buttons.artistDetails);
                            if (appState.canPlaySmartDJ)
                                buttons.push(this.buttons.playArtistSmartDJ);
                            if (appState.canPlayOnXbox)
                                actions.push(appState.actions.playOnXbox360);
                            if (appState.canPinToStartScreen)
                                if (!existingStartScreenTile)
                                    actions.push(appState.actions.pinToStartScreen);
                                else
                                    actions.push(appState.actions.unpinFromStartScreen);
                            if (!buttons.length)
                                buttons.push(this.buttons.contentNotAvailable);
                            return WinJS.Promise.wrap({
                                    smartButtons: buttons, appbarActions: actions
                                })
                        }.bind(this))
                }, onMarketplaceArtistPopoverStateChanged: function onMarketplaceArtistPopoverStateChanged(stateInfo, marketplaceTracks) {
                    var buttons = [];
                    var actions = [];
                    var addToSubActions = [];
                    var preconditionPromises = [];
                    var appState = MS.Entertainment.ViewModels._MusicState.getCurrentState(this.media, stateInfo);
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        preconditionPromises.push(pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            existingStartScreenTile = startScreenTile
                        }))
                    }
                    return WinJS.Promise.join(preconditionPromises).then(function preconditionsComplete() {
                            if ((MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession) && (!marketplaceTracks || marketplaceTracks.count > 0)) {
                                var canFreeStream = appState.canFreeStream;
                                var canSubscriptionStream = (appState.signedInUserHasSubscription && appState.musicSubscriptionEnabled);
                                var canAddToNowPlaying = appState.canAddToNowPlaying;
                                if (canFreeStream || canSubscriptionStream)
                                    buttons.push(this.buttons.playAllMarketplaceArtist);
                                else
                                    buttons.push(this.buttons.previewArtist);
                                if (appState.canAddToNowPlaying)
                                    addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addMarketplaceArtistToNowPlaying);
                                if (appState.canAddToPlaylist && appState.isSignedIn)
                                    addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist)
                            }
                            if (addToSubActions.length) {
                                this.buttons.addTo.setSubActions(addToSubActions);
                                buttons.push(this.buttons.addTo)
                            }
                            if (appState.showArtistDetailsButton)
                                buttons.push(this.buttons.artistDetails);
                            if (appState.canPlaySmartDJ)
                                buttons.push(this.buttons.playArtistSmartDJ);
                            if (appState.canPlayOnXbox)
                                actions.push(appState.actions.playOnXbox360);
                            if (appState.canPinToStartScreen)
                                if (!existingStartScreenTile)
                                    actions.push(appState.actions.pinToStartScreen);
                                else
                                    actions.push(appState.actions.unpinFromStartScreen);
                            if (!buttons.length)
                                buttons.push(this.buttons.contentNotAvailable);
                            return WinJS.Promise.wrap({
                                    smartButtons: buttons, appbarActions: actions
                                })
                        }.bind(this))
                }, onTrackInlineDetailsStateChanged: function onTrackInlineDetailsStateChanged(stateInfo) {
                    var buttons = [];
                    var actions = new MS.Entertainment.UI.Actions.ActionArray;
                    var addToSubActions = [];
                    var promiseArray = [];
                    var preconditionPromises = [];
                    var appState = MS.Entertainment.ViewModels._MusicState.getCurrentState(this.media, stateInfo);
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var inNowPlaying = false;
                    var canEdit = appState.canEdit && !inNowPlaying;
                    var showCollectionDetails = MS.Entertainment.ViewModels.MusicStateHandlers.shouldShowCollectionDetails(this.media, stateInfo);
                    if (mediaContext && mediaContext.options && mediaContext.options.containingMedia)
                        inNowPlaying = MS.Entertainment.Platform.Playback.PlaybackSession.isPlaybackSession(mediaContext.options.containingMedia.playbackItemSource);
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        preconditionPromises.push(pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            existingStartScreenTile = startScreenTile
                        }))
                    }
                    return WinJS.Promise.join(preconditionPromises).then(function preconditionsComplete() {
                            var pushPlayButton = function pushPlayButton(buttons, playButton) {
                                    if (!buttons || !playButton)
                                        return;
                                    var doubleClickPlayButton = this.buttons.doubleClick;
                                    if (doubleClickPlayButton) {
                                        doubleClickPlayButton.wrap(playButton);
                                        playButton = doubleClickPlayButton
                                    }
                                    buttons.push(playButton)
                                }.bind(this);
                            if (appState.isPlaylistTrack && !inNowPlaying) {
                                if (appState.freeStreamBlockedByFreeLimits) {
                                    pushPlayButton(buttons, this.media.canPreview ? this.buttons.trackPlayPreview : this.buttons.playDisabled);
                                    if (MS.Entertainment.Utilities.hasPropertyPath(mediaContext, "options.containingMedia.editableItemSource")) {
                                        actions.push(appState.actions.moveListItemUp);
                                        actions.push(appState.actions.moveListItemDown);
                                        actions.push(appState.actions.moveListItemToTop);
                                        actions.push(appState.actions.moveListItemToBottom);
                                        buttons.push(this.buttons.removeFromList)
                                    }
                                    else
                                        buttons.push(this.buttons.removeFromPlaylist);
                                    if (!appState.isSnapped && !appState.isExplicitBlocked)
                                        if (this.media.canPurchase)
                                            actions.push(appState.actions.purchaseTrackFromMarketplace);
                                        else if (this.media.canPurchaseAlbum)
                                            actions.push(appState.actions.purchaseAlbumFromMarketplace);
                                    if (appState.showArtistDetailsButton)
                                        actions.push(appState.actions.artistDetails);
                                    actions.push(appState.actions.subscriptionSignup)
                                }
                                else {
                                    if (stateInfo.canPlay && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                        if ((appState.isOnline && !appState.isExplicitBlocked) || stateInfo.collection.canPlayLocally)
                                            pushPlayButton(buttons, this.buttons.play);
                                        else
                                            pushPlayButton(buttons, this.buttons.playDisabled);
                                    else if (!MS.Entertainment.Utilities.isWindowsBlue && appState.isRemoteSession)
                                        buttons.push(this.buttons.remotePlayDisabled);
                                    else
                                        pushPlayButton(buttons, this.buttons.playDisabled);
                                    if (MS.Entertainment.Utilities.hasPropertyPath(mediaContext, "options.containingMedia.editableItemSource")) {
                                        actions.push(appState.actions.moveListItemUp);
                                        actions.push(appState.actions.moveListItemDown);
                                        actions.push(appState.actions.moveListItemToTop);
                                        actions.push(appState.actions.moveListItemToBottom);
                                        buttons.push(this.buttons.removeFromList)
                                    }
                                    else
                                        buttons.push(this.buttons.removeFromPlaylist);
                                    if (appState.canAddToMyMusic && (this.media.canFreeStream || (appState.signedInUserHasSubscription && this.media.canSubscriptionStream)))
                                        actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                                    else if (appState.canAddToCloud)
                                        actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToCloud);
                                    if (appState.canAddToNowPlaying && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                                        actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                    if (appState.canPlaySmartDJ)
                                        actions.push(appState.actions.playSmartDJ);
                                    actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                    actions.push(appState.actions.addTo);
                                    MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadAppBarActions(appState, stateInfo, this.media).forEach(function addAction(action) {
                                        actions.push(action)
                                    })
                                }
                                if (appState.showArtistDetailsAction())
                                    actions.push(appState.actions.artistDetails);
                                else if (appState.showAlbumDetailsAction())
                                    actions.push(appState.actions.exploreAlbum)
                            }
                            else if (appState.freeStreamBlockedByFreeLimits) {
                                pushPlayButton(buttons, this.media.canPreview ? this.buttons.trackPlayPreview : this.buttons.playDisabled);
                                if (canEdit)
                                    actions.push(appState.actions.editMetadata);
                                if (!appState.isDevicesPage) {
                                    if (!appState.isSnapped && !appState.isExplicitBlocked)
                                        if (this.media.canPurchase)
                                            buttons.push(this.buttons.buyTrack);
                                        else if (this.media.canPurchaseAlbum)
                                            buttons.push(this.buttons.buyAlbum)
                                }
                                else {
                                    buttons.push(this.buttons.deleteMedia);
                                    if (!appState.isSnapped)
                                        if (this.media.canPurchase)
                                            actions.push(appState.actions.purchaseTrackFromMarketplace);
                                        else if (this.media.canPurchaseAlbum)
                                            actions.push(appState.actions.purchaseAlbumFromMarketplace)
                                }
                                if (appState.showArtistDetailsAction())
                                    actions.push(appState.actions.artistDetails);
                                else if (appState.showAlbumDetailsAction())
                                    actions.push(appState.actions.exploreAlbum);
                                if (appState.canDelete && !inNowPlaying && !appState.isDevicesPage)
                                    actions.push(appState.actions.deleteMedia);
                                actions.push(appState.actions.subscriptionSignup)
                            }
                            else if (stateInfo.collection.canPlayLocallyOrStreamFromCloud) {
                                if (canEdit)
                                    actions.push(appState.actions.editMetadata);
                                if (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally) {
                                    if ((appState.isOnline && !appState.isExplicitBlocked) || stateInfo.collection.canPlayLocally)
                                        if (inNowPlaying)
                                            pushPlayButton(buttons, this.buttons.playNowPlayingTrack);
                                        else
                                            pushPlayButton(buttons, this.buttons.play);
                                    else if (!appState.isDTOMarket)
                                        pushPlayButton(buttons, this.buttons.playDisabled)
                                }
                                else
                                    buttons.push(this.buttons.remotePlayDisabled);
                                if (appState.showArtistDetailsAction())
                                    actions.push(appState.actions.artistDetails);
                                else if (appState.showAlbumDetailsAction())
                                    actions.push(appState.actions.exploreAlbum);
                                if (!appState.isDevicesPage) {
                                    if (appState.canAddToCloud)
                                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToCloud);
                                    if (appState.canAddToNowPlaying && !inNowPlaying && (!appState.isDTOMarket || stateInfo.collection.canPlayLocally))
                                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                    addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                    this.buttons.addTo.setSubActions(addToSubActions);
                                    buttons.push(this.buttons.addTo)
                                }
                                else {
                                    buttons.push(this.buttons.deleteMedia);
                                    if (appState.canAddToCloud)
                                        actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToCloud);
                                    if (appState.canAddToNowPlaying && !inNowPlaying && (!appState.isDTOMarket || stateInfo.collection.canPlayLocally))
                                        actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                    actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                    actions.push(appState.actions.addTo)
                                }
                                if (appState.canPlaySmartDJ)
                                    actions.push(appState.actions.playSmartDJ);
                                if (appState.canPinToStartScreen)
                                    if (!existingStartScreenTile)
                                        actions.push(appState.actions.pinToStartScreen);
                                    else
                                        actions.push(appState.actions.unpinFromStartScreen);
                                if (appState.canPlayOnXbox)
                                    actions.push(appState.actions.playOnXbox360);
                                if (appState.canDelete && !inNowPlaying && !appState.isDevicesPage)
                                    actions.push(appState.actions.deleteMedia);
                                if (appState.canShowMediaProperties)
                                    actions.push(appState.actions.mediaProperties);
                                if (appState.musicMarketplaceConnected && !appState.isSnapped && !appState.canDownloadPurchasedMedia && !appState.isDownloadingPurchasedMedia && !appState.isExplicitBlocked && stateInfo.download.items.length === 0) {
                                    var isLocalTrackPurchasablePromise = MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.isLocalTrackPurchasable(this.media).then(function isLocalTrackPurchasable_complete(canPurchase) {
                                            if (canPurchase)
                                                actions.push(appState.actions.purchaseTrackFromMarketplace)
                                        });
                                    promiseArray.push(isLocalTrackPurchasablePromise)
                                }
                                if (!appState.isDevicesPage)
                                    MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadAppBarActions(appState, stateInfo, this.media).forEach(function addAction(action) {
                                        actions.push(action)
                                    })
                            }
                            else if (stateInfo.download.hasFailed) {
                                if (canEdit)
                                    actions.push(appState.actions.editMetadata);
                                if (stateInfo.canPlay && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                                    if (inNowPlaying)
                                        pushPlayButton(buttons, this.buttons.playNowPlayingTrack);
                                    else
                                        pushPlayButton(buttons, this.buttons.play);
                                else
                                    pushPlayButton(buttons, this.buttons.playDisabled);
                                if (!appState.isDevicesPage) {
                                    if (stateInfo.download.hasRetryable)
                                        buttons.push(this.buttons.tryAgain);
                                    else
                                        buttons.push(this.buttons.remove);
                                    if (appState.canDelete)
                                        actions.push(appState.actions.deleteMedia)
                                }
                                else
                                    buttons.push(this.buttons.deleteMedia)
                            }
                            else if (stateInfo.download.hasPending) {
                                if (canEdit)
                                    actions.push(appState.actions.editMetadata);
                                if (stateInfo.canPlay && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                                    if (inNowPlaying)
                                        pushPlayButton(buttons, this.buttons.playNowPlayingTrack);
                                    else
                                        pushPlayButton(buttons, this.buttons.play);
                                else
                                    pushPlayButton(buttons, this.buttons.playDisabled);
                                if (!appState.isDevicesPage)
                                    buttons.push(this.buttons.download)
                            }
                            else if (stateInfo.download.hasActive) {
                                if (canEdit)
                                    actions.push(appState.actions.editMetadata);
                                if (stateInfo.canPlay && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                                    if (inNowPlaying)
                                        pushPlayButton(buttons, this.buttons.playNowPlayingTrack);
                                    else
                                        pushPlayButton(buttons, this.buttons.play);
                                else
                                    pushPlayButton(buttons, this.buttons.playDisabled)
                            }
                            else if (!inNowPlaying && ((this.media.location || (this.media.album && this.media.album.location)) === MS.Entertainment.Data.ItemLocation.collection)) {
                                if (canEdit)
                                    actions.push(appState.actions.editMetadata);
                                pushPlayButton(buttons, this.buttons.playDisabled);
                                if (appState.canDelete)
                                    actions.push(appState.actions.deleteMedia)
                            }
                            else if (inNowPlaying && appState.isFileOnly)
                                pushPlayButton(buttons, this.buttons.playNowPlayingTrack);
                            else if (!inNowPlaying && showCollectionDetails) {
                                if (appState.showArtistDetailsAction())
                                    actions.push(appState.actions.artistDetails);
                                MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadAppBarActions(appState, stateInfo, this.media).forEach(function addAction(action) {
                                    actions.push(action)
                                });
                                if (this.media.canPurchase)
                                    actions.push(appState.actions.purchaseTrackFromMarketplace);
                                else if (this.media.canPurchaseAlbum)
                                    actions.push(appState.actions.purchaseAlbumFromMarketplace);
                                if (appState.canDelete)
                                    actions.push(appState.actions.deleteMedia);
                                if (appState.canShowMediaProperties)
                                    actions.push(appState.actions.mediaProperties)
                            }
                            else {
                                var canBuyTrack = !appState.isSnapped && !appState.isExplicitBlocked && !appState.canDownloadPurchasedMedia && !appState.isDownloadingPurchasedMedia && !stateInfo.marketplace.hasPurchased && MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase]);
                                var albumPurchase = !appState.isSnapped && !appState.isExplicitBlocked && !stateInfo.marketplace.hasPurchased && MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase]);
                                if (canBuyTrack && this.media.album && this.media.album.isPremium)
                                    canBuyTrack = false;
                                var hasSubscriptionDownloadRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Subscription]);
                                var hasSubscriptionStreamingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream]);
                                var hasFreeStreamingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.FreeStream]);
                                var canPreview = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview]);
                                var contentHasSubscriptionRights = hasSubscriptionStreamingRights || hasSubscriptionDownloadRights;
                                var allowSubscriptionActions = appState.musicSubscriptionEnabled && appState.signedInUserHasSubscription;
                                var showFreeStreamActions = hasFreeStreamingRights && appState.canFreeStream;
                                var hasAddToMyMusicRights = (allowSubscriptionActions && hasSubscriptionDownloadRights) || (allowSubscriptionActions && hasSubscriptionStreamingRights) || (showFreeStreamActions && hasFreeStreamingRights);
                                var isDownloadOnly = hasSubscriptionDownloadRights && !hasSubscriptionStreamingRights;
                                var canPlay = hasFreeStreamingRights || hasSubscriptionStreamingRights || appState.canPlayLocallyOrStreamFromCloud;
                                if (allowSubscriptionActions && contentHasSubscriptionRights) {
                                    if (!MS.Entertainment.Utilities.isWindowsBlue && appState.isRemoteSession)
                                        buttons.push(this.buttons.remotePlayDisabled);
                                    else if (hasSubscriptionStreamingRights) {
                                        if (!appState.isOnline || appState.isExplicitBlocked)
                                            pushPlayButton(buttons, this.buttons.playDisabled);
                                        else if (inNowPlaying)
                                            pushPlayButton(buttons, this.buttons.playNowPlayingTrack);
                                        else
                                            pushPlayButton(buttons, this.buttons.play);
                                        if (appState.canPlaySmartDJ)
                                            actions.push(appState.actions.playSmartDJ);
                                        if (appState.canPinToStartScreen)
                                            if (!existingStartScreenTile)
                                                actions.push(appState.actions.pinToStartScreen);
                                            else
                                                actions.push(appState.actions.unpinFromStartScreen)
                                    }
                                    else if (isDownloadOnly) {
                                        pushPlayButton(buttons, this.buttons.playDisabled);
                                        if (appState.canPlaySmartDJ)
                                            actions.push(appState.actions.playSmartDJ);
                                        if (appState.canPinToStartScreen)
                                            if (!existingStartScreenTile)
                                                actions.push(appState.actions.pinToStartScreen);
                                            else
                                                actions.push(appState.actions.unpinFromStartScreen)
                                    }
                                    else if (canPreview && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                        pushPlayButton(buttons, this.buttons.trackPlayPreview);
                                    if (appState.canAddToMyMusic && hasAddToMyMusicRights)
                                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                                    if (appState.canAddToPlaylist && appState.isSignedIn)
                                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                    if (appState.canAddToNowPlaying && !inNowPlaying && canPlay && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                    if (addToSubActions.length > 0) {
                                        this.buttons.addTo.setSubActions(addToSubActions);
                                        buttons.push(this.buttons.addTo)
                                    }
                                    else if (appState.isExplicitBlocked)
                                        buttons.push(this.buttons.addToDisabled);
                                    if (appState.canDownloadPurchasedMedia)
                                        actions.push(appState.actions.downloadFromMarketplace);
                                    else if ((hasSubscriptionDownloadRights && !appState.downloadOnAddToMyMusicCloud) || isDownloadOnly)
                                        actions.push(appState.actions.subscriptionDownload);
                                    if (canBuyTrack)
                                        actions.push(appState.actions.purchaseTrackFromMarketplace)
                                }
                                else if (showFreeStreamActions) {
                                    if (appState.isExplicitBlocked)
                                        pushPlayButton(buttons, this.buttons.playDisabled);
                                    else if (MS.Entertainment.Utilities.isWindowsBlue && appState.isRemoteSession)
                                        pushPlayButton(buttons, this.buttons.remotePlayDisabled);
                                    else if (inNowPlaying)
                                        pushPlayButton(buttons, this.buttons.playNowPlayingTrack);
                                    else
                                        pushPlayButton(buttons, this.buttons.play);
                                    if (appState.canAddToMyMusic && hasAddToMyMusicRights)
                                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                                    if (appState.canAddToPlaylist)
                                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                    if (appState.canAddToNowPlaying && !inNowPlaying && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                    if (addToSubActions.length > 0) {
                                        this.buttons.addTo.setSubActions(addToSubActions);
                                        buttons.push(this.buttons.addTo)
                                    }
                                    else if (appState.isExplicitBlocked)
                                        buttons.push(this.buttons.addToDisabled);
                                    if (canBuyTrack)
                                        actions.push(appState.actions.purchaseTrackFromMarketplace);
                                    if (appState.canDownloadPurchasedMedia)
                                        actions.push(appState.actions.downloadFromMarketplace);
                                    if (appState.canPlaySmartDJ)
                                        actions.push(appState.actions.playSmartDJ);
                                    if (appState.canPinToStartScreen)
                                        if (!existingStartScreenTile)
                                            actions.push(appState.actions.pinToStartScreen);
                                        else
                                            actions.push(appState.actions.unpinFromStartScreen)
                                }
                                else {
                                    if (!appState.isOnline || appState.isExplicitBlocked)
                                        pushPlayButton(buttons, this.buttons.playDisabled);
                                    else if (canPreview && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                        pushPlayButton(buttons, this.buttons.trackPlayPreview);
                                    if (stateInfo.marketplace.hasPurchased && appState.cloudServiceEnabled) {
                                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                                        if (!inNowPlaying && appState.canAddToNowPlaying && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                            addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying)
                                    }
                                    if (addToSubActions.length > 0) {
                                        this.buttons.addTo.setSubActions(addToSubActions);
                                        buttons.push(this.buttons.addTo)
                                    }
                                    else if (appState.isExplicitBlocked)
                                        buttons.push(this.buttons.addToDisabled);
                                    if (canBuyTrack)
                                        if (buttons.length < fileScope.MAX_TRACK_BUTTON_NUM)
                                            buttons.push(this.buttons.buyTrack);
                                        else
                                            actions.push(appState.actions.purchaseTrackFromMarketplace);
                                    else if (albumPurchase)
                                        if (buttons.length < fileScope.MAX_TRACK_BUTTON_NUM)
                                            buttons.push(this.buttons.buyAlbum);
                                        else
                                            actions.push(appState.actions.purchaseAlbumFromMarketplace);
                                    if (appState.canDownloadPurchasedMedia)
                                        actions.push(appState.actions.downloadFromMarketplace);
                                    if ((allowSubscriptionActions || showFreeStreamActions) && appState.canPlaySmartDJ)
                                        actions.push(appState.actions.playSmartDJ);
                                    if (appState.canPinToStartScreen)
                                        if (!existingStartScreenTile)
                                            actions.push(appState.actions.pinToStartScreen);
                                        else
                                            actions.push(appState.actions.unpinFromStartScreen)
                                }
                                if (appState.canPlayOnXbox)
                                    actions.push(appState.actions.playOnXbox360);
                                if (appState.showArtistDetailsAction())
                                    actions.push(appState.actions.artistDetails);
                                else if (appState.showAlbumDetailsAction())
                                    actions.push(appState.actions.exploreAlbum)
                            }
                            if (!buttons.length)
                                buttons.push(this.buttons.contentNotAvailable);
                            if (inNowPlaying && appState.canRemoveFromNowPlaying && mediaContext.options.containingMedia && mediaContext.options.containingMedia.playbackItemSource && mediaContext.options.containingMedia.playbackItemSource.mediaCollection)
                                promiseArray.push(mediaContext.options.containingMedia.playbackItemSource.mediaCollection.getCount().done(function getItemCount(count) {
                                    if (count > 1)
                                        actions.push(appState.actions.removeFromNowPlaying)
                                }, function getItemCountError(error) {
                                    MS.Entertainment.Pages.fail("Failed to get gallery count. Error: " + (error && error.message))
                                }));
                            return WinJS.Promise.join(promiseArray)
                        }.bind(this)).then(function joinComplete() {
                            return WinJS.Promise.wrap({
                                    smartButtons: buttons, appbarActions: actions
                                })
                        })
                }, onMusicGallerySelectionStateChanged: function onMusicGallerySelectionStateChanged(stateInfo) {
                    var buttons = [];
                    var actions = new MS.Entertainment.UI.Actions.ActionArray;
                    var preconditionPromises = [];
                    var promiseArray = [];
                    var appState = MS.Entertainment.ViewModels._MusicState.getCurrentState(this.media, stateInfo);
                    var showCollectionDetails = MS.Entertainment.ViewModels.MusicStateHandlers.shouldShowCollectionDetails(this.media, stateInfo);
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var inNowPlaying = false;
                    if (mediaContext && mediaContext.options && mediaContext.options.containingMedia)
                        inNowPlaying = MS.Entertainment.Platform.Playback.PlaybackSession.isPlaybackSession(mediaContext.options.containingMedia.playbackItemSource);
                    var playSelectionAction = inNowPlaying ? appState.actions.playSelectionContinuous : appState.actions.playSelection;
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        preconditionPromises.push(pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            existingStartScreenTile = startScreenTile
                        }))
                    }
                    var canEdit = appState.canEdit && !inNowPlaying;
                    return WinJS.Promise.join(preconditionPromises).then(function preconditionsComplete() {
                            if (this.media.smartDJ) {
                                if (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession)
                                    actions.push(appState.actions.playSmartDJ);
                                if (appState.musicMarketplaceConnected)
                                    actions.push(appState.actions.deleteSmartDJ)
                            }
                            else if (appState.isPlaylistTrack && !inNowPlaying) {
                                if (appState.freeStreamBlockedByFreeLimits) {
                                    actions.push(this.media.canPreview ? appState.actions.previewTrack : appState.actions.playDisabled);
                                    if (!appState.isSnapped && !appState.isExplicitBlocked)
                                        if (this.media.canPurchase)
                                            actions.push(appState.actions.purchaseTrackFromMarketplace);
                                        else if (this.media.canPurchaseAlbum)
                                            actions.push(appState.actions.purchaseAlbumFromMarketplace);
                                    if (appState.showArtistDetailsButton)
                                        actions.push(appState.actions.artistDetails);
                                    else if (appState.showAlbumDetailsAction())
                                        actions.push(appState.actions.exploreAlbum);
                                    if (MS.Entertainment.Utilities.hasPropertyPath(mediaContext, "options.containingMedia.editableItemSource")) {
                                        actions.push(appState.actions.removeFromList);
                                        actions.push(appState.actions.moveListItemUp);
                                        actions.push(appState.actions.moveListItemDown);
                                        actions.push(appState.actions.moveListItemToTop);
                                        actions.push(appState.actions.moveListItemToBottom)
                                    }
                                    else
                                        actions.push(appState.actions.removeFromPlaylist);
                                    actions.push(appState.actions.subscriptionSignup)
                                }
                                else {
                                    if (stateInfo.canPlay && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                        if ((appState.isOnline && !appState.isExplicitBlocked) || stateInfo.collection.canPlayLocally)
                                            actions.push(playSelectionAction);
                                        else
                                            actions.push(appState.actions.playDisabled);
                                    if (!inNowPlaying && appState.canAddToNowPlaying && stateInfo.canPlay && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                                        actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                    if (appState.canAddToMyMusic && (this.media.canFreeStream || (appState.signedInUserHasSubscription && this.media.canSubscriptionStream)))
                                        actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                                    else if (appState.canAddToCloud)
                                        actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToCloud);
                                    actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                    actions.push(appState.actions.addTo);
                                    if (MS.Entertainment.Utilities.hasPropertyPath(mediaContext, "options.containingMedia.editableItemSource")) {
                                        actions.push(appState.actions.removeFromList);
                                        actions.push(appState.actions.moveListItemUp);
                                        actions.push(appState.actions.moveListItemDown);
                                        actions.push(appState.actions.moveListItemToTop);
                                        actions.push(appState.actions.moveListItemToBottom)
                                    }
                                    else
                                        actions.push(appState.actions.removeFromPlaylist);
                                    if (appState.canPinToStartScreen)
                                        if (!existingStartScreenTile)
                                            actions.push(appState.actions.pinToStartScreen);
                                        else
                                            actions.push(appState.actions.unpinFromStartScreen);
                                    MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadAppBarActions(appState, stateInfo, this.media).forEach(function addAction(action) {
                                        actions.push(action)
                                    });
                                    if (appState.showArtistDetailsButton)
                                        actions.push(appState.actions.artistDetails);
                                    else if (appState.showAlbumDetailsAction())
                                        actions.push(appState.actions.exploreAlbum);
                                    if (appState.canPlaySmartDJ)
                                        actions.push(appState.actions.playSmartDJ)
                                }
                                if (appState.canShowMediaProperties)
                                    actions.push(appState.actions.mediaProperties)
                            }
                            else if (appState.freeStreamBlockedByFreeLimits) {
                                actions.push(this.media.canPreview ? appState.actions.previewTrack : appState.actions.playDisabled);
                                if (!appState.isSnapped && !appState.isExplicitBlocked)
                                    if (this.media.canPurchase)
                                        actions.push(appState.actions.purchaseTrackFromMarketplace);
                                    else if (this.media.canPurchaseAlbum)
                                        actions.push(appState.actions.purchaseAlbumFromMarketplace);
                                if (appState.showArtistDetailsAction())
                                    actions.push(appState.actions.artistDetails);
                                else if (appState.showAlbumDetailsAction())
                                    actions.push(appState.actions.exploreAlbum);
                                if (canEdit)
                                    actions.push(appState.actions.editMetadata);
                                if (appState.canDelete && !inNowPlaying)
                                    actions.push(appState.actions.deleteMedia);
                                actions.push(appState.actions.subscriptionSignup);
                                if (appState.canShowMediaProperties)
                                    actions.push(appState.actions.mediaProperties)
                            }
                            else if (stateInfo.collection.canPlayLocallyOrStreamFromCloud && showCollectionDetails) {
                                if ((appState.isOnline && !appState.isExplicitBlocked) || stateInfo.collection.canPlayLocally)
                                    actions.push(playSelectionAction);
                                else if (!appState.isDTOMarket || appState.isExplicitBlocked)
                                    actions.push(appState.actions.playDisabled);
                                if (appState.canAddToCloud)
                                    actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToCloud);
                                if (!inNowPlaying && appState.canAddToNowPlaying && (!appState.isDTOMarket || stateInfo.collection.canPlayLocally))
                                    actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                                actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                actions.push(appState.actions.addTo);
                                if (appState.showArtistDetailsAction())
                                    actions.push(appState.actions.artistDetails);
                                else if (appState.showAlbumDetailsAction())
                                    actions.push(appState.actions.exploreAlbum);
                                if (appState.canPlaySmartDJ)
                                    actions.push(appState.actions.playSmartDJ);
                                if (appState.canPinToStartScreen)
                                    if (!existingStartScreenTile)
                                        actions.push(appState.actions.pinToStartScreen);
                                    else
                                        actions.push(appState.actions.unpinFromStartScreen);
                                if (appState.canPlayOnXbox)
                                    actions.push(appState.actions.playOnXbox360);
                                if (canEdit)
                                    actions.push(appState.actions.editMetadata);
                                if (appState.canDelete && !inNowPlaying)
                                    actions.push(appState.actions.deleteMedia);
                                if (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && (this.media.hydrated || this.media.fromCollection)) {
                                    if (appState.canShowMediaProperties)
                                        actions.push(appState.actions.mediaProperties);
                                    if (appState.musicMarketplaceConnected && !appState.isSnapped && !appState.isExplicitBlocked && (!stateInfo.marketplace.hasPurchased || !stateInfo.marketplace.canDownload) && stateInfo.download.items.length === 0) {
                                        var isLocalTrackPurchasablePromise = MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.isLocalTrackPurchasable(this.media).then(function isLocalTrackPurchasable_complete(canPurchase) {
                                                if (appState.isOnline && canPurchase)
                                                    actions.push(appState.actions.purchaseTrackFromMarketplace)
                                            });
                                        promiseArray.push(isLocalTrackPurchasablePromise)
                                    }
                                }
                                else if (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album && appState.musicMarketplaceConnected && (this.media.hasPurchasableTracks && this.media.tracks && stateInfo.marketplace.hasPurchased < this.media.tracks.count) || (!this.media.hasPurchased && this.media.canPurchase) || (this.media.hasPurchased && !this.media.canPurchaseDownload && this.media.canPurchase))
                                    actions.push(appState.actions.purchaseAlbumFromMarketplace);
                                if (appState.isOnline && appState.canFindAlbumInfo)
                                    actions.push(appState.actions.findAlbumInfo);
                                if (!appState.isDevicesPage)
                                    MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadAppBarActions(appState, stateInfo, this.media).forEach(function addAction(action) {
                                        actions.push(action)
                                    })
                            }
                            else if (stateInfo.download.hasFailed) {
                                if ((MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession) && stateInfo.canPlay)
                                    actions.push(playSelectionAction);
                                if (appState.showArtistDetailsAction())
                                    actions.push(appState.actions.artistDetails);
                                else if (appState.showAlbumDetailsAction())
                                    actions.push(appState.actions.exploreAlbum);
                                if (!appState.isDevicesPage)
                                    if (stateInfo.download.hasRetryable)
                                        actions.push(appState.actions.tryDownloadAgain);
                                    else
                                        actions.push(appState.actions.removeFailedDownload);
                                if (canEdit)
                                    actions.push(appState.actions.editMetadata);
                                if (appState.canDelete)
                                    actions.push(appState.actions.deleteMedia)
                            }
                            else if (stateInfo.download.hasPending) {
                                if ((MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession) && stateInfo.canPlay)
                                    actions.push(playSelectionAction);
                                if (!appState.isDevicesPage)
                                    actions.push(appState.actions.downloadAction)
                            }
                            else if (stateInfo.download.hasActive && showCollectionDetails) {
                                if ((MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession) && stateInfo.canPlay)
                                    actions.push(playSelectionAction)
                            }
                            else if (!inNowPlaying && showCollectionDetails) {
                                if (appState.showArtistDetailsAction())
                                    actions.push(appState.actions.artistDetails);
                                MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadAppBarActions(appState, stateInfo, this.media).forEach(function addAction(action) {
                                    actions.push(action)
                                });
                                if (this.media.canPurchase)
                                    actions.push(appState.actions.purchaseTrackFromMarketplace);
                                else if (this.media.canPurchaseAlbum)
                                    actions.push(appState.actions.purchaseAlbumFromMarketplace);
                                if (canEdit)
                                    actions.push(appState.actions.editMetadata);
                                if (appState.canDelete)
                                    actions.push(appState.actions.deleteMedia);
                                if (appState.canShowMediaProperties)
                                    actions.push(appState.actions.mediaProperties)
                            }
                            else if (inNowPlaying && appState.isFileOnly)
                                actions.push(playSelectionAction);
                            else if (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album && (!this.media.hydrated || !this.media.tracks))
                                if (appState.isOnline && !appState.isExplicitBlocked)
                                    return WinJS.Promise.wrap(null);
                                else
                                    actions.push(appState.actions.playDisabled);
                            else
                                promiseArray.push(MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getMusicRights(this.media).then(function addMarketplaceActions(musicRights) {
                                    musicRights = musicRights || {};
                                    var allowSubscriptionActions = appState.musicSubscriptionEnabled && appState.signedInUserHasSubscription;
                                    var allowFreeStreamActions = appState.canFreeStream;
                                    var allowSubscriptionOrFreeStreamActions = (allowSubscriptionActions || allowFreeStreamActions);
                                    var hasSubscriptionDownloadRights = allowSubscriptionActions && musicRights.subscriptionDownload;
                                    var hasSubscriptionStreamingRights = allowSubscriptionActions && musicRights.subscriptionStream;
                                    var hasFreeStreamingRights = allowFreeStreamActions && musicRights.freeStream;
                                    var hasAddToMyMusicRights = hasSubscriptionStreamingRights || hasFreeStreamingRights || hasSubscriptionDownloadRights;
                                    var showSubscriptionActions = allowSubscriptionActions && (hasSubscriptionStreamingRights || hasSubscriptionDownloadRights);
                                    var showFreeStreamActions = allowFreeStreamActions && hasFreeStreamingRights;
                                    var canPlay = hasFreeStreamingRights || hasSubscriptionStreamingRights || appState.canPlayLocallyOrStreamFromCloud;
                                    var canPreview = musicRights.preview;
                                    var isDownloadOnly = hasSubscriptionDownloadRights && !hasSubscriptionStreamingRights;
                                    if (appState.showArtistDetailsAction())
                                        actions.push(appState.actions.artistDetails);
                                    else if (appState.showAlbumDetailsAction())
                                        actions.push(appState.actions.exploreAlbum);
                                    if (allowSubscriptionOrFreeStreamActions && appState.canPlaySmartDJ)
                                        actions.push(appState.actions.playSmartDJ);
                                    if (!(appState.isExplicitBlocked && musicRights.allTracksExplicit)) {
                                        var canBuyTrack = !appState.isSnapped && !appState.canDownloadPurchasedMedia && !appState.isDownloadingPurchasedMedia && musicRights.trackPurchase && this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && !stateInfo.marketplace.hasPurchased;
                                        var contentFullyOwned = (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && stateInfo.marketplace.hasPurchased) || (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album && this.media.tracks && stateInfo.marketplace.hasPurchased === this.media.tracks.count);
                                        var albumPurchase = !appState.isSnapped && musicRights.albumPurchase && !contentFullyOwned && (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album);
                                        if (albumPurchase && this.media.album && this.media.album.isPremium)
                                            albumPurchase = false;
                                        if (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession) {
                                            if (!appState.isOnline)
                                                actions.push(appState.actions.playDisabled);
                                            else if (appState.canPlayTopSongs)
                                                actions.push(appState.actions.playTopSongs);
                                            else if (canPlay)
                                                actions.push(playSelectionAction);
                                            else if (canPreview && !isDownloadOnly)
                                                actions.push(appState.actions.previewSelection);
                                            if (!inNowPlaying && appState.canAddToNowPlaying && (canPlay || appState.canPlayTopSongs))
                                                actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying)
                                        }
                                        if (appState.canAddToMyMusic && hasAddToMyMusicRights)
                                            actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                                        if (showSubscriptionActions) {
                                            if (appState.canAddToPlaylist && appState.isSignedIn)
                                                actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                            if (appState.canDownloadPurchasedMedia)
                                                actions.push(appState.actions.downloadFromMarketplace);
                                            else if ((hasSubscriptionDownloadRights && !appState.downloadOnAddToMyMusicCloud) || isDownloadOnly)
                                                actions.push(appState.actions.subscriptionDownload)
                                        }
                                        else {
                                            if ((showFreeStreamActions || appState.canPlayTopSongs || appState.isDTOMarket) && appState.canAddToPlaylist)
                                                actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                                            if (appState.canDownloadPurchasedMedia)
                                                actions.push(appState.actions.downloadFromMarketplace)
                                        }
                                        if (canBuyTrack)
                                            actions.push(appState.actions.purchaseTrackFromMarketplace);
                                        else if (albumPurchase)
                                            actions.push(appState.actions.purchaseAlbumFromMarketplace);
                                        if (appState.canPinToStartScreen)
                                            if (!existingStartScreenTile)
                                                actions.push(appState.actions.pinToStartScreen);
                                            else
                                                actions.push(appState.actions.unpinFromStartScreen);
                                        if (appState.canPlayOnXbox)
                                            actions.push(appState.actions.playOnXbox360);
                                        if (appState.canDelete)
                                            actions.push(appState.actions.deleteMedia);
                                        if (actions.hasSubActions(appState.actions.addTo))
                                            actions.push(appState.actions.addTo)
                                    }
                                    else
                                        actions.push(appState.actions.playDisabled)
                                }.bind(this), function handleGetRightsFailed(error) {
                                    MS.Entertainment.ViewModels.fail("Failed to get marketplace rights during single selection. Error message " + error && error.message)
                                }));
                            if (inNowPlaying && appState.canRemoveFromNowPlaying && mediaContext.options.containingMedia && mediaContext.options.containingMedia.playbackItemSource && mediaContext.options.containingMedia.playbackItemSource.mediaCollection)
                                promiseArray.push(mediaContext.options.containingMedia.playbackItemSource.mediaCollection.getCount().done(function getItemCount(count) {
                                    if (count > 1)
                                        actions.push(appState.actions.removeFromNowPlaying)
                                }, function getItemCountError(error) {
                                    MS.Entertainment.Pages.fail("Failed to get gallery count. Error: " + (error && error.message))
                                }));
                            return WinJS.Promise.join(promiseArray)
                        }.bind(this)).then(function joinComplete() {
                            return WinJS.Promise.wrap({
                                    smartButtons: buttons, appbarActions: actions
                                })
                        })
                }, onMusicGalleryPlaylistSelectionStateChanged: function onMusicGalleryPlaylistSelectionStateChanged(stateInfo) {
                    var buttons = [];
                    var actions = new MS.Entertainment.UI.Actions.ActionArray;
                    var appState = MS.Entertainment.ViewModels._MusicState.getCurrentState(this.media, stateInfo);
                    actions.push(appState.actions.playSelection);
                    if (appState.canAddToNowPlaying && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession || stateInfo.collection.canPlayLocally))
                        actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                    if (appState.canAddToCloud)
                        actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToCloud);
                    actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                    actions.push(appState.actions.addTo);
                    actions.push(appState.actions.renamePlaylist);
                    actions.push(appState.actions.deletePlaylist);
                    MS.Entertainment.ViewModels.MusicStateHelpers._getDownloadAppBarActions(appState, stateInfo, this.media).forEach(function addAction(action) {
                        actions.push(action)
                    });
                    return WinJS.Promise.wrap({
                            smartButtons: buttons, appbarActions: actions
                        })
                }, onMusicGallerySmartDJSelectionStateChanged: function onMusicGallerySmartDJSelectionStateChanged(stateInfo) {
                    var actions = [];
                    var appState = MS.Entertainment.ViewModels._MusicState.getCurrentState(this.media, stateInfo);
                    var pinToStartMediaPromise;
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        pinToStartMediaPromise = pinToStartScreenService.getTileForMediaAsync(this.media)
                    }
                    return pinToStartMediaPromise.then(function preconditionsComplete(startScreenTile) {
                            existingStartScreenTile = startScreenTile;
                            if (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession)
                                actions.push(appState.actions.playSmartDJ);
                            if (appState.canPinToStartScreen)
                                if (!existingStartScreenTile)
                                    actions.push(appState.actions.pinToStartScreen);
                                else
                                    actions.push(appState.actions.unpinFromStartScreen);
                            if (appState.musicMarketplaceConnected)
                                actions.push(appState.actions.deleteSmartDJ);
                            return WinJS.Promise.wrap({
                                    smartButtons: [], appbarActions: actions
                                })
                        })
                }, onMusicOpportunitiesChanged: function onMusicOpportunitiesChanged(stateInfo) {
                    var buttons = [];
                    var actions = new MS.Entertainment.UI.Actions.ActionArray;
                    var appState = MS.Entertainment.ViewModels._MusicState.getCurrentState(this.media, stateInfo);
                    if (this.media.isAudioAd)
                        return WinJS.Promise.wrap({
                                smartButtons: buttons, appbarActions: actions
                            });
                    if (!this.media.mediaType) {
                        if (this.options && this.options.executeLocation)
                            this.buttons = MS.Entertainment.ViewModels.SmartBuyButtons.getEngagePanelButtons(this.options.executeLocation);
                        if ((MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession) && (appState.freeStreamEnabled || appState.cachedSubscriptionStatus)) {
                            buttons.push(this.buttons.playAnyArtist);
                            if (appState.smartDJEnabled)
                                buttons.push(this.buttons.newSmartDJ)
                        }
                        else if (appState.musicSubscriptionEnabled && !appState.signedInUserHasSubscription)
                            buttons.push(this.buttons.getFreeMusicPassTrial);
                        else
                            buttons.push(this.buttons.browseAllMusic);
                        buttons.push(this.buttons.playPlaylist)
                    }
                    else {
                        if (appState.canSaveNowPlaying) {
                            actions.push(appState.actions.saveNowPlayingPlaylist);
                            buttons.push(this.buttons.saveNowPlayingPlaylist)
                        }
                        if (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession) {
                            var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                            if (appState.canPlaySmartDJ && (!sessionMgr.primarySession.smartDJSeed || sessionMgr.primarySession.smartDJSeed && sessionMgr.primarySession.smartDJSeed.canonicalId !== this.media.artistServiceId) && (MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession))
                                buttons.push(this.buttons.playArtistSmartDJ)
                        }
                        var hasSubscriptionDownloadRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Subscription]);
                        var hasSubscriptionStreamingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream]);
                        var hasFreeStreamingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(this.media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.FreeStream]);
                        var contentHasSubscriptionRights = hasSubscriptionStreamingRights || hasSubscriptionDownloadRights;
                        var allowSubscriptionActions = appState.musicSubscriptionEnabled && appState.signedInUserHasSubscription;
                        var showFreeStreamActions = hasFreeStreamingRights && appState.canFreeStream;
                        var hasFreeOrSubscriptionRights = ((allowSubscriptionActions && hasSubscriptionDownloadRights) || showFreeStreamActions);
                        var hasAddToMyMusicRights = (allowSubscriptionActions && hasSubscriptionDownloadRights) || (allowSubscriptionActions && hasSubscriptionStreamingRights) || (showFreeStreamActions && hasFreeStreamingRights);
                        if (appState.canAddToMyMusic && hasAddToMyMusicRights && !stateInfo.collection.playability.counts.downloading && stateInfo.collection.playability.counts.localOrCloud <= 0) {
                            buttons.push(this.buttons.addToMyMusic);
                            buttons.push(this.buttons.addAlbumToMyMusic);
                            actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic)
                        }
                        if ((MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession) && (allowSubscriptionActions || showFreeStreamActions) && MS.Entertainment.Utilities.isValidServiceId(this.media.artistServiceId))
                            buttons.push(this.buttons.playAllMarketplaceArtist);
                        if ((MS.Entertainment.Utilities.isWindowsBlue || !appState.isRemoteSession) && appState.canPlayOnXbox) {
                            buttons.push(this.buttons.playOnXbox);
                            actions.push(appState.actions.playTrackOnXbox360)
                        }
                        if (((hasFreeOrSubscriptionRights && appState.canAddToPlaylist && appState.isSignedIn) || (this.media.inCollection && stateInfo.collection.playability.counts.cloudOnly === 0)) && !this.media.activationFilePath)
                            actions.pushSubAction(appState.actions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addTrackToPlaylist);
                        if (actions.hasSubActions(appState.actions.addTo))
                            actions.push(appState.actions.addTo);
                        if (appState.showRelatedArtists)
                            buttons.push(this.buttons.playRelatedArtist)
                    }
                    return WinJS.Promise.wrap({
                            smartButtons: buttons, appbarActions: actions
                        })
                }, onArtistImmersiveStateChanged: function onArtistImmersiveStateChanged(stateInfo) {
                    if (!this.media.hydrated && !(this.media.artist && this.media.artist.hydrated))
                        return WinJS.Promise.wrap(null);
                    var buttons = [];
                    var actions = [];
                    var preconditionPromises = [];
                    var appState = MS.Entertainment.ViewModels._MusicState.getCurrentState(this.media, stateInfo);
                    var existingStartScreenTile = null;
                    if (appState.canPinToStartScreen) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        preconditionPromises.push(pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            existingStartScreenTile = startScreenTile
                        }))
                    }
                    return WinJS.Promise.join(preconditionPromises).then(function preconditionsComplete() {
                            if (appState.canPlaySmartDJ)
                                buttons.push(this.buttons.playArtistSmartDJ);
                            if (appState.canPinToStartScreen)
                                if (!existingStartScreenTile)
                                    actions.push(appState.actions.pinToStartScreen);
                                else
                                    actions.push(appState.actions.unpinFromStartScreen);
                            return WinJS.Promise.wrap({
                                    smartButtons: buttons, appbarActions: actions
                                })
                        }.bind(this))
                }, shouldShowCollectionDetails: function shouldShowCollectionDetails(media, stateInfo) {
                    var showCollectionDetails = false;
                    if (media)
                        showCollectionDetails = media.fromCollection || (media.location === MS.Entertainment.Data.ItemLocation.collection) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && stateInfo.collection.playability.counts.localOrCloud) || (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album && media.tracks && stateInfo.collection.playability.counts.localOrCloud === media.tracks.count);
                    return showCollectionDetails
                }
        }})
})()
})();
/* >>>>>>/components/music/importplaylists.js:7626 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions.ImportPlaylists", {
        AutomationIds: {
            appBarImportAction: "appBarImportPlaylistsAction", playPlaylistsImportAction: "playPlaylistsImportPlaylistsAction", emptyCollectionImportAction: "emptyCollectionImportPlaylistsAction"
        }, _configurationManager: null, _mediaStore: null, _getConfigurationManager: function _getConfigurationManager() {
                if (!MS.Entertainment.UI.Actions.ImportPlaylists._configurationManager)
                    MS.Entertainment.UI.Actions.ImportPlaylists._configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                return MS.Entertainment.UI.Actions.ImportPlaylists._configurationManager
            }, _getMediaStore: function _getMediaStore() {
                if (!MS.Entertainment.UI.Actions.ImportPlaylists._mediaStore)
                    MS.Entertainment.UI.Actions.ImportPlaylists._mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                return MS.Entertainment.UI.Actions.ImportPlaylists._mediaStore
            }, _grovelerPlaylistImportCompleted: function _grovelerPlaylistImportCompleted() {
                return MS.Entertainment.UI.Actions.ImportPlaylists._getConfigurationManager().groveler.playlistImportCompleted
            }
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Actions.ImportPlaylists", {
        ImportPlaylistsAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function importPlaylistsAction() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.Actions.ImportPlaylists.AutomationIds.emptyCollectionImportAction, executed: function executed(param) {
                    return MS.Entertainment.UI.Actions.ImportPlaylists._showImportPlaylistsOverlay()
                }, canExecute: function canExecute(param) {
                    return true
                }
        }), getImportPlaylistsAction: function getImportPlaylistsAction() {
                var importPlaylistsAction = new MS.Entertainment.UI.ToolbarAction;
                importPlaylistsAction.id = MS.Entertainment.UI.AppBarActions.importPlaylists;
                importPlaylistsAction.title = String.load(String.id.IDS_PLAYLIST_IMPORT_PLAYLIST_BUTTON);
                importPlaylistsAction.icon = WinJS.UI.AppBarIcon.importall;
                importPlaylistsAction.automationId = MS.Entertainment.UI.Actions.ImportPlaylists.AutomationIds.appBarImportAction;
                importPlaylistsAction.executed = function executed(param) {
                    return MS.Entertainment.UI.Actions.ImportPlaylists._showImportPlaylistsOverlay()
                };
                importPlaylistsAction.canExecute = function canExecute(param) {
                    return !MS.Entertainment.UI.Actions.ImportPlaylists._importInProgress && MS.Entertainment.UI.Actions.ImportPlaylists._grovelerPlaylistImportCompleted()
                };
                return {action: importPlaylistsAction}
            }, getDoImportPlaylistsAction: function getDoImportPlaylistsAction() {
                var importPlaylistsAction = new MS.Entertainment.UI.ToolbarAction;
                var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                var options = mediaContext.options || {};
                var location = options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.canvas;
                importPlaylistsAction.parameter = {
                    actionType: MS.Entertainment.UI.Actions.ActionWrapperType.button, executeLocation: location
                };
                importPlaylistsAction.id = MS.Entertainment.UI.AppBarActions.importPlaylists;
                importPlaylistsAction.title = String.load(String.id.IDS_PLAYLIST_IMPORT_PLAYLIST_BUTTON);
                importPlaylistsAction.icon = WinJS.UI.AppBarIcon.importall;
                importPlaylistsAction.automationId = MS.Entertainment.UI.Actions.ImportPlaylists.AutomationIds.playPlaylistsImportAction;
                importPlaylistsAction.shouldAutomaticallySendTelemetry = false;
                importPlaylistsAction.executed = function executed() {
                    if (MS.Entertainment.UI.Actions.ImportPlaylists._importInProgress)
                        return MS.Entertainment.UI.Actions.ImportPlaylists._showImportInProgressOverlay();
                    else
                        return MS.Entertainment.UI.Actions.ImportPlaylists._startPlaylistImport()
                }.bind(this);
                importPlaylistsAction.canExecute = function canExecute() {
                    return true
                };
                return importPlaylistsAction
            }, _startPlaylistImport: function _startPlaylistImport(resumeLastImport) {
                var playlistProvider = MS.Entertainment.UI.Actions.ImportPlaylists._getMediaStore().playlistProvider;
                MS.Entertainment.UI.Actions.ImportPlaylists._setImportInProgress(true);
                var importPromise = resumeLastImport ? playlistProvider.resumeImportPlaylistsAsync() : playlistProvider.importPlaylistsAsync();
                importPromise.then(function success(result) {
                    MS.Entertainment.UI.Actions.ImportPlaylists._showImportCompleteNotification(result.importPlaylistsCount)
                }, function error(error) {
                    MS.Entertainment.UI.Actions.ImportPlaylists._showImportFailedNotification(error)
                }).done(function finishImport() {
                    MS.Entertainment.UI.Actions.ImportPlaylists._setImportInProgress(false)
                });
                if (MS.Entertainment.UI.Actions.ImportPlaylists._importInProgress)
                    MS.Entertainment.UI.Actions.ImportPlaylists._showImportInProgressNotification();
                return WinJS.Promise.wrap()
            }, resumeLastPlaylistImport: function resumeLastPlaylistImport() {
                if (!MS.Entertainment.UI.Actions.ImportPlaylists._grovelerPlaylistImportCompleted())
                    this._startPlaylistImport(true);
                else
                    MS.Entertainment.UI.Actions.ImportPlaylists._getMediaStore().playlistProvider.resumeImportPlaylistsAsync()
            }, _setImportInProgress: function _setImportInProgress(isImporting) {
                MS.Entertainment.UI.Actions.ImportPlaylists._importInProgress = isImporting;
                var appToolbarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                var importAction = appToolbarService.getToolbarAction(MS.Entertainment.UI.AppBarActions.importPlaylists);
                if (importAction)
                    importAction.requeryCanExecute()
            }, _showImportPlaylistsOverlay: function _showImportPlaylistsOverlay() {
                if (MS.Entertainment.UI.Actions.ImportPlaylists._importInProgress)
                    return MS.Entertainment.UI.Actions.ImportPlaylists._showImportInProgressOverlay();
                var overlayWidth = "40%";
                var overlayHeight = "310px";
                var playlistImportDialogTitle = String.load(String.id.IDS_PLAYLIST_IMPORT_DIALOG_TITLE);
                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                var isMusicMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace);
                if (!isMusicMarketplaceEnabled)
                    playlistImportDialogTitle = String.load(String.id.IDS_PLAYLIST_IMPORT_DIALOG_TITLE_NO_MARKETPLACE);
                return MS.Entertainment.UI.Shell.showMessageBox(playlistImportDialogTitle, String.load(String.id.IDS_PLAYLIST_IMPORT_DIALOG_DESC_TEXT), {
                        width: overlayWidth, height: overlayHeight, buttons: [WinJS.Binding.as({
                                    title: String.load(String.id.IDS_PLAYLIST_IMPORT_PLAYLIST_BUTTON), execute: function executeSubmit(dialog) {
                                            MS.Entertainment.UI.Actions.ImportPlaylists._startPlaylistImport();
                                            dialog.hide()
                                        }
                                }), WinJS.Binding.as({
                                    title: String.load(String.id.IDS_CANCEL_BUTTON_TC), execute: function executeCancel(dialog) {
                                            dialog.hide()
                                        }
                                })], defaultButtonIndex: 0, cancelButtonIndex: 1
                    })
            }, _showImportInProgressOverlay: function _showImportInProgressOverlay() {
                return MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_PLAYLIST_IMPORT_IN_PROGRESS_DIALOG_TITLE), String.load(String.id.IDS_PLAYLIST_IMPORT_IN_PROGRESS_DIALOG_DESC_TEXT))
            }, _showImportInProgressNotification: function _showImportInProgressNotification() {
                var appNotificationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification);
                appNotificationService.send(new MS.Entertainment.UI.Notification({
                    notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: String.load(String.id.IDS_PLAYLIST_IMPORT_IN_PROGRESS), subTitle: String.empty, moreDetails: null, icon: WinJS.UI.AppBarIcon.importall, action: null, category: MS.Entertainment.UI.Actions.ImportPlaylists._importNotificationCategory, isPersistent: true, dismissOnSignOut: true
                }))
            }, _showImportCompleteNotification: function _showImportCompleteNotification(count) {
                var appNotificationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification);
                var playlistsWereImported = count && count > 0;
                appNotificationService.send(new MS.Entertainment.UI.Notification({
                    notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: playlistsWereImported ? String.load(String.id.IDS_PLAYLIST_IMPORT_COMPLETED) : String.load(String.id.IDS_PLAYLIST_IMPORT_COMPLETED_NONE_FOUND), subTitle: playlistsWereImported ? MS.Entertainment.Formatters.formatCount(count, MS.Entertainment.Formatters.playlistsAddedCountText) : String.empty, moreDetails: null, icon: WinJS.UI.AppBarIcon.importall, action: null, category: MS.Entertainment.UI.Actions.ImportPlaylists._importNotificationCategory, isPersistent: false, dismissOnSignOut: true
                }))
            }, _showImportFailedNotification: function _showImportFailedNotification(error) {
                var appNotificationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification);
                appNotificationService.removeNotificationByCategory(MS.Entertainment.UI.Actions.ImportPlaylists._importNotificationCategory);
                appNotificationService.send(new MS.Entertainment.UI.Notification({
                    notificationType: MS.Entertainment.UI.Notification.Type.Critical, title: String.load(String.id.IDS_PLAYLIST_IMPORT_FAILURE_OCCURRED), subTitle: String.load(String.id.IDS_PLAYLIST_IMPORT_FAILURE_SUBTITLE), moreDetails: null, icon: WinJS.UI.AppBarIcon.importall, action: MS.Entertainment.UI.Actions.ImportPlaylists._getImportPlaylistErrorAction(error), category: MS.Entertainment.UI.Actions.ImportPlaylists._importNotificationCategory, isPersistent: true, dismissOnSignOut: true
                }))
            }, _getImportPlaylistErrorAction: function _getImportPlaylistErrorAction(error) {
                return function showImportPlaylistError() {
                        MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_PLAYLIST_IMPORT_FAILURE_OCCURRED), String.load(String.id.IDS_PLAYLIST_IMPORT_FAILURE_DETAIL))
                    }
            }, _importInProgress: false, _importNotificationCategory: "playlistImport"
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.importPlaylists, function() {
        return new MS.Entertainment.UI.Actions.ImportPlaylists.ImportPlaylistsAction
    })
})()
})();
/* >>>>>>/components/music/adservice.js:7770 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Music");
    WinJS.Namespace.define("MS.Entertainment.Music.Freeplay", {
        Events: {
            emptyRoomLimitReached: "emptyRoomLimitReached", travelLimitReached: "travelLimitReached", monthlyFreeLimitExceeded: "monthlyFreeLimitExceeded", monthlyFreeLimitReset: "monthlyFreeLimitReset", freeTrialStarted: "freeTrialStarted", freeTrialCompleted: "freeTrialCompleted", freeTrackLimitExceeded: "freeTrackLimitExceeded", freeTrackLimitReset: "freeTrackLimitReset", unauthenticatedTrackLimitExceeded: "unauthenticatedTrackLimitExceeded", audioAdStart: "audioAdStart", audioAdComplete: "audioAdComplete", audioAdReasonClickThru: "audioAdReasonClickThru", videoAdStart: "videoAdStart", videoAdClosed: "videoAdClosed", videoAdComplete: "videoAdComplete", videoAdClickThru: "videoAdClickThru", videoAdReasonClickThru: "videoAdReasonClickThru", videoAdError: "videoAdError", adCompanionShown: "adCompanionShown", adCompanionClosed: "adCompanionClosed", adCompanionFullTerm: "adCompanionFullTerm", adCompanionClickThru: "adCompanionClickThru", adCompanionClosedOnNav: "adCompanionClosedOnNav", limitDialogDisplayed: "limitDialogDisplayed", limitDialogCancel: "limitDialogCancel", limitDialogContinuePlaying: "limitDialogContinuePlaying", limitDialogOk: "limitDialogOk", limitDialogSignIn: "limitDialogSignIn", limitDialogSignInNowForExistingUser: "limitDialogSignInNowForExistingUser", limitDialogSignInNowForNewUser: "limitDialogSignInNowForNewUser", limitDialogSubscribe: "limitDialogSubscribe", limitDialogSignInThenSignUp: "limitDialogSignInThenSignUp", limitDialogBuyTrack: "limitDialogBuyTrack", limitDialogBuyAlbum: "limitDialogBuyAlbum", limitSettingsSubscribe: "limitSettingsSubscribe", musicPassSignUpShown: "musicPassSignUpShown", musicPassUpsellAppBarInvoked: "musicPassUpsellAppBarInvoked", musicPassUpsellEngagePanelInvoked: "musicPassUpsellEngagePanelInvoked", musicPassUpsellVideoAdInvoked: "musicPassUpsellVideoAdInvoked", musicPassUpsellAlbumPopoverLinkInvoked: "musicPassUpsellAlbumPopoverLinkInvoked", musicPassUpsellArtistDiscographyInvoked: "musicPassUpsellArtistDiscographyInvoked", musicPassUpsellMarketplaceLinkInvoked: "musicPassUpsellMarketplaceLinkInvoked"
        }, sendTelemetryEvent: function sendTelemetryEvent(event) {
                MS.Entertainment.Utilities.Telemetry.logTelemetryEvent(event)
            }
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Music", {AdService: MS.Entertainment.UI.Framework.define(function AdServiceConstructor() {
            this._eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
            var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
            this._isFreePlayEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay) && MS.Entertainment.Utilities.isMusicApp1;
            if (!this._isFreePlayEnabled)
                return;
            this._signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
            this._signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
            this._uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
            this._configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
            var onUserStatusChanged = this._onUserStatusChanged.bind(this);
            this._signInBinding = WinJS.Binding.bind(this._signIn, {isSignedIn: onUserStatusChanged});
            this._subscriptionBinding = WinJS.Binding.bind(this._signedInUser, {isSubscription: onUserStatusChanged});
            if (!this._signIn.isSignedIn && !this._configurationManager.service.lastSignedInUserSubscription)
                this.initialize()
        }, {
            _eventProvider: null, _isFreePlayEnabled: false, _initialized: false, _audioAdPackage: null, _audioAdPackageRefreshing: false, _audioAdPackageRefreshTimer: null, _videoAdPackage: null, _videoAdPackageRefreshing: false, _videoAdPackageRefreshTimer: null, _networkOpenRequest: null, _networkStatus: null, _currentAudioAd: null, _currentVideoAd: null, _adManager: null, _emptyRoomTimeout: null, _emptyRoomDialogVisible: false, _companionAdVisible: false, _companionAdTimer: null, _sessionManager: null, _playbackSession: null, _currentMediaType: null, _currentPlaybackSessionOrdinal: null, _currentOrdinalChangedCallback: null, _signIn: null, _signedInUser: null, _lastSignedInState: false, _uiStateService: null, _configurationManager: null, _signInBinding: null, _subscriptionBinding: null, _navigationBinding: null, _uiStateServiceBindings: null, _playbackSessionBindings: null, _inputHandler: null, _visibilityChanged: null, _lastInteractionEventTime: null, _appInSnappedMode: false, _streamingTracks: null, _adPlaying: false, _videoAdPlaying: false, _mediaControlArtOverridden: false, _skipAudioAdForNextTrack: false, _freePlayLimits: null, _lastAudioAdMediaInstance: null, _lastAudioAdMediaInstanceIsNext: false, _lastVideoAdMediaItemProperties: null, initialize: function initialize() {
                    if (this._initialized)
                        return;
                    this._lastSignedInState = this._signIn.isSignedIn;
                    this._streamingTracks = {};
                    this._adManager = new Microsoft.Entertainment.Ads.AdManager;
                    this._emptyRoomTimeout = this._adManager.getEmptyRoomTimeout();
                    var applicationId = MS.Entertainment.UI.Music.AdService._getAdApplicationId();
                    var unAuthExtension = String.empty;
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    if (!this._signIn.isSignedIn && featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlayAnonAds))
                        unAuthExtension = "UnAuth";
                    var audioAdUnitIds = MS.Entertainment.UI.Music.AdService._getAdUnitId(MS.Entertainment.UI.Music.AdService.audioAdUnitIdConfig + unAuthExtension);
                    var videoAdUnitIds = MS.Entertainment.UI.Music.AdService._getAdUnitId(MS.Entertainment.UI.Music.AdService.videoAdUnitIdConfig + unAuthExtension);
                    this._audioAdPackage = new MicrosoftNSJS.Advertising.AdPackage(applicationId, audioAdUnitIds);
                    this._audioAdPackage.onAdRefreshed = this._onAudioAdRefreshed.bind(this);
                    this._audioAdPackage.onErrorOccurred = this._onAdErrorOccurred.bind(this);
                    this._videoAdPackage = new MicrosoftNSJS.Advertising.AdPackage(applicationId, videoAdUnitIds);
                    this._videoAdPackage.onAdRefreshed = this._onVideoAdRefreshed.bind(this);
                    this._videoAdPackage.onErrorOccurred = this._onAdErrorOccurred.bind(this);
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                        var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        this._navigationBinding = WinJS.Binding.bind(navigationService, {currentPage: this._handleNavigation.bind(this)})
                    }
                    this._sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                    this._uiStateServiceBindings = WinJS.Binding.bind(this._uiStateService, {
                        networkStatus: this._onNetworkStatusChanged.bind(this), primarySessionId: function primarySessionIdChanged() {
                                this._playbackSession = this._sessionManager.primarySession;
                                this._setUpSessionBindings()
                            }.bind(this)
                    });
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.freePlayLimits))
                        this._freePlayLimits = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.freePlayLimits);
                    this._inputHandler = this._onInputReceived.bind(this);
                    var interactionNotifier = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.interactionNotifier);
                    interactionNotifier.addInteractionListener(this._inputHandler);
                    this._visibilityChanged = this._onVisibilityChanged.bind(this);
                    document.addEventListener("visibilitychange", this._visibilityChanged, false);
                    this._uiStateService.shouldShowAdsForFreePlay = true;
                    this._initialized = true;
                    this._eventProvider.traceAdService_Initialized()
                }, dispose: function dispose() {
                    this._initialized = false;
                    this._adManager = null;
                    this._streamingTracks = null;
                    this._lastAudioAdMediaInstance = null;
                    this._lastVideoAdMediaItemProperties = null;
                    if (this._audioAdPackage)
                        this._audioAdPackage.dispose();
                    if (this._videoAdPackage)
                        this._videoAdPackage.dispose();
                    if (this._networkOpenRequest) {
                        this._networkOpenRequest.release();
                        this._networkOpenRequest = null
                    }
                    this._networkStatus = null;
                    if (this._navigationBinding) {
                        this._navigationBinding.cancel();
                        this._navigationBinding = null
                    }
                    if (this._uiStateServiceBindings) {
                        this._uiStateServiceBindings.cancel();
                        this._uiStateServiceBindings = null
                    }
                    if (this._playbackSessionBindings) {
                        this._playbackSessionBindings.cancel();
                        this._playbackSessionBindings = null
                    }
                    if (this._currentOrdinalChangedCallback) {
                        this._currentOrdinalChangedCallback.cancel();
                        this._currentOrdinalChangedCallback = null
                    }
                    if (this._companionAdTimer) {
                        window.clearTimeout(this._companionAdTimer);
                        this._companionAdTimer = null
                    }
                    this._hideCompanionAd();
                    var interactionNotifier = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.interactionNotifier);
                    interactionNotifier.removeInteractionListener(this._inputHandler);
                    document.removeEventListener("visibilitychange", this._visibilityChanged);
                    this._inputHandler = null;
                    this._visibilityChanged = null;
                    this._videoAdPlaying = false;
                    this._eventProvider.traceAdService_Unloaded()
                }, isAudioAdRequired: function isAudioAdRequired(mediaInstance, isNextMediaInstance) {
                    var promise = WinJS.Promise.wrap();
                    var adMediaItem;
                    if (!this._isFreePlayEnabled || !this._initialized || !this._isStreamingTrack(mediaInstance) || this._skipAudioAdForNextTrack || (this._freePlayLimits && this._freePlayLimits.isMonthlyFreeLimitExceeded)) {
                        this._skipAudioAdForNextTrack = false;
                        return promise
                    }
                    if (this._currentAudioAd && this._adManager.isAdRequired(Microsoft.Entertainment.Ads.AdType.audio, isNextMediaInstance)) {
                        adMediaItem = this._getAudioAdMediaItem(mediaInstance);
                        this._lastAudioAdMediaInstance = mediaInstance;
                        this._lastAudioAdMediaInstanceIsNext = isNextMediaInstance
                    }
                    var currentTimeInMs = Date.now();
                    var lastInputTimeInMs = this._lastInteractionEventTime || currentTimeInMs;
                    var timeDeltaInMin = (currentTimeInMs - lastInputTimeInMs) / (1000 * 60);
                    if (timeDeltaInMin > this._emptyRoomTimeout) {
                        var dialogDismissed;
                        promise = new WinJS.Promise(function(c, e, p) {
                            dialogDismissed = c
                        }).then(function onDialogDismissed() {
                            var playAdIfNeeded = this._signIn.isSignedIn && !this._signedInUser.isSubscription;
                            var mediaItemToInject = playAdIfNeeded ? adMediaItem : null;
                            this._emptyRoomDialogVisible = false;
                            if (this._playbackSession.currentTransportState === MS.Entertainment.Platform.Playback.TransportState.paused)
                                this._playbackSession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.playing;
                            return WinJS.Promise.wrap(mediaItemToInject)
                        }.bind(this));
                        MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.emptyRoomLimitReached);
                        MS.Entertainment.Music.MusicBrandDialog.showEmptyRoomDialog(dialogDismissed);
                        this._emptyRoomDialogVisible = true;
                        var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                        if (uiState.isSnapped || !uiState.isAppVisible)
                            this._sendEmptyRoomToast()
                    }
                    else
                        promise = WinJS.Promise.wrap(adMediaItem);
                    return promise
                }, playVideoAdIfRequired: function playVideoAdIfRequired(mediaItem, collectionFilter, isSmartDjPlayRequest) {
                    var networkIsUnrestricted;
                    if (this._videoAdPlaying || !mediaItem)
                        return WinJS.Promise.wrap(false);
                    if (!this._isFreePlayEnabled || (this._freePlayLimits && this._freePlayLimits.isMonthlyFreeLimitExceeded) || !this._currentVideoAd || !this._initialized)
                        return WinJS.Promise.wrap(true);
                    return this._isStreamingMediaItem(mediaItem, collectionFilter, isSmartDjPlayRequest).then(function isStreamingMediaItem_Completed(isStreamingMediaItem) {
                            if (!isStreamingMediaItem || !this._initialized)
                                return WinJS.Promise.wrap(true);
                            networkIsUnrestricted = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).networkStatus === MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unrestricted;
                            this._adManager.setStreamingTrackInvoked();
                            if (this._adManager.isAdRequired(Microsoft.Entertainment.Ads.AdType.video, false) && networkIsUnrestricted && this._currentVideoAd.videoAd.url) {
                                var audioPlaybackStopped;
                                var startVideoAdTimeout;
                                if (this._videoAdPlaying)
                                    return WinJS.Promise.wrap(false);
                                if (this._videoAdPackageRefreshing)
                                    return WinJS.Promise.as(true);
                                this._videoAdPlaying = true;
                                this._lastVideoAdMediaItemProperties = this._lastVideoAdMediaItemProperties || {};
                                this._lastVideoAdMediaItemProperties.mediaType = mediaItem.mediaType;
                                this._lastVideoAdMediaItemProperties.inCollection = mediaItem.inCollection;
                                this._lastVideoAdMediaItemProperties.hasLocalContent = mediaItem.hasLocalContent;
                                this._lastVideoAdMediaItemProperties.isLibraryQuery = MS.Entertainment.Data.MainQuery.isQuery(mediaItem) && MS.Entertainment.Data.Query.LibraryQueryBase.isLibraryQuery(mediaItem);
                                MS.Entertainment.UI.Music.assert(!this._videoAdPackageRefreshing, "playVideoAdIfRequired was called while AdService was refreshing Ad.");
                                var showVideoPromise = new WinJS.Promise(function(c, e, p) {
                                        audioPlaybackStopped = c
                                    }).then(function showVideoAd() {
                                        return this.playVideoAd()
                                    }.bind(this));
                                var startVideoAdPlayback = function startVideoAdPlayback() {
                                        audioPlaybackStopped()
                                    }.bind(this);
                                if (this._companionAdVisible)
                                    this._hideCompanionAd();
                                this._playbackSession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.stopped;
                                startVideoAdTimeout = WinJS.Promise.timeout(500).then(function playVideoAd() {
                                    startVideoAdPlayback();
                                    return WinJS.Promise.timeout(1000)
                                }).then(this._stopPlaybackForAd.bind(this));
                                return showVideoPromise
                            }
                            return WinJS.Promise.wrap(true)
                        }.bind(this), function isStreamingMediaItem_Failed() {
                            return WinJS.Promise.wrap(true)
                        })
                }, playVideoAd: function playVideoAd() {
                    return MS.Entertainment.UI.Controls.VideoAd.showVideoAd(this._currentVideoAd.videoAd.url, this._currentVideoAd.clickThroughUrl, this._currentVideoAd.adClickThroughCallback, function onVideoAdPlaybackStarted() {
                            this._videoAdPackage.reportEvent(MicrosoftNSJS.Advertising.AdPackage.eventType.AdImpression);
                            this._videoAdPackage.reportEvent(MicrosoftNSJS.Advertising.AdPackage.eventType.AdVideoStart)
                        }.bind(this)).then(function showVideoAd_Success(control) {
                            var userControl = (control && control.userControlInstance) || {};
                            if (!this._initialized) {
                                this._videoAdPlaying = false;
                                return true
                            }
                            var watchedFullAd = userControl.adCompleted;
                            var playbackFailed = userControl.adErrorOccurred;
                            if (watchedFullAd) {
                                this._adManager.setAdPlayed(Microsoft.Entertainment.Ads.AdType.video);
                                this._configurationManager.music.totalVideoAdImpressions++
                            }
                            if (watchedFullAd && !playbackFailed)
                                this._videoAdPackage.reportEvent(MicrosoftNSJS.Advertising.AdPackage.eventType.AdComplete);
                            if (watchedFullAd || playbackFailed)
                                this._refreshVideoAd();
                            this._lastVideoAdMediaItemProperties = null;
                            this._videoAdPlaying = false;
                            return WinJS.Promise.wrap(watchedFullAd)
                        }.bind(this), function showVideoAd_Error() {
                            MS.Entertainment.UI.Music.fail("Could not show video ad.");
                            this._videoAdPlaying = false;
                            return WinJS.Promise.wrap(true)
                        })
                }, audioAdPlayed: function audioAdPlayed() {
                    if (this._isFreePlayEnabled && this._initialized) {
                        this._adManager.setAdPlayed(Microsoft.Entertainment.Ads.AdType.audio);
                        this._adPlaying = false;
                        this._eventProvider.traceAdService_AudioAdPlayed();
                        MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.audioAdComplete);
                        this._configurationManager.music.totalAudioAdImpressions++;
                        if (this._companionAdVisible)
                            this._companionAdTimer = window.setTimeout(function hideCompanionAd() {
                                MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.adCompanionFullTerm);
                                this._hideCompanionAd()
                            }.bind(this), MS.Entertainment.UI.Music.AdService.adCompanionTimeoutInMs);
                        this._refreshAudioAd()
                    }
                }, audioAdPlaying: function audioAdPlaying() {
                    if (this._isFreePlayEnabled && !this._adPlaying) {
                        var networkOpenRequest = this._sessionManager.requestNetwork("AdService");
                        var releaseNetwork = function releaseNetwork() {
                                networkOpenRequest.release()
                            };
                        WinJS.Promise.timeout(MS.Entertainment.UI.Music.AdService.networkOpenDelayMs).then(function reportAdPlayed() {
                            if (this._audioAdPackage && !this._audioAdPackageRefreshing)
                                return this._audioAdPackage.reportEvent(MicrosoftNSJS.Advertising.AdPackage.eventType.AdImpression).then(function delayNetworkClose() {
                                        return WinJS.Promise.timeout(MS.Entertainment.UI.Music.AdService.adPackageReportDelayMs)
                                    });
                            else
                                return WinJS.Promise.wrap()
                        }.bind(this)).done(releaseNetwork, releaseNetwork);
                        this._adPlaying = true;
                        this._eventProvider.traceAdService_AudioAdPlaying();
                        MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.audioAdStart);
                        if (!MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).nowPlayingVisible && !window.onNewMusicPage)
                            MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar).show(MS.Entertainment.UI.Controls.BottomAppBar.defaultHideTimeoutMS);
                        if (this._currentAudioAd.adCompanion) {
                            var parameters = {
                                    imageUrl: this._currentAudioAd.adCompanion.imageUrl, linkUrl: this._currentAudioAd.adCompanion.clickThroughUrl, closedCallback: this._currentAudioAd.adCompanionClosedCallback, clickCallback: this._currentAudioAd.adClickThroughCallback
                                };
                            if (this._companionAdTimer) {
                                window.clearTimeout(this._companionAdTimer);
                                this._companionAdTimer = null
                            }
                            this._appInSnappedMode = this._uiStateService.isSnapped;
                            this._companionAdVisible = true;
                            MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.adCompanionShown);
                            MS.Entertainment.UI.Controls.AdCompanion.showAdCompanion(parameters)
                        }
                    }
                }, streamingTrackPlayed: function streamingTrackPlayed() {
                    if (this._isFreePlayEnabled && this._initialized) {
                        this._adManager.setStreamingTrackPlayed();
                        this._eventProvider.traceAdService_StreamingTrackPlayed()
                    }
                }, isStreamingBlocked: function isStreamingBlocked(mediaItem) {
                    var promise;
                    if (!this._isFreePlayEnabled)
                        return WinJS.Promise.wrap(false);
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    var anonymousLimitReached = this._configurationManager.music.anonymousLimitReached;
                    var anonymousFreePlayEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlayAnonymous) && !anonymousLimitReached;
                    var anonymousUser = !this._signIn.isSignedIn && !this._configurationManager.service.lastSignedInUserSubscription;
                    if ((this._uiStateService.servicesEnabled && (!anonymousUser || anonymousFreePlayEnabled)) || !MS.Entertainment.UI.NetworkStatusService.isOnline())
                        promise = WinJS.Promise.wrap(false);
                    else
                        promise = this._isStreamingMediaItem(mediaItem).then(function isStreamingMediaItem_Completed(isStreamingMediaItem) {
                            if (isStreamingMediaItem && anonymousUser && featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlayAnonymous) && anonymousLimitReached)
                                MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.unauthenticatedTrackLimitExceeded);
                            return WinJS.Promise.wrap(isStreamingMediaItem)
                        }, function isStreamingMediaItem_Failed() {
                            return WinJS.Promise.wrap(true)
                        });
                    return promise
                }, skipAudioAdForNextTrack: {
                    get: function() {
                        return this._skipAudioAdForNextTrack
                    }, set: function(value) {
                            this._skipAudioAdForNextTrack = value
                        }
                }, sendAudioAdReasonClickTelemetryInfo: function sendAudioAdReasonClickTelemetryInfo() {
                    MS.Entertainment.Utilities.Telemetry.logAudioAdServiceEvent(MS.Entertainment.Music.Freeplay.Events.audioAdReasonClickThru, this._lastAudioAdMediaInstance, this._lastAudioAdMediaInstanceIsNext)
                }, sendVideoAdReasonClickTelemetryInfo: function sendVideoAdReasonClickTelemetryInfo() {
                    MS.Entertainment.Utilities.Telemetry.logVideoAdServiceEvent(MS.Entertainment.Music.Freeplay.Events.videoAdReasonClickThru, this._lastVideoAdMediaItemProperties)
                }, _stopPlaybackForAd: function _stopPlaybackForAd() {
                    if (this._videoAdPlaying) {
                        this._playbackSession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.stopped;
                        this._playbackSession.currentMedia = null;
                        var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                        if (appBarControl)
                            appBarControl.hide()
                    }
                }, _onUserStatusChanged: function _onUserStatusChanged() {
                    if (this._isFreePlayEnabled && this._signIn.isSignedIn && !this._signedInUser.isSubscription) {
                        if (this._lastSignedInState !== this._signIn.isSignedIn && this._initialized)
                            this.dispose();
                        this.initialize()
                    }
                    else {
                        this.dispose();
                        this._uiStateService.shouldShowAdsForFreePlay = this._isFreePlayEnabled && !this._configurationManager.service.lastSignedInUserSubscription
                    }
                }, _onInputReceived: function _onInputReceived() {
                    if (this._isFreePlayEnabled)
                        this._lastInteractionEventTime = Date.now()
                }, _onVisibilityChanged: function _onVisibilityChanged() {
                    if (this._isFreePlayEnabled && !document.hidden)
                        this._lastInteractionEventTime = Date.now()
                }, _handleNavigation: function _handleNavigation() {
                    if (this._appInSnappedMode === this._uiStateService.isSnapped && this._companionAdVisible) {
                        MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.adCompanionClosedOnNav);
                        this._hideCompanionAd()
                    }
                    this._appInSnappedMode = this._uiStateService.isSnapped
                }, _refreshAudioAd: function _refreshAudioAd() {
                    if (this._audioAdPackageRefreshTimer) {
                        this._audioAdPackageRefreshTimer.cancel();
                        this._audioAdPackageRefreshTimer = null
                    }
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    if (!featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicAudioAdsEnabled))
                        return;
                    if (!this._adPlaying && !this._companionAdVisible) {
                        if (!this._networkOpenRequest)
                            this._networkOpenRequest = this._sessionManager.requestNetwork("AdService");
                        this._audioAdPackageRefreshing = false;
                        WinJS.Promise.timeout(MS.Entertainment.UI.Music.AdService.networkOpenDelayMs).done(function refreshAdPackage() {
                            if (!this._adPlaying && !this._companionAdVisible && !this._audioAdPackageRefreshing) {
                                this._audioAdPackageRefreshTimer = WinJS.Promise.timeout(MS.Entertainment.UI.Music.AdService.adRefreshPeriod).then(function refreshAudioAd() {
                                    if (this._audioAdPackageRefreshTimer)
                                        this._refreshAudioAd()
                                }.bind(this));
                                this._audioAdPackageRefreshing = true;
                                this._audioAdPackage.refresh();
                                this._eventProvider.traceAdService_AudioAdRefreshing()
                            }
                        }.bind(this))
                    }
                }, _refreshVideoAd: function _refreshVideoAd() {
                    if (this._videoAdPackageRefreshTimer) {
                        this._videoAdPackageRefreshTimer.cancel();
                        this._videoAdPackageRefreshTimer = null
                    }
                    this._videoAdPackageRefreshTimer = WinJS.Promise.timeout(MS.Entertainment.UI.Music.AdService.adRefreshPeriod).then(function refreshVideoAd() {
                        if (this._videoAdPackageRefreshTimer)
                            this._refreshVideoAd()
                    }.bind(this));
                    this._videoAdPackageRefreshing = true;
                    this._videoAdPackage.refresh();
                    this._eventProvider.traceAdService_VideoAdRefreshing()
                }, _hideCompanionAd: function _hideCompanionAd() {
                    if (this._companionAdVisible) {
                        this._companionAdVisible = false;
                        MS.Entertainment.UI.Controls.AdCompanion.hideAdCompanion();
                        this._refreshAudioAd()
                    }
                }, _isStreamingTrack: function _isStreamingTrack(mediaInstance) {
                    var serviceId = mediaInstance && MS.Entertainment.Utilities.valueFromPropertyPathFragments(mediaInstance, ["_mediaItem", "data", "serviceId"]);
                    var isStreamingTrack = serviceId && !mediaInstance.isLocal && mediaInstance.protectionState === MS.Entertainment.Platform.Playback.ProtectionState.drmProtected;
                    if (isStreamingTrack && serviceId)
                        this._streamingTracks[serviceId] = true;
                    return isStreamingTrack
                }, _isStreamingMediaItem: function _isStreamingMediaItem(mediaItem, collectionFilter, isSmartDjPlayRequest) {
                    if (isSmartDjPlayRequest || mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.smartDJ || (this._freePlayLimits && this._freePlayLimits.isMonthlyFreeLimitExceeded) || (MS.Entertainment.Data.MainQuery.isQuery(mediaItem) && !MS.Entertainment.Data.Query.LibraryQueryBase.isLibraryQuery(mediaItem)))
                        return WinJS.Promise.wrap(true);
                    return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(mediaItem).then(function hydrateLibraryInfoCompleted() {
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getPlayabilityAsync(mediaItem, collectionFilter).then(function getPlayabilityAsync_complete(playability) {
                                    if (mediaItem.inCollection && !playability.counts.cloudOnly)
                                        return WinJS.Promise.wrap(false);
                                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMarketplaceFileAccessAsync(mediaItem).then(function marketplaceFileAccess_Complete(marketplaceInfo) {
                                            var returnPromise;
                                            var trackCount;
                                            switch (mediaItem.mediaType) {
                                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                                    trackCount = 1;
                                                    break;
                                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                                    trackCount = mediaItem.totalTracks || mediaItem.totalTracksCount;
                                                    if (trackCount === undefined)
                                                        trackCount = 0;
                                                    break
                                            }
                                            this._lastVideoAdMediaItemProperties = {
                                                trackCount: trackCount, hasPurchasedCount: marketplaceInfo.hasPurchased, localOnly: playability.counts.localOnly, cloudOnly: playability.counts.cloudOnly
                                            };
                                            return WinJS.Promise.wrap(marketplaceInfo.hasPurchased !== trackCount)
                                        }.bind(this), function marketplaceFileAccess_Failed() {
                                            return WinJS.Promise.wrap(!mediaItem.hasLocalContent)
                                        })
                                }.bind(this), function getPlayabilityAsync_failed() {
                                    return WinJS.Promise.wrap(!mediaItem.hasLocalContent)
                                })
                        }.bind(this), function hydrateLibraryInfoFailed() {
                            return WinJS.Promise.wrap(false)
                        })
                }, _onAudioAdRefreshed: function _onAudioAdRefreshed() {
                    this._audioAdPackageRefreshing = false;
                    if (this._audioAdPackageRefreshTimer) {
                        this._audioAdPackageRefreshTimer.cancel();
                        this._audioAdPackageRefreshTimer = null
                    }
                    if (this._networkOpenRequest) {
                        this._networkOpenRequest.release();
                        this._networkOpenRequest = null
                    }
                    if (!this._isValidDuration(this._audioAdPackage)) {
                        this._audioAdPackageRefreshTimer = WinJS.Promise.timeout(MS.Entertainment.UI.Music.AdService.adRefreshPeriod).then(function refreshAudioAd() {
                            if (this._audioAdPackageRefreshTimer)
                                this._refreshAudioAd()
                        }.bind(this));
                        return
                    }
                    var audioAd = this._getBestAudioAd();
                    var adCompanionData = this._parseAdCompanions();
                    var adClickThrough = function adClickThrough() {
                            this._audioAdPackage.reportEvent(MicrosoftNSJS.Advertising.AdPackage.eventType.AdClickThru);
                            MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.adCompanionClickThru);
                            this._hideCompanionAd()
                        }.bind(this);
                    var adCompanionClosed = function adCompanionClosed() {
                            MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.adCompanionClosed);
                            this._hideCompanionAd()
                        }.bind(this);
                    this._currentAudioAd = {
                        audioAd: audioAd, adCompanion: adCompanionData.adCompanion, appBarAdCompanion: adCompanionData.appBarAdDetails, adClickThroughCallback: adClickThrough, adCompanionClosedCallback: adCompanionClosed
                    };
                    this._eventProvider.traceAdService_AudioAdRefreshed()
                }, _isValidDuration: function _isValidDuration(adPackage) {
                    MS.Entertainment.UI.Music.assert(adPackage, "Invalid adPackage passed in");
                    var duration = MS.Entertainment.Utilities.valueFromPropertyPathFragments(adPackage, ["linearCreative", "Duration"]);
                    duration = duration && duration.replace(/\D/g, String.empty);
                    return (duration && duration < MS.Entertainment.UI.Music.AdService.adMaxDurationSec && !isNaN(duration))
                }, _parseAdCompanions: function _parseAdCompanions() {
                    var adCompanionData;
                    var appBarAdDetails;
                    var adCompanions = this._audioAdPackage.adCompanions;
                    var numberOfAdCompanions = (adCompanions && adCompanions.length) || 0;
                    for (var i = 0; i < numberOfAdCompanions; i++) {
                        var adCompanion = adCompanions[i];
                        if (!adCompanion || adCompanion.creativeType !== MS.Entertainment.UI.Music.AdService.adCompanionType)
                            continue;
                        var staticResource = adCompanion.StaticResource || String.empty;
                        var companionClickThrough = adCompanion.CompanionClickThrough || String.empty;
                        if (adCompanion.height === MS.Entertainment.UI.Music.AdService.adCompanionHeight && adCompanion.width === MS.Entertainment.UI.Music.AdService.adCompanionWidth)
                            adCompanionData = {
                                id: adCompanion.id, imageUrl: staticResource.replace(/^\s*|\s*$/g, String.empty), clickThroughUrl: companionClickThrough.replace(/^\s*|\s*$/g, String.empty)
                            };
                        else if (adCompanion.height === MS.Entertainment.UI.Music.AdService.appBarAdImageHeightWidth && adCompanion.width === MS.Entertainment.UI.Music.AdService.appBarAdImageHeightWidth)
                            appBarAdDetails = {
                                id: adCompanion.id, imageUrl: staticResource.replace(/^\s*|\s*$/g, String.empty), clickThroughUrl: companionClickThrough.replace(/^\s*|\s*$/g, String.empty)
                            }
                    }
                    return {
                            adCompanion: adCompanionData, appBarAdDetails: appBarAdDetails
                        }
                }, _onVideoAdRefreshed: function _onVideoAdRefreshed() {
                    this._videoAdPackageRefreshing = false;
                    if (this._videoAdPackageRefreshTimer) {
                        this._videoAdPackageRefreshTimer.cancel();
                        this._videoAdPackageRefreshTimer = null
                    }
                    if (!this._isValidDuration(this._videoAdPackage)) {
                        this._videoAdPackageRefreshTimer = WinJS.Promise.timeout(MS.Entertainment.UI.Music.AdService.adRefreshPeriod).then(function refreshVideoAd() {
                            if (this._videoAdPackageRefreshTimer)
                                this._refreshVideoAd()
                        }.bind(this));
                        return
                    }
                    var videoAd = this._getBestVideoAd();
                    var videoClickThrough = this._getVideoAdClickThrough();
                    var adClickThrough = function adClickThrough() {
                            this._videoAdPackage.reportEvent(MicrosoftNSJS.Advertising.AdPackage.eventType.AdClickThru)
                        }.bind(this);
                    this._currentVideoAd = {
                        videoAd: videoAd, clickThroughUrl: videoClickThrough, adClickThroughCallback: adClickThrough
                    };
                    this._eventProvider.traceAdService_VideoAdRefreshed()
                }, _onAdErrorOccurred: function _onAdErrorOccurred(ad, error) {
                    var errorCode = (error && error.errorCode) || String.empty;
                    var errorMessage = (error && error.errorMessage) || String.empty
                }, _getAudioAdMediaItem: function _getAudioAdMediaItem() {
                    var appBarAdUrl = this._currentAudioAd.appBarAdCompanion && this._currentAudioAd.appBarAdCompanion.imageUrl;
                    var adUrl = this._currentAudioAd.audioAd && this._currentAudioAd.audioAd.url;
                    var audioAdMediaItem = MS.Entertainment.Data.augment({
                            isAudioAd: true, source: adUrl
                        }, MS.Entertainment.Data.Augmenter.Marketplace.Track);
                    audioAdMediaItem.name = String.load(String.id.IDS_ADVERTISEMENT);
                    audioAdMediaItem.imageUri = appBarAdUrl;
                    audioAdMediaItem.durationString = String.empty;
                    audioAdMediaItem.releaseYear = String.empty;
                    return audioAdMediaItem
                }, _getBestAudioAd: function _getBestAudioAd() {
                    var audioAd;
                    audioAd = MS.Entertainment.Utilities.valueFromPropertyPathFragments(this._audioAdPackage, ["linearCreative", "MediaFiles"]);
                    if (audioAd)
                        audioAd = audioAd.reduce(function getAudioAdFromMediaFiles(previousValue, currentValue) {
                            if (currentValue && currentValue.delivery === MS.Entertainment.UI.Music.AdService.audioAdDelivery && currentValue.type === MS.Entertainment.UI.Music.AdService.audioAdType)
                                if (!previousValue || previousValue.bitrate < currentValue.bitrate)
                                    return currentValue;
                            return previousValue
                        });
                    MS.Entertainment.UI.Music.assert(audioAd, "No Audio Ad found");
                    return audioAd
                }, _getBestVideoAd: function _getBestVideoAd() {
                    var videoAd;
                    videoAd = MS.Entertainment.Utilities.valueFromPropertyPathFragments(this._videoAdPackage, ["linearCreative", "MediaFiles"]);
                    if (videoAd)
                        videoAd = videoAd.reduce(function getVideoAdFromMediaFiles(previousValue, currentValue) {
                            if (this._isValidAd(currentValue))
                                if (!this._isValidAd(previousValue) || previousValue.bitrate < currentValue.bitrate)
                                    return currentValue;
                            return previousValue
                        }.bind(this));
                    MS.Entertainment.UI.Music.assert(videoAd, "No Video Ad found");
                    return videoAd
                }, _isValidAd: function _isValidAd(ad) {
                    return (ad && ad.delivery === MS.Entertainment.UI.Music.AdService.videoAdDelivery && ad.type === MS.Entertainment.UI.Music.AdService.videoAdType)
                }, _getVideoAdClickThrough: function _getVideoAdClickThrough() {
                    var clickThroughUrl;
                    var videoAdClickThrough = MS.Entertainment.Utilities.valueFromPropertyPathFragments(this._videoAdPackage, ["linearCreative", "VideoClicks", "ClickThrough", "url"]);
                    if (videoAdClickThrough)
                        clickThroughUrl = videoAdClickThrough.replace(/^\s*|\s*$/g, String.empty);
                    return clickThroughUrl
                }, _currentMediaChanged: function _currentMediaChanged() {
                    if (this._currentOrdinalChangedCallback) {
                        this._currentOrdinalChangedCallback.cancel();
                        this._currentOrdinalChangedCallback = null
                    }
                    this._currentPlaybackSessionOrdinal = this._playbackSession.currentOrdinal;
                    if (!this._playbackSession.currentMedia)
                        return;
                    else if (this._playbackSession.currentMedia.isAudioAd) {
                        this._currentMediaType = MS.Entertainment.UI.Music.AdService.currentMediaType.audioAd;
                        this._adPlaying = false;
                        if (this._playbackSession.currentMedia.imageUri)
                            MS.Entertainment.UI.Shell.ImageLoader.getServiceImageUrl(this._playbackSession.currentMedia, 100, 100).done(function gotAlbumArt(uri) {
                                var previousAlbumArt = Windows.Media.MediaControl.albumArt;
                                try {
                                    var artUri = new Windows.Foundation.Uri(uri);
                                    Windows.Media.MediaControl.albumArt = artUri;
                                    this._mediaControlArtOverridden = true
                                }
                                catch(e) {
                                    try {
                                        Windows.Media.MediaControl.albumArt = previousAlbumArt
                                    }
                                    catch(e) {}
                                }
                            }.bind(this))
                    }
                    else if (this._streamingTracks[this._playbackSession.currentMedia.serviceId]) {
                        this._currentMediaType = MS.Entertainment.UI.Music.AdService.currentMediaType.streamingTrack;
                        this._eventProvider.traceAdService_StreamingTrackPlaying()
                    }
                    else {
                        this._currentMediaType = MS.Entertainment.UI.Music.AdService.currentMediaType.unknown;
                        this._eventProvider.traceAdService_TrackPlaying()
                    }
                    if (this._currentMediaType !== MS.Entertainment.UI.Music.AdService.currentMediaType.audioAd) {
                        if (this._adPlaying) {
                            this._adPlaying = false;
                            this._hideCompanionAd()
                        }
                        if (this._mediaControlArtOverridden) {
                            MS.Entertainment.UI.Shell.ImageLoader.getServiceImageUrl(this._playbackSession.currentMedia, 100, 100).done(function gotAlbumArt(uri) {
                                try {
                                    var artUri = new Windows.Foundation.Uri(uri);
                                    Windows.Media.MediaControl.albumArt = artUri
                                }
                                catch(e) {
                                    try {
                                        Windows.Media.MediaControl.albumArt = null
                                    }
                                    catch(e) {}
                                }
                            });
                            this._mediaControlArtOverridden = false
                        }
                    }
                }, _currentPositionChanged: function _currentPositionChanged(newValue, oldValue) {
                    if (this._currentMediaType === MS.Entertainment.UI.Music.AdService.currentMediaType.audioAd) {
                        if (!this._adPlaying && newValue > 0)
                            this.audioAdPlaying();
                        else if (this._adPlaying && this._playbackSession.currentPosition && this._playbackSession.duration && this._playbackSession.currentPosition >= (this._playbackSession.duration - MS.Entertainment.UI.Music.AdService.audioAdDurationDelta)) {
                            this.audioAdPlayed();
                            this._currentMediaType = MS.Entertainment.UI.Music.AdService.currentMediaType.unknown
                        }
                    }
                    else if (this._currentMediaType === MS.Entertainment.UI.Music.AdService.currentMediaType.streamingTrack && this._playbackSession.currentPosition >= MS.Entertainment.UI.Music.AdService.streamingTrackThreshold) {
                        this.streamingTrackPlayed();
                        this._currentMediaType = MS.Entertainment.UI.Music.AdService.currentMediaType.unknown;
                        delete this._streamingTracks[this._playbackSession.currentMedia.serviceId]
                    }
                }, _setUpSessionBindings: function _setUpSessionBindings() {
                    var currentPositionChanged = this._currentPositionChanged.bind(this);
                    var currentMediaChanged = this._currentMediaChanged.bind(this);
                    var currentOrdinalChanged = this._onCurrentOrdinalChanged.bind(this);
                    var currentTransportStateChanged = this._onCurrentTransportStateChanged.bind(this);
                    if (this._playbackSessionBindings) {
                        this._playbackSessionBindings.cancel();
                        this._playbackSessionBindings = null
                    }
                    this._playbackSessionBindings = WinJS.Binding.bind(this._playbackSession, {
                        currentPosition: currentPositionChanged, currentMedia: currentMediaChanged, currentOrdinal: currentOrdinalChanged, currentTransportState: currentTransportStateChanged
                    })
                }, _onCurrentTransportStateChanged: function _onCurrentTransportStateChanged(newState) {
                    if (this._playbackSession.currentTransportState !== MS.Entertainment.Platform.Playback.TransportState.stopped)
                        this._stopPlaybackForAd();
                    if (this._inputHandler && (newState === MS.Entertainment.Platform.Playback.TransportState.playing))
                        this._inputHandler()
                }, _onCurrentOrdinalChanged: function _onCurrentOrdinalChanged(newOrdinal) {
                    if (newOrdinal !== null) {
                        if (this._emptyRoomDialogVisible)
                            this._playbackSession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.paused;
                        this._currentOrdinalChangedCallback = WinJS.Promise.timeout(500).then(function _currentOrdinalChanged() {
                            if (this._currentPlaybackSessionOrdinal !== newOrdinal)
                                this._currentMediaChanged()
                        }.bind(this))
                    }
                }, _onNetworkStatusChanged: function _onNetworkStatusChanged(newValue) {
                    var networkStatus = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).networkStatus;
                    if (networkStatus !== this._networkStatus) {
                        this._networkStatus = networkStatus;
                        if (this._networkStatus === MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unrestricted) {
                            if (!this._audioAdPackageRefreshing && !this._audioAdPackage.linearCreative)
                                this._refreshAudioAd();
                            if (!this._videoAdPackageRefreshing && !this._videoAdPackage.linearCreative)
                                this._refreshVideoAd()
                        }
                    }
                }, _sendEmptyRoomToast: function _sendEmptyRoomToast() {
                    try {
                        var notifications = Windows.UI.Notifications;
                        var notificationManager = notifications.ToastNotificationManager;
                        var toastXml = notificationManager.getTemplateContent(notifications.ToastTemplateType.toastText02);
                        var textNodes = toastXml.getElementsByTagName("text");
                        textNodes[0].appendChild(toastXml.createTextNode(String.load(String.id.IDS_MUSIC_STREAMING_EMPTY_ROOM_NOTIFICATION_LINE1)));
                        textNodes[1].appendChild(toastXml.createTextNode(String.load(String.id.IDS_MUSIC_STREAMING_EMPTY_ROOM_NOTIFICATION_LINE2)));
                        var toast = new notifications.ToastNotification(toastXml);
                        toast.addEventListener("activated", function toastNotificationActivate() {
                            var appView = Windows.UI.ViewManagement.ApplicationView;
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            if (uiStateService.isSnapped)
                                appView.tryUnsnap()
                        }.bind(this));
                        notificationManager.createToastNotifier().show(toast)
                    }
                    catch(exception) {
                        MS.Entertainment.Music.fail("Failure in calls to ToastNotificationManager: " + exception)
                    }
                }
        }, {
            _getAdApplicationId: function _getAdApplicationId(ad) {
                var adApplicationId;
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                adApplicationId = configurationManager.ads.musicAdApplicationId;
                MS.Entertainment.UI.Music.assert(adApplicationId, "Ad configuration application id not found for: configuration.ads.musicAdApplicationId");
                return adApplicationId
            }, _getAdUnitId: function _getAdUnitId(adUnitType) {
                    var adIds = String.empty;
                    var adUnitId;
                    var regionCode;
                    var languageCode;
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var globalizationManager = new Microsoft.Entertainment.Util.GlobalizationManager;
                    regionCode = globalizationManager.getRegion();
                    var resourceLanguage = MS.Entertainment.Utilities.getResourceLanguage();
                    languageCode = MS.Entertainment.Utilities.getLanguageCodeFromLocale(resourceLanguage);
                    adIds = configurationManager.ads[adUnitType];
                    MS.Entertainment.UI.Components.Shell.assert(adIds, "Ad configuration unit ids not found: configuration.ads." + adUnitType);
                    if (adIds) {
                        adUnitId = MS.Entertainment.Utilities.getValueFromCsvList(adIds, languageCode + "-" + regionCode);
                        if (!adUnitId)
                            adUnitId = MS.Entertainment.Utilities.getValueFromCsvList(adIds, regionCode)
                    }
                    return adUnitId
                }, currentMediaType: {
                    audioAd: "audioAd", streamingTrack: "streamingTrack", unknown: "unknown"
                }, adMaxDurationSec: 39, audioAdDurationDelta: 1000, adRefreshPeriod: 300000, streamingTrackThreshold: 30000, audioAdDelivery: "progressive", audioAdType: "audio/mpeg", videoAdDelivery: "progressive", videoAdType: "video/mp4", adCompanionType: "image/jpeg", adCompanionHeight: 250, adCompanionWidth: 300, appBarAdImageHeightWidth: 90, adCompanionTimeoutInMs: 30000, audioAdUnitIdConfig: "musicAudioAdUnitIds", videoAdUnitIdConfig: "musicVideoAdUnitIds", networkOpenDelayMs: 300, adPackageReportDelayMs: 2000
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.adService, function AdServiceFactory() {
        return new MS.Entertainment.UI.Music.AdService
    })
})()
})();
/* >>>>>>/controls/dialog.js:8478 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {Dialog: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Overlay", "/Controls/Dialog.html#dialogTemplate", function dialogConstructor(element, options) {
            this._updatePosition = this._updatePosition.bind(this);
            this.lightDismissEnabled = false;
            this._setInitialButtons();
            this.bind("width", this._updatePosition);
            this.bind("height", this._updatePosition)
        }, {
            _eventHandlers: null, autoSetFocus: false, wasCancelled: false, allowTypeToSearch: false, disallowUserDismiss: false, ignoreEscapeKeyPress: false, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.Overlay.prototype.initialize.call(this);
                    var that = this;
                    var onCancel = function onCancel() {
                            if (that.dismissedCallback)
                                that.dismissedCallback();
                            else {
                                var cancelButtonIndex = that.cancelButtonIndex;
                                if (that.cancelButtonIndex === undefined)
                                    cancelButtonIndex = that.buttons.length - 1;
                                if (cancelButtonIndex >= 0 && cancelButtonIndex < that.buttons.length) {
                                    var cancelButton = that.buttons[cancelButtonIndex];
                                    if (cancelButton && cancelButton.isAvailable && cancelButton.isEnabled && cancelButton.doExecute)
                                        cancelButton.doExecute()
                                }
                            }
                        }.bind(this);
                    this._eventHandlers = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                        keypress: function onKeyPress(event) {
                            if (event.keyCode === WinJS.Utilities.Key.escape && that.buttons && !this.ignoreEscapeKeyPress)
                                onCancel()
                        }.bind(this), keyup: function onKeyUp(event) {
                                if (event.keyCode === WinJS.Utilities.Key.dismissButton) {
                                    event.stopPropagation();
                                    onCancel()
                                }
                            }.bind(this)
                    });
                    MS.Entertainment.Utilities.attachResizeEvent(this.domElement, this._updatePosition);
                    this.overlayContainer.setAttribute("aria-label", this.title);
                    if (this.automationId)
                        this.overlayContainer.setAttribute("data-win-automationid", this.automationId);
                    var updateButtons = this._updateButtons.bind(this);
                    this.bind("buttons", updateButtons);
                    this.bind("defaultButtonIndex", updateButtons)
                }, unload: function unload() {
                    MS.Entertainment.Utilities.detachResizeEvent(this.domElement, this._updatePosition);
                    if (this._eventHandlers) {
                        this._eventHandlers.cancel();
                        this._eventHandlers = null
                    }
                    MS.Entertainment.UI.Controls.Overlay.prototype.unload.call(this)
                }, show: function show() {
                    var promise = MS.Entertainment.UI.Controls.Overlay.prototype.show.call(this);
                    var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                    if (appBarControl && appBarControl.hide)
                        appBarControl.hide();
                    return promise
                }, _setInitialButtons: function _setInitialButtons() {
                    if (!this.disallowUserDismiss)
                        if (!this.buttons)
                            this.buttons = [{
                                    title: String.load(String.id.IDS_CLOSE_BUTTON), isEnabled: true, isAvailable: true, execute: function onClose(overlay) {
                                            this.wasCancelled = true;
                                            overlay.hide()
                                        }.bind(this)
                                }]
                }, _updateButtons: function _updateButtons() {
                    if (this.buttons) {
                        var that = this;
                        var nonObservableSetProperty = function nonObservableSetProperty(instance, property, value) {
                                instance[property] = value
                            };
                        var observableSetProperty = function observableSetProperty(instance, property, value) {
                                instance.addProperty(property, value)
                            };
                        this.buttons.forEach(function(item) {
                            var setProperty = nonObservableSetProperty;
                            if (item !== WinJS.Binding.unwrap(item))
                                setProperty = observableSetProperty;
                            MS.Entertainment.UI.Controls.assert(typeof item.title === "string", "Dialog: Button title property is not a string");
                            MS.Entertainment.UI.Controls.assert(typeof item.execute === "function", "Dialog: Button execute property is not a function");
                            if (item.isEnabled === undefined)
                                setProperty(item, "isEnabled", true);
                            if (item.isAvailable === undefined)
                                setProperty(item, "isAvailable", true);
                            if (item !== WinJS.Binding.unwrap(item)) {
                                item.bind("isEnabled", function() {
                                    setProperty(item, "isDisabled", !item.isEnabled)
                                });
                                item.bind("isAvailable", function() {
                                    setProperty(item, "isHidden", !item.isAvailable)
                                })
                            }
                            else {
                                setProperty(item, "isDisabled", !item.isEnabled);
                                setProperty(item, "isHidden", !item.isAvailable)
                            }
                            setProperty(item, "isDefault", false);
                            setProperty(item, "buttonType", "button");
                            setProperty(item, "doExecute", WinJS.Utilities.markSupportedForProcessing(function onClick(event) {
                                if (item.isAvailable && item.isEnabled)
                                    item.execute(that, event)
                            }));
                            if (WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoiceStatics"))
                                setProperty(item, "voiceConfidence", MS.Entertainment.UI.App2.VoiceStatics.defaultConfidence)
                        });
                        var defaultIndex = this.defaultButtonIndex;
                        if (this.defaultButtonIndex === undefined)
                            this.defaultButtonIndex = defaultIndex = 0;
                        if (defaultIndex >= 0 && defaultIndex < that.buttons.length) {
                            var defaultButton = this.buttons[defaultIndex];
                            defaultButton.isDefault = true;
                            defaultButton.buttonType = "submit"
                        }
                    }
                    if (this._buttonList)
                        this._buttonList.dataSource = this.buttons
                }, _updatePosition: function _updatePosition() {
                    if (this.width) {
                        MS.Entertainment.UI.Controls.assert(typeof this.width === "string", "Dialog 'width' property is not a string");
                        if (this.width.indexOf("%") > 0)
                            this.left = this.right = (100 - parseInt(this.width)) / 2 + "%";
                        else
                            this.left = this.right = (MS.Entertainment.Utilities.getWindowWidth() - parseInt(this.width)) / 2 + "px"
                    }
                    if (this.height) {
                        MS.Entertainment.UI.Controls.assert(typeof this.height === "string", "Dialog 'height' property is not a string");
                        if (this.height.indexOf("%") > 0)
                            this.top = this.bottom = (100 - parseInt(this.height)) / 2 + "%";
                        else
                            this.top = this.bottom = (MS.Entertainment.Utilities.getWindowHeight() - parseInt(this.height)) / 2 + "px"
                    }
                }, _handleButtonClick: function _handleButtonClick(e) {
                    if (e && e.target && e.target.performClick)
                        e.target.performClick(e)
                }
        }, {
            title: null, buttonRowAdditionalText: String.empty, buttons: null, defaultButtonIndex: undefined, cancelButtonIndex: undefined, dismissedCallback: undefined, width: undefined, height: undefined
        }, {
            dialogFormSubmit: function dialogFormSubmit(){}, focusDefaultItemWhenCreated: WinJS.Utilities.markSupportedForProcessing(function(container, item) {
                    if (item.isDefault)
                        WinJS.Promise.timeout(100).then(function() {
                            if (container.firstElementChild)
                                MS.Entertainment.UI.Framework.focusElement(container.firstElementChild)
                        })
                })
        })})
})()
})();
/* >>>>>>/controls/flyout.js:8632 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {Flyout: MS.Entertainment.UI.Framework.defineUserControl("/Controls/Flyout.html#flyoutTemplate", function Flyout_Constructor(element, options){}, {})})
})()
})();
/* >>>>>>/controls/userfeedbackdialog.js:8641 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
                var UserFeedbackDialog = (function(_super) {
                        __extends(UserFeedbackDialog, _super);
                        function UserFeedbackDialog(element, options) {
                            this.templateStorage = "/Controls/UserFeedbackDialog.html";
                            this.templateName = "userFeedbackDialogTemplate";
                            _super.call(this, element, options);
                            this.privacyStatementLabel = String.load(String.id.IDS_SETTINGS_ABOUT_PRIVACY_STATEMENT);
                            if (MS.Entertainment.Utilities.isApp2) {
                                this.provideDetailsLabel = String.load(String.id.IDS_APP_MENU_FEEDBACK_PROVIDE_DETAILS_VUI_GUI);
                                if (WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoiceStatics")) {
                                    this.provideDetailsVoiceConfidence = WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoiceStatics.defaultConfidence");
                                    this.privacyStatementVoiceConfidence = WinJS.Utilities.getMember("MS.Entertainment.UI.App2.VoiceStatics.defaultConfidence")
                                }
                            }
                        }
                        UserFeedbackDialog.prototype.initialize = function() {
                            this._issuesTypes = [];
                            this._modifierTypes = [];
                            if (MS.Entertainment.Utilities.isMusicApp)
                                this._addMusicIssueTypes();
                            else if (MS.Entertainment.Utilities.isVideoApp)
                                this._addVideoIssueTypes();
                            else if (MS.Entertainment.Utilities.isAmsterdamApp)
                                this._addAmsterdamIssueTypes();
                            else {
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERRORS), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERROR_DETAILS), value: "GeneralError"
                                });
                                if (MS.Entertainment.Utilities.isApp2)
                                    this._issuesTypes.push({
                                        name: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_DETAILS), value: "Suggestion"
                                    })
                            }
                            this._issuesTypes.forEach(function(item, index) {
                                switch (item.value) {
                                    case"Suggestion":
                                        this._suggestionIssueTypeIndex = index;
                                        break;
                                    case"GeneralError":
                                        this._errorIssueTypeIndex = index;
                                        break;
                                    case"SharePlaylist":
                                        this._shareIssueTypeIndex = index
                                }
                            }.bind(this));
                            if (MS.Entertainment.Utilities.isApp1)
                                this._transferFeedbackToSelectElement();
                            else if (MS.Entertainment.Utilities.isApp2)
                                this._transferFeedbackToModifierElement()
                        };
                        UserFeedbackDialog.prototype.setOverlay = function(instance) {
                            this._overlay = instance;
                            var that = this;
                            this._overlay.buttons = [WinJS.Binding.as({
                                    title: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUBMIT), isEnabled: true, execute: function onSubmit() {
                                            that._onSubmit()
                                        }
                                }), WinJS.Binding.as({
                                    title: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANCEL), isEnabled: true, execute: function onCancel() {
                                            that._onCancel()
                                        }
                                })];
                            this._setInitialState();
                            WinJS.Utilities.addClass(this._contentContainer, "settingsFeedbackContentDialog");
                            WinJS.Utilities.addClass(this._userVoiceContainer, "settingsFeedbackOptionsDialog");
                            WinJS.Utilities.addClass(this._editControl.domElement, "settingsFeedbackCommentBoxDialog");
                            WinJS.Utilities.addClass(this._bottomContainer, "settingsFeedbackBottomDialog");
                            WinJS.Utilities.addClass(this._connectionError.domElement, "settingsFeedbackPanelContentDialog");
                            WinJS.Utilities.addClass(this._commentDescription.domElement, "settingsFeedbackPanelContentDialog");
                            WinJS.Utilities.addClass(this._descriptionLabel.domElement, "settingsFeedbackPanelContentDialog");
                            WinJS.Utilities.addClass(this._feedbackButtonContainers, "removeFromDisplay");
                            if (MS.Entertainment.Utilities.isApp2)
                                this._setApp2Overlay(that)
                        };
                        Object.defineProperty(UserFeedbackDialog.prototype, "userVoiceString", {
                            get: function() {
                                var stringId;
                                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                if (MS.Entertainment.Utilities.isMusicApp)
                                    if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                                        stringId = String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_XBOXMUSIC;
                                    else
                                        stringId = String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_MUSIC;
                                else if (MS.Entertainment.Utilities.isVideoApp)
                                    if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace) || featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                        stringId = String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_XBOXVIDEO;
                                    else
                                        stringId = String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_VIDEO;
                                else if (MS.Entertainment.Utilities.isAmsterdamApp)
                                    stringId = String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_MEDIABROWSER;
                                return String.load(stringId)
                            }, enumerable: true, configurable: true
                        });
                        UserFeedbackDialog.prototype.unload = function() {
                            this._exitFeedback(true);
                            _super.prototype.unload.call(this)
                        };
                        UserFeedbackDialog.prototype._updateModifierIndex = function(index) {
                            if (this._currentSelectedIndex !== index) {
                                this._currentSelectedIndex = index;
                                if (this._currentSelectedIndex >= 0)
                                    this._setWatermarkText(this._issuesTypes[this._currentSelectedIndex].comment)
                            }
                        };
                        UserFeedbackDialog.prototype._onModifierIssueTypeChange = function(event) {
                            var newSelectionMember = WinJS.Utilities.getMember("detail.newSelection", event);
                            if (newSelectionMember)
                                this._updateModifierIndex(newSelectionMember.index)
                        };
                        UserFeedbackDialog.prototype._setWatermarkText = function(watermarkText) {
                            Trace.assert(this._editControl, "The edit control of the UserfeedbackDialog should not be null or undefined");
                            this._editControl.setPlaceholderText(watermarkText);
                            this._editControl.watermarkText = watermarkText;
                            var currentTextValue = this._editControl.value;
                            if (!currentTextValue || currentTextValue.length < 1)
                                this._editControl.reinitialize()
                        };
                        UserFeedbackDialog.prototype._setInitialState = function() {
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            var gamerTag = signedInUser.gamerTag;
                            if (gamerTag)
                                this._descriptionLabel.text = String.load(String.id.IDS_SETTINGS_FEEDBACK_DESCRIPTION_GAMERTAG).format(gamerTag);
                            else
                                this._descriptionLabel.text = String.load(String.id.IDS_SETTINGS_FEEDBACK_DESCRIPTION);
                            if (MS.Entertainment.Utilities.isVideoApp2)
                                this._lowerDescriptionLabel.text = String.load(String.id.IDS_SETTINGS_FEEDBACK_USERVOICE_XBOXVIDEO);
                            WinJS.Utilities.addClass(this._connectionError.domElement, "hidden");
                            if (WinJS.Utilities.getMember("_editControl.clearInput", this))
                                this._editControl.clearInput();
                            var initialIssueIndexToSelect = this._suggestionIssueTypeIndex;
                            if (MS.Entertainment.UI.Controls.UserFeedbackDialog.errorId)
                                initialIssueIndexToSelect = this._errorIssueTypeIndex;
                            else if (MS.Entertainment.Utilities.isMusicApp && MS.Entertainment.UI.Controls.UserFeedbackDialog.shareUrl)
                                initialIssueIndexToSelect = this._shareIssueTypeIndex;
                            if (MS.Entertainment.Utilities.isApp1) {
                                this._issueTypeSelector.options.selectedIndex = initialIssueIndexToSelect;
                                this._onIssueTypeChange()
                            }
                            else if (MS.Entertainment.Utilities.isApp2) {
                                this._issueTypeModifier.selectionManager.selectedIndex = initialIssueIndexToSelect;
                                this._updateModifierIndex(initialIssueIndexToSelect)
                            }
                        };
                        UserFeedbackDialog.prototype._onIssueTypeChange = function() {
                            this._currentSelectedIndex = this._issueTypeSelector.options.selectedIndex;
                            this._setWatermarkText(this._issuesTypes[this._currentSelectedIndex].comment);
                            if (MS.Entertainment.Utilities.isMusicApp && this._currentSelectedIndex === this._shareIssueTypeIndex && MS.Entertainment.UI.Controls.UserFeedbackDialog.shareUrl && this._sharePlaylistURLNote)
                                WinJS.Utilities.removeClass(this._sharePlaylistURLNote.domElement, "removeFromDisplay");
                            else
                                WinJS.Utilities.addClass(this._sharePlaylistURLNote.domElement, "removeFromDisplay")
                        };
                        UserFeedbackDialog.prototype._onSubmit = function() {
                            var currentLocation = String.empty;
                            var telemetryParameterArray = [];
                            var pageOptions = null;
                            if (!window.navigator.onLine)
                                WinJS.Utilities.removeClass(this._connectionError.domElement, "hidden");
                            else {
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AppMode, parameterValue: MS.Entertainment.appMode
                                });
                                currentLocation = MS.Entertainment.Utilities.getCurrentUserLocation();
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.UIPath, parameterValue: currentLocation
                                });
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ContentIssueType, parameterValue: String.empty
                                });
                                if (WinJS.Utilities.getMember("MS.Entertainment.UI.Monikers") && currentLocation === MS.Entertainment.UI.Monikers.immersiveDetails) {
                                    pageOptions = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage.options;
                                    if (pageOptions && pageOptions.mediaItem) {
                                        telemetryParameterArray.push({
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: this._getMediaStringFromItem(pageOptions.mediaItem)
                                        });
                                        telemetryParameterArray.push({
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaItem, parameterValue: pageOptions.mediaItem.serviceId
                                        });
                                        telemetryParameterArray.push({
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaItemInstanceId, parameterValue: pageOptions.mediaItem.id || pageOptions.mediaItem.ID
                                        })
                                    }
                                }
                                if (MS.Entertainment.UI.Controls.UserFeedbackDialog.errorId) {
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: MS.Entertainment.UI.Controls.UserFeedbackDialog.errorId
                                    });
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorTimestamp, parameterValue: MS.Entertainment.UI.Controls.UserFeedbackDialog.timestamp
                                    })
                                }
                                if (MS.Entertainment.UI.Controls.UserFeedbackDialog.shareUrl)
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ShareUrl, parameterValue: MS.Entertainment.UI.Controls.UserFeedbackDialog.shareUrl
                                    });
                                var comment = this._editControl.value;
                                if (comment.length <= 1024) {
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CommentText, parameterValue: comment
                                    });
                                    telemetryParameterArray.push({
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.IssueType, parameterValue: this._issuesTypes[this._currentSelectedIndex].value
                                    });
                                    MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SendASmile, telemetryParameterArray);
                                    if (this._overlay)
                                        this._exitFeedback();
                                    else
                                        this._backToSettings()
                                }
                            }
                        };
                        UserFeedbackDialog.prototype._onKeyDown = function(e) {
                            if (MS.Entertainment.Utilities.isApp2)
                                if (e && e.keyCode && e.keyCode === WinJS.Utilities.Key.enter) {
                                    var currentView = Windows.UI.ViewManagement.InputPane.getForCurrentView();
                                    if (currentView) {
                                        currentView.visible = false;
                                        e.preventDefault();
                                        e.stopPropagation()
                                    }
                                }
                        };
                        UserFeedbackDialog.prototype._showPrivacy = function(e) {
                            if (e && e.keyCode && !(e.keyCode === WinJS.Utilities.Key.enter || e.keyCode === WinJS.Utilities.Key.space))
                                return;
                            if (!MS.Entertainment.Utilities.isApp2)
                                e.preventDefault();
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var externalNavigationAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.externalNavigate);
                            externalNavigationAction.parameter = "http://go.microsoft.com/fwlink/?LinkID=259655";
                            externalNavigationAction.automationId = MS.Entertainment.UI.AutomationIds.userFeedbackDialogPrivacyLink;
                            externalNavigationAction.execute()
                        };
                        UserFeedbackDialog.prototype._onCancel = function() {
                            if (this._overlay)
                                this._exitFeedback();
                            else
                                this._backToSettings()
                        };
                        UserFeedbackDialog.prototype._exitFeedback = function(isUnloading) {
                            if (this._overlay && !isUnloading)
                                this._overlay.hide();
                            MS.Entertainment.UI.Controls.UserFeedbackDialog.errorId = null;
                            MS.Entertainment.UI.Controls.UserFeedbackDialog.timestamp = null;
                            MS.Entertainment.UI.Controls.UserFeedbackDialog.shareUrl = null;
                            if (this._inputEventHandlers) {
                                this._inputEventHandlers.cancel();
                                this._inputEventHandlers = null
                            }
                            if (this._modifierEventHandlers) {
                                this._modifierEventHandlers.cancel();
                                this._modifierEventHandlers = null
                            }
                            if (this._settingsFlyoutEventHandlers) {
                                this._settingsFlyoutEventHandlers.cancel();
                                this._settingsFlyoutEventHandlers = null
                            }
                        };
                        UserFeedbackDialog.prototype._backToSettings = function() {
                            try {
                                WinJS.UI.SettingsFlyout.show()
                            }
                            catch(ex) {
                                Trace.fail("WinJS.UI.SettingsFlyout.show() failed with " + ex.toString())
                            }
                        };
                        UserFeedbackDialog.prototype._softKeyboardShown = function() {
                            WinJS.Utilities.addClass(this._lowerDescriptionLabel.domElement, "removeFromDisplay");
                            WinJS.Utilities.addClass(this._issueTypeModifier.domElement, "removeFromDisplay")
                        };
                        UserFeedbackDialog.prototype._softKeyboardHidden = function() {
                            WinJS.Utilities.removeClass(this._lowerDescriptionLabel.domElement, "removeFromDisplay");
                            WinJS.Utilities.removeClass(this._issueTypeModifier.domElement, "removeFromDisplay")
                        };
                        UserFeedbackDialog.prototype._getMediaStringFromItem = function(mediaItem) {
                            if (!mediaItem)
                                return "undefined";
                            var mediaString = null;
                            switch (mediaItem.mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.video:
                                    if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo)
                                        mediaString = "musicVideo";
                                    else if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode)
                                        mediaString = "episode";
                                    else if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.movie)
                                        mediaString = "movie";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                                    mediaString = "series";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                                    mediaString = "season";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    mediaString = "artist";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.genre:
                                    mediaString = "genre";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    mediaString = "album";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    mediaString = "track";
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.game:
                                    mediaString = "game";
                                    break;
                                default:
                                    mediaString = "undefined";
                                    break
                            }
                            return mediaString
                        };
                        UserFeedbackDialog.prototype._addMusicIssueTypes = function() {
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_STREAMINGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_STREAMINGMUSIC_DETAILS), value: "MusicStreaming"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERRORS), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERROR_DETAILS), value: "GeneralError"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_MUSICFORMAT), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_MUSICFORMAT_DETAILS), value: "MusicFormat"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC_DETAILS), value: "PlayMusic"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_SYNC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN_DETAILS), value: "SyncCloud"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_WRONGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_WRONGMUSIC_DETAILS), value: "WrongMusicInfo"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_MUSICMETADATA), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_MUSICMETADATA_DETAILS), value: "MusicMetadata"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_DETAILS), value: "Suggestion"
                            });
                            if (MS.Entertainment.Utilities.isMusicApp1) {
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGMUSIC_DETAILS), value: "BuyMusic"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN_DETAILS), value: "CantSignIn"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONNECTED), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONNECTED_DETAILS), value: "ConnectedDevice"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_DOWNLOADINGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGMUSIC_DETAILS), value: "DownloadMusic"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_MUSIC_SHARE_SAS_FEEDBACK_TYPE), comment: String.load(String.id.IDS_MUSIC_SHARE_SAS_FEEDBACK_COMMENTS), value: "SharePlaylist"
                                })
                            }
                            if (MS.Entertainment.Utilities.isMusicApp2) {
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_MUSIC2_SETTINGS_FEEDBACK_MUSICVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "MusicVideo"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONTENTDISCOVERY), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "ContentDiscovery"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_REQUESTCONTENT), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "RequestContent"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_COLLECTIONVIEW), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "ViewCollection"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GREATAPP), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "GreatApp"
                                })
                            }
                        };
                        UserFeedbackDialog.prototype._addVideoIssueTypes = function() {
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGVIDEO_DETAILS), value: "BuyOrRent"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_STREAMINGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_STREAMINGVIDEO_DETAILS), value: "StreamingVideo"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERRORS), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERROR_DETAILS), value: "GeneralError"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO_DETAILS), value: "PlayVideo"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_VIDEOFORMAT), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_VIDEOFORMAT_DETAILS), value: "VideoFormat"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_TRAILER), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_TRAILER_DETAILS), value: "Trailer"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_WRONGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGVIDEO_DETAILS), value: "WrongVideoInfo"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_DETAILS), value: "Suggestion"
                            });
                            if (MS.Entertainment.Utilities.isVideoApp1) {
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_CANTSIGNIN_DETAILS), value: "CantSignIn"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONNECTED), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONNECTED_DETAILS), value: "ConnectedDevice"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_DOWNLOADINGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_BUYINGVIDEO_DETAILS), value: "DownloadingVideo"
                                })
                            }
                            if (MS.Entertainment.Utilities.isVideoApp2) {
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_CONTENTDISCOVERY), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "ContentDiscovery"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_REQUESTCONTENT), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "RequestContent"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_COLLECTIONVIEW), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "ViewCollection"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_EPISODEAUTOPLAY), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "NextEpisode"
                                });
                                this._issuesTypes.push({
                                    name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GREATAPP), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "GreatApp"
                                })
                            }
                        };
                        UserFeedbackDialog.prototype._addAmsterdamIssueTypes = function() {
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERRORS), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GENERALERROR_DETAILS), value: "GeneralError"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGMUSIC_DETAILS), value: "PlayMusic"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_PLAYINGVIDEO_DETAILS), value: "PlayVideo"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_SUGGESTION_DETAILS), value: "Suggestion"
                            });
                            this._issuesTypes.push({
                                name: String.load(String.id.IDS_SETTINGS_FEEDBACK_GREATAPP), comment: String.load(String.id.IDS_SETTINGS_FEEDBACK_GHOSTTEXT), value: "GreatApp"
                            })
                        };
                        UserFeedbackDialog.prototype._transferFeedbackToSelectElement = function() {
                            for (var i = 0; i < this._issuesTypes.length; i++) {
                                var opt = document.createElement("option");
                                opt.label = this._issuesTypes[i].name;
                                opt.index = i;
                                this._issueTypeSelector.options.add(opt)
                            }
                            var settingsFlyout = document.getElementById("SettingsFeedback");
                            if (settingsFlyout) {
                                this._setInitialState();
                                this._settingsFlyoutEventHandlers = MS.Entertainment.UI.Framework.addEventHandlers(settingsFlyout.winControl, {beforeshow: this._setInitialState.bind(this)})
                            }
                        };
                        UserFeedbackDialog.prototype._transferFeedbackToModifierElement = function() {
                            for (var i = 0; i < this._issuesTypes.length; i++)
                                this._modifierTypes.push({title: this._issuesTypes[i].name});
                            WinJS.Utilities.removeClass(this._issueTypeModifier, "removeFromDisplay");
                            WinJS.Utilities.addClass(this._optionSASDescriptionLabel, "removeFromDisplay");
                            WinJS.Utilities.addClass(this._issueTypeSelector, "removeFromDisplay");
                            WinJS.Utilities.addClass(this._userVoiceContainer, "removeFromDisplay");
                            if (this._issueTypeModifier)
                                this._issueTypeModifier.items = this._modifierTypes;
                            this._modifierEventHandlers = MS.Entertainment.UI.Framework.addEventHandlers(this._issueTypeModifier.selectionManager, {selectedItemChanged: this._onModifierIssueTypeChange.bind(this)})
                        };
                        UserFeedbackDialog.prototype._setApp2Overlay = function(that) {
                            this._overlay.cancelButtonIndex = 1;
                            this._overlay.buttons.push(WinJS.Binding.as({
                                title: String.load(String.id.IDS_SETTINGS_ABOUT_PRIVACY_STATEMENT), isEnabled: true, execute: function showPrivacy() {
                                        var e = null;
                                        that._showPrivacy(e)
                                    }
                            }));
                            this._editControl.rows = 2;
                            this._editControl.maxLength = 1024;
                            this._editControl.showRemainingChars = false;
                            WinJS.Utilities.removeClass(this._commentDescription.domElement, "settingsFeedbackPanelContentDialog");
                            WinJS.Utilities.addClass(this._commentDescription.domElement, "removeFromDisplay");
                            WinJS.Utilities.removeClass(this._bottomContainer, "settingsFeedbackBottomDialog");
                            WinJS.Utilities.addClass(this._bottomContainer, "removeFromDisplay");
                            WinJS.Utilities.removeClass(this._feedbackPrivacyButton, "removeFromDisplay");
                            var currentView = Windows.UI.ViewManagement.InputPane.getForCurrentView();
                            this._inputEventHandlers = MS.Entertainment.Utilities.addEventHandlers(currentView, {
                                showing: this._softKeyboardShown.bind(this), hiding: this._softKeyboardHidden.bind(this)
                            })
                        };
                        UserFeedbackDialog.prototype._showUserVoice = function(e) {
                            if (e && e.keyCode && !(e.keyCode === WinJS.Utilities.Key.enter || e.keyCode === WinJS.Utilities.Key.space))
                                return;
                            e.preventDefault();
                            var userVoiceUrl;
                            if (MS.Entertainment.Utilities.isMusicApp)
                                userVoiceUrl = "http://go.microsoft.com/fwlink/?LinkID=391683";
                            else if (MS.Entertainment.Utilities.isVideoApp)
                                userVoiceUrl = "http://go.microsoft.com/fwlink/?LinkId=391686";
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var externalNavigationAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.externalNavigate);
                            externalNavigationAction.parameter = userVoiceUrl;
                            externalNavigationAction.automationId = MS.Entertainment.UI.AutomationIds.userFeedbackDialogPrivacyLink;
                            externalNavigationAction.execute()
                        };
                        return UserFeedbackDialog
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.UserFeedbackDialog = UserFeedbackDialog
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/purchaseflow/smartappbaractions.js:9175 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {
        DelayLoadAction: MS.Entertainment.UI.Framework.define(function DelayLoadAction(actionId) {
            this.id = actionId
        }, {
            id: null, action: {get: function() {
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        return actionService.isRegistered(this.id) ? actionService.getAction(this.id) : null
                    }}
        }), SmartAppbarActionHost: MS.Entertainment.UI.Framework.define(function SmartAppbarActionHost() {
                this._selectionHandlers = []
            }, {
                _mediaItem: null, _selectedItemBindings: null, _mediaContext: null, _selectedItemStateEngine: null, _shareOperation: null, _selectionHandlers: null, dispose: function dispose() {
                        var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                        if (appBarControl && appBarControl.hide)
                            appBarControl.hide(true);
                        this._releaseMediaContext();
                        this._releaseMediaResources()
                    }, mediaItem: {
                        get: function mediaItem_get() {
                            return this._mediaItem
                        }, set: function mediaItem_set(value) {
                                if (this._mediaItem !== value) {
                                    this._mediaItem = value;
                                    this._updateState()
                                }
                            }
                    }, addSelectionHandlers: function addSelectionHandlers(handlers) {
                        this._selectionHandlers = this._selectionHandlers || [];
                        this._selectionHandlers.push(handlers)
                    }, _releaseMediaResources: function _releaseMediaResources() {
                        if (this._shareOperation) {
                            this._shareOperation.cancel();
                            this._shareOperation = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        if (this._selectedItemBindings) {
                            this._selectedItemBindings.cancel();
                            this._selectedItemBindings = null
                        }
                    }, _releaseMediaContext: function _releaseMediaContext() {
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    }, _updateState: function _updateState() {
                        this._releaseMediaResources();
                        if (!this._mediaItem)
                            this._releaseMediaContext();
                        else {
                            var appBarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                            var sender = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareSender);
                            if (this._mediaContext)
                                this._mediaContext.updateMediaItem(this._mediaItem);
                            else
                                this._mediaContext = appBarService.pushMediaContext(this._mediaItem, this._selectionHandlers, [], {executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.selection});
                            if (this._mediaItem.hydrate)
                                this._mediaItem.hydrate();
                            MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(this._mediaItem);
                            if (!this._selectedItemStateEngine)
                                this._selectedItemStateEngine = MS.Entertainment.ViewModels.SmartBuyStateEngine.getSelectionStateFromMediaItem(this._mediaItem);
                            if (!this._selectedItemBindings)
                                this._selectedItemBindings = WinJS.Binding.bind(this._selectedItemStateEngine, {currentAppbarActions: this._updateAppBarActions.bind(this)});
                            this._shareOperation = sender.pendingShare(this._mediaItem)
                        }
                    }, _updateAppBarActions: function _updateAppBarActions(newActions) {
                        if (this._mediaContext)
                            this._mediaContext.setToolbarActions(newActions);
                        if (newActions.length > 0) {
                            var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                            if (appBarControl)
                                appBarControl.show()
                        }
                    }
            }), SmartAppbarActions: (function SmartAppbarActions() {
                var _actionService;
                return {
                        checkForServiceBlockAsync: function checkForServiceBlockAsync(arrayMediaItems) {
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            arrayMediaItems = arrayMediaItems || [];
                            var firstMediaItem = arrayMediaItems[0] || {};
                            var isFirstItemTrackOrAlbum = (firstMediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || firstMediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album);
                            if (!uiStateService.servicesEnabled && isFirstItemTrackOrAlbum && !firstMediaItem.canPlayLocally)
                                return MS.Entertainment.UI.Shell.showAppUpdateDialog().then(function dialogDismissed() {
                                        return WinJS.Promise.wrapError("Can't play due to medium block")
                                    });
                            else
                                return WinJS.Promise.wrap(arrayMediaItems)
                        }, createPlaySelectionAppbarAction: function createPlaySelectionAppbarAction(actionId) {
                                var playPreviewOnly = (actionId === MS.Entertainment.UI.AppBarActions.previewSelection);
                                var continuous = (actionId === MS.Entertainment.UI.AppBarActions.playSelectionContinuous || actionId === MS.Entertainment.UI.AppBarActions.playContinuous);
                                var playSelectionAction = new MS.Entertainment.UI.ToolbarAction;
                                playSelectionAction.id = actionId;
                                playSelectionAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySelection;
                                var titleId = String.id.IDS_MUSIC_PLAY_SELECTION_ACTION;
                                if (playPreviewOnly)
                                    titleId = String.id.IDS_MUSIC_PREVIEW_SELECTION_ACTION;
                                else if (actionId === MS.Entertainment.UI.AppBarActions.playContinuous)
                                    titleId = String.id.IDS_PLAY_BUTTON;
                                playSelectionAction.title = String.load(titleId);
                                playSelectionAction.icon = MS.Entertainment.UI.Icon.play;
                                playSelectionAction.shouldAutomaticallySendTelemetry = false;
                                if (playSelectionAction.isVoiceEnabled) {
                                    MS.Entertainment.ViewModels.assert(!(playPreviewOnly && MS.Entertainment.Utilities.isMusicApp2), "No VUI strings are available for preview; defaulting to Play strings.");
                                    playSelectionAction.title = String.load(String.id.IDS_PLAY_MUSIC_BUTTON_VUI_GUI);
                                    playSelectionAction.voicePhraseStringId = String.id.IDS_PLAY_MUSIC_BUTTON_VUI_ALM;
                                    playSelectionAction.voicePhoneticPhraseStringId = String.id.IDS_PLAY_MUSIC_BUTTON_VUI_PRON
                                }
                                playSelectionAction.executed = function executed() {
                                    if (!_actionService)
                                        _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia);
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var collectionFilter = mediaContext.collectionFilter;
                                    var options = mediaContext.options || {};
                                    var offset = null;
                                    var key = null;
                                    if (continuous && options && options.containingMedia) {
                                        mediaItems = options.containingMedia.playbackItemSource;
                                        offset = options.containingMedia.playbackOffset;
                                        key = options.containingMedia.playbackKey
                                    }
                                    action.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySelection;
                                    action.parameter = {
                                        mediaItem: mediaItems && mediaItems.copy ? mediaItems.copy() : mediaItems, playPreviewOnly: playPreviewOnly, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: collectionFilter, offset: offset
                                    };
                                    return MS.Entertainment.Data.List.listToArray(mediaItems).then(MS.Entertainment.ViewModels.SmartAppbarActions.checkForServiceBlockAsync).then(function preRollAdIfNeeded(arrayMediaItems) {
                                            var firstMediaItem = arrayMediaItems[0];
                                            var adService;
                                            if (collectionFilter !== Microsoft.Entertainment.Platform.MediaAvailability.availableOffline && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.adService))
                                                adService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.adService);
                                            mediaItems = arrayMediaItems;
                                            return !playPreviewOnly && adService ? adService.playVideoAdIfRequired(firstMediaItem, collectionFilter) : WinJS.Promise.as(true)
                                        }, function handleServiceBlocked() {
                                            return false
                                        }).then(function playVideoAdIfRequired_complete(adPlayedIfNeeded) {
                                            return WinJS.Promise.wrap({
                                                    arrayMediaItems: mediaItems, allowPlayback: adPlayedIfNeeded
                                                })
                                        }, function playVideoAdIfRequired_failed(error) {
                                            MS.Entertainment.ViewModels.fail("playVideoAdIfRequired_failed: " + (error && error.message));
                                            return WinJS.Promise.wrap({
                                                    arrayMediaItems: mediaItems, allowPlayback: true
                                                })
                                        }).then(function playSelectedItems(playData) {
                                            var arrayMediaItems = playData.arrayMediaItems;
                                            var allowPlayback = playData.allowPlayback;
                                            if (!allowPlayback)
                                                return;
                                            if (action.parameter)
                                                action.parameter.mediaItem = arrayMediaItems;
                                            if (arrayMediaItems[0].mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                                                action.execute();
                                            else {
                                                var playContainerAction;
                                                var firstItem = arrayMediaItems.shift();
                                                var isArtistMediaItemArray = ((firstItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.person) && (firstItem.personType === Microsoft.Entertainment.Queries.PersonType.artist));
                                                if (isArtistMediaItemArray) {
                                                    playContainerAction = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist);
                                                    playContainerAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySelection;
                                                    playContainerAction.parameter = {
                                                        showImmersive: false, showAppBar: true, playCollectionItemsOnly: true, mediaItem: firstItem, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: collectionFilter, offset: offset, key: key
                                                    }
                                                }
                                                else {
                                                    playContainerAction = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia);
                                                    playContainerAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySelection;
                                                    playContainerAction.parameter = {
                                                        mediaItem: firstItem, showAppBar: true, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, playPreviewOnly: playPreviewOnly, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: collectionFilter, offset: offset, key: key
                                                    }
                                                }
                                                playContainerAction.execute();
                                                var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                                                var playbackSession = sessionManager.nowPlayingSession;
                                                var onPlaybackStarted = function playContainerItems(currentPlaybackState) {
                                                        if (currentPlaybackState === MS.Entertainment.Platform.Playback.TransportState.starting || currentPlaybackState === MS.Entertainment.Platform.Playback.TransportState.playing) {
                                                            playbackSession.unbind("currentTransportState", onPlaybackStarted);
                                                            if (isArtistMediaItemArray) {
                                                                playContainerAction = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addArtistToNowPlaying);
                                                                playContainerAction.automationId = MS.Entertainment.UI.AutomationIds.appBarAddLocalArtistToNowPlaying;
                                                                playContainerAction.parameter = {
                                                                    mediaItem: arrayMediaItems, playCollectionItemsOnly: true, suppressNotification: true, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: collectionFilter
                                                                }
                                                            }
                                                            else {
                                                                playContainerAction = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addToNowPlaying);
                                                                playContainerAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySelection;
                                                                playContainerAction.parameter = {
                                                                    mediaItem: arrayMediaItems, suppressNotification: true, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: collectionFilter
                                                                }
                                                            }
                                                            playContainerAction.execute()
                                                        }
                                                        else if (playbackSession.errorDescriptor)
                                                            playbackSession.unbind("currentTransportState", onPlaybackStarted)
                                                    };
                                                if (arrayMediaItems.length > 0)
                                                    playbackSession.bind("currentTransportState", onPlaybackStarted)
                                            }
                                            if (mediaContext)
                                                mediaContext.dispatchEvent(actionId)
                                        })
                                };
                                playSelectionAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: playSelectionAction}
                            }, createAddToNowPlayingAppbarAction: function createAddToNowPlayingAppbarAction(actionId) {
                                var addToNowPlayingAction = new MS.Entertainment.UI.ToolbarAction;
                                if (actionId === MS.Entertainment.UI.AppBarActions.addLocalArtistToNowPlaying) {
                                    addToNowPlayingAction.id = MS.Entertainment.UI.AppBarActions.addLocalArtistToNowPlaying;
                                    addToNowPlayingAction.automationId = MS.Entertainment.UI.AutomationIds.appBarAddLocalArtistToNowPlaying
                                }
                                else if (actionId === MS.Entertainment.UI.AppBarActions.addMarketplaceArtistToNowPlaying) {
                                    addToNowPlayingAction.id = MS.Entertainment.UI.AppBarActions.addMarketplaceArtistToNowPlaying;
                                    addToNowPlayingAction.automationId = MS.Entertainment.UI.AutomationIds.appBarAddMarketplaceArtistToNowPlaying
                                }
                                else {
                                    addToNowPlayingAction.id = MS.Entertainment.UI.AppBarActions.addToNowPlaying;
                                    addToNowPlayingAction.automationId = MS.Entertainment.UI.AutomationIds.appBarAddToNowPlaying
                                }
                                addToNowPlayingAction.title = String.load(String.id.IDS_MUSIC_ADD_TO_LIST_NOW_PLAYING_ACTION);
                                addToNowPlayingAction.icon = MS.Entertainment.UI.Icon.addToNowPlaying;
                                addToNowPlayingAction.shouldAutomaticallySendTelemetry = false;
                                if (addToNowPlayingAction.isVoiceEnabled) {
                                    addToNowPlayingAction.title = String.load(String.id.IDS_MUSIC2_ADD_TO_NOW_PLAYING_BUTTON_VUI_GUI);
                                    addToNowPlayingAction.voicePhraseStringId = String.id.IDS_MUSIC2_ADD_TO_NOW_PLAYING_BUTTON_VUI_ALM;
                                    addToNowPlayingAction.voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_ADD_TO_NOW_PLAYING_BUTTON_VUI_PRON
                                }
                                addToNowPlayingAction.executed = function executed(parameter) {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = (parameter && parameter.mediaItem) || mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    var shouldUseTopSongsForArtistAddTo = parameter.shouldUseTopSongsForArtistAddTo;
                                    return MS.Entertainment.Data.List.listToArray(mediaItems).then(MS.Entertainment.ViewModels.SmartAppbarActions.checkForServiceBlockAsync).then(function gotArray(arrayMediaItems) {
                                            if (!_actionService)
                                                _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                            var action;
                                            if (!arrayMediaItems || !arrayMediaItems.length || !arrayMediaItems[0])
                                                return;
                                            var playLocalCollectionTracksOnly;
                                            if (addToNowPlayingAction.id === MS.Entertainment.UI.AppBarActions.addLocalArtistToNowPlaying)
                                                playLocalCollectionTracksOnly = true;
                                            else if (addToNowPlayingAction.id === MS.Entertainment.UI.AppBarActions.addMarketplaceArtistToNowPlaying)
                                                playLocalCollectionTracksOnly = false;
                                            else
                                                playLocalCollectionTracksOnly = arrayMediaItems[0].fromCollection;
                                            if (arrayMediaItems[0].mediaType === Microsoft.Entertainment.Queries.ObjectType.person) {
                                                action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addArtistToNowPlaying);
                                                action.automationId = playLocalCollectionTracksOnly ? MS.Entertainment.UI.AutomationIds.appBarAddLocalArtistToNowPlaying : MS.Entertainment.UI.AutomationIds.appBarAddMarketplaceArtistToNowPlaying;
                                                action.parameter = {
                                                    playCollectionItemsOnly: playLocalCollectionTracksOnly, mediaItem: arrayMediaItems, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, shouldUseTopSongsForArtistAddTo: shouldUseTopSongsForArtistAddTo
                                                }
                                            }
                                            else {
                                                action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addToNowPlaying);
                                                action.automationId = addToNowPlayingAction.automationId;
                                                action.parameter = {
                                                    mediaItem: arrayMediaItems, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                                }
                                            }
                                            action.execute();
                                            if (mediaContext)
                                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.addToNowPlaying)
                                        }.bind(this), function handleServiceBlocked() {
                                            return
                                        })
                                };
                                addToNowPlayingAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: addToNowPlayingAction}
                            }, createTrackPlayPreviewAppbarAction: function createTrackPlayPreviewAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, {
                                        mediaItem: null, showAppBar: true, playPreviewOnly: true
                                    }, MS.Entertainment.UI.AppBarActions.previewTrack, MS.Entertainment.UI.AutomationIds.appBarPreviewTrack, String.id.IDS_DETAILS_PREVIEW_SONG_LABEL, MS.Entertainment.UI.Icon.play, {
                                        guiStringId: String.id.IDS_MUSIC2_PREVIEW_SONG_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC2_PREVIEW_SONG_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC2_PREVIEW_SONG_BUTTON_VUI_PRON
                                    })
                            }, createTrackPlayMusicVideoAppbarAction: function createTrackPlayMusicVideoAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, {
                                        mediaItem: null, showAppBar: true, playMusicVideo: true
                                    }, MS.Entertainment.UI.AppBarActions.playMusicVideoFromTrack, MS.Entertainment.UI.AutomationIds.playMusicVideoFromTrack, String.id.IDS_WATCH_VIDEO_BUTTON_VUI_GUI, MS.Entertainment.UI.Icon.video11, {
                                        guiStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_PRON
                                    })
                            }, createPlayMusicVideoAppbarAction: function createPlayMusicVideoAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, {
                                        mediaItem: null, showAppBar: true
                                    }, MS.Entertainment.UI.AppBarActions.playMusicVideo, MS.Entertainment.UI.AutomationIds.playMusicVideo, String.id.IDS_WATCH_VIDEO_BUTTON_VUI_GUI, MS.Entertainment.UI.Icon.video11, {
                                        guiStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_WATCH_VIDEO_BUTTON_VUI_PRON
                                    })
                            }, createPlayTopSongsAppbarAction: function createPlayTopSongsAppbarAction() {
                                var playTopSongsAction = new MS.Entertainment.UI.ToolbarAction;
                                playTopSongsAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlayTopSongs;
                                playTopSongsAction.id = MS.Entertainment.UI.AppBarActions.playTopSongs;
                                playTopSongsAction.title = String.load(String.id.IDS_MUSIC_PLAY_TOP_SONGS_BUTTON);
                                playTopSongsAction.icon = MS.Entertainment.UI.Icon.play;
                                playTopSongsAction.shouldAutomaticallySendTelemetry = false;
                                playTopSongsAction.executed = function playTopSongsAction_executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    MS.Entertainment.Data.List.listToArray(mediaItems).done(function gotArray(arrayMediaItems) {
                                        var action;
                                        if (!_actionService)
                                            _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                        action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist);
                                        action.automationId = MS.Entertainment.UI.AutomationIds.appBarPlayTopSongs;
                                        action.parameter = {
                                            mediaItem: arrayMediaItems[0], actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.adService))
                                            return action.execute();
                                        var adService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.adService);
                                        adService.isStreamingBlocked(arrayMediaItems[0]).done(function isStreamingBlocked_complete(signInNeeded) {
                                            var promise;
                                            var dialogDismissed;
                                            promise = new WinJS.Promise(function(complete) {
                                                dialogDismissed = complete
                                            }).then(function playVideoAdIfRequired() {
                                                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                                return (!signInNeeded || signIn.isSignedIn) ? adService.playVideoAdIfRequired(arrayMediaItems[0]) : false
                                            }).done(function playVideoAdIfRequired_complete(adPlayedIfNeeded) {
                                                if (adPlayedIfNeeded)
                                                    action.execute()
                                            }, function playVideoAdIfRequired_failed(error) {
                                                MS.Entertainment.ViewModels.fail("playVideoAdIfRequired_failed: " + (error && error.message));
                                                action.execute()
                                            });
                                            if (signInNeeded) {
                                                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                                if (!featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlayAnonymous))
                                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed);
                                                else if (configurationManager.service.lastSignedInUserXuid)
                                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_EXISTING_USER_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForExistingUser, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed);
                                                else
                                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_NEW_USER_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForNewUser, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed)
                                            }
                                            else
                                                dialogDismissed()
                                        }, function isStreamingBlocked_failed(error) {
                                            MS.Entertainment.ViewModels.fail("isStreamingBlocked_failed: " + (error && error.message))
                                        })
                                    }, function failedToGetArray(error) {
                                        MS.Entertainment.ViewModels.fail("Failed to play top songs. Error message: " + error && error.message)
                                    })
                                };
                                playTopSongsAction.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: playTopSongsAction}
                            }, createPlaySmartDJAppbarAction: function createPlaySmartDJAction() {
                                var playSmartDJAction = new MS.Entertainment.UI.ToolbarAction;
                                playSmartDJAction.id = MS.Entertainment.UI.AppBarActions.playSmartDJ;
                                playSmartDJAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySmartDJ;
                                playSmartDJAction.title = String.load(String.id.IDS_DETAILS_PLAY_SMART_DJ_MIX_NOW_LABEL);
                                playSmartDJAction.icon = MS.Entertainment.UI.Icon.smartDjAppbar;
                                playSmartDJAction.iconPressed = MS.Entertainment.UI.Icon.smartDjPressed;
                                playSmartDJAction.hideDefaultRing = true;
                                playSmartDJAction.shouldAutomaticallySendTelemetry = false;
                                playSmartDJAction.iconInfo = {className: "icon-smartDJ"};
                                if (playSmartDJAction.isVoiceEnabled) {
                                    playSmartDJAction.title = String.load(String.id.IDS_MUSIC2_PLAY_RADIO_BUTTON_VUI_GUI);
                                    playSmartDJAction.voicePhraseStringId = String.id.IDS_MUSIC2_PLAY_RADIO_BUTTON_VUI_ALM;
                                    playSmartDJAction.voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_PLAY_RADIO_BUTTON_VUI_PRON
                                }
                                playSmartDJAction.executed = function playSmartDJAction_executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    MS.Entertainment.Data.List.listToArray(mediaItems).done(function gotArray(arrayMediaItems) {
                                        var action;
                                        if (!_actionService)
                                            _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                        action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playSmartDJ);
                                        action.automationId = MS.Entertainment.UI.AutomationIds.appBarPlaySmartDJ;
                                        action.parameter = {
                                            showImmersive: false, showAppBar: true, playCollectionItemsOnly: false, mediaItem: arrayMediaItems[0], actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        action.onComplete = function playSmartDJCompleted() {
                                            if (mediaContext)
                                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.playSmartDJ)
                                        };
                                        action.execute()
                                    })
                                };
                                playSmartDJAction.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: playSmartDJAction}
                            }, createDeleteSmartDJAppbarAction: function createDeleteSmartDJAppbarAction() {
                                var deleteAction = new MS.Entertainment.UI.ToolbarAction;
                                deleteAction.id = MS.Entertainment.UI.AppBarActions.deleteSmartDJ;
                                deleteAction.automationId = MS.Entertainment.UI.AutomationIds.appBarDeleteSmartDJ;
                                deleteAction.title = String.load(String.id.IDS_DELETE_LABEL);
                                deleteAction.icon = MS.Entertainment.UI.Icon.delete;
                                deleteAction.shouldAutomaticallySendTelemetry = false;
                                deleteAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    if (!_actionService)
                                        _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteSmartDJ);
                                    action.automationId = MS.Entertainment.UI.AutomationIds.appBarDeleteSmartDJ;
                                    action.parameter = {
                                        mediaItems: mediaItems, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    action.onComplete = function deleteCompleted() {
                                        if (mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.deleteSmartDJ, {
                                                deleted: true, mediaItems: mediaItems
                                            })
                                    };
                                    action.execute()
                                };
                                return {action: deleteAction}
                            }, createAppbarActionFromAction: function createAppbarActionFromAction(actionId, parameter, appBarActionId, automationId, titleId, icon, voiceInfo) {
                                if (!_actionService)
                                    _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                var action = _actionService.getAction(actionId);
                                action.parameter = parameter || {};
                                var appBarAction = new MS.Entertainment.UI.ToolbarAction;
                                appBarAction.id = appBarActionId;
                                appBarAction.automationId = automationId;
                                if (titleId)
                                    appBarAction.title = String.load(titleId);
                                appBarAction.icon = icon;
                                appBarAction.wrappedAction = action;
                                appBarAction.parameter = parameter || {};
                                if (voiceInfo && appBarAction.isVoiceEnabled) {
                                    if (voiceInfo.guiStringId)
                                        appBarAction.title = String.load(voiceInfo.guiStringId);
                                    appBarAction.voicePhraseStringId = voiceInfo.voicePhraseStringId;
                                    appBarAction.voicePhoneticPhraseStringId = voiceInfo.voicePhoneticPhraseStringId;
                                    if (typeof(voiceInfo.voiceConfidence) === "number")
                                        appBarAction.voiceConfidence = voiceInfo.voiceConfidence
                                }
                                appBarAction.executed = function executed(parameter) {
                                    parameter = parameter || {};
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var options = mediaContext.options || {};
                                    appBarAction.parameter.actionType = MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction;
                                    appBarAction.executeLocation = options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection;
                                    appBarAction.shouldAutomaticallySendTelemetry = false;
                                    action.parameter.mediaItem = parameter.mediaItem || mediaContext.mediaItem;
                                    action.parameter.actionType = MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction;
                                    action.parameter.executeLocation = options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection;
                                    action.id = appBarAction.id;
                                    action.automationId = appBarAction.automationId;
                                    action.title = appBarAction.title;
                                    action.referenceContainer = appBarAction.referenceContainer;
                                    action.shouldAutomaticallySendTelemetry = false;
                                    WinJS.Promise.as(action.execute()).done(function actionFinished() {
                                        if (!parameter.skipCompleteHandler && mediaContext)
                                            mediaContext.dispatchEvent(appBarActionId)
                                    }, function handleError(error) {
                                        MS.Entertainment.ViewModels.fail("Executing app bar action has failed. ActionId: " + appBarActionId + " Error: " + (error && error.message))
                                    })
                                };
                                action.bind("isEnabled", function isEnabledChanged(isEnabled) {
                                    appBarAction.isEnabled = isEnabled
                                });
                                if (parameter.hasSubActions)
                                    action.bind("subActions", function subActionsChanged(newItems) {
                                        appBarAction.subActions = newItems
                                    });
                                appBarAction.canExecute = function canExecute(parameter) {
                                    if (!action.parameter.mediaItem || !action.parameter.isFlyoutAction) {
                                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                        action.parameter.mediaItem = mediaContext.mediaItem
                                    }
                                    action.requeryCanExecute();
                                    return action.isEnabled
                                };
                                return {action: appBarAction}
                            }, createPinToStartScreenAction: function createPinToStartScreenAction() {
                                var action = new MS.Entertainment.UI.ToolbarAction;
                                action.id = MS.Entertainment.UI.AppBarActions.pinToStartScreen;
                                action.automationId = MS.Entertainment.UI.AutomationIds.appBarPinToStartScreen;
                                action.title = String.load(String.id.IDS_PIN_TO_START_SCREEN_BUTTON);
                                action.icon = WinJS.UI.AppBarIcon.pin;
                                action.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var mediaItem = Array.isArray(mediaItems) ? (mediaItems.length > 0 ? mediaItems[0] : null) : mediaItems;
                                    if (!mediaItem)
                                        throw new Error("Invalid mediaItems when createPinToStartScreenAction was executed");
                                    var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                                    MS.Entertainment.Data.List.getData(mediaItem, 0).done(function getData_complete(media) {
                                        return pinToStartScreenService.pinMediaAsync(media)
                                    })
                                };
                                action.onComplete = function pinToStartScreenCompleted() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    if (mediaContext)
                                        mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.pinToStartScreen)
                                };
                                return {action: action}
                            }, createUnpinFromStartScreenAction: function createUnpinFromStartScreenAction() {
                                var action = new MS.Entertainment.UI.ToolbarAction;
                                action.id = MS.Entertainment.UI.AppBarActions.unpinFromStartScreen;
                                action.automationId = MS.Entertainment.UI.AutomationIds.appBarUnpinFromStartScreen;
                                action.title = String.load(String.id.IDS_UNPIN_FROM_START_SCREEN_BUTTON);
                                action.icon = WinJS.UI.AppBarIcon.unpin;
                                action.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var mediaItem = Array.isArray(mediaItems) ? (mediaItems.length > 0 ? mediaItems[0] : null) : mediaItems;
                                    if (!mediaItem)
                                        throw new Error("Invalid mediaItems when createUnpinFromStartScreenAction was executed");
                                    var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                                    MS.Entertainment.Data.List.getData(mediaItem, 0).done(function getData_complete(media) {
                                        return pinToStartScreenService.unpinMediaAsync(media)
                                    })
                                };
                                action.onComplete = function unPinToStartScreenCompleted() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    if (mediaContext)
                                        mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.unpinFromStartScreen)
                                };
                                return {action: action}
                            }, createDeleteMediaAppbarAction: function createDeleteMediaAppbarAction(appbarActionId, automationId, titleId) {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, {
                                        mediaItem: null, skipCompleteHandler: true
                                    }, appbarActionId ? appbarActionId : MS.Entertainment.UI.AppBarActions.deleteMedia, automationId ? automationId : MS.Entertainment.UI.AutomationIds.smartButtonDeleteMedia, titleId ? titleId : String.id.IDS_DELETE_LABEL, MS.Entertainment.UI.Icon.delete, {
                                        guiStringId: String.id.IDS_DELETE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_DELETE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_DELETE_BUTTON_VUI_PRON, voiceConfidence: MS.Entertainment.Utilities.isApp2 ? MS.Entertainment.UI.App2.VoiceStatics.criticalActionConfidence : 0.0
                                    })
                            }, createPurchaseAlbumAppbarAction: function createPurchaseAlbumAppbarAction() {
                                var action = new MS.Entertainment.UI.ToolbarAction;
                                action.id = MS.Entertainment.UI.AppBarActions.purchaseAlbumFromMarketplace;
                                action.automationId = MS.Entertainment.UI.AutomationIds.appBarPurchaseAlbumFromMarketplace;
                                action.title = String.load(String.id.IDS_DETAILS_BUY_ALBUM_LABEL);
                                action.icon = MS.Entertainment.UI.Icon.shop;
                                action.shouldAutomaticallySendTelemetry = false;
                                action.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItem = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    action.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    if (!_actionService)
                                        _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var purchaseAction = _actionService.getAction(MS.Entertainment.Utilities.isMusicApp1 ? MS.Entertainment.UI.Actions.ActionIdentifiers.albumPurchase : MS.Entertainment.UI.Actions.ActionIdentifiers.purchase);
                                    var albumToPurchase = Array.isArray(mediaItem) ? mediaItem[0] : mediaItem;
                                    purchaseAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPurchaseAlbumFromMarketplace;
                                    purchaseAction.parameter = {
                                        mediaItem: albumToPurchase, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    purchaseAction.eventHandlers = {onFinishedEvent: function onFinishedEvent() {
                                            purchaseAction.parameter = {};
                                            if (mediaContext)
                                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.purchaseAlbumFromMarketplace)
                                        }};
                                    purchaseAction.execute()
                                };
                                action.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: action}
                            }, createPurchaseTrackAppbarAction: function createPurchaseTrackAppbarAction() {
                                var action = new MS.Entertainment.UI.ToolbarAction;
                                action.id = MS.Entertainment.UI.AppBarActions.purchaseTrackFromMarketplace;
                                action.automationId = MS.Entertainment.UI.AutomationIds.appBarPurchaseTrackFromMarketplace;
                                action.title = String.load(String.id.IDS_DETAILS_BUY_SONG_LABEL);
                                action.icon = MS.Entertainment.UI.Icon.shop;
                                action.shouldAutomaticallySendTelemetry = false;
                                action.executed = function executed() {
                                    var hydratePromise;
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItem = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    mediaItem = Array.isArray(mediaItem) ? mediaItem[0] : mediaItem;
                                    action.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    if (!_actionService)
                                        _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var purchaseAction = _actionService.getAction(MS.Entertainment.Utilities.isMusicApp1 ? MS.Entertainment.UI.Actions.ActionIdentifiers.trackPurchase : MS.Entertainment.UI.Actions.ActionIdentifiers.purchase);
                                    purchaseAction.automationId = MS.Entertainment.UI.AutomationIds.appBarPurchaseTrackFromMarketplace;
                                    if (mediaItem.hydrate)
                                        hydratePromise = mediaItem.hydrate({forceUpdate: true});
                                    else
                                        hydratePromise = WinJS.Promise.wrap(mediaItem);
                                    hydratePromise.done(function hydrated() {
                                        var hasTrackPurchaseRights;
                                        var hasAlbumPurchaseRights;
                                        var mediaItemToPurchase;
                                        if (mediaItem.rights) {
                                            hasTrackPurchaseRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(mediaItem, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase]);
                                            hasAlbumPurchaseRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(mediaItem, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase])
                                        }
                                        mediaItemToPurchase = (!hasTrackPurchaseRights && hasAlbumPurchaseRights) ? mediaItem.album : mediaItem;
                                        purchaseAction.parameter = {
                                            mediaItem: mediaItemToPurchase, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        purchaseAction.eventHandlers = {onFinishedEvent: function onFinishedEvent() {
                                                purchaseAction.parameter = {};
                                                if (mediaContext)
                                                    mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.purchaseTrackFromMarketplace)
                                            }};
                                        purchaseAction.execute()
                                    }, function hydrate_failed(){})
                                };
                                action.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: action}
                            }, createPlayDisabledAppbarAction: function createPlayDisabledAppbarAction(media, eventHandlers) {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, {}, MS.Entertainment.UI.AppBarActions.playDisabled, MS.Entertainment.UI.AutomationIds.appBarPlayDisabled, String.id.IDS_DETAILS_PLAY_NOW_LABEL, MS.Entertainment.UI.Icon.play)
                            }, createDownloadAppbarAction: function createDownloadAppbarAction(appBarActionId, automationId, titleId) {
                                var downloadAction = new MS.Entertainment.UI.ToolbarAction;
                                downloadAction.id = appBarActionId;
                                downloadAction.automationId = automationId;
                                if (titleId)
                                    downloadAction.title = String.load(titleId);
                                downloadAction.icon = WinJS.UI.AppBarIcon.download;
                                downloadAction.shouldAutomaticallySendTelemetry = false;
                                downloadAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var listOrMediaItem = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    downloadAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).then(function showImmersiveDetails(mediaItem) {
                                        MS.Entertainment.Platform.PurchaseHelpers.ensurePreownedMediaAddedAsync(mediaItem).then(function ensurePreownedMediaAddedAsync_complete(dbItems) {
                                            MS.Entertainment.Platform.PurchaseHelpers.downloadMedia(mediaItem, dbItems.dbMediaIds, dbItems.dbMediaTypes).then(function downloadMedia_complete(taskIds) {
                                                if (mediaContext)
                                                    mediaContext.dispatchEvent(appBarActionId)
                                            })
                                        })
                                    })
                                };
                                downloadAction.canExecute = function canExecute(parameter) {
                                    return this.isEnabled
                                };
                                return {action: downloadAction}
                            }, createDownloadFromMarketplaceAppbarAction: function createDownloadFromMarketplaceAppbarAction() {
                                var appBarButton = this.createDownloadAppbarAction(MS.Entertainment.UI.AppBarActions.downloadFromMarketplace, MS.Entertainment.UI.AutomationIds.appBarDownloadFromMarketplace, MS.Entertainment.Utilities.getDownloadDynamicText());
                                return appBarButton
                            }, createTryDownloadAgainAppbarAction: function createTryDownloadAgainAppbarAction() {
                                var appBarButton = this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadAgain, {mediaItem: null}, MS.Entertainment.UI.AppBarActions.tryDownloadAgain, MS.Entertainment.UI.AutomationIds.appBarDownloadAgain, MS.Entertainment.Utilities.getTryAgainDynamicText(), WinJS.UI.AppBarIcon.download);
                                return appBarButton
                            }, createRemoveDownloadAppbarAction: function createRemoveDownloadAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadRemove, {mediaItem: null}, MS.Entertainment.UI.AppBarActions.removeFailedDownload, MS.Entertainment.UI.AutomationIds.appBarRemoveDownload, String.id.IDS_CLEAR_DOWNLOAD_ERROR_BUTTON, WinJS.UI.AppBarIcon.remove)
                            }, createSubscriptionDownloadAppbarAction: function createSubscriptionDownloadAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionDownload, {mediaItem: null}, MS.Entertainment.UI.AppBarActions.subscriptionDownload, MS.Entertainment.UI.AutomationIds.appBarSubscriptionDownload, String.id.IDS_DETAILS_DOWNLOAD_LABEL, WinJS.UI.AppBarIcon.download)
                            }, createAddToMyMusicAppbarAction: function createAddToMyMusicAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionAddToMyMusic, {mediaItem: null}, MS.Entertainment.UI.AppBarActions.addToMyMusic, MS.Entertainment.UI.AutomationIds.appBarAddToMyMusic, String.id.IDS_MUSIC_ADD_TO_MY_MUSIC_BUTTON, MS.Entertainment.UI.Icon.addToCollection, {
                                        guiStringId: String.id.IDS_MUSIC2_ADD_TO_COLLECTION_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC2_ADD_TO_COLLECTION_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC2_ADD_TO_COLLECTION_BUTTON_VUI_PRON
                                    })
                            }, createAddSongToAppbarAction: function createAddSongToAppbarAction() {
                                var appBarAction = this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addTo, {
                                        mediaItem: null, hasSubActions: true
                                    }, MS.Entertainment.UI.AppBarActions.addTo, MS.Entertainment.UI.AutomationIds.appBarAddTo, String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON, WinJS.UI.AppBarIcon.add, {
                                        guiStringId: String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON_VUI_PRON
                                    });
                                appBarAction.action.hasSubActions = true;
                                return appBarAction
                            }, createAddToAppbarAction: function createAddToAppbarAction(stringID) {
                                var appBarAction = this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addTo, {
                                        mediaItem: null, hasSubActions: true
                                    }, MS.Entertainment.UI.AppBarActions.addTo, MS.Entertainment.UI.AutomationIds.appBarAddTo, stringID, WinJS.UI.AppBarIcon.add);
                                appBarAction.action.hasSubActions = true;
                                return appBarAction
                            }, createEditMetadataAppbarAction: function createEditMetadataAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.editMetadata)
                            }, createRemoveFromListAppbarAction: function createRemoveFromListAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.removeFromList)
                            }, createMoveListItemUpAppbarAction: function createMoveListItemUpAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.moveListItemUp)
                            }, createMoveListItemDownAppbarAction: function createMoveListItemDownAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.moveListItemDown)
                            }, createMoveListItemToTopAppbarAction: function createMoveListItemToTopAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.moveListItemToTop)
                            }, createMoveListItemToBottomAppbarAction: function createMoveListItemToBottomAppbarAction() {
                                return new MS.Entertainment.ViewModels.DelayLoadAction(MS.Entertainment.UI.Actions.ActionIdentifiers.moveListItemToBottom)
                            }, createRemoveFromPlaylistAppbarAction: function createRemoveFromPlaylistAppbarAction() {
                                return MS.Entertainment.UI.Actions.Playlists.getRemoveFromPlaylistAction()
                            }, createRemoveFromNowPlayingAppbarAction: function createRemoveFromNowPlayingAppbarAction() {
                                return MS.Entertainment.UI.Actions.Playlists.getRemoveFromNowPlayingAction()
                            }, createShowPlaylistItemInformationAppbarAction: function createShowPlaylistItemInformationAppbarAction() {
                                return MS.Entertainment.UI.Actions.Playlists.getShowPlaylistItemInformationAction()
                            }, createImportPlaylistAppbarAction: function createImportPlaylistAppbarAction() {
                                return MS.Entertainment.UI.Actions.ImportPlaylists.getImportPlaylistsAction()
                            }, createDeletePlaylistAppbarAction: function createDeletePlaylistAppbarAction() {
                                return MS.Entertainment.UI.Actions.Playlists.getDeletePlaylistAction()
                            }, createRenamePlaylistAppbarAction: function createRenamePlaylistAppbarAction() {
                                return MS.Entertainment.UI.Actions.Playlists.getRenamePlaylistAction()
                            }, createSaveNowPlayingPlaylistAppbarAction: function createSaveNowPlayingPlaylistAppbarAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.saveNowPlayingPlaylist, {}, MS.Entertainment.UI.AppBarActions.saveNowPlayingPlaylist, MS.Entertainment.UI.AutomationIds.appBarSaveNowPlaying, String.id.IDS_MUSIC_SAVE_NOW_PLAYING_ACTION, WinJS.UI.AppBarIcon.save)
                            }, createClearSelectionAppbarAction: function createClearSelectionAppbarAction() {
                                var clearSelectionAction = new MS.Entertainment.UI.ToolbarAction;
                                clearSelectionAction.id = MS.Entertainment.UI.AppBarActions.clearSelection;
                                clearSelectionAction.automationId = MS.Entertainment.UI.AutomationIds.appBarClearSelection;
                                clearSelectionAction.title = String.load(String.id.IDS_CLEAR_SELECTION);
                                clearSelectionAction.icon = WinJS.UI.AppBarIcon.clear;
                                clearSelectionAction.shouldAutomaticallySendTelemetry = false;
                                clearSelectionAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var options = mediaContext.options || {};
                                    clearSelectionAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    if (mediaContext)
                                        mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.clearSelection)
                                };
                                clearSelectionAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: clearSelectionAction}
                            }, createPlayOnXboxAppbarAction: function createPlayOnXboxAppbarAction(actionId) {
                                if (!_actionService)
                                    _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                var playToXboxAction = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playOnXbox);
                                var action = new MS.Entertainment.UI.ToolbarAction;
                                if (actionId === MS.Entertainment.UI.AppBarActions.playTrackOnXbox360) {
                                    action.id = MS.Entertainment.UI.AppBarActions.playTrackOnXbox360;
                                    playToXboxAction.automationId = action.automationId = MS.Entertainment.UI.AutomationIds.appBarPlayTrackOnXbox360;
                                    action.title = String.load(String.id.IDS_DETAILS_PLAY_SONG_ON_XBOX_APPBAR_LABEL)
                                }
                                else {
                                    action.id = MS.Entertainment.UI.AppBarActions.playOnXbox360;
                                    playToXboxAction.automationId = action.automationId = MS.Entertainment.UI.AutomationIds.appBarPlayOnXbox360;
                                    action.title = String.load(String.id.IDS_DETAILS_PLAY_ON_XBOX_APPBAR_LABEL)
                                }
                                action.icon = MS.Entertainment.UI.Icon.sendToXbox;
                                action.adornerMode = MS.Entertainment.UI.Controls.IconButtonMode.Custom;
                                action.adornerRing = MS.Entertainment.UI.Icon.sendToXboxAdornerAppbar;
                                action.shouldAutomaticallySendTelemetry = false;
                                action.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItem = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    MS.Entertainment.Data.List.getData(mediaItem, 0).done(function getDataSucceeded(listMediaItem) {
                                        action.parameter = {
                                            actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        playToXboxAction.parameter = {
                                            mediaItem: listMediaItem, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        playToXboxAction.eventHandlers = {onFinishedEvent: function onFinishedEvent() {
                                                if (mediaContext)
                                                    mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.playOnXbox360)
                                            }};
                                        playToXboxAction.execute()
                                    }, function getDataFailed(error) {
                                        MS.Entertainment.ViewModels.fail("createPlayOnXboxAppbarAction_getData failed: " + error)
                                    })
                                };
                                action.canExecute = function canExecute() {
                                    return playToXboxAction.isEnabled
                                };
                                return {action: action}
                            }, createCollectionTrackAlbumPopoverAppbarAction: function createCollectionTrackAlbumPopoverAppbarAction(invokeTrack) {
                                var trackAlbumAction = new MS.Entertainment.UI.ToolbarAction;
                                var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                trackAlbumAction.id = MS.Entertainment.UI.AppBarActions.exploreAlbum;
                                trackAlbumAction.automationId = MS.Entertainment.UI.AutomationIds.appBarExploreAlbum;
                                trackAlbumAction.title = String.load(String.id.IDS_MUSIC_COLLECTION_EXPLORE_ALBUM);
                                trackAlbumAction.icon = MS.Entertainment.Utilities.isMusicApp2 ? MS.Entertainment.UI.Icon.info : MS.Entertainment.UI.Icon.details;
                                trackAlbumAction.shouldAutomaticallySendTelemetry = false;
                                trackAlbumAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    MS.Entertainment.Data.List.dataFromIndex(mediaContext.mediaItem, 0).done(function gotMediaItem(mediaItem) {
                                        var albumDetailsNavigateAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate);
                                        albumDetailsNavigateAction.parameter = {
                                            data: mediaItem, location: MS.Entertainment.Data.ItemLocation.collection, invokeTrack: invokeTrack
                                        };
                                        var options = mediaContext.options || {};
                                        trackAlbumAction.parameter = {
                                            actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                                        if (appBarControl)
                                            appBarControl.hide();
                                        albumDetailsNavigateAction.execute();
                                        if (mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.exploreAlbum)
                                    }, function handleError(error) {
                                        MS.Entertainment.ViewModels.fail("Failed to show album popover in createCollectionTrackAlbumPopoverAppbarAction. Error message: " + error && error.message);
                                        if (mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.exploreAlbum)
                                    })
                                };
                                trackAlbumAction.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: trackAlbumAction}
                            }, createArtistDetailsAppbarAction: function createArtistDetailsAppbarAction() {
                                var useImmersiveDetails = !MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation);
                                var artistDetailAction = new MS.Entertainment.UI.ToolbarAction;
                                artistDetailAction.id = MS.Entertainment.UI.AppBarActions.artistDetails;
                                artistDetailAction.automationId = MS.Entertainment.UI.AutomationIds.appBarArtistDetails;
                                artistDetailAction.title = String.load(String.id.IDS_DETAILS_VIEW_FULL_ARTIST_APPBAR);
                                artistDetailAction.icon = (MS.Entertainment.Utilities.isMusicApp2 || !useImmersiveDetails) ? MS.Entertainment.UI.Icon.player : MS.Entertainment.UI.Icon.details;
                                artistDetailAction.shouldAutomaticallySendTelemetry = false;
                                if (artistDetailAction.isVoiceEnabled) {
                                    artistDetailAction.title = String.load(String.id.IDS_MUSIC2_EXPLORE_ARTIST_BUTTON_VUI_GUI);
                                    artistDetailAction.voicePhraseStringId = String.id.IDS_MUSIC2_EXPLORE_ARTIST_BUTTON_VUI_ALM;
                                    artistDetailAction.voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_EXPLORE_ARTIST_BUTTON_VUI_PRON
                                }
                                artistDetailAction.executed = function executed() {
                                    if (!_actionService)
                                        _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var mediaItems = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    artistDetailAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    var action;
                                    var mediaItem = Array.isArray(mediaItems) ? mediaItems[0] : mediaItems;
                                    if (!useImmersiveDetails)
                                        MS.Entertainment.Data.List.getData(mediaItem, 0).then(function showArtistDetails(item) {
                                            if (item.mediaType !== Microsoft.Entertainment.Queries.ObjectType.person && item.artist)
                                                item = item.artist;
                                            action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.artistDetailsNavigate);
                                            action.parameter = {
                                                data: item, location: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection, collectionFilter: mediaContext.collectionFilter
                                            };
                                            action.execute()
                                        });
                                    else {
                                        action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails);
                                        action.parameter = {
                                            mediaItem: mediaItem, showDetails: true, autoPlay: false, automationId: MS.Entertainment.UI.AutomationIds.smartButtonArtistDetails, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                        };
                                        action.execute()
                                    }
                                    if (mediaContext)
                                        mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.artistDetails)
                                };
                                artistDetailAction.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: artistDetailAction}
                            }, createFindAlbumInfoAppbarAction: function createFindAlbumInfoAppbarAction() {
                                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                var isCloudV2Enabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.cloudCollectionV2Enabled);
                                var findAlbumInfoAction = new MS.Entertainment.UI.ToolbarAction;
                                findAlbumInfoAction.id = MS.Entertainment.UI.AppBarActions.findAlbumInfo;
                                findAlbumInfoAction.automationId = MS.Entertainment.UI.AutomationIds.appBarFindAlbumInfo;
                                findAlbumInfoAction.title = String.load(isCloudV2Enabled ? String.id.IDS_FIND_ALBUM_INFO_COMMAND : String.id.IDS_MATCH_ALBUM_INFO_COMMAND);
                                findAlbumInfoAction.icon = MS.Entertainment.UI.Icon.search;
                                findAlbumInfoAction.shouldAutomaticallySendTelemetry = false;
                                findAlbumInfoAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var options = mediaContext.options || {};
                                    findAlbumInfoAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    MS.Entertainment.Data.List.getData(mediaContext.mediaItem, 0).then(function showFindAlbumInfoDialog(album) {
                                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                        if (configurationManager.service.lastSignedInUserXuid && !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                                            return MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_ADD_TO_MY_MUSIC_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel]);
                                        return MS.Entertainment.Music.FindAlbumInfoDialog.show(album, MS.Entertainment.Music.FindAlbumInfo.MatchMode.library)
                                    }.bind(this)).done(function findAlbumInfoDialogClosed(dialog) {
                                        if (dialog && dialog.userControlInstance && dialog.userControlInstance.collectionUpdated && mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.findAlbumInfo)
                                    }, function findAlbumInfoDialogError() {
                                        MS.Entertainment.ViewModels.fail("FindAlbumInfo Dialog Failure")
                                    })
                                };
                                findAlbumInfoAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: findAlbumInfoAction}
                            }, createAddToCloudAppbarAction: function createAddToCloudAppbarAction() {
                                var featureEnablement = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.featureEnablement);
                                var addToCloudActionTitle = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.devicesEnabled) ? String.id.IDS_MUSIC_ADD_TO_LIST_DEVICES_ACTION : String.id.IDS_MUSIC_ADD_TO_LIST_CLOUD_ACTION;
                                var addToCloudAction = new MS.Entertainment.UI.ToolbarAction;
                                addToCloudAction.id = MS.Entertainment.UI.AppBarActions.addToCloud;
                                addToCloudAction.automationId = MS.Entertainment.UI.AutomationIds.appBarAddToCloud;
                                addToCloudAction.title = String.load(addToCloudActionTitle);
                                addToCloudAction.icon = MS.Entertainment.UI.Icon.search;
                                addToCloudAction.shouldAutomaticallySendTelemetry = false;
                                addToCloudAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var options = mediaContext.options || {};
                                    var appView = Windows.UI.ViewManagement.ApplicationView;
                                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                                    if (uiStateService.isSnapped && !appView.tryUnsnap())
                                        return;
                                    addToCloudAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    MS.Entertainment.Data.List.getData(mediaContext.mediaItem, 0).then(function showFindAlbumInfoDialog(media) {
                                        var hydratePromise;
                                        var returnValue;
                                        if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                                            media = media.album;
                                        if (media.hydrate && !media.hydrated)
                                            hydratePromise = media.hydrate();
                                        if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                                            returnValue = WinJS.Promise.as(hydratePromise).then(function hydrated() {
                                                return MS.Entertainment.Music.FindAlbumInfoDialog.show(media, MS.Entertainment.Music.FindAlbumInfo.MatchMode.cloud)
                                            }.bind(this));
                                        else
                                            returnValue = MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_ADD_TO_MY_MUSIC_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel]);
                                        return returnValue
                                    }.bind(this)).done(function findAlbumInfoDialogClosed(dialog) {
                                        if (dialog && dialog.userControlInstance && dialog.userControlInstance.collectionUpdated && mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.findAlbumInfo)
                                    }, function findAlbumInfoDialogError() {
                                        MS.Entertainment.ViewModels.assert(false, "AddToCloud Dialog Failure")
                                    })
                                };
                                addToCloudAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: addToCloudAction}
                            }, createMediaPropertiesAppbarAction: function createMediaPropertiesAppbarAction() {
                                var propertiesAction = new MS.Entertainment.UI.ToolbarAction;
                                propertiesAction.id = MS.Entertainment.UI.AppBarActions.mediaProperties;
                                propertiesAction.automationId = MS.Entertainment.UI.AutomationIds.appBarMediaProperties;
                                propertiesAction.title = String.load(String.id.IDS_MUSIC_PROPERTIES_DIALOG_TEXT);
                                propertiesAction.icon = MS.Entertainment.UI.Icon.details;
                                propertiesAction.shouldAutomaticallySendTelemetry = false;
                                propertiesAction.executed = function executed() {
                                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                                    var listOrMediaItem = mediaContext.mediaItem;
                                    var options = mediaContext.options || {};
                                    var appView = Windows.UI.ViewManagement.ApplicationView;
                                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                                    if (uiStateService.isSnapped && !appView.tryUnsnap())
                                        return;
                                    propertiesAction.parameter = {
                                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.selection
                                    };
                                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).then(function showPropertiesDialog(mediaItem) {
                                        if (!this.openPopup) {
                                            this.openPopup = MS.Entertainment.UI.Shell.createOverlay("MS.Entertainment.UI.Controls.MediaPropertiesFlyout", {mediaItem: mediaItem}, {
                                                top: "auto", right: "auto", left: "10px", bottom: "82px"
                                            });
                                            this.openPopup.show().then(function onPopupDismissed() {
                                                this.openPopup = null
                                            }.bind(this))
                                        }
                                        else
                                            this.openPopup.hide();
                                        if (mediaContext)
                                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.mediaProperties)
                                    }.bind(this))
                                };
                                propertiesAction.canExecute = function canExecute(parameter) {
                                    return true
                                };
                                return {action: propertiesAction}
                            }, createCloseCommandingPopoverAction: function createCloseCommandingPopoverAction() {
                                var closeAction = new MS.Entertainment.UI.ToolbarAction;
                                closeAction.id = MS.Entertainment.UI.AppBarActions.closeDialog;
                                closeAction.automationId = MS.Entertainment.UI.AutomationIds.appBarCloseCommandingPopover;
                                closeAction.title = String.load(String.id.IDS_CLOSE_BUTTON_VUI_GUI);
                                closeAction.icon = WinJS.UI.AppBarIcon.cancel;
                                closeAction.shouldAutomaticallySendTelemetry = false;
                                closeAction.executed = function executed() {
                                    MS.Entertainment.UI.Controls.CommandingPopOver.hideCurrentCommandingPopover()
                                };
                                closeAction.canExecute = function canExecute() {
                                    return true
                                };
                                return {action: closeAction}
                            }, createSubscriptionSignupAction: function createSubscriptionSignupAction() {
                                return this.createAppbarActionFromAction(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup, {}, MS.Entertainment.UI.AppBarActions.subscriptionSignup, MS.Entertainment.UI.AutomationIds.subscriptionSignup, String.id.IDS_MUSIC_STREAMING_PLAY_LIMIT_PREMIUM_ACTION, MS.Entertainment.UI.Icon.xboxXenonLogo)
                            }
                    }
            })()
    })
})()
})();
/* >>>>>>/viewmodels/purchaseflow/smartbuystateengine.js:10158 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var MSE = WinJS.Namespace.define("MS.Entertainment", null);
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {SmartBuyStateEngine: MS.Entertainment.defineOptionalObservable(function SmartBuyStateEngineConstructor(initialButtons) {
            this.currentButtons = initialButtons || [];
            this.currentAppbarActions = [];
            this._currentLocationSpecificButtons = {};
            this._eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell
        }, {
            buttons: null, appbarActions: null, suspendStateChanges: false, options: null, _eventProxy: null, _eventProvider: null, _mediaBindings: null, _mediaDeletedBindingMethod: null, _onStateChanged: null, _uniqueListenerId: null, _mediaRightChangedBindingMethod: null, _updateStateBindingMethod: null, _bindingsComplete: false, _cachedState: null, _lastUpdateStatePromise: null, _lastFireStateChangedPromise: null, _defaultDownloadInfo: null, _currentButtons: null, _currentLocationSpecificButtons: null, _unloaded: false, _queueUpdateStateTimer: null, _queueFireStateChangedTimer: null, currentButtons: {
                    get: function() {
                        return this._currentButtons
                    }, set: function(value) {
                            if (value !== this._currentButtons) {
                                var oldValue = this._currentButtons;
                                this._currentButtons = value;
                                if (this.media)
                                    this._eventProvider.traceMediaStateEngine_ButtonsChanged(this.media.mediaType, this.media.serviceId, this.media.libraryId);
                                this.notify("currentButtons", value, oldValue);
                                this._fireCurrentButtonsChanged()
                            }
                        }
                }, eventProxy: {
                    get: function() {
                        return this._eventProxy
                    }, set: function(value) {
                            if (this._eventProxy !== value) {
                                this._eventProxy = value;
                                if (this.currentButtons && this.currentButtons.length)
                                    this._fireCurrentButtonsChanged()
                            }
                        }
                }, initialize: function initialize(media, buttons, onStateChanged, options) {
                    if (this.media)
                        throw"State engine already initialized.";
                    else if (!media)
                        throw"A valid media object is required.";
                    this.options = options || {};
                    this.media = media;
                    this._onStateChanged = onStateChanged;
                    this.buttons = buttons;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.fileTransfer)) {
                                this._uniqueListenerId = "SmartButtonListener_" + MS.Entertainment.Utilities.getSessionUniqueInteger();
                                var notifier = {
                                        add: this._onFileTransferAdd, pending: this._onFileTransferEvent, update: this._onFileTransferEvent, complete: this._onFileTransferEvent, error: this._onFileTransferEvent, cancel: this._onFileTransferEvent
                                    };
                                var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                                fileTransferService.registerListener(this._uniqueListenerId, MS.Entertainment.Framework.DownloadInfo.getMarketplaceDownloadTaskKeyFunction(media.mediaType), null, notifier, this)
                            }
                            break
                    }
                    this._updateStateBindingMethod = this.updateState.bind(this);
                    this._mediaBindings = WinJS.Binding.bind(this.media, {
                        serviceId: this._updateStateBindingMethod, canonicalId: this._updateStateBindingMethod, isPinnedToStartScreen: this._updateStateBindingMethod, features: this._updateStateBindingMethod, trailerUrl: this._updateStateBindingMethod, defaultPlatformType: this._updateStateBindingMethod, libraryId: this._updateStateBindingMethod, rights: this._updateStateBindingMethod, rightsHydrated: this._updateStateBindingMethod, tracks: this._updateStateBindingMethod, count: this._updateStateBindingMethod, episode: this._updateStateBindingMethod, episodes: this._updateStateBindingMethod, hydrated: this._updateStateBindingMethod, isFreeStreamRestrictedByMonthlyLimit: this._updateStateBindingMethod, isFreeStreamRestrictedByIndividualLimit: this._updateStateBindingMethod
                    });
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).bind("isSignedIn", this._updateStateBindingMethod);
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).bind("isSubscription", this._updateStateBindingMethod);
                    if (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrackOrMusicVideo(this.media))
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).bind("primarySessionId", this._updateStateBindingMethod);
                    if (this.options.updateOnAppVisibilityChange)
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).bind("isAppVisible", this._updateStateBindingMethod);
                    if (this.options.updateOnAppSnappedModeChange)
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).bind("isSnapped", this._updateStateBindingMethod);
                    if (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        var playbackSession = sessionMgr.nowPlayingSession;
                        playbackSession.bind("currentTransportState", this._updateStateBindingMethod);
                        var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                        uiStateService.bind("nowPlayingVisible", this._updateStateBindingMethod);
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.mediaDeleted)) {
                            var deleteService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.mediaDeleted);
                            this._mediaDeletedBindingMethod = MS.Entertainment.Utilities.addEventHandlers(deleteService, {mediaDeleted: this._updateStateBindingMethod})
                        }
                    }
                    else if (this.media.mediaType !== undefined && MS.Entertainment.Utilities.isMusicApp) {
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        this._smartDJBindings = WinJS.Binding.bind(sessionManager.primarySession, {smartDJSeed: this._updateStateBindingMethod})
                    }
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.videoDetailsUiState)) {
                        var videoDetailsUiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.videoDetailsUiState);
                        videoDetailsUiStateService.addEventListener("downloadQualityChange", this._updateStateBindingMethod, false);
                        videoDetailsUiStateService.addEventListener("videoDefinitionChange", this._updateStateBindingMethod, false);
                        videoDetailsUiStateService.addEventListener("videoLanguageChange", this._updateStateBindingMethod, false)
                    }
                    try {
                        this._mediaRightChangedBindingMethod = this._mediaRightChanged.bind(this);
                        Microsoft.Entertainment.Marketplace.Marketplace.addEventListener("mediarightchanged", this._mediaRightChangedBindingMethod)
                    }
                    catch(e) {
                        var message = (e && e.message) || e;
                        var errorCode = e && e.number;
                        MS.Entertainment.ViewModels.fail("Microsoft.Entertainment.Marketplace.Marketplace.addEventListener failed with error:" + errorCode + "; message:" + message);
                        this._mediaRightChangedBindingMethod = null
                    }
                    this._eventProvider.traceMediaStateEngine_Initialized(this.media.mediaType, this.media.serviceId, this.media.libraryId);
                    this.bind("currentAppbarActions", function appbarActionsChanged() {
                        if (!this._bindingsComplete)
                            return;
                        this._eventProvider.traceMediaStateEngine_ActionsChanged(this.media.mediaType, this.media.serviceId, this.media.libraryId)
                    }.bind(this));
                    this._bindingsComplete = true;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.pinToStartScreen)) {
                        var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                        pinToStartScreenService.getTileForMediaAsync(this.media).then(function getTileForMediaAsync_complete(startScreenTile) {
                            this.media.isPinnedToStartScreen = !!startScreenTile
                        }.bind(this))
                    }
                    this.updateState();
                    if (this.options.updateImmediately)
                        this._queueFireStateChanged()
                }, unload: function unload() {
                    this._unloaded = true;
                    if (this._queueUpdateStateTimer) {
                        this._queueUpdateStateTimer.dispose();
                        this._queueUpdateStateTimer = null
                    }
                    if (this._queueFireStateChangedTimer) {
                        this._queueFireStateChangedTimer.dispose();
                        this._queueFireStateChangedTimer = null
                    }
                    if (this._mediaRightChangedBindingMethod) {
                        Microsoft.Entertainment.Marketplace.Marketplace.removeEventListener("mediarightchanged", this._mediaRightChangedBindingMethod);
                        this._mediaRightChangedBindingMethod = null
                    }
                    if (this._updateStateBindingMethod) {
                        if (this._mediaBindings) {
                            this._mediaBindings.cancel();
                            this._mediaBindings = null
                        }
                        if (this._mediaDeletedBindingMethod) {
                            this._mediaDeletedBindingMethod.cancel();
                            this._mediaDeletedBindingMethod = null
                        }
                        if (this._smartDJBindings) {
                            this._smartDJBindings.cancel();
                            this._smartDJBindings = null
                        }
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).unbind("isSignedIn", this._updateStateBindingMethod);
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).unbind("isSubscription", this._updateStateBindingMethod);
                        if (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrackOrMusicVideo(this.media))
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).unbind("primarySessionId", this._updateStateBindingMethod);
                        if (this.options.updateOnAppVisibilityChange)
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).unbind("isAppVisible", this._updateStateBindingMethod);
                        if (this.options.updateOnAppSnappedModeChange)
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).unbind("isSnapped", this._updateStateBindingMethod);
                        if (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                            var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                            var playbackSession = sessionMgr.nowPlayingSession;
                            playbackSession.unbind("currentTransportState", this._updateStateBindingMethod);
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            uiStateService.unbind("nowPlayingVisible", this._updateStateBindingMethod)
                        }
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.videoDetailsUiState)) {
                            var videoDetailsUiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.videoDetailsUiState);
                            videoDetailsUiStateService.removeEventListener("downloadQualityChange", this._updateStateBindingMethod, false);
                            videoDetailsUiStateService.removeEventListener("videoDefinitionChange", this._updateStateBindingMethod, false);
                            videoDetailsUiStateService.removeEventListener("videoLanguageChange", this._updateStateBindingMethod, false)
                        }
                        this._updateStateBindingMethod = null
                    }
                    if (this._uniqueListenerId) {
                        var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                        fileTransferService.unregisterListener(this._uniqueListenerId);
                        this._uniqueListenerId = null
                    }
                    this.currentButtons = null;
                    this.currentAppbarActions = [];
                    this._clearLocationSpecificButtons();
                    this._currentLocationSpecificButtons = null;
                    this._eventProvider.traceMediaStateEngine_Unloaded(this.media && this.media.mediaType, this.media && this.media.serviceId, this.media && this.media.libraryId)
                }, getCurrentButtonsForLocation: function getCurrentButtonsForLocation(location) {
                    if (!this._currentLocationSpecificButtons[location])
                        this._currentLocationSpecificButtons[location] = new MS.Entertainment.ObservableArray;
                    return this._currentLocationSpecificButtons[location]
                }, _setLocationSpecificButtons: function _setLocationSpecificButtons(newLocationSpecificButtons) {
                    for (var newLocationKey in newLocationSpecificButtons) {
                        var buttonsForLocation = this.getCurrentButtonsForLocation(newLocationKey);
                        var newButtonsForLocation = newLocationSpecificButtons[newLocationKey];
                        if (!newButtonsForLocation)
                            continue;
                        var itemsChanged = newButtonsForLocation.length !== buttonsForLocation.length || newButtonsForLocation.some(function checkForButtonEquality(item, newLocationKey) {
                                return item !== buttonsForLocation.item(newLocationKey)
                            });
                        if (itemsChanged)
                            buttonsForLocation.spliceArray(0, buttonsForLocation.length, newButtonsForLocation)
                    }
                    for (var existingLocationKey in this._currentLocationSpecificButtons)
                        if (!newLocationSpecificButtons || !newLocationSpecificButtons[existingLocationKey])
                            if (this._currentLocationSpecificButtons[existingLocationKey])
                                this._currentLocationSpecificButtons[existingLocationKey].clear()
                }, _clearLocationSpecificButtons: function _clearLocationSpecificButtons() {
                    for (var existingLocationKey in this._currentLocationSpecificButtons)
                        this._currentLocationSpecificButtons[existingLocationKey] = null
                }, updateMediaItemProperties: function updateMediaItemProperties(updatedMedia) {
                    MS.Entertainment.ViewModels.assert(this.media && this.media.isEqual(updatedMedia), "Cannot update the engine's media item with properties from a different media item.");
                    MS.Entertainment.Utilities.copyAugmentedProperties(updatedMedia, this.media);
                    this.updateState()
                }, updateState: function updateState() {
                    if (!this.media || !this._bindingsComplete || this._unloaded || this.suspendStateChanges)
                        return;
                    this._eventProvider.traceMediaStateEngine_UpdateState(this.media.mediaType, this.media.serviceId, this.media.libraryId);
                    var updateStatePromise = function queryMediaStateAsync_complete(state) {
                            if (this._lastUpdateStatePromise === updateStatePromise && !this._unloaded) {
                                this._defaultDownloadInfo = null;
                                this._lastUpdateStatePromise = null;
                                this._cachedState = state;
                                this._queueFireStateChanged()
                            }
                        }.bind(this);
                    this._lastUpdateStatePromise = updateStatePromise;
                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.queryMediaStateAsync(this.media, this._defaultDownloadInfo ? this._defaultDownloadInfo : (this._cachedState ? this._cachedState.download : null)).then(updateStatePromise)
                }, _queueUpdateState: function _queueUpdateState() {
                    if (!this._unloaded) {
                        if (!this._queueUpdateStateTimer) {
                            this._queueUpdateStateTimer = new MS.Entertainment.UI.Framework.BackOffTimer;
                            this._queueUpdateStateTimer.callback = this.updateState.bind(this)
                        }
                        this._queueUpdateStateTimer.execute()
                    }
                }, _fireCurrentButtonsChanged: function _fireCurrentButtonsChanged() {
                    if (this.eventProxy && this.eventProxy.dispatchEvent)
                        this.eventProxy.dispatchEvent("currentButtonsChanged", {
                            sender: this, value: this.currentButtons
                        })
                }, _queueFireStateChanged: function _queueFireStateChanged() {
                    if (this._unloaded)
                        return;
                    if (!this._queueFireStateChangedTimer) {
                        this._queueFireStateChangedTimer = new MS.Entertainment.UI.Framework.BackOffTimer;
                        this._queueFireStateChangedTimer.callback = this._fireStateChanged.bind(this)
                    }
                    this._queueFireStateChangedTimer.execute()
                }, _fireStateChanged: function _fireStateChanged() {
                    if (this._unloaded)
                        return;
                    var stateChangedPromise = WinJS.Promise.wrap();
                    if (this._onStateChanged)
                        if (this.options.invokeHandlerAsStatic)
                            stateChangedPromise = this._onStateChanged(this, this._cachedState) || stateChangedPromise;
                        else
                            stateChangedPromise = this._onStateChanged(this._cachedState) || stateChangedPromise;
                    var fireStateChangedPromise = function _onStateChanged_complete(requestButtons) {
                            if (this._unloaded)
                                return;
                            var subActionsChanged;
                            var newButtons = (requestButtons && requestButtons.smartButtons) || requestButtons;
                            var newActions = requestButtons && requestButtons.appbarActions;
                            var newLocationSpecificButtons = requestButtons && requestButtons.locationSpecificButtons;
                            if (this._lastFireStateChangedPromise === fireStateChangedPromise) {
                                if (!newButtons)
                                    this.currentButtons = [];
                                else if (newButtons.length !== this.currentButtons.length)
                                    this.currentButtons = newButtons;
                                else
                                    for (var i = 0; i < newButtons.length; i++)
                                        if (newButtons[i] !== this.currentButtons[i]) {
                                            this.currentButtons = newButtons;
                                            break
                                        }
                                subActionsChanged = !MS.Entertainment.UI.Actions.ActionArray.areSubActionsEqual(newActions, this.currentAppbarActions);
                                if (!newActions)
                                    this.currentAppbarActions = [];
                                else if (newActions.length !== this.currentAppbarActions.length || subActionsChanged)
                                    this.currentAppbarActions = newActions;
                                else
                                    for (var i = 0; i < newActions.length; i++)
                                        if (newActions[i] !== this.currentAppbarActions[i]) {
                                            this.currentAppbarActions = newActions;
                                            break
                                        }
                                this._setLocationSpecificButtons(newLocationSpecificButtons);
                                if (requestButtons && this.loading)
                                    this.loading = false
                            }
                        }.bind(this);
                    this._lastFireStateChangedPromise = fireStateChangedPromise;
                    stateChangedPromise.then(fireStateChangedPromise)
                }, _mediaRightChanged: function _mediaRightChanged(serviceMediaId) {
                    if (this._unloaded)
                        return;
                    MS.Entertainment.ViewModels.SmartBuyStateEngine.mediaContainsServiceMediaIdAsync(this.media, serviceMediaId).then(function mediaContainsServiceMediaIdAsync_complete(contained) {
                        if (contained)
                            this._queueUpdateState()
                    }.bind(this))
                }, _onFileTransferAdd: function _onFileTransferAdd(notification) {
                    if (this._unloaded)
                        return;
                    if (notification.transferType !== MS.Entertainment.UI.FileTransferType.download || !MS.Entertainment.Framework.DownloadInfo.isFileTransferTaskContainedByMedia(this.media, notification.task))
                        return;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download)
                        MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(this.media).done(function hydrateLibraryInfoAsyncComplete() {
                            this._onFileTransferEvent(notification);
                            this._queueUpdateState()
                        }.bind(this), function hydrateLibraryInfoAsyncError(error) {
                            MS.Entertainment.ViewModels.assert(error.message === "Canceled", "Failed to get library id in the onFileTransferAdd callback. Error message: " + error.message);
                            this._onFileTransferEvent(notification)
                        }.bind(this))
                }, _onFileTransferEvent: function _onFileTransferEvent(notification) {
                    if (this._unloaded)
                        return;
                    if (notification.transferType !== MS.Entertainment.UI.FileTransferType.download || !MS.Entertainment.Framework.DownloadInfo.isFileTransferTaskContainedByMedia(this.media, notification.task))
                        return;
                    if (this._cachedState && this._cachedState.download.update(notification.task))
                        if (notification.task.taskStatus !== Microsoft.Entertainment.FileTransferStatus.completed && !notification.task.isClosed)
                            this._queueFireStateChanged();
                        else
                            this._queueUpdateState()
                }
        }, {
            currentAppbarActions: null, media: null, loading: true
        }, {
            FileContainerAccess: {
                None: "None", Partial: "Partial", All: "All"
            }, getSelectionStateFromMediaItem: function getSelectionStateFromMediaItem(mediaItem) {
                    var handler = null;
                    var selectedItemStateEngine = null;
                    switch (mediaItem && mediaItem.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            handler = MS.Entertainment.ViewModels.MusicStateHandlers.onMusicGalleryPlaylistSelectionStateChanged;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            handler = MS.Entertainment.ViewModels.MusicStateHandlers.onMusicGallerySelectionStateChanged;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                            handler = MS.Entertainment.ViewModels.MusicStateHandlers.onMusicGallerySmartDJSelectionStateChanged;
                            break;
                        case undefined:
                            break;
                        default:
                            MS.Entertainment.UI.Controls.fail("Unsupported media type: " + mediaItem && mediaItem.mediaType);
                            break
                    }
                    if (handler) {
                        if (!selectedItemStateEngine)
                            selectedItemStateEngine = new MS.Entertainment.ViewModels.SmartBuyStateEngine;
                        selectedItemStateEngine.initialize(mediaItem, null, handler)
                    }
                    return selectedItemStateEngine
                }, getMediaServiceIdsInCollectionAsync: function getMediaServiceIdsInCollectionAsync(media, collectionPath) {
                    var promise;
                    var collection = MS.Entertainment.Utilities.valueFromPropertyPath(media, collectionPath);
                    if (!collection || !collection.forEachAll || !media)
                        promise = WinJS.Promise.wrap([]);
                    else if (media.knownChildServiceIdsPromise)
                        promise = media.knownChildServiceIdsPromise;
                    else {
                        var knownChildServiceIds = [];
                        promise = media.knownChildServiceIdsPromise = collection.forEachAll(function iteration(args) {
                            if (args.item.data.hasZuneId)
                                knownChildServiceIds.push(args.item.data.zuneId.toLowerCase());
                            else if (args.item.data.serviceId)
                                knownChildServiceIds.push(args.item.data.serviceId.toLowerCase())
                        }).then(function loadedIds() {
                            return knownChildServiceIds
                        }, function loadedIdsFailed() {
                            return []
                        }).then(function cleanUp(result) {
                            collection = null;
                            knownChildServiceIds = null;
                            promise = null;
                            media = null;
                            return result
                        })
                    }
                    return promise
                }, findMediaServiceIdsInCollectionAsync: function findMediaServiceIdsInCollectionAsync(media, collectionPath, serviceId) {
                    var collection = MS.Entertainment.Utilities.valueFromPropertyPath(media, collectionPath);
                    if (!collection || !collection.forEachAll || !media)
                        return WinJS.Promise.wrap(false);
                    var promise;
                    var found = false;
                    serviceId = serviceId.toLowerCase();
                    if (media.knownChildServiceIdsPromise)
                        promise = media.knownChildServiceIdsPromise.then(function searchForIndex(result) {
                            result = result || [];
                            return (result.indexOf(serviceId) >= 0)
                        });
                    else
                        promise = collection.forEachAll(function iteration(args) {
                            var currentServiceId = args.item.data.serviceId;
                            if (args.item.data.serviceId && args.item.data.serviceId.toLowerCase() === serviceId) {
                                found = true;
                                args.stop = true
                            }
                        }).then(function finishedSearch() {
                            return found
                        }, function failedSearch() {
                            return false
                        });
                    return promise
                }, mediaContainsServiceMediaIdAsync: function mediaContainsServiceMediaIdAsync(media, serviceMediaId) {
                    if (!media || !serviceMediaId || MS.Entertainment.Utilities.isEmptyGuid(serviceMediaId))
                        return WinJS.Promise.wrap(false);
                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.findMediaServiceIdsAsync(media, serviceMediaId)
                }, determineFileContainerAccess: function _determineFileContainerAccess(max, actual) {
                    if (actual === 0)
                        return MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None;
                    else if (actual < max)
                        return MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.Partial;
                    else
                        return MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.All
                }, queryMediaStateAsync: function queryMediaStateAsync(media, downloadInfo) {
                    var promises = [];
                    var state = {};
                    state.marketplace = {};
                    state.collection = {};
                    promises.push(MS.Entertainment.ViewModels.SmartBuyStateEngine.getPlayabilityAsync(media).then(function getPlayabilityAsync_complete(playability) {
                        state.collection.playability = playability;
                        state.collection.canPlayLocally = playability.local;
                        state.collection.canPlayLocallyOrStreamFromCloud = playability.local || playability.cloud;
                        state.collection.canStreamFromCloud = playability.cloud
                    }));
                    if (MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(media) && media.track)
                        promises.push(media.track.hydrate().then(function onHydrate(track) {
                            return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(track)
                        }).then(function hydrateLibraryInfo_complete(track) {
                            state.track = {inCollection: track.inCollection}
                        }));
                    if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.video || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeries || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || media.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist)
                        promises.push(MS.Entertainment.ViewModels.SmartBuyStateEngine.getMarketplaceFileAccessAsync(media).then(function getMarketplaceFileAccessAsync_complete(marketplace) {
                            state.marketplace.mediaIds = marketplace.mediaIds;
                            state.marketplace.counts = marketplace.counts;
                            state.marketplace.canDownloadState = marketplace.canDownload;
                            state.marketplace.canDownload = (marketplace.canDownload !== MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None);
                            state.marketplace.canStreamState = marketplace.canStream;
                            state.marketplace.canStream = (marketplace.canStream !== MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None);
                            state.marketplace.exclusivelyRentedState = marketplace.exclusivelyRented;
                            state.marketplace.exclusivelyRented = (marketplace.exclusivelyRented === MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.All);
                            state.marketplace.isPresale = marketplace.isPresale;
                            state.marketplace.presaleFulfillmentDate = marketplace.presaleFulfillmentDate;
                            state.marketplace.rentalExpirations = marketplace.rentalExpirations;
                            state.marketplace.entitlements = marketplace.entitlements;
                            state.marketplace.hasPurchased = marketplace.hasPurchased;
                            state.marketplace.hasPurchasedSeason = marketplace.hasPurchasedSeason;
                            state.marketplace.libraryDefinitions = marketplace.libraryDefinitions
                        }));
                    if (downloadInfo)
                        state.download = downloadInfo;
                    else if (MS.Entertainment.Framework.DownloadInfo)
                        promises.push(MS.Entertainment.Framework.DownloadInfo.createAndInitializeAsync(media).then(function createAndInitializeAsync_complete(downloadInfo) {
                            state.download = downloadInfo
                        }));
                    else
                        state.download = {items: []};
                    return WinJS.Promise.join(promises).then(function queryMediaStateAsync_join_complete() {
                            state.canPlay = (state.marketplace && state.marketplace.canStream) || state.collection.canPlayLocallyOrStreamFromCloud;
                            return WinJS.Promise.wrap(state)
                        })
                }, getMediaServiceIdsAsync: function getMediaServiceIdsAsync(media) {
                    if (!media || !media.mediaType)
                        return WinJS.Promise.wrap([]);
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            if (media.hasZuneId)
                                return WinJS.Promise.wrap([media.zuneId]);
                            else if (media.hasServiceId && media.serviceIdType === "ZuneCatalog")
                                return WinJS.Promise.wrap([media.serviceId]);
                            else
                                return WinJS.Promise.wrap([]);
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            if (media.hasZuneId)
                                return WinJS.Promise.wrap([media.zuneId]);
                            else if (media.hasServiceId)
                                return WinJS.Promise.wrap([media.serviceId]);
                            else
                                return WinJS.Promise.wrap([]);
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getArtistTrackServiceIdsInCollectionAsync(media);
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getPlaylistTrackServiceIdsInCollectionAsync(media);
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsInCollectionAsync(media, "tracks");
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            return WinJS.Promise.wrap([]);
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsInCollectionAsync(media, "episodes");
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                        case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            return WinJS.Promise.wrap([]);
                        default:
                            throw"The state engine does not support this media item type.";
                    }
                }, getArtistTrackServiceIdsInCollectionAsync: function getArtistTrackServiceIdsInCollectionAsync(mediaItem) {
                    if (!mediaItem || !mediaItem.libraryId)
                        return WinJS.Promise.wrap([]);
                    var query = new MS.Entertainment.Data.Query.libraryTracks;
                    query.artistId = mediaItem.libraryId;
                    return query.execute().then(function artistQuery_executed(q) {
                            return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsInCollectionAsync(q.result, "items")
                        }, function artistQuery_failed() {
                            return WinJS.Promise.wrap([])
                        })
                }, getPlaylistTrackServiceIdsInCollectionAsync: function getPlaylistTrackServiceIdsInCollectionAsync(mediaItem) {
                    if (!mediaItem || !MS.Entertainment.Utilities.isValidLibraryId(mediaItem.libraryId))
                        return WinJS.Promise.as([]);
                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsInCollectionAsync(mediaItem, "tracks").then(function onMediaServiceIdsRetrieved(mediaServiceIds) {
                            if (mediaServiceIds && mediaServiceIds.length > 0)
                                return mediaServiceIds;
                            else {
                                var query = new MS.Entertainment.Data.Query.libraryPlaylistMediaItems;
                                query.playlistId = mediaItem.libraryId;
                                return query.execute().then(function playlistQuery_executed(q) {
                                        return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsInCollectionAsync(q.result, "items")
                                    }, function playlistQuery_failed() {
                                        return WinJS.Promise.as([])
                                    })
                            }
                        })
                }, findMediaServiceIdsAsync: function findMediaServiceIdsAsync(media, serviceId) {
                    if (!media || !media.mediaType || !serviceId)
                        return WinJS.Promise.wrap(false);
                    var promise;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            promise = WinJS.Promise.wrap(!!media.serviceId && media.serviceId.toLowerCase() === serviceId.toLowerCase());
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            promise = MS.Entertainment.ViewModels.SmartBuyStateEngine.findMediaServiceIdsInCollectionAsync(media, "tracks", serviceId);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            promise = MS.Entertainment.ViewModels.SmartBuyStateEngine.findMediaServiceIdsInCollectionAsync(media, "episodes", serviceId);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                        case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            promise = WinJS.Promise.wrap(false);
                            break;
                        default:
                            throw"The state engine does not support this media item type.";
                    }
                    return promise
                }, _createPlayability: function _createPlayability(nativePlayabilityArray) {
                    var playability = {getItem: function getItem(media) {
                                if (!media || !this.items)
                                    return null;
                                var libraryId = media.inCollection ? media.libraryId : -1;
                                var serviceId = media.inCollection ? null : (media.hasServiceId ? media.serviceId.toLowerCase() : null);
                                if (libraryId === -1 && !serviceId)
                                    return null;
                                for (var i = 0; i < this.items.length; i++) {
                                    var item = this.items[i];
                                    if (libraryId !== -1) {
                                        if (item.libraryId === libraryId)
                                            return item
                                    }
                                    else if (serviceId)
                                        if (item.mediaId === serviceId)
                                            return item
                                }
                                return null
                            }};
                    playability.counts = {};
                    playability.counts.localOnly = 0;
                    playability.counts.localAndCloud = 0;
                    playability.counts.cloudOnly = 0;
                    playability.counts.neitherLocalNorCloud = 0;
                    playability.counts.localOrCloud = 0;
                    playability.counts.downloading = 0;
                    playability.items = [];
                    if (nativePlayabilityArray)
                        for (var i = 0; i < nativePlayabilityArray.length; i++) {
                            var item = nativePlayabilityArray[i];
                            if (item) {
                                playability.items.push({
                                    mediaType: item.mediaType, libraryId: item.libraryId, mediaId: item.mediaId, locallyPlayable: item.locallyPlayable, cloudStreamable: item.cloudStreamable, isDownloading: item.isDownloading
                                });
                                if (item.locallyPlayable)
                                    if (item.cloudStreamable)
                                        ++playability.counts.localAndCloud;
                                    else
                                        ++playability.counts.localOnly;
                                else if (item.cloudStreamable)
                                    ++playability.counts.cloudOnly;
                                else
                                    ++playability.counts.neitherLocalNorCloud;
                                if (item.isDownloading)
                                    ++playability.counts.downloading
                            }
                        }
                    playability.counts.local = playability.counts.localOnly + playability.counts.localAndCloud;
                    playability.counts.cloud = playability.counts.cloudOnly + playability.counts.localAndCloud;
                    playability.counts.localOrCloud = playability.counts.cloudOnly + playability.counts.localOnly + playability.counts.localAndCloud;
                    playability.local = (playability.counts.local > 0);
                    playability.cloud = (playability.counts.cloud > 0);
                    return playability
                }, getPlayabilityAsync: function getPlayabilityAsync(media, collectionFilter) {
                    if (!media || !media.inCollection || !media.mediaType)
                        return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null));
                    collectionFilter = collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                    var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            return mediaStore.videoProvider.getPlayabilityByLibraryIdAsync(media.libraryId).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayability) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability([nativePlayability]))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            return mediaStore.trackProvider.getPlayabilityByLibraryIdAsync(media.libraryId).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayability) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability([nativePlayability]))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            return mediaStore.albumProvider.getPlayabilityByLibraryIdAsync(media.libraryId, collectionFilter).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayabilityArray) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(nativePlayabilityArray))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            return mediaStore.playlistProvider.getPlayabilityByLibraryIdAsync(media.libraryId, collectionFilter).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayabilityArray) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(nativePlayabilityArray))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            return mediaStore.seriesProvider.getPlayabilityByLibraryIdAsync(media.libraryId).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayabilityArray) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(nativePlayabilityArray))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            return mediaStore.seriesProvider.getPlayabilityBySeasonLibraryIdAsync(media.libraryId).then(function getPlayabilityBySeasonLibraryIdAsync_complete(nativePlayabilityArray) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(nativePlayabilityArray))
                                }, function getPlayabilityBySeasonLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            return mediaStore.artistProvider.getPlayabilityByLibraryIdAsync(media.libraryId, collectionFilter).then(function getPlayabilityByLibraryIdAsync_complete(nativePlayabilityArray) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(nativePlayabilityArray))
                                }, function getPlayabilityByLibraryIdAsync_error(e) {
                                    return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null))
                                });
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            return WinJS.Promise.wrap(MS.Entertainment.ViewModels.SmartBuyStateEngine._createPlayability(null));
                        default:
                            throw"The state engine does not support this media item type.";
                    }
                }, getMarketplaceFileAccessAsync: function getMarketplaceFileAccessAsync(media) {
                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.getMediaServiceIdsAsync(media).then(function getMediaServiceIdsAsync_complete(serviceIds) {
                            if (!serviceIds || !serviceIds.length)
                                return WinJS.Promise.wrap({
                                        mediaIds: [], isPresale: false, presaleFulfillmentDate: null, entitlements: [], canDownload: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, canStream: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, exclusivelyRented: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, rentalExpirations: [], counts: {
                                                canDownload: 0, canStream: 0, exclusivelyRented: 0
                                            }
                                    });
                            return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync(serviceIds).then(function getMediaEntitlementsAsync_complete(result) {
                                    result = JSON.parse(result).result;
                                    var parsedResult = {
                                            mediaIds: serviceIds, entitlements: result.entitlements, isPresale: result.entitlements.some(function isPresale_some(entitlement) {
                                                    return entitlement.isPresale
                                                }), presaleFulfillmentDate: null, canDownload: MS.Entertainment.ViewModels.SmartBuyStateEngine.determineFileContainerAccess(serviceIds.length, result.counts.canFullyDownload), canStream: MS.Entertainment.ViewModels.SmartBuyStateEngine.determineFileContainerAccess(serviceIds.length, result.counts.canFullyStream), exclusivelyRented: MS.Entertainment.ViewModels.SmartBuyStateEngine.determineFileContainerAccess(serviceIds.length, result.counts.exclusivelyRented), rentalExpirations: [], hasPurchased: result.counts.purchased, hasPurchasedSeason: result.entitlements.some(function hasPurchasedSeason_some(entitlement) {
                                                    return entitlement.hasPurchasedSeason
                                                }), counts: {
                                                    canDownload: result.counts.canFullyDownload, canStream: result.counts.canFullyStream, exclusivelyRented: result.counts.exclusivelyRented
                                                }
                                        };
                                    parsedResult.rentalExpirations.overall = {
                                        isExpired: false, latestDate: null
                                    };
                                    var hasExpiredRental = false;
                                    var hasNonExpiredRental = false;
                                    var hasInfiniteExpiration = false;
                                    function gatherOverallRentalExpiration(rental) {
                                        rental.expiration = MSE.Data.Factory.date(rental.expiration);
                                        if (rental.serviceMediaInstanceId && !MS.Entertainment.Utilities.isEmptyGuid(rental.serviceMediaInstanceId))
                                            if (rental.isExpired)
                                                hasExpiredRental = true;
                                            else {
                                                hasNonExpiredRental = true;
                                                if (!rental.expiration) {
                                                    hasInfiniteExpiration = true;
                                                    parsedResult.rentalExpirations.overall.latestDate = null
                                                }
                                                else if (!hasInfiniteExpiration && rental.expiration > parsedResult.rentalExpirations.overall.latestDate)
                                                    parsedResult.rentalExpirations.overall.latestDate = rental.expiration
                                            }
                                    }
                                    var edsResolutionFormat = MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat;
                                    parsedResult.libraryDefinitions = {};
                                    parsedResult.libraryDefinitions[edsResolutionFormat.xd] = false;
                                    parsedResult.libraryDefinitions[edsResolutionFormat.sd] = false;
                                    parsedResult.libraryDefinitions[edsResolutionFormat.hd] = false;
                                    parsedResult.libraryDefinitions[edsResolutionFormat.hd1080p] = false;
                                    function gatherAvailableVideoQuality(mediaEntitlement) {
                                        if (mediaEntitlement.serviceMediaInstanceId && !MS.Entertainment.Utilities.isEmptyGuid(mediaEntitlement.serviceMediaInstanceId))
                                            if (!mediaEntitlement.isExpired && mediaEntitlement.isAvailable && mediaEntitlement.format)
                                                parsedResult.libraryDefinitions[mediaEntitlement.format] = true
                                    }
                                    function gatherFulfillmentDate(entitlement) {
                                        if (entitlement.isPresale)
                                            if (entitlement.presaleFulfillmentDate && (!parsedResult.presaleFulfillmentDate || entitlement.presaleFulfillmentDate > parsedResult.presaleFulfillmentDate))
                                                parsedResult.presaleFulfillmentDate = MS.Entertainment.Data.Factory.date(entitlement.presaleFulfillmentDate)
                                    }
                                    if (MS.Entertainment.Utilities.isVideoApp) {
                                        for (var i = 0; i < serviceIds.length; i++) {
                                            gatherOverallRentalExpiration(result.entitlements[i].rent.download);
                                            gatherOverallRentalExpiration(result.entitlements[i].rent.stream);
                                            gatherAvailableVideoQuality(result.entitlements[i].purchase.download);
                                            gatherAvailableVideoQuality(result.entitlements[i].purchase.stream);
                                            gatherAvailableVideoQuality(result.entitlements[i].rent.download);
                                            gatherAvailableVideoQuality(result.entitlements[i].rent.stream);
                                            gatherFulfillmentDate(result.entitlements[i]);
                                            parsedResult.rentalExpirations.push({
                                                download: {
                                                    date: result.entitlements[i].rent.download.expiration, isExpired: !!result.entitlements[i].rent.download.isExpired
                                                }, stream: {
                                                        date: result.entitlements[i].rent.stream.expiration, isExpired: !!result.entitlements[i].rent.stream.isExpired
                                                    }
                                            })
                                        }
                                        parsedResult.rentalExpirations.overall.isExpired = hasExpiredRental && !hasNonExpiredRental
                                    }
                                    return WinJS.Promise.wrap(parsedResult)
                                }, function getMediaEntitlements_error(e) {
                                    return WinJS.Promise.wrap({
                                            mediaIds: serviceIds, entitlements: [], isPresale: false, presaleFulfillmentDate: null, canDownload: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, canStream: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, exclusivelyRented: MS.Entertainment.ViewModels.SmartBuyStateEngine.FileContainerAccess.None, rentalExpirations: [], counts: {
                                                    canDownload: 0, canStream: 0, exclusivelyRented: 0
                                                }
                                        })
                                })
                        })
                }
        })})
})()
})();
/* >>>>>>/viewmodels/purchaseflow/smartbuybuttons.js:10910 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
(function() {
    "use strict";
    var _createBasicButton = function _createBasicButton(actionId, titleId, parameter, iconInfo, voiceInfo) {
            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
            var button = actionService.getAction(actionId);
            if (titleId)
                button.title = String.load(titleId);
            if (parameter) {
                button.parameter = parameter;
                button.parameter.actionType = MS.Entertainment.UI.Actions.ActionWrapperType.button
            }
            if (iconInfo)
                button.iconInfo = iconInfo;
            if (button.parameter) {
                if (button.parameter.automationId)
                    button.automationId = button.parameter.automationId;
                if (button.parameter.id)
                    button.id = button.parameter.id
            }
            if (voiceInfo && button.isVoiceEnabled) {
                if (voiceInfo.guiStringId)
                    button.title = String.load(voiceInfo.guiStringId);
                button.voicePhraseStringId = voiceInfo.voicePhraseStringId;
                button.voicePhoneticPhraseStringId = voiceInfo.voicePhoneticPhraseStringId;
                if (voiceInfo.voiceConfidenceStringId)
                    button.voiceConfidenceStringId = voiceInfo.voiceConfidenceStringId;
                if (typeof(voiceInfo.voiceConfidence) === "number")
                    button.voiceConfidence = voiceInfo.voiceConfidence
            }
            return button
        };
    var _createButton = function createButton(actionId, titleId, parameter, iconInfo, voiceInfo) {
            var button = _createBasicButton(actionId, titleId, parameter, iconInfo, voiceInfo);
            if (button.parameter && button.parameter.dismissOverlayOnExecute) {
                var oldExecuted = button.executed.bind(button);
                button.executed = WinJS.Utilities.markSupportedForProcessing(function executed(actionData) {
                    var domEvent = document.createEvent("Event");
                    domEvent.initEvent("dismissoverlay", true, true);
                    var popover = document.querySelector(".overlayAnchor .popOver");
                    if (popover)
                        popover.dispatchEvent(domEvent);
                    oldExecuted(actionData)
                })
            }
            var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
            if (mediaContext.collectionFilter) {
                var previousExecuted = button.executed.bind(button);
                button.executed = WinJS.Utilities.markSupportedForProcessing(function executed(actionData, referenceElement) {
                    var appToolbarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                    actionData.collectionFilter = appToolbarService.currentMediaContext.collectionFilter;
                    previousExecuted(actionData, referenceElement)
                })
            }
            if (button.parameter && button.parameter.preRollVideoAdIfNeeded) {
                var lastExecuted = button.executed.bind(button);
                button.executed = WinJS.Utilities.markSupportedForProcessing(function executed(actionData, referenceElement) {
                    var collectionFilter = mediaContext.collectionFilter;
                    if (referenceElement)
                        MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: referenceElement}, {
                            uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                        });
                    if (collectionFilter === Microsoft.Entertainment.Platform.MediaAvailability.availableOffline || !MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.adService))
                        lastExecuted(actionData);
                    else {
                        var containingMedia = mediaContext.options && mediaContext.options.containingMedia;
                        var invokedMedia = (containingMedia && actionData.mediaItem === containingMedia.playbackItemSource) ? mediaContext.mediaItem : actionData.mediaItem;
                        var adService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.adService);
                        adService.isStreamingBlocked(invokedMedia).done(function isStreamingBlocked_complete(signInNeeded) {
                            var promise;
                            var dialogDismissed;
                            promise = new WinJS.Promise(function(c, e, p) {
                                dialogDismissed = c
                            }).then(function dialogDismissed() {
                                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                var collectionFilter = mediaContext && mediaContext.collectionFilter;
                                return (!signInNeeded || signIn.isSignedIn) ? adService.playVideoAdIfRequired(invokedMedia, collectionFilter) : false
                            }).done(function playVideoAdIfRequired_complete(adPlayedIfNeeded) {
                                if (adPlayedIfNeeded)
                                    lastExecuted(actionData)
                            }, function playVideoAdIfRequired_failed(error) {
                                MS.Entertainment.ViewModels.fail("playVideoAdIfRequired_failed: " + (error && error.message));
                                lastExecuted(actionData)
                            });
                            if (signInNeeded) {
                                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                if (!featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlayAnonymous))
                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed);
                                else if (configurationManager.service.lastSignedInUserXuid)
                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_EXISTING_USER_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForExistingUser, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed);
                                else
                                    MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_NEW_USER_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForNewUser, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissed)
                            }
                            else
                                dialogDismissed()
                        }, function isStreamingBlocked_failed(error) {
                            MS.Entertainment.ViewModels.fail("isStreamingBlocked_failed: " + (error && error.message))
                        })
                    }
                })
            }
            return button
        };
    var _isFreeUser = function _isFreeUser() {
            var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
            var isSubscription = configurationManager.service.lastSignedInUserSubscription;
            return !isSubscription
        };
    WinJS.Namespace.define("MS.Entertainment.ViewModels.Actions", {GenericPlayButton: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function genericPlayButtonConstructor() {
            this.base();
            this.id = MS.Entertainment.UI.Actions.ActionIdentifiers.genericPlay;
            this.title = String.load(String.id.IDS_PLAY_BUTTON);
            this.automationId = MS.Entertainment.UI.AutomationIds.genericPlay;
            this.parameter = {
                automationId: this.automationId, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas
            };
            this.iconInfo = {
                icon: MS.Entertainment.UI.Icon.play, isToggleButton: false, isChecked: false, isDisabled: false
            }
        }, {
            _button: null, _executedSignal: null, _executedParam: null, executed: function executed(param) {
                    if (this._button)
                        return this._button.executed(param);
                    else if (!this._executedSignal) {
                        this._executedSignal = new MS.Entertainment.UI.Framework.Signal;
                        this._executedParam = param
                    }
                    return this._executedSignal.promise
                }, canExecute: function canExecute(param) {
                    return this._button ? this._button.canExecute(param) : true
                }, wrap: function wrap(button) {
                    MS.Entertainment.ViewModels.assert(button, "Button param expected");
                    this._button = button;
                    this.id = button.id;
                    this.title = button.title;
                    this.parameter = button.parameter;
                    this.iconInfo = button.iconInfo;
                    this.automationId = button.automationId;
                    if (button.parameter) {
                        if (button.parameter.automationId)
                            this.automationId = button.parameter.automationId;
                        if (button.parameter.id)
                            this.id = button.parameter.id
                    }
                    if (this._executedSignal) {
                        var executedSignal = this._executedSignal;
                        var executedParam = this._executedParam;
                        this._executedSignal = null;
                        this._executedParam = null;
                        WinJS.Promise.as(this.execute(executedParam)).done(function onExecuteComplete() {
                            executedSignal.complete()
                        }, function onExecuteError(error) {
                            executedSignal.error(error)
                        })
                    }
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {SmartBuyButtons: {
            createGenericPlayButton: function createGenericPlayButton() {
                return new MS.Entertainment.ViewModels.Actions.GenericPlayButton
            }, createButtonPlayDisabled: function createButtonPlayDisabled(executeLocation) {
                    var playStringId = MS.Entertainment.Utilities.isMusicApp ? String.id.IDS_PLAY_BUTTON : String.id.IDS_DETAILS_PLAY_NOW_LABEL;
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, playStringId, {
                            automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayDisabled, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {
                            icon: MS.Entertainment.UI.Icon.play, isToggleButton: true, isChecked: false, isDisabled: true
                        })
                }, createButtonDeleteMedia: function createButtonDeleteMedia(media, executeLocation, deleteLocalFilesOnly) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, String.id.IDS_DELETE_LABEL, {
                            mediaItem: media, executeLocation: executeLocation, deleteLocalFilesOnly: deleteLocalFilesOnly, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDelete, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.delete}, {
                            guiStringId: String.id.IDS_DELETE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_DELETE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_DELETE_BUTTON_VUI_PRON, voiceConfidence: MS.Entertainment.Utilities.isApp2 ? MS.Entertainment.UI.App2.VoiceStatics.criticalActionConfidence : 0.0
                        })
                }, createButtonDeleteLocally: function createButtonDeleteLocally(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, String.id.IDS_VIDEO_LX_DELETE_FROM_PC, {
                            mediaItem: media, executeLocation: executeLocation, deleteLocalFilesOnly: true, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDelete, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.delete})
                }, createButtonDeleteFromPcAndCollection: function createButtonDeleteFromPcAndCollection(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, String.id.IDS_VIDEO_LX_DELETE_FROM_PC_AND_COLLECTION, {
                            mediaItem: media, executeLocation: executeLocation, deleteLocalFilesOnly: false, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDelete, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.delete})
                }, createButtonDeleteFromCollection: function createButtonDeleteFromCollection(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, String.id.IDS_VIDEO_LX_DELETE_FROM_COLLECTION, {
                            mediaItem: media, executeLocation: executeLocation, deleteLocalFilesOnly: false, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDelete, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.delete})
                }, createButtonDeleteSubActions: function createButtonDeleteSubActions(media, executeLocation, deleteLocalFilesOnly) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.more, String.id.IDS_DELETE_LABEL, {
                            mediaItem: media, executeLocation: executeLocation, deleteLocalFilesOnly: deleteLocalFilesOnly, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDelete, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.delete})
                }, createButtonTryAgain: function createButtonTryAgain(media, executeLocation, useVerboseDownloadText) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadAgain, useVerboseDownloadText ? String.id.IDS_MUSIC_DETAILS_RETRY_DOWNLOAD_ACTION : MS.Entertainment.Utilities.getTryAgainDynamicText(), {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonTryAgain
                        }, {icon: WinJS.UI.AppBarIcon.download});
                    return button
                }, createButtonPlayOnXbox: function createButtonPlayOnXbox(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playOnXbox, String.id.IDS_DETAILS_PLAY_ON_XBOX_LABEL, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayOnXbox, dismissOverlayOnExecute: true
                        }, {
                            icon: MS.Entertainment.UI.Icon.sendToXbox, adornerMode: MS.Entertainment.UI.Controls.IconButtonMode.Custom, adornerRing: MS.Entertainment.UI.Icon.sendToXboxAdorner, className: "enablePressedState"
                        })
                }, smartBuyButtonTemplateSelector: WinJS.Utilities.markSupportedForProcessing(function smartBuyButtonTemplateSelector(item) {
                    var result;
                    function loadItemTemplate(itemTemplate) {
                        return MS.Entertainment.UI.Framework.loadTemplate(itemTemplate, null, true).then(function(templateControl) {
                                return templateControl
                            })
                    }
                    if (item.parameter && item.parameter.itemTemplate)
                        return loadItemTemplate(item.parameter.itemTemplate);
                    else
                        return loadItemTemplate(this._itemTemplate)
                }), createButtonDownload: function createButtonDownload(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.download, MS.Entertainment.Utilities.getDownloadDynamicText(), {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownload
                        }, {icon: WinJS.UI.AppBarIcon.download});
                    return button
                }, createButtonDownloadSeason: function createButtonDownloadSeason(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadSeason, MS.Entertainment.Utilities.getDownloadDynamicText(), {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownloadSeason
                        }, {icon: WinJS.UI.AppBarIcon.download});
                    return button
                }, createButtonPinToStartScreen: function createButtonPinToStartScreen(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.pinToStartScreen, String.id.IDS_PIN_TO_START_SCREEN_BUTTON, {
                            mediaItem: media, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPinToStartScreen, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: WinJS.UI.AppBarIcon.pin});
                    return button
                }, createButtonUnpinFromStartScreen: function createButtonUnpinFromStartScreen(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.unpinFromStartScreen, String.id.IDS_UNPIN_FROM_START_SCREEN_BUTTON, {
                            mediaItem: media, automationId: MS.Entertainment.UI.AutomationIds.smartButtonUnpinFromStartScreen, executeLocation: executeLocation, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: WinJS.UI.AppBarIcon.unpin});
                    return button
                }, _createButtonPinToDashboardInternal: function _createButtonPinToDashboardInternal(media, executeLocation, strings, blockIfRegionMismatch) {
                    var pinnedItemsList = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinnedList);
                    var hasPin = pinnedItemsList.hasPin(media);
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.pinMediaItem, hasPin ? strings.unpinButtonGuiStringId : strings.pinButtonGuiStringId, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPinToDashboard, strings: strings, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, null, {
                            guiStringId: hasPin ? strings.unpinButtonGuiStringId : strings.pinButtonGuiStringId, voicePhraseStringId: hasPin ? strings.unpinButtonVoicePhraseStringId : strings.pinButtonVoicePhraseStringId, voicePhoneticPhraseStringId: hasPin ? strings.unpinButtonVoicePhoneticPhraseStringId : strings.pinButtonVoicePhoneticPhraseStringId, voiceConfidenceStringId: hasPin ? strings.unpinButtonVoiceConfidenceStringId : strings.pinButtonVoiceConfidenceStringId
                        });
                    button.parameter.button = button;
                    button.parameter.blockIfRegionMismatch = blockIfRegionMismatch;
                    return button
                }, createButtonPlayMedia: function createButtonPlayMedia(media, executeLocation, playlist) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, String.id.IDS_PLAY_BUTTON, {
                            mediaItem: media, playlist: playlist, showAppBar: true, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlay
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_PLAY_MUSIC_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_PLAY_MUSIC_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_PLAY_MUSIC_BUTTON_VUI_PRON
                        })
                }, createButtonPlaylistPlay: function createButtonPlaylistPlay(media, executeLocation) {
                    return this.createButtonPlayMedia(media, executeLocation, media)
                }, createButtonMatchAlbumInfo: function createButtonMatchAlbumInfo(media, executeLocation) {
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    var isCloudV2Enabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.cloudCollectionV2Enabled);
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.findAlbumInfo, isCloudV2Enabled ? String.id.IDS_FIND_ALBUM_INFO_COMMAND : String.id.IDS_MATCH_ALBUM_INFO_COMMAND, {
                            mediaItem: media, automationId: MS.Entertainment.UI.AutomationIds.smartButtonFindAlbumInfo, executeLocation: executeLocation
                        }, {icon: MS.Entertainment.UI.Icon.search});
                    return button
                }, createButtonEditMetadata: function createButtonEditMetadata(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.editMetadata, null, {
                            mediaItem: media, executeLocation: executeLocation
                        }, null);
                    return button
                }, createButtonTrackPlay: function createButtonTrackPlay(media, track, index, executeLocation, dontUseTrackListForPlayback) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, String.id.IDS_PLAY_BUTTON, {
                            mediaItem: media || track, track: track, offset: index, dontUseTrackListForPlayback: dontUseTrackListForPlayback, playlist: track && MS.Entertainment.Utilities.isValidLibraryId(track.playlistId) ? track.playlistId : null, showAppBar: true, preRollVideoAdIfNeeded: true, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayTrack
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_PLAY_MUSIC_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_PLAY_MUSIC_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_PLAY_MUSIC_BUTTON_VUI_PRON
                        })
                }, createButtonPlayNowPlayingTrack: function createButtonPlayNowPlayingTrack(media, track, index, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, String.id.IDS_PLAY_BUTTON, {
                            mediaItem: media || track, track: track, offset: index, showAppBar: true, preRollVideoAdIfNeeded: false, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayNowPlayingTrack
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_PLAY_MUSIC_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_PLAY_MUSIC_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_PLAY_MUSIC_BUTTON_VUI_PRON
                        })
                }, createButtonRemotePlayDisabled: function createButtonRemotePlayDisabled(executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, String.id.IDS_MUSIC_PLAY_TO_DISABLED_TEXT, {
                            executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayDisabled
                        }, {
                            icon: MS.Entertainment.UI.Icon.play, isToggleButton: true, isChecked: false, isDisabled: true
                        })
                }, createButtonMore: function createButtonMore(executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.more, String.id.IDS_DETAILS_MORE_ACTION, {
                            executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonOverflowAction
                        }, {icon: MS.Entertainment.UI.Icon.moreActions})
                }, createButtonAddTo: function createButtonAddTo(media, executeLocation, automationId) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.addTo, this._getAddToString(media), {
                            mediaItem: media, executeLocation: executeLocation, automationId: automationId, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: WinJS.UI.AppBarIcon.add}, this._getAddToVoiceStrings(media))
                }, createButtonAddToDisabled: function createButtonAddToDisabled(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, this._getAddToString(media), {
                            automationId: MS.Entertainment.UI.AutomationIds.smartButtonAddToDisabled, executeLocation: executeLocation
                        }, {
                            icon: WinJS.UI.AppBarIcon.add, isToggleButton: true, isChecked: false, isDisabled: true
                        })
                }, createButtonArtistTopSongsAddTo: function createButtonArtistTopSongsAddTo(media, executeLocation, automationId) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.addTo, this._getAddToString(media), {
                            mediaItem: media, executeLocation: executeLocation, automationId: automationId, shouldUseTopSongsForArtistAddTo: true, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: WinJS.UI.AppBarIcon.add}, this._getAddToVoiceStrings(media))
                }, _getAddToString: function _getAddToString(media) {
                    if (MS.Entertainment.Utilities.isMusicApp1)
                        return String.id.IDS_MUSIC_ADD_TO_LIST_BUTTON;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            return String.id.IDS_MUSIC2_ADD_ALBUM_TO_LIST_BUTTON;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            return String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            return String.id.IDS_MUSIC2_ADD_PLAYLIST_TO_LIST_BUTTON;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            return String.id.IDS_MUSIC2_ADD_ARTIST_TOP_SONGS_TO_LIST_BUTTON;
                        default:
                            return String.id.IDS_MUSIC_ADD_TO_LIST_BUTTON
                    }
                }, _getAddToVoiceStrings: function _getAddToVoiceStrings(media) {
                    var voiceGuiDisplayStringId;
                    var voicePhraseStringId;
                    var voicePhoneticPhraseStringId;
                    if (MS.Entertainment.Utilities.isMusicApp1)
                        return null;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            voiceGuiDisplayStringId = String.id.IDS_MUSIC2_ADD_ALBUM_TO_LIST_BUTTON_VUI_GUI;
                            voicePhraseStringId = String.id.IDS_MUSIC2_ADD_ALBUM_TO_LIST_BUTTON_VUI_ALM;
                            voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_ADD_ALBUM_TO_LIST_BUTTON_VUI_PRON;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            voiceGuiDisplayStringId = String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON_VUI_GUI;
                            voicePhraseStringId = String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON_VUI_ALM;
                            voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_ADD_SONG_TO_LIST_BUTTON_VUI_PRON;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            voiceGuiDisplayStringId = String.id.IDS_MUSIC2_ADD_SONGS_TO_LIST_BUTTON_VUI_GUI;
                            voicePhraseStringId = String.id.IDS_MUSIC2_ADD_SONGS_TO_LIST_BUTTON_VUI_ALM;
                            voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_ADD_SONGS_TO_LIST_BUTTON_VUI_PRON;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            voiceGuiDisplayStringId = String.id.IDS_MUSIC2_ADD_ARTIST_TOP_SONGS_TO_LIST_BUTTON_VUI_GUI;
                            voicePhraseStringId = String.id.IDS_MUSIC2_ADD_ARTIST_TOP_SONGS_TO_LIST_BUTTON_VUI_ALM;
                            voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_ADD_ARTIST_TOP_SONGS_TO_LIST_BUTTON_VUI_PRON;
                            break;
                        default:
                            voiceGuiDisplayStringId = String.id.IDS_MUSIC_ADD_TO_LIST_BUTTON_VUI_GUI;
                            voicePhraseStringId = String.id.IDS_MUSIC_ADD_TO_LIST_BUTTON_VUI_ALM;
                            voicePhoneticPhraseStringId = String.id.IDS_MUSIC_ADD_TO_LIST_BUTTON_VUI_PRON;
                            break
                    }
                    return {
                            guiStringId: voiceGuiDisplayStringId, voicePhraseStringId: voicePhraseStringId, voicePhoneticPhraseStringId: voicePhoneticPhraseStringId
                        }
                }, createButtonRemoveFromNowPlaying: function createButtonRemoveFromNowPlaying(container, key, offset, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.removeFromPlaybackSession, String.id.IDS_NOW_PLAYING_REMOVE_TRACK_ACTION, {
                            mediaItem: container, key: key, offset: offset, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonRemoveFromNowPlaying
                        }, {icon: WinJS.UI.AppBarIcon.remove})
                }, createButtonContentNotAvailable: function createButtonContentNotAvailable(executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, String.id.IDS_MUSIC_CONTENT_NOT_AVAILABLE_BUTTON, {
                            executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonContentNotAvailable, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.play})
                }, createButtonPlaylistItemInformation: function createButtonPlaylistItemInformation() {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.showPlaylistItemInformation, String.id.IDS_PLAYLIST_ITEM_BUTTON_NOT_AVAILABLE, {automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlaylistItemInformation}, {icon: MS.Entertainment.UI.Icon.info})
                }, createButtonAddMarketplaceArtistToNowPlaying: function createButtonAddMarketplaceArtistToNowPlaying(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.addArtistToNowPlaying, String.id.IDS_DETAILS_ADD_TO_NOW_PLAYING, {
                            mediaItem: (media && media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track) ? media.artist : media, playCollectionItemsOnly: false, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonAddMarketplaceArtistToNowPlaying, subTitle: media ? media.artistName : String.empty
                        }, {icon: MS.Entertainment.UI.Icon.addToNowPlaying})
                }, createButtonPlayArtistSmartDJ: function createButtonPlayArtistSmartDJ(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playSmartDJ, String.id.IDS_DETAILS_PLAY_SMART_DJ_MIX_NOW_LABEL, {
                            mediaItem: media, showImmersive: false, showAppBar: true, playCollectionItemsOnly: false, executeLocation: executeLocation, preRollVideoAdIfNeeded: false, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayArtistSmartDj, subTitle: media ? media.artistName : String.empty, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {
                            icon: MS.Entertainment.UI.Icon.smartDj, iconPressed: MS.Entertainment.UI.Icon.smartDjPressed, hideDefaultRing: true, className: "smartDj"
                        }, {
                            guiStringId: String.id.IDS_DETAILS_PLAY_RADIO_MIX_NOW_LABEL_VUI_GUI, voicePhraseStringId: String.id.IDS_DETAILS_PLAY_RADIO_MIX_NOW_LABEL_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_DETAILS_PLAY_RADIO_MIX_NOW_LABEL_VUI_PRON
                        });
                    return button
                }, createButtonPlayArtistSmartDJDisabled: function createButtonPlayArtistSmartDJDisabled(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, String.id.IDS_DETAILS_PLAY_SMART_DJ_MIX_NOW_LABEL, {
                            mediaItem: media, showImmersive: false, showAppBar: true, playCollectionItemsOnly: false, executeLocation: executeLocation, preRollVideoAdIfNeeded: false, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayArtistSmartDj, subTitle: media ? media.artistName : String.empty, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {
                            icon: MS.Entertainment.UI.Icon.smartDj, iconPressed: MS.Entertainment.UI.Icon.smartDjPressed, hideDefaultRing: true, className: "smartDj"
                        }, {
                            guiStringId: String.id.IDS_DETAILS_PLAY_RADIO_MIX_NOW_LABEL_VUI_GUI, voicePhraseStringId: String.id.IDS_DETAILS_PLAY_RADIO_MIX_NOW_LABEL_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_DETAILS_PLAY_RADIO_MIX_NOW_LABEL_VUI_PRON
                        });
                    return button
                }, createMusicButtonPinToDashboard: function createMusicButtonPinToDashboard(media, executeLocation) {
                    if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.pinnedList))
                        return null;
                    var strings = {
                            pinningTitleStringId: String.id.IDS_MUSIC2_PIN_BUTTON_PINNING, unpinningTitleStringId: String.id.IDS_MUSIC2_PIN_BUTTON_UNPINNING, pinButtonGuiStringId: String.id.IDS_MUSIC2_PIN_BUTTON_PIN_VUI_GUI, pinButtonVoicePhraseStringId: String.id.IDS_MUSIC2_PIN_BUTTON_PIN_VUI_ALM, pinButtonVoicePhoneticPhraseStringId: String.id.IDS_MUSIC2_PIN_BUTTON_PIN_VUI_PRON, pinButtonVoiceConfidenceStringId: String.id.IDS_MUSIC2_PIN_BUTTON_PIN_VUI_CONF, unpinButtonGuiStringId: String.id.IDS_MUSIC2_PIN_BUTTON_UNPIN_VUI_GUI, unpinButtonVoicePhraseStringId: String.id.IDS_MUSIC2_PIN_BUTTON_UNPIN_VUI_ALM, unpinButtonVoicePhoneticPhraseStringId: String.id.IDS_MUSIC2_PIN_BUTTON_UNPIN_VUI_PRON, unpinButtonVoiceConfidenceStringId: String.id.IDS_MUSIC2_PIN_BUTTON_UNPIN_VUI_CONF, regionMismatchHeaderStringId: String.id.IDS_MUSIC2_REGION_MISMATCH_ACTION_UNAVAILABLE_HEADER, regionMismatchDescriptionStringId: String.id.IDS_MUSIC2_REGION_MISMATCH_ACTION_UNAVAILABLE_BODY
                        };
                    return MS.Entertainment.ViewModels.SmartBuyButtons._createButtonPinToDashboardInternal(media, executeLocation, strings, true)
                }, createButtonAddToMyMusic: function createButtonAddToMyMusic(media, containerItem, executeLocation, stringId, automationId) {
                    var subTitle;
                    if (containerItem)
                        subTitle = containerItem.name;
                    else
                        subTitle = media ? media.name : String.empty;
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionAddToMyMusic, stringId, {
                            mediaItem: media, containerItem: containerItem, executeLocation: executeLocation, automationId: automationId, subTitle: subTitle
                        }, {icon: MS.Entertainment.UI.Icon.addToCollection})
                }, createButtonShuffleAllMusic: function createButtonShuffleAllMusic(executeLocation) {
                    return _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.shuffleAllMusic, String.id.IDS_MUSIC_ENGAGE_SHUFFLE_MUSIC_ACTION, {
                            engageTitle: String.id.IDS_MUSIC_ENGAGE_SHUFFLE_MUSIC_ACTION, subTitle: String.load(String.id.IDS_MUSIC_ENGAGE_SHUFFLE_MUSIC_DESC), executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonShuffleAll
                        }, {
                            icon: MS.Entertainment.UI.Icon.shuffleOn, className: "icon-shuffle"
                        })
                }, createButtonPlayAnyArtist: function createButtonPlayAnyArtist(executeLocation) {
                    var showFreeStrings = _isFreeUser();
                    return _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.selectArtist, showFreeStrings ? String.id.IDS_MUSIC_ENGAGE_PLAY_ARTIST_FREE_TITLE : String.id.IDS_MUSIC_ENGAGE_PLAY_ARTIST_ACTION, {
                            engageTitle: showFreeStrings ? String.id.IDS_MUSIC_ENGAGE_PLAY_ARTIST_ACTION_FREE : String.id.IDS_MUSIC_ENGAGE_PLAY_ARTIST_ACTION, subTitle: showFreeStrings ? String.load(String.id.IDS_MUSIC_ENGAGE_PLAY_ARTIST_FREE_DESC) : String.load(String.id.IDS_MUSIC_ENGAGE_PLAY_ARTIST_DESC), executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayAnyArtist, isSmartDJ: false
                        }, {
                            icon: MS.Entertainment.UI.Icon.play, className: "icon-play"
                        })
                }, createButtonNewSmartDJ: function createButtonNewSmartDJ(executeLocation) {
                    var showFreeStrings = _isFreeUser();
                    return _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.selectArtist, showFreeStrings ? String.id.IDS_MUSIC_ENGAGE_NEW_SMARTDJ_FREE_TITLE : String.id.IDS_MUSIC_ENGAGE_NEW_SMARTDJ_ACTION, {
                            engageTitle: String.id.IDS_MUSIC_ENGAGE_NEW_SMARTDJ_ACTION, subTitle: showFreeStrings ? String.load(String.id.IDS_MUSIC_ENGAGE_NEW_SMARTDJ_FREE_DESC) : String.load(String.id.IDS_MUSIC_ENGAGE_NEW_SMARTDJ_DESC), executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonNewSmartDj, isSmartDJ: true
                        }, {
                            icon: (executeLocation == MS.Entertainment.UI.Actions.ExecutionLocation.opportunity) ? MS.Entertainment.UI.Icon.smartDjNoRing : MS.Entertainment.UI.Icon.smartDj, iconPressed: (executeLocation === MS.Entertainment.UI.Actions.ExecutionLocation.opportunity) ? MS.Entertainment.UI.Icon.smartDjNoRing : MS.Entertainment.UI.Icon.smartDjPressed, hideDefaultRing: true, className: "icon-smartDJ"
                        })
                }, createButtonPlayPlaylist: function createButtonPlayPlaylist(executeLocation) {
                    var showFreeStrings = false;
                    if (_isFreeUser()) {
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        var freeStreamEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                        showFreeStrings = freeStreamEnabled
                    }
                    return _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playPlaylist, showFreeStrings ? String.id.IDS_MUSIC_ENGAGE_PLAY_PLAYLIST_FREE_TITLE : String.id.IDS_MUSIC_ENGAGE_PLAY_PLAYLIST_ACTION, {
                            engageTitle: String.id.IDS_MUSIC_ENGAGE_PLAY_PLAYLIST_ACTION, subTitle: showFreeStrings ? String.load(String.id.IDS_MUSIC_ENGAGE_PLAY_PLAYLIST_FREE_DESC) : String.load(String.id.IDS_MUSIC_ENGAGE_PLAY_PLAYLIST_DESC), executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayPlaylist
                        }, {
                            icon: MS.Entertainment.UI.Icon.playlist, className: "icon-playlist"
                        })
                }, createButtonPlayAnyArtistApp2: function createButtonPlayAnyArtist(executeLocation) {
                    return _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.searchArtist, String.id.IDS_MUSIC_ENGAGE_PLAY_ARTIST_ACTION, {
                            subTitle: String.load(String.id.IDS_MUSIC_ENGAGE_PLAY_ARTIST_DESC), executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayAnyArtist, galleryClass: "playActionGallery"
                        }, {
                            icon: MS.Entertainment.UI.Icon.play, className: "icon-play"
                        })
                }, createButtonNewSmartDJApp2: function createButtonNewSmartDJ(executeLocation) {
                    return _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.searchArtist, String.id.IDS_MUSIC_ENGAGE_NEW_SMARTDJ_ACTION, {
                            subTitle: String.load(String.id.IDS_MUSIC_ENGAGE_NEW_SMARTDJ_DESC), executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonNewSmartDj, hasSmartDJ: true, galleryClass: "smartDjActionGallery"
                        }, {
                            icon: (executeLocation == "opportunity") ? MS.Entertainment.UI.Icon.smartDjNoRing : MS.Entertainment.UI.Icon.smartDj, iconPressed: MS.Entertainment.UI.Icon.smartDjPressed, hideDefaultRing: true, className: "icon-smartDJ"
                        })
                }, createButtonPlayPlaylistApp2: function createButtonPlayPlaylistApp2(executeLocation) {
                    return _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.selectPlaylist, String.id.IDS_MUSIC_ENGAGE_PLAY_PLAYLIST_ACTION, {
                            subTitle: String.load(String.id.IDS_MUSIC_ENGAGE_PLAY_PLAYLIST_DESC), executeLocation: executeLocation, actionId: MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayPlaylist, galleryClass: "playActionGallery"
                        }, {
                            icon: MS.Entertainment.UI.Icon.playlist, className: "icon-playlist"
                        })
                }, createButtonWelcomeApp2: function createButtonWelcomeApp2() {
                    var button = _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, String.id.IDS_MUSIC2_WELCOME_TILE_TITLE_NOTAG, {subTitle: String.load(String.id.IDS_MUSIC2_WELCOME_TILE_PRIMARY_LOADING)}, {className: String.empty});
                    button.canExecute = function canExecute() {
                        return true
                    };
                    button.isEnabled = true;
                    return button
                }, createButtonBrowseAllMusic: function createButtonBrowseAllMusic(executeLocation) {
                    return _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.navigate, String.id.IDS_COLLECTION_MUSIC_EMPTY_LINK_PREMIUM, {
                            engageTitle: String.id.IDS_COLLECTION_MUSIC_EMPTY_LINK_PREMIUM, page: MS.Entertainment.UI.Monikers.musicMarketplace, hub: MS.Entertainment.UI.Monikers.musicMarketplaceFeatured, subTitle: String.load(String.id.IDS_MUSIC_COLLECTION_EMPTY_DESC), executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBrowseAllMusic
                        }, {
                            icon: MS.Entertainment.UI.Icon.store, className: "icon-shop"
                        })
                }, createButtonGetFreeMusicPassTrial: function createButtonGetFreeMusicPassTrial(executeLocation) {
                    return _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn, String.id.IDS_MUSIC_ENGAGE_PREMIUM_TRIAL_ACTION, {
                            engageTitle: String.id.IDS_MUSIC_ENGAGE_PREMIUM_TRIAL_ACTION, subTitle: String.load(String.id.IDS_MUSIC_ENGAGE_PREMIUM_TRIAL_DESC), executeLocation: executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.engage, automationId: MS.Entertainment.UI.AutomationIds.smartButtonGetFreeMusicPassTrial
                        }, {
                            icon: MS.Entertainment.UI.Icon.store, className: "icon-shop"
                        })
                }, createButtonSubscriptionDownload: function createButtonSubscriptionDownload(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionDownload, String.id.IDS_DETAILS_DOWNLOAD_LABEL, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownload
                        }, {icon: WinJS.UI.AppBarIcon.download})
                }, createButtonDownloadRemove: function createButtonDownloadRemove(media, executeLocation, useVerboseDownloadText) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadRemove, useVerboseDownloadText ? String.id.IDS_MUSIC_DETAILS_CLEAR_DOWNLOAD_ERROR_ACTION : String.id.IDS_CLEAR_DOWNLOAD_ERROR_BUTTON, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonRemove
                        }, {icon: WinJS.UI.AppBarIcon.remove});
                    return button
                }, createButtonArtistDetails: function createButtonArtistDetails(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails, String.id.IDS_DETAILS_VIEW_FULL_ARTIST, {
                            mediaItem: media, showDetails: true, autoPlay: false, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonArtistDetails, dismissOverlayOnExecute: true
                        }, {icon: MS.Entertainment.Utilities.isMusicApp2 ? MS.Entertainment.UI.Icon.player : MS.Entertainment.UI.Icon.details}, {
                            guiStringId: String.id.IDS_DETAILS_VIEW_FULL_ARTIST_VUI_GUI, voicePhraseStringId: String.id.IDS_DETAILS_VIEW_FULL_ARTIST_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_DETAILS_VIEW_FULL_ARTIST_VUI_PRON
                        })
                }, createButtonArtistDetailsLX: function createButtonArtistDetailsLX(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.artistDetailsNavigate, String.id.IDS_DETAILS_VIEW_FULL_ARTIST, media.artist, {
                            icon: MS.Entertainment.UI.Icon.player, className: "icon-contact"
                        }, {
                            guiStringId: String.id.IDS_DETAILS_VIEW_FULL_ARTIST_VUI_GUI, voicePhraseStringId: String.id.IDS_DETAILS_VIEW_FULL_ARTIST_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_DETAILS_VIEW_FULL_ARTIST_VUI_PRON
                        })
                }, createButtonAlbumPlayPreview: function createButtonAlbumPlayPreview(media, executeLocation, dontUseTrackListForPlayback) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, String.id.IDS_DETAILS_PREVIEW_ALBUM_LABEL, {
                            mediaItem: media, showAppBar: true, playPreviewOnly: true, dontUseTrackListForPlayback: dontUseTrackListForPlayback, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayAlbumPreview, id: "playAlbumPreview"
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_DETAILS_PREVIEW_ALBUM_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_DETAILS_PREVIEW_ALBUM_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_DETAILS_PREVIEW_ALBUM_BUTTON_VUI_PRON
                        })
                }, createButtonAlbumPlay: function createButtonAlbumPlay(media, executeLocation, dontUseTrackListForPlayback) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, String.id.IDS_MUSIC_PLAY_ALBUM_LABEL, {
                            mediaItem: media, showAppBar: true, dontUseTrackListForPlayback: dontUseTrackListForPlayback, preRollVideoAdIfNeeded: true, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayAlbum, id: "playAlbum"
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_MUSIC_PLAY_ALBUM_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC_PLAY_ALBUM_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC_PLAY_ALBUM_BUTTON_VUI_PRON
                        })
                }, createButtonTrackPlayPreview: function createButtonTrackPlayPreview(media, executeLocation, dontUseTrackListForPlayback) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playMedia, String.id.IDS_DETAILS_PREVIEW_SONG_LABEL, {
                            mediaItem: media, showAppBar: true, dontUseTrackListForPlayback: dontUseTrackListForPlayback, playPreviewOnly: true, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayTrackPreview
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_DETAILS_PREVIEW_SONG_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_DETAILS_PREVIEW_SONG_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_DETAILS_PREVIEW_SONG_BUTTON_VUI_PRON
                        })
                }, createButtonPreviewArtistTopSongs: function createButtonPreviewArtistTopSongs(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist, String.id.IDS_MUSIC_PREVIEW_TOP_SONGS_BUTTON, {
                            mediaItem: media, showAppBar: true, playPreviewOnly: true, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayArtistPreview
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_MUSIC_PREVIEW_TOP_SONGS_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC_PREVIEW_TOP_SONGS_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC_PREVIEW_TOP_SONGS_BUTTON_VUI_PRON
                        });
                    return button
                }, createButtonPlayAllLocalArtist: function createButtonPlayAllLocalArtist(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist, MS.Entertainment.Utilities.isMusicApp1 ? String.id.IDS_MUSIC_PLAY_ALL_BUTTON : String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_GUI, {
                            mediaItem: media, showImmersive: false, showAppBar: true, playCollectionItemsOnly: true, preRollVideoAdIfNeeded: true, executeLocation: executeLocation, librarySort: Microsoft.Entertainment.Queries.TracksSortBy.albumTitleDiscNumberNumberAscending, automationId: MS.Entertainment.UI.AutomationIds.smartButtonArtistLocalPlayAll
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_PRON
                        });
                    return button
                }, createButtonPlayRelatedArtist: (function createButtonPlayRelatedArtist(media, executeLocation) {
                    var buttonPlayRelatedArtists = null;
                    var updateButtonPlayRelatedArtist = function updateButtonPlayRelatedArtist() {
                            if (buttonPlayRelatedArtists && buttonPlayRelatedArtists.items) {
                                var relatedArtists = buttonPlayRelatedArtists.items;
                                var relatedArtistIndex = Math.floor(Math.random() * relatedArtists.length);
                                var relatedArtist = relatedArtists[relatedArtistIndex];
                                buttonPlayRelatedArtists.parameter.mediaItem = relatedArtist;
                                buttonPlayRelatedArtists.parameter.subTitle = relatedArtist.name;
                                buttonPlayRelatedArtists.isEnabled = true
                            }
                        };
                    return function createButtonPlayRelatedArtist(media, executeLocation) {
                            if (!buttonPlayRelatedArtists) {
                                buttonPlayRelatedArtists = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist, String.id.IDS_NOW_PLAYING_OP_TOP_SONGS_RELATED_ACTION, {
                                    showImmersive: false, showAppBar: true, playCollectionItemsOnly: false, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonPlayRelatedArtist
                                }, {icon: MS.Entertainment.UI.Icon.play});
                                buttonPlayRelatedArtists.isEnabled = false
                            }
                            if (media && media.artist && media.artist.hasCanonicalId && (!buttonPlayRelatedArtists.items || media.artist.canonicalId !== buttonPlayRelatedArtists.artistId)) {
                                buttonPlayRelatedArtists.artistId = null;
                                buttonPlayRelatedArtists.items = null;
                                var query = new MS.Entertainment.Data.Query.Music.RelatedArtists;
                                query.id = media.artist.canonicalId;
                                query.impressionGuid = media.impressionGuid;
                                query.execute().done(function querySuccess(response) {
                                    if (response && response.result.itemsArray) {
                                        buttonPlayRelatedArtists.artistId = media.artist.canonicalId;
                                        buttonPlayRelatedArtists.items = response.result.itemsArray;
                                        updateButtonPlayRelatedArtist()
                                    }
                                }.bind(this), function onError(error) {
                                    MS.Entertainment.ViewModels.assert(error.message, "Failed to get related artists for the play top songs button. Error message: " + error.message)
                                })
                            }
                            else
                                updateButtonPlayRelatedArtist();
                            return buttonPlayRelatedArtists
                        }
                })(), createButtonPlayAllMarketplaceArtist: function createButtonPlayAllMarketplaceArtist(media, executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist, String.id.IDS_MUSIC_PLAY_TOP_SONGS_BUTTON, {
                            mediaItem: (media && media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track) ? media.artist : media, showImmersive: false, showAppBar: true, playCollectionItemsOnly: false, preRollVideoAdIfNeeded: true, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonArtistMarketplacePlayAll, subTitle: media ? media.artistName : String.empty
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: String.id.IDS_MUSIC_PLAY_TOP_SONGS_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC_PLAY_TOP_SONGS_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC_PLAY_TOP_SONGS_BUTTON_VUI_PRON
                        });
                    return button
                }, createButtonSaveNowPlayingPlaylist: function createButtonSaveNowPlayingPlaylist(executeLocation) {
                    var button = _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.saveNowPlayingPlaylist, String.id.IDS_HOME_NOW_PLAYING, {
                            executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonSaveNowPlayingPlaylist, subTitle: String.load(String.id.IDS_NOW_PLAYING_OP_SAVE_NOW_PLAYING_ACTION)
                        }, {icon: WinJS.UI.AppBarIcon.save});
                    return button
                }, createButtonBuyAlbum: function createButtonBuyAlbum(media, executeLocation) {
                    return _createButton(MS.Entertainment.Utilities.isMusicApp1 ? MS.Entertainment.UI.Actions.ActionIdentifiers.albumPurchase : MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_DETAILS_BUY_ALBUM_LABEL, {
                            mediaItem: media, offer: null, target: MS.Entertainment.Platform.PurchaseHelpers.PC_TARGET, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuyAlbum
                        }, {icon: MS.Entertainment.UI.Icon.shop})
                }, createButtonBuyTrack: function createButtonBuyTrack(media, executeLocation) {
                    return _createButton(MS.Entertainment.Utilities.isMusicApp1 ? MS.Entertainment.UI.Actions.ActionIdentifiers.trackPurchase : MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, String.id.IDS_DETAILS_BUY_SONG_LABEL, {
                            mediaItem: media, offer: null, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonBuyTrack
                        }, {icon: MS.Entertainment.UI.Icon.shop})
                }, createButtonDisabledBuyTrack: function createButtonBuyTrack(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, String.id.IDS_DETAILS_BUY_SONG_LABEL, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonDisabledBuyTrack
                        }, {icon: MS.Entertainment.UI.Icon.shop})
                }, createImmersiveArtistPlayAllButton: function createImmersiveArtistPlayAllButton(media, playCollectionItemsOnly, previewOnly, showImmersive, overridePageChange) {
                    var guiStringId;
                    var voicePhraseStringId;
                    var voicePhoneticPhraseStringId;
                    var buttonTextStringId;
                    var automationId;
                    if (playCollectionItemsOnly) {
                        buttonTextStringId = String.id.IDS_MUSIC_PLAY_ALL_BUTTON;
                        automationId = MS.Entertainment.UI.AutomationIds.smartButtonArtistLocalPlayAll;
                        guiStringId = String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_GUI;
                        voicePhraseStringId = String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_ALM;
                        voicePhoneticPhraseStringId = String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_PRON
                    }
                    else if (previewOnly) {
                        buttonTextStringId = String.id.IDS_MUSIC_PREVIEW_TOP_SONGS_BUTTON;
                        automationId = MS.Entertainment.UI.AutomationIds.smartButtonPlayArtistPreview;
                        guiStringId = String.id.IDS_MUSIC_PREVIEW_TOP_SONGS_BUTTON_VUI_GUI;
                        voicePhraseStringId = String.id.IDS_MUSIC_PREVIEW_TOP_SONGS_BUTTON_VUI_ALM;
                        voicePhoneticPhraseStringId = String.id.IDS_MUSIC_PREVIEW_TOP_SONGS_BUTTON_VUI_PRON
                    }
                    else {
                        buttonTextStringId = String.id.IDS_MUSIC_PLAY_TOP_SONGS_BUTTON;
                        automationId = MS.Entertainment.UI.AutomationIds.smartButtonArtistMarketplacePlayAll;
                        guiStringId = String.id.IDS_MUSIC_PLAY_TOP_SONGS_BUTTON_VUI_GUI;
                        voicePhraseStringId = String.id.IDS_MUSIC_PLAY_TOP_SONGS_BUTTON_VUI_ALM;
                        voicePhoneticPhraseStringId = String.id.IDS_MUSIC_PLAY_TOP_SONGS_BUTTON_VUI_PRON
                    }
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist, buttonTextStringId, {
                            mediaItem: media, showAppBar: true, showImmersive: showImmersive, showDetails: true, playPreviewOnly: !!previewOnly, overridePageChange: overridePageChange, playCollectionItemsOnly: playCollectionItemsOnly, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas, preRollVideoAdIfNeeded: true, automationId: automationId, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate"
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: guiStringId, voicePhraseStringId: voicePhraseStringId, voicePhoneticPhraseStringId: voicePhoneticPhraseStringId
                        })
                }, createImmersiveArtistPlayVideosButton: function createImmersiveArtistPlayVideosButton(media, location) {
                    var guiStringId = String.id.IDS_MUSIC2_MUSIC_VIDEOS_PLAY_BUTTON_VUI_GUI;
                    var voicePhraseStringId = String.id.IDS_MUSIC2_MUSIC_VIDEOS_PLAY_BUTTON_VUI_ALM;
                    var voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_MUSIC_VIDEOS_PLAY_BUTTON_VUI_PRON;
                    var buttonTextStringId = String.id.IDS_MUSIC2_MUSIC_VIDEOS_PLAY_BUTTON_VUI_GUI;
                    var automationId = MS.Entertainment.UI.AutomationIds.smartButtonArtistPlayVideos;
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist, buttonTextStringId, {
                            mediaItem: media, showAppBar: true, showDetails: true, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.canvas, preRollVideoAdIfNeeded: true, automationId: automationId, itemTemplate: "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate", onlyMusicVideos: true
                        }, {icon: MS.Entertainment.UI.Icon.play}, {
                            guiStringId: guiStringId, voicePhraseStringId: voicePhraseStringId, voicePhoneticPhraseStringId: voicePhoneticPhraseStringId
                        })
                }, createImmersiveArtistAddToButton: function createImmersiveArtistAdToButtion(media, playCollectionItemsOnly, executeLocation, automationId) {
                    var buttonTextStringId = String.id.IDS_MUSIC_ADD_TO_LIST_BUTTON;
                    var guiStringId;
                    var voicePhraseStringId;
                    var voicePhoneticPhraseStringId;
                    if (MS.Entertainment.Utilities.isMusicApp2)
                        if (playCollectionItemsOnly) {
                            buttonTextStringId = String.id.IDS_MUSIC2_ADD_ARTIST_COLLECTION_TO_LIST_BUTTON;
                            guiStringId = String.id.IDS_MUSIC2_ADD_ARTIST_COLLECTION_TO_LIST_BUTTON_VUI_GUI;
                            voicePhraseStringId = String.id.IDS_MUSIC2_ADD_ARTIST_COLLECTION_TO_LIST_BUTTON_VUI_ALM;
                            voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_ADD_ARTIST_COLLECTION_TO_LIST_BUTTON_VUI_PRON
                        }
                        else {
                            buttonTextStringId = String.id.IDS_MUSIC2_ADD_ARTIST_TOP_SONGS_TO_LIST_BUTTON;
                            guiStringId = String.id.IDS_MUSIC2_ADD_ARTIST_TOP_SONGS_TO_LIST_BUTTON_VUI_GUI;
                            voicePhraseStringId = String.id.IDS_MUSIC2_ADD_ARTIST_TOP_SONGS_TO_LIST_BUTTON_VUI_ALM;
                            voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_ADD_ARTIST_TOP_SONGS_TO_LIST_BUTTON_VUI_PRON
                        }
                    var button = this.createButtonAddTo(media, executeLocation, automationId);
                    if (button.isVoiceEnabled) {
                        button.title = String.load(guiStringId);
                        button.voicePhraseStringId = voicePhraseStringId;
                        button.voicePhoneticPhraseStringId = voicePhoneticPhraseStringId
                    }
                    else
                        button.title = String.load(buttonTextStringId);
                    return button
                }, createShowPlaylistButton: function createShowPlaylistButton(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.invoke, String.id.IDS_MUSIC_VIEW_PLAYLIST, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonShowPlaylist
                        }, {icon: MS.Entertainment.UI.Icon.playlist})
                }, createButtonRemoveFromList: function createButtonRemoveFromList() {
                    var actionAvailable = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.removeFromList);
                    var action = null;
                    if (actionAvailable)
                        action = _createBasicButton(MS.Entertainment.UI.Actions.ActionIdentifiers.removeFromList);
                    return action
                }, createButtonRemoveFromPlaylist: function createRemoveFromPlaylistButton(media, index, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.removeFromPlaylist, String.id.IDS_PLAYLIST_REMOVE, {
                            mediaItem: media, index: index, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonRemoveFromPlaylist
                        }, {icon: WinJS.UI.AppBarIcon.remove}, {
                            guiStringId: String.id.IDS_PLAYLIST_REMOVE_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_PLAYLIST_REMOVE_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_PLAYLIST_REMOVE_BUTTON_VUI_PRON
                        })
                }, createButtonRenamePlaylist: function createButtonRenamePlaylist(media, executeLocation) {
                    return _createButton(MS.Entertainment.UI.Actions.ActionIdentifiers.renamePlaylist, String.id.IDS_MUSIC_RENAME_PLAYLIST, {
                            mediaItem: media, executeLocation: executeLocation, automationId: MS.Entertainment.UI.AutomationIds.smartButtonRenamePlaylist
                        }, {icon: WinJS.UI.AppBarIcon.edit}, {
                            guiStringId: String.id.IDS_MUSIC_RENAME_PLAYLIST_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC_RENAME_PLAYLIST_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC_RENAME_PLAYLIST_BUTTON_VUI_PRON
                        })
                }, getAlbumInlineDetailsButtons: function getAlbumInlineDetailsButtons(media, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    return {
                            play: this.createButtonAlbumPlay(media, location, true), playArtistSmartDJ: this.createButtonPlayArtistSmartDJ(media, location), playOnXbox: this.createButtonPlayOnXbox(media, location), addTo: this.createButtonAddTo(media, location, MS.Entertainment.UI.AutomationIds.smartButtonAddToFromPopover), albumPlayPreview: this.createButtonAlbumPlayPreview(media, location, true), buyAlbum: this.createButtonBuyAlbum(media, location), artistDetails: this.createButtonArtistDetails(media, location), playDisabled: this.createButtonPlayDisabled(location), remotePlayDisabled: this.createButtonRemotePlayDisabled(location), tryAgain: this.createButtonTryAgain(media, location), remove: this.createButtonDownloadRemove(media, location), contentNotAvailable: this.createButtonContentNotAvailable(media, location), deleteMedia: this.createButtonDeleteMedia(media, location), pinToDashboard: this.createMusicButtonPinToDashboard(media, location)
                        }
                }, getAlbumDetailsButtonsLX: function getAlbumDetailsButtonsLX(media, executeLocation, genericPlayButton) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    var buttons = {
                            genericPlay: genericPlayButton, artistDetails: this.createButtonArtistDetailsLX(media, location), play: this.createButtonAlbumPlay(media, location, true), playArtistSmartDJ: this.createButtonPlayArtistSmartDJ(media, location), playOnXbox: this.createButtonPlayOnXbox(media, location), addTo: this.createButtonAddTo(media, location, MS.Entertainment.UI.AutomationIds.smartButtonAddToFromPopover), albumPlayPreview: this.createButtonAlbumPlayPreview(media, location, true), playDisabled: this.createButtonPlayDisabled(location), remotePlayDisabled: this.createButtonRemotePlayDisabled(location), download: this.createButtonDownload(media, location), subscriptionDownload: this.createButtonSubscriptionDownload(media, location), tryAgain: this.createButtonTryAgain(media, location, true), remove: this.createButtonDownloadRemove(media, location, true), contentNotAvailable: this.createButtonContentNotAvailable(media, location), editMetadata: this.createButtonEditMetadata(media, location), deleteMedia: this.createButtonDeleteMedia(media, location), pinToDashboard: this.createMusicButtonPinToDashboard(media, location), pinToStartScreen: this.createButtonPinToStartScreen(media, location), unpinFromStartScreen: this.createButtonUnpinFromStartScreen(media, location), findAlbumInfo: this.createButtonMatchAlbumInfo(media, location), more: this.createButtonMore(location)
                        };
                    return buttons
                }, getArtistInlineDetailsButtons: function getArtistInlineDetailsButtons(media, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    return {
                            playOnXbox: this.createButtonPlayOnXbox(media, location), addTo: this.createButtonAddTo(media, location, MS.Entertainment.UI.AutomationIds.smartButtonAddToFromPopover), previewArtist: this.createButtonPreviewArtistTopSongs(media, location), playAllLocalArtist: this.createButtonPlayAllLocalArtist(media, location), playAllMarketplaceArtist: this.createButtonPlayAllMarketplaceArtist(media, location), playArtistSmartDJ: this.createButtonPlayArtistSmartDJ(media, location), artistDetails: this.createButtonArtistDetails(media, location), playDisabled: this.createButtonPlayDisabled(location), remotePlayDisabled: this.createButtonRemotePlayDisabled(location), download: this.createButtonDownload(media, location), tryAgain: this.createButtonTryAgain(media, location), remove: this.createButtonDownloadRemove(media, location), contentNotAvailable: this.createButtonContentNotAvailable(media, location), deleteMedia: this.createButtonDeleteMedia(media, location), pinToDashboard: this.createMusicButtonPinToDashboard(media, location)
                        }
                }, getArtistDetailsHeaderButtons: function getArtistDetailsHeaderButtons(media, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    return {
                            playArtistSmartDJ: this.createButtonPlayArtistSmartDJ(media, location), playArtistSmartDJDisabled: this.createButtonPlayArtistSmartDJDisabled(media, location), pinToStartScreen: this.createButtonPinToStartScreen(media, location), unpinFromStartScreen: this.createButtonUnpinFromStartScreen(media, location)
                        }
                }, getArtistDetailsLocalAlbumsButtons: function getArtistDetailsLocalAlbumsButtons(localAlbumsQuery, localTracksQuery, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    return {
                            playLocalAlbums: this.createButtonPlayMedia(localTracksQuery, location), playDisabled: this.createButtonPlayDisabled(location), addLocalAlbumsTo: this.createButtonAddTo(localAlbumsQuery, location, MS.Entertainment.UI.AutomationIds.smartButtonAddToFromPopover)
                        }
                }, getArtistTopSongsButtons: function getArtistTopSongsButtons(media, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    return {
                            playTopSongs: this.createButtonPlayAllMarketplaceArtist(media, location), previewTopSongs: this.createButtonPreviewArtistTopSongs(media, location), addTopSongsTo: this.createButtonArtistTopSongsAddTo(media, location, MS.Entertainment.UI.AutomationIds.smartButtonAddToFromPopover)
                        }
                }, getMusicVideoInlineDetailsButtons: function getMusicVideoInlineDetailsButtons(mediaContext) {
                    var musicVideo = mediaContext.mediaItem;
                    var location = MS.Entertainment.UI.Actions.ExecutionLocation.invokeInline;
                    var playbackItemSource = null;
                    var musicVideoIndex = null;
                    var musicVideoKey = null;
                    var dontUseTrackListForPlayback = false;
                    if (mediaContext.options) {
                        if (mediaContext.options.containingMedia) {
                            playbackItemSource = mediaContext.options.containingMedia.playbackItemSource;
                            musicVideoIndex = mediaContext.options.containingMedia.playbackOffset;
                            musicVideoKey = mediaContext.options.containingMedia.playbackKey;
                            dontUseTrackListForPlayback = !!mediaContext.options.containingMedia.dontUseTrackListForPlayback
                        }
                        if (mediaContext.options.executeLocation)
                            location = mediaContext.options.executeLocation
                    }
                    var genericPlayButton = MS.Entertainment.ViewModels.SmartBuyButtons.createGenericPlayButton();
                    var doubleClickButton = MS.Entertainment.ViewModels.SmartBuyButtons.createGenericPlayButton();
                    doubleClickButton.automationId = MS.Entertainment.UI.AutomationIds.doubleClickPlay;
                    var actions = {
                            genericPlay: genericPlayButton, doubleClick: doubleClickButton, play: this.createButtonTrackPlay(playbackItemSource, musicVideo, musicVideoIndex, location, dontUseTrackListForPlayback), addTo: this.createButtonAddTo(musicVideo, location, MS.Entertainment.UI.AutomationIds.smartButtonAddToFromTrackInline), playDisabled: this.createButtonPlayDisabled(location), remove: this.createButtonDownloadRemove(musicVideo, location), removeFromPlaylist: this.createButtonRemoveFromPlaylist(musicVideo, musicVideoIndex, location), removeFromNowPlaying: this.createButtonRemoveFromNowPlaying(playbackItemSource, musicVideoKey, musicVideoIndex, location), deleteMedia: this.createButtonDeleteMedia(mediaContext.mediaItem, location), playNowPlayingTrack: this.createButtonPlayNowPlayingTrack(playbackItemSource, musicVideo, musicVideoIndex, location)
                        };
                    var removeFromList = this.createButtonRemoveFromList();
                    if (removeFromList)
                        actions.removeFromList = removeFromList;
                    return actions
                }, getPlaylistInlineDetailsButtons: function getPlaylistInlineDetailsButtons(media, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    return {
                            play: this.createButtonPlaylistPlay(media, location), addTo: this.createButtonAddTo(media, location, MS.Entertainment.UI.AutomationIds.smartButtonAddToFromPopover), playDisabled: this.createButtonPlayDisabled(location), contentNotAvailable: this.createButtonContentNotAvailable(media, location), deleteMedia: this.createButtonDeleteMedia(media, location), renamePlaylist: this.createButtonRenamePlaylist(media, location), pinToDashboard: this.createMusicButtonPinToDashboard(media, location)
                        }
                }, getPlaylistDetailsButtonsLX: function getPlaylistDetailsButtonsLX(media, executeLocation, genericPlayButton) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.popover;
                    var buttons = this.getPlaylistInlineDetailsButtons(media, executeLocation);
                    buttons.genericPlay = genericPlayButton;
                    buttons.playDisabled = this.createButtonPlayDisabled(location);
                    buttons.more = this.createButtonMore(location);
                    buttons.download = this.createButtonDownload(media, location);
                    buttons.subscriptionDownload = this.createButtonSubscriptionDownload(media, location);
                    buttons.tryAgain = this.createButtonTryAgain(media, location, true);
                    buttons.remove = this.createButtonDownloadRemove(media, location, true);
                    buttons.pinToStartScreen = this.createButtonPinToStartScreen(media, location);
                    buttons.unpinFromStartScreen = this.createButtonUnpinFromStartScreen(media, location);
                    return buttons
                }, getTrackInlineDetailsButtons: function getTrackInlineDetailsButtons(mediaContext) {
                    var track = mediaContext.mediaItem;
                    var location = MS.Entertainment.UI.Actions.ExecutionLocation.invokeInline;
                    var playbackItemSource = null;
                    var trackIndex = null;
                    var trackKey = null;
                    var dontUseTrackListForPlayback = false;
                    if (mediaContext.options) {
                        if (mediaContext.options.containingMedia) {
                            playbackItemSource = mediaContext.options.containingMedia.playbackItemSource;
                            trackIndex = mediaContext.options.containingMedia.playbackOffset;
                            trackKey = mediaContext.options.containingMedia.playbackKey;
                            dontUseTrackListForPlayback = !!mediaContext.options.containingMedia.dontUseTrackListForPlayback
                        }
                        if (mediaContext.options.executeLocation)
                            location = mediaContext.options.executeLocation
                    }
                    var genericPlayButton = MS.Entertainment.ViewModels.SmartBuyButtons.createGenericPlayButton();
                    var doubleClickButton = MS.Entertainment.ViewModels.SmartBuyButtons.createGenericPlayButton();
                    doubleClickButton.automationId = MS.Entertainment.UI.AutomationIds.doubleClickPlay;
                    var actions = {
                            genericPlay: genericPlayButton, doubleClick: doubleClickButton, play: this.createButtonTrackPlay(playbackItemSource, track, trackIndex, location, dontUseTrackListForPlayback), playOnXbox: this.createButtonPlayOnXbox(track, location), addTo: this.createButtonAddTo(track, location, MS.Entertainment.UI.AutomationIds.smartButtonAddToFromTrackInline), trackPlayPreview: this.createButtonTrackPlayPreview(track, location, dontUseTrackListForPlayback), buyTrack: this.createButtonBuyTrack(track, location), buyAlbum: this.createButtonBuyAlbum(track, location), download: this.createButtonDownload(track, location), addToDisabled: this.createButtonAddToDisabled(track, location), playDisabled: this.createButtonPlayDisabled(location), remotePlayDisabled: this.createButtonRemotePlayDisabled(location), tryAgain: this.createButtonTryAgain(track, location), remove: this.createButtonDownloadRemove(track, location), contentNotAvailable: this.createButtonContentNotAvailable(track, location), removeFromPlaylist: this.createButtonRemoveFromPlaylist(track, trackIndex, location), removeFromNowPlaying: this.createButtonRemoveFromNowPlaying(playbackItemSource, trackKey, trackIndex, location), showPlaylistItemInformation: this.createButtonPlaylistItemInformation(), deleteMedia: this.createButtonDeleteMedia(mediaContext.mediaItem, location), playNowPlayingTrack: this.createButtonPlayNowPlayingTrack(playbackItemSource, track, trackIndex, location)
                        };
                    if (MS.Entertainment.Utilities.isMusicApp1) {
                        actions.pinToStartScreen = this.createButtonPinToStartScreen(track, location);
                        actions.unpinFromStartScreen = this.createButtonUnpinFromStartScreen(track, location)
                    }
                    var removeFromList = this.createButtonRemoveFromList();
                    if (removeFromList)
                        actions.removeFromList = removeFromList;
                    return actions
                }, getTrackOpportunityButtons: function getTrackOpportunityButtons(media, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.opportunity;
                    var opportunityButtons = this.getEngagePanelButtons(location);
                    opportunityButtons.playArtistSmartDJ = this.createButtonPlayArtistSmartDJ(media, location);
                    opportunityButtons.addMarketplaceArtistToNowPlaying = this.createButtonAddMarketplaceArtistToNowPlaying(media, location);
                    opportunityButtons.playOnXbox = this.createButtonPlayOnXbox(media, location);
                    opportunityButtons.addToMyMusic = this.createButtonAddToMyMusic(media, null, location, String.id.IDS_NOW_PLAYING_OP_ADD_SONG_ACTION, MS.Entertainment.UI.AutomationIds.smartButtonAddToMyMusicTrackOp);
                    opportunityButtons.addAlbumToMyMusic = this.createButtonAddToMyMusic(media, media ? media.album : null, location, String.id.IDS_NOW_PLAYING_OP_ADD_ALBUM_ACTION, MS.Entertainment.UI.AutomationIds.smartButtonAddToMyMusicAlbumOp);
                    opportunityButtons.playAllMarketplaceArtist = this.createButtonPlayAllMarketplaceArtist(media, location);
                    opportunityButtons.saveNowPlayingPlaylist = this.createButtonSaveNowPlayingPlaylist(location);
                    opportunityButtons.playRelatedArtist = this.createButtonPlayRelatedArtist(media, location);
                    return opportunityButtons
                }, getEngagePanelButtons: function getEngagePanelButtons(executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.opportunity;
                    var buttons = {
                            browseAllMusic: this.createButtonBrowseAllMusic(location), shuffleAllMusic: this.createButtonShuffleAllMusic(location)
                        };
                    if (MS.Entertainment.Utilities.isMusicApp1) {
                        buttons.getFreeMusicPassTrial = this.createButtonGetFreeMusicPassTrial(location);
                        buttons.playAnyArtist = this.createButtonPlayAnyArtist(location);
                        buttons.newSmartDJ = this.createButtonNewSmartDJ(location);
                        buttons.playPlaylist = this.createButtonPlayPlaylist(location)
                    }
                    else
                        buttons.welcomeText = this.createButtonWelcomeApp2();
                    return buttons
                }, getArtistImmersiveButtons: function getArtistImmersiveButtons(media, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.canvas;
                    return {
                            playArtistSmartDJ: this.createButtonPlayArtistSmartDJ(media, location), pinToDashboard: this.createMusicButtonPinToDashboard(media, location)
                        }
                }, getArtistImmersiveDetailsButtonsDefault: function getArtistImmersiveDetailsButtonsInCollection(media, playCollectionItemsOnly, executeLocation, hasTracks, hasVideos) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.canvas;
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    var freeStreamEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                    var anonFreeStreamEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlayAnonymous);
                    var isSignedIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn;
                    var isSubscription = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser).isSubscription;
                    var hasFreeStreamsLeft = Microsoft.Entertainment.Limits.MusicLimitsManager.totalUnauthenticatedTracksUsed < Microsoft.Entertainment.Limits.MusicLimitsManager.totalUnauthenticatedTrackAllowance;
                    var previewOnly = isSignedIn ? !isSubscription && !freeStreamEnabled : !anonFreeStreamEnabled;
                    var addToSubActions = [];
                    var buttons = {};
                    hasTracks = hasTracks === undefined ? true : hasTracks;
                    if (hasTracks)
                        buttons.playAll = this.createImmersiveArtistPlayAllButton(media, playCollectionItemsOnly, previewOnly, true, false, location);
                    if (hasVideos)
                        buttons.playVideos = this.createImmersiveArtistPlayVideosButton(media, location);
                    var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                    if (MS.Entertainment.Utilities.isMusicApp2) {
                        if (media && media.hasSmartDJ)
                            buttons.playArtistSmartDJ = this.createButtonPlayArtistSmartDJ(media, location);
                        addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                        if (!sessionManager || !sessionManager.primarySession || !sessionManager.primarySession.smartDJSeed)
                            addToSubActions.push(MS.Entertainment.UI.Actions.AddTo.subMenuIds.addMarketplaceArtistToNowPlaying);
                        if (hasTracks && addToSubActions.length && (hasFreeStreamsLeft || isSubscription)) {
                            var addToButton = this.createImmersiveArtistAddToButton(media, playCollectionItemsOnly, location, MS.Entertainment.UI.AutomationIds.smartButtonAddToFromArtistImmersive);
                            addToButton.setSubActions(addToSubActions);
                            buttons.addTo = addToButton
                        }
                        if (media.hasServiceId)
                            buttons.pinToDashboard = this.createMusicButtonPinToDashboard(media, location)
                    }
                    return buttons
                }, getArtistImmersiveDetailsButtonsViewPlaylist: function getArtistImmersiveDetailsButtonsViewPlaylist(media, executeLocation) {
                    var location = executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.canvas;
                    var result;
                    if (MS.Entertainment.Utilities.isMusicApp1)
                        result = {viewPlaylist: this.createShowPlaylistButton(media, location)};
                    return result
                }
        }});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {SmartBuyStateHandlers: {
            _canXboxAccessMedia: function _canXboxAccessMedia(media, rights) {
                if (!MS.Entertainment.Platform.PlaybackHelpers.isPlayToXboxFeatureEnabled(media))
                    return false;
                else if (!media || !media.hasServiceId)
                    return false;
                else if ((!media.rights || media.rights.length === 0) && media.hasCanonicalId)
                    return true;
                return MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(media, MS.Entertainment.ViewModels.SmartBuyStateHandlers.Tuner.Xbox360, rights)
            }, _mediaHasAnyRight: function _mediaHasAnyRight(media, tuner, rights, filters, sortFunction) {
                    var possibleRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._getMatchingRights(media, tuner, rights, filters, sortFunction);
                    return (possibleRights && possibleRights.length > 0)
                }, mediaHasAnyRight: function mediaHasAnyRight(media, tuner, rights, filters, sortFunction) {
                    return MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(media, tuner, rights, filters, sortFunction)
                }, getMatchingRights: function getMatchingRights(media, tuner, rights, filters, sortFunction) {
                    return MS.Entertainment.ViewModels.SmartBuyStateHandlers._getMatchingRights(media, tuner, rights, filters, sortFunction)
                }, _getMatchingRights: function _getMatchingRights(media, tuner, rights, filters, sortFunction) {
                    if (!media || !media.rights)
                        return null;
                    var freeOnly = !!WinJS.Utilities.getMember("freeOnly", filters);
                    var excludeFree = !!WinJS.Utilities.getMember("excludeFree", filters);
                    var allowPartialRights = !!WinJS.Utilities.getMember("allowPartialRights", filters);
                    var includeExpired = !!WinJS.Utilities.getMember("includeExpired", filters);
                    var useUnfilteredRights = !!WinJS.Utilities.getMember("useUnfilteredRights", filters);
                    var deliveryFormat = WinJS.Utilities.getMember("deliveryFormat", filters);
                    var primaryAudioLanguage = WinJS.Utilities.getMember("primaryAudioLanguage", filters);
                    var possibleRights = [];
                    var rightsToCheck = useUnfilteredRights ? media.unfilteredRights : media.rights;
                    var nowDate = Date.now();
                    if (!MS.Entertainment.Utilities.clientSupportsFreeJustPlays)
                        excludeFree = false;
                    for (var i = 0; i < rightsToCheck.length; i++) {
                        var right = rightsToCheck[i];
                        if (!right)
                            continue;
                        if (!MS.Entertainment.Utilities.rightSupportsTuner(right, tuner))
                            continue;
                        if (!rights || rights.length === 0) {
                            possibleRights.push(right);
                            continue
                        }
                        var foundRight = false;
                        for (var j = 0; j < rights.length; j++)
                            if (right.licenseRight === rights[j] && (MS.Entertainment.ViewModels.SmartBuyStateHandlers._isValidOffer(right, media.mediaType) || (allowPartialRights && !right.isFullRight) || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.PreviewStream || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.FreeStream || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Subscription || right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream)) {
                                foundRight = true;
                                break
                            }
                        if (!foundRight)
                            continue;
                        if (right.hasOffer && right.startDate && right.endDate)
                            try {
                                if (!includeExpired) {
                                    var startDate = Date.parse(right.startDate);
                                    if (isNaN(startDate))
                                        startDate = parseInt(right.startDate.split("(")[1].split(")")[0]);
                                    var endDate = Date.parse(right.endDate);
                                    if (isNaN(endDate))
                                        endDate = parseInt(right.endDate.split("(")[1].split(")")[0]);
                                    if (startDate > nowDate || nowDate > endDate)
                                        continue
                                }
                            }
                            catch(e) {
                                MS.Entertainment.Data.fail("Invalid start or end date specified on media, service id = " + media.serviceId, null, MS.Entertainment.UI.Debug.errorLevel.low)
                            }
                        if (freeOnly && (!right.hasOffer || !MS.Entertainment.Utilities.isRightFree(right) || right.priceCurrencyCode === "MTK"))
                            continue;
                        if (excludeFree && (!right.hasOffer || MS.Entertainment.Utilities.isRightFree(right)))
                            continue;
                        if (MS.Entertainment.ViewModels.SmartBuyStateHandlers._filterRight(right, media))
                            continue;
                        if (MS.Entertainment.Utilities.isVideoApp) {
                            if (!right.priceCurrencyCode)
                                continue;
                            var localCurrencyFilters = (new Microsoft.Entertainment.Configuration.ConfigurationManager).service.localCurrencyFilters.split(",");
                            if (localCurrencyFilters) {
                                var unwantedCurrencyCode = false;
                                for (var f = 0; f < localCurrencyFilters.length; f++)
                                    if (right.priceCurrencyCode && right.priceCurrencyCode === localCurrencyFilters[f]) {
                                        unwantedCurrencyCode = true;
                                        break
                                    }
                                if (unwantedCurrencyCode)
                                    continue
                            }
                            if (deliveryFormat && right.deliveryFormat !== deliveryFormat)
                                continue;
                            var a = MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(right.primaryAudioLanguage);
                            var b = MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(primaryAudioLanguage);
                            if (a && b && a !== b)
                                continue;
                            var resolutionFormat = MS.Entertainment.Data.Augmenter.Marketplace.edsResolutionFormat;
                            var qualityPreference = [resolutionFormat.hd1080p, resolutionFormat.hd, resolutionFormat.sd, resolutionFormat.xd];
                            for (var j = 0; j < possibleRights.length; j++)
                                if (possibleRights[j].offerId === right.offerId)
                                    if (sortFunction) {
                                        var tempRights = [right, possibleRights[j]];
                                        tempRights.sort(sortFunction);
                                        possibleRights[j] = tempRights[1];
                                        right = null;
                                        break
                                    }
                                    else {
                                        var qualityIndexOld = qualityPreference.indexOf(possibleRights[j].videoDefinition);
                                        var qualityIndexNew = qualityPreference.indexOf(right.videoDefinition);
                                        if (qualityIndexOld > qualityIndexNew) {
                                            possibleRights.splice(j, 1);
                                            j--
                                        }
                                        else {
                                            right = null;
                                            break
                                        }
                                    }
                        }
                        if (right)
                            possibleRights.push(right)
                    }
                    return possibleRights
                }, _filterRight: function _filterRight(right, media) {
                    return (MS.Entertainment.Utilities.isVideoApp2 && right.deliveryFormat === MS.Entertainment.Data.Augmenter.Marketplace.edsDeliveryFormat.download && media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.tvSeason) || (MS.Entertainment.Utilities.isVideoApp1 && !right.signedOffer)
                }, _isValidOffer: function _isValidOffer(right, mediaType) {
                    var isValidOffer = right && right.offerId;
                    var isTrackAlbumPurchaseOffer = mediaType === Microsoft.Entertainment.Queries.ObjectType.track && right.licenseRight === MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase;
                    if (isValidOffer && !isTrackAlbumPurchaseOffer && (mediaType === Microsoft.Entertainment.Queries.ObjectType.track || mediaType === Microsoft.Entertainment.Queries.ObjectType.album)) {
                        var paymentTypes = right.paymentInstruments;
                        if (paymentTypes)
                            paymentTypes = Array.isArray(paymentTypes) ? paymentTypes : [paymentTypes];
                        isValidOffer = paymentTypes && paymentTypes.length && paymentTypes.some(function doesOfferSupportPurchaseType(paymentType) {
                            return (paymentType === MS.Entertainment.Data.Augmenter.Marketplace.edsPaymentType.creditCard)
                        })
                    }
                    return isValidOffer
                }, Tuner: {
                    All: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.all, Xbox360: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.xbox360, Windows: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.pc, Zune30: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.zuneDevice, ZuneMobile: MS.Entertainment.Data.Augmenter.Marketplace.edsDeviceType.zuneMobile
                }, MarketplaceRight: {
                    Rent: "Rent", RentStream: "RentStream", Purchase: "Purchase", PurchaseStream: "PurchaseStream", AlbumPurchase: "AlbumPurchase", Preview: "Preview", PreviewStream: "PreviewStream", Download: "Download", FreeStream: "FreeStream", SeasonPurchase: "SeasonPurchase", SeasonPurchaseStream: "SeasonPurchaseStream", Stream: "Stream", Subscription: "Subscription", SubscriptionFree: "SubscriptionFree", TransferToPortableDevice: "TransferToPortableDevice", Trial: "Trial"
                }, PaymentTypes: {
                    creditCard: "Credit Card", points: "Microsoft Points", mobileOperator: "Mobile Operator"
                }
        }})
})()
})();
/* >>>>>>/viewmodels/purchaseflow/musicsmartbuystatehandlers.js:11910 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {MusicSmartBuyStateHandlers: {
            isLocalTrackPurchasable: function isLocalTrackPurchasable(track) {
                var provider;
                if (!track || !track.hasServiceId)
                    return WinJS.Promise.wrap(false);
                provider = (new Microsoft.Entertainment.Platform.MediaStore).trackProvider;
                if (track.inCollection && track.localFilesCount > 0)
                    return provider.getPreferredFileUrlAsync(track.libraryId).then(function getPreferredFileUrlAsync_complete(preferredFile) {
                            var canPurchase = (!preferredFile || preferredFile.type !== Microsoft.Entertainment.Platform.FileUrlType.localFileUrl || preferredFile.protection !== Microsoft.Entertainment.Platform.ProtectionState.unprotected);
                            return WinJS.Promise.wrap(canPurchase)
                        }, function getPreferredFileUrlAsync_error() {
                            return WinJS.Promise.wrap(false)
                        });
                else
                    return WinJS.Promise.wrap(true)
            }, getMusicRights: function getMusicRights(media) {
                    var rightsPromise;
                    if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                        rightsPromise = MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getAlbumRights(media);
                    else if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                        rightsPromise = MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getTrackRights(media);
                    return WinJS.Promise.as(rightsPromise || {})
                }, getAlbumRights: function getAlbumRights(media) {
                    var tracksPromise;
                    var rights = {
                            albumPurchase: false, allTracksExplicit: true, freeStream: false, playOnXbox: false, preview: false, subscriptionDownload: false, subscriptionStream: false, trackPurchase: false, allFreeStream: false, allSubscriptionDownload: false, allSubscriptionStream: false, allSubscription: false, allSubscriptionOnly: false, allTrackPurchase: false, allAlbumPurchase: false, allTrackPurchaseOnly: false, allAlbumPurchaseOnly: false, allPurchaseOnly: false, allSubscriptionOrFreeStream: false, allAlbumPurchaseOnlyOrFreeStream: false, allTrackPurchaseOnlyOrFreeStream: false, allPurchaseOnlyOrFreeStream: false, allNonFreeStream: false, allNonFreeStreamOrFreeStream: false, albumPurchaseOnly: false, trackPurchaseOnly: false, albumPurchaseAndSubscriptionOnly: false, purchaseOnly: false, subscriptionLimited: false, subscriptionOnly: false, subscriptionStreamOnly: false, subscriptionDownloadOnly: false, trackUnactionable: false
                        };
                    rights.albumPurchase = !media.isPremium && MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(media, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase]);
                    if (media.tracks && !media.tracks.isDisposed)
                        tracksPromise = WinJS.Promise.as(media.tracks);
                    else if (media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album && media.clone) {
                        var cloneMedia = media.clone();
                        tracksPromise = cloneMedia.hydrate().then(function returnTracks() {
                            return cloneMedia.tracks
                        })
                    }
                    return WinJS.Promise.as(tracksPromise).then(function getRightsFromTracks(tracks) {
                            if (tracks)
                                return MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getRightsFromTrackList(tracks, rights, media);
                            else
                                return WinJS.Promise.wrap(rights)
                        })
                }, getRightsFromTrackList: function getRightsFromTrackList(mediaList, previousRights, albumMedia) {
                    var rights = previousRights || {
                            albumPurchase: false, allTracksExplicit: true, freeStream: false, playOnXbox: false, preview: false, subscriptionDownload: false, subscriptionStream: false, trackPurchase: false, allFreeStream: false, allSubscriptionDownload: false, allSubscriptionStream: false, allSubscription: false, allSubscriptionOnly: false, allTrackPurchase: false, allAlbumPurchase: false, allTrackPurchaseOnly: false, allAlbumPurchaseOnly: false, allPurchaseOnly: false, allAlbumPurchaseOnlyOrFreeStream: false, allTrackPurchaseOnlyOrFreeStream: false, allPurchaseOnlyOrFreeStream: false, allNonFreeStream: false, albumPurchaseOnly: false, trackPurchaseOnly: false, albumPurchaseAndSubscriptionOnly: false, subscriptionLimited: false, purchaseOnly: false, subscriptionOnly: false, subscriptionStreamOnly: false, subscriptionDownloadOnly: false, trackUnactionable: false
                        };
                    return MS.Entertainment.Data.List.listToArray(mediaList, 0, 25).then(function getRightsFromTrackList_itemsFromIndex_complete(args) {
                            if (args.length) {
                                rights.allFreeStream = true;
                                rights.allSubscriptionDownload = true;
                                rights.allSubscriptionStream = true;
                                rights.allSubscription = true;
                                rights.allSubscriptionOnly = true;
                                rights.allTrackPurchase = true;
                                rights.allAlbumPurchase = true;
                                rights.allTrackPurchaseOnly = true;
                                rights.allAlbumPurchaseOnly = true;
                                rights.allPurchaseOnly = true;
                                rights.allAlbumPurchaseOnlyOrFreeStream = true;
                                rights.allTrackPurchaseOnlyOrFreeStream = true;
                                rights.allPurchaseOnlyOrFreeStream = true;
                                rights.allNonFreeStream = true
                            }
                            for (var i = 0; i < args.length; i++) {
                                var item = args[i];
                                var trackRights = MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getTrackRights(item);
                                rights.albumPurchase = rights.albumPurchase || trackRights.albumPurchase;
                                rights.allTracksExplicit = rights.allTracksExplicit && trackRights.allTracksExplicit;
                                rights.trackPurchase = rights.trackPurchase || trackRights.trackPurchase;
                                rights.subscriptionDownload = rights.subscriptionDownload || trackRights.subscriptionDownload;
                                rights.subscriptionStream = rights.subscriptionStream || trackRights.subscriptionStream;
                                rights.playOnXbox = rights.playOnXbox || trackRights.playOnXbox;
                                rights.freeStream = rights.freeStream || trackRights.freeStream;
                                rights.preview = rights.preview || trackRights.preview;
                                rights.albumPurchaseOnly = rights.albumPurchaseOnly || trackRights.albumPurchaseOnly;
                                rights.trackPurchaseOnly = rights.trackPurchaseOnly || trackRights.trackPurchaseOnly;
                                rights.albumPurchaseAndSubscriptionOnly = rights.albumPurchaseAndSubscriptionOnly || (trackRights.albumPurchase && !trackRights.trackPurchase && trackRights.subscription);
                                rights.purchaseOnly = rights.purchaseOnly || trackRights.purchaseOnly;
                                rights.subscriptionOnly = rights.subscriptionOnly || trackRights.subscriptionOnly;
                                rights.subscriptionStreamOnly = rights.subscriptionStreamOnly || trackRights.subscriptionStreamOnly;
                                rights.subscriptionDownloadOnly = rights.subscriptionDownloadOnly || trackRights.subscriptionDownloadOnly;
                                rights.trackUnactionable = rights.trackUnactionable || trackRights.trackUnactionable;
                                rights.subscriptionLimited = rights.subscriptionLimited || trackRights.subscriptionLimited;
                                rights.allFreeStream = rights.allFreeStream && trackRights.freeStream;
                                rights.allSubscriptionDownload = rights.allSubscriptionDownload && trackRights.subscriptionDownload;
                                rights.allSubscriptionStream = rights.allSubscriptionStream && trackRights.subscriptionStream;
                                rights.allSubscription = rights.allSubscription && trackRights.subscription;
                                rights.allTrackPurchase = rights.allTrackPurchase && trackRights.trackPurchase;
                                rights.allTrackPurchaseOnly = rights.allTrackPurchaseOnly && trackRights.trackPurchaseOnly;
                                rights.allAlbumPurchase = rights.allAlbumPurchase && trackRights.albumPurchase;
                                rights.allAlbumPurchaseOnly = rights.allAlbumPurchaseOnly && trackRights.albumPurchaseOnly;
                                rights.allPurchaseOnly = rights.allPurchaseOnly && trackRights.purchaseOnly;
                                rights.allSubscriptionOnly = rights.allSubscriptionOnly && trackRights.subscriptionOnly;
                                rights.allAlbumPurchaseOnlyOrFreeStream = rights.allAlbumPurchaseOnlyOrFreeStream && (trackRights.albumPurchaseOnly || trackRights.freeStream);
                                rights.allTrackPurchaseOnlyOrFreeStream = rights.allTrackPurchaseOnlyOrFreeStream && (trackRights.albumPurchaseOnly || trackRights.freeStream);
                                rights.allPurchaseOnlyOrFreeStream = rights.allPurchaseOnlyOrFreeStream && (trackRights.purchaseOnly || trackRights.freeStream);
                                rights.allNonFreeStreamOrFreeStream = rights.allNonFreeStreamOrFreeStream && (trackRights.purchase && trackRights.subscription) || (trackRights.freeStream);
                                rights.allNonFreeStream = rights.allNonFreeStream && !trackRights.freeStream && trackRights.purchase && trackRights.subscription
                            }
                            rights.albumPurchase = rights.albumPurchase && (!albumMedia || !albumMedia.isPremium);
                            return rights
                        }.bind(this))
                }, getTrackRights: function getTrackRights(item) {
                    var rights = {
                            albumPurchase: false, allTracksExplicit: item && item.isExplicit, freeStream: false, playOnXbox: false, preview: false, subscriptionDownload: false, subscriptionStream: false, trackPurchase: false, purchaseOnly: false, albumPurchaseOnly: false, trackPurchaseOnly: false, streamOnly: false, subscriptionOnly: false, subscriptionStreamOnly: false, subscriptionDownloadOnly: false, trackUnactionable: false, subscriptionLimited: false, subscription: false, purchase: false
                        };
                    rights.albumPurchase = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(item, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase], {
                        freeOnly: false, excludeFree: false, allowPartialRights: true
                    });
                    rights.trackPurchase = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(item, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase], {
                        freeOnly: false, excludeFree: false, allowPartialRights: true
                    });
                    rights.subscriptionDownload = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(item, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Subscription], {
                        freeOnly: false, excludeFree: false, allowPartialRights: true
                    });
                    rights.subscriptionStream = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(item, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream], {
                        freeOnly: false, excludeFree: false, allowPartialRights: true
                    });
                    rights.playOnXbox = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(item, MS.Entertainment.ViewModels.SmartBuyStateHandlers.Tuner.Xbox360, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream], {
                        freeOnly: false, excludeFree: false, allowPartialRights: true
                    });
                    rights.freeStream = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(item, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.FreeStream], {
                        freeOnly: false, excludeFree: false, allowPartialRights: true
                    });
                    rights.preview = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(item, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Preview], {
                        freeOnly: false, excludeFree: false, allowPartialRights: true
                    });
                    rights.purchase = (rights.trackPurchase || rights.albumPurchase);
                    rights.purchaseOnly = (rights.trackPurchase || rights.albumPurchase) && !rights.freeStream && !rights.subscriptionStream && !rights.subscriptionDownload;
                    rights.albumPurchaseOnly = rights.albumPurchase && !rights.subscriptionStream && !rights.trackPurchase && !rights.freeStream && !rights.subscriptionDownload;
                    rights.trackPurchaseOnly = rights.trackPurchase && !rights.subscriptionStream && !rights.albumPurchase && !rights.freeStream && !rights.subscriptionDownload;
                    rights.streamOnly = (rights.subscriptionStream || rights.streamOnly) && !rights.trackPurchase && !rights.albumPurchase && !rights.freeStream;
                    rights.subscriptionStreamOnly = rights.subscriptionStream && !rights.trackPurchase && !rights.albumPurchase && !rights.freeStream && !rights.subscriptionDownload;
                    rights.subscriptionDownloadOnly = rights.subscriptionDownload && !rights.trackPurchase && !rights.albumPurchase && !rights.freeStream && !rights.subscriptionStream;
                    rights.subscriptionOnly = (rights.subscriptionStream || rights.subscriptionDownload) && !rights.trackPurchase && !rights.albumPurchase && !rights.freeStream;
                    rights.trackUnactionable = !rights.subscriptionStream && !rights.subscriptionDownload && !rights.trackPurchase && !rights.albumPurchase && !rights.freeStream;
                    rights.subscription = rights.subscriptionDownload || rights.subscriptionStream;
                    rights.subscriptionLimited = (rights.subscription) && !(rights.subscriptionDownload && rights.subscriptionStream);
                    return rights
                }
        }})
})()
})();
/* >>>>>>/components/music/playlistactions.js:12060 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Actions.Playlists", {
        ERROR_PLAYLIST_ALREADY_EXISTS: -2147024713, ERROR_MAXIMUM_PLAYLIST_LENGTH_EXCEEDED: -1056898871, getCreatePlaylistFlyoutAction: function getCreatePlaylistFlyoutAction(mediaItems, completeAction) {
                var createPlaylistFlyoutAction = new MS.Entertainment.UI.ToolbarAction;
                createPlaylistFlyoutAction.id = MS.Entertainment.UI.AppBarActions.createNewPlaylist;
                createPlaylistFlyoutAction.automationId = MS.Entertainment.UI.AutomationIds.playlistFlyoutCreatePlaylist;
                createPlaylistFlyoutAction.title = String.load(String.id.IDS_MUSIC_ADD_TO_LIST_NEW_PLAYLIST_ACTION);
                createPlaylistFlyoutAction.icon = MS.Entertainment.UI.Icon.playlist;
                createPlaylistFlyoutAction.parameter = {
                    mediaItems: mediaItems, completeAction: completeAction
                };
                createPlaylistFlyoutAction.useRelativePositioning = true;
                createPlaylistFlyoutAction.shouldAutomaticallySendTelemetry = false;
                createPlaylistFlyoutAction.executed = function executed(params) {
                    var referenceContainer;
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var options = mediaContext.options || {};
                    var executeLocation = options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.canvas;
                    createPlaylistFlyoutAction.parameter = {
                        mediaItems: mediaItems, completeAction: completeAction, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: executeLocation
                    };
                    var appBar = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                    if (appBar)
                        appBar.hide();
                    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                    var namePlaylistAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.createPlaylist);
                    namePlaylistAction.automationId = MS.Entertainment.UI.AutomationIds.playlistNewPlaylistNameEntry;
                    if (this.referenceContainer && this.referenceContainer.relativeOffset) {
                        referenceContainer = this.referenceContainer.relativeOffset;
                        if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped)
                            referenceContainer.left = (MS.Entertainment.Utilities.getWindowWidth() - 300) / 2
                    }
                    else
                        referenceContainer = {
                            left: 0, bottom: 0
                        };
                    namePlaylistAction.referenceContainer = referenceContainer;
                    namePlaylistAction.parameter = {
                        mediaItems: params.mediaItems, completeAction: params.completeAction, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: executeLocation, shouldUseTopSongsForArtistAddTo: params.shouldUseTopSongsForArtistAddTo
                    };
                    namePlaylistAction.action = new MS.Entertainment.UI.Actions.Playlists.CreatePlaylistAction;
                    namePlaylistAction.execute()
                };
                createPlaylistFlyoutAction.canExecute = function canExecute(parameter) {
                    return true
                };
                return {action: createPlaylistFlyoutAction}
            }, getShowPlaylistItemInformationAction: function getShowPlaylistItemInformationAction() {
                var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                var showPlaylistItemInformationAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.showPlaylistItemInformation);
                showPlaylistItemInformationAction.id = MS.Entertainment.UI.AppBarActions.showPlaylistItemInformation;
                showPlaylistItemInformationAction.automationId = MS.Entertainment.UI.AutomationIds.playlistShowPlaylistInformation;
                showPlaylistItemInformationAction.title = String.load(String.id.IDS_PLAYLIST_ITEM_BUTTON_NOT_AVAILABLE);
                showPlaylistItemInformationAction.icon = MS.Entertainment.UI.Icon.info;
                return {action: showPlaylistItemInformationAction}
            }, getAddToPlaylistMenuAction: function getAddToPlaylistMenuAction(playlist, name, completeAction, mediaItems) {
                var addToPlaylistAction = new MS.Entertainment.UI.ToolbarAction;
                addToPlaylistAction.id = MS.Entertainment.UI.AppBarActions.addToPlaylist;
                addToPlaylistAction.title = name;
                addToPlaylistAction.icon = MS.Entertainment.UI.Icon.addToPlaylist;
                addToPlaylistAction.shouldAutomaticallySendTelemetry = false;
                addToPlaylistAction.parameter = {
                    name: name, mediaItem: mediaItems, playlist: playlist, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, commandingButtonTemplate: "/Components/Music/Music2SharedTemplates.html#addToPlaylistItemTemplate"
                };
                addToPlaylistAction.automationId = MS.Entertainment.UI.AutomationIds.playlistAddToPlaylistAction;
                if (addToPlaylistAction.isVoiceEnabled) {
                    addToPlaylistAction.voicePhrase = MS.Entertainment.UI.App2.VoiceStatics.normalizeStringForVoice(name);
                    addToPlaylistAction.voicePhoneticPhrase = MS.Entertainment.UI.App2.VoiceStatics.normalizeStringForVoice(name)
                }
                addToPlaylistAction.executed = function executed(params) {
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var mediaItems = params.mediaItem || mediaContext.mediaItem;
                    mediaItems = MS.Entertainment.Data.List.isListOrArray(mediaItems) ? mediaItems : [mediaItems];
                    var options = mediaContext.options || {};
                    var collectionFilter = mediaContext.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                    addToPlaylistAction.parameter.executeLocation = options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.canvas;
                    MS.Entertainment.Data.List.listToArray(mediaItems).done(function gotArray(mediaItemsArray) {
                        if (mediaItemsArray.length) {
                            MS.Entertainment.UI.Actions.Playlists._appendToPlaylist(playlist.libraryId, playlist.name, mediaItemsArray, collectionFilter, params);
                            if (mediaContext)
                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.addToPlaylist)
                        }
                    })
                };
                addToPlaylistAction.canExecute = function canExecute(parameter) {
                    return true
                };
                return {action: addToPlaylistAction}
            }, getRemoveFromPlaylistAction: function getRemoveFromPlaylistAction() {
                var removeFromPlaylistAction = new MS.Entertainment.UI.ToolbarAction;
                removeFromPlaylistAction.id = MS.Entertainment.UI.AppBarActions.removeFromPlaylist;
                removeFromPlaylistAction.automationId = MS.Entertainment.UI.AutomationIds.playlistRemoveFromPlaylist;
                removeFromPlaylistAction.title = String.load(String.id.IDS_PLAYLIST_REMOVE);
                removeFromPlaylistAction.icon = WinJS.UI.AppBarIcon.remove;
                removeFromPlaylistAction.shouldAutomaticallySendTelemetry = false;
                if (removeFromPlaylistAction.isVoiceEnabled) {
                    removeFromPlaylistAction.title = String.load(String.id.IDS_PLAYLIST_REMOVE_BUTTON_VUI_GUI);
                    removeFromPlaylistAction.voicePhraseStringId = String.id.IDS_PLAYLIST_REMOVE_BUTTON_VUI_ALM;
                    removeFromPlaylistAction.voicePhoneticPhraseStringId = String.id.IDS_PLAYLIST_REMOVE_BUTTON_VUI_PRON
                }
                removeFromPlaylistAction.executed = function executed() {
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var options = mediaContext.options || {};
                    var collectionFilter = mediaContext.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                    removeFromPlaylistAction.parameter = {
                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.canvas
                    };
                    var playlistIdOrMediaItems = mediaContext.mediaItem;
                    var galleryControl = mediaContext.options && mediaContext.options.galleryControl;
                    var promise;
                    if (isNaN(playlistIdOrMediaItems))
                        promise = MS.Entertainment.Data.List.getData(playlistIdOrMediaItems, 0).then(function(data) {
                            return data ? data.playlistId : -1
                        });
                    else
                        promise = WinJS.Promise.wrap(playlistIdOrMediaItems);
                    return promise.then(function gotArray(playlistId) {
                            var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                            var playlistProvider = mediaStore.playlistProvider;
                            var hasSelectionIndices = (galleryControl && galleryControl.selectedIndices && galleryControl.selectedIndices.length > 0);
                            var hasInvokeIndices = !isNaN(options.invokedIndex) && (typeof options.invokedIndex === "number");
                            MS.Entertainment.UI.Actions.assert(hasSelectionIndices || hasInvokeIndices, "No valid indicies to remove");
                            var indicesToRemove = hasSelectionIndices ? galleryControl.selectedIndices : [options.invokedIndex];
                            if (indicesToRemove && indicesToRemove.length > 0)
                                playlistProvider.removePlaylistItemsAsync(playlistId, indicesToRemove, collectionFilter).done(function complete() {
                                    if (mediaContext)
                                        mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.removeFromPlaylist, {
                                            removedIndices: indicesToRemove, complete: true
                                        })
                                }, function onError(error) {
                                    var message = error && error.message;
                                    MS.Entertainment.UI.Actions.fail("Failure removing an item from a playlist: " + message)
                                })
                        })
                };
                removeFromPlaylistAction.canExecute = function canExecute(parameter) {
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var playlistIdOrMediaItems = mediaContext.mediaItem;
                    var options = mediaContext.options || {};
                    var galleryControl = options && options.galleryControl;
                    var invokedIndex = options && options.invokedIndex;
                    var hasSelectionIndices = (galleryControl && galleryControl.selectedIndices && galleryControl.selectedIndices.length > 0);
                    var hasInvokeIndices = !isNaN(options.invokedIndex) && (typeof options.invokedIndex === "number");
                    return !!playlistIdOrMediaItems && (hasSelectionIndices || hasInvokeIndices)
                };
                return {action: removeFromPlaylistAction}
            }, getRemoveFromNowPlayingAction: function getRemoveFromNowPlayingAction() {
                var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                var removeFromNowPlayingAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.removeFromPlaybackSession);
                removeFromNowPlayingAction.id = MS.Entertainment.UI.AppBarActions.removeFromNowPlaying;
                removeFromNowPlayingAction.automationId = MS.Entertainment.UI.AutomationIds.playlistRemoveFromNowPlaying;
                removeFromNowPlayingAction.title = String.load(String.id.IDS_NOW_PLAYING_REMOVE_TRACK_ACTION);
                removeFromNowPlayingAction.icon = WinJS.UI.AppBarIcon.remove;
                if (removeFromNowPlayingAction.isVoiceEnabled) {
                    removeFromNowPlayingAction.title = String.load(String.id.IDS_MUSIC2_REMOVE_TRACK_FROM_NOW_PLAYING_BUTTON_VUI_GUI);
                    removeFromNowPlayingAction.voicePhraseStringId = String.id.IDS_MUSIC2_REMOVE_TRACK_FROM_NOW_PLAYING_BUTTON_VUI_ALM;
                    removeFromNowPlayingAction.voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_REMOVE_TRACK_FROM_NOW_PLAYING_BUTTON_VUI_PRON
                }
                removeFromNowPlayingAction.transformParameter = function removeFromNowPlaying_transformParameter(parameter) {
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var parameters = {};
                    if (mediaContext.options && mediaContext.options.containingMedia) {
                        parameters.mediaItem = mediaContext.options.containingMedia.playbackItemSource;
                        parameters.key = mediaContext.options.containingMedia.playbackKey;
                        parameters.offset = mediaContext.options.containingMedia.playbackOffset
                    }
                    return parameters
                };
                return {action: removeFromNowPlayingAction}
            }, getDeletePlaylistAction: function getDeletePlaylistAction() {
                var deletePlaylistAction = new MS.Entertainment.UI.ToolbarAction;
                deletePlaylistAction.id = MS.Entertainment.UI.AppBarActions.deletePlaylist;
                deletePlaylistAction.title = String.load(String.id.IDS_DELETE_LABEL);
                deletePlaylistAction.icon = MS.Entertainment.UI.Icon.delete;
                deletePlaylistAction.automationId = MS.Entertainment.UI.AutomationIds.playlistDeletePlaylist;
                deletePlaylistAction.shouldAutomaticallySendTelemetry = false;
                deletePlaylistAction.executed = function executed() {
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var mediaItems = mediaContext.mediaItem;
                    var collectionFilter = mediaContext.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                    var options = mediaContext.options || {};
                    deletePlaylistAction.parameter = {
                        actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.canvas
                    };
                    return MS.Entertainment.UI.Controls.RemoveOverlay.show(mediaItems, collectionFilter).done(function overlayClosed(overlay) {
                            if (overlay && overlay.userControlInstance && overlay.userControlInstance.removed) {
                                if (mediaContext)
                                    mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.deletePlaylist, {deleted: overlay.userControlInstance.removed});
                                MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.mediaDeleted).mediaDeleted()
                            }
                        }, function onError(error) {
                            var message = error && error.message;
                            MS.Entertainment.UI.Actions.fail("Failure from remove playlist dialog: " + message)
                        })
                };
                deletePlaylistAction.canExecute = function canExecute() {
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var mediaItems = mediaContext.mediaItem;
                    return !!mediaItems
                };
                return {action: deletePlaylistAction}
            }, getRenamePlaylistAction: function getRenamePlaylistAction() {
                var renamePlaylistFlyoutAction = new MS.Entertainment.UI.ToolbarAction;
                renamePlaylistFlyoutAction.id = MS.Entertainment.UI.AppBarActions.renamePlaylist;
                renamePlaylistFlyoutAction.automationId = MS.Entertainment.UI.AutomationIds.playlistRenamePlaylistAction;
                renamePlaylistFlyoutAction.title = String.load(String.id.IDS_MUSIC_RENAME_PLAYLIST);
                renamePlaylistFlyoutAction.icon = WinJS.UI.AppBarIcon.edit;
                renamePlaylistFlyoutAction.shouldAutomaticallySendTelemetry = false;
                if (renamePlaylistFlyoutAction.isVoiceEnabled) {
                    renamePlaylistFlyoutAction.title = String.load(String.id.IDS_MUSIC_RENAME_PLAYLIST_BUTTON_VUI_GUI);
                    renamePlaylistFlyoutAction.voicePhraseStringId = String.id.IDS_MUSIC_RENAME_PLAYLIST_BUTTON_VUI_ALM;
                    renamePlaylistFlyoutAction.voicePhoneticPhraseStringId = String.id.IDS_MUSIC_RENAME_PLAYLIST_BUTTON_VUI_PRON
                }
                renamePlaylistFlyoutAction.executed = function executed(params) {
                    var renamePlaylist = new MS.Entertainment.UI.Actions.Playlists.RenamePlaylistAction;
                    renamePlaylist.shouldAutomaticallySendTelemetry = false;
                    renamePlaylist.execute()
                };
                renamePlaylistFlyoutAction.canExecute = function canExecute() {
                    return true
                };
                return {action: renamePlaylistFlyoutAction}
            }, queryPlaylistById: function queryPlaylistById(playlistId, isCloudId, ignoreCount) {
                var playlistQuery = new MS.Entertainment.Data.Query.libraryPlaylists;
                playlistQuery.isLive = false;
                if (isCloudId)
                    playlistQuery.cloudSyncItemId = playlistId;
                else
                    playlistQuery.playlistId = playlistId;
                return playlistQuery.getItemsArrayAndIgnoreErrors().then(function showPlaylistPopover(playlistsArray) {
                        var playlistsArrayLength = playlistsArray ? playlistsArray.length : 0;
                        if (playlistsArrayLength !== 1)
                            if (!playlistsArrayLength && ignoreCount)
                                return null;
                            else {
                                var error = new Error("Expected to retrieve a single playlist, but instead retrieved " + playlistsArrayLength);
                                return WinJS.Promise.wrapError(error)
                            }
                        return playlistsArray[0]
                    })
            }, getCloudPlaylist: function getCloudPlaylist(playlistId) {
                var getPlaylistQuery = new MS.Entertainment.Data.Query.Music.CloudPlaylist;
                getPlaylistQuery.id = playlistId;
                getPlaylistQuery.idType = MS.Entertainment.Data.Query.edsIdType.zuneCatalog;
                getPlaylistQuery.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.playlist);
                return getPlaylistQuery.execute().then(function returnPlaylist(queryResult) {
                        return queryResult.result || WinJS.Promise.wrapError("Playlist query failed.")
                    })
            }, CreatePlaylistAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function createPlaylistAction() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.playlistCreatePlaylistAction, supportsOverwrite: true, executed: function executed(param) {
                        var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        var playlistProvider = mediaStore.playlistProvider;
                        var createResult;
                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        var collectionFilter = mediaContext.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                        playlistProvider.createPlaylistAsync(Microsoft.Entertainment.Platform.PlaylistType.static, param.name, !!param.overwrite).then(function createdPlaylist(result) {
                            createResult = result;
                            return MS.Entertainment.Data.List.listToArray(param.mediaItems)
                        }).done(function addItems(mediaItems) {
                            if (createResult) {
                                if (mediaItems.length)
                                    MS.Entertainment.UI.Actions.Playlists._appendToPlaylist(createResult.playlistId, param.name, mediaItems, collectionFilter, param);
                                else if (param.showPlaylistPopover)
                                    MS.Entertainment.UI.Actions.Playlists.CreatePlaylistAction._showPlaylistPopover(createResult.playlistId)
                            }
                            else if (param.failedCallback)
                                param.failedCallback();
                            if (param.completeCallback)
                                param.completeCallback();
                            if (mediaContext)
                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.createNewPlaylist)
                        }, function error(e) {
                            if (param.failedCallback)
                                param.failedCallback()
                        })
                    }, canExecute: function canExecute(parameter) {
                        return parameter && parameter.name && parameter.name.trim().length > 0
                    }
            }, {_showPlaylistPopover: function _showPlaylistPopover(playlistId) {
                    MS.Entertainment.UI.Actions.Playlists.queryPlaylistById(playlistId).done(function _gotPlaylist(playlistToShow) {
                        if (playlistToShow) {
                            MS.Entertainment.UI.Controls.PopOver.dismissCurrentPopOver();
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var playlistDetailsNavigateAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playlistDetailsNavigate);
                            playlistDetailsNavigateAction.parameter = {
                                data: playlistToShow, location: MS.Entertainment.Data.ItemLocation.collection
                            };
                            return playlistDetailsNavigateAction.execute()
                        }
                    }, function _playlistQueryFailed(error) {
                        var message = error && error.message;
                        MS.Entertainment.UI.Actions.fail("Failed to show a playlist popover: " + message)
                    })
                }}), RenamePlaylistCompleteAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function renamePlaylistCompleteAction() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.playlistRenamePlaylistAction, executed: function executed(param) {
                        if (param.playlist.name === param.name) {
                            if (param.completeCallback)
                                param.completeCallback();
                            return
                        }
                        var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        var playlistProvider = mediaStore.playlistProvider;
                        playlistProvider.renamePlaylistAsync(param.playlist.libraryId, param.name).done(function success() {
                            param.playlist.name = param.name;
                            if (param.completeCallback)
                                param.completeCallback();
                            if (MS.Entertainment.Utilities.isMusicApp2) {
                                var pinnedList = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinnedList);
                                if (pinnedList.hasPin(param.playlist))
                                    pinnedList.deletePin(param.playlist).done(function rePinPlaylist() {
                                        pinnedList.addPin(param.playlist)
                                    }, function error(e) {
                                        MS.Entertainment.UI.Actions.fail("Failed to delete the pin: " + e.message)
                                    })
                            }
                        }, function error(e) {
                            if (param.failedCallback)
                                param.failedCallback()
                        })
                    }, canExecute: function canExecute(parameter) {
                        return parameter.playlist && parameter.playlist.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist
                    }
            }), CreatePlaylistFromNowPlayingAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function createPlaylistFromNowPlayingAction() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.playlistCreatePlaylistFromNowPlayingAction, supportsOverwrite: true, executed: function executed(param) {
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).nowPlayingSession.savePlaylist(param.name, !!param.overwrite, true).done(function completeCallback() {
                            if (param.completeCallback)
                                param.completeCallback()
                        }, function error(e) {
                            if (param.failedCallback)
                                param.failedCallback()
                        })
                    }, canExecute: function canExecute(parameter) {
                        return true
                    }
            }), RemoveFromPlaylistAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function removeFromPlaylistAction() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.playlistRemoveFromPlaylist, executed: function executed(param) {
                        var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                        var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        var playlistProvider = mediaStore.playlistProvider;
                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        var collectionFilter = mediaContext.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                        if (mediaItem) {
                            var index = param.index;
                            if (mediaContext) {
                                var returnValues = {updatedIndex: param.index};
                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.removeFromPlaylist, {
                                    removedIndices: [param.index], complete: false, returnValues: returnValues
                                });
                                index = returnValues.updatedIndex
                            }
                            playlistProvider.removePlaylistItemsAsync(mediaItem.playlistId, [index], collectionFilter).done(function complete() {
                                if (mediaContext)
                                    mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.removeFromPlaylist, {
                                        removedIndices: [index], complete: true
                                    })
                            })
                        }
                    }, canExecute: function canExecute(parameter) {
                        var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(parameter);
                        return mediaItem && mediaItem.playlistId
                    }
            }), RenamePlaylistAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function renamePlaylistAction() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.playlistRenamePlaylistAction, executed: function executed(param) {
                        var mediaItems = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        var completeAction = function completeAction() {
                                if (mediaContext)
                                    mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.renamePlaylist)
                            };
                        var options = mediaContext.options || {};
                        var executeLocation = options.executeLocation || MS.Entertainment.UI.Actions.ExecutionLocation.canvas;
                        if (!mediaItems)
                            mediaItems = mediaContext.mediaItem;
                        MS.Entertainment.Data.List.listToArray(mediaItems).done(function listToArray_Success(arrayMediaItems) {
                            MS.Entertainment.UI.Actions.assert(arrayMediaItems.length === 1, "Expected 1 array element, received: " + arrayMediaItems.length);
                            var appBar = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                            if (appBar)
                                appBar.hide();
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var namePlaylistAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.createPlaylist);
                            namePlaylistAction.automationId = MS.Entertainment.UI.AutomationIds.playlistRenamePlaylistNameEntry;
                            var referenceContainer = this.referenceContainer || {
                                    left: 0, bottom: 0
                                };
                            namePlaylistAction.referenceContainer = referenceContainer;
                            namePlaylistAction.action = new MS.Entertainment.UI.Actions.Playlists.RenamePlaylistCompleteAction;
                            namePlaylistAction.parameter = {
                                playlist: arrayMediaItems[0], defaultPlaylistName: arrayMediaItems[0].name, completeAction: completeAction, actionType: MS.Entertainment.UI.Actions.ActionWrapperType.appbarAction, executeLocation: executeLocation
                            };
                            namePlaylistAction.execute()
                        }.bind(this), function listToArray_Failed(error) {
                            var message = error && error.message;
                            MS.Entertainment.UI.Actions.fail("listToArray failed: " + message)
                        })
                    }, canExecute: function canExecute(parameter) {
                        return true
                    }
            }), SaveNowPlayingPlaylistAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function saveNowPlayingPlaylistAction() {
                this.base()
            }, {
                executed: function executed(param) {
                    var appBar = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                    if (appBar)
                        appBar.hide();
                    MS.Entertainment.UI.Actions.Playlists.SaveNowPlayingPlaylistAction._getPlaylistNameFromPlayContext().done(function _gotPlaylistName(defaultPlaylistName) {
                        MS.Entertainment.UI.Actions.assert(defaultPlaylistName, "Expected non-empty default playlist name for Save Now Playing action.");
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        var namePlaylistAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.createPlaylist);
                        namePlaylistAction.automationId = MS.Entertainment.UI.AutomationIds.playlistSaveNowPlayingPlaylistNameEntry;
                        var referenceContainer = this.referenceContainer || {
                                left: 0, bottom: 0
                            };
                        namePlaylistAction.referenceContainer = referenceContainer;
                        namePlaylistAction.action = new MS.Entertainment.UI.Actions.Playlists.CreatePlaylistFromNowPlayingAction;
                        namePlaylistAction.parameter = {
                            actionType: param.actionType, executeLocation: param.executeLocation, defaultPlaylistName: defaultPlaylistName
                        };
                        namePlaylistAction.execute()
                    }.bind(this))
                }, canExecute: function canExecute(parameter) {
                        return true
                    }
            }, {_getPlaylistNameFromPlayContext: function _getPlaylistNameFromPlayContext() {
                    var playlistNamePromise;
                    var playContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).playContext;
                    var shortDateFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).shortDate;
                    var shortDateString = shortDateFormatter.format(new Date);
                    if (playContext)
                        if (playContext.artistSeed) {
                            var playlistStringId = playContext.isSmartDJ ? String.id.IDS_MUSIC_NOW_PLAYING_SMART_DJ_LIST_NAME : String.id.IDS_MUSIC_NOW_PLAYING_TOP_SONGS_LIST_NAME;
                            playlistNamePromise = WinJS.Promise.wrap(String.load(playlistStringId).format(playContext.artistSeed.name, shortDateString))
                        }
                        else if (playContext.playlist)
                            if (typeof playContext.playlist === "number")
                                playlistNamePromise = MS.Entertainment.UI.Actions.Playlists.queryPlaylistById(playContext.playlist).then(function _playlistQuerySucceeded(playlist) {
                                    return playlist && playlist.name
                                }, function _playlistQueryFailed(error) {
                                    var errorMessage = error && error.message;
                                    MS.Entertainment.UI.Actions.fail("Failed to get the name of the provided playlist: " + errorMessage);
                                    return null
                                });
                            else
                                playlistNamePromise = WinJS.Promise.wrap(playContext.playlist.name);
                    return WinJS.Promise.as(playlistNamePromise).then(function _gotPlaylistName(playlistName) {
                            return playlistName || String.load(String.id.IDS_MUSIC_NOW_PLAYING_DEFAULT_LIST_NAME).format(shortDateString)
                        })
                }}), ShowPlaylistItemInformationAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function showPlaylistItemInformationAction() {
                this.base()
            }, {
                executed: function executed(param) {
                    var webLink = MS.Entertainment.UI.FWLink.learnMore;
                    var errorTitle = String.empty;
                    var errorMessage = String.empty;
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                        if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSubscription) || featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay)) {
                            errorTitle = String.load(String.id.IDS_PLAYLIST_ITEM_DIALOG_NOT_AVAILABLE_MARKETPLACE_ENABLED);
                            errorMessage = String.load(String.id.IDS_PLAYLIST_ITEM_DIALOG_NOT_MATCHED_MARKETPLACE_ENABLED)
                        }
                        else {
                            errorTitle = String.load(String.id.IDS_PLAYLIST_ITEM_DIALOG_NOT_AVAILABLE_MARKETPLACE_ENABLED);
                            errorMessage = String.load(String.id.IDS_PLAYLIST_ITEM_DIALOG_NOT_AVAILABLE_DTO_ONLY_MARKETPLACE_ENABLED)
                        }
                    else {
                        errorTitle = String.load(String.id.IDS_PLAYLIST_ITEM_DIALOG_NOT_AVAILABLE_MARKETPLACE_NOT_ENABLED);
                        errorMessage = String.load(String.id.IDS_PLAYLIST_ITEM_DIALOG_NOT_FOUND_MARKETPLACE_NOT_ENABLED)
                    }
                    MS.Entertainment.UI.Shell.showMessageLinkBox(errorTitle, errorMessage, webLink)
                }, canExecute: function canExecute(parameter) {
                        return true
                    }
            }), MoveTrackUpAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function moveTrackUp() {
                this.base();
                this.iconInfo = {
                    icon: MS.Entertainment.UI.Icon.upChevron, className: "trackListMoveUp"
                };
                this.executed = this.executed.bind(this);
                this.canExecute = this.canExecute.bind(this)
            }, {
                playlist: null, iconInfo: null, automationId: MS.Entertainment.UI.AutomationIds.playlistMoveTrackUp, executed: function executed(param) {
                        var currentIndex = param.index;
                        var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        var playlistProvider = mediaStore.playlistProvider;
                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        var collectionFilter = mediaContext.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                        playlistProvider.reorderPlaylistItemsAsync(this.playlist.libraryId, [currentIndex], (currentIndex - 1), collectionFilter).done(function postExecute() {
                            if (param.postExecute)
                                param.postExecute(currentIndex, currentIndex - 1)
                        })
                    }, canExecute: function canExecute(param) {
                        return (!!this.playlist && param.index > 0)
                    }
            }), MoveTrackDownAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function moveTrackDown() {
                this.base();
                this.iconInfo = {
                    icon: MS.Entertainment.UI.Icon.downChevron, className: "trackListMoveDown"
                };
                this.executed = this.executed.bind(this);
                this.canExecute = this.canExecute.bind(this)
            }, {
                playlist: null, iconInfo: null, automationId: MS.Entertainment.UI.AutomationIds.playlistMoveTrackDown, executed: function executed(param) {
                        var currentIndex = param.index;
                        var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        var playlistProvider = mediaStore.playlistProvider;
                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        var collectionFilter = mediaContext.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                        playlistProvider.reorderPlaylistItemsAsync(this.playlist.libraryId, [currentIndex], (currentIndex + 2), collectionFilter).done(function postExecute() {
                            {};
                            if (param.postExecute)
                                param.postExecute(currentIndex, currentIndex + 2)
                        })
                    }, canExecute: function canExecute(param) {
                        return (!!this.playlist && param.index < (this.playlist.count - 1))
                    }
            }), _appendToPlaylist: function _appendToPlaylist(playlistLibraryId, playlistName, inputMediaItemsArray, collectionFilter, params) {
                var playlistProvider;
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.mediaStore))
                    playlistProvider = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.mediaStore).getPlaylistProvider();
                else {
                    var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                    playlistProvider = mediaStore.playlistProvider
                }
                var libraryIds = [];
                var serviceMediaIds = [];
                var serviceMediaIdHash = {};
                var mediaTypes = [];
                var nonCollectionMediaItemsArray = [];
                var appendToPlaylist = function appendToPlaylist(mediaItemsArray) {
                        mediaItemsArray.forEach(function(mediaItem) {
                            if (mediaItem)
                                if (mediaItem.inCollection) {
                                    libraryIds.push(mediaItem.libraryId);
                                    var serviceId = !MS.Entertainment.Utilities.isEmptyGuid(mediaItem.zuneId) ? mediaItem.zuneId : MS.Entertainment.Utilities.EMPTY_GUID;
                                    serviceMediaIds.push(serviceId);
                                    serviceMediaIdHash[serviceId.toLowerCase()] = serviceId.toLowerCase();
                                    mediaTypes.push(mediaItem.mediaType)
                                }
                                else if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                                    nonCollectionMediaItemsArray.push(mediaItem)
                        });
                        var addItemsPromise;
                        if (nonCollectionMediaItemsArray.length > 0)
                            addItemsPromise = MS.Entertainment.Platform.PurchaseHelpers.addNonCollectionMediaToLibrary(nonCollectionMediaItemsArray).then(function mediaAddedToDb(result) {
                                libraryIds = libraryIds.concat(result.mediaIdentifiers.map(function _getLibraryId(item) {
                                    return item.libraryId
                                }));
                                mediaTypes = mediaTypes.concat(result.mediaIdentifiers.map(function _getLibraryType(item) {
                                    return item.libraryType
                                }));
                                serviceMediaIdHash = {};
                                serviceMediaIds = serviceMediaIds.concat(result.mediaIdentifiers.map(function getMediaId(item) {
                                    serviceMediaIdHash[item.mediaId.toLowerCase()] = item.mediaId.toLowerCase();
                                    return item.mediaId
                                }));
                                return WinJS.Promise.wrap({
                                        libraryIds: libraryIds, mediaTypes: mediaTypes, serviceMediaIds: serviceMediaIds, collectionFilter: Microsoft.Entertainment.Platform.MediaAvailability.undefined
                                    })
                            });
                        else
                            addItemsPromise = WinJS.Promise.wrap({
                                libraryIds: libraryIds, mediaTypes: mediaTypes, serviceMediaIds: serviceMediaIds, collectionFilter: collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined
                            });
                        addItemsPromise.then(function addItemsComplete(result) {
                            mediaItemsArray = mediaItemsArray.filter(function keepItem(item) {
                                var itemId = !MS.Entertainment.Utilities.isEmptyGuid(item.zuneId) ? item.zuneId : MS.Entertainment.Utilities.EMPTY_GUID;
                                return !!serviceMediaIdHash[itemId.toLowerCase()]
                            });
                            return playlistProvider.appendPlaylistItemsAsync(playlistLibraryId, result.libraryIds, result.serviceMediaIds, result.mediaTypes, result.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined)
                        }).done(function appendToPlaylistSucceeded() {
                            if (mediaItemsArray && mediaItemsArray.length && (!params || !params.suppressNotification))
                                MS.Entertainment.UI.Actions.Playlists._showPlaylistNotification(playlistLibraryId, mediaItemsArray, mediaItemsArray[0].mediaType, false, inputMediaItemsArray, playlistName);
                            MS.Entertainment.ViewModels.MediaItemModel.hydrateListLibraryInfoAsync(inputMediaItemsArray)
                        }, function appendToPlaylistFailed(error) {
                            var commandingPopoverOpen = MS.Entertainment.Utilities.isMusicApp2 && MS.Entertainment.UI.Controls.CommandingPopOver && MS.Entertainment.UI.Controls.CommandingPopOver.popoverOpen;
                            if (error.number === MS.Entertainment.UI.Actions.Playlists.ERROR_MAXIMUM_PLAYLIST_LENGTH_EXCEEDED) {
                                var maxPlaylistItemCount = (new Microsoft.Entertainment.Configuration.ConfigurationManager).groveler.maxPlaylistItemCount;
                                MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_CLOUD_SYNC_PLAYLIST_FULL_DIALOG_TITLE).format(playlistName), String.load(String.id.IDS_CLOUD_SYNC_PLAYLIST_FULL_DIALOG_MESSAGE).format(maxPlaylistItemCount));
                                if (commandingPopoverOpen)
                                    MS.Entertainment.UI.Controls.CommandingPopOver.hideCurrentCommandingPopover()
                            }
                            else if (commandingPopoverOpen) {
                                var notificationText = String.load(String.id.IDS_MUSIC2_PANEL_ADD_ERROR);
                                MS.Entertainment.UI.Controls.CommandingPopOver.displayPopoverNotification(notificationText, false)
                            }
                        })
                    };
                WinJS.Promise.join(inputMediaItemsArray.map(function expandToTracksIfNeeded(mediaItem) {
                    var returnPromise;
                    switch (mediaItem.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            if (!mediaItem.fromCollection) {
                                if (mediaItem.tracks)
                                    returnPromise = WinJS.Promise.as();
                                else
                                    returnPromise = mediaItem.hydrate();
                                returnPromise = returnPromise.then(function _getTracksArray() {
                                    return mediaItem.tracks ? mediaItem.tracks.toArrayAll() : []
                                })
                            }
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            if (!mediaItem.fromCollection || params.shouldUseTopSongsForArtistAddTo) {
                                var query = new MS.Entertainment.Data.Query.Music.ArtistTopSongs;
                                query.id = mediaItem.canonicalId;
                                query.impressionGuid = mediaItem.impressionGuid;
                                query.aggregateChunks = !MS.Entertainment.Utilities.isMusicApp2;
                                returnPromise = query.getItemsArrayAndIgnoreErrors()
                            }
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            return [mediaItem];
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            if (mediaItem && mediaItem.tracks)
                                if (Array.isArray(mediaItem.tracks))
                                    returnPromise = WinJS.Promise.as(mediaItem.tracks);
                                else
                                    returnPromise = mediaItem.tracks.toArrayAll();
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            if (mediaItem.hasTrackId) {
                                var trackMediaItem = mediaItem.track;
                                returnPromise = trackMediaItem.hydrate().then(function _returnMedia() {
                                    return [trackMediaItem]
                                })
                            }
                            break;
                        default:
                            MS.Entertainment.UI.Actions.fail("Unsupported mediaType to add to playlist");
                            break
                    }
                    return WinJS.Promise.as(returnPromise || [mediaItem])
                })).then(function result(items) {
                    return items
                }, function ignoreError(error) {
                    MS.Entertainment.UI.Actions.fail("Failed to expand media items in playlist actions");
                    return []
                }).done(function expandedItems(promiseResults) {
                    var items = [];
                    if (promiseResults)
                        if (promiseResults.length === 1)
                            items = promiseResults[0];
                        else if (promiseResults.length > 1)
                            items = Array.prototype.concat.apply(promiseResults[0], promiseResults.slice(1));
                    items = items.filter(this._validateItemNotBlocked);
                    appendToPlaylist(items)
                }.bind(this))
            }, _validateItemNotBlocked: function _validateItemNotBlocked(item) {
                var isBlocked = item && item.isParentallyBlocked;
                if (isBlocked)
                    item = null;
                return item
            }, _showPlaylistNotification: function _showPlaylistNotification(playlistLibraryId, mediaItems, mediaType, isNowPlaying, inputMediaItemsArray, playlistName, numMediaItemsAdded) {
                var string = String.empty;
                var numberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                var count = numMediaItemsAdded || (mediaItems && mediaItems.length);
                var formattedCount = numberFormatter.format(count);
                if (MS.Entertainment.UI.Controls.CommandingPopOver && MS.Entertainment.UI.Controls.CommandingPopOver.popoverOpen) {
                    var locationString = isNowPlaying ? String.load(String.id.IDS_MUSIC2_PANEL_ADD_NOW_PLAYING) : String.load(String.id.IDS_MUSIC2_PANEL_ADD_TO_PLAYLIST).format(playlistName);
                    var inputMediaItem = (inputMediaItemsArray && inputMediaItemsArray[0]) || (mediaItems && mediaItems[0]);
                    var inputMediaItemType = (inputMediaItem && typeof inputMediaItem.mediaType === "number") ? inputMediaItem.mediaType : mediaType;
                    switch (inputMediaItemType) {
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            string = String.load(String.id.IDS_MUSIC2_PANEL_ADD_1_ITEM).format(String.load(String.id.IDS_MUSIC2_PANEL_ADD_SONG), locationString);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            string = String.load(String.id.IDS_MUSIC2_PANEL_ADD_1_ITEM).format(String.load(String.id.IDS_MUSIC2_PANEL_ADD_ALBUM), locationString);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            string = String.load(String.id.IDS_MUSIC2_PANEL_ADD_1_ITEM).format(String.load(String.id.IDS_MEDIATYPE_ARTIST), locationString);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            string = String.load(String.id.IDS_MUSIC2_PANEL_ADD_1_ITEM).format(String.load(String.id.IDS_MUSIC2_PANEL_ADD_PLAYLIST), locationString);
                            break;
                        default:
                            MS.Entertainment.UI.Actions.fail("Unknown media type given to _showPlaylistNotification(). MediaType = " + mediaType);
                            break
                    }
                    MS.Entertainment.UI.Controls.CommandingPopOver.displayPopoverNotification(string, true)
                }
                else {
                    switch (mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            if (count === 1)
                                string = String.load(String.id.IDS_MUSIC_NOTIFICATION_1_TRACK_ADDED);
                            else
                                string = String.load(String.id.IDS_MUSIC_NOTIFICATION_N_TRACKS_ADDED).format(formattedCount);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            if (count === 1)
                                string = String.load(String.id.IDS_MUSIC_NOTIFICATION_1_ALBUM_ADDED);
                            else
                                string = String.load(String.id.IDS_MUSIC_NOTIFICATION_N_ALBUMS_ADDED).format(formattedCount);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            if (count === 1)
                                string = String.load(String.id.IDS_MUSIC_NOTIFICATION_1_ARTIST_ADDED);
                            else
                                string = String.load(String.id.IDS_MUSIC_NOTIFICATION_N_ARTISTS_ADDED).format(formattedCount);
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            string = MS.Entertainment.Formatters.playlistCountText(count);
                            break;
                        default:
                            MS.Entertainment.UI.Actions.fail("Unknown media type given to _showPlaylistNotification(). MediaType = " + mediaType);
                            break
                    }
                    var tapAction = null;
                    if (isNowPlaying) {
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation)) {
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            tapAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.nowPlayingNavigate);
                            tapAction.parameter = {clearHistory: true}
                        }
                    }
                    else
                        tapAction = WinJS.Utilities.markSupportedForProcessing(function navigateToCollection() {
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation)) {
                                var playlists = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playlists);
                                playlists.navigateToPlaylist(playlistLibraryId)
                            }
                            else {
                                var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                if (navigationService.currentPage.iaNode.moniker !== MS.Entertainment.UI.Monikers.musicCollection) {
                                    var navigated = null;
                                    if (MS.Entertainment.Utilities.isMusicApp1)
                                        navigated = navigationService.navigateTo(MS.Entertainment.UI.Monikers.musicCollection, MS.Entertainment.UI.Monikers.musicCollectionPlaylists, null, {selectHub: true});
                                    else
                                        navigated = navigationService.navigateTo(MS.Entertainment.UI.Monikers.musicPlaylistCollection);
                                    if (navigated)
                                        MS.Entertainment.UI.Actions.Playlists.CreatePlaylistAction._showPlaylistPopover(playlistLibraryId)
                                }
                                else
                                    MS.Entertainment.UI.Actions.Playlists.CreatePlaylistAction._showPlaylistPopover(playlistLibraryId)
                            }
                        });
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification).send(new MS.Entertainment.UI.Notification({
                        notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: String.load(isNowPlaying ? String.id.IDS_MUSIC_NOTIFICATION_ADDED_TO_NOW_PLAYING : String.id.IDS_MUSIC_NOTIFICATION_ADDED_TO_PLAYLIST), subTitle: string, moreDetails: null, icon: MS.Entertainment.UI.Icon.playlist, iconClassName: "icon-playlist", action: tapAction, category: "addToPlaylist", isPersistent: false
                    }))
                }
            }, playlistDataNotificationHandler: MS.Entertainment.UI.Framework.define(function playlistDataNotificationHandler(listUpdateCallback, itemChangedCallback) {
                this._listUpdateCallback = listUpdateCallback;
                this._itemChangedCallback = itemChangedCallback
            }, {
                _listUpdateCallback: null, _itemChangedCallback: null, _listChangedIndices: [], _itemChangedItems: [], dispose: function dispose() {
                        this._listUpdateCallback = null;
                        this._itemChangedCallback = null
                    }, inserted: function inserted(item, previousKey, nextKey, index) {
                        this._listChangedIndices.push(index)
                    }, changed: function changed(newItem, oldItem) {
                        this._itemChangedItems.push(newItem)
                    }, moved: function moved(item, previousKey, nextKey, oldIndex, newIndex){}, removed: function removed(key, index) {
                        this._listChangedIndices.push(index)
                    }, countChanged: function countChanged(newCount, oldCount){}, endNotifications: function endNotifications() {
                        if (this._listUpdateCallback && this._listChangedIndices.length) {
                            this._listUpdateCallback(this._listChangedIndices);
                            this._listChangedIndices = []
                        }
                        if (this._itemChangedCallback && this._itemChangedItems.length) {
                            this._itemChangedCallback(this._itemChangedItems);
                            this._itemChangedItems = []
                        }
                    }
            }), populateTimeout: 50
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.saveNowPlayingPlaylist, function() {
        return new MS.Entertainment.UI.Actions.Playlists.SaveNowPlayingPlaylistAction
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.renamePlaylist, function() {
        return new MS.Entertainment.UI.Actions.Playlists.RenamePlaylistAction
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.removeFromPlaylist, function() {
        return new MS.Entertainment.UI.Actions.Playlists.RemoveFromPlaylistAction
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.showPlaylistItemInformation, function() {
        return new MS.Entertainment.UI.Actions.Playlists.ShowPlaylistItemInformationAction
    })
})()
})();
/* >>>>>>/components/music/appbaractions.js:12856 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    WinJS.Namespace.define("MS.Entertainment.ViewModels.SmartAppbarActions", {
        defaultActions: {
            _defaultActions: null, get: function() {
                    if (!MS.Entertainment.ViewModels.SmartAppbarActions._defaultActions)
                        MS.Entertainment.ViewModels.SmartAppbarActions._defaultActions = [];
                    return MS.Entertainment.ViewModels.SmartAppbarActions._defaultActions
                }
        }, setDefaultGalleryEventHandlers: function setDefaultGalleryEventHandlers(clearSelectionCallback, removeCompleteCallback) {
                var eventHandlers = {};
                if (clearSelectionCallback) {
                    eventHandlers[MS.Entertainment.UI.AppBarActions.addToNowPlaying] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.addToPlaylist] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.addToMyMusic] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.addToOtherPlaylist] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.artistDetails] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.clearSelection] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.createNewPlaylist] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.exploreAlbum] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.playPreview] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.playSelection] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.previewSelection] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.playSmartDJ] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.deleteMedia] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.deleteSmartDJ] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.deletePlaylist] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.downloadFromMarketplace] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.subscriptionDownload] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.tryDownloadAgain] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.renamePlaylist] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.editMetadata] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.pinToStartScreen] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.unpinFromStartScreen] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.moveListItemToTop + "Executing"] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.moveListItemToBottom + "Executing"] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.findAlbumInfo] = clearSelectionCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.mediaProperties] = clearSelectionCallback
                }
                if (removeCompleteCallback) {
                    eventHandlers[MS.Entertainment.UI.AppBarActions.deleteMedia] = removeCompleteCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.deletePlaylist] = removeCompleteCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.removeFromPlaylist] = removeCompleteCallback;
                    eventHandlers[MS.Entertainment.UI.AppBarActions.removeFromList] = removeCompleteCallback
                }
                return eventHandlers
            }, _appBarActions: null, getAppbarActions: function getAppbarActions() {
                if (MS.Entertainment.ViewModels.SmartAppbarActions._appBarActions)
                    return MS.Entertainment.ViewModels.SmartAppbarActions._appBarActions;
                if (MS.Entertainment.Utilities.isMusicApp1)
                    MS.Entertainment.ViewModels.SmartAppbarActions._appBarActions = [MS.Entertainment.UI.Components.Shell.OpenFileAction.getOpenFileAction(), this.createPlaySelectionAppbarAction(MS.Entertainment.UI.AppBarActions.playContinuous), this.createPlaySelectionAppbarAction(MS.Entertainment.UI.AppBarActions.playSelection), this.createPlaySelectionAppbarAction(MS.Entertainment.UI.AppBarActions.previewSelection), this.createPlaySelectionAppbarAction(MS.Entertainment.UI.AppBarActions.playSelectionContinuous), this.createPlayDisabledAppbarAction(), this.createPlayTopSongsAppbarAction(), this.createTrackPlayPreviewAppbarAction(), this.createSaveNowPlayingPlaylistAppbarAction(), this.createAddToAppbarAction(String.id.IDS_MUSIC_ADD_TO_LIST_BUTTON), this.createRemoveFromPlaylistAppbarAction(), this.createRemoveFromNowPlayingAppbarAction(), this.createRemoveFromListAppbarAction(), this.createMoveListItemUpAppbarAction(), this.createMoveListItemDownAppbarAction(), this.createMoveListItemToTopAppbarAction(), this.createMoveListItemToBottomAppbarAction(), this.createArtistDetailsAppbarAction(), this.createPlaySmartDJAppbarAction(), this.createCollectionTrackAlbumPopoverAppbarAction(true), this.createRemoveDownloadAppbarAction(), this.createTryDownloadAgainAppbarAction(), this.createPurchaseTrackAppbarAction(), this.createPurchaseAlbumAppbarAction(), this.createRenamePlaylistAppbarAction(), this.createDeletePlaylistAppbarAction(), this.createImportPlaylistAppbarAction(), this.createPlayOnXboxAppbarAction(MS.Entertainment.UI.AppBarActions.playTrackOnXbox360), this.createPlayOnXboxAppbarAction(), this.createDownloadFromMarketplaceAppbarAction(), this.createSubscriptionDownloadAppbarAction(), this.createEditMetadataAppbarAction(), this.createDeleteMediaAppbarAction(), this.createPinToStartScreenAction(), this.createUnpinFromStartScreenAction(), this.createDeleteSmartDJAppbarAction(), this.createMediaPropertiesAppbarAction(), this.createFindAlbumInfoAppbarAction(), this.createShowPlaylistItemInformationAppbarAction(), this.createClearSelectionAppbarAction(), this.createSubscriptionSignupAction()];
                else
                    MS.Entertainment.ViewModels.SmartAppbarActions._appBarActions = [this.createPlaySelectionAppbarAction(MS.Entertainment.UI.AppBarActions.playContinuous), this.createTrackPlayPreviewAppbarAction(), this.createTrackPlayMusicVideoAppbarAction(), this.createPlayMusicVideoAppbarAction(), this.createAddSongToAppbarAction(), this.createRemoveFromListAppbarAction(), this.createRemoveFromPlaylistAppbarAction(), this.createRemoveFromNowPlayingAppbarAction(), this.createCollectionTrackAlbumPopoverAppbarAction(false), this.createArtistDetailsAppbarAction(), this.createPlaySmartDJAppbarAction(), this.createRenamePlaylistAppbarAction(), this.createDeleteMediaAppbarAction(), ];
                return MS.Entertainment.ViewModels.SmartAppbarActions._appBarActions
            }, getMultiSelectAppbarActions: function getMultiSelectAppbarActions(firstMediaItem) {
                var multiSelectItemActions = [];
                switch (firstMediaItem && firstMediaItem.mediaType) {
                    case Microsoft.Entertainment.Queries.ObjectType.playlist:
                        multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getMusicPlaylistMultiSelectActions(firstMediaItem);
                        break;
                    case Microsoft.Entertainment.Queries.ObjectType.album:
                    case Microsoft.Entertainment.Queries.ObjectType.track:
                    case Microsoft.Entertainment.Queries.ObjectType.person:
                        multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getMusicMultiSelectActions(firstMediaItem);
                        break;
                    default:
                        if (firstMediaItem.smartDJ)
                            multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getSmartDJMultiSelectActions();
                        break
                }
                return multiSelectItemActions
            }, getMusicMultiSelectActions: function getMusicMultiSelectActions(firstMediaItem) {
                var actions = new MS.Entertainment.UI.Actions.ActionArray;
                if (!firstMediaItem)
                    return actions;
                MS.Entertainment.ViewModels.assert(firstMediaItem.mediaType !== Microsoft.Entertainment.Queries.ObjectType.playlist && firstMediaItem.mediaType !== Microsoft.Entertainment.Queries.ObjectType.smartDJ, "Playlist and SmartDJ media items cannot be passed into this function");
                var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                var isFilteredToMusicPass = mediaContext.collectionFilter === Microsoft.Entertainment.Platform.MediaAvailability.musicPass;
                var fromCollection = firstMediaItem.fromCollection;
                var canStreamMarketplaceContent = this._canStreamMarketplaceContent();
                var playableFromCollection = fromCollection && (!isFilteredToMusicPass || canStreamMarketplaceContent);
                if ((firstMediaItem.mediaType !== Microsoft.Entertainment.Queries.ObjectType.person && canStreamMarketplaceContent) || playableFromCollection)
                    actions.push(MS.Entertainment.UI.AppBarActions.playSelection);
                var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                var canAddToNowPlaying = !sessionMgr.primarySession.smartDJSeed;
                if (canAddToNowPlaying)
                    if (firstMediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.person && fromCollection)
                        actions.pushSubAction(MS.Entertainment.UI.AppBarActions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addLocalArtistToNowPlaying);
                    else if (playableFromCollection || canStreamMarketplaceContent)
                        actions.pushSubAction(MS.Entertainment.UI.AppBarActions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                var canAddToMyMusic = this._canAddToMyMusic(firstMediaItem);
                if (playableFromCollection || canAddToMyMusic)
                    actions.pushSubAction(MS.Entertainment.UI.AppBarActions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                if (firstMediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && firstMediaItem.playlistItemId >= 0) {
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    if (mediaContext && mediaContext.options && mediaContext.options.containingMedia && mediaContext.options.containingMedia.editableItemSource)
                        actions.push(MS.Entertainment.UI.AppBarActions.removeFromList);
                    else
                        actions.push(MS.Entertainment.UI.AppBarActions.removeFromPlaylist)
                }
                else if (firstMediaItem.mediaType !== Microsoft.Entertainment.Queries.ObjectType.person && fromCollection)
                    actions.push(MS.Entertainment.UI.AppBarActions.deleteMedia);
                if (!fromCollection && firstMediaItem.mediaType !== Microsoft.Entertainment.Queries.ObjectType.person && canAddToMyMusic)
                    actions.pushSubAction(MS.Entertainment.UI.AppBarActions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic);
                if (actions.hasSubActions(MS.Entertainment.UI.AppBarActions.addTo))
                    actions.push(MS.Entertainment.UI.AppBarActions.addTo);
                var shouldAddDownloadAction = false;
                var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                var cloudCollectionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
                var isCloudCollectionV2Enabled = cloudCollectionService.isV2Enabled;
                if (firstMediaItem.mediaType !== Microsoft.Entertainment.Queries.ObjectType.person)
                    if (fromCollection && (signedInUserService.isSubscription || isCloudCollectionV2Enabled))
                        shouldAddDownloadAction = true;
                    else if (signedInUserService.isSubscription) {
                        var cloudServiceManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
                        var downloadOnAddToMyMusicCloud = cloudServiceManager.shouldDownloadOnAdd;
                        shouldAddDownloadAction = !downloadOnAddToMyMusicCloud
                    }
                if (shouldAddDownloadAction)
                    actions.push(MS.Entertainment.UI.AppBarActions.subscriptionDownload);
                actions.push(MS.Entertainment.UI.AppBarActions.clearSelection);
                return actions
            }, getMusicPlaylistMultiSelectActions: function getMusicPlaylistMultiSelectActions(firstMediaItem) {
                MS.Entertainment.ViewModels.assert(firstMediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist, "Invalid mediaType passed into function, mediaType: " + firstMediaItem.mediaType);
                var actions = new MS.Entertainment.UI.Actions.ActionArray;
                actions.push(MS.Entertainment.UI.AppBarActions.playSelection);
                actions.push(MS.Entertainment.UI.AppBarActions.addTo);
                actions.push(MS.Entertainment.UI.AppBarActions.deletePlaylist);
                actions.push(MS.Entertainment.UI.AppBarActions.clearSelection);
                actions.pushSubAction(MS.Entertainment.UI.AppBarActions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying);
                actions.pushSubAction(MS.Entertainment.UI.AppBarActions.addTo, MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist);
                var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                if (signedInUserService.isSubscription)
                    actions.push(MS.Entertainment.UI.AppBarActions.subscriptionDownload);
                return actions
            }, getSmartDJMultiSelectActions: function getMusicPlaylistMultiSelectActions() {
                return [MS.Entertainment.UI.AppBarActions.clearSelection, MS.Entertainment.UI.AppBarActions.deleteSmartDJ]
            }, _isRemoteSession: function _isRemoteSession(mediaItem) {
                var isRemoteSession = false;
                if (mediaItem.mediaType !== undefined) {
                    var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                    isRemoteSession = sessionMgr && sessionMgr.primarySession && sessionMgr.primarySession.isRemoteSession && sessionMgr.primarySession.isRemoteSession()
                }
                return isRemoteSession
            }, _hasSubscription: function _hasSubscription() {
                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                var isSignedIn = signInService.isSignedIn;
                var signedInUserHasSubscription = isSignedIn && signedInUserService.isSubscription;
                var musicSubscriptionEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSubscription);
                return musicSubscriptionEnabled && signedInUserHasSubscription
            }, _canStreamMarketplaceContent: function _canStreamMarketplaceContent() {
                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                var musicMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace);
                var freeStreamEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                return musicMarketplaceEnabled && (freeStreamEnabled || this._hasSubscription())
            }, _canAddToMyMusic: function _canAddToMyMusic(mediaItem) {
                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                var networkStatus = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.networkStatus);
                var musicMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace);
                var freeStreamEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                var musicMarketplaceConnected = musicMarketplaceEnabled && networkStatus.isEnabled(MS.Entertainment.UI.NetworkStatusService.NetworkedFeature.musicMarketplace);
                var canFreeStream = (freeStreamEnabled && musicMarketplaceConnected && (!this._isRemoteSession(mediaItem) || MS.Entertainment.Utilities.isWindowsBlue) && (mediaItem.mediaType !== Microsoft.Entertainment.Queries.ObjectType.track || MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(mediaItem)));
                return musicMarketplaceConnected && (canFreeStream || this._hasSubscription())
            }
    });
    WinJS.Namespace.define("MS.Entertainment.ViewModels.GlobalAppbarActions", {getGlobalCommandActions: function getGlobalCommandActions() {
            var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
            var playbackSession = sessionMgr.getSession(MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying);
            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
            var currentLocation = navigationService.currentPage.iaNode.moniker;
            var actions = [];
            if (currentLocation !== MS.Entertainment.UI.Monikers.root)
                actions.push(MS.Entertainment.ViewModels.GlobalAppbarActions.createNavigateToHomeAction());
            if (!uiStateService.nowPlayingConstrainedMode) {
                var searchAction = MS.Entertainment.ViewModels.GlobalAppbarActions.createSearchAction();
                searchAction.action.wrappedAction.startWithExistingQuery = true;
                actions.push(searchAction)
            }
            if (MS.Entertainment.Utilities.isMusicApp && playbackSession.currentMedia && currentLocation !== MS.Entertainment.UI.Monikers.fullScreenNowPlaying)
                actions.push(MS.Entertainment.ViewModels.GlobalAppbarActions.createNavigateToNowPlayingAction());
            if (MS.Entertainment.Utilities.isMusicApp2 && MS.Entertainment.Utilities.getUserConfigurationValue(MS.Entertainment.Utilities.UserConfigurationValues.musicVideosOpt)) {
                var contentRestrictionStateHandler = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionStateHandler);
                if (contentRestrictionStateHandler.canPlayUnratedContent)
                    actions.push(MS.Entertainment.ViewModels.GlobalAppbarActions.createToggleMusicVideoAction())
            }
            if (MS.Entertainment.Utilities.isApp2)
                actions.push(MS.Entertainment.ViewModels.GlobalAppbarActions.createHelpAction());
            if (MS.Entertainment.Utilities.isMusicApp2)
                actions.push(MS.Entertainment.ViewModels.GlobalAppbarActions.createAboutAction());
            return actions
        }})
})()
})();
/* >>>>>>/controls/music1/notificationflyout.js:13057 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                var Framework = MS.Entertainment.UI.Framework;
                var Utilities = MS.Entertainment.Utilities;
                MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
                {};
                {};
                (function(FlyoutAlignment) {
                    FlyoutAlignment[FlyoutAlignment["left"] = 1] = "left";
                    FlyoutAlignment[FlyoutAlignment["right"] = 2] = "right";
                    FlyoutAlignment[FlyoutAlignment["above"] = 3] = "above";
                    FlyoutAlignment[FlyoutAlignment["below"] = 4] = "below"
                })(Controls.FlyoutAlignment || (Controls.FlyoutAlignment = {}));
                var FlyoutAlignment = Controls.FlyoutAlignment;
                var NotificationFlyoutBase = (function(_super) {
                        __extends(NotificationFlyoutBase, _super);
                        function NotificationFlyoutBase() {
                            _super.apply(this, arguments);
                            this._autoDismissTimeOut = -1;
                            this._referenceDomElement = null;
                            this._referenceDomElementContainer = null;
                            this._text = null;
                            this._action = null;
                            this._description = null;
                            this._overlay = null;
                            this._uiStateHandlers = null;
                            this._overlayEventHandlers = null;
                            this._position = null;
                            this._margin = null;
                            this.flyoutWidth = 300;
                            this.flyoutHeight = 150;
                            this.flyoutAlignment = 3
                        }
                        Object.defineProperty(NotificationFlyoutBase.prototype, "text", {
                            get: function() {
                                return this._text
                            }, set: function(value) {
                                    this.updateAndNotify("text", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutBase.prototype, "action", {
                            get: function() {
                                return this._action
                            }, set: function(value) {
                                    this.updateAndNotify("action", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutBase.prototype, "description", {
                            get: function() {
                                return this._description
                            }, set: function(value) {
                                    this.updateAndNotify("description", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutBase.prototype, "referenceDomElement", {
                            get: function() {
                                return this._referenceDomElement
                            }, set: function(value) {
                                    this._referenceDomElement = value
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutBase.prototype, "referenceDomElementContainer", {
                            get: function() {
                                return this._referenceDomElementContainer
                            }, set: function(value) {
                                    this._referenceDomElementContainer = value
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutBase.prototype, "overlay", {
                            get: function() {
                                return this._overlay
                            }, set: function(value) {
                                    this._overlay = value
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutBase.prototype, "position", {
                            get: function() {
                                if (!this._position)
                                    this._position = this._getPosition();
                                return this._position
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutBase.prototype, "margin", {
                            get: function() {
                                if (!this._margin)
                                    this._margin = {
                                        top: 0, bottom: 0, left: 0, right: 0
                                    };
                                return this._margin
                            }, set: function(value) {
                                    this._margin = value
                                }, enumerable: true, configurable: true
                        });
                        NotificationFlyoutBase.prototype.showFlyout = function() {
                            var _this = this;
                            if (this.overlay || !this._referenceDomElementVisible())
                                return;
                            var position = this.position;
                            var overlayOptions = {
                                    left: position.left, top: position.top, right: position.right, bottom: position.bottom, enableKeyboardLightDismiss: true, persistOnNavigate: false
                                };
                            this.overlay = UI.Shell.createOverlay("MS.Entertainment.UI.Controls.NotificationFlyoutDisplay", {
                                templateStorage: this._templateStorage, templateName: this._templateName, text: this.text, description: this.description, action: this.action
                            }, overlayOptions);
                            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            this._uiStateHandlers = MS.Entertainment.Utilities.addEventHandlers(uiStateService, {windowresize: this._hideOverlay.bind(this)});
                            this._overlayEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this.overlay.domElement, {focusout: this._hideOverlay.bind(this)});
                            this._addAlignmentClass();
                            this.overlay.show().then(null, function(error){}).done(function() {
                                _this._cleanupOverlay()
                            });
                            if (this._autoDismissTimeOut > 0)
                                WinJS.Promise.timeout(this._autoDismissTimeOut).done(function() {
                                    _this._hideOverlay()
                                })
                        };
                        NotificationFlyoutBase.prototype._getPosition = function() {
                            var position;
                            if (this.referenceDomElement)
                                if (this.flyoutAlignment === 3 || this.flyoutAlignment === 4)
                                    position = this._getVerticallyAlignedPosition();
                                else if (this.flyoutAlignment === 1 || this.flyoutAlignment === 2)
                                    position = this._getHorizontallyAlignedPosition();
                            return position
                        };
                        NotificationFlyoutBase.prototype._referenceDomElementVisible = function() {
                            var isVisible = true;
                            if (this.referenceDomElement && this.referenceDomElementContainer) {
                                Controls.assert(this.referenceDomElementContainer.contains(this.referenceDomElement), "referenceDomElementContainer should contain the referenceDomElement");
                                isVisible = Utilities.isElementInViewportOfParent(this.referenceDomElement, this.referenceDomElementContainer)
                            }
                            return isVisible
                        };
                        NotificationFlyoutBase.prototype._addAlignmentClass = function() {
                            switch (this.flyoutAlignment) {
                                case 3:
                                    Utilities.safeAddClass(this.overlay.domElement, "state_positionTop");
                                    break;
                                case 4:
                                    Utilities.safeAddClass(this.overlay.domElement, "state_positionBottom");
                                    break;
                                case 2:
                                    Utilities.safeAddClass(this.overlay.domElement, "state_positionRight");
                                    break;
                                case 1:
                                    Utilities.safeAddClass(this.overlay.domElement, "state_positionLeft");
                                    break
                            }
                        };
                        NotificationFlyoutBase.prototype._getVerticallyAlignedPosition = function() {
                            var position = {
                                    top: String.empty, bottom: String.empty, left: String.empty, right: String.empty
                                };
                            var screenHeight = Utilities.getWindowHeight();
                            var screenWidth = Utilities.getWindowWidth();
                            var boundingRectangle = this.referenceDomElement.getBoundingClientRect();
                            var rightEdge = 0;
                            var leftEdge = 0;
                            if ((this.flyoutAlignment === 4 && Math.round(boundingRectangle.bottom + this.flyoutHeight + this.margin.top) > screenHeight) || (this.flyoutAlignment === 3 && Math.round(boundingRectangle.top - this.flyoutHeight - this.margin.bottom) < 0)) {
                                position.top = Math.round(boundingRectangle.bottom + this.margin.top) + "px";
                                this.flyoutAlignment = 4
                            }
                            else if ((this.flyoutAlignment === 4 && Math.round(boundingRectangle.bottom + this.flyoutHeight + this.margin.top) < screenHeight) || (this.flyoutAlignment === 3 && Math.round(boundingRectangle.top - this.flyoutHeight - this.margin.bottom) > 0)) {
                                position.bottom = Math.round(screenHeight - boundingRectangle.top + this.margin.bottom) + "px";
                                this.flyoutAlignment = 3
                            }
                            Controls.assert(position.top !== String.empty || position.bottom !== String.empty, "Not enough room to place notification flyout given the alignment and margins defined.");
                            if (MS.Entertainment.Utilities.getTextDirection() === Utilities.TextDirections.RightToLeft) {
                                rightEdge = screenWidth - Math.round(boundingRectangle.right) - this.margin.right;
                                if (this.flyoutWidth)
                                    rightEdge = Utilities.getEdgeWithinViewport(rightEdge, this.flyoutWidth, screenWidth);
                                position.right = rightEdge + "px"
                            }
                            else {
                                leftEdge = Math.round(boundingRectangle.left) - this.margin.left;
                                if (this.flyoutWidth)
                                    leftEdge = Utilities.getEdgeWithinViewport(leftEdge, this.flyoutWidth, screenWidth);
                                position.left = leftEdge + "px"
                            }
                            return position
                        };
                        NotificationFlyoutBase.prototype._getHorizontallyAlignedPosition = function() {
                            var position = {
                                    top: String.empty, bottom: String.empty, left: String.empty, right: String.empty
                                };
                            var screenWidth = Utilities.getWindowWidth();
                            var rightEdge = 0;
                            var leftEdge = 0;
                            var boundingRectangle = this.referenceDomElement.getBoundingClientRect();
                            var textDirection = MS.Entertainment.Utilities.getTextDirection();
                            if ((this.flyoutAlignment === 1 && Math.round(boundingRectangle.left - this.margin.right - this.flyoutWidth) >= 0 && textDirection !== Utilities.TextDirections.RightToLeft) || (this.flyoutAlignment === 2 && Math.round(boundingRectangle.right + this.margin.left + this.flyoutWidth) > screenWidth && textDirection !== Utilities.TextDirections.RightToLeft) || (this.flyoutAlignment === 2 && Math.round(boundingRectangle.left - this.margin.right - this.flyoutWidth) > 0 && textDirection === Utilities.TextDirections.RightToLeft) || (this.flyoutAlignment === 1 && Math.round(boundingRectangle.right + this.margin.left + this.flyoutWidth) > screenWidth && textDirection === Utilities.TextDirections.RightToLeft)) {
                                leftEdge = screenWidth - Math.round(boundingRectangle.left) + this.margin.right;
                                if (this.flyoutWidth)
                                    leftEdge = Utilities.getEdgeWithinViewport(leftEdge, this.flyoutWidth, screenWidth);
                                position.right = leftEdge + "px";
                                this.flyoutAlignment = 1
                            }
                            else if ((this.flyoutAlignment === 1 && Math.round(boundingRectangle.left - this.margin.right - this.flyoutWidth) < 0 && textDirection !== Utilities.TextDirections.RightToLeft) || (this.flyoutAlignment === 2 && Math.round(boundingRectangle.right + this.margin.left + this.flyoutWidth) < screenWidth && textDirection !== Utilities.TextDirections.RightToLeft) || (this.flyoutAlignment === 2 && Math.round(boundingRectangle.left - this.margin.right - this.flyoutWidth) < 0 && textDirection === Utilities.TextDirections.RightToLeft) || (this.flyoutAlignment === 1 && Math.round(boundingRectangle.right + this.margin.left + this.flyoutWidth) < screenWidth && textDirection === Utilities.TextDirections.RightToLeft)) {
                                rightEdge = Math.round(boundingRectangle.right) + this.margin.left;
                                if (this.flyoutWidth)
                                    rightEdge = Utilities.getEdgeWithinViewport(rightEdge, this.flyoutWidth, screenWidth);
                                position.left = rightEdge + "px";
                                this.flyoutAlignment = 2
                            }
                            Controls.assert(position.left !== String.empty || position.right !== String.empty, "Not enough room to place notification flyout given the alignment and margins defined.");
                            var topEdge = boundingRectangle.top + this.margin.top;
                            if (topEdge < 0)
                                topEdge = 0;
                            position.top = topEdge + "px";
                            return position
                        };
                        NotificationFlyoutBase.prototype._cleanupOverlay = function() {
                            if (this._uiStateHandlers) {
                                this._uiStateHandlers.cancel();
                                this._uiStateHandlers = null
                            }
                            if (this._overlayEventHandlers) {
                                this._overlayEventHandlers.cancel();
                                this._overlayEventHandlers = null
                            }
                            this.overlay = null
                        };
                        NotificationFlyoutBase.prototype._hideOverlay = function() {
                            if (this.overlay)
                                this.overlay.hide()
                        };
                        return NotificationFlyoutBase
                    })(Framework.ObservableBase);
                Controls.NotificationFlyoutBase = NotificationFlyoutBase;
                var NotificationFlyoutDisplay = (function(_super) {
                        __extends(NotificationFlyoutDisplay, _super);
                        function NotificationFlyoutDisplay() {
                            _super.apply(this, arguments)
                        }
                        Object.defineProperty(NotificationFlyoutDisplay.prototype, "templateStorage", {
                            get: function() {
                                return this._templateStorage
                            }, set: function(value) {
                                    this._templateStorage = value
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutDisplay.prototype, "templateName", {
                            get: function() {
                                return this._templateName || "control-notificationFlyoutDisplay"
                            }, set: function(value) {
                                    this._templateName = value
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutDisplay.prototype, "text", {
                            get: function() {
                                return this._text
                            }, set: function(value) {
                                    this.updateAndNotify("text", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutDisplay.prototype, "action", {
                            get: function() {
                                return this._action
                            }, set: function(value) {
                                    this.updateAndNotify("action", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(NotificationFlyoutDisplay.prototype, "description", {
                            get: function() {
                                return this._description
                            }, set: function(value) {
                                    this.updateAndNotify("description", value)
                                }, enumerable: true, configurable: true
                        });
                        return NotificationFlyoutDisplay
                    })(Framework.UserControl);
                Controls.NotificationFlyoutDisplay = NotificationFlyoutDisplay
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/controls/music1/mediastatusflyout.js:13353 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                var MediaStatusFlyout = (function(_super) {
                        __extends(MediaStatusFlyout, _super);
                        function MediaStatusFlyout() {
                            _super.apply(this, arguments);
                            this._templateStorage = "/Controls/Music1/MediaStatusFlyout.html";
                            this._templateName = "templateid-mediaStatusFlyout"
                        }
                        return MediaStatusFlyout
                    })(Controls.NotificationFlyoutBase);
                Controls.MediaStatusFlyout = MediaStatusFlyout
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/controls/music/createplaylistflyout.js:13389 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function(undefined) {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {CreatePlaylistFlyout: MS.Entertainment.UI.Framework.defineUserControl("Controls/Music/CreatePlaylistFlyout.html#createPlaylistFlyoutTemplate", function createPlaylistFlyout(){}, {
            _dialog: null, _eventHandlers: null, _appBar: null, _appBarEventHandlers: null, _replacePlaylist: false, actionParameters: null, overrideActionFunction: null, saveButtonString: {get: function _getSaveButtonString() {
                        var saveButtonStringId = this._replacePlaylist ? String.id.IDS_PLAYLIST_CREATE_REPLACE : String.id.IDS_SAVE_BUTTON;
                        return String.load(saveButtonStringId)
                    }}, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.CreatePlaylistFlyout.flyoutOpened = true;
                    this._editBox.bind("isValid", this._updateState.bind(this));
                    this._eventHandlers = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                        keypress: function onKeyPress(event) {
                            if (event.keyCode === WinJS.Utilities.Key.enter) {
                                this.onClick();
                                event.stopPropagation();
                                event.preventDefault()
                            }
                            else if (event.keyCode === WinJS.Utilities.Key.escape) {
                                this._dialog.hide();
                                MS.Entertainment.UI.Controls.CreatePlaylistFlyout.flyoutOpened = false
                            }
                        }.bind(this), keyup: function onKeyUp(event) {
                                if (event.keyCode === WinJS.Utilities.Key.dismissButton)
                                    this._dialog.hide()
                            }.bind(this)
                    });
                    this._editBox.setFocus(true)
                }, unload: function unload() {
                    if (this._eventHandlers) {
                        this._eventHandlers.cancel();
                        this._eventHandlers = null
                    }
                    if (this._appBarEventHandlers) {
                        this._appBarEventHandlers.cancel();
                        this._appBarEventHandlers = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this);
                    MS.Entertainment.UI.Controls.CreatePlaylistFlyout.flyoutOpened = false
                }, onClick: function onClick(event) {
                    this._editBox.onChanged();
                    if (this._editBox.isValid && this._editBox.value) {
                        var parameter = {
                                name: this._editBox.value, mediaItems: (this.actionParameters ? this.actionParameters.mediaItems : null), playlist: (this.actionParameters ? this.actionParameters.playlist : null), showPlaylistPopover: (this.actionParameters ? this.actionParameters.showPlaylistPopover : true), completeCallback: this._completedCallback.bind(this), failedCallback: this._failedCallback.bind(this), overwrite: this._replacePlaylist, shouldUseTopSongsForArtistAddTo: this.actionParameters && this.actionParameters.shouldUseTopSongsForArtistAddTo
                            };
                        this.action.parameter = parameter;
                        this.action.execute()
                    }
                }, setOverlay: function setOverlay(dialog) {
                    this._dialog = dialog;
                    this._dialog.customStyle = "addPlaylistFlyout";
                    dialog.setAccessibilityTitle(String.load(String.id.IDS_PLAYLIST_NAME_TITLE));
                    if (this.actionParameters && this.actionParameters.defaultPlaylistName) {
                        this._editBox.value = this.actionParameters.defaultPlaylistName;
                        this._button.disabled = false
                    }
                }, _updateState: function _updateState(valid, wasValid) {
                    this._button.disabled = !valid && !this._editBox.value;
                    if (this.action.supportsOverwrite && valid && !wasValid) {
                        var oldValue = this.saveButtonString;
                        this._replacePlaylist = false;
                        this.notify("saveButtonString", this.saveButtonString, oldValue)
                    }
                }, _completedCallback: function _completedCallback() {
                    if (this.actionParameters && this.actionParameters.completeAction)
                        this.actionParameters.completeAction();
                    if (this._dialog) {
                        this._dialog.hide();
                        MS.Entertainment.UI.Controls.CreatePlaylistFlyout.flyoutOpened = false
                    }
                }, _failedCallback: function _failedCallback() {
                    if (!this._editBox)
                        return;
                    if (this.action.supportsOverwrite) {
                        this._editBox.setError(String.load(String.id.IDS_PLAYLIST_CREATE_DUPLICATE_MESSAGE));
                        var oldValue = this.saveButtonString;
                        this._replacePlaylist = true;
                        this.notify("saveButtonString", this.saveButtonString, oldValue)
                    }
                    else
                        this._editBox.setError(String.load(String.id.IDS_PLAYLIST_EXISTING_NAME))
                }
        }, {flyoutOpened: false}, {getMaxTitleLength: {get: function() {
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var length = configurationManager.groveler.maxPlaylistTitleLength;
                    if (length < 10)
                        length = 10;
                    return length
                }}})})
})()
})();
/* >>>>>>/components/immersivedetails/showimmersivedetailsaction.js:13481 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {ShowImmersiveDetails: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function showImmersiveDetails() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.showImmersiveDetails, executed: function executed(param) {
                    MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PlayCommand);
                    var listOrMediaItem = this._extractMediaItem(param);
                    var showDetails = (param) ? param.showDetails : undefined;
                    var sessionId = (param && param.sessionId) ? param.sessionId : MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying;
                    var autoPlay = (param) ? param.autoPlay : undefined;
                    var hub = (param) ? param.hub : undefined;
                    var options = (param) ? param.options : {};
                    var startFullScreen = (param) ? param.startFullScreen : false;
                    var appView = Windows.UI.ViewManagement.ApplicationView;
                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    var startPositionMsec = (param) ? param.startPositionMsec : undefined;
                    if (uiStateService.isSnapped && !appView.tryUnsnap())
                        return;
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).then(function showImmersiveDetails(mediaItem) {
                        MS.Entertainment.UI.Actions.assert(mediaItem, "MS.Entertainment.Data.List.getData did not return a valid mediaItem");
                        var automationId = WinJS.Utilities.getMember("automationId", param);
                        if (autoPlay && (automationId === MS.Entertainment.UI.AutomationIds.smartButtonPlay || automationId === MS.Entertainment.UI.AutomationIds.smartButtonRestart || automationId === MS.Entertainment.UI.AutomationIds.smartButtonResume)) {
                            MS.Entertainment.Utilities.Telemetry.setCorrelationId(mediaItem.serviceId);
                            var telemetryParameterArray = [{
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: MS.Entertainment.Utilities.Telemetry.getCorrelationId(mediaItem.serviceId)
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: mediaItem.zuneId || mediaItem.serviceId || String.empty
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                                    }, {
                                        parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AutomationId, parameterValue: param.automationId || String.empty
                                    }];
                            if (mediaItem.seasonServiceId || mediaItem.canonicalSeasonId)
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ParentProductGuid, parameterValue: mediaItem.seasonServiceId || mediaItem.canonicalSeasonId || String.empty
                                });
                            MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: WinJS.Utilities.getMember("referenceContainer.domElement.parentElement.parentElement", this)}, {
                                uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Details
                            }, null, telemetryParameterArray)
                        }
                        if (param && param.playPreviewOnly)
                            mediaItem.playPreviewOnly = true;
                        else if ("playPreviewOnly" in mediaItem)
                            mediaItem.playPreviewOnly = false;
                        if (param && param.hydrateMediaItem)
                            mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                        if (autoPlay && (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.game || !mediaItem.inCollection))
                            MS.Entertainment.Utilities.Telemetry.logPlayPreview(mediaItem, false);
                        if (autoPlay && (((MS.Entertainment.Utilities.isVideoApp) && MS.Entertainment.Platform.PlaybackHelpers.isMovie(mediaItem)) || ((MS.Entertainment.Utilities.isMusicApp) && MS.Entertainment.Platform.PlaybackHelpers.isMusicTrackOrMusicVideo(mediaItem)))) {
                            MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayProtectedInApp();
                            MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayNonProtectedInApp()
                        }
                        if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage()) {
                            var destination = "Details";
                            if (autoPlay)
                                destination = mediaItem.inCollection ? "Play" : "PlayPreview";
                            if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason || MS.Entertainment.Platform.PlaybackHelpers.isTVEpisode(mediaItem)) {
                                var seriesMediaItem = mediaItem;
                                if (seriesMediaItem.seriesId) {
                                    var seriesData = {
                                            libraryId: mediaItem.seriesLibraryId, Name: mediaItem.seriesTitle
                                        };
                                    if (mediaItem.seriesIdType && mediaItem.seriesIdType === MS.Entertainment.Data.Query.edsIdType.zuneCatalog)
                                        seriesData.ZuneId = mediaItem.seriesId;
                                    else
                                        seriesData.ID = mediaItem.seriesId;
                                    seriesMediaItem = MS.Entertainment.Data.augment(seriesData, MS.Entertainment.Data.Augmenter.Marketplace.EdsTVSeries);
                                    seriesMediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(seriesMediaItem)
                                }
                                else if (seriesMediaItem.canonicalSeriesId) {
                                    seriesMediaItem = MS.Entertainment.Data.augment({
                                        ID: mediaItem.canonicalSeriesId, title: {$value: mediaItem.canonicalSeriesTitle}
                                    }, MS.Entertainment.Data.Augmenter.Marketplace.EdsTVSeries);
                                    seriesMediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(seriesMediaItem)
                                }
                                seriesMediaItem.hydrate().then(function logSeasonSearchExit() {
                                    MS.Entertainment.Utilities.Telemetry.logSearchExit(seriesMediaItem)
                                })
                            }
                            else
                                MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem)
                        }
                        if (param.showNowPlaying)
                            MS.Entertainment.Platform.PlaybackHelpers.showImmersive(null, {
                                sessionId: sessionId, startFullScreen: startFullScreen
                            });
                        else
                            MS.Entertainment.Platform.PlaybackHelpers.showImmersiveDetails(mediaItem, showDetails, autoPlay, hub, options, undefined, undefined, undefined, undefined, startPositionMsec)
                    }.bind(this))
                }, canExecute: function canExecute(param) {
                    return true
                }, _extractMediaItem: function _extractMediaItem(param) {
                    var mediaItem;
                    if (param && "mediaItem" in param)
                        mediaItem = param.mediaItem;
                    else if (param && "data" in param)
                        mediaItem = param.data;
                    else if (param)
                        mediaItem = param;
                    else {
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        if (sessionMgr && sessionMgr.nowPlayingSession && sessionMgr.primarySession.currentMedia)
                            mediaItem = sessionMgr.nowPlayingSession.currentMedia
                    }
                    return mediaItem
                }
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.showImmersiveDetails, function() {
        return new MS.Entertainment.UI.Actions.ShowImmersiveDetails
    })
})()
})();
/* >>>>>>/components/shell/mediacontext.js:13600 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI");

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Data = MS.Entertainment.Data;
            var ContainingMedia = (function() {
                    function ContainingMedia() {
                        this._playbackOffset = 0;
                        this._playbackKey = null
                    }
                    Object.defineProperty(ContainingMedia.prototype, "playbackOffset", {
                        get: function() {
                            return this._playbackOffset
                        }, set: function(value) {
                                this._playbackOffset = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ContainingMedia.prototype, "playbackKey", {
                        get: function() {
                            return this._playbackKey
                        }, set: function(value) {
                                this._playbackKey = value
                            }, enumerable: true, configurable: true
                    });
                    ContainingMedia.prototype.copy = function(destination) {
                        var result = destination || new ContainingMedia;
                        result.playbackItemSource = this.playbackItemSource;
                        result.playbackOffset = this.playbackOffset;
                        result.playbackKey = this.playbackKey;
                        result.playbackSelectionRanges = this.playbackSelectionRanges;
                        return result
                    };
                    return ContainingMedia
                })();
            UI.ContainingMedia = ContainingMedia;
            var EditableContainingMedia = (function(_super) {
                    __extends(EditableContainingMedia, _super);
                    function EditableContainingMedia() {
                        _super.apply(this, arguments)
                    }
                    Object.defineProperty(EditableContainingMedia.prototype, "playbackOffset", {
                        get: function() {
                            var offset = this._playbackOffset;
                            if (this.playbackKey && this.editableItemSource && this.editableItemSource instanceof Data.VirtualList)
                                offset = this.editableItemSource.indexFromKey(this.playbackKey);
                            return offset
                        }, set: function(value) {
                                this._playbackOffset = value
                            }, enumerable: true, configurable: true
                    });
                    EditableContainingMedia.prototype.copy = function(destination) {
                        var result = _super.prototype.copy.call(this, destination || new EditableContainingMedia);
                        if (result instanceof EditableContainingMedia)
                            result.editableItemSource = this.editableItemSource;
                        {};
                        return result
                    };
                    return EditableContainingMedia
                })(ContainingMedia);
            UI.EditableContainingMedia = EditableContainingMedia
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/music/musiccollectionverticaltemplates.js:13680 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {MusicCollectionTemplates: {
            albumsAlpha: {
                template: "/Components/Music/MusicCollectionTemplates.html#verticalAlbumItemAlphaSortTemplate", headerTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleHeaderTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, panelTemplate: "MS.Entertainment.Pages.MusicAlbumInlineDetails", panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, minimumListLength: 2, grouperItemThreshold: -1, grouped: true, groupHeaderPosition: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.left, grouperType: MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper, grouperField: "sortName", forceInteractive: true, allowSelectAll: true, allowZoom: true, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_ALBUM_PLURAL}
            }, albumsArtists: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalAlbumItemArtistNameSortTemplate", headerTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleHeaderTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, panelTemplate: "MS.Entertainment.Pages.MusicAlbumInlineDetails", panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, minimumListLength: 2, grouperItemThreshold: -1, grouped: true, groupHeaderPosition: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.left, grouperType: MS.Entertainment.UI.Controls.GalleryMediaItemSubGrouper, grouperField: "artistGroupId", grouperTitlePropertyName: "artist.name", grouperParentKeyPropertyName: "title", grouperKeyAsData: false, forceInteractive: true, allowSelectAll: true, allowZoom: true, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_ALBUM_PLURAL}
                }, albumsDateAdded: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalAlbumItemDateAddedSortTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, panelTemplate: "MS.Entertainment.Pages.MusicAlbumInlineDetails", panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, minimumListLength: 2, grouperItemThreshold: -1, grouped: false, grouperType: MS.Entertainment.UI.Controls.GalleryTitleParentGrouper, grouperTitlePropertyName: "yearOrMonthAdded", grouperKeyAsData: false, forceInteractive: true, allowSelectAll: true, allowZoom: true, allowHeaders: false, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_ALBUM_PLURAL}
                }, albumsReleaseYear: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalAlbumItemReleaseYearSortTemplate", headerTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleHeaderTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, panelTemplate: "MS.Entertainment.Pages.MusicAlbumInlineDetails", panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, minimumListLength: 2, grouperItemThreshold: -1, grouped: true, groupHeaderPosition: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.left, grouperType: MS.Entertainment.UI.Controls.GalleryYearGrouper, grouperField: "releaseDate", forceInteractive: true, allowSelectAll: true, allowZoom: true, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_ALBUM_PLURAL}
                }, albumsGenre: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalAlbumItemGenreSortTemplate", headerTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleHeaderTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, panelTemplate: "MS.Entertainment.Pages.MusicAlbumInlineDetails", panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, grouped: true, groupHeaderPosition: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.left, grouperType: MS.Entertainment.UI.Controls.GalleryMediaItemGrouper, minimumListLength: 2, grouperItemThreshold: -1, grouperField: "genreGroupId", grouperTitlePropertyName: "genreName", grouperKeyAsData: false, hideShadow: true, forceInteractive: true, allowSelectAll: true, allowZoom: true, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_ALBUM_PLURAL}
                }, artists: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalArtistItemTemplate", headerTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleHeaderTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, panelTemplate: "MS.Entertainment.Pages.MusicArtistInlineDetails", panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, grouped: true, grouperType: MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper, minimumListLength: 2, grouperItemThreshold: -1, grouperField: "sortName", hideShadow: true, forceInteractive: true, allowSelectAll: true, allowZoom: true, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_ARTIST_PLURAL}
                }, songsDateAdded: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalSongItemDateAddedSortTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", tap: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly, layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, invokeBehavior: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline, invokeHelperFactory: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.create, forceInteractive: true, minimumListLength: 2, grouperItemThreshold: -1, grouped: false, grouperType: MS.Entertainment.UI.Controls.GalleryTitleParentGrouper, grouperTitlePropertyName: "yearOrMonthAdded", grouperKeyAsData: false, hideShadow: true, allowZoom: true, allowHeaders: false, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL}
                }, songsAlpha: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalSongItemAlphaSortTemplate", headerTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleHeaderTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", tap: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly, layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, invokeBehavior: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline, invokeHelperFactory: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.create, forceInteractive: true, grouperItemThreshold: -1, minimumListLength: 2, grouped: true, grouperType: MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper, grouperField: "sortName", hideShadow: true, allowZoom: true, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL}
                }, songsGenre: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalSongItemGenreSortTemplate", headerTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleHeaderTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", tap: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly, layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, invokeBehavior: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline, invokeHelperFactory: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.create, forceInteractive: true, grouped: true, grouperType: MS.Entertainment.UI.Controls.GalleryMediaItemGrouper, grouperField: "genreGroupId", grouperTitlePropertyName: "genreName", grouperKeyAsData: false, minimumListLength: 2, grouperItemThreshold: -1, hideShadow: true, allowZoom: true, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL}
                }, songsAlbum: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalSongItemAlbumNameSortTemplate", headerTemplate: "/Components/Music/MusicCollectionTemplates.html#albumHeaderTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", tap: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly, layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, invokeBehavior: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline, invokeHelperFactory: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.create, forceInteractive: true, grouperItemThreshold: -1, minimumListLength: 2, grouped: true, grouperKeyAsData: false, grouperType: MS.Entertainment.UI.Controls.GalleryMediaItemSubGrouper, grouperField: "albumGroupId", grouperParentKeyPropertyName: "album.name", hideShadow: true, allowZoom: true, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL}
                }, songsArtist: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalSongItemArtistNameSortTemplate", headerTemplate: "/Components/Music/MusicCollectionTemplates.html#artistHeaderTemplate", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", tap: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly, layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, invokeBehavior: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline, invokeHelperFactory: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.create, forceInteractive: true, grouperItemThreshold: -1, minimumListLength: 2, grouped: true, grouperKeyAsData: false, grouperType: MS.Entertainment.UI.Controls.GalleryMediaItemSubGrouper, grouperField: "artistGroupId", grouperParentKeyPropertyName: "artist.name", hideShadow: true, allowZoom: true, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL}
                }, playlistEdited: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalPlaylistItemTemplate", panelTemplate: "MS.Entertainment.Pages.MusicPlaylistInlineDetails", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, getAppBarActions: function() {
                            return [MS.Entertainment.UI.AppBarActions.importPlaylists]
                        }, actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, grouped: false, hideShadow: true, forceInteractive: true, allowSelectAll: true, minimumListLength: 2, grouperItemThreshold: -1, allowZoom: true, allowHeaders: false, grouperType: MS.Entertainment.UI.Controls.GalleryTitleParentGrouper, grouperTitlePropertyName: "yearOrMonthEdited", grouperKeyAsData: false, selectionHelperOptions: {allowShare: true}, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_PLAYLIST_PLURAL}
                }, playlistAdded: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalPlaylistItemTemplate", panelTemplate: "MS.Entertainment.Pages.MusicPlaylistInlineDetails", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, getAppBarActions: function() {
                            return [MS.Entertainment.UI.AppBarActions.importPlaylists]
                        }, actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, grouped: false, hideShadow: true, forceInteractive: true, allowSelectAll: true, minimumListLength: 2, grouperItemThreshold: -1, grouperType: MS.Entertainment.UI.Controls.GalleryTitleParentGrouper, grouperTitlePropertyName: "yearOrMonthAdded", grouperKeyAsData: false, allowZoom: true, allowHeaders: false, selectionHelperOptions: {allowShare: true}, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_PLAYLIST_PLURAL}
                }, playlistAlpha: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalPlaylistItemTemplate", headerTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleHeaderTemplate", panelTemplate: "MS.Entertainment.Pages.MusicPlaylistInlineDetails", zoomedOutTemplate: "/Components/Music/MusicCollectionTemplates.html#simpleZoomedOutTemplate", panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, getAppBarActions: function() {
                            return [MS.Entertainment.UI.AppBarActions.importPlaylists]
                        }, actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, grouperItemThreshold: -1, hideShadow: true, allowSelectAll: true, grouped: true, groupHeaderPosition: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.left, grouperType: MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper, grouperField: "name", forceInteractive: true, minimumListLength: 2, allowZoom: true, selectionHelperOptions: {allowShare: true}, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_PLAYLIST_PLURAL}
                }, smartDJ: {
                    template: "/Components/Music/MusicCollectionTemplates.html#verticalSmartDJItemTemplate", tap: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly, invokeBehavior: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline, invokeHelperFactory: MS.Entertainment.UI.Controls.SmartDJGalleryControlInvocationHelper && MS.Entertainment.UI.Controls.SmartDJGalleryControlInvocationHelper.createSmartDJHelper, panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list, headerType: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace, grouped: false, allowSelectAll: true, hideShadow: true, forceInteractive: true, minimumListLength: 0, selectionHelperOptions: {allowShare: false}, backdropColor: "rgba(0, 0, 0, 0.12)", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_RADIO_PLURAL}
                }
        }})
})()
})();
/* >>>>>>/viewmodels/music/radiocollectionviewmodelbase.js:13727 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var RadioCollectionViewModelBase = (function(_super) {
                    __extends(RadioCollectionViewModelBase, _super);
                    function RadioCollectionViewModelBase() {
                        _super.call(this, "radio");
                        this._signInBindings = null;
                        this._viewStateViewModel = null;
                        this._showSignIn = false;
                        this._refreshEventListener = null;
                        this._itemsCountEventListener = null;
                        this._configurationManager = null;
                        this._signInService = null;
                        this._networkStatusListener = null;
                        this._isFreePlayEnabled = false;
                        this._showRadioUpsell = true;
                        this.title = String.load(String.id.IDS_MUSIC_RADIO_PIVOT_TC);
                        this.subTitle = String.load(String.id.IDS_RADIO_PAGE_SUBTITLE_LINE2);
                        this.selectedTemplate = MS.Entertainment.ViewModels.RadioCollectionViewModelBase._template;
                        this._configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        this._isFreePlayEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                        this._signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        this._signInBindings = WinJS.Binding.bind(this._signInService, {isSignedIn: this._onSignedInStateChanged.bind(this)});
                        MS.Entertainment.Utilities.addEventHandlers(this, {itemsChanged: this._lockResultsIfNeeded.bind(this)});
                        this._enableNetworkStatusListener();
                        this.delayInitialize()
                    }
                    Object.defineProperty(RadioCollectionViewModelBase.prototype, "_isSignedIn", {
                        get: function() {
                            return this._signInService && this._signInService.isSignedIn
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(RadioCollectionViewModelBase.prototype, "showSignIn", {
                        get: function() {
                            return this._showSignIn
                        }, set: function(value) {
                                this.updateAndNotify("showSignIn", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(RadioCollectionViewModelBase.prototype, "showRadioUpsell", {
                        get: function() {
                            return this._showRadioUpsell
                        }, set: function(value) {
                                this.updateAndNotify("showRadioUpsell", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(RadioCollectionViewModelBase.prototype, "subTitle", {
                        get: function() {
                            return this._subTitle
                        }, set: function(value) {
                                this.updateAndNotify("subTitle", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(RadioCollectionViewModelBase.prototype, "viewStateViewModel", {
                        get: function() {
                            if (!this._viewStateViewModel) {
                                var viewStateItems = new Array;
                                viewStateItems[-2] = new ViewModels.ViewStateItem(String.load(String.id.IDS_MUSIC_OFFLINE_HEADER), String.load(String.id.IDS_MUSIC_OFFLINE_DETAILS), []);
                                viewStateItems[-1] = new ViewModels.ViewStateItem(String.load(String.id.IDS_MUSIC_ERROR_HEADER), String.load(String.id.IDS_MUSIC_ERROR_DETAILS), []);
                                viewStateItems[0] = new ViewModels.ViewStateItem(String.load(String.id.IDS_RADIO_PAGE_EMPTY_TITLE), String.empty, []);
                                this._viewStateViewModel = new ViewModels.ViewStateViewModel(viewStateItems)
                            }
                            return this._viewStateViewModel
                        }, enumerable: true, configurable: true
                    });
                    RadioCollectionViewModelBase.prototype.freeze = function() {
                        this._cancelNetworkStatusListener();
                        this._cancelItemsCountEventListener()
                    };
                    RadioCollectionViewModelBase.prototype.loadModules = function() {
                        this._load()
                    };
                    RadioCollectionViewModelBase.prototype.thaw = function() {
                        this._enableNetworkStatusListener();
                        this._enableItemsCountEventListener()
                    };
                    RadioCollectionViewModelBase.prototype.dispose = function() {
                        if (this._signInBindings) {
                            this._signInBindings.cancel();
                            this._signInBindings = null
                        }
                        this._cancelNetworkStatusListener();
                        this._cancelItemsCountEventListener();
                        var smartDJList = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.smartDJList);
                        smartDJList.lockResult = false;
                        _super.prototype.dispose.call(this)
                    };
                    RadioCollectionViewModelBase.prototype.createSelectionHandlers = function() {
                        var _this = this;
                        var result = [];
                        var clearSelection = function() {
                                return _this._raiseShouldClearSelection()
                            };
                        var removeItem = function() {
                                return _this._raiseShouldClearSelection()
                            };
                        if (MS.Entertainment.ViewModels.SmartAppbarActions.setDefaultGalleryEventHandlers)
                            result.push(MS.Entertainment.ViewModels.SmartAppbarActions.setDefaultGalleryEventHandlers(clearSelection, removeItem));
                        result.push({deleteMedia: removeItem});
                        return result
                    };
                    Object.defineProperty(RadioCollectionViewModelBase.prototype, "newStationAction", {
                        get: function() {
                            if (!this._selectArtistAction) {
                                var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                this._selectArtistAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.selectArtist);
                                this._selectArtistAction.iconInfo = {
                                    icon: MS.Entertainment.UI.Icon.smartDj, iconPressed: MS.Entertainment.UI.Icon.smartDjPressed, hideDefaultRing: true
                                };
                                this._selectArtistAction.title = String.load(String.id.IDS_RADIO_PAGE_CREATE_RADIO_ACTION);
                                this._selectArtistAction.isSmartDJ = true
                            }
                            this._selectArtistAction.requeryCanExecute();
                            return this._selectArtistAction
                        }, enumerable: true, configurable: true
                    });
                    RadioCollectionViewModelBase.prototype.getViewDefinition = function(view) {
                        return new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.ViewModels.SmartDJListQueryType)
                    };
                    RadioCollectionViewModelBase.prototype.createActionCells = function() {
                        return null
                    };
                    RadioCollectionViewModelBase.prototype.cloneCurrentQuery = function() {
                        return this._lastUsedQuery
                    };
                    RadioCollectionViewModelBase.prototype._load = function() {
                        if (!this.isOnline) {
                            this.viewStateViewModel.viewState = -2;
                            this.showSignIn = false;
                            return
                        }
                        if (this._isSignedIn) {
                            if (this.viewStateViewModel.viewState !== 1) {
                                this.viewStateViewModel.viewState = 1;
                                this.refresh()
                            }
                        }
                        else {
                            this.viewStateViewModel.viewState = -1;
                            this.makeEmpty()
                        }
                        this.showSignIn = !this._isSignedIn && this.isOnline
                    };
                    RadioCollectionViewModelBase.prototype._enableItemsCountEventListener = function() {
                        this._cancelItemsCountEventListener();
                        this._itemsCountEventListener = WinJS.Binding.bind(this.items, {count: function(count) {
                                if (count === 0)
                                    this.viewStateViewModel.viewState = 0;
                                else
                                    this.viewStateViewModel.viewState = 2
                            }.bind(this)})
                    };
                    RadioCollectionViewModelBase.prototype._cancelItemsCountEventListener = function() {
                        if (this._itemsCountEventListener) {
                            this._itemsCountEventListener.cancel();
                            this._itemsCountEventListener = null
                        }
                    };
                    RadioCollectionViewModelBase.prototype._onSignedInStateChanged = function() {
                        this.showRadioUpsell = !this._isFreePlayEnabled && !this._configurationManager.service.lastSignedInUserSubscription;
                        this._lockResultsIfNeeded();
                        this._load()
                    };
                    RadioCollectionViewModelBase.prototype._lockResultsIfNeeded = function() {
                        if (this._disposed)
                            return;
                        var smartDJList = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.smartDJList);
                        if (this._isSignedIn && this.items)
                            this.items.getCount().done(function(count) {
                                smartDJList.lockResult = !!(count > 0)
                            });
                        else
                            smartDJList.lockResult = false;
                        this._enableItemsCountEventListener()
                    };
                    RadioCollectionViewModelBase.prototype._enableNetworkStatusListener = function() {
                        var _this = this;
                        if (this._networkStatusListener == null)
                            this._networkStatusListener = MS.Entertainment.UI.Framework.addEventHandlers(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {networkStatusChanged: function() {
                                    if (_this.isOnline)
                                        _this.loadModules();
                                    else {
                                        _this.clear();
                                        _this.viewStateViewModel.viewState = -2;
                                        _this.showSignIn = false
                                    }
                                    _this.newStationAction.requeryCanExecute()
                                }})
                    };
                    RadioCollectionViewModelBase.prototype._cancelNetworkStatusListener = function() {
                        if (this._networkStatusListener) {
                            this._networkStatusListener.cancel();
                            this._networkStatusListener = null
                        }
                    };
                    RadioCollectionViewModelBase.prototype._onTotalCountChanged = function(newValue, oldValue) {
                        _super.prototype._onTotalCountChanged.call(this, newValue, oldValue);
                        if (this.totalCount === 0)
                            this.viewStateViewModel.viewState = 0;
                        else
                            this.viewStateViewModel.viewState = 2
                    };
                    RadioCollectionViewModelBase.prototype._onQueryCompleted = function(query) {
                        MS.Entertainment.ViewModels.MusicCollectionBase.prototype._onQueryCompleted.apply(this, arguments);
                        if (this.totalCount === 0)
                            this.viewStateViewModel.viewState = 0;
                        else
                            this.viewStateViewModel.viewState = 2
                    };
                    RadioCollectionViewModelBase.prototype._onQueryFailed = function(error) {
                        MS.Entertainment.ViewModels.MusicCollectionBase.prototype._onQueryFailed.apply(this, arguments);
                        this.viewStateViewModel.viewState = -1
                    };
                    RadioCollectionViewModelBase.createRadioCollectionViewModel = function() {
                        var radioCollectionViewModel = new RadioCollectionViewModelBase;
                        radioCollectionViewModel.loadModules();
                        return radioCollectionViewModel
                    };
                    RadioCollectionViewModelBase._template = {
                        itemTemplate: "select(.template-collectionRadioTemplate)", actionTemplate: "/Components/Music/MusicCollectionTemplates.html#actionTemplate", tap: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly, invokeBehavior: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline, invokeHelperFactory: MS.Entertainment.UI.Controls.SmartDJGalleryControlInvocationHelper && MS.Entertainment.UI.Controls.SmartDJGalleryControlInvocationHelper.createSmartDJHelper, panelOptions: {location: MS.Entertainment.Data.ItemLocation.collection}, layout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.grid, orientation: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical, zoomedOutLayout: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list, delayHydrateLibraryId: false, selectionStyleFilled: false, allowZoom: false, swipeBehavior: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select, selectionMode: MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi, allowSelectAll: true, hideShadow: true, forceInteractive: true, minimumListLength: 1, selectionHelperOptions: {allowShare: false}, backdropColor: "rgba(0, 0, 0, 0.12)", listViewClassName: "gallery-classic", strings: {countFormatStringId: String.id.IDS_MUSIC_TYPE_RADIO_PLURAL}
                    };
                    return RadioCollectionViewModelBase
                })(MS.Entertainment.ViewModels.MusicCollectionBase);
            ViewModels.RadioCollectionViewModelBase = RadioCollectionViewModelBase
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/social/sharefactory.js:13973 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Social");
(function(MSE, undefined) {
    "use strict";
    WinJS.Namespace.defineWithParent(MSE, "Social", {
        ShareMetadata: WinJS.Binding.define({
            title: null, description: null, text: null, serviceId: -1, serviceType: null
        }), ShareEncoderFactory: MS.Entertainment.UI.Framework.define(function shareEncoderFactory() {
                this._encoders = []
            }, {
                _encoders: null, encode: function encode(data, result) {
                        var encoder = this.find(data);
                        if (encoder)
                            return encoder(data, result);
                        else
                            MSE.Social.fail("Could not find an encoder that could encode the given data")
                    }, find: function find(data) {
                        var length = this._encoders.length;
                        var encoder;
                        for (var i = 0; i < length; i++)
                            if (this._encoders[i].canEncode(data)) {
                                encoder = this._encoders[i].encoder;
                                break
                            }
                        return encoder
                    }, register: function register(canEncode, encoder) {
                        var hash,
                            exists;
                        if (!canEncode)
                            throw new Error("canEncode callback wasn't defined");
                        if (!encoder)
                            throw new Error("encoder callback wasn't defined");
                        this._encoders.push({
                            canEncode: canEncode, encoder: encoder
                        })
                    }, deregister: function deregister(encoder) {
                        var length = this._encoders.length;
                        var index = -1;
                        for (var i = 0; i < length; i++)
                            if (this._encoders[i].encoder === encoder) {
                                index = i;
                                break
                            }
                        if (index < 0)
                            MSE.Social.assert(false, "Couldn't find the given encoder within the collection");
                        else
                            this._encoders.splice(index, 1)
                    }
            }), ShareDecoderFactory: MS.Entertainment.UI.Framework.define(function shareDecoderFactory() {
                this._decoders = []
            }, {
                _decoders: null, decode: function decode(data) {
                        var length = this._decoders.length;
                        var found = false;
                        var result = null;
                        for (var i = 0; i < length; i++)
                            if (this._decoders[i].canDecode(data)) {
                                result = this._decoders[i].decode(data);
                                found = true;
                                break
                            }
                        MSE.Social.assert(found, "Could not find a decoder that could decode the given data");
                        return result
                    }, register: function register(canDecode, decoder) {
                        if (!canDecode)
                            throw new Error("canDecode callback wasn't defined");
                        if (!decoder)
                            throw new Error("decoder callback wasn't defined");
                        this._decoders.push({
                            canDecode: canDecode, decode: decoder
                        })
                    }, deregister: function deregister(decoder) {
                        var length = this._decoders.length;
                        var index = -1;
                        for (var i = 0; i < length; i++)
                            if (this._decoders[i].decoder === decoder) {
                                index = i;
                                break
                            }
                        if (index < 0)
                            MSE.Social.assert(false, "Couldn't find the given decoder within the collection");
                        else
                            this._decoders.splice(index, 1)
                    }
            })
    });
    MSE.ServiceLocator.register(MSE.Services.shareEncoder, function createShareEncoder() {
        return new MSE.Social.ShareEncoderFactory
    });
    MSE.ServiceLocator.register(MSE.Services.shareDecoder, function createShareDecoder() {
        var shareDecoderFactory = new MSE.Social.ShareDecoderFactory;
        shareDecoderFactory.register(function canDecode(sharePackage) {
            if (sharePackage !== null && sharePackage !== undefined)
                return true;
            else
                return false
        }, function decode(sharePackage) {
            var metadata = new MSE.Social.ShareMetadata;
            metadata.text = sharePackage.text;
            metadata.title = sharePackage.mediaTitle;
            metadata.description = sharePackage.mediaDescription;
            metadata.serviceId = sharePackage.mediaId;
            metadata.serviceType = sharePackage.mediaType;
            if (!metadata.title)
                metadata.title = sharePackage.title || "";
            if (!metadata.description)
                metadata.description = sharePackage.description || "";
            if (!metadata.text)
                metadata.text = metadata.title;
            return metadata
        });
        return shareDecoderFactory
    })
})(WinJS.Namespace.define("MS.Entertainment", null))
})();
/* >>>>>>/viewmodels/social/sharesender.js:14091 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Social");
(function(MSE, undefined) {
    "use strict";
    var shareSenderMixin = {
            _handlerCallback: null, _handlerFactory: null, _shareHistory: null, _shareHistoryRoot: "__shareRoot__", _shareHistoryMax: 100, _sharePageHistoryMax: 5, _initialized: false, _navigationBindings: null, _maxEmptyMessageLength: 247, _currentPage: null, _defaultEmptyMessage: null, initializeOnce: function initializeOnce() {
                    if (!this._initialized) {
                        this._initializeNavigationWatcher();
                        this.setShareHandler(null);
                        this._initialized = true
                    }
                }, setDefaultEmptyMessage: function setDefaultEmptyMessage() {
                    var stringId;
                    if (MS.Entertainment.Utilities.isMusicApp1)
                        stringId = String.id.IDS_SHARE_EMPTY_MESSAGE_MUSIC;
                    else if (MS.Entertainment.Utilities.isVideoApp1)
                        stringId = String.id.IDS_SHARE_EMPTY_MESSAGE_VIDEO;
                    else if (MS.Entertainment.Utilities.isApp2)
                        stringId = String.empty;
                    else if (MS.Entertainment.Utilities.isTestApp);
                    else
                        MSE.Social.assert(false, "This is an unsupported app mode for the share sender");
                    if (stringId) {
                        this._defaultEmptyMessage = String.load(stringId);
                        this._setEmptyMessage()
                    }
                }, share: function share(data, factory) {
                    var shareOperation;
                    var shareManager = this._getShareManager();
                    if (data !== null && data !== undefined) {
                        var temporaryShareCallback = function _temporaryShareCallback(args) {
                                try {
                                    if (args && args.package && args.target && shareOperation)
                                        shareOperation.encode(data).done(function encodeSuccess(encodedData) {
                                            this._copyEncodeResultObject(encodedData, args);
                                            args.target.encodeComplete()
                                        }.bind(this), function encodeFailed(error) {
                                            MS.Entertainment.Social.fail("Failed to encode a share package. error: " + error && error.message);
                                            this._setEmptyMessage(pendingShareOperation && pendingShareOperation.emptyMessage);
                                            args.target.encodeComplete()
                                        }.bind(this))
                                }
                                catch(error) {
                                    MS.Entertainment.Social.fail("Failed to copy share information in temporary callback. error: " + error);
                                    args.target.encodeComplete()
                                }
                                this._getShareManager().removeEventListener("requestshareevent", temporaryShareCallback, false)
                            }.bind(this);
                        shareOperation = new MSE.Social.ShareOperation(this._encode.bind(this), temporaryShareCallback, data, factory);
                        this._getShareManager().addEventListener("requestshareevent", temporaryShareCallback, false);
                        WinJS.Promise.timeout().then(shareManager.share());
                        return shareOperation
                    }
                }, pendingShare: function pendingShare(data, factory) {
                    var shareOperation = null;
                    if (!MS.Entertainment.Utilities.isApp2 && data !== null && data !== undefined)
                        shareOperation = new MSE.Social.ShareOperation(this._encode.bind(this), this._removePageHistory.bind(this), data, factory);
                    this._setPendingShareOperation(shareOperation);
                    return shareOperation
                }, setShareHandler: function setShareHandler(callback, factory) {
                    var that = this;
                    if (!callback) {
                        if (this._peekPageHistory())
                            this._setDefaultShareCallback();
                        else
                            this._clearShareCallback();
                        this._handlerCallback = null;
                        this._handlerFactory = null
                    }
                    else {
                        this._setDefaultShareCallback();
                        this._handlerCallback = callback;
                        this._handlerFactory = factory || null
                    }
                }, _setPendingShareOperation: function _setPendingShareOperation(shareOperation) {
                    if (shareOperation)
                        this._pushPageHistory(shareOperation);
                    else
                        this._clearPageHistory();
                    this.setShareHandler(null, null)
                }, _createEncodeResultObject: function _createEncodeResultObject() {
                    return {package: {}}
                }, _copyEncodeResultObject: function _copyEncodePackage(from, to) {
                    if (from && from.package && to && to.package)
                        for (var key in from.package)
                            if (key in to.package)
                                to.package[key] = from.package[key]
                }, _getShareManager: function _getShareManager() {
                    var shareManager = MSE.ServiceLocator.getService(MSE.Services.shareHost).getManager();
                    MSE.Social.assert(shareManager !== null && shareManager !== undefined, "ShareManager is null inside the ShareSender");
                    return shareManager
                }, _clearShareCallback: function _clearShareCallback() {
                    if (this._defaultShareCallback) {
                        this._getShareManager().removeEventListener("requestshareevent", this._defaultShareCallback, false);
                        this._defaultShareCallback = null
                    }
                }, _setDefaultShareCallback: function _setDefaultShareCallback() {
                    if (!this._defaultShareCallback) {
                        this._defaultShareCallback = function _defaultShareCallback(eventArgs) {
                            if (eventArgs && eventArgs.package && eventArgs.target) {
                                var onSharePackageRequestPromise = null;
                                try {
                                    onSharePackageRequestPromise = this._onSharePackageRequest({package: eventArgs.package})
                                }
                                catch(error) {
                                    onSharePackageRequestPromise = WinJS.Promise.wrapError(new Error("_onSharePackageRequest threw an exception. error: " + (error && error.message)))
                                }
                                onSharePackageRequestPromise.then(null, function ignoreError(error) {
                                    MS.Entertainment.Social.fail("_onSharePackageRequest failed. error: " + (error && error.message))
                                }).done(function signalComplete() {
                                    try {
                                        eventArgs.target.encodeComplete()
                                    }
                                    catch(error) {
                                        MS.Entertainment.Social.fail("Signaling that encoding has completed has failed. error: " + (error && error.message))
                                    }
                                })
                            }
                        }.bind(this);
                        this._getShareManager().addEventListener("requestshareevent", this._defaultShareCallback, false)
                    }
                }, _onSharePackageRequest: function _onSharePackageRequest(result) {
                    var encodePromise = null;
                    var pendingShareOperation = this._peekPageHistory();
                    if (this._handlerCallback)
                        encodePromise = this._encode(this._handlerCallback(), this._handlerFactory);
                    else if (pendingShareOperation)
                        encodePromise = pendingShareOperation.encode(pendingShareOperation.data);
                    return WinJS.Promise.as(encodePromise).then(function encodeSuccess(encodedData) {
                            this._setEmptyMessage(pendingShareOperation && pendingShareOperation.emptyMessage);
                            this._copyEncodeResultObject(encodedData, result);
                            MS.Entertainment.Utilities.Telemetry.logShare(encodedData)
                        }.bind(this), function encodeFailed(error) {
                            MS.Entertainment.Social.fail("Failed to encode a share package. error:" + error && error.message);
                            this._setEmptyMessage(pendingShareOperation && pendingShareOperation.emptyMessage)
                        }.bind(this))
                }, _setEmptyMessage: function _setEmptyMessage(message) {
                    message = message || this._defaultEmptyMessage;
                    MSE.Social.assert(!message || message.length <= this._maxEmptyMessageLength, "The empty message appears to be too long for the share contracts. If the empty message is too long, Windows will fallback to a default empty message. Note, this max maybe wrong. Please verify");
                    var shareManager = this._getShareManager();
                    if (shareManager && shareManager.setEmptyMessage)
                        shareManager.setEmptyMessage(message)
                }, _encode: function _encode(data, factory) {
                    if (data === null || data === undefined) {
                        MSE.Social.assert(false, "Share data is null or undefined");
                        throw"Share data is null or undefined";
                    }
                    var result = this._createEncodeResultObject();
                    if (factory)
                        return factory(data, result);
                    else
                        return MSE.ServiceLocator.getService(MSE.Services.shareEncoder).encode(data, result)
                }, _clearAllHistory: function _clearAllHistory() {
                    this._shareHistory = {}
                }, _getOrCreatePageHistory: function _getOrCreatePageHistory(page, preventCreate) {
                    var pageHistory = [];
                    page = page || this._currentPage || this._shareHistoryRoot;
                    if (page)
                        if (this._shareHistory[page])
                            pageHistory = this._shareHistory[page];
                        else if (!preventCreate)
                            this._shareHistory[page] = pageHistory;
                    var saves = 0;
                    for (var key in this._shareHistory)
                        saves++;
                    MS.Entertainment.Social.assert(saves < this._shareHistoryMax, "The shareSender's history stack has gotten too big. Need to either increase the limit or there could be a corruption somewhere.");
                    return pageHistory
                }, _clearPageHistory: function _clearPageHistory(page) {
                    page = page || this._currentPage;
                    if (page)
                        if (this._shareHistory[page])
                            delete this._shareHistory[page]
                }, _trimPageHistory: function _trimPageHistory(page) {
                    var trimmedOperations;
                    var pageHistory = this._getOrCreatePageHistory(page, true);
                    if (pageHistory.length > this._sharePageHistoryMax)
                        trimmedOperations = pageHistory.splice(0, pageHistory.length - this._sharePageHistoryMax);
                    if (trimmedOperations)
                        trimmedOperations.forEach(function(item) {
                            if (item)
                                item.cancel()
                        }.bind(this))
                }, _pushPageHistory: function _pushPageHistory(operation) {
                    if (operation) {
                        this._getOrCreatePageHistory().push(operation);
                        this._trimPageHistory()
                    }
                }, _peekPageHistory: function _peekPageHistory(page) {
                    var pageHistory = this._getOrCreatePageHistory(page, true);
                    return pageHistory[pageHistory.length - 1]
                }, _popPageHistory: function _popPageHistory(page) {
                    return this._getOrCreatePageHistory(page, true).pop()
                }, _removePageHistory: function _removePageHistory(operation, page) {
                    var itemRemoved,
                        pageHistory,
                        operationIndex;
                    if (!operation)
                        itemRemoved = this._popPageHistory(page);
                    else {
                        pageHistory = this._getOrCreatePageHistory(page, true);
                        operationIndex = pageHistory.indexOf(operation);
                        if (operationIndex >= 0)
                            itemRemoved = pageHistory.splice(operationIndex, 1)[0];
                        if (!itemRemoved && !page)
                            for (page in this._shareHistory) {
                                itemRemoved = this._removePageHistory(operation, page);
                                if (itemRemoved)
                                    break
                            }
                    }
                    return itemRemoved
                }, _handleNavigation: function _handleNavigation(newPage, oldPage) {
                    if (newPage) {
                        this._currentPage = newPage.iaNode.moniker;
                        if (newPage.iaNode.moniker === MS.Entertainment.UI.Monikers.root)
                            this._clearAllHistory()
                    }
                    else
                        this._currentPage = null
                }, _handleJournalNavigation: function _handleJournalNavigation(args) {
                    var journal = MS.Entertainment.UI.Framework.Navigation.getJournal();
                    if (journal)
                        this._currentPage = journal.location;
                    else
                        this._currentPage = null
                }, _initializeNavigationWatcher: function _initializeNavigationWatcher() {
                    this._uninitializeNavigationWatcher();
                    if (!this._shareHistory) {
                        this._shareHistory = {};
                        try {
                            var navigation;
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                                navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            if (navigation)
                                this._navigationBindings = WinJS.Binding.bind(navigation, {currentPage: this._handleNavigation.bind(this)});
                            else if (MS.Entertainment.UI.Framework.Navigation && MS.Entertainment.UI.Framework.Navigation.getJournal) {
                                this._navigationBindings = MS.Entertainment.Utilities.addEventHandlers(MS.Entertainment.UI.Framework.Navigation.getJournal(), {navigated: this._handleJournalNavigation.bind(this)});
                                this._handleJournalNavigation()
                            }
                        }
                        catch(error) {}
                    }
                }, _uninitializeNavigationWatcher: function _uninitializeNavigationWatcher() {
                    if (this._navigationBindings) {
                        this._navigationBindings.cancel();
                        this._navigationBindings = null
                    }
                }
        };
    WinJS.Namespace.defineWithParent(MSE, "Social", {ShareOperation: MS.Entertainment.UI.Framework.define(function ShareOperation(encodeCallback, cancelCallback, data, factory) {
            this._encodeCallback = encodeCallback;
            this._cancelCallback = cancelCallback;
            this._factory = factory;
            this._data = data
        }, {
            _data: null, _encodePromise: null, _encodedData: null, _encodeCallback: null, _cancelCallback: null, _factory: null, cancelled: false, data: {get: function() {
                        return this._data
                    }}, emptyMessage: {get: function() {
                        var message = this._encodedData && this._encodedData.emptyMessage;
                        return message || String.empty
                    }}, encode: function encode(data) {
                    if (this._encodeCallback && !this._encodePromise)
                        this._encodePromise = this._encodeCallback(data, this._factory).then(function encoded(result) {
                            this._encodedData = result;
                            return this._encodedData
                        }.bind(this));
                    return WinJS.Promise.as(this._encodePromise)
                }, cancel: function cancel() {
                    if (this._encodePromise) {
                        this._encodePromise.cancel();
                        this._encodePromise = null
                    }
                    if (this._cancelCallback) {
                        this._cancelCallback(this);
                        this._cancelCallback = null;
                        this._encodeCallback = null;
                        this._factory = null
                    }
                    this.cancelled = true
                }
        })});
    WinJS.Namespace.defineWithParent(MSE, "Social", {ShareSender: WinJS.Class.mix(function shareSender() {
            this.initializeOnce()
        }, shareSenderMixin, WinJS.Utilities.eventMixin)});
    MSE.ServiceLocator.register(MSE.Services.shareSender, function shareSenderFactory() {
        return new MSE.Social.ShareSender
    })
})(WinJS.Namespace.define("MS.Entertainment", null))
})();
/* >>>>>>/viewmodels/social/sharehost.js:14383 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Social");
(function(MSE, undefined) {
    "use strict";
    WinJS.Namespace.defineWithParent(MSE, "Social", {ShareHost: MS.Entertainment.UI.Framework.define(function shareHost() {
            this._shareManager = null;
            this._package = null;
            this._contractActivationContext = null
        }, {
            _shareManager: null, _package: null, getManager: function getManager() {
                    if (!this._shareManager && Microsoft.Entertainment.Share && Microsoft.Entertainment.Share.SharingManager)
                        this._shareManager = new Microsoft.Entertainment.Share.SharingManager;
                    return this._shareManager
                }, getPackage: function getPackage() {
                    if (this._package === null)
                        return this._loadPackage();
                    else
                        return WinJS.Promise.wrap(this._package)
                }, shareCompleted: function shareCompleted() {
                    var that = this;
                    this.getPackage().then(function success(sharePackage) {
                        if (that._contractActivationContext) {
                            that._contractActivationContext.doneTransfer(null);
                            that._contractActivationContext = null;
                            that._package = null
                        }
                    }, function error() {
                        MSE.Social.assert(false, "Failed to compelte share operation")
                    })
                }, _loadPackage: function _loadPackage() {
                    var that = this;
                    return new WinJS.Promise(function promiseInitialization(completed, error) {
                            var activation;
                            var innerException;
                            var timer = null;
                            try {
                                activation = new Windows.Wwa.Activation
                            }
                            catch(exception) {
                                innerException = exception;
                                MSE.Social.assert(false, "Failed to create activate object: " + exception)
                            }
                            if (activation) {
                                activation.onActivated = function onActivate(contractId, contractActivationContext) {
                                    if (contractId === MSE.Social.ShareHost.shareContractId && timer !== null) {
                                        timer.cancel();
                                        timer = null;
                                        if (contractActivationContext) {
                                            that._package = that._createSharePackage(contractActivationContext.sharingData);
                                            that._contractActivationContext = contractActivationContext;
                                            completed(that._package)
                                        }
                                        else
                                            error()
                                    }
                                };
                                timer = WinJS.Promise.timeout(MSE.Social.ShareHost.shareActivateTimeout).then(function timedOut() {
                                    if (timer !== null) {
                                        MSE.Social.assert(true, "Shared activation didn't fire in time");
                                        timer = null;
                                        error();
                                        activation.onActivated = null
                                    }
                                })
                            }
                            else
                                error(innerException)
                        })
                }, _createSharePackage: function _createSharePackage(dataPackage) {
                    var sharePackage = new Microsoft.Entertainment.Share.SharingPackage;
                    sharePackage.mediaTitle = dataPackage.properties.hasKey("MS-Entertaiment-MediaTitle") ? dataPackage.properties.lookup("MS-Entertaiment-MediaTitle").getString() : null;
                    sharePackage.mediaDescription = dataPackage.properties.hasKey("MS-Entertaiment-MediaDescription") ? dataPackage.properties.lookup("MS-Entertaiment-MediaDescription").getString() : null;
                    sharePackage.mediaId = dataPackage.properties.hasKey("MS-Entertaiment-ServiceId") ? dataPackage.properties.lookup("MS-Entertaiment-ServiceId").getString() : null;
                    sharePackage.mediaType = dataPackage.properties.hasKey("MS-Entertaiment-ServiceType") ? dataPackage.properties.lookup("MS-Entertaiment-ServiceType").getString() : null;
                    sharePackage.title = dataPackage.properties.hasKey("Title") ? dataPackage.properties.lookup("Title").getString() : null;
                    sharePackage.description = dataPackage.properties.hasKey("Description") ? dataPackage.properties.lookup("Description").getString() : null;
                    sharePackage.text = dataPackage.text;
                    return sharePackage
                }
        }, {
            shareContractId: "Microsoft.Windows.SharingTarget", shareActivateTimeout: 10000, factory: function factory() {
                    return new MSE.Social.ShareHost
                }
        })});
    MSE.ServiceLocator.register(MSE.Services.shareHost, MSE.Social.ShareHost.factory)
})(WinJS.Namespace.define("MS.Entertainment", null))
})();
/* >>>>>>/components/social/sharetemplates.js:14473 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.Social", {ShareTemplates: (function() {
            var shareTemplates;
            return {get: function() {
                        if (!shareTemplates)
                            shareTemplates = {
                                media: "<div style='float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px; background-color: #ffffff;'>" + "   <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 87px; border-style: none' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/b1/81/b181ee8e-25ce-4a6e-8a59-f079f83ff618.PNG?v=1#music_shadow.PNG' />" + "   </div>" + "   <div style='float: left; vertical-align: top; width: 243px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='max-height: 80px; overflow: hidden;'>{4}</div><br/>" + "       <div>{2}</div>" + "   </div>" + "</div>", tvEpisode: "<div style='float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px; background-color: #ffffff;'>" + "   <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 87px; border-style: none' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/b1/81/b181ee8e-25ce-4a6e-8a59-f079f83ff618.PNG?v=1#music_shadow.PNG' />" + "   </div>" + "   <div style='float: left; vertical-align: top; width: 243px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 18px; color: #333333; margin-bottom: 15px;'>{4}</div>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 14px; color: #333333; margin-bottom: 15px;'>" + String.load(String.id.IDS_TV_SEASON_NAME).format("{5}") + "        </div>" + "       <div style='max-height: 80px; overflow: hidden;'>{6}</div><br/>" + "       <div>{2}</div>" + "   </div>" + "</div>", tvSeason: "<div style='float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px; background-color: #ffffff;'>" + "   <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 87px; border-style: none' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/b1/81/b181ee8e-25ce-4a6e-8a59-f079f83ff618.PNG?v=1#music_shadow.PNG' />" + "   </div>" + "   <div style='float: left; vertical-align: top; width: 243px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 14px; color: #333333; margin-bottom: 15px;'>" + String.load(String.id.IDS_TV_SEASON_NAME).format("{4}") + "       </div>" + "       <div style='max-height: 80px; overflow: hidden;'>{5}</div><br/>" + "       <div>{2}</div>" + "   </div>" + "</div>", game: "<div style='float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px; background-color: #ffffff;'>" + "    <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 63px; border-style: none;' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/50/2d/502d88f0-6e6e-4e20-8d0b-d24609536e1f.PNG?v=1#game_shadow.PNG' />" + "    </div>" + "    <div style='float: left; vertical-align: top; width: 250px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='max-height: 80px; overflow: hidden;'>{4}</div><br/>" + "       <div>{2}</div>" + "    </div>" + "</div>", artist: "<div style='float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px; background-color: #ffffff;'>" + "   <div style='float: left; width: 130px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 113px; border-style: none' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/50/0e/500ed235-d22f-435f-81d9-ad771e4055d9.PNG?v=1#artist_shadow.PNG' />" + "   </div>" + "   <div style='float: left; vertical-align: top; width: 200px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='max-height: 200px; overflow: hidden;'>{4}</div><br/>" + "       <div>{2}</div>" + "   </div>" + "</div>", album: "<div style='background-color: #ffffff; float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px;'>" + "   <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 87px; border-style: none;' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/b1/81/b181ee8e-25ce-4a6e-8a59-f079f83ff618.PNG?v=1#music_shadow.PNG' />" + "   </div>" + "   <div style='float: left; vertical-align: top; width: 243px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; margin-bottom: 15px;'>{3}</div>" + "       <div style='font-family: \"Segoe UI Semibold\";'>{4}</div>" + "       <div>{5}</div><br/>" + "       <div>{2}</div>" + "    </div>" + "</div>", achievement: "<div style='background-color: #ffffff; float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px;'>" + "   <div style='float: left; width: 100px; margin-right: 30px;'>" + "       <a href='{0}'><img style='margin: 20px 0px 0px 20px; max-width: 63px; border-style: none;' src='{1}'/></a>" + "       <img style='margin: 15px 0px 20px 10px;' src='http://nxeassets.xbox.com/shaxam/0201/50/2d/502d88f0-6e6e-4e20-8d0b-d24609536e1f.PNG?v=1#game_shadow.PNG' />" + "   </div>" + "   <div style='float: left; width: 250px; margin: 20px 20px 20px 0px;'>" + "       <div style='float: left; font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; line-height: 24px;'>{6}</div>" + "       <div style='float: left; vertical-align: top; margin-top: 12px;'>" + "           <img style='float: left; vertical-align: top; margin: 0px 10px 0px 0px; width: 40px; height: 40px' src='{2}'/>" + "           <div style='float: left; width: 200px;'>" + "               <div style='color: #55C105; font-family: \"Segoe UI Semibold\"'>{4}</div>" + "               <div>{5}</div>" + "               <div>{3}</div>" + "           </div>" + "       </div>" + "   </div>" + "</div>", profile: "<div style='background-color: #ffffff; float: left; font-family: \"Segoe UI\",  \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px;'>" + "   <div style='float: left; vertical-align: top; width: 135px; margin: 20px 0px 20px 30px; overflow: hidden; white-space: nowrap;'>" + "     <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333;'>{4}</div>" + "     <div style='float: left; width: 135px; height: 50px;'>" + "       <div style='float: left;'>{5}</div>" + "       <img style='float: left;' src='http://nxeassets.xbox.com/shaxam/0201/10/88/10886c05-8267-48de-af96-aa7b763f1100.PNG?v=1#gamerscore.PNG'/>" + "     </div>" + "     <div>{6}</div>" + "     <div>{7}</div>" + "   </div>" + "   <div style='float: left; margin: 20px 10px 20px 20px; width: 100px; display: {8}'>" + "       <div style='background-color: rgb(51,51,51); color: #ffffff; padding: 6px;'>{3}</div>" + "       <div style='margin-left: 75px;'><img src='http://nxeassets.xbox.com/shaxam/0201/a5/dd/a5dde9b9-dc32-471c-b7a4-0d14caecf746.PNG?v=1#triangle.PNG' /></div>" + "   </div>" + "   <a href='{0}'><img style='float: left; border-style: none; max-height: 200px;' src='{1}'/></a>" + "   <div style='float: left; margin: 0px 0px 20px 20px;'>{2}</div>" + "</div>", leaderBoard: "<div style='background-color: #ffffff; float: left; font-family: \"Segoe UI\", \"Meiryo UI\", \"Microsoft JhengHei UI\", \"Malgun Gothic\", \"Microsoft YaHei UI\"; font-size: 15px; color: #666666; width: 400px'>" + "   <div style='float: left; margin: 20px 30px 20px 0px; width: 100px;'>" + "       <a href='{0}'><img style='max-width: 63px; margin-left: 20px; border-style: none;' src='{1}'/></a>" + "       <div style='margin: 15px 0px 0px 10px'>" + "       <img src='http://nxeassets.xbox.com/shaxam/0201/50/2d/502d88f0-6e6e-4e20-8d0b-d24609536e1f.PNG?v=1#game_shadow.PNG' />" + "       </div>" + "   </div>" + "   <div style='float: left; width: 250px; margin: 20px 20px 20px 0px;'>" + "       <div style='font-family: \"Segoe UI Light\"; font-size: 24px; color: #333333; line-height: 24px; margin-bottom: 8px;'>{3}</div>" + "       <div style='width: 100%;'>{4}</div>" + "       <div style='width: 100%'>{5}</div>" + "       <div>{2}</div>" + "   </div>" + "</div>", leaderBoardItem: "<div>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; width: 20px;'>{0}</div>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; width: 180px;'>{1}</div>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; margin-left: 3px;'>{2}</div>" + "</div>", leaderBoardSelectedItem: "<div style='background-color: #55C105; color: #ffffff;'>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; width: 20px;'>{0}</div>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; width: 180px; '>{1}</div>" + "   <div style='display: inline-block; overflow: hidden; white-space: nowrap; margin-left: 3px;'>{2}</div>" + "</div>", createWebLink: function createWebLink(uri, stringIdOverride) {
                                        var href = "<a style='color: #57B846; font-size: 15px;' href='{0}'>".format(uri);
                                        if (!!stringIdOverride)
                                            return String.load(stringIdOverride).format(href, "</a>");
                                        else
                                            return String.load(String.id.IDS_SHARE_MORE_XBOX_DOT_COM).format(href, "</a>")
                                    }
                            };
                        return shareTemplates
                    }}
        })()});
    WinJS.Namespace.define("MS.Entertainment.Social", {EncoderHelper: {
            encode: function(data, dataAugmentation, html, htmlLines, result) {
                if (dataAugmentation) {
                    var htmlArguments;
                    var augmentedData = MS.Entertainment.Data.augment(WinJS.Binding.unwrap(data), dataAugmentation);
                    if (augmentedData.emptyMessage > 0)
                        result.emptyMessage = String.load(augmentedData.emptyMessage);
                    else
                        result.emptyMessage = String.empty;
                    if (Array.isArray(augmentedData.title)) {
                        var newTitle;
                        for (var i = 0; i < augmentedData.title.length; i++)
                            if (augmentedData.title[i] !== String.empty)
                                if (newTitle)
                                    newTitle = String.load(String.id.IDS_COMMA_SEPARATOR).format(newTitle, augmentedData.title[i]);
                                else
                                    newTitle = augmentedData.title[i];
                        result.package.title = newTitle || " "
                    }
                    else
                        result.package.title = augmentedData.title || " ";
                    var oneLineDescription = MS.Entertainment.Data.Factory.stringNoNewLines(augmentedData.description);
                    result.package.description = oneLineDescription || " ";
                    if (!MS.Entertainment.Utilities.isEmptyGuid(augmentedData.mediaId)) {
                        if (Array.isArray(augmentedData.mediaTitle)) {
                            var newMediaTitle;
                            for (var i = 0; i < augmentedData.mediaTitle.length; i++)
                                if (augmentedData.mediaTitle[i] !== String.empty)
                                    if (newMediaTitle)
                                        newMediaTitle = String.load(String.id.IDS_COMMA_SEPARATOR).format(newMediaTitle, augmentedData.mediaTitle[i]);
                                    else
                                        newMediaTitle = augmentedData.mediaTitle[i];
                            result.package.mediaTitle = newMediaTitle
                        }
                        else
                            result.package.mediaTitle = augmentedData.mediaTitle;
                        if (Array.isArray(augmentedData.text)) {
                            var newText;
                            for (var i = 0; i < augmentedData.text.length; i++)
                                if (augmentedData.text[i] !== String.empty)
                                    if (newText)
                                        newText = String.load(String.id.IDS_COMMA_SEPARATOR).format(newText, augmentedData.text[i]);
                                    else
                                        newText = augmentedData.text[i];
                            result.package.text = newText || String.empty
                        }
                        else
                            result.package.text = augmentedData.text || String.empty;
                        result.package.uri = augmentedData.uri || String.empty;
                        result.package.mediaType = augmentedData.mediaType;
                        result.package.mediaId = augmentedData.mediaId;
                        if (html) {
                            htmlArguments = [];
                            htmlArguments.push(augmentedData.uri || String.empty);
                            var imageUri = String.empty;
                            if (augmentedData.htmlImages)
                                augmentedData.htmlImages.forEach(function(item) {
                                    if (!imageUri && item)
                                        imageUri = item
                                });
                            htmlArguments.push(imageUri);
                            var linkUri = String.empty;
                            if (augmentedData.htmlUri !== null && augmentedData.htmlUri !== undefined)
                                linkUri = MS.Entertainment.Social.ShareTemplates.createWebLink(augmentedData.htmlUri, augmentedData.htmlUriStringId) || String.empty;
                            htmlArguments.push(linkUri);
                            if (augmentedData.htmlLines)
                                augmentedData.htmlLines.forEach(function(item) {
                                    htmlArguments.push((item === undefined || item === null) ? String.empty : item)
                                });
                            if (htmlLines)
                                htmlLines.forEach(function(item) {
                                    htmlArguments.push((item === undefined || item === null) ? String.empty : item)
                                });
                            try {
                                result.package.html = html.format.apply(html, htmlArguments)
                            }
                            catch(error) {
                                result.package.html = String.empty
                            }
                        }
                    }
                }
            }, encodeMusicMedia: function encodeMusicMedia(data, result, setTitleAndDescription) {
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicShareToPhone)) {
                        var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        var sharingProvider = mediaStore.sharingProvider;
                        var libraryIds = [];
                        var libraryTypes = [];
                        var shareString = String.empty;
                        var libraryTypeCounts = [];
                        var libraryTypesUnique = [];
                        if (!Array.isArray(data))
                            data = [data];
                        for (var i = 0; i < data.length; i++)
                            switch (data[i].mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    libraryIds.push(data[i].libraryId);
                                    libraryTypes.push(data[i].mediaType);
                                    if (!libraryTypeCounts[data[i].mediaType])
                                        libraryTypeCounts[data[i].mediaType] = 1;
                                    else
                                        libraryTypeCounts[data[i].mediaType]++;
                                    if (libraryTypesUnique.indexOf(data[i].mediaType) === -1)
                                        libraryTypesUnique.push(data[i].mediaType);
                                    break;
                                default:
                                    break
                            }
                        for (var i = 0; i < libraryTypesUnique.length; i++) {
                            var typeCount = libraryTypeCounts[libraryTypesUnique[i]];
                            var toAdd = String.empty;
                            switch (libraryTypesUnique[i]) {
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    toAdd = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_SHARE_MUSIC_SONG_COUNT_PLURAL, typeCount).format(typeCount);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    toAdd = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_SHARE_MUSIC_ALBUM_COUNT_PLURAL, typeCount).format(typeCount);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                    toAdd = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_SHARE_MUSIC_PLAYLIST_COUNT_PLURAL, typeCount).format(typeCount);
                                    break;
                                default:
                                    break
                            }
                            if (toAdd !== String.empty)
                                if (shareString === String.empty)
                                    shareString = toAdd;
                                else
                                    shareString = String.load(String.id.IDS_SHARE_MUSIC_CONCATENATION).format(shareString, toAdd)
                        }
                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        if (setTitleAndDescription) {
                            result.package.title = shareString;
                            result.package.description = String.load(String.id.IDS_SHARE_FILES_MUSIC_DESCRIPTION)
                        }
                        result.package.shouldShareFiles = true;
                        result.package.libraryIds = libraryIds;
                        result.package.libraryTypes = libraryTypes;
                        result.package.mediaAvailabilityFilter = mediaContext.collectionFilter
                    }
                    return WinJS.Promise.wrap(result)
                }, encodeLeaderBoardTable: function encodeLeaderBoardTable(leaderBoardData) {
                    var leadersArray,
                        rowHtml,
                        i,
                        item;
                    var tableHtml = String.empty;
                    if (leaderBoardData.leaders && leaderBoardData.userRow) {
                        if (Array.isArray(leaderBoardData.leaders))
                            leadersArray = leaderBoardData.leaders;
                        else
                            leaderBoardData.leaders.toArray().then(function(array) {
                                leadersArray = array
                            });
                        if (leadersArray)
                            for (i = leadersArray.length - 1; i >= 0; i--) {
                                item = leadersArray[i];
                                if (item.gamerTag === leaderBoardData.userRow.gamerTag)
                                    rowHtml = MS.Entertainment.Social.ShareTemplates.leaderBoardSelectedItem;
                                else
                                    rowHtml = MS.Entertainment.Social.ShareTemplates.leaderBoardItem;
                                tableHtml = rowHtml.format(item.rank, item.gamerTag, item.rating) + tableHtml
                            }
                    }
                    return tableHtml
                }
        }});
    var shareEncoderFactory = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareEncoder);
    shareEncoderFactory.register(function canEncode(data) {
        return data && (data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeries || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.person || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.game || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.folder)
    }, function encode(data, result) {
        var dataAugmentation,
            html;
        if (data.mediaType)
            switch (data.mediaType) {
                case Microsoft.Entertainment.Queries.ObjectType.video:
                    if (data.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode) {
                        dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.TVEpisodeSharePackage;
                        html = MS.Entertainment.Social.ShareTemplates.tvEpisode
                    }
                    else if (data.videoType === Microsoft.Entertainment.Queries.VideoType.movie) {
                        dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.MovieSharePackage;
                        html = MS.Entertainment.Social.ShareTemplates.media
                    }
                    else {
                        dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.OtherVideoSharePackage;
                        html = MS.Entertainment.Social.ShareTemplates.media
                    }
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.folder:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.FolderVideoSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.media;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.TVSeasonSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.tvSeason;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.TVSeriesSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.media;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.MediaSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.media;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.person:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.ArtistSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.artist;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.track:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.TrackSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.media;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.album:
                    dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.AlbumSharePackage;
                    html = MS.Entertainment.Social.ShareTemplates.album;
                    break;
                case Microsoft.Entertainment.Queries.ObjectType.game:
                    switch (data.defaultPlatformType) {
                        case MS.Entertainment.Data.Augmenter.GamePlatform.Modern:
                            dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.MetroGameSharePackage;
                            break;
                        default:
                            dataAugmentation = MS.Entertainment.Data.Augmenter.Marketplace.GameSharePackage;
                            break
                    }
                    html = MS.Entertainment.Social.ShareTemplates.game;
                    break
            }
        MS.Entertainment.Social.EncoderHelper.encode(data, dataAugmentation, html, null, result);
        if (data.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || data.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
            result = MS.Entertainment.Social.EncoderHelper.encodeMusicMedia(data, result, false);
        else if (data.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist)
            result = MS.Entertainment.Social.EncoderHelper.encodeMusicMedia(data, result, true);
        return WinJS.Promise.as(result)
    });
    shareEncoderFactory.register(function canEncode(data) {
        return data && MS.Entertainment.Data.Augmenter.XboxLive && MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType && (data.socialDataType === MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.profile || data.socialDataType === MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.achievement || data.socialDataType === MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.activity || data.socialDataType === MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.leaderBoard)
    }, function encode(data, result) {
        var dataAugmentation,
            html,
            additionalHtmlLines;
        switch (data.socialDataType) {
            case MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.profile:
                dataAugmentation = MS.Entertainment.Data.Augmenter.XboxLive.ProfileSharePackage;
                html = MS.Entertainment.Social.ShareTemplates.profile;
                break;
            case MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.achievement:
                dataAugmentation = MS.Entertainment.Data.Augmenter.XboxLive.AchievementSharePackage;
                html = MS.Entertainment.Social.ShareTemplates.achievement;
                break;
            case MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.activity:
                shareEncoderFactory.encode(data.media, result);
                break;
            case MS.Entertainment.Data.Augmenter.XboxLive.SocialDataType.leaderBoard:
                dataAugmentation = MS.Entertainment.Data.Augmenter.XboxLive.LeaderBoardSharePackage;
                html = MS.Entertainment.Social.ShareTemplates.leaderBoard;
                additionalHtmlLines = [MS.Entertainment.Social.EncoderHelper.encodeLeaderBoardTable(data)];
                break
        }
        MS.Entertainment.Social.EncoderHelper.encode(data, dataAugmentation, html, additionalHtmlLines, result);
        return WinJS.Promise.as(result)
    });
    shareEncoderFactory.register(function canEncode(data) {
        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
        if (data && (MS.Entertainment.Data.VirtualList.is(data) || Array.isArray(data)) && MS.Entertainment.Utilities.isMusicApp1 && featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicShareToPhone))
            return true;
        else
            return false
    }, function encode(data, result) {
        var encodePromise = null;
        if (MS.Entertainment.Data.VirtualList.is(data))
            encodePromise = data.toArrayAll().then(function success(items) {
                return MS.Entertainment.Social.EncoderHelper.encodeMusicMedia(items, result, true)
            });
        else
            encodePromise = MS.Entertainment.Social.EncoderHelper.encodeMusicMedia(data, result, true);
        return WinJS.Promise.as(encodePromise)
    })
})()
})();
/* >>>>>>/components/shell/adcontrol.js:14779 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Components.Shell");
(function() {
    "use strict";
    var uacConsoleErrorMap = {
            ClientConfiguration: "clientConfiguration", ServerSideError: "serverSideError", InvalidServerResponse: "invalidServerResponse", NoAdAvailable: "noAdAvailable", NetworkConnectionFailure: "networkConnectionFailure", RefreshNotAllowed: "refreshNotAllowed", Other: "other", Unknown: "unknown"
        };
    WinJS.Namespace.define("MS.Entertainment.UI.Components.Shell", {
        AdControl: MS.Entertainment.UI.Framework.defineUserControl(null, function adControlConstructor() {
            this._eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell
        }, {
            ad: null, applicationId: null, adUnitId: null, countryOrRegion: null, isAutoRefreshEnabled: true, hideAdLabel: false, passThroughClickEvents: false, template: "/Components/Shell/AdControl.html#adControlTemplate", _errorValues: null, _eventProvider: null, _frozen: false, _errorOccurred: false, _uiStateServiceBinding: null, _resizeEventHandler: null, _clickEventHandler: null, initialize: function initialize() {
                    WinJS.Promise.timeout(MS.Entertainment.UI.Components.Shell.AdControl._createAdControlDelay).done(function timeoutComplete() {
                        if (this._unloaded || !this.domElement)
                            return;
                        if (MS.Entertainment.Utilities.isMusicApp1) {
                            var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            this._uiStateServiceBinding = WinJS.Binding.bind(uiState, {shouldShowAdsForFreePlay: this._showAdsForFreePlayChanged.bind(this)})
                        }
                        else
                            this._loadAdControl()
                    }.bind(this))
                }, _showAdsForFreePlayChanged: function() {
                    var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    if (!uiState.shouldShowAdsForFreePlay || !this.domElement || this._unloaded)
                        return;
                    if (this._isVisible)
                        this._loadAdControl();
                    else if (!this._resizeEventHandler)
                        this._resizeEventHandler = MS.Entertainment.Utilities.attachResizeEvent(this.domElement, function onResize() {
                            if (this._isVisible && uiState.shouldShowAdsForFreePlay) {
                                this._clearResizeEventHandler();
                                this._loadAdControl()
                            }
                        }.bind(this))
                }, _isVisible: {get: function() {
                        return (!this._unloaded && this.domElement && this.domElement.clientWidth > 0 && this.domElement.clientHeight > 0)
                    }}, _loadAdControl: function _loadAdControl() {
                    if (this._unloaded || !this.domElement)
                        return;
                    var regionCode;
                    var languageCode;
                    var globalizationManager = new Microsoft.Entertainment.Util.GlobalizationManager;
                    regionCode = globalizationManager.getRegion();
                    var resourceLanguage = MS.Entertainment.Utilities.getResourceLanguage();
                    languageCode = MS.Entertainment.Utilities.getLanguageCodeFromLocale(resourceLanguage);
                    this.countryOrRegion = regionCode;
                    this.applicationId = MS.Entertainment.UI.Components.Shell.AdControl._getAdApplicationId();
                    this.adUnitId = MS.Entertainment.UI.Components.Shell.AdControl._getAdUnitId(this.ad, regionCode, languageCode);
                    var loadTemplatePromise;
                    if (this.adUnitId && this.applicationId)
                        loadTemplatePromise = MS.Entertainment.UI.Framework.loadTemplate(this.template);
                    else
                        loadTemplatePromise = WinJS.Promise.wrap();
                    loadTemplatePromise.then(function loadTemplateComplete(templateInstance) {
                        if (!this._unloaded && templateInstance)
                            return templateInstance.render(this, this.domElement);
                        else
                            return WinJS.Promise.wrap()
                    }.bind(this)).then(function templateRenderComplete() {
                        if (!this._unloaded) {
                            MS.Entertainment.UI.Framework.processDeclMembers(this.domElement, this);
                            if (this.adControl) {
                                if (this._frozen)
                                    this._disableAdControl();
                                if (this.adControl.addAdTag) {
                                    this.adControl.addAdTag("tts", "false");
                                    if (this.hideAdLabel)
                                        this.adControl.addAdTag("adLabel", "false")
                                }
                                this.adControl.onEngagedChanged = function onEngagedChanged() {
                                    if (this.adControl.isEngaged) {
                                        this._pausePlayback();
                                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.typeToSearch))
                                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.typeToSearch).disableTypeToSearch()
                                    }
                                    else if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.typeToSearch))
                                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.typeToSearch).enableTypeToSearch()
                                }.bind(this);
                                this._createErrorEnumMap();
                                this.adControl.onErrorOccurred = function onErrorOccurred(ad, error) {
                                    var errorCode = error.errorCode;
                                    if (this._errorValues)
                                        switch (errorCode) {
                                            case this._errorValues.ClientConfiguration:
                                            case this._errorValues.ServerSideError:
                                            case this._errorValues.InvalidServerResponse:
                                                MS.Entertainment.UI.Components.Shell.fail("Ad load failure was encountered.\n\tError: {0}\n\tMessage: {1}".format(error.errorCode, error.errorMessage), null, MS.Entertainment.UI.Debug.errorLevel.low);
                                            case this._errorValues.NoAdAvailable:
                                            case this._errorValues.NetworkConnectionFailure:
                                                this.adLoadFailed = true;
                                                this._hideAdControl();
                                                return;
                                            case this._errorValues.RefreshNotAllowed:
                                                return;
                                            case this._errorValues.Other:
                                            case this._errorValues.Unknown:
                                            default:
                                                break
                                        }
                                    this._errorOccurred = true;
                                    WinJS.Promise.timeout(1000).done(function _setAdFailureState() {
                                        if (this._errorOccurred) {
                                            this.adLoadFailed = true;
                                            this.adLoaded = false;
                                            this._hideAdControl()
                                        }
                                    }.bind(this))
                                }.bind(this);
                                this.adControl.onAdRefreshed = function onAdRefreshed() {
                                    this._errorOccurred = false;
                                    this.adLoadFailed = false;
                                    this.adLoaded = true;
                                    this._showAdControl();
                                    this._clearFocusAttributeOnAdContainer();
                                    this._eventProvider.traceAdControl_Refreshed(this.applicationId, this.adUnitId)
                                }.bind(this);
                                this._clearFocusAttributeOnAdContainer();
                                if (this.passThroughClickEvents)
                                    this._clickEventHandler = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {click: this._handleClick.bind(this)}, true)
                            }
                        }
                    }.bind(this))
                }, unload: function unload() {
                    if (this.adControl) {
                        this.adControl.dispose();
                        this.adControl = null
                    }
                    if (this._uiStateServiceBinding) {
                        this._uiStateServiceBinding.cancel();
                        this._uiStateServiceBinding = null
                    }
                    if (this._clickEventHandler) {
                        this._clickEventHandler.cancel();
                        this._clickEventHandler = null
                    }
                    this._clearResizeEventHandler();
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, _clearResizeEventHandler: function _clearResizeEventHandler() {
                    if (this._resizeEventHandler) {
                        this._resizeEventHandler.cancel();
                        this._resizeEventHandler = null
                    }
                }, _pausePlayback: function _pausePlayback() {
                    var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                    if (sessionManager && sessionManager.primarySession.sessionId === MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying)
                        switch (sessionManager.primarySession.currentTransportState) {
                            case MS.Entertainment.Platform.Playback.TransportState.playing:
                            case MS.Entertainment.Platform.Playback.TransportState.starting:
                            case MS.Entertainment.Platform.Playback.TransportState.buffering:
                                sessionManager.primarySession.targetTransportState = MS.Entertainment.Platform.Playback.TransportState.paused;
                                break
                        }
                }, _hideAdControl: function _hideAdControl() {
                    if (this._unloaded || !MS.Entertainment.Utilities.isApp2)
                        return;
                    WinJS.Utilities.removeClass(this.domElement, "win-focusable");
                    MS.Entertainment.UI.Framework.beginHideAnimations(this.adControlWrapper)
                }, _showAdControl: function _showAdControl() {
                    if (this._unloaded || !MS.Entertainment.Utilities.isApp2)
                        return;
                    WinJS.Utilities.addClass(this.domElement, "win-focusable");
                    MS.Entertainment.UI.Framework.beginShowAnimations(this.adControlWrapper)
                }, _disableAdControl: function _disableAdControl() {
                    if (this.adControl) {
                        if (this.adControl._stopViewableChangeMonitoring)
                            this.adControl._stopViewableChangeMonitoring();
                        if (this.adControl.suspend) {
                            this.adControl.isAutoRefreshEnabled = false;
                            this.adControl.suspend()
                        }
                        if (this.adControl._domElement)
                            WinJS.Utilities.addClass(this.adControl._domElement, "disabledAdControl")
                    }
                    if (this.domElement)
                        this.domElement.disabled = true
                }, _enableAdControl: function _enableAdControl() {
                    if (this.domElement)
                        this.domElement.disabled = false;
                    if (this.adControl) {
                        if (this.adControl._domElement)
                            WinJS.Utilities.removeClass(this.adControl._domElement, "disabledAdControl");
                        if (this.adControl.resume) {
                            this.adControl.resume();
                            this.adControl.isAutoRefreshEnabled = true
                        }
                        if (this.adControl._startViewableChangeMonitoring)
                            this.adControl._startViewableChangeMonitoring()
                    }
                }, _handleClick: function _handleClick() {
                    if (!this._unloaded && this.adControl && this.adControl._click)
                        this.adControl._click()
                }, _clearFocusAttributeOnAdContainer: function _clearFocusAttributeOnAdContainer() {
                    if (this.passThroughClickEvents) {
                        var focusableElement = this.domElement.querySelector("iframe");
                        if (focusableElement)
                            WinJS.Utilities.removeClass(focusableElement, "win-focusable")
                    }
                }, _createErrorEnumMap: function _createErrorEnumMap() {
                    this._errorValues = MS.Entertainment.Utilities.isApp2 ? uacConsoleErrorMap : this.adControl._ERROR_ENUM
                }, freeze: function freeze() {
                    this._frozen = true;
                    WinJS.Promise.timeout(1).done(function() {
                        if (this._frozen)
                            this._disableAdControl()
                    }.bind(this));
                    MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                }, thaw: function thaw() {
                    MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this);
                    this._frozen = false;
                    this._enableAdControl()
                }
        }, {
            adLoaded: false, adLoadFailed: false
        }, {
            _createAdControlDelay: 2000, _getAdApplicationId: function _getAdApplicationId() {
                    var adApplicationId;
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    if (MS.Entertainment.Utilities.isVideoApp1)
                        adApplicationId = configurationManager.ads.videoAdApplicationId;
                    else if (MS.Entertainment.Utilities.isVideoApp2)
                        adApplicationId = configurationManager.ads.video2AdApplicationId;
                    else if (MS.Entertainment.Utilities.isMusicApp)
                        adApplicationId = configurationManager.ads.musicAdApplicationId;
                    MS.Entertainment.UI.Components.Shell.assert(adApplicationId, "Ad configuration application id not found.");
                    return adApplicationId
                }, _getAdUnitId: function _getAdUnitId(ad, regionCode, languageCode) {
                    var adUnitId;
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    var adIds = configurationManager.ads[ad];
                    MS.Entertainment.UI.Components.Shell.assert(adIds, "Ad configuration unit ids not found: configuration.ads." + ad);
                    if (adIds) {
                        adUnitId = MS.Entertainment.Utilities.getValueFromCsvList(adIds, languageCode + "-" + regionCode);
                        if (!adUnitId)
                            adUnitId = MS.Entertainment.Utilities.getValueFromCsvList(adIds, regionCode)
                    }
                    return adUnitId
                }, AdIds: {
                    musicDashboard: "musicDashboardAdUnitIds", musicPopularSidebar: "musicPopularSidebarAdUnitIds", musicSpotlightSidebar: "musicSpotlightSidebarAdUnitIds", video2DashboardMovie: "video2MovieAdUnitIds", video2DashboardTv: "video2TvAdUnitIds", videoDashboardMovie: "videoMovieAdUnitIds", videoDashboardTv: "videoTvAdUnitIds"
                }
        }), SidebarAdControl: MS.Entertainment.UI.Framework.defineUserControl("/Components/Shell/AdControl.html#sidebarAdControl", null, {
                _signInBindings: null, _signedInUserBindings: null, initialize: function initialize() {
                        this._adControl.ad = this.ad;
                        var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        this._signInBindings = WinJS.Binding.bind(signIn, {isSignedIn: this._updateSubscriptionLinkVisibility.bind(this)});
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        this._signedInUserBindings = WinJS.Binding.bind(signedInUser, {isSubscription: this._updateSubscriptionLinkVisibility.bind(this)});
                        if (this._subscriptionLink && this._subscriptionLink.action)
                            this._subscriptionLink.action.parameter = MS.Entertainment.Music.Freeplay.Events.musicPassUpsellMarketplaceLinkInvoked
                    }, unload: function unload() {
                        if (this._signInBindings) {
                            this._signInBindings.cancel();
                            this._signInBindings = null
                        }
                        if (this._signedInUserBindings) {
                            this._signedInUserBindings.cancel();
                            this._signedInUserBindings = null
                        }
                        MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                    }, _updateSubscriptionLinkVisibility: function _updateSubscriptionLinkVisibility() {
                        if (this._subscriptionLink && this._subscriptionLink.action)
                            this.showSignupLink = this._subscriptionLink.action.canExecute();
                        else
                            this.showSignupLink = false
                    }
            }, {showSignupLink: false})
    })
})()
})();
/* >>>>>>/controls/music1/explorehub.js:15051 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                var MusicExploreHub = (function(_super) {
                        __extends(MusicExploreHub, _super);
                        function MusicExploreHub(element, options) {
                            _super.call(this, element, options);
                            this.loadModulesImmediately = true;
                            MS.Entertainment.UI.Framework.processDeclarativeControlContainer(this);
                            this._enableFocusEventHandlers("page-explore")
                        }
                        MusicExploreHub.prototype.onHeroCarouselKeyDown = function(event) {
                            if (event.keyCode === WinJS.Utilities.Key.enter)
                                this.onHeroCarouselInvoke(event)
                        };
                        MusicExploreHub.prototype.onHeroCarouselInvoke = function(event) {
                            if (event.srcElement && !WinJS.Utilities.hasClass(event.srcElement, "win-navbutton"))
                                if (this._heroCarousel && this._heroCarousel.dataSource) {
                                    var item = this._heroCarousel.dataSource[this._heroCarousel.currentFlipViewPage];
                                    this.invokeModuleAction(item)
                                }
                        };
                        MusicExploreHub.prototype.onMusicPassSignUpClick = function(event) {
                            var viewModel = this.dataContext;
                            this.invokeActionForEvent(event, viewModel && viewModel.upsell && viewModel.upsell.action)
                        };
                        MusicExploreHub.prototype.onLearnMoreClick = function(event) {
                            var viewModel = this.dataContext;
                            this.invokeActionForEvent(event, viewModel && viewModel.upsell.learnMoreAction)
                        };
                        MusicExploreHub.isDeclarativeControlContainer = true;
                        return MusicExploreHub
                    })(Controls.PageViewBase);
                Controls.MusicExploreHub = MusicExploreHub
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.MusicExploreHub)
})();
/* >>>>>>/controls/delayablecontrol.js:15109 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
                var DelayableControl = (function() {
                        function DelayableControl(element, options) {
                            this.enableDelayInitialization = true;
                            this.domElement = element;
                            this._options = options
                        }
                        DelayableControl.prototype.delayInitialize = function() {
                            if (this.domElement) {
                                this.domElement.winControl = null;
                                var controlString = this.domElement.getAttribute("data-ent-control");
                                var controlConstructor = null;
                                var control = null;
                                if (controlString)
                                    controlConstructor = WinJS.Utilities.getMember(controlString);
                                if (controlConstructor) {
                                    this.domElement.setAttribute("data-win-control", controlString);
                                    this.domElement.winControl = new controlConstructor(this.domElement, this._options)
                                }
                                else
                                    Controls.fail("DelayabledControl::delayInitialize() The given control constructor is invalid. Check data-ent-control on the HTML template. controlString: " + controlString);
                                this.domElement = null;
                                this._options = null
                            }
                        };
                        return DelayableControl
                    })();
                Controls.DelayableControl = DelayableControl;
                WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.DelayableControl)
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/music/musicmarketplacepivottypes.js:15154 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            (function(MusicMarketplacePivotTypes) {
                MusicMarketplacePivotTypes[MusicMarketplacePivotTypes["albums"] = 0] = "albums";
                MusicMarketplacePivotTypes[MusicMarketplacePivotTypes["artists"] = 1] = "artists";
                MusicMarketplacePivotTypes[MusicMarketplacePivotTypes["songs"] = 2] = "songs"
            })(ViewModels.MusicMarketplacePivotTypes || (ViewModels.MusicMarketplacePivotTypes = {}));
            var MusicMarketplacePivotTypes = ViewModels.MusicMarketplacePivotTypes
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/music/songsmodule.js:15173 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            (function(SongsModuleViews) {
                SongsModuleViews[SongsModuleViews["artistAlbum"] = 1] = "artistAlbum";
                SongsModuleViews[SongsModuleViews["collectionAlbum"] = 2] = "collectionAlbum";
                SongsModuleViews[SongsModuleViews["catalogAlbum"] = 3] = "catalogAlbum";
                SongsModuleViews[SongsModuleViews["collectionPlaylist"] = 4] = "collectionPlaylist";
                SongsModuleViews[SongsModuleViews["catalogPlaylist"] = 5] = "catalogPlaylist";
                SongsModuleViews[SongsModuleViews["searchCollection"] = 6] = "searchCollection";
                SongsModuleViews[SongsModuleViews["searchCatalog"] = 7] = "searchCatalog";
                SongsModuleViews[SongsModuleViews["catalogTopSongs"] = 8] = "catalogTopSongs"
            })(ViewModels.SongsModuleViews || (ViewModels.SongsModuleViews = {}));
            var SongsModuleViews = ViewModels.SongsModuleViews;
            var SongGalleryTemplate = (function() {
                    function SongGalleryTemplate() {
                        this.itemTemplate = "select(.templateid-collectionSongTemplate)";
                        this.tap = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                        this.layout = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Layout.list;
                        this.orientation = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                        this.zoomedOutLayout = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                        this.invokeBehavior = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline;
                        this.invokeHelperFactory = Entertainment.UI.Controls.GalleryControlInvocationHelper.create;
                        this.itemsDraggable = true;
                        this.forceInteractive = true;
                        this.minimumListLength = 1;
                        this.maxRows = NaN;
                        this.grouped = false;
                        this.hideShadow = true;
                        this.allowZoom = false;
                        this.allowSelectAll = false;
                        this.delayHydrateLibraryId = false;
                        this.selectionStyleFilled = false;
                        this.swipeBehavior = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                        this.selectionMode = Entertainment.UI.Controls.GalleryControl && Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                        this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL};
                        this.listViewClassName = "gallery-songs"
                    }
                    return SongGalleryTemplate
                })();
            ViewModels.SongGalleryTemplate = SongGalleryTemplate;
            var MarketplaceSongGalleryTemplate = (function(_super) {
                    __extends(MarketplaceSongGalleryTemplate, _super);
                    function MarketplaceSongGalleryTemplate() {
                        _super.call(this);
                        this.itemTemplate = "select(.templateid-marketplaceSongTemplate)";
                        this.delayHydrateLibraryId = true
                    }
                    return MarketplaceSongGalleryTemplate
                })(SongGalleryTemplate);
            ViewModels.MarketplaceSongGalleryTemplate = MarketplaceSongGalleryTemplate;
            var PlaylistSongGalleryTemplate = (function(_super) {
                    __extends(PlaylistSongGalleryTemplate, _super);
                    function PlaylistSongGalleryTemplate() {
                        _super.apply(this, arguments);
                        this.itemsReorderable = true;
                        this.allowSelectAll = true
                    }
                    return PlaylistSongGalleryTemplate
                })(SongGalleryTemplate);
            ViewModels.PlaylistSongGalleryTemplate = PlaylistSongGalleryTemplate;
            var SongsModule = (function(_super) {
                    __extends(SongsModule, _super);
                    function SongsModule(view, options) {
                        _super.call(this, SongsModuleViews[view]);
                        this._defaultTrack = null;
                        this._isExcludedFromPageState = false;
                        this._lockedModuleState = -3;
                        this._isModuleStateLocked = false;
                        this._mediaContext = null;
                        this._name = null;
                        this._parentMediaId = null;
                        this._parentMediaServiceIdType = null;
                        this._parentMediaItem = null;
                        this._count = 0;
                        this._searchText = null;
                        this._moduleState = -3;
                        Entertainment.Framework.ScriptUtilities.setOptions(this, options);
                        this.name = SongsModuleViews[view];
                        this.selectedTemplate = new SongGalleryTemplate
                    }
                    Object.defineProperty(SongsModule.prototype, "enableDelayInitialize", {
                        get: function() {
                            return true
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "count", {
                        get: function() {
                            return this._count
                        }, set: function(value) {
                                this.updateAndNotify("count", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "isExcludedFromPageState", {
                        get: function() {
                            return this._isExcludedFromPageState
                        }, set: function(value) {
                                this.updateAndNotify("isExcludedFromPageState", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "defaultTrack", {
                        get: function() {
                            return this._defaultTrack
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "mediaContext", {
                        get: function() {
                            return this._mediaContext
                        }, set: function(value) {
                                this.updateAndNotify("mediaContext", value);
                                if (this._mediaContext) {
                                    if (this._playlistChangeHandler)
                                        this._playlistChangeHandler.availabilityFilter = this._mediaContext.availabilityFilter || Microsoft.Entertainment.Platform.MediaAvailability.available;
                                    if (this._mediaContext.containingMedia)
                                        this.containingMedia = this._mediaContext.containingMedia
                                }
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "name", {
                        get: function() {
                            return this._name
                        }, set: function(value) {
                                this.updateAndNotify("name", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "parentMediaId", {
                        get: function() {
                            return this._parentMediaId
                        }, set: function(value) {
                                this._parentMediaId = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "parentMediaServiceIdType", {
                        get: function() {
                            return this._parentMediaServiceIdType
                        }, set: function(value) {
                                this._parentMediaServiceIdType = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "parentMediaItem", {
                        get: function() {
                            return this._parentMediaItem
                        }, set: function(value) {
                                if (value !== this._parentMediaItem) {
                                    this._parentMediaItem = value;
                                    this.moduleAction = this._createHeaderAction()
                                }
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "searchText", {
                        get: function() {
                            return this._searchText
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "trackLimit", {
                        get: function() {
                            return this._trackLimit
                        }, set: function(value) {
                                this._trackLimit = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SongsModule.prototype, "moduleState", {
                        get: function() {
                            return this._moduleState
                        }, set: function(value) {
                                if (this._isModuleStateLocked)
                                    this._lockedModuleState = value;
                                else
                                    this.updateAndNotify("moduleState", value)
                            }, enumerable: true, configurable: true
                    });
                    SongsModule.prototype.cloneCurrentQuery = function() {
                        if (!this._lastUsedQuery || !this._lastUsedQuery.clone)
                            return null;
                        return this._lastUsedQuery.clone()
                    };
                    SongsModule.prototype.createContainingMedia = function() {
                        var containingMedia = new Entertainment.UI.EditableContainingMedia;
                        if (this.containingMedia)
                            containingMedia.playbackItemSource = this.containingMedia.playbackItemSource;
                        else {
                            var clonedQuery = this.cloneCurrentQuery();
                            containingMedia.playbackItemSource = clonedQuery
                        }
                        containingMedia.editableItemSource = this.items;
                        return containingMedia
                    };
                    SongsModule.prototype.forceLiveQueryRefresh = function() {
                        var pausableQuery = this.pausableQuery;
                        if (!this._disposed && pausableQuery && pausableQuery.isLive && pausableQuery.forceLiveRefresh)
                            pausableQuery.forceLiveRefresh()
                    };
                    SongsModule.prototype.createSelectionHandlers = function() {
                        var _this = this;
                        var result = [];
                        var clearSelection = function() {
                                return _this._raiseShouldClearSelection()
                            };
                        var removeItem = function() {
                                return _this._raiseShouldClearSelection()
                            };
                        var editItem = function() {
                                return _this._editItemCompleted()
                            };
                        var purchaseItem = function() {
                                _this.dispatchEvent("purchaseTrackCompleted")
                            };
                        if (ViewModels.SmartAppbarActions.setDefaultGalleryEventHandlers)
                            result.push(ViewModels.SmartAppbarActions.setDefaultGalleryEventHandlers(clearSelection, removeItem));
                        result.push({
                            deleteMedia: removeItem, editMetadata: editItem, purchase: purchaseItem
                        });
                        return result
                    };
                    SongsModule.prototype._editItemCompleted = function() {
                        this._raiseShouldClearSelection();
                        this.forceLiveQueryRefresh();
                        this.dispatchEvent("editMetadata")
                    };
                    SongsModule.prototype.delayInitialize = function() {
                        _super.prototype.delayInitialize.call(this);
                        this._raiseDelayLoadedEvent()
                    };
                    SongsModule.prototype.dispose = function() {
                        _super.prototype.dispose.call(this);
                        this._releaseTrackListChangeHandler();
                        this._releasePlaylistChangeHandler()
                    };
                    SongsModule.prototype.getViewDefinition = function(view) {
                        return ViewModels.SongsModule._views[view]
                    };
                    Object.defineProperty(SongsModule.prototype, "moduleAction", {
                        get: function() {
                            if (!this._moduleAction)
                                this._moduleAction = this._createHeaderAction();
                            return this._moduleAction
                        }, set: function(value) {
                                this.updateAndNotify("moduleAction", value)
                            }, enumerable: true, configurable: true
                    });
                    SongsModule.prototype.load = function() {
                        return this.refresh().then(null, function(error) {
                                var isOnline = Entertainment.UI.NetworkStatusService.isOnline();
                                Trace.assert(!isOnline || !error || WinJS.Promise.isCanceledError(error), "SongsModule::load(). Failed to load module. Error message: " + (error && error.message), String.empty, Entertainment.UI.Debug.errorLevel.low)
                            })
                    };
                    SongsModule.prototype.reload = function() {
                        return this.load()
                    };
                    SongsModule.prototype.lockModuleState = function() {
                        this._isModuleStateLocked = true
                    };
                    SongsModule.prototype.unLockModuleState = function() {
                        this._isModuleStateLocked = false;
                        this.updateAndNotify("moduleState", this._lockedModuleState)
                    };
                    SongsModule.prototype.refreshItems = function() {
                        if (this.view !== SongsModuleViews[2] && this.items)
                            this.items.forEach(function(virtualListItem) {
                                var item = WinJS.Utilities.getMember("item.data", virtualListItem);
                                if (item)
                                    ViewModels.MediaItemModel.hydrateLibraryInfoAsync(item)
                            })
                    };
                    SongsModule.prototype._createHeaderAction = function() {
                        var actionService = Entertainment.ServiceLocator.getService(Entertainment.Services.actions);
                        var navigateAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.navigate);
                        switch (this.view) {
                            case SongsModuleViews[6]:
                                navigateAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.searchResultsNavigate);
                                navigateAction.parameter = {
                                    searchText: this.searchText, isCatalogSearch: false, isSongSearch: true
                                };
                                break;
                            case SongsModuleViews[7]:
                                navigateAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.searchResultsNavigate);
                                navigateAction.parameter = {
                                    searchText: this.searchText, isCatalogSearch: true, isSongSearch: true
                                };
                                break;
                            case SongsModuleViews[8]:
                                navigateAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.topMusicMarketplaceNavigate);
                                navigateAction.parameter = {pivotType: 2};
                                break;
                            case SongsModuleViews[1]:
                                if (this.parentMediaItem) {
                                    navigateAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.artistMediaNavigate);
                                    navigateAction.parameter = this.parentMediaItem.clone();
                                    navigateAction.parameter.canonicalId = this.parentMediaId;
                                    navigateAction.parameter.pivotType = 2;
                                    navigateAction.parameter.modifierSelection = 1
                                }
                                break;
                            default:
                                MS.Entertainment.ViewModels.fail("The " + this.view + " view for the SongsModule doesn't support a header action.");
                                break
                        }
                        return navigateAction
                    };
                    SongsModule.prototype._listenForTrackChanges = function() {
                        var _this = this;
                        this._releaseTrackListChangeHandler();
                        var listenForChanges = this.items && (this.items.count === 0) || (this._lastUsedQuery && this._lastUsedQuery.isLive);
                        if (listenForChanges)
                            this._tracksChangedBinding = Entertainment.Utilities.addEventHandlers(this.items, {countChanged: function(result) {
                                    var isLiveQuery = _this._lastUsedQuery && _this._lastUsedQuery.isLive;
                                    if (isLiveQuery && _this._lastUsedQuery.forceLiveRefresh)
                                        _this._lastUsedQuery.forceLiveRefresh();
                                    if (result && result.detail) {
                                        var newCount = result.detail.newValue;
                                        if (newCount === 0) {
                                            _this.moduleState = 0;
                                            _this._raiseShouldClearSelection()
                                        }
                                        else
                                            _this.moduleState = 2;
                                        if (_this.onTrackAddedOrRemoved)
                                            _this.onTrackAddedOrRemoved(newCount);
                                        _this.count = newCount
                                    }
                                    if (_this.count > 0 && !isLiveQuery)
                                        _this._releaseTrackListChangeHandler()
                                }})
                    };
                    SongsModule.prototype._onBeginQuery = function(lastUsedQuery) {
                        var serviceId = Entertainment.Utilities.isValidServiceId(this.parentMediaId) ? this.parentMediaId : String.empty;
                        switch (this.view) {
                            case SongsModuleViews[1]:
                                lastUsedQuery.id = this.parentMediaId;
                                if (this.trackLimit > 0) {
                                    lastUsedQuery.chunkSize = this.trackLimit;
                                    lastUsedQuery.aggregateChunks = false
                                }
                                break;
                            case SongsModuleViews[2]:
                                lastUsedQuery.albumId = this.parentMediaId;
                                lastUsedQuery.mediaAvailability = this.filterValue;
                                break;
                            case SongsModuleViews[3]:
                                lastUsedQuery.id = this.parentMediaId;
                                lastUsedQuery.idType = this.parentMediaServiceIdType;
                                break;
                            case SongsModuleViews[4]:
                                lastUsedQuery.playlistId = this.parentMediaId;
                                lastUsedQuery.mediaAvailability = this.filterValue;
                                break;
                            case SongsModuleViews[5]:
                                lastUsedQuery.id = this.parentMediaId;
                                lastUsedQuery.idType = this.parentMediaServiceIdType;
                                break;
                            case SongsModuleViews[6]:
                                lastUsedQuery.keyword = this.searchText;
                                if (this.trackLimit > 0) {
                                    lastUsedQuery.chunkSize = this.trackLimit;
                                    lastUsedQuery.aggregateChunks = false
                                }
                                break;
                            case SongsModuleViews[7]:
                                lastUsedQuery.search = this.searchText;
                                break;
                            case SongsModuleViews[8]:
                                if (this.trackLimit > 0) {
                                    lastUsedQuery.chunkSize = this.trackLimit;
                                    lastUsedQuery.aggregateChunks = false
                                }
                                break
                        }
                        this.moduleState = 1
                    };
                    SongsModule.prototype._onItemsChanging = function(newValue, oldValue) {
                        var _this = this;
                        if (this.defaultTrack && newValue)
                            newValue.forEachAll(function(iteration) {
                                if (_this.defaultTrack.isEqual(iteration.item.data)) {
                                    _this.initialInvokedItem = newValue.indexFromKey(iteration.item.key);
                                    iteration.stop = true
                                }
                            }).done(null, function(error) {
                                MS.Entertainment.ViewModels.fail("forEachAll failed. Failed to find invoked track. error: " + (error && error.message))
                            })
                    };
                    SongsModule.prototype._onQueryCompleted = function(query) {
                        _super.prototype._onQueryCompleted.call(this, query);
                        if (this.view === SongsModuleViews[4]) {
                            this._releasePlaylistChangeHandler();
                            this._playlistChangeHandler = new ViewModels.VirtualPlaylistChangeHandler(this.items);
                            this._playlistChangeHandler.libraryId = this.parentMediaId;
                            this._playlistChangeHandler.availabilityFilter = this._mediaContext ? this._mediaContext.availabilityFilter : Microsoft.Entertainment.Platform.MediaAvailability.available
                        }
                        if (!query || !query.result)
                            this.moduleState = -1;
                        else if (query.result.totalCount <= 0) {
                            this.moduleState = 0;
                            this.count = 0
                        }
                        else {
                            if (query.result.tracks)
                                this.items = query.result.tracks;
                            this.moduleState = 2;
                            this.count = query.result.totalCount
                        }
                        this._listenForTrackChanges()
                    };
                    SongsModule.prototype._onQueryFailed = function(error) {
                        _super.prototype._onQueryFailed.call(this, error);
                        this._releasePlaylistChangeHandler();
                        if (!ViewModels.ModuleBase.isValidSearchText(this.searchText)) {
                            MS.Entertainment.UI.fail("SongsModule::_onQueryFailed(). Cannot search using the term: " + this.searchText);
                            this.count = 0;
                            this.moduleState = 0
                        }
                        else
                            this.moduleState = -1
                    };
                    SongsModule.prototype._releasePlaylistChangeHandler = function() {
                        if (this._playlistChangeHandler) {
                            this._playlistChangeHandler.dispose();
                            this._playlistChangeHandler = null
                        }
                    };
                    SongsModule.prototype._releaseTrackListChangeHandler = function() {
                        if (this._tracksChangedBinding) {
                            this._tracksChangedBinding.cancel();
                            this._tracksChangedBinding = null
                        }
                    };
                    SongsModule._views = {
                        artistAlbum: new ViewModels.NodeValues(Entertainment.Data.Query.Music.ArtistTopSongs, {acquisitionData: new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.artist)}, {selectedTemplate: new MarketplaceSongGalleryTemplate}), collectionAlbum: new ViewModels.NodeValues(Entertainment.Data.Query.libraryTracks, {
                                sort: Microsoft.Entertainment.Queries.TracksSortBy.numberAscending, mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.available, isLive: true, acquisitionData: new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.track)
                            }, {selectedTemplate: new SongGalleryTemplate}), catalogAlbum: new ViewModels.NodeValues(Entertainment.Data.Query.Music.AlbumSongs, {acquisitionData: new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.track)}, {selectedTemplate: new MarketplaceSongGalleryTemplate}), collectionPlaylist: new ViewModels.NodeValues(Entertainment.Data.Query.libraryPlaylistMediaItems, {
                                isLive: true, acquisitionData: new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playlist)
                            }, {selectedTemplate: new PlaylistSongGalleryTemplate}), catalogPlaylist: new ViewModels.NodeValues(Entertainment.Data.Query.Music.CloudPlaylist, {acquisitionData: new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.playlist)}, {selectedTemplate: new MarketplaceSongGalleryTemplate}), searchCollection: new ViewModels.NodeValues(Entertainment.Data.Query.libraryTracks, {
                                isLive: true, acquisitionData: new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.track)
                            }, {selectedTemplate: new SongGalleryTemplate}), searchCatalog: new ViewModels.NodeValues(Entertainment.Data.Query.Music.SongSearch, {acquisitionData: new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.track)}, {selectedTemplate: new MarketplaceSongGalleryTemplate}), catalogTopSongs: new ViewModels.NodeValues(Entertainment.Data.Query.Music.TopSongs, {acquisitionData: new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.track)}, {selectedTemplate: new MarketplaceSongGalleryTemplate})
                    };
                    return SongsModule
                })(ViewModels.QueryViewModel);
            ViewModels.SongsModule = SongsModule
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/music/explorehubviewmodelbase.js:15632 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var UI = MS.Entertainment.UI;
            var ExploreHubViewModelBase = (function(_super) {
                    __extends(ExploreHubViewModelBase, _super);
                    function ExploreHubViewModelBase() {
                        _super.call(this);
                        this._viewStateViewModel = null;
                        this._upsellViewModel = null;
                        this.applyGlobalNotifications = true;
                        this._initializeModules();
                        this._upsellViewModel = new ViewModels.UpsellViewModel;
                        Entertainment.ServiceLocator.getService(Entertainment.Services.adService)
                    }
                    Object.defineProperty(ExploreHubViewModelBase.prototype, "heroModule", {
                        get: function() {
                            return this._getModuleByName("heroModule")
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ExploreHubViewModelBase.prototype, "topAlbums", {
                        get: function() {
                            return this._getModuleByName("topAlbums")
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ExploreHubViewModelBase.prototype, "newAlbums", {
                        get: function() {
                            return this._getModuleByName("newAlbums")
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ExploreHubViewModelBase.prototype, "freeAlbums", {
                        get: function() {
                            if (this.isMusicFreeGiveAwayMarketplace)
                                return this._getModuleByName("freeAlbums");
                            else
                                return null
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ExploreHubViewModelBase.prototype, "topSongs", {
                        get: function() {
                            return this._getModuleByName("catalogTopSongs")
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ExploreHubViewModelBase.prototype, "topArtists", {
                        get: function() {
                            return this._getModuleByName("artistsModule")
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ExploreHubViewModelBase.prototype, "upsell", {
                        get: function() {
                            return this._upsellViewModel
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ExploreHubViewModelBase.prototype, "isMusicFreeGiveAwayMarketplace", {
                        get: function() {
                            var featureEnablement = Entertainment.ServiceLocator.getService(Entertainment.Services.featureEnablement);
                            return featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreeGiveAwayMarketplace)
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ExploreHubViewModelBase.prototype, "viewStateViewModel", {
                        get: function() {
                            if (!this._viewStateViewModel) {
                                var viewStateItems = new Array;
                                viewStateItems[-2] = new ViewModels.ViewStateItem(String.load(String.id.IDS_MUSIC_OFFLINE_HEADER), String.load(String.id.IDS_MUSIC_OFFLINE_DETAILS), []);
                                viewStateItems[-1] = new ViewModels.ViewStateItem(String.load(String.id.IDS_MUSIC_ERROR_HEADER), String.load(String.id.IDS_MUSIC_ERROR_DETAILS), []);
                                viewStateItems[0] = new ViewModels.ViewStateItem(String.load(String.id.IDS_MUSIC_ERROR_HEADER), String.load(String.id.IDS_MUSIC_ERROR_DETAILS), []);
                                this._viewStateViewModel = new ViewModels.ViewStateViewModel(viewStateItems)
                            }
                            return this._viewStateViewModel
                        }, enumerable: true, configurable: true
                    });
                    ExploreHubViewModelBase.prototype.scheduledDelayInitialize = function() {
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playbackPrivilegesNotifier);
                        this.modules.forEach(function(exploreModule) {
                            exploreModule.delayInitialize()
                        })
                    };
                    ExploreHubViewModelBase.prototype.dispose = function() {
                        _super.prototype.dispose.call(this);
                        if (this._secondaryModulesViewStateBindings) {
                            this._secondaryModulesViewStateBindings.cancel();
                            this._secondaryModulesViewStateBindings = null
                        }
                        if (this._upsellViewModel) {
                            this._upsellViewModel.dispose();
                            this._upsellViewModel = null
                        }
                    };
                    ExploreHubViewModelBase.prototype.freeze = function() {
                        _super.prototype.freeze.call(this)
                    };
                    ExploreHubViewModelBase.prototype.thaw = function() {
                        _super.prototype.thaw.call(this);
                        if (!this._exploreHubRefreshTime) {
                            var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            this._exploreHubRefreshTime = configManager.music.exploreHubRefreshTime
                        }
                        if (!this._lastRefreshDateTime || (Date.now() - this._lastRefreshDateTime) > this._exploreHubRefreshTime)
                            this.loadModules()
                    };
                    ExploreHubViewModelBase.prototype.loadModules = function() {
                        if (!this.isOnline) {
                            this.viewStateViewModel.viewState = -2;
                            return
                        }
                        this.modules.forEach(function(moduleToLoad) {
                            if (moduleToLoad)
                                moduleToLoad.load()
                        });
                        this._lastRefreshDateTime = Date.now()
                    };
                    ExploreHubViewModelBase.prototype.navigatedBackTo = function() {
                        this.modules.forEach(function(exploreModule) {
                            exploreModule.refreshItems()
                        })
                    };
                    ExploreHubViewModelBase.prototype._initializeModules = function() {
                        var albumOptions = {shouldHydrateLibraryId: true};
                        var topSongsOptions = {trackLimit: ExploreHubViewModelBase.TOP_SONGS_LIMIT};
                        this.modules = [new ViewModels.HeroModule, ViewModels.AlbumsModuleFactory.createNewAlbumsModule(), new ViewModels.SongsModule(8, topSongsOptions), ViewModels.AlbumsModuleFactory.createTopAlbumsModule(), new ViewModels.ArtistsModule(4), ];
                        if (this.isMusicFreeGiveAwayMarketplace) {
                            this.modules.push(ViewModels.AlbumsModuleFactory.createFreeAlbumsModule());
                            this._waitForReadyStateWithFreeAlbums()
                        }
                        else
                            this._waitForReadyStateWithoutFreeAlbums()
                    };
                    ExploreHubViewModelBase.prototype._waitForReadyStateWithFreeAlbums = function() {
                        var _this = this;
                        this.newAlbums.lockModuleState();
                        this.topSongs.lockModuleState();
                        this.topAlbums.lockModuleState();
                        this.topArtists.lockModuleState();
                        this.listenForModuleViewStateChanges();
                        this._secondaryModulesViewStateBindings = UI.Framework.addEventHandlers(this.freeAlbums, {moduleStateChanged: function(event) {
                                if (Entertainment.Utilities.ViewState.isStateCompleted(_this.freeAlbums.moduleState)) {
                                    _this.topArtists.unLockModuleState();
                                    _this.topAlbums.unLockModuleState();
                                    _this.topSongs.unLockModuleState();
                                    _this.newAlbums.unLockModuleState()
                                }
                            }})
                    };
                    ExploreHubViewModelBase.prototype._waitForReadyStateWithoutFreeAlbums = function() {
                        var _this = this;
                        this.topSongs.lockModuleState();
                        this.topAlbums.lockModuleState();
                        this.topArtists.lockModuleState();
                        this.listenForModuleViewStateChanges();
                        this._secondaryModulesViewStateBindings = UI.Framework.addEventHandlers(this.newAlbums, {moduleStateChanged: function(event) {
                                if (Entertainment.Utilities.ViewState.isStateCompleted(_this.newAlbums.moduleState)) {
                                    _this.topArtists.unLockModuleState();
                                    _this.topAlbums.unLockModuleState();
                                    _this.topSongs.unLockModuleState()
                                }
                            }})
                    };
                    ExploreHubViewModelBase.prototype._globalNotificationsFilter = function(notification) {
                        return notification.category && notification.category.name === UI.NotificationCategoryEnum.explicitPrivileges.name
                    };
                    ExploreHubViewModelBase.TOP_SONGS_LIMIT = 5;
                    return ExploreHubViewModelBase
                })(ViewModels.PageViewModelBase);
            ViewModels.ExploreHubViewModelBase = ExploreHubViewModelBase
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/coremodulebase.js:15817 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var CoreModuleBase = (function(_super) {
                    __extends(CoreModuleBase, _super);
                    function CoreModuleBase(moduleOptions) {
                        _super.call(this);
                        this._bindableItems = null;
                        this._count = -1;
                        this._isModuleStateLocked = false;
                        this._items = null;
                        this._lockedModuleState = -3;
                        this._moduleState = -3;
                        this._queryWatcher = null;
                        this._query = null;
                        Trace.assert(moduleOptions, "CoreModuleBase::constructor(). moduleOptions is expected to create a module");
                        this._moduleOptions = moduleOptions;
                        this._queryWatcher = new Entertainment.Framework.QueryWatcher(this.moduleOptions.queryId);
                        if (this._moduleOptions.queryType)
                            this._query = new this._moduleOptions.queryType;
                        else if (this._moduleOptions.queryFactory)
                            this._query = this._moduleOptions.queryFactory();
                        else
                            Trace.fail("Cannot create CoreModuleBase without a queryType or queryFactory");
                        this._query.queryId = this._moduleOptions.queryId;
                        this.updateQuery(this._moduleOptions.queryParameters)
                    }
                    Object.defineProperty(CoreModuleBase.prototype, "moduleOptions", {
                        get: function() {
                            return this._moduleOptions
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "isExcludedFromPageState", {
                        get: function() {
                            return this.moduleOptions.isExcludedFromPageState
                        }, set: function(value) {
                                this.moduleOptions.isExcludedFromPageState = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "name", {
                        get: function() {
                            return this._moduleOptions.name
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "displayName", {
                        get: function() {
                            return this._moduleOptions.displayName
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "count", {
                        get: function() {
                            return this._count
                        }, set: function(value) {
                                this.updateAndNotify("count", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "items", {
                        get: function() {
                            return this._items
                        }, set: function(value) {
                                this.updateAndNotify("items", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "bindableItems", {
                        get: function() {
                            if (!this._bindableItems) {
                                Trace.assert(this.items, "items are expected to be populated before this accessor is called");
                                this._bindableItems = new Entertainment.ObservableArray(this.items).bindableItems
                            }
                            return this._bindableItems
                        }, set: function(value) {
                                this.updateAndNotify("bindableItems", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "minimumItemCount", {
                        get: function() {
                            return this.moduleOptions.minimumItemCount || 1
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "moduleAction", {
                        get: function() {
                            if (!this._moduleAction)
                                this._moduleAction = this._createModuleAction();
                            return this._moduleAction
                        }, set: function(value) {
                                this.updateAndNotify("moduleAction", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(CoreModuleBase.prototype, "moduleState", {
                        get: function() {
                            return this._moduleState
                        }, set: function(value) {
                                if (this._isModuleStateLocked)
                                    this._lockedModuleState = value;
                                else
                                    this.updateAndNotify("moduleState", value)
                            }, enumerable: true, configurable: true
                    });
                    CoreModuleBase.prototype.isAvailable = function() {
                        return this._moduleOptions.isAvailable ? this._moduleOptions.isAvailable() : WinJS.Promise.as(true)
                    };
                    CoreModuleBase.prototype.dispose = function() {
                        if (this._asyncDelayLoadWork) {
                            this._asyncDelayLoadWork.cancel();
                            this._asyncDelayLoadWork = null
                        }
                        if (this._query) {
                            this._query.dispose();
                            this._query = null
                        }
                        if (this.items && this.items.dispose)
                            this.items.dispose();
                        this.items = null;
                        this._bindableItems = null;
                        this._isDisposed = true
                    };
                    CoreModuleBase.prototype.freeze = function(){};
                    CoreModuleBase.prototype.thaw = function(){};
                    CoreModuleBase.prototype.load = function() {
                        var _this = this;
                        this.moduleState = 1;
                        return this.isAvailable().then(function(isAvailable) {
                                var items;
                                if (isAvailable)
                                    items = _this._getItems().then(function(moduleItemsResult) {
                                        _this._onGetItemsCompleted(moduleItemsResult)
                                    });
                                else {
                                    _this.items = [];
                                    _this.moduleState = -5
                                }
                                return items
                            }).then(null, function(error) {
                                _this.count = 0;
                                _this._getItemsPromise = null;
                                _this.moduleState = -1;
                                var isOnline = Entertainment.UI.NetworkStatusService.isOnline();
                                Trace.assert(!isOnline || !error || WinJS.Promise.isCanceledError(error), "CoreModuleBase::load(). Failed to load module. Error message: " + (error && error.message), String.empty, Entertainment.UI.Debug.errorLevel.low)
                            })
                    };
                    CoreModuleBase.prototype.reload = function() {
                        this._getItemsPromise = null;
                        return this.load()
                    };
                    CoreModuleBase.prototype.delayInitialize = function() {
                        var _this = this;
                        if (this.scheduledDelayInitialize && !this._isDisposed && !this._asyncDelayLoadWork)
                            this._asyncDelayLoadWork = Entertainment.Utilities.schedulePromiseBelowNormal("CoreModuleBase::delayInitialize").then(function() {
                                if (!_this._isDisposed)
                                    _this.scheduledDelayInitialize();
                                _this._asyncDelayLoadWork = null
                            }, function(error) {
                                Trace.assert(WinJS.Promise.isCanceledError(error), "CoreModuleBase::delayInitialize() Unexcepted error. Error: " + (error && error.message));
                                _this._asyncDelayLoadWork = null
                            })
                    };
                    CoreModuleBase.prototype.scheduledDelayInitialize = function() {
                        this.refreshItems()
                    };
                    CoreModuleBase.prototype.refreshItems = function() {
                        if (this._moduleOptions.refreshItems)
                            this._moduleOptions.refreshItems(this.items)
                    };
                    CoreModuleBase.prototype.updateQuery = function(queryParameters) {
                        for (var parameterKey in queryParameters)
                            this._query[parameterKey] = queryParameters[parameterKey]
                    };
                    CoreModuleBase.prototype.lockModuleState = function() {
                        this._isModuleStateLocked = true
                    };
                    CoreModuleBase.prototype.unLockModuleState = function() {
                        this._isModuleStateLocked = false;
                        this.updateAndNotify("moduleState", this._lockedModuleState)
                    };
                    CoreModuleBase.prototype.wrapModuleError = function(error, customMessage) {
                        if (error && !WinJS.Promise.isCanceledError(error) && customMessage)
                            error = new Error(customMessage + " Error message: " + (error && error.message));
                        return WinJS.Promise.wrapError(error)
                    };
                    CoreModuleBase.prototype._getItems = function() {
                        if (!this._getItemsPromise && this._moduleOptions)
                            this._getItemsPromise = this._executeQuery();
                        return WinJS.Promise.as(this._getItemsPromise)
                    };
                    CoreModuleBase.prototype._onGetItemsCompleted = function(queryResult) {
                        this._processItems(queryResult);
                        this._updateModuleState()
                    };
                    CoreModuleBase.prototype._executeQuery = function() {
                        var _this = this;
                        this._queryWatcher.registerQuery(this._query);
                        return this._query.execute().then(null, function(error) {
                                return _this.wrapModuleError(error, "Failed to get content query media items.")
                            })
                    };
                    CoreModuleBase.prototype._updateModuleState = function() {
                        if (this.count >= this.minimumItemCount)
                            this.moduleState = 2;
                        else
                            this.moduleState = 0
                    };
                    CoreModuleBase.prototype._processItems = function(queryResult) {
                        if (this._moduleOptions.itemsFactory) {
                            var processedResult = this._moduleOptions.itemsFactory(queryResult, this.moduleOptions.collectionFilter);
                            this.items = processedResult.items;
                            this.count = processedResult.totalCount
                        }
                        else {
                            var items = WinJS.Utilities.getMember("result.items", queryResult);
                            if (items) {
                                this.items = items;
                                this.count = items.length
                            }
                        }
                    };
                    CoreModuleBase.prototype._createModuleAction = function() {
                        if (!this._moduleOptions.moduleActionFactory)
                            return this._createDefaultModuleAction();
                        return this._moduleOptions.moduleActionFactory(this._moduleOptions.moduleActionFactoryParameter)
                    };
                    CoreModuleBase.prototype._createDefaultModuleAction = function() {
                        if (!this._moduleOptions.moduleActionProperties)
                            return null;
                        Trace.assert(this._moduleOptions.moduleActionProperties.actionId, "CoreModuleBase::_createDefaultModuleAction(). actionId is expected to create a default module action");
                        var actionService = Entertainment.ServiceLocator.getService(Entertainment.Services.actions);
                        var moduleAction = actionService.getAction(this._moduleOptions.moduleActionProperties.actionId);
                        if (this._moduleOptions.moduleActionProperties.automationId)
                            moduleAction.automationId = this._moduleOptions.moduleActionProperties.automationId;
                        moduleAction.title = this._moduleOptions.moduleActionProperties.title;
                        moduleAction.label = this._moduleOptions.moduleActionProperties.label;
                        moduleAction.parameter = this._moduleOptions.moduleActionProperties.actionParameter;
                        return moduleAction
                    };
                    return CoreModuleBase
                })(Entertainment.UI.Framework.ObservableBase);
            ViewModels.CoreModuleBase = CoreModuleBase;
            var UserDataModuleBase = (function(_super) {
                    __extends(UserDataModuleBase, _super);
                    function UserDataModuleBase() {
                        _super.apply(this, arguments)
                    }
                    UserDataModuleBase.prototype.dispose = function() {
                        this._clearSignInBindings();
                        _super.prototype.dispose.call(this)
                    };
                    UserDataModuleBase.prototype._clearSignInBindings = function() {
                        if (this.signInBinding) {
                            this.signInBinding.cancel();
                            this.signInBinding = null
                        }
                        if (this.signInTimeout) {
                            this.signInTimeout.cancel();
                            this.signInTimeout = null
                        }
                    };
                    UserDataModuleBase.prototype._getItems = function() {
                        var _this = this;
                        var returnPromise;
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        if (configurationManager.service.lastSignedInUserXuid)
                            returnPromise = _super.prototype._getItems.call(this);
                        else {
                            var completion;
                            var signInCompletedSignal = new MS.Entertainment.UI.Framework.Signal;
                            var onSignIn = function(isSignedIn) {
                                    if (isSignedIn !== false) {
                                        _this._clearSignInBindings();
                                        signInCompletedSignal.complete()
                                    }
                                };
                            var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            this.signInBinding = WinJS.Binding.bind(signInService, {isSignedIn: onSignIn});
                            this.signInTimeout = WinJS.Promise.timeout(UserDataModuleBase._signInTimeoutMS).then(onSignIn);
                            returnPromise = signInCompletedSignal.promise.then(function() {
                                return _super.prototype._getItems.call(_this)
                            })
                        }
                        return returnPromise
                    };
                    UserDataModuleBase._signInTimeoutMS = 10000;
                    return UserDataModuleBase
                })(CoreModuleBase);
            ViewModels.UserDataModuleBase = UserDataModuleBase
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/music/musicmodulebase.js:16120 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var MusicModuleBase = (function(_super) {
                    __extends(MusicModuleBase, _super);
                    function MusicModuleBase() {
                        _super.apply(this, arguments);
                        this._virtualListEventListener = null;
                        this._impressionGuid = null
                    }
                    Object.defineProperty(MusicModuleBase.prototype, "impressionGuid", {
                        get: function() {
                            return this._impressionGuid
                        }, enumerable: true, configurable: true
                    });
                    MusicModuleBase.prototype.dispose = function() {
                        if (this._virtualListEventListener) {
                            this._virtualListEventListener.cancel();
                            this._virtualListEventListener = null
                        }
                        _super.prototype.dispose.call(this)
                    };
                    MusicModuleBase.prototype.refreshItems = function() {
                        if (this.items && this.items.length > 0)
                            this.items.forEach(function(item) {
                                return ViewModels.MediaItemModel.hydrateLibraryInfoAsync(item.data)
                            })
                    };
                    MusicModuleBase.prototype.updateModuleAction = function() {
                        this.moduleAction = this._createModuleAction()
                    };
                    MusicModuleBase.prototype._getItems = function() {
                        var searchText = this.moduleOptions.queryParameters.search || this.moduleOptions.queryParameters.keyword;
                        if (!ViewModels.ModuleBase.isValidSearchText(searchText)) {
                            ViewModels.fail("MusicModuleBase::getItems(). Cannot search using the term: " + searchText);
                            this.count = 0;
                            this.moduleState = 0;
                            return WinJS.Promise.wrap({
                                    items: [], totalCount: 0
                                })
                        }
                        return _super.prototype._getItems.call(this)
                    };
                    MusicModuleBase.prototype._processItems = function(queryResult) {
                        if (this.moduleOptions.queryParameters && this.moduleOptions.queryParameters.isLive)
                            this._liveQueryProcessItems(queryResult);
                        else
                            _super.prototype._processItems.call(this, queryResult);
                        this._impressionGuid = WinJS.Utilities.getMember("result.impressionGuid", queryResult) || null
                    };
                    MusicModuleBase.prototype._liveQueryProcessItems = function(queryResult) {
                        var _this = this;
                        if (!this._query.isLive)
                            return;
                        var virtualList = WinJS.Utilities.getMember("result.items", queryResult);
                        if (!virtualList)
                            return null;
                        if (this.moduleOptions.parentMediaItem && !this.moduleOptions.parentMediaItem.inCollection) {
                            this.items = [];
                            this.count = 0;
                            this._virtualListEventListener = Entertainment.Utilities.addEventHandlers(virtualList, {itemInserted: this._onItemAddedToCollection.bind(this)})
                        }
                        else {
                            if (this.moduleOptions.itemsFactory) {
                                var processedResult = this.moduleOptions.itemsFactory(virtualList, this.moduleOptions.collectionFilter);
                                this.items = processedResult.items;
                                this.count = processedResult.totalCount
                            }
                            this._virtualListEventListener = Entertainment.Utilities.addEventHandlers(virtualList, {countChanged: function() {
                                    if (virtualList.count === 0)
                                        _this.moduleState = 0;
                                    else
                                        _this.moduleState = 2;
                                    _this.count = virtualList.count
                                }})
                        }
                    };
                    MusicModuleBase.prototype._onItemAddedToCollection = function(event) {
                        if (this.moduleOptions.itemAddedToCollectionHandler) {
                            var update = this.moduleOptions.itemAddedToCollectionHandler(event.detail.newValue.data, this.moduleOptions.parentMediaItem);
                            this.updateQuery(update);
                            this.reload()
                        }
                    };
                    return MusicModuleBase
                })(ViewModels.CoreModuleBase);
            ViewModels.MusicModuleBase = MusicModuleBase
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/music/albumsmodulefactory.js:16227 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var ItemLocation = Entertainment.Data.ItemLocation;
            var AlbumsModuleFactory = (function() {
                    function AlbumsModuleFactory(){}
                    AlbumsModuleFactory.createArtistAlbumsModule = function(parentMediaItem) {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.Music.ArtistAlbums, queryId: "artistAlbum", queryParameters: {
                                        artistId: parentMediaItem.canonicalId, impressionGuid: parentMediaItem.impressionGuid, chunkSize: AlbumsModuleFactory.LATEST_ALBUMS_COUNT, chunked: false
                                    }, name: "artistAlbums", parentMediaItem: parentMediaItem, itemsFactory: function(results) {
                                        return AlbumsModuleFactory._marketplaceAlbumItemsFactory(results)
                                    }, moduleActionFactory: function(parentItem) {
                                        return AlbumsModuleFactory._createArtistAlbumsModuleAction(parentItem)
                                    }, moduleActionFactoryParameter: parentMediaItem
                            };
                        return new ViewModels.MusicModuleBase(moduleOptions)
                    };
                    AlbumsModuleFactory.createNewAlbumsModule = function() {
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        var musicMarketplaceEditorialEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplaceEditorial);
                        var moduleOptions = {
                                queryType: musicMarketplaceEditorialEnabled ? Entertainment.Data.Query.Music.BrowseFeaturedAlbums : Entertainment.Data.Query.Music.NewAlbums, queryId: "newAlbums", queryParameters: {
                                        chunkSize: AlbumsModuleFactory.NEW_ALBUMS_COUNT, chunked: false
                                    }, name: "newAlbums", itemsFactory: function(results) {
                                        return AlbumsModuleFactory._marketplaceAlbumItemsFactory(results)
                                    }, moduleActionProperties: {
                                        actionId: Entertainment.UI.Actions.ActionIdentifiers.newMusicMarketplaceNavigate, actionParameter: null
                                    }
                            };
                        return new ViewModels.MusicModuleBase(moduleOptions)
                    };
                    AlbumsModuleFactory.createFreeAlbumsModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.Music.FreeAlbums, queryId: "freeAlbums", queryParameters: {chunked: false}, name: "freeAlbums", itemsFactory: function(results) {
                                        return AlbumsModuleFactory._marketplaceAlbumItemsFactory(results)
                                    }, moduleActionProperties: null, minimumItemCount: AlbumsModuleFactory.FREE_ALBUMS_MINIMUM
                            };
                        return new ViewModels.MusicModuleBase(moduleOptions)
                    };
                    AlbumsModuleFactory.createTopAlbumsModule = function() {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.Music.TopAlbums, queryId: "topAlbums", queryParameters: {
                                        chunkSize: AlbumsModuleFactory.TOP_ALBUMS_COUNT, chunked: false
                                    }, name: "topAlbums", itemsFactory: function(results) {
                                        return AlbumsModuleFactory._marketplaceAlbumItemsFactory(results)
                                    }, moduleActionProperties: {
                                        actionId: Entertainment.UI.Actions.ActionIdentifiers.topMusicMarketplaceNavigate, actionParameter: {pivotType: 0}
                                    }
                            };
                        return new ViewModels.MusicModuleBase(moduleOptions)
                    };
                    AlbumsModuleFactory.createTopAlbumsDashboardModule = function() {
                        var moduleOptions = {
                                displayName: String.load(String.id.IDS_MUSIC2_TOP_ALBUMS_HEADER_NO_GENRE_UC), queryType: Entertainment.Data.Query.Music.TopAlbums, queryId: "topAlbums", queryParameters: {
                                        chunkSize: AlbumsModuleFactory.TOP_ALBUMS_DASHBOARD_COUNT, chunked: false
                                    }, name: "topAlbumsModule", itemsFactory: function(results) {
                                        return AlbumsModuleFactory._marketplaceAlbumItemsFactory(results)
                                    }
                            };
                        return new ViewModels.MusicModuleBase(moduleOptions)
                    };
                    AlbumsModuleFactory.createFeaturedAlbumsDashboardModule = function() {
                        var moduleOptions = {
                                displayName: String.load(String.id.IDS_MUSIC2_FEATURED_HEADER_UC), queryType: Entertainment.Data.Query.Music.BrowseFeaturedAlbums, queryId: "featuredAlbums", queryParameters: {
                                        chunkSize: AlbumsModuleFactory.FEATURED_ITEMS_DASHBOARD_COUNT, chunked: false
                                    }, name: "featuredAlbumsModule", itemsFactory: function(results) {
                                        return AlbumsModuleFactory._marketplaceAlbumItemsFactory(results)
                                    }
                            };
                        return new ViewModels.MusicModuleBase(moduleOptions)
                    };
                    AlbumsModuleFactory.createSearchCatalogAlbumsModule = function(searchText) {
                        var acquisitionData = acquisitionData = new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.album);
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.Music.AlbumSearch, queryId: "searchCatalogAlbums", queryParameters: {
                                        acquisitionData: acquisitionData, search: searchText
                                    }, name: "searchCatalogAlbums", itemsFactory: function(results) {
                                        return AlbumsModuleFactory._marketplaceAlbumItemsFactory(results)
                                    }, moduleActionProperties: {
                                        actionId: Entertainment.UI.Actions.ActionIdentifiers.searchResultsNavigate, actionParameter: {
                                                searchText: searchText, isCatalogSearch: true, isAlbumSearch: true
                                            }
                                    }
                            };
                        return new ViewModels.MusicModuleBase(moduleOptions)
                    };
                    AlbumsModuleFactory.createSearchCollectionAlbumsModule = function(searchText) {
                        var acquisitionData = acquisitionData = new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.album);
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.libraryAlbums, queryId: "searchCollectionAlbums", queryParameters: {
                                        acquisitionData: acquisitionData, keyword: searchText, chunkSize: AlbumsModuleFactory.SEARCH_RESULTS_COUNT, isLive: true
                                    }, name: "searchCollectionAlbums", itemsFactory: function(results) {
                                        return AlbumsModuleFactory._collectionAlbumItemsFactory(results)
                                    }, moduleActionProperties: {
                                        actionId: Entertainment.UI.Actions.ActionIdentifiers.searchResultsNavigate, actionParameter: {
                                                searchText: searchText, isCatalogSearch: false, isAlbumSearch: true
                                            }
                                    }
                            };
                        return new ViewModels.MusicModuleBase(moduleOptions)
                    };
                    AlbumsModuleFactory.createArtistLocalAlbumsModule = function(parentMediaItem, collectionFilter) {
                        var moduleOptions = {
                                queryType: Entertainment.Data.Query.libraryAlbums, queryId: "artistLocalAlbums", queryParameters: {
                                        artistId: parentMediaItem.libraryId, sort: Microsoft.Entertainment.Queries.AlbumsSortBy.titleAscending, isLive: true, mediaAvailability: collectionFilter
                                    }, name: "artisLocalAlbums", parentMediaItem: parentMediaItem, collectionFilter: collectionFilter, itemsFactory: function(results, filter) {
                                        return AlbumsModuleFactory._collectionAlbumItemsFactory(results, filter)
                                    }, moduleActionProperties: {
                                        actionId: Entertainment.UI.Actions.ActionIdentifiers.newMusicMarketplaceNavigate, actionParameter: null
                                    }, itemAddedToCollectionHandler: function(item, parentMediaItem) {
                                        return AlbumsModuleFactory._firstItemAddedToCollectionHandler(item, parentMediaItem)
                                    }
                            };
                        return new ViewModels.MusicModuleBase(moduleOptions)
                    };
                    AlbumsModuleFactory._marketplaceAlbumItemsFactory = function(queryResult) {
                        var albums = queryResult.result && queryResult.result.itemsArray || [];
                        if (albums) {
                            if (albums.length > AlbumsModuleFactory.NEW_ALBUMS_COUNT)
                                albums = albums.slice(0, AlbumsModuleFactory.NEW_ALBUMS_COUNT);
                            var position = 1;
                            albums = albums.map(function(album) {
                                return new AlbumItemData(album, ItemLocation.marketplace, Microsoft.Entertainment.Platform.MediaAvailability.available, position++)
                            })
                        }
                        var itemsCount = albums ? albums.length : 0;
                        var totalCount = queryResult.result && queryResult.result.totalCount > 0 ? queryResult.result.totalCount : itemsCount;
                        return {
                                items: albums, totalCount: totalCount
                            }
                    };
                    AlbumsModuleFactory._collectionAlbumItemsFactory = function(virtualList, filter) {
                        var items = [];
                        var totalCount = 0;
                        var liveItems = new Entertainment.Data.ObservableArrayVirtualListAdapter;
                        liveItems.initialize(virtualList, function(data) {
                            return new AlbumItemData(data, ItemLocation.collection, filter)
                        });
                        return {
                                items: liveItems, totalCount: virtualList.count
                            }
                    };
                    AlbumsModuleFactory._firstItemAddedToCollectionHandler = function(item, parentMediaItem) {
                        if (item && item.isChildOf(parentMediaItem)) {
                            parentMediaItem.libraryId = item.artist.libraryId;
                            return {artistId: item.artist.libraryId}
                        }
                    };
                    AlbumsModuleFactory._createArtistAlbumsModuleAction = function(parentMediaItem) {
                        var actionService = Entertainment.ServiceLocator.getService(Entertainment.Services.actions);
                        var moduleAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.artistMediaNavigate);
                        moduleAction.parameter = parentMediaItem.clone();
                        moduleAction.parameter.canonicalId = parentMediaItem.canonicalId;
                        moduleAction.parameter.pivotType = 0;
                        return moduleAction
                    };
                    AlbumsModuleFactory.LATEST_ALBUMS_COUNT = 14;
                    AlbumsModuleFactory.FREE_ALBUMS_MINIMUM = 3;
                    AlbumsModuleFactory.NEW_ALBUMS_GALLERY_MODIFIER_INDEX = 0;
                    AlbumsModuleFactory.NEW_ALBUMS_COUNT = 24;
                    AlbumsModuleFactory.TOP_ALBUMS_GALLERY_MODIFIER_INDEX = 2;
                    AlbumsModuleFactory.TOP_ALBUMS_COUNT = 18;
                    AlbumsModuleFactory.TOP_ALBUMS_DASHBOARD_COUNT = 4;
                    AlbumsModuleFactory.SEARCH_RESULTS_COUNT = 40;
                    AlbumsModuleFactory.FEATURED_ITEMS_DASHBOARD_COUNT = 4;
                    return AlbumsModuleFactory
                })();
            ViewModels.AlbumsModuleFactory = AlbumsModuleFactory;
            var AlbumItemData = (function(_super) {
                    __extends(AlbumItemData, _super);
                    function AlbumItemData(album, location, filter, position) {
                        _super.call(this);
                        this._data = null;
                        this._position = 0;
                        this._position = position;
                        this._location = location;
                        this._data = album;
                        this._collectionFilter = filter
                    }
                    Object.defineProperty(AlbumItemData.prototype, "data", {
                        get: function() {
                            return this._data
                        }, set: function(value) {
                                this.updateAndNotify("data", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(AlbumItemData.prototype, "collectionAlbum", {
                        get: function() {
                            return this._location !== ItemLocation.marketplace ? this.data : null
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(AlbumItemData.prototype, "marketplaceAlbum", {
                        get: function() {
                            return this._location === ItemLocation.marketplace ? this.data : null
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(AlbumItemData.prototype, "position", {
                        get: function() {
                            return this._position
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(AlbumItemData.prototype, "actionId", {
                        get: function() {
                            return Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(AlbumItemData.prototype, "actionParameter", {
                        get: function() {
                            return {
                                    data: this._data, location: this._location, filter: this.collectionFilter
                                }
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(AlbumItemData.prototype, "id", {
                        get: function() {
                            return AlbumItemData._id
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(AlbumItemData.prototype, "collectionFilter", {
                        get: function() {
                            return this._collectionFilter
                        }, set: function(value) {
                                this._collectionFilter = value
                            }, enumerable: true, configurable: true
                    });
                    AlbumItemData._id = "AlbumItem";
                    return AlbumItemData
                })(Entertainment.UI.Framework.ObservableBase);
            ViewModels.AlbumItemData = AlbumItemData
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/music/artistsmodule.js:16477 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            (function(ArtistsModuleViews) {
                ArtistsModuleViews[ArtistsModuleViews["relatedArtists"] = 1] = "relatedArtists";
                ArtistsModuleViews[ArtistsModuleViews["searchCollection"] = 2] = "searchCollection";
                ArtistsModuleViews[ArtistsModuleViews["searchCatalog"] = 3] = "searchCatalog";
                ArtistsModuleViews[ArtistsModuleViews["topArtists"] = 4] = "topArtists"
            })(ViewModels.ArtistsModuleViews || (ViewModels.ArtistsModuleViews = {}));
            var ArtistsModuleViews = ViewModels.ArtistsModuleViews;
            var ArtistItemData = (function(_super) {
                    __extends(ArtistItemData, _super);
                    function ArtistItemData(artist, position) {
                        _super.call(this);
                        this._data = null;
                        this._position = 0;
                        this._position = position;
                        this._data = artist
                    }
                    Object.defineProperty(ArtistItemData.prototype, "data", {
                        get: function() {
                            return this._data
                        }, set: function(value) {
                                this.updateAndNotify("data", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ArtistItemData.prototype, "actionId", {
                        get: function() {
                            return Entertainment.UI.Actions.ActionIdentifiers.artistDetailsNavigate
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ArtistItemData.prototype, "actionParameter", {
                        get: function() {
                            return {data: this._data}
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ArtistItemData.prototype, "id", {
                        get: function() {
                            return ArtistItemData._id
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ArtistItemData.prototype, "position", {
                        get: function() {
                            return this._position
                        }, enumerable: true, configurable: true
                    });
                    ArtistItemData._id = "ArtistItem";
                    return ArtistItemData
                })(Entertainment.UI.Framework.ObservableBase);
            ViewModels.ArtistItemData = ArtistItemData;
            var ArtistsModule = (function(_super) {
                    __extends(ArtistsModule, _super);
                    function ArtistsModule(view, options) {
                        _super.call(this, "artistsModule");
                        this._artistQueryWatcher = null;
                        this._disposed = false;
                        this._parentMediaItem = null;
                        this._view = null;
                        this._liveItems = null;
                        this._liveQuery = null;
                        this._virtualListEventListener = null;
                        this._impressionGuid = null;
                        this._view = view;
                        Entertainment.Framework.ScriptUtilities.setOptions(this, options)
                    }
                    Object.defineProperty(ArtistsModule.prototype, "parentMediaItem", {
                        get: function() {
                            return this._parentMediaItem
                        }, set: function(value) {
                                this._parentMediaItem = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ArtistsModule.prototype, "impressionGuid", {
                        get: function() {
                            return this._impressionGuid
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ArtistsModule.prototype, "_queryWatcher", {
                        get: function() {
                            if (!this._artistQueryWatcher)
                                this._artistQueryWatcher = new Entertainment.Framework.QueryWatcher("ArtistsModule");
                            return this._artistQueryWatcher
                        }, enumerable: true, configurable: true
                    });
                    ArtistsModule.prototype.dispose = function() {
                        this._disposeLiveQuery();
                        this._disposed = true
                    };
                    ArtistsModule.prototype.freeze = function() {
                        if (this._liveQuery)
                            this._liveQuery.pause()
                    };
                    ArtistsModule.prototype.thaw = function() {
                        if (this._liveQuery)
                            this._liveQuery.unpause()
                    };
                    ArtistsModule.prototype.getItems = function() {
                        if (this._getItemsPromise)
                            return this._getItemsPromise;
                        if (!ViewModels.ModuleBase.isValidSearchText(this.searchText)) {
                            MS.Entertainment.UI.fail("ArtistsModule::getItems(). Cannot search using the term: " + this.searchText);
                            this.count = 0;
                            this.moduleState = 0;
                            return this._getItemsPromise = WinJS.Promise.wrap({
                                    items: [], totalCount: 0
                                })
                        }
                        var query = null;
                        switch (this._view) {
                            case 1:
                                MS.Entertainment.ViewModels.assert(this.parentMediaItem, "A media item is required to get items for the artists module.");
                                MS.Entertainment.ViewModels.assert(this.parentMediaItem.canonicalId, "A media item with a canonicalId is required to get items for the artists module.");
                                query = new Entertainment.Data.Query.Music.RelatedArtists;
                                query.id = this.parentMediaItem.canonicalId;
                                query.impressionGuid = this.parentMediaItem.impressionGuid;
                                query.chunkSize = ArtistsModule.RELATED_ARTISTS_COUNT;
                                break;
                            case 2:
                                MS.Entertainment.ViewModels.assert(this.searchText, "Search text is required to do an album catalog search.");
                                query = new Entertainment.Data.Query.libraryArtists;
                                query.acquisitionData = new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist);
                                query.keyword = this.searchText;
                                query.chunkSize = ArtistsModule.SEARCH_RESULTS_COUNT;
                                query.isLive = true;
                                break;
                            case 3:
                                MS.Entertainment.ViewModels.assert(this.searchText, "Search text is required to do an album catalog search.");
                                query = new Entertainment.Data.Query.Music.ArtistSearch;
                                query.acquisitionData = new Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.artist);
                                query.search = this.searchText;
                                break;
                            case 4:
                                query = new Entertainment.Data.Query.Music.TopArtists;
                                query.queryId = Entertainment.UI.Monikers.musicTopArtistsPanel;
                                query.chunkSize = ArtistsModule.TOP_ARTISTS_COUNT;
                                query.chunked = false;
                                break;
                            default:
                                MS.Entertainment.ViewModels.fail("The view " + this._view + " is currently unsupported by the artists module");
                                return
                        }
                        this._queryWatcher.registerQuery(query);
                        this._getItemsPromise = query.isLive ? this._executeLiveQuery(query) : this._executeStaticQuery(query);
                        return this._getItemsPromise
                    };
                    ArtistsModule.prototype._disposeLiveQuery = function() {
                        if (this._virtualListEventListener) {
                            this._virtualListEventListener.cancel();
                            this._virtualListEventListener = null
                        }
                        if (this._liveItems) {
                            this._liveItems.dispose();
                            this._liveItems = null
                        }
                        if (this._liveQuery) {
                            this._liveQuery.dispose();
                            this._liveQuery = null
                        }
                    };
                    ArtistsModule.prototype._executeStaticQuery = function(query) {
                        var _this = this;
                        return query.execute().then(function(queryResult) {
                                query.dispose();
                                var artists = queryResult.result && queryResult.result.itemsArray || [];
                                _this._impressionGuid = WinJS.Utilities.getMember("result.impressionGuid", queryResult) || null;
                                if (artists)
                                    artists = artists.map(function(artist, index) {
                                        return new ArtistItemData(artist, index + 1)
                                    });
                                return {
                                        items: artists, totalCount: queryResult.result && queryResult.result.totalCount
                                    }
                            }, function(error) {
                                query.dispose();
                                return _this.wrapModuleError(error, "Failed to get artists.")
                            })
                    };
                    ArtistsModule.prototype._executeLiveQuery = function(query) {
                        var _this = this;
                        this._disposeLiveQuery();
                        this._liveQuery = query;
                        return this._liveQuery.getItems().then(function(virtualList) {
                                if (!virtualList || _this._disposed)
                                    return null;
                                var items = [];
                                var totalCount = 0;
                                _this._impressionGuid = null;
                                _this._liveItems = new Entertainment.Data.ObservableArrayVirtualListAdapter;
                                _this._liveItems.initialize(virtualList, function(data) {
                                    _this.moduleState = 2;
                                    _this.count = virtualList.count;
                                    return new ArtistItemData(data)
                                });
                                _this._virtualListEventListener = Entertainment.Utilities.addEventHandlers(virtualList, {countChanged: function() {
                                        if (virtualList.count === 0) {
                                            _this.moduleState = 0;
                                            _this.count = 0
                                        }
                                    }});
                                items = _this._liveItems;
                                totalCount = virtualList.count;
                                return {
                                        items: items, totalCount: totalCount
                                    }
                            }, function(error) {
                                _this._disposeLiveQuery();
                                return _this.wrapModuleError(error, "Failed to get artists.")
                            })
                    };
                    ArtistsModule.prototype._createHeaderAction = function() {
                        var actionService = Entertainment.ServiceLocator.getService(Entertainment.Services.actions);
                        var navigateAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.navigate);
                        switch (this._view) {
                            case 2:
                                navigateAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.searchResultsNavigate);
                                navigateAction.parameter = {
                                    searchText: this.searchText, isCatalogSearch: false, isArtistSearch: true
                                };
                                break;
                            case 4:
                                navigateAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.topMusicMarketplaceNavigate);
                                navigateAction.parameter = {pivotType: 1};
                                break;
                            case 3:
                                navigateAction = actionService.getAction(Entertainment.UI.Actions.ActionIdentifiers.searchResultsNavigate);
                                navigateAction.parameter = {
                                    searchText: this.searchText, isCatalogSearch: true, isArtistSearch: true
                                };
                                break;
                            default:
                                break
                        }
                        return navigateAction
                    };
                    ArtistsModule.TOP_ARTISTS_COUNT = 24;
                    ArtistsModule.RELATED_ARTISTS_COUNT = 10;
                    ArtistsModule.SEARCH_RESULTS_COUNT = 40;
                    return ArtistsModule
                })(ViewModels.ModuleBase);
            ViewModels.ArtistsModule = ArtistsModule
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/components/playback/addtonowplayingaction.js:16737 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        AddToNowPlaying: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function addToNowPlaying() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.addToNowPlaying, translateDragAndDropParams: function translateDragAndDropParams(source) {
                    return {mediaItem: source && source.data}
                }, executed: function executed(param) {
                    var executeActionObject = new MS.Entertainment.UI.Actions.AddToNowPlaying.AddToNowPlayingExecution(new MS.Entertainment.UI.Actions.AddToNowPlaying.AddToNowPlayingActionAppState);
                    executeActionObject.execute(param)
                }, canExecute: function canExecute(param) {
                    var canExecuteResult = true;
                    var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var appState = new MS.Entertainment.UI.Actions.AddToNowPlaying.AddToNowPlayingActionAppState;
                    if (!mediaItem)
                        canExecuteResult = false;
                    else if (Array.isArray(mediaItem))
                        canExecuteResult = mediaItem.length > 0;
                    else if (MS.Entertainment.Data.List.isList(mediaItem))
                        canExecuteResult = mediaItem.count > 0;
                    else if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                        canExecuteResult = appState.canAddToNowPlaying(mediaItem);
                    return canExecuteResult
                }
        }), AddArtistToNowPlayingAction: MS.Entertainment.deferredDerive(MS.Entertainment.UI.Actions.Action, function addArtistToNowPlayingAction() {
                this.base()
            }, {
                executed: function executed(param) {
                    var query,
                        id;
                    var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var mediaItems = Array.isArray(mediaItem) ? mediaItem : [mediaItem];
                    var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                    var collectionFilter = mediaContext.collectionFilter;
                    MS.Entertainment.ViewModels.assert(mediaItems[0].mediaType === Microsoft.Entertainment.Queries.ObjectType.person && mediaItems[0].personType === Microsoft.Entertainment.Queries.PersonType.artist, "Invalid media type. Was expecting an artist media object");
                    mediaItems.forEach(function addMediaItemToNowPlaying(mediaItem) {
                        var itemCollection = null;
                        if (param.playCollectionItemsOnly) {
                            itemCollection = new MS.Entertainment.Data.Query.libraryTracks;
                            itemCollection.mediaAvailability = collectionFilter;
                            itemCollection.artistId = mediaItem.libraryId;
                            itemCollection.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist, MS.Entertainment.Utilities.isValidServiceId(mediaItem.canonicalId) ? mediaItem.canonicalId : String.empty);
                            if (param.librarySort)
                                itemCollection.sort = param.librarySort
                        }
                        else if (param.shouldUseTopSongsForArtistAddTo) {
                            itemCollection = new MS.Entertainment.Data.Query.Music.ArtistTopSongs;
                            itemCollection.id = mediaItem.canonicalId;
                            itemCollection.impressionGuid = mediaItem.impressionGuid;
                            itemCollection.hasTotalCount = true;
                            itemCollection.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist, MS.Entertainment.Utilities.isValidServiceId(mediaItem.canonicalId) ? mediaItem.canonicalId : String.empty)
                        }
                        else
                            itemCollection = mediaItem;
                        if (itemCollection)
                            MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(itemCollection)
                    });
                    if (!param.suppressNotification)
                        MS.Entertainment.UI.Actions.Playlists._showPlaylistNotification(null, mediaItems, mediaItems[0].mediaType, true)
                }, canExecute: function canExecute(param) {
                        return true
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Actions.AddToNowPlaying", {
        AddToNowPlayingActionAppState: MS.Entertainment.UI.Framework.define(function addToNowPlayingActionAppState() {
            var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
            this.primarySessionIsSmartDJ = !!sessionMgr.primarySession.smartDJSeed;
            var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
            var featureEnablement = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.featureEnablement);
            this.marketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace);
            var freeStreamEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
            var freePlayLimits = null;
            if (freeStreamEnabled && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.freePlayLimits))
                freePlayLimits = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.freePlayLimits);
            this.userCanSubscriptionStream = this.marketplaceEnabled && signedInUserService && signedInUserService.isSubscription;
            this.userFreePlayLimitsNotExceeded = !freePlayLimits || !freePlayLimits.isMonthlyFreeLimitExceeded;
            this.userCanFreeStream = this.userFreePlayLimitsNotExceeded && this.marketplaceEnabled && freeStreamEnabled
        }, {
            marketplaceEnabled: false, primarySessionIsSmartDJ: false, purchaseErrors: 0, subscriptionErrors: 0, userCanFreeStream: false, userCanSubscriptionStream: false, userFreePlayLimitsNotExceeded: false, canAddToNowPlaying: function canAddToNowPlaying(track) {
                    var canAddToNowPlaying = false;
                    if (track.inCollection && (track.canPlayLocally || track.roamingViaOneDrive))
                        canAddToNowPlaying = true;
                    else if (this.marketplaceEnabled) {
                        canAddToNowPlaying = (track.canSubscriptionStream && track.hasPurchased) || (track.canSubscriptionStream && this.userCanSubscriptionStream) || (track.canFreeStream && this.userCanFreeStream);
                        if (!canAddToNowPlaying)
                            if (track.canSubscriptionStream && !this.userCanSubscriptionStream)
                                this.subscriptionErrors++;
                            else if (track.canPurchase || track.canPurchaseAlbum)
                                this.purchaseErrors++
                    }
                    return canAddToNowPlaying
                }
        }), AddToNowPlayingExecution: MS.Entertainment.UI.Framework.define(function addToNowPlayingExecution(appState) {
                this._appState = appState || new MS.Entertainment.UI.Actions.AddToNowPlaying.AddToNowPlayingActionAppState;
                this._appNotificationService = MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appNotification) && MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification)
            }, {
                _appState: null, _appNotificationService: null, _nowPlayingNotificationCategory: "addToNowPlaying", execute: function execute(param) {
                        var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        var collectionFilter = mediaContext && mediaContext.collectionFilter;
                        var mediaItemParam = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                        var mediaItems = null;
                        var mediaItemType = null;
                        var showNotification = true;
                        var numMediaItemsAdded = 0;
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        if (sessionMgr.primarySession.smartDJSeed) {
                            if (!param.suppressNotification)
                                this._showPlaylistNotification(numMediaItemsAdded, mediaItemType)
                        }
                        else {
                            var sentCompleteNotification = false;
                            if (!param.suppressNotification && this._appNotificationService)
                                WinJS.Promise.timeout(500).done(function updateTrackNotifications() {
                                    if (!sentCompleteNotification)
                                        this._appNotificationService.send(new MS.Entertainment.UI.Notification({
                                            notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: String.load(String.id.IDS_MUSIC_NOTIFICATION_ADDING_TO_NOW_PLAYING), subTitle: String.empty, moreDetails: null, icon: MS.Entertainment.UI.Icon.playlist, iconClassName: "icon-playlist", action: null, category: this._nowPlayingNotificationCategory, isPersistent: false
                                        }))
                                }.bind(this));
                            MS.Entertainment.Data.VirtualList.copy(mediaItemParam).then(function gotVirtualList(mediaItemsVirtualList) {
                                return mediaItemsVirtualList.forEachAll(function addMediaItem(args) {
                                        var returnPromise = null;
                                        var mediaItem = args && args.item.data;
                                        var preventPlay = numMediaItemsAdded > 0;
                                        if (!mediaItem)
                                            return;
                                        mediaItemType = mediaItem.mediaType;
                                        if (MS.Entertainment.Utilities.isApp2) {
                                            var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                                            var mediaCollection = sessionManager && sessionManager.primarySession && sessionManager.primarySession.mediaCollection;
                                            if (mediaCollection) {
                                                var maxNowPlayingItemCount = (new Microsoft.Entertainment.Configuration.ConfigurationManager).playback.music2MaxNowPlayingItemCount;
                                                returnPromise = mediaCollection.getCount().then(function getCount(currentPlaylistCount) {
                                                    if (maxNowPlayingItemCount && (currentPlaylistCount + mediaItem.totalTracksCount > maxNowPlayingItemCount))
                                                        return WinJS.Promise.as(0);
                                                    else {
                                                        MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(mediaItem, collectionFilter, preventPlay);
                                                        return WinJS.Promise.as(1)
                                                    }
                                                })
                                            }
                                            else {
                                                MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(mediaItem, collectionFilter, preventPlay);
                                                returnPromise = WinJS.Promise.as(1)
                                            }
                                        }
                                        else if (mediaItemType === Microsoft.Entertainment.Queries.ObjectType.album)
                                            if (mediaItem.fromCollection && this._appState.userFreePlayLimitsNotExceeded) {
                                                MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(mediaItem, collectionFilter, preventPlay);
                                                returnPromise = WinJS.Promise.as(1)
                                            }
                                            else
                                                returnPromise = this._expandAlbum(mediaItem, collectionFilter, preventPlay);
                                        else if (mediaItemType === Microsoft.Entertainment.Queries.ObjectType.track)
                                            returnPromise = this._addTrackToNowPlaying(mediaItem, collectionFilter, preventPlay);
                                        else if (mediaItem) {
                                            MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(mediaItem, collectionFilter, preventPlay);
                                            returnPromise = WinJS.Promise.as(1)
                                        }
                                        return returnPromise.then(function addTotal(addedCount) {
                                                numMediaItemsAdded += addedCount
                                            })
                                    }.bind(this))
                            }.bind(this)).then(null, function failure(error) {
                                MS.Entertainment.UI.Actions.fail("Add to Now Playing encountered an error. Error message " + error && error.message)
                            }).done(function addMediaCompleted() {
                                if (!param.suppressNotification) {
                                    this._showPlaylistNotification(numMediaItemsAdded, mediaItemType);
                                    sentCompleteNotification = true
                                }
                                if (param.completeAction)
                                    param.completeAction()
                            }.bind(this))
                        }
                    }, _addTrackToNowPlaying: function _addTrackToNowPlaying(track, collectionFilter, preventPlay) {
                        if (!track) {
                            MS.Entertainment.UI.Actions.fail("Attempting to add a null track.");
                            return WinJS.Promise.as(0)
                        }
                        return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(track).then(function libraryInfoHydrated() {
                                var addedCount = 0;
                                if (this._appState.canAddToNowPlaying(track)) {
                                    addedCount = 1;
                                    MS.Entertainment.Platform.PlaybackHelpers.addToNowPlaying(track, collectionFilter, preventPlay)
                                }
                                return addedCount
                            }.bind(this), function libraryInfoHydrateFailed(error) {
                                MS.Entertainment.UI.Actions.fail("Failed to hydrate media item. Error message " + error && error.message);
                                return 0
                            })
                    }, _expandAlbum: function _expandAlbum(album, collectionFilter, preventPlay) {
                        if (!album)
                            return WinJS.Promise.as(0);
                        var tracksAdded = 0;
                        return this._getTracks(album).then(function handleTracks(tracks) {
                                var tracksPromise = null;
                                if (tracks)
                                    tracksPromise = tracks.forEachAll(function addTracks(track) {
                                        return this._addTrackToNowPlaying(track && track.item && track.item.data, collectionFilter, preventPlay || tracksAdded > 0).then(function addedTrack(addedCount) {
                                                tracksAdded += addedCount
                                            })
                                    }.bind(this));
                                return WinJS.Promise.as(tracksPromise)
                            }.bind(this)).then(function returnTotalAdded() {
                                return tracksAdded > 0 ? 1 : 0
                            })
                    }, _getTracks: function getTracks(album) {
                        var tracks;
                        if (album.tracks && album.tracks.count)
                            tracks = album.tracks;
                        else if (album.hasCanonicalId) {
                            var query = new MS.Entertainment.Data.Query.Music.AlbumSongs;
                            query.id = album.canonicalId;
                            query.impressionGuid = album.impressionGuid;
                            query.acquisitionData = album.acquisitionData;
                            query.relevancyTrackingContent = album.relevancyTrackingContent;
                            tracks = query.getItems()
                        }
                        else {
                            album = album.cloneWithHydration();
                            tracks = album.hydrate().then(function returnTracks() {
                                return album.tracks
                            })
                        }
                        return WinJS.Promise.as(tracks)
                    }, _showPlaylistNotification: function _showPlaylistNotification(numMediaItemsAdded, mediaItemType) {
                        if (this._appNotificationService)
                            this._appNotificationService.removeNotificationByCategory(this._nowPlayingNotificationCategory);
                        if (numMediaItemsAdded)
                            MS.Entertainment.UI.Actions.Playlists._showPlaylistNotification(null, null, mediaItemType, true, null, null, numMediaItemsAdded);
                        else if (this._appNotificationService) {
                            var subTitle = String.empty;
                            if (this._appState.primarySessionIsSmartDJ)
                                subTitle = String.load(String.id.IDS_MUSIC_NOTIFICATION_RADIO_LOCKED);
                            else if (this._appState.subscriptionErrors)
                                subTitle = String.load(String.id.IDS_MUSIC_NOTIFICATION_MUSIC_PASS_ONLY);
                            else
                                subTitle = String.load(String.id.IDS_MUSIC_NOTIFICATION_PURCHASE_ONLY);
                            this._appNotificationService.send(new MS.Entertainment.UI.Notification({
                                notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: String.load(String.id.IDS_MUSIC_NOTIFICATION_ADD_ERROR), subTitle: subTitle, moreDetails: null, icon: MS.Entertainment.UI.Icon.playlist, iconClassName: "icon-playlist", action: null, category: this._nowPlayingNotificationCategory, isPersistent: false
                            }))
                        }
                        else if (MS.Entertainment.Utilities.isMusicApp2 && MS.Entertainment.UI.Controls.CommandingPopOver && MS.Entertainment.UI.Controls.CommandingPopOver.popoverOpen) {
                            var maxNowPlayingItemCount = (new Microsoft.Entertainment.Configuration.ConfigurationManager).playback.music2MaxNowPlayingItemCount;
                            MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_CLOUD_SYNC_PLAYLIST_FULL_DIALOG_TITLE).format(String.load(String.id.IDS_MUSIC2_TIP_NOW_PLAYING_TITLE)), String.load(String.id.IDS_CLOUD_SYNC_PLAYLIST_FULL_DIALOG_MESSAGE).format(maxNowPlayingItemCount));
                            MS.Entertainment.UI.Controls.CommandingPopOver.hideCurrentCommandingPopover()
                        }
                    }
            })
    });
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.addToNowPlaying, function() {
        return new MS.Entertainment.UI.Actions.AddToNowPlaying
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.addArtistToNowPlaying, function() {
        return new MS.Entertainment.UI.Actions.AddArtistToNowPlayingAction
    })
})()
})();
/* >>>>>>/controls/webhostexperience.js:17002 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {WebHostExperienceObservables: MS.Entertainment.defineObservable(function WebHostExperienceObservables_constructor(){}, {})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {WebHostExperience: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.WebHostExperienceObservables", function webHostExperience() {
            MS.Entertainment.UI.Controls.WebHostExperienceObservables.prototype.constructor.call(this);
            this.eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell
        }, {
            disposed: false, onStartEvent: null, onMessageEvent: null, onErrorEvent: null, onFinishedEvent: null, onCancelEvent: null, onPageLoadEvent: null, eventProvider: null, startListener: function startListener() {
                    if (!this.disposed)
                        if (this.onStartEvent)
                            this.onStartEvent()
                }, messageReceived: function messageReceived(message, webHost, sendMessageFunc) {
                    if (!this.disposed)
                        if (this.onMessageEvent)
                            this.onMessageEvent(message, webHost, sendMessageFunc)
                }, errorReceived: function errorReceived(message, dontShowError) {
                    if (!this.disposed) {
                        var hr = 0x80004005;
                        if (message === "400")
                            hr = 0x80190190;
                        else if (message === "401")
                            hr = 0x80190191;
                        else if (message === "403")
                            hr = 0x80190193;
                        else if (message === "404")
                            hr = 0x80190194;
                        else if (message === "410")
                            hr = 0x8019019A;
                        else if (message === "500")
                            hr = 0x801901F4;
                        else if (message === "501")
                            hr = 0x801901F5;
                        else if (message === "502")
                            hr = 0x801901F6;
                        else if (message === "503")
                            hr = 0x801901F7;
                        else if (message === "504")
                            hr = 0x801901F8;
                        else if (message === 0x80070461)
                            hr = 0x80070461;
                        if (!dontShowError)
                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_SERVICE_UNAVAILABLE_CAPTION), hr);
                        if (this.onErrorEvent)
                            this.onErrorEvent(message);
                        return {hr: hr}
                    }
                    return {hr: null}
                }, finishedReceived: function finishedReceived() {
                    if (!this.disposed)
                        if (this.onFinishedEvent)
                            this.onFinishedEvent()
                }, cancelReceived: function cancelReceived() {
                    if (!this.disposed)
                        if (this.onCancelEvent)
                            this.onCancelEvent()
                }, pageLoadReceived: function pageLoadReceived(message) {
                    if (!this.disposed)
                        if (this.onPageLoadEvent)
                            this.onPageLoadEvent()
                }, dispose: function dispose() {
                    this.disposed = true;
                    this.onStartEvent = null;
                    this.onMessageEvent = null;
                    this.onErrorEvent = null;
                    this.onFinishedEvent = null;
                    this.onCancelEvent = null;
                    this.onPageLoadEvent = null;
                    this.eventProvider = null
                }
        })})
})()
})();
/* >>>>>>/components/music/subscriptionsignup.js:17078 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.Music", {SubscriptionSignup: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Controls.WebHostExperience", function SubscriptionSignup_constructor() {
            this.base()
        }, {
            startListener: function startListener() {
                this.eventProvider.traceSubscriptionSignup_Start(String.empty);
                MS.Entertainment.UI.Controls.WebHostExperience.prototype.startListener.apply(this, arguments)
            }, messageReceived: function messageReceived(messageStruct, webHost, sendMessageFunc) {
                    switch (messageStruct.verb) {
                        case"CLOSE_DIALOG":
                            if (messageStruct.reason === "ERROR")
                                this.eventProvider.traceSubscriptionSignup_Error(String.empty, messageStruct.errorCode);
                            else if (messageStruct.reason === "CANCEL")
                                this.eventProvider.traceSubscriptionSignup_Cancel(String.empty);
                            break;
                        case"MEMBERSHIP_UPGRADE_SUCESSFUL":
                        case"MEMBERSHIP_UPGRADE_SUCCESSFUL":
                        case"MEMBERSHIP_UPGRADE_SUCESSFUL ":
                            var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            signIn.refreshSignInState();
                            this.eventProvider.traceSubscriptionSignup_Finish(String.empty);
                            break;
                        case"TOKEN_REDEMPTION_SUCCESSFUL":
                            var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                            signIn.refreshSignInState();
                            break;
                        case"MEMBERSHIP_UPGRADE_NAVIGATE":
                            if (messageStruct.reason === "NEXT") {
                                webHost.authenticatedSourceUrl = webHost.reachFlowUrl;
                                webHost._webHostWaitCursor.isBusy = true;
                                webHost.skipPurchasePrompt = false;
                                webHost._loadAuthenticatedUrlOnSignIn()
                            }
                            break
                    }
                    MS.Entertainment.UI.Controls.WebHostExperience.prototype.messageReceived.apply(this, arguments)
                }
        }, {doSubscriptionSignup: function doSubscriptionSignup() {
                if (MS.Entertainment.Utilities.isMusicApp2)
                    return MS.Entertainment.UI.Shell.ModernWebBlend.showModernMusicPassSubscriptionFlowAsync();
                var initialPageUrl;
                var skipPurchasePrompt = false;
                var reachFlowUrl = MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_XBoxLiveSSL) + "/Subscriptions?workflow=ManageSubscription&TitleId=0xfffe0777&xboxMusic=true";
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                if (configurationManager.service.useLandingPageForMusicPassSignup) {
                    initialPageUrl = MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_XBoxLiveSSL) + "/SubscriptionUpsell/Music";
                    skipPurchasePrompt = true
                }
                else
                    initialPageUrl = reachFlowUrl;
                MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.musicPassSignUpShown);
                var experience = new MS.Entertainment.Music.SubscriptionSignup;
                return MS.Entertainment.UI.Shell.showWebHostDialog(String.load(String.id.IDS_MUSIC_GET_A_SUBSCRIPTION_TEXT), {
                        desiredLeft: "0%", desiredTop: null, desiredHeight: configurationManager.service.modernWebBlendHeight, showBackButton: false, showCancelButton: false, desiredZIndex: 1002
                    }, {
                        sourceUrl: "", signInOverride: false, authenticatedSourceUrl: initialPageUrl, reachFlowUrl: reachFlowUrl, webHostExperience: experience, taskId: MS.Entertainment.UI.Controls.WebHost.TaskId.ACCOUNT, isDialog: true, skipPurchasePrompt: skipPurchasePrompt
                    })
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {SubscriptionSignup: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function subscriptionSignup() {
            this.base()
        }, {
            executed: function executed(param) {
                if (this.parameter)
                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(this.parameter);
                return MS.Entertainment.Music.SubscriptionSignup.doSubscriptionSignup()
            }, canExecute: function canExecute(param) {
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    var subscriptionEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSubscription);
                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    return (signIn.isSignedIn && !signedInUser.isSubscription && subscriptionEnabled)
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {SubscriptionWithSignIn: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function subscriptionSignup() {
            this.base()
        }, {
            executed: function executed(param) {
                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.musicPassUpsellEngagePanelInvoked);
                if (signIn.isSignedIn)
                    return MS.Entertainment.Music.SubscriptionSignup.doSubscriptionSignup();
                else
                    return MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_SUBSCRIPTION_SIGN_IN_TITLE), String.load(String.id.IDS_MUSIC_SUBSCRIPTION_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInAndSubscribe, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel])
            }, canExecute: function canExecute(param) {
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    var subscriptionEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSubscription);
                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    return (!signedInUser.isSubscription && subscriptionEnabled)
                }
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup, function() {
            return new MS.Entertainment.UI.Actions.SubscriptionSignup
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn, function() {
            return new MS.Entertainment.UI.Actions.SubscriptionWithSignIn
        })
})()
})();
/* >>>>>>/components/music1/subscriptionsignup.js:17185 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var Music;
        (function(Music) {
            var ViewState;
            (function(ViewState) {
                ViewState[ViewState["error"] = -1] = "error";
                ViewState[ViewState["loading"] = 1] = "loading";
                ViewState[ViewState["ready"] = 2] = "ready"
            })(ViewState || (ViewState = {}));
            var ButtonItemData = (function() {
                    function ButtonItemData(subscription, title, action) {
                        this.subscription = subscription;
                        this.title = title;
                        this.action = action
                    }
                    return ButtonItemData
                })();
            Music.ButtonItemData = ButtonItemData;
            var SubscriptionSignupDialogContent = (function(_super) {
                    __extends(SubscriptionSignupDialogContent, _super);
                    function SubscriptionSignupDialogContent(element, options) {
                        this.templateStorage = "/Components/Music1/SubscriptionSignup.html";
                        this.templateName = "dialogContentTemplate";
                        _super.call(this, element, options);
                        this.buttonItems = new MS.Entertainment.ObservableArray
                    }
                    SubscriptionSignupDialogContent.prototype.initialize = function() {
                        var _this = this;
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        var titleId = signedInUser.isSubscription ? String.id.IDS_MUSIC_UPSELL_DIALOG_TITLE_ALT : String.id.IDS_MUSIC_UPSELL_DIALOG_TITLE;
                        this._titleElement.textContent = String.load(titleId);
                        this.viewState = 1;
                        var query = new MS.Entertainment.Data.Query.Music.Subscriptions;
                        query.execute().then(function(queryResult) {
                            query.dispose();
                            if (!queryResult || !queryResult.result || !queryResult.result.itemsArray || queryResult.result.itemsArray.length === 0)
                                return WinJS.Promise.wrapError(new Error("No subscription offers"));
                            queryResult.result.itemsArray.forEach(function(item) {
                                if (item.signedOffer) {
                                    var formatString = String.load(String.id.IDS_MUSIC_UPSELL_DIALOG_REDEEM_BUTTON);
                                    _this.buttonItems.push(new ButtonItemData(item, formatString.format(item.title, item.price), _this.purchaseOfferAction))
                                }
                            });
                            _this.buttonItems.push(new ButtonItemData(null, String.load(String.id.IDS_SETTINGS_ACCOUNT_REDEEM_CODE_HEADER_TC), _this.redeemCodeAction));
                            _this.viewState = 2
                        }).done(null, function(error) {
                            _this.viewState = -1
                        })
                    };
                    SubscriptionSignupDialogContent.prototype.setOverlay = function(dialog) {
                        this.purchaseOfferAction.setOverlayDialog(dialog);
                        this.redeemCodeAction.setOverlayDialog(dialog)
                    };
                    Object.defineProperty(SubscriptionSignupDialogContent.prototype, "purchaseOfferAction", {
                        get: function() {
                            if (!this._purchaseOfferAction)
                                this._purchaseOfferAction = new Music.SubscriptionSignupPurchaseOfferAction;
                            return this._purchaseOfferAction
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SubscriptionSignupDialogContent.prototype, "redeemCodeAction", {
                        get: function() {
                            if (!this._redeemCodeAction)
                                this._redeemCodeAction = new Music.SubscriptionSignupRedeemCodeAction;
                            return this._redeemCodeAction
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SubscriptionSignupDialogContent.prototype, "buttonItems", {
                        get: function() {
                            return this._buttonItems
                        }, set: function(value) {
                                this.updateAndNotify("buttonItems", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(SubscriptionSignupDialogContent.prototype, "viewState", {
                        get: function() {
                            return this._viewState
                        }, set: function(value) {
                                var _this = this;
                                this.updateAndNotify("viewState", value);
                                switch (value) {
                                    case 1:
                                        var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                        WinJS.Promise.timeout(configManager.music.pageLoadTimeUntilSpinner).then(function() {
                                            if (_this.viewState === 1)
                                                WinJS.Utilities.removeClass(_this._loadingElement, "removeFromDisplay")
                                        });
                                        break;
                                    case 2:
                                        WinJS.Utilities.addClass(this._loadingElement, "removeFromDisplay");
                                        break;
                                    case-1:
                                        WinJS.Utilities.addClass(this._loadingElement, "removeFromDisplay");
                                        WinJS.Utilities.removeClass(this._errorElement, "removeFromDisplay");
                                        break;
                                    default:
                                        MS.Entertainment.fail("Unexpected view state");
                                        break
                                }
                            }, enumerable: true, configurable: true
                    });
                    return SubscriptionSignupDialogContent
                })(MS.Entertainment.UI.Framework.UserControl);
            Music.SubscriptionSignupDialogContent = SubscriptionSignupDialogContent;
            var SubscriptionSignupDialog = (function(_super) {
                    __extends(SubscriptionSignupDialog, _super);
                    function SubscriptionSignupDialog(element, options) {
                        this.templateStorage = "/Components/Music1/subscriptionSignup.html";
                        this.templateName = "dialogTemplate";
                        _super.call(this, element, options)
                    }
                    SubscriptionSignupDialog.showDialog = function() {
                        var options = {
                                userControl: "MS.Entertainment.Music.SubscriptionSignupDialogContent", userControlOptions: {}
                            };
                        var dialog = new MS.Entertainment.Music.SubscriptionSignupDialog(document.createElement("div"), options);
                        return dialog.show()
                    };
                    return SubscriptionSignupDialog
                })(MS.Entertainment.UI.Controls.Dialog);
            Music.SubscriptionSignupDialog = SubscriptionSignupDialog
        })(Music = Entertainment.Music || (Entertainment.Music = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.Music.SubscriptionSignupDialog);

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var Music;
        (function(Music) {
            var SubscriptionSignupPurchaseOfferAction = (function(_super) {
                    __extends(SubscriptionSignupPurchaseOfferAction, _super);
                    function SubscriptionSignupPurchaseOfferAction() {
                        _super.apply(this, arguments);
                        this.automationId = MS.Entertainment.UI.AutomationIds.subscriptionSignupPurchaseOffer
                    }
                    SubscriptionSignupPurchaseOfferAction.prototype.canExecute = function(param) {
                        return !!this._dialog
                    };
                    SubscriptionSignupPurchaseOfferAction.prototype.executed = function(subscription) {
                        var _this = this;
                        MS.Entertainment.Utilities.Telemetry.logSubscriptionSignupPrePurchase(subscription);
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        var eventHandlers = {
                                onStartEvent: function() {
                                    MS.Entertainment.Utilities.safeAddClass(_this._dialog.domElement, "removeFromDisplay")
                                }, onFinishedEvent: function() {
                                        _this._dialog.hide()
                                    }, onCancelEvent: function() {
                                        _this._dialog.hide()
                                    }
                            };
                        return MS.Entertainment.Platform.PurchaseHelpers.launchPurchaseFlow(subscription, null, null, eventHandlers, subscription.offerId, null, signedInUser.gamerTag, subscription.signedOffer)
                    };
                    SubscriptionSignupPurchaseOfferAction.prototype.setOverlayDialog = function(dialog) {
                        this._dialog = dialog
                    };
                    return SubscriptionSignupPurchaseOfferAction
                })(MS.Entertainment.UI.Actions.Action);
            Music.SubscriptionSignupPurchaseOfferAction = SubscriptionSignupPurchaseOfferAction;
            var SubscriptionSignupRedeemCodeAction = (function(_super) {
                    __extends(SubscriptionSignupRedeemCodeAction, _super);
                    function SubscriptionSignupRedeemCodeAction() {
                        _super.apply(this, arguments);
                        this.automationId = MS.Entertainment.UI.AutomationIds.subscriptionSignupRedeemCode
                    }
                    SubscriptionSignupRedeemCodeAction.prototype.executed = function(subscription) {
                        var _this = this;
                        var eventHandlers = {
                                onStartEvent: function() {
                                    MS.Entertainment.Utilities.safeAddClass(_this._dialog.domElement, "removeFromDisplay")
                                }, onFinishedEvent: function() {
                                        _this._dialog.hide()
                                    }, onCancelEvent: function() {
                                        _this._dialog.hide()
                                    }
                            };
                        var purchaseSubscription = new MS.Entertainment.Purchase.PurchaseSubscription;
                        purchaseSubscription.onStartEvent = eventHandlers.onStartEvent;
                        purchaseSubscription.onFinishedEvent = eventHandlers.onFinishedEvent;
                        purchaseSubscription.onCancelEvent = eventHandlers.onCancelEvent;
                        var url = MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_ModernPurchase) + "/redeem?client=x13";
                        return MS.Entertainment.UI.Shell.showWebHostDialog(null, {
                                desiredLeft: "0%", desiredTop: null, desiredHeight: (new Microsoft.Entertainment.Configuration.ConfigurationManager).service.modernWebBlendHeight, showBackButton: false, showCancelButton: false
                            }, {
                                sourceUrl: String.empty, authenticatedSourceUrl: url, webHostExperience: purchaseSubscription, taskId: MS.Entertainment.UI.Controls.WebHost.TaskId.ACCOUNT, isDialog: true
                            })
                    };
                    return SubscriptionSignupRedeemCodeAction
                })(MS.Entertainment.Music.SubscriptionSignupPurchaseOfferAction);
            Music.SubscriptionSignupRedeemCodeAction = SubscriptionSignupRedeemCodeAction;
            var SubscriptionSignupAction = (function(_super) {
                    __extends(SubscriptionSignupAction, _super);
                    function SubscriptionSignupAction() {
                        _super.apply(this, arguments)
                    }
                    SubscriptionSignupAction.prototype.canExecute = function(param) {
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        return featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSubscription)
                    };
                    SubscriptionSignupAction.prototype.executed = function(param) {
                        return Music.SubscriptionSignupDialog.showDialog()
                    };
                    return SubscriptionSignupAction
                })(MS.Entertainment.UI.Actions.Action);
            Music.SubscriptionSignupAction = SubscriptionSignupAction;
            var SubscriptionSignupWithSignInAction = (function(_super) {
                    __extends(SubscriptionSignupWithSignInAction, _super);
                    function SubscriptionSignupWithSignInAction() {
                        _super.apply(this, arguments);
                        this.automationId = Entertainment.UI.AutomationIds.subscriptionSignupWithSignIn
                    }
                    SubscriptionSignupWithSignInAction.prototype.canExecute = function(param) {
                        this.useOverrideTitleIfExists();
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        var subscriptionEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSubscription);
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        return (!signedInUser.isSubscription && subscriptionEnabled)
                    };
                    SubscriptionSignupWithSignInAction.prototype.executed = function(param) {
                        var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        if (signIn.isSignedIn)
                            return _super.prototype.executed.call(this, param);
                        else
                            return MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_SUBSCRIPTION_SIGN_IN_TITLE), String.load(String.id.IDS_MUSIC_SUBSCRIPTION_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInAndSubscribe, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel])
                    };
                    return SubscriptionSignupWithSignInAction
                })(Music.SubscriptionSignupAction);
            Music.SubscriptionSignupWithSignInAction = SubscriptionSignupWithSignInAction;
            var MediaStatusSubscriptionSignupAction = (function(_super) {
                    __extends(MediaStatusSubscriptionSignupAction, _super);
                    function MediaStatusSubscriptionSignupAction() {
                        _super.call(this);
                        this.automationId = MS.Entertainment.UI.AutomationIds.mediaStatusSubscriptionSignUp;
                        this.title = String.load(String.id.IDS_MUSIC_CLOUDMODE_CATALOG_MUSIC_FREE_FLYOUT_ACTION)
                    }
                    return MediaStatusSubscriptionSignupAction
                })(SubscriptionSignupAction);
            Music.MediaStatusSubscriptionSignupAction = MediaStatusSubscriptionSignupAction
        })(Music = Entertainment.Music || (Entertainment.Music = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
(function() {
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    if (actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup))
        actionService._unregister(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup);
    if (actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn))
        actionService._unregister(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup, function() {
        return new MS.Entertainment.Music.SubscriptionSignupAction
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn, function() {
        return new MS.Entertainment.Music.SubscriptionSignupWithSignInAction
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.mediaStatusSubscriptionSignupAction, function() {
        return new MS.Entertainment.Music.MediaStatusSubscriptionSignupAction
    })
})()
})();
/* >>>>>>/framework/downloadaction.js:17462 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {Download: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function download() {
            this.base()
        }, {
            executed: function executed(param) {
                var mediaItem = this._extractMediaItem(param);
                MS.Entertainment.Platform.PurchaseHelpers.ensurePreownedMediaAddedAsync(mediaItem).then(function ensurePreownedMediaAddedAsync_complete(dbItems) {
                    MS.Entertainment.Platform.PurchaseHelpers.downloadMedia(mediaItem, dbItems.dbMediaIds, dbItems.dbMediaTypes)
                }, function ensurePreownedMediaAddedAsync_error(errorCode) {
                    var fileTransferNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransferNotifications);
                    if (mediaItem.hasServiceId)
                        fileTransferNotifications.setItemError(mediaItem.serviceId, errorCode);
                    if (mediaItem.inCollection)
                        fileTransferNotifications.setItemError(mediaItem.libraryId, errorCode)
                })
            }, canExecute: function canExecute(param) {
                    var mediaItem = this._extractMediaItem(param);
                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    return (signIn.isSignedIn && !mediaItem.hasLocalContent)
                }, _extractMediaItem: function _extractMediaItem(param) {
                    var mediaItem;
                    if (param && param.mediaItem)
                        mediaItem = param.mediaItem;
                    else
                        mediaItem = param;
                    if (MS.Entertainment.Data.List.isList(mediaItem))
                        MS.Entertainment.Data.List.listToArray(mediaItem).then(function gotArray(mediaItemsArray) {
                            MS.Entertainment.UI.Actions.assert(mediaItemsArray.length === 1, "Download Action only accepts one mediaItem");
                            mediaItem = mediaItemsArray[0]
                        });
                    return mediaItem
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {DownloadSeason: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Download", function downloadSeason() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.smartButtonDownloadSeason, canExecute: function canExecute(param) {
                    return true
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {SubscriptionDownload: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function subscriptionDownload() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.subscriptionDownload, _executing: false, _reEnableAction: function _reEnableAction() {
                    this._executing = false;
                    this.requeryCanExecute()
                }, executed: function executed(param) {
                    this._executing = true;
                    this.requeryCanExecute();
                    var mediaItems = this._extractMediaItems(param);
                    var mediaContext;
                    if (!mediaItems) {
                        mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        mediaItems = this._ensureListOrArray(mediaContext.mediaItem)
                    }
                    var downloadPromise = WinJS.Promise.wrap();
                    if (mediaItems)
                        downloadPromise = MS.Entertainment.UI.SubscriptionDownload.verifyMachineActivationIsNotAtLimit().then(function verifyMachineActivationIsNotAtLimit() {
                            return MS.Entertainment.UI.SubscriptionDownload.subscriptionDownload(mediaItems)
                        }).then(function downloadMedia_complete(addedItems) {
                            if (mediaContext)
                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.subscriptionDownload, {addedItems: addedItems});
                            return WinJS.Promise.timeout()
                        }, function errorOccurred(errorCode) {
                            return MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), errorCode)
                        });
                    downloadPromise.done(this._reEnableAction.bind(this), this._reEnableAction.bind(this))
                }, canExecute: function canExecute(param) {
                    this.useOverrideTitleIfExists();
                    return !this._executing
                }, _extractMediaItems: function _extractMediaItem(param) {
                    var mediaItems;
                    if (param && param.mediaItem)
                        mediaItems = param.mediaItem;
                    else
                        mediaItems = param;
                    return MS.Entertainment.Data.List.isListOrArray(mediaItems) ? mediaItems : [mediaItems]
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {SubscriptionAddToMyMusic: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function subscriptionAddToMyMusic() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.smartButtonAddToMyMusic, _executing: false, _appStateLoaded: false, _dtoMarketplace: false, _marketplaceEnabled: false, _refreshAppState: function _refreshAppState() {
                    var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    var featureEnablementService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.featureEnablement);
                    var marketplaceEnabled = !!featureEnablementService.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace);
                    var freeStreamEnabled = !!featureEnablementService.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                    var userCanSubscriptionStream = marketplaceEnabled && signedInUserService && signedInUserService.isSubscription;
                    this._dtoMarketplace = marketplaceEnabled && !freeStreamEnabled && !userCanSubscriptionStream;
                    this._marketplaceEnabled = marketplaceEnabled
                }, _reEnableAction: function _reEnableAction() {
                    this._executing = false;
                    this.requeryCanExecute()
                }, _showCloudGrovelInfoDialog: function _showCloudGrovelInfoDialog() {
                    MS.Entertainment.Music.cloudGrovelInfoDialog.show()
                }, _showErrorNotification: function _showErrorNotification() {
                    if (MS.Entertainment.UI.Controls.CommandingPopOver && MS.Entertainment.UI.Controls.CommandingPopOver.popoverOpen) {
                        var notificationText = String.load(String.id.IDS_MUSIC2_PANEL_ADD_ERROR);
                        MS.Entertainment.UI.Controls.CommandingPopOver.displayPopoverNotification(notificationText, false)
                    }
                }, _showNotification: function _showNotification(addedItems, baseMediaItem) {
                    var count = addedItems && addedItems.dbMediaIds && addedItems.dbMediaIds.length;
                    var isCloudEnabled = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection).isEnabled;
                    var action = isCloudEnabled && count >= 1 ? this._showCloudGrovelInfoDialog : null;
                    if (MS.Entertainment.UI.Controls.CommandingPopOver && MS.Entertainment.UI.Controls.CommandingPopOver.popoverOpen) {
                        var notificationText = String.empty;
                        switch (baseMediaItem && baseMediaItem[0] && baseMediaItem[0].mediaType) {
                            case Microsoft.Entertainment.Queries.ObjectType.video:
                            case Microsoft.Entertainment.Queries.ObjectType.track:
                                notificationText = String.load(String.id.IDS_MUSIC2_PANEL_ADD_1_ITEM).format(String.load(String.id.IDS_MUSIC2_PANEL_ADD_SONG), String.load(String.id.IDS_MUSIC2_PANEL_ADD_COLLECTION));
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.album:
                                notificationText = String.load(String.id.IDS_MUSIC2_PANEL_ADD_1_ITEM).format(String.load(String.id.IDS_MUSIC2_PANEL_ADD_ALBUM), String.load(String.id.IDS_MUSIC2_PANEL_ADD_COLLECTION));
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.person:
                                notificationText = String.load(String.id.IDS_MUSIC2_PANEL_ADD_N_ITEMS).format(String.load(String.id.IDS_MUSIC2_PANEL_ADD_TOP_SONGS), String.load(String.id.IDS_MUSIC2_PANEL_ADD_COLLECTION));
                                break;
                            default:
                                MS.Entertainment.UI.Actions.fail("Unexpected media type added to collection.")
                        }
                        MS.Entertainment.UI.Controls.CommandingPopOver.displayPopoverNotification(notificationText, true)
                    }
                    else if (MS.Entertainment.Services.appNotification) {
                        var title = String.empty;
                        var subTitle = String.empty;
                        if (count < 1)
                            title = String.load(String.id.IDS_MUSIC_NOTIFICATION_ADD_ERROR);
                        else if (isCloudEnabled) {
                            switch (addedItems && addedItems.dbMediaTypes[0]) {
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    title = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_CLOUD_SONGS_ADDED_NOTIFICATION_LINE1_PLURAL);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    title = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_CLOUD_ALBUMS_ADDED_NOTIFICATION_LINE1_PLURAL);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    title = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_CLOUD_ARTISTS_ADDED_NOTIFICATION_LINE1_PLURAL);
                                    break;
                                default:
                                    MS.Entertainment.UI.Actions.fail("Unexpected media type added to collection.")
                            }
                            subTitle = String.load(String.id.IDS_MUSIC_CLOUD_SONGS_ADDED_NOTIFICATION_LINE2)
                        }
                        else {
                            title = String.load(String.id.IDS_MUSIC_NOTIFICATION_ADDED_TO_MY_MUSIC);
                            switch (addedItems && addedItems.dbMediaTypes[0]) {
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    subTitle = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_NOTIFICATION_TRACKS_ADDED_PLURAL);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    subTitle = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_NOTIFICATION_ALBUMS_ADDED_PLURAL);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    subTitle = MS.Entertainment.Formatters.countText(count, String.id.IDS_MUSIC_NOTIFICATION_ARTISTS_ADDED_PLURAL);
                                    break
                            }
                        }
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appNotification).send(new MS.Entertainment.UI.Notification({
                            notificationType: MS.Entertainment.UI.Notification.Type.Informational, title: title, subTitle: subTitle, moreDetails: null, icon: MS.Entertainment.UI.Icon.musicInCollection, action: action, category: null, isPersistent: false
                        }));
                        MS.Entertainment.UI.CollectionChangeNotifierService.blockGlobalCollectionChangeEvents = false;
                        MS.Entertainment.UI.CollectionChangeNotifierService.blockGlobalCollectionUpSyncEvents = false
                    }
                }, translateDragAndDropParams: function translateDragAndDropParams(source) {
                    return {mediaItem: source && source.data}
                }, executed: function executed(param) {
                    param = param || {};
                    var mediaItems = this._extractMediaItems(param);
                    var mediaContext;
                    var completeAction = param.completeAction;
                    if (!mediaItems) {
                        mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                        completeAction = function completeAction(addedItems) {
                            if (mediaContext)
                                mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.addToMyMusic, {addedItems: addedItems})
                        };
                        if (!mediaContext.mediaItem)
                            return;
                        mediaItems = MS.Entertainment.Data.List.isListOrArray(mediaContext.mediaItem) ? mediaContext.mediaItem : [mediaContext.mediaItem]
                    }
                    this._executing = true;
                    this.requeryCanExecute();
                    var downloadMedia = false;
                    if (MS.Entertainment.Utilities.isMusicApp1) {
                        var cloudCollectionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
                        downloadMedia = cloudCollectionService && cloudCollectionService.shouldDownloadOnAdd;
                        var cloudEnabled = cloudCollectionService.isEnabled;
                        MS.Entertainment.UI.CollectionChangeNotifierService.blockGlobalCollectionChangeEvents = cloudEnabled;
                        MS.Entertainment.UI.CollectionChangeNotifierService.blockGlobalCollectionUpSyncEvents = cloudEnabled
                    }
                    var mediaToDownload = param.containerItem || mediaItems;
                    return this._addToMyMusicNoDownload(mediaItems, param.containerItem, param.suppressNotification || downloadMedia, completeAction).then(function download() {
                            return downloadMedia ? this._downloadMediaItems(mediaToDownload, param.containerItem, completeAction) : WinJS.Promise.wrap()
                        }.bind(this)).then(this._signalDone.bind(this), this._signalError.bind(this)).then(this._reEnableAction.bind(this))
                }, canExecute: function canExecute(param) {
                    this._refreshAppState();
                    return !this._executing && !this._dtoMarketplace && this._marketplaceEnabled
                }, _addToMyMusicNoDownload: function _addToMyMusicNoDownload(mediaItems, containerItem, suppressNotification, completeAction) {
                    var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    var executePromise;
                    var addMedia = function addMedia(mediaItems, containerItem) {
                            return MS.Entertainment.Platform.PurchaseHelpers.addSubscriptionMedia(mediaItems, containerItem).then(function addSubscriptionMediaComplete(addedItems) {
                                    if (containerItem)
                                        return addMedia.call(this, containerItem);
                                    else {
                                        if (!suppressNotification)
                                            this._showNotification(addedItems, mediaItems);
                                        if (completeAction)
                                            return completeAction(addedItems)
                                    }
                                }.bind(this), function addSubscriptionMediaError(errorCode) {
                                    var showErrorPromise;
                                    if (MS.Entertainment.Utilities.isMusicApp2) {
                                        this._showErrorNotification();
                                        showErrorPromise = WinJS.Promise.as()
                                    }
                                    else
                                        showErrorPromise = (typeof errorCode === "number") ? MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_MEDIA_ERROR_CAPTION), errorCode) : WinJS.Promise.as();
                                    return showErrorPromise.then(function showErrorPromiseComplete() {
                                            return WinJS.Promise.wrapError()
                                        })
                                }.bind(this))
                        }.bind(this);
                    if (signInService.isSignedIn)
                        executePromise = addMedia(mediaItems, containerItem);
                    else
                        executePromise = new WinJS.Promise(function init(signInComplete) {
                            MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_ADD_TO_MY_MUSIC_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], signInComplete)
                        }).then(function signInComplete(result) {
                            if (result === MS.Entertainment.Utilities.SignIn.SignInResult.success)
                                return addMedia(mediaItems, containerItem)
                        });
                    return executePromise
                }, _downloadMediaItems: function _downloadMediaItems(mediaToDownload, containerItem, completeAction) {
                    return MS.Entertainment.UI.SubscriptionDownload.verifyMachineActivationIsNotAtLimit().then(function subscriptionDownloadAllowed() {
                            return MS.Entertainment.UI.SubscriptionDownload.subscriptionDownload(mediaToDownload)
                        }, function subscriptionDownloadNotAllowed(errorCode) {
                            if (errorCode !== MS.Entertainment.UI.SubscriptionDownload.deviceActivationLimitExceededErrorCode)
                                return MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), errorCode);
                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), errorCode);
                            var addToMyMusicPromise = this._addToMyMusicNoDownload(mediaToDownload, containerItem);
                            (Microsoft.Entertainment.Configuration.ConfigurationManager()).music.musicPassDownloadEnabled = false;
                            var cloudCollectionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
                            if (cloudCollectionService)
                                cloudCollectionService.autoDownloadEnabled = false;
                            return addToMyMusicPromise
                        }.bind(this)).then(function downloadMedia_complete(addedItems) {
                            if (completeAction)
                                return completeAction(addedItems);
                            return null
                        }, function downloadMedia_error(error) {
                            return MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), error)
                        })
                }, _signalError: function _signalError(error) {
                    var errorMessage = (error && error.message);
                    if (errorMessage)
                        MS.Entertainment.UI.Actions.fail("Failed to add to music. Error message: " + errorMessage);
                    this._signalDone()
                }, _signalDone: function _signalDone() {
                    var referenceContainer = WinJS.Binding.unwrap(this.referenceContainer);
                    if (referenceContainer && referenceContainer.domElement) {
                        var domEvent = document.createEvent("Event");
                        domEvent.initEvent("iconButtonClicked", true, true);
                        domEvent.automationId = this.automationId;
                        domEvent.id = this.id;
                        referenceContainer.domElement.dispatchEvent(domEvent)
                    }
                }, _extractMediaItems: function _extractMediaItems(param) {
                    var mediaItems;
                    if (param && param.mediaItem)
                        mediaItems = param.mediaItem;
                    else
                        mediaItems = param;
                    if (MS.Entertainment.Platform.PlaybackHelpers.isMusicPlaylist(mediaItems))
                        mediaItems = mediaItems.tracks;
                    return this._ensureListOrArray(mediaItems)
                }, _ensureListOrArray: function _ensureListOrArray(mediaItems) {
                    var result = mediaItems;
                    if (!MS.Entertainment.Data.List.isListOrArray(mediaItems) && mediaItems)
                        result = [mediaItems];
                    return result
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI", {SubscriptionDownload: {
            _getTrackLibraryId: function _getTrackLibraryId(mediaItem) {
                var libraryItems = [{
                            libraryId: mediaItem.libraryId, libraryType: mediaItem.mediaType
                        }];
                return WinJS.Promise.wrap(libraryItems)
            }, _getMediaContainerLibraryIds: function _getMediaContainerLibraryIds(mediaContainer) {
                    var libraryItems = [];
                    var tracksPromise = WinJS.Promise.wrap();
                    if (mediaContainer)
                        if (mediaContainer.tracks)
                            tracksPromise = WinJS.Promise.wrap(mediaContainer.tracks);
                        else {
                            MS.Entertainment.UI.Actions.assert(mediaContainer.mediaType === Microsoft.Entertainment.Queries.ObjectType.album, "Expected to expand an album if tracks are missing.");
                            var query = new MS.Entertainment.Data.Query.libraryTracks;
                            var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                            var collectionFilter = mediaContext.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.undefined;
                            query.albumId = mediaContainer.libraryId;
                            query.mediaAvailability = collectionFilter;
                            tracksPromise = query.getItemsAndIgnoreErrors()
                        }
                    return tracksPromise.then(function _gotTracks(tracks) {
                            if (tracks)
                                return tracks.forEachAll(function _getItemLibraryId(arg) {
                                        if (arg.item.data && arg.item.data.hasZuneId)
                                            libraryItems.push({
                                                libraryId: arg.item.data.libraryId, libraryType: arg.item.data.mediaType
                                            })
                                    })
                        }).then(function _gotItemsArray(array) {
                            return libraryItems
                        })
                }, _canDownloadCollectionMedia: function _canDownloadCollectionMedia(stateInfo) {
                    if (stateInfo.download.hasFailed && stateInfo.download.hasRetryable)
                        return true;
                    var hasDownloads = false;
                    var playabilityItems = stateInfo.collection.playability.items;
                    var entitlements = stateInfo.marketplace.entitlements;
                    if (playabilityItems && playabilityItems.length > 0 && entitlements && entitlements.length > 0) {
                        var hasNonLocalMedia = false;
                        var nonLocalMedia = {};
                        for (var i = 0; i < playabilityItems.length; i++) {
                            var playabilityItem = playabilityItems[i];
                            if (playabilityItem && playabilityItem.mediaId && !playabilityItem.isDownloading && !playabilityItem.locallyPlayable) {
                                nonLocalMedia[playabilityItem.mediaId.toLowerCase()] = playabilityItem;
                                hasNonLocalMedia = true
                            }
                        }
                        if (hasNonLocalMedia)
                            for (var i = 0; i < entitlements.length; i++) {
                                var entitlement = entitlements[i];
                                if (entitlement && entitlement.canFullyDownload && nonLocalMedia[entitlement.serviceMediaId.toLowerCase()])
                                    return true
                            }
                    }
                    return false
                }, subscriptionDownload: function subscriptionDownload(mediaItems) {
                    var downloadableMediaItems = [];
                    var downloadStatePromises = [];
                    var downloadabilityCheckPromise = WinJS.Promise.wrap();
                    downloadabilityCheckPromise = MS.Entertainment.Data.List.listToArray(mediaItems).then(function _gotArray(mediaItemsArray) {
                        mediaItemsArray.forEach(function _getDownloadInfo(mediaItem) {
                            var hydratePromise = mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track ? WinJS.Promise.wrap(mediaItem) : mediaItem.hydrate();
                            downloadStatePromises.push(hydratePromise.then(function checkState() {
                                var singleDownloadabilityCheckPromise;
                                if (mediaItem.fromCollection && mediaItem.canSubscriptionDownload)
                                    downloadableMediaItems.push(mediaItem);
                                else if (mediaItem.fromCollection && mediaItem.inCollection)
                                    singleDownloadabilityCheckPromise = MS.Entertainment.ViewModels.SmartBuyStateEngine.queryMediaStateAsync(mediaItem).then(function _getMediaStateComplete(stateInfo) {
                                        if (MS.Entertainment.UI.SubscriptionDownload._canDownloadCollectionMedia(stateInfo))
                                            downloadableMediaItems.push(mediaItem)
                                    });
                                else
                                    singleDownloadabilityCheckPromise = MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getMusicRights(mediaItem).then(function _getMusicRightsComplete(rights) {
                                        if (rights && rights.subscriptionDownload)
                                            downloadableMediaItems.push(mediaItem)
                                    });
                                return singleDownloadabilityCheckPromise
                            }).then(null, function ignoreError(error) {
                                MS.Entertainment.UI.Actions.fail("Failed to get subscription downloadability for media item. error: " + (error && error.message))
                            }))
                        });
                        return WinJS.Promise.join(downloadStatePromises)
                    });
                    return downloadabilityCheckPromise.then(function _gotDownloadableItems() {
                            var hydrateLibraryInfoPromises = [];
                            downloadableMediaItems.forEach(function notifyDownloadAndHydrateLibraryId(mediaItem) {
                                if (mediaItem.contentNotifications) {
                                    var notification = new MS.Entertainment.UI.ContentNotification.Notification(WinJS.UI.AppBarIcon.download, String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_SHORT), String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_LONG));
                                    if (!mediaItem.allTracksLocal)
                                        mediaItem.contentNotifications.sendNotification(MS.Entertainment.UI.ContentNotification.NotificationType.marketplaceDownloadStatus, notification)
                                }
                                hydrateLibraryInfoPromises.push(MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(mediaItem))
                            });
                            return WinJS.Promise.join(hydrateLibraryInfoPromises)
                        }).then(function _gotLibraryIds() {
                            if (!downloadableMediaItems || !downloadableMediaItems.length)
                                return WinJS.Promise.wrap();
                            var collectionMediaItems = [];
                            var marketplaceMediaItems = [];
                            var downloadMediaPromises = [];
                            downloadableMediaItems.forEach(function _splitDownloadableMediaItems(mediaItem) {
                                if ((mediaItem.fromCollection && mediaItem.inCollection) || mediaItem.isFromPlaylist)
                                    collectionMediaItems.push(mediaItem);
                                else
                                    marketplaceMediaItems.push(mediaItem)
                            });
                            MS.Entertainment.UI.Actions.assert((collectionMediaItems.length + marketplaceMediaItems.length) === downloadableMediaItems.length, "Expected all downloadable items to be categorized as either collection or marketplace items.");
                            var result = {itemsAddedToCollection: null};
                            if (marketplaceMediaItems.length)
                                downloadMediaPromises.push(MS.Entertainment.UI.SubscriptionDownload._downloadMarketplaceMedia(marketplaceMediaItems, result));
                            if (collectionMediaItems.length)
                                downloadMediaPromises.push(MS.Entertainment.UI.SubscriptionDownload._downloadCollectionMedia(collectionMediaItems));
                            return WinJS.Promise.join(downloadMediaPromises).then(function downloadsCompleted() {
                                    return result.itemsAddedToCollection
                                })
                        })
                }, _downloadMarketplaceMedia: function _downloadMarketplaceMedia(marketplaceMediaItems, result) {
                    return MS.Entertainment.Platform.PurchaseHelpers.addSubscriptionMedia(marketplaceMediaItems).then(function addSubscriptionMedia_complete(dbItems) {
                            result.itemsAddedToCollection = dbItems;
                            return MS.Entertainment.Platform.PurchaseHelpers.downloadMedia(null, dbItems.dbMediaIds, dbItems.dbMediaTypes)
                        }, function addSubscriptionMedia_error(errorCode) {
                            marketplaceMediaItems.forEach(function _clearNotifications(mediaItem) {
                                if (mediaItem && mediaItem.contentNotifications)
                                    mediaItem.contentNotifications.clear();
                                if (typeof errorCode === "number") {
                                    var fileTransferNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransferNotifications);
                                    if (mediaItem.serviceId && mediaItem.serviceId !== MS.Entertainment.Utilities.EMPTY_GUID)
                                        fileTransferNotifications.setItemError(mediaItem.serviceId, errorCode);
                                    if (mediaItem.libraryId && mediaItem.libraryId >= 0)
                                        fileTransferNotifications.setItemError(mediaItem.libraryId, errorCode)
                                }
                            });
                            return WinJS.Promise.wrapError(errorCode)
                        })
                }, _downloadCollectionMedia: function _downloadCollectionMedia(collectionMediaItems) {
                    var getCollectionTrackPromises = collectionMediaItems.map(function _getTracksToDownload(mediaItem) {
                            switch (mediaItem.mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    return MS.Entertainment.UI.SubscriptionDownload._getTrackLibraryId(mediaItem);
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    return MS.Entertainment.UI.SubscriptionDownload._getMediaContainerLibraryIds(mediaItem);
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                    return mediaItem.hydrate().then(MS.Entertainment.UI.SubscriptionDownload._getMediaContainerLibraryIds);
                                default:
                                    MS.Entertainment.ViewModels.fail("SubscriptionDownloadAction received an invalid media type");
                                    return WinJS.Promise.wrapError()
                            }
                        });
                    return WinJS.Promise.join(getCollectionTrackPromises).then(function downloadItemsArray(downloadItemLists) {
                            if (downloadItemLists) {
                                var downloadItems = [].concat.apply([], downloadItemLists);
                                var libraryIds = downloadItems.map(function _getLibraryId(item) {
                                        return item.libraryId
                                    });
                                var libraryTypes = downloadItems.map(function _getLibraryType(item) {
                                        return item.libraryType
                                    });
                                return MS.Entertainment.Platform.PurchaseHelpers.downloadMedia(null, libraryIds, libraryTypes, false, false)
                            }
                        })
                }, verifyMachineActivationIsNotAtLimit: function verifyMachineActivationIsNotAtLimit() {
                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    if (signIn && signIn.isSignedIn && signedInUser) {
                        var allowSubscriptionDownload = (signedInUser.isTunerActivated || signedInUser.isTunerActivatable);
                        if (allowSubscriptionDownload)
                            return WinJS.Promise.wrap();
                        else {
                            var refreshSignInStateCompletedOrError = function refreshSignInStateCompletedOrError() {
                                    if (signIn.isSignedIn) {
                                        var allowSubscriptionDownload = (signedInUser.isTunerActivated || signedInUser.isTunerActivatable);
                                        if (allowSubscriptionDownload || !signedInUser.isSubscription)
                                            return WinJS.Promise.wrap();
                                        else
                                            return WinJS.Promise.wrapError(MS.Entertainment.UI.SubscriptionDownload.deviceActivationLimitExceededErrorCode)
                                    }
                                    else
                                        return WinJS.Promise.wrapError(MS.Entertainment.Utilities.SignInErrors.ZEST_E_SIGNIN_REQUIRED)
                                };
                            return signIn.refreshSignInState().then(refreshSignInStateCompletedOrError, refreshSignInStateCompletedOrError)
                        }
                    }
                    else
                        return WinJS.Promise.wrapError(MS.Entertainment.Utilities.SignInErrors.ZEST_E_SIGNIN_REQUIRED)
                }, deviceActivationLimitExceededErrorCode: 0xC1010008 - 0xFFFFFFFF - 1
        }});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.download, function() {
        return new MS.Entertainment.UI.Actions.Download
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadSeason, function() {
        return new MS.Entertainment.UI.Actions.DownloadSeason
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionDownload, function() {
        return new MS.Entertainment.UI.Actions.SubscriptionDownload
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionAddToMyMusic, function() {
        return new MS.Entertainment.UI.Actions.SubscriptionAddToMyMusic
    })
})()
})();
/* >>>>>>/framework/deleteaction.js:17953 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {DeleteMedia: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function deleteMedia() {
            this.base()
        }, {
            executed: function executed(param) {
                var mediaItems = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                var collectionFilter = mediaContext.collectionFilter;
                var options = mediaContext.options || {};
                if (!mediaItems)
                    mediaItems = mediaContext.mediaItem;
                return MS.Entertainment.UI.Controls.RemoveOverlay.show(mediaItems, collectionFilter, param.deleteLocalFilesOnly).then(function overlayClosed(overlay) {
                        var deleteSucceeded = overlay && overlay.userControlInstance && overlay.userControlInstance.removed;
                        if (mediaContext && overlay)
                            mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.deleteMedia, {
                                deleted: deleteSucceeded, removedItem: mediaItems
                            });
                        if (deleteSucceeded) {
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.mediaDeleted).mediaDeleted(mediaItems);
                            if (MS.Entertainment.Utilities.isVideoApp1 && mediaItems) {
                                var clearFilePath = function(videoItem) {
                                        if (videoItem && videoItem.filePath)
                                            videoItem.filePath = null
                                    };
                                if (MS.Entertainment.Data.List.isList(mediaItems))
                                    MS.Entertainment.Data.List.listToArray(mediaItems).done(function gotArray(mediaItemsArray) {
                                        mediaItemsArray.map(clearFilePath)
                                    });
                                else if (Array.isArray(mediaItems))
                                    mediaItems.map(clearFilePath);
                                else if (mediaItems && mediaItems.filePath)
                                    mediaItems.filePath = null
                            }
                            else if (MS.Entertainment.Utilities.isMusicApp) {
                                var getMediaItemPromise = WinJS.Promise.as();
                                if (MS.Entertainment.Data.List.isListOrArray(mediaItems)) {
                                    if (mediaItems.count === 1)
                                        getMediaItemPromise = MS.Entertainment.Data.List.getData(mediaItems, 0)
                                }
                                else
                                    getMediaItemPromise = WinJS.Promise.as(mediaItems);
                                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.pinToStartScreen)) {
                                    var deletedItem;
                                    var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                                    return getMediaItemPromise.then(function getMediaItemCompleted(mediaItem) {
                                            if (mediaItem) {
                                                deletedItem = mediaItem;
                                                return pinToStartScreenService.getTileForMediaAsync(mediaItem)
                                            }
                                            return null
                                        }).then(function getTileForMediaAsyncComplete(startScreenTile) {
                                            if (startScreenTile)
                                                return pinToStartScreenService.unpinMediaAsync(deletedItem)
                                        })
                                }
                                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.pinnedList))
                                    return getMediaItemPromise.then(function getMediaItemCompleted(mediaItem) {
                                            if (mediaItem && mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist) {
                                                var pinnedList = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinnedList);
                                                if (pinnedList.hasPin(mediaItem))
                                                    return pinnedList.deletePin(mediaItem)
                                            }
                                            return null
                                        })
                            }
                        }
                    })
            }, canExecute: function canExecute(param) {
                    return !MS.Entertainment.Utilities.getRetailExperienceState()
                }
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteMedia, function() {
        return new MS.Entertainment.UI.Actions.DeleteMedia
    });
    WinJS.Namespace.define("MS.Entertainment", {MediaDeleted: MS.Entertainment.UI.Framework.define(function MediaDeletedConstructor(){}, {mediaDeleted: function mediaDeleted(deletedItems) {
                this.dispatchEvent(MS.Entertainment.MediaDeleted.events.mediaDeleted, deletedItems)
            }}, {events: {mediaDeleted: "mediaDeleted"}})});
    WinJS.Class.mix(MS.Entertainment.MediaDeleted, WinJS.Utilities.eventMixin);
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.mediaDeleted, function getMediaDeletedService() {
        return new MS.Entertainment.MediaDeleted
    }, true)
})()
})();
/* >>>>>>/framework/disabled.js:18043 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function(undefined) {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {disabled: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function disabledConstructor() {
            this.base()
        }, {
            executed: function executed(param){}, canExecute: function canExecute(param) {
                    return false
                }, isEnabled: false
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.disabled, function() {
        return new MS.Entertainment.UI.Actions.disabled
    })
})()
})();
/* >>>>>>/components/inlinedetails/baseinlinedetails.js:18063 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.Pages", {BaseInlineDetails: MS.Entertainment.UI.Framework.defineUserControl(null, function baseInlineDetails(element, options) {
            this.media = this.media || {};
            this.mediaBindings = [];
            this._listBindings = []
        }, {
            inlineExtraData: null, allowShare: true, _loadedButtons: false, _shareOperation: null, _overlay: null, _listLoadingControlPromise: null, _listBindings: null, _disableActionsOnListSelection: false, _errorPanelShown: false, _focusOverriden: false, controlName: "BaseInlineDetails", LOADING_PANEL_SHOW_DELAY: 500, LIST_LOADING_SHOW_DELAY: 1500, initialize: function initialize() {
                    this.bind("isLoading", function() {
                        if (!this.fragmentContainer)
                            return;
                        if (!this.isLoading) {
                            var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                            if (!this.isFailed) {
                                eventProvider.traceGalleryControl_InLine_Open_End();
                                if (this.failedControl)
                                    MS.Entertainment.Utilities.hideElement(this.failedControl);
                                if (this.loadingContainer)
                                    MS.Entertainment.Utilities.hideElement(this.loadingContainer).then(function showContent() {
                                        var showPromise = MS.Entertainment.Utilities.showElement(this.fragmentContainer);
                                        this._fragmentContainerShown();
                                        return showPromise
                                    }.bind(this)).then(this._raiseContentReady.bind(this));
                                else {
                                    var showPromise = MS.Entertainment.Utilities.showElement(this.fragmentContainer);
                                    this._fragmentContainerShown();
                                    showPromise.then(this._raiseContentReady.bind(this)).done(function() {
                                        if (!this._focusOverriden)
                                            MS.Entertainment.UI.Framework.focusFirstInSubTree(this.domElement)
                                    }.bind(this))
                                }
                            }
                            else
                                eventProvider.traceGalleryControl_InLine_Open_Error()
                        }
                        else if (this.loadingContainer) {
                            WinJS.Promise.timeout(this.LOADING_PANEL_SHOW_DELAY).then(function _delay() {
                                if (this.isLoading)
                                    MS.Entertainment.Utilities.showElement(this.loadingContainer)
                            }.bind(this));
                            MS.Entertainment.Utilities.hideElement(this.fragmentContainer)
                        }
                    }.bind(this));
                    this.isLoading = true
                }, unload: function unload() {
                    this._releaseMedia();
                    this.hideListLoadingControl();
                    this._clearListBindings();
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, setOverlay: function setOverlay(overlay) {
                    this._overlay = overlay
                }, showListLoadingControl: function showLoadingControl(delay) {
                    if (this._listLoadingControlPromise) {
                        this._listLoadingControlPromise.cancel();
                        this._listLoadingControlPromise = null
                    }
                    if (this.listLoadingContainer)
                        this._listLoadingControlPromise = WinJS.Promise.timeout(delay ? delay : this.LIST_LOADING_SHOW_DELAY).then(function showProgressRing() {
                            var ring = document.createElement("progress");
                            var ringSize = MS.Entertainment.Utilities.isApp2 ? "win-large" : "win-medium";
                            ring.className = ringSize + " win-ring";
                            this.listLoadingContainer.appendChild(ring);
                            WinJS.Utilities.removeClass(this.listLoadingContainer, "removeFromDisplay");
                            this._listLoadingControlPromise = null
                        }.bind(this), function onError(){})
                }, hideListLoadingControl: function hideLoadingControl() {
                    if (this._listLoadingControlPromise) {
                        this._listLoadingControlPromise.cancel();
                        this._listLoadingControlPromise = null
                    }
                    if (this.listLoadingContainer) {
                        MS.Entertainment.Utilities.empty(this.listLoadingContainer);
                        WinJS.Utilities.addClass(this.listLoadingContainer, "removeFromDisplay")
                    }
                }, _releaseMedia: function _releaseMedia() {
                    this._unshareModel();
                    this._clearMediaBindings()
                }, _clearListBindings: function _clearListBindings() {
                    for (var i = 0; i < this._listBindings.length; i++)
                        if (this._listBindings[i])
                            this._listBindings[i].cancel();
                    this._listBindings = []
                }, _clearMediaBindings: function _clearMediaBindings() {
                    for (var i = 0; i < this.mediaBindings.length; i++)
                        if (this.mediaBindings[i])
                            this.mediaBindings[i].cancel();
                    this.mediaBindings = []
                }, _getLists: function _getLists() {
                    if (!this.domElement)
                        return [];
                    var lists = WinJS.Utilities.query("[data-win-control='MS.Entertainment.UI.Controls.GalleryControl']", this.domElement) || [];
                    lists = lists.map(function mapListItem(item) {
                        return item.winControl ? item.winControl : item
                    });
                    if (lists.length <= 0 && this._list)
                        lists = [this._list];
                    return lists
                }, _removeComplete: function removeComplete(eventArgs) {
                    var removed = eventArgs.detail && eventArgs.detail.deleted;
                    var removedMedia = eventArgs.detail && eventArgs.detail.removedItem;
                    if (removed && this.media && this.media.isEqual && this.media.isEqual(removedMedia))
                        if (this._overlay)
                            this._overlay.hide()
                }, _clearSelection: function _clearSelection() {
                    var lists = this._getLists();
                    lists.forEach(function(list) {
                        list.clearSelection()
                    })
                }, _clearInvocation: function _clearInvocation() {
                    var lists = this._getLists();
                    lists.forEach(function(list) {
                        if (list && list.invocationHelper)
                            list.invocationHelper.clearInvocation()
                    })
                }, _shareModel: function _shareModel() {
                    if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.shareSender))
                        return;
                    var sender = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareSender);
                    if (this.media && this.allowShare) {
                        this._unshareModel();
                        try {
                            this._shareOperation = sender.pendingShare(this.media)
                        }
                        catch(e) {
                            this._shareOperation = null
                        }
                    }
                }, _unshareModel: function _unshareModel() {
                    if (this._shareOperation) {
                        this._shareOperation.cancel();
                        this._shareOperation = null
                    }
                }, _setMedia: function _setMedia(media) {
                    var platLog;
                    var dataPoint;
                    if (media) {
                        if (media.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem)
                            media = MS.Entertainment.Utilities.convertEditorialItem(media);
                        MS.Entertainment.Utilities.Telemetry.logPopoverShown(MS.Entertainment.UI.AutomationIds.showPopover, media)
                    }
                    this._releaseMedia();
                    this.media = media;
                    if (!this.isLoading)
                        this._shareModel()
                }, _showPanel: function showPanel(noDelay) {
                    if (noDelay)
                        this.isLoading = false;
                    else
                        WinJS.Promise.timeout().then(function updateStatus() {
                            this.isLoading = false
                        }.bind(this))
                }, _hidePanel: function showPanel(noDelay) {
                    if (noDelay)
                        this.isLoading = true;
                    else
                        WinJS.Promise.timeout().then(function updateStatus() {
                            this.isLoading = true
                        }.bind(this))
                }, _showElement: function showElement(element, visibility) {
                    if (element)
                        if (visibility)
                            WinJS.Utilities.removeClass(element, "inlineDetailsHidden");
                        else
                            WinJS.Utilities.addClass(element, "inlineDetailsHidden")
                }, _fragmentContainerShown: function _fragmentContainerShown(){}, _raiseContentReady: function _raiseContentReady() {
                    var readyEvent = document.createEvent("Event");
                    readyEvent.initEvent("DetailsReady", true, true);
                    this.domElement.dispatchEvent(readyEvent)
                }
        }, {
            isLoading: true, isFailed: false, media: null, mediaBindings: null
        })});
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Pages");
    WinJS.Namespace.define("MS.Entertainment.Pages", {BaseMediaInlineDetails: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.BaseInlineDetails", null, function baseInlineDetails(element, options) {
            this.smartBuyStateEngine = null;
            this._appBarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
            this._appbarEventHandlers = {deleteMedia: this._removeComplete.bind(this)}
        }, {
            controlName: "BaseMediaInlineDetails", blockErrorPanel: false, _mediaContext: null, _appBarService: null, _appbarEventHandlers: null, _isOnline: false, _currentButtonsBinding: null, _enableCurrentButtonsBinding: false, initialize: function initialize() {
                    MS.Entertainment.Pages.BaseInlineDetails.prototype.initialize.call(this);
                    switch (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).networkStatus) {
                        case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unknown:
                        case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unrestricted:
                        case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.throttled:
                        case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.onDemand:
                            this._isOnline = true;
                            break;
                        case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.localOnly:
                        case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.none:
                            this._isOnline = false;
                            if (this._showErrorPanel)
                                this._handleError();
                            break
                    }
                    this._setMedia(this.media);
                    if (this._disableActionsOnListSelection)
                        this._createListSelectionBindings()
                }, _createListSelectionBindings: function _createListSelectionBindings() {
                    var lists = this._getLists();
                    var selectedIndicesChangedCallback = this._selectedIndicesChanged.bind(this);
                    this._clearListBindings();
                    lists.forEach(function(list) {
                        var binding = WinJS.Binding.bind(list, {selectedIndices: selectedIndicesChangedCallback});
                        this._listBindings.push(binding)
                    }.bind(this))
                }, _selectedIndicesChanged: function _selectedIndicesChanged(newValue, oldValue) {
                    this._updateButtonStates(newValue, oldValue)
                }, _updateButtonStates: function _updateButtonStates(newValue, oldValue) {
                    if (oldValue === undefined)
                        return;
                    var enableActions = !Array.isArray(newValue) || newValue.length === 0;
                    var popoverButtons = (this._actionsPanel.currentButtons && this._actionsPanel.currentButtons.getArray()) || [];
                    for (var i = 0; i < popoverButtons.length; i++)
                        popoverButtons[i].isEnabled = enableActions
                }, _releaseSmartButtons: function _releaseSmartButtons() {
                    if (this.smartBuyStateEngine) {
                        this.smartBuyStateEngine.unload();
                        this.smartBuyStateEngine = null
                    }
                    if (this._mediaContext) {
                        this._mediaContext.clearContext();
                        this._mediaContext = null
                    }
                }, _releaseMedia: function _releaseMedia() {
                    MS.Entertainment.Pages.BaseInlineDetails.prototype._releaseMedia.apply(this, arguments);
                    if (MS.Entertainment.UI.Controls.UserFeedbackDialog)
                        MS.Entertainment.UI.Controls.UserFeedbackDialog.inlineDetailsItem = null;
                    if (this._enableCurrentButtonsBinding)
                        this._clearCurrentButtonsBinding();
                    this._releaseSmartButtons()
                }, _setMedia: function _setMedia(media) {
                    if (this._unloaded)
                        return;
                    MS.Entertainment.Pages.BaseInlineDetails.prototype._setMedia.apply(this, arguments);
                    media = this.media;
                    MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(this.media);
                    if (MS.Entertainment.UI.Controls.UserFeedbackDialog)
                        MS.Entertainment.UI.Controls.UserFeedbackDialog.inlineDetailsItem = this;
                    var lists = this._getLists();
                    var mediaContext;
                    if (lists.length || !this.smartBuyStateEngine) {
                        mediaContext = this._appBarService.pushMediaContext(media, this._appbarEventHandlers, null, {executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.popover});
                        mediaContext.collectionFilter = this.collectionFilter || Microsoft.Entertainment.Platform.MediaAvailability.available
                    }
                    this._initializeLists(lists, mediaContext);
                    if (!this.smartBuyStateEngine) {
                        this._mediaContext = mediaContext;
                        this.smartBuyStateEngine = this._createSmartBuyStateEngine();
                        this.mediaBindings.push(WinJS.Binding.bind(this.smartBuyStateEngine, {currentAppbarActions: this._setAppbarActions.bind(this)}))
                    }
                    if (this._enableCurrentButtonsBinding)
                        this._setCurrentButtonsBinding()
                }, _createSmartBuyStateEngine: function _createSmartBuyStateEngine() {
                    return new MS.Entertainment.ViewModels.SmartBuyStateEngine
                }, _setCurrentButtonsBinding: function _setCurrentButtonsBinding() {
                    this._loadedButtons = false;
                    this._clearCurrentButtonsBinding();
                    if (this.smartBuyStateEngine)
                        this._currentButtonsBinding = WinJS.Binding.bind(this.smartBuyStateEngine, {currentButtons: this._onButtonsChanged.bind(this)})
                }, _clearCurrentButtonsBinding: function _clearCurrentButtonsBinding() {
                    if (this._currentButtonsBinding) {
                        this._currentButtonsBinding.cancel();
                        this._currentButtonsBinding = null
                    }
                }, _onButtonsChanged: function _onButtonsChanged(newButtons, oldButtons) {
                    if (this._unloaded || !newButtons || newButtons.length === 0 || !this._currentButtonsBinding)
                        return;
                    if (!this._loadedButtons) {
                        this._buttonChangedHandler();
                        this._loadedButtons = true
                    }
                    this._setActionButtonFocusOverrides(newButtons.length)
                }, _setActionButtonFocusOverrides: function _setActionButtonFocusOverrides(actionButtonsLength) {
                    if (MS.Entertainment.Utilities.isMusicApp2) {
                        var noOp = ".currentPage :focus";
                        var actionButtons = document.querySelectorAll(".actions .win-focusable");
                        for (var i = 0; i < actionButtons.length; i++)
                            actionButtons[i].removeAttribute("data-win-focus");
                        if (actionButtonsLength === 1)
                            actionButtons[0].setAttribute("data-win-focus", JSON.stringify({
                                up: noOp, down: noOp
                            }));
                        else if (actionButtonsLength > 1) {
                            actionButtons[0].setAttribute("data-win-focus", JSON.stringify({up: noOp}));
                            actionButtons[actionButtonsLength - 1].setAttribute("data-win-focus", JSON.stringify({down: noOp}))
                        }
                    }
                }, _initializeLists: function _initializeLists(lists, mediaContext) {
                    if (lists)
                        lists.forEach(function initializeList(list) {
                            if (list) {
                                if (MS.Entertainment.ViewModels.SmartAppbarActions && MS.Entertainment.ViewModels.SmartAppbarActions.setDefaultGalleryEventHandlers)
                                    list.addSelectionHandlers(MS.Entertainment.ViewModels.SmartAppbarActions.setDefaultGalleryEventHandlers(this._clearSelection.bind(this), this._removeComplete.bind(this)));
                                if (list.invocationHelper) {
                                    var clearInvocation = this._clearInvocation.bind(this);
                                    list.invocationHelper.addInvocationHandlers({deleteMedia: clearInvocation})
                                }
                                list.mediaContext = mediaContext
                            }
                        }, this)
                }, _showCollectionFilter: function _showCollectionFilter() {
                    var stringId;
                    if (this._unloaded)
                        return;
                    switch (this.collectionFilter) {
                        case Microsoft.Entertainment.Platform.MediaAvailability.availableOffline:
                            stringId = String.id.IDS_DETAILS_FILTER_AVAILABLE_OFFLINE;
                            break;
                        case Microsoft.Entertainment.Platform.MediaAvailability.availableFromCloud:
                            stringId = String.id.IDS_DETAILS_FILTER_IN_CLOUD;
                            break;
                        default:
                            break
                    }
                    if (stringId) {
                        var action = new MS.Entertainment.UI.Actions.Action;
                        action.automationId = MS.Entertainment.UI.AutomationIds.collectionFilterLink;
                        action.canExecute = function canExecute() {
                            return true
                        };
                        action.executed = function executed() {
                            if (this._unloaded)
                                return;
                            this.collectionFilter = null;
                            if (this._mediaContext)
                                this._mediaContext.collectionFilter = null;
                            var lists = this._getLists();
                            lists.forEach(function clearLists(list) {
                                if (list.mediaContext && list.mediaContext.collectionFilter)
                                    list.mediaContext.collectionFilter = null;
                                list.dataSource = null
                            });
                            this.showListLoadingControl();
                            this._onClearedFilters();
                            if (this._collectionFilterText)
                                WinJS.Utilities.addClass(this._collectionFilterText, "removeFromDisplay");
                            if (this._collectionFilterLink)
                                WinJS.Utilities.addClass(this._collectionFilterLink.domElement, "removeFromDisplay")
                        }.bind(this);
                        if (this._collectionFilterText) {
                            this._collectionFilterText.textContent = String.load(stringId);
                            WinJS.Utilities.removeClass(this._collectionFilterText, "removeFromDisplay")
                        }
                        if (this._collectionFilterLink) {
                            this._collectionFilterLink.action = action;
                            WinJS.Utilities.removeClass(this._collectionFilterLink.domElement, "removeFromDisplay")
                        }
                    }
                }, _onClearedFilters: function _onClearedFilters() {
                    MS.Entertainment.Pages.fail("called by _showCollectionFilter. Should be overridden")
                }, _setAppbarActions: function _setAppbarActions(newValue, oldValue) {
                    if (!this._unloaded && this._mediaContext)
                        this._mediaContext.setToolbarActions(this.smartBuyStateEngine ? this.smartBuyStateEngine.currentAppbarActions : null)
                }, _formatDurationString: function formatDetailString(value) {
                    var duration = String.empty;
                    if (value && value !== -1)
                        duration = MS.Entertainment.Utilities.formatTimeString(value);
                    return duration
                }, _hydrateMediaIfPossible: function _hydrateMediaIfPossible() {
                    if (this.media.hasServiceId)
                        return this._hydrateMedia();
                    else {
                        this._handleHydrateCompleted();
                        return WinJS.Promise.wrap()
                    }
                }, _hydrateMedia: function _hydrateMedia() {
                    var hydratePromise;
                    if (this.media.hydrate && !this._errorPanelShown) {
                        var hydrateOptions = {
                                forceUpdate: this.media.isFailed, listenForDBUpdates: true
                            };
                        hydratePromise = this.media.hydrate(hydrateOptions).then(this._handleHydrateCompleted.bind(this), this._handleError.bind(this));
                        var binding = WinJS.Binding.bind(this.media, {isFailed: this._handleIsFailedChanged.bind(this)});
                        this.mediaBindings.push(binding)
                    }
                    else {
                        this._handleHydrateCompleted();
                        hydratePromise = WinJS.Promise.wrap()
                    }
                    return hydratePromise
                }, _handleIsFailedChanged: function _handleIsFailedChanged() {
                    if (this._unloaded || !this.media)
                        return;
                    if (this.media.isFailed && !this.media.hydrated)
                        this._handleError()
                }, _handleHydrateCompleted: function _handleHydrateCompleted() {
                    this._shareModel();
                    this._showPanel();
                    this._onHydrateCompleted()
                }, _onHydrateCompleted: function _onHydrateCompleted(){}, _showErrorPanel: {get: function _showErrorPanel() {
                        return this._shouldShowErrorPanel()
                    }}, _shouldShowErrorPanel: function _shouldShowErrorPanel() {
                    return (!this.media.inCollection && !this.blockErrorPanel && !this.isFailed)
                }, _handleError: function _handleError() {
                    if (this._showErrorPanel) {
                        this.isFailed = true;
                        this.isLoading = false;
                        this._errorPanelShown = true;
                        if (this.loadingContainer)
                            MS.Entertainment.Utilities.hideElement(this.loadingContainer);
                        if (this.fragmentContainer)
                            MS.Entertainment.Utilities.hideElement(this.fragmentContainer);
                        if (this.failedControl)
                            MS.Entertainment.Utilities.showElement(this.failedControl);
                        var newControl = document.createElement("div");
                        newControl.setAttribute("data-win-control", "MS.Entertainment.UI.Controls.FailedPanel");
                        this.failedControl.appendChild(newControl);
                        WinJS.UI.process(newControl)
                    }
                    else
                        this._showPanel()
                }
        }, {
            originalLocation: null, detailString: null, smartBuyStateEngine: null, showStreamingStatus: false, streamingStatusText: null, collectionFilter: null, collectionFilterText: String.empty
        }, {Location: {
                collection: MS.Entertainment.Data.ItemLocation.collection, marketplace: MS.Entertainment.Data.ItemLocation.marketplace
            }})})
})()
})();
/* >>>>>>/components/inlinedetails/musicalbuminlinedetails.js:18486 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Components.InlineDetails");
    WinJS.Namespace.define("MS.Entertainment.Pages", {MusicAlbumInlineDetails: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.BaseMediaInlineDetails", null, function musicAlbumInlineDetails(element, options) {
            this.templateStorage = "/Components/InlineDetails/MusicAlbumInlineDetails.html";
            this.templateName = "music2AlbumInlineDetailsTemplate"
        }, {
            tracks: null, _songCount: 0, _signedInUser: null, _signInBindings: null, _listenerId: null, _invokedTrack: null, _eventHandlers: null, _buttonEventHandlers: null, _disableActionsOnListSelection: true, _enableCurrentButtonsBinding: true, initialize: function initialize() {
                    if (!this.media)
                        return;
                    this._list.ensureNextItemVisibleCount = 2;
                    this.LOADING_PANEL_SHOW_DELAY = 2000,
                    MS.Entertainment.Pages.BaseMediaInlineDetails.prototype.initialize.apply(this, arguments);
                    this.showListLoadingControl();
                    if (this.media.listenerId) {
                        this._listenerId = this.media.listenerId;
                        this.media.listenerId = null
                    }
                    this.media.location = this.originalLocation;
                    this.media = MS.Entertainment.ViewModels.MediaItemModel.augment(this.media);
                    this._formatDetailString();
                    this._setupSmartBuy();
                    if (this.originalLocation === MS.Entertainment.Data.ItemLocation.collection) {
                        this.media.fromCollection = true;
                        WinJS.Utilities.removeClass(this._list.domElement, "marketplaceTracks");
                        WinJS.Utilities.addClass(this._list.domElement, "collectionTracks");
                        this._loadLocalTracks();
                        if (this.media.hasServiceId && !this.media.hasCanonicalId) {
                            var query = new MS.Entertainment.Data.Query.Music.AlbumDetails;
                            query.id = this.media.serviceId;
                            query.idType = this.media.serviceIdType;
                            query.execute().done(function gotAlbum(albumQuery) {
                                if (WinJS.Utilities.getMember("result.item", albumQuery))
                                    this.media.canonicalId = albumQuery.result.item.canonicalId
                            }.bind(this), function albumQueryError(error) {
                                MS.Entertainment.Components.InlineDetails.fail("Album query to get canonical id failed: " + (error && error.message))
                            })
                        }
                    }
                    else {
                        if (this.media.fromCollection)
                            this.media.hydrated = false;
                        this.media.fromCollection = false;
                        WinJS.Utilities.removeClass(this._list.domElement, "collectionTracks");
                        WinJS.Utilities.addClass(this._list.domElement, "marketplaceTracks");
                        var trackBinding = WinJS.Binding.bind(this.media, {
                                tracks: this._loadServiceTracks.bind(this), isFailed: function _hydrateFailed(newValue) {
                                        if (!trackBinding || !newValue || this._unloaded)
                                            return;
                                        if (this._fallbackToCollection()) {
                                            trackBinding.cancel();
                                            trackBinding = null;
                                            this.originalLocation = MS.Entertainment.Data.ItemLocation.collection;
                                            this.initialize()
                                        }
                                    }.bind(this)
                            });
                        this.mediaBindings.push(trackBinding);
                        if (this._list && this._list.mediaContext)
                            this._list.mediaContext.containingMedia = {
                                playbackItemSource: this.media, playbackOffset: 0
                            }
                    }
                    this._hydrateMedia();
                    if (!this._eventHandlers)
                        this._eventHandlers = MS.Entertainment.Utilities.addEvents(this.domElement, {
                            iteminvoked: this._itemInvoked.bind(this), galleryFirstPageRendered: function galleryFirstPageRendered() {
                                    MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioPopoverRequestToLoad("album")
                                }
                        });
                    if (!this._buttonEventHandlers)
                        this._buttonEventHandlers = MS.Entertainment.Utilities.addEvents(this.domElement, {iconButtonClicked: function processIconButtonClicked(event) {
                                var id = event && event.id;
                                if (id === MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic || id === MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionAddToMyMusic) {
                                    MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(this.media);
                                    MS.Entertainment.ViewModels.MediaItemModel.hydrateListLibraryInfoAsync(this.tracks)
                                }
                                event.stopPropagation()
                            }.bind(this)});
                    this._showPanel();
                    if (this.smartBuyStateEngine) {
                        var resumeSmartBuyEngineStateChanges = function resumeSmartBuyEngineStateChanges() {
                                if (this.smartBuyStateEngine) {
                                    this.smartBuyStateEngine.suspendStateChanges = false;
                                    this.smartBuyStateEngine.updateState()
                                }
                            }.bind(this);
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.fileTransfer)) {
                            this.smartBuyStateEngine.suspendStateChanges = true;
                            MS.Entertainment.UI.FileTransferService.pulseAsync(this.media).done(resumeSmartBuyEngineStateChanges, resumeSmartBuyEngineStateChanges)
                        }
                    }
                }, unload: function unload() {
                    if (this._listenerId) {
                        var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                        fileTransferService.unregisterListener(this._listenerId);
                        this._listenerId = null
                    }
                    if (this._signInBindings) {
                        this._signInBindings.cancel();
                        this._signInBindings = null
                    }
                    if (this._eventHandlers) {
                        this._eventHandlers.cancel();
                        this._eventHandlers = null
                    }
                    if (this._buttonEventHandlers) {
                        this._buttonEventHandlers.cancel();
                        this._buttonEventHandlers = null
                    }
                    MS.Entertainment.Pages.BaseMediaInlineDetails.prototype.unload.call(this)
                }, _handleActionsReady: function _handleActionsReady(event) {
                    if (MS.Entertainment.Utilities.isMusicApp2)
                        WinJS.Promise.timeout(100).done(function focusElement() {
                            MS.Entertainment.UI.Framework.focusFirstInSubTree(event.srcElement)
                        }.bind(this))
                }, _itemInvoked: function _itemInvoked(event) {
                    event.detail.itemPromise.then(function getItemData(data) {
                        var matchingTrack = null;
                        var marketplaceTracks = this.media.marketplaceTracks;
                        if (MS.Entertainment.Data.List.isList(marketplaceTracks))
                            MS.Entertainment.Data.List.listToArray(marketplaceTracks).done(function gotItems(trackArray) {
                                marketplaceTracks = trackArray
                            });
                        if (!data.data.rights && marketplaceTracks) {
                            var found = marketplaceTracks.some(function(track) {
                                    if (track.serviceId === data.data.serviceId) {
                                        matchingTrack = track;
                                        return track
                                    }
                                });
                            if (matchingTrack)
                                data.data.rights = matchingTrack.rights
                        }
                    }.bind(this));
                    event.stopPropagation()
                }, _onFocusIn: function _onFocusIn() {
                    WinJS.Utilities.addClass(this._list.domElement, "focused")
                }, _onFocusOut: function _onFocusOut() {
                    WinJS.Utilities.removeClass(this._list.domElement, "focused")
                }, _setupSmartBuy: function _setupSmartBuy() {
                    if (this.smartBuyStateEngine)
                        this.smartBuyStateEngine.initialize(this.media, MS.Entertainment.ViewModels.SmartBuyButtons.getAlbumInlineDetailsButtons(this.media, MS.Entertainment.UI.Actions.ExecutionLocation.popover), MS.Entertainment.ViewModels.MusicStateHandlers.onAlbumPopoverStateChanged);
                    if (MS.Entertainment.Utilities.isMusicApp2)
                        this._smartBuyStateEngineBindings = WinJS.Binding.bind(this.smartBuyStateEngine, {currentButtons: function updateButtons(newValue) {
                                if (newValue && newValue.length) {
                                    this.actionButtons = new MS.Entertainment.ObservableArray(newValue).bindableItems;
                                    if (!this.domElement.contains(document.activeElement))
                                        WinJS.Promise.timeout(50).done(function setFocus() {
                                            MS.Entertainment.UI.Framework.focusFirstInSubTree(this._actionColumn)
                                        }.bind(this))
                                }
                            }.bind(this)})
                }, _buttonChangedHandler: function _buttonChangedHandler() {
                    this._setTrackDataSource()
                }, _onClearedFilters: function _onClearedFilters() {
                    this._loadLocalTracks()
                }, _fallbackToCollection: function _fallbackToCollection() {
                    var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                    return navigationService.checkUserLocation(MS.Entertainment.UI.Monikers.searchPage) && this.media && this.media.inCollection
                }, _shouldShowErrorPanel: function _shouldShowErrorPanel() {
                    return this.media && !this.media.fromCollection && !this.blockErrorPanel && !this.isFailed && !this._fallbackToCollection()
                }, _populateMusicVideoIds: function _populateMusicVideoIds(queryResult) {
                    if (!this.media.hasServiceId)
                        return;
                    var marketplaceAlbum = new MS.Entertainment.Data.Augmenter.Marketplace.EDSAlbum;
                    marketplaceAlbum.serviceId = this.media.serviceId;
                    marketplaceAlbum.serviceIdType = this.media.serviceIdType;
                    return marketplaceAlbum.hydrate({forceUpdate: true}).then(function createArrays() {
                            if (!marketplaceAlbum.tracks)
                                return WinJS.Promise.wrapError("No tracks on specified album");
                            return WinJS.Promise.join({
                                    marketplaceTracks: marketplaceAlbum.tracks.toArray(), localQueryTracks: queryResult.toArray()
                                })
                        }, function error(error){}).then(function populateMusicVideoIds(results) {
                            var musicVideoIdMap = {};
                            results.marketplaceTracks.forEach(function marketplaceTrackIterator(marketplaceTrack) {
                                musicVideoIdMap[marketplaceTrack.serviceId] = marketplaceTrack.musicVideoId
                            });
                            results.localQueryTracks.forEach(function localTrackIterator(localTrack) {
                                localTrack.musicVideoId = musicVideoIdMap[localTrack.serviceId]
                            });
                            return results.localQueryTracks
                        }, function error(error){})
                }, _loadLocalTracks: function _loadLocalTracks() {
                    var query = new MS.Entertainment.Data.Query.libraryTracks;
                    query.albumId = this.media.libraryId;
                    query.sort = Microsoft.Entertainment.Queries.TracksSortBy.numberAscending;
                    query.mediaAvailability = this.collectionFilter;
                    query.isLive = true;
                    query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.album, MS.Entertainment.Utilities.isValidServiceId(this.media.canonicalId) ? this.media.canonicalId : String.empty);
                    if (this._list && this._list.mediaContext)
                        this._list.mediaContext.containingMedia = {
                            playbackItemSource: query.clone(), playbackOffset: 0
                        };
                    query.execute().then(function(q) {
                        this.tracks = q.result.items;
                        this._songCount = this.tracks.count;
                        var binding = WinJS.Binding.bind(q.result.items, {count: this._updateHandler.bind(this)});
                        this.mediaBindings.push(binding);
                        if (this._loadedButtons)
                            this._setTrackDataSource();
                        if (this.collectionFilter && this.collectionFilter !== Microsoft.Entertainment.Platform.MediaAvailability.available) {
                            var unfilteredQuery = new MS.Entertainment.Data.Query.libraryTracks;
                            unfilteredQuery.albumId = this.media.libraryId;
                            unfilteredQuery.executeCount().done(function unfilteredQueryComplete(unfilteredTrackCount) {
                                if (unfilteredTrackCount > this._songCount)
                                    this._showCollectionFilter()
                            }.bind(this), function unfilteredQueryError() {
                                this._showCollectionFilter()
                            }.bind(this))
                        }
                        this._populateMusicVideoIds(q.result.items)
                    }.bind(this))
                }, _updateHandler: function _updateHandler(newValue, oldValue) {
                    if (oldValue !== undefined)
                        if (newValue === 0 && this._overlay)
                            this._overlay.hide()
                }, _loadServiceTracks: function loadServiceTracks(newValue, oldValue) {
                    if (oldValue === undefined && !newValue)
                        return;
                    if (this.media.tracks) {
                        this.tracks = this.media.tracks;
                        if (!this._signedInUser) {
                            this._signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            if (!this._signedInUser.isSubscription)
                                this._signInBindings = WinJS.Binding.bind(this._signedInUser, {isSubscription: this._updateSubscriptionLinkVisibility.bind(this)})
                        }
                    }
                    if (this._loadedButtons)
                        this._setTrackDataSource()
                }, _setTrackDataSource: function _setTrackDataSource() {
                    this.hideListLoadingControl();
                    this._list.dataSource = this.tracks;
                    this._findTrack()
                }, _findTrack: function findTrack() {
                    if (!this._invokedTrack || !this.tracks || this.tracks.count === 0)
                        return;
                    this.tracks.forEachAll(function findTrack(args) {
                        if ((this._invokedTrack.serviceId && this._invokedTrack.serviceId !== MS.Entertainment.Utilities.EMPTY_GUID && args.item.data.serviceId === this._invokedTrack.serviceId) || (this._invokedTrack.canonicalId && this._invokedTrack.canonicalId !== MS.Entertainment.Utilities.EMPTY_GUID && args.item.data.canonicalId === this._invokedTrack.canonicalId) || (this._invokedTrack.libraryId !== -1 && this._invokedTrack.libraryId === args.item.data.libraryId)) {
                            this._list.initialInvoked = this.tracks.indexFromKey(args.item.key);
                            args.stop = true
                        }
                    }.bind(this)).done(null, function handlerError(error) {
                        MS.Entertainment.Components.InlineDetails.fail("track.forEachAll has failed. error " + (error && error.message))
                    })
                }, _formatDetailString: function _formatDetailString() {
                    var bindingsComplete = false;
                    var formatAlbumDetailString = function formatAlbumDetailString() {
                            if (bindingsComplete) {
                                this.detailString = MS.Entertainment.Data.Factory.createAlbumDetailString(this.media, MS.Entertainment.Pages.MusicTrackAlbumInlineDetails.detailsOptions);
                                this.showExplicitLabel = this.media.isExplicit && MS.Entertainment.Utilities.isMusicApp1
                            }
                        }.bind(this);
                    this.mediaBindings.push(WinJS.Binding.bind(this.media, {
                        artistName: formatAlbumDetailString, releaseDate: formatAlbumDetailString, primaryGenre: formatAlbumDetailString, genreName: formatAlbumDetailString, label: formatAlbumDetailString
                    }));
                    bindingsComplete = true;
                    formatAlbumDetailString()
                }, _updateSubscriptionLinkVisibility: function _updateSubscriptionLinkVisibility() {
                    if (this._subscriptionLink && this._subscriptionLink.action && this._subscriptionLink.action.canExecute())
                        MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getAlbumRights(this.media).then(function getAlbumRights_complete(rights) {
                            this.showSignupLink = (rights.subscriptionStream || rights.subscriptionDownload);
                            if (this.showSignupLink)
                                this._subscriptionLink.action.parameter = MS.Entertainment.Music.Freeplay.Events.musicPassUpsellAlbumPopoverLinkInvoked
                        }.bind(this));
                    else
                        this.showSignupLink = false
                }
        }, {
            showSignupLink: false, showExplicitLabel: false, actionButtons: null
        })});
    WinJS.Namespace.define("MS.Entertainment.Pages", {MusicTrackAlbumInlineDetails: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.MusicAlbumInlineDetails", "Components/InlineDetails/MusicAlbumInlineDetails.html#musicAlbumInlineDetailsTemplate", function musicAlbumInlineDetails(element, options) {
            var shouldInvokeTrack = WinJS.Utilities.getMember("dataContext.invokeTrack", options);
            if (shouldInvokeTrack !== undefined)
                this._shouldInvokeTrack = shouldInvokeTrack
        }, {
            _shouldInvokeTrack: true, initialize: function initialize() {
                    if (this._shouldInvokeTrack)
                        this._invokedTrack = {
                            serviceId: this.media.serviceId, canonicalId: this.media.canonicalId, libraryId: this.media.libraryId
                        };
                    MS.Entertainment.Components.InlineDetails.assert(this.media, "Invalid MediaItem passed into MusicTrackAlbumInlineDetails");
                    this.media = this.media || {};
                    if (this.originalLocation === MS.Entertainment.Data.ItemLocation.collection) {
                        var albumIdPromise;
                        if (this.media.album)
                            albumIdPromise = MS.Entertainment.ViewModels.MediaItemModel.getLibraryIdAsync(this.media.album);
                        else if (MS.Entertainment.Utilities.isValidLibraryId(this.media.albumId))
                            albumIdPromise = WinJS.Promise.as(this.media.albumId);
                        else {
                            MS.Entertainment.Components.InlineDetails.fail("Invalid Media Item passed into MusicTrackAlbumInlineDetails");
                            albumIdPromise = WinJS.Promise.as(-1)
                        }
                        albumIdPromise.then(function gotLibraryId(albumLibraryId) {
                            var query;
                            var queryExecutePromise;
                            if (MS.Entertainment.Utilities.isValidLibraryId(albumLibraryId)) {
                                query = new MS.Entertainment.Data.Query.libraryAlbums;
                                query.albumId = albumLibraryId
                            }
                            else if (this.media.album && this.media.album.hasServiceId) {
                                query = new MS.Entertainment.Data.Query.Music.AlbumDetails;
                                query.id = this.media.album.serviceId;
                                query.idType = this.media.album.serviceIdType;
                                this.originalLocation = MS.Entertainment.Data.ItemLocation.marketplace
                            }
                            queryExecutePromise = query ? query.execute() : WinJS.Promise.wrapError("Not enough info to create a valid query");
                            return queryExecutePromise
                        }.bind(this)).done(function queryCompleted(query) {
                            if (query.result.primaryAlbum)
                                this.media = query.result.primaryAlbum;
                            else if (query.result.item)
                                this.media = query.result.item;
                            MS.Entertainment.Pages.MusicAlbumInlineDetails.prototype.initialize.apply(this)
                        }.bind(this), function queryFailed(error) {
                            MS.Entertainment.Components.InlineDetails.fail("Query failed to get library album details. Error message: " + (error && error.message));
                            MS.Entertainment.Pages.MusicAlbumInlineDetails.prototype.initialize.apply(this)
                        }.bind(this))
                    }
                    else {
                        this.media = this.media.album;
                        MS.Entertainment.Pages.MusicAlbumInlineDetails.prototype.initialize.apply(this)
                    }
                }
        }, {}, {
            artSize: {get: function() {
                    if (MS.Entertainment.Utilities.isMusicApp1)
                        return {
                                width: 215, height: 215
                            };
                    else
                        return {
                                width: 532, height: 532
                            }
                }}, detailsOptions: {get: function() {
                        if (MS.Entertainment.Utilities.isMusicApp1)
                            return null;
                        else
                            return {
                                    includeLabel: false, includeExplicit: true
                                }
                    }}
        })})
})()
})();
/* >>>>>>/components/inlinedetails/musicartistinlinedetails.js:18836 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Pages");
    WinJS.Namespace.define("MS.Entertainment.Pages", {
        MusicArtistInlineDetails: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.BaseMediaInlineDetails", "Components/InlineDetails/MusicArtistInlineDetails.html#musicArtistInlineDetailsTemplate", function musicArtistInlineDetails(element, options){}, {
            tracks: null, albums: null, _songCount: -1, _albumIndex: -1, _queryResults: null, _queryDisposer: null, _buttonEventHandlers: null, _initializingLists: false, _initializedLists: false, _notificationsSender: null, _detailBindings: null, _disableActionsOnListSelection: true, _enableCurrentButtonsBinding: true, _signedInUser: null, _signInBindings: null, isCollection: {get: function() {
                        return this.originalLocation === MS.Entertainment.Data.ItemLocation.collection
                    }}, initialize: function initialize() {
                    MS.Entertainment.Pages.BaseMediaInlineDetails.prototype.initialize.apply(this, arguments);
                    this.domElement.addEventListener("galleryFirstPageRendered", function galleryFirstPageRendered() {
                        MS.Entertainment.Instrumentation.PerfTrack.triggerScenarioPopoverRequestToLoad("artist")
                    });
                    this._buttonEventHandlers = MS.Entertainment.Utilities.addEvents(this.domElement, {iconButtonClicked: function processIconButtonClicked(event) {
                            var id = event && event.id;
                            if (id === MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic || id === MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionAddToMyMusic) {
                                MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(this.media);
                                MS.Entertainment.ViewModels.MediaItemModel.hydrateListLibraryInfoAsync(this.media && this.media.tracks)
                            }
                            event.stopPropagation()
                        }.bind(this)});
                    if (this.media.mediaType !== Microsoft.Entertainment.Queries.ObjectType.person && this.media.artist)
                        this.media = this.media.artist;
                    this.media = MS.Entertainment.ViewModels.MediaItemModel.augment(this.media);
                    this._showPanel(true);
                    this.showListLoadingControl();
                    this._queryDisposer = new MS.Entertainment.Data.Disposer
                }, _shouldShowErrorPanel: function _shouldShowErrorPanel() {
                    return this.media && !this.media.fromCollection && !this.blockErrorPanel && !this.isFailed
                }, _onPrimaryItemInvoked: function _onPrimaryItemInvoked(event) {
                    if (!event || !event.detail || !event.detail.itemPromise)
                        return;
                    event.detail.itemPromise.done(function gotItem(item) {
                        if (!item || !item.data) {
                            MS.Entertainment.Pages.fail("In valid arugments. The item or item.data was null");
                            return
                        }
                        if (!item.isHeader) {
                            this._albumIndex = item.index;
                            this._setMedia(item.data)
                        }
                        else
                            this._albumIndex = -1
                    }.bind(this), function handleError(error) {
                        MS.Entertainment.Pages.fail("Failed to get primary item data in artist popover. Error: " + (error && error.message))
                    })
                }, _onSecondaryItemInvoked: function _onSecondaryItemInvoked(event) {
                    if (!event || !event.detail || !event.detail.itemPromise)
                        return;
                    event.detail.itemPromise.then(function getItemData(data) {
                        if (data.data && data.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.track && !data.data.rights) {
                            MS.Entertainment.ViewModels.MediaItemModel.augment(data.data);
                            data.data.hydrate()
                        }
                    }.bind(this), function handleError(error) {
                        MS.Entertainment.Pages.fail("Failed to get secondary item data in artist popover. Error: " + (error && error.message))
                    });
                    event.stopPropagation()
                }, _onBackButtonClicked: function _onBackButtonClicked() {
                    this._setMedia(this.artist)
                }, _onClearedFilters: function _onClearedFilters() {
                    this.albums = null;
                    this._queryDisposer.disposeOnly("albumsQuery");
                    this._queryDisposer.disposeOnly("tracksQuery");
                    this._setMedia(this.media)
                }, _setupSmartBuy: function _setupSmartBuy(media) {
                    if (this.smartBuyStateEngine) {
                        var buttons;
                        var stateUpdateHandler;
                        var isAlbum = media && media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album;
                        if (isAlbum) {
                            stateUpdateHandler = MS.Entertainment.ViewModels.MusicStateHandlers.onAlbumPopoverStateChanged;
                            buttons = MS.Entertainment.ViewModels.SmartBuyButtons.getAlbumInlineDetailsButtons(media, MS.Entertainment.UI.Actions.ExecutionLocation.popover)
                        }
                        else {
                            buttons = MS.Entertainment.ViewModels.SmartBuyButtons.getArtistInlineDetailsButtons(media, MS.Entertainment.UI.Actions.ExecutionLocation.popover);
                            stateUpdateHandler = !this.isCollection ? function onMarketplaceArtistDetailsChanged(stateInfo) {
                                return MS.Entertainment.ViewModels.MusicStateHandlers.onMarketplaceArtistPopoverStateChanged.apply(this.smartBuyStateEngine, [stateInfo, this.tracks])
                            }.bind(this) : MS.Entertainment.ViewModels.MusicStateHandlers.onLocalArtistPopoverStateChanged
                        }
                        this.smartBuyStateEngine.initialize(media, buttons, stateUpdateHandler)
                    }
                }, unload: function unload() {
                    if (this._buttonEventHandlers) {
                        this._buttonEventHandlers.cancel();
                        this._buttonEventHandlers = null
                    }
                    if (this._queryDisposer) {
                        this._queryDisposer.dispose();
                        this._queryDisposer = null
                    }
                    if (this._detailBindings) {
                        this._detailBindings.cancel();
                        this._detailBindings = null
                    }
                    if (this._signInBindings) {
                        this._signInBindings.cancel();
                        this._signInBindings = null
                    }
                    this._unregisterFileTransferListener();
                    MS.Entertainment.Pages.BaseMediaInlineDetails.prototype.unload.call(this)
                }, _setMedia: function _setMedia(media) {
                    this.activeMedia = media = media || this.artist;
                    var useMedia = this.activeMedia;
                    var loadContentPromise;
                    if (media && media.isTopSongs) {
                        useMedia = this.artist;
                        this._secondaryList.itemTemplate = "Components/InlineDetails/MusicArtistInlineDetails.html#musicInlineDetailsTrack"
                    }
                    else
                        this._secondaryList.itemTemplate = "Components/InlineDetails/MusicAlbumInlineDetails.html#musicInlineDetailsTrack";
                    MS.Entertainment.Pages.BaseMediaInlineDetails.prototype._setMedia.call(this, useMedia);
                    this._beginPageChange();
                    this._secondaryList.dataSource = null;
                    this._actionsPanel.buttons = [];
                    if (media && media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album) {
                        this.album = media;
                        this.album.location = this.originalLocation;
                        this._formatAlbumDetailString();
                        WinJS.Utilities.addClass(this._primaryPanel, "popOverSecondPage");
                        this._showElement(this._containerTitle.domElement, false);
                        this._showElement(this._primaryListPanel, false);
                        this._showElement(this._secondaryListPanel, false);
                        loadContentPromise = this._loadAlbumTracks(media);
                        this._secondaryList.mediaContext.containingMedia = {
                            playbackItemSource: useMedia, playbackOffset: 0
                        }
                    }
                    else {
                        this.artist = media;
                        this._formatArtistDetailString();
                        WinJS.Utilities.removeClass(this._primaryPanel, "popOverSecondPage");
                        this._showElement(this._containerTitle.domElement, this.isCollection);
                        this._showElement(this._primaryListPanel, false);
                        this._showElement(this._secondaryListPanel, false);
                        loadContentPromise = this._loadAlbums(media);
                        if (this._albumIndex >= 0)
                            this._list.ensureVisible(this._albumIndex);
                        this._secondaryList.mediaContext.containingMedia = {
                            playbackItemSource: null, playbackOffset: 0
                        }
                    }
                    loadContentPromise.done(function addSubscriptionUpsell() {
                        if (!this._signedInUser)
                            this._signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        if (this._signedInUser && !this._signedInUser.isSubscription)
                            this._signInBindings = WinJS.Binding.bind(this._signedInUser, {isSubscription: this._updateSubscriptionLinkVisibility.bind(this)})
                    }.bind(this));
                    MS.Entertainment.UI.FileTransferService.pulseAsync(useMedia);
                    this._initializeListsOnce();
                    this._setupSmartBuy(useMedia);
                    this._endPageChange()
                }, _initializeListsOnce: function intializeListsOnce() {
                    if (this._initializingLists)
                        return;
                    this._initializingLists = true;
                    WinJS.Promise.timeout().then(function() {
                        if (!this.smartBuyStateEngine || this._unloaded)
                            return;
                        this._initializedLists = true;
                        if (!this.isCollection) {
                            WinJS.Utilities.addClass(this._list.domElement, "marketplaceAlbums");
                            WinJS.Utilities.addClass(this._secondaryList.domElement, "marketplaceTracks");
                            this._list.grouper = new MS.Entertainment.Pages.ArtistPopoverAlbumGrouper(true)
                        }
                        else {
                            WinJS.Utilities.addClass(this._list.domElement, "collectionAlbums");
                            WinJS.Utilities.addClass(this._secondaryList.domElement, "collectionTracks");
                            this._containerTitle.stringId = String.id.IDS_MUSIC_ALBUMS_IN_COLLECTION
                        }
                        var hydrateIfPossible = function hydrateIfPossible(hasServiceId) {
                                this._hydrateMediaIfPossible()
                            }.bind(this);
                        var binding = WinJS.Binding.bind(this.artist, {hasServiceId: hydrateIfPossible});
                        this.mediaBindings.push(binding);
                        this._loadAlbums(this.artist).done()
                    }.bind(this))
                }, _buttonChangedHandler: function _buttonChangedHandler() {
                    if (this.activeMedia && this.activeMedia.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                        this._displayAlbumTracksList(this.tracks);
                    else
                        this._displayArtistAlbumList(this.albums)
                }, _loadAlbums: function _loadAlbums(artist) {
                    if (!this._initializedLists || !artist || this._unloaded)
                        return WinJS.Promise.as();
                    var query = this._queryDisposer.albumsQuery;
                    var hydratePromise;
                    if (this.albums) {
                        this._displayArtistAlbumList(this.albums);
                        return WinJS.Promise.as()
                    }
                    else {
                        query = query || this.isCollection ? new MS.Entertainment.Data.Query.libraryAlbums : new MS.Entertainment.Data.Query.Music.ArtistAlbums;
                        this._queryDisposer.albumsQuery = query;
                        if (this.isCollection) {
                            query.artistId = artist.libraryId;
                            query.sort = Microsoft.Entertainment.Queries.AlbumsSortBy.titleAscending;
                            query.mediaAvailability = this.collectionFilter;
                            query.isLive = true
                        }
                        else {
                            if (!artist.hasCanonicalId)
                                hydratePromise = artist.hydrate();
                            hydratePromise = WinJS.Promise.as(hydratePromise).then(function setCanonicalId() {
                                if (!artist.hasCanonicalId || artist.isFailed)
                                    return WinJS.Promise.wrapError(new Error("Artist doesn't have a canonical id or hydrate failed"));
                                else
                                    query.id = artist.canonicalId
                            })
                        }
                        return WinJS.Promise.as(hydratePromise).then(function executeQuery() {
                                if (this._unloaded)
                                    return;
                                query = this._addContentNotifications(query, artist);
                                return query.getItemsAndIgnoreErrors()
                            }.bind(this)).then(function insertTopSongsItem(albums) {
                                if (this._unloaded)
                                    return;
                                if (!albums)
                                    albums = new MS.Entertainment.Data.VirtualList(null, []);
                                return MS.Entertainment.Utilities.redirectPromise(this._insertTopSongsItems(albums), albums)
                            }.bind(this)).then(function setAlbums(albums) {
                                if (this._unloaded)
                                    return;
                                this.albums = albums;
                                if (this._loadedButtons)
                                    this._displayArtistAlbumList(albums)
                            }.bind(this), function handleError() {
                                if (this._unloaded)
                                    return;
                                if (!this._isOnline)
                                    this._handleError();
                                else
                                    this._showEmptyArtistPanel()
                            }.bind(this))
                    }
                }, _showEmptyArtistPanel: function _showEmptyArtistPanel() {
                    WinJS.Utilities.removeClass(this.emptyContainer, "removeFromDisplay");
                    this.hideListLoadingControl();
                    this.tracks = [];
                    this.smartBuyStateEngine.updateState()
                }, _loadAlbumTracks: function _loadAlbumTracks(album) {
                    if (!this._initializedLists || !album)
                        return WinJS.Promise.as();
                    var hydratingPromise;
                    if (this.isCollection)
                        album.tracks = null;
                    else if (album.hydrate)
                        hydratingPromise = album.hydrate();
                    return WinJS.Promise.as(hydratingPromise).then(function hydratingDone() {
                            if (this._unloaded)
                                return;
                            return album.tracks || this._getAlbumTracksQuery(album).getItemsAndIgnoreErrors()
                        }.bind(this)).then(function setAlbumTrack(tracks) {
                            if (this._unloaded)
                                return;
                            album.tracks = tracks || album.tracks;
                            this.tracks = tracks;
                            if (this._loadedButtons)
                                this._displayAlbumTracksList(tracks)
                        }.bind(this))
                }, _updateSubscriptionLinkVisibility: function _updateSubscriptionLinkVisibility() {
                    if (this._subscriptionLink && this._subscriptionLink.action && this._subscriptionLink.action.canExecute() && this.media && (this.media.mediaType === Microsoft.Entertainment.Queries.ObjectType.album))
                        MS.Entertainment.ViewModels.MusicSmartBuyStateHandlers.getAlbumRights(this.media).then(function getAlbumRights_complete(rights) {
                            this.showSignupLink = (rights.subscriptionStream || rights.subscriptionDownload);
                            if (this.showSignupLink)
                                this._subscriptionLink.action.parameter = MS.Entertainment.Music.Freeplay.Events.musicPassUpsellAlbumPopoverLinkInvoked
                        }.bind(this));
                    else
                        this.showSignupLink = false
                }, _insertTopSongsItems: function _insertTopSongsItems(albums) {
                    var insertPromise;
                    if (albums && !this.isCollection) {
                        var topSongsAlbum = new MS.Entertainment.Data.Augmenter.Marketplace.EDSTopSongsAlbum;
                        topSongsAlbum.artist = this.artist;
                        insertPromise = albums.insertAt(0, new MS.Entertainment.Data.Factory.ListNoHeaderItemWrapper(topSongsAlbum))
                    }
                    return WinJS.Promise.as(insertPromise)
                }, _getAlbumTracksQuery: function _getAlbumTracksQuery(album) {
                    var query = this._queryDisposer.tracksQuery || this.isCollection ? new MS.Entertainment.Data.Query.libraryTracks : new MS.Entertainment.Data.Query.Music.AlbumSongs;
                    this._queryDisposer.tracksQuery = query;
                    if (this.isCollection) {
                        query.albumId = album.libraryId;
                        query.sort = Microsoft.Entertainment.Queries.TracksSortBy.albumReleaseYearDescendingNumberAscending;
                        query.mediaAvailability = this.collectionFilter;
                        query.isLive = true;
                        query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.album, MS.Entertainment.Utilities.isValidServiceId(album.canonicalId) ? album.canonicalId : String.empty)
                    }
                    else {
                        query.id = album.canonicalId;
                        query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.album, MS.Entertainment.Utilities.isValidServiceId(album.canonicalId) ? album.canonicalId : String.empty)
                    }
                    return this._addContentNotifications(query)
                }, _beginPageChange: function _beginPageChange() {
                    MS.Entertainment.Utilities.hideElement(this._primaryPanel)
                }, _displayArtistAlbumList: function _displayArtistAlbumList(items) {
                    if (this._unloaded)
                        return;
                    this.hideListLoadingControl();
                    this._showElement(this._primaryListPanel, items && items.count > 0);
                    this._showElement(this._containerTitle, items && items.count > 0);
                    if (this._list) {
                        if (!this._list.dataSource)
                            this._updateArtistCounts();
                        this._list.dataSource = items
                    }
                    if (items && this.collectionFilter && this.collectionFilter !== Microsoft.Entertainment.Platform.MediaAvailability.available) {
                        var unfilteredQuery = new MS.Entertainment.Data.Query.libraryAlbums;
                        unfilteredQuery.artistId = this.media.libraryId;
                        unfilteredQuery.executeCount().done(function unfilteredQueryComplete(unfilteredAlbumCount) {
                            if (unfilteredAlbumCount > items.count)
                                this._showCollectionFilter()
                        }.bind(this), function unfilteredQueryError() {
                            this._showCollectionFilter()
                        }.bind(this))
                    }
                }, _displayAlbumTracksList: function _displayAlbumTracksList(items) {
                    if (this._unloaded)
                        return;
                    this.hideListLoadingControl();
                    this._showElement(this._secondaryListPanel, items && items.count > 0);
                    this._showElement(this._containerTitle, items && items.count > 0);
                    this._secondaryList.dataSource = items;
                    if (items && this.collectionFilter && this.collectionFilter !== Microsoft.Entertainment.Platform.MediaAvailability.available) {
                        var unfilteredQuery = new MS.Entertainment.Data.Query.libraryTracks;
                        unfilteredQuery.albumId = this.media.libraryId;
                        unfilteredQuery.executeCount().done(function unfilteredQueryComplete(unfilteredTrackCount) {
                            if (unfilteredTrackCount > items.count)
                                this._showCollectionFilter()
                        }.bind(this), function unfilteredQueryError() {
                            this._showCollectionFilter()
                        }.bind(this))
                    }
                }, _endPageChange: function _endPageChange() {
                    MS.Entertainment.Utilities.showElement(this._primaryPanel)
                }, _updateArtistCounts: function _updateArtistCounts() {
                    if (this.artist && this.artist.inCollection) {
                        var localArtistQuery = new MS.Entertainment.Data.Query.libraryArtists;
                        localArtistQuery.personId = this.artist.libraryId;
                        localArtistQuery.mediaAvailability = this.collectionFilter;
                        localArtistQuery.execute().done(function(query) {
                            this.artist.totalTracksCount = query.result.totalTracksCount;
                            this.artist.totalAlbumsCount = query.result.totalAlbumsCount
                        }.bind(this))
                    }
                }, _formatAlbumDetailString: function _formatAlbumDetailString() {
                    if (this._detailBindings) {
                        this._detailBindings.cancel();
                        this._detailBindings = null
                    }
                    var bindingsComplete = false;
                    var formatAlbumDetailString = function formatAlbumDetailString() {
                            if (bindingsComplete && this.media === this.album)
                                this.detailString = MS.Entertainment.Data.Factory.createAlbumDetailString(this.album)
                        }.bind(this);
                    this._detailBindings = WinJS.Binding.bind(this.album, {
                        artistName: formatAlbumDetailString, releaseDate: formatAlbumDetailString, primaryGenre: formatAlbumDetailString, genreName: formatAlbumDetailString, label: formatAlbumDetailString
                    });
                    bindingsComplete = true;
                    formatAlbumDetailString()
                }, _formatArtistDetailString: function _formatArtistDetailString() {
                    if (this._detailBindings) {
                        this._detailBindings.cancel();
                        this._detailBindings = null
                    }
                    var bindingsComplete = false;
                    var formatArtistDetailString = function formatArtistDetailString() {
                            if (bindingsComplete && this.media === this.artist)
                                this.detailString = MS.Entertainment.Data.Factory.createArtistDetailString(this.artist, this.isCollection)
                        }.bind(this);
                    this._detailBindings = WinJS.Binding.bind(this.artist, {
                        inCollection: formatArtistDetailString, detailString: formatArtistDetailString, totalAlbumsCount: formatArtistDetailString, totalTracksCount: formatArtistDetailString, primaryGenre: formatArtistDetailString
                    });
                    bindingsComplete = true;
                    formatArtistDetailString()
                }, _addContentNotifications: function _addContentNotifications(query, sourceMedia) {
                    if (query) {
                        var propertyKey = this.isCollection ? "libraryId" : "serviceId";
                        var notifications = new MS.Entertainment.UI.ContentNotification.NotificationModification(MS.Entertainment.UI.ContentNotification.listResult(), MS.Entertainment.UI.FileTransferService.keyFromProperty(propertyKey, false, true));
                        notifications.modifyQuery(query);
                        if (sourceMedia && sourceMedia.mediaType === Microsoft.Entertainment.Queries.ObjectType.person) {
                            this._notificationsSender = notifications.createSender();
                            this._fileTransferListenerId = "MusicArtistInlineDetails_" + MS.Entertainment.Utilities.getSessionUniqueInteger();
                            var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                            var taskKeyGetter;
                            if (this.isCollection)
                                taskKeyGetter = MS.Entertainment.UI.FileTransferService.keyFromProperty("albumLibraryId");
                            else
                                taskKeyGetter = MS.Entertainment.UI.FileTransferService.keyFromProperty("albumMediaId", false, true);
                            fileTransferService.registerListener(this._fileTransferListenerId, taskKeyGetter, this._notificationsSender, MS.Entertainment.UI.FileTransferNotifiers.trackCollection)
                        }
                    }
                    return query
                }, _unregisterFileTransferListener: function _unregisterFileTransferListener() {
                    if (this._fileTransferListenerId) {
                        var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                        fileTransferService.unregisterListener(this._fileTransferListenerId)
                    }
                    this._notificationsSender = null
                }
        }, {
            artist: null, album: null, activeMedia: null, showSignupLink: false
        }), ArtistPopoverAlbumGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function ArtistPopoverAlbumGrouper(isMarketplace) {
                this.isMarketplace = isMarketplace || false;
                this.keyPropertyName = "mediaType"
            }, {
                isMarketplace: false, useKeyAsData: false, createData: function createData(item) {
                        var title;
                        if (item && item.data && !item.data.isTopSongs && item.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                            title = String.load(this.isMarketplace ? String.id.IDS_DETAILS_RECENT_ALBUMS : String.id.IDS_MUSIC_ALBUMS_IN_COLLECTION);
                        else
                            title = String.load(this.isMarketplace ? String.id.IDS_DETAILS_TOP_SONGS : String.id.IDS_MUSIC_SONGS_IN_COLLECTION);
                        return {title: title}
                    }
            }), ArtistPopoverTemplateSelector: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryTemplateSelector", function galleryTemplateSelector() {
                MS.Entertainment.UI.Controls.TemplateSelectorBase.prototype.constructor.call(this);
                this.topSongsAlbumTemplate = "Components/Music/MusicSharedTemplates.html#verticalTopSongsAlbumTemplate"
            }, {
                topSongsAlbumTemplate: {
                    get: function() {
                        return this.getTemplate(MS.Entertainment.Pages.ArtistPopoverTemplateSelector.templateType.topSongsAlbum)
                    }, set: function(value) {
                            this.addTemplate(MS.Entertainment.Pages.ArtistPopoverTemplateSelector.templateType.topSongsAlbum, value)
                        }
                }, onSelectTemplate: function onSelectTemplate(item) {
                        if (item.data && item.data.isTopSongs)
                            return this.getTemplateProvider(MS.Entertainment.Pages.ArtistPopoverTemplateSelector.templateType.topSongsAlbum);
                        else
                            return MS.Entertainment.UI.Controls.GalleryTemplateSelector.prototype.onSelectTemplate.apply(this, arguments)
                    }
            }, {templateType: {topSongsAlbum: "topSongsAlbum"}}), ArtistTracksDataNotificationHandler: MS.Entertainment.UI.Framework.define(function artistTracksDataNotificationHandler(updateCallback) {
                this._updateCallback = updateCallback
            }, {
                _updateCallback: null, dispose: function dispose() {
                        this._updateCallback = null
                    }, inserted: function inserted(item, previousKey, nextKey, index) {
                        this._updateCallback(index)
                    }, changed: function changed(newItem, oldItem){}, moved: function moved(item, previousKey, nextKey, oldIndex, newIndex){}, removed: function removed(key, index) {
                        this._updateCallback(index, key)
                    }, countChanged: function countChanged(newCount, oldCount){}
            })
    })
})()
})();
/* >>>>>>/components/music/musicbranddialog.js:19283 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Music");
    WinJS.Namespace.define("MS.Entertainment.Music", {MusicBrandDialogContent: MS.Entertainment.UI.Framework.defineUserControl("Components/Music/MusicBrandDialog.html#dialogContentTemplate", function musicBrandDialogContentConstructor(element, options){}, {}, {
            description: null, actionLink: null
        })});
    WinJS.Namespace.define("MS.Entertainment.Music", {MusicBrandDialog: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Dialog", "Components/Music/MusicBrandDialog.html#dialogTemplate", function musicBrandDialog(element, options){}, {
            mediaItem: null, buttonIds: null, dialogDismissedCallback: null, persistOnNavigate: true, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.Dialog.prototype.initialize.call(this);
                    this._xenonTitle.innerText = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).applicationTitle;
                    this._xenonTitleIcon.innerText = MS.Entertainment.UI.Icon.xboxXenonLogo;
                    var themeNum = MS.Entertainment.Music.MusicBrandDialog.colorThemes.length;
                    var themeIndex = Math.floor(Math.random() * themeNum);
                    var theme = MS.Entertainment.Music.MusicBrandDialog.colorThemes[themeIndex];
                    WinJS.Utilities.addClass(this.musicDialog, theme)
                }, unload: function unload() {
                    MS.Entertainment.UI.Controls.Dialog.prototype.unload.call(this)
                }, _setInitialButtons: function _setInitialButtons() {
                    this.buttons = this._getButtonArray()
                }, _getButtonArray: function _getButtonArray() {
                    var buttons = [];
                    var cancelButton = {
                            title: String.load(String.id.IDS_CANCEL_BUTTON), isEnabled: true, isAvailable: true, execute: function onCancelClicked() {
                                    this.hide();
                                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogCancel);
                                    if (this.dialogDismissedCallback)
                                        this.dialogDismissedCallback()
                                }.bind(this)
                        };
                    var okButton = {
                            title: String.load(String.id.IDS_OK_BUTTON), isEnabled: true, isAvailable: true, execute: function onOkClicked() {
                                    this.hide();
                                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogOk);
                                    if (this.dialogDismissedCallback)
                                        this.dialogDismissedCallback()
                                }.bind(this)
                        };
                    var signUpButton = {
                            title: String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_ACTION), isEnabled: true, isAvailable: true, execute: function onSigninClicked() {
                                    this.hide();
                                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogSignIn);
                                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                    signIn.signIn().done(function signInComplete(result) {
                                        if (this.dialogDismissedCallback)
                                            this.dialogDismissedCallback(result)
                                    }.bind(this), function signInError() {
                                        if (this.dialogDismissedCallback)
                                            this.dialogDismissedCallback()
                                    }.bind(this))
                                }.bind(this)
                        };
                    var subscribeButton = {
                            title: String.load(String.id.IDS_MUSIC_STREAMING_PLAY_LIMIT_PREMIUM_ACTION), isEnabled: true, isAvailable: true, execute: function onSubscriptionClicked() {
                                    this.hide();
                                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogSubscribe);
                                    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var action = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup);
                                    action.automationId = MS.Entertainment.UI.AutomationIds.freeLimitsSubscriptionSignup;
                                    action.execute().done(function signUpComplete() {
                                        if (this.dialogDismissedCallback)
                                            this.dialogDismissedCallback()
                                    }.bind(this), function signUpError() {
                                        if (this.dialogDismissedCallback)
                                            this.dialogDismissedCallback()
                                    }.bind(this))
                                }.bind(this)
                        };
                    var signInAndSubscribeButton = {
                            title: String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_ACTION), isEnabled: true, isAvailable: true, execute: function onSignInAndSubscribeClicked() {
                                    this.hide();
                                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogSignInThenSignUp);
                                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                    signIn.signIn().done(function signInComplete() {
                                        if (this.dialogDismissedCallback)
                                            this.dialogDismissedCallback();
                                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                        var action = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup);
                                        action.automationId = MS.Entertainment.UI.AutomationIds.freeLimitsSubscriptionSignup;
                                        action.execute()
                                    }.bind(this), function signInError() {
                                        if (this.dialogDismissedCallback)
                                            this.dialogDismissedCallback()
                                    }.bind(this))
                                }.bind(this)
                        };
                    var signInNowForNewUserButton = {
                            title: String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_NEW_USER_ACTION), isEnabled: true, isAvailable: true, execute: function onSigninClicked() {
                                    this.hide();
                                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogSignInNowForNewUser);
                                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                    signIn.signIn().done(function signInComplete(result) {
                                        if (this.dialogDismissedCallback)
                                            this.dialogDismissedCallback(result)
                                    }.bind(this), function signInError() {
                                        if (this.dialogDismissedCallback)
                                            this.dialogDismissedCallback()
                                    }.bind(this))
                                }.bind(this)
                        };
                    var signInNowForExistingUserButton = {
                            title: String.load(String.id.IDS_MUSIC_STREAMING_KEEP_PLAYING_EXISTING_USER_ACTION), isEnabled: true, isAvailable: true, execute: function onSigninClicked() {
                                    this.hide();
                                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogSignInNowForExistingUser);
                                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                    signIn.signIn().done(function signInComplete(result) {
                                        if (this.dialogDismissedCallback)
                                            this.dialogDismissedCallback(result)
                                    }.bind(this), function signInError() {
                                        if (this.dialogDismissedCallback)
                                            this.dialogDismissedCallback()
                                    }.bind(this))
                                }.bind(this)
                        };
                    var continuePlayingButton = {
                            title: String.load(String.id.IDS_MUSIC_STREAMING_EMPTY_ROOM_PLAY_ACTION), isEnabled: true, isAvailable: true, execute: function onKeepPlayingClicked() {
                                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogContinuePlaying);
                                    var onSigninCompleteOrError = function onSigninCompleteOrError() {
                                            this.hide();
                                            if (this.dialogDismissedCallback)
                                                this.dialogDismissedCallback()
                                        }.bind(this);
                                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                    signIn.signIn().done(onSigninCompleteOrError, onSigninCompleteOrError)
                                }.bind(this)
                        };
                    var buyTrackButton = {
                            title: String.load(String.id.IDS_BUY_BUTTON), isEnabled: true, isAvailable: true, execute: function onBuyTrackClicked() {
                                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogBuyTrack);
                                    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var purchaseAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.trackPurchase);
                                    purchaseAction.automationId = MS.Entertainment.Music.Freeplay.Events.limitDialogBuyTrack;
                                    purchaseAction.parameter = this.mediaItem;
                                    purchaseAction.execute()
                                }.bind(this)
                        };
                    var buyAlbumButton = {
                            title: String.load(String.id.IDS_MUSIC_STREAMING_TRACK_LIMIT_BUY_ACTION), isEnabled: true, isAvailable: true, execute: function onBuyAlbumClicked() {
                                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogBuyAlbum);
                                    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                    var purchaseAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.albumPurchase);
                                    purchaseAction.automationId = MS.Entertainment.Music.Freeplay.Events.limitDialogBuyAlbum;
                                    purchaseAction.parameter = this.mediaItem;
                                    purchaseAction.execute()
                                }.bind(this)
                        };
                    for (var i = 0; i < this.buttonIds.length; i++) {
                        var button = this.buttonIds[i];
                        switch (button) {
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel:
                                buttons.push(cancelButton);
                                break;
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.continuePlaying:
                                buttons.push(continuePlayingButton);
                                break;
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.ok:
                                buttons.push(okButton);
                                break;
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp:
                                buttons.push(signUpButton);
                                break;
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUpOrSubscribe:
                                var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                if (!signIn.isSignedIn)
                                    buttons.push(signUpButton);
                                else if (!signedInUser.isSubscription)
                                    buttons.push(subscribeButton);
                                break;
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.subscribe:
                                buttons.push(subscribeButton);
                                break;
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInAndSubscribe:
                                buttons.push(signInAndSubscribeButton);
                                break;
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForNewUser:
                                buttons.push(signInNowForNewUserButton);
                                break;
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signInNowForExistingUser:
                                buttons.push(signInNowForExistingUserButton);
                                break;
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.buyTrack:
                                buttons.push(buyTrackButton);
                                break;
                            case MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.buyAlbum:
                                buttons.push(buyAlbumButton);
                                break;
                            default:
                                MS.Entertainment.Music.fail("unknown button Id: " + button);
                                break
                        }
                    }
                    return buttons
                }
        }, {}, {
            _dialogShown: false, show: function show(titleString, contentString, contentLink, buttonIds, dialogDismissedCallback, mediaItem) {
                    var showPromise;
                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    var networkStatus = uiStateService.networkStatus;
                    if (!uiStateService.servicesEnabled)
                        showPromise = MS.Entertainment.UI.Shell.showAppUpdateDialog();
                    else if (networkStatus === MS.Entertainment.UI.NetworkStatusService.NetworkStatus.localOnly || networkStatus === MS.Entertainment.UI.NetworkStatusService.NetworkStatus.none)
                        showPromise = MS.Entertainment.Music.MusicBrandDialog.showOfflineDialog(contentLink, dialogDismissedCallback);
                    else
                        showPromise = MS.Entertainment.Music.MusicBrandDialog._show(titleString, contentString, contentLink, buttonIds, dialogDismissedCallback, mediaItem);
                    return WinJS.Promise.as(showPromise)
                }, showOfflineDialog: function showOfflineDialog(contentLink, dialogDismissedCallback) {
                    return MS.Entertainment.Music.MusicBrandDialog._show(String.load(String.id.IDS_FAILED_PANEL_OFFLINE_HEADER), String.load(String.id.IDS_FAILED_PANEL_OFFLINE_DESC), contentLink, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel], dialogDismissedCallback, null, "offlineDialog")
                }, showEmptyRoomDialog: function showEmptyRoomDialog(dialogDismissedCallback) {
                    var buttons = [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.continuePlaying, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.subscribe];
                    return MS.Entertainment.Music.MusicBrandDialog._show(String.load(String.id.IDS_MUSIC_STREAMING_EMPTY_ROOM_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_EMPTY_ROOM_DESC), null, buttons, dialogDismissedCallback, null, "emptyRoomDialog")
                }, _show: function _show(titleString, contentString, contentLink, buttonIds, dialogDismissedCallback, mediaItem, customStyle) {
                    if (MS.Entertainment.Music.MusicBrandDialog._dialogShown)
                        return WinJS.Promise.wrap();
                    buttonIds = buttonIds || [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel];
                    var dialogDismissedCallbackWrapper = function dialogDismissedCallbackWrapper(result) {
                            MS.Entertainment.Music.MusicBrandDialog._dialogShown = false;
                            if (dialogDismissedCallback)
                                dialogDismissedCallback(result)
                        };
                    if (contentLink && contentLink.execute) {
                        var wrappedExecute = contentLink.execute;
                        contentLink.execute = function executeWrapper() {
                            wrappedExecute();
                            dialog.hide();
                            dialogDismissedCallbackWrapper()
                        }
                    }
                    var options = {
                            title: titleString, defaultButtonIndex: 0, buttonIds: buttonIds, customStyle: customStyle, dialogDismissedCallback: dialogDismissedCallbackWrapper, mediaItem: mediaItem, userControl: "MS.Entertainment.Music.MusicBrandDialogContent", userControlOptions: {
                                    description: contentString, actionLink: contentLink
                                }
                        };
                    var dialog = new MS.Entertainment.Music.MusicBrandDialog(document.createElement("div"), options);
                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.limitDialogDisplayed);
                    MS.Entertainment.Music.MusicBrandDialog._dialogShown = true;
                    return dialog.show()
                }, colorThemes: ["blue", "green", "orange", "pink"], dialogButtonIds: {
                    cancel: "cancel", continuePlaying: "continuePlaying", ok: "ok", signUp: "signUp", signUpOrSubscribe: "signUpOrSubscribe", signInAndSubscribe: "signInAndSubscribe", signInNowForNewUser: "signInNowForNewUser", signInNowForExistingUser: "signInNowForExistingUser", subscribe: "subscribe", buyTrack: "buyTrack", buyAlbum: "buyAlbum"
                }
        })})
})()
})();
/* >>>>>>/components/music/findalbuminfo.js:19529 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Music");
    WinJS.Namespace.define("MS.Entertainment.Music", {FindAlbumInfoDropDown: MS.Entertainment.UI.Framework.defineUserControl(null, function findAlbumInfoDropDown(element, options){}, {
            _dataSource: null, initialize: function initialize() {
                    this.domElement.addEventListener("change", function() {
                        var value = parseInt(this.domElement.value);
                        if (value === -1)
                            this.dataSource.selectedTrack = null;
                        else
                            this.dataSource.selectedTrack = this.dataSource.availableTracks[value]
                    }.bind(this))
                }, dataSource: {
                    get: function() {
                        return this._dataSource
                    }, set: function(value) {
                            this._dataSource = value;
                            this._render()
                        }
                }, _render: function _render() {
                    WinJS.Promise.timeout().then(function() {
                        var htmlOriginalTrack = MS.Entertainment.Music.FindAlbumInfoDropDown._groupsFormat.format(String.load(String.id.IDS_FAI_ORIGINAL_TRACK), this._formatTrack("-1", this.dataSource.originalTrack));
                        var htmlAvailableTracks;
                        if (MS.Entertainment.Music.FindAlbumInfoDropDown._cachedAvailableTracks !== this.dataSource.availableTracks) {
                            var htmlOptions = String.empty;
                            for (var i = 0; i < this.dataSource.availableTracks.length; i++)
                                htmlOptions += this._formatTrack(i, this.dataSource.availableTracks[i]);
                            htmlAvailableTracks = MS.Entertainment.Music.FindAlbumInfoDropDown._groupsFormat.format(String.load(String.id.IDS_FAI_AVAILABLE_TRACKS), htmlOptions);
                            MS.Entertainment.Music.FindAlbumInfoDropDown._cachedAvailableTracks = this.dataSource.availableTracks;
                            MS.Entertainment.Music.FindAlbumInfoDropDown._cachedAvailableTracksHtml = htmlAvailableTracks
                        }
                        else
                            htmlAvailableTracks = MS.Entertainment.Music.FindAlbumInfoDropDown._cachedAvailableTracksHtml;
                        this.domElement.innerHTML = htmlOriginalTrack + htmlAvailableTracks;
                        MS.Entertainment.Utilities.forceFullLayout()
                    }.bind(this))
                }, _formatTrack: function _formatTrack(index, track) {
                    var trackNumber = 1;
                    if (track.trackNumber && track.trackNumber > 1)
                        trackNumber = track.trackNumber;
                    var name = MS.Entertainment.Utilities.escapeHTML(track.name);
                    return MS.Entertainment.Music.FindAlbumInfoDropDown._optionFormat.format(index, trackNumber, name)
                }
        }, {}, {
            _cachedAvailableTracks: null, _cachedAvailableTracksHtml: null, _groupsFormat: "<optgroup label=\"{0}\">{1}</optgroup>", _optionFormat: "<option value=\"{0}\">{1}&nbsp;&nbsp;{2}</option>"
        })});
    WinJS.Namespace.define("MS.Entertainment.Music", {FindAlbumInfo: MS.Entertainment.UI.Framework.defineUserControl("Components/Music/FindAlbumInfo.html#findAlbumInfoTemplate", function findAlbumInfo(element, options) {
            var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
            this._musicMarketplaceEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace);
            this._storeSyncEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.storeSync);
            this._nextButton = WinJS.Binding.as({
                title: String.load(String.id.IDS_FAI_NEXT_BUTTON), isEnabled: true, isAvailable: true, execute: function onNext(dialog, event) {
                        this._onNext(event, this._createTelemetryActionData("findAlbumInfoNavBar", "nextButton", this._containerButtons.indexOf(this._nextButton)))
                    }.bind(this)
            });
            this._finishButton = WinJS.Binding.as({
                title: String.load(String.id.IDS_FAI_FINISH_BUTTON), isEnabled: true, isAvailable: true, execute: function onFinish(dialog, event) {
                        this._onFinish(event, this._createTelemetryActionData("findAlbumInfoNavBar", "finishButton", this._containerButtons.indexOf(this._finishButton)))
                    }.bind(this)
            });
            this._cancelButton = WinJS.Binding.as({
                title: String.load(String.id.IDS_FAI_CANCEL_BUTTON), isEnabled: true, isAvailable: true, execute: function onCancel(dialog, event) {
                        this._onCancel(event, this._createTelemetryActionData("findAlbumInfoNavBar", "cancelButton", this._containerButtons.indexOf(this._cancelButton)))
                    }.bind(this)
            });
            this._containerButtons = [this._nextButton, this._finishButton, this._cancelButton];
            this._queryWatcher = new MS.Entertainment.Framework.QueryWatcher("findAlbumInfo");
            this._pageBackStack = []
        }, {
            collectionUpdated: false, _originalAlbum: null, _originalTracks: null, _keywords: null, _selectedAlbum: null, _selectedAlbumIndex: -1, _tracksMatch: false, _setFocusOnPage: true, _pageBackStack: null, _musicMarketplaceEnabled: false, _storeSyncEnabled: false, _nextButton: null, _finishButton: null, _cancelButton: null, _container: null, _containerButtons: null, _queryWatcher: null, _matchedTracks: null, _navigating: false, _unmatchedTracks: null, _albums: null, _matchMode: null, _matchSource: null, _signedInUser: null, _cloudCollectionService: null, _currentPage: null, _lastXCorrelationId: null, _page: {
                    get: function() {
                        return this._currentPage
                    }, set: function(value) {
                            if (value !== this._currentPage) {
                                var currentPageData;
                                if (this._currentPage)
                                    currentPageData = {
                                        uri: this._currentPage, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Popover
                                    };
                                else
                                    currentPageData = {
                                        uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Unknown
                                    };
                                MS.Entertainment.Utilities.Telemetry.logPageView(this.domElement, {
                                    uri: "findAlbumInfo/" + value, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Popover
                                }, currentPageData);
                                this._currentPage = value;
                                this._setFocusOnPage = true
                            }
                        }
                }, initialize: function initialize() {
                    MS.Entertainment.Music.assert(this._matchMode, "_matchMode must be specified in the options");
                    this._keywords = this._getInitialKeywords();
                    this._page = MS.Entertainment.Music.FindAlbumInfo.Page.selectAlbum;
                    if (this._originalAlbum.libraryId === -1) {
                        if (this._originalAlbum.tracks)
                            this._originalAlbum.tracks.toArrayAll().done(function(tracks) {
                                this._originalTracks = tracks;
                                this.tracks = tracks
                            }.bind(this), function handleError(error) {
                                MS.Entertainment.Music.fail("Getting all tracks failed. Error: " + error && error.message)
                            })
                    }
                    else
                        this._queryLibraryTracks();
                    this._showElement(this._trackColumnHeader, false);
                    this._showElement(this._trackList, false);
                    this._queryAlbums();
                    this._sendTelemetryEvent("FindAlbumInfo_Begin");
                    this._albumList.selectionHelperFactory = function selectionHelperFactory() {
                        return new MS.Entertainment.UI.Controls.DoNothingSelectionHelper
                    };
                    this._signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    this._cloudCollectionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection)
                }, onSearch: function onSearch() {
                    if (this._keywords !== this._keywordsEdit.value) {
                        this._sendTelemetryPageAction(this._searchIcon, this._currentPage);
                        this._keywords = this._keywordsEdit.value;
                        this._queryAlbums();
                        this._sendTelemetryEvent("FindAlbumInfo_NewSearch")
                    }
                }, onSearchKeyDown: function onSearchKeyDown(event) {
                    if (event.keyCode === WinJS.Utilities.Key.enter)
                        this.onSearch()
                }, onSearchFocus: function onSearchFocus(event) {
                    if (this._searchContainer)
                        WinJS.Utilities.addClass(this._searchContainer, "searchFocused")
                }, onSearchBlur: function onSearchBlur(event) {
                    if (this._searchContainer)
                        WinJS.Utilities.removeClass(this._searchContainer, "searchFocused")
                }, unload: function unload() {
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, setOverlay: function setOverlay(container) {
                    this._container = container;
                    container.buttons = this._containerButtons;
                    container.backClickHandler = this.onBackClick.bind(this);
                    container.searchAlbumsClickHandler = this.onSearchAlbumsClick.bind(this);
                    container.bulkMatchClickHandler = this.onBulkMatchClick.bind(this);
                    this._updateState()
                }, onAlbumSelected: function onAlbumSelected(event) {
                    if (this._navigating)
                        return;
                    if (event && event.target && event.target.winControl && event.target.winControl.selection) {
                        var indices = event.target.winControl.selection.getIndices();
                        if (indices && indices.length > 0)
                            this._albumList.dataSource.itemsFromIndex(indices[0], 0, 0).done(function albumSelected(args) {
                                var mediaResult = args.items[args.offset];
                                var media;
                                if (mediaResult && mediaResult.data)
                                    media = mediaResult.data;
                                this._sendTelemetryPageAction(event.target, this._currentPage, media);
                                this.albumSelectionHandler(media, indices[0])
                            }.bind(this), function handleError(error) {
                                MS.Entertainment.Music.fail("Failed to get selected album. Error: " + (error && error.message))
                            });
                        else if (this._selectedAlbumIndex >= 0)
                            this.albumSelectionHandler(null, this._selectedAlbumIndex)
                    }
                    else
                        MS.Entertainment.Music.fail("selectionchanged event invalid.  Unable to cloud match album")
                }, albumSelectionHandler: function albumSelectionHandler(mediaItem, itemIndex) {
                    if (this._selectedAlbum && this._selectedAlbumIndex === itemIndex) {
                        this._selectedAlbum = null;
                        this._selectedAlbumIndex = -1;
                        this._updateState()
                    }
                    else if (mediaItem) {
                        this._selectedAlbum = mediaItem;
                        this._selectedAlbumIndex = itemIndex;
                        this._queryTracks(mediaItem)
                    }
                    else
                        MS.Entertainment.Music.fail("Invalid selection state.  Unable to cloud match album")
                }, onSearchAlbumsClick: function onSearchAlbumsClick(event) {
                    this._sendTelemetryPageAction(event.target, MS.Entertainment.Music.FindAlbumInfo.Page.searchAlbums);
                    var telemetryParameterArray = [];
                    if (this._lastXCorrelationId)
                        telemetryParameterArray.push({
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.XCorrelationId, parameterValue: this._lastXCorrelationId
                        });
                    this._sendTelemetryEvent("FindAlbumInfo_Search", telemetryParameterArray);
                    this._pageBackStack.push(this._page);
                    this._page = MS.Entertainment.Music.FindAlbumInfo.Page.searchAlbums;
                    this._updateState();
                    if (this._musicMarketplaceEnabled)
                        this._queryAlbums();
                    this.tracks = this._originalTracks
                }, onBulkMatchClick: function onBulkMatchClick(event) {
                    MS.Entertainment.Music.cloudMatchOptInDialog.show()
                }, _onNext: function _onNext(event, pageContentDataObject) {
                    this._sendTelemetryPageAction(event.target, MS.Entertainment.Music.FindAlbumInfo.Page.matchTracks, null, pageContentDataObject);
                    this._navigating = true;
                    this._pageBackStack.push(this._page);
                    this._page = MS.Entertainment.Music.FindAlbumInfo.Page.matchTracks;
                    this._updateState();
                    this._navigating = false
                }, onBackClick: function onBackClick(event) {
                    this._navigating = true;
                    if (this._pageBackStack.length > 0) {
                        this._sendTelemetryPageAction(event.target, this._pageBackStack[this._pageBackStack.length - 1]);
                        this._page = this._pageBackStack.pop();
                        this._updateState();
                        if (this._pageBackStack.length === 0 && (this._musicMarketplaceEnabled || this._keywords !== this._getInitialKeywords())) {
                            this._keywords = this._getInitialKeywords();
                            this._queryAlbums()
                        }
                    }
                    this._navigating = false
                }, _onCancel: function _onCancel(event, pageContentDataObject) {
                    var domElement = event ? event.target : null;
                    this._sendTelemetryPageAction(domElement, null, null, pageContentDataObject);
                    var telemetryParameterArray = [];
                    if (this._lastXCorrelationId)
                        telemetryParameterArray.push({
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.XCorrelationId, parameterValue: this._lastXCorrelationId
                        });
                    this._sendTelemetryEvent("FindAlbumInfo_Cancel", telemetryParameterArray);
                    this._container.hide()
                }, _getInitialKeywords: function _getInitialKeywords() {
                    var keywords = this._originalAlbum.name;
                    if (this._originalAlbum.artistName !== String.load(String.id.IDS_MEDIASTORE_VARIOUS_ARTISTS))
                        keywords += " " + this._originalAlbum.artistName;
                    return keywords
                }, _isCloudMatch: {get: function get_isCloudMatch() {
                        return this._matchMode === MS.Entertainment.Music.FindAlbumInfo.MatchMode.cloud
                    }}, _isLibraryMatch: {get: function get_isLibraryMatch() {
                        return this._matchMode === MS.Entertainment.Music.FindAlbumInfo.MatchMode.library
                    }}, _queryLibraryTracks: function _queryLibraryTracks() {
                    var query = new MS.Entertainment.Data.Query.libraryTracks;
                    query.albumId = this._originalAlbum.libraryId;
                    query.sort = Microsoft.Entertainment.Queries.TracksSortBy.numberAscending;
                    this._queryWatcher.registerQuery(query);
                    query.execute().done(function querySuccess(q) {
                        q.result.items.toArrayAll().done(function(tracks) {
                            this._originalTracks = tracks;
                            this.tracks = tracks
                        }.bind(this))
                    }.bind(this), function queryError(q) {
                        MS.Entertainment.Music.fail("library tracks query failed!")
                    })
                }, _queryAlbums: function _queryAlbums() {
                    this._matchSource = null;
                    this._albums = null;
                    this.tracks = null;
                    this._tracksMatch = false;
                    this._selectedAlbum = null;
                    this._selectedAlbumIndex = -1;
                    if (this._tracksLoadingControl)
                        this._tracksLoadingControl.reset();
                    if (this._albumsLoadingControl)
                        this._albumsLoadingControl.reset();
                    this._showElement(this._noAlbumsLabel, false);
                    if (this._albumsLoadingControl)
                        this._albumsLoadingControl.isBusy = true;
                    this._updateState();
                    var keywords = this._keywords;
                    if (keywords) {
                        if (keywords.length > MS.Entertainment.Music.FindAlbumInfo._maxSearchTextLength)
                            keywords = keywords.slice(0, MS.Entertainment.Music.FindAlbumInfo._maxSearchTextLength);
                        var query;
                        var matchSource;
                        if (this._page === MS.Entertainment.Music.FindAlbumInfo.Page.selectAlbum) {
                            matchSource = MS.Entertainment.Music.FindAlbumInfo.MatchSource.musicMatch;
                            query = new MS.Entertainment.Data.Query.Music.MusicMatch.AlbumSearch;
                            query.albumLibraryId = this._originalAlbum.libraryId
                        }
                        else {
                            matchSource = MS.Entertainment.Music.FindAlbumInfo.MatchSource.eds;
                            query = new MS.Entertainment.Data.Query.Music.AlbumSearch;
                            query.inflateParentItems = true
                        }
                        query.search = keywords;
                        this._queryWatcher.registerQuery(query);
                        query.execute().done(function querySuccess(q) {
                            if (this.domElement) {
                                if (q.result.xCorrelationId)
                                    this._lastXCorrelationId = q.result.xCorrelationId;
                                this._matchSource = matchSource;
                                this._albums = q.result.items;
                                if (!this._albums || !this._albums.count)
                                    if (this._page === MS.Entertainment.Music.FindAlbumInfo.Page.searchAlbums)
                                        this._showElement(this._noAlbumsLabel, true);
                                    else {
                                        this._page = MS.Entertainment.Music.FindAlbumInfo.Page.searchAlbums;
                                        this._queryAlbums()
                                    }
                                if (this._albumsLoadingControl)
                                    this._albumsLoadingControl.isBusy = false;
                                this._updateState()
                            }
                        }.bind(this), function queryError(q) {
                            if (this.domElement)
                                if (this._page === MS.Entertainment.Music.FindAlbumInfo.Page.searchAlbums) {
                                    if (this._albumsLoadingControl)
                                        this._albumsLoadingControl.isOffline = true
                                }
                                else {
                                    this._page = MS.Entertainment.Music.FindAlbumInfo.Page.searchAlbums;
                                    this._queryAlbums()
                                }
                        }.bind(this))
                    }
                }, _queryTracks: function _queryTracks(album) {
                    this.tracks = null;
                    if (this._tracksLoadingControl)
                        this._tracksLoadingControl.reset();
                    this._tracksMatch = null;
                    var query;
                    var promise = WinJS.Promise.as();
                    var matchUsingRequestId = false;
                    if (this._page === MS.Entertainment.Music.FindAlbumInfo.Page.selectAlbum) {
                        matchUsingRequestId = true;
                        query = {result: album}
                    }
                    else {
                        query = new MS.Entertainment.Data.Query.Music.AlbumSongs;
                        query.id = album.canonicalId
                    }
                    function loadPages(promise) {
                        return promise.then(function complete(query) {
                                var result = query.result;
                                if (result.tracks && result.tracks.count < result.total)
                                    return loadPages(query.loadNextChunk())
                            })
                    }
                    {};
                    if (query.execute) {
                        query.idType = album.serviceIdType;
                        this._queryWatcher.registerQuery(query);
                        if (this._tracksLoadingControl)
                            this._tracksLoadingControl.isBusy = true;
                        promise = loadPages(query.execute())
                    }
                    var result;
                    promise.then(function queryComplete() {
                        if (query.result.item)
                            result = query.result.item;
                        else
                            result = query.result;
                        if (!result)
                            return WinJS.Promise.as();
                        var tracks = result.tracks;
                        if (tracks) {
                            var trackArray = Array.isArray(tracks) ? tracks : null;
                            if (trackArray)
                                return WinJS.Promise.wrap(trackArray);
                            return MS.Entertainment.Data.List.listToArray(tracks)
                        }
                    }).done(function gotTrackArray(trackArray) {
                        var tracks = [];
                        if (trackArray && trackArray.length > 0)
                            if (this._isCloudMatch) {
                                var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                var hasSubscription = signInService.isSignedIn && signedInUserService.isSubscription;
                                trackArray.forEach(function filterTracks(track) {
                                    if ((track.isInMusicCatalog && MS.Entertainment.Utilities.isValidServiceId(track.actionableMediaId)) || track.canFreeStream || (hasSubscription && track.canSubscriptionStream))
                                        tracks.push(track)
                                })
                            }
                            else
                                tracks = trackArray;
                        MS.Entertainment.Utilities.forceFullLayout();
                        tracks.sort(function(track0, track1) {
                            return track0.trackNumber - track1.trackNumber
                        });
                        this.tracks = tracks;
                        if (matchUsingRequestId)
                            this._tracksMatch = this._matchTracksUsingRequestId();
                        else
                            this._tracksMatch = this._matchTracks();
                        this._updateState();
                        if (result) {
                            if (result.uniqueFileId)
                                album.uniqueFileId = result.uniqueFileId;
                            if (result.imageUri)
                                album.imageUri = result.imageUri
                        }
                        if (this._tracksLoadingControl)
                            this._tracksLoadingControl.isBusy = false
                    }.bind(this), function queryError(q) {
                        if (this._tracksLoadingControl)
                            this._tracksLoadingControl.isOffline = true
                    }.bind(this))
                }, _matchTracksUsingRequestId: function _matchTracksUsingRequestId() {
                    this._matchedTracks = [];
                    this._unmatchedTracks = [];
                    var i;
                    var originalTrack;
                    var matchedTrack;
                    var returnedTrack;
                    var tracksMap = [];
                    for (i = 0; i < this.tracks.length; i++) {
                        returnedTrack = this.tracks[i];
                        returnedTrack.isMatched = false;
                        if (returnedTrack.requestId)
                            tracksMap[returnedTrack.requestId] = returnedTrack
                    }
                    if (this._originalTracks)
                        for (i = 0; i < this._originalTracks.length; i++) {
                            originalTrack = this._originalTracks[i];
                            matchedTrack = tracksMap[originalTrack.libraryId.toString()];
                            if (matchedTrack) {
                                matchedTrack.isMatched = true;
                                matchedTrack.libraryId = originalTrack.libraryId;
                                this._matchedTracks.push(matchedTrack)
                            }
                            else
                                this._unmatchedTracks.push({
                                    originalTrack: originalTrack, availableTracks: this.tracks, selectedTrack: null
                                })
                        }
                    return (this._unmatchedTracks.length === 0)
                }, _matchTracks: function _matchTracks() {
                    this._matchedTracks = [];
                    this._unmatchedTracks = [];
                    var key = function key(trackName, trackNumber) {
                            return trackName.toLowerCase() + "/" + trackNumber
                        };
                    var i;
                    var tracksMap = [];
                    for (i = 0; i < this.tracks.length; i++) {
                        var track = this.tracks[i];
                        track.isMatched = false;
                        if (track.name)
                            tracksMap[key(track.name, track.trackNumber)] = track;
                        if (track.mainTitle)
                            tracksMap[key(track.mainTitle, track.trackNumber)] = track
                    }
                    if (this._originalTracks)
                        for (i = 0; i < this._originalTracks.length; i++) {
                            var originalTrack = this._originalTracks[i];
                            var matchedTrack = tracksMap[key(originalTrack.name, originalTrack.trackNumber)];
                            if (matchedTrack) {
                                matchedTrack.isMatched = true;
                                matchedTrack.libraryId = originalTrack.libraryId;
                                this._matchedTracks.push(matchedTrack)
                            }
                            else
                                this._unmatchedTracks.push({
                                    originalTrack: originalTrack, availableTracks: this.tracks, selectedTrack: null
                                })
                        }
                    return (this._unmatchedTracks.length === 0)
                }, _updateState: function _updateState() {
                    if (this._unloaded)
                        return;
                    var selectAlbum = (this._page === MS.Entertainment.Music.FindAlbumInfo.Page.selectAlbum);
                    var searchAlbums = (this._page === MS.Entertainment.Music.FindAlbumInfo.Page.searchAlbums);
                    var matchTracks = (this._page === MS.Entertainment.Music.FindAlbumInfo.Page.matchTracks);
                    var showSelectAlbumsPage;
                    var isAlbumSelected = !!this._selectedAlbum;
                    if (this._container) {
                        var titleStringId,
                            subTitleStringId;
                        switch (this._page) {
                            case MS.Entertainment.Music.FindAlbumInfo.Page.selectAlbum:
                                if (this._isCloudMatch) {
                                    titleStringId = String.id.IDS_FAI_ADD_ALBUM_CLOUD_TITLE;
                                    subTitleStringId = String.id.IDS_FAI_ADD_ALBUM_CLOUD_SUBTITLE
                                }
                                else
                                    titleStringId = (this._musicMarketplaceEnabled && this._storeSyncEnabled) ? String.id.IDS_FAI_CHOOSE_ALBUM_CLOUD_TITLE : String.id.IDS_FAI_CHOOSE_ALBUM_TITLE;
                                this._showElement(this._trackColumnHeader, isAlbumSelected);
                                this._showElement(this._trackList, isAlbumSelected);
                                break;
                            case MS.Entertainment.Music.FindAlbumInfo.Page.searchAlbums:
                                titleStringId = String.id.IDS_FAI_SEARCH_ALBUM_TITLE;
                                this._showElement(this._trackColumnHeader, isAlbumSelected);
                                this._showElement(this._trackList, isAlbumSelected);
                                break;
                            case MS.Entertainment.Music.FindAlbumInfo.Page.matchTracks:
                                titleStringId = String.id.IDS_FAI_MATCH_SONGS_TITLE;
                                if (this._isCloudMatch)
                                    subTitleStringId = String.id.IDS_FAI_MATCH_SONGS_SUBTITLE;
                                break;
                            default:
                                MS.Entertainment.Music.fail("Invalid PageType")
                        }
                        this._container.title = String.load(titleStringId);
                        if (subTitleStringId)
                            this.subTitle = String.load(subTitleStringId);
                        else
                            this.subTitle = String.empty;
                        var showBulkMatchLink = matchTracks && this._isCloudMatch && !this._cloudCollectionService.isCloudMatchOptedIn && !this._cloudCollectionService.isCloudMatchOptedOut;
                        this._showElement(this._container._searchAlbumsLink, selectAlbum && this._albumsLoadingControl && !this._albumsLoadingControl.isBusy);
                        this._showElement(this._container._bulkMatchLink, showBulkMatchLink);
                        this._showElement(this._container._backButton, this._pageBackStack.length > 0);
                        if (!this._albumList.selection || this._albumList.selection._selected._itemsCount <= 0) {
                            this.tracks = this._originalTracks;
                            this._trackColumnHeader.textContent = String.load(String.id.IDS_FAI_SONG_COLUMN_TITLE)
                        }
                        else {
                            this._showElement(this._noCloudMatchText, this.tracks);
                            this._trackColumnHeader.textContent = String.load(String.id.IDS_FAI_MATCH_COLUMN_TITLE)
                        }
                    }
                    this._finishButton.isEnabled = (this._tracksMatch && this._selectedAlbum) || matchTracks;
                    this._nextButton.isAvailable = this.tracks && this.tracks.length && !this._tracksMatch && this._selectedAlbum && (selectAlbum || searchAlbums);
                    this._finishButton.isAvailable = !this._nextButton.isAvailable;
                    showSelectAlbumsPage = selectAlbum || searchAlbums;
                    if (showSelectAlbumsPage)
                        this._albumList.dataSource = this._albums;
                    else
                        this._albumList.dataSource = null;
                    this._showElement(this._matchTracksPage, matchTracks);
                    this._showElement(this._selectAlbumsPages, showSelectAlbumsPage);
                    if (selectAlbum || searchAlbums) {
                        this._keywordsEdit.value = this._keywords;
                        this._showElement(this._searchIcon, searchAlbums);
                        this._showElement(this._keywordsEdit, searchAlbums);
                        if (searchAlbums) {
                            MS.Entertainment.Utilities.forceFullLayout();
                            WinJS.Utilities.addClass(this._albumList.domElement, "searchAlbums")
                        }
                        else
                            WinJS.Utilities.removeClass(this._albumList.domElement, "searchAlbums");
                        this._unmatchedTracksList.dataSource = null;
                        this._matchedTrackList.dataSource = null;
                        this._showElement(this._noCloudMatchText, this._selectedAlbum && this.tracks && this.tracks.length === 0)
                    }
                    else if (matchTracks) {
                        this._showElement(this._noAlbumsLabel, false);
                        this._showElement(this._matchedTrackList, this._matchedTracks && this._matchedTracks.length);
                        this._showElement(this._matchedTrackHeader, (this._matchedTracks && this._matchedTracks.length));
                        this._unmatchedTracksList.dataSource = this._unmatchedTracks;
                        this._matchedTrackList.dataSource = this._matchedTracks
                    }
                    if (this._setFocusOnPage) {
                        this._setFocusOnPage = false;
                        if (selectAlbum) {
                            this._albumList.focusFirstItemOnPageLoad = selectAlbum;
                            if (!(this._albums && this._albums.count > 0))
                                this._setFocusOnPage = true
                        }
                        else if (searchAlbums)
                            MS.Entertainment.UI.Framework.focusElement(this._keywordsEdit);
                        else if (matchTracks)
                            MS.Entertainment.UI.Framework.focusFirstInSubTree(this._unmatchedTracksList.domElement)
                    }
                }, _showElement: function _showElement(element, show) {
                    if (!element)
                        return;
                    if (element.domElement)
                        element = element.domElement;
                    if (show)
                        WinJS.Utilities.removeClass(element, "removeFromDisplay");
                    else
                        WinJS.Utilities.addClass(element, "removeFromDisplay")
                }, _onFinish: function _onFinish(event, pageContentDataObject) {
                    this._sendTelemetryPageAction(event.target, null, null, pageContentDataObject);
                    var albumMetadata = new Microsoft.Entertainment.Platform.AlbumMetadata;
                    var selectedAlbum = this._selectedAlbum;
                    albumMetadata.editedFields = Microsoft.Entertainment.Platform.FieldMask.empty_BIT_MASK;
                    if (selectedAlbum.name) {
                        albumMetadata.title = selectedAlbum.name;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.title_BIT_MASK
                    }
                    if (selectedAlbum.artistName) {
                        albumMetadata.artist = selectedAlbum.artistName;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.artist_BIT_MASK
                    }
                    if (selectedAlbum.primaryGenreName) {
                        albumMetadata.genre = selectedAlbum.primaryGenreName;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.genre_BIT_MASK
                    }
                    if (selectedAlbum.releaseDate) {
                        albumMetadata.releaseDate = MS.Entertainment.Formatters.formatDatabaseDataFromReleaseDate(selectedAlbum.releaseDate);
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.release_DATE_BIT_MASK
                    }
                    if (selectedAlbum.imageUri) {
                        albumMetadata.imageUrl = selectedAlbum.imageUri;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.image_URL_BIT_MASK
                    }
                    if (selectedAlbum.trackCount) {
                        albumMetadata.trackCount = selectedAlbum.trackCount;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.track_COUNT_BIT_MASK
                    }
                    if (selectedAlbum.hasSmartDJ !== undefined)
                        if (selectedAlbum.hasSmartDJ)
                            albumMetadata.canSmartDJ = Microsoft.Entertainment.Platform.SmartDJState.canSmartDJ;
                        else
                            albumMetadata.canSmartDJ = Microsoft.Entertainment.Platform.SmartDJState.cannotSmartDJ;
                    else
                        albumMetadata.canSmartDJ = Microsoft.Entertainment.Platform.SmartDJState.unknown;
                    albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.can_SMARTDJ_BIT_MASK;
                    if (selectedAlbum.hasSmartVJ !== undefined)
                        if (selectedAlbum.hasSmartVJ)
                            albumMetadata.canSmartVJ = Microsoft.Entertainment.Platform.SmartVJState.canSmartVJ;
                        else
                            albumMetadata.canSmartVJ = Microsoft.Entertainment.Platform.SmartVJState.cannotSmartVJ;
                    else
                        albumMetadata.canSmartVJ = Microsoft.Entertainment.Platform.SmartVJState.unknown;
                    albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.can_SMARTVJ_BIT_MASK;
                    if (selectedAlbum.label) {
                        albumMetadata.label = selectedAlbum.label;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.lable_BIT_MASK
                    }
                    if (MS.Entertainment.Utilities.isValidServiceId(selectedAlbum.canonicalId)) {
                        albumMetadata.albumBingId = selectedAlbum.canonicalId;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.album_BINGID_BIT_MASK
                    }
                    else
                        albumMetadata.albumBingId = MS.Entertainment.Utilities.EMPTY_GUID;
                    if (MS.Entertainment.Utilities.isValidServiceId(selectedAlbum.zuneId)) {
                        albumMetadata.albumMediaId = selectedAlbum.zuneId;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.album_MEDIAID_BIT_MASK
                    }
                    else
                        albumMetadata.albumMediaId = MS.Entertainment.Utilities.EMPTY_GUID;
                    if (selectedAlbum.artist && MS.Entertainment.Utilities.isValidServiceId(selectedAlbum.artist.canonicalId)) {
                        albumMetadata.artistBingId = selectedAlbum.artist.canonicalId;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.artist_BINGID_BIT_MASK
                    }
                    if (selectedAlbum.artist && MS.Entertainment.Utilities.isValidServiceId(selectedAlbum.artist.zuneId)) {
                        albumMetadata.artistMediaId = selectedAlbum.artist.zuneId;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.artist_MEDIAID_BIT_MASK
                    }
                    var i;
                    var tracks = [];
                    if (this._matchedTracks)
                        for (i = 0; i < this._matchedTracks.length; i++) {
                            var matchedTrack = this._matchedTracks[i];
                            if (MS.Entertainment.Utilities.isValidLibraryId(matchedTrack.libraryId)) {
                                var trackMetadata = new Microsoft.Entertainment.Platform.TrackMetadata;
                                trackMetadata.requestId = matchedTrack.libraryId;
                                this._populateTrackMetadata(trackMetadata, matchedTrack, selectedAlbum);
                                tracks.push(trackMetadata)
                            }
                        }
                    var matchTracksSelected = false;
                    if (this._unmatchedTracks)
                        for (i = 0; i < this._unmatchedTracks.length; i++) {
                            var unmatchedTrack = this._unmatchedTracks[i];
                            if (unmatchedTrack.selectedTrack && MS.Entertainment.Utilities.isValidLibraryId(unmatchedTrack.originalTrack.libraryId)) {
                                var trackMetadata = new Microsoft.Entertainment.Platform.TrackMetadata;
                                trackMetadata.requestId = unmatchedTrack.originalTrack.libraryId;
                                this._populateTrackMetadata(trackMetadata, unmatchedTrack.selectedTrack, selectedAlbum);
                                tracks.push(trackMetadata);
                                matchTracksSelected = true
                            }
                        }
                    if (tracks.length) {
                        albumMetadata.trackMetadata = tracks;
                        albumMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.tracks_BIT_MASK
                    }
                    this._sendTelemetryEvent("FindAlbumInfo_Finish");
                    var telemetryParameterArray = [];
                    if (this._lastXCorrelationId)
                        telemetryParameterArray.push({
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.XCorrelationId, parameterValue: this._lastXCorrelationId
                        });
                    if (selectedAlbum.hasZuneId)
                        telemetryParameterArray.push({
                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ZuneId, parameterValue: selectedAlbum.zuneId
                        });
                    switch (this._matchSource) {
                        case MS.Entertainment.Music.FindAlbumInfo.MatchSource.wmis:
                            this._sendTelemetryEvent("FindAlbumInfo_updateFromWMIS", telemetryParameterArray);
                            break;
                        case MS.Entertainment.Music.FindAlbumInfo.MatchSource.eds:
                            this._sendTelemetryEvent("FindAlbumInfo_updateFromEDS", telemetryParameterArray);
                            break;
                        case MS.Entertainment.Music.FindAlbumInfo.MatchSource.musicMatch:
                            this._sendTelemetryEvent("FindAlbumInfo_updateFromMusicMatch", telemetryParameterArray);
                            break
                    }
                    if (this._page === MS.Entertainment.Music.FindAlbumInfo.Page.selectAlbum)
                        this._sendTelemetryEvent("FindAlbumInfo_FinishFromFirstPage");
                    if (matchTracksSelected)
                        this._sendTelemetryEvent("FindAlbumInfo_MatchTracksSelected");
                    var albumId = this._originalAlbum.libraryId;
                    var requestType = Microsoft.Entertainment.Platform.RequestType.wmisalbumIDRequest;
                    var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                    mediaStore.albumProvider.updateAlbumMetadataAsync(albumMetadata, requestType, albumId).done(function onUpdateAlbumMetadataCompete(result) {
                        if (this._isCloudMatch || (this._cloudCollectionService.isCloudMatchOptedIn && selectedAlbum.hasZuneId))
                            mediaStore.mediaProvider.addMediaToCloudAsync(Microsoft.Entertainment.Queries.ObjectType.album, [result.libraryId]);
                        this.collectionUpdated = true;
                        this._container.hide()
                    }.bind(this), function onUpdateAlbumMetadataError(errorCode) {
                        if (errorCode && errorCode.number)
                            errorCode = errorCode.number;
                        MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_MEDIA_ERROR_CAPTION), errorCode)
                    }.bind(this))
                }, _populateTrackMetadata: function _populateTrackMetadata(trackMetadata, track, album) {
                    trackMetadata.editedFields = Microsoft.Entertainment.Platform.FieldMask.empty_BIT_MASK;
                    trackMetadata.discNumber = 1;
                    trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.disc_NUMBER_BIT_MASK;
                    if (track.name) {
                        trackMetadata.title = track.name;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.title_BIT_MASK
                    }
                    if (track.trackNumber) {
                        trackMetadata.trackNumber = track.trackNumber;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.track_NUMBER_BIT_MASK
                    }
                    if (track.releaseDate) {
                        trackMetadata.releaseDate = MS.Entertainment.Formatters.formatDatabaseDataFromReleaseDate(track.releaseDate);
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.release_DATE_BIT_MASK
                    }
                    else if (album.releaseDate) {
                        trackMetadata.releaseDate = MS.Entertainment.Formatters.formatDatabaseDataFromReleaseDate(album.releaseDate);
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.release_DATE_BIT_MASK
                    }
                    if (album.artistName) {
                        trackMetadata.artist = album.artistName;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.artist_BIT_MASK
                    }
                    if (album.primaryGenreName) {
                        trackMetadata.genre = album.primaryGenreName;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.genre_BIT_MASK
                    }
                    if (MS.Entertainment.Utilities.isValidServiceId(track.zuneId)) {
                        trackMetadata.trackMediaId = track.zuneId;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.track_MEDIAID_BIT_MASK
                    }
                    else {
                        trackMetadata.trackMediaId = MS.Entertainment.Utilities.EMPTY_GUID;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.track_MEDIAID_BIT_MASK
                    }
                    if (MS.Entertainment.Utilities.isValidServiceId(track.actionableMediaId)) {
                        trackMetadata.actionableMediaId = track.actionableMediaId;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.actionable_MEDIAID_BIT_MASK
                    }
                    else
                        trackMetadata.actionableMediaId = MS.Entertainment.Utilities.EMPTY_GUID;
                    if (MS.Entertainment.Utilities.isValidServiceId(album.zuneId)) {
                        trackMetadata.albumMediaId = album.zuneId;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.album_MEDIAID_BIT_MASK
                    }
                    else
                        trackMetadata.albumMediaId = MS.Entertainment.Utilities.EMPTY_GUID;
                    if (album.artist && MS.Entertainment.Utilities.isValidServiceId(album.artist.zuneId)) {
                        trackMetadata.artistMediaId = album.artist.zuneId;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.artist_MEDIAID_BIT_MASK
                    }
                    if (MS.Entertainment.Utilities.isValidServiceId(track.canonicalId)) {
                        trackMetadata.trackBingId = track.canonicalId;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.track_BINGID_BIT_MASK
                    }
                    else
                        trackMetadata.trackBingId = MS.Entertainment.Utilities.EMPTY_GUID;
                    if (MS.Entertainment.Utilities.isValidServiceId(album.canonicalId)) {
                        trackMetadata.albumBingId = album.canonicalId;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.album_BINGID_BIT_MASK
                    }
                    else
                        trackMetadata.albumBingId = MS.Entertainment.Utilities.EMPTY_GUID;
                    if (album.artist && MS.Entertainment.Utilities.isValidServiceId(album.artist.canonicalId)) {
                        trackMetadata.artistBingId = album.artist.canonicalId;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.artist_BINGID_BIT_MASK
                    }
                    if (album.uniqueFileId && track.uniqueFileId) {
                        var uniqueFileId = "{0};{1}".format(album.uniqueFileId, track.uniqueFileId);
                        trackMetadata.uniqueFileId = uniqueFileId;
                        trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.unique_FILEID_BIT_MASK
                    }
                    trackMetadata.unblockFromCloud = this._isCloudMatch;
                    trackMetadata.editedFields |= Microsoft.Entertainment.Platform.FieldMask.unblock_FROM_CLOUD_BIT_MASK
                }, _sendTelemetryEvent: function _sendTelemetryEvent(event, telemetryParameterArray) {
                    if (Array.isArray(telemetryParameterArray) && telemetryParameterArray.length > 0)
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(event, telemetryParameterArray);
                    else
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEvent(event)
                }, _sendTelemetryPageAction: function _sendTelemetryPageAction(domElement, targetPage, media, pageContentDataObject) {
                    var targetPageData;
                    if (targetPage !== this._currentPage)
                        targetPageData = targetPage ? {
                            uri: "findAlbumInfo/" + targetPage, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Popover
                        } : {
                            uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Unknown
                        };
                    if (!pageContentDataObject)
                        pageContentDataObject = {
                            domElement: domElement, itemPropertyBag: media
                        };
                    MS.Entertainment.Utilities.Telemetry.logPageAction(pageContentDataObject, {
                        uri: "findAlbumInfo/" + this._currentPage, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Popover
                    }, targetPageData)
                }, _createTelemetryActionData: function _createTelemetryActionData(areaName, automationId, slot) {
                    return {
                            slot: slot, areaName: areaName, contentId: automationId, contentCatalogId: MS.Entertainment.Utilities.Telemetry.ContentCatalogId.App, contentSourceId: MS.Entertainment.Utilities.Telemetry.ContentSourceId.App, contentTypeId: MS.Entertainment.Utilities.Telemetry.ContentTypeId.App, contentName: automationId
                        }
                }
        }, {
            tracks: null, subTitle: String.empty
        }, {
            Page: {
                selectAlbum: "selectAlbum", searchAlbums: "searchAlbums", matchTracks: "matchTracks"
            }, MatchMode: {
                    library: "library", cloud: "cloud"
                }, MatchSource: {
                    eds: "eds", wmis: "wmis", musicMatch: "musicMatch"
                }, _maxSearchTextLength: 100
        })});
    WinJS.Namespace.define("MS.Entertainment.Music", {FindAlbumInfoLoadingControl: MS.Entertainment.UI.Framework.defineUserControl("Components/Music/FindAlbumInfo.html#loadingControlTemplate", null, {
            initialize: function initialize() {
                this.bind("isBusy", function isBusyChanged(isBusy) {
                    if (this._loadingProgress)
                        this._loadingProgress.isBusy = isBusy
                }.bind(this));
                this.bind("isOffline", function isOfflineChanged(isOffline) {
                    this._loadingOffline.visibility = isOffline;
                    if (isOffline)
                        this.isBusy = false
                }.bind(this))
            }, reset: function reset() {
                    this.isBusy = false;
                    this.isOffline = false
                }
        }, {
            isBusy: false, isOffline: false
        })});
    WinJS.Namespace.define("MS.Entertainment.Music", {FindAlbumInfoDialog: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Dialog", "Components/Music/FindAlbumInfo.html#dialogTemplate", null, {
            backClickHandler: null, searchAlbumsClickHandler: null, bulkMatchClickHandler: null, onBackClick: function onBackClick(event) {
                    if (this.backClickHandler)
                        this.backClickHandler(event)
                }, onSearchAlbumsClick: function onSearchAlbumsClick(event) {
                    if (this.searchAlbumsClickHandler)
                        this.searchAlbumsClickHandler(event)
                }, onBulkMatchClick: function onBulkMatchClick(event) {
                    if (this.bulkMatchClickHandler)
                        this.bulkMatchClickHandler(event)
                }
        }, null, {
            _dialog: null, canShow: function canShow() {
                    return !this._dialog
                }, show: function show(album, mode) {
                    var options = {
                            width: "900px", height: "700px", cancelButtonIndex: 2, defaultButtonIndex: -1, title: String.load(String.id.IDS_FAI_CHOOSE_ALBUM_TITLE), userControl: "MS.Entertainment.Music.FindAlbumInfo", userControlOptions: {
                                    _originalAlbum: album, _matchMode: mode
                                }, persistOnNavigate: false
                        };
                    var showPromise;
                    if (!this._dialog) {
                        this._dialog = new MS.Entertainment.Music.FindAlbumInfoDialog(document.createElement("div"), options);
                        showPromise = this._dialog.show().then(function onDialogCompleted(result) {
                            this._dialog = null;
                            return result
                        }.bind(this), function onDialogError(error) {
                            this._dialog = null;
                            return WinJS.Promise.wrapError(error)
                        }.bind(this))
                    }
                    return WinJS.Promise.as(showPromise)
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {FindAlbumInfoAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function findAlbumInfoAction() {
            this.base()
        }, {
            executed: function executed(param) {
                var mediaItems = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                var options = mediaContext.options || {};
                if (!mediaItems)
                    mediaItems = mediaContext.mediaItem;
                MS.Entertainment.Data.List.getData(mediaItems, 0).then(function showFindAlbumInfoDialog(album) {
                    var mode = MS.Entertainment.Music.FindAlbumInfo.MatchMode.library;
                    var cloudCollectionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
                    if (cloudCollectionService.isEnabled && !cloudCollectionService.isV2Enabled && album.remoteTracksCount > 0) {
                        mode = MS.Entertainment.Music.FindAlbumInfo.MatchMode.cloud;
                        if (!MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                            return MS.Entertainment.Music.MusicBrandDialog.show(String.load(String.id.IDS_MUSIC_STREAMING_ADD_TO_MY_MUSIC_TITLE), String.load(String.id.IDS_MUSIC_STREAMING_SIGN_IN_DESC), null, [MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.signUp, MS.Entertainment.Music.MusicBrandDialog.dialogButtonIds.cancel])
                    }
                    return MS.Entertainment.Music.FindAlbumInfoDialog.show(album, mode)
                }.bind(this)).done(function findAlbumInfoDialogClosed(dialog) {
                    if (dialog && dialog.userControlInstance && dialog.userControlInstance.collectionUpdated && mediaContext)
                        mediaContext.dispatchEvent(MS.Entertainment.UI.AppBarActions.findAlbumInfo)
                }, function findAlbumInfoDialogError(error) {
                    MS.Entertainment.ViewModels.fail("FindAlbumInfo Dialog Failure: " + (error && error.message))
                })
            }, canExecute: function canExecute(parameter) {
                    return MS.Entertainment.Music.FindAlbumInfoDialog.canShow()
                }
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.findAlbumInfo, function() {
        return new MS.Entertainment.ViewModels.FindAlbumInfoAction
    })
})()
})();
/* >>>>>>/components/music/localgrovelinfo.js:20414 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Music");
    WinJS.Namespace.define("MS.Entertainment.Music", {localGrovelInfo: MS.Entertainment.UI.Framework.defineUserControl("Components/Music/LocalGrovelInfo.html#localGrovelInfoTemplate", function localGrovelInfo(element, options) {
            this._cancelButton = WinJS.Binding.as({
                title: String.load(String.id.IDS_CLOSE_BUTTON), isEnabled: true, isAvailable: true, execute: function onCancel() {
                        this._onCancel()
                    }.bind(this)
            });
            var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
            if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                this.addMusicDialogBodyText = String.load(String.id.IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_BODY_XBOX);
            else
                this.addMusicDialogBodyText = String.load(String.id.IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_BODY)
        }, {
            _cancelButton: null, _container: null, addMusicDialogBodyText: String.empty, initialize: function initialize(){}, setOverlay: function setOverlay(container) {
                    this._container = container;
                    container.buttons = [this._cancelButton];
                    this._updateState()
                }, _onCancel: function _onCancel() {
                    this._sendTelemetryEvent("LocalGrovelInfo_Cancel");
                    this._container.hide()
                }, _updateState: function _updateState() {
                    this.moreAboutLibrariesWebLink.domElement.href = MS.Entertainment.UI.FWLink.musicLibraries
                }, _showElement: function _showElement(element, show) {
                    if (element.domElement)
                        element = element.domElement;
                    if (show)
                        WinJS.Utilities.removeClass(element, "removeFromDisplay");
                    else
                        WinJS.Utilities.addClass(element, "removeFromDisplay")
                }, _sendTelemetryEvent: function _sendTelemetryEvent(event) {
                    MS.Entertainment.Utilities.Telemetry.logTelemetryEvent(event)
                }
        }, {}, {})});
    WinJS.Namespace.define("MS.Entertainment.Music", {localGrovelInfoDialog: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Dialog", "Components/Music/LocalGrovelInfo.html#dialogTemplate", null, {}, null, {show: function show() {
                var options = {
                        width: "900px", height: "500px", cancelButtonIndex: 0, defaultButtonIndex: 0, title: String.load(String.id.IDS_MUSIC_CLOUD_ADD_MUSIC_DIALOG_TITLE), userControl: "MS.Entertainment.Music.localGrovelInfo", userControlOptions: {}, persistOnNavigate: false
                    };
                var dialog = new MS.Entertainment.Music.localGrovelInfoDialog(document.createElement("div"), options);
                return dialog.show()
            }})});
    WinJS.Namespace.define("MS.Entertainment.Music", {ShowLocalGrovelInfoDialogAction: MS.Entertainment.deferredDerive(MS.Entertainment.UI.Actions.Action, null, {
            automationId: MS.Entertainment.UI.AutomationIds.showLocalGrovelInfoDialog, executed: function executed(param) {
                    if (WinJS.Utilities.getMember("Windows.Storage.StorageLibrary"))
                        return MS.Entertainment.UI.Controls.ManageFoldersDialog.show();
                    else
                        return MS.Entertainment.Music.localGrovelInfoDialog.show()
                }, canExecute: function canExecute(param) {
                    return true
                }
        })});
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.showLocalGrovelInfoDialog, function getLocalGrovelInfoDialogAction() {
        return new MS.Entertainment.Music.ShowLocalGrovelInfoDialogAction
    })
})()
})();
/* >>>>>>/controls/videoad.js:20474 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {VideoAd: MS.Entertainment.UI.Framework.defineUserControl("/Controls/VideoAd.html#videoAdTemplate", function videoAdConstructor(element, options) {
            this._eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
            this._playText = String.load(String.id.IDS_PLAY_BUTTON_VIDEO);
            this._pauseText = String.load(String.id.IDS_TRANSPORT_CONTROLS_PAUSE_BUTTON);
            this.adReasonClickUrl = MS.Entertainment.UI.FWLink.advertisementReason
        }, {
            adClickUrl: null, adReasonClickUrl: null, adVideoUrl: null, adClickCallback: null, adCompleted: false, adErrorOccurred: false, playbackStartedCallback: null, _mediaContext: null, _eventProvider: null, _container: null, _resumePlayOnThaw: false, _overlayTimer: null, _playbackCheckTimer: null, _uiSettings: new Windows.UI.ViewManagement.UISettings, _lastTimeDuration: null, _volumeService: null, _volumeControllerBindings: null, _signIn: null, _signedInUser: null, _signInBinding: null, _subscriptionBinding: null, _uiStateBinding: null, tagMuted: true, tagVolume: null, initialize: function initialize() {
                    this._updateState();
                    this.overlay.domElement.setAttribute("aria-label", String.load(String.id.IDS_MUSIC_STREAMING_AD_LABEL));
                    this._signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    this._signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    this._signInBinding = WinJS.Binding.bind(this._signIn, {isSignedIn: this._onUserStatusChanged.bind(this)});
                    this._subscriptionBinding = WinJS.Binding.bind(this._signedInUser, {isSubscription: this._onUserStatusChanged.bind(this)});
                    this._volumeService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.volumeService);
                    this._volumeControllerBindings = WinJS.Binding.bind(this._volumeService, {
                        volume: this._onVolumeValueStateChange.bind(this), mute: this._onVolumeValueStateChange.bind(this)
                    });
                    this._uiStateBinding = WinJS.Binding.bind(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {isSnapped: this._onSnappedChanged.bind(this)});
                    this._playbackCheckTimer = WinJS.Promise.timeout(MS.Entertainment.UI.Controls.VideoAd._playbackCheckTimeoutMS).then(function _playbackCheckTimeout() {
                        if (!this.playing)
                            this.onPlaybackError()
                    }.bind(this));
                    var appBarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                    this._mediaContext = appBarService.pushDefaultContext([]);
                    var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                    if (appBarControl)
                        appBarControl.hide()
                }, unload: function unload() {
                    if (this._playbackCheckTimer) {
                        this._playbackCheckTimer.cancel();
                        this._playbackCheckTimer = null
                    }
                    if (this._mediaContext) {
                        this._mediaContext.clearContext();
                        this._mediaContext = null
                    }
                    if (this.playbackStartedCallback)
                        this.playbackStartedCallback = null;
                    if (this._volumeControllerBindings) {
                        this._volumeControllerBindings.cancel();
                        this._volumeControllerBindings = null
                    }
                    if (this.video && this.video.src)
                        this.video.src = String.empty;
                    if (this._signInBinding) {
                        this._signInBinding.cancel();
                        this._signInBinding = null
                    }
                    if (this._subscriptionBinding) {
                        this._subscriptionBinding.cancel();
                        this._subscriptionBinding = null
                    }
                    if (this._uiStateBinding) {
                        this._uiStateBinding.cancel();
                        this._uiStateBinding = null
                    }
                    this._clearOverlayTimer();
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, freeze: function freeze() {
                    if (this._initialized) {
                        this._hideOverlay();
                        this._resumePlayOnThaw = !this.video.paused;
                        if (this._resumePlayOnThaw)
                            this.video.pause()
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                }, thaw: function thaw() {
                    MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this);
                    if (this._initialized) {
                        this._showOverlay();
                        if (this._resumePlayOnThaw)
                            this.video.play()
                    }
                }, setOverlay: function setOverlay(container) {
                    WinJS.Utilities.addClass(container.domElement, "videoAdContainer");
                    this._container = container
                }, onPointerDown: function onPointerDown() {
                    if (!this.overlay.visibility)
                        this._showOverlay();
                    else
                        this._hideOverlay()
                }, onKeyDown: function onKeyDown(e) {
                    if (e.keyCode === WinJS.Utilities.Key.escape)
                        this._hideOverlay();
                    else
                        this._showOverlay()
                }, onPointerMove: function onPointerMove(e) {
                    if (e.pointerType !== e.MSPOINTER_TYPE_TOUCH && e.pointerType !== "touch")
                        this._showOverlay()
                }, onPlayPauseClick: function onPlayPauseClick(event) {
                    if (this.video.paused)
                        this.video.play();
                    else
                        this.video.pause();
                    this._updateState();
                    this._showOverlay();
                    event.cancelBubble = true
                }, onPlaybackTimeUpdate: function onPlaybackTimeUpdate() {
                    this._updateState()
                }, onPlaybackPlaying: function onPlaybackPlaying() {
                    if (!this.playing) {
                        this.playing = true;
                        if (this._playbackCheckTimer) {
                            this._playbackCheckTimer.cancel();
                            this._playbackCheckTimer = null
                        }
                        if (this.playbackStartedCallback) {
                            this.playbackStartedCallback();
                            this.playbackStartedCallback = null
                        }
                        MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.videoAdStart);
                        this._eventProvider.traceVideo_Ad_Started(this.adVideoUrl, this.adClickUrl)
                    }
                    this._showOverlay()
                }, onPlaybackEnded: function onPlaybackEnded() {
                    this.adCompleted = true;
                    this._container.hide();
                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.videoAdComplete);
                    this._eventProvider.traceVideo_Ad_Completed(this.adVideoUrl, this.adClickUrl)
                }, onPlaybackError: function onPlaybackError() {
                    this.adCompleted = true;
                    this.adErrorOccurred = true;
                    this._container.hide();
                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.videoAdError);
                    this._eventProvider.traceVideo_Ad_Error(this.adVideoUrl, this.adClickUrl)
                }, onCloseClick: function onCloseClick() {
                    this.adCompleted = false;
                    this._container.hide();
                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.videoAdClosed);
                    this._eventProvider.traceVideo_Ad_Skipped(this.adVideoUrl, this.adClickUrl)
                }, onClickLearnMore: function onClickLearnMore() {
                    if (this.adClickCallback) {
                        MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.videoAdClickThru);
                        this.adClickCallback()
                    }
                }, onKeyDownLearnMore: function onKeyDownLearnMore(event) {
                    if (event.keyCode === WinJS.Utilities.Key.enter || event.keyCode === WinJS.Utilities.Key.space)
                        this.onClickLearnMore()
                }, onClickAdReason: function onClickAdReason() {
                    var adService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.adService);
                    adService.sendVideoAdReasonClickTelemetryInfo()
                }, onClickUpSell: function onClickUpSell() {
                    this.video.pause();
                    this._updateState();
                    this._hideOverlay();
                    this._eventProvider.traceVideo_Ad_UpSell(this.adVideoUrl, this.adClickUrl);
                    MS.Entertainment.Music.Freeplay.sendTelemetryEvent(MS.Entertainment.Music.Freeplay.Events.musicPassUpsellVideoAdInvoked);
                    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                    var action = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.subscriptionSignup);
                    action.automationId = MS.Entertainment.UI.AutomationIds.videoAdSubscriptionSignup;
                    action.execute().done(function signUpComplete() {
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        if (signedInUser.isSubscription) {
                            this.adCompleted = true;
                            this._container.hide()
                        }
                        else {
                            this._showOverlay();
                            MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(this.upsellButton.domElement, 0)
                        }
                    }.bind(this), function signUpError(){})
                }, _onUserStatusChanged: function _onUserStatusChanged() {
                    if (this._signIn.isSignedIn && this._signedInUser.isSubscription && this._initialized && !this._unloaded) {
                        this.adCompleted = true;
                        this._container.hide()
                    }
                }, _onSnappedChanged: function _onSnappedChanged(newVal) {
                    if (newVal) {
                        this.video.pause();
                        MS.Entertainment.Framework.ScriptUtilities.waitForSnappedIfNeeded(true).done(function unsnappedCompleted() {
                            this.video.play()
                        }.bind(this), function unsnappedError(error) {
                            MS.Entertainment.UI.Controls.assert(WinJS.Promise.isCanceledError(error), "VideoAd::_onSnappedChanged: Failed to wait to snapped. Error:" + error + ": " + error.message)
                        })
                    }
                }, _updateState: function _updateState() {
                    if (this.video.duration > 0) {
                        var secondsRemaining = Math.max(1, Math.ceil(this.video.duration - this.video.currentTime));
                        if (this._lastTimeDuration !== secondsRemaining) {
                            this.timeRemaining = String.load(String.id.IDS_VIDEO_AD_PROGRESS).format(secondsRemaining);
                            this.timeLabel.setAttribute("aria-label", this.timeRemaining);
                            this._lastTimeDuration = secondsRemaining
                        }
                    }
                    this.paused = this.video.paused;
                    this.playPauseButton.text = this.paused ? this._playText : this._pauseText
                }, _clearOverlayTimer: function _clearOverlayTimer() {
                    if (this._overlayTimer) {
                        window.clearTimeout(this._overlayTimer);
                        this._overlayTimer = null
                    }
                }, _hideOverlay: function _hideOverlay() {
                    this.overlay.visibility = false;
                    this._clearOverlayTimer()
                }, _showOverlay: function _showOverlay() {
                    this.overlay.visibility = true;
                    this._clearOverlayTimer();
                    this._overlayTimer = window.setTimeout(function() {
                        if (!this._unloaded) {
                            this.overlay.visibility = false;
                            this._overlayTimer = null
                        }
                    }.bind(this), this._uiSettings.messageDuration * 1000)
                }, _onVolumeValueStateChange: function _onVolumeValueStateChange() {
                    this.video.muted = this._volumeService.mute;
                    this.video.volume = this._volumeService.volume
                }
        }, {
            timeRemaining: null, playing: false, paused: false
        }, {
            showVideoAd: function showVideoAd(adVideoUrl, adClickUrl, adClickCallback, playbackStartedCallback) {
                if (!adVideoUrl)
                    throw"showVideoAd: adUrl parameter is mandatory";
                var volumeService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.volumeService);
                var videoAdOverlay = MS.Entertainment.UI.Shell.createOverlay("MS.Entertainment.UI.Controls.VideoAd", {
                        adVideoUrl: adVideoUrl, adClickUrl: adClickUrl, adClickCallback: adClickCallback, playbackStartedCallback: playbackStartedCallback, tagMuted: volumeService.mute, tagVolume: volumeService.volume
                    }, {
                        left: "0px", top: "0px", right: "0px", bottom: "0px"
                    });
                return videoAdOverlay.show()
            }, _playbackCheckTimeoutMS: 10000
        })})
})()
})();
/* >>>>>>/components/music/addtoaction.js:20704 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {AddTo: MS.Entertainment.deferredDerive(MS.Entertainment.UI.Actions.Action, function addTo() {
            this.base();
            this.maxFlyoutItems = MS.Entertainment.Utilities.isApp2 ? 6 : -1;
            Object.defineProperty(this, "referenceContainer", {
                get: this._getReferenceContainer, set: this._setReferenceContainer
            })
        }, {
            deferredSubActions: null, hasSubActions: true, subMenuIds: null, maxFlyoutItems: 0, _executedPromise: null, _populateSubMenuPromise: null, _referenceContainer: null, _lastPlaylistRevisionNum: -1, _getReferenceContainer: function _getReferenceContainer() {
                    return this._referenceContainer
                }, _setReferenceContainer: function _setReferenceContainer(value) {
                    if (this._referenceContainer !== value) {
                        this._referenceContainer = value;
                        this._updateReferenceContainer()
                    }
                }, executed: function executed(param, referenceElement) {
                    if (this._executedPromise)
                        return WinJS.Promise.unwrap(this._executedPromise);
                    var mediaItem = this.parameter.mediaItem;
                    if (!mediaItem) {
                        var appToolbarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                        mediaItem = appToolbarService.currentMediaContext.mediaItem
                    }
                    if (referenceElement)
                        MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: referenceElement}, {
                            uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                        });
                    if (this._hasPlaylistQueryRefreshed()) {
                        var populateSubMenuPromise = WinJS.Binding.unwrap(this._populateSubMenuPromise);
                        if (populateSubMenuPromise) {
                            populateSubMenuPromise.cancel();
                            populateSubMenuPromise = null
                        }
                        this._populateSubMenuPromise = this.populateSubMenu(this.subMenuIds)
                    }
                    MS.Entertainment.UI.Actions.assert(this._populateSubMenuPromise, "execute called before subActions were set");
                    var populateSubMenuPromise = WinJS.Binding.unwrap(this._populateSubMenuPromise).then(function updateList() {
                            if (this.deferredSubActions) {
                                this.subActions = this.deferredSubActions;
                                this.deferredSubActions = null
                            }
                        }.bind(this));
                    if (MS.Entertainment.Utilities.isMusicApp2)
                        this._executedPromise = populateSubMenuPromise.then(function populated() {
                            if (this.subActions.length === 0) {
                                var closeAction = MS.Entertainment.ViewModels.SmartAppbarActions.createCloseCommandingPopoverAction();
                                this.subActions.push(closeAction)
                            }
                            for (var i = 0; i < this.subActions.length; i++) {
                                if (!this.subActions[i].skipOnCompletedHandler)
                                    this.subActions[i].action.onComplete = MS.Entertainment.UI.Actions.AddTo.onCompleteHandler;
                                if (this.parameter.completeAction)
                                    this.subActions[i].action.parameter.completeAction = this.parameter.completeAction
                            }
                            var mediaItemTitle = mediaItem.primaryText || mediaItem.title || mediaItem.name;
                            var mediaItemSubTitle = String.empty;
                            if (this.subActions[0].action.automationId === MS.Entertainment.UI.AutomationIds.appBarCloseCommandingPopover)
                                mediaItemSubTitle = String.load(String.id.IDS_MUSIC2_PANEL_ADD_ERROR);
                            else if (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrack(mediaItem))
                                mediaItemSubTitle = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_MUSIC_ADD_SONG_TO_LIST_TITLE_PLURAL, 1);
                            else if (MS.Entertainment.Platform.PlaybackHelpers.isMusicAlbum(mediaItem))
                                mediaItemSubTitle = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_MUSIC_ADD_ALBUM_TO_LIST_TITLE_PLURAL, 1);
                            else
                                mediaItemSubTitle = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_MUSIC_ADD_SONG_TO_LIST_TITLE_PLURAL, 2);
                            var contextualData = {
                                    title: mediaItemTitle, subTitle: mediaItemSubTitle, commands: this.subActions
                                };
                            return MS.Entertainment.UI.Controls.CommandingPopOver.showContextualCommands(contextualData)
                        }.bind(this), function onError(error) {
                            MS.Entertainment.UI.Actions.fail("populateSubMenuItemsPromise failed: " + error && error.message)
                        });
                    else {
                        for (var i = 0; this.subActions && i < this.subActions.length; i++)
                            if (this.subActions[i])
                                this.subActions[i].action.onExecuting = MS.Entertainment.UI.Actions.AddTo.onExecutingHandler;
                        this._executedPromise = populateSubMenuPromise
                    }
                    return WinJS.Binding.unwrap(this._executedPromise).then(function onAddToCompleted() {
                            this._executedPromise = null
                        }.bind(this))
                }, canExecute: function canExecute(param) {
                    return true
                }, setSubActions: function setSubActions(subMenuIds) {
                    var populateSubMenuPromise = WinJS.Binding.unwrap(this._populateSubMenuPromise);
                    if (populateSubMenuPromise) {
                        populateSubMenuPromise.cancel();
                        populateSubMenuPromise = null;
                        this._populateSubMenuPromise = null
                    }
                    this.subMenuIds = subMenuIds;
                    this._populateSubMenuPromise = this.populateSubMenu(subMenuIds)
                }, populateSubMenu: function populateSubMenu(subMenuIds) {
                    var mediaItems = this.parameter.mediaItem;
                    var param = this.parameter;
                    if (!mediaItems) {
                        var appToolbarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                        mediaItems = appToolbarService.currentMediaContext.mediaItem
                    }
                    var initializeMediaItemsPromise = WinJS.Promise.as();
                    if (MS.Entertainment.Data.MainQuery.isQuery(mediaItems))
                        initializeMediaItemsPromise = mediaItems.getItems().then(function gotItems(items) {
                            mediaItems = items
                        }, function queryFailed(error) {
                            MS.Entertainment.UI.assert(WinJS.Promise.isCanceledError(error), "Media query failed: " + (error && error.message));
                            mediaItems = null
                        });
                    return initializeMediaItemsPromise.then(MS.Entertainment.UI.Actions.AddTo.getRecentPlaylists).then(function gotRecentPlaylists() {
                            return mediaItems ? MS.Entertainment.Data.List.listToArray(mediaItems) : WinJS.Promise.as([])
                        }).then(function populateSubMenu(mediaItemArray) {
                            var subItems = [];
                            var actionsToAdd = {};
                            var playlistLibraryId = -1;
                            var addOtherPlaylistAction = false;
                            var recentPlaylists;
                            var isPopoverOpen;
                            var addSeperators;
                            this._lastPlaylistRevisionNum = -1;
                            if (mediaItemArray.length > 0 && mediaItemArray[0])
                                if (mediaItemArray[0].mediaType === Microsoft.Entertainment.Queries.ObjectType.playlist)
                                    playlistLibraryId = mediaItemArray[0].libraryId;
                                else if (mediaItemArray[0].mediaType === Microsoft.Entertainment.Queries.ObjectType.track && mediaItemArray[0].playlistItemId >= 0)
                                    playlistLibraryId = mediaItemArray[0].playlistId;
                            addSeperators = MS.Entertainment.Utilities.isMusicApp1;
                            subMenuIds.forEach(function addId(id) {
                                MS.Entertainment.UI.assert(id, "Missing action Id");
                                actionsToAdd[id] = true
                            });
                            if (actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToCloud])
                                subItems.push(MS.Entertainment.UI.Actions.AddTo.createAddToCloud(mediaItems));
                            if (actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToMyMusic])
                                subItems.push(MS.Entertainment.UI.Actions.AddTo.createAddToMyMusicAction(mediaItems));
                            if (subMenuIds.length > 1 && subItems.length > 0)
                                if (subItems.length > 0 && addSeperators)
                                    subItems.push(MS.Entertainment.UI.Controls.ActionList.getSeparatorAction());
                            if (actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying]) {
                                MS.Entertainment.UI.assert(!actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addLocalArtistToNowPlaying], "Conflicting action added to subMenu");
                                MS.Entertainment.UI.assert(!actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addMarketplaceArtistToNowPlaying], "Conflicting action added to subMenu");
                                subItems.push(MS.Entertainment.UI.Actions.AddTo.createAddToNowPlayingAction(mediaItems))
                            }
                            if (actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addLocalArtistToNowPlaying]) {
                                MS.Entertainment.UI.assert(!actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying], "Conflicting action added to subMenu");
                                MS.Entertainment.UI.assert(!actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addMarketplaceArtistToNowPlaying], "Conflicting action added to subMenu");
                                subItems.push(MS.Entertainment.UI.Actions.AddTo.createAddLocalArtistToNowPlayingAction(mediaItems))
                            }
                            if (actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addMarketplaceArtistToNowPlaying]) {
                                MS.Entertainment.UI.assert(!actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToNowPlaying], "Conflicting action added to subMenu");
                                MS.Entertainment.UI.assert(!actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addLocalArtistToNowPlaying], "Conflicting action added to subMenu");
                                var addMarketplaceArtistToNowPlayingAction = MS.Entertainment.UI.Actions.AddTo.createAddMarketplaceArtistToNowPlayingAction(mediaItems);
                                addMarketplaceArtistToNowPlayingAction.action.parameter.shouldUseTopSongsForArtistAddTo = param.shouldUseTopSongsForArtistAddTo;
                                subItems.push(addMarketplaceArtistToNowPlayingAction)
                            }
                            if (actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addToPlaylist] || actionsToAdd[MS.Entertainment.UI.Actions.AddTo.subMenuIds.addTrackToPlaylist]) {
                                var createNewPlaylist = MS.Entertainment.UI.Actions.Playlists.getCreatePlaylistFlyoutAction(mediaItems, function disableCommandingPopover() {
                                        MS.Entertainment.UI.Actions.AddTo.onCompleteHandler()
                                    });
                                createNewPlaylist.action.parameter.shouldUseTopSongsForArtistAddTo = param.shouldUseTopSongsForArtistAddTo;
                                createNewPlaylist.skipOnCompletedHandler = true;
                                if (MS.Entertainment.Utilities.isMusicApp2) {
                                    createNewPlaylist.action.title = String.load(String.id.IDS_MUSIC2_ADD_TO_NEW_PLAYLIST_BUTTON_VUI_GUI);
                                    createNewPlaylist.action.voicePhraseStringId = String.id.IDS_MUSIC2_ADD_TO_NEW_PLAYLIST_BUTTON_VUI_ALM;
                                    createNewPlaylist.action.voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_ADD_TO_NEW_PLAYLIST_BUTTON_VUI_PRON;
                                    createNewPlaylist.action.icon = WinJS.UI.AppBarIcon.add
                                }
                                subItems.push(createNewPlaylist);
                                recentPlaylists = MS.Entertainment.UI.Actions.AddTo.recentPlaylists || [];
                                isPopoverOpen = MS.Entertainment.UI.Controls.PopOver.isPopoverOpen || MS.Entertainment.UI.Controls.NavigationPopover.isPopoverOpen;
                                this._lastPlaylistRevisionNum = MS.Entertainment.UI.Actions.AddTo.playlistQueryRevisionNum;
                                for (var i = 0; i < recentPlaylists.length; i++) {
                                    var playlist = recentPlaylists[i];
                                    if (!isPopoverOpen || playlist.libraryId !== playlistLibraryId) {
                                        var addToPlaylist = MS.Entertainment.UI.Actions.Playlists.getAddToPlaylistMenuAction(playlist, playlist.name, null, mediaItems);
                                        addToPlaylist.action.parameter.shouldUseTopSongsForArtistAddTo = param.shouldUseTopSongsForArtistAddTo;
                                        subItems.push(addToPlaylist)
                                    }
                                }
                                if (MS.Entertainment.UI.Actions.AddTo.recentPlaylistsGreaterThanMax)
                                    if (MS.Entertainment.Utilities.isMusicApp2)
                                        addOtherPlaylistAction = true;
                                    else {
                                        var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                                        addOtherPlaylistAction = !uiStateService.isSnapped
                                    }
                                if (this.maxFlyoutItems > 0) {
                                    var startValue = this.maxFlyoutItems;
                                    var itemsToRemove;
                                    if (addOtherPlaylistAction)
                                        startValue--;
                                    itemsToRemove = subItems.length - startValue;
                                    subItems.splice(startValue, itemsToRemove)
                                }
                                if (addOtherPlaylistAction) {
                                    var anotherPlaylistAction = MS.Entertainment.UI.Actions.AddTo.createAnotherPlaylistAction(mediaItems);
                                    anotherPlaylistAction.action.parameter = {
                                        mediaItem: mediaItems, shouldUseTopSongsForArtistAddTo: param.shouldUseTopSongsForArtistAddTo
                                    };
                                    subItems.push(anotherPlaylistAction)
                                }
                            }
                            this.deferredSubActions = subItems;
                            this._updateReferenceContainer()
                        }.bind(this))
                }, _hasPlaylistQueryRefreshed: function _hasPlaylistQueryRefreshed() {
                    return (this._lastPlaylistRevisionNum > 0 && this._lastPlaylistRevisionNum !== MS.Entertainment.UI.Actions.AddTo.playlistQueryRevisionNum)
                }, _updateReferenceContainer: function _updateReferenceContainer() {
                    if (this.subActions)
                        this.subActions.forEach(function(subItem) {
                            if (subItem && subItem.action)
                                subItem.action.referenceContainer = this.referenceContainer
                        }, this)
                }
        }, {
            createAddToMyMusicAction: function createAddToMyMusicAction(mediaItems) {
                var addToMyMusicAction = MS.Entertainment.ViewModels.SmartAppbarActions.createAddToMyMusicAppbarAction();
                addToMyMusicAction.action.parameter = addToMyMusicAction.action.parameter || {};
                addToMyMusicAction.action.parameter.mediaItem = mediaItems;
                addToMyMusicAction.action.parameter.isFlyoutAction = true;
                return addToMyMusicAction
            }, createAddToNowPlayingAction: function createAddToNowPlayingAction(mediaItems) {
                    var addToNowPlayingAction = MS.Entertainment.ViewModels.SmartAppbarActions.createAddToNowPlayingAppbarAction();
                    addToNowPlayingAction.action.parameter = addToNowPlayingAction.action.parameter || {};
                    addToNowPlayingAction.action.parameter.mediaItem = mediaItems;
                    addToNowPlayingAction.action.parameter.isFlyoutAction = true;
                    return addToNowPlayingAction
                }, createAddLocalArtistToNowPlayingAction: function createAddLocalArtistToNowPlayingAction(mediaItems) {
                    var addToNowPlayingAction = MS.Entertainment.ViewModels.SmartAppbarActions.createAddToNowPlayingAppbarAction(MS.Entertainment.UI.AppBarActions.addLocalArtistToNowPlaying);
                    addToNowPlayingAction.action.parameter = addToNowPlayingAction.action.parameter || {};
                    addToNowPlayingAction.action.parameter.mediaItem = mediaItems;
                    addToNowPlayingAction.action.parameter.isFlyoutAction = true;
                    return addToNowPlayingAction
                }, createAddMarketplaceArtistToNowPlayingAction: function createAddMarketplaceArtistToNowPlayingAction(mediaItems) {
                    var addToNowPlayingAction = MS.Entertainment.ViewModels.SmartAppbarActions.createAddToNowPlayingAppbarAction(MS.Entertainment.UI.AppBarActions.addMarketplaceArtistToNowPlaying);
                    addToNowPlayingAction.action.parameter = addToNowPlayingAction.action.parameter || {};
                    addToNowPlayingAction.action.parameter.mediaItem = mediaItems;
                    addToNowPlayingAction.action.parameter.isFlyoutAction = true;
                    return addToNowPlayingAction
                }, createAddToCloud: function createAddToCloud(mediaItems) {
                    var addToCloudAction = MS.Entertainment.ViewModels.SmartAppbarActions.createAddToCloudAppbarAction();
                    addToCloudAction.action.parameter = addToCloudAction.action.parameter || {};
                    addToCloudAction.action.parameter.mediaItem = mediaItems;
                    return addToCloudAction
                }, createAnotherPlaylistAction: function createAnotherPlaylistAction(mediaItems) {
                    var pickPlaylistAction;
                    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                    if (MS.Entertainment.Utilities.isMusicApp1) {
                        pickPlaylistAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.pickPlaylist);
                        pickPlaylistAction.title = String.load(String.id.IDS_MUSIC_ADD_TO_LIST_PLAYLIST_ACTION)
                    }
                    else {
                        pickPlaylistAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.selectPlaylist);
                        pickPlaylistAction.action = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.addToPlaylist);
                        pickPlaylistAction.galleryClass = "addToActionGallery";
                        pickPlaylistAction.action.callback = function navigateBack() {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            navigationService.navigateBack()
                        };
                        pickPlaylistAction.action.canExecute = function alwaysEnabled() {
                            return true
                        };
                        pickPlaylistAction.title = String.load(String.id.IDS_MUSIC2_ADD_TO_ANOTHER_PLAYLIST_BUTTON_VUI_GUI);
                        pickPlaylistAction.voicePhraseStringId = String.id.IDS_MUSIC2_ADD_TO_ANOTHER_PLAYLIST_BUTTON_VUI_ALM;
                        pickPlaylistAction.voicePhoneticPhraseStringId = String.id.IDS_MUSIC2_ADD_TO_ANOTHER_PLAYLIST_BUTTON_VUI_PRON
                    }
                    pickPlaylistAction.automationId = MS.Entertainment.UI.AutomationIds.flyoutOtherPlaylist;
                    pickPlaylistAction.icon = MS.Entertainment.UI.Icon.addToPlaylist;
                    pickPlaylistAction.id = MS.Entertainment.UI.AppBarActions.addToOtherPlaylist;
                    pickPlaylistAction.parameter = {mediaItem: mediaItems};
                    return {action: pickPlaylistAction}
                }, onExecutingHandler: function onExecutingHandler() {
                    var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                    if (appBarControl)
                        appBarControl.hide();
                    return WinJS.Promise.timeout()
                }, onCompleteHandler: function onCompleteHandler() {
                    if (MS.Entertainment.UI.Controls.CommandingPopOver) {
                        var addingLabel = String.load(String.id.IDS_MUSIC2_PANEL_ADD_ADDING);
                        MS.Entertainment.UI.Controls.CommandingPopOver.disableCurrentCommandingPopover(addingLabel)
                    }
                }, unload: function unload() {
                    MS.Entertainment.UI.Actions.AddTo.recentPlaylists = [];
                    if (MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryPromise) {
                        MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryPromise.cancel();
                        MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryPromise = null
                    }
                    if (MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryResults)
                        MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryResults = null
                }, getRecentPlaylists: function getRecentPlaylists() {
                    if (MS.Entertainment.UI.Actions.AddTo.recentPlaylists)
                        return WinJS.Promise.wrap(MS.Entertainment.UI.Actions.AddTo.recentPlaylists);
                    if (MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryPromise)
                        return MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryPromise;
                    var recentPlaylistQuery = new MS.Entertainment.Data.Query.libraryPlaylists;
                    recentPlaylistQuery.isLive = true;
                    recentPlaylistQuery.sort = Microsoft.Entertainment.Queries.PlaylistsSortBy.dateEditedDescending;
                    recentPlaylistQuery.chunkSize = MS.Entertainment.UI.Actions.AddTo.maxRecentPlaylists * 2;
                    recentPlaylistQuery.chunked = false;
                    MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryPromise = recentPlaylistQuery.getItems().then(function getResults(items) {
                        MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryResults = items;
                        var handlePlaylistListNotifications = MS.Entertainment.UI.Actions.AddTo._handleRecentPlaylistsListNotifications;
                        var handlePlaylistsChangedNotifications = MS.Entertainment.UI.Actions.AddTo._handleRecentPlaylistsDataChangeNotifications;
                        MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryResults.setNotificationHandler(new MS.Entertainment.UI.Actions.Playlists.playlistDataNotificationHandler(handlePlaylistListNotifications, handlePlaylistsChangedNotifications));
                        return MS.Entertainment.UI.Actions.AddTo._refreshRecentPlaylistArray()
                    }, function onError(error) {
                        if (!error || error.message !== "Canceled")
                            MS.Entertainment.UI.fail("library playlist query failed: " + (error && error.message));
                        MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryPromise = null;
                        return []
                    });
                    return WinJS.Promise.as(MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryPromise)
                }, playlistQueryRevisionNum: 0, recentPlaylists: null, recentPlaylistQueryPromise: null, recentPlaylistQueryResults: null, recentPlaylistsGreaterThanMax: false, maxRecentPlaylists: 4, _handleRecentPlaylistsListNotifications: function _handleRecentPlaylistsListNotifications(indices) {
                    for (var i = 0; i < indices.length; i++)
                        if (indices[i] < MS.Entertainment.UI.Actions.AddTo.maxRecentPlaylists) {
                            WinJS.Promise.timeout(50).done(function delay() {
                                MS.Entertainment.UI.Actions.AddTo._refreshRecentPlaylistArray()
                            });
                            return
                        }
                }, _handleRecentPlaylistsDataChangeNotifications: function _handleRecentPlaylistsDataChangeNotifications(changedItems) {
                    for (var i = 0; i < changedItems.length; i++)
                        for (var j = 0; j < MS.Entertainment.UI.Actions.AddTo.recentPlaylists.length; j++)
                            if (MS.Entertainment.UI.Actions.AddTo.recentPlaylists[j] && changedItems[i] && MS.Entertainment.UI.Actions.AddTo.recentPlaylists[j].libraryId === changedItems[i].data.libraryId && MS.Entertainment.UI.Actions.AddTo.recentPlaylists[j].name !== changedItems[i].data.name)
                                MS.Entertainment.UI.Actions.AddTo._refreshRecentPlaylistArray()
                }, _refreshRecentPlaylistArray: function _refreshRecentPlaylistArray() {
                    if (!MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryResults)
                        return WinJS.Promise.wrap();
                    MS.Entertainment.UI.Actions.AddTo.recentPlaylistsGreaterThanMax = MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryResults.count > MS.Entertainment.UI.Actions.AddTo.maxRecentPlaylists;
                    return MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryResults.toArrayAll(0, MS.Entertainment.UI.Actions.AddTo.maxRecentPlaylists).then(function gotArray(playlistItems) {
                            MS.Entertainment.UI.Actions.AddTo.recentPlaylists = playlistItems;
                            MS.Entertainment.UI.Actions.AddTo.playlistQueryRevisionNum++;
                            MS.Entertainment.UI.Actions.AddTo.recentPlaylistQueryPromise = null;
                            return MS.Entertainment.UI.Actions.AddTo.recentPlaylists
                        }, function onError(error) {
                            var message = error && error.message;
                            MS.Entertainment.UI.fail("toArray failed: " + message);
                            return []
                        })
                }, subMenuIds: {
                    addToMyMusic: "addToMyMusic", addTrackToPlaylist: "addTrackToPlaylist", addToPlaylist: "addToPlaylist", addToNowPlaying: "addToNowPlaying", addLocalArtistToNowPlaying: "addLocalArtistToNowPlaying", addMarketplaceArtistToNowPlaying: "addMarketplaceArtistToNowPlaying", addToCloud: "addToCloud"
                }
        })});
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.addTo, function() {
        return new MS.Entertainment.UI.Actions.AddTo
    })
})()
})();
/* >>>>>>/viewmodels/music1/usagerightrestrictions.js:21055 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var UsageRightRestriction = (function() {
                    function UsageRightRestriction(name) {
                        this._name = name
                    }
                    Object.defineProperty(UsageRightRestriction.prototype, "name", {
                        get: function() {
                            return this._name
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UsageRightRestriction.prototype, "title", {
                        get: function() {
                            return this.titleStringId ? String.load(this.titleStringId) : String.empty
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UsageRightRestriction.prototype, "description", {
                        get: function() {
                            return this.descriptionStringId ? String.load(this.descriptionStringId) : String.empty
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UsageRightRestriction.prototype, "actionIcon", {
                        get: function() {
                            return this._actionIcon
                        }, set: function(value) {
                                this._actionIcon = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UsageRightRestriction.prototype, "actionId", {
                        get: function() {
                            return this._actionId
                        }, set: function(value) {
                                this._actionId = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UsageRightRestriction.prototype, "actionOptions", {
                        get: function() {
                            return this._actionOptions || {}
                        }, set: function(value) {
                                this._actionOptions = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UsageRightRestriction.prototype, "isUnavailable", {
                        get: function() {
                            return this._isUnavailable
                        }, set: function(value) {
                                this._isUnavailable = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(UsageRightRestriction.prototype, "isUnplayable", {
                        get: function() {
                            return this._isUnplayable
                        }, set: function(value) {
                                this._isUnplayable = value
                            }, enumerable: true, configurable: true
                    });
                    UsageRightRestriction.prototype.getActionOptions = function(mediaItem) {
                        var result = {parameter: {}};
                        WinJS.UI.setOptions(result, this.actionOptions);
                        if (this.actionParameterMediaItemPropertyPath)
                            result.parameter = Entertainment.Utilities.setFromPropertyPath(result.parameter, this.actionParameterMediaItemPropertyPath, mediaItem);
                        else if (this.actionParameterMediaItemPropertyPath === String.empty)
                            result.parameter = mediaItem;
                        return result
                    };
                    UsageRightRestriction.prototype.getLeastRestrictive = function(mediaItem, rights) {
                        return null
                    };
                    return UsageRightRestriction
                })();
            ViewModels.UsageRightRestriction = UsageRightRestriction;
            var MediaUsageRightRestriction = (function(_super) {
                    __extends(MediaUsageRightRestriction, _super);
                    function MediaUsageRightRestriction(options) {
                        _super.call(this, options.name);
                        this.mediaState = options.mediaState;
                        this.rightsState = options.rightsState;
                        this.titleStringId = options.titleStringId;
                        this.descriptionStringId = options.descriptionStringId;
                        this.actionIcon = options.actionIcon || Entertainment.UI.Icon.inlineNotification;
                        this.actionId = options.actionId;
                        this.actionOptions = options.actionOptions;
                        this.actionParameterMediaItemPropertyPath = options.actionParameterMediaItemPropertyPath;
                        this.isUnavailable = options.isUnavailable;
                        this.isUnplayable = options.isUnplayable
                    }
                    Object.defineProperty(MediaUsageRightRestriction.prototype, "mediaState", {
                        get: function() {
                            return this._mediaState
                        }, set: function(value) {
                                this._mediaState = value
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(MediaUsageRightRestriction.prototype, "rightsState", {
                        get: function() {
                            return this._rightsState
                        }, set: function(value) {
                                this._rightsState = value
                            }, enumerable: true, configurable: true
                    });
                    MediaUsageRightRestriction.prototype.getLeastRestrictive = function(mediaItem, rights) {
                        var mediaItemStateMet = (!!this.mediaState && !!mediaItem) || (!this.mediaState);
                        var rightsStateMet = (!!this.rightsState && !!rights) || (!this.rightsState);
                        var mediaState = this.mediaState || [];
                        if (!Array.isArray(mediaState))
                            mediaState = [mediaState];
                        var rightsState = this.rightsState || [];
                        if (!Array.isArray(rightsState))
                            rightsState = [rightsState];
                        var currentMediaStateMet = false;
                        for (var i = 0; i < mediaState.length && mediaItemStateMet && rightsStateMet && !currentMediaStateMet; i++) {
                            var currentMediaState = mediaState[i];
                            currentMediaStateMet = !!currentMediaState;
                            if (currentMediaStateMet)
                                for (var key in currentMediaState)
                                    if (!!mediaItem[key] !== currentMediaState[key]) {
                                        currentMediaStateMet = false;
                                        break
                                    }
                        }
                        mediaItemStateMet = mediaItemStateMet && (currentMediaStateMet || mediaState.length === 0);
                        var currentRightsMet = false;
                        for (var j = 0; j < rightsState.length && mediaItemStateMet && rightsStateMet && !currentRightsMet; j++) {
                            var currentRightsState = rightsState[j];
                            var currentRightsMet = !!currentRightsState;
                            if (currentRightsMet)
                                for (var key in currentRightsState)
                                    if (!!rights[key] !== currentRightsState[key]) {
                                        currentRightsMet = false;
                                        break
                                    }
                        }
                        rightsStateMet = rightsStateMet && (currentRightsMet || rightsState.length === 0);
                        return mediaItemStateMet && rightsStateMet ? this : null
                    };
                    return MediaUsageRightRestriction
                })(UsageRightRestriction);
            ViewModels.MediaUsageRightRestriction = MediaUsageRightRestriction;
            var UsageRightRestrictionCollection = (function(_super) {
                    __extends(UsageRightRestrictionCollection, _super);
                    function UsageRightRestrictionCollection(name) {
                        _super.call(this, name);
                        this.clear()
                    }
                    UsageRightRestrictionCollection.prototype.addRightsCondition = function(condition) {
                        if (!condition) {
                            ViewModels.fail("Adding a null right condition");
                            return condition
                        }
                        if (!condition.name) {
                            ViewModels.fail("Adding a right condition with no name");
                            return condition
                        }
                        var name = condition.name;
                        if (!(name in this._rights)) {
                            this._rights[name] = condition;
                            this._rightsPriority.push(condition)
                        }
                        else
                            ViewModels.fail("Adding a right condition that already exists. Name: " + name);
                        return condition
                    };
                    UsageRightRestrictionCollection.prototype.getRightsCondition = function(name) {
                        return this._rights[name]
                    };
                    UsageRightRestrictionCollection.prototype.clear = function() {
                        this._rights = {};
                        this._rightsPriority = []
                    };
                    UsageRightRestrictionCollection.prototype.getLeastRestrictive = function(mediaItem, rights) {
                        var getLeastRestrictive = null;
                        this._rightsPriority.some(function(condition) {
                            getLeastRestrictive = condition.getLeastRestrictive(mediaItem, rights);
                            return !!getLeastRestrictive
                        });
                        return getLeastRestrictive
                    };
                    return UsageRightRestrictionCollection
                })(UsageRightRestriction);
            ViewModels.UsageRightRestrictionCollection = UsageRightRestrictionCollection
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/music1/usagerightrestrictionsmusic.js:21256 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var FeatureEnablement = Microsoft.Entertainment.FeatureEnablement;
            (function(AlbumUsageRightsRestriction) {
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["genric"] = 0] = "genric";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["notAvailableAll"] = 1] = "notAvailableAll";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["notAvailableMix"] = 2] = "notAvailableMix";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["purchaseAlbumAll"] = 3] = "purchaseAlbumAll";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["purchaseAlbumMix"] = 4] = "purchaseAlbumMix";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["purchaseOrPremiumAll"] = 5] = "purchaseOrPremiumAll";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["purchaseOrPremiumMix"] = 6] = "purchaseOrPremiumMix";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["purchaseAll"] = 7] = "purchaseAll";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["purchaseMix"] = 8] = "purchaseMix";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["purchaseTrackAll"] = 9] = "purchaseTrackAll";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["purchaseTrackMix"] = 10] = "purchaseTrackMix";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["premiumAll"] = 11] = "premiumAll";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["premiumMix"] = 12] = "premiumMix";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["premiumStreamAll"] = 13] = "premiumStreamAll";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["premiumStreamMix"] = 14] = "premiumStreamMix";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["premiumStreamCollectionAll"] = 15] = "premiumStreamCollectionAll";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["premiumStreamCollectionMix"] = 16] = "premiumStreamCollectionMix";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["premiumDownloadAll"] = 17] = "premiumDownloadAll";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["premiumDownloadMix"] = 18] = "premiumDownloadMix";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["premiumDownloadCollectionAll"] = 19] = "premiumDownloadCollectionAll";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["premiumDownloadCollectionMix"] = 20] = "premiumDownloadCollectionMix";
                AlbumUsageRightsRestriction[AlbumUsageRightsRestriction["takenDown"] = 21] = "takenDown"
            })(ViewModels.AlbumUsageRightsRestriction || (ViewModels.AlbumUsageRightsRestriction = {}));
            var AlbumUsageRightsRestriction = ViewModels.AlbumUsageRightsRestriction;
            (function(TrackUsageRight) {
                TrackUsageRight[TrackUsageRight["albumPurchaseOnly"] = 0] = "albumPurchaseOnly";
                TrackUsageRight[TrackUsageRight["cantPlay"] = 1] = "cantPlay";
                TrackUsageRight[TrackUsageRight["cantPlayForFree"] = 2] = "cantPlayForFree";
                TrackUsageRight[TrackUsageRight["takenDown"] = 3] = "takenDown";
                TrackUsageRight[TrackUsageRight["notAvailable"] = 4] = "notAvailable";
                TrackUsageRight[TrackUsageRight["notAvailableInCollection"] = 5] = "notAvailableInCollection";
                TrackUsageRight[TrackUsageRight["passOnly"] = 6] = "passOnly";
                TrackUsageRight[TrackUsageRight["passOrPurchaseOnly"] = 7] = "passOrPurchaseOnly";
                TrackUsageRight[TrackUsageRight["purchaseOnly"] = 8] = "purchaseOnly";
                TrackUsageRight[TrackUsageRight["subscriptionDownloadOnly"] = 9] = "subscriptionDownloadOnly";
                TrackUsageRight[TrackUsageRight["subscriptionStreamOnly"] = 10] = "subscriptionStreamOnly"
            })(ViewModels.TrackUsageRight || (ViewModels.TrackUsageRight = {}));
            var TrackUsageRight = ViewModels.TrackUsageRight;
            (function(CloudRightsRestriction) {
                CloudRightsRestriction[CloudRightsRestriction["catalogAlbumFreeStreamOnly"] = 0] = "catalogAlbumFreeStreamOnly";
                CloudRightsRestriction[CloudRightsRestriction["catalogTrackFreeStreamOnly"] = 1] = "catalogTrackFreeStreamOnly";
                CloudRightsRestriction[CloudRightsRestriction["catalogAlbumMusicPassOnly"] = 2] = "catalogAlbumMusicPassOnly";
                CloudRightsRestriction[CloudRightsRestriction["catalogTrackMusicPassOnly"] = 3] = "catalogTrackMusicPassOnly";
                CloudRightsRestriction[CloudRightsRestriction["purchaseOnly"] = 4] = "purchaseOnly"
            })(ViewModels.CloudRightsRestriction || (ViewModels.CloudRightsRestriction = {}));
            var CloudRightsRestriction = ViewModels.CloudRightsRestriction;
            var MusicRestrictionCollection = (function(_super) {
                    __extends(MusicRestrictionCollection, _super);
                    function MusicRestrictionCollection() {
                        _super.call(this, String.empty)
                    }
                    Object.defineProperty(MusicRestrictionCollection.prototype, "featureSet", {
                        get: function() {
                            var currentFeatureSet;
                            var featureEnablementService = Entertainment.ServiceLocator.getService(Entertainment.Services.featureEnablement);
                            if (featureEnablementService.isEnabled(FeatureEnablement.FeatureItem.musicFreePlay))
                                currentFeatureSet = FeatureEnablement.FeatureItem.musicFreePlay;
                            else if (featureEnablementService.isEnabled(FeatureEnablement.FeatureItem.musicSubscription))
                                currentFeatureSet = FeatureEnablement.FeatureItem.musicSubscription;
                            else if (featureEnablementService.isEnabled(FeatureEnablement.FeatureItem.musicMarketplace))
                                currentFeatureSet = FeatureEnablement.FeatureItem.musicMarketplace;
                            return currentFeatureSet
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(MusicRestrictionCollection.prototype, "isPremiumUser", {
                        get: function() {
                            var signedInUser = Entertainment.ServiceLocator.getService(Entertainment.Services.signedInUser);
                            return signedInUser.isSubscription
                        }, enumerable: true, configurable: true
                    });
                    MusicRestrictionCollection.prototype.getLeastRestrictive = function(mediaItem, rights) {
                        this.refreshUserRights();
                        return _super.prototype.getLeastRestrictive.call(this, mediaItem, rights)
                    };
                    MusicRestrictionCollection.prototype.refreshUserRights = function(forceRefresh) {
                        var featureSet = this.featureSet;
                        var isPremiumUser = this.isPremiumUser;
                        if (this._lastRegion !== featureSet || this._lastIsPremiumUser !== isPremiumUser) {
                            this._lastRegion = featureSet;
                            this._lastIsPremiumUser = isPremiumUser;
                            this.clear();
                            if (this._lastRegion === FeatureEnablement.FeatureItem.musicFreePlay && this._lastIsPremiumUser)
                                this._addPremiumUserRights();
                            else if (this._lastRegion === FeatureEnablement.FeatureItem.musicFreePlay && !this._lastIsPremiumUser)
                                this._addFreeUserRights();
                            else if (this._lastRegion === FeatureEnablement.FeatureItem.musicSubscription && this._lastIsPremiumUser)
                                this._addPremiumUserRights();
                            else if (this._lastRegion === FeatureEnablement.FeatureItem.musicSubscription && !this._lastIsPremiumUser)
                                this._addPurchaseUserRights();
                            else if (this._lastRegion === FeatureEnablement.FeatureItem.musicMarketplace)
                                this._addPurchaseOnlyUserRights()
                        }
                    };
                    MusicRestrictionCollection.prototype._addPurchaseOnlyUserRights = function(){};
                    MusicRestrictionCollection.prototype._addPurchaseUserRights = function(){};
                    MusicRestrictionCollection.prototype._addFreeUserRights = function(){};
                    MusicRestrictionCollection.prototype._addPremiumUserRights = function(){};
                    return MusicRestrictionCollection
                })(ViewModels.UsageRightRestrictionCollection);
            ViewModels.MusicRestrictionCollection = MusicRestrictionCollection;
            var AlbumRestrictionCollection = (function(_super) {
                    __extends(AlbumRestrictionCollection, _super);
                    function AlbumRestrictionCollection() {
                        _super.apply(this, arguments)
                    }
                    AlbumRestrictionCollection.prototype._addPurchaseOnlyUserRights = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[3], rightsState: {
                                    allAlbumPurchaseOnly: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.albumPurchase, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[4], rightsState: {
                                    allAlbumPurchaseOnly: false, albumPurchaseOnly: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_PARTIAL_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.albumPurchase, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[0], rightsState: {
                                    allTrackPurchase: false, albumPurchaseOnly: true
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_MIXED_RIGHTS_BANNER_NOTIFICATION_TITLE, descriptionStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_MIXED_RIGHTS_BANNER_NOTIFICATION_BODY
                        }))
                    };
                    AlbumRestrictionCollection.prototype._addPurchaseUserRights = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[3], rightsState: {
                                    allAlbumPurchase: true, trackPurchase: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.albumPurchase, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[4], rightsState: [{
                                        albumPurchaseAndSubscriptionOnly: true, trackUnactionable: false
                                    }, {
                                        albumPurchaseOnly: true, trackUnactionable: false
                                    }], mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_PARTIAL_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.albumPurchase, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[11], rightsState: {
                                    allSubscriptionOnly: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_ONLY_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_ONLY_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[12], rightsState: {
                                    allSubscriptionOnly: false, subscriptionOnly: true, albumPurchaseOnly: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, succestTitleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_ONLY_PARTIAL_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_ONLY_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[0], rightsState: [{
                                        allTrackPurchase: false, albumPurchaseOnly: true
                                    }, {
                                        allTrackPurchase: false, subscriptionOnly: true
                                    }], mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_MIXED_RIGHTS_BANNER_NOTIFICATION_TITLE, descriptionStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_MIXED_RIGHTS_BANNER_NOTIFICATION_BODY
                        }));
                        this._insertCommonAlbumConditions(this)
                    };
                    AlbumRestrictionCollection.prototype._addFreeUserRights = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[3], rightsState: {
                                    allAlbumPurchaseOnly: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.albumPurchase, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[9], rightsState: {
                                    allTrackPurchaseOnly: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_ONLY_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[7], rightsState: {
                                    allPurchaseOnly: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_ONLY_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[4], rightsState: {
                                    allAlbumPurchaseOnlyOrFreeStream: true, allAlbumPurchaseOnly: false, allFreeSteam: false, albumPurchaseOnly: true, trackPurchaseOnly: false, subscriptionOnly: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_PARTIAL_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.albumPurchase, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[10], rightsState: {
                                    allTrackPurchaseOnlyOrFreeStream: true, allTrackPurchaseOnly: false, allFreeStream: false, trackPurchaseOnly: true, albumPurchaseOnly: false, subscriptionOnly: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_ONLY_PARTIAL_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[8], rightsState: {
                                    allPurchaseOnlyOrFreeStream: true, allPurchaseOnly: false, allFreeStream: false, purchaseOnly: true, subscriptionOnly: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_ONLY_PARTIAL_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[5], rightsState: {
                                    freeStream: false, allNonFreeStream: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_PURCHASE_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_ONLY_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[6], rightsState: {
                                    freeStream: true, allFreeStream: false, allNonFreeStreamOrFreeStream: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_PURCHASE_PARTIAL_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_ONLY_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[11], rightsState: {
                                    freeStream: false, allSubscriptionOnly: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_ONLY_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_ONLY_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[12], rightsState: {
                                    freeStream: true, allFreeStream: false, subscriptionOnly: true, purchaseOnly: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, succestTitleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_ONLY_PARTIAL_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.subscriptionWithSignIn, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PASS_ONLY_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[0], rightsState: [{
                                        allFreeStream: false, purchaseOnly: true
                                    }, {
                                        allFreeStream: false, subscriptionOnly: true
                                    }], mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_MIXED_RIGHTS_BANNER_NOTIFICATION_TITLE, descriptionStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_MIXED_RIGHTS_BANNER_NOTIFICATION_BODY
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[21], mediaState: {
                                    fromCollection: true, hasTakenedDown: true
                                }, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_TAKEDOWN_BANNER_NOTIFICATION_TITLE
                        }));
                        this._insertCommonAlbumConditions(this)
                    };
                    AlbumRestrictionCollection.prototype._addPremiumUserRights = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[3], rightsState: {
                                    allAlbumPurchaseOnly: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.albumPurchase, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[9], rightsState: {
                                    allTrackPurchaseOnly: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_ONLY_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[7], rightsState: {
                                    allPurchaseOnly: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_ONLY_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[4], rightsState: {
                                    allSubscription: false, allAlbumPurchaseOnly: false, albumPurchaseOnly: true, subscriptionLimited: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_PARTIAL_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.albumPurchase, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[10], rightsState: {
                                    allSubscription: false, allTrackPurchaseOnly: false, trackPurchaseOnly: true, subscriptionLimited: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_SONGS_ONLY_PARTIAL_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[8], rightsState: {
                                    allSubscription: false, allPurchaseOnly: false, purchaseOnly: true, subscriptionLimited: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_PURCHASE_ONLY_PARTIAL_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[13], rightsState: {
                                    allSubscriptionStream: true, subscriptionDownload: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_STREAMING_ONLY_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[14], rightsState: {
                                    allSubscriptionStream: true, allSubscriptionDownload: false, subscriptionDownload: true, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_STREAMING_ONLY_PARTIAL_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[15], mediaState: {
                                    fromCollection: true, hasLocalTracks: false, hasSubscriptionTracks: true, canDownload: false
                                }, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_STREAMING_ONLY_BANNER_NOTIFICATION_TITLE
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[17], rightsState: {
                                    allSubscriptionDownload: true, subscriptionStream: false, trackUnactionable: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_DOWNLOAD_ONLY_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.subscriptionDownload, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_DOWNLOAD_ONLY_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[18], rightsState: {
                                    allSubscriptionDownload: false, allSubscriptionStream: false, subscriptionStream: true, trackUnactionable: false
                                }, mediaState: {fromCollection: true}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_DOWNLOAD_ONLY_PARTIAL_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.subscriptionDownload, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_DOWNLOAD_ONLY_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[19], mediaState: {
                                    fromCollection: true, hasAllRemoteOnlyTracks: true, hasSubscriptionTracks: true, canSubscriptionStream: false
                                }, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_DOWNLOAD_ONLY_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.subscriptionDownload, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_DOWNLOAD_ONLY_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[20], mediaState: {
                                    fromCollection: true, hasRemoteOnlyTracks: true, hasSubscriptionTracks: true, canSubscriptionStream: false
                                }, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_DOWNLOAD_ONLY_PARTIAL_BANNER_NOTIFICATION_TITLE, actionId: Entertainment.UI.Actions.ActionIdentifiers.subscriptionDownload, actionParameterMediaItemPropertyPath: String.empty, actionOptions: {title: String.load(String.id.IDS_MUSIC_ALBUM_DETAILS_DOWNLOAD_ONLY_BANNER_NOTIFICATION_BODY)}
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[0], rightsState: [{purchaseOnly: true}, {subscriptionStreamOnly: true}, {subscriptionDownloadOnly: true}], mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_MIXED_RIGHTS_BANNER_NOTIFICATION_TITLE, descriptionStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_MIXED_RIGHTS_BANNER_NOTIFICATION_BODY
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[21], mediaState: {
                                    fromCollection: true, hasTakenedDown: true
                                }, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_TAKEDOWN_BANNER_NOTIFICATION_TITLE
                        }));
                        this._insertCommonAlbumConditions(this)
                    };
                    AlbumRestrictionCollection.prototype._insertCommonAlbumConditions = function(rightsConditions) {
                        if (!rightsConditions)
                            return null;
                        rightsConditions.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[1], rightsState: {
                                    freeStream: false, albumPurchase: false, subscriptionDownload: false, subscriptionStream: false, trackPurchase: false
                                }, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_UNAVAILABLE_BANNER_NOTIFICATION_TITLE
                        }));
                        rightsConditions.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: AlbumUsageRightsRestriction[2], rightsState: {trackUnactionable: true}, mediaState: {fromCollection: false}, titleStringId: String.id.IDS_MUSIC_ALBUM_DETAILS_UNAVAILABLE_PARTIAL_BANNER_NOTIFICATION_TITLE
                        }));
                        return rightsConditions
                    };
                    return AlbumRestrictionCollection
                })(MusicRestrictionCollection);
            ViewModels.AlbumRestrictionCollection = AlbumRestrictionCollection;
            var TrackRestrictionCollection = (function(_super) {
                    __extends(TrackRestrictionCollection, _super);
                    function TrackRestrictionCollection() {
                        _super.apply(this, arguments)
                    }
                    TrackRestrictionCollection.prototype._addFreeUserRights = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[3], mediaState: {
                                    hasTakenDown: true, canPurchase: false, canFreeStream: false, canSubscriptionStream: false, canPurchaseAlbum: false, canPlayLocally: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_TAKEDOWN_FLYOUT_BODY, isUnavailable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[8], mediaState: {
                                    fromCollection: false, canPurchase: true, canFreeStream: false, canSubscriptionStream: false, canSubscriptionDownload: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PURCHASE_ONLY_FLYOUT_BODY, isUnplayable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[6], mediaState: {
                                    canPurchase: false, canFreeStream: false, canSubscriptionStream: true, roamingViaOneDrive: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PASS_ONLY_FLYOUT_BODY, isUnplayable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[7], mediaState: {
                                    fromCollection: false, canPurchase: true, canFreeStream: false, canSubscriptionStream: true, canSubscriptionDownload: true
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PASS_PURCHASE_FLYOUT_BODY, isUnplayable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[0], mediaState: {
                                    fromCollection: false, canPurchase: false, canFreeStream: false, canSubscriptionStream: false, canPurchaseAlbum: true
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PURCHASE_ALBUM_FLYOUT_BODY, isUnplayable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[9], mediaState: {
                                    fromCollection: false, canPurchase: true, canFreeStream: false, canSubscriptionStream: false, canSubscriptionDownload: true
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PASS_PURCHASE_FLYOUT_BODY, isUnplayable: true
                        }));
                        this._insertCommonTrackConditions(this)
                    };
                    TrackRestrictionCollection.prototype._addPremiumUserRights = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[3], mediaState: {
                                    hasTakenDown: true, canPurchase: false, canFreeStream: false, canSubscriptionStream: false, canPurchaseAlbum: false, canPlayLocally: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_TAKEDOWN_FLYOUT_BODY, isUnavailable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[8], mediaState: {
                                    fromCollection: false, canSubscriptionDownload: false, canPurchase: true, canSubscriptionStream: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PURCHASE_ONLY_FLYOUT_BODY, isUnplayable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[0], mediaState: {
                                    fromCollection: false, canSubscriptionDownload: false, canPurchase: false, canSubscriptionStream: false, canPurchaseAlbum: true
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PURCHASE_ALBUM_FLYOUT_BODY, isUnplayable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[9], mediaState: {
                                    canSubscriptionDownload: true, canSubscriptionStream: false, canPlayLocally: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_DOWNLOAD_ONLY_FLYOUT_BODY, isUnplayable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[10], mediaState: {
                                    fromCollection: false, canSubscriptionDownload: false, canSubscriptionStream: true
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_STREAMING_ONLY_FLYOUT_BODY
                        }));
                        this._insertCommonTrackConditions(this)
                    };
                    TrackRestrictionCollection.prototype._addPurchaseUserRights = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[3], mediaState: {
                                    hasTakenDown: true, canPurchase: false, canFreeStream: false, canSubscriptionStream: false, canPurchaseAlbum: false, canPlayLocally: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_TAKEDOWN_FLYOUT_BODY, isUnavailable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[0], mediaState: {
                                    fromCollection: false, canPurchase: false, canFreeStream: false, canPurchaseAlbum: true
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PURCHASE_ALBUM_FLYOUT_BODY, isUnplayable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[6], mediaState: {
                                    fromCollection: false, canPurchase: false, canFreeStream: false, canSubscriptionStream: true, roamingViaOneDrive: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PASS_ONLY_FLYOUT_BODY, isUnplayable: true
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[2], mediaState: {
                                    fromCollection: true, canPlayLocally: false, canFreeStream: false, canPurchaseStream: false, canStreamFromCloudStorage: false, roamingViaOneDrive: false, hasServiceId: true
                                }, descriptionStringId: String.id.IDS_PLAYLIST_ITEM_DIALOG_NOT_AVAILABLE_FREE_USER, isUnavailable: true
                        }));
                        this._insertCommonTrackConditions(this)
                    };
                    TrackRestrictionCollection.prototype._addPurchaseOnlyUserRights = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[0], mediaState: {
                                    canPurchase: false, canFreeStream: false, canSubscriptionStream: false, canPurchaseAlbum: true
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PURCHASE_ALBUM_FLYOUT_BODY, isUnplayable: true
                        }));
                        this._insertCommonTrackConditions(this)
                    };
                    TrackRestrictionCollection.prototype._insertCommonTrackConditions = function(rightsConditions) {
                        if (!rightsConditions)
                            return null;
                        rightsConditions.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[4], mediaState: {
                                    fromCollection: false, canPurchase: false, canFreeStream: false, canSubscriptionStream: false, canPurchaseAlbum: false, canPurchaseStream: false, canPurchaseDownload: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_UNAVAILABLE_FLYOUT_BODY, isUnavailable: true
                        }));
                        rightsConditions.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[5], mediaState: {
                                    fromCollection: true, canPurchase: false, canFreeStream: false, canSubscriptionStream: false, canPurchaseAlbum: false, canPlayLocally: false, isFromPlaylist: false, hasTakenDown: false, canPurchaseStream: false, canPurchaseDownload: false, canStreamFromCloudStorage: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_UNAVAILABLE_FLYOUT_BODY, isUnavailable: true
                        }));
                        rightsConditions.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: TrackUsageRight[1], mediaState: {
                                    fromCollection: true, canPlayLocally: false, canFreeStream: false, canSubscriptionStream: false, canPurchaseStream: false, canPurchaseDownload: false, isFromPlaylist: true, canStreamFromCloudStorage: false, hasServiceId: false
                                }, descriptionStringId: String.id.IDS_MUSIC_SONG_PLAYLIST_CANT_PLAY_FLYOUT_BODY, isUnavailable: true
                        }));
                        return rightsConditions
                    };
                    return TrackRestrictionCollection
                })(MusicRestrictionCollection);
            ViewModels.TrackRestrictionCollection = TrackRestrictionCollection;
            var CloudRestrictionCollection = (function(_super) {
                    __extends(CloudRestrictionCollection, _super);
                    function CloudRestrictionCollection() {
                        _super.apply(this, arguments)
                    }
                    Object.defineProperty(CloudRestrictionCollection.prototype, "featureSet", {
                        get: function() {
                            var currentFeatureSet;
                            var featureEnablementService = Entertainment.ServiceLocator.getService(Entertainment.Services.featureEnablement);
                            if (featureEnablementService.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.cloudCollectionV2Enabled))
                                if (featureEnablementService.isEnabled(FeatureEnablement.FeatureItem.musicFreePlay))
                                    currentFeatureSet = FeatureEnablement.FeatureItem.musicFreePlay;
                                else if (featureEnablementService.isEnabled(FeatureEnablement.FeatureItem.musicSubscription))
                                    currentFeatureSet = FeatureEnablement.FeatureItem.musicSubscription;
                            return currentFeatureSet
                        }, enumerable: true, configurable: true
                    });
                    CloudRestrictionCollection.prototype._addFreeUserRights = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: CloudRightsRestriction[0], mediaState: {
                                    fromCollection: true, hasRemoteOnlyTracks: true, inCollection: true, isAlbum: true
                                }, descriptionStringId: String.id.IDS_MUSIC_CLOUDMODE_CATALOG_ALBUM_FREE_FLYOUT_BODY, actionId: Entertainment.UI.Actions.ActionIdentifiers.mediaStatusSubscriptionSignupAction
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: CloudRightsRestriction[1], mediaState: {
                                    canFreeStream: true, canPlayLocally: false, canStreamFromCloudStorage: false, fromCollection: true, isTrack: true
                                }, descriptionStringId: String.id.IDS_MUSIC_CLOUDMODE_CATALOG_MUSIC_FREE_FLYOUT_BODY, actionId: Entertainment.UI.Actions.ActionIdentifiers.mediaStatusSubscriptionSignupAction
                        }));
                        this._insertCommonConditions()
                    };
                    CloudRestrictionCollection.prototype._addPremiumUserRights = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: CloudRightsRestriction[2], mediaState: {
                                    fromCollection: true, inCollection: true, isAlbum: true, isCloudMatched: true
                                }, descriptionStringId: String.id.IDS_MUSIC_CLOUDMODE_CATALOG_ALBUM_PASS_FLYOUT_BODY
                        }));
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: CloudRightsRestriction[3], mediaState: {
                                    canStreamFromCloudStorage: false, fromCollection: true, isCloudMatched: true, isTrack: true
                                }, descriptionStringId: String.id.IDS_MUSIC_CLOUDMODE_CATALOG_MUSIC_PASS_FLYOUT_BODY
                        }));
                        this._insertCommonConditions()
                    };
                    CloudRestrictionCollection.prototype._insertCommonConditions = function() {
                        this.addRightsCondition(new ViewModels.MediaUsageRightRestriction({
                            name: CloudRightsRestriction[4], mediaState: {
                                    canPurchaseStream: true, canStreamFromCloudStorage: false, fromCollection: true, hasPurchased: true, isTrack: true, roamingViaOneDrive: false
                                }, descriptionStringId: String.id.IDS_MUSIC_CLOUDMODE_CATALOG_MUSIC_PURCHASED_FLYOUT_BODY
                        }))
                    };
                    return CloudRestrictionCollection
                })(MusicRestrictionCollection);
            ViewModels.CloudRestrictionCollection = CloudRestrictionCollection;
            MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.trackRestrictionCollection, function() {
                return new TrackRestrictionCollection
            })
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/controls/imagecollage.js:21768 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    var fileScope = {
            CELL_USED: 1, CELL_BAD_IMAGE: 2
        };
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ImageCollageCell: MS.Entertainment.UI.Framework.define(function(){}, {
            domElement: null, _imageLoader: null, _svgImageElement: null, _colorOverlay: null, x: 0, y: 0, width: 0, height: 0, urlIndex: -1, _artUri: null, _loaded: false, _initialized: false, _pendingShow: false, _pendingToggle: false, _overlayListenerAdded: false, _transitionPromise: null, cellDefinition: null, initialize: function initialize(blockOffset, cellDefinition, cellSize, filter, backgroundColor) {
                    var that = this;
                    var cellSpacing = MS.Entertainment.Utilities.isMusicApp1 ? 2 : 0;
                    this.cellDefinition = cellDefinition;
                    this.x = blockOffset.x + cellDefinition.x * cellSize.x;
                    this.y = blockOffset.y + cellDefinition.y * cellSize.y;
                    this.width = cellDefinition.size * cellSize.x;
                    this.height = cellDefinition.size * cellSize.y;
                    var svgNS = "http://www.w3.org/2000/svg";
                    var svgElement = document.createElementNS(svgNS, "svg");
                    this._svgImageElement = document.createElementNS(svgNS, "image");
                    this._svgImageElement.setAttribute("x", cellSpacing);
                    this._svgImageElement.setAttribute("y", cellSpacing);
                    this._svgImageElement.setAttribute("width", this.width - (2 * cellSpacing));
                    this._svgImageElement.setAttribute("height", this.height - (2 * cellSpacing));
                    this._svgImageElement.setAttribute("preserveAspectRatio", "none");
                    this._svgImageElement.setAttribute("focusable", "false");
                    svgElement.setAttribute("focusable", "false");
                    this._loaded = false;
                    svgElement.appendChild(this._svgImageElement);
                    this._colorOverlay = document.createElement("div");
                    this._colorOverlay.className = "imageCollageCellColorOverlay";
                    this.domElement = document.createElement("div");
                    this.domElement.style.left = this.x + "px";
                    this.domElement.style.top = this.y + "px";
                    this.domElement.style.width = this.width + "px";
                    this.domElement.style.height = this.height + "px";
                    this.domElement.style.backgroundColor = backgroundColor ? backgroundColor : "#000000";
                    this.domElement.className = "imageCollageCell tranFadeShort";
                    this.domElement.appendChild(svgElement);
                    this.domElement.appendChild(this._colorOverlay);
                    this._cellTransitionEnd = this._cellTransitionEnd.bind(this);
                    this.domElement.addEventListener("transitionend", this._cellTransitionEnd, false)
                }, unload: function unload() {
                    this.domElement.removeEventListener("transitionend", this._cellTransitionEnd, false);
                    if (this._transitionPromise) {
                        this._transitionPromise.cancel();
                        this._transitionPromise = null
                    }
                }, setOverlay: function setOverlay(color, alpha, delay) {
                    var transitionEnd = function() {
                            this._colorOverlay.style.msTransitionDelay = String.empty;
                            this._colorOverlay.style.opacity = alpha
                        };
                    if (delay) {
                        this._colorOverlay.style.msTransitionDelay = delay;
                        if (!this._overlayListenerAdded) {
                            this._colorOverlay.addEventListener("transitionend", transitionEnd.bind(this), false);
                            this._overlayListenerAdded = true
                        }
                    }
                    else
                        this._colorOverlay.style.opacity = alpha;
                    this._colorOverlay.style.backgroundColor = color
                }, setArt: function setArt(artUri) {
                    this._initialized = true;
                    var wasLoaded = this._loaded;
                    this._artUri = artUri;
                    this._loaded = false;
                    if (wasLoaded) {
                        this._pendingShow = true;
                        if (this._transitionPromise)
                            this._transitionPromise.cancel();
                        this._transitionPromise = WinJS.Promise.timeout(600).then(function showCell() {
                            if (this._pendingShow) {
                                this._pendingShow = false;
                                this.toggleCell(MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.show)
                            }
                        }.bind(this));
                        this.toggleCell(MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.hide);
                        return
                    }
                    if (this._pendingToggle) {
                        this._pendingToggle = false;
                        this.toggleCell(MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.show)
                    }
                }, toggleCell: function toggleCell(show, delay) {
                    if (!this._initialized) {
                        this._pendingToggle = (show === MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.show);
                        return
                    }
                    if (show === MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.show) {
                        if (!this._loaded) {
                            this._loaded = true;
                            var uri = this._artUri;
                            if (!uri)
                                uri = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album;
                            this._svgImageElement.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", uri)
                        }
                        if (delay)
                            this.domElement.style.msTransitionDelay = delay + "ms";
                        this.domElement.style.opacity = 1
                    }
                    else {
                        this._loaded = false;
                        if (delay)
                            this.domElement.style.msTransitionDelay = delay + "ms";
                        this.domElement.style.opacity = 0
                    }
                }, _cellTransitionEnd: function _cellTransitionEnd() {
                    if (this._transitionPromise) {
                        this._transitionPromise.cancel();
                        this._transitionPromise = null
                    }
                    this.domElement.style.msTransitionDelay = String.empty;
                    if (this._pendingShow) {
                        this._pendingShow = false;
                        this.toggleCell(MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.show)
                    }
                }
        }, {
            showDelay: 750, toggleCellState: {
                    show: "show", hide: "hide"
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {LargeWallArt: MS.Entertainment.UI.Framework.define(function(){}, {
            domElement: null, svgElement: null, currentImageUrl: null, _imageLoader: null, _svgImageElement: null, _svgColorElement: null, _svgBlackElement: null, _loaded: false, _x: 0, _y: 0, _width: 0, _height: 0, _colorOverlay: null, _blackOverlay: null, _animationOffsets: null, _lastAnimationOffset: -1, _hideArtDelayPromise: null, _artDelay: 0, initialize: function initialize(domElement, x, y, w, h, backgroundColor, filter, artDelay) {
                    var that = this;
                    if (window.clientInformation && window.clientInformation.cpuClass === "ARM")
                        this.disableScaling = true;
                    this._artDelay = artDelay !== null ? artDelay : MS.Entertainment.UI.Controls.LargeWallArt.showDelay;
                    this.domElement = domElement;
                    this._animationOffsets = ["25% 25%", "50% 25%", "75% 25%", "25% 50%", "50% 50%", "75% 50%"];
                    var svgNS = "http://www.w3.org/2000/svg";
                    this.svgElement = document.createElementNS(svgNS, "svg");
                    this.svgElement.style.zIndex = 1;
                    this._svgImageElement = document.createElementNS(svgNS, "image");
                    this._svgImageElement.style.zIndex = 0;
                    this._svgImageElement.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", MS.Entertainment.UI.ImagePaths.imageNotFound);
                    this._svgImageElement.setAttribute("x", 0);
                    this._svgImageElement.setAttribute("y", 0);
                    this._svgImageElement.setAttribute("width", "100%");
                    this._svgImageElement.setAttribute("height", "100%");
                    this._svgImageElement.setAttribute("focusable", "false");
                    this._svgImageElement.setAttribute("preserveAspectRatio", "xMidYMid slice");
                    this.svgElement.setAttribute("focusable", "false");
                    this.svgElement.appendChild(this._svgImageElement);
                    if (filter && !this._svgColorElement) {
                        this._colorOverlay = document.createElement("div");
                        this._colorOverlay.className = "nowPlayingLargeArtColorOverlay tranFadeLong";
                        this._colorOverlay.style.zIndex = 2;
                        this._blackOverlay = document.createElement("div");
                        this._blackOverlay.className = "nowPlayingLargeArtBlackOverlay";
                        this._blackOverlay.style.zIndex = 3
                    }
                    this._imageLoader = new Image;
                    this._imageLoader.addEventListener("load", function imageLoaded(event) {
                        this._loaded = true;
                        this._svgImageElement.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", this._imageLoader.src);
                        if (this._pendingShow)
                            this.showArt()
                    }.bind(this), false);
                    this._imageLoader.addEventListener("error", function imageError(event) {
                        this._pendingShow = false;
                        this._loaded = true;
                        this.toggleArt(MS.Entertainment.UI.Controls.LargeWallArt.toggleArtState.hide)
                    }.bind(this), false);
                    this.domElement.style.backgroundColor = backgroundColor ? backgroundColor : "#000000";
                    this.domElement.style.position = "absolute";
                    this.domElement.style.left = x;
                    this.domElement.style.top = y;
                    this.domElement.style.width = w;
                    this.domElement.style.height = h;
                    this.domElement.style.opacity = "1.0";
                    if (filter && !this._svgColorElement) {
                        this.domElement.appendChild(this._colorOverlay);
                        this.domElement.appendChild(this._blackOverlay)
                    }
                    this.domElement.appendChild(this.svgElement)
                }, setOverlay: function setOverlay(color, alpha) {
                    if (this._svgColorElement)
                        this._svgColorElement.setAttribute("flood-color", color);
                    else if (color === this._colorOverlay.style.backgroundColor)
                        this._colorOverlay.style.opacity = alpha;
                    else {
                        this._colorOverlay.style.backgroundColor = color;
                        this._colorOverlay.style.opacity = alpha
                    }
                }, showArt: function showArt() {
                    if (this._hideArtDelayPromise) {
                        this._hideArtDelayPromise.cancel();
                        this._hideArtDelayPromise = null
                    }
                    this.domElement.style.display = String.empty;
                    this.toggleArt(MS.Entertainment.UI.Controls.LargeWallArt.toggleArtState.show);
                    var index = Math.floor(Math.random() * this._animationOffsets.length);
                    while (index === this._lastAnimationOffset)
                        index = Math.floor(Math.random() * this._animationOffsets.length);
                    this._lastAnimationOffset = index;
                    this.domElement.className = String.empty;
                    this.domElement.style.transformOrigin = this._animationOffsets[index];
                    if (!this.disableScaling)
                        WinJS.Utilities.addClass(this.domElement, "imageCollageLargeArt");
                    WinJS.Utilities.addClass(this.domElement, "tranFadeVeryShort")
                }, hideArt: function hideArt() {
                    if (!MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isAppVisible) {
                        this.domElement.className = String.empty;
                        this.domElement.style.display = "none";
                        this._hideArtDelayPromise = WinJS.Promise.wrap()
                    }
                    else {
                        this.toggleArt(MS.Entertainment.UI.Controls.LargeWallArt.toggleArtState.hide);
                        if (this._imageLoader && this._imageLoader.src)
                            this._hideArtDelayPromise = WinJS.Promise.timeout(this._artDelay).then(function _delay() {
                                if (this._hideArtDelayPromise) {
                                    this.domElement.className = String.empty;
                                    this.domElement.style.display = "none";
                                    this._hideArtDelayPromise = null
                                }
                            }.bind(this));
                        else
                            this._hideArtDelayPromise = WinJS.Promise.wrap()
                    }
                    return this._hideArtDelayPromise
                }, clearArt: function clearArt() {
                    this.hideArt().done(function clearArtUrl() {
                        this.currentImageUrl = null;
                        if (this._svgImageElement)
                            this._svgImageElement.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", String.empty)
                    }.bind(this), function onError(){})
                }, setArt: function setArt(artUri) {
                    var wasLoaded = this._loaded;
                    this._loaded = false;
                    this.hideArt();
                    if (!String.isString(artUri))
                        return;
                    return WinJS.Promise.timeout(wasLoaded ? this._artDelay : 0).then(function _delay() {
                            if (this._hideArtDelayPromise) {
                                this._hideArtDelayPromise.cancel();
                                this._hideArtDelayPromise = null
                            }
                            if (artUri) {
                                this.currentImageUrl = artUri;
                                this._imageLoader.setAttribute("src", artUri);
                                this.showArt()
                            }
                            else {
                                this.currentImageUrl = null;
                                this._pendingShow = false;
                                this.domElement.style.opacity = 0;
                                this._loaded = true
                            }
                        }.bind(this))
                }, toggleArt: function toggleArt(show) {
                    if (show === MS.Entertainment.UI.Controls.LargeWallArt.toggleArtState.show || this._pendingShow)
                        if (this._loaded) {
                            this._pendingShow = false;
                            this.domElement.style.opacity = 1
                        }
                        else
                            this._pendingShow = true;
                    else
                        this.domElement.style.opacity = 0
                }
        }, {
            showDelay: 2000, colorShowDelay: 2000, toggleArtState: {
                    show: "show", hide: "hide"
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ImageCollage: MS.Entertainment.UI.Framework.defineUserControl("Controls/ImageCollage.html#Template", function ImageCollage(element, options) {
            this._cells = [];
            this._cellDefinitions = [];
            this._renderLoop = this._renderLoop.bind(this)
        }, {
            _initialized: false, _blockCountX: 0, _blockCountY: 0, _largeArt: null, _timerEnabled: false, _animationPaused: false, _frozen: false, _cells: null, _blockSizeInPixels: 0, _blockSizeInCells: 0, _cellSizeInPixels: 0, _artIndex: -1, _lastArtShow: 0, _lastArtSwap: 0, _lastCellSwap: 0, _lastColorChange: 0, _lastTimerTick: 0, _cellUsedList: null, _cellUsedCount: 0, _cellOffsetInPixels: 0, _resizeTimeoutPromise: null, _timerPromise: null, _minCellsForTimer: 10, _maxSearchCount: 20, _uiStateService: null, _renderLoopQueued: false, _lastWidth: 0, timerTickInterval: 1000, timerDelayPeriod: 3000, cellAddPeriod: 0, cellRepeatBuffer: 5, cellSwapPeriod: 5000, artShowPeriod: 30000, artSwapPeriod: 11000, artVisiblePeriod: 30000, colorChangePeriod: 0, cellDefinitions: null, cellFilter: null, backgroundColor: "#000000", largeArtDelay: null, initialize: function initialize(element, options, dom) {
                    this._updateSize = this._updateSize.bind(this);
                    this._uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState)
                }, _delayInitialized: function _delayInitialized() {
                    this.bind("cellIdList", this._onCellIdListChanged.bind(this));
                    this.bind("largeArtUrls", this._updateArt.bind(this));
                    MS.Entertainment.Utilities.attachResizeEvent(this.domElement, this._updateSize)
                }, unload: function unload() {
                    MS.Entertainment.Utilities.detachResizeEvent(this.domElement, this._updateSize);
                    this._timerEnabled = false;
                    this._clearCells();
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, thaw: function thaw() {
                    MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this);
                    this._frozen = false;
                    if (this._timerEnabled && !this._renderLoopQueued)
                        this._startRenderLoop();
                    this.play()
                }, pause: function pause() {
                    this._animationPaused = true;
                    if (this._largeArt)
                        this._largeArt.hideArt()
                }, play: function play() {
                    this._animationPaused = false;
                    if (this._largeArt && this.artVisible)
                        this._largeArt.showArt()
                }, freeze: function freeze() {
                    this._frozen = true;
                    this.pause();
                    MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                }, _updateSize: function _updateSize() {
                    if (this.domElement.clientWidth > 0 && this._lastWidth === this.domElement.clientWidth)
                        return;
                    this._lastWidth = this.domElement.clientWidth;
                    if (this._resizeTimeoutPromise)
                        this._resizeTimeoutPromise.cancel();
                    this._resizeTimeoutPromise = WinJS.Promise.timeout(500).then(function updateCells() {
                        if (this.cellIdList)
                            this._setCellImages(true)
                    }.bind(this))
                }, _clearCells: function _clearCells() {
                    if (!this.wallContainer)
                        this._timerEnabled = false;
                    else {
                        MS.Entertainment.Utilities.empty(this.wallContainer);
                        this._cells = [];
                        this._cellUsedList = []
                    }
                }, _onCellIdListChanged: function _onCellIdListChanged(newValue) {
                    if (newValue)
                        this._setCellImages(false)
                }, _setCellImages: function _setCellImages(clearCells) {
                    if (!this._cells || !this._cells.length || clearCells || !this.cellIdList || !this.cellIdList.length)
                        this._clearCells();
                    if (!this.cellIdList || !this.cellIdList.length || this._unloaded)
                        return;
                    if (this._cells && this._cells.length > 0) {
                        this._cellUsedCount = 0;
                        this._cellUsedList = [];
                        this._cellUsedList.length = this.cellIdList.length;
                        this._updateCellArts();
                        return
                    }
                    if (!this._cellUsedList)
                        this._cellUsedList = [];
                    this._cellUsedList.length = this.cellIdList.length;
                    var defaultWidth = (this.size && this.size.width) ? this.size.width : window.screen.width;
                    var defaultHeight = (this.size && this.size.height) ? this.size.height : window.screen.height;
                    var elementWidth = this.domElement.clientWidth ? this.domElement.clientWidth : defaultWidth;
                    var elementHeight = this.domElement.clientHeight ? this.domElement.clientHeight : defaultHeight;
                    this._blockCountX = Math.ceil(elementWidth / this._blockSizeInPixels.x);
                    this._blockCountY = Math.ceil(elementHeight / this._blockSizeInPixels.y);
                    this._lastWidth = elementWidth;
                    this._toggleStartTime = 0;
                    var color = this.backdropColor;
                    if (this.colorChangePeriod > 0) {
                        var randomColor = this._randomizeLayerColor();
                        color = "rgba(" + randomColor.r + "," + randomColor.g + "," + randomColor.b + "," + randomColor.a + ")"
                    }
                    var cellCount = this._blockCountX * this._blockCountY * this.cellDefinitions.length;
                    for (var i = 0; i < cellCount; i++) {
                        var newCell = this._initCell(i, elementWidth, elementHeight, color);
                        if (newCell)
                            this._cells.push(newCell)
                    }
                    if (!this.artVisible)
                        this._toggleCells(MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.show);
                    if (!this._timerEnabled && ((this.largeArtUrls && this.largeArtUrls.length > 0) || ((this.cellIdList && this.cellIdList.length > this._cells.length) || this._cells.length >= this._minCellsForTimer))) {
                        this._timerEnabled = true;
                        this._startRenderLoop()
                    }
                    else if (this._timerEnabled && ((!this.largeArtUrls || this.largeArtUrls.length === 0) && ((!this.cellIdList || this.cellIdList.length <= this._cells.length) && this._cells.length < this._minCellsForTimer)))
                        this._timerEnabled = false
                }, _updateArt: function _updateArt(newVal, oldVal) {
                    if (oldVal === undefined || !this.artContainer)
                        return;
                    this._artIndex = -1;
                    if (!this.largeArtUrls) {
                        this._setArtVisible(false);
                        this._toggleCells(MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.show);
                        if (this._largeArt)
                            this._setLargeArt(null);
                        return
                    }
                    if (!this._largeArt) {
                        this._largeArt = new MS.Entertainment.UI.Controls.LargeWallArt;
                        this._largeArt.initialize(this.artContainer.domElement, 0, 0, "100%", "100%", this.backgroundColor, this.largeArtFilter, this.largeArtDelay);
                        if (this.colorChangePeriod > 0)
                            this._randomizeLayerColors()
                    }
                    if (!this.largeArtUrls)
                        this._setLargeArt(null);
                    if (this.largeArtUrls && (!this._timerEnabled || this.artVisible)) {
                        this._randomizeArt();
                        this._setArtVisible(true);
                        this._lastArtSwap = 0
                    }
                    else {
                        this._artIndex = -1;
                        this._setArtVisible(false)
                    }
                    if (!this._timerEnabled && (this.largeArtUrls.length > 1 || (this.largeArtUrls.length === 1 && this.largeArtUrls[0] === String.empty))) {
                        this._timerEnabled = true;
                        this._startRenderLoop()
                    }
                    this._lastArtShow = this.artShowPeriod - this.timerDelayPeriod
                }, _initCell: function _initCell(cellIndex, maxWidth, maxHeight, color) {
                    var that = this;
                    var cell = new MS.Entertainment.UI.Controls.ImageCollageCell;
                    var blockSet = Math.floor(cellIndex / this.cellDefinitions.length);
                    var blockOffsetX = (blockSet % this._blockCountX) * this._blockSizeInCells.x * this._cellSizeInPixels.x - this._cellSizeInPixels.x * this._cellOffsetInPixels;
                    var blockOffsetY = (Math.floor(blockSet / this._blockCountX)) * this._blockSizeInCells.y * this._cellSizeInPixels.y - this._cellSizeInPixels.y * this._cellOffsetInPixels;
                    var cellDefinition = this.cellDefinitions[cellIndex % this.cellDefinitions.length];
                    if ((blockOffsetX + (cellDefinition.x * this._cellSizeInPixels.x) + (cellDefinition.size * this._cellSizeInPixels.x)) <= 0 || (blockOffsetX + (cellDefinition.x * this._cellSizeInPixels.x)) > maxWidth || (blockOffsetY + (cellDefinition.y * this._cellSizeInPixels.y) + (cellDefinition.size * this._cellSizeInPixels.y)) <= 0 || (blockOffsetY + (cellDefinition.y * this._cellSizeInPixels.y)) > maxHeight)
                        return null;
                    cell.initialize({
                        x: blockOffsetX, y: blockOffsetY
                    }, cellDefinition, this._cellSizeInPixels, this.cellFilter, this.backgroundColor);
                    cell.setOverlay(color, 0.5);
                    this._setCellArt(cell);
                    if (!MS.Entertainment.Utilities.checkIfInDom(this.domElement) || !this.wallContainer)
                        return null;
                    else
                        this.wallContainer.appendChild(cell.domElement);
                    return cell
                }, _setCellArt: function _setCellArt(cell) {
                    if (!cell || !this.cellIdList || !this.cellIdList.length || this._unloaded)
                        return;
                    if (cell.urlIndex > 0 && cell.urlIndex < this.cellIdList.length - 1)
                        if (this._cellUsedList[cell.urlIndex]) {
                            if (this._cellUsedList[cell.urlIndex] < fileScope.CELL_BAD_IMAGE)
                                this._cellUsedList[cell.urlIndex] = 0;
                            if (this._cellUsedCount > 0)
                                this._cellUsedCount--
                        }
                    var random = -1;
                    var loopCount = 0;
                    var lastNonDefault = -1;
                    while (random < 0) {
                        var testIndex = Math.floor(Math.random() * this.cellIdList.length);
                        if (this._cellUsedList[testIndex] < fileScope.CELL_BAD_IMAGE)
                            lastNonDefault = testIndex;
                        if (!this._cellUsedList[testIndex] || loopCount > this._maxSearchCount || this._cellUsedCount >= this.cellIdList.length - this.cellRepeatBuffer)
                            random = testIndex;
                        loopCount++
                    }
                    if (this._cellUsedList[random] === fileScope.CELL_BAD_IMAGE && lastNonDefault >= 0)
                        random = lastNonDefault;
                    if (!this._cellUsedList[random]) {
                        this._cellUsedCount++;
                        this._cellUsedList[random] = fileScope.CELL_USED
                    }
                    cell.urlIndex = random;
                    WinJS.Promise.as(this._setUrlFromCellId(this.cellIdList[random], cell)).done(function checkIfSet(imageUrl) {
                        if (!imageUrl)
                            WinJS.Promise.timeout().done(function() {
                                this._cellUsedList[random] = fileScope.CELL_BAD_IMAGE;
                                this._setCellArt(cell)
                            }.bind(this))
                    }.bind(this))
                }, _setUrlFromCellId: function _getUrlFromCellId(cellId, cell) {
                    return cell.setArt(cellId)
                }, _setArtVisible: function _setArtVisible(visible) {
                    if (this.artVisible !== visible) {
                        this.artVisible = visible;
                        if (this._largeArt)
                            if (visible)
                                this._largeArt.showArt();
                            else
                                this._largeArt.hideArt()
                    }
                }, _timerTick: function _timerTick() {
                    if (!MS.Entertainment.Utilities.checkIfInDom(this.domElement))
                        this._unloaded = true;
                    if (this._timerEnabled && !this._unloaded)
                        if (this._uiStateService.isAppVisible && !this._frozen) {
                            if (this._lastArtShow >= this.artShowPeriod && this._largeArt && this.largeArtUrls) {
                                if (!this.artVisible) {
                                    this._lastArtSwap = 0;
                                    this._randomizeArt();
                                    this._setArtVisible(true);
                                    this._toggleCells(MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.hide)
                                }
                                else if (this.artVisible && this._lastArtSwap >= this.artSwapPeriod) {
                                    this._lastArtSwap = 0;
                                    this._randomizeArt()
                                }
                                else if (this.artVisible && this._cells && this._cells.length > 0 && this._lastArtShow >= this.artShowPeriod + this.artVisiblePeriod) {
                                    this._setArtVisible(false);
                                    this._lastCellSwap = 0;
                                    this._toggleCells(MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.show);
                                    this._lastArtShow = 0;
                                    this._lastArtSwap = 0
                                }
                            }
                            else if (this._cells && this._cells.length > 0 && !this.artVisible && this._lastCellSwap >= this.cellSwapPeriod) {
                                this._lastCellSwap = 0;
                                var randomCell = this._cells[Math.floor(Math.random() * this._cells.length)];
                                this._setCellArt(randomCell)
                            }
                            if (this.colorChangePeriod > 0 && this._lastColorChange > this.colorChangePeriod) {
                                this._lastColorChange = 0;
                                this._randomizeLayerColors()
                            }
                        }
                }, _startRenderLoop: function _startRenderLoop() {
                    this._lastInterval = (new Date).getTime();
                    window.requestAnimationFrame(this._renderLoop)
                }, _lastInterval: 0, _renderLoop: function _renderLoop() {
                    this._renderLoopQueued = false;
                    if (this._frozen || this._unloaded || !this._timerEnabled)
                        return;
                    var elapsedTime = ((new Date).getTime()) - this._lastInterval;
                    if (elapsedTime > 20) {
                        this._lastInterval = (new Date).getTime();
                        if (!this._animationPaused) {
                            this._lastTimerTick += elapsedTime;
                            if (this._lastTimerTick > this.timerTickInterval) {
                                this._updateTimerValues();
                                this._timerTick();
                                this._lastTimerTick = 0
                            }
                            this._updateStartTime += elapsedTime;
                            if (this._cellsToUpdate && this._cellsToUpdate.length > 0) {
                                var updateInfo = this._cellsToUpdate[0];
                                if (updateInfo.sleep <= this._updateStartTime) {
                                    this._setCellArt(updateInfo.cell);
                                    this._cellsToUpdate.shift()
                                }
                            }
                        }
                    }
                    window.requestAnimationFrame(this._renderLoop);
                    this._renderLoopQueued = true
                }, _updateTimerValues: function _updateTimerValues() {
                    this._lastArtShow += this.timerTickInterval;
                    this._lastArtSwap += this.timerTickInterval;
                    this._lastCellSwap += this.timerTickInterval;
                    this._lastColorChange += this.timerTickInterval
                }, _toggleCells: function _toggleCells(show) {
                    this._cells.forEach(function(cell, index) {
                        var sleep = (cell.x + cell.x + cell.width + cell.y + cell.y + cell.height) / 2;
                        cell.toggleCell(show, sleep)
                    }.bind(this))
                }, _cellsToUpdate: null, _updateStartTime: 0, _updateCellArts: function _updateCellArts() {
                    if (this._cellsToUpdate && this._cellsToUpdate.length > 0)
                        return;
                    this._cellsToUpdate = [];
                    this._cells.forEach(function(cell, index) {
                        var sleep = (cell.x + cell.x + cell.width + cell.y + cell.y + cell.height) / 2;
                        this._cellsToUpdate.push({
                            sleep: sleep, cell: cell
                        })
                    }.bind(this))
                }, _randomizeLayerColor: function _randomizeLayerColor() {
                    var r1 = Math.floor(Math.random() * 255);
                    var g1 = Math.floor(Math.random() * 255);
                    var b1 = Math.floor(Math.random() * 255);
                    var a1 = 1;
                    return {
                            r: r1, g: g1, b: b1, a: a1
                        }
                }, _randomizeLayerColors: function _randomizeLayerColors() {
                    var color = this._randomizeLayerColor();
                    var newColor = "rgba(" + color.r + "," + color.g + "," + color.b + "," + color.a + ")";
                    if (this.backgroundColor)
                        this.backdropColor = "rgba(" + color.r + "," + color.g + "," + color.b + ", .3)";
                    this._colorsToUpdate = [];
                    this._cells.forEach(function(cell, index) {
                        var sleep = (cell.x + cell.x + cell.width + cell.y + cell.y + cell.height) / 2;
                        cell.setOverlay(newColor, 0.5, sleep + "ms")
                    }.bind(this));
                    if (this._largeArt)
                        this._largeArt.setOverlay(newColor, 0.3)
                }, _randomizeArt: function _randomizeArt() {
                    if (this.largeArtUrls) {
                        if (this._artIndex < 0)
                            this._artIndex = Math.floor(Math.random() * this.largeArtUrls.length);
                        else {
                            if (this.largeArtUrls.length === 1 && this._largeArt.currentImageUrl)
                                return false;
                            this._artIndex++;
                            if (this._artIndex >= this.largeArtUrls.length)
                                this._artIndex = 0
                        }
                        var imageUrl = this.largeArtUrls[this._artIndex];
                        this._setLargeArt(imageUrl);
                        this._toggleCells(MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.hide);
                        return true
                    }
                    else {
                        this._setLargeArt(null);
                        return false
                    }
                }, _setLargeArt: function _setLargeArt(art) {
                    if (this._largeArt)
                        this._largeArt.setArt(art)
                }
        }, {
            cellIdList: null, largeArtUrls: null, wallVisible: true, artVisible: false, backdropColor: "rgba(0,0,0,0.3)"
        })})
})()
})();
/* >>>>>>/controls/mediaimagecollage.js:22366 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {MediaImageCollage: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ImageCollage", null, function mediaImageCollageConstructor(element, options) {
            this.timerTickInterval = 10000;
            this.timerDelayPeriod = 10 + Math.floor(Math.random() * 60000);
            this.cellAddPeriod = 0;
            this.cellSwapPeriod = 10000;
            this.artShowPeriod = 20000;
            this.artSwapPeriod = 40000;
            this.artVisiblePeriod = 40000;
            this.colorChangePeriod = 0;
            this.cellRepeatBuffer = 0;
            this._cellDefinitions = [];
            this._cellDefinitions.push(this._6x6CellDefinitions1);
            this._cellDefinitions.push(this._6x6CellDefinitions2);
            this._cellDefinitions.push(this._6x6CellDefinitions3);
            this._cellDefinitions.push(this._6x6CellDefinitions4);
            if (MS.Entertainment.Utilities.isApp2)
                this.backgroundColor = "#333333";
            else
                this.backgroundColor = "#ffffff"
        }, {
            _cellDefinitions: null, _4x4CellDefinitions: [{
                        ordinal: 1, x: 0, y: 0, size: 1
                    }, {
                        ordinal: 2, x: 0, y: 1, size: 1
                    }, {
                        ordinal: 3, x: 1, y: 0, size: 1
                    }, {
                        ordinal: 4, x: 1, y: 1, size: 1
                    }, ], _6x6CellDefinitions1: [{
                        ordinal: 1, x: 0, y: 0, size: 2
                    }, {
                        ordinal: 2, x: 2, y: 0, size: 1
                    }, {
                        ordinal: 3, x: 2, y: 1, size: 1
                    }, {
                        ordinal: 4, x: 0, y: 2, size: 1
                    }, {
                        ordinal: 5, x: 1, y: 2, size: 1
                    }, {
                        ordinal: 6, x: 2, y: 2, size: 1
                    }, ], _6x6CellDefinitions2: [{
                        ordinal: 1, x: 0, y: 0, size: 1
                    }, {
                        ordinal: 2, x: 1, y: 0, size: 1
                    }, {
                        ordinal: 3, x: 2, y: 0, size: 1
                    }, {
                        ordinal: 4, x: 0, y: 1, size: 2
                    }, {
                        ordinal: 5, x: 2, y: 1, size: 1
                    }, {
                        ordinal: 6, x: 2, y: 2, size: 1
                    }, ], _6x6CellDefinitions3: [{
                        ordinal: 1, x: 0, y: 0, size: 1
                    }, {
                        ordinal: 2, x: 1, y: 0, size: 2
                    }, {
                        ordinal: 3, x: 0, y: 1, size: 1
                    }, {
                        ordinal: 4, x: 0, y: 2, size: 1
                    }, {
                        ordinal: 5, x: 1, y: 2, size: 1
                    }, {
                        ordinal: 6, x: 2, y: 2, size: 1
                    }, ], _6x6CellDefinitions4: [{
                        ordinal: 1, x: 0, y: 0, size: 1
                    }, {
                        ordinal: 2, x: 1, y: 0, size: 1
                    }, {
                        ordinal: 3, x: 2, y: 0, size: 1
                    }, {
                        ordinal: 4, x: 0, y: 1, size: 1
                    }, {
                        ordinal: 5, x: 1, y: 1, size: 2
                    }, {
                        ordinal: 6, x: 0, y: 2, size: 1
                    }, ], _queryPromise: null, _imageCachePromises: null, _maxCellWidth: 0, _maxCellHeight: 0, _uiStateService: null, _networkStatusBinding: null, _delayInitializeFailed: false, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.ImageCollage.prototype.initialize.apply(this, arguments);
                    this._uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    this._imageCachePromises = [];
                    this.artVisible = false;
                    if (this._delayInitializeFailed)
                        this._delayInitialized()
                }, _delayInitialized: function _delayInitialized() {
                    if (!this._initialized) {
                        this._delayInitializeFailed = true;
                        return
                    }
                    MS.Entertainment.UI.Controls.ImageCollage.prototype._delayInitialized.apply(this, arguments);
                    this.bind("media", this._mediaChanged.bind(this))
                }, unload: function unload() {
                    if (this._queryPromise)
                        this._queryPromise.cancel();
                    if (this._imageCachePromises)
                        for (var i = 0; i < this._imageCachePromises.length; i++)
                            this._imageCachePromises[i].cancel();
                    this.cellIdList = null;
                    if (this._networkStatusBinding) {
                        this._networkStatusBinding.cancel();
                        this._networkStatusBinding = null
                    }
                    MS.Entertainment.UI.Controls.ImageCollage.prototype.unload.call(this)
                }, _mediaChanged: function _mediaChanged() {
                    if (!this._networkStatusBinding)
                        switch (this._uiStateService.networkStatus) {
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.onDemand:
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.localOnly:
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.none:
                                this._networkStatusBinding = WinJS.Binding.bind(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {networkStatus: this._networkStatusChanged.bind(this)});
                                break
                        }
                    this._loadImages()
                }, _networkStatusChanged: function _networkStatusChanged(newValue, oldValue) {
                    if (oldValue === undefined)
                        return;
                    if (this._networkStatusBinding) {
                        this._networkStatusBinding.cancel();
                        this._networkStatusBinding = null
                    }
                    this._mediaChanged()
                }, _loadImages: function _loadImages() {
                    if (!MS.Entertainment.Utilities.checkIfInDom(this.domElement))
                        return
                }, _setCellDefinitions: function _setCellDefinitions(count) {
                    if (count > 6 && this.useDynamicLayouts) {
                        this.rows = 3;
                        this.columns = 3;
                        var definitionIndex = Math.floor(Math.random() * this._cellDefinitions.length);
                        this.cellDefinitions = this._cellDefinitions[definitionIndex];
                        this._maxCellWidth = this.size.width / 3 * 2;
                        this._maxCellHeight = this.size.height / 3 * 2
                    }
                    else {
                        this.rows = 2;
                        this.columns = 2;
                        this.cellDefinitions = this._4x4CellDefinitions;
                        this._maxCellWidth = this.size.width / 2;
                        this._maxCellHeight = this.size.height / 2
                    }
                    this._blockSizeInPixels = {
                        x: this.size.width, y: this.size.height
                    };
                    this._blockSizeInCells = {
                        x: this.columns, y: this.rows
                    };
                    this._cellSizeInPixels = {
                        x: this.size.width / this.columns, y: this.size.height / this.rows
                    };
                    this._cellOffsetInPixels = this.cellOffset
                }, _setUrlFromCellId: function _getUrlFromCellId(media, cell) {
                    if (!MS.Entertainment.Utilities.checkIfInDom(this.domElement)) {
                        this.unload();
                        return
                    }
                    if (typeof media === "string") {
                        if (cell)
                            cell.setArt(media);
                        return media
                    }
                    if (media.cachedImageUrl) {
                        if (cell)
                            cell.setArt(media.cachedImageUrl);
                        return media.cachedImageUrl
                    }
                    var expectedWidth = Math.max(this._maxCellWidth, this.minimumSize.width);
                    var expectedHeight = Math.max(this._maxCellHeight, this.minimumSize.height);
                    var imageCachePromise = MS.Entertainment.UI.Shell.ImageLoader.getServiceImageUrl(media, expectedWidth, expectedHeight).then(function checkResult(url) {
                            media.cachedImageUrl = url;
                            if (url === MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album)
                                return null;
                            if (cell)
                                cell.setArt(media.cachedImageUrl);
                            return media.cachedImageUrl
                        });
                    if (imageCachePromise) {
                        this._imageCachePromises.push(imageCachePromise);
                        return imageCachePromise
                    }
                }
        }, {
            media: null, size: {
                    width: 135, height: 135
                }, minimumSize: {
                    width: 0, height: 0
                }, columns: 2, rows: 2, useDynamicLayouts: true, cellOffset: 0
        })})
})()
})();
/* >>>>>>/controls/music/playlistimagecollage.js:22560 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PlaylistImageCollage: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.MediaImageCollage", null, null, {
            _albumResultsLength: -1, _frozen: false, _mediaItemBinding: null, _focused: false, _unfocusedArt: null, _savedAlbums: null, _focusBindings: null, _focusInPromise: null, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.MediaImageCollage.prototype.initialize.apply(this, arguments);
                    if (this.changeOnFocus) {
                        var focusedItem = MS.Entertainment.Utilities.findParentElementByClassName(this.domElement, "win-focusable");
                        if (document.activeElement === focusedItem)
                            this._onFocusIn();
                        else
                            this._onFocusOut();
                        this._focusBindings = MS.Entertainment.Utilities.addEventHandlers(focusedItem, {
                            focusin: this._onFocusIn.bind(this), focusout: this._onFocusOut.bind(this)
                        })
                    }
                    this.timerTickInterval = 30000;
                    this.timerDelayPeriod = Math.floor(Math.random() * this.timerTickInterval);
                    this.cellAddPeriod = 0;
                    this.cellSwapPeriod = 20 + Math.floor(Math.random() * this.timerTickInterval - 20);
                    this.artShowPeriod = 30000;
                    this.artSwapPeriod = 11000;
                    this.artVisiblePeriod = 30000;
                    this.colorChangePeriod = 0;
                    this.cellRepeatBuffer = 0;
                    this.minimumSize = {
                        width: 60, height: 60
                    };
                    if (this.media && this.media.libraryId === -1)
                        this._mediaItemBinding = WinJS.Binding.bind(this.media, {libraryId: function libraryIdChanged() {
                                if (this.media.libraryId !== -1) {
                                    this._mediaItemBinding.cancel();
                                    this._mediaItemBinding = null;
                                    if (!this._frozen)
                                        this._loadImages()
                                }
                            }.bind(this)})
                }, unload: function unload() {
                    if (this._focusBindings) {
                        this._focusBindings.cancel();
                        this._focusBindings = null
                    }
                    if (this._mediaItemBinding) {
                        this._mediaItemBinding.cancel();
                        this._mediaItemBinding = null
                    }
                    if (this._focusInPromise) {
                        this._focusInPromise.cancel();
                        this._focusInPromise = null
                    }
                    MS.Entertainment.UI.Controls.MediaImageCollage.prototype.unload.call(this)
                }, freeze: function freeze() {
                    this._frozen = true;
                    MS.Entertainment.UI.Controls.MediaImageCollage.prototype.freeze.call(this)
                }, thaw: function thaw() {
                    this._frozen = false;
                    if (this.media && MS.Entertainment.Utilities.isValidLibraryId(this.media.libraryId) && (this._albumResultsLength <= 0 || this.refreshOnThaw))
                        this._loadImages();
                    MS.Entertainment.UI.Controls.MediaImageCollage.prototype.thaw.call(this)
                }, _loadImages: function _loadImages() {
                    if (!this.media)
                        return;
                    var hydratePromise = WinJS.Promise.as();
                    if (!MS.Entertainment.Utilities.isValidLibraryId(this.media.libraryId) && this.media.hydrate)
                        hydratePromise = this.media.hydrate();
                    hydratePromise.then(function renderAlbums() {
                        return WinJS.Promise.timeout(this.loadDelay)
                    }.bind(this)).done(function getAlbums() {
                        if (this._unloaded || (!MS.Entertainment.Utilities.isValidLibraryId(this.media.libraryId) && !this.media.hasServiceId))
                            return;
                        if (this._queryPromise) {
                            this._queryPromise.cancel();
                            this._queryPromise = null
                        }
                        if (MS.Entertainment.Utilities.isValidLibraryId(this.media.libraryId)) {
                            var localAlbumQuery;
                            localAlbumQuery = new MS.Entertainment.Data.Query.libraryAlbums;
                            localAlbumQuery.aggregateChunks = false;
                            localAlbumQuery.chunkSize = 8;
                            localAlbumQuery.playlistId = this.media.libraryId;
                            this._queryPromise = localAlbumQuery.execute().then(function returnItems(q) {
                                if (q.result && q.result.items)
                                    return q.result.items.toArray(0, 8);
                                return null
                            })
                        }
                        else if (this.media.albumImages)
                            this._queryPromise = WinJS.Promise.as(this.media.albumImages);
                        if (this._queryPromise)
                            this._queryPromise.done(function(itemArray) {
                                if (itemArray) {
                                    if (this._unloaded)
                                        return;
                                    if (this._savedAlbums) {
                                        if (this._savedAlbums.length === itemArray.length) {
                                            var sameAlbums = true;
                                            for (var j = 0; j < itemArray.length; j++)
                                                if (!itemArray[j].isEqual || !itemArray[j].isEqual(this._savedAlbums[j])) {
                                                    sameAlbums = false;
                                                    break
                                                }
                                            if (sameAlbums)
                                                return
                                        }
                                        this._clearCells();
                                        this._cellUsedCount = 0;
                                        this._unfocusedArt = null
                                    }
                                    if (this.refreshOnThaw)
                                        this._savedAlbums = itemArray;
                                    this._albumResultsLength = itemArray.length;
                                    this._setCellDefinitions(itemArray.length);
                                    if (itemArray.length === 0 && this.useDefaultImages)
                                        if (this.size.width > 316 && this.size.height > 316 || this.changeOnFocus)
                                            itemArray.push(MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.playlistLarge);
                                        else
                                            itemArray.push(MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.playlist);
                                    if (itemArray.length < 4) {
                                        var modifiedAlbums = [];
                                        switch (itemArray.length) {
                                            case 1:
                                                modifiedAlbums.push(itemArray[0]);
                                                break;
                                            case 2:
                                                modifiedAlbums.push(itemArray[0]);
                                                modifiedAlbums.push(itemArray[0]);
                                                modifiedAlbums.push(itemArray[1]);
                                                modifiedAlbums.push(itemArray[1]);
                                                break;
                                            case 3:
                                                modifiedAlbums.push(itemArray[0]);
                                                modifiedAlbums.push(itemArray[1]);
                                                modifiedAlbums.push(itemArray[2]);
                                                modifiedAlbums.push(itemArray[0]);
                                                break
                                        }
                                        this.cellIdList = modifiedAlbums
                                    }
                                    else
                                        this.cellIdList = itemArray
                                }
                                else
                                    this.cellIdList = [MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.playlist];
                                this._queryPromise = null
                            }.bind(this))
                    }.bind(this))
                }, _setCellImages: function _setCellImages() {
                    var getUnfocusedImageUrl = WinJS.Promise.as();
                    if (this._albumResultsLength >= 0) {
                        if (this.domElement && this.domElement.clientWidth && this.domElement.clientHeight)
                            this.size = {
                                width: this.domElement.clientWidth, height: this.domElement.clientHeight
                            };
                        if (this.changeOnFocus && !this._unfocusedArt) {
                            this._maxCellWidth = this.size.width;
                            this._maxCellHeight = this.size.height;
                            if (this.cellIdList && this.cellIdList.length)
                                getUnfocusedImageUrl = WinJS.Promise.as(this._setUrlFromCellId(this.cellIdList[0]))
                        }
                        this._setCellDefinitions(this._albumResultsLength)
                    }
                    var originalArguments = arguments;
                    getUnfocusedImageUrl.done(function setUnfocusedImage(imageUrl) {
                        if (imageUrl)
                            this._unfocusedArt = imageUrl;
                        else if (imageUrl === null && !this._unfocusedArt)
                            this._unfocusedArt = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album;
                        if (!this._focused && this._unfocusedArt) {
                            if (!this.largeArtUrls || this.largeArtUrls[0] !== this._unfocusedArt)
                                this.largeArtUrls = [this._unfocusedArt]
                        }
                        else
                            MS.Entertainment.UI.Controls.ImageCollage.prototype._setCellImages.apply(this, originalArguments)
                    }.bind(this), function error() {
                        MS.Entertainment.UI.Controls.ImageCollage.prototype._setCellImages.apply(this, originalArguments)
                    }.bind(this))
                }, _onFocusIn: function _onFocusIn() {
                    if (this._focusInPromise || this._albumResultsLength === 0)
                        return;
                    this._focusInPromise = WinJS.Promise.timeout(250).then(function updateFocus() {
                        this._focused = true;
                        WinJS.Utilities.removeClass(this.wallContainer, "hideFromDisplay");
                        this._setArtVisible(false);
                        this._timerEnabled = false;
                        if (!this._cells || this._cells.length === 0)
                            this._setCellImages();
                        this._focusInPromise = null
                    }.bind(this))
                }, _onFocusOut: function _onFocusOut() {
                    if (this._focusInPromise) {
                        this._focusInPromise.cancel();
                        this._focusInPromise = null
                    }
                    this._focused = false;
                    if (this._unfocusedArt) {
                        if (!this.largeArtUrls)
                            this.largeArtUrls = [this._unfocusedArt];
                        WinJS.Utilities.addClass(this.wallContainer, "hideFromDisplay")
                    }
                    this._setArtVisible(true)
                }, _toggleCells: function _toggleCells(show) {
                    if (this.changeOnFocus) {
                        if (show === MS.Entertainment.UI.Controls.ImageCollageCell.toggleCellState.show)
                            this._cells.forEach(function(cell) {
                                var sleep = (cell.width + cell.height) / 4;
                                cell.toggleCell(show, sleep)
                            }.bind(this))
                    }
                    else
                        MS.Entertainment.UI.Controls.ImageCollage.prototype._toggleCells.apply(this, arguments)
                }
        }, {
            size: {
                width: 135, height: 135
            }, columns: 2, rows: 2, changeOnFocus: false, refreshOnThaw: false, cellOffset: 0, useDefaultImages: true, loadDelay: 500
        })})
})()
})();
