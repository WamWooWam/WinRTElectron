/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* >>>>>>/framework/acquisitiondata.js:2 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var Utilities;
        (function(Utilities) {
            var AcquisitionContext = (function() {
                    function AcquisitionContext(){}
                    AcquisitionContext.Collection = "Collection";
                    AcquisitionContext.ExplorerFile = "ExplorerFile";
                    AcquisitionContext.SmartDJ = "SmartDJ";
                    AcquisitionContext.Store = "Store";
                    AcquisitionContext.PlayTo = "PlayTo";
                    return AcquisitionContext
                })();
            Utilities.AcquisitionContext = AcquisitionContext;
            var AcquisitionContextType = (function() {
                    function AcquisitionContextType(){}
                    AcquisitionContextType.Album = "Album";
                    AcquisitionContextType.Artist = "MusicArtist";
                    AcquisitionContextType.Genre = "Genre";
                    AcquisitionContextType.PlayAll = "PlayAll";
                    AcquisitionContextType.Playlist = "MusicPlaylist";
                    AcquisitionContextType.Track = "Track";
                    AcquisitionContextType.MusicVideo = "MusicVideo";
                    AcquisitionContextType.Video = "Video";
                    AcquisitionContextType.TVSeries = "TVSeries";
                    return AcquisitionContextType
                })();
            Utilities.AcquisitionContextType = AcquisitionContextType;
            var AcquisitionData = (function() {
                    function AcquisitionData(acquisitionContext, acquisitionContextType, acquisitionContextID, acquisitionAdditionalContext) {
                        this.acquisitionContext = acquisitionContext;
                        this.acquisitionContextType = acquisitionContextType;
                        this.acquisitionContextID = acquisitionContextID;
                        this.acquisitionAdditionalContext = acquisitionAdditionalContext
                    }
                    return AcquisitionData
                })();
            Utilities.AcquisitionData = AcquisitionData;
            function getAcquisitionContextFromEnum(acquisitionContextEnum) {
                var acquisitionContext;
                switch (acquisitionContextEnum) {
                    case Microsoft.Entertainment.Platform.AcquisitionContext.collection:
                        acquisitionContext = MS.Entertainment.Utilities.AcquisitionContext.Collection;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContext.explorerFile:
                        acquisitionContext = MS.Entertainment.Utilities.AcquisitionContext.ExplorerFile;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContext.smartDJ:
                        acquisitionContext = MS.Entertainment.Utilities.AcquisitionContext.SmartDJ;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContext.store:
                        acquisitionContext = MS.Entertainment.Utilities.AcquisitionContext.Store;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContext.playTo:
                        acquisitionContext = MS.Entertainment.Utilities.AcquisitionContext.PlayTo;
                        break;
                    default:
                        MS.Entertainment.fail("Failed to map acquisitionContextEnum to valid AcquisitionContext.  enum: " + acquisitionContextEnum);
                        break
                }
                return acquisitionContext
            }
            Utilities.getAcquisitionContextFromEnum = getAcquisitionContextFromEnum;
            function getAcquisitionContextTypeFromEnum(acquisitionContextTypeEnum) {
                var acquisitionContextType;
                switch (acquisitionContextTypeEnum) {
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.album:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Album;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.artist:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Artist;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.genre:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Genre;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.playAll:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.PlayAll;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.playlist:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Playlist;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.track:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Track;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.musicVideo:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.MusicVideo;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.video:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.Video;
                        break;
                    case Microsoft.Entertainment.Platform.AcquisitionContextType.tvSeries:
                        acquisitionContextType = MS.Entertainment.Utilities.AcquisitionContextType.TVSeries;
                        break;
                    default:
                        MS.Entertainment.fail("Failed to map acquisitionContextTypeEnum to valid AcquisitionContextType.  enum: " + acquisitionContextTypeEnum);
                        break
                }
                return acquisitionContextType
            }
            Utilities.getAcquisitionContextTypeFromEnum = getAcquisitionContextTypeFromEnum
        })(Utilities = Entertainment.Utilities || (Entertainment.Utilities = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/framework/imageidtypes.js:111 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment", {
        ImageRequested: {
            undefinedRequestedImage: Microsoft.Entertainment.RequestedImageType.undefinedRequestedImage, primaryImage: Microsoft.Entertainment.RequestedImageType.primaryImage, backgroundImage: Microsoft.Entertainment.RequestedImageType.backgroundImage, xboxBackgroundImage: Microsoft.Entertainment.RequestedImageType.xboxBackgroundImage, albumImage: Microsoft.Entertainment.RequestedImageType.albumImage
        }, ImageContentType: {
                none: "", jpeg: "image/jpeg", png: "image/png"
            }, ImageFormat: {
                gif: "gif", jpeg: "jpg", png: "png"
            }, ImageSource: {
                noAutoGenerated: "-generated", noUserGenerated: "-usergeneratedcontent", noGenerated: "-generated-usergeneratedcontent"
            }
    })
})()
})();
/* >>>>>>/framework/contentnotification.js:130 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.ContentNotification");
    WinJS.Namespace.define("MS.Entertainment.UI.ContentNotification", {
        NotificationType: {
            error: 0, marketplaceTransferStatus: "100", marketplaceDownloadStatus: "101", serviceTransferStatus: "200", serviceDownloadStatus: "201", gameBeacon: 500, gameFriendsOnline: 501, gameFriendsRecentlyPlayed: 502, offlineAvailabilityLabel: 700
        }, NotificationModification: MS.Entertainment.UI.Framework.define(function notificationModificationConstructor(resultModifier, idGetter) {
                if (!resultModifier)
                    throw new Error("The resultModifier parameter of NotificationModification's constructor is not optional.");
                if (!idGetter)
                    throw new Error("The idGetter parameter of NotificationModification's constructor is not optional.");
                this._notificationArrayTable = {};
                this._resultModifier = resultModifier;
                this._idGetter = idGetter
            }, {
                _notificationArrayTable: null, _resultModifier: null, _idGetter: null, modifyQuery: function modifyQuery(query) {
                        var modification = WinJS.Binding.unwrap(this);
                        MS.Entertainment.UI.ContentNotification.assert(query.status === MS.Entertainment.Data.queryStatus.idle, "modifyQuery() should only be called on queries that have never run.  Results will be unexpected if the query is already in-flight or complete before it is modified.");
                        if (query.status !== MS.Entertainment.Data.queryStatus.idle)
                            return;
                        MS.Entertainment.UI.ContentNotification.assert(query instanceof MS.Entertainment.Data.AugmentQuery || query instanceof MS.Entertainment.Data.AugmentationWrapperQuery, "Non-AugmenterQuery passed into modifyQuery().");
                        if (query instanceof MS.Entertainment.Data.AugmentQuery || query instanceof MS.Entertainment.Data.AugmentationWrapperQuery)
                            query.resultAugmentation = modification._resultModifier(query.resultAugmentation, {contentNotifications: MS.Entertainment.Data.Property.hydratedIfAvailable({
                                    get: function getContentNotifications() {
                                        var id = modification._idGetter(this);
                                        return id ? modification._getNotifications(id) : null
                                    }, set: function setContentNotifications(value) {
                                            var id = modification._idGetter(this);
                                            if (id)
                                                modification._setNotifications(id, value)
                                        }
                                })})
                    }, modifyItem: function modifyItem(item) {
                        var modification = WinJS.Binding.unwrap(this);
                        var propertyDescriptor = {
                                get: function get() {
                                    var id = modification._idGetter(this);
                                    return id ? modification._getNotifications(id) : null
                                }, set: function setContentNotifications(value) {
                                        var id = modification._idGetter(this);
                                        if (id)
                                            this._setNotifications(id, value)
                                    }, enumerable: true, configurable: true
                            };
                        Object.defineProperty(item, "contentNotifications", propertyDescriptor);
                        if (item._backingData)
                            Object.defineProperty(item._backingData, "contentNotifications", propertyDescriptor)
                    }, _getNotifications: function _getNotifications(id) {
                        var unwrappedThis = WinJS.Binding.unwrap(this);
                        if (!unwrappedThis._notificationArrayTable[id])
                            unwrappedThis._notificationArrayTable[id] = new MS.Entertainment.UI.ContentNotification.ObservableNotificationArray;
                        return unwrappedThis._notificationArrayTable[id]
                    }, _setNotifications: function _setNotifications(id, value) {
                        var unwrappedThis = WinJS.Binding.unwrap(this);
                        unwrappedThis._notificationArrayTable[id] = value
                    }, createSender: function createSender() {
                        var unwrappedThis = WinJS.Binding.unwrap(this);
                        return new MS.Entertainment.UI.ContentNotification.NotificationSender(unwrappedThis)
                    }
            }), NotificationSender: MS.Entertainment.UI.Framework.define(function notificationSenderConstructor(modification) {
                this._modification = modification
            }, {
                _modification: null, sendNotification: function sendNotification(id, type, notification) {
                        var unwrappedThis = WinJS.Binding.unwrap(this);
                        unwrappedThis._modification._getNotifications(id).sendNotification(type, notification)
                    }
            }), ObservableNotificationArray: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ObservableArray", function observableNotificationArrayConstructor() {
                MS.Entertainment.ObservableArray.apply(this, arguments)
            }, {
                sendNotification: function sendNotification(type, notification) {
                    if (MS.Entertainment.Utilities.isApp2 && type === MS.Entertainment.UI.ContentNotification.NotificationType.offlineAvailabilityLabel)
                        return;
                    var unwrappedThis = WinJS.Binding.unwrap(this);
                    var i,
                        item;
                    var existingItem = null;
                    for (i = 0; i < unwrappedThis.length; i++) {
                        item = unwrappedThis.item(i);
                        if (item.type === type) {
                            if (notification)
                                existingItem = item;
                            else
                                unwrappedThis.removeAt(i);
                            break
                        }
                        if (item.type >= type)
                            break
                    }
                    if (notification)
                        if (existingItem) {
                            existingItem.shortText = notification.shortText;
                            existingItem.longText = notification.longText;
                            existingItem.icon = notification.icon
                        }
                        else {
                            notification.type = type;
                            unwrappedThis.insert(i, notification)
                        }
                }, clear: function clear() {
                        var unwrappedThis = WinJS.Binding.unwrap(this);
                        unwrappedThis.splice(0, unwrappedThis.length)
                    }
            }), Notification: MS.Entertainment.defineObservable(function notificationConstructor(icon, shortText, longText, params) {
                this.icon = icon;
                this.shortText = shortText;
                this.longText = longText;
                this.params = params
            }, {
                icon: String.empty, shortText: String.empty, longText: String.empty, params: null
            }), directResult: function directResult() {
                return function modifyAugmentationDirectly(augmentation, definition) {
                        return MS.Entertainment.Data.derive(augmentation || null, null, definition)
                    }
            }, propertyResult: function propertyResult(propertyName, source, baseAugmentation) {
                return function modifyAugmentationProperty(augmentation, definition) {
                        var rootDefinition = {};
                        var newAugmentation = MS.Entertainment.Data.derive(baseAugmentation || null, null, definition);
                        rootDefinition[propertyName] = MS.Entertainment.Data.Property.augment(source, newAugmentation);
                        return MS.Entertainment.Data.derive(augmentation, null, rootDefinition)
                    }
            }, listResult: function listResult() {
                return MS.Entertainment.Data.AugmentQuery.modifyListResultAugmentation
            }, idFromProperty: function idFromProperty(propertyName) {
                var propertyNameString = propertyName.toString();
                return function propertyID_getID(media) {
                        return media[propertyNameString]
                    }
            }
    })
})()
})();
/* >>>>>>/framework/urifactory.js:265 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.Utilities", {UriFactory: MS.Entertainment.UI.Framework.define(function uriFactory() {
            throw new Error("UriFactory is a static class");
        }, {}, {
            create: function create(endpointId, suffixes, queryArguments) {
                if (!endpointId)
                    throw new Error("No endpoint was supplied");
                var separator = "/";
                var uri = String.isString(endpointId) ? endpointId : MS.Entertainment.Endpoint.load(endpointId);
                if (Array.isArray(suffixes))
                    suffixes.forEach(function(uriComponent) {
                        if (uriComponent)
                            uri = uri + separator + window.encodeURIComponent(uriComponent)
                    });
                else if (suffixes)
                    if (suffixes[0] === separator)
                        uri = uri + window.encodeURI(suffixes);
                    else
                        uri = uri + separator + window.encodeURI(suffixes);
                return MS.Entertainment.Utilities.UriFactory.appendQuery(uri, queryArguments)
            }, appendQuery: function appendQuery(uri, queryArguments) {
                    if (!uri)
                        throw new Error("No uri was supplied");
                    if (queryArguments) {
                        var key;
                        var separator = uri.indexOf("?") >= 0 ? "&" : "?";
                        for (key in queryArguments)
                            if (queryArguments.hasOwnProperty(key)) {
                                uri = uri + separator + window.encodeURIComponent(key) + "=" + window.encodeURIComponent(queryArguments[key]);
                                separator = "&"
                            }
                    }
                    return uri
                }
        })})
})()
})();
/* >>>>>>/framework/data/listgrouper.js:307 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Data");

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var Data;
        (function(Data) {
            var GroupDataSourceProvider = (function(_super) {
                    __extends(GroupDataSourceProvider, _super);
                    function GroupDataSourceProvider(grouper, dataSource) {
                        _super.call(this, grouper, dataSource);
                        this._groupsList = null;
                        this._locked = false;
                        this._lowestInvalidItemIndex = -1;
                        this._onReset();
                        this._groupHintsDispatchCount = -1
                    }
                    GroupDataSourceProvider.prototype.dispose = function() {
                        _super.prototype.dispose.call(this);
                        if (this._groupsList) {
                            this._groupsList.signalHintsFailed(new Error("Data source provide disposed"));
                            this._groupsList.dispose()
                        }
                        if (this._listEventHandlers) {
                            this._listEventHandlers.cancel();
                            this._listEventHandlers = null
                        }
                    };
                    Object.defineProperty(GroupDataSourceProvider.prototype, "groups", {
                        get: function() {
                            return this._groupsList
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(GroupDataSourceProvider.prototype, "isInlineGrouper", {
                        get: function() {
                            return false
                        }, enumerable: true, configurable: true
                    });
                    GroupDataSourceProvider.prototype._insert = function(index, item, existingItems, updating) {
                        if (!item || (updating && item.group))
                            return index;
                        var newGroup = this._calculateAndApplyGroup(item);
                        var itemAfterIndex = updating ? index + 1 : index;
                        var itemBefore = existingItems(index - 1);
                        var itemBeforeUnknown = this._isUnknown(itemBefore);
                        var itemAfter = existingItems(itemAfterIndex);
                        if (!this.isValidGroup(newGroup)) {
                            if (!updating)
                                this._insertItem(index, item, itemBefore, itemAfter);
                            return index
                        }
                        var oldItem = null;
                        var oldGroup = null;
                        if (updating) {
                            oldItem = existingItems(index);
                            oldGroup = oldItem && oldItem.group
                        }
                        var itemBeforeNotMatch = this._isNotMatch(itemBefore, newGroup);
                        var itemAfterNotMatch = this._isNotMatch(itemAfter, newGroup);
                        var isKnownGroup = this._isKnownGroup(newGroup);
                        var areGroupsNotEqual = !this._areGroupsEqual(oldGroup, newGroup);
                        if (!updating) {
                            this._shiftHeaderRanges(index, true);
                            this._insertItem(index, item, itemBefore, itemAfter)
                        }
                        else if (oldGroup)
                            this._updateItem(index, item, itemBefore, itemAfter, oldGroup);
                        if (oldGroup && areGroupsNotEqual)
                            if (this._isNotMatch(itemBefore, oldGroup)) {
                                var oldGroupIndex = this.firstGroupItemIndexFromKey(oldGroup.key);
                                if (oldGroupIndex >= 0)
                                    this._removeHeader(oldGroupIndex, oldGroup);
                                if (this._isMatch(itemAfter, oldGroup))
                                    this._insertHeader(itemAfterIndex, oldGroup, itemBefore, itemAfter)
                            }
                            else if (isKnownGroup && itemBeforeNotMatch && newGroup && this._isMatch(itemAfter, newGroup)) {
                                var newGroupIndex = this.firstGroupItemIndexFromKey(newGroup.key);
                                if (newGroupIndex >= 0) {
                                    this._removeHeader(newGroupIndex, newGroup);
                                    isKnownGroup = false
                                }
                            }
                        if (updating && isKnownGroup)
                            this._updateHeaderIfNeeded(newGroup);
                        if (!updating && isKnownGroup) {
                            var firstGroupItemIndex = this.firstGroupItemIndexFromKey(newGroup.key);
                            if (firstGroupItemIndex > index) {
                                this._removeHeader(firstGroupItemIndex, newGroup);
                                isKnownGroup = false
                            }
                        }
                        if ((itemBeforeUnknown || itemBeforeNotMatch) && !isKnownGroup)
                            this._insertHeader(index, newGroup, itemBefore, itemAfter);
                        if (!updating)
                            this._invalidateItem(index);
                        this._dispatchChangesIfNoDataSource();
                        return index
                    };
                    GroupDataSourceProvider.prototype._remove = function(index, item, existingItems) {
                        var group = item && item.group;
                        var emptyGroup = false;
                        var itemBefore = existingItems(index - 1);
                        var itemAfter = existingItems(index + 1);
                        var missingInformation = this._isUnknown(item) || this._isUnknown(itemBefore) || this._isUnknown(itemAfter);
                        var groupIndex = this.groupIndexFromSourceIndex(index);
                        var groupFromGroupIndex = null;
                        if (groupIndex >= 0)
                            groupFromGroupIndex = this._groupFromGroupIndex(groupIndex);
                        if (missingInformation) {
                            var groupSize = this.groupSizeFromGroupIndex(groupIndex);
                            if (groupSize <= 1 && groupFromGroupIndex) {
                                group = groupFromGroupIndex;
                                emptyGroup = true
                            }
                        }
                        else if (this._isKnownGroup(group)) {
                            var itemBeforeNotMatch = this._isNotMatch(itemBefore, item.group);
                            var itemAfterNotMatch = this._isNotMatch(itemAfter, item.group);
                            if ((!groupFromGroupIndex || this._areGroupsEqual(groupFromGroupIndex, item.group)) && itemBeforeNotMatch && itemAfterNotMatch)
                                emptyGroup = true
                        }
                        if (emptyGroup)
                            this._removeHeader(index, group);
                        this._shiftHeaderRanges(index + 1, false);
                        this._removeItem(index);
                        this._invalidateItem(index);
                        this._dispatchChangesIfNoDataSource();
                        return index
                    };
                    GroupDataSourceProvider.prototype._dataSourceBeginNotifications = function() {
                        this._locked = true
                    };
                    GroupDataSourceProvider.prototype._dataSourceEndNotifications = function() {
                        this._locked = false;
                        this._commit()
                    };
                    GroupDataSourceProvider.prototype._commit = function() {
                        if (!this._locked) {
                            var startGroupIndex = -1;
                            if (this._lowestInvalidItemIndex >= 0)
                                startGroupIndex = this.groupIndexFromSourceIndex(this._lowestInvalidItemIndex);
                            if (startGroupIndex === 0)
                                this._reloadGroupList();
                            else if (startGroupIndex > 0)
                                for (var i = startGroupIndex; i >= 0; i++) {
                                    var group = this._groupFromGroupIndex(i);
                                    if (!group || !group.key)
                                        break;
                                    this._updateHeader(this.firstGroupItemIndexFromKey(group.key), group)
                                }
                            this._lowestInvalidItemIndex = -1;
                            this._dispatchChanges()
                        }
                    };
                    GroupDataSourceProvider.prototype._dispatchChangesIfNoDataSource = function() {
                        if (!this.dataSource)
                            this._dispatchChanges()
                    };
                    GroupDataSourceProvider.prototype._insertGroupHeaderFromGroupHint = function(groupHint, group) {
                        var index = this._sourceIndexToIndex(groupHint.data.firstItemIndexSourceHint);
                        this._insertHeaderIfNeeded(index, group, null, null)
                    };
                    GroupDataSourceProvider.prototype._onReset = function() {
                        var _this = this;
                        if (this._groupsList)
                            this._groupsList.clear();
                        else
                            this._groupsList = new GroupVirtualList;
                        this.dataSourceReady.then(function() {
                            if (_this.dataSource) {
                                var commit = _this._commit.bind(_this);
                                _this._listEventHandlers = MS.Entertainment.Utilities.addEventHandlers(_this.dataSource, {
                                    beginNotifications: _this._dataSourceBeginNotifications.bind(_this), endNotifications: _this._dataSourceEndNotifications.bind(_this), itemChanged: commit, itemInserted: commit, itemMoved: commit, itemRemoved: commit
                                });
                                return _this.dataSource.getGroupHints()
                            }
                        }).done(function() {
                            _this._groupsList.signalHintsLoaded()
                        }, function(error) {
                            _this._groupsList.signalHintsFailed(error)
                        })
                    };
                    GroupDataSourceProvider.prototype._reloadGroupList = function() {
                        this._pushPendingChange({change: "Reload"})
                    };
                    GroupDataSourceProvider.prototype._invalidateGroupList = function() {
                        this._pushPendingChange({change: "Invalidate"})
                    };
                    GroupDataSourceProvider.prototype._invalidateItem = function(itemIndex) {
                        if (this._lowestInvalidItemIndex < 0 || itemIndex < this._lowestInvalidItemIndex)
                            this._lowestInvalidItemIndex = itemIndex
                    };
                    GroupDataSourceProvider.prototype._onDispatchingChanges = function(changes) {
                        var _this = this;
                        this._groupsList.applyBatchChanges(changes.map(function(item) {
                            var adjusted = Object.create(item);
                            if (adjusted.value)
                                _this._addFirstItemIndexHint(adjusted.value);
                            adjusted.absoluteIndex = item.groupIndex;
                            return adjusted
                        }, this))
                    };
                    GroupDataSourceProvider.prototype._addFirstItemIndexHint = function(listItem) {
                        var _this = this;
                        if (!this.dataSource || !listItem)
                            return;
                        var groupKey = listItem.group && listItem.group.key;
                        MS.Entertainment.Data.Factory.ListItemWrapper.addFirstItemIndexHint(listItem, function() {
                            return _this.firstGroupItemIndexFromKey(groupKey)
                        });
                        MS.Entertainment.Data.Factory.ListItemWrapper.addFirstItemKey(listItem, function() {
                            var key = null;
                            if (_this.dataSource) {
                                var virtualList = _this.dataSource;
                                virtualList.keyFromIndex(_this.firstGroupItemIndexFromKey(groupKey));
                                key = virtualList.keyFromIndex
                            }
                            return key
                        });
                        listItem = null
                    };
                    return GroupDataSourceProvider
                })(Data.ListGrouperBase);
            Data.GroupDataSourceProvider = GroupDataSourceProvider;
            var GroupVirtualList = (function(_super) {
                    __extends(GroupVirtualList, _super);
                    function GroupVirtualList() {
                        _super.call(this);
                        this._hintsLoadedSignal = new MS.Entertainment.UI.Framework.Signal;
                        this.preventNotifications = true
                    }
                    GroupVirtualList.prototype.clear = function() {
                        _super.prototype.clear.call(this);
                        if (!this._hintsLoadedSignal)
                            this._hintsLoadedSignal = new MS.Entertainment.UI.Framework.Signal;
                        this.preventNotifications = true
                    };
                    GroupVirtualList.prototype.signalHintsLoaded = function() {
                        if (this._hintsLoadedSignal) {
                            this.preventNotifications = false;
                            this._hintsLoadedSignal.complete();
                            this._hintsLoadedSignal = null
                        }
                    };
                    GroupVirtualList.prototype.signalHintsFailed = function(error) {
                        if (this._hintsLoadedSignal) {
                            this.preventNotifications = false;
                            this._hintsLoadedSignal.error(error);
                            this._hintsLoadedSignal = null
                        }
                    };
                    GroupVirtualList.prototype._onGetCount = function() {
                        return WinJS.Promise.as(this._hintsLoadedSignal && this._hintsLoadedSignal.promise)
                    };
                    GroupVirtualList.prototype._onItemsFromIndex = function(index, countBefore, countAfter) {
                        return WinJS.Promise.as(this._hintsLoadedSignal && this._hintsLoadedSignal.promise)
                    };
                    return GroupVirtualList
                })(Data.VirtualList);
            Data.GroupVirtualList = GroupVirtualList
        })(Data = Entertainment.Data || (Entertainment.Data = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/framework/featureenablementservice.js:584 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Framework;
            (function(Framework) {
                var FeatureEnablement = (function() {
                        function FeatureEnablement(){}
                        FeatureEnablement.prototype.isEnabled = function(featureItem) {
                            var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                            return featureEnablement.isEnabled(featureItem)
                        };
                        FeatureEnablement.prototype.areAllFeaturesEnabled = function(featureItems) {
                            if (!featureItems)
                                return false;
                            var featuresEnabled = true;
                            var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                            for (var i = 0; i < featureItems.length; i++) {
                                featuresEnabled = featureEnablement.isEnabled(featureItems[i]);
                                if (!featuresEnabled)
                                    break
                            }
                            return featuresEnabled
                        };
                        return FeatureEnablement
                    })();
                Framework.FeatureEnablement = FeatureEnablement;
                MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.featureEnablement, function FeatureEnablementFactory() {
                    return new MS.Entertainment.UI.Framework.FeatureEnablement
                })
            })(Framework = UI.Framework || (UI.Framework = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/framework/filetransferservice.js:624 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI");
    WinJS.Namespace.define("MS.Entertainment.UI", {
        FileTransferServiceErrors: {
            _errorsLoaded: false, _createErrors: function _createErrors() {
                    MS.Entertainment.UI.FileTransferServiceErrors.ZEST_E_CONTENT_RIGHTS_NOT_AVAILABLE = {
                        name: "ZEST_E_CONTENT_RIGHTS_NOT_AVAILABLE", code: 0xC101A3FF, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_NO_RIGHTS_SHORT)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors.E_ASSET_LICENSE_COUNT_EXCEEDED = {
                        name: "E_ASSET_LICENSE_COUNT_EXCEEDED", code: 0xC101A7D3, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_NO_RIGHTS_SHORT)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors.COMMERCE_XDLC_E_MAX_LICENSE_COUNT_REACHED = {
                        name: "COMMERCE_XDLC_E_MAX_LICENSE_COUNT_REACHED", code: 0xC33307D8, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_NO_RIGHTS_SHORT)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors.NS_E_DOWNLOAD_DISK_FULL_ERROR = {
                        name: "NS_E_DOWNLOAD_DISK_FULL_ERROR", code: 0xC00D1366, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_SHORT), longString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_LONG)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors.ZUNE_E_DOWNLOAD_SYSTEM_DISK_FULL = {
                        name: "ZUNE_E_DOWNLOAD_SYSTEM_DISK_FULL", code: 0xC1010038, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_SHORT), longString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_LONG)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors.ZUNE_E_DOWNLOAD_LIBRARY_DISK_FULL = {
                        name: "ZUNE_E_DOWNLOAD_LIBRARY_DISK_FULL", code: 0xC1010039, shortString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_SHORT), longString: String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_LONG)
                    };
                    MS.Entertainment.UI.FileTransferServiceErrors._errorsLoaded = true
                }, _initializeErrorInformation: function initializeErrorInformation() {
                    if (MS.Entertainment.UI.FileTransferServiceErrors._errorsLoaded)
                        return;
                    MS.Entertainment.UI.FileTransferServiceErrors._createErrors()
                }, ZEST_E_CONTENT_RIGHTS_NOT_AVAILABLE: null, E_ASSET_LICENSE_COUNT_EXCEEDED: null, COMMERCE_XDLC_E_MAX_LICENSE_COUNT_REACHED: null, NS_E_DOWNLOAD_DISK_FULL_ERROR: null, getError: function getError(task) {
                    MS.Entertainment.UI.FileTransferServiceErrors._initializeErrorInformation();
                    var errorCode = task.responseCode;
                    var error = {};
                    if (errorCode === MS.Entertainment.UI.FileTransferServiceErrors.ZEST_E_CONTENT_RIGHTS_NOT_AVAILABLE.code)
                        error = MS.Entertainment.UI.FileTransferServiceErrors.ZEST_E_CONTENT_RIGHTS_NOT_AVAILABLE;
                    else if (errorCode === MS.Entertainment.UI.FileTransferServiceErrors.E_ASSET_LICENSE_COUNT_EXCEEDED.code)
                        error = MS.Entertainment.UI.FileTransferServiceErrors.E_ASSET_LICENSE_COUNT_EXCEEDED;
                    else if (errorCode === MS.Entertainment.UI.FileTransferServiceErrors.COMMERCE_XDLC_E_MAX_LICENSE_COUNT_REACHED.code)
                        error = MS.Entertainment.UI.FileTransferServiceErrors.COMMERCE_XDLC_E_MAX_LICENSE_COUNT_REACHED;
                    else if (errorCode === MS.Entertainment.UI.FileTransferServiceErrors.NS_E_DOWNLOAD_DISK_FULL_ERROR.code || errorCode === MS.Entertainment.UI.FileTransferServiceErrors.ZUNE_E_DOWNLOAD_SYSTEM_DISK_FULL.code || errorCode === MS.Entertainment.UI.FileTransferServiceErrors.ZUNE_E_DOWNLOAD_LIBRARY_DISK_FULL.code) {
                        var totalBytes = task.totalBytesToReceive;
                        var error = null;
                        if (totalBytes) {
                            var one_mb = 1024 * 1024;
                            var one_gb = 1024 * one_mb;
                            var totalValue = 0;
                            if (totalBytes >= one_gb) {
                                var spaceNeededGB = Math.ceil(totalBytes / one_gb);
                                error = {
                                    name: "", code: task.responseCode, shortString: String.load(String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_GB_SHORT).format(spaceNeededGB), longString: String.load(String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_GB_LONG).format(spaceNeededGB)
                                }
                            }
                            else {
                                var spaceNeededMB = Math.ceil(totalBytes / one_mb);
                                error = {
                                    name: "", code: task.responseCode, shortString: String.load(String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_MB_SHORT).format(spaceNeededMB), longString: String.load(String.id.IDS_FILE_TRANSFER_FIRST_DELETE_UNNECESSARY_ITEMS_MB_LONG).format(spaceNeededMB)
                                }
                            }
                        }
                        else
                            error = MS.Entertainment.UI.FileTransferServiceErrors.NS_E_DOWNLOAD_DISK_FULL_ERROR;
                        return error
                    }
                    var toHexString = function toHexString(value) {
                            if (value < 0)
                                value += 0xFFFFFFFF + 1;
                            return "0x" + value.toString(16)
                        };
                    var errorMapper = new Microsoft.Entertainment.Util.ErrorMapper;
                    var mappedError = errorMapper.getMappedError(task.responseCode);
                    var errorHexCode = toHexString(errorCode);
                    if (!error.code)
                        error.code = task.responseCode;
                    if (!error.shortString)
                        error.shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_ERROR_SHORT).format(errorHexCode);
                    if (!error.longString)
                        error.longString = mappedError.description + " (" + errorHexCode + ") ";
                    return error
                }, errorCodes: {E_INSTANCEID_LICENSERIGHT_COMBINATION_INVALID: 0xc101a053}
        }, FileTransferService: MS.Entertainment.UI.Framework.define(function FileTransferServiceConstructor() {
                this._listeners = [];
                this._onDownloadChanged = this._onDownloadChanged.bind(this);
                this.startListening()
            }, {
                _listening: false, _listeners: null, startListening: function startListening() {
                        if (!this._listening && Microsoft.Entertainment.FileTransferManager) {
                            Microsoft.Entertainment.FileTransferManager.addEventListener("downloadschanged", this._onDownloadChanged);
                            Microsoft.Entertainment.FileTransferManager.initializeEvents();
                            this._listening = true
                        }
                    }, stopListening: function stopListening() {
                        if (this._listening && Microsoft.Entertainment.FileTransferManager) {
                            Microsoft.Entertainment.FileTransferManager.removeEventListener("downloadschanged", this._onDownloadChanged);
                            this._listening = false
                        }
                    }, registerListener: function registerListener(listenerId, taskKeyGetter, notificationSender, notifier, notifierThisObj, taskFilter) {
                        this.unregisterListener(listenerId);
                        this._listeners.push({
                            id: listenerId, taskKeyGetter: taskKeyGetter, taskFilter: taskFilter, notificationSender: notificationSender, notifier: notifier, notifierThisObj: notifierThisObj, downloadAggregators: [], transferAggregators: []
                        })
                    }, unregisterListener: function unregisterListener(listenerId) {
                        var i = this._getListenerIndex(listenerId);
                        if (i !== -1)
                            this._listeners.splice(i, 1)
                    }, _getListenerIndex: function _getListenerIndex(listenerId) {
                        for (var i = 0; i < this._listeners.length; i++)
                            if (this._listeners[i].id === listenerId)
                                return i;
                        return -1
                    }, _onDownloadChanged: function _onDownloadChanged(e) {
                        var size = e.size;
                        for (var i = 0; i < size; i++) {
                            var task = e[i];
                            this._notifyTaskChanged(task, MS.Entertainment.UI.FileTransferType.download);
                            if (!task.isClosed && (task.taskStatus === Microsoft.Entertainment.FileTransferStatus.completed || task.taskStatus === Microsoft.Entertainment.FileTransferStatus.canceled))
                                task.closeAsync().then(function closeAsync_complete(task){}, function closeAsync_error(error){})
                        }
                    }, _notifyTaskChanged: function _notifyTaskChanged(task, transferType) {
                        for (var listenerId in this._listeners) {
                            var listener = this._listeners[listenerId];
                            var aggregators = (transferType === MS.Entertainment.UI.FileTransferType.download) ? listener.downloadAggregators : listener.transferAggregators;
                            var taskKey = listener.taskKeyGetter(task);
                            if (!taskKey || (listener.taskFilter && listener.taskFilter(taskKey)))
                                continue;
                            var aggregator = aggregators[taskKey];
                            if (!aggregator) {
                                aggregator = new MS.Entertainment.UI.FileTransferItemAggregator(listener.notificationSender, listener.notifier, listener.notifierThisObj, taskKey, transferType);
                                aggregators[taskKey] = aggregator
                            }
                            aggregator.update(task)
                        }
                    }
            }, {
                pulseAsync: function pulseAsync(media) {
                    return MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(media).then(function getMarketplaceNativeFileDownloadsAsync_complete(nativeItems) {
                            var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                            if (nativeItems && nativeItems.length > 0)
                                fileTransferService._onDownloadChanged(nativeItems);
                            return WinJS.Promise.wrap()
                        }, function getMarketplaceNativeFileDownloadsAsync_error(error) {
                            return WinJS.Promise.wrap()
                        })
                }, keyFromProperty: function keyFromProperty(propertyName, cachedMode, forceUpperCase) {
                        var cachedKey = null;
                        var propertyNameString = propertyName.toString();
                        return function keyFromProperty(item) {
                                var key = cachedKey;
                                if (!cachedMode || !cachedKey) {
                                    key = item[propertyNameString];
                                    if (key !== null && key !== undefined && key !== "" && key !== -1) {
                                        if (forceUpperCase && key.toUpperCase && isNaN(key))
                                            key = key.toUpperCase();
                                        if (cachedMode && key !== -1)
                                            cachedKey = key
                                    }
                                    else
                                        key = null
                                }
                                return key
                            }
                    }, keyFromProperties: function keyFromProperties(propertyNames, cachedMode, forceUpperCase) {
                        var cachedKey = null;
                        var propertyNamesClone = [];
                        for (var i in propertyNames)
                            propertyNamesClone.push(propertyNames[i].toString());
                        return function keyFromProperty(item) {
                                var key = cachedKey;
                                if (!cachedMode || !cachedKey) {
                                    var badKey = false;
                                    key = String.empty;
                                    for (var j in propertyNamesClone) {
                                        var subKey = item[propertyNamesClone[j]];
                                        if (subKey !== null && subKey !== "undefined" && subKey !== "" && subKey !== -1)
                                            key += "_" + subKey;
                                        else {
                                            key = null;
                                            break
                                        }
                                    }
                                    if (key) {
                                        if (forceUpperCase && key.toUpperCase)
                                            key = key.toUpperCase();
                                        if (cachedMode && !badKey)
                                            cachedKey = key
                                    }
                                }
                                return key
                            }
                    }, showErrorNotificationsForTask: function showErrorNotificationsForTask(task) {
                        if (task && task.isBackground && task.responseCode == MS.Entertainment.UI.FileTransferServiceErrors.errorCodes.E_INSTANCEID_LICENSERIGHT_COMBINATION_INVALID)
                            return false;
                        else
                            return true
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI", {FileTransferType: {
            transfer: "transfer", download: "download"
        }});
    WinJS.Namespace.define("MS.Entertainment.UI", {FileTransferNotificationMethods: {
            genericError: function genericError(notification) {
                var shortString = String.Empty;
                var longString = String.Empty;
                var icon = String.Empty;
                if (notification.transferType === MS.Entertainment.UI.FileTransferType.download) {
                    var error = MS.Entertainment.UI.FileTransferServiceErrors.getError(notification.task);
                    shortString = error.shortString;
                    longString = error.longString;
                    icon = MS.Entertainment.UI.Icon.inlineError
                }
                if (notification.task.isClosed)
                    notification.remove();
                else
                    notification.send(icon, shortString, longString)
            }, genericPending: function genericPending(notification) {
                    var shortString = String.Empty;
                    var longString = String.Empty;
                    var icon = String.Empty;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_QUEUE_LONG);
                        icon = WinJS.UI.AppBarIcon.download
                    }
                    notification.send(icon, shortString, longString)
                }, genericProgress: function genericProgress(notification) {
                    var shortString = String.Empty;
                    var longString = String.Empty;
                    var icon = String.Empty;
                    var percentage = 0;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download) {
                        if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.paused) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.error && notification.task.isClosed) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.pausedNoNetwork) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.pausedCostedNetwork) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_LONG)
                        }
                        else {
                            percentage = Math.floor(notification.task.percentage * 100);
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_SHORT).format(percentage);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_LONG).format(percentage)
                        }
                        icon = WinJS.UI.AppBarIcon.download
                    }
                    notification.send(icon, shortString, longString)
                }, videoDownloadProgress: function genericProgress(notification) {
                    var shortString = String.Empty;
                    var longString = String.Empty;
                    var icon = String.Empty;
                    var percentage = 0;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download) {
                        if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.paused) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.error && notification.task.isClosed) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.pausedNoNetwork) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.pausedCostedNetwork) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_LONG)
                        }
                        else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.copying) {
                            var totalBytes = notification.task.totalBytesToReceive;
                            if (isNaN(totalBytes) || totalBytes <= 0)
                                totalBytes = 0;
                            if (totalBytes > 0) {
                                var config = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                var transferRatePerSecond = config.video.downloadCopyFileTransferRate;
                                var kilobytes = Math.ceil(totalBytes / 1024);
                                var megabytes = Math.ceil(kilobytes / 1024);
                                var estimatedCopyDurationInMinutes = Math.ceil((megabytes / transferRatePerSecond) / 60);
                                var copyingString = String.load(String.id.IDS_VIDEO_DOWNLOAD_MANAGER_COPYING_SLOW).format(estimatedCopyDurationInMinutes);
                                shortString = longString = copyingString
                            }
                            else
                                shortString = longString = String.load(String.id.IDS_VIDEO_DOWNLOAD_MANAGER_COPYING)
                        }
                        else {
                            percentage = Math.floor(notification.task.percentage * 100);
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_SHORT).format(percentage);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_PERCENT_LONG).format(percentage)
                        }
                        icon = WinJS.UI.AppBarIcon.download
                    }
                    notification.send(icon, shortString, longString)
                }, genericCancel: function genericCancel(notification) {
                    var shortString = String.Empty;
                    var longString = String.Empty;
                    var icon = String.Empty;
                    if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.canceled) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_LONG);
                        icon = WinJS.UI.AppBarIcon.download
                    }
                    notification.send(icon, shortString, longString)
                }, genericComplete: function genericComplete(notification) {
                    notification.remove()
                }, _getTransferCounts: function _getTransferCounts(notification) {
                    var transferCounts = {
                            active: 0, paused: 0, pausedCostedNetwork: 0, pausedNoNetwork: 0
                        };
                    if (notification && notification.bucket && notification.bucket.length > 0)
                        for (var i = 0; i < notification.bucket.length; i++)
                            switch (notification.bucket[i].task.taskStatus) {
                                case Microsoft.Entertainment.FileTransferStatus.error:
                                case Microsoft.Entertainment.FileTransferStatus.canceled:
                                case Microsoft.Entertainment.FileTransferStatus.completed:
                                    break;
                                case Microsoft.Entertainment.FileTransferStatus.running:
                                    transferCounts.active++;
                                    break;
                                case Microsoft.Entertainment.FileTransferStatus.paused:
                                    transferCounts.paused++;
                                    break;
                                case Microsoft.Entertainment.FileTransferStatus.pausedCostedNetwork:
                                    transferCounts.pausedCostedNetwork++;
                                    break;
                                case Microsoft.Entertainment.FileTransferStatus.pausedNoNetwork:
                                    transferCounts.pausedNoNetwork++;
                                    break
                            }
                    return transferCounts
                }, _getUpdateShortString: function _getNotificationShortString(notification, activeTrackTransfers) {
                    var shortString = String.Empty;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download)
                        if (activeTrackTransfers === 1)
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_TRACK_SHORT);
                        else {
                            var numberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                            var formattedCount = numberFormatter.format(activeTrackTransfers);
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_SHORT).format(formattedCount)
                        }
                    return shortString
                }, _getUpdateLongString: function _getNotificationLongString(notification, activeTrackTransfers) {
                    var longString = String.Empty;
                    if (notification.transferType === MS.Entertainment.UI.FileTransferType.download)
                        if (activeTrackTransfers === 1)
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_TRACK_LONG);
                        else {
                            var numberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                            var formattedCount = numberFormatter.format(activeTrackTransfers);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_TRACKS_LONG).format(formattedCount)
                        }
                    return longString
                }, _getUpdateIcon: function _getNotificationIcon(notification) {
                    return notification.transferType === MS.Entertainment.UI.FileTransferType.download ? WinJS.UI.AppBarIcon.download : String.empty
                }, trackCollectionUpdate: function trackCollectionUpdate(notification) {
                    var transferCounts = MS.Entertainment.UI.FileTransferNotificationMethods._getTransferCounts(notification);
                    if (transferCounts.active > 0) {
                        var shortString = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateShortString(notification, transferCounts.active);
                        var longString = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateLongString(notification, transferCounts.active);
                        var icon = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateIcon(notification);
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.pausedNoNetwork > 0) {
                        var shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_SHORT);
                        var longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_LONG);
                        var icon = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateIcon(notification);
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.pausedCostedNetwork > 0) {
                        var shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_SHORT);
                        var longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_LONG);
                        var icon = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateIcon(notification);
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.paused > 0) {
                        var shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_SHORT);
                        var longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_LONG);
                        var icon = MS.Entertainment.UI.FileTransferNotificationMethods._getUpdateIcon(notification);
                        notification.send(icon, shortString, longString)
                    }
                    else
                        notification.remove()
                }, trackCollectionError: function trackCollectionError(notification) {
                    MS.Entertainment.UI.assert(notification.transferType === MS.Entertainment.UI.FileTransferType.download);
                    if (!MS.Entertainment.UI.FileTransferService.showErrorNotificationsForTask(notification.task))
                        return;
                    var shortString = String.load(String.id.IDS_MUSIC_DOWNLOAD_ERROR);
                    var longString = String.load(String.id.IDS_MUSIC_DOWNLOAD_ERROR);
                    var icon = MS.Entertainment.UI.Icon.inlineError;
                    if (notification.task.isClosed)
                        notification.remove();
                    else
                        notification.send(icon, shortString, longString)
                }, episodeCollectionUpdate: function episodeCollectionUpdate(notification) {
                    var transferCounts = MS.Entertainment.UI.FileTransferNotificationMethods._getTransferCounts(notification);
                    var numberFormatter;
                    var formattedCount;
                    var shortString = String.Empty;
                    var longString = String.Empty;
                    var icon = String.Empty;
                    if (transferCounts.active > 0) {
                        if (notification.bucket.length === 1) {
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_EPISODE_SHORT);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_1_EPISODE_LONG)
                        }
                        else {
                            numberFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                            formattedCount = numberFormatter.format(transferCounts.active);
                            shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_SHORT).format(formattedCount);
                            longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOADING_EPISODES_LONG).format(formattedCount)
                        }
                        icon = WinJS.UI.AppBarIcon.download;
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.pausedNoNetwork > 0) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_OFFLINE_LONG);
                        icon = WinJS.UI.AppBarIcon.download;
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.pausedCostedNetwork > 0) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_METERED_NETWORK_LONG);
                        icon = WinJS.UI.AppBarIcon.download;
                        notification.send(icon, shortString, longString)
                    }
                    else if (transferCounts.paused > 0) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_PAUSED_LONG);
                        icon = WinJS.UI.AppBarIcon.download;
                        notification.send(icon, shortString, longString)
                    }
                    else if (notification.task.taskStatus === Microsoft.Entertainment.FileTransferStatus.canceled) {
                        shortString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_SHORT);
                        longString = String.load(String.id.IDS_FILE_TRANSFER_DOWNLOAD_CANCELED_LONG);
                        icon = WinJS.UI.AppBarIcon.download;
                        notification.send(icon, shortString, longString)
                    }
                    else
                        notification.remove()
                }, episodeListItemError: function episodeListItemError(notification) {
                    var errorString = String.load(String.id.IDS_VIDEO_DOWNLOAD_ERROR);
                    var icon = MS.Entertainment.UI.Icon.inlineError;
                    if (notification.task.isClosed)
                        notification.remove();
                    else
                        notification.send(icon, errorString, errorString)
                }
        }});
    WinJS.Namespace.define("MS.Entertainment.UI", {FileTransferNotifiers: {
            genericFile: {
                add: MS.Entertainment.UI.FileTransferNotificationMethods.genericProgress, pending: MS.Entertainment.UI.FileTransferNotificationMethods.genericPending, update: MS.Entertainment.UI.FileTransferNotificationMethods.genericProgress, complete: MS.Entertainment.UI.FileTransferNotificationMethods.genericComplete, error: MS.Entertainment.UI.FileTransferNotificationMethods.genericError, cancel: MS.Entertainment.UI.FileTransferNotificationMethods.genericCancel
            }, trackCollection: {
                    add: MS.Entertainment.UI.FileTransferNotificationMethods.trackCollectionUpdate, update: MS.Entertainment.UI.FileTransferNotificationMethods.trackCollectionUpdate, complete: MS.Entertainment.UI.FileTransferNotificationMethods.trackCollectionUpdate, error: MS.Entertainment.UI.FileTransferNotificationMethods.trackCollectionError
                }, episodeCollection: {
                    add: MS.Entertainment.UI.FileTransferNotificationMethods.episodeCollectionUpdate, update: MS.Entertainment.UI.FileTransferNotificationMethods.episodeCollectionUpdate, complete: MS.Entertainment.UI.FileTransferNotificationMethods.episodeCollectionUpdate, error: MS.Entertainment.UI.FileTransferNotificationMethods.genericError, cancel: MS.Entertainment.UI.FileTransferNotificationMethods.episodeCollectionUpdate
                }, episodeListItem: {
                    add: MS.Entertainment.UI.FileTransferNotificationMethods.genericProgress, pending: MS.Entertainment.UI.FileTransferNotificationMethods.genericPending, update: MS.Entertainment.UI.FileTransferNotificationMethods.genericProgress, complete: MS.Entertainment.UI.FileTransferNotificationMethods.genericComplete, error: MS.Entertainment.UI.FileTransferNotificationMethods.episodeListItemError, cancel: MS.Entertainment.UI.FileTransferNotificationMethods.genericCancel
                }, videoDownloadItem: {
                    add: MS.Entertainment.UI.FileTransferNotificationMethods.genericProgress, pending: MS.Entertainment.UI.FileTransferNotificationMethods.genericPending, update: MS.Entertainment.UI.FileTransferNotificationMethods.videoDownloadProgress, complete: MS.Entertainment.UI.FileTransferNotificationMethods.genericComplete, error: MS.Entertainment.UI.FileTransferNotificationMethods.genericError, cancel: MS.Entertainment.UI.FileTransferNotificationMethods.genericCancel
                }
        }});
    WinJS.Namespace.define("MS.Entertainment.UI", {FileTransferItemAggregator: MS.Entertainment.UI.Framework.define(function FileTransferItemAggregatorConstructor(sender, notifier, notifierThisObj, taskKey, transferType) {
            this._taskKey = taskKey;
            this._sender = sender;
            this._notifier = notifier;
            this._notifierThisObj = notifierThisObj ? notifierThisObj : notifier;
            this._transferType = transferType;
            this._marketplaceNotifications = [];
            this._serviceNotifications = []
        }, {
            _taskKey: -1, _sender: null, _notifier: null, _notifierThisObj: null, _marketplaceNotifications: null, _serviceNotifications: null, _transferType: null, update: function update(task) {
                    var notifications = this._getNotificationBucket(task);
                    var i = this._getNotificationIndex(notifications, task.taskId);
                    var notification;
                    if (i !== -1)
                        notification = notifications[i];
                    else {
                        notification = this._createNotification(task);
                        notifications.push(notification);
                        if (this._notifier && this._notifier.add)
                            this._notifier.add.call(this._notifierThisObj, notification)
                    }
                    this._fireNotification(notification)
                }, _fireNotification: function _fireNotification(notification) {
                    if (this._notifier)
                        switch (notification.task.taskStatus) {
                            case Microsoft.Entertainment.FileTransferStatus.error:
                                this._removeNotificationFromBucket(notification);
                                if (this._notifier.error)
                                    this._notifier.error.call(this._notifierThisObj, notification);
                                break;
                            case Microsoft.Entertainment.FileTransferStatus.canceled:
                                if (this._notifier.cancel)
                                    this._notifier.cancel.call(this._notifierThisObj, notification);
                                break;
                            case Microsoft.Entertainment.FileTransferStatus.completed:
                                this._removeNotificationFromBucket(notification);
                                if (this._notifier.complete)
                                    this._notifier.complete.call(this._notifierThisObj, notification);
                                break;
                            default:
                                if (this._notifier.update)
                                    this._notifier.update.call(this._notifierThisObj, notification);
                                break
                        }
                }, _createNotification: function _createNotification(task) {
                    var that = this;
                    return {
                            id: task.taskId, transferType: that._transferType, task: task, bucket: that._getNotificationBucket(task), send: function send(icon, shortString, longString) {
                                    var notification = new MS.Entertainment.UI.ContentNotification.Notification(icon, shortString, longString);
                                    notification.task = task;
                                    that._sendNotification(notification, that._getTaskNotificationType(task))
                                }, remove: function remove() {
                                    that._sendNotification(null, that._getTaskNotificationType(task))
                                }
                        }
                }, _getNotificationIndex: function _getNotificationIndex(notifications, taskId) {
                    for (var i = 0; i < notifications.length; i++)
                        if (notifications[i].id === taskId)
                            return i;
                    return -1
                }, _removeNotificationFromBucket: function _removeNotificationFromBucket(notification) {
                    var i = this._getNotificationIndex(notification.bucket, notification.id);
                    if (i !== -1)
                        notification.bucket.splice(i, 1)
                }, _getTaskNotificationType: function _getTaskNotificationType(task) {
                    switch (task.taskType) {
                        case Microsoft.Entertainment.FileTransferRequestType.marketPlace:
                            return this._transferType === MS.Entertainment.UI.FileTransferType.download ? MS.Entertainment.UI.ContentNotification.NotificationType.marketplaceDownloadStatus : MS.Entertainment.UI.ContentNotification.NotificationType.marketplaceTransferStatus;
                        default:
                            throw"Unexpected task type.";
                    }
                }, _getNotificationBucket: function _getNotificationBucket(task) {
                    switch (task.taskType) {
                        case Microsoft.Entertainment.FileTransferRequestType.marketPlace:
                            return this._marketplaceNotifications;
                        default:
                            throw"Unexpected task type.";
                    }
                }, _sendNotification: function _sendNotification(notification, notificationType) {
                    if (this._sender && this._sender.sendNotification)
                        this._sender.sendNotification(this._taskKey, notificationType, notification);
                    else if (this._sender && this._sender.contentNotifications && this._sender.contentNotifications.sendNotification)
                        this._sender.contentNotifications.sendNotification(notificationType, notification);
                    else
                        MS.Entertainment.UI.assert(false, "Invalid notification object passed into _sendNotification")
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.fileTransfer, function FileTransferServiceFactory() {
        return new MS.Entertainment.UI.FileTransferService
    })
})()
})();
/* >>>>>>/framework/filetransfernotificationservice.js:1189 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI");
    WinJS.Namespace.define("MS.Entertainment.UI", {FileTransferNotificationService: MS.Entertainment.UI.Framework.define(function FileTransferNotificationServiceConstructor() {
            this._listeners = {};
            this._itemErrors = {};
            this._itemTransferState = {};
            this._containerErrors = {};
            this._internalHandlers = {}
        }, {
            _internalHandlers: null, _listeners: null, _itemErrors: null, _itemTransferState: null, _fileTransferListenerId: String.Empty, startListening: function startListening(handlers) {
                    MS.Entertainment.UI.assert(handlers, "invalid value passed for handlers");
                    var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                    if (Array.isArray(handlers)) {
                        this._fileTransferListenerId = [];
                        for (var i = 0; i < handlers.length; i++) {
                            this._fileTransferListenerId[i] = "FileTransferNotificationServiceListener_" + Math.random();
                            MS.Entertainment.UI.assert(handlers[i].taskKeyGetter, "invalid taskKeyGetter");
                            MS.Entertainment.UI.assert(handlers[i].notifier, "invalid notifier");
                            fileTransferService.registerListener(this._fileTransferListenerId[i], handlers[i].taskKeyGetter, null, handlers[i].notifier, this)
                        }
                    }
                    else {
                        this._fileTransferListenerId = "FileTransferNotificationServiceListener_" + Math.random();
                        MS.Entertainment.UI.assert(handlers.taskKeyGetter, "invalid taskKeyGetter");
                        MS.Entertainment.UI.assert(handlers.notifier, "invalid notifier");
                        fileTransferService.registerListener(this._fileTransferListenerId, handlers.taskKeyGetter, null, handlers.notifier, this)
                    }
                }, stopListening: function stopListening() {
                    if (this._fileTransferListenerId) {
                        var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                        if (Array.isArray(this._fileTransferListenerId))
                            for (var i = 0; i < this._fileTransferListenerId.length; i++)
                                fileTransferService.unregisterListener(this._fileTransferListenerId[i]);
                        else
                            fileTransferService.unregisterListener(this._fileTransferListenerId);
                        this._fileTransferListenerId = String.Empty
                    }
                }, attachListener: function attachListener(mediaId, listener) {
                    MS.Entertainment.UI.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.UI.assert(listener instanceof Function, "listener param is not a function");
                    var listeners = this._listeners[mediaId];
                    if (!listeners)
                        this._listeners[mediaId] = [listener];
                    else
                        listeners.push(listener);
                    var errorCode = this._itemErrors[mediaId];
                    if (errorCode)
                        listener(mediaId, MS.Entertainment.UI.FileTransferNotificationService.Event.transferError, errorCode);
                    if (this._itemTransferState[mediaId])
                        listener(mediaId, this._itemTransferState[mediaId], true)
                }, detachListener: function detachListener(mediaId, listener) {
                    MS.Entertainment.UI.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.UI.assert(listener instanceof Function, "listener param is not a function");
                    var listeners = this._listeners[mediaId];
                    if (listeners)
                        if (listeners.length === 1) {
                            MS.Entertainment.UI.assert(listeners[0] === listener, "listener not attached");
                            if (listeners[0] === listener)
                                delete this._listeners[mediaId]
                        }
                        else {
                            var index = listeners.indexOf(listener);
                            MS.Entertainment.UI.assert(index >= 0, "listener not attached");
                            if (index >= 0)
                                listeners.splice(index, 1)
                        }
                }, setItemError: function setItemError(mediaId, errorCode) {
                    MS.Entertainment.UI.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.UI.assert(!isNaN(errorCode), "invalid errorCode param");
                    if (errorCode === 0)
                        delete this._itemErrors[mediaId];
                    else
                        this._itemErrors[mediaId] = errorCode;
                    this._sendEvent(mediaId, MS.Entertainment.UI.FileTransferNotificationService.Event.transferError, errorCode)
                }, setItemTransferState: function setItemTransferState(mediaId, state, value) {
                    MS.Entertainment.UI.assert(this._isValidMediaId(mediaId), "invalid mediaId param");
                    MS.Entertainment.UI.assert(state === MS.Entertainment.UI.FileTransferNotificationService.Event.download, "Unsupported State passed into setTransferState");
                    if (!value)
                        delete this._itemTransferState[mediaId];
                    else
                        this._itemTransferState[mediaId] = state;
                    this._sendEvent(mediaId, state, value)
                }, _sendEvent: function _sendEvent(mediaId, event, value) {
                    var listeners = this._listeners[mediaId];
                    if (listeners)
                        listeners.forEach(function(listener) {
                            listener(mediaId, event, value)
                        })
                }, _isValidMediaId: function _isValidMediaId(mediaId) {
                    return ((typeof mediaId === "number" && mediaId >= 0) || (typeof mediaId === "string" && mediaId !== MS.Entertainment.Utilities.EMPTY_GUID))
                }
        }, {
            Instance: null, Event: {
                    download: "download", transferError: "transferError"
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.fileTransferNotifications, function FileTransferNotificationServiceFactory() {
        if (!MS.Entertainment.UI.FileTransferNotificationService.Instance)
            MS.Entertainment.UI.FileTransferNotificationService.Instance = new MS.Entertainment.UI.FileTransferNotificationService;
        return MS.Entertainment.UI.FileTransferNotificationService.Instance
    }, true)
})()
})();
/* >>>>>>/framework/downloadinfo.js:1297 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Framework");
    WinJS.Namespace.define("MS.Entertainment.Framework", {DownloadInfo: MS.Entertainment.UI.Framework.define(function DownloadInfoConstructor() {
            this.items = [];
            this.errorCodes = [];
            this.counts = {
                pending: 0, active: 0, failed: 0, canRetry: 0, paused: 0
            }
        }, {
            items: null, counts: null, errorCodes: null, hasPending: false, hasActive: false, hasFailed: false, hasPaused: false, hasRetryable: false, hasAny: false, initializeAsync: function initializeAsync(media) {
                    return MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(media).then(function getMarketplaceNativeFileDownloadsAsync_complete(nativeItems) {
                            for (var i = 0; i < nativeItems.length; i++) {
                                var nativeItem = nativeItems[i];
                                if (nativeItem.taskStatus !== Microsoft.Entertainment.FileTransferStatus.completed && !nativeItem.isClosed) {
                                    var item = {
                                            mediaType: nativeItem.libraryTypeId, libraryId: nativeItem.libraryId, mediaId: nativeItem.mediaType, taskId: nativeItem.taskId, taskStatus: nativeItem.taskStatus, status: MS.Entertainment.Framework.DownloadInfo.Status.none, errorCode: 0, canRetry: nativeItem.canRetry
                                        };
                                    switch (nativeItem.taskStatus) {
                                        case Microsoft.Entertainment.FileTransferStatus.paused:
                                            item.status = MS.Entertainment.Framework.DownloadInfo.Status.paused;
                                            ++this.counts.paused;
                                            break;
                                        case Microsoft.Entertainment.FileTransferStatus.pending:
                                            item.status = MS.Entertainment.Framework.DownloadInfo.Status.pending;
                                            ++this.counts.pending;
                                            break;
                                        case Microsoft.Entertainment.FileTransferStatus.error:
                                            item.errorCode = nativeItem.responseCode;
                                            if (nativeItem.responseCode !== 0)
                                                this.errorCodes.push(nativeItem.responseCode);
                                        case Microsoft.Entertainment.FileTransferStatus.notStarted:
                                        case Microsoft.Entertainment.FileTransferStatus.canceled:
                                            if (nativeItem.canRetry)
                                                ++this.counts.canRetry;
                                            item.status = MS.Entertainment.Framework.DownloadInfo.Status.failed;
                                            ++this.counts.failed;
                                            break;
                                        default:
                                            item.status = MS.Entertainment.Framework.DownloadInfo.Status.active;
                                            ++this.counts.active;
                                            break
                                    }
                                    this.items.push(item)
                                }
                            }
                            this.hasPending = (this.counts.pending > 0);
                            this.hasActive = (this.counts.active > 0);
                            this.hasFailed = (this.counts.failed > 0);
                            this.hasRetryable = (this.counts.canRetry > 0);
                            this.hasPaused = (this.counts.paused > 0);
                            this.hasAny = (this.items.length > 0)
                        }.bind(this))
                }, update: function update(nativeItem) {
                    if (!nativeItem)
                        return false;
                    var item = null;
                    var oldStatus = MS.Entertainment.Framework.DownloadInfo.Status.none;
                    var index = this._getItemIndexFromNativeItem(nativeItem);
                    if (index !== -1) {
                        item = this.items[index];
                        if (item.taskStatus === nativeItem.taskStatus && !nativeItem.isClosed)
                            return false;
                        oldStatus = item.status
                    }
                    var errorCodesChanged = false;
                    var retryableChanged = false;
                    if (item && (nativeItem.taskStatus === Microsoft.Entertainment.FileTransferStatus.completed || nativeItem.isClosed)) {
                        this.items.splice(index, 1);
                        if (item.errorCode)
                            errorCodesChanged = true;
                        if (item.canRetry)
                            retryableChanged = true
                    }
                    else {
                        if (!item) {
                            if (nativeItem.taskStatus === Microsoft.Entertainment.FileTransferStatus.completed || nativeItem.isClosed)
                                return false;
                            item = {
                                mediaType: nativeItem.libraryTypeId, libraryId: nativeItem.libraryId, mediaId: nativeItem.mediaType, taskId: nativeItem.taskId, taskStatus: null, status: MS.Entertainment.Framework.DownloadInfo.Status.none, errorCode: 0, canRetry: false
                            };
                            this.items.push(item)
                        }
                        var previousErrorCode = item.errorCode;
                        var previousRetryable = item.canRetry;
                        item.errorCode = 0;
                        item.canRetry = nativeItem.canRetry;
                        item.taskStatus = nativeItem.taskStatus;
                        switch (nativeItem.taskStatus) {
                            case Microsoft.Entertainment.FileTransferStatus.paused:
                                item.status = MS.Entertainment.Framework.DownloadInfo.Status.paused;
                                if (item.status === oldStatus)
                                    return false;
                                ++this.counts.paused;
                                break;
                            case Microsoft.Entertainment.FileTransferStatus.pending:
                                item.status = MS.Entertainment.Framework.DownloadInfo.Status.pending;
                                if (item.status === oldStatus)
                                    return false;
                                ++this.counts.pending;
                                break;
                            case Microsoft.Entertainment.FileTransferStatus.error:
                                item.errorCode = nativeItem.responseCode;
                            case Microsoft.Entertainment.FileTransferStatus.notStarted:
                            case Microsoft.Entertainment.FileTransferStatus.canceled:
                                item.status = MS.Entertainment.Framework.DownloadInfo.Status.failed;
                                if (item.status === oldStatus && previousErrorCode === item.errorCode)
                                    return false;
                                ++this.counts.failed;
                                break;
                            default:
                                item.status = MS.Entertainment.Framework.DownloadInfo.Status.active;
                                if (item.status === oldStatus)
                                    return false;
                                ++this.counts.active;
                                break
                        }
                        errorCodesChanged = previousErrorCode !== item.errorCode;
                        retryableChanged = previousRetryable !== item.canRetry
                    }
                    switch (oldStatus) {
                        case MS.Entertainment.Framework.DownloadInfo.Status.paused:
                            --this.counts.paused;
                            break;
                        case MS.Entertainment.Framework.DownloadInfo.Status.pending:
                            --this.counts.pending;
                            break;
                        case MS.Entertainment.Framework.DownloadInfo.Status.failed:
                            --this.counts.failed;
                            break;
                        case MS.Entertainment.Framework.DownloadInfo.Status.active:
                            --this.counts.active;
                            break
                    }
                    if (retryableChanged) {
                        this.counts.canRetry = 0;
                        for (var i = 0; i < this.items.length; i++)
                            if (this.items[i].canRetry)
                                ++this.counts.canRetry
                    }
                    if (errorCodesChanged) {
                        this.errorCodes = [];
                        for (var i = 0; i < this.items.length; i++) {
                            var errorCode = this.items[i].errorCode;
                            if (errorCode)
                                this.errorCodes.push(errorCode)
                        }
                    }
                    this.hasPaused = (this.counts.paused > 0);
                    this.hasPending = (this.counts.pending > 0);
                    this.hasActive = (this.counts.active > 0);
                    this.hasFailed = (this.counts.failed > 0);
                    this.hasRetryable = (this.counts.canRetry > 0);
                    this.hasAny = (this.items.length > 0);
                    return true
                }, _getItemIndexFromNativeItem: function _getItemIndexFromNativeItem(nativeItem) {
                    if (!nativeItem || !this.items)
                        return -1;
                    for (var i = 0; i < this.items.length; i++) {
                        var item = this.items[i];
                        if (item.taskId === nativeItem.taskId)
                            return i
                    }
                    return -1
                }
        }, {
            Status: {
                none: "none", failed: "failed", paused: "paused", pending: "pending", active: "active"
            }, createAndInitializeAsync: function createAndInitializeAsync(media) {
                    var downloadInfo = new MS.Entertainment.Framework.DownloadInfo;
                    return downloadInfo.initializeAsync(media).then(function initializeAsync_complete() {
                            return WinJS.Promise.wrap(downloadInfo)
                        })
                }, getMarketplaceNativeFileDownloadsAsync: function getMarketplaceNativeFileDownloadsAsync(media) {
                    var query = MS.Entertainment.Framework.DownloadInfo.createMarketplaceFileTransferManagerQueryForMedia(media);
                    if (query && Microsoft.Entertainment.FileTransferManager)
                        return Microsoft.Entertainment.FileTransferManager.getFileDownloadsByQueryAsync(query).then(function getFileDownloadsByQueryAsync_complete(nativeItems) {
                                if (nativeItems)
                                    return WinJS.Promise.wrap(nativeItems);
                                return WinJS.Promise.wrap([])
                            }, function getFileDownloadsByQueryAsync_error(e) {
                                return WinJS.Promise.wrap([])
                            });
                    else
                        return WinJS.Promise.wrap([])
                }, createMarketplaceFileTransferManagerQueryForMedia: function createMarketplaceFileTransferManagerQueryForMedia(media) {
                    if (!media || !media.mediaType || !Microsoft.Entertainment.FileTransferQuery)
                        return null;
                    var query = new Microsoft.Entertainment.FileTransferQuery;
                    query.requestType = Microsoft.Entertainment.FileTransferRequestType.marketPlace;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            if (media.inCollection)
                                query.libraryId = media.libraryId;
                            else if (media.hasServiceId)
                                query.mediaId = media.serviceId;
                            else
                                query = null;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            if (media.inCollection)
                                query.albumLibraryId = media.libraryId;
                            else if (media.hasServiceId)
                                query.albumMediaId = media.serviceId;
                            else
                                query = null;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            if (media.inCollection)
                                query.seriesLibraryId = media.libraryId;
                            else if (media.hasServiceId)
                                query.seriesMediaId = media.serviceId;
                            else
                                query = null;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            query.seasonNumber = media.seasonNumber;
                            if (media.inCollection)
                                query.seriesLibraryId = media.seriesLibraryId;
                            else if (media.seriesId && media.seriesId !== MS.Entertainment.Utilities.EMPTY_GUID)
                                query.seriesMediaId = media.seriesId;
                            else
                                query = null;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            if (media.inCollection)
                                query.albumArtistLibraryId = media.libraryId;
                            else if (media.hasServiceId)
                                if (MS.Entertainment.Utilities.isValidGuid(media.serviceId))
                                    query.albumArtistMediaId = media.serviceId;
                                else {
                                    MS.Entertainment.Framework.fail("Invalid serviceId: " + media.serviceId);
                                    query = null
                                }
                            else
                                query = null;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                        case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.readingItem:
                            if (media.libraryId) {
                                query.libraryTypeId = Microsoft.Entertainment.Queries.ObjectType.readingItem;
                                query.libraryId = media.libraryId
                            }
                            else
                                query = null;
                            break;
                        default:
                            throw"The state engine does not support this media item type.";
                    }
                    return query
                }, getMarketplaceDownloadTaskKeyFunction: function getMarketplaceDownloadTaskKeyFunction(mediaType) {
                    if (!mediaType)
                        return null;
                    return function getMarketplaceDownloadTaskKey(nativeItem) {
                            switch (mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.video:
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                    return nativeItem.libraryId;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                    return nativeItem.albumLibraryId;
                                case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                                    return nativeItem.seriesLibraryId;
                                case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                                    return nativeItem.seriesLibraryId + "/" + nativeItem.seasonNumber;
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    return nativeItem.albumArtistLibraryId;
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                case Microsoft.Entertainment.Queries.ObjectType.folder:
                                    return nativeItem.libraryId;
                                case Microsoft.Entertainment.Queries.ObjectType.readingItem:
                                    return nativeItem.libraryId;
                                default:
                                    throw"The state engine does not support this media item type.";
                            }
                        }
                }, isFileTransferTaskContainedByMedia: function isFileTransferTaskContainedByMedia(media, nativeItem) {
                    if (!media || !media.mediaType || !nativeItem)
                        return false;
                    switch (media.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            if (media.inCollection)
                                return (nativeItem.libraryId === media.libraryId);
                            return (nativeItem.mediaId.toLowerCase() === media.serviceId.toLowerCase());
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            if (media.inCollection)
                                return (nativeItem.albumLibraryId === media.libraryId);
                            return (nativeItem.albumMediaId.toLowerCase() === media.serviceId.toLowerCase());
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            if (media.inCollection)
                                return (nativeItem.seriesLibraryId === media.libraryId);
                            return (nativeItem.seriesMediaId.toLowerCase() === media.serviceId.toLowerCase());
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            if (nativeItem.seasonNumber !== media.seasonNumber)
                                return false;
                            if (media.inCollection)
                                return (nativeItem.seriesLibraryId === media.seriesLibraryId);
                            return (nativeItem.seriesMediaId.toLowerCase() === media.seriesZuneId.toLowerCase());
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            if (media.inCollection)
                                return (nativeItem.albumArtistLibraryId === media.libraryId);
                            return (nativeItem.albumArtistMediaId.toLowerCase() === media.serviceId.toLowerCase());
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            if (media.inCollection)
                                if (nativeItem.contextLibraryTypeId === Microsoft.Entertainment.Queries.ObjectType.playlist)
                                    return nativeItem.contextLibraryId === media.libraryId;
                            return false;
                        default:
                            throw"The state engine does not support this media item type.";
                    }
                }
        })})
})()
})();
/* >>>>>>/framework/interactionnotifier.js:1621 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Components.Shell");
    WinJS.Namespace.define("MS.Entertainment.Framework", {InteractionNotifier: MS.Entertainment.UI.Framework.define(function InteractionNotifier() {
            this._listenerFunctions = [];
            var userInteractionHandler = this._notifyListeners.bind(this);
            var focusHandler = this._focusHandler.bind(this);
            var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
            document.body.addEventListener("keydown", userInteractionHandler, true);
            document.body.addEventListener("mousewheel", userInteractionHandler, true);
            document.body.addEventListener("MSPointerDown", userInteractionHandler, true);
            document.body.addEventListener("MSPointerMove", userInteractionHandler, true);
            document.body.addEventListener("focusin", focusHandler, true);
            document.body.addEventListener("pointerdown", userInteractionHandler, true);
            document.body.addEventListener("pointermove", userInteractionHandler, true);
            document.body.addEventListener("focusout", focusHandler, true);
            document.body.addEventListener("click", userInteractionHandler, true);
            this._bindings = WinJS.Binding.bind(uiStateService, {activeListening: userInteractionHandler})
        }, {
            _listenerFunctions: null, _bindings: null, _previouslyFocused: true, dispose: function dispose() {
                    if (this._bindings) {
                        this._bindings.cancel();
                        this._bindings = null
                    }
                }, _focusHandler: function _focusHandler() {
                    if (!this._previouslyFocused)
                        this._notifyListeners();
                    this._previouslyFocused = document.hasFocus()
                }, _notifyListeners: function _notifyListeners(event) {
                    for (var i = 0; i < this._listenerFunctions.length; i++)
                        try {
                            this._listenerFunctions[i]()
                        }
                        catch(exception) {
                            MS.Entertainment.UI.Components.Shell.assert(false, "Interaction listener failed " + this._listenerFunctions[i].toString() + "\r\nException: " + exception.toString())
                        }
                }, addInteractionListener: function addInteractionListener(listenerFunction) {
                    this._listenerFunctions.push(listenerFunction)
                }, removeInteractionListener: function removeInteractionListener(listenerFunction) {
                    var index = this._listenerFunctions.indexOf(listenerFunction);
                    if (index > -1)
                        this._listenerFunctions.splice(index, 1)
                }
        }, null)});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.interactionNotifier, function InteractionNotifierFactory() {
        return new MS.Entertainment.Framework.InteractionNotifier
    })
})()
})();
/* >>>>>>/framework/imageloader.js:1674 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Shell");
    WinJS.Namespace.define("MS.Entertainment.UI.Shell", {
        ImageLoader: MS.Entertainment.UI.Framework.define(function(imgLoadedCallback) {
            this._imgLoadedCallback = imgLoadedCallback;
            this._imgElement = document.createElement("img");
            this._imgElement.suppressUnload = true;
            this.state = this.states.initial
        }, {
            _imgLoadedCallback: null, _imgElement: null, _imgUrl: null, _loadingDefault: false, states: {
                    value: {
                        initial: -1, loading: 0, error: 1, loaded: 2, loadedDefault: 3, loadedFallback: 4
                    }, writable: false
                }, loadCatalogImage: function loadCatalogImage(defaultImageUrl, imageId, imageIdType, dimensions, forceImageResize, ignoreZeroLengths, requestedImage, imageChildId, imageContentType) {
                    var url = MS.Entertainment.UI.Shell.ImageLoader.makeCatalogImageUri(imageId, imageIdType, dimensions, forceImageResize, ignoreZeroLengths, requestedImage, imageChildId, imageContentType);
                    this.loadImage(url, defaultImageUrl)
                }, loadImage: function loadImage(imageUrl, defaultImageUrl, loadingImageUrl) {
                    this._loadingDefault = false;
                    this.loadImageInternal(imageUrl, defaultImageUrl, loadingImageUrl)
                }, loadImageInternal: function loadImageInternal(imageUrl, defaultImageUrl, loadingImageUrl) {
                    this.state = this.states.initial;
                    if (loadingImageUrl)
                        this._imgUrl = loadingImageUrl;
                    else
                        this._imgUrl = MS.Entertainment.UI.Shell.ImageLoader._commonLoading;
                    this._imgElement.setAttribute("src", this._imgUrl);
                    if (!imageUrl)
                        if (defaultImageUrl) {
                            this.state = this.states.loadedDefault;
                            this.imgUrl = defaultImageUrl
                        }
                        else {
                            this.state = this.states.loadedFallback;
                            this._loadingDefault = false;
                            this.imgUrl = MS.Entertainment.UI.Shell.ImageLoader._commonDefault
                        }
                    else if (imageUrl === MS.Entertainment.UI.Shell.ImageLoader.defaultImage) {
                        this.state = this.states.error;
                        this._loadingDefault = true;
                        this.loadImage(null, defaultImageUrl)
                    }
                    else if (MS.Entertainment.UI.Shell.ImageLoader.isWebUrl(imageUrl))
                        this._loadImageFromWeb(imageUrl, defaultImageUrl);
                    else if (MS.Entertainment.UI.Shell.ImageLoader.isBlobUrl(imageUrl))
                        this._loadImageFromWeb(imageUrl, defaultImageUrl);
                    else if (MS.Entertainment.UI.Shell.ImageLoader.isAppDataUrl(imageUrl))
                        this._loadImageFromWeb(imageUrl, defaultImageUrl);
                    else if (MS.Entertainment.UI.Shell.ImageLoader.isPackageUrl(imageUrl))
                        this._loadImageFromWeb(imageUrl, defaultImageUrl);
                    else
                        this._loadImageFromPath(imageUrl, defaultImageUrl)
                }, state: {
                    get: function getState() {
                        return this._state
                    }, set: function setState(value) {
                            if (this._state !== value)
                                this._state = value
                        }
                }, imgContainer: {get: function getImgContainer() {
                        return this._imgElement
                    }}, imgUrl: {
                    get: function getImgUrl() {
                        return this._imgUrl
                    }, set: function setImgUrl(value) {
                            if (this._imgUrl !== value) {
                                this._imgUrl = value;
                                this._imgElement.setAttribute("src", this._imgUrl);
                                this._fireImgLoaded(this._imgUrl)
                            }
                        }
                }, _fireImgLoaded: function(imageUrl) {
                    if (this._imgLoadedCallback)
                        this._imgLoadedCallback(imageUrl)
                }, _loadImageFromWeb: function(imageUrl, defaultImageUrl) {
                    var that = this;
                    var remoteImage = new Image;
                    remoteImage.addEventListener("load", function imageOnLoad() {
                        if (that._loadingDefault)
                            that.state = that.states.loadedDefault;
                        else
                            that.state = that.states.loaded;
                        that._loadingDefault = false;
                        that.imgUrl = remoteImage.src
                    });
                    remoteImage.addEventListener("error", function imageOnError() {
                        that.state = that.states.error;
                        that._loadingDefault = true;
                        that.loadImageInternal(null, defaultImageUrl)
                    });
                    this.state = this.states.loading;
                    remoteImage.src = imageUrl
                }, _loadImageFromPath: function(imagePath, defaultImageUrl, imageContainer) {
                    var that = this;
                    try {
                        Windows.Storage.StorageFile.getFileFromPathAsync(imagePath).then(function(loadedFile) {
                            var url = URL.createObjectURL(loadedFile, {oneTimeOnly: true});
                            if (that._loadingDefault)
                                that.state = that.states.loadedDefault;
                            else
                                that.state = that.states.loaded;
                            that._loadingDefault = false;
                            that.imgUrl = url
                        }, function() {
                            that.state = that.states.error;
                            that._loadingDefault = true;
                            that.loadImageInternal(null, defaultImageUrl)
                        });
                        this.state = this.states.loading
                    }
                    catch(e) {
                        that.loadImageInternal(null, defaultImageUrl)
                    }
                }
        }, {
            _commonDefault: MS.Entertainment.UI.Framework.lazyDefine(function() {
                return MS.Entertainment.UI.ImagePaths.imageNotFound
            }), _commonLoading: MS.Entertainment.UI.Framework.lazyDefine(function() {
                    return "ms-appx:///Images/loading_image." + MS.Entertainment.Utilities.getPackageImageFileExtension()
                }), _endpointCache: null, _initializeEndpointCache: function _initializeEndpointCache() {
                    if (!MS.Entertainment.UI.Shell.ImageLoader._endpointCache)
                        MS.Entertainment.UI.Shell.ImageLoader._endpointCache = {imageCatalog: MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_ImageCatalog)}
                }, defaultImage: -1, isBlobUrl: function(imageUrl) {
                    return (imageUrl && imageUrl.match && imageUrl.match(/^blob*:/i))
                }, isAppDataUrl: function(imageUrl) {
                    return (imageUrl && imageUrl.match && imageUrl.match(/^ms\-appdata*:\/\//i))
                }, isImageManagerV2Supported: function(mediaType) {
                    var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    return mediaType && configManager.mdlc.albumArtV2Enabled && (mediaType === Microsoft.Entertainment.Queries.ObjectType.track || mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                }, isPackageUrl: function(imageUrl) {
                    return (imageUrl && imageUrl.match && imageUrl.match(/^ms\-appx*:\/\//i))
                }, isFileUrl: function isFileUrl(imageUrl) {
                    return (imageUrl && imageUrl.match && (imageUrl.match(/^file:\/\//i) || imageUrl.match(/^[a-z]:\\/i)))
                }, isWebUrl: function(imageUrl) {
                    return (imageUrl && imageUrl.match && imageUrl.match(/^http[s]*:\/\//i))
                }, isStreamingUrl: function(imageUrl) {
                    return MS.Entertainment.Utilities.isStreamingUrl(imageUrl)
                }, appendResizeParameters: function appendResizeParameters(url, width, height, contentType) {
                    if (url && MS.Entertainment.UI.Shell.ImageLoader.isWebUrl(url)) {
                        var parameters = {contenttype: contentType || MS.Entertainment.ImageContentType.jpeg};
                        var resize = false;
                        if (width > 0) {
                            resize = true;
                            parameters["width"] = width
                        }
                        if (height > 0) {
                            resize = true;
                            parameters["height"] = height
                        }
                        if (resize)
                            parameters["resize"] = true;
                        url = MS.Entertainment.Utilities.UriFactory.appendQuery(url, parameters)
                    }
                    return url
                }, MediaDefaultUrls: MS.Entertainment.UI.Framework.lazyDefine(function() {
                    return {
                            track: MS.Entertainment.UI.ImagePaths.genericMusicSmall, album: MS.Entertainment.Utilities.isApp1 ? MS.Entertainment.UI.ImagePaths.genericMusicSmall : MS.Entertainment.UI.ImagePaths.music2MissingArt320x320, artist: MS.Entertainment.UI.ImagePaths.genericMusicSmall, playlist: MS.Entertainment.Utilities.isApp1 ? MS.Entertainment.UI.ImagePaths.genericMusicSmall : MS.Entertainment.UI.ImagePaths.music2MissingArt158x158, playlistLarge: MS.Entertainment.Utilities.isApp1 ? MS.Entertainment.UI.ImagePaths.genericMusicSmall : MS.Entertainment.UI.ImagePaths.music2MissingArt320x320, movie: MS.Entertainment.UI.ImagePaths.genericVideoSmall, musicVideo: MS.Entertainment.UI.ImagePaths.genericVideoSmall, otherVideo: MS.Entertainment.UI.ImagePaths.genericVideoSmall, tvSeason: MS.Entertainment.UI.ImagePaths.genericVideoSmall, tvSeries: MS.Entertainment.UI.ImagePaths.genericVideoSmall, tvEpisode: MS.Entertainment.UI.ImagePaths.genericVideoSmall
                        }
                }), _defaultImageSize: {
                    x: 320, y: 320
                }, ImageService: {
                    Zune: "Zune", EDS: "EDS"
                }, _getAcceptableValuesArray: function _getAcceptableWidthsArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableValuesZune : ImageLoader._acceptableValuesEDS
                }, _getAcceptableWideValuesArray: function _getAcceptableWideValuesArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableWideValuesZune : ImageLoader._acceptableWideValuesEDS
                }, _getAcceptableSquareValuesArray: function _getAcceptableSquareValuesArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableSquareValuesZune : ImageLoader._acceptableSquareValuesEDS
                }, _getAcceptableTallValuesArray: function _getAcceptableTallValuesArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableTallValuesZune : ImageLoader._acceptableTallValuesEDS
                }, _getAcceptableWidthsArray: function _getAcceptableWidthsArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableWidthsZune : ImageLoader._acceptableWidthsEDS
                }, _getAcceptableHeightsArray: function _getAcceptableHeightsArray(imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    return (imageService === ImageLoader.ImageService.Zune) ? ImageLoader._acceptableHeightsZune : ImageLoader._acceptableHeightsEDS
                }, _acceptableValuesZune: [{
                        x: 1920, y: 1080
                    }, {
                        x: 1366, y: 768
                    }, {
                        x: 1280, y: 720
                    }, {
                        x: 1012, y: 693
                    }, {
                        x: 854, y: 480
                    }, {
                        x: 853, y: 480
                    }, {
                        x: 800, y: 800
                    }, {
                        x: 584, y: 800
                    }, {
                        x: 480, y: 480
                    }, {
                        x: 480, y: 270
                    }, {
                        x: 420, y: 320
                    }, {
                        x: 395, y: 270
                    }, {
                        x: 347, y: 195
                    }, {
                        x: 320, y: 320
                    }, {
                        x: 285, y: 195
                    }, {
                        x: 267, y: 150
                    }, {
                        x: 258, y: 258
                    }, {
                        x: 258, y: 194
                    }, {
                        x: 243, y: 137
                    }, {
                        x: 240, y: 240
                    }, {
                        x: 234, y: 320
                    }, {
                        x: 219, y: 150
                    }, {
                        x: 213, y: 120
                    }, {
                        x: 175, y: 120
                    }, {
                        x: 172, y: 258
                    }, {
                        x: 160, y: 160
                    }, {
                        x: 160, y: 120
                    }, {
                        x: 150, y: 150
                    }, {
                        x: 144, y: 108
                    }, {
                        x: 112, y: 84
                    }, {
                        x: 108, y: 108
                    }, {
                        x: 108, y: 72
                    }, {
                        x: 107, y: 160
                    }, {
                        x: 100, y: 100
                    }, {
                        x: 84, y: 84
                    }, {
                        x: 84, y: 56
                    }, {
                        x: 80, y: 60
                    }, {
                        x: 72, y: 72
                    }, {
                        x: 64, y: 64
                    }, {
                        x: 64, y: 48
                    }, {
                        x: 60, y: 60
                    }, {
                        x: 60, y: 45
                    }, {
                        x: 60, y: 40
                    }, {
                        x: 56, y: 56
                    }, {
                        x: 52, y: 52
                    }, {
                        x: 50, y: 50
                    }, {
                        x: 44, y: 44
                    }, {
                        x: 43, y: 64
                    }, {
                        x: 40, y: 40
                    }], _acceptableWideValuesZune: [{
                        x: 1920, y: 1080
                    }, {
                        x: 1366, y: 768
                    }, {
                        x: 1280, y: 720
                    }, {
                        x: 1012, y: 693
                    }, {
                        x: 854, y: 480
                    }, {
                        x: 853, y: 480
                    }, {
                        x: 480, y: 270
                    }, {
                        x: 420, y: 320
                    }, {
                        x: 395, y: 270
                    }, {
                        x: 347, y: 195
                    }, {
                        x: 285, y: 195
                    }, {
                        x: 267, y: 150
                    }, {
                        x: 258, y: 194
                    }, {
                        x: 243, y: 137
                    }, {
                        x: 219, y: 150
                    }, {
                        x: 213, y: 120
                    }, {
                        x: 175, y: 120
                    }, {
                        x: 160, y: 120
                    }, {
                        x: 144, y: 108
                    }, {
                        x: 112, y: 84
                    }, {
                        x: 108, y: 72
                    }, {
                        x: 84, y: 56
                    }, {
                        x: 80, y: 60
                    }, {
                        x: 64, y: 48
                    }, {
                        x: 60, y: 45
                    }, {
                        x: 60, y: 40
                    }], _acceptableSquareValuesZune: [{
                        x: 800, y: 800
                    }, {
                        x: 480, y: 480
                    }, {
                        x: 320, y: 320
                    }, {
                        x: 258, y: 258
                    }, {
                        x: 240, y: 240
                    }, {
                        x: 160, y: 160
                    }, {
                        x: 150, y: 150
                    }, {
                        x: 108, y: 108
                    }, {
                        x: 100, y: 100
                    }, {
                        x: 84, y: 84
                    }, {
                        x: 72, y: 72
                    }, {
                        x: 64, y: 64
                    }, {
                        x: 60, y: 60
                    }, {
                        x: 56, y: 56
                    }, {
                        x: 52, y: 52
                    }, {
                        x: 50, y: 50
                    }, {
                        x: 44, y: 44
                    }, {
                        x: 40, y: 40
                    }], _acceptableTallValuesZune: [{
                        x: 584, y: 800
                    }, {
                        x: 234, y: 320
                    }, {
                        x: 172, y: 258
                    }, {
                        x: 107, y: 160
                    }, {
                        x: 43, y: 64
                    }], _acceptableWidthsZune: [1920, 1366, 1280, 1012, 854, 853, 800, 584, 480, 420, 395, 347, 320, 285, 267, 258, 243, 240, 234, 219, 213, 175, 172, 160, 150, 144, 112, 108, 107, 100, 84, 80, 72, 64, 60, 56, 52, 50, 44, 43, 40], _acceptableHeightsZune: [1080, 800, 768, 720, 693, 480, 320, 270, 258, 240, 195, 194, 160, 150, 137, 120, 108, 100, 84, 72, 64, 60, 56, 52, 50, 48, 45, 44, 40], _acceptableValuesEDS: [{
                        x: 2560, y: 1440
                    }, {
                        x: 2471, y: 753
                    }, {
                        x: 2470, y: 2470
                    }, {
                        x: 2399, y: 576
                    }, {
                        x: 2398, y: 2398
                    }, {
                        x: 2398, y: 1642
                    }, {
                        x: 2398, y: 576
                    }, {
                        x: 2100, y: 2100
                    }, {
                        x: 2100, y: 753
                    }, {
                        x: 2048, y: 1536
                    }, {
                        x: 2021, y: 576
                    }, {
                        x: 2020, y: 2020
                    }, {
                        x: 2020, y: 576
                    }, {
                        x: 1920, y: 1080
                    }, {
                        x: 1919, y: 1200
                    }, {
                        x: 1919, y: 1079
                    }, {
                        x: 1831, y: 540
                    }, {
                        x: 1830, y: 1391
                    }, {
                        x: 1830, y: 540
                    }, {
                        x: 1795, y: 448
                    }, {
                        x: 1793, y: 1793
                    }, {
                        x: 1793, y: 448
                    }, {
                        x: 1593, y: 896
                    }, {
                        x: 1562, y: 1562
                    }, {
                        x: 1562, y: 540
                    }, {
                        x: 1561, y: 1561
                    }, {
                        x: 1561, y: 1069
                    }, {
                        x: 1561, y: 540
                    }, {
                        x: 1501, y: 448
                    }, {
                        x: 1499, y: 1028
                    }, {
                        x: 1440, y: 1440
                    }, {
                        x: 1440, y: 1291
                    }, {
                        x: 1440, y: 810
                    }, {
                        x: 1366, y: 768
                    }, {
                        x: 1351, y: 380
                    }, {
                        x: 1350, y: 1350
                    }, {
                        x: 1315, y: 1315
                    }, {
                        x: 1315, y: 448
                    }, {
                        x: 1280, y: 800
                    }, {
                        x: 1280, y: 720
                    }, {
                        x: 1277, y: 320
                    }, {
                        x: 1276, y: 1276
                    }, {
                        x: 1276, y: 320
                    }, {
                        x: 1206, y: 1206
                    }, {
                        x: 1191, y: 320
                    }, {
                        x: 1190, y: 1190
                    }, {
                        x: 1138, y: 640
                    }, {
                        x: 1080, y: 1080
                    }, {
                        x: 1080, y: 789
                    }, {
                        x: 1067, y: 320
                    }, {
                        x: 1066, y: 810
                    }, {
                        x: 1051, y: 1051
                    }, {
                        x: 1024, y: 768
                    }, {
                        x: 1021, y: 1021
                    }, {
                        x: 1021, y: 448
                    }, {
                        x: 1012, y: 693
                    }, {
                        x: 981, y: 320
                    }, {
                        x: 980, y: 980
                    }, {
                        x: 938, y: 938
                    }, {
                        x: 935, y: 320
                    }, {
                        x: 934, y: 934
                    }, {
                        x: 934, y: 320
                    }, {
                        x: 896, y: 896
                    }, {
                        x: 864, y: 864
                    }, {
                        x: 854, y: 480
                    }, {
                        x: 853, y: 480
                    }, {
                        x: 818, y: 818
                    }, {
                        x: 810, y: 1080
                    }, {
                        x: 800, y: 800
                    }, {
                        x: 796, y: 448
                    }, {
                        x: 789, y: 1080
                    }, {
                        x: 788, y: 1080
                    }, {
                        x: 770, y: 770
                    }, {
                        x: 770, y: 485
                    }, {
                        x: 756, y: 756
                    }, {
                        x: 754, y: 424
                    }, {
                        x: 725, y: 320
                    }, {
                        x: 724, y: 560
                    }, {
                        x: 724, y: 320
                    }, {
                        x: 720, y: 1280
                    }, {
                        x: 720, y: 1080
                    }, {
                        x: 720, y: 720
                    }, {
                        x: 672, y: 672
                    }, {
                        x: 672, y: 602
                    }, {
                        x: 666, y: 666
                    }, {
                        x: 648, y: 320
                    }, {
                        x: 640, y: 640
                    }, {
                        x: 640, y: 320
                    }, {
                        x: 598, y: 296
                    }, {
                        x: 594, y: 594
                    }, {
                        x: 592, y: 592
                    }, {
                        x: 588, y: 588
                    }, {
                        x: 584, y: 800
                    }, {
                        x: 580, y: 290
                    }, {
                        x: 576, y: 576
                    }, {
                        x: 562, y: 316
                    }, {
                        x: 556, y: 740
                    }, {
                        x: 553, y: 553
                    }, {
                        x: 540, y: 720
                    }, {
                        x: 526, y: 720
                    }, {
                        x: 518, y: 518
                    }, {
                        x: 496, y: 496
                    }, {
                        x: 480, y: 720
                    }, {
                        x: 480, y: 640
                    }, {
                        x: 480, y: 480
                    }, {
                        x: 480, y: 270
                    }, {
                        x: 470, y: 264
                    }, {
                        x: 467, y: 640
                    }, {
                        x: 464, y: 636
                    }, {
                        x: 464, y: 497
                    }, {
                        x: 464, y: 464
                    }, {
                        x: 448, y: 448
                    }, {
                        x: 441, y: 441
                    }, {
                        x: 430, y: 430
                    }, {
                        x: 426, y: 640
                    }, {
                        x: 424, y: 424
                    }, {
                        x: 423, y: 423
                    }, {
                        x: 420, y: 420
                    }, {
                        x: 420, y: 320
                    }, {
                        x: 420, y: 265
                    }, {
                        x: 420, y: 236
                    }, {
                        x: 420, y: 95
                    }, {
                        x: 402, y: 402
                    }, {
                        x: 400, y: 300
                    }, {
                        x: 395, y: 270
                    }, {
                        x: 380, y: 407
                    }, {
                        x: 380, y: 380
                    }, {
                        x: 380, y: 239
                    }, {
                        x: 380, y: 214
                    }, {
                        x: 380, y: 181
                    }, {
                        x: 370, y: 500
                    }, {
                        x: 370, y: 370
                    }, {
                        x: 370, y: 208
                    }, {
                        x: 367, y: 329
                    }, {
                        x: 366, y: 206
                    }, {
                        x: 361, y: 361
                    }, {
                        x: 347, y: 195
                    }, {
                        x: 343, y: 343
                    }, {
                        x: 336, y: 336
                    }, {
                        x: 329, y: 329
                    }, {
                        x: 327, y: 245
                    }, {
                        x: 320, y: 426
                    }, {
                        x: 320, y: 320
                    }, {
                        x: 320, y: 120
                    }, {
                        x: 318, y: 424
                    }, {
                        x: 316, y: 316
                    }, {
                        x: 313, y: 313
                    }, {
                        x: 313, y: 235
                    }, {
                        x: 310, y: 424
                    }, {
                        x: 307, y: 307
                    }, {
                        x: 300, y: 300
                    }, {
                        x: 296, y: 145
                    }, {
                        x: 290, y: 290
                    }, {
                        x: 290, y: 145
                    }, {
                        x: 288, y: 384
                    }, {
                        x: 288, y: 288
                    }, {
                        x: 285, y: 195
                    }, {
                        x: 282, y: 424
                    }, {
                        x: 280, y: 280
                    }, {
                        x: 278, y: 370
                    }, {
                        x: 275, y: 206
                    }, {
                        x: 270, y: 270
                    }, {
                        x: 267, y: 150
                    }, {
                        x: 265, y: 362
                    }, {
                        x: 265, y: 265
                    }, {
                        x: 262, y: 262
                    }, {
                        x: 262, y: 235
                    }, {
                        x: 260, y: 356
                    }, {
                        x: 258, y: 258
                    }, {
                        x: 258, y: 194
                    }, {
                        x: 253, y: 253
                    }, {
                        x: 248, y: 248
                    }, {
                        x: 245, y: 245
                    }, {
                        x: 243, y: 137
                    }, {
                        x: 240, y: 240
                    }, {
                        x: 237, y: 316
                    }, {
                        x: 235, y: 235
                    }, {
                        x: 234, y: 320
                    }, {
                        x: 234, y: 234
                    }, {
                        x: 230, y: 316
                    }, {
                        x: 224, y: 224
                    }, {
                        x: 219, y: 300
                    }, {
                        x: 219, y: 150
                    }, {
                        x: 215, y: 294
                    }, {
                        x: 215, y: 215
                    }, {
                        x: 213, y: 213
                    }, {
                        x: 213, y: 120
                    }, {
                        x: 210, y: 316
                    }, {
                        x: 210, y: 210
                    }, {
                        x: 210, y: 207
                    }, {
                        x: 210, y: 204
                    }, {
                        x: 210, y: 188
                    }, {
                        x: 208, y: 208
                    }, {
                        x: 207, y: 210
                    }, {
                        x: 200, y: 300
                    }, {
                        x: 200, y: 200
                    }, {
                        x: 181, y: 181
                    }, {
                        x: 181, y: 102
                    }, {
                        x: 180, y: 245
                    }, {
                        x: 180, y: 180
                    }, {
                        x: 178, y: 100
                    }, {
                        x: 177, y: 133
                    }, {
                        x: 175, y: 120
                    }, {
                        x: 173, y: 173
                    }, {
                        x: 172, y: 258
                    }, {
                        x: 170, y: 170
                    }, {
                        x: 164, y: 164
                    }, {
                        x: 164, y: 115
                    }, {
                        x: 160, y: 160
                    }, {
                        x: 160, y: 120
                    }, {
                        x: 156, y: 208
                    }, {
                        x: 154, y: 116
                    }, {
                        x: 152, y: 208
                    }, {
                        x: 151, y: 151
                    }, {
                        x: 150, y: 225
                    }, {
                        x: 150, y: 150
                    }, {
                        x: 150, y: 134
                    }, {
                        x: 150, y: 103
                    }, {
                        x: 150, y: 84
                    }, {
                        x: 148, y: 148
                    }, {
                        x: 147, y: 150
                    }, {
                        x: 145, y: 193
                    }, {
                        x: 144, y: 108
                    }, {
                        x: 138, y: 208
                    }, {
                        x: 136, y: 102
                    }, {
                        x: 135, y: 135
                    }, {
                        x: 132, y: 181
                    }, {
                        x: 132, y: 132
                    }, {
                        x: 131, y: 131
                    }, {
                        x: 128, y: 128
                    }, {
                        x: 124, y: 115
                    }, {
                        x: 120, y: 120
                    }, {
                        x: 120, y: 90
                    }, {
                        x: 112, y: 84
                    }, {
                        x: 110, y: 110
                    }, {
                        x: 108, y: 108
                    }, {
                        x: 108, y: 72
                    }, {
                        x: 107, y: 160
                    }, {
                        x: 105, y: 105
                    }, {
                        x: 100, y: 135
                    }, {
                        x: 100, y: 120
                    }, {
                        x: 100, y: 100
                    }, {
                        x: 99, y: 135
                    }, {
                        x: 99, y: 99
                    }, {
                        x: 95, y: 95
                    }, {
                        x: 86, y: 86
                    }, {
                        x: 85, y: 120
                    }, {
                        x: 85, y: 85
                    }, {
                        x: 84, y: 84
                    }, {
                        x: 84, y: 56
                    }, {
                        x: 80, y: 60
                    }, {
                        x: 75, y: 75
                    }, {
                        x: 72, y: 72
                    }, {
                        x: 68, y: 38
                    }, {
                        x: 64, y: 64
                    }, {
                        x: 64, y: 48
                    }, {
                        x: 60, y: 90
                    }, {
                        x: 60, y: 60
                    }, {
                        x: 60, y: 45
                    }, {
                        x: 60, y: 40
                    }, {
                        x: 56, y: 56
                    }, {
                        x: 52, y: 52
                    }, {
                        x: 50, y: 50
                    }, {
                        x: 46, y: 63
                    }, {
                        x: 46, y: 60
                    }, {
                        x: 44, y: 44
                    }, {
                        x: 43, y: 64
                    }, {
                        x: 40, y: 40
                    }, {
                        x: 38, y: 38
                    }, {
                        x: 34, y: 34
                    }], _acceptableWideValuesEDS: [{
                        x: 2560, y: 1440
                    }, {
                        x: 2471, y: 753
                    }, {
                        x: 2399, y: 576
                    }, {
                        x: 2398, y: 1642
                    }, {
                        x: 2398, y: 576
                    }, {
                        x: 2100, y: 753
                    }, {
                        x: 2048, y: 1536
                    }, {
                        x: 2021, y: 576
                    }, {
                        x: 2020, y: 576
                    }, {
                        x: 1920, y: 1080
                    }, {
                        x: 1919, y: 1200
                    }, {
                        x: 1919, y: 1079
                    }, {
                        x: 1831, y: 540
                    }, {
                        x: 1830, y: 1391
                    }, {
                        x: 1830, y: 540
                    }, {
                        x: 1795, y: 448
                    }, {
                        x: 1793, y: 448
                    }, {
                        x: 1593, y: 896
                    }, {
                        x: 1562, y: 540
                    }, {
                        x: 1561, y: 1069
                    }, {
                        x: 1561, y: 540
                    }, {
                        x: 1501, y: 448
                    }, {
                        x: 1499, y: 1028
                    }, {
                        x: 1440, y: 1291
                    }, {
                        x: 1440, y: 810
                    }, {
                        x: 1366, y: 768
                    }, {
                        x: 1351, y: 380
                    }, {
                        x: 1315, y: 448
                    }, {
                        x: 1280, y: 800
                    }, {
                        x: 1280, y: 720
                    }, {
                        x: 1277, y: 320
                    }, {
                        x: 1276, y: 320
                    }, {
                        x: 1191, y: 320
                    }, {
                        x: 1138, y: 640
                    }, {
                        x: 1080, y: 789
                    }, {
                        x: 1067, y: 320
                    }, {
                        x: 1066, y: 810
                    }, {
                        x: 1024, y: 768
                    }, {
                        x: 1021, y: 448
                    }, {
                        x: 1012, y: 693
                    }, {
                        x: 981, y: 320
                    }, {
                        x: 935, y: 320
                    }, {
                        x: 934, y: 320
                    }, {
                        x: 854, y: 480
                    }, {
                        x: 853, y: 480
                    }, {
                        x: 796, y: 448
                    }, {
                        x: 770, y: 485
                    }, {
                        x: 754, y: 424
                    }, {
                        x: 725, y: 320
                    }, {
                        x: 724, y: 560
                    }, {
                        x: 724, y: 320
                    }, {
                        x: 672, y: 602
                    }, {
                        x: 648, y: 320
                    }, {
                        x: 640, y: 320
                    }, {
                        x: 598, y: 296
                    }, {
                        x: 580, y: 290
                    }, {
                        x: 562, y: 316
                    }, {
                        x: 480, y: 270
                    }, {
                        x: 470, y: 264
                    }, {
                        x: 420, y: 320
                    }, {
                        x: 420, y: 265
                    }, {
                        x: 420, y: 236
                    }, {
                        x: 420, y: 95
                    }, {
                        x: 400, y: 300
                    }, {
                        x: 395, y: 270
                    }, {
                        x: 380, y: 239
                    }, {
                        x: 380, y: 214
                    }, {
                        x: 380, y: 181
                    }, {
                        x: 370, y: 208
                    }, {
                        x: 367, y: 329
                    }, {
                        x: 366, y: 206
                    }, {
                        x: 347, y: 195
                    }, {
                        x: 327, y: 245
                    }, {
                        x: 320, y: 120
                    }, {
                        x: 313, y: 235
                    }, {
                        x: 296, y: 145
                    }, {
                        x: 290, y: 145
                    }, {
                        x: 285, y: 195
                    }, {
                        x: 275, y: 206
                    }, {
                        x: 267, y: 150
                    }, {
                        x: 262, y: 235
                    }, {
                        x: 258, y: 194
                    }, {
                        x: 243, y: 137
                    }, {
                        x: 219, y: 150
                    }, {
                        x: 213, y: 120
                    }, {
                        x: 210, y: 207
                    }, {
                        x: 210, y: 204
                    }, {
                        x: 210, y: 188
                    }, {
                        x: 181, y: 102
                    }, {
                        x: 178, y: 100
                    }, {
                        x: 177, y: 133
                    }, {
                        x: 175, y: 120
                    }, {
                        x: 164, y: 115
                    }, {
                        x: 160, y: 120
                    }, {
                        x: 154, y: 116
                    }, {
                        x: 150, y: 134
                    }, {
                        x: 150, y: 103
                    }, {
                        x: 150, y: 84
                    }, {
                        x: 144, y: 108
                    }, {
                        x: 136, y: 102
                    }, {
                        x: 124, y: 115
                    }, {
                        x: 120, y: 90
                    }, {
                        x: 112, y: 84
                    }, {
                        x: 108, y: 72
                    }, {
                        x: 84, y: 56
                    }, {
                        x: 80, y: 60
                    }, {
                        x: 68, y: 38
                    }, {
                        x: 64, y: 48
                    }, {
                        x: 60, y: 45
                    }, {
                        x: 60, y: 40
                    }], _acceptableSquareValuesEDS: [{
                        x: 2470, y: 2470
                    }, {
                        x: 2398, y: 2398
                    }, {
                        x: 2100, y: 2100
                    }, {
                        x: 2020, y: 2020
                    }, {
                        x: 1793, y: 1793
                    }, {
                        x: 1562, y: 1562
                    }, {
                        x: 1561, y: 1561
                    }, {
                        x: 1440, y: 1440
                    }, {
                        x: 1350, y: 1350
                    }, {
                        x: 1315, y: 1315
                    }, {
                        x: 1276, y: 1276
                    }, {
                        x: 1206, y: 1206
                    }, {
                        x: 1190, y: 1190
                    }, {
                        x: 1080, y: 1080
                    }, {
                        x: 1051, y: 1051
                    }, {
                        x: 1021, y: 1021
                    }, {
                        x: 980, y: 980
                    }, {
                        x: 938, y: 938
                    }, {
                        x: 934, y: 934
                    }, {
                        x: 896, y: 896
                    }, {
                        x: 864, y: 864
                    }, {
                        x: 818, y: 818
                    }, {
                        x: 800, y: 800
                    }, {
                        x: 770, y: 770
                    }, {
                        x: 756, y: 756
                    }, {
                        x: 754, y: 424
                    }, {
                        x: 720, y: 720
                    }, {
                        x: 672, y: 672
                    }, {
                        x: 666, y: 666
                    }, {
                        x: 640, y: 640
                    }, {
                        x: 594, y: 594
                    }, {
                        x: 592, y: 592
                    }, {
                        x: 588, y: 588
                    }, {
                        x: 580, y: 290
                    }, {
                        x: 576, y: 576
                    }, {
                        x: 562, y: 316
                    }, {
                        x: 553, y: 553
                    }, {
                        x: 518, y: 518
                    }, {
                        x: 496, y: 496
                    }, {
                        x: 480, y: 480
                    }, {
                        x: 464, y: 464
                    }, {
                        x: 448, y: 448
                    }, {
                        x: 441, y: 441
                    }, {
                        x: 430, y: 430
                    }, {
                        x: 424, y: 424
                    }, {
                        x: 423, y: 423
                    }, {
                        x: 420, y: 420
                    }, {
                        x: 402, y: 402
                    }, {
                        x: 380, y: 380
                    }, {
                        x: 370, y: 370
                    }, {
                        x: 361, y: 361
                    }, {
                        x: 343, y: 343
                    }, {
                        x: 336, y: 336
                    }, {
                        x: 329, y: 329
                    }, {
                        x: 320, y: 320
                    }, {
                        x: 316, y: 316
                    }, {
                        x: 313, y: 313
                    }, {
                        x: 307, y: 307
                    }, {
                        x: 300, y: 300
                    }, {
                        x: 290, y: 290
                    }, {
                        x: 288, y: 288
                    }, {
                        x: 280, y: 280
                    }, {
                        x: 270, y: 270
                    }, {
                        x: 265, y: 265
                    }, {
                        x: 262, y: 262
                    }, {
                        x: 258, y: 258
                    }, {
                        x: 253, y: 253
                    }, {
                        x: 248, y: 248
                    }, {
                        x: 245, y: 245
                    }, {
                        x: 240, y: 240
                    }, {
                        x: 235, y: 235
                    }, {
                        x: 234, y: 234
                    }, {
                        x: 224, y: 224
                    }, {
                        x: 215, y: 215
                    }, {
                        x: 213, y: 213
                    }, {
                        x: 210, y: 210
                    }, {
                        x: 208, y: 208
                    }, {
                        x: 200, y: 200
                    }, {
                        x: 181, y: 181
                    }, {
                        x: 180, y: 180
                    }, {
                        x: 173, y: 173
                    }, {
                        x: 170, y: 170
                    }, {
                        x: 164, y: 164
                    }, {
                        x: 160, y: 160
                    }, {
                        x: 151, y: 151
                    }, {
                        x: 150, y: 150
                    }, {
                        x: 148, y: 148
                    }, {
                        x: 135, y: 135
                    }, {
                        x: 132, y: 132
                    }, {
                        x: 131, y: 131
                    }, {
                        x: 128, y: 128
                    }, {
                        x: 120, y: 120
                    }, {
                        x: 110, y: 110
                    }, {
                        x: 108, y: 108
                    }, {
                        x: 105, y: 105
                    }, {
                        x: 100, y: 100
                    }, {
                        x: 99, y: 99
                    }, {
                        x: 95, y: 95
                    }, {
                        x: 86, y: 86
                    }, {
                        x: 85, y: 85
                    }, {
                        x: 84, y: 84
                    }, {
                        x: 75, y: 75
                    }, {
                        x: 72, y: 72
                    }, {
                        x: 64, y: 64
                    }, {
                        x: 60, y: 60
                    }, {
                        x: 56, y: 56
                    }, {
                        x: 52, y: 52
                    }, {
                        x: 50, y: 50
                    }, {
                        x: 44, y: 44
                    }, {
                        x: 40, y: 40
                    }, {
                        x: 38, y: 38
                    }, {
                        x: 34, y: 34
                    }], _acceptableTallValuesEDS: [{
                        x: 720, y: 1280
                    }, {
                        x: 810, y: 1080
                    }, {
                        x: 789, y: 1080
                    }, {
                        x: 788, y: 1080
                    }, {
                        x: 720, y: 1080
                    }, {
                        x: 584, y: 800
                    }, {
                        x: 556, y: 740
                    }, {
                        x: 540, y: 720
                    }, {
                        x: 526, y: 720
                    }, {
                        x: 480, y: 720
                    }, {
                        x: 480, y: 640
                    }, {
                        x: 467, y: 640
                    }, {
                        x: 426, y: 640
                    }, {
                        x: 464, y: 636
                    }, {
                        x: 370, y: 500
                    }, {
                        x: 464, y: 497
                    }, {
                        x: 320, y: 426
                    }, {
                        x: 318, y: 424
                    }, {
                        x: 310, y: 424
                    }, {
                        x: 282, y: 424
                    }, {
                        x: 380, y: 407
                    }, {
                        x: 288, y: 384
                    }, {
                        x: 278, y: 370
                    }, {
                        x: 265, y: 362
                    }, {
                        x: 260, y: 356
                    }, {
                        x: 234, y: 320
                    }, {
                        x: 237, y: 316
                    }, {
                        x: 230, y: 316
                    }, {
                        x: 210, y: 316
                    }, {
                        x: 219, y: 300
                    }, {
                        x: 200, y: 300
                    }, {
                        x: 215, y: 294
                    }, {
                        x: 172, y: 258
                    }, {
                        x: 180, y: 245
                    }, {
                        x: 150, y: 225
                    }, {
                        x: 207, y: 210
                    }, {
                        x: 156, y: 208
                    }, {
                        x: 152, y: 208
                    }, {
                        x: 138, y: 208
                    }, {
                        x: 145, y: 193
                    }, {
                        x: 132, y: 181
                    }, {
                        x: 107, y: 160
                    }, {
                        x: 147, y: 150
                    }, {
                        x: 100, y: 135
                    }, {
                        x: 99, y: 135
                    }, {
                        x: 100, y: 120
                    }, {
                        x: 85, y: 120
                    }, {
                        x: 60, y: 90
                    }, {
                        x: 43, y: 64
                    }, {
                        x: 46, y: 63
                    }, {
                        x: 46, y: 60
                    }], _acceptableWidthsEDS: [2560, 2471, 2470, 2399, 2398, 2100, 2048, 2021, 2020, 1920, 1919, 1831, 1830, 1795, 1793, 1593, 1562, 1561, 1501, 1499, 1440, 1366, 1351, 1350, 1315, 1280, 1277, 1276, 1206, 1191, 1190, 1138, 1080, 1067, 1066, 1051, 1024, 1021, 1012, 981, 980, 938, 935, 934, 896, 864, 854, 853, 818, 810, 800, 796, 789, 788, 770, 756, 754, 725, 724, 720, 672, 666, 648, 640, 598, 594, 592, 588, 584, 580, 576, 562, 556, 553, 540, 526, 518, 496, 480, 470, 467, 464, 448, 441, 430, 426, 424, 423, 420, 402, 400, 395, 380, 370, 367, 366, 361, 347, 343, 336, 329, 327, 320, 318, 316, 313, 310, 307, 300, 296, 290, 288, 285, 282, 280, 278, 275, 270, 267, 265, 262, 260, 258, 253, 248, 245, 243, 240, 237, 235, 234, 230, 224, 219, 215, 213, 210, 208, 207, 200, 181, 180, 178, 177, 175, 173, 172, 170, 164, 160, 156, 154, 152, 151, 150, 148, 147, 145, 144, 138, 136, 135, 132, 131, 128, 124, 120, 112, 110, 108, 107, 105, 100, 99, 95, 86, 85, 84, 80, 75, 72, 68, 64, 60, 56, 52, 50, 46, 44, 43, 40, 38, 34], _acceptableHeightsEDS: [2470, 2398, 2100, 2020, 1793, 1642, 1562, 1561, 1536, 1440, 1391, 1350, 1315, 1291, 1280, 1276, 1206, 1200, 1190, 1080, 1079, 1069, 1051, 1028, 1021, 980, 938, 934, 896, 864, 818, 810, 800, 789, 770, 768, 756, 753, 740, 720, 693, 672, 666, 640, 636, 602, 594, 592, 588, 576, 560, 553, 540, 518, 500, 497, 496, 485, 480, 464, 448, 441, 430, 426, 424, 423, 420, 407, 402, 384, 380, 370, 362, 361, 356, 343, 336, 329, 320, 316, 313, 307, 300, 296, 294, 290, 288, 280, 270, 265, 264, 262, 258, 253, 248, 245, 240, 239, 236, 235, 234, 225, 224, 215, 214, 213, 210, 208, 207, 206, 204, 200, 195, 194, 193, 188, 181, 180, 173, 170, 164, 160, 151, 150, 148, 145, 137, 135, 134, 133, 132, 131, 128, 120, 116, 115, 110, 108, 105, 103, 102, 100, 99, 95, 90, 86, 85, 84, 75, 72, 64, 63, 60, 56, 52, 50, 48, 45, 44, 40, 38, 34], makeCatalogImageUri: function makeCatalogImageUri(imageId, imageIdType, dimensions, forceImageResize, ignoreZeroLengths, requestedImage, imageChildId, imageContentType) {
                    var url = null;
                    var idTypes = MS.Entertainment.Data.ImageIdType;
                    var verifiedRequestedImage;
                    var verifiedDimensions;
                    var verifiedImageIdType;
                    var paramArray = [];
                    if (!imageId)
                        throw"Must specify a valid catalog image guid";
                    if (imageContentType === null || imageContentType === undefined)
                        imageContentType = MS.Entertainment.ImageContentType.jpeg;
                    if (imageIdType === null || imageIdType === undefined)
                        verifiedImageIdType = MS.Entertainment.Data.ImageIdType.image;
                    else {
                        MS.Entertainment.Utilities.validateIsMemberOrThrow(imageIdType, MS.Entertainment.Data.ImageIdType);
                        verifiedImageIdType = imageIdType
                    }
                    if (!requestedImage)
                        verifiedRequestedImage = this._getStringFromRequestedImage(MS.Entertainment.ImageRequested.primaryImage);
                    else {
                        MS.Entertainment.Utilities.validateIsMemberOrThrow(requestedImage, MS.Entertainment.ImageRequested);
                        verifiedRequestedImage = this._getStringFromRequestedImage(requestedImage)
                    }
                    verifiedDimensions = {
                        x: 0, y: 0
                    };
                    if (dimensions) {
                        if (dimensions.hasOwnProperty("x") && dimensions.x)
                            verifiedDimensions.x = dimensions.x;
                        if (dimensions.hasOwnProperty("y") && dimensions.y)
                            verifiedDimensions.y = dimensions.y
                    }
                    try {
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        MS.Entertainment.UI.Shell.ImageLoader._initializeEndpointCache();
                        switch (verifiedImageIdType) {
                            case idTypes.movie:
                            case idTypes.editorialMovie:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.moviesMarketplace))
                                    url = "{0}/movie/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.artist:
                            case idTypes.editorialArtist:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                                    url = "{0}/music/artist/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.album:
                            case idTypes.editorialAlbum:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                                    url = "{0}/music/album/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.track:
                            case idTypes.editorialTrack:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                                    url = "{0}/music/track/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.musicVideo:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicVideosMarketplace))
                                    url = "{0}/music/musicvideo/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.movieTrailer:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.movieTrailersMarketplace))
                                    url = "{0}/movieTrailer/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.playlist:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace))
                                    url = "{0}/music/playlist/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.podcast:
                                url = "{0}/podcast/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.network:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                    url = "{0}/tv/network/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.series:
                            case idTypes.editorialSeries:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                    url = "{0}/tv/series/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.episode:
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                    url = "{0}/tv/episode/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.application:
                                url = "{0}/apps/{1}/{2}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, verifiedRequestedImage);
                                break;
                            case idTypes.season:
                            case idTypes.editorialSeason:
                                if (typeof imageChildId === "undefined")
                                    throw"imageChildId must be specified for seasons";
                                if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.tvMarketplace))
                                    url = "{0}/tv/series/{1}/seasons/{2}/{3}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId, imageChildId, verifiedRequestedImage);
                                break;
                            case idTypes.image:
                                url = "{0}/image/{1}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageId);
                                break;
                            case idTypes.studio:
                                if (typeof imageChildId === "undefined")
                                    throw"imageChildId must be specified for studios";
                                url = "{0}/{1}/studio/{2}/{3}".format(MS.Entertainment.UI.Shell.ImageLoader._endpointCache.imageCatalog, imageChildId, imageId, verifiedRequestedImage);
                                break;
                            default:
                                throw"unknown imageidtype";
                        }
                    }
                    catch(error) {
                        return null
                    }
                    if (forceImageResize)
                        paramArray.push({
                            name: "resize", value: "true"
                        });
                    var scaleFactor = this._getCurrentScaleFactor();
                    var calcSize = this._calculateImageUriSize(verifiedDimensions, scaleFactor, MS.Entertainment.UI.Shell.ImageLoader.ImageService.Zune);
                    if (verifiedDimensions.x > 0 || !ignoreZeroLengths)
                        paramArray.push({
                            name: "width", value: calcSize.x.toString()
                        });
                    if (verifiedDimensions.y > 0 || !ignoreZeroLengths)
                        paramArray.push({
                            name: "height", value: calcSize.y.toString()
                        });
                    if (imageContentType)
                        paramArray.push({
                            name: "contenttype", value: imageContentType
                        });
                    if (url && paramArray.length > 0)
                        url = url + this._generateUrlParamSubstring(paramArray);
                    return url
                }, _calculateImageUriSize: function _calculateImageUriSize(size, scaleFactor, imageService) {
                    var calcSize = {
                            x: size.x, y: size.y
                        };
                    if (size.x === 0)
                        if (size.y === 0)
                            calcSize = this._findAcceptableWidthHeight(this._defaultImageSize.x * scaleFactor, this._defaultImageSize.y * scaleFactor, imageService);
                        else
                            calcSize = this._findMatchingWidth(size.y * scaleFactor, imageService);
                    else if (size.y === 0)
                        calcSize = this._findMatchingHeight(size.x * scaleFactor, imageService);
                    else {
                        var scaledX = size.x * scaleFactor;
                        var scaledY = size.y * scaleFactor;
                        calcSize = this._findAcceptableWidthHeight(scaledX, scaledY, imageService)
                    }
                    return calcSize
                }, _findAcceptableWidthHeight: function _findAcceptableWidthHeight(width, height, imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    var calcSize = {
                            x: -1, y: 0
                        };
                    var index = 0;
                    var aspectAcceptableValues = [];
                    var searchSet = [];
                    if (width === height)
                        aspectAcceptableValues = ImageLoader._getAcceptableSquareValuesArray(imageService);
                    else if (width > height)
                        aspectAcceptableValues = ImageLoader._getAcceptableWideValuesArray(imageService);
                    else
                        aspectAcceptableValues = ImageLoader._getAcceptableTallValuesArray(imageService);
                    for (var index = 0; index < aspectAcceptableValues.length; index++)
                        if (calcSize.x > -1)
                            if (calcSize.x === aspectAcceptableValues[index].x)
                                searchSet.push(aspectAcceptableValues[index]);
                            else
                                break;
                        else if (aspectAcceptableValues[index].x <= width) {
                            if ((aspectAcceptableValues[index].x < width) && (index > 0))
                                index--;
                            calcSize.x = aspectAcceptableValues[index].x;
                            searchSet.push(aspectAcceptableValues[index])
                        }
                    for (var index = 0; index < searchSet.length; index++)
                        if (searchSet[index].y <= height) {
                            calcSize.y = searchSet[index].y;
                            break
                        }
                    if (calcSize.x === -1) {
                        var size = aspectAcceptableValues[aspectAcceptableValues.length - 1];
                        calcSize.x = size.x;
                        calcSize.y = size.y
                    }
                    if (calcSize.y === 0)
                        calcSize.y = searchSet[searchSet.length - 1].y;
                    return calcSize
                }, _findMatchingWidth: function _findMatchingWidth(height, imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    var acceptableHeights = ImageLoader._getAcceptableHeightsArray(imageService);
                    var acceptableValues = ImageLoader._getAcceptableValuesArray(imageService);
                    var calcSize = {
                            x: 0, y: height
                        };
                    var index = 0;
                    while (index < acceptableHeights.length - 1 && height < acceptableHeights[index])
                        index = index + 1;
                    calcSize.y = acceptableHeights[index];
                    var i;
                    for (i = 0; i < acceptableValues.length; i++)
                        if (acceptableValues[i].y === calcSize.y) {
                            calcSize.x = acceptableValues[i].x;
                            break
                        }
                    return calcSize
                }, _findMatchingHeight: function _findMatchingHeight(width, imageService) {
                    var ImageLoader = MS.Entertainment.UI.Shell.ImageLoader;
                    var acceptableWidths = ImageLoader._getAcceptableWidthsArray(imageService);
                    var acceptableValues = ImageLoader._getAcceptableValuesArray(imageService);
                    var calcSize = {
                            x: width, y: 0
                        };
                    var index = 0;
                    while (index < acceptableWidths.length - 1 && width < acceptableWidths[index])
                        index = index + 1;
                    calcSize.x = acceptableWidths[index];
                    var i;
                    for (i = 0; i < acceptableValues.length; i++)
                        if (acceptableValues[i].x === calcSize.x) {
                            calcSize.y = acceptableValues[i].y;
                            break
                        }
                    return calcSize
                }, _generateUrlParamSubstring: function _generateUrlParamSubstring(params) {
                    var paramString = "";
                    for (var i = 0; i < params.length; i++) {
                        if (i === 0)
                            paramString = paramString + "?";
                        else
                            paramString = paramString + "&";
                        paramString = paramString + params[i].name.toString();
                        paramString = paramString + "=";
                        paramString = paramString + params[i].value.toString()
                    }
                    return paramString
                }, _getStringFromRequestedImage: function _getStringFromRequestedImage(requestedImage) {
                    for (var k in MS.Entertainment.ImageRequested)
                        if (MS.Entertainment.ImageRequested[k] === requestedImage)
                            return k;
                    MS.Entertainment.UI.Shell.assert(false, "Invalid value for ImageRequested");
                    return null
                }, imageManager: {get: function getImageManager() {
                        if (!this._imageManager)
                            this._imageManager = new Microsoft.Entertainment.ImageManager;
                        return this._imageManager
                    }}, cacheImage: function cacheUrl(url, defaultImage) {
                    return this.imageManager.retrieveImageFromUrlAsync(Microsoft.Entertainment.NetworkUsage.normal, url, String.empty, defaultImage)
                }, calculateScaledSize: function calculateScaledSize(width, height) {
                    var size = {
                            x: 0, y: 0
                        };
                    if (width)
                        size.x = width;
                    if (height)
                        size.y = height;
                    MS.Entertainment.UI.Shell.assert(size.x || (MS.Entertainment.UI.Shell.ImageLoader._acceptableWidthsEDS.indexOf(size.x) > -1), "ImageLoader: pixel width is not an acceptable value");
                    MS.Entertainment.UI.Shell.assert(size.y || (MS.Entertainment.UI.Shell.ImageLoader._acceptableHeightsEDS.indexOf(size.y) > -1), "ImageLoader: pixel height is not an acceptable value");
                    var scaleFactor = this._getCurrentScaleFactor();
                    return this._calculateImageUriSize(size, scaleFactor)
                }, _getCurrentScaleFactor: function _getCurrentScaleFactor() {
                    var scaleFactor = 1.0;
                    switch (MS.Entertainment.Utilities.getDisplayProperties().resolutionScale) {
                        case Windows.Graphics.Display.ResolutionScale.scale180Percent:
                            scaleFactor = 1.4;
                            break;
                        case Windows.Graphics.Display.ResolutionScale.scale140Percent:
                        case Windows.Graphics.Display.ResolutionScale.scale100Percent:
                            scaleFactor = 1.0;
                            break;
                        default:
                            MS.Entertainment.UI.Shell.assert(false, "Unknown scale size requested");
                            scaleFactor = 1.0;
                            break
                    }
                    return scaleFactor
                }, getServiceImageRequestSize: function getServiceImageRequestSize(initialSize) {
                    var scaleFactor = this._getCurrentScaleFactor();
                    return this._calculateImageUriSize(initialSize, scaleFactor)
                }, getServiceImageUrl: function getServiceImageUrl(mediaItem, width, height, requestedImage, imageIdType, defaultImageUri, imageContentType) {
                    var resultPromise;
                    var imageId = null;
                    var data = null;
                    var convertedItem = null;
                    var verifiedRequestedImage;
                    var asyncUri;
                    if (!mediaItem)
                        return WinJS.Promise.wrap();
                    if (width === "screen")
                        width = MS.Entertainment.Utilities.getLandscapeScreenSize().width;
                    if (height === "screen")
                        width = MS.Entertainment.Utilities.getLandscapeScreenSize().height;
                    if (!requestedImage)
                        verifiedRequestedImage = MS.Entertainment.ImageRequested.primaryImage;
                    else {
                        MS.Entertainment.Utilities.validateIsMemberOrThrow(requestedImage, MS.Entertainment.ImageRequested);
                        verifiedRequestedImage = requestedImage
                    }
                    if (mediaItem.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem) {
                        convertedItem = MS.Entertainment.Utilities.convertEditorialItem(mediaItem);
                        mediaItem.mediaType = convertedItem.mediaType;
                        mediaItem.videoType = convertedItem.videoType;
                        imageIdType = imageIdType || convertedItem.serviceImageType;
                        if (!mediaItem.mediaType && MS.Entertainment.Data.Augmenter.Marketplace.EditorialType.Hub)
                            mediaItem.mediaType = Microsoft.Entertainment.Queries.ObjectType.editorial
                    }
                    if (mediaItem.serviceId && mediaItem.serviceId !== MS.Entertainment.Utilities.EMPTY_GUID)
                        imageId = mediaItem.serviceId;
                    var mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.defaultImage;
                    height = height || MS.Entertainment.UI.Shell.ImageLoader.DefaultThumbnailSizes.defaultWidth;
                    imageIdType = imageIdType || mediaItem.serviceImageType;
                    switch (mediaItem.mediaType || mediaItem.serviceType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo) {
                                mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.musicVideo;
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.image;
                                width = width || 420
                            }
                            else if (mediaItem.videoType === Microsoft.Entertainment.Queries.VideoType.tvEpisode) {
                                mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.tvEpisode;
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.episode;
                                width = width || height
                            }
                            else {
                                mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.movie;
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.movie;
                                width = width || MS.Entertainment.UI.Shell.ImageLoader.DefaultThumbnailSizes.video
                            }
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.tvSeries;
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.series;
                            width = width || height;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.tvSeason;
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.season;
                            imageId = mediaItem.seriesId || (convertedItem ? convertedItem.seriesId : null);
                            data = mediaItem.seasonNumber;
                            if ((data === null || data === undefined) && convertedItem)
                                data = convertedItem.seasonNumber;
                            width = width || height;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.artist;
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.artist;
                            width = width || 420;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.smartDJ:
                            mediaItemDefaultImage = "";
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.artist;
                            width = width || 420;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album;
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.album;
                            width = width || height;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            if (mediaItem.hasAlbumServiceId) {
                                mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album;
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.album;
                                imageId = mediaItem.albumServiceId
                            }
                            else {
                                mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.track;
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.track;
                                verifiedRequestedImage = requestedImage || MS.Entertainment.ImageRequested.albumImage
                            }
                            width = width || height;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.game;
                            if (mediaItem.hexTitleId) {
                                imageId = parseInt(mediaItem.hexTitleId);
                                data = parseInt(mediaItem.hexTitleId);
                                imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.xboxGame
                            }
                            width = width || 234;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.playlist;
                            imageIdType = imageIdType || MS.Entertainment.Data.ImageIdType.playlist;
                            width = width || height;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.editorial:
                            imageIdType = MS.Entertainment.Data.ImageIdType.image;
                            width = width || height;
                            break;
                        case MS.Entertainment.Data.Augmenter.ServiceTypes.wmis:
                        case MS.Entertainment.Data.Augmenter.ServiceTypes.audioAd:
                            mediaItemDefaultImage = MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.folder:
                            width = width || 234;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.genre:
                            width = width || 240;
                            break;
                        default:
                            if (mediaItem.imageResizeUri)
                                width = width || 240;
                            else {
                                MS.Entertainment.UI.Shell.assert(false, "Unknown media type or service type had image requested, MediaType: " + mediaItem.mediaType + " ServiceType: " + mediaItem.serviceType + " ImageIdType: " + imageIdType);
                                width = 240
                            }
                            break
                    }
                    if (imageIdType === MS.Entertainment.Data.ImageIdType.image && mediaItem.imageId && mediaItem.imageId !== MS.Entertainment.Utilities.EMPTY_GUID)
                        imageId = mediaItem.imageId;
                    if (typeof defaultImageUri !== "string")
                        defaultImageUri = mediaItemDefaultImage;
                    var calculatedSize = MS.Entertainment.UI.Shell.ImageLoader.calculateScaledSize(width, height);
                    if (this.isImageManagerV2Supported(mediaItem.mediaType))
                        resultPromise = this.getImageManagerV2Image(mediaItem, calculatedSize.x, calculatedSize.y, defaultImageUri);
                    else {
                        if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.person && MS.Entertainment.Utilities.isValidServiceId(mediaItem.zuneId))
                            asyncUri = MS.Entertainment.UI.Shell.ImageLoader.getNewImageServiceUri(mediaItem, calculatedSize.x, calculatedSize.y);
                        else if (mediaItem.imageResizeUri)
                            asyncUri = MS.Entertainment.UI.Shell.ImageLoader.appendResizeParameters(mediaItem.imageResizeUri, calculatedSize.x, calculatedSize.y);
                        else if (mediaItem.imageUri)
                            asyncUri = mediaItem.imageUri;
                        else if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album)
                            asyncUri = MS.Entertainment.UI.Shell.ImageLoader.getNewImageServiceUri(mediaItem, calculatedSize.x, calculatedSize.y);
                        else if (MS.Entertainment.Utilities.isValidWatchlistId(mediaItem.watchlistId) && mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video)
                            asyncUri = MS.Entertainment.UI.Shell.ImageLoader.getNewImageServiceUri(mediaItem, calculatedSize.x, calculatedSize.y, null, MS.Entertainment.Data.Augmenter.Marketplace.edsImagePurpose.boxArt);
                        else if (imageIdType !== null && imageIdType !== undefined && imageId && imageId !== MS.Entertainment.Utilities.EMPTY_GUID) {
                            var sizeUnscaled = {
                                    x: width, y: height
                                };
                            asyncUri = this.makeCatalogImageUri(imageId, imageIdType, sizeUnscaled, true, false, verifiedRequestedImage, data, imageContentType)
                        }
                        if (asyncUri)
                            if (MS.Entertainment.UI.Shell.ImageLoader.isPackageUrl(asyncUri))
                                resultPromise = WinJS.Promise.wrap(asyncUri);
                            else
                                resultPromise = this.imageManager.retrieveImageFromUrlAsync(Microsoft.Entertainment.NetworkUsage.normal, asyncUri, mediaItem.filePath || String.empty, defaultImageUri);
                        else if (mediaItem.filePath && !MS.Entertainment.UI.Shell.ImageLoader.isWebUrl(mediaItem.filePath) && !MS.Entertainment.UI.Shell.ImageLoader.isBlobUrl(mediaItem.filePath) && !MS.Entertainment.UI.Shell.ImageLoader.isStreamingUrl(mediaItem.filePath))
                            resultPromise = this.imageManager.retrieveImageFromUrlAsync(Microsoft.Entertainment.NetworkUsage.normal, String.empty, mediaItem.filePath, defaultImageUri);
                        else if (mediaItem.imageUri)
                            if (mediaItem.filePath && MS.Entertainment.UI.Shell.ImageLoader.isBlobUrl(mediaItem.filePath) && MS.Entertainment.UI.Shell.ImageLoader.isBlobUrl(mediaItem.imageUri))
                                resultPromise = WinJS.Promise.wrap(mediaItem.imageUri);
                            else
                                resultPromise = this.imageManager.retrieveImageFromUrlAsync(Microsoft.Entertainment.NetworkUsage.normal, mediaItem.imageUri, mediaItem.filePath || String.empty, defaultImageUri);
                        else
                            resultPromise = WinJS.Promise.wrap(defaultImageUri)
                    }
                    return resultPromise
                }, getImageManagerV2Image: function getImageManagerV2Image(mediaItem, width, height, defaultImageUri) {
                    MS.Entertainment.UI.Shell.assert(mediaItem, "ImageLoader::getImageManagerV2Image() A media item is required.");
                    MS.Entertainment.UI.Shell.assert(mediaItem && (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album || mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track), "ImageLoader::getImageManagerV2Image() Unsupported media type.  The mediaType must be album or track.");
                    var resultPromise;
                    var imageUri = mediaItem.imageResizeUri || mediaItem.imageUri;
                    var cacheType = mediaItem.inCollection ? Microsoft.Entertainment.ImageCacheType.permanent : Microsoft.Entertainment.ImageCacheType.temporary;
                    if (imageUri)
                        resultPromise = this.imageManager.retrieveImageFromBaseUrlAsync(imageUri, width, height, Microsoft.Entertainment.NetworkUsage.normal, Microsoft.Entertainment.ResolutionFallback.betterQuality, cacheType, defaultImageUri);
                    else if (MS.Entertainment.Utilities.isValidServiceId(mediaItem.zuneId))
                        resultPromise = this.imageManager.retrieveImageForMediaAsync(Microsoft.Entertainment.ImageNamespace.music, mediaItem.zuneId, width, height, Microsoft.Entertainment.ImageSourceFilterFlag.none, Microsoft.Entertainment.ImageResizeMode.scale, Microsoft.Entertainment.NetworkUsage.normal, Microsoft.Entertainment.ResolutionFallback.betterQuality, cacheType, defaultImageUri);
                    else
                        resultPromise = WinJS.Promise.wrap(defaultImageUri);
                    return resultPromise
                }, getNewImageServiceUri: function getNewImageServiceUri(mediaItem, width, height, sources, purposes) {
                    if (!mediaItem || !MS.Entertainment.Utilities.isValidServiceId(mediaItem.zuneId))
                        return String.empty;
                    var imageServiceNamespace;
                    if (MS.Entertainment.Utilities.isMusicApp)
                        imageServiceNamespace = "music";
                    else if (MS.Entertainment.Utilities.isVideoApp)
                        imageServiceNamespace = "video";
                    else
                        MS.Entertainment.fail("Unknown namespace in getNewImageServiceUri");
                    var uri = "{0}/catalog/{1}.{2}/image".format(MS.Entertainment.Endpoint.load(MS.Entertainment.Endpoint.id.seid_MusicImageService), imageServiceNamespace, mediaItem.zuneId);
                    var params = {locale: MS.Entertainment.Endpoint.getCulture()};
                    if (width > 0 && height > 0) {
                        params.w = width;
                        params.h = height
                    }
                    if (sources)
                        params.sources = sources;
                    if (purposes)
                        params.purposes = purposes;
                    return MS.Entertainment.Utilities.UriFactory.appendQuery(uri, params)
                }, getMediaItemDefaultImageUrl: function getMediaItemDefaultImageUrl(item) {
                    if (!item)
                        return MS.Entertainment.UI.Shell.ImageLoader._commonDefault;
                    var mediaType = item.mediaType;
                    var videoType = MS.Entertainment.Platform.PlaybackHelpers && MS.Entertainment.Platform.PlaybackHelpers.isVideo(item) ? item.videoType : Microsoft.Entertainment.Queries.VideoType.other;
                    if (item.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem) {
                        var convertedItem = MS.Entertainment.Utilities.convertEditorialItem(item);
                        mediaType = convertedItem.mediaType;
                        videoType = convertedItem.videoType
                    }
                    switch (mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            if (videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo)
                                return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.musicVideo;
                            else if (videoType === Microsoft.Entertainment.Queries.VideoType.movie)
                                return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.movie;
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.otherVideo;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.tvSeries;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.tvSeason;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.artist;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.album;
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                            return MS.Entertainment.UI.Shell.ImageLoader.MediaDefaultUrls.game;
                        default:
                            return MS.Entertainment.UI.Shell.ImageLoader._commonDefault
                    }
                }, registerMediaItemImageUrlCallback: function registerMediaItemImageUrlCallback(mediaItem, callback, width, height) {
                    if (!mediaItem.mediaItemImageUrlCallback) {
                        var observable = WinJS.Binding.as(mediaItem);
                        var pendingImageUpdate = true;
                        var mediaItemImageUrlCallback = function calculateNewUrl() {
                                if (!pendingImageUpdate) {
                                    pendingImageUpdate = true;
                                    return MS.Entertainment.UI.Shell.ImageLoader.getServiceImageUrl(mediaItem, width, height).then(function deliverPrimaryUrl(url) {
                                            callback(url);
                                            pendingImageUpdate = false
                                        })
                                }
                            };
                        observable.bind("serviceType", mediaItemImageUrlCallback);
                        observable.bind("mediaType", mediaItemImageUrlCallback);
                        observable.bind("videoType", mediaItemImageUrlCallback);
                        observable.bind("serviceId", mediaItemImageUrlCallback);
                        observable.bind("imageId", mediaItemImageUrlCallback);
                        observable.bind("filePath", mediaItemImageUrlCallback);
                        observable.bind("imageUri", mediaItemImageUrlCallback);
                        pendingImageUpdate = false;
                        WinJS.Promise.timeout().then(function() {
                            mediaItemImageUrlCallback()
                        });
                        return {
                                observable: observable, mediaItemImageUrlCallback: mediaItemImageUrlCallback
                            }
                    }
                }, unregisterMediaItemImageUrlCallback: function unregisterMediaItemImageUrlCallback(token) {
                    var observable = token.observable;
                    var mediaItemImageUrlCallback = token.mediaItemImageUrlCallback;
                    observable.unbind("serviceType", mediaItemImageUrlCallback);
                    observable.unbind("mediaType", mediaItemImageUrlCallback);
                    observable.unbind("videoType", mediaItemImageUrlCallback);
                    observable.unbind("serviceId", mediaItemImageUrlCallback);
                    observable.unbind("imageId", mediaItemImageUrlCallback);
                    observable.unbind("filePath", mediaItemImageUrlCallback);
                    observable.unbind("imageUri", mediaItemImageUrlCallback)
                }, DefaultThumbnailSizes: {
                    defaultWidth: 320, video: 234
                }
        }), ImageControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Framework.ImageControl", null, function(element, options){}, {
                _cachedUrl: null, naturalWidth: null, naturalHeight: null, addLoadedClassToParent: false, _urlToRevoke: null, _urlRevoked: false, loadImage: function loadImage(target) {
                        this.revokeUrlIfNeeded();
                        if (String.isString(target) && (MS.Entertainment.UI.Shell.ImageLoader.isWebUrl(target) || MS.Entertainment.UI.Shell.ImageLoader.isFileUrl(target)))
                            return MS.Entertainment.UI.Shell.ImageLoader.cacheImage(target, String.empty);
                        else if (String.isString(target))
                            return WinJS.Promise.as(target);
                        else if (target.overrideItemUseUrl)
                            return MS.Entertainment.UI.Shell.ImageLoader.cacheImage(target.imagePrimaryUrl, String.empty);
                        else if (MS.Entertainment.Utilities.isAmsterdamApp && (!(target instanceof MS.Entertainment.Data.Augmenter.MediaBrowser.BaseDriveItem) && (target instanceof MS.Entertainment.Data.Augmenter.MediaBrowser.FolderItem || target instanceof MS.Entertainment.Data.Augmenter.MediaBrowser.PhotoItem || target instanceof MS.Entertainment.Data.Augmenter.MediaBrowser.VideoItem || target instanceof MS.Entertainment.Data.Augmenter.MediaBrowser.MusicItem))) {
                            var thumbnailMode = target.thumbnailMode;
                            var size;
                            if (this.desiredImageSize)
                                size = Math.max(this.desiredImageSize.width, this.desiredImageSize.height);
                            if (this.useScreenResolutionImage)
                                return MS.Entertainment.Hydrator.MediaBrowser.getScreenResolutionImage(this.target).then(function(image) {
                                        return this._createObjectUrl(image)
                                    }.bind(this));
                            else
                                return MS.Entertainment.Hydrator.MediaBrowser.hydrateThumbnail(target, thumbnailMode, size).then(function(hydrated) {
                                        return this._createObjectUrl(hydrated && hydrated.thumbnailUri)
                                    }.bind(this))
                        }
                        else if (target.mediaType || target.serviceType && target.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem || target.serviceType && target.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.wmis)
                            return this._loadImageFromTarget(target);
                        else if (target.imageUriOverride)
                            return WinJS.Promise.as(target.imageUriOverride);
                        else
                            return WinJS.Promise.as(target)
                    }, freeze: function freeze() {
                        this.skipImageResetOnThaw = this._urlRevoked;
                        MS.Entertainment.UI.Framework.ImageControl.prototype.freeze.call(this)
                    }, thaw: function thaw() {
                        MS.Entertainment.UI.Framework.ImageControl.prototype.thaw.call(this);
                        if (this._urlRevoked && this.target)
                            this._loadImage(this.target)
                    }, _createObjectUrl: function _createObjectUrl(image) {
                        var url = String.empty;
                        if (image) {
                            var useOneTimeOnly = !this.applyImageAsBackground;
                            var url = URL.createObjectURL(image, {oneTimeOnly: useOneTimeOnly});
                            if (!useOneTimeOnly) {
                                this._urlToRevoke = {
                                    url: url, image: image
                                };
                                this._urlRevoked = false
                            }
                        }
                        else if (this.applyImageAsBackground)
                            this.domElement.style.backgroundImage = this.defaultImagePath;
                        return url
                    }, _handleLoaded: function _handleLoaded(args) {
                        if (this._unloaded)
                            return;
                        this.naturalWidth = 0;
                        this.naturalHeight = 0;
                        if (args && args.target) {
                            this.naturalWidth = args.target.naturalWidth;
                            this.naturalHeight = args.target.naturalHeight
                        }
                        if (this.naturalWidth > this.naturalHeight) {
                            WinJS.Utilities.addClass(this.domElement, "wide");
                            WinJS.Utilities.removeClass(this.domElement, "tall")
                        }
                        else if (this.naturalWidth < this.naturalHeight) {
                            WinJS.Utilities.addClass(this.domElement, "tall");
                            WinJS.Utilities.removeClass(this.domElement, "wide")
                        }
                        else {
                            WinJS.Utilities.removeClass(this.domElement, "tall");
                            WinJS.Utilities.removeClass(this.domElement, "wide")
                        }
                        this.applyCSSClassesOnLoad(this.naturalWidth, this.naturalHeight);
                        if (this.addLoadedClassToParent && this.domElement.parentElement)
                            WinJS.Utilities.addClass(this.domElement.parentElement, "imageControl_loaded");
                        MS.Entertainment.UI.Framework.ImageControl.prototype._handleLoaded.apply(this, arguments);
                        WinJS.Promise.timeout(1).then(function() {
                            this.revokeUrlIfNeeded()
                        }.bind(this))
                    }, _handleError: function _handleError(args) {
                        if (this._unloaded)
                            return;
                        MS.Entertainment.UI.Framework.ImageControl.prototype._handleError.apply(this, arguments)
                    }, applyCSSClassesOnLoad: function applyCSSClassesOnLoad(naturalWidth, naturalHeight){}, _loadImageFromTarget: function _loadImageFromTarget(target) {
                        MS.Entertainment.UI.Controls.assert(this.desiredImageSize && (this.desiredImageSize.width || this.desiredImageSize.height), "We need a desired size (along at least one axis to ensure the service requests the correct image");
                        if (target && target.imageUri && target.imageUri.lastIndexOf("blob:", 0) > -1)
                            return WinJS.Promise.as(target.imageUri);
                        else
                            return MS.Entertainment.UI.Shell.ImageLoader.getServiceImageUrl(this.target, this.desiredImageSize.width, this.desiredImageSize.height, null, this.imageIdType, this.defaultImagePath)
                    }, _setImgSrc: function _setImgSrc(url) {
                        var imageManager;
                        if (MS.Entertainment.UI.Shell.ImageLoader.isAppDataUrl(url) && url !== this._cachedUrl) {
                            imageManager = new Microsoft.Entertainment.ImageManager;
                            if (this._cachedUrl)
                                imageManager.unregisterImageUrl(this._cachedUrl);
                            imageManager.registerImageUrl(url);
                            this._cachedUrl = url
                        }
                        MS.Entertainment.UI.Framework.ImageControl.prototype._setImgSrc.apply(this, arguments)
                    }, revokeUrlIfNeeded: function revokeUrlIfNeeded() {
                        if (this._urlToRevoke) {
                            if (this._urlToRevoke.url)
                                URL.revokeObjectURL(this._urlToRevoke.url);
                            if (this._urlToRevoke.image && this._urlToRevoke.image.close)
                                this._urlToRevoke.image.close();
                            this._urlToRevoke = null;
                            this._urlRevoked = true;
                            if (this.domElement)
                                this.domElement.removeAttribute("imageLoaded")
                        }
                    }, unload: function unload() {
                        var imageManager;
                        if (this._cachedUrl) {
                            imageManager = new Microsoft.Entertainment.ImageManager;
                            imageManager.unregisterImageUrl(this._cachedUrl);
                            this._cachedUrl = null
                        }
                        this.revokeUrlIfNeeded();
                        MS.Entertainment.UI.Framework.ImageControl.prototype.unload.apply(this, arguments)
                    }, hide: function hide(element) {
                        MS.Entertainment.Utilities.hideElement(element)
                    }, show: function show(element) {
                        MS.Entertainment.Utilities.showElement(element)
                    }
            })
    })
})()
})();
/* >>>>>>/framework/shell.js:3820 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Shell");
    WinJS.Namespace.define("MS.Entertainment.UI.Shell", {
        showDialog: function showDialog(title, userControl, options) {
            if (!title)
                throw"showDialog: title parameter is mandatory";
            if (!userControl)
                throw"showDialog: userControl parameter is mandatory";
            options = options ? options : {};
            options.title = title;
            options.userControl = userControl;
            var dialogElement = document.createElement("div");
            dialogElement.setAttribute("data-win-control", "MS.Entertainment.UI.Controls.Dialog");
            var dialog = new MS.Entertainment.UI.Controls.Dialog(dialogElement, options);
            return dialog.show()
        }, createOverlay: function createOverlay(userControl, userControlOptions, overlayOptions) {
                var options = overlayOptions || {};
                options.userControl = userControl;
                options.userControlOptions = userControlOptions;
                var overlayElement = document.createElement("div");
                overlayElement.setAttribute("data-win-control", "MS.Entertainment.UI.Controls.Overlay");
                return new MS.Entertainment.UI.Controls.Overlay(overlayElement, options)
            }, showMessageBox: function showMessageBox(title, description, options) {
                if (!title)
                    throw"showMessageBox: title parameter is mandatory";
                if (!description)
                    throw"showMessageBox: description parameter is mandatory";
                options = options ? options : {};
                options.userControlOptions = {description: description};
                return MS.Entertainment.UI.Shell.showDialog(title, "MS.Entertainment.UI.Controls.MessageBox", options)
            }, showMessageLinkBox: function showMessageLinkBox(title, description, webLink) {
                if (!title)
                    throw"showMessageLinkBox: title parameter is mandatory";
                if (!description)
                    throw"showMessageLinkBox: description parameter is mandatory";
                if (!webLink)
                    throw"showMessageLinkBox: webLink parameter is mandatory";
                var options = {};
                options.userControlOptions = {
                    description: description, webLink: webLink
                };
                return MS.Entertainment.UI.Shell.showDialog(title, "MS.Entertainment.UI.Controls.MessageLinkBox", options)
            }, showFeedbackDialog: function showFeedbackDialog() {
                MS.Entertainment.UI.Shell.showDialog(String.load(String.id.IDS_SETTINGS_FEEDBACK_TITLE), "MS.Entertainment.UI.Controls.UserFeedbackDialog", {
                    width: null, height: null, buttons: [], customStyle: "wecDialog_feedback", persistOnNavigate: true
                })
            }, showRegionMismatchDialog: function showRegionMismatchDialog(title, description) {
                if (description.indexOf("{0}") < 0 || description.indexOf("{1}") < 0) {
                    MS.Entertainment.UI.Shell.fail("showRegionMismatchDialog requires two string placeholders in description to function properly");
                    return WinJS.Promise.wrapError()
                }
                var appRegionCode = (new Microsoft.Entertainment.Util.GlobalizationManager).getRegion();
                var machineRegionCode = (new Windows.Globalization.GeographicRegion).codeTwoLetter;
                var appRegionName = (new Windows.Globalization.GeographicRegion(appRegionCode)).displayName;
                var machineRegionName = (new Windows.Globalization.GeographicRegion(machineRegionCode)).displayName;
                var regionUnavailableDescription = description.format(appRegionName, machineRegionName);
                return MS.Entertainment.UI.Shell.showMessageBox(title, regionUnavailableDescription).then(function completed() {
                        return {
                                appRegionCode: appRegionCode, machineRegionCode: machineRegionCode
                            }
                    })
            }, navigateBackAndShowMessageBox: function navigateBackAndShowMessageBox(title, description) {
                Trace.assert(title, "navigateBackAndShowMessageBox: title is null or undefined");
                Trace.assert(description, "navigateBackAndShowMessageBox: description is null or undefined");
                var promise;
                var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                if (uiState.isSnapped && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation))
                    promise = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation).navigateToDefault();
                else
                    promise = MS.Entertainment.UI.Shell.showMessageBox(title, description).then(function() {
                        var navigateBackPromise;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation))
                            navigateBackPromise = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation).navigateBack();
                        return WinJS.Promise.as(navigateBackPromise)
                    });
                return WinJS.Promise.as(promise)
            }, showAppUpdateDialog: function showAppUpdateDialog() {
                var cancelConfirmDialogButtons = [{
                            title: String.load(String.id.IDS_VERSION_CHECK_UPGRADE_LINK), execute: function onOk(overlay) {
                                    MS.Entertainment.Utilities.launchStoreUpdatePage();
                                    overlay.hide()
                                }
                        }, {
                            title: String.load(String.id.IDS_CANCEL_BUTTON), execute: function onCancel(overlay) {
                                    overlay.hide()
                                }
                        }];
                return MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_VERSION_CHECK_SERVICE_TITLE), String.load(String.id.IDS_VERSION_CHECK_SERVICE_FOR_FEATURES_TEXT), {
                        buttons: cancelConfirmDialogButtons, defaultButtonIndex: 0, cancelButtonIndex: 1
                    })
            }, showWebHostDialog: function showWebHostDialog(title, dialogOptions, userControlOptions) {
                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                if (MS.Entertainment.Utilities.isApp2 && !MS.Entertainment.isAppModeOverride && userControlOptions.offer)
                    return MS.Entertainment.UI.Shell.ModernWebBlend.showModernPurchaseFlowAsync(userControlOptions.offer);
                else {
                    var buttons = [];
                    dialogOptions.title = title;
                    userControlOptions.title = title;
                    dialogOptions.userControlOptions = userControlOptions;
                    dialogOptions.buttons = buttons;
                    dialogOptions.defaultButtonIndex = -1;
                    var webHostDialogElement = document.createElement("div");
                    webHostDialogElement.setAttribute("data-win-control", "MS.Entertainment.UI.Controls.WebHostDialog");
                    var dialog = new MS.Entertainment.UI.Controls.WebHostDialog(webHostDialogElement, dialogOptions);
                    return dialog.show()
                }
            }, uiStateEventShowSearchFlyoutHandler: null, showSearchFlyout: function showSearchFlyout() {
                if (MS.Entertainment.UI.Shell.uiStateEventShowSearchFlyoutHandler) {
                    MS.Entertainment.UI.Shell.uiStateEventShowSearchFlyoutHandler.cancel();
                    MS.Entertainment.UI.Shell.uiStateEventShowSearchFlyoutHandler = null
                }
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                if (uiStateService.stageThreeActivated)
                    if (!Windows.ApplicationModel.Search.Core) {
                        MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithUIPath(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.SearchGlyphClick);
                        var searchAction = new MS.Entertainment.UI.Actions.SearchAction;
                        return searchAction.execute()
                    }
                    else {
                        var height = "100px";
                        var bottom = "auto";
                        var template = "MS.Entertainment.UI.Controls.SearchFlyout";
                        var _centeredStyle = "calc(50% - {0}px)";
                        var top = _centeredStyle.format(parseInt(height) / 2);
                        var overlayOptions = {
                                left: "20%", bottom: bottom, right: "20%", top: top, dontWaitForContent: true, enableKeyboardLightDismiss: true
                            };
                        var openPopup = MS.Entertainment.UI.Shell.createOverlay(template, {}, overlayOptions);
                        return openPopup.show()
                    }
                else
                    MS.Entertainment.UI.Shell.uiStateEventShowSearchFlyoutHandler = MS.Entertainment.Utilities.addEventHandlers(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {stageThreeActivatedChanged: function stageThreeActivatedChanged(e) {
                            if (e.detail.newValue)
                                MS.Entertainment.UI.Shell.showSearchFlyout()
                        }.bind(this)})
            }, showError: (function() {
                var _displayedErrors = [];
                var displayError = function displayError(caption, description, errorCode, webUrlPromise, subTitle, additionalButton) {
                        var errorId = description;
                        if (errorCode)
                            errorId = errorCode;
                        var isErrorDisplayed = false;
                        for (var i = 0; i < _displayedErrors.length; i++)
                            if (_displayedErrors[i] === errorId) {
                                isErrorDisplayed = true;
                                break
                            }
                        if (!isErrorDisplayed) {
                            _displayedErrors.push(errorId);
                            var bottomRowAdditionalText = MS.Entertainment.Utilities.isApp2 ? String.empty : errorCode;
                            var options = {
                                    description: description, errorCode: errorCode, webLinkPromise: webUrlPromise, subTitle: subTitle ? subTitle : String.empty, showLinks: !MS.Entertainment.Utilities.isApp2, showErrorCodeInContent: MS.Entertainment.Utilities.isApp2, additionalButton: additionalButton
                                };
                            return MS.Entertainment.UI.Shell.showDialog(caption, "MS.Entertainment.UI.Controls.ErrorDialog", {
                                    buttonRowAdditionalText: bottomRowAdditionalText, userControlOptions: options, persistOnNavigate: true
                                }).then(function() {
                                    for (var i = 0; i < _displayedErrors.length; i++)
                                        if (_displayedErrors[i] === errorId) {
                                            _displayedErrors.splice(i, 1);
                                            break
                                        }
                                })
                        }
                        else
                            return WinJS.Promise.wrap()
                    };
                var formatError = function formatError(errorCode, mappedErrorCode, message) {
                        switch (errorCode) {
                            case MS.Entertainment.Utilities.SignInErrors.NS_E_SIGNIN_INVALID_REGION:
                                var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                var lastAccountRegion = configurationManager.service.lastSignInAccountRegion;
                                if (lastAccountRegion)
                                    return message.format((new Windows.Globalization.GeographicRegion(lastAccountRegion)).displayName);
                                else {
                                    MS.Entertainment.UI.Shell.assert(false, "lastAccountRegion was not defined");
                                    return message
                                }
                                break
                        }
                        {};
                        switch (mappedErrorCode) {
                            case Microsoft.Entertainment.Sync.CollectionSyncError.syncError:
                                return String.load(String.id.IDS_CLOUD_SYNC_ERROR_DIALOG_MESSAGE);
                            case MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_MEDIA_CANT_PLAYTO.code:
                                return String.load(String.id.IDS_MUSIC_PLAY_TO_STREAMING_ERROR_TEXT);
                            case MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_MEDIA_CANT_PLAYTO_PREMIUM.code:
                                return String.load(String.id.IDS_MUSIC_PLAY_TO_PREMIUM_STREAMING_ERROR_TEXT);
                            case MS.Entertainment.Platform.Playback.Error.ZEST_E_DEVICE_ACTIVATION_LIMIT_EXCEEDED.code:
                                var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                if (!featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay) && !featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSubscription))
                                    return String.load(String.id.IDS_ACTIVATION_LIMIT_EXCEEDED_DTO);
                                return message;
                            case MS.Entertainment.Platform.Playback.Error.ZUNE_E_DOWNLOAD_LIBRARY_DISK_FULL.code:
                            case MS.Entertainment.Platform.Playback.Error.ZUNE_E_DOWNLOAD_SYSTEM_DISK_FULL.code:
                                return String.load(String.id.IDS_FILE_TRANSFER_CANT_DOWNLOAD_LOW_DISK_SPACE_LONG);
                            default:
                                return message
                        }
                    };
                var toHexString = function toHexString(value) {
                        if (value < 0)
                            value += 0xFFFFFFFF + 1;
                        return "0x" + value.toString(16)
                    };
                return function showError(caption, error, subTitle, postpendedText, additionalButton) {
                        var errorMapper = new Microsoft.Entertainment.Util.ErrorMapper;
                        var mappedError = errorMapper.getMappedError(error);
                        var hexError = toHexString(mappedError.error) + " (" + toHexString(error) + ")";
                        var errorMessage = formatError(error, mappedError.error, mappedError.description);
                        if (postpendedText)
                            errorMessage += ("\n" + postpendedText);
                        var originalErrorQuery = new MS.Entertainment.Data.Query.errorCodeWrapperQuery(error);
                        var mappedErrorQueryPromise = function mappedErrorQueryPromise() {
                                var mappedErrorQuery = new MS.Entertainment.Data.Query.errorCodeWrapperQuery(mappedError.error);
                                return mappedErrorQuery.execute().then(function mappedErrorQueryComplete(query) {
                                        if (query && query.result && query.result.exactMatches)
                                            return query.result.errorCodeUrl;
                                        else
                                            return mappedError.webUrl
                                    }, function mappedErrorQueryFailed(event) {
                                        if (event && event.message === "Canceled") {
                                            var networkStatus = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).networkStatus;
                                            MS.Entertainment.UI.Shell.fail("Error Code Lookup request canceled.  Network status is: " + networkStatus, null, MS.Entertainment.UI.Debug.errorLevel.low)
                                        }
                                        return mappedError.webUrl
                                    })
                            };
                        var errorQuery = originalErrorQuery.execute().then(function originalErrorQueryComplete(query) {
                                if (query && query.result && query.result.exactMatches)
                                    return query.result.errorCodeUrl;
                                else
                                    return mappedErrorQueryPromise()
                            }, function originalErrorQueryFailed() {
                                return mappedErrorQueryPromise()
                            });
                        return displayError(caption, errorMessage, hexError, errorQuery, subTitle, additionalButton)
                    }
            })()
    })
})()
})();
/* >>>>>>/components/shell/contentnotificationlist.js:4066 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Pages");
    WinJS.Namespace.define("MS.Entertainment.Pages", {ContentNotificationList: MS.Entertainment.UI.Framework.defineUserControl("Components/Shell/ContentNotificationList.html#contentNotificationListTemplate", null, null, {source: null})});
    WinJS.Namespace.define("MS.Entertainment.Pages", {ContentNotificationTileItem: MS.Entertainment.UI.Framework.defineUserControl(null, function contentNotificationTileItemConstructor(element, options){}, {
            _bindings: null, _hasDelayedInitialized: false, _contentNotifications: null, _alternateText: String.empty, _alternateIcon: String.empty, _useAlternateTextStyle: null, _mediaItem: null, _pendingContentNotifications: null, defaultTextStyle: String.empty, alternateTextStyle: String.empty, hideIfEmpty: false, hideSiblingsIfNotEmpty: false, controlName: "contentNotificationTileItem", _delayInitialized: function _delayInitialized() {
                    if (!this._unloaded) {
                        this._hasDelayedInitialized = true;
                        this._findNotificationForDisplay = this._findNotificationForDisplay.bind(this);
                        this._displayedShortNotificationUpdated = this._displayedShortNotificationUpdated.bind(this);
                        this._displayedLongNotificationUpdated = this._displayedLongNotificationUpdated.bind(this);
                        this._displayedIconNotificationUpdated = this._displayedIconNotificationUpdated.bind(this);
                        this._commitContentNotifications();
                        this._commitAlternateIcon();
                        this._commitAlternateText()
                    }
                }, unload: function unload() {
                    this.contentNotifications = null;
                    this.displayedNotification = null;
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, mediaItem: {
                    get: function get_mediaItem() {
                        return this._mediaItem
                    }, set: function set_mediaItem(value) {
                            this._mediaItem = value;
                            if (MS.Entertainment.UI.FileTransferService)
                                MS.Entertainment.UI.FileTransferService.pulseAsync(this._mediaItem)
                        }
                }, _isEmpty: function _isEmpty() {
                    var i,
                        item;
                    var notifications = this.contentNotifications;
                    var empty = true;
                    if (!notifications)
                        return true;
                    for (i = 0; i < notifications.length; i++) {
                        item = WinJS.Binding.unwrap(notifications).item(i);
                        if (this.checkItem(item)) {
                            if (item !== this._displayedNotification)
                                this.displayedNotification = item;
                            empty = false;
                            break
                        }
                    }
                    return empty
                }, _findNotificationForDisplay: function _findNotificationForDisplay() {
                    if (this._unloaded)
                        return;
                    var empty = this._isEmpty();
                    if (empty)
                        this.displayedNotification = null;
                    if (empty && this.hideIfEmpty)
                        WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
                    else
                        WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay");
                    var siblings = null;
                    if (this.domElement.parentElement && this.hideSiblingsIfNotEmpty)
                        siblings = this.domElement.parentElement.children;
                    if (siblings) {
                        var currentSibling;
                        for (var i = 0; i < siblings.length; i++) {
                            currentSibling = siblings[i];
                            if (currentSibling !== this.domElement)
                                if (!empty)
                                    WinJS.Utilities.addClass(currentSibling, "removeFromDisplaySecondary");
                                else
                                    WinJS.Utilities.removeClass(currentSibling, "removeFromDisplaySecondary")
                        }
                    }
                }, checkItem: function checkItem(item) {
                    return true
                }, contentNotifications: {
                    get: function get_contentNotifications() {
                        return this._pendingContentNotifications || this._contentNotifications
                    }, set: function set_contentNotifications(value) {
                            if (value !== this._pendingContentNotifications) {
                                this._pendingContentNotifications = value;
                                this._commitContentNotifications()
                            }
                        }
                }, alternateText: {
                    get: function get_alternateText() {
                        return this._alternateText
                    }, set: function set_alternateText(value) {
                            if (value !== this._alternateText) {
                                this._alternateText = value;
                                this._commitAlternateText()
                            }
                        }
                }, alternateIcon: {
                    get: function get_alternateIcon() {
                        return this._alternateIcon
                    }, set: function set_alternateIcon(value) {
                            if (value !== this._alternateIcon) {
                                this._alternateIcon = value;
                                this._commitAlternateIcon()
                            }
                        }
                }, useAlternateTextStyle: {
                    set: function setUseAlternateTextStyle(value) {
                        if (this._useAlternateTextStyle === value)
                            return;
                        if (value) {
                            if (this.defaultTextStyle)
                                WinJS.Utilities.removeClass(this.domElement, this.defaultTextStyle);
                            if (this.alternateTextStyle)
                                WinJS.Utilities.addClass(this.domElement, this.alternateTextStyle)
                        }
                        else {
                            if (this.alternateTextStyle)
                                WinJS.Utilities.removeClass(this.domElement, this.alternateTextStyle);
                            if (this.defaultTextStyle)
                                WinJS.Utilities.addClass(this.domElement, this.defaultTextStyle)
                        }
                        this._useAlternateTextStyle = value
                    }, get: function getUseAlternateTextStyle() {
                            return this._useAlternateTextStyle
                        }
                }, displayedDefaultShortNotificationUpdated: function displayedDefaultShortNotificationUpdated() {
                    this.useAlternateTextStyle = !!this.alternateText;
                    this._displayedShortNotificationUpdated(this.alternateText || String.empty)
                }, displayedDefaultLongNotificationUpdated: function displayedDefaultLongNotificationUpdated() {
                    this.useAlternateTextStyle = !!this.alternateText;
                    this._displayedLongNotificationUpdated(this.alternateText || String.empty)
                }, displayedDefaultIconNotificationUpdated: function displayedDefaultIconNotificationUpdated() {
                    this._displayedIconNotificationUpdated(this.alternateIcon || String.empty)
                }, displayedNotification: {
                    get: function get_displayedNotification() {
                        return this._displayedNotification
                    }, set: function set_displayedNotification(value) {
                            if (value !== this._displayedNotification) {
                                this._displayedNotification = value;
                                this._commitDisplayedNotification()
                            }
                        }, enumerable: false
                }, _commitDisplayedNotification: function _commitDisplayNotification() {
                    if (this._hasDelayedInitialized) {
                        if (this._bindings) {
                            this._bindings.cancel();
                            this._bindings = null
                        }
                        this.useAlternateTextStyle = !this._displayedNotification;
                        if (this._displayedNotification)
                            this._bindings = WinJS.Binding.bind(this, {_displayedNotification: {
                                    shortText: this._displayedShortNotificationUpdated, longText: this._displayedLongNotificationUpdated, icon: this._displayedIconNotificationUpdated
                                }});
                        else {
                            this.displayedDefaultShortNotificationUpdated();
                            this.displayedDefaultLongNotificationUpdated();
                            this.displayedDefaultIconNotificationUpdated()
                        }
                    }
                }, _commitAlternateIcon: function _commitAlternateIcon() {
                    if (this._hasDelayedInitialized && !this.displayedNotification)
                        this.displayedDefaultIconNotificationUpdated()
                }, _commitAlternateText: function _commitAlternateText() {
                    if (!this.displayedNotification) {
                        this.displayedDefaultShortNotificationUpdated();
                        this.displayedDefaultLongNotificationUpdated()
                    }
                }, _commitContentNotifications: function _commitContentNotifications() {
                    if (this._hasDelayedInitialized && this._pendingContentNotifications !== this._contentNotifications) {
                        if (this._contentNotifications)
                            this._contentNotifications.removeChangeListener(this._findNotificationForDisplay);
                        this._contentNotifications = this._pendingContentNotifications;
                        if (this._contentNotifications) {
                            this._contentNotifications.addChangeListener(this._findNotificationForDisplay);
                            this._findNotificationForDisplay()
                        }
                    }
                }, _displayedNotification: null, _displayedShortNotificationUpdated: function _displayedShortNotificationUpdated(newValue){}, _displayedLongNotificationUpdated: function _displayedLongNotificationUpdated(newValue){}, _displayedIconNotificationUpdated: function _displayedIconNotificationUpdated(newValue){}
        }, {})});
    WinJS.Namespace.define("MS.Entertainment.Pages", {ContentNotificationShortTextTileItem: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.ContentNotificationTileItem", null, function contentNotificationShortTextTileItem(){}, {
            controlName: "contentNotificationShortTextTileItem", checkItem: function checkItem(item) {
                    return item.shortText
                }, _displayedShortNotificationUpdated: function _displayedShortNotificationUpdated(newValue) {
                    if (!this._unloaded)
                        this.domElement.textContent = newValue
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Pages", {ContentNotificationShortTextTileItemWithNotification: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.ContentNotificationShortTextTileItem", null, function ContentNotificationShortTextTileItemWithNotification(){}, {
            controlName: "ContentNotificationShortTextTileItemWithNotification", _expirationTickTimer: null, _expirationString: null, _mediaItem: null, _playbackSessionBindings: null, _uiStateEventHandler: null, _ingestingPurchaseHistoryChangedHandler: null, unload: function unload() {
                    if (this._expirationTickTimer) {
                        window.clearTimeout(this._expirationTickTimer);
                        this._expirationTickTimer = null
                    }
                    if (this._playbackSessionBindings) {
                        this._playbackSessionBindings.cancel();
                        this._playbackSessionBindings = null
                    }
                    if (this._ingestingPurchaseHistoryChangedHandler) {
                        var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                        if (purchaseHistoryService && this._ingestingPurchaseHistoryChangedHandler) {
                            purchaseHistoryService.unbind("isGroveling", this._ingestingPurchaseHistoryChangedHandler);
                            this._ingestingPurchaseHistoryChangedHandler = null
                        }
                    }
                    MS.Entertainment.Pages.ContentNotificationShortTextTileItem.prototype.unload.call(this)
                }, mediaItem: {
                    get: function get_mediaItem() {
                        return this._mediaItem
                    }, set: function set_mediaItem(value) {
                            this._mediaItem = value;
                            if (MS.Entertainment.Utilities.isVideoApp && this._mediaItem && (MS.Entertainment.Utilities.isMovie(this._mediaItem) || MS.Entertainment.Utilities.isTVSeries(this._mediaItem)) && (this.mediaItem.inCollection || (this.mediaItem.libraryId && this.mediaItem.libraryId > 0))) {
                                this._bindIngestingPurchaseHistoryChangedHandler();
                                this.updateNotificationDates()
                            }
                            if (MS.Entertainment.UI.FileTransferService)
                                MS.Entertainment.UI.FileTransferService.pulseAsync(this._mediaItem)
                        }
                }, _getRentalExpirationDate: function _getRentalExpirationDate(expirationDate) {
                    var updateBindings = function updateBindings() {
                            var transportStateChanged = function transportStateChanged(newValue) {
                                    if (newValue === MS.Entertainment.Platform.Playback.TransportState.playing)
                                        this.updateNotificationDates()
                                }.bind(this);
                            var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                            this._playbackSessionBindings = WinJS.Binding.bind(sessionMgr.primarySession, {
                                currentTransportState: transportStateChanged.bind(this), playerState: transportStateChanged.bind(this)
                            });
                            MS.Entertainment.UI.RentalExpirationService.getExpirationString(this.mediaItem, expirationDate, this._updateRentalExpirationString.bind(this))
                        }.bind(this);
                    if (this._expirationTickTimer) {
                        window.clearTimeout(this._expirationTickTimer);
                        this._expirationTickTimer = null
                    }
                    if (!this._playbackSessionBindings) {
                        var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                        if (uiStateService.stageThreeActivated)
                            updateBindings();
                        else
                            this._scriptsLoadedEventHandler = MS.Entertainment.Utilities.addEventHandlers(uiStateService, {stageThreeActivatedChanged: function stageThreeActivatedChanged(activateEvent) {
                                    if (activateEvent.detail.newValue) {
                                        if (this._scriptsLoadedEventHandler) {
                                            this._scriptsLoadedEventHandler.cancel();
                                            this._scriptsLoadedEventHandler = null
                                        }
                                        updateBindings()
                                    }
                                }.bind(this)})
                    }
                }, _getPresaleFulfillmentDate: function _getPresaleFulfillmentDate(fulfillmentDate) {
                    var now = new Date;
                    if (fulfillmentDate && now < fulfillmentDate) {
                        var timeToFulfillment = fulfillmentDate.getTime() - now.getTime();
                        var daysToFulfillment = Math.ceil(timeToFulfillment / (1000 * 60 * 60 * 24));
                        var hoursToFulfillment = Math.ceil(timeToFulfillment / (1000 * 60 * 60));
                        if (hoursToFulfillment <= 24) {
                            var hoursPluralString = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_HOURS_PLURAL, hoursToFulfillment);
                            this.expirationString = hoursPluralString.format(hoursToFulfillment)
                        }
                        else if (daysToFulfillment <= 10) {
                            var daysPluralString = MS.Entertainment.Utilities.Pluralization.getPluralizedString(String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DAYS_PLURAL, daysToFulfillment);
                            this.expirationString = daysPluralString.format(daysToFulfillment)
                        }
                        else {
                            var fulfillmentDayMonthYear = MS.Entertainment.Formatters.formatPresaleFulfillmentDate(fulfillmentDate);
                            this.expirationString = String.load(String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DATE_KNOWN).format(fulfillmentDayMonthYear)
                        }
                    }
                    else
                        this.expirationString = String.load(String.id.IDS_VIDEO_PREPURCHASE_COLLECTION_NOTIFICATION_DATE_UNKNOWN);
                    this._findNotificationForDisplay()
                }, updateNotificationDates: function updateNotificationDates() {
                    if (this._uiStateEventHandler) {
                        this._uiStateEventHandler.cancel();
                        this._uiStateEventHandler = null
                    }
                    if (MS.Entertainment.Utilities.isMovie(this._mediaItem))
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.sessionManager))
                            MS.Entertainment.ViewModels.SmartBuyStateEngine.queryMediaStateAsync(this.mediaItem).done(function checkMediaExpiration(stateInfo) {
                                if (!stateInfo && stateInfo.marketplace)
                                    return;
                                if (stateInfo.marketplace.rentalExpirations && stateInfo.marketplace.rentalExpirations.length && (stateInfo.marketplace.rentalExpirations.overall.latestDate || stateInfo.marketplace.rentalExpirations.overall.isExpired))
                                    this._getRentalExpirationDate(stateInfo.marketplace.rentalExpirations.overall.latestDate);
                                else if (stateInfo.marketplace.isPresale || stateInfo.marketplace.presaleFulfillmentDate)
                                    this._getPresaleFulfillmentDate(stateInfo.marketplace.presaleFulfillmentDate)
                            }.bind(this));
                        else
                            this._uiStateEventHandler = MS.Entertainment.Utilities.addEventHandlers(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {stageThreeActivatedChanged: function stageThreeActivatedChanged(e) {
                                    if (e.detail.newValue && !this._unloaded) {
                                        this._bindIngestingPurchaseHistoryChangedHandler();
                                        this.updateNotificationDates()
                                    }
                                }.bind(this)});
                    else if (MS.Entertainment.Utilities.isTVSeries(this._mediaItem))
                        this._updateNewSeasonNotificationString(this._mediaItem.latestSeasonReleaseDate)
                }, _bindIngestingPurchaseHistoryChangedHandler: function _bindIngestingPurchaseHistoryChangedHandler() {
                    if (!this._ingestingPurchaseHistoryChangedHandler && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.purchaseHistory)) {
                        var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                        if (purchaseHistoryService && purchaseHistoryService.isUsingXdlcForIngestion()) {
                            this._ingestingPurchaseHistoryChangedHandler = this._ingestingPurchaseHistoryChanged.bind(this);
                            purchaseHistoryService.bind("isGroveling", this._ingestingPurchaseHistoryChangedHandler)
                        }
                    }
                }, _ingestingPurchaseHistoryChanged: function _ingestingPurchaseHistoryChanged(isIngesting) {
                    var purchaseHistoryService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.purchaseHistory);
                    if (purchaseHistoryService && purchaseHistoryService.hasGrovelEverCompleted)
                        this.updateNotificationDates()
                }, _isEmpty: function _isEmpty() {
                    var empty = !this.expirationString;
                    if (empty)
                        empty = MS.Entertainment.Pages.ContentNotificationTileItem.prototype._isEmpty.call(this);
                    return empty
                }, _updateRentalExpirationString: function _updateRentalExpirationString(spanInMilliseconds, expirationTickTimer) {
                    this._expirationTickTimer = expirationTickTimer;
                    this.expirationString = MS.Entertainment.Formatters.formatRentalExpirationFromSpanInt(spanInMilliseconds);
                    this._findNotificationForDisplay()
                }, _updateNewSeasonNotificationString: function _updateNewSeasonNotificationString(releaseDate) {
                    if (releaseDate && Date.isValidExpirationDate(releaseDate)) {
                        var now = new Date;
                        var timeSinceRelease = now.getTime() - releaseDate.getTime();
                        var daysSinceLatestRelease = Math.ceil(timeSinceRelease / (1000 * 60 * 60 * 24));
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        var newSeasonWindowInDays = configurationManager.video.newSeasonWindowInDays;
                        if (newSeasonWindowInDays && daysSinceLatestRelease < newSeasonWindowInDays) {
                            this.alternateText = String.load(String.id.IDS_VIDEO_NEW_SEASON_NOTIFICATION);
                            this._findNotificationForDisplay()
                        }
                    }
                }, expirationString: {
                    get: function get_expirationString() {
                        return this._expirationString
                    }, set: function set_expirationString(value) {
                            this._expirationString = value;
                            if (!this.displayedNotification) {
                                this.displayedDefaultShortNotificationUpdated();
                                this.displayedDefaultLongNotificationUpdated()
                            }
                        }
                }, displayedDefaultShortNotificationUpdated: function displayedDefaultShortNotificationUpdated() {
                    this.useAlternateTextStyle = !this.expirationString;
                    this._displayedShortNotificationUpdated(this.expirationString || this.alternateText || String.empty)
                }, displayedDefaultLongNotificationUpdated: function displayedDefaultLongNotificationUpdated() {
                    this.useAlternateTextStyle = !this.expirationString;
                    this._displayedLongNotificationUpdated(this.expirationString || this.alternateText || String.empty)
                }, _displayedShortNotificationUpdated: function _displayedShortNotificationUpdated(newValue) {
                    if (!this._unloaded)
                        this.domElement.textContent = newValue
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Pages", {ContentNotificationIconTileItem: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.ContentNotificationTileItem", null, function contentNotificationIconTileItem(){}, {
            _mediaItem: null, controlName: "contentNotificationIconTileItem", checkItem: function checkItem(item) {
                    return item.icon
                }, _delayInitialized: function delayInitialized() {
                    MS.Entertainment.Pages.ContentNotificationTileItem.prototype._delayInitialized.call(this);
                    this._commitMediaItem()
                }, mediaItem: {
                    get: function get_mediaItem() {
                        return this._mediaItem
                    }, set: function set_mediaItem(value) {
                            if (value !== this._mediaItem) {
                                this._mediaItem = value;
                                this._commitMediaItem()
                            }
                        }
                }, _commitMediaItem: function _commitMediaItem() {
                    if (!this._unloaded && this._hasDelayedInitialized) {
                        if (this._mediaItem)
                            this.contentNotifications = this._mediaItem.contentNotifications;
                        MS.Entertainment.UI.FileTransferService.pulseAsync(this._mediaItem)
                    }
                }, _displayedIconNotificationUpdated: function _displayedIconNotificationUpdated(newValue) {
                    MS.Entertainment.Pages.assert(!newValue || (newValue.length === 1), "Expected single icon character.");
                    if (!this._unloaded)
                        this.domElement.textContent = newValue
                }
        })})
})()
})();
/* >>>>>>/components/music/purchaseactions.js:4440 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Actions;
            (function(Actions) {
                var MusicPurchaseActions;
                (function(MusicPurchaseActions) {
                    var MusicPurchaseActionBase = (function(_super) {
                            __extends(MusicPurchaseActionBase, _super);
                            function MusicPurchaseActionBase() {
                                _super.call(this)
                            }
                            MusicPurchaseActionBase.prototype.canExecute = function(param) {
                                this.useOverrideTitleIfExists();
                                return param != null && param != undefined && param.mediaItem !== null
                            };
                            MusicPurchaseActionBase.prototype.executed = function(param) {
                                var _this = this;
                                var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                                MS.Entertainment.Data.List.getData(listOrMediaItem, 0).then(function(mediaItem) {
                                    mediaItem = _this._getMediaToPurchase(mediaItem);
                                    if (mediaItem.rights)
                                        return mediaItem;
                                    else {
                                        var query = _this._getMediaItemDetailsQuery();
                                        query.id = mediaItem.serviceId;
                                        query.idType = mediaItem.serviceIdType;
                                        query.impressionGuid = mediaItem.impressionGuid;
                                        return query.execute().then(function queryCompleted(query) {
                                                query.dispose();
                                                return query.result.item
                                            })
                                    }
                                }).done(function(mediaToPurchase) {
                                    var action = _this._getPurchaseAction(mediaToPurchase, param);
                                    if (action.parameter && action.parameter.offer)
                                        action.execute();
                                    else
                                        MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_MUSIC_CONTENT_NOT_AVAILABLE_BUTTON), String.load(String.id.IDS_MUSIC_DTO_CANT_BUY_TEXT))
                                }, function(error) {
                                    MS.Entertainment.UI.Actions.fail("Get media details failed: " + (error && error.message))
                                })
                            };
                            MusicPurchaseActionBase.prototype._getMediaToPurchase = function(mediaItem) {
                                return mediaItem
                            };
                            MusicPurchaseActionBase.prototype._getMediaItemDetailsQuery = function() {
                                MS.Entertainment.UI.Actions.fail("_getMediaItemDetailsQuery() should be overrided by subclass");
                                return null
                            };
                            MusicPurchaseActionBase.prototype._getPurchaseAction = function(mediaToPurchase, param) {
                                MS.Entertainment.UI.Actions.fail("_getPurchaseAction() should be overrided by subclass");
                                return null
                            };
                            return MusicPurchaseActionBase
                        })(Actions.Action);
                    MusicPurchaseActions.MusicPurchaseActionBase = MusicPurchaseActionBase;
                    var AlbumPurchaseAction = (function(_super) {
                            __extends(AlbumPurchaseAction, _super);
                            function AlbumPurchaseAction() {
                                _super.apply(this, arguments);
                                this.automationId = MS.Entertainment.UI.AutomationIds.albumPurchase
                            }
                            AlbumPurchaseAction.prototype._getMediaToPurchase = function(mediaItem) {
                                return mediaItem && mediaItem.album ? mediaItem.album : mediaItem
                            };
                            AlbumPurchaseAction.prototype._getMediaItemDetailsQuery = function() {
                                return new MS.Entertainment.Data.Query.Music.AlbumDetails
                            };
                            AlbumPurchaseAction.prototype._getPurchaseAction = function(albumToPurchase, param) {
                                var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                var purchaseAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase);
                                purchaseAction.automationId = MS.Entertainment.UI.AutomationIds.albumPurchase;
                                var offer;
                                var matchingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._getMatchingRights(albumToPurchase, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase], {
                                        freeOnly: false, excludeFree: false
                                    });
                                if (matchingRights && matchingRights[0])
                                    offer = matchingRights[0];
                                purchaseAction.parameter = {
                                    mediaItem: albumToPurchase, offer: offer, actionType: param.actionType, executeLocation: param.executeLocation
                                };
                                return purchaseAction
                            };
                            return AlbumPurchaseAction
                        })(MusicPurchaseActionBase);
                    MusicPurchaseActions.AlbumPurchaseAction = AlbumPurchaseAction;
                    var TrackPurchaseAction = (function(_super) {
                            __extends(TrackPurchaseAction, _super);
                            function TrackPurchaseAction() {
                                _super.apply(this, arguments);
                                this.automationId = MS.Entertainment.UI.AutomationIds.trackPurchase
                            }
                            TrackPurchaseAction.prototype._getMediaItemDetailsQuery = function() {
                                return new MS.Entertainment.Data.Query.Music.SongDetails
                            };
                            TrackPurchaseAction.prototype._getPurchaseAction = function(trackToPurchase, param) {
                                var hasTrackPurchaseRights = false;
                                var hasAlbumPurchaseRights = false;
                                var mediaItemToPurchase;
                                if (trackToPurchase && trackToPurchase.rights) {
                                    hasTrackPurchaseRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(trackToPurchase, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase]);
                                    hasAlbumPurchaseRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(trackToPurchase, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.AlbumPurchase])
                                }
                                mediaItemToPurchase = (!hasTrackPurchaseRights && hasAlbumPurchaseRights) ? trackToPurchase.album : trackToPurchase;
                                var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                var purchaseAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase);
                                purchaseAction.automationId = MS.Entertainment.UI.AutomationIds.trackPurchase;
                                var offer;
                                var matchingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._getMatchingRights(mediaItemToPurchase, MS.Entertainment.Utilities.defaultClientTypeFromApp, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Purchase, ], {
                                        freeOnly: false, excludeFree: false
                                    });
                                if (matchingRights && matchingRights[0])
                                    offer = matchingRights[0];
                                purchaseAction.parameter = {
                                    mediaItem: mediaItemToPurchase, offer: offer, actionType: param.actionType, executeLocation: param.executeLocation
                                };
                                return purchaseAction
                            };
                            return TrackPurchaseAction
                        })(MusicPurchaseActionBase);
                    MusicPurchaseActions.TrackPurchaseAction = TrackPurchaseAction
                })(MusicPurchaseActions = Actions.MusicPurchaseActions || (Actions.MusicPurchaseActions = {}))
            })(Actions = UI.Actions || (UI.Actions = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
(function() {
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.albumPurchase, function() {
        return new MS.Entertainment.UI.Actions.MusicPurchaseActions.AlbumPurchaseAction
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.trackPurchase, function() {
        return new MS.Entertainment.UI.Actions.MusicPurchaseActions.TrackPurchaseAction
    })
})()
})();
/* >>>>>>/controls/overlay.js:4594 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        Overlay: MS.Entertainment.UI.Framework.defineUserControl("/Controls/Overlay.html#overlayTemplate", function overlayConstructor(element, options) {
            this._handleLightDismissChanged = this._handleLightDismissChanged.bind(this);
            WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
            if (!element.hasAttribute("data-win-control"))
                element.setAttribute("data-win-control", "MS.Entertainment.UI.Controls.Overlay");
            var keyEvent = "keydown";
            if (MS.Entertainment.Utilities.isApp2)
                keyEvent = "keyup";
            this.domElement.addEventListener(keyEvent, this.keyDown.bind(this));
            WinJS.Utilities.addClass(this.domElement, "overlayAnchor");
            document.body.appendChild(this.domElement);
            this.bind("customStyle", function applyCustomStyle(newValue, oldValue) {
                if (oldValue)
                    WinJS.Utilities.removeClass(this.domElement, oldValue);
                if (newValue)
                    WinJS.Utilities.addClass(this.domElement, newValue)
            }.bind(this));
            if (!this.persistOnNavigate) {
                var navigationService;
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                    navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                if (navigationService) {
                    this._eventHandlers = MS.Entertainment.Utilities.addEvents(navigationService, {currentPageChanged: this._dismissOnNavigate.bind(this)});
                    this._bindings = WinJS.Binding.bind(navigationService, {currentPage: {options: this._dismissOnNavigate.bind(this)}})
                }
                else if (MS.Entertainment.UI.Framework.Navigation && MS.Entertainment.UI.Framework.Navigation.getJournal)
                    this._bindings = MS.Entertainment.Utilities.addEventHandlers(MS.Entertainment.UI.Framework.Navigation.getJournal(), {navigated: this._dismissOnNavigate.bind(this)});
                this._firstBindOnDismiss = false
            }
            if (this.dontWaitForContent)
                this._contentInitialized = true
        }, {
            criticalTemplate: false, _eventHandlers: null, _bindings: null, _skipDefer: true, _presentedToUser: false, _focusSuppressedElements: null, _navigating: false, _contentDismiss: false, _currentPage: null, _winJSNavigation: null, _presetPreOverlayFocus: null, setFocusToNavigationService: false, _oldFocusRoot: null, _saveFocusOnShow: true, _overlayIdentifier: null, _uiStateBindings: null, _uiStateHandlers: null, result: null, visible: false, userControlInstance: null, resolvedUserControlConstructor: null, ignoreChildrenInitialization: true, autoSetFocus: true, excludeEndpointElements: true, focusPreviouslyFocusedElement: true, restorePreviouslyFocusedElement: true, focusFirstElementOnNavigate: true, userControlOptions: undefined, dontWaitForContent: false, dismissOnAppBarShown: false, dismissOnWindowResize: false, enableKeyboardLightDismiss: false, listViewItemToFocusOnClose: null, hideReason: String.empty, onInitializeFinished: null, useGoBackForVoice: false, allowTypeToSearch: true, initialize: function initialize() {
                    this._tabConstrainerHelper = new MS.Entertainment.UI.Framework.TabConstrainer(this.domElement);
                    MS.Entertainment.UI.Controls.assert(this.overlayBackground, "Overlay: Element with data-ent-member='overlayBackground' not found");
                    MS.Entertainment.UI.Controls.assert(this.overlayContainer, "Overlay: Element with data-ent-member='overlayContainer' not found");
                    MS.Entertainment.UI.Controls.assert(this.overlayContent, "Overlay: Element with data-ent-member='overlayContent' not found");
                    if (this.setFocusToNavigationService) {
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                            this._currentPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation))
                            this._winJSNavigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation)
                    }
                    this.bind("lightDismissEnabled", this._handleLightDismissChanged);
                    var that = this;
                    this._overlayIdentifier = MS.Entertainment.Utilities.Telemetry.TelemetryParameterValues.Overlay;
                    this.overlayContent.addEventListener("UserControlInitialized", function userControlInitialized(event) {
                        if (event.userControl instanceof that.resolvedUserControlConstructor) {
                            if (event.userControl && event.userControl.setOverlay)
                                event.userControl.setOverlay(that);
                            if (event.userControl && event.userControl.templateName)
                                this._overlayIdentifier = event.userControl.templateName;
                            that._contentInitialized = true;
                            if (that.visible)
                                that._show();
                            if (this.dontWaitForContent)
                                this._sendShowTelemetryEvent()
                        }
                    }.bind(this));
                    var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    this._uiStateBindings = WinJS.Binding.bind(uiState, {appBarVisible: function onAppBarVisibleChanged(visible, oldVisible) {
                            if (visible && !oldVisible && this.dismissOnAppBarShown && this.visible) {
                                this.hideReason = MS.Entertainment.UI.Controls.OverlayHideReasons.lightDismiss;
                                this.hide()
                            }
                        }.bind(this)});
                    this._uiStateHandlers = MS.Entertainment.UI.Framework.addEventHandlers(uiState, {windowresize: function onWindowResize() {
                            if (this.dismissOnWindowResize && this.visible) {
                                this.hideReason = MS.Entertainment.UI.Controls.OverlayHideReasons.windowResize;
                                this.hide()
                            }
                        }.bind(this)});
                    var UserControlConstructor = this.userControl;
                    var controlAttribute;
                    if (typeof UserControlConstructor === "string") {
                        UserControlConstructor = WinJS.Utilities.getMember(this.userControl);
                        controlAttribute = this.userControl
                    }
                    else
                        controlAttribute = "MS.Entertainment.UI.Framework.UserControl";
                    this.resolvedUserControlConstructor = UserControlConstructor;
                    if (this.userControlOptions)
                        this.userControlOptions._skipDefer = true;
                    MS.Entertainment.UI.Controls.assert(typeof UserControlConstructor === "function", "Overlay: " + this.userControl + " is not a function");
                    this.overlayContent.setAttribute("data-win-control", controlAttribute);
                    this.userControlInstance = new UserControlConstructor(this.overlayContent, this.userControlOptions);
                    this.overlayBackground.addEventListener("click", this.lightDismiss.bind(this));
                    if (this.onInitializeFinished)
                        this.onInitializeFinished()
                }, unload: function unload() {
                    if (this._eventHandlers) {
                        this._eventHandlers.cancel();
                        this._eventHandlers = null
                    }
                    if (this._bindings) {
                        this._bindings.cancel();
                        this._bindings = null
                    }
                    if (this._uiStateBindings) {
                        this._uiStateBindings.cancel();
                        this._uiStateBindings = null
                    }
                    if (this._uiStateHandlers) {
                        this._uiStateHandlers.cancel();
                        this._uiStateHandlers = null
                    }
                    if (this._focusSuppressedElements) {
                        MS.Entertainment.Utilities.restoreSubtreeKeyboardFocus(this._focusSuppressedElements);
                        this._focusSuppressedElements = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, lightDismiss: function lightDismiss() {
                    if (this.lightDismissEnabled && this.visible) {
                        this.hideReason = MS.Entertainment.UI.Controls.OverlayHideReasons.lightDismiss;
                        this.hide();
                        return true
                    }
                    return false
                }, keyDown: function(e) {
                    if (!this.enableKeyboardLightDismiss)
                        return;
                    if (e.keyCode !== WinJS.Utilities.Key.escape && e.keyCode !== WinJS.Utilities.Key.dismissButton && (!MS.Entertainment.Utilities.isApp2 || (e.keyCode !== WinJS.Utilities.Key.backspace || MS.Entertainment.Utilities.doesElementSupportKeyboardInput(document.activeElement))))
                        return;
                    if (this.lightDismiss()) {
                        e.stopPropagation();
                        e.preventDefault()
                    }
                }, _handleLightDismissChanged: function _handleLightDismissChanged(newValue, oldValue) {
                    if (oldValue && !newValue) {
                        MS.Entertainment.Utilities.setAccessibilityText(this.overlayBackground, null);
                        this.overlayBackground.removeAttribute("tabindex");
                        MS.Entertainment.Framework.AccUtils.checkAndSetAriaAttribute(null, this.overlayBackground, "role")
                    }
                    else if (!oldValue && newValue) {
                        MS.Entertainment.Utilities.setAccessibilityTextFromStringId(this.overlayBackground, String.id.IDS_CLOSE_BUTTON);
                        this.overlayBackground.setAttribute("tabindex", -1);
                        MS.Entertainment.Framework.AccUtils.checkAndSetAriaAttribute("button", this.overlayBackground, "role")
                    }
                }, show: function show() {
                    if (this.visible)
                        throw"Dialog.show error - dialog is already visible!";
                    if (this._showCancelled)
                        return WinJS.Promise.wrap();
                    if (!this.allowTypeToSearch && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.typeToSearch))
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.typeToSearch).disableTypeToSearch();
                    this.visible = true;
                    this._navigating = false;
                    var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                    eventProvider.traceOverlay_Shown("Title: [" + this.title + "], UserControl: [" + this.userControl + "]");
                    var pageContainer = document.getElementById("pageContainer");
                    if (pageContainer)
                        pageContainer.setAttribute("aria-hidden", "true");
                    var newMusicPageContainer = document.querySelector(".control-app");
                    if (newMusicPageContainer)
                        newMusicPageContainer.setAttribute("aria-hidden", "true");
                    MS.Entertainment.UI.Controls.assert(!!pageContainer || !!newMusicPageContainer, "Overlay: The 'pageContainer' element was not found. Can't set aria-hidden on root container");
                    if (WinJS.Utilities.getMember("MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.unregisterGlobalCommands"))
                        MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.unregisterGlobalCommands();
                    this.registerGlobalCommands();
                    if (this._contentInitialized)
                        this._show();
                    this._hideCompletePromise = new WinJS.Promise(function(c, e, p) {
                        this._hideComplete = c
                    }.bind(this));
                    return this._hideCompletePromise
                }, hide: function hide() {
                    var completePromise = WinJS.Promise.wrap();
                    if (!this._contentInitialized && !this.visible) {
                        this._showCancelled = true;
                        return completePromise
                    }
                    this._clearSpecialFocusedElement();
                    if (this.visible) {
                        var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                        eventProvider.traceOverlay_Dismissed("Title: [" + this.title + "], UserControl: [" + this.userControl + "]");
                        if (MS.Entertainment.Utilities.isApp2)
                            MS.Entertainment.Utilities.playOverlayOut();
                        MS.Entertainment.UI.Framework.removeOverlayContainer(this.domElement);
                        this.hideAnimation(this.overlayContainer, null).done(function() {
                            if (!this.allowTypeToSearch && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.typeToSearch))
                                MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.typeToSearch).enableTypeToSearch();
                            var focusInOverlay = MS.Entertainment.UI.Framework.focusedItemInContainer(this.domElement);
                            document.body.removeChild(this.domElement);
                            if (this._oldFocusRoot === this.domElement || !document.body.contains(this._oldFocusRoot))
                                this._oldFocusRoot = MS.Entertainment.UI.Framework.currentFocusContainer;
                            if (!this.isStartupDialog || (this._oldFocusRoot && this._oldFocusRoot !== document.body)) {
                                MS.Entertainment.UI.Framework.setFocusRoot(this._oldFocusRoot);
                                this._restorePreviouslyFocusedItem(focusInOverlay)
                            }
                            var pageContainer = document.getElementById("pageContainer");
                            if (pageContainer)
                                pageContainer.removeAttribute("aria-hidden");
                            var newMusicPageContainer = document.querySelector(".control-app");
                            if (newMusicPageContainer)
                                newMusicPageContainer.removeAttribute("aria-hidden");
                            MS.Entertainment.UI.Controls.assert(!!pageContainer || !!newMusicPageContainer, "Overlay: The 'pageContainer' element was not found. Can't remove aria-hidden on root container");
                            if (this._hideComplete)
                                this._hideComplete(this);
                            if (this.isVoiceEnabled)
                                this.refreshVoiceElements()
                        }.bind(this));
                        this.dispatchEvent("close", {sender: this});
                        completePromise = this._hideCompletePromise;
                        MS.Entertainment.UI.Controls.Overlay._visibleCount--;
                        if (MS.Entertainment.UI.Controls.Overlay._visibleCount === 0)
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).overlayVisible = false
                    }
                    else
                        this._showCancelled = true;
                    this.unregisterGlobalCommands();
                    if (WinJS.Utilities.getMember("MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.registerGlobalCommands"))
                        MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.registerGlobalCommands();
                    this.visible = false;
                    return completePromise
                }, registerGlobalCommands: function registerGlobalCommands() {
                    if (!MS.Entertainment.Utilities.isApp2 || !WinJS.Utilities.getMember("MS.Entertainment.UI.Shell.unregisterGlobalBackCommands") || !WinJS.Utilities.getMember("MS.Entertainment.UI.Shell.registerGlobalOverlayBackCommands"))
                        return;
                    WinJS.Utilities.addClass(document.body, "overlayDisplayed");
                    if (!this.allowBackNavigate) {
                        MS.Entertainment.UI.Shell.unregisterGlobalBackCommands();
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.backButton))
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.backButton).hideBackButton();
                        if (this.lightDismissEnabled || this.useGoBackForVoice)
                            MS.Entertainment.UI.Shell.registerGlobalOverlayBackCommands(this.useGoBackForVoice)
                    }
                }, unregisterGlobalCommands: function unregisterGlobalCommands() {
                    if (!MS.Entertainment.Utilities.isApp2 || !WinJS.Utilities.getMember("MS.Entertainment.UI.Shell.unregisterGlobalOverlayBackCommands") || !WinJS.Utilities.getMember("MS.Entertainment.UI.Shell.registerGlobalBackCommands"))
                        return;
                    WinJS.Utilities.removeClass(document.body, "overlayDisplayed");
                    if (!this.allowBackNavigate) {
                        if (this.lightDismissEnabled || this.useGoBackForVoice)
                            MS.Entertainment.UI.Shell.unregisterGlobalOverlayBackCommands(this.useGoBackForVoice);
                        MS.Entertainment.UI.Shell.registerGlobalBackCommands();
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.backButton))
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.backButton).showBackButton()
                    }
                }, _dismissOnNavigate: function _dismissOnNavigate(newVal, oldVal) {
                    if (!this._firstBindOnDismiss && !this._navigating) {
                        this.hideReason = MS.Entertainment.UI.Controls.OverlayHideReasons.navigate;
                        this._navigating = true;
                        if (this.dismissOnNavigateDelay)
                            WinJS.Promise.timeout(this.dismissOnNavigateDelay).done(this.hide.bind(this));
                        else
                            this.hide()
                    }
                }, showAnimation: function showAnimation(element) {
                    return WinJS.UI.Animation.showPopup(element)
                }, hideAnimation: function hideAnimation(element) {
                    if (this.overlayContainer && this.overlayContainer.style)
                        this.overlayContainer.style.opacity = 0;
                    if (this._navigating)
                        return WinJS.Promise.as();
                    else
                        return WinJS.UI.Animation.hidePopup(element)
                }, setAccessibilityTitle: function setAccessibilityTitle(title) {
                    MS.Entertainment.Utilities.setAccessibilityText(this.overlayContainer, title)
                }, previouslyFocusedElement: {
                    get: function get_previouslyFocusedItem() {
                        return this._itemWithFocusBeforeOverlayShown
                    }, set: function set_previouslyFocusedItem(element) {
                            MS.Entertainment.UI.Controls.assert(!this.visible, "Overlay: previouslyFocusedElement can only be set before show() is called!");
                            this._itemWithFocusBeforeOverlayShown = element;
                            this._saveFocusOnShow = false
                        }
                }, _show: function _show() {
                    if (this._presentedToUser)
                        return;
                    this._presentedToUser = true;
                    this._dismissFlyouts();
                    if (this._saveFocusOnShow)
                        this._saveCurrentFocusedItem();
                    MS.Entertainment.UI.Controls.Overlay._visibleCount++;
                    if (MS.Entertainment.UI.Controls.Overlay._visibleCount > 0)
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).overlayVisible = true;
                    WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay");
                    if (MS.Entertainment.Utilities.isApp2)
                        MS.Entertainment.Utilities.playOverlayIn();
                    if (WinJS.UI.AutomaticFocus) {
                        this._oldFocusRoot = WinJS.UI.AutomaticFocus.focusRoot;
                        WinJS.UI.AutomaticFocus.focusRoot = null
                    }
                    MS.Entertainment.UI.Framework.addOverlayContainer(this.domElement);
                    this.showAnimation(this.overlayContainer, null).then(function complete() {
                        MS.Entertainment.UI.Framework.setFocusRoot(this.domElement);
                        if (this.autoSetFocus)
                            MS.Entertainment.UI.Framework.focusFirstInSubTree(this.domElement, this.excludeEndpointElements);
                        this.dispatchEvent(this.events.overlayVisible, {sender: this});
                        if (!this.dontWaitForContent)
                            this._sendShowTelemetryEvent()
                    }.bind(this));
                    this.domElement.addEventListener("dismissoverlay", function() {
                        this._contentDismiss = true;
                        this.hide()
                    }.bind(this))
                }, _dismissFlyouts: function _dismissFlyouts() {
                    var flyouts = document.querySelectorAll(".win-flyout");
                    if (!flyouts)
                        return;
                    for (var i = 0; i < flyouts.length; i++) {
                        var flyout = flyouts[i] && flyouts[i].winControl;
                        if (flyout && flyout.hide)
                            flyout.hide()
                    }
                }, _sendShowTelemetryEvent: function _sendShowTelemetryEvent() {
                    var location = MS.Entertainment.Utilities.getCurrentUserLocation();
                    MS.Entertainment.Utilities.Telemetry.logPageView(this.overlayContainer, {
                        uri: this._overlayIdentifier, pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Popup
                    }, {uri: location})
                }, _saveCurrentFocusedItem: function _saveCurrentFocusedItem() {
                    if (this._presetPreOverlayFocus)
                        this._itemWithFocusBeforeOverlayShown = this._presetPreOverlayFocus;
                    else {
                        this._itemWithFocusBeforeOverlayShown = document.activeElement;
                        var containingListView;
                        var listViews = document.querySelectorAll(".win-listview");
                        for (var i = 0; i < listViews.length; i++)
                            if (listViews[i].contains(this._itemWithFocusBeforeOverlayShown))
                                containingListView = listViews[i].winControl;
                        if (containingListView) {
                            var focusIsInListViewSurface = false;
                            if (containingListView.element) {
                                var listViewSurface = containingListView.element.querySelector(".win-surface");
                                if (listViewSurface && listViewSurface.contains(this._itemWithFocusBeforeOverlayShown))
                                    focusIsInListViewSurface = true
                            }
                            if (focusIsInListViewSurface)
                                this._itemWithFocusBeforeOverlayShown = {
                                    listView: containingListView, item: containingListView.currentItem
                                }
                        }
                    }
                    this._saveSpecialFocusedElement();
                    if (!containingListView && this.autoSetFocus && this._itemWithFocusBeforeOverlayShown && this.focusPreviouslyFocusedElement)
                        MS.Entertainment.UI.Framework.focusFirstFocusableAncestor(this._itemWithFocusBeforeOverlayShown)
                }, _saveSpecialFocusedElement: function _saveSpecialFocusedElement() {
                    if (!this._itemWithFocusBeforeOverlayShown)
                        return;
                    if (this._currentPage)
                        WinJS.Binding.unwrap(this._currentPage).specialFocusedElement = this._itemWithFocusBeforeOverlayShown;
                    if (this._winJSNavigation) {
                        var listView = this._itemWithFocusBeforeOverlayShown.listView || null;
                        var currentItem = this._itemWithFocusBeforeOverlayShown.item || null;
                        var focusedElement = null;
                        if (!listView && !currentItem)
                            focusedElement = this._itemWithFocusBeforeOverlayShown;
                        this._winJSNavigation.setPreviouslyFocusedItem(focusedElement, listView, currentItem)
                    }
                }, _clearSpecialFocusedElement: function _clearSpecialFocusedElement() {
                    if (!this._navigating && !this._contentDismiss) {
                        if (this._currentPage)
                            WinJS.Binding.unwrap(this._currentPage).specialFocusedElement = null;
                        if (this._winJSNavigation)
                            this._winJSNavigation.clearPreviouslyFocusedItem()
                    }
                }, _restorePreviouslyFocusedItem: function _restorePreviouslyFocusedItem(focusInOverlay) {
                    var focusFirstInSubTree = false;
                    var previousItem = this._itemWithFocusBeforeOverlayShown;
                    if (!this.restorePreviouslyFocusedElement || (!previousItem || !focusInOverlay) && MS.Entertainment.Utilities.isApp1)
                        return;
                    var target = previousItem;
                    if (target && target.listView)
                        target = target.listView._element;
                    if (!MS.Entertainment.UI.Framework.canMoveFocus(target)) {
                        if (MS.Entertainment.UI.Framework.currentFocusContainer !== MS.Entertainment.UI.Framework.currentContentContainer)
                            return;
                        target = null
                    }
                    if (!target) {
                        if (MS.Entertainment.Utilities.isApp1 || !this.focusFirstElementOnNavigate)
                            return;
                        previousItem = target = MS.Entertainment.UI.Framework.currentFocusContainer;
                        focusFirstInSubTree = true
                    }
                    var listViewItem = this.listViewItemToFocusOnClose || (previousItem && previousItem.item);
                    if (previousItem && previousItem.listView && listViewItem) {
                        if (!this._navigating)
                            WinJS.Promise.timeout(100).then(function() {
                                if (MS.Entertainment.Framework.KeyboardInteractionListener.showKeyboardFocus)
                                    listViewItem.showFocus = true;
                                previousItem.listView.currentItem = listViewItem
                            })
                    }
                    else if (!focusFirstInSubTree)
                        MS.Entertainment.UI.Framework.focusFirstFocusableAncestor(previousItem);
                    else
                        MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(previousItem, 0)
                }, _tabConstrainerHelper: null, _itemWithFocusBeforeOverlayShown: null, _fadedElements: null, _hideComplete: null, _hideCompletePromise: null, _contentInitialized: false, _showCancelled: false, _firstBindOnDismiss: true
        }, {
            top: "20%", left: "20%", bottom: "20%", right: "20%", userControl: null, lightDismissEnabled: true, allowBackNavigate: false, customStyle: null, showContainerAnimationClass: "animShowOverlayContainer", hideContainerAnimationClass: "animHideOverlayContainer", showBackgroundAnimationClass: "animShowOverlayBackground", hideBackgroundAnimationClass: "animHideOverlayBackground", events: {overlayVisible: "overlayVisible"}
        }, {
            anyVisible: function anyVisible() {
                return MS.Entertainment.UI.Controls.Overlay._visibleCount > 0
            }, _visibleCount: 0, _dismissOnNavigateDelay: 750, _dismissOnNowPlaying: 2000, showLoadingOverlay: function showLoadingOverlay(loadingOptions) {
                    loadingOptions = loadingOptions || {};
                    if (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped)
                        return WinJS.Promise.as();
                    var showAnimation = function showAnimation() {
                            return WinJS.Promise.timeout()
                        };
                    if (loadingOptions.showAnimation)
                        showAnimation = loadingOptions.showAnimation;
                    var options = {
                            userControl: loadingOptions.userControl, top: 0, left: 0, bottom: 0, right: 0, customStyle: loadingOptions.overlayCustomStyle, persistOnNavigate: false, dontWaitForContent: false, showAnimation: showAnimation, enableKeyboardLightDismiss: !!loadingOptions.enableKeyboardLightDismiss, dismissOnNavigateDelay: MS.Entertainment.UI.Controls.Overlay._dismissOnNavigateDelay, setFocusToNavigationService: true, userControlOptions: loadingOptions.userControlOptions
                        };
                    if (loadingOptions.hideAnimation)
                        options.hideAnimation = loadingOptions.hideAnimation;
                    var newControl = document.createElement("div");
                    var overlay = new MS.Entertainment.UI.Controls.Overlay(newControl, options);
                    WinJS.Utilities.addClass(overlay.domElement, "loadingOverlay");
                    var progressControl = document.createElement("progress");
                    WinJS.Utilities.addClass(progressControl, "loadingRing win-ring win-large");
                    var completion = null;
                    var showPopover = function showPopover() {
                            if (loadingOptions.hideOnNowPlaying) {
                                var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                if (navigationService && navigationService.checkUserLocation(MS.Entertainment.UI.Monikers.fullScreenNowPlaying))
                                    WinJS.Promise.timeout(this._dismissOnNowPlaying).done(overlay.hide.bind(overlay))
                            }
                            var closeTimeoutPromise = null;
                            if (loadingOptions.closeTimeoutMS)
                                closeTimeoutPromise = WinJS.Promise.timeout(loadingOptions.closeTimeoutMS).then(function closeOverlay() {
                                    overlay.hide()
                                });
                            return overlay.show().then(function onComplete(params) {
                                    if (completion)
                                        completion(params);
                                    if (closeTimeoutPromise)
                                        closeTimeoutPromise.cancel()
                                })
                        }.bind(this);
                    var preShowPopover = function preShowPopover() {
                            if (loadingOptions.onInitialize)
                                return loadingOptions.onInitialize(overlay.overlayContent).then(showPopover);
                            else
                                return showPopover()
                        };
                    if (overlay.overlayContent)
                        return preShowPopover();
                    else {
                        overlay.onInitializeFinished = preShowPopover;
                        return new WinJS.Promise(function(c, e, p) {
                                completion = c
                            })
                    }
                }
        }), OverlayHideReasons: {
                other: "other", lightDismiss: "lightDismiss", navigate: "navigate", windowResize: "windowResize"
            }
    })
})();
(function runVoiceMixins() {
    MS.Entertainment.Utilities.runVoiceControlMixins(MS.Entertainment.UI.Controls.Overlay)
})()
})();
/* >>>>>>/controls/modifier.js:5056 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    var modifierAlreadyOpen = false;
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        Modifier: MS.Entertainment.UI.Framework.defineUserControl("/Controls/Modifier.html#modifierTemplate", function modifierConstructor() {
            this._observableArrayChanged = this._observableArrayChanged.bind(this)
        }, {
            _selectionManagerEventHandlers: null, openPopup: null, minItems: 0, showDropDownArrow: true, showDescription: true, _tabPanel: null, isBeingDismissed: false, _selectionManager: null, calculateModifierPopoverPosition: true, allowSingleItemToShowList: false, _overrideDescription: false, _labelOverride: String.empty, _automaticFocusOverride: String.empty, _selectedItem: null, _items: null, popupShouldOpenAboveButton: false, deferUpdatesUntilInitialized: false, useSelectionManagerDataSourceAsItems: false, identifier: "", initialize: function initialize() {
                    if (!this.useSelectionManagerDataSourceAsItems)
                        this.selectionManager = new MS.Entertainment.UI.Framework.SelectionManager;
                    this.bind("descriptionLabel", this._descriptionLabelChanged.bind(this));
                    this.bind("descriptionLabelText", this._descriptionLabelChanged.bind(this));
                    this.bind("isRoamingSetting", this._settingsChanged.bind(this));
                    this.bind("settingsKey", this._settingsChanged.bind(this));
                    if (this.deferUpdatesUntilInitialized)
                        this._observableArrayChanged()
                }, unload: function unload() {
                    this.isBeingDismissed = true;
                    if (this.openPopup)
                        this.openPopup.hide();
                    if (this._selectionManagerEventHandlers) {
                        this._selectionManagerEventHandlers.cancel();
                        this._selectionManagerEventHandlers = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, freeze: function freeze() {
                    if (!MS.Entertainment.Utilities.isApp2) {
                        this.isBeingDismissed = true;
                        if (this.openPopup)
                            this.openPopup.hide()
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                }, thaw: function thaw() {
                    MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this);
                    this.isBeingDismissed = false
                }, selectionManager: {
                    get: function() {
                        return this._selectionManager
                    }, set: function(value) {
                            if (this._selectionManager !== value) {
                                var oldValue = this._selectionManager;
                                this._selectionManager = value;
                                if (this._selectionManagerEventHandlers) {
                                    this._selectionManagerEventHandlers.cancel();
                                    this._selectionManagerEventHandlers = null
                                }
                                this._selectionManagerEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this._selectionManager, {
                                    selectedItemChanged: this._selectionManagerSelectionChanged.bind(this), dataSourceChanged: this._selectionManagerDataContextChanged.bind(this)
                                });
                                this._selectionManagerDataContextChanged();
                                this._selectionManagerSelectionChanged();
                                this.notify("selectionManager", value, oldValue)
                            }
                        }
                }, selectedItem: {
                    get: function() {
                        return this._selectedItem
                    }, set: function(value) {
                            if (value !== WinJS.Binding.unwrap(this._selectedItem)) {
                                var oldValue = this._selectedItem;
                                this._selectedItem = value;
                                this._selectedItemChanged();
                                this.notify("selectedItem", value, oldValue)
                            }
                        }
                }, items: {
                    get: function() {
                        return this._items
                    }, set: function(value) {
                            if (value !== WinJS.Binding.unwrap(this._items)) {
                                var oldValue = this._items;
                                this._items = value;
                                this._itemsChanged(value, oldValue);
                                this.notify("items", value, oldValue)
                            }
                        }
                }, overrideDescription: {
                    get: function() {
                        return this._overrideDescription
                    }, set: function(value) {
                            this.updateAndNotify("overrideDescription", value);
                            if (this.overrideDescription)
                                this.descriptionLabelVisible = true
                        }
                }, labelOverride: {
                    get: function() {
                        return this._labelOverride
                    }, set: function(value) {
                            this._labelOverride = value;
                            if (this.labelControl && !this.overrideDescription)
                                this.labelControl.textContent = value;
                            else if (this.labelDescription && this.overrideDescription)
                                this.labelDescription.textContent = value;
                            if (this.isVoiceEnabled && this.labelOverride)
                                this.voicePhrase = this.labelOverride
                        }
                }, automaticFocusOverride: {
                    get: function() {
                        return this._automaticFocusOverride
                    }, set: function(value) {
                            this._automaticFocusOverride = value;
                            var focusItem = this.domElement.querySelector(".win-focusable");
                            if (focusItem)
                                focusItem.setAttribute("data-win-focus", this._automaticFocusOverride)
                        }
                }, _settingsChanged: function settingsChanged() {
                    if (this._selectionManager && this.settingsKey) {
                        this._selectionManager.isRoamingSetting = !MS.Entertainment.Utilities.isVideoApp2 && this.isRoamingSetting;
                        this._selectionManager.settingsKey = this.settingsKey
                    }
                }, _itemsChanged: function _itemsChanged(newValue, oldValue) {
                    if (oldValue && oldValue instanceof MS.Entertainment.ObservableArray)
                        oldValue.removeChangeListener(this._observableArrayChanged);
                    if (newValue && newValue instanceof MS.Entertainment.ObservableArray)
                        newValue.addChangeListener(this._observableArrayChanged);
                    if (this.selectionManager && !this.useSelectionManagerDataSourceAsItems)
                        if (this.selectionManager.dataSource !== this.items) {
                            this.selectionManager.settingsKey = this.settingsKey;
                            this.selectionManager.dataSource = this.items
                        }
                    this._observableArrayChanged()
                }, _observableArrayChanged: function _observableArrayChanged() {
                    if (this.deferUpdatesUntilInitialized && !this._initialized)
                        return;
                    this._constrainSelectedItem();
                    this._updateArrowVisibility();
                    this._updateControlVisibility();
                    if (!isNaN(this.tabIndex)) {
                        var elementToAttribute = this.domElement;
                        if (this._modifierContainer)
                            elementToAttribute = this._modifierContainer;
                        if (elementToAttribute)
                            if (this.items && (this.items.length > 1 || (this.items.length == 1 && this.allowSingleItemToShowList))) {
                                elementToAttribute.setAttribute("tabindex", this.tabIndex);
                                elementToAttribute.setAttribute("aria-haspopup", true);
                                elementToAttribute.disabled = false
                            }
                            else {
                                elementToAttribute.setAttribute("tabindex", -1);
                                elementToAttribute.removeAttribute("aria-haspopup");
                                elementToAttribute.disabled = true
                            }
                    }
                }, _selectedItemChanged: function _selectedItemChanged() {
                    var label;
                    var labelType;
                    this._constrainSelectedItem();
                    if (this.selectionManager)
                        this.selectionManager.selectedItem = this.selectedItem;
                    label = String.empty;
                    if (this.selectedItem && (this.selectedItem.label || this.selectedItem.title))
                        label = this.selectedItem.label ? this.selectedItem.label : this.selectedItem.title;
                    labelType = typeof label;
                    switch (labelType) {
                        case"string":
                            if (String.id[label])
                                label = String.load(label);
                            break;
                        default:
                            MS.Entertainment.UI.Controls.assert(false, "Unrecognized label type in modifier control.");
                            break
                    }
                    if (this.labelControl && (!this.labelOverride || this.overrideDescription))
                        this.labelControl.textContent = label;
                    if (this.isVoiceEnabled && !this.labelOverride)
                        this.voicePhrase = label;
                    (new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell).traceModifierControl_SelectionChanged(label, this.identifier)
                }, _selectionManagerSelectionChanged: function _selectionManagerSelectionChanged() {
                    var newSelectedItem = this.selectionManager ? this.selectionManager.selectedItem : null;
                    if (!this.selectedItem || this.selectedItem !== newSelectedItem)
                        this.selectedItem = newSelectedItem
                }, _selectionManagerDataContextChanged: function _selectionManagerDataContextChanged() {
                    if (this.useSelectionManagerDataSourceAsItems)
                        this.items = this._selectionManager && this._selectionManager.dataSource
                }, _descriptionLabelChanged: function _descriptionLabelChanged() {
                    if (!this.showDescription || !this.labelDescription || this.overrideDescription)
                        return;
                    if (this.descriptionLabel) {
                        this.labelDescription.textContent = String.load(this.descriptionLabel);
                        this.descriptionLabelVisible = true
                    }
                    else if (this.descriptionLabelText) {
                        this.labelDescription.textContent = this.descriptionLabelText;
                        this.descriptionLabelVisible = true
                    }
                    else
                        this.descriptionLabelVisible = false
                }, _constrainSelectedItem: function _constrainSelectedItem() {
                    if (this.useSelectionManagerDataSourceAsItems) {
                        this.selectionItem = this.selectionManager && this.selectionManager.selectedItem;
                        return
                    }
                    if (!this.items)
                        this.selectedItem = null;
                    else if (this.items.length <= this.minItems)
                        this.selectedItem = null;
                    else if (this.items instanceof MS.Entertainment.ObservableArray) {
                        var found = false;
                        for (var i = 0; i < this.items.length; i++)
                            if (this.items.item(i) === this.selectedItem || this.items.item(i) === WinJS.Binding.unwrap(this.selectedItem)) {
                                found = true;
                                break
                            }
                        if (!found)
                            this.selectedItem = (this.selectionManager && this.selectionManager.selectedItem) || this.items.item(0)
                    }
                    else if (this.items.indexOf(WinJS.Binding.unwrap(this.selectedItem)) < 0) {
                        var found = false;
                        for (var i = 0; i < this.items.length; i++)
                            if (this.items[i] === this.selectedItem || this.items[i] === WinJS.Binding.unwrap(this.selectedItem)) {
                                found = true;
                                break
                            }
                        if (!found)
                            this.selectedItem = (this.selectionManager && this.selectionManager.selectedItem)
                    }
                }, _updateControlVisibility: function _updateControlVisibility() {
                    if (!this.overrideControlVisibility)
                        if (!this.items || this.items.length <= this.minItems)
                            WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
                        else
                            WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay")
                }, _updateArrowVisibility: function _updateArrowVisibility() {
                    var elementToAttribute = this.domElement;
                    if (this._modifierContainer)
                        elementToAttribute = this._modifierContainer;
                    if (!this.items || (!this.allowSingleItemToShowList && this.items.length <= 1))
                        WinJS.Utilities.addClass(elementToAttribute, "dropDownDisabled");
                    else
                        WinJS.Utilities.removeClass(elementToAttribute, "dropDownDisabled");
                    if (!this.dropDownArrow)
                        return null;
                    if (this.showDropDownArrow && (!MS.Entertainment.Utilities.isMusicApp2 || (this.items && this.items.length >= this.minItems)))
                        WinJS.Utilities.removeClass(this.dropDownArrow, "removeFromDisplay");
                    else
                        WinJS.Utilities.addClass(this.dropDownArrow, "removeFromDisplay")
                }, setTabPanel: function setTabPanel(tabPanel) {
                    this._tabPanel = tabPanel
                }, onKeyDown: function onKeyDown(event) {
                    if (event.keyCode === WinJS.Utilities.Key.enter || event.keyCode === WinJS.Utilities.Key.space) {
                        this.onClicked();
                        event.stopPropagation();
                        event.preventDefault()
                    }
                }, onClicked: function onClicked() {
                    var boundingRect;
                    if (!this.items || (!this.allowSingleItemToShowList && this.items.length <= 1))
                        return;
                    var elementToAttribute = this.domElement;
                    if (this._modifierContainer)
                        elementToAttribute = this._modifierContainer;
                    if (this.toggleModifier) {
                        var selectedItem = this.selectionManager.selectedItem;
                        var currentSelectedIndex = Math.max(this.selectionManager.dataSource.indexOf(selectedItem), 0);
                        var items = this.selectionManager.dataSource;
                        var newIndex = (currentSelectedIndex + 1) % 2;
                        if (items instanceof MS.Entertainment.ObservableArray)
                            this.selectionManager.selectedItem = items.item(newIndex);
                        else if (Array.isArray(items))
                            this.selectionManager.selectedItem = items[newIndex];
                        else
                            MS.Entertainment.UI.Controls.fail("Unrecognized items list type in modifier control.")
                    }
                    else if (!this.openPopup && !modifierAlreadyOpen) {
                        var anchorElement;
                        if (this.calculateModifierPopoverPosition)
                            anchorElement = elementToAttribute;
                        this.openPopup = MS.Entertainment.UI.Controls.ModifierPopup.createModifierPopup(this.popupStyle, this.selectionManager, {
                            elementToAnchorTo: anchorElement, modifierControl: this, popupShouldOpenAboveButton: this.popupShouldOpenAboveButton
                        });
                        if (!this.isBeingDismissed) {
                            modifierAlreadyOpen = true;
                            if (elementToAttribute)
                                WinJS.Utilities.addClass(elementToAttribute, "showingList");
                            this.openPopup.show().then(function traceModifierPopupDismissed() {
                                if (elementToAttribute)
                                    WinJS.Utilities.removeClass(elementToAttribute, "showingList");
                                modifierAlreadyOpen = false;
                                this.openPopup = null;
                                (new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell).traceModifierControl_PopupClosed(this.identifier)
                            }.bind(this))
                        }
                    }
                }, getItem: function getItem(index) {
                    var items = WinJS.Binding.unwrap(this.items);
                    if (items instanceof MS.Entertainment.ObservableArray)
                        return items.item(index);
                    else if (Array.isArray(items))
                        return items[index];
                    else
                        MS.Entertainment.UI.Controls.fail("Unrecognized items list type in modifier control.")
                }
        }, {
            tabIndex: 0, descriptionLabel: null, descriptionLabelText: null, descriptionLabelVisible: false, popupStyle: null, settingsKey: null, isRoamingSetting: !MS.Entertainment.Utilities.isVideoApp2, overrideControlVisibility: false
        }), ModifierPopup: MS.Entertainment.UI.Framework.defineUserControl("/Controls/Modifier.html#modifierPopupTemplate", function modifierPopupConstructor(){}, {
                modifierControl: null, customStyle: null, topPadding: 0, bottomPadding: 0, selectedItemIndex: 0, _guesstimatedItemHeightPx: 50, _keyboardNavigationManager: null, _eventHandlers: null, _uiStateHandlers: null, descriptionLabel: null, anchorElement: null, _parentOverlay: null, initialize: function initialize() {
                        this._keyboardNavigationManager = new MS.Entertainment.Framework.KeyboardNavigationManager(this.scrollerElement, this.scrollerElement);
                        if (Array.isArray(this.customStyle))
                            this.customStyle.forEach(function(style) {
                                WinJS.Utilities.addClass(this.domElement, style)
                            }, this);
                        else if (this.customStyle)
                            WinJS.Utilities.addClass(this.domElement, this.customStyle);
                        this._eventHandlers = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                            keypress: function onKeyPress(event) {
                                if (event.keyCode === WinJS.Utilities.Key.escape)
                                    this.modifierControl.openPopup.hide()
                            }.bind(this), keyup: function onKeyUp(event) {
                                    if (event.keyCode === WinJS.Utilities.Key.dismissButton) {
                                        event.stopPropagation();
                                        this.modifierControl.openPopup.hide()
                                    }
                                }.bind(this)
                        });
                        if (this.modifierControl.descriptionLabel)
                            this.descriptionLabel = String.load(this.modifierControl.descriptionLabel);
                        else if (this.modifierControl.descriptionLabelText)
                            this.descriptionLabel = this.modifierControl.descriptionLabelText;
                        if (this.anchorElement) {
                            var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            this._uiStateHandlers = MS.Entertainment.UI.Framework.addEventHandlers(uiState, {windowresize: this.hide.bind(this)})
                        }
                        this.buildItems()
                    }, unload: function unload() {
                        if (this._eventHandlers) {
                            this._eventHandlers.cancel();
                            this._eventHandlers = null
                        }
                        if (this._uiStateHandlers) {
                            this._uiStateHandlers.cancel();
                            this._uiStateHandlers = null
                        }
                        this._parentOverlay = null;
                        MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                    }, hide: function hide() {
                        if (this._parentOverlay)
                            this._parentOverlay.hide()
                    }, setOverlay: function setOverlay(overlay) {
                        this._parentOverlay = overlay;
                        overlay.lightDismissEnabled = true
                    }, scrollerElement: {get: function() {
                            if (this.scroller && this.scroller._element)
                                return this.scroller._element;
                            return this.scroller
                        }}, buildItems: function buildItems() {
                        var items = [];
                        var i;
                        var selectedItem;
                        var indexOfSelectedItem = -1;
                        var entriesLoaded = 0;
                        this.domElement.addEventListener("ModifierPopupEntryLoaded", function entryLoaded(event) {
                            event.stopPropagation();
                            entriesLoaded++;
                            if (entriesLoaded === (indexOfSelectedItem + 1)) {
                                window.requestAnimationFrame(function() {
                                    if (this.entryList)
                                        this.entryList.bringItemIntoView(items[indexOfSelectedItem]);
                                    if (this.scrollerElement)
                                        this._keyboardNavigationManager.setFocusedItem(this.scrollerElement.querySelector(".initialSelectedModifierPopupEntry"))
                                }.bind(this));
                                (new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell).traceModifierControl_PopupOpened(this.modifierControl.identifier)
                            }
                        }.bind(this));
                        if (this.selectionManager && this.selectionManager.dataSource) {
                            selectedItem = WinJS.Binding.unwrap(this.selectionManager.selectedItem);
                            for (i = 0; i < this.selectionManager.dataSource.length; i++) {
                                var listItem = {
                                        item: this.selectionManager.dataSource.item ? this.selectionManager.dataSource.item(i) : this.selectionManager.dataSource[i], modifierControl: this.modifierControl, selectionManager: this.selectionManager
                                    };
                                if (!listItem.item.canExecute || listItem.item.canExecute()) {
                                    if (!listItem.item.isSeparator && indexOfSelectedItem === -1 && (!selectedItem || listItem.item === selectedItem)) {
                                        indexOfSelectedItem = i;
                                        this.selectedItemIndex = i;
                                        listItem.isInitialSelected = true
                                    }
                                    items.push(listItem)
                                }
                            }
                            if (indexOfSelectedItem === -1 && items.length > 0) {
                                items[0].isInitialSelected = true;
                                indexOfSelectedItem = 0
                            }
                            var screenItems = Math.round(((MS.Entertainment.Utilities.getWindowHeight() - 150) / this._guesstimatedItemHeightPx));
                            this.entryList.longListDeferalItemLimit = screenItems;
                            this.entryList.dataSource = items
                        }
                    }
            }, {items: null}, {
                calculatePositionFromBoundingRect: function calculatePositionFromBoundingRect(boundingRect, popupShouldOpenAboveButton) {
                    var left;
                    var right;
                    switch (MS.Entertainment.Utilities.getTextDirection()) {
                        case MS.Entertainment.Utilities.TextDirections.LeftToRight:
                            left = Math.round(boundingRect.left) + "px";
                            right = "auto";
                            break;
                        case MS.Entertainment.Utilities.TextDirections.RightToLeft:
                            right = (document.body.clientWidth - Math.round(boundingRect.right)) + "px";
                            left = "auto";
                            break
                    }
                    var top = popupShouldOpenAboveButton ? "auto" : Math.round(boundingRect.top + boundingRect.height) + "px";
                    var bottom = popupShouldOpenAboveButton ? document.body.clientHeight - Math.round(boundingRect.top) + "px" : "auto";
                    return {
                            left: left, top: top, right: right, bottom: bottom
                        }
                }, createModifierPopup: function createModifierPopup(popupStyle, selectionManager, optionalParameters) {
                        var anchorElement = optionalParameters && optionalParameters.elementToAnchorTo;
                        var boundingRect;
                        var modifierControl = optionalParameters && optionalParameters.modifierControl;
                        var openAbove = optionalParameters && optionalParameters.popupShouldOpenAboveButton;
                        if (anchorElement)
                            boundingRect = anchorElement.getBoundingClientRect();
                        boundingRect = boundingRect || {
                            left: 0, width: 0, right: 0, top: 0, bottom: 0, height: 0
                        };
                        var position = MS.Entertainment.UI.Controls.ModifierPopup.calculatePositionFromBoundingRect(boundingRect, openAbove);
                        var fakeModifierControl = false;
                        if (!modifierControl) {
                            modifierControl = {};
                            fakeModifierControl = true
                        }
                        var popupClass = "MS.Entertainment.UI.Controls.ModifierPopup";
                        if (MS.Entertainment.Utilities.isApp2)
                            popupClass = "MS.Entertainment.UI.Controls.App2ModifierPopup";
                        var openPopup = MS.Entertainment.UI.Shell.createOverlay(popupClass, {
                                modifierControl: modifierControl, selectionManager: selectionManager, customStyle: popupStyle, topPadding: Math.round(boundingRect.top), bottomPadding: MS.Entertainment.Utilities.getWindowHeight() - Math.round(boundingRect.bottom), anchorElement: anchorElement
                            }, {
                                left: position.left, right: position.right, bottom: position.bottom, top: position.top, customStyle: "modifierPopupContainer", autoSetFocus: false, lightDismissEnabled: MS.Entertainment.Utilities.isApp2, enableKeyboardLightDismiss: MS.Entertainment.Utilities.isApp2, focusPreviouslyFocusedElement: false, showAnimation: function() {
                                        return WinJS.Promise.as()
                                    }
                            });
                        if (fakeModifierControl)
                            modifierControl.openPopup = openPopup;
                        return openPopup
                    }, selectTemplateOverride: function selectTemplateOverride(item) {
                        var template = this.itemTemplate;
                        if (item && item.item && item.item.templateOverride)
                            template = item.item.templateOverride;
                        return MS.Entertainment.UI.Framework.loadTemplate(template, null, true).then(function(templateControl) {
                                return templateControl
                            })
                    }
            }), ModifierPopupEntry: MS.Entertainment.UI.Framework.defineUserControl("/Controls/Modifier.html#modifierPopupEntryTemplate", null, {
                modifierControl: null, _skipDefer: true, item: null, isInitialSelected: false, preventHideDuringInitialize: true, allowAnimations: false, _gotData: function _gotData(data) {
                        var domEvent;
                        if (data.item && data.item.isSeparator) {
                            WinJS.Utilities.addClass(this.domElement, "modifierSeparator");
                            WinJS.Utilities.addClass(this.domElement, "disabled");
                            this.domElement.setAttribute("disabled", "disabled");
                            var modifierPopupEntryDomElement = this.domElement.firstElementChild;
                            WinJS.Utilities.removeClass(modifierPopupEntryDomElement, "win-focusable")
                        }
                        else {
                            var label = String.empty;
                            if (data.item && (data.item.label || data.item.title))
                                label = data.item.label ? data.item.label : data.item.title;
                            var labelType = typeof label;
                            switch (labelType) {
                                case"string":
                                    if (String.id[label])
                                        this.text.textContent = String.load(label);
                                    else
                                        this.text.textContent = label;
                                    if (this.isVoiceEnabled && data.item) {
                                        this.voicePhrase = data.item.voicePhrase || label;
                                        this.voicePhoneticPhrase = data.item.voicePhoneticPhrase || MS.Entertainment.UI.App2.VoiceStatics.emptyPronunciationValue;
                                        this.voiceConfidence = data.item.voiceConfidence || MS.Entertainment.UI.App2.VoiceStatics.defaultConfidence
                                    }
                                    break;
                                default:
                                    MS.Entertainment.UI.Controls.fail("Unrecognized label type in modifier control popup entry: " + labelType);
                                    break
                            }
                            if (data.isInitialSelected)
                                WinJS.Utilities.addClass(this.background, "initialSelectedModifierPopupEntry");
                            if (data.modifierControl._tabPanel)
                                MS.Entertainment.Framework.AccUtils.createAndAddAriaLink(this.domElement, data.modifierControl._tabPanel, "aria-controls");
                            domEvent = document.createEvent("Event");
                            domEvent.initEvent("ModifierPopupEntryLoaded", true, true);
                            this.domElement.dispatchEvent(domEvent)
                        }
                    }, onClicked: function onClicked() {
                        var clickedItem = this.data.item;
                        if (clickedItem && clickedItem.isSeparator)
                            return;
                        this.data.selectionManager.selectedItem = clickedItem;
                        WinJS.Utilities.addClass(this.background, "selectedModifierPopupEntry");
                        MS.Entertainment.Utilities.Telemetry.logModifierClicked(clickedItem.id, this.text.textContent);
                        if (this.data.modifierControl.openPopup)
                            this.data.modifierControl.openPopup.hide();
                        else
                            this.data.modifierControl.backingData.openPopup.hide()
                    }, _data: null, data: {
                        get: function() {
                            return this._data
                        }, set: function(value) {
                                if (value === this._data)
                                    return;
                                this._data = value;
                                if (!value)
                                    return;
                                this._gotData(value)
                            }
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ModifierPopupEntryAdditionalStyles: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ModifierPopupEntry", "/Controls/Modifier.html#modifierPopupEntryTemplate", null, {_gotData: function _gotData(data) {
                var addedStyle = WinJS.Utilities.getMember("item.styleName", data);
                if (addedStyle && this.domElement)
                    WinJS.Utilities.addClass(this.domElement, addedStyle);
                MS.Entertainment.UI.Controls.ModifierPopupEntry.prototype._gotData.call(this, data)
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {App2ModifierPopup: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ModifierPopup", "/Controls/Modifier.html#app2ModifierPopupTemplate", function app2ModifierPopupConstructor(){}, {onCloseClick: function onCloseClick() {
                var domEvent = document.createEvent("Event");
                domEvent.initEvent("dismissoverlay", true, true);
                this.domElement.dispatchEvent(domEvent)
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ModifierButton: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Modifier", "/Controls/Modifier.html#modifierButtonTemplate", function modifierButtonConstructor(){}, {
            calculateModifierPopoverPosition: false, initialize: function() {
                    this.onClickWithContext = WinJS.Utilities.markSupportedForProcessing(this.onClickWithContext.bind(this));
                    MS.Entertainment.UI.Controls.Modifier.prototype.initialize.call(this)
                }, onClickWithContext: function onClickWithContext(args) {
                    this.onClicked(args)
                }
        }, {buttonText: null})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {TemplatelessModifier: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Modifier", null, function templateLessModifier() {
            this.labelControl = this.domElement
        }, {
            _clickHandler: null, _keyDownHandler: null, _activateEventHandlers: null, templateStorage: null, initialize: function inititialize() {
                    MS.Entertainment.UI.Controls.Modifier.prototype.initialize.call(this);
                    this._activateEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                        click: this.onClicked.bind(this), keydown: this.onKeyDown.bind(this)
                    })
                }, unload: function unload() {
                    if (this._activateEventHandlers)
                        this._activateEventHandlers.cancel();
                    MS.Entertainment.UI.Controls.Modifier.prototype.unload.call(this)
                }
        })})
})();
(function runVoiceMixins() {
    MS.Entertainment.Utilities.runVoicePropertyMixins(MS.Entertainment.UI.Controls.Modifier);
    MS.Entertainment.Utilities.runVoicePropertyMixins(MS.Entertainment.UI.Controls.ModifierPopupEntry)
})()
})();
/* >>>>>>/controls/label.js:5607 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {Label: MS.Entertainment.UI.Framework.defineUserControl(null, function labelConstructor(element) {
            MS.Entertainment.Utilities.toggleClassName(this, ["wrap"], this.domElement, "wrap");
            MS.Entertainment.Utilities.toggleClassName(this, ["autoResizeFont"], this.domElement, "autoResizeFont");
            MS.Entertainment.Utilities.toggleClassNameNegate(this, ["clip"], this.domElement, "noClip");
            this.bind("numberOfLines", function setNumberOfLines() {
                if (!this.disableLayoutPass) {
                    this._resizeLabel();
                    this._beginResizeFont()
                }
            }.bind(this))
        }, {
            controlName: "Label", _displayText: "", _text: null, _stringId: 0, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.assert(!this.label, "Label Derivation isn't supported any more")
                }, displayText: {
                    get: function() {
                        return this._displayText
                    }, set: function(value) {
                            if (this._displayText === value)
                                return;
                            this._displayText = value;
                            if (this.domElement)
                                this.domElement.textContent = value
                        }
                }, text: {
                    get: function() {
                        return this._text
                    }, set: function(value) {
                            if (this._text === value)
                                return;
                            var oldValue = this._text;
                            this._text = value;
                            this.notify("text", value, oldValue);
                            this._setDisplayTextByText(value)
                        }
                }, _setDisplayTextByText: function _setDisplayTextByText(newValue) {
                    if (typeof newValue !== "undefined" && newValue !== null) {
                        MS.Entertainment.UI.Controls.assert(!this.stringId, "Mixed usage of raw text and stringId on a label.");
                        this.displayText = newValue;
                        this._beginResizeFont()
                    }
                }, stringId: {
                    get: function() {
                        return this._stringId
                    }, set: function(value) {
                            if (this._stringId === value)
                                return;
                            var oldValue = this._stringId;
                            this._stringId = value;
                            this.notify("stringId", value, oldValue);
                            this._setDisplayTextByStringId(value)
                        }
                }, _setDisplayTextByStringId: function _setDisplayTextByStringId(newValue) {
                    if (newValue) {
                        MS.Entertainment.UI.Controls.assert(!this.text, "Mixed usage of stringId and raw text on a label.");
                        this.displayText = String.load(newValue);
                        this._beginResizeFont()
                    }
                }, _resizeLabel: function _resizeLabel() {
                    var currentFontSize;
                    var currentLineHeight;
                    var unitToUse = null;
                    var lineSpaceValue = 0;
                    var parsedFontSize = null;
                    var parsedLineHeight = null;
                    var adjustedLineHeightMultiplier = this.lineHeightMultiplier;
                    if (this.numberOfLines > 0) {
                        currentFontSize = (this.domElement && this.domElement.currentStyle) ? this.domElement.currentStyle.fontSize : null;
                        if (currentFontSize)
                            parsedFontSize = /^(\d+)\s*(pt|px)$/.exec(currentFontSize);
                        if (parsedFontSize) {
                            currentLineHeight = (this.domElement && this.domElement.currentStyle) ? this.domElement.currentStyle.lineHeight : null;
                            if (currentLineHeight) {
                                parsedLineHeight = /^(\d+)\s*(pt|px)$/.exec(currentLineHeight);
                                if (parsedLineHeight)
                                    adjustedLineHeightMultiplier = parsedLineHeight[1] / parsedFontSize[1]
                            }
                            WinJS.Utilities.addClass(this.domElement, "specificLineCount");
                            this.domElement.style.maxHeight = (parsedFontSize[1] * adjustedLineHeightMultiplier * this.numberOfLines).toString() + parsedFontSize[2]
                        }
                    }
                }, _beginResizeFont: function _beginResizeFont() {
                    if (this.autoResizeFont) {
                        WinJS.Utilities.addClass(this.domElement, "hideFromDisplay");
                        WinJS.Promise.timeout().then(this._resizeFont.bind(this))
                    }
                }, _resizeFont: function _resizeFont() {
                    var labelDomElement = this.domElement;
                    var currentFontSize = this.maxFontSize;
                    var containerWidth = this.domElement.clientWidth;
                    var containerHeight = this.autoResizeHeight ? this.autoResizeHeight : this.domElement.clientHeight;
                    do {
                        labelDomElement.style["font-size"] = currentFontSize + "pt";
                        currentFontSize = currentFontSize - 1
                    } while (currentFontSize >= this.minFontSize && (labelDomElement.scrollWidth > containerWidth || labelDomElement.scrollHeight > containerHeight));
                    WinJS.Utilities.removeClass(labelDomElement, "hideFromDisplay")
                }
        }, {
            wrap: false, clip: true, autoResizeFont: false, autoResizeHeight: 0, maxFontSize: 10, minFontSize: 10, numberOfLines: 0, lineHeightMultiplier: 1.35, disableLayoutPass: false
        })})
})()
})();
/* >>>>>>/controls/popover.js:5715 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    var _currentPopOver = null;
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        PopOver: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.Overlay", "/Controls/PopOver.html#overlayTemplate", function PopOver_Constructor(element, options) {
            this.domElement.addEventListener("DetailsReady", this._handleDetailsReady.bind(this));
            this._updatePosition = this._updatePosition.bind(this);
            MS.Entertainment.Utilities.attachResizeEvent(this.domElement, this._updatePosition);
            this.bind("width", this._updatePosition);
            this.bind("height", this._updatePosition);
            this._bindingsComplete = true;
            if (options && options.presetPreOverlayFocus)
                this._presetPreOverlayFocus = options.presetPreOverlayFocus;
            this._updatePosition()
        }, {
            criticalTemplate: false, dontWaitForContent: true, enableKeyboardLightDismiss: true, setFocusToNavigationService: true, _bindingsComplete: false, _lastWidth: 0, _lastHeight: 0, _lastContainerWidth: 0, _lastContainerHeight: 0, _handleDetailsReady: function _handleDetailsReady() {
                    MS.Entertainment.UI.Framework.focusFirstInSubTree(this.domElement, true)
                }, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.Overlay.prototype.initialize.call(this);
                    this._tabConstrainerHelper.includeAppBarOnLastTab = true
                }, unload: function unload() {
                    MS.Entertainment.Utilities.detachResizeEvent(this.domElement, this._updatePosition);
                    MS.Entertainment.UI.Controls.Overlay.prototype.unload.call(this)
                }, _updatePosition: function _updatePosition() {
                    if (!this._bindingsComplete)
                        return;
                    var containerWidth = MS.Entertainment.Utilities.getWindowWidth();
                    var containerHeight = MS.Entertainment.Utilities.getWindowHeight();
                    if (this.width && ((this.width !== this._lastWidth) || (containerWidth !== this._lastContainerWidth))) {
                        MS.Entertainment.UI.Controls.assert(typeof this.width === "string", "Dialog 'width' property is not a string");
                        if (this.width.indexOf("%") > 0)
                            this.left = this.right = (100 - parseInt(this.width)) / 2 + "%";
                        else
                            this.left = this.right = (containerWidth - parseInt(this.width)) / 2 + "px";
                        this._lastWidth = this.width;
                        this._lastContainerWidth = containerWidth
                    }
                    if (this.height && ((this.height !== this._lastHeight) || (containerHeight !== this._lastContainerHeight))) {
                        MS.Entertainment.UI.Controls.assert(typeof this.height === "string", "Dialog 'height' property is not a string");
                        if (this.height.indexOf("%") > 0)
                            this.top = this.bottom = (100 - parseInt(this.height)) / 2 + "%";
                        else
                            this.top = this.bottom = (containerHeight - parseInt(this.height)) / 2 + "px";
                        this._lastHeight = this.height;
                        this._lastContainerHeight = containerHeight
                    }
                    var positionCssText = "top: " + this.top + "; left: " + this.left + "; width: " + this.width + "px; height: " + this.height + "px";
                    this.cssPositionText = positionCssText
                }, showAnimation: function showAnimation(element) {
                    return WinJS.Promise.as()
                }
        }, {
            height: "200px", width: "200px", cssPositionText: ""
        }, {
            showPopOver: function showPopOver(data) {
                var result = WinJS.Promise.wrap();
                var appView = Windows.UI.ViewManagement.ApplicationView;
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                if (_currentPopOver || (uiStateService.isSnapped && !appView.tryUnsnap()))
                    return result;
                MS.Entertainment.UI.Controls.assert(data, "No data object supplied");
                MS.Entertainment.UI.Controls.assert(data.dataContext, "No data context object supplied");
                MS.Entertainment.UI.Controls.assert(data.dataContext.data, "No data supplied on data context object");
                MS.Entertainment.UI.Controls.assert(data.itemConstructor, "No data Constructor supplied");
                if (!data || !data.dataContext || !data.dataContext.data || !data.itemConstructor)
                    return WinJS.Promise.wrapError("Invalid data to show pop-over");
                var size = (data && data.size) || MS.Entertainment.Utilities.popOverDefaultSize;
                var mediaItem = data.dataContext.data;
                if (MS.Entertainment.Utilities.isApp2 && mediaItem.clone)
                    mediaItem = mediaItem.clone();
                if (mediaItem.serviceType === MS.Entertainment.Data.Augmenter.ServiceTypes.editorialItem)
                    mediaItem = MS.Entertainment.Utilities.convertEditorialItem(mediaItem);
                else {
                    mediaItem.location = data.dataContext.location;
                    mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem)
                }
                var options = {
                        presetPreOverlayFocus: data.presetPreOverlayFocus, onclose: data.onclose, userControl: data.itemConstructor, userControlOptions: {
                                media: mediaItem, inlineExtraData: data.dataContext.inlineExtraData, originalLocation: data.dataContext.location, collectionFilter: data.dataContext.collectionFilter, dataContext: data.dataContext
                            }, width: size.width ? size.width.toString() : String.empty, height: size.height ? size.height.toString() : String.empty
                    };
                if (mediaItem.hydrate && !mediaItem.hydrated)
                    mediaItem.hydrate().done(null, function error(){});
                MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PopoverRequest);
                if (MS.Entertainment.Utilities.isApp2) {
                    var signal = new MS.Entertainment.UI.Framework.Signal;
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.navigationPopover, null, null, {
                        signal: signal, options: options
                    }, true);
                    result = signal.promise
                }
                else {
                    _currentPopOver = new MS.Entertainment.UI.Controls.PopOver(document.createElement("div"), options);
                    result = _currentPopOver.show().then(function() {
                        _currentPopOver = null
                    })
                }
                return result
            }, showNonMediaPopOver: function showNonMediaPopOver(data) {
                    if (_currentPopOver)
                        return WinJS.Promise.wrap();
                    MS.Entertainment.UI.Controls.assert(data, "No data object supplied");
                    MS.Entertainment.UI.Controls.assert(data.itemConstructor, "No data Constructor supplied");
                    var size = (data && data.size) || MS.Entertainment.Utilities.popOverDefaultSize;
                    var options = {
                            presetPreOverlayFocus: data.presetPreOverlayFocus, onclose: data.onclose, userControl: data.itemConstructor, width: size.width ? size.width.toString() : String.empty, height: size.height ? size.height.toString() : String.empty
                        };
                    MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PopoverRequest);
                    _currentPopOver = new MS.Entertainment.UI.Controls.PopOver(document.createElement("div"), options);
                    return _currentPopOver.show().then(function() {
                            _currentPopOver = null
                        })
                }, dismissCurrentPopOver: function dismissCurrentPopOver() {
                    if (!_currentPopOver)
                        return WinJS.Promise.wrap();
                    return _currentPopOver.hide()
                }, isPopoverOpen: {get: function get_isPopoverOpen() {
                        return !!_currentPopOver
                    }}
        }), NavigationPopover: MS.Entertainment.UI.Framework.defineUserControl(null, function navigationPopoverConstructor(element, options) {
                var page = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage;
                this._options = page.options.options;
                this._signal = page.options.signal
            }, {
                _options: null, _signal: null, initialize: function navigationPopoverInitialize() {
                        var childControl = MS.Entertainment.Utilities.instantiateControl(this._options.userControl, this._options.userControlOptions, this._detailsAnchor);
                        if (childControl && childControl.setOverlay)
                            childControl.setOverlay(this)
                    }, unload: function unload() {
                        MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this);
                        this._signal.complete()
                    }, hide: function hide() {
                        var navigateBackAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.navigate);
                        navigateBackAction.parameter = MS.Entertainment.UI.Actions.navigate.NavigateLocation.back;
                        navigateBackAction.execute()
                    }, processChildren: true
            }, {}, {isPopoverOpen: {get: function get_isPopoverOpen() {
                        var currentLocation = null;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                            var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                            currentLocation = navigationService.getUserLocation()
                        }
                        return (MS.Entertainment.UI.Monikers) && (currentLocation === MS.Entertainment.UI.Monikers.navigationPopover)
                    }}}), ShowPopOverAction: MS.Entertainment.deferredDerive(MS.Entertainment.UI.Actions.Action, null, {
                canExecute: function canExecute() {
                    return this.parameter && this.parameter.itemConstructor && this.parameter.dataContext
                }, executed: function() {
                        MS.Entertainment.UI.Controls.PopOver.showPopOver(this.parameter)
                    }
            })
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.showPopOver, function() {
        return new MS.Entertainment.UI.Controls.ShowPopOverAction
    })
})()
})();
/* >>>>>>/controls/link.js:5875 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {getLinkHTMLFile: function getLinkHTMLFile() {
            var htmlRef = null;
            if (window.isVideoApp1 !== undefined && window.isVideoApp1)
                htmlRef = "Components/Video/VideoSpotlightView1.html";
            else
                htmlRef = "/Controls/Link.html";
            return htmlRef
        }});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ActionLink: MS.Entertainment.UI.Framework.defineUserControl(MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#linkTemplate", function actionLinkConstructor() {
            this._accessiblePressed = this._accessiblePressed.bind(this)
        }, {
            overrideStyle: null, animateHubOnTransition: false, _actionBindings: null, _buttonEventHandlers: null, _buttonToggleEventAttached: null, _bindings: null, _pressHold: false, _msGesture: null, _networkStatusBinding: null, initialize: function initialize() {
                    var style = null;
                    var external = false;
                    var updateAccessibilityText = this._updateAccessibilityText.bind(this);
                    this.onClickWithContext = WinJS.Utilities.markSupportedForProcessing(this.onClickWithContext.bind(this));
                    this.bind("action", function() {
                        if (this._actionBindings) {
                            this._actionBindings.cancel();
                            this._actionBindings = null
                        }
                        if (this._networkStatusBinding) {
                            this._networkStatusBinding.cancel();
                            this._networkStatusBinding = null
                        }
                        if (!this.action || this._unloaded)
                            return;
                        if (this.action.disableWhenOffline)
                            this._networkStatusBinding = WinJS.Binding.bind(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState), {networkStatus: this._onNetworkStatusChanged.bind(this)});
                        var external = this.action.isExternalAction;
                        this.action.parameter = this.actionParam || this.action.parameter;
                        this.action.automationId = this.actionAutomationId || this.action.automationId;
                        if (this.action.parameter && this.action.requiresLinkControl)
                            this.action.parameter.linkControl = this;
                        this._actionBindings = WinJS.Binding.bind(this.action, {
                            isEnabled: function actionIsEnabledChanged() {
                                if (this.action)
                                    if (this.disabled === this.action.isEnabled)
                                        this.disabled = !this.action.isEnabled
                            }.bind(this), title: function actionTitleChanged() {
                                    if (this.action.forceTitleChange || (!this.text && !this.stringId))
                                        this.text = this.action.title
                                }.bind(this), ariaPressed: function actionAriaPressedChanged() {
                                    if (this.action.enableAriaPressedOverride)
                                        if (!this._button.hasAttribute("aria-pressed") || (this.action.ariaPressed && this._button.getAttribute("aria-pressed") === "false") || (!this.action.ariaPressed && this._button.getAttribute("aria-pressed") === "true"))
                                            this._button.setAttribute("aria-pressed", this.action.ariaPressed)
                                }.bind(this), icon: function() {
                                    if (!this.icon && this.action.icon)
                                        this.icon = this.action.icon
                                }.bind(this)
                        });
                        if (external)
                            WinJS.Utilities.addClass(this._button, "externalActionLink");
                        if (this.action.isToggleAction && !this._unloaded)
                            this._buttonToggleEventAttached = MS.Entertainment.Utilities.attachPropertyChangeEvent(this._button, this._accessiblePressed);
                        if (this.action.ariaLabelOverride)
                            this.accessibilityText = this.action.ariaLabelOverride
                    }.bind(this));
                    this.bind("holdAction", function() {
                        if (!this.holdAction || this._unloaded)
                            return;
                        if (this._button) {
                            this._msGesture = new MSGesture;
                            var handlePointerDown = this._onPointerDown.bind(this);
                            this._buttonEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this._button, {
                                MSPointerDown: handlePointerDown, pointerdown: handlePointerDown, MSGestureHold: this._buttonHold.bind(this), MSHoldVisual: function(event) {
                                        event.preventDefault()
                                    }
                            })
                        }
                    }.bind(this));
                    this.bind("doClick", function() {
                        if (this.doClick)
                            this.disabled = false
                    }.bind(this));
                    this._bindings = WinJS.Binding.bind(this, {
                        accessibilityText: updateAccessibilityText, accessibilityStringId: updateAccessibilityText, focusable: this._updateFocusableAttributes.bind(this)
                    });
                    if (this.overrideStyle)
                        style = this.overrideStyle;
                    else
                        style = "internalActionLink";
                    if (this._button)
                        WinJS.Utilities.addClass(this._button, style)
                }, _accessiblePressed: function _accessiblePressed(evt) {
                    if (this._button && evt && evt.propertyName === "aria-pressed")
                        if (this.action.ariaPressed && this._button.getAttribute("aria-pressed") === "false")
                            this.onClick();
                        else if (!this.action.ariaPressed && this._button.getAttribute("aria-pressed") === "true")
                            this.onClick()
                }, _onNetworkStatusChanged: function _onNetworkStatusChanged() {
                    if (this.action)
                        if (this.action.suppressMessageInNetworkBind) {
                            var offlineMessage = this.action.offlineMessageTitle;
                            this.action.offlineMessageTitle = String.empty;
                            this.action.requeryCanExecute();
                            this.action.offlineMessageTitle = offlineMessage
                        }
                        else
                            this.action.requeryCanExecute()
                }, unload: function unload() {
                    if (this._bindings) {
                        this._bindings.cancel();
                        this._bindings = null
                    }
                    if (this._networkStatusBinding) {
                        this._networkStatusBinding.cancel();
                        this._networkStatusBinding = null
                    }
                    if (this._actionBindings) {
                        this._actionBindings.cancel();
                        this._actionBindings = null
                    }
                    if (this._buttonEventHandlers) {
                        this._buttonEventHandlers.cancel();
                        this._buttonEventHandlers = null
                    }
                    if (this._buttonToggleEventAttached && this._button) {
                        MS.Entertainment.Utilities.detachPropertyChangeEvent(this._button, this._accessiblePressed);
                        this._buttonToggleEventAttached = false
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, onClickWithContext: function onClickWithContext(args) {
                    this.onClick(args)
                }, onClick: function onLinkClick(onClickArgs) {
                    if (this._pressHold)
                        return;
                    if (this.doClick) {
                        this.doClick();
                        return
                    }
                    if (this.action && !this.action.canExecute)
                        return;
                    var action = this.action;
                    var onClickElement = onClickArgs && onClickArgs.currentTarget;
                    if (onClickElement && action && action.useRelativePositioning) {
                        action.referenceContainer = action.referenceContainer || {};
                        action.referenceContainer.relativeOffset = WinJS.Utilities.getPosition(onClickElement)
                    }
                    var executeFunction = function executeAction() {
                            if (action) {
                                MS.Entertainment.Utilities.playSelectButtonClick();
                                action.execute(this._button)
                            }
                        }.bind(this);
                    if (this.animateHubOnTransition) {
                        var panelContentContainer = MS.Entertainment.Utilities.findParentElementByClassName(this._button, "panelContainer");
                        MS.Entertainment.Animations.HubStrip.setupDeclarativeAnimsHubStripPanels(panelContentContainer)
                    }
                    executeFunction();
                    return true
                }, onHold: function onButtonHold() {
                    if (this.holdAction && !this.holdAction.canExecute)
                        return;
                    if (this.holdAction)
                        this.holdAction.execute();
                    return true
                }, _assignPointer: function _assignPointer(event) {
                    if (!this._msGesture)
                        return;
                    try {
                        this._msGesture.target = event.target;
                        if (event.target === this._msGesture.target) {
                            this._msGesture.addPointer(event.pointerId);
                            if (event.pointerId && event.target.msSetPointerCapture)
                                event.target.msSetPointerCapture(event.pointerId)
                        }
                    }
                    catch(err) {}
                }, _onPointerDown: function _onPointerDown(event) {
                    this._assignPointer(event)
                }, _buttonHold: function _buttonHold(e) {
                    if (!this.holdAction)
                        return;
                    if ((e.detail & e.MSGESTURE_FLAG_BEGIN) === e.MSGESTURE_FLAG_BEGIN) {
                        this.onHold();
                        this._pressHold = true
                    }
                    else if ((e.detail & e.MSGESTURE_FLAG_END) === e.MSGESTURE_FLAG_END)
                        WinJS.Promise.timeout().then(function _delay() {
                            this._pressHold = false
                        }.bind(this))
                }, _updateAccessibilityText: function _updateAccessibilityText() {
                    var accessibilityText,
                        ariaLabelAttribute;
                    if (this.accessibilityText) {
                        MS.Entertainment.UI.Controls.assert(!this.accessibilityStringId, "Mixed usage of raw text and stringId on a accessibility text for the action link.");
                        accessibilityText = this.accessibilityText
                    }
                    else if (this.accessibilityStringId)
                        accessibilityText = String.load(this.accessibilityStringId);
                    MS.Entertainment.Utilities.setAccessibilityText(this._button, accessibilityText)
                }, _updateFocusableAttributes: function _updateFocusableAttributes(newValue, oldValue) {
                    if (!this._button)
                        return;
                    if (newValue)
                        WinJS.Utilities.addClass(this._button, "win-focusable");
                    else
                        WinJS.Utilities.removeClass(this._button, "win-focusable")
                }
        }, {
            actionParam: null, disabled: true, action: null, text: null, stringId: 0, numberOfLines: 0, wrap: false, accessibilityText: null, accessibilityStringId: 0, focusable: false, holdAction: null
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PanelActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#panelActionLinkTemplate", null, null, {focusable: true})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ImageActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#imageActionLinkTemplate", null, {initialize: function initialize() {
                MS.Entertainment.UI.Controls.ActionLink.prototype.initialize.apply(this, arguments);
                if (this.text)
                    MS.Entertainment.UI.Controls.setAccessibilityText(this._button, this.text)
            }}, {imageUrl: null})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {FlyOutActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", null, null, null, {onClick: function onClick() {
                MS.Entertainment.UI.Controls.ActionLink.prototype.onClick.apply(this, arguments);
                var element = this.domElement;
                while (element && !WinJS.Utilities.hasClass(element, "win-flyout"))
                    element = element.parentElement;
                if (element && element.winControl)
                    element.winControl.hide()
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PersistentFlyOutActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", null, null, null, {onClick: function onClick() {
                MS.Entertainment.UI.Controls.ActionLink.prototype.onClick.apply(this, arguments)
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PersistentFlyOutActionComboLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#comboLinkTemplate")});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ComboLinkContainer: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#comboLinkContainerTemplate")});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PanelHeaderActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#panelHeaderLinkTemplate", null, null, {focusable: true})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {CloseActionLink: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", MS.Entertainment.UI.Controls.getLinkHTMLFile() + "#closeLinkTemplate")})
})();
(function runVoiceMixins() {
    MS.Entertainment.Utilities.runVoicePropertyMixins(MS.Entertainment.UI.Controls.ActionLink)
})()
})();
/* >>>>>>/controls/iconbutton.js:6111 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonMode: {
            Normal: "normal", Add: "add", Remove: "remove", Custom: "custom"
        }});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButton: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionLink", "/Controls/IconButton.html#iconButtonTemplate", null, {
            tabIndex: 0, automationId: null, hasSubActions: false, useActionInfo: false, _flyoutControl: null, _flyoutMoved: false, _flyoutReattached: false, _flyoutShowEventHandlers: false, _flyoutEventHandler: null, _iconButtonBindings: null, _allowToolTips: true, _listeningEndHandler: null, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.ActionLink.prototype.initialize.call(this);
                    if (MS.Entertainment.Utilities.isApp2 && XboxJS && XboxJS.UI && XboxJS.UI.Voice)
                        this._listeningEndHandler = MS.Entertainment.Utilities.addEventHandlers(XboxJS.UI.Voice, {listeningend: this._updateTextOnVui.bind(this)});
                    this._allowToolTips = !MS.Entertainment.Utilities.isApp2;
                    this._iconButtonBindings = WinJS.Binding.bind(this, {
                        icon: this._updateIcon.bind(this), iconPressed: this._updateIcon.bind(this), text: this._updateNonVisualLabels.bind(this), stringId: this._stringIdChanged.bind(this), visibility: this._setVisibility.bind(this), isDisabled: this._setDisabled.bind(this), isChecked: this._setChecked.bind(this), hideDefaultRing: this._hideDefaultRingChanged.bind(this), action: {isEnabled: this._updateIconInfo.bind(this)}
                    });
                    this.iconButtonActionBindings = WinJS.Binding.bind(this.action, {
                        subActions: function updateSubItems(newItems) {
                            if (this._unloaded)
                                return;
                            this.subItems = newItems;
                            this._updateSubActions(newItems)
                        }.bind(this), hasSubActions: function updateHasSubActions(newValue) {
                                this.hasSubActions = newValue
                            }.bind(this)
                    });
                    if (this._button)
                        this._button.tabIndex = this.tabIndex;
                    if (this.automationId && this._button && !this._button.getAttribute("data-win-automationid"))
                        this._button.setAttribute("data-win-automationid", this.automationId);
                    if (this._shouldCreateFlyout) {
                        this.domElement.setAttribute("aria-haspopup", true);
                        this._flyoutElement.setAttribute("data-win-control", "MS.Entertainment.UI.Controls.Flyout");
                        this._flyoutControl = new MS.Entertainment.UI.Controls.Flyout(this._flyoutElement);
                        MS.Entertainment.UI.Framework.waitForControlToInitialize(this._flyoutElement).done(function flyoutInitialized() {
                            if (this._unloaded)
                                return;
                            var flyoutElement = this._flyoutControl.flyout.element;
                            flyoutElement.suppressUnload = true;
                            this._flyoutElement.removeChild(flyoutElement);
                            flyoutElement.suppressUnload = false;
                            this._flyoutMoved = true;
                            this._flyoutEventHandler = MS.Entertainment.Utilities.addEventHandlers(this._flyoutControl.flyout, {
                                aftershow: this._updateFlyoutPosition.bind(this), beforeshow: this._hideFlyout.bind(this)
                            });
                            if (this.action._flyoutClassName)
                                WinJS.Utilities.addClass(flyoutElement, this.action._flyoutClassName)
                        }.bind(this))
                    }
                    if (this.isToggleButton && this._button) {
                        WinJS.Utilities.addClass(this._button, "toggleButton");
                        if (this.isChecked)
                            this._button.setAttribute("aria-pressed", "true");
                        else
                            this._button.setAttribute("aria-pressed", "false")
                    }
                }, _updateTextOnVui: function _updateTextOnVui() {
                    this.dispatchChangeAndNotify("text", this.text, null)
                }, _updateIconInfo: function _updateIconInfo() {
                    if (this.action)
                        if (this.useActionInfo) {
                            this.text = this.action.title;
                            this.icon = this.action.icon;
                            this.isDisabled = !this.action.isEnabled;
                            this.automationId = this.action.automationId;
                            if (this.automationId && this._button)
                                this._button.setAttribute("data-win-automationid", this.automationId);
                            this.voicePhrase = this.action.voicePhrase;
                            this.voiceConfidence = this.action.voiceConfidence;
                            this.voicePhoneticPhrase = this.action.voicePhoneticPhrase;
                            this._hideDefaultRingChanged();
                            this._updateIcon()
                        }
                        else if (this.action.iconInfo && !this.overrideIconInfo) {
                            var iconInfo = this.action.iconInfo;
                            this.text = this.action.title;
                            this.icon = iconInfo.icon;
                            this.iconPressed = iconInfo.iconPressed;
                            this.adornerMode = iconInfo.adornerMode;
                            this.adornerRing = iconInfo.adornerRing;
                            this.isToggleButton = iconInfo.isToggleButton;
                            this.isDisabled = !this.action.isEnabled;
                            this.hideDefaultRing = iconInfo.hideDefaultRing;
                            this._hideDefaultRingChanged();
                            this._updateIcon()
                        }
                    this._setDomElement();
                    this._setFocusDirections()
                }, _setFocusDirections: function _setFocusDirections() {
                    if (this.focusDirections) {
                        var child = this.domElement.firstElementChild;
                        if (child)
                            try {
                                child.setAttribute("data-win-focus", JSON.stringify(this.focusDirections))
                            }
                            catch(e) {
                                MS.Entertainment.UI.Controls.fail("JSON.stringify failed: " + e && e.message)
                            }
                    }
                }, unload: function unload() {
                    if (this._iconButtonBindings) {
                        this._iconButtonBindings.cancel();
                        this._iconButtonBindings = null
                    }
                    if (this.iconButtonActionBindings) {
                        this.iconButtonActionBindings.cancel();
                        this.iconButtonActionBindings = null
                    }
                    if (this.action)
                        this.action.referenceContainer = null;
                    if (this._flyoutEventHandler) {
                        this._flyoutEventHandler.cancel();
                        this._flyoutEventHandler = null
                    }
                    if (this._flyoutShowEventHandlers) {
                        this._flyoutShowEventHandlers.cancel();
                        this._flyoutShowEventHandlers = null
                    }
                    if (this._flyoutControl && this._flyoutControl.flyout) {
                        if (this._flyoutMoved && this._flyoutReattached)
                            document.body.removeChild(this._flyoutControl.flyout.element);
                        this._flyoutControl = null
                    }
                    if (this._listeningEndHandler) {
                        this._listeningEndHandler.cancel();
                        this._listeningEndHandler = null
                    }
                    MS.Entertainment.UI.Controls.ActionLink.prototype.unload.call(this)
                }, onClickPreProcess: function onClickPreProcess() {
                    if (this._flyoutControl) {
                        if (!(this._flyoutControl.flyout && this._flyoutControl.flyout.element)) {
                            MS.Entertainment.UI.Controls.fail("Flyout iconbutton is missing flyout elements");
                            return
                        }
                        var executePromise = WinJS.Promise.wrap();
                        if (!this._flyoutShowEventHandlers)
                            this._flyoutShowEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this._flyoutControl.flyout.element, {
                                aftershow: function flyoutAfterShow() {
                                    if (this._flyoutControl && this._flyoutControl.flyout && this._flyoutControl.flyout.element)
                                        MS.Entertainment.UI.Framework.addOverlayContainer(this._flyoutControl.flyout.element)
                                }.bind(this), afterhide: function flyoutAfterHide() {
                                        if (this._flyoutControl && this._flyoutControl.flyout && this._flyoutControl.flyout.element)
                                            MS.Entertainment.UI.Framework.removeOverlayContainer(this._flyoutControl.flyout.element)
                                    }.bind(this)
                            }, false);
                        if (!this._flyoutReattached && this._flyoutControl.flyout.element.style.visibility !== "visible") {
                            document.body.appendChild(this._flyoutControl.flyout.element);
                            this._flyoutReattached = true
                        }
                        if (this.action.canExecute())
                            executePromise = WinJS.Promise.as(this.action.execute(this._button));
                        executePromise.done(function executed() {
                            this._updateSubActions(this.subItems);
                            WinJS.Promise.timeout().done(function delay() {
                                this._showFlyout()
                            }.bind(this))
                        }.bind(this), function onError(error) {
                            var message = error && error.message;
                            MS.Entertainment.UI.fail("executePromise failed: " + message)
                        })
                    }
                    else
                        this.onClick()
                }, _shouldCreateFlyout: {get: function _shouldCreateFlyout() {
                        return this.action && this.action.hasSubActions && !MS.Entertainment.Utilities.isMusicApp2
                    }}, _updateSubActions: function _updateSubActions(newActions) {
                    if (this._flyoutControl && this._flyoutControl._subItemsList)
                        this._flyoutControl._subItemsList.dataSource = newActions
                }, _showFlyout: function _showFlyout() {
                    if (this._flyoutControl && this._flyoutControl.flyout) {
                        var placement = (MS.Entertainment.Utilities.getTextDirection() === MS.Entertainment.Utilities.TextDirections.LeftToRight) ? "right" : "left";
                        var iconElement = this.domElement.querySelector(".win-commandicon");
                        this._flyoutControl.flyout.show(iconElement, placement)
                    }
                }, _hideFlyout: function _hideFlyout() {
                    var flyoutElement = this._flyoutControl && this._flyoutControl.flyout && this._flyoutControl.flyout.element;
                    if (flyoutElement && flyoutElement.style)
                        WinJS.Utilities.addClass(flyoutElement, "hideFromDisplay")
                }, _updateFlyoutPosition: function _updateFlyoutPosition() {
                    var flyoutElement = this._flyoutControl && this._flyoutControl.flyout && this._flyoutControl.flyout.element;
                    if (flyoutElement && flyoutElement.style) {
                        flyoutElement.style.top = "auto";
                        var iconElement = this.domElement.querySelector(".win-commandicon");
                        var offset = WinJS.Utilities.getPosition(iconElement);
                        offset = Math.max(0, document.body.clientHeight - (flyoutElement.clientHeight + offset.top - 7));
                        flyoutElement.style.bottom = offset + "px";
                        WinJS.Utilities.removeClass(flyoutElement, "hideFromDisplay");
                        this._setFocusInFlyout(flyoutElement, false)
                    }
                }, _setFocusInFlyout: function _setFocusInFlyout(flyoutElement, itemsReversed) {
                    WinJS.Promise.timeout().done(function setFocus() {
                        var elementToFocus;
                        var flyoutElements = flyoutElement.getElementsByClassName("actionButtonFlyoutButton");
                        for (var i = 0; flyoutElements && i < flyoutElements.length; i++) {
                            elementToFocus = elementToFocus || flyoutElements[i];
                            if (!itemsReversed && elementToFocus.offsetTop > flyoutElements[i].offsetTop)
                                elementToFocus = flyoutElements[i];
                            else if (itemsReversed && elementToFocus.offsetTop < flyoutElements[i].offsetTop)
                                elementToFocus = flyoutElements[i]
                        }
                        if (elementToFocus)
                            elementToFocus.focus()
                    })
                }, _setDomElement: function _setDomElement() {
                    if (this._unloaded)
                        return;
                    if (this.action)
                        this.action.referenceContainer = {
                            flyout: this._flyoutElement, domElement: this.iconSpan
                        }
                }, _setVisibility: function _setVisibility() {
                    if (this.visibility)
                        WinJS.Utilities.removeClass(this._button, "removeFromDisplay");
                    else
                        WinJS.Utilities.addClass(this._button, "removeFromDisplay")
                }, _setDisabled: function _setDisabled() {
                    if (this._button)
                        if (this.isDisabled)
                            this._button.setAttribute("disabled", "disabled");
                        else
                            this._button.removeAttribute("disabled")
                }, _setChecked: function _setChecked() {
                    if (this.isChecked) {
                        WinJS.Utilities.addClass(this._button, "checked");
                        if (this.isToggleButton && this._button.getAttribute("aria-pressed") === "false")
                            this._button.setAttribute("aria-pressed", "true")
                    }
                    else {
                        WinJS.Utilities.removeClass(this._button, "checked");
                        if (this.isToggleButton && this._button.getAttribute("aria-pressed") === "true")
                            this._button.setAttribute("aria-pressed", "false")
                    }
                }, _updateIcon: function _updateIcon() {
                    var iconPressed = (this.iconPressed) ? this.iconPressed : this.icon;
                    if (this.iconSpan && this.icon)
                        if (this.icon.length === 1 || this.icon === MS.Entertainment.UI.Icon.xboxXenonLogo) {
                            this.iconSpan.textContent = this.icon;
                            this.iconSpan.style.backgroundImage = "";
                            this.iconSpan.style.msHighContrastAdjust = ""
                        }
                        else {
                            this.iconSpan.textContent = "";
                            this.iconSpan.style.backgroundImage = this.icon;
                            this.iconSpan.style.msHighContrastAdjust = "none"
                        }
                    if (this.iconSpanPressed && iconPressed)
                        if (iconPressed.length === 1 || this.icon === MS.Entertainment.UI.Icon.xboxXenonLogo) {
                            this.iconSpanPressed.textContent = iconPressed;
                            this.iconSpanPressed.style.backgroundImage = "";
                            this.iconSpanPressed.style.msHighContrastAdjust = ""
                        }
                        else {
                            this.iconSpanPressed.textContent = "";
                            this.iconSpanPressed.style.backgroundImage = iconPressed;
                            this.iconSpanPressed.style.msHighContrastAdjust = "none"
                        }
                    switch (this.adornerMode) {
                        case(MS.Entertainment.UI.Controls.IconButtonMode.Add):
                            this._setAdorners(MS.Entertainment.UI.Icon.modifierAddRing);
                            break;
                        case(MS.Entertainment.UI.Controls.IconButtonMode.Remove):
                            this._setAdorners(MS.Entertainment.UI.Icon.modifierRemoveRing);
                            break;
                        case(MS.Entertainment.UI.Controls.IconButtonMode.Custom):
                            this._setAdorners(this.adornerRing);
                            break;
                        case(MS.Entertainment.UI.Controls.IconButtonMode.Normal):
                        default:
                            break
                    }
                }, _setAdorners: function _setAdorners(adorner) {
                    this.hideDefaultRing = true;
                    this._hideDefaultRingChanged();
                    this.modifier.textContent = adorner
                }, _hideDefaultRingChanged: function _hideDefaultRingChanged() {
                    if (this.hideDefaultRing || (this.action && this.action.hideDefaultRing))
                        WinJS.Utilities.addClass(this._button, "hideAdorner");
                    else
                        WinJS.Utilities.removeClass(this._button, "hideAdorner")
                }, _stringIdChanged: function _stringIdChanged() {
                    if (this.stringId) {
                        var string = String.load(this.stringId);
                        this._button.setAttribute("aria-label", string);
                        this.linkLabel.innerText = string;
                        this._updateTooltipLabel(string)
                    }
                }, _updateNonVisualLabels: function _updateNonVisualLabels() {
                    var overrideString = null;
                    if (this.toolTipOverrideStringId)
                        overrideString = String.load(this.toolTipOverrideStringId);
                    var toolTipLabel = overrideString || this.text;
                    this._updateAriaLabel();
                    this._updateTooltipLabel(toolTipLabel)
                }, _updateTooltipLabel: function _updateTooltipLabel(text) {
                    if (this._allowToolTips && WinJS.Utilities.getMember("_button.winControl", this) && text && text !== "null" && text !== "undefined")
                        this._button.winControl.innerHTML = text
                }, _updateAriaLabel: function _updateAriaLabel() {
                    var overrideString = null;
                    if (this.toolTipOverrideStringId)
                        overrideString = String.load(this.toolTipOverrideStringId);
                    var stringToUseforAria = overrideString || this.text;
                    if (stringToUseforAria)
                        this._button.setAttribute("aria-label", stringToUseforAria);
                    if (this.text)
                        this.linkLabel.innerText = this.text
                }
        }, {
            icon: null, iconPressed: null, hideDefaultRing: false, adornerMode: MS.Entertainment.UI.Controls.IconButtonMode.Normal, adornerRing: null, isDisabled: false, isToggleButton: false, isChecked: false, visibility: true, subItems: null, action: null, focusable: true, overrideIconInfo: false, toolTipOverrideStringId: null
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonTwoLine: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButton", "/Controls/IconButton.html#iconButtonTwoLineTemplate", null, {
            initialize: function initialize() {
                MS.Entertainment.UI.Controls.IconButton.prototype.initialize.call(this);
                this._iconButtonBindings = WinJS.Binding.bind(this, {
                    icon: this._updateIcon.bind(this), iconPressed: this._updateIcon.bind(this), text: this._textChanged.bind(this), subText: this._subTextChanged.bind(this), subTextString: this._subTextStringChanged.bind(this), stringId: this._stringIdChanged.bind(this), visibility: this._setVisibility.bind(this), isDisabled: this._setDisabled.bind(this), isChecked: this._setChecked.bind(this), hideDefaultRing: this._hideDefaultRingChanged.bind(this), action: this._setDomElement.bind(this)
                })
            }, _textChanged: function _subTextChanged() {
                    if (this.text)
                        this.linkLabel.innerText = this.text;
                    this._updateAriaLabel()
                }, _subTextChanged: function _subTextChanged() {
                    if (this.subText)
                        this.linkSubLabel.textContent = String.load(this.subText);
                    this._updateSubTextVisibility()
                }, _subTextStringChanged: function _subTextStringChanged() {
                    if (this.subTextString)
                        this.linkSubLabel.textContent = this.subTextString;
                    this._updateSubTextVisibility();
                    this._updateAriaLabel()
                }, _updateIconInfo: function _updateIconInfo() {
                    if (this.action && this.useActionInfo)
                        this.subTextString = this.action.subTitle;
                    MS.Entertainment.UI.Controls.IconButton.prototype._updateIconInfo.call(this)
                }, _updateSubTextVisibility: function _updateSubTextVisibility() {
                    this.subTextVisibility = (this.subText || this.subTextString)
                }, _updateAriaLabel: function _updateAriaLabel() {
                    var ariaLabel = String.empty;
                    if (this.text && this.subTextString)
                        ariaLabel = String.load(String.id.IDS_COMMA_SEPARATOR).format(this.text, this.subTextString);
                    else if (this.text)
                        ariaLabel = this.text;
                    if (ariaLabel)
                        this._button.setAttribute("aria-label", ariaLabel)
                }
        }, {
            subText: null, subTextString: null, subTextVisibility: false
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonWithWatchProgress: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButton", "/Controls/IconButton.html#iconButtonWithWatchProgressTemplate", null, {initialize: function initialize() {
                MS.Entertainment.UI.Controls.IconButton.prototype.initialize.call(this)
            }}, {
            mediaItem: null, watchProgressVisibility: false
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonNotification: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButtonTwoLine", "/Controls/IconButton.html#iconButtonNotificationTemplate", null)});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonMessageAction: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButtonTwoLine", "/Controls/IconButton.html#iconButtonMessageActionTemplate", null)});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonImage: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButton", "/Controls/IconButton.html#iconButtonImageTemplate", null, {
            initialize: function initialize() {
                MS.Entertainment.UI.Controls.IconButton.prototype.initialize.call(this);
                this._iconButtonBindings = WinJS.Binding.bind(this, {
                    icon: this._updateIcon.bind(this), iconPressed: this._updateIcon.bind(this), text: this._updateAriaLabel.bind(this), stringId: this._stringIdChanged.bind(this), visibility: this._setVisibility.bind(this), isDisabled: this._setDisabled.bind(this), isChecked: this._setChecked.bind(this), hideDefaultRing: this._hideDefaultRingChanged.bind(this), action: this._updateIconInfo.bind(this), media: this._updateImageProperties.bind(this), defaultImageSize: this._updateImageProperties.bind(this)
                })
            }, _updateIconInfo: function _updateIconInfo() {
                    if (!this.action) {
                        this.isDisabled = true;
                        WinJS.Utilities.addClass(this.ringSpan, "removeFromDisplay");
                        return
                    }
                    WinJS.Utilities.removeClass(this.ringSpan, "removeFromDisplay");
                    var iconInfo = this.action.iconInfo;
                    this.text = this.action.title;
                    this.icon = iconInfo.icon;
                    this.iconPressed = iconInfo.iconPressed;
                    this.adornerMode = iconInfo.adornerMode;
                    this.adornerRing = iconInfo.adornerRing;
                    this.isToggleButton = iconInfo.isToggleButton;
                    this.isDisabled = !this.action.isEnabled;
                    this.hideDefaultRing = iconInfo.hideDefaultRing;
                    this._setDomElement()
                }, _updateImageProperties: function _updateImageProperties() {
                    if (!this._image || !this.desiredImageSize || !this.media)
                        return;
                    this._image.domElement.width = this.desiredImageSize.width;
                    this._image.domElement.height = this.desiredImageSize.height;
                    this._image.desiredImageSize = this.desiredImageSize;
                    this._image.defaultImagePath = this.defaultImagePath;
                    this._image.target = this.media
                }, _updateAriaLabel: function _updateAriaLabel() {
                    var ariaLabel = String.empty;
                    if (this.text && this.subTextString)
                        ariaLabel = String.load(String.id.IDS_COMMA_SEPARATOR).format(this.text, this.subTextString);
                    else if (this.text)
                        ariaLabel = this.text;
                    if (ariaLabel)
                        this._button.setAttribute("aria-label", ariaLabel)
                }
        }, {
            media: null, desiredImageSize: null, defaultImagePath: String.empty, imageWidth: 0, imageHeight: 0
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {IconButtonVertical: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButton", "/Controls/IconButton.html#iconButtonVerticalTemplate", null, {initialize: function initialize() {
                MS.Entertainment.UI.Controls.IconButton.prototype.initialize.call(this)
            }})})
})()
})();
/* >>>>>>/controls/actionlist.js:6513 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ActionList: MS.Entertainment.UI.Framework.defineUserControl("/Controls/actionList.html#actionListTemplate", function actionListConstructor() {
            this._traceProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
            this.visibleSet = new MS.Entertainment.ObservableArray;
            this.overflowSet = new MS.Entertainment.ObservableArray;
            this.updateActionSets = this.updateActionSets.bind(this);
            this.items = new MS.Entertainment.ObservableArray
        }, {
            _workingVisibleItems: null, _workingOverflowItems: null, _maxItems: 0, _overflowAction: null, _actionListBindings: null, _overflowTitleOverride: String.empty, _items: null, _frozen: false, adjustButtonSizeForSnappedMode: false, items: {
                    get: function() {
                        return this._items
                    }, set: function(v) {
                            if (this._items === v)
                                return;
                            var o = this._items;
                            this._items = v;
                            this._itemsChangedHandler(v);
                            this.notify("items", v, o)
                        }
                }, _getOverflowAction: function _getOverflowAction() {
                    if (this._overflowAction)
                        return this._overflowAction;
                    var action = new MS.Entertainment.UI.ToolbarAction;
                    action.id = "overflowAction";
                    action.automationId = MS.Entertainment.UI.AutomationIds.transportPlaybackOptions;
                    action.title = this._overflowTitleOverride || String.load(String.id.IDS_DETAILS_MORE_ACTION);
                    action._flyoutClassName = this._flyoutClassName;
                    action.hasSubActions = true;
                    action.subActions = this.overflowSet;
                    action.icon = MS.Entertainment.UI.Icon.moreActions;
                    action.executed = WinJS.Utilities.markSupportedForProcessing(function executed(){});
                    action.currentVisibility = MS.Entertainment.UI.Controls.ActionList.actionListVisibility.none;
                    this._overflowAction = {action: action};
                    return this._getOverflowAction()
                }, _pendingOverflow: null, updateActionSets: function updateActionSets() {
                    if (this._pendingOverflow) {
                        this._pendingOverflow.cancel();
                        this._pendingOverflow = null
                    }
                    if (this._frozen)
                        return;
                    var newSets = this._calculateActionLocations();
                    if (newSets.overflowSet.length < 1)
                        this.overflowSet.clear();
                    if (newSets.visibleSet.length < 1) {
                        this.visibleSet.clear();
                        return
                    }
                    var traceProvider = this._traceProvider;
                    function mergeNewSetIntoExistingSet(item, index) {
                        if (index < this.length) {
                            if (this.item(index) === item)
                                return;
                            traceProvider.traceActionListControl_ItemRemoved(item && item.action && item.action.title);
                            this.removeAt(index)
                        }
                        traceProvider.traceActionListControl_ItemAdded(item && item.action && item.action.title);
                        this.insert(index, item)
                    }
                    newSets.visibleSet.forEach(mergeNewSetIntoExistingSet.bind(this.visibleSet));
                    if (this.visibleSet.length > newSets.visibleSet.length)
                        for (var k = this.visibleSet.length - 1; this.visibleSet.length !== newSets.visibleSet.length; k--)
                            this.visibleSet.removeAt(k);
                    this._pendingOverflow = WinJS.Promise.timeout(500).then(function pendingOverflow() {
                        newSets.overflowSet.forEach(mergeNewSetIntoExistingSet.bind(this.overflowSet));
                        if (this.overflowSet.length > newSets.overflowSet.length)
                            for (var m = this.overflowSet.length - 1; this.overflowSet.length !== newSets.overflowSet.length; m--)
                                this.overflowSet.removeAt(m)
                    }.bind(this));
                    this.dispatchEvent("itemCountChanged")
                }, _calculateActionLocations: function _calculateActionLocations() {
                    var visibleSet = [];
                    var overflowSet = [];
                    var cantOverFlow = [];
                    var maxItems = this._maxItems;
                    if (maxItems < 1 || !this.workingItems)
                        return {
                                visibleSet: [], overflowSet: []
                            };
                    if (this.workingItems.length <= maxItems)
                        return {
                                visibleSet: this.workingItems.getArray(), overflowSet: overflowSet
                            };
                    for (var i = 0; i < this.workingItems.length; i++)
                        (function(item) {
                            if (!item)
                                return;
                            var action = item.action;
                            var canGoInOverflow = !(action.subActions && action.subActions.length);
                            if (visibleSet.length < maxItems) {
                                visibleSet.push(item);
                                return
                            }
                            if (canGoInOverflow) {
                                overflowSet.push(item);
                                return
                            }
                            cantOverFlow.push(item)
                        }.bind(this))(this.workingItems.item(i));
                    cantOverFlow.push(this._getOverflowAction());
                    MS.Entertainment.UI.Controls.assert(visibleSet.length <= this._maxItems, "Some how ended up with the wrong number of actions in the visible set");
                    MS.Entertainment.UI.Controls.assert(cantOverFlow.length < 3, "cantOverFlow set: Only support two items in overflows; actual overflow button, and one other");
                    var overage = cantOverFlow.length;
                    var candidates = visibleSet.filter(function(item) {
                            var subMenu = item && item.action.subActions;
                            return !(subMenu && subMenu.length)
                        });
                    MS.Entertainment.UI.Controls.assert(overage <= candidates.length, "Some how we dont have enough items to move");
                    for (var j = candidates.length - overage; j < candidates.length; j++)
                        (function(item) {
                            overflowSet.unshift(item);
                            var index = visibleSet.indexOf(item);
                            visibleSet.splice(index, 1)
                        })(candidates[j]);
                    visibleSet = visibleSet.concat(cantOverFlow);
                    MS.Entertainment.UI.Controls.assert(visibleSet.length <= maxItems, "Visible set wasn't correct");
                    MS.Entertainment.UI.Controls.assert(visibleSet.indexOf(this._getOverflowAction()) > -1, "Couldn't find overflow");
                    return {
                            visibleSet: visibleSet, overflowSet: overflowSet
                        }
                }, initialize: function initialize() {
                    this._maxItems = this._calculateMaxVisibleItems();
                    this._actionListBindings = WinJS.Binding.bind(this, {containerWidth: this._onResize.bind(this)})
                }, freeze: function freeze() {
                    this._frozen = true;
                    MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                }, thaw: function thaw() {
                    this._frozen = false;
                    this.updateActionSets();
                    MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this)
                }, unload: function unload() {
                    if (this.workingItems) {
                        this.workingItems.removeChangeListener(this.updateActionSets);
                        this.workingItems = null
                    }
                    if (this._actionListBindings) {
                        this._actionListBindings.cancel();
                        this._actionListBindings = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, _itemsChangedHandler: function _itemsChangedHandler(newValue) {
                    if (this._unloaded)
                        return;
                    this._traceProvider.traceActionListControl_ItemsChanged(newValue);
                    if (this.workingItems)
                        this.workingItems.removeChangeListener(this.updateActionSets);
                    if (!newValue) {
                        this.workingItems = null;
                        this.updateActionSets();
                        this._traceProvider.traceActionListControl_ItemsChanged(newValue);
                        return
                    }
                    var tempWorkingData = WinJS.Binding.unwrap(newValue);
                    if (!(newValue instanceof MS.Entertainment.ObservableArray))
                        tempWorkingData = new MS.Entertainment.ObservableArray(newValue);
                    if (tempWorkingData)
                        tempWorkingData.addChangeListener(this.updateActionSets);
                    this.workingItems = tempWorkingData;
                    WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
                    this.updateActionSets();
                    WinJS.Promise.timeout().then(function showButtons() {
                        WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay")
                    }.bind(this))
                }, _calculateMaxVisibleItems: function _calculateMaxVisibleItems() {
                    return Math.floor(this.containerWidth / this.buttonWidth)
                }, _onResize: function _onResize() {
                    if (MS.Entertainment.Utilities.isMusicApp1 || !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped) {
                        this._maxItems = this._calculateMaxVisibleItems();
                        if (!this._maxItems)
                            return;
                        this.updateActionSets()
                    }
                }, buttonWidth: {get: function buttonWidth_get() {
                        var isSnapped = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped;
                        if (isSnapped && this.adjustButtonSizeForSnappedMode)
                            return 80;
                        else
                            return 100
                    }}
        }, {
            containerWidth: 0, visibleSet: null, overflowSet: null, workingItems: null, _flyoutClassName: "actionListFlyoutColors"
        }, {
            actionListVisibility: {
                auto: "auto", visible: "visible", overflow: "overflow", none: "none"
            }, getSeparatorAction: function getSeparatorAction() {
                    var action = new MS.Entertainment.UI.ToolbarAction;
                    action.id = "separator";
                    action.title = "";
                    action.executed = WinJS.Utilities.markSupportedForProcessing(function executed(){});
                    action.isSeparator = true;
                    return {action: action}
                }, overflowTemplateSelector: WinJS.Utilities.markSupportedForProcessing(function overflowTemplateSelector(item) {
                    var result;
                    function loadItemTemplate(itemTemplate) {
                        return MS.Entertainment.UI.Framework.loadTemplate(itemTemplate, null, true).then(function(templateControl) {
                                return templateControl
                            })
                    }
                    if (!item)
                        return loadItemTemplate(this.itemTemplate);
                    else if (item.action.isSeparator)
                        return loadItemTemplate(this.separatorTemplate);
                    else if (item.action.isPlaybackOption)
                        return loadItemTemplate(this.playbackOptionsItemTemplate);
                    else if (item.action.isComboPlaybackOption)
                        return loadItemTemplate(this.playbackOptionsComboItemTemplate);
                    else
                        return loadItemTemplate(this.itemTemplate)
                })
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {PlaybackOptionsList: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ActionList", null, function PlaybackOptionsList_constructor() {
            this._flyoutClassName = "playbackOptionListFlyoutColors"
        }, {executeActionUpdateCombo: WinJS.Utilities.markSupportedForProcessing(function executeActionUpdateCombo() {
                WinJS.Promise.timeout(100).then(function delaySelectedIndex() {
                    var comboSelect = document.querySelector(".comboSelect");
                    if (comboSelect && !comboSelect.classList.contains("removeFromDisplay")) {
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        var playbackSession = sessionManager.nowPlayingSession;
                        for (var i = 0; i < comboSelect.options.length; i++)
                            if (playbackSession.closedCaptionsOn && comboSelect.options[i].value === playbackSession.ccLcid) {
                                comboSelect.selectedIndex = i;
                                break
                            }
                    }
                }.bind(this))
            })})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ActionListButton: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.IconButton", "/Controls/actionList.html#actionListItemTemplate", null, {
            _actionListActionsBinds: null, _actionListBinds: null, _flyoutToAppBarGap: 2, initialize: function initialize() {
                    MS.Entertainment.UI.Controls.IconButton.prototype.initialize.call(this);
                    this._actionListBinds = WinJS.Binding.bind(this, {action: this._updateAction.bind(this)});
                    this.accessiblePressed = this.accessiblePressed.bind(this);
                    if (this.isToggleButton && this._button)
                        MS.Entertainment.Utilities.attachPropertyChangeEvent(this._button, this.accessiblePressed)
                }, unload: function unload() {
                    if (this._actionListActionsBinds) {
                        this._actionListActionsBinds.cancel();
                        this._actionListActionsBinds = null
                    }
                    if (this._actionListBinds) {
                        this._actionListBinds.cancel();
                        this._actionListBinds = null
                    }
                    if (this.isToggleButton && this._button)
                        MS.Entertainment.Utilities.detachPropertyChangeEvent(this._button, this.accessiblePressed);
                    MS.Entertainment.UI.Controls.IconButton.prototype.unload.call(this)
                }, _updateFlyoutPosition: function _updateFlyoutPosition() {
                    var flyoutElement = this._flyoutControl && this._flyoutControl.flyout && this._flyoutControl.flyout.element;
                    if (flyoutElement && flyoutElement.style) {
                        flyoutElement.style.top = "auto";
                        var actionList = document.querySelector(".appBarActionList");
                        var actionListHeight = actionList.clientHeight;
                        flyoutElement.style.bottom = actionListHeight + this._flyoutToAppBarGap + "px";
                        WinJS.Utilities.addClass(this._flyoutControl.flyout.element, "appbarActionFlyout");
                        WinJS.Utilities.removeClass(this._flyoutControl.flyout.element, "hideFromDisplay");
                        this._setFocusInFlyout(flyoutElement, true)
                    }
                }, accessiblePressed: function accessiblePressed(evt) {
                    if (this._button && evt && evt.propertyName === "aria-pressed")
                        if (this.isChecked && this._button.getAttribute("aria-pressed") === "false") {
                            this.isChecked = false;
                            this.onClickPreProcess()
                        }
                        else if (!this.isChecked && this._button.getAttribute("aria-pressed") === "true") {
                            this.isChecked = true;
                            this.onClickPreProcess()
                        }
                }, _updateAction: function _updateAction() {
                    if (this._actionListActionsBinds) {
                        this._actionListActionsBinds.cancel();
                        this._actionListActionsBinds = null
                    }
                    if (this.action) {
                        if (!this.text && !this.stringId)
                            this.text = this.action.title;
                        this.icon = this.action.icon;
                        if (this.action.iconPressed)
                            this.iconPressed = this.action.iconPressed;
                        if (this.action.adornerMode)
                            this.adornerMode = this.action.adornerMode;
                        if (this.action.adornerRing)
                            this.adornerRing = this.action.adornerRing;
                        if (this.action.accessibilityText)
                            this.accessibilityText = this.action.accessibilityText;
                        if (this.action.accessibilityStringId)
                            this.accessibilityStringId = this.action.accessibilityStringId;
                        this._button.setAttribute("data-win-automationid", this.action.id);
                        this._actionListActionsBinds = WinJS.Binding.bind(this.action, {
                            title: function updateTitle(newTitle) {
                                this.text = newTitle
                            }.bind(this), isEnabled: function actionIsEnabledChanged() {
                                    if (this.isDisabled === this.action.isEnabled) {
                                        if (this.action.hideOnDisable)
                                            if (!this.action.isEnabled)
                                                WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
                                            else
                                                WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay");
                                        this.isDisabled = !this.action.isEnabled
                                    }
                                }.bind(this)
                        })
                    }
                }, _showFlyout: function _showFlyout() {
                    if (this._flyoutControl && this._flyoutControl.flyout)
                        this._flyoutControl.flyout.show(this.domElement, "top", "left")
                }
        })})
})()
})();
/* >>>>>>/controls/headercontrol.js:6827 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                var HeaderPivotControl = (function(_super) {
                        __extends(HeaderPivotControl, _super);
                        function HeaderPivotControl() {
                            _super.apply(this, arguments);
                            this.containerStyle = MS.Entertainment.UI.Controls.ItemsControl.ContainerStyles.horizontalFlow;
                            this.keyboardNavigationManagerClass = MS.Entertainment.Framework.KeyboardNavigationManager
                        }
                        HeaderPivotControl.prototype.initialize = function() {
                            _super.prototype.initialize.call(this);
                            if (this.domElement)
                                this.domElement.setAttribute("data-win-automationid", "header_pivot")
                        };
                        return HeaderPivotControl
                    })(MS.Entertainment.UI.Controls.VerticalPivotControl);
                Controls.HeaderPivotControl = HeaderPivotControl;
                var HeaderControl = (function(_super) {
                        __extends(HeaderControl, _super);
                        function HeaderControl(element, options) {
                            _super.call(this, element, options);
                            if (!this.pivotsDropDownResolution)
                                this.pivotsDropDownResolution = 825;
                            this.title = this.title || String.empty;
                            MS.Entertainment.UI.Framework.processDeclarativeControlContainer(this)
                        }
                        Object.defineProperty(HeaderControl.prototype, "dataContext", {
                            get: function() {
                                return this._dataContext
                            }, set: function(value) {
                                    if (this._dataContext !== value) {
                                        this.updateAndNotify("dataContext", value);
                                        this._updateStateFromDataContext();
                                        if (this._dataContextBindings)
                                            this._dataContextBindings.cancel();
                                        this._dataContextBindings = WinJS.Binding.bind(this._dataContext, {
                                            viewStateViewModel: {viewState: this._updateModifiers.bind(this)}, title: this._updateStateFromDataContext.bind(this)
                                        })
                                    }
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(HeaderControl.prototype, "title", {
                            get: function() {
                                return this._title
                            }, set: function(value) {
                                    this.updateAndNotify("title", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(HeaderControl.prototype, "pivots", {
                            get: function() {
                                return this._pivots
                            }, set: function(value) {
                                    this.updateAndNotify("pivots", value)
                                }, enumerable: true, configurable: true
                        });
                        HeaderControl.prototype.initialize = function() {
                            _super.prototype.initialize.call(this);
                            if (this.domElement)
                                if (this.domElement.attachEvent) {
                                    this._onResizeCallback = this._onResize.bind(this);
                                    this.domElement.attachEvent("onresize", this._onResizeCallback)
                                }
                                else
                                    this._domEventHandler = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {mselementresize: this._onResize.bind(this)})
                        };
                        HeaderControl.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._navigationHandlers) {
                                this._navigationHandlers.cancel();
                                this._navigationHandlers = null
                            }
                            if (this._buttonEventHandlers) {
                                this._buttonEventHandlers.cancel();
                                this._buttonEventHandlers = null
                            }
                            if (this._domEventHandler) {
                                this._domEventHandler.cancel();
                                this._domEventHandler = null
                            }
                            if (this._onResizeCallback && this.domElement) {
                                this.domElement.detachEvent("onresize", this._onResizeCallback);
                                this._onResizeCallback = null
                            }
                            if (this._dataContextBindings) {
                                this._dataContextBindings.cancel();
                                this._dataContextBindings = null
                            }
                        };
                        HeaderControl.prototype._updateStateFromDataContext = function() {
                            if (this.dataContext) {
                                this.title = this.dataContext.title;
                                this.pivots = this.dataContext.pivotsSelectionManager
                            }
                            else {
                                this.title = String.empty;
                                this.pivots = null
                            }
                        };
                        HeaderControl.prototype._onResize = function() {
                            if (!this.domElement || this._unloaded || !this._pivotsButtons || !this._pivotsDropDown)
                                return;
                            if (this.domElement.clientWidth >= this.pivotsDropDownResolution) {
                                WinJS.Utilities.removeClass(this._pivotsButtons.domElement, "removeFromDisplay");
                                WinJS.Utilities.addClass(this._pivotsDropDown, "removeFromDisplay")
                            }
                            else {
                                WinJS.Utilities.removeClass(this._pivotsDropDown, "removeFromDisplay");
                                WinJS.Utilities.addClass(this._pivotsButtons.domElement, "removeFromDisplay")
                            }
                            this._updateModifiers()
                        };
                        HeaderControl.prototype._updateModifiers = function() {
                            if (this._unloaded || !this._sortsContainer)
                                return;
                            var modifiers = WinJS.Utilities.query(".modifierControl", this._sortsContainer);
                            modifiers.forEach(function(modifierContainer) {
                                if (modifierContainer.parentElement.offsetTop > modifierContainer.parentElement.clientTop)
                                    WinJS.Utilities.addClass(modifierContainer, "hideFromDisplay");
                                else
                                    WinJS.Utilities.removeClass(modifierContainer, "hideFromDisplay")
                            })
                        };
                        HeaderControl.isDeclarativeControlContainer = true;
                        return HeaderControl
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.HeaderControl = HeaderControl
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.HeaderPivotControl);
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.HeaderControl)
})();
/* >>>>>>/controls/galleryhost.js:6979 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                var FocusedItemMovedDetail = (function() {
                        function FocusedItemMovedDetail(newIndex) {
                            this.newIndex = newIndex
                        }
                        return FocusedItemMovedDetail
                    })();
                Controls.FocusedItemMovedDetail = FocusedItemMovedDetail;
                var GalleryHost = (function(_super) {
                        __extends(GalleryHost, _super);
                        function GalleryHost(element, options) {
                            _super.call(this, element, options);
                            if (this.delayInitializeChildren === undefined)
                                this.delayInitializeChildren = true;
                            if (this.skipProcessDeclarative === undefined)
                                this.skipProcessDeclarative = false;
                            this._selectTemplateResults = {};
                            if (!this.skipProcessDeclarative)
                                MS.Entertainment.UI.Framework.processDeclarativeControlContainer(this)
                        }
                        GalleryHost.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._dataContextEvents) {
                                this._dataContextEvents.cancel();
                                this._dataContextEvents = null
                            }
                            if (this._galleryControl)
                                this._galleryControl.clearSelectionHandlers();
                            this._selectTemplateResults = null
                        };
                        Object.defineProperty(GalleryHost.prototype, "dataContext", {
                            get: function() {
                                return this._dataContext
                            }, set: function(value) {
                                    this.updateAndNotify("dataContext", value);
                                    this._updateEventHandlersForDataContext()
                                }, enumerable: true, configurable: true
                        });
                        GalleryHost.prototype._updateEventHandlersForDataContext = function() {
                            if (this._dataContextEvents) {
                                this._dataContextEvents.cancel();
                                this._dataContextEvents = null
                            }
                            if (this.dataContext && !this._unloaded) {
                                this._dataContextEvents = MS.Entertainment.Utilities.addEventHandlers(this.dataContext, {
                                    itemsChanged: this.refresh.bind(this), selectedTemplateChanged: this._onSelectedTemplateChangedAndRefresh.bind(this), containingMediaChanged: this._onContainingMediaChanged.bind(this), selectionHandlersChanged: this._onSelectionHandlersChanged.bind(this), filterValueChanged: this._onFilterValueChanged.bind(this), shouldClearSelection: this._onShouldClearSelection.bind(this), delayLoaded: this._onDelayLoadedDataContext.bind(this), mediaContextChanged: this._onMediaContextChanged.bind(this), primaryItemIndexChanged: this._onPrimaryItemIndexChanged.bind(this), focusedItemMoved: this._onFocusedItemMoved.bind(this)
                                });
                                this._onSelectedTemplateChanged();
                                this._onContainingMediaChanged();
                                this._onMediaContextChanged();
                                this._onSelectionHandlersChanged();
                                this._onFilterValueChanged();
                                this.refresh();
                                if (this.dataContext.isDelayInitialized)
                                    this._onDelayLoadedDataContext()
                            }
                        };
                        GalleryHost.prototype.refresh = function() {
                            var _this = this;
                            if (this._unloaded || !this._galleryControl || !this.dataContext)
                                return;
                            var selectedTemplate;
                            if (this._selectedTemplateChanged) {
                                this._selectedTemplateChanged = false;
                                selectedTemplate = this.dataContext.selectedTemplate
                            }
                            if (selectedTemplate) {
                                GalleryHost.optionalTemplateProperties.forEach(function(key) {
                                    _this._galleryControl[key] = _this._mapProperty(key, selectedTemplate[key])
                                });
                                GalleryHost.requiredTemplateProperties.forEach(function(key) {
                                    MS.Entertainment.UI.Controls.assert(!!(key in selectedTemplate), "The selected gallery template is missing an option, this missing option must be set. key = " + key);
                                    if (key in selectedTemplate)
                                        _this._galleryControl[key] = _this._mapProperty(key, selectedTemplate[key])
                                });
                                if (this._galleryControl.grouper) {
                                    this._galleryControl.grouper.keyPropertyName = selectedTemplate.grouperField;
                                    this._galleryControl.grouper.dataAugmentation = selectedTemplate.grouperDataAugmentation;
                                    this._galleryControl.grouper.useKeyAsData = selectedTemplate.grouperKeyAsData
                                }
                            }
                            this._galleryControl.queryToPause = this.dataContext.pausableQuery;
                            this._galleryControl.initialInvoked = this.dataContext.initialInvokedItem;
                            this._galleryControl.initialVisible = this.dataContext.primaryItemIndex;
                            this._galleryControl.dataSource = this.dataContext.items
                        };
                        GalleryHost.prototype._onSelectedTemplateChangedAndRefresh = function() {
                            this._onSelectedTemplateChanged();
                            if (this.dataContext && !this.dataContext.isDisposed)
                                this.refresh()
                        };
                        GalleryHost.prototype._onSelectedTemplateChanged = function() {
                            this._selectedTemplateChanged = true
                        };
                        GalleryHost.prototype._onContainingMediaChanged = function() {
                            if (this._galleryControl && this._galleryControl.mediaContext)
                                this._galleryControl.mediaContext.containingMedia = this.dataContext.containingMedia
                        };
                        GalleryHost.prototype._onSelectionHandlersChanged = function() {
                            if (this._galleryControl && this._galleryControl.setSelectionHandlers)
                                this._galleryControl.setSelectionHandlers(this.dataContext.selectionHandlers)
                        };
                        GalleryHost.prototype._onFilterValueChanged = function() {
                            if (this._galleryControl)
                                this._galleryControl.updateCollectionFilter(this.dataContext.filterValue)
                        };
                        GalleryHost.prototype._onPrimaryItemIndexChanged = function(args) {
                            if (args && args.detail && this._galleryControl)
                                this._galleryControl.safeFocusAndEnsureVisible(args.detail.newValue)
                        };
                        GalleryHost.prototype._onFocusedItemMoved = function(args) {
                            if (args && args.detail && this._galleryControl)
                                this._galleryControl.safeFocusAndEnsureVisible(args.detail.newIndex)
                        };
                        GalleryHost.prototype._onShouldClearSelection = function() {
                            if (this._galleryControl) {
                                if (this._galleryControl.clearSelection)
                                    this._galleryControl.clearSelection();
                                if (this._galleryControl.clearInvocation)
                                    this._galleryControl.clearInvocation()
                            }
                        };
                        GalleryHost.prototype._onDelayLoadedDataContext = function() {
                            var _this = this;
                            if (this._galleryControl && this.delayInitializeChildren) {
                                this.delayInitializeChildren = false;
                                MS.Entertainment.Utilities.schedulePromiseBelowNormal(null, "GalleryHost::_onDelayLoadedDataContext").done(function() {
                                    if (_this._galleryControl) {
                                        _this._galleryControl.delayInitialize();
                                        _this._onContainingMediaChanged()
                                    }
                                })
                            }
                        };
                        GalleryHost.prototype._onMediaContextChanged = function() {
                            if (this.dataContext && this.dataContext.mediaContext && this._galleryControl)
                                this._galleryControl.mediaContext = this.dataContext.mediaContext
                        };
                        GalleryHost.prototype._mapTemplate = function(templateName) {
                            var newTemplate;
                            var selectionQuery;
                            if (!this._unloaded && templateName && templateName.lastIndexOf(GalleryHost._selectKey, 0) == 0) {
                                selectionQuery = templateName.substr(GalleryHost._selectKey.length, templateName.length - GalleryHost._selectKey.length - 1);
                                MS.Entertainment.UI.Controls.assert(!!selectionQuery, "Did you forget to add a selectionQuery?")
                            }
                            if (selectionQuery)
                                if (selectionQuery in this._selectTemplateResults)
                                    newTemplate = this._selectTemplateResults[selectionQuery];
                                else {
                                    newTemplate = WinJS.UI.scopedSelect(selectionQuery, this.domElement);
                                    this._selectTemplateResults[selectionQuery] = newTemplate
                                }
                            return newTemplate || templateName
                        };
                        Object.defineProperty(GalleryHost.prototype, "_propertyMappers", {
                            get: function() {
                                var mapTemplateCallback = this._mapTemplate.bind(this);
                                this.__propertyMappers = this.__propertyMappers || {
                                    itemTemplate: mapTemplateCallback, headerTemplate: mapTemplateCallback, snappedItemTemplate: mapTemplateCallback, unsnappedItemTemplate: mapTemplateCallback, zoomedOutTemplate: mapTemplateCallback
                                };
                                return this.__propertyMappers
                            }, enumerable: true, configurable: true
                        });
                        GalleryHost.prototype._mapProperty = function(propertyName, propertyValue) {
                            if (propertyName in this._propertyMappers)
                                propertyValue = this._propertyMappers[propertyName](propertyValue);
                            return propertyValue
                        };
                        Object.defineProperty(GalleryHost, "optionalTemplateProperties", {
                            get: function() {
                                return ["templateSelectorConstructor", "itemTemplate", "snappedItemTemplate", "unsnappedItemTemplate", "panelTemplate", "zoomedOutTemplate", "panelOptions", "actionTemplate", "headerTemplate", "headerPosition", "grouperType", "maxSelectionCount", "backdropColor", "invokeHelperFactory", "actionOptions", "emptyGalleryTemplate", "headerType", "headerPosition", "listViewClassName", "orientation", "maxRows", "grouperItemThreshold", "itemsDraggable", "itemsReorderable", "debugId", ]
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(GalleryHost, "requiredTemplateProperties", {
                            get: function() {
                                return ["allowZoom", "allowSelectAll", "forceInteractive", "delayHydrateLibraryId", "minimumListLength", "selectionStyleFilled", "layout", "zoomedOutLayout", "tap", "invokeBehavior", "selectionMode", "swipeBehavior"]
                            }, enumerable: true, configurable: true
                        });
                        GalleryHost.isDeclarativeControlContainer = true;
                        GalleryHost._selectKey = "select(";
                        return GalleryHost
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.GalleryHost = GalleryHost
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.GalleryHost)
})();
/* >>>>>>/components/inlinedetails/actionbuttonscontrol.js:7189 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {DownloadActionBase: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function downloadActionBase() {
            this.base()
        }, {
            executed: function executed(param) {
                MS.Entertainment.UI.Actions.fail("DownloadActionBase.executed must be implemented in derived classes.")
            }, canExecute: function canExecute(param) {
                    return true
                }, _extractMediaItem: function _extractMediaItem(param) {
                    var mediaItem;
                    if ("mediaItem" in param)
                        mediaItem = param.mediaItem;
                    else
                        mediaItem = param;
                    if (MS.Entertainment.Data.List.isList(mediaItem))
                        return MS.Entertainment.Data.List.listToArray(mediaItem).then(function gotArray(mediaItemsArray) {
                                MS.Entertainment.UI.Actions.assert(mediaItemsArray.length === 1, "DownloadActionBase Action only accepts one mediaItem");
                                mediaItem = mediaItemsArray[0];
                                return WinJS.Promise.wrap(mediaItem)
                            });
                    return WinJS.Promise.wrap(mediaItem)
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        Purchase: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function purchase() {
            this.base()
        }, {
            _previousButtonText: null, _previousPurchaseType: null, _buttonTextUpdateTimeoutPromise: null, eventHandlers: null, subTitle: null, dialogToHide: null, mediaItem: null, hideDialogIfNeeded: function hideDialogIfNeeded() {
                    if (this.dialogToHide) {
                        this.dialogToHide.hide();
                        this.dialogToHide = null
                    }
                }, onWebHostDialogError: function onWebHostDialogError() {
                    this.hideDialogIfNeeded();
                    this.updateButtonText(true)
                }, onWebHostDialogComplete: function onWebHostDialogComplete() {
                    this.hideDialogIfNeeded();
                    this.removeMediaItemFromWatchlist()
                }, removeMediaItemFromWatchlist: function removeMediaItemFromWatchlist() {
                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                    var watchlistEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.videoWatchlist);
                    if (watchlistEnabled && MS.Entertainment.Utilities.isVideoApp2 && this.mediaItem) {
                        var watchlistService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.watchlistService);
                        watchlistService.isItemInWatchlist(this.mediaItem).then(function isItemInWatchlist(isInWatchlist) {
                            if (isInWatchlist)
                                watchlistService.removeItemFromWatchlist(this.mediaItem)
                        }.bind(this))
                    }
                }, updateButtonText: function updateButtonText(reset) {
                    if (!this._previousPurchaseType || !MS.Entertainment.Utilities.isVideoApp2)
                        return;
                    if (this._buttonTextUpdateTimeoutPromise) {
                        this._buttonTextUpdateTimeoutPromise.cancel();
                        this._buttonTextUpdateTimeoutPromise = null
                    }
                    if (reset && this._previousButtonText) {
                        this.title = this._previousButtonText;
                        this.disabled = false;
                        this._previousButtonText = null;
                        this._previousPurchaseType = null
                    }
                    else {
                        this.title = this._previousPurchaseType === MS.Entertainment.Platform.PurchaseHelpers.PURCHASE_TYPE_BUY ? String.load(String.id.IDS_VIDEO2_BUY_BUTTON_BUYING) : String.load(String.id.IDS_VIDEO2_RENT_BUTTON_RENTING);
                        this.disabled = true
                    }
                }, executed: function executed(param) {
                    var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var target = (param) ? param.target : null;
                    var purchaseType = (param) ? param.purchaseType : null;
                    this._previousButtonText = this.title;
                    this._previousPurchaseType = purchaseType;
                    if (this._buttonTextUpdateTimeoutPromise) {
                        this._buttonTextUpdateTimeoutPromise.cancel();
                        this._buttonTextUpdateTimeoutPromise = null
                    }
                    this.eventHandlers = {
                        onMediaAddedEvent: function onMediaAddedEvent() {
                            var mediaContext = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar).currentMediaContext;
                            if (mediaContext)
                                mediaContext.dispatchEvent(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase)
                        }, onShowWebHostDialogComplete: this.onWebHostDialogComplete.bind(this), onShowWebHostDialogError: this.onWebHostDialogError.bind(this)
                    };
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).done(function launchPurchaseFlow(mediaItem) {
                        if (param && param.hydrateMediaItem)
                            mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                        this.mediaItem = mediaItem;
                        var mediaIsTVSeason = MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem);
                        var productGuid = mediaIsTVSeason ? mediaItem.edsId || mediaItem.canonicalId : mediaItem.serviceId || mediaItem.zuneId;
                        var correlationId = MS.Entertainment.Utilities.Telemetry.findCorrelationIdForMediaItem(mediaItem);
                        if (!correlationId)
                            MS.Entertainment.Utilities.Telemetry.setCorrelationId(productGuid);
                        var telemetryParameterArray = [{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: correlationId || MS.Entertainment.Utilities.Telemetry.getCorrelationId(productGuid)
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: productGuid || String.empty
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ParentProductGuid, parameterValue: MS.Entertainment.Utilities.Telemetry.getParentProductGuid(mediaItem)
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AutomationId, parameterValue: param.automationId || String.empty
                                }];
                        if (param && param.offer)
                            telemetryParameterArray.concat([{
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignedOfferGuid, parameterValue: param.offer.offerId || String.empty
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DeliveryFormat, parameterValue: param.offer.deliveryFormat || String.empty
                                }, {
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DistributionRight, parameterValue: param.offer.licenseRight || String.empty
                                }]);
                        MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: WinJS.Utilities.getMember("referenceContainer.domElement.parentElement.parentElement", this)}, {
                            uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Details
                        }, null, telemetryParameterArray);
                        if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                            MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem);
                        var getRentalOptionPromise = WinJS.Promise.wrap();
                        var signedOffer = param && param.offer && param.offer.signedOffer;
                        var offerId = param && param.offer && param.offer.offerId;
                        var offer = param && param.offer;
                        if (param && !param.offer && param.streamingOffer && param.downloadOffer) {
                            if (!MS.Entertainment.UI.NetworkStatusService.isOnline()) {
                                var error = MS.Entertainment.Platform.Playback.Error.NS_E_WMPIM_USEROFFLINE;
                                MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_FAILED_PANEL_HEADER), error.code);
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorCode, parameterValue: error.code
                                });
                                telemetryParameterArray.push({
                                    parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ErrorId, parameterValue: error.name
                                });
                                MS.Entertainment.Utilities.Telemetry.logTelemetryEventWithParameterArray(MS.Entertainment.Utilities.Telemetry.TelemetryEvents.UIFailure, telemetryParameterArray);
                                return
                            }
                            this.eventHandlers.onMessageEvent = this.hideDialogIfNeeded.bind(this);
                            this.eventHandlers.onFinishedEvent = this.hideDialogIfNeeded.bind(this);
                            this.eventHandlers.onCancelEvent = this.hideDialogIfNeeded.bind(this);
                            this.eventHandlers.onErrorEvent = this.hideDialogIfNeeded.bind(this);
                            getRentalOptionPromise = MS.Entertainment.UI.Controls.RentalOptionsDialog.showRentalOptionsDialog(param.mediaItem, param.streamingOffer, param.downloadOffer).then(function(rentalOptionsDialogResult) {
                                signedOffer = rentalOptionsDialogResult.offer.signedOffer;
                                offerId = rentalOptionsDialogResult.offer.offerId;
                                offer = rentalOptionsDialogResult.offer;
                                this.dialogToHide = rentalOptionsDialogResult.dialog;
                                if (this.dialogToHide && this.dialogToHide.buttons && this.dialogToHide.buttons[0])
                                    this.dialogToHide.buttons[0].isEnabled = false
                            }.bind(this))
                        }
                        getRentalOptionPromise.done(function showPurchaseFlowDialog() {
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            this.updateButtonText(false);
                            if (MS.Entertainment.Utilities.isVideoApp2)
                                this._buttonTextUpdateTimeoutPromise = WinJS.Promise.timeout(20000).done(function buttonTextUpdateTimeout() {
                                    this.updateButtonText(true)
                                }.bind(this));
                            MS.Entertainment.Platform.PurchaseHelpers.launchPurchaseFlow(mediaItem, target, purchaseType, this.eventHandlers, offerId, null, signedInUser.gamerTag, signedOffer, offer, true)
                        }.bind(this))
                    }.bind(this), function getDataFailed() {
                        MS.Entertainment.UI.Actions.assert(false, "Execute purchase failed")
                    })
                }, canExecute: function canExecute(param) {
                    return this.isEnabled
                }
        }), PinToStartScreen: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function pinToStartScreen() {
                this.base()
            }, {
                executed: function executed(param) {
                    var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).done(function getData_complete(media) {
                        return pinToStartScreenService.pinMediaAsync(media)
                    })
                }, canExecute: function canExecute(param) {
                        return this.isEnabled
                    }
            }), UnpinFromStartScreen: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function unpinFromStartScreen() {
                this.base()
            }, {
                executed: function executed(param) {
                    var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var pinToStartScreenService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.pinToStartScreen);
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).done(function getData_complete(media) {
                        return pinToStartScreenService.unpinMediaAsync(media)
                    })
                }, canExecute: function canExecute(param) {
                        return this.isEnabled
                    }
            }), AddRemoveItemWatchlist: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function addRemoveItemWatchlist() {
                this.base()
            }, {
                executed: function executed(param) {
                    var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    var button = MS.Entertainment.UI.Actions.extractButtonFromParam(param);
                    var media,
                        adding;
                    var watchlistService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.watchlistService);
                    MS.Entertainment.Data.List.getData(mediaItem, 0).then(function getData_complete(_media) {
                        media = _media;
                        return watchlistService.isItemInWatchlist(media)
                    }).then(function(isInWatchlist) {
                        if (!isInWatchlist) {
                            adding = true;
                            param.button.title = String.load(String.id.IDS_VIDEO2_WISHLIST_ADDING_TITLE);
                            param.button.disabled = true;
                            return watchlistService.addItemToWatchlist(media)
                        }
                        else {
                            param.button.title = String.load(String.id.IDS_VIDEO2_WISHLIST_REMOVING_TITLE);
                            param.button.disabled = true;
                            return watchlistService.removeItemFromWatchlist(media)
                        }
                    }).then(function() {
                        return watchlistService.isItemInWatchlist(media)
                    }).done(function(isInWatchlist) {
                        var syncStatus = watchlistService.getWatchlistOperationState(media);
                        this.refreshHelper(isInWatchlist, syncStatus, true, button);
                        if (adding && !isInWatchlist)
                            MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_VIDEO2_WISHLIST_FULL_TITLE), String.load(String.id.IDS_VIDEO2_WISHLIST_FULL_DESC))
                    }.bind(this), function(error) {
                        this.refreshHelper(false, MS.Entertainment.Components.Video.Services.WatchlistOperationState.none, true, button);
                        if (error && isFinite(error.number))
                            MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DIALOG_UNEXPECTED_ERROR_CAPTION), error.number)
                    }.bind(this))
                }, canExecute: function canExecute(param) {
                        return this.isEnabled
                    }, refreshHelper: function refreshHelper(isMediaItemInWatchlist, syncState, forceReset, button) {
                        if (syncState === MS.Entertainment.Components.Video.Services.WatchlistOperationState.adding) {
                            button.title = String.load(String.id.IDS_VIDEO2_WISHLIST_ADDING_TITLE);
                            button.disabled = true
                        }
                        else if (syncState === MS.Entertainment.Components.Video.Services.WatchlistOperationState.removing) {
                            button.title = String.load(String.id.IDS_VIDEO2_WISHLIST_REMOVING_TITLE);
                            button.disabled = true
                        }
                        else if (!isMediaItemInWatchlist && (button.disabled !== true || forceReset)) {
                            button.title = String.load(String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_TITLE_VUI_GUI);
                            button.voicePhraseStringId = String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_TITLE_VUI_ALM;
                            button.voicePhoneticPhraseStringId = String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_VUI_PRON;
                            button.voiceConfidenceStringId = String.id.IDS_VIDEO2_WISHLIST_ADD_BUTTON_VUI_CONF;
                            button.disabled = false
                        }
                        else if (isMediaItemInWatchlist && (button.disabled !== true || forceReset)) {
                            button.title = String.load(String.id.IDS_VIDEO2_WISHLIST_REMOVE_BUTTON_TITLE_VUI_GUI);
                            button.voicePhraseStringId = String.id.IDS_VIDEO2_WISHLIST_REMOVE_BUTTON_TITLE_VUI_ALM;
                            button.voicePhoneticPhraseStringId = String.id.IDS_VIDEO2_WISHLIST_REMOVE_BUTTON_VUI_PRON;
                            button.voiceConfidenceStringId = String.id.IDS_VIDEO2_WISHLIST_REMOVE_BUTTON_VUI_CONF;
                            button.disabled = false
                        }
                    }, refresh: function refresh(mediaItem) {
                        var watchlistService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.watchlistService);
                        var zuneId = mediaItem.zuneId;
                        MS.Entertainment.Data.List.getData(mediaItem, 0).then(function getData_complete(media) {
                            var syncStatus = watchlistService.getWatchlistOperationState(media);
                            if (syncStatus !== MS.Entertainment.Components.Video.Services.WatchlistOperationState.none)
                                this.refreshHelper(false, syncStatus, false, this);
                            return watchlistService.isItemInWatchlist(media)
                        }.bind(this)).done(function(isItemInWatchlist) {
                            this.refreshHelper(isItemInWatchlist, MS.Entertainment.Components.Video.Services.WatchlistOperationState.none, true, this)
                        }.bind(this))
                    }
            }), PlayFreeOffer: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function playFreeOffer() {
                this.base()
            }, {
                freeOffer: null, freeOfferId: null, freeOfferCurrencyCode: null, freeOfferPurchaseType: null, freeOfferSignedOffer: null, startPlayback: true, subTitle: null, inPurchaseFlow: false, playbackSource: null, executed: function executed(param) {
                        if (this.inPurchaseFlow)
                            return;
                        this.inPurchaseFlow = true;
                        MS.Entertainment.UI.Actions.assert(this.freeOfferId, "freeOfferId required");
                        MS.Entertainment.UI.Actions.assert(this.freeOfferCurrencyCode, "freeOfferCurrencyCode required");
                        MS.Entertainment.UI.Actions.assert(this.freeOfferSignedOffer, "freeOfferSignedOffer required");
                        var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                        MS.Entertainment.Data.List.getData(listOrMediaItem, 0).done(function launchPurchaseFlow(mediaItem) {
                            if (mediaItem) {
                                if (param && param.hydrateMediaItem)
                                    mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                                var mediaIsTVSeason = MS.Entertainment.Platform.PlaybackHelpers.isTVSeason(mediaItem);
                                var productGuid = mediaIsTVSeason ? mediaItem.edsId || mediaItem.canonicalId : mediaItem.serviceId || mediaItem.zuneId;
                                var correlationId = MS.Entertainment.Utilities.Telemetry.findCorrelationIdForMediaItem(mediaItem);
                                if (!correlationId)
                                    MS.Entertainment.Utilities.Telemetry.setCorrelationId(productGuid);
                                var telemetryParameterArray = [{
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: correlationId || MS.Entertainment.Utilities.Telemetry.getCorrelationId(productGuid)
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: productGuid || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.SignedOfferGuid, parameterValue: this.freeOfferId || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DeliveryFormat, parameterValue: "Streaming"
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.DistributionRight, parameterValue: this.freeOfferPurchaseType || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AutomationId, parameterValue: WinJS.Utilities.getMember("automationId", param) || String.empty
                                        }];
                                MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: WinJS.Utilities.getMember("referenceContainer.domElement.parentElement.parentElement", this)}, {
                                    uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Details
                                }, null, telemetryParameterArray);
                                if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                                    MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem);
                                MS.Entertainment.Platform.PurchaseHelpers.freePurchaseFlow(mediaItem, this.freeOfferId, this.freeOfferCurrencyCode, this.freeOfferPurchaseType, this.startPlayback, this.freeOfferSignedOffer, this.freeOffer, this.playbackSource).then(function freePurchaseFlowDone() {
                                    this.inPurchaseFlow = false
                                }.bind(this))
                            }
                        }.bind(this))
                    }, canExecute: function canExecute(param) {
                        return this.isEnabled
                    }
            }), LaunchInteractiveApp: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function launchInteractiveApp() {
                this.base()
            }, {
                executed: function executed(param) {
                    var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).done(function getUriFromMedia(mediaItem) {
                        MS.Entertainment.Components.Video.InteractiveAppHelper.getInteractiveUrlFromMedia(mediaItem).done(function launchApp(deepLinkUrl) {
                            var uri = new Windows.Foundation.Uri(deepLinkUrl);
                            var options = new Windows.System.LauncherOptions;
                            options.displayApplicationPicker = false;
                            options.treatAsUntrusted = false;
                            Windows.System.Launcher.launchUriAsync(uri, options).done(function launchSuccess() {
                                var correlationId = MS.Entertainment.Utilities.Telemetry.findCorrelationIdForMediaItem(mediaItem);
                                if (!correlationId)
                                    MS.Entertainment.Utilities.Telemetry.setCorrelationId(mediaItem.serviceId);
                                var telemetryParameterArray = [{
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.CorrelationID, parameterValue: correlationId || MS.Entertainment.Utilities.Telemetry.getCorrelationId(mediaItem.serviceId)
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.ProductGuid, parameterValue: mediaItem.zuneId || mediaItem.serviceId || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.MediaType, parameterValue: mediaItem.mediaType || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.AutomationId, parameterValue: MS.Entertainment.UI.AutomationIds.smartButtonLaunchInteractiveApp || String.empty
                                        }, {
                                            parameterName: MS.Entertainment.Utilities.Telemetry.TelemetryParameterNames.InteractiveUri, parameterValue: WinJS.Utilities.getMember("rawUri", uri) || String.empty
                                        }];
                                MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: WinJS.Utilities.getMember("referenceContainer.domElement.parentElement.parentElement", this)}, {
                                    uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.WebPage
                                }, null, telemetryParameterArray)
                            }.bind(this), function launchFailure(){})
                        }.bind(this))
                    }.bind(this))
                }, canExecute: function canExecute(param) {
                        return this.isEnabled
                    }
            }), WatchOnXbox: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function watchOnXbox() {
                this.base()
            }, {
                executed: function executed(param) {
                    var listOrMediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    MS.Entertainment.Data.List.getData(listOrMediaItem, 0).then(function watchOnXbox(mediaItem) {
                        if (param && param.hydrateMediaItem)
                            mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                        if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                            MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem);
                        MS.Entertainment.Platform.PlaybackHelpers.playToXboxPauseLocalPlayback(mediaItem)
                    }.bind(this))
                }, canExecute: function canExecute(param) {
                        return MS.Entertainment.Platform.PlaybackHelpers.isPlayToXboxFeatureEnabled()
                    }
            }), PlayOnXbox: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function playOnXbox() {
                this.base()
            }, {
                executed: function executed(param) {
                    var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    if (param && param.hydrateMediaItem)
                        mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                    if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                        MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem);
                    MS.Entertainment.Platform.PlaybackHelpers.playToXboxPauseLocalPlayback(mediaItem, null)
                }, canExecute: function canExecute(param) {
                        return MS.Entertainment.Platform.PlaybackHelpers.isPlayToXboxFeatureEnabled()
                    }
            }), SwitchVideoDefinition: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function switchVideoDefinition() {
                this.base()
            }, {
                purchaseOptions: null, enabled: true, executed: function executed(param) {
                        if (this.enabled) {
                            this.purchaseOptions.toggleVideoDefinition();
                            if (this.isVoiceEnabled)
                                WinJS.Promise.timeout().done(function delay() {
                                    XboxJS.UI.Voice.refreshVoiceElements()
                                })
                        }
                    }, canExecute: function canExecute(param) {
                        return true
                    }, updateTitleForMediaResolution: function updateTitleForMediaResolution() {
                        var videoDefinition = MS.Entertainment.Data.Augmenter.Marketplace.videoDefinition;
                        var useSdStrings = (this.purchaseOptions.selectedDefinition === videoDefinition.hd);
                        if (this.isVoiceEnabled) {
                            this.title = useSdStrings ? String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_GUI) : String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_HD_BUTTON_VUI_GUI);
                            this.voicePhrase = useSdStrings ? String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_ALM) : String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_HD_BUTTON_VUI_ALM);
                            this.voicePhoneticPhrase = useSdStrings ? String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_PRON) : String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_HD_BUTTON_VUI_PRON);
                            this.voiceConfidence = useSdStrings ? String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_SD_BUTTON_VUI_CONF) : String.load(String.id.IDS_VIDEO2_L3_SWITCH_TO_HD_BUTTON_VUI_CONF)
                        }
                        else
                            this.title = useSdStrings ? String.load(String.id.IDS_VIDEO_PRICE_SWITCH_SD) : String.load(String.id.IDS_VIDEO_PRICE_SWITCH_HD)
                    }
            }), SwitchLanguage: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function switchLanguage() {
                this.base()
            }, {
                purchaseOptions: null, subTitle: null, executed: function executed(param) {
                        this.purchaseOptions.toggleVideoLanguage();
                        this.updateTitleForLanguageAndCount()
                    }, canExecute: function canExecute(param) {
                        return true
                    }, updateTitleForLanguageAndCount: function updateTitleForLanguageAndCount() {
                        var languageCode = this.purchaseOptions.selectedLanguageCode;
                        var count = this.purchaseOptions.languageCodes.length;
                        if (this.isVoiceEnabled) {
                            this.title = String.load(String.id.IDS_VIDEO2_L3_SWITCH_LANGUAGE_BUTTON_VUI_GUI);
                            this.voicePhrase = String.load(String.id.IDS_VIDEO2_L3_SWITCH_LANGUAGE_BUTTON_VUI_ALM);
                            this.voicePhoneticPhrase = String.load(String.id.IDS_VIDEO2_L3_SWITCH_LANGUAGE_BUTTON_VUI_PRON);
                            this.voiceConfidence = String.load(String.id.IDS_VIDEO2_L3_SWITCH_LANGUAGE_BUTTON_VUI_CONF)
                        }
                        var subTitleText;
                        if (languageCode.toUpperCase() === MS.Entertainment.Utilities.VARIOUS_LANGUAGES_CODE.toUpperCase()) {
                            var displayLanguage = String.load(String.id.IDS_VIDEO_BUNDLES_AUDIO_LANGUAGE_METADATA);
                            subTitleText = String.load(String.id.IDS_VIDEO_BUNDLES_AUDIO_LANGUAGE_BUTTON).format(count)
                        }
                        else {
                            var displayLanguage = MS.Entertainment.Utilities.getDisplayLanguageFromLanguageCode(languageCode);
                            subTitleText = String.load(String.id.IDS_VIDEO_PURCHASE_OPTIONS_CURRENT_LANGUAGE).format(displayLanguage, count)
                        }
                        this.subTitle = subTitleText
                    }
            }), DownloadAgain: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.DownloadActionBase", function downloadAgain() {
                this.base()
            }, {executed: function executed(param) {
                    var mediaItemPromise = this._extractMediaItem(param);
                    mediaItemPromise.done(function getMediaItem(mediaItem) {
                        if (param && param.hydrateMediaItem)
                            mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                        MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(mediaItem).done(function getMarketplaceNativeFileDownloadsAsync_complete(result) {
                            for (var i = 0; i < result.length; i++) {
                                var task = result[i];
                                switch (task.taskStatus) {
                                    case Microsoft.Entertainment.FileTransferStatus.notStarted:
                                    case Microsoft.Entertainment.FileTransferStatus.error:
                                    case Microsoft.Entertainment.FileTransferStatus.canceled:
                                        if (task.canRetry)
                                            try {
                                                task.restart()
                                            }
                                            catch(exception) {}
                                        else
                                            task.closeAsync().done(function closeAsync_complete(task){}, function closeAsync_error(error){});
                                        break
                                }
                            }
                        })
                    })
                }}), DownloadPause: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.DownloadActionBase", function downloadPause() {
                this.base()
            }, {executed: function executed(param) {
                    var mediaItemPromise = this._extractMediaItem(param);
                    mediaItemPromise.done(function getMediaItem(mediaItem) {
                        MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(mediaItem).done(function getMarketplaceNativeFileDownloadsAsync_complete(result) {
                            for (var i = 0; i < result.length; i++) {
                                var task = result[i];
                                switch (task.taskStatus) {
                                    case Microsoft.Entertainment.FileTransferStatus.pending:
                                    case Microsoft.Entertainment.FileTransferStatus.notStarted:
                                    case Microsoft.Entertainment.FileTransferStatus.running:
                                        task.pause();
                                        break
                                }
                            }
                        })
                    })
                }}), DownloadResume: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.DownloadActionBase", function downloadResume() {
                this.base()
            }, {executed: function executed(param) {
                    var mediaItemPromise = this._extractMediaItem(param);
                    mediaItemPromise.done(function getMediaItem(mediaItem) {
                        MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(mediaItem).done(function getMarketplaceNativeFileDownloadsAsync_complete(result) {
                            for (var i = 0; i < result.length; i++) {
                                var task = result[i];
                                switch (task.taskStatus) {
                                    case Microsoft.Entertainment.FileTransferStatus.paused:
                                        task.resume();
                                        break
                                }
                            }
                        })
                    })
                }}), DownloadCancel: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.DownloadActionBase", function downloadCancel() {
                this.base()
            }, {executed: function executed(param) {
                    var mediaItemPromise = this._extractMediaItem(param);
                    mediaItemPromise.done(function getMediaItem(mediaItem) {
                        MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(mediaItem).done(function getMarketplaceNativeFileDownloadsAsync_complete(result) {
                            for (var i = 0; i < result.length; i++) {
                                var task = result[i];
                                switch (task.taskStatus) {
                                    case Microsoft.Entertainment.FileTransferStatus.canceled:
                                    case Microsoft.Entertainment.FileTransferStatus.completed:
                                        break;
                                    default:
                                        task.cancel();
                                        break
                                }
                            }
                        })
                    })
                }}), DownloadRemove: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function downloadRemove() {
                this.base()
            }, {
                executed: function executed(param) {
                    var mediaItemPromise = this._extractMediaItem(param);
                    mediaItemPromise.done(function getMediaItem(mediaItem) {
                        if (param && param.hydrateMediaItem)
                            mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                        MS.Entertainment.Framework.DownloadInfo.getMarketplaceNativeFileDownloadsAsync(mediaItem).done(function getMarketplaceNativeFileDownloadsAsync_complete(result) {
                            for (var i = 0; i < result.length; i++) {
                                var task = result[i];
                                switch (task.taskStatus) {
                                    case Microsoft.Entertainment.FileTransferStatus.notStarted:
                                    case Microsoft.Entertainment.FileTransferStatus.error:
                                    case Microsoft.Entertainment.FileTransferStatus.canceled:
                                        task.closeAsync().done(function closeAsync_complete(task){}, function closeAsync_error(error){});
                                        break
                                }
                            }
                        })
                    })
                }, canExecute: function canExecute(param) {
                        return true
                    }, _extractMediaItem: function _extractMediaItem(param) {
                        var mediaItem;
                        if ("mediaItem" in param)
                            mediaItem = param.mediaItem;
                        else
                            mediaItem = param;
                        if (MS.Entertainment.Data.List.isList(mediaItem))
                            return MS.Entertainment.Data.List.listToArray(mediaItem).then(function gotArray(mediaItemsArray) {
                                    MS.Entertainment.UI.Actions.assert(mediaItemsArray.length === 1, "DownloadRemove Action only accepts one mediaItem");
                                    mediaItem = mediaItemsArray[0];
                                    return WinJS.Promise.wrap(mediaItem)
                                });
                        return WinJS.Promise.wrap(mediaItem)
                    }
            }), DownloadDemo: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function downloadDemo() {
                this.base()
            }, {
                executed: function executed(param) {
                    var mediaItem = MS.Entertainment.UI.Actions.extractMediaItemFromParam(param);
                    if (param && param.hydrateMediaItem)
                        mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(mediaItem);
                    if (mediaItem.gameDemo) {
                        var gameMediaItem = {
                                serviceId: mediaItem.gameDemo.id, mediaType: Microsoft.Entertainment.Queries.ObjectType.game
                            };
                        MS.Entertainment.Platform.PurchaseHelpers.launchPurchaseFlow(gameMediaItem)
                    }
                    if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                        MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem)
                }, canExecute: function canExecute(param) {
                        return true
                    }
            }), ActionPassThrough: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function invokeButton() {
                this.base()
            }, {
                executed: function executed(param){}, canExecute: function canExecute(param) {
                        return true
                    }
            })
    });
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.purchase, function() {
            return new MS.Entertainment.UI.Actions.Purchase
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.pinToStartScreen))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.pinToStartScreen, function() {
            return new MS.Entertainment.UI.Actions.PinToStartScreen
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.unpinFromStartScreen))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.unpinFromStartScreen, function() {
            return new MS.Entertainment.UI.Actions.UnpinFromStartScreen
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.addRemoveItemWatchlist))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.addRemoveItemWatchlist, function() {
            return new MS.Entertainment.UI.Actions.AddRemoveItemWatchlist
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.playFreeOffer))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.playFreeOffer, function() {
            return new MS.Entertainment.UI.Actions.PlayFreeOffer
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.launchInteractiveApp))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.launchInteractiveApp, function() {
            return new MS.Entertainment.UI.Actions.LaunchInteractiveApp
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.watchOnXbox))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.watchOnXbox, function() {
            return new MS.Entertainment.UI.Actions.WatchOnXbox
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.playOnXbox))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.playOnXbox, function() {
            return new MS.Entertainment.UI.Actions.PlayOnXbox
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.switchVideoDefinition))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.switchVideoDefinition, function() {
            return new MS.Entertainment.UI.Actions.SwitchVideoDefinition
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.switchLanguage))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.switchLanguage, function() {
            return new MS.Entertainment.UI.Actions.SwitchLanguage
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadAgain))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadAgain, function() {
            return new MS.Entertainment.UI.Actions.DownloadAgain
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadCancel))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadCancel, function() {
            return new MS.Entertainment.UI.Actions.DownloadCancel
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadPause))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadPause, function() {
            return new MS.Entertainment.UI.Actions.DownloadPause
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadResume))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadResume, function() {
            return new MS.Entertainment.UI.Actions.DownloadResume
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadRemove))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadRemove, function() {
            return new MS.Entertainment.UI.Actions.DownloadRemove
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadDemo))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.downloadDemo, function() {
            return new MS.Entertainment.UI.Actions.DownloadDemo
        });
    if (!actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.actionPassThrough))
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.actionPassThrough, function() {
            return new MS.Entertainment.UI.Actions.ActionPassThrough
        });
    WinJS.Namespace.define("MS.Entertainment.Pages", {ActionButtonsControl: MS.Entertainment.UI.Framework.defineUserControl("/Components/InlineDetails/ActionButtonsControl.html#actionButtonsControlTemplate", null, {
            replaceInline: false, defaultButtonClass: null, tabIndex: 0, limitFocusMovement: false, _buttonsChangedHandler: null, focusFirstItemOnPageLoad: false, _setDefaultFocusHandler: null, buttons: MS.Entertainment.UI.Framework.observableProperty("buttons", null), currentButtons: MS.Entertainment.UI.Framework.observableProperty("currentButtons", null), orientation: MS.Entertainment.UI.Framework.observableProperty("orientation", "vertical", true), initialize: function initialize() {
                    MS.Entertainment.UI.Actions.assert(this._actionButtons, "this._actionButtons is not valid");
                    MS.Entertainment.UI.Actions.assert(this._actionButtons.domElement, "this._actionButtons.domElement is not valid");
                    this._actionButtons.defaultButtonClass = this.defaultButtonClass;
                    this._actionButtons.tabIndex = this.tabIndex;
                    this.currentButtons = new MS.Entertainment.ObservableArray;
                    this._buttonsChangedHandler = MS.Entertainment.Utilities.addEventHandlers(this, {buttonsChanged: this._buttonsChanged.bind(this)});
                    if (this.focusFirstItemOnPageLoad)
                        this._setDefaultFocusHandler = MS.Entertainment.Utilities.addEventHandlers(this._actionButtons.domElement, {ActionsReady: function setDefaultFocus() {
                                MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(this._actionButtons.domElement, 0)
                            }.bind(this)});
                    this._buttonsChanged({detail: {newValue: this.buttons}});
                    if (this.orientation === "horizontal") {
                        WinJS.Utilities.addClass(this._actionButtons.domElement, "state-orientationHorizontal");
                        WinJS.Utilities.removeClass(this._actionButtons.domElement, "state-orientationVertical")
                    }
                    else {
                        WinJS.Utilities.removeClass(this._actionButtons.domElement, "state-orientationHorizontal");
                        WinJS.Utilities.addClass(this._actionButtons.domElement, "state-orientationVertical")
                    }
                }, unload: function unload() {
                    if (this._buttonsChangedHandler) {
                        this._buttonsChangedHandler.cancel();
                        this._buttonsChangedHandler = null
                    }
                    if (this._setDefaultFocusHandler) {
                        this._setDefaultFocusHandler.cancel();
                        this._setDefaultFocusHandler = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, _setFocusOverrides: function setFocusOverrides(actionButtons) {
                    var actionButtonControls = Array.prototype.map.call(actionButtons, function getWinControl(actionElement) {
                            return actionElement && actionElement.children.length > 0 && actionElement.children[0].winControl
                        });
                    actionButtonControls = actionButtonControls.filter(function filterFalsyElements(actionButtonControl) {
                        return !!actionButtonControl
                    });
                    var noOp = ".currentPage :focus";
                    for (var i = 1; i < actionButtonControls.length - 1; i++)
                        actionButtonControls[i].focusDirections = null;
                    if (actionButtonControls.length === 1)
                        actionButtonControls[0].focusDirections = {
                            down: noOp, up: noOp
                        };
                    else {
                        actionButtonControls[0].focusDirections = {up: noOp};
                        actionButtonControls[actionButtonControls.length - 1].focusDirections = {down: noOp}
                    }
                }, _buttonsChanged: function buttonInfoChanged(e) {
                    var newButtons = e && e.detail && e.detail.newValue;
                    if (!newButtons)
                        return;
                    WinJS.Utilities.removeClass(this._actionButtons.domElement, "hideFromDisplay");
                    if (!this.replaceInline)
                        this.currentButtons = newButtons;
                    else {
                        var i;
                        var enabledActions = {};
                        newButtons.forEach(function addId(action) {
                            MS.Entertainment.UI.assert(action.id, "Missing action Id");
                            enabledActions[action.id] = true
                        });
                        for (i = (this.currentButtons.length - 1); i >= 0; i--) {
                            var action = this.currentButtons.item(i);
                            if (!enabledActions[action.id])
                                this.currentButtons.removeAt(i)
                        }
                        var action;
                        var currentIndex = 0;
                        var actionLength = newButtons.length;
                        for (i = 0; i < actionLength; i++) {
                            action = newButtons[i];
                            if (this.currentButtons.length <= currentIndex)
                                this.currentButtons.push(action);
                            else if (this.currentButtons.item(currentIndex).id !== action.id)
                                this.currentButtons.insert(currentIndex, action);
                            currentIndex++
                        }
                        WinJS.Promise.timeout().then(function raiseReadyEvent() {
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("ActionsReady", true, true);
                            this._actionButtons.domElement.dispatchEvent(domEvent);
                            if (this.limitFocusMovement && this._actionButtons.domElement.children.length > 0)
                                this._setFocusOverrides(this._actionButtons.domElement.children)
                        }.bind(this))
                    }
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Pages", {ActionButtonsListControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.ItemsControl", null, function actionButtonsListControl(){}, {
            listViewModel: null, defaultButtonClass: null, tabIndex: 0, controlName: "ActionButtonsControl", initialize: function initialize() {
                    if (!this.itemTemplate)
                        this.itemTemplate = "/Components/InlineDetails/ActionButtonsControl.html#actionButtonTemplate";
                    MS.Entertainment.UI.Controls.ItemsControl.prototype.initialize.apply(this, arguments)
                }, processItemData: function processItemData(itemData, index) {
                    itemData.execute = MS.Entertainment.Utilities.bindAndMarkSupportedForProcessing(itemData.execute, itemData);
                    if (!itemData.className) {
                        var className = this.defaultButtonClass;
                        if (itemData.extendedClassNames)
                            className += " " + itemData.extendedClassNames;
                        itemData.addProperty("className", className);
                        itemData.tabIndex = this.tabIndex
                    }
                    if (this.listViewModel)
                        return new MS.Entertainment.UI.Controls.ItemsControlViewModel(itemData, this.listViewModel, index);
                    else
                        return itemData
                }, itemsRendered: function itemsRendered() {
                    WinJS.Promise.timeout().done(function raiseReadyEvent() {
                        if (this.domElement) {
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("ActionsReady", true, true);
                            this.domElement.dispatchEvent(domEvent)
                        }
                    }.bind(this))
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.Pages", {SmartBuyButtonsListControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.Pages.ActionButtonsListControl", null, null, {
            _eventProxyHandler: null, _eventProxy: null, controlName: "ActionButtonsControl", eventProxy: {
                    get: function() {
                        return this._eventProxy
                    }, set: function(value) {
                            if (value !== this._eventProxy) {
                                this._eventProxy = value;
                                this._cancelEventHandlers();
                                if (this._eventProxy)
                                    this._eventProxyHandler = MS.Entertainment.Utilities.addEventHandlers(this._eventProxy, {currentButtonsChanged: this._setDataSourceFromEvent.bind(this)})
                            }
                        }
                }, unload: function unload() {
                    MS.Entertainment.Pages.ActionButtonsListControl.prototype.unload.apply(this, arguments);
                    this._cancelEventHandlers()
                }, _cancelEventHandlers: function _cancelEventHandlers() {
                    if (this._eventProxyHandler) {
                        this._eventProxyHandler.cancel();
                        this._eventProxyHandler = null
                    }
                }, _setDataSourceFromEvent: function _setDataSourceFromEvent(args) {
                    if (!this._unloaded)
                        this.dataSource = args.detail.value
                }
        })})
})()
})();
/* >>>>>>/controls/gallerygrouper.js:7971 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function(undefined) {
    "use strict";

    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {GalleryGrouper: MS.Entertainment.UI.Framework.define(function galleryGrouperConstructor(){}, {
            getKeySource: function getKeySource(item) {
                var key;
                if (item.data && item.data.groupKey)
                    key = item.data.groupKey;
                else if (item.data && item.data.inlinePanel)
                    key = MS.Entertainment.Utilities.valueFromPropertyPathFragments(item.data.dataItem.data, this.keyPropertyFragments);
                else if (item.data && item.data.isAction)
                    if (typeof item.data.groupHeader === "string")
                        if (String.id[item.data.groupHeader])
                            key = String.load(item.data.groupHeader);
                        else
                            key = item.data.groupHeader;
                    else
                        MS.Entertainment.UI.Controls.fail("an action in a grouped view must specify a groupHeader");
                else if (item.data)
                    key = MS.Entertainment.Utilities.valueFromPropertyPathFragments(item.data, this.keyPropertyFragments);
                else
                    key = String.empty;
                return key
            }, createKey: function createKey(item) {
                    var key = this.getKeySource(item);
                    if (key)
                        key += String.empty;
                    key = MS.Entertainment.Utilities.trimCharacterDirection(key);
                    return key + String.empty
                }, createParentKey: function createParentKey(item, groupData) {
                    return MS.Entertainment.Utilities.trimCharacterDirection(groupData && groupData.key)
                }, createData: function createData(item) {
                    var title = null;
                    var sortTitle = null;
                    var result = item && item.data;
                    var titlePropertyFragments = this.titlePropertyFragments;
                    var sortTitlePropertyFragments = this.sortTitlePropertyFragments;
                    if (titlePropertyFragments && titlePropertyFragments.length) {
                        title = MS.Entertainment.Utilities.valueFromPropertyPathFragments(item && item.data, this.titlePropertyFragments);
                        if (sortTitlePropertyFragments && sortTitlePropertyFragments.length)
                            sortTitle = MS.Entertainment.Utilities.valueFromPropertyPathFragments(item && item.data, this.sortTitlePropertyFragments);
                        result = {
                            title: title, sortTitle: sortTitle || title
                        }
                    }
                    return result
                }, _keyPropertyName: null, _keyPropertyFragments: null, _titlePropertyName: null, _titlePropertyFragments: null, _sortTitlePropertyName: null, _sortTitlePropertyFragments: null, useKeyAsData: true, keyPropertyName: {
                    get: function() {
                        return this._keyPropertyName
                    }, set: function(value) {
                            if (value !== this._keyPropertyName) {
                                this._keyPropertyFragments = null;
                                this._keyPropertyName = value
                            }
                        }
                }, keyPropertyFragments: {get: function() {
                        this._keyPropertyFragments = this._keyPropertyFragments || MS.Entertainment.Utilities.getPropertyPathFragments(this._keyPropertyName);
                        return this._keyPropertyFragments
                    }}, titlePropertyName: {
                    get: function() {
                        return this._titlePropertyName
                    }, set: function(value) {
                            if (value !== this._titlePropertyName) {
                                this._titlePropertyFragments = null;
                                this._titlePropertyName = value
                            }
                        }
                }, sortTitlePropertyName: {
                    get: function() {
                        return this._sortTitlePropertyName
                    }, set: function(value) {
                            if (value !== this._sortTitlePropertyName) {
                                this._sortTitlePropertyFragments = null;
                                this._sortTitlePropertyName = value
                            }
                        }
                }, titlePropertyFragments: {get: function() {
                        this._titlePropertyFragments = this._titlePropertyFragments || MS.Entertainment.Utilities.getPropertyPathFragments(this._titlePropertyName);
                        return this._titlePropertyFragments
                    }}, sortTitlePropertyFragments: {get: function() {
                        this._sortTitlePropertyFragments = this._sortTitlePropertyFragments || MS.Entertainment.Utilities.getPropertyPathFragments(this._sortTitlePropertyName);
                        return this._sortTitlePropertyFragments
                    }}, execute: function execute(item) {
                    var key = this.createKey(item);
                    var data = (this.useKeyAsData) ? {title: key} : this.createData(item);
                    key = MS.Entertainment.Utilities.trimCharacterDirection(key);
                    var groupData = {
                            key: key, data: data, parentData: data
                        };
                    groupData.parentKey = this.createParentKey(item, groupData);
                    if (groupData.parentKey !== groupData.key)
                        groupData.parentData = {title: groupData.parentKey};
                    return groupData
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        GalleryAlphaWordGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryAlphaWordGrouperConstructor(){}, {
            isSubGroup: false, _parentGrouper: null, createKey: function createKey(item) {
                    var key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item) + String.empty;
                    if (!key || key === "null")
                        key = String.load(String.id.IDS_UNKNOWN_VALUE);
                    return key
                }, createParentKey: function createParentKey(item, groupData) {
                    var key = null;
                    if (this.isSubGroup) {
                        if (!this._parentGrouper) {
                            this._parentGrouper = new MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper;
                            this._parentGrouper.keyPropertyName = this.keyPropertyName
                        }
                        key = this._parentGrouper.createKey(item)
                    }
                    else
                        key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createParentKey(item, groupData);
                    return key + String.empty
                }
        }), GalleryMediaItemGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryAlphaWordGrouperConstructor(){}, {
                isSubGroup: false, parentKeyPropertyName: "sortTitle", _parentGrouper: null, createKey: function createKey(item) {
                        var key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item) + String.empty;
                        if (!key || key === "null")
                            key = String.load(String.id.IDS_UNKNOWN_VALUE);
                        return key
                    }, createParentKey: function createParentKey(item, groupData) {
                        var key = null;
                        if (this.isSubGroup) {
                            if (!this._parentGrouper)
                                this._parentGrouper = new MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper;
                            this._parentGrouper.keyPropertyName = this.parentKeyPropertyName;
                            key = this._parentGrouper.createKey(groupData)
                        }
                        else
                            key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createParentKey(item, groupData);
                        return key + String.empty
                    }
            }), GalleryAlphaCharGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryAlphaCharGrouperConstructor() {
                try {
                    this._characterGroupings = new Windows.Globalization.Collation.CharacterGroupings
                }
                catch(error) {}
            }, {
                _characterGroupings: null, createKey: function createKey(item) {
                        var index = 0;
                        var key = String.empty;
                        var originalKey = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item) + String.empty;
                        if (item.isAction)
                            return originalKey;
                        if (this._characterGroupings)
                            key = this._characterGroupings.lookup(originalKey || String.empty) + String.empty;
                        if (key === "Numbers")
                            key = String.load(String.id.IDS_NUMBER_SYMBOL);
                        else if (key === "Symbols")
                            key = String.load(String.id.IDS_WILD_CARD_SYMBOL);
                        return key
                    }
            }), GalleryNumericGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryNumericGrouperConstructor(){}, {}), GalleryTitleParentGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryYearGrouperConstructor(){}, {
                useKeyAsData: false, noHeaderGroups: true, createKey: function createKey(item) {
                        return null
                    }, createParentKey: function createParentKey(item, groupData) {
                        var title = groupData && groupData.data && groupData.data.title;
                        if (title !== null && title !== undefined)
                            title += String.empty;
                        title = MS.Entertainment.Utilities.trimCharacterDirection(title);
                        return title
                    }
            }), GalleryYearGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryYearGrouperConstructor(){}, {createKey: function createKey(item) {
                    var key = this.getKeySource(item);
                    if (!key || key === "null")
                        return String.load(String.id.IDS_UNKNOWN_VALUE);
                    if (item.isAction)
                        return key;
                    var date = MS.Entertainment.Data.Factory.localizedYear(key);
                    return (date || key) + String.empty
                }}), GalleryMonthGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryMonthGrouperConstructor(){}, {createKey: function createKey(item) {
                    var key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item) + String.empty;
                    if (!key || key === "null")
                        return String.load(String.id.IDS_UNKNOWN_VALUE);
                    if (item.isAction)
                        return key;
                    var date = new Date(key);
                    var formattedMonth = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).abbreviatedMonthYear;
                    if (!MS.Entertainment.UI.Controls.GalleryMonthGrouper.minCalendar) {
                        MS.Entertainment.UI.Controls.GalleryMonthGrouper.minCalendar = new Windows.Globalization.Calendar(formattedMonth.languages);
                        MS.Entertainment.UI.Controls.GalleryMonthGrouper.minCalendar.setToMin()
                    }
                    if (!MS.Entertainment.UI.Controls.GalleryMonthGrouper.enCalendar)
                        MS.Entertainment.UI.Controls.GalleryMonthGrouper.enCalendar = new Windows.Globalization.Calendar(["en-US"]);
                    MS.Entertainment.UI.Controls.GalleryMonthGrouper.enCalendar.setDateTime(date);
                    if (MS.Entertainment.UI.Controls.GalleryMonthGrouper.enCalendar.compare(MS.Entertainment.UI.Controls.GalleryMonthGrouper.minCalendar) < 0)
                        date = MS.Entertainment.UI.Controls.GalleryMonthGrouper.minCalendar.getDateTime();
                    var month = formattedMonth.format(date);
                    return month + String.empty
                }}, {enCalendar: null}), GalleryDayGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryDayGrouperConstructor(){}, {createKey: function createKey(item) {
                    var key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item) + String.empty;
                    if (!key)
                        return String.load(String.id.IDS_UNKNOWN_VALUE);
                    if (item.isAction)
                        return key;
                    var date = new Date(key).toDateString();
                    return date + String.empty
                }}), GalleryRecentGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryGrouper", function galleryRecentGrouperConstructor(){}, {createKey: function createKey(item) {
                    var key = MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item);
                    if (!key)
                        return String.load(String.id.IDS_UNKNOWN_VALUE);
                    if (item.isAction)
                        return key + String.empty;
                    var date = new Date(key);
                    var today = new Date;
                    var diff = Date.subtract(today, date);
                    var group;
                    if (diff.days <= 7)
                        group = String.load(String.id.IDS_RECENT_THIS_WEEK);
                    else if (diff.days <= 14)
                        group = String.load(String.id.IDS_RECENT_LAST_WEEK);
                    else if (date.getYear() === today.getYear() && date.getMonth() === today.getMonth())
                        group = String.load(String.id.IDS_RECENT_THIS_MONTH);
                    else {
                        var superShortMonthPattern = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).abbreviatedMonth;
                        var shortMonth = superShortMonthPattern.format(date);
                        group = shortMonth + " " + date.getFullYear()
                    }
                    return group + String.empty
                }}), SearchResultsGrouper: MS.Entertainment.UI.Framework.derive(MS.Entertainment.UI.Controls.GalleryGrouper, function searchResultsGrouperConstructor(){}, {createKey: function createKey(item) {
                    if (item.data && item.data.isHCR)
                        return "-1";
                    else
                        return MS.Entertainment.UI.Controls.GalleryGrouper.prototype.createKey.call(this, item)
                }})
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        GalleryAlphaWordSubGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryAlphaWordGrouper", function GalleryAlphaWordSubGrouper(){}, {isSubGroup: true}), GalleryMediaItemSubGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryMediaItemGrouper", function GalleryMediaItemSubGrouper(){}, {isSubGroup: true}), VideoSearchResultsGrouper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.SearchResultsGrouper", function videoSearchResultsGrouperConstructor(){}, {createKey: function createKey(item) {
                    if (item.data && item.data.isHCR)
                        return "-1";
                    if (item.data.inCollection)
                        if (item.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                            MS.Entertainment.UI.Controls.assert(item.data.videoType === Microsoft.Entertainment.Queries.VideoType.movie || item.data.videoType === Microsoft.Entertainment.Queries.VideoType.other || item.data.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo, "Invalid video type passed to VideoSearchResultsGrouper");
                            return (item.data.videoType === Microsoft.Entertainment.Queries.VideoType.movie) ? "collectionMovie" : "otherVideo"
                        }
                        else {
                            MS.Entertainment.UI.Controls.assert(item.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeries, "Invalid media type passed to VideoSearchResultsGrouper");
                            return "collectionTVSeries"
                        }
                    else if (item.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video) {
                        MS.Entertainment.UI.Controls.assert(item.data.videoType === Microsoft.Entertainment.Queries.VideoType.movie, "Invalid video type passed to VideoSearchResultsGrouper");
                        return "marketplaceMovie"
                    }
                    else {
                        MS.Entertainment.UI.Controls.assert(item.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeries, "Invalid media type passed to VideoSearchResultsGrouper");
                        return "marketplaceTVSeries"
                    }
                    return MS.Entertainment.UI.Controls.SearchResultsGrouper.prototype.createKey.call(this, item)
                }})
    })
}())
})();
/* >>>>>>/controls/gallerycontrol.js:8227 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
    var _defaultGrouperItemThreshold = 80;
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {TemplateSelectorBase: MS.Entertainment.UI.Framework.define(function templateSelectorBase() {
            this._templates = {}
        }, {
            _templates: null, addTemplate: function addTemplate(type, template) {
                    if (!type)
                        throw new Error("Invalid template type given to addTemplate()");
                    var oldTemplate = this._templates[type];
                    if (oldTemplate && oldTemplate.promise && oldTemplate.innerTemplate !== template) {
                        oldTemplate.promise.cancel();
                        oldTemplate.promise = null;
                        oldTemplate.provider = null;
                        this._templates[type] = null
                    }
                    if (template && (!oldTemplate || oldTemplate.innerTemplate !== template))
                        this._templates[type] = {
                            innerTemplate: template, promise: null
                        }
                }, getTemplate: function getTemplate(type) {
                    if (!type)
                        throw new Error("Invalid template type given to getTemplate()");
                    var innerTemplate;
                    var template = this._templates[type];
                    if (template)
                        innerTemplate = template.innerTemplate;
                    return innerTemplate
                }, getTemplateProvider: function getTemplateProvider(type) {
                    if (!type)
                        throw new Error("Invalid template type given to getTemplateProvider()");
                    return this._getTemplateProvider(this._templates[type])
                }, _getTemplateProvider: function _getTemplateProvider(template) {
                    MS.Entertainment.UI.Controls.assert(template && template.innerTemplate, "Template for the given type appears to be invalid");
                    var promise;
                    if (template.provider)
                        promise = WinJS.Promise.as(template.provider);
                    else if (!template.promise)
                        if (String.isString(template.innerTemplate))
                            promise = template.promise = MS.Entertainment.UI.Framework.loadTemplate(template.innerTemplate, null, true).then(function(provider) {
                                template.provider = provider;
                                return provider
                            });
                        else
                            promise = WinJS.Promise.as(template.innerTemplate.winControl);
                    else if (template.promise)
                        promise = template.promise;
                    else
                        promise = WinJS.Promise.as();
                    return promise
                }, selectTemplate: function selectTemplate(item, templateTypeHint) {
                    return this.onSelectTemplate(item, templateTypeHint)
                }, onSelectTemplate: function onSelectTemplate(item, templateTypeHint) {
                    templateTypeHint = templateTypeHint || MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item;
                    return this.getTemplateProvider(templateTypeHint)
                }, ensureTemplatesLoaded: function ensureTemplatesLoaded(templates) {
                    var promises = [];
                    var item;
                    if (templates)
                        templates.forEach(function(item) {
                            var template = this._templates[item];
                            var promise;
                            if (template)
                                promise = this._getTemplateProvider(template);
                            if (promise)
                                promises.push(promise)
                        }, this);
                    return WinJS.Promise.join(promises)
                }
        }, {templateType: {
                action: "action", emptyGallery: "emptyGallery", item: "item", header: "header", panel: "panel", snappedItem: "snappedItem", unsnappedItem: "unsnappedItem", userGatedGallery: "userGatedGallery", syncScreen: "syncScreen", zoomedOut: "zoomedOut"
            }})});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        TemplateType: MS.Entertainment.UI.Framework.lazyDefine(function() {
            return {
                    action: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.action, emptyGallery: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.emptyGallery, item: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item, header: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header, panel: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.panel, snappedItem: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.snappedItem, unsnappedItem: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.unsnappedItem, userGatedGallery: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.userGatedGallery, syncScreen: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.syncScreen, zoomedOut: MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.zoomedOut
                }
        }), GalleryTemplateSelector: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.TemplateSelectorBase", function galleryTemplateSelector() {
                MS.Entertainment.UI.Controls.TemplateSelectorBase.prototype.constructor.call(this)
            }, {
                ensureItemTemplatesLoaded: function ensureItemTemplatesLoaded() {
                    return this.ensureTemplatesLoaded([MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item, MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header, ])
                }, onSelectTemplate: function onSelectTemplate(item) {
                        if (item.isHeader)
                            return this.getTemplateProvider(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header);
                        else if (item.isAction)
                            return this.getTemplateProvider(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.action);
                        else
                            return MS.Entertainment.UI.Controls.TemplateSelectorBase.prototype.onSelectTemplate.apply(this, arguments)
                    }, getPanelTemplatePath: function getPanelTemplatePath(item) {
                        MS.Entertainment.UI.Controls.assert(this._templates[MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.panel], "template not defined");
                        var panelPath;
                        var panelTemplate = this._templates[MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.panel];
                        if (panelTemplate && typeof panelTemplate.innerTemplate === "string")
                            panelPath = panelTemplate.innerTemplate;
                        return panelPath
                    }
            }), GalleryListDataNotificationHandler: MS.Entertainment.UI.Framework.define(function galleryListDataNotificationHandler(updateCallback) {
                this._updateCallback = updateCallback
            }, {
                countThreshold: NaN, _updateCallback: null, _updating: false, _pendingChanges: null, _pendingCountChange: null, _panelSelected: false, _minimumListLength: 1, minimumListLength: {
                        get: function get_minimumListLength() {
                            return this._minimumListLength
                        }, set: function set_minimumListLength(value) {
                                if (this._minimumListLength !== value) {
                                    this._minimumListLength = value;
                                    this.countChanged()
                                }
                            }
                    }, _pushChange: function _pushChange(change) {
                        this._pendingChanges = this._pendingChanges || [];
                        if (this._pendingChanges.indexOf(change) < 0)
                            this._pendingChanges.push(change)
                    }, _updateGallery: function _updateGallery() {
                        if (!this._updating && this._pendingChanges && this._pendingChanges.length) {
                            var changes = this._pendingChanges;
                            this._pendingChanges = null;
                            this._pendingCountChange = null;
                            this._updateCallback(changes)
                        }
                    }, dispose: function dispose() {
                        this._updateCallback = null
                    }, beginNotifications: function beginNotifications() {
                        this._updating = true
                    }, inserted: function inserted(itemPromise, previousHandle, nextHandle){}, changed: function changed(newItem, oldItem){}, moved: function moved(itemPromise, previousHandle, nextHandle){}, removed: function removed(handle, mirage){}, countChanged: function countChanged(newCount, oldCount) {
                        if (oldCount === "unknown")
                            oldCount = 0;
                        if (this._pendingCountChange)
                            this._pendingCountChange.newValue = newCount;
                        else
                            this._pendingCountChange = {
                                type: MS.Entertainment.UI.Controls.GalleryListDataNotificationHandler.UpdateType.countChanged, newValue: newCount, oldValue: oldCount, passedThreshold: false
                            };
                        if (this._passedThreshold(newCount, oldCount, this.minimumListLength) || this._passedThreshold(newCount, oldCount, this.countThreshold))
                            this._pendingCountChange.passedThreshold = true;
                        this._pushChange(this._pendingCountChange);
                        this._updateGallery()
                    }, endNotifications: function endNotifications() {
                        this._updating = false;
                        this._updateGallery()
                    }, reload: function reload() {
                        this._pushChange({type: MS.Entertainment.UI.Controls.GalleryListDataNotificationHandler.UpdateType.reload});
                        this._updateGallery()
                    }, _passedThreshold: function(newCount, oldCount, threshold) {
                        return ((newCount >= threshold) && (oldCount < threshold)) || ((oldCount >= threshold) && (newCount < threshold))
                    }
            }, {UpdateType: {
                    countChanged: "countChanged", reload: "reload"
                }}), GalleryControlDoubleClickHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function galleryControlDoubleClickHelper(galleryControl) {
                this._galleryControl = galleryControl
            }, {
                _appBarServiceStorage: null, _item: null, _index: -1, _invokePromise: null, _mediaContext: null, _playButton: null, _smartBuyStateEngine: null, _appBarService: {get: function get_appBarService() {
                            if (!this._appBarServiceStorage)
                                this._appBarServiceStorage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                            return this._appBarServiceStorage
                        }}, _getData: function _getData() {
                        var data = this._item;
                        var key;
                        if (!data)
                            return;
                        key = data.key;
                        data = data.data || data;
                        return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(data).then(function mediaItemHydrated(mediaItem) {
                                var containingMedia = this.getContainingMedia(key);
                                this.clear();
                                this._mediaContext = this._appBarService.pushMediaContext(mediaItem, [], [], {
                                    executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.invokeInline, galleryControl: this._galleryControl, containingMedia: containingMedia, invokedIndex: key
                                });
                                this._mediaContext.collectionFilter = (this._galleryControl.mediaContext && this._galleryControl.mediaContext.collectionFilter) || Microsoft.Entertainment.Platform.MediaAvailability.available;
                                this._smartBuyStateEngine = new MS.Entertainment.ViewModels.SmartBuyStateEngine;
                                var buttons = MS.Entertainment.ViewModels.SmartBuyButtons.getTrackInlineDetailsButtons(this._mediaContext);
                                var handler = MS.Entertainment.ViewModels.MusicStateHandlers.onTrackInlineDetailsStateChanged;
                                this._smartBuyStateEngine.initialize(mediaItem, buttons, handler);
                                this._playButton = buttons.doubleClick;
                                if (data.hydrate && !data.hydrated) {
                                    var options = {collectionFilter: this._mediaContext && this._mediaContext.collectionFilter};
                                    data.hydrate(options).done(null, function(){})
                                }
                                return mediaItem
                            }.bind(this))
                    }, getContainingMedia: function getContainingMedia(key) {
                        var containingMedia = null;
                        if (this._galleryControl.mediaContext && this._galleryControl.mediaContext.containingMedia && this._galleryControl.dataSource) {
                            if (this._galleryControl.mediaContext.containingMedia.copy)
                                containingMedia = this._galleryControl.mediaContext.containingMedia.copy();
                            else
                                containingMedia = {
                                    playbackItemSource: this._galleryControl.mediaContext.containingMedia.playbackItemSource, dontUseTrackListForPlayback: this._galleryControl.mediaContext.containingMedia.dontUseTrackListForPlayback
                                };
                            containingMedia.playbackKey = key;
                            containingMedia.playbackOffset = this._galleryControl.dataSource.indexToSourceIndex ? this._galleryControl.dataSource.indexToSourceIndex(this._index) : this._index
                        }
                        return containingMedia
                    }, clear: function clear() {
                        if (this._smartBuyStateEngine) {
                            this._smartBuyStateEngine.unload();
                            this._smartBuyStateEngine = null
                        }
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    }, execute: function execute() {
                        this._getData().done(function gotData(data) {
                            this._playButton.execute()
                        }.bind(this), function ignoreError(error) {
                            MS.Entertainment.UI.Controls.fail("Failed to get data for double-click. error: " + (error && error.message))
                        })
                    }, wrapItemInvoke: function wrapItemInvoke(event, data) {
                        this._item = data;
                        this._index = event.detail.itemIndex;
                        this._invokePromise = WinJS.Promise.timeout();
                        this._invokePromise.then(function onComplete(complete) {
                            if (this._invokePromise) {
                                var invocationHelper = this._galleryControl.invocationHelper;
                                if (invocationHelper)
                                    invocationHelper.invokeItem(event, data);
                                this._invokePromise = null
                            }
                        }.bind(this), function onError(error) {
                            this._invokePromise = null
                        }.bind(this))
                    }
            }, {create: WinJS.Utilities.markSupportedForProcessing(function create(galleryControl) {
                    return new MS.Entertainment.UI.Controls.GalleryControlDoubleClickHelper(galleryControl)
                })}), GalleryControlInvocationHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function galleryControlInvocationHelper(galleryControl) {
                this._galleryControl = galleryControl;
                this._smartButtonCallbacks = [];
                this._createActionExecuteCallbacks()
            }, {
                _smartButtonCallbacks: null, _createActionExecuteCallbacks: function _createActionExecuteCallbacks() {
                        var clearInvocation = this.clearInvocation.bind(this);
                        this.addInvocationHandlers({
                            deleteMedia: clearInvocation, removeFromList: clearInvocation, exploreAlbum: clearInvocation
                        })
                    }, _mediaContext: null, _appBarServiceStorage: null, _appBarService: {get: function get_appBarService() {
                            if (!this._appBarServiceStorage)
                                this._appBarServiceStorage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                            return this._appBarServiceStorage
                        }}, _galleryControl: null, _invokedItem: null, _shareOperation: null, _smartBuyStateEngine: null, _smartStateEngineBindings: null, _delayedActions: null, _currentInvokePromise: null, _pendingInvokeEvent: null, addInvocationHandlers: function addInvocationHandlers(handlers) {
                        this._smartButtonCallbacks = this._smartButtonCallbacks || [];
                        this._smartButtonCallbacks.push(handlers)
                    }, dispose: function dispose() {
                        this.clearInvocation();
                        this._galleryControl = null
                    }, invokedItem: {get: function() {
                            return this._invokedItem
                        }}, invokedKey: {get: function() {
                            return this.invokedItem ? this.invokedItem.key : null
                        }}, invokedIndex: {get: function() {
                            var result;
                            if (this._galleryControl && this._galleryControl.dataSource && this._galleryControl.dataSource.indexFromKey)
                                result = this._galleryControl.dataSource.indexFromKey(this.invokedKey);
                            else if (this.invokedItem)
                                result = this.invokedItem.itemIndex;
                            if (isNaN(result))
                                result = -1;
                            return result
                        }}, _setInvokedItem: function _setInvokedItem(value) {
                        if (this._invokedItem !== value) {
                            var oldValue = this._invokedItem;
                            this._invokedItem = value;
                            this.dispatchChangeAndNotify("invokedItem", value, oldValue)
                        }
                    }, invokeItem: function invokeItem(invocationEvent, eventData) {
                        if (!invocationEvent || !invocationEvent.srcElement || !invocationEvent.detail)
                            return;
                        this._pendingInvokeEvent = invocationEvent;
                        var getDataObject;
                        var invokedItem = {
                                srcElement: invocationEvent.srcElement, itemIndex: invocationEvent.detail.itemIndex
                            };
                        if (!invocationEvent.detail.rerender && WinJS.Utilities.hasClass(invokedItem.srcElement, "invoked")) {
                            this._clearInvokedAttributes(invokedItem.srcElement);
                            this.clearInvocation()
                        }
                        else {
                            this._setInvokedAttributes(invokedItem.srcElement);
                            if (eventData)
                                getDataObject = WinJS.Promise.wrap(eventData);
                            else if (invocationEvent.detail.itemPromise)
                                getDataObject = invocationEvent.detail.itemPromise;
                            else
                                getDataObject = this._galleryControl.getItemAtIndex(invocationEvent.detail.itemIndex)
                        }
                        if (this._currentInvokePromise) {
                            this._currentInvokePromise.cancel();
                            this._currentInvokePromise = null
                        }
                        if (getDataObject)
                            this._currentInvokePromise = getDataObject.then(function getItemsLibraryId(data) {
                                if (this._pendingInvokeEvent !== invocationEvent)
                                    return;
                                var key = data.key;
                                var itemData = data.data || data;
                                var promise;
                                if (this._clearInvocationIfNeeded(itemData, key)) {
                                    MS.Entertainment.ViewModels.MediaItemModel.augment(itemData);
                                    promise = MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(itemData).then(function() {
                                        return data
                                    })
                                }
                                else if (invokedItem.srcElement !== this.invokedItem.srcElement) {
                                    if (this.invokedItem && this.invokedItem.srcElement)
                                        this._clearInvokedAttributes(this.invokedItem.srcElement);
                                    this.invokedItem.srcElement = invokedItem.srcElement
                                }
                                return promise || WinJS.Promise.wrap(data)
                            }.bind(this)).then(function getItemData(data) {
                                if (this._pendingInvokeEvent !== invocationEvent)
                                    return;
                                var key;
                                if (data) {
                                    key = data.key;
                                    data = data.data || data
                                }
                                if (data) {
                                    this._smartBuyStateEngine = new MS.Entertainment.ViewModels.SmartBuyStateEngine;
                                    this._setupSmartButtons(data, invocationEvent.detail.itemIndex, key);
                                    MS.Entertainment.UI.Controls.assert(!data.smartBuyStateEngine, "We do not expect this property to be set already.");
                                    if (data.eventProxy)
                                        this._smartBuyStateEngine.eventProxy = data.eventProxy;
                                    else
                                        data.addProperty("smartBuyStateEngine", this._smartBuyStateEngine);
                                    MS.Entertainment.UI.Controls.UserFeedbackDialog.inlineDetailsItem = data;
                                    this._shareModel(data);
                                    invokedItem.data = data;
                                    invokedItem.key = key;
                                    this._setInvokedItem(invokedItem);
                                    return WinJS.Promise.timeout(MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.actionDelayMs).then(function() {
                                            return data
                                        })
                                }
                            }.bind(this)).then(function delayedActions(data) {
                                if (this._pendingInvokeEvent !== invocationEvent)
                                    return;
                                if (data) {
                                    if (data.hydrate && !data.hydrated) {
                                        var options = {collectionFilter: this._mediaContext && this._mediaContext.collectionFilter};
                                        data.hydrate(options).done(null, function(){})
                                    }
                                    this._smartStateEngineBindings = WinJS.Binding.bind(this._smartBuyStateEngine, {currentAppbarActions: this._setAppbarActions.bind(this)})
                                }
                                this._pendingInvokeEvent = null
                            }.bind(this), function delayedActions_Error() {
                                if (this._pendingInvokeEvent !== invocationEvent)
                                    return;
                                this._pendingInvokeEvent = null
                            }.bind(this))
                    }, _setAppbarActions: function _setAppbarActions(newValue, oldValue) {
                        if ((this._smartStateEngineBindings || (oldValue === undefined && !this._smartStateEngineBindings)) && this._mediaContext)
                            this._mediaContext.setToolbarActions(this._smartBuyStateEngine.currentAppbarActions)
                    }, _toggleOffIfNeeded: function _toggleOffIfNeeded(newKey) {
                        var toggledOff = false;
                        if (this.invokedItem && this.invokedItem.key === newKey && newKey) {
                            this.clearInvocation();
                            toggledOff = true
                        }
                        return toggledOff
                    }, _setInvokedAttributes: function _setInvokedAttributes(element) {
                        WinJS.Utilities.addClass(element, "invoked");
                        WinJS.Promise.timeout(750).done(function updateFocus() {
                            var actionList = element.querySelector(".inPlaceDetailsItemActions");
                            if (actionList && document.activeElement === element) {
                                var firstButton = actionList.querySelector(".iconButton");
                                if (firstButton)
                                    MS.Entertainment.UI.Framework.focusElement(firstButton)
                            }
                        })
                    }, _clearInvokedAttributes: function _clearInvokedAttributes(element) {
                        WinJS.Utilities.removeClass(element, "invoked")
                    }, _clearInvocationIfNeeded: function _clearInvocationIfNeeded(newData, newKey) {
                        var cleared = true;
                        if (this.invokedItem)
                            if (newData && this.invokedItem.data === newData && newKey && this.invokedItem.key === newKey)
                                cleared = false;
                            else
                                this.clearInvocation();
                        return cleared
                    }, clearInvocation: function clearInvocation() {
                        if (this._currentInvokePromise) {
                            this._currentInvokePromise.cancel();
                            this._currentInvokePromise = null
                        }
                        if (this.invokedItem) {
                            this._clearInvokedAttributes(this.invokedItem.srcElement);
                            WinJS.Utilities.removeClass(this.invokedItem.srcElement, "win-pressed");
                            if (this.invokedItem.data) {
                                MS.Entertainment.UI.Controls.UserFeedbackDialog.inlineDetailsItem = null;
                                this.invokedItem.data.smartBuyStateEngine = null
                            }
                            this._setInvokedItem(null)
                        }
                        this._unshareModel();
                        if (this._delayedActions) {
                            this._delayedActions.cancel();
                            this._delayedActions = null
                        }
                        if (this._smartBuyStateEngine) {
                            this._smartBuyStateEngine.unload();
                            this._smartBuyStateEngine = null
                        }
                        if (this._smartStateEngineBindings) {
                            this._smartStateEngineBindings.cancel();
                            this._smartStateEngineBindings = null
                        }
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    }, _setupSmartButtons: function _setupSmartButtons(mediaItem, index, key) {
                        if (mediaItem && (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track || MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(mediaItem))) {
                            MS.Entertainment.UI.Controls.assert(MS.Entertainment.Utilities.isMusicApp, "This code should only get called in the music app");
                            var containingMedia = null;
                            if (this._galleryControl.mediaContext && this._galleryControl.mediaContext.containingMedia && this._galleryControl.dataSource) {
                                if (this._galleryControl.mediaContext.containingMedia.copy)
                                    containingMedia = this._galleryControl.mediaContext.containingMedia.copy();
                                else
                                    containingMedia = {
                                        playbackItemSource: this._galleryControl.mediaContext.containingMedia.playbackItemSource, dontUseTrackListForPlayback: this._galleryControl.mediaContext.containingMedia.dontUseTrackListForPlayback
                                    };
                                containingMedia.playbackKey = key;
                                containingMedia.playbackOffset = this._galleryControl.dataSource.indexToSourceIndex ? this._galleryControl.dataSource.indexToSourceIndex(index) : index
                            }
                            if (this._mediaContext) {
                                this._mediaContext.clearContext();
                                this._mediaContext = null
                            }
                            var hydratePromise = WinJS.Promise.as();
                            if (MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(mediaItem))
                                hydratePromise = mediaItem.hydrate({forceUpdate: mediaItem.fromCollection});
                            hydratePromise.done(function setMediaContext() {
                                this._mediaContext = this._appBarService.pushMediaContext(mediaItem, this._smartButtonCallbacks, [], {
                                    executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.invokeInline, galleryControl: this._galleryControl, containingMedia: containingMedia, invokedIndex: index
                                });
                                this._mediaContext.collectionFilter = (this._galleryControl.mediaContext && this._galleryControl.mediaContext.collectionFilter) || Microsoft.Entertainment.Platform.MediaAvailability.available;
                                if (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrack(mediaItem))
                                    this._smartBuyStateEngine.initialize(mediaItem, MS.Entertainment.ViewModels.SmartBuyButtons.getTrackInlineDetailsButtons(this._mediaContext), MS.Entertainment.ViewModels.MusicStateHandlers.onTrackInlineDetailsStateChanged);
                                else if (MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(mediaItem))
                                    this._smartBuyStateEngine.initialize(mediaItem, MS.Entertainment.ViewModels.SmartBuyButtons.getMusicVideoInlineDetailsButtons(this._mediaContext), MS.Entertainment.ViewModels.MusicStateHandlers.onMusicVideoInlineDetailsStateChanged)
                            }.bind(this))
                        }
                        else if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video);
                        else
                            MS.Entertainment.UI.Controls.fail("unexpected mediaType in inline buttons.")
                    }, _shareModel: function _shareModel(media) {
                        var sender = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareSender);
                        if (media) {
                            this._unshareModel();
                            try {
                                this._shareOperation = sender.pendingShare(media)
                            }
                            catch(e) {
                                this._shareOperation = null
                            }
                        }
                    }, _unshareModel: function _unshareModel() {
                        if (this._shareOperation) {
                            this._shareOperation.cancel();
                            this._shareOperation = null
                        }
                    }
            }, {
                create: WinJS.Utilities.markSupportedForProcessing(function create(galleryControl) {
                    return new MS.Entertainment.UI.Controls.GalleryControlInvocationHelper(galleryControl)
                }), actionDelayMs: 300
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {
        TrackGalleryControlInvocationHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryControlInvocationHelper", function trackGalleryControlInvocationHelper(galleryControl) {
            MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype.constructor.apply(this, arguments)
        }, {
            album: null, _setupSmartButtons: function _setupSmartButtons(mediaItem, index, key) {
                    if (mediaItem && this.album && "album" in mediaItem)
                        mediaItem.album = this.album;
                    MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype._setupSmartButtons.apply(this, arguments)
                }
        }, {createTrackHelper: WinJS.Utilities.markSupportedForProcessing(function createTrackHelper(galleryControl) {
                return new MS.Entertainment.UI.Controls.TrackGalleryControlInvocationHelper(galleryControl)
            })}), SmartDJGalleryControlInvocationHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryControlInvocationHelper", function SmartDJGalleryControlInvocationHelper(galleryControl) {
                MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype.constructor.apply(this, arguments)
            }, {invokeItem: function invokeItem(invocationEvent, eventData) {
                    var getDataPromise;
                    var invokedItem = {
                            srcElement: invocationEvent.srcElement, itemIndex: invocationEvent.detail.itemIndex
                        };
                    if (eventData)
                        getDataPromise = WinJS.Promise.wrap(eventData);
                    else if (invocationEvent.detail.itemPromise)
                        getDataPromise = invocationEvent.detail.itemPromise;
                    else
                        getDataPromise = this._galleryControl.getItemAtIndex(invocationEvent.detail.itemIndex);
                    MS.Entertainment.UI.Controls.assert(getDataPromise, "cannot obtain invoked object");
                    getDataPromise.done(function getItemData(data) {
                        var key = data.key;
                        data = data.data || data;
                        if (invokedItem.srcElement === invocationEvent.srcElement) {
                            var _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var action = _actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playSmartDJ);
                            action.automationId = MS.Entertainment.UI.AutomationIds.galleryPlaySmartDJ;
                            action.parameter = {
                                mediaItem: data, showAppBar: true
                            };
                            if (invokedItem.srcElement)
                                MS.Entertainment.Utilities.Telemetry.logPageAction({
                                    itemPropertyBag: data, domElement: invokedItem.srcElement
                                }, {
                                    uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.SmartDJ
                                });
                            action.execute()
                        }
                    }.bind(this), function getItemDataFailed() {
                        MS.Entertainment.UI.Controls.assert(getDataPromise, "cannot find invoked data")
                    })
                }}, {createSmartDJHelper: WinJS.Utilities.markSupportedForProcessing(function createSmartDJHelper(galleryControl) {
                    return new MS.Entertainment.UI.Controls.SmartDJGalleryControlInvocationHelper(galleryControl)
                })}), SearchDetailsInvocationHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryControlInvocationHelper", function searchDetailsInvocationHelper(galleryControl) {
                MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype.constructor.apply(this, arguments)
            }, {invokeItem: function invokeItem(invocationEvent, eventData) {
                    var invokedItem = eventData.data;
                    if (invokedItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                        MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype.invokeItem.apply(this, arguments);
                    else {
                        var popOverParameters = this._galleryControl.createPopOverParameters(eventData);
                        MS.Entertainment.Platform.PlaybackHelpers.showItemDetails(popOverParameters)
                    }
                }}, {create: WinJS.Utilities.markSupportedForProcessing(function create(galleryControl) {
                    return new MS.Entertainment.UI.Controls.SearchDetailsInvocationHelper(galleryControl)
                })}), SearchHorizontalDetailsInvocationHelper: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryControlInvocationHelper", function searchHorizontalDetailsInvocationHelper(galleryControl) {
                MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.prototype.constructor.apply(this, arguments)
            }, {invokeItem: function invokeItem(invocationEvent, eventData) {
                    var contentRestrictionService = null;
                    var contentRestrictionBrowsePolicyUpdatePromise = WinJS.Promise.as();
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.contentRestrictionService)) {
                        contentRestrictionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.contentRestrictionService);
                        contentRestrictionBrowsePolicyUpdatePromise = contentRestrictionService.getBrowsePolicyUpdatePromise()
                    }
                    contentRestrictionBrowsePolicyUpdatePromise.done(function invokeItem() {
                        if (contentRestrictionService && contentRestrictionService.hasBrowseFilterRestriction() && eventData.data && eventData.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.track) {
                            var trackInvocationHelper = new MS.Entertainment.UI.Controls.TrackGalleryControlInvocationHelper(this);
                            trackInvocationHelper.invokeItem(invocationEvent, eventData)
                        }
                        else {
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            if (actionService.isRegistered(MS.Entertainment.UI.Actions.ActionIdentifiers.mediaItemDetailsNavigate)) {
                                var mediaItemDetailsAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.mediaItemDetailsNavigate);
                                mediaItemDetailsAction.parameter = {
                                    shouldGetLocationFromMediaItem: true, forceMarketplace: false, data: eventData.data
                                };
                                if (mediaItemDetailsAction.canExecute(mediaItemDetailsAction.parameter))
                                    return mediaItemDetailsAction.execute()
                            }
                            var popOverParameters = this._galleryControl.createPopOverParameters(eventData);
                            MS.Entertainment.Platform.PlaybackHelpers.showItemDetails(popOverParameters)
                        }
                    }.bind(this), function error(){})
                }}, {create: WinJS.Utilities.markSupportedForProcessing(function create(galleryControl) {
                    return new MS.Entertainment.UI.Controls.SearchHorizontalDetailsInvocationHelper(galleryControl)
                })}), DoNothingSelectionHelper: MS.Entertainment.UI.Framework.define(null, {
                dispose: function dispose(){}, updateSelectedItems: function updateSelectedItems(newSelection, oldSelection){}
            }), GalleryControlSelectionHelper: MS.Entertainment.UI.Framework.define(function galleryControlSelectionHelper(galleryControl, options) {
                this._galleryControl = galleryControl;
                if (options)
                    WinJS.UI.setOptions(this, WinJS.Binding.unwrap(options));
                if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appToolbar)) {
                    this._appBarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                    this._updateContainingMedia();
                    this._mediaContext = this._appBarService.pushMediaContext(this._galleryControl.selectedItems, this._galleryControl.selectionHandlers, [], {
                        galleryControl: this._galleryControl, executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.selection, containingMedia: this._containingMedia
                    });
                    this._mediaContext.collectionFilter = galleryControl._mediaContext && galleryControl._mediaContext.collectionFilter
                }
            }, {
                actionCallbacks: null, allowShare: true, _mediaContext: null, _containingMedia: null, _appBarService: null, _galleryControl: null, _selectedItemStateEngine: null, _selectedItemBindings: null, _multiSelectItemActions: null, _selectedItemsNum: null, _disposed: false, _shareOperation: null, dispose: function dispose() {
                        MS.Entertainment.UI.Controls.assert(!this._dispose, "dispose already called on gallery selection helper.");
                        if (this._disposed)
                            return;
                        this._disposed = true;
                        if (this._selectedItemBindings) {
                            this._selectedItemBindings.cancel();
                            this._selectedItemBindings = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        this._multiSelectItemActions = null;
                        this._galleryControl = null;
                        this._cancelShareMedia();
                        var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                        if (appBarControl && appBarControl.hide)
                            appBarControl.hide(true);
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    }, updateSelectedItems: function updateSelectedItems(newSelection, oldSelection) {
                        if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appToolbar))
                            return;
                        if (!newSelection || newSelection.length === 0) {
                            MS.Entertainment.UI.Controls.assert(newSelection.length, "Dispose was expected to be called instead of this function if there are no items selected.");
                            return
                        }
                        this._cancelShareMedia();
                        this._selectedItemsNum = newSelection.length;
                        if (newSelection.length === 1)
                            this._handleGallerySingleSelection(newSelection[0]);
                        else
                            this._handleGalleryMultiSelection(newSelection);
                        if (this._mediaContext && this._galleryControl)
                            this._mediaContext.mediaItem = this._galleryControl.selectedItems;
                        this._updateContainingMedia()
                    }, _updateContainingMedia: function _updateContainingMedia() {
                        var containingMedia = this._containingMedia;
                        var index = this._galleryControl.selectedIndex;
                        if (!containingMedia && this._galleryControl && this._galleryControl.mediaContext && this._galleryControl.mediaContext.containingMedia)
                            if (this._galleryControl.mediaContext.containingMedia.copy)
                                containingMedia = this._galleryControl.mediaContext.containingMedia.copy();
                            else
                                containingMedia = {
                                    playbackItemSource: this._galleryControl.mediaContext.containingMedia.playbackItemSource, playbackOffset: -1, playbackKey: null
                                };
                        if (!containingMedia)
                            containingMedia = {
                                playbackItemSource: null, playbackOffset: -1, playbackKey: null
                            };
                        if (this._galleryControl && this._galleryControl.dataSource) {
                            containingMedia.playbackSelectionRanges = this._galleryControl.selection && this._galleryControl.selection.getRanges();
                            containingMedia.playbackKey = this._galleryControl.selectedKey;
                            containingMedia.playbackOffset = this._galleryControl.dataSource.indexToSourceIndex ? this._galleryControl.dataSource.indexToSourceIndex(this._galleryControl.selectedIndex) : this._galleryControl.selectedIndex
                        }
                        else {
                            containingMedia.playbackSelectionRanges = null;
                            containingMedia.playbackKey = null;
                            containingMedia.playbackOffset = -1
                        }
                        this._containingMedia = containingMedia
                    }, _handleGallerySingleSelection: function _handleGallerySingleSelection(selectedIndex) {
                        if (this._disposed || !this._galleryControl)
                            return;
                        if (this._selectedItemBindings) {
                            this._selectedItemBindings.cancel();
                            this._selectedItemBindings = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        this._multiSelectItemActions = null;
                        this._galleryControl.getDataObjectAtIndex(selectedIndex).then(function getDataObjectAtIndex_Success(item) {
                            if (this._disposed || this._selectedItemsNum !== 1)
                                return;
                            MS.Entertainment.ViewModels.MediaItemModel.augment(item);
                            MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(item);
                            if (item.hydrate && !item.hydrated) {
                                var options = {collectionFilter: this._mediaContext && this._mediaContext.collectionFilter};
                                item.hydrate(options).done(function hydrate_Done() {
                                    this._shareMedia(item)
                                }.bind(this), function hydrate_Error() {
                                    this._shareMedia(item)
                                }.bind(this))
                            }
                            else
                                this._shareMedia(item);
                            this._createSelectionStateEngineForMediaItem(item)
                        }.bind(this), function getDataObjectAtIndex_Error(){})
                    }, _handleGalleryMultiSelection: function _handleGalleryMultiSelection(selectedIndex) {
                        var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                        if (featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicShareToPhone))
                            if (this._galleryControl.selectedItems && this._galleryControl.selectedItems.count)
                                this._shareMedia(this._galleryControl.selectedItems);
                        if (this._multiSelectItemActions) {
                            var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                            if (appBarControl)
                                appBarControl.show();
                            return
                        }
                        if (this._selectedItemBindings) {
                            this._selectedItemBindings.cancel();
                            this._selectedItemBindings = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        this._multiSelectItemActions = [];
                        this._galleryControl.getDataObjectAtIndex(selectedIndex[0]).then(function getDataObjectAtIndex_Success(mediaItem) {
                            if (this._disposed || this._selectedItemsNum <= 1)
                                return;
                            switch (mediaItem && mediaItem.mediaType) {
                                case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                    this._multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getMusicPlaylistMultiSelectActions(mediaItem);
                                    break;
                                case Microsoft.Entertainment.Queries.ObjectType.album:
                                case Microsoft.Entertainment.Queries.ObjectType.track:
                                case Microsoft.Entertainment.Queries.ObjectType.person:
                                    this._multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getMusicMultiSelectActions(mediaItem);
                                    break;
                                default:
                                    if (mediaItem.smartDJ)
                                        this._multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getSmartDJMultiSelectActions();
                                    else
                                        this._multiSelectItemActions = [];
                                    break
                            }
                            this._updateAppBarActions(this._multiSelectItemActions)
                        }.bind(this), function getDataObjectAtIndex_Error(){})
                    }, _shareMedia: function _shareMedia(media) {
                        var sender = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareSender);
                        if (!this._shareOperation && media && this.allowShare)
                            this._shareOperation = sender.pendingShare(media)
                    }, _cancelShareMedia: function _cancelShareMedia() {
                        if (this._shareOperation) {
                            this._shareOperation.cancel();
                            this._shareOperation = null
                        }
                    }, _createSelectionStateEngineForMediaItem: function _createSelectionStateEngineForMediaItem(mediaItem) {
                        var handler;
                        if (this._disposed || this._selectedItemsNum !== 1)
                            return;
                        this._selectedItemStateEngine = MS.Entertainment.ViewModels.SmartBuyStateEngine.getSelectionStateFromMediaItem(mediaItem);
                        if (this._selectedItemStateEngine)
                            this._selectedItemBindings = WinJS.Binding.bind(this._selectedItemStateEngine, {currentAppbarActions: this._setSelectedItemAppbarActions.bind(this)})
                    }, _setSelectedItemAppbarActions: function _setSelectedItemAppbarActions(newValue, oldValue) {
                        if (oldValue !== undefined && this._selectedItemsNum === 1)
                            this._updateAppBarActions(newValue)
                    }, _updateAppBarActions: function _updateAppBarActions(newActions) {
                        if (this._mediaContext)
                            this._mediaContext.setToolbarActions(newActions);
                        if (newActions.length > 0) {
                            var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                            if (appBarControl)
                                appBarControl.show()
                        }
                    }
            }), GalleryControl: MS.Entertainment.UI.Framework.defineUserControl(null, function galleryControlConstructor(element, options) {
                window.msWriteProfilerMark("ent:GalleryControl.Constructed");
                this._eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                this._eventProvider.traceGalleryControl_Load_Start();
                this.readyState = MS.Entertainment.UI.Controls.GalleryControl.ReadyState.itemsLoading;
                this._selectionHandlers = [];
                this.selectionHelperFactory = function selectionHelperFactory(galleryControl) {
                    return new MS.Entertainment.UI.Controls.GalleryControlSelectionHelper(galleryControl, this.selectionHelperOptions)
                };
                var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                this._uiStateHandlers = MS.Entertainment.Utilities.addEventHandlers(uiStateService, {
                    isSnappedChanged: this._onSnappedChanged.bind(this), windowresize: this._handleWindowResize.bind(this)
                });
                if (MS.Entertainment.Utilities.isApp2 && this.pagesToLoad === WinJS.UI._DEFAULT_PAGES_TO_LOAD)
                    this.pagesToLoad = 1
            }, {
                controlName: "GalleryControl", debugId: null, ignoreChildrenInitialization: true, horizontal: false, headerPosition: "top", _selectionMode: "none", _tap: "none", _swipeBehavior: "none", _selectionStyleFilled: false, _dragStarted: false, maxRows: -1, layout: "grid", loadingBehavior: "randomAccess", headerType: "auto", backdropColor: null, panelOptions: null, queryToPause: null, slotSize: null, itemMargin: null, itemSize: null, largeItemSize: null, itemClass: null, headerClass: null, autoSize: false, preventResizeJitter: false, suppressInvokeBubble: false, forceInteractive: false, handleFocus: false, onFocusListviewClass: null, pagesToLoad: WinJS.UI._DEFAULT_PAGES_TO_LOAD, inlineExtraData: null, raisePanelReadyEvents: true, raisePanelResetEvents: false, delayHydrateLibraryId: false, emptyGalleryModel: null, userGatedGalleryModel: null, userGatedGallery: false, syncScreenModel: null, syncScreen: false, initialSelected: -1, initialInvoked: -1, initialVisible: -1, invocationHelper: null, doubleClickHelper: null, _selectionHandlers: null, focusFirstItemOnPageLoad: false, restoreFocusOnDataChanges: false, multiSize: false, startNewColumnOnHeaders: false, largeItemIndex: -1, selectionHelperFactory: null, selectionHelperOptions: null, allowSelectAll: true, allowHeaders: true, actionOptions: null, doubleClickActionOptions: null, listViewClassName: null, orientation: null, ensureNextItemVisibleCount: 0, scrollToOnInvoked: true, shrinkAndStayHeader: false, handleSelectedItemsChangedEvent: false, _userSelectedEverything: false, _uiStateHandlers: null, _invokeBehavior: "popOver", _invokeHelperFactory: null, _itemsDraggable: false, _itemsReorderable: false, _dragBetweenElement: -1, _eventProvider: null, _dataSourceHandlers: null, _dataSourceItemChangeHandlers: null, _doubleClickBehavior: "play", _listView: null, _zoomView: null, _zoomedOutView: null, _readyStateCallback: null, _selectedIndexChangedCallback: null, _itemInvoked: null, _initialItemCount: -1, _latestCount: -1, _notificationHandler: null, _listBinding: null, _navigationBindings: null, _raisedPanelReady: false, _raisedPanelEmpty: false, _isEmpty: false, _isSyncing: false, _internalDataSource: null, _focusEventHandler: null, _listViewEventHandler: null, _zoomViewEventHandler: null, _previousCanZoom: false, _listViewEventCaptureHandler: null, _templateSelector: null, _grouperItemThreshold: _defaultGrouperItemThreshold, _minimumListLength: 1, _selectionHelper: null, _mediaContext: null, _mediaContextOwned: true, _dataSource: null, _invocationHelperEvents: null, _updateCount: 0, _templateSelectorConstructor: MS.Entertainment.UI.Controls.GalleryTemplateSelector, _pendingSelectionFromInvoke: -1, _maxSelectionCount: -1, _semanticZoomInitType: null, _firstPageRendered: false, _ignoreNextInteractiveCheck: false, _restoreFocusIndex: -1, _listViewHadFocus: false, _firstPagedRenderedEventDispatched: false, _firstPagedDelayInitializedHandled: false, _inplaceGrouper: null, _delayInitializeSignal: null, _mediaControlEventHandler: null, _mediaControlCommandEnabled: true, _savedScrollPosition: null, _listViewViewport: null, _delayInitializedChildren: false, _moreThanFirstPageRendered: false, _moreThanFirstPageRenderedWorker: null, _collectionFilter: Microsoft.Entertainment.Platform.MediaAvailability.available, blockDelayInitializeOfChildren: true, allowZoom: false, initialZoomedOut: false, zoomedOutLayout: "auto", maxSelectionCount: {
                        get: function() {
                            return this._maxSelectionCount
                        }, set: function(value) {
                                if (this._maxSelectionCount !== value)
                                    this._maxSelectionCount = typeof value !== "number" ? -1 : value
                            }
                    }, isFirstPageRendered: {get: function() {
                            return this._firstPageRendered
                        }}, templateSelectorConstructor: {
                        get: function() {
                            return this._templateSelectorConstructor
                        }, set: function(value) {
                                if (value !== this._templateSelectorConstructor) {
                                    this._templateSelectorConstructor = value || MS.Entertainment.UI.Controls.GalleryTemplateSelector;
                                    this._templateSelector = null
                                }
                            }
                    }, dataSource: {
                        get: function() {
                            return this._dataSource
                        }, set: function(value) {
                                if (value !== this._dataSource && !this._unloaded) {
                                    var oldValue = this._dataSource;
                                    this._dataSource = value;
                                    this._dataSourceUpdated(this._dataSource, oldValue);
                                    window.msWriteProfilerMark("ent:GalleryControl.GotData");
                                    this.notify("dataSource", this._dataSource, oldValue)
                                }
                            }
                    }, grouperItemThreshold: {
                        get: function() {
                            return this._grouperItemThreshold
                        }, set: function(value) {
                                if (isNaN(value))
                                    value = _defaultGrouperItemThreshold;
                                this._grouperItemThreshold = value
                            }
                    }, minimumListLength: {
                        get: function() {
                            return this._minimumListLength
                        }, set: function(value) {
                                if (isNaN(value))
                                    value = 1;
                                this._minimumListLength = value;
                                if (this._notificationHandler)
                                    this._notificationHandler.minimumListLength = value
                            }
                    }, templateSelector: {get: function() {
                            if (!this._templateSelector)
                                this._templateSelector = new this.templateSelectorConstructor(this);
                            return this._templateSelector
                        }}, itemTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item, value)
                            }
                    }, headerTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header, value)
                            }
                    }, actionTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.action)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.action, value)
                            }
                    }, zoomedOutTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.zoomedOut)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.zoomedOut, value)
                            }
                    }, emptyGalleryTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.emptyGallery)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.emptyGallery, value)
                            }
                    }, userGatedGalleryTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.userGatedGallery)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.userGatedGallery, value)
                            }
                    }, syncScreenTemplate: {
                        get: function getSyncScreenTemplate() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.syncScreen)
                        }, set: function setSyncScreenTemplate(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.syncScreen, value)
                            }
                    }, panelTemplate: {
                        get: function() {
                            return this.templateSelector.getTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.panel)
                        }, set: function(value) {
                                this.templateSelector.addTemplate(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.panel, value)
                            }
                    }, _panelTemplateTypeMappings: null, panelTemplateTypeMappings: {
                        get: function() {
                            return this._panelTemplateTypeMappings
                        }, set: function(value) {
                                if (value !== this._panelTemplateTypeMappings || !this._panelTemplateTypeMappings)
                                    this._panelTemplateTypeMappings = value
                            }
                    }, _grouper: null, grouper: {
                        get: function() {
                            if (!this._grouper && this._grouperType)
                                this._grouper = new this._grouperType;
                            else if (!this._grouperType && this._grouper)
                                this._grouper = null;
                            return this._grouper
                        }, set: function(value) {
                                if (value !== this._grouper) {
                                    this._grouper = value;
                                    if (this._grouper) {
                                        this._grouperType = Object.getPrototypeOf(this._grouper);
                                        this._grouperType = this._grouperType && this._grouperType.constructor
                                    }
                                    this._updateRefreshThreshold()
                                }
                            }
                    }, _grouperType: null, grouperType: {
                        get: function() {
                            return this._grouperType
                        }, set: function(value) {
                                if (value !== this._grouperType) {
                                    this._grouper = null;
                                    this._grouperType = value;
                                    this._updateRefreshThreshold()
                                }
                            }
                    }, selectionMode: {
                        get: function() {
                            return this._selectionMode
                        }, set: function(value) {
                                if (value !== this._selectionMode) {
                                    this._selectionMode = value;
                                    if (this._listView)
                                        this._listView.selectionMode = value
                                }
                            }
                    }, selectionStyleFilled: {
                        get: function() {
                            return this._selectionStyleFilled
                        }, set: function(value) {
                                if (value !== this._selectionStyleFilled) {
                                    this._selectionStyleFilled = value;
                                    if (this._listView && this._listView._element)
                                        if (value)
                                            WinJS.Utilities.addClass(this._listView._element, MS.Entertainment.UI.Controls.GalleryControl.selectionFilledClass);
                                        else
                                            WinJS.Utilities.removeClass(this._listView._element, MS.Entertainment.UI.Controls.GalleryControl.selectionFilledClass)
                                }
                            }
                    }, tap: {
                        get: function() {
                            return this._tap
                        }, set: function(value) {
                                if (value !== this._tap) {
                                    this._tap = value;
                                    if (this._listView)
                                        this._listView.tapBehavior = value
                                }
                            }
                    }, swipeBehavior: {
                        get: function() {
                            return this._swipeBehavior
                        }, set: function(value) {
                                if (value !== this._swipeBehavior) {
                                    this._swipeBehavior = value;
                                    if (this._listView)
                                        this._listView.swipeBehavior = value
                                }
                            }
                    }, doubleClickBehavior: {
                        get: function() {
                            return this._doubleClickBehavior
                        }, set: function(value) {
                                if (value !== this._doubleClickBehavior)
                                    this._doubleClickBehavior = value
                            }
                    }, invokeBehavior: {
                        get: function() {
                            return this._invokeBehavior
                        }, set: function(value) {
                                if (value !== this._invokeBehavior) {
                                    this._invokeBehavior = value;
                                    this._updateInvokeHelper()
                                }
                            }
                    }, invokeHelperFactory: {
                        get: function() {
                            return this._invokeHelperFactory
                        }, set: function(value) {
                                if (value !== this._invokeHelperFactory) {
                                    this._invokeHelperFactory = value;
                                    this._updateInvokeHelper()
                                }
                            }
                    }, _isDragAndDropEnabled: function _isDragAndDropEnabled() {
                        var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                        return configurationManager.shell.dragAndDropEnabled
                    }, itemsDraggable: {
                        get: function() {
                            return this._isDragAndDropEnabled() && this._itemsDraggable
                        }, set: function(value) {
                                value = this._isDragAndDropEnabled() && value;
                                if (value !== this._itemsDraggable) {
                                    this._itemsDraggable = value;
                                    if (this._listView)
                                        this._listView.itemsDraggable = value
                                }
                            }
                    }, itemsReorderable: {
                        get: function() {
                            return this._isDragAndDropEnabled() && this._itemsReorderable
                        }, set: function(value) {
                                value = this._isDragAndDropEnabled() && value;
                                if (value !== this._itemsReorderable) {
                                    this._itemsReorderable = value;
                                    if (this._listView)
                                        this._listView.itemsReorderable = value
                                }
                            }
                    }, selectionHandlers: {get: function get_selectionHandlers() {
                            return this._selectionHandlers
                        }}, setSelectionHandlers: function setSelectionHandlers(handlers) {
                        this.clearSelectionHandlers();
                        this.addSelectionHandlers(handlers)
                    }, addSelectionHandlers: function addSelectionHandlers(handlers) {
                        this._selectionHandlers = this._selectionHandlers || [];
                        if (Array.isArray(handlers))
                            this._selectionHandlers = this._selectionHandlers.concat(handlers);
                        else
                            this._selectionHandlers.push(handlers)
                    }, clearSelectionHandlers: function clearSelectionHandlers() {
                        this._selectionHandlers = []
                    }, mediaContext: {
                        get: function() {
                            return this._mediaContext
                        }, set: function(value) {
                                if (value !== this._mediaContext) {
                                    this._releaseMediaContext();
                                    this._mediaContext = value;
                                    this._mediaContextOwned = false
                                }
                            }
                    }, updateCollectionFilter: function(filter) {
                        this._collectionFilter = filter;
                        if (this.mediaContext && this._mediaContextOwned)
                            this.mediaContext.collectionFilter = filter
                    }, processItemData: function processItemData(itemData) {
                        return itemData
                    }, internalDataSource: {get: function() {
                            return this._internalDataSource
                        }}, selection: {get: function() {
                            return this._listView ? this._listView.selection : null
                        }}, finalZoomedOutLayout: {get: function() {
                            return this.zoomedOutLayout === MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.auto ? this.layout : this.zoomedOutLayout
                        }}, finalZoomedOutTemplateType: {get: function() {
                            return this.zoomedOutTemplate ? MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.zoomedOut : MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header
                        }}, useInPlaceHeaders: {get: function() {
                            return this.headerType === MS.Entertainment.UI.Controls.GalleryControl.HeaderType.inPlace
                        }}, canGroup: {get: function get_canGroup() {
                            var canGroup;
                            canGroup = !!(this.dataSource && this.dataSource.groups && !this.dataSource.grouper.noHeaderGroups);
                            canGroup = canGroup || (this.useInPlaceHeaders && !!this.grouper);
                            canGroup = canGroup || !!this.grouper;
                            canGroup = canGroup && this.allowHeaders;
                            if (canGroup) {
                                var thresholdMet = this.useInPlaceHeaders || this._initialItemCount >= this.grouperItemThreshold || (!!this.grouperType && this.grouperType !== MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper);
                                canGroup = thresholdMet
                            }
                            return canGroup
                        }}, canZoom: {get: function() {
                            return this.allowZoom && !!this.dataSource && !!this.dataSource.hasGroupHints
                        }}, isZoomReady: {get: function() {
                            return this.allowZoom && !!this.dataSource && !!this.dataSource.isGroupHintsReady
                        }}, isZoomedOut: {
                        get: function() {
                            return this._zoomView ? this._zoomView.zoomedOut : false
                        }, set: function(newValue) {
                                var oldValue = this.isZoomedOut;
                                if (this._zoomView && oldValue !== newValue && !this._unloaded) {
                                    msWriteProfilerMark("ent:GalleryControl:isZoomedChanging");
                                    this._zoomView.zoomedOut = newValue
                                }
                                this.updateAndNotify("isZoomedOut", newValue)
                            }
                    }, initialItemCount: {get: function getItemCount() {
                            return this._initialItemCount
                        }}, _activeListView: {get: function() {
                            return this.isZoomedOut ? this._zoomedOutView : this._listView
                        }}, hasSelectionOrInvocation: {get: function get_hasSelectionOrInvocation() {
                            var selection;
                            var index = -1;
                            if (this._listView && this._listView.selection)
                                selection = this._listView.selection.getIndices();
                            if (selection && selection.length > 0)
                                index = selection[0];
                            if (this.invocationHelper && this.invocationHelper.invokedIndex >= 0)
                                index = this.invocationHelper.invokedIndex;
                            return index >= 0
                        }}, hasMultiSelection: {get: function get_hasMultiSelection() {
                            if (this._listView && this._listView.selection) {
                                var selection = this._listView.selection.getIndices();
                                return selection && selection.length > 1
                            }
                            return false
                        }}, _waitForGalleryReady: function _waitForGalleryReady() {
                        var readyPromise;
                        if (this.readyState !== MS.Entertainment.UI.Controls.GalleryControl.ReadyState.complete) {
                            var readySignal = new MS.Entertainment.UI.Framework.Signal;
                            var readyStateEventHandler = MS.Entertainment.Utilities.addEventHandlers(this._listView, {loadingstatechanged: function readyStateChanged() {
                                        var readyState = this._listView && this._listView.loadingState;
                                        if (readyState === MS.Entertainment.UI.Controls.GalleryControl.ReadyState.complete)
                                            readySignal.complete()
                                    }.bind(this)});
                            WinJS.Promise.timeout(1000, readySignal.promise);
                            readyPromise = readySignal.promise.then(null, function assertGalleryReady() {
                                MS.Entertainment.UI.Controls.fail("_waitForGalleryReady timed out before gallery was ready. The timeout might need to be extended if this occurs regularly.")
                            }).then(function clearEventHandler() {
                                if (readyStateEventHandler) {
                                    readyStateEventHandler.cancel();
                                    readyStateEventHandler = null
                                }
                            })
                        }
                        return WinJS.Promise.as(readyPromise)
                    }, safeFocusAndEnsureVisible: function safeFocusAndEnsureVisible(index) {
                        if (!this.hasSelectionOrInvocation && index >= 0)
                            this._waitForGalleryReady().done(function galleryReady() {
                                this.setIndexFocus(index);
                                this.ensureVisible(index)
                            }.bind(this), function galleryReadyFailed(){})
                    }, setIndexFocus: function setIndexFocus(index) {
                        if (this._listView)
                            this._listView.currentItem = {
                                index: index, hasFocus: true
                            }
                    }, setVisibleIndexFocus: function setVisibleIndexFocus(index) {
                        if (MS.Entertainment.Utilities.isApp2 && MS.Entertainment.UI.Framework.canMoveFocus(document.activeElement))
                            return;
                        if (this._listView && MS.Entertainment.UI.Framework.canMoveFocus(this._listView._element))
                            this._listView.currentItem = {
                                index: index, hasFocus: true, showFocus: MS.Entertainment.Framework.KeyboardInteractionListener.showKeyboardFocus
                            }
                    }, ensureVisible: function ensureVisible(index) {
                        if (this._listView)
                            this._listView.ensureVisible(index)
                    }, _ensureSelectionInvokedVisible: function _ensureSelectionInvokedVisible(offset) {
                        var selection;
                        var index = -1;
                        offset = offset || 0;
                        if (this._listView && this._listView.selection)
                            selection = this._listView.selection.getIndices();
                        if (selection && selection.length > 0)
                            index = selection[0];
                        if (this.invocationHelper && this.invocationHelper.invokedIndex >= 0)
                            index = this.invocationHelper.invokedIndex;
                        if (index >= 0)
                            this.ensureVisible(index + offset)
                    }, getElementAtIndex: function getElementAtIndex(index) {
                        if (this._listView)
                            return this._listView.elementFromIndex(index);
                        return null
                    }, _releaseMediaContext: function _releaseMediaContext() {
                        if (this._mediaContext && this._mediaContextOwned) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    }, getItemAtIndex: function getItemAtIndex(index) {
                        var promise = null;
                        if (this._listView && index >= 0)
                            promise = this._listView.itemDataSource.itemFromIndex(index);
                        return WinJS.Promise.as(promise)
                    }, getDataObjectAtIndex: function getDataObjectAtIndex(index) {
                        var promise;
                        if (this._listView && index >= 0)
                            return this._listView.itemDataSource.itemFromIndex(index).then(function(item) {
                                    return item.data
                                });
                        else
                            promise = WinJS.Promise.wrap(null);
                        return promise
                    }, getGroupedDataSource: function getGroupedDataSource() {
                        var canGroup = this.canGroup;
                        var groupedDataSource = null;
                        if (canGroup && this.internalDataSource && this.dataSource && this.dataSource.groups) {
                            groupedDataSource = this.internalDataSource;
                            groupedDataSource.groups = new MS.Entertainment.Utilities.VirtualizedDataSource(this.dataSource.groups)
                        }
                        else if (canGroup && this.internalDataSource && !this.useInPlaceHeaders) {
                            var groupData = function groupData(item) {
                                    return !this.grouper ? {} : (this.grouper.useKeyAsData) ? {title: this.grouper.createKey(item)} : this.grouper.createData(item)
                                };
                            var groupKey = function groupKey(item) {
                                    if (this.grouper)
                                        return this.grouper.createKey(item)
                                };
                            groupedDataSource = WinJS.UI.computeDataSourceGroups(this.internalDataSource, groupKey.bind(this), groupData.bind(this));
                            MS.Entertainment.UI.Controls.assert(this.loadingBehavior === MS.Entertainment.UI.Controls.GalleryControl.LoadingBehavior.randomAccess, "ListView only supports randomAccess loading behavior for grouped views")
                        }
                        return groupedDataSource
                    }, _groupByGrouper: function groupByGrouper(item) {
                        return this.grouper.execute(item)
                    }, selectIndex: function selectIndex(index) {
                        if (index && this._listView && this._listView.selection) {
                            var currentSelection = this._listView.selection.getIndices();
                            if (currentSelection.length === 0 || index !== currentSelection[currentSelection.length - 1]) {
                                this._listView.selection.set(index);
                                this._listView.ensureVisible(index)
                            }
                        }
                    }, clearSelection: function clearSelection() {
                        if (this._listView && this._listView.selection)
                            this._listView.selection.clear();
                        this._setSelectedIndex(-1)
                    }, clearInvocation: function clearInvocation() {
                        if (this.invocationHelper)
                            this.invocationHelper.clearInvocation();
                        this._pendingSelectionFromInvoke = -1
                    }, scrollTo: function scrollTo(index) {
                        if (this._listView)
                            this._listView.indexOfFirstVisible = index
                    }, initialize: function initialize() {
                        this.bind("autoSizeMin", this.refreshGalleryWidth.bind(this));
                        this._itemInvoked = this.itemInvoked.bind(this);
                        this._notificationHandler = new MS.Entertainment.UI.Controls.GalleryListDataNotificationHandler(this._dataSourceContentsChanged.bind(this));
                        this._updateRefreshThreshold();
                        this.selectedIndices = [];
                        var navigation;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                            navigation = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        if (navigation)
                            this._navigationBindings = WinJS.Binding.bind(navigation, {currentPage: this._pageChanged.bind(this)});
                        if (!this._delayInitializeSignal)
                            this._delayInitializeSignal = new MS.Entertainment.UI.Framework.Signal
                    }, _delayInitialized: function _delayInitialized() {
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appToolbar)) {
                            var appBarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                            if (this._mediaContextOwned) {
                                this._mediaContext = appBarService.pushDefaultContext();
                                this._mediaContext.collectionFilter = this._collectionFilter
                            }
                            this._updateInvokeHelper();
                            this._updateSelection()
                        }
                        if (this.initialInvoked !== -1 && this.invocationHelper) {
                            var eventDetail = {
                                    itemPromise: this.getItemAtIndex(this.initialInvoked), itemIndex: this.initialInvoked, rerender: true
                                };
                            var domElement = this.getElementAtIndex(this.initialInvoked);
                            this.invocationHelper.invokeItem({
                                srcElement: domElement && domElement.parentElement, detail: eventDetail
                            });
                            this.scrollTo(this.initialInvoked)
                        }
                        MS.Entertainment.Utilities.schedulePromiseNormal(null, "ent:galleryControl:delayInitializeContainers").done(function delayInitializeContainersAndSemanticZoom() {
                            this._delayInitializedChildren = true;
                            if (this.domElement)
                                MS.Entertainment.UI.Framework.applyWithSelector(this.domElement, ".win-surface", function executeDelayInitializeOnList(element) {
                                    this._delayInitializeContainer(element)
                                }.bind(this));
                            this._commitZoomedOutDataSource()
                        }.bind(this), function ignoreCancelError(){});
                        if (this._delayInitializeSignal) {
                            this._delayInitializeSignal.complete();
                            this._delayInitializeSignal = null
                        }
                    }, _delayInitializeContainer: function _delayInitializeContainer(container) {
                        if (!container || !this.isDelayInitialized || !this._delayInitializedChildren || this._unloaded)
                            return;
                        MS.Entertainment.UI.Framework.delayInitializeChildren(container, true)
                    }, _delayHydrateLibraryInfoAsync: function _delayHydrateLibraryInfoAsync(mediaItem) {
                        if (!mediaItem || !this.delayHydrateLibraryId)
                            return WinJS.Promise.as();
                        var wrapperSignal = new MS.Entertainment.UI.Framework.Signal;
                        WinJS.Promise.as(this._delayInitializeSignal && this._delayInitializeSignal.promise).done(wrapperSignal.complete.bind(wrapperSignal), wrapperSignal.error.bind(wrapperSignal));
                        return wrapperSignal.promise.then(function _delayHydrateLibraryInfoAsyncWork() {
                                if (!this._unloaded)
                                    return MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(mediaItem)
                            }.bind(this))
                    }, unload: function unload() {
                        if (this._uiStateHandlers) {
                            this._uiStateHandlers.cancel();
                            this._uiStateHandlers = null
                        }
                        if (this._listBinding) {
                            this._listBinding.release();
                            this._listBinding = null
                        }
                        if (this._notificationHandler) {
                            this._notificationHandler.dispose();
                            this._notificationHandler = null
                        }
                        if (this._focusEventHandler) {
                            this._focusEventHandler.cancel();
                            this._focusEventHandler = null
                        }
                        if (this._navigationBindings) {
                            this._navigationBindings.cancel();
                            this._navigationBindings = null
                        }
                        this._clearListViewEvents();
                        this._clearZoomViewEvents();
                        this._clearMoreThanFirstPageRenderedState();
                        if (this._dragStarted)
                            this._itemDragEndedOrCanceled();
                        if (this._listView && this._listView.dispose)
                            this._listView.dispose();
                        this._listView = null;
                        this._dragBetweenElement = null;
                        this._internalDataSource = null;
                        this._internalZoomedOutDataSource = null;
                        this._clearDataSourceHandlers();
                        this._dataSource = null;
                        this.selectedItems = null;
                        this._clearInvocationHelper();
                        if (this._inplaceGrouper) {
                            this._inplaceGrouper.dispose();
                            this._inplaceGrouper = null
                        }
                        this._clearSelectionHelper();
                        this._selectionHandlers = null;
                        this._releaseMediaContext();
                        MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                    }, freeze: function freeze() {
                        if (this.queryToPause)
                            this.queryToPause.pause();
                        if (MS.Entertainment.Utilities.isApp2) {
                            if (!this._listViewViewport)
                                this._listViewViewport = this.domElement.querySelector(".win-viewport");
                            if (this._listViewViewport)
                                this._savedScrollPosition = this._listViewViewport.scrollLeft
                        }
                        this._mediaControlCommandEnabled = false;
                        MS.Entertainment.UI.Framework.UserControl.prototype.freeze.call(this)
                    }, thaw: function thaw() {
                        MS.Entertainment.UI.Framework.UserControl.prototype.thaw.call(this);
                        if (this.queryToPause)
                            this.queryToPause.unpause();
                        if (MS.Entertainment.Utilities.isApp2 && this._savedScrollPosition && this._listViewViewport) {
                            this._listViewViewport.scrollLeft = this._savedScrollPosition;
                            this._savedScrollPosition = null
                        }
                        this._mediaControlCommandEnabled = true
                    }, _updateRefreshThreshold: function _updateRefreshThreshold() {
                        if (this._notificationHandler) {
                            if (this.grouper)
                                this._notificationHandler.countThreshold = this.grouperItemThreshold;
                            else
                                this._notificationHandler.countThreshold = NaN;
                            this._notificationHandler.minimumListLength = this.minimumListLength
                        }
                    }, _calculateIndexToFocus: function _calculateIndexToFocus() {
                        if (this.restoreFocusOnDataChanges && this._restoreFocusIndex === -1 && (document.activeElement === null || (!this._listView && this._listViewHadFocus))) {
                            this.focusFirstItemOnPageLoad = true;
                            this._listViewHadFocus = false
                        }
                        else if (this._listView && !MS.Entertainment.UI.Framework.focusedElementHasClass(["horizontalPivotButton", "verticalPivotButton"]))
                            this._listViewHadFocus = true;
                        else if (this._listView)
                            this._listViewHadFocus = false
                    }, _clearListViewEvents: function _clearListViewEvents() {
                        if (this._listViewEventHandler) {
                            this._listViewEventHandler.cancel();
                            this._listViewEventHandler = null
                        }
                        if (this._listViewEventCaptureHandler) {
                            this._listViewEventCaptureHandler.cancel();
                            this._listViewEventCaptureHandler = null
                        }
                        if (this._mediaControlEventHandler) {
                            this._mediaControlEventHandler.cancel();
                            this._mediaControlEventHandler = null
                        }
                    }, _clearZoomViewEvents: function _clearZoomViewEvents() {
                        if (this._zoomViewEventHandler) {
                            this._zoomViewEventHandler.cancel();
                            this._zoomViewEventHandler = null
                        }
                    }, _dataSourceUpdated: function _dataSourceUpdated(dataSource, oldDataSource) {
                        this._clearDataSourceHandlers();
                        this.clearSelection();
                        if (this._selectionHelper) {
                            this._selectionHelper.dispose();
                            this._selectionHelper = null
                        }
                        if ((!this._unloaded) && (dataSource || oldDataSource))
                            this._updateDataSourceGrouper(dataSource).then(function finalizeDataSource() {
                                if (this._unloaded || dataSource !== this.dataSource)
                                    return;
                                var returnValue = dataSource || [];
                                if (Array.isArray(returnValue))
                                    if (dataSource)
                                        returnValue = MS.Entertainment.Data.VirtualList.wrapArray(dataSource, {cacheSize: 200});
                                return returnValue
                            }.bind(this)).then(function afterNotArrayGuaranteed(notArray) {
                                if (this._unloaded || dataSource !== this.dataSource)
                                    return;
                                if ("createListBinding" in notArray)
                                    this._internalDataSource = notArray;
                                else
                                    this._internalDataSource = new MS.Entertainment.Utilities.VirtualizedDataSource(notArray);
                                return this._dataSourceContentsChanged()
                            }.bind(this)).then(function updateGroupHints() {
                                if (this._unloaded || dataSource !== this.dataSource)
                                    return;
                                if (dataSource)
                                    this._dataSourceHandlers = MS.Entertainment.Utilities.addEventHandlers(dataSource, {
                                        itemMoved: this._updateSelectionInvokedVisibleAfterMove.bind(this), groupHintsChanged: this._updateGroupHints.bind(this)
                                    });
                                this._updateGroupHints()
                            }.bind(this)).done(null, function ignoreError(error) {
                                MS.Entertainment.UI.Controls.fail("Failed to handle data changes in the gallery control. error: " + (error && error.message))
                            })
                    }, _updateGroupHints: function _updateGroupHints() {
                        if (this._unloaded)
                            return;
                        if (this.canZoom && this.dataSource.groupHints)
                            this._internalZoomedOutDataSource = new MS.Entertainment.Utilities.VirtualizedDataSource(this.dataSource.groupHints);
                        else {
                            this._internalZoomedOutDataSource = null;
                            this.isZoomedOut = false
                        }
                        if (this._zoomView)
                            this._zoomView.locked = !this.isZoomReady;
                        this._commitZoomedOutDataSource();
                        this.notify("canZoom", this.canZoom, false)
                    }, _commitZoomedOutDataSource: function _commitZoomedOutDataSource() {
                        if (!this._unloaded && this.isDelayInitialized && this._firstPageRendered && this._firstPagedDelayInitializedHandled && this._zoomedOutView && (!this.isZoomedOut || !this._zoomedOutView.itemDataSource))
                            this._zoomedOutView.itemDataSource = this._internalZoomedOutDataSource
                    }, _bindToDataSource: function _bindToDataSource(source) {
                        if (this._listBinding) {
                            this._listBinding.release();
                            this._listBinding = null
                        }
                        this._listBinding = source.createListBinding(this._notificationHandler)
                    }, _dataSourceContentsChanged: function _dataSourceContentsChanged(events) {
                        window.msWriteProfilerMark("ent.GalleryControl.DataSourceContentsChanged,StartTM");
                        var countChanged = false;
                        var updateGallery = false;
                        var returnPromise;
                        if (events)
                            events.forEach(function(event) {
                                if (!event)
                                    return;
                                if (event.type === MS.Entertainment.UI.Controls.GalleryListDataNotificationHandler.UpdateType.countChanged) {
                                    countChanged = true;
                                    this._latestCount = event.newValue
                                }
                                if (this._initialItemCount <= 0 && event.type === MS.Entertainment.UI.Controls.GalleryListDataNotificationHandler.UpdateType.reload)
                                    updateGallery = true;
                                if (event.passedThreshold)
                                    updateGallery = true
                            }, this);
                        else
                            updateGallery = true;
                        if (updateGallery) {
                            this._updateCount++;
                            var updateCount = this._updateCount;
                            returnPromise = this.templateSelector.ensureItemTemplatesLoaded().then(function templatesLoaded() {
                                window.msWriteProfilerMark("ent.GalleryControl.TemplatesLoaded");
                                if (this._internalDataSource && this._updateCount === updateCount)
                                    return this._internalDataSource.getCount();
                                else
                                    return 0
                            }.bind(this)).then(function gotCount(count) {
                                if (this._updateCount === updateCount) {
                                    this._initialItemCount = count;
                                    if (this.invocationHelper)
                                        this.invocationHelper.clearInvocation();
                                    window.msWriteProfilerMark("ent.GalleryControl.DataSourceContentsChanged,StopTM");
                                    return this._updateLayoutAsync()
                                }
                            }.bind(this), function loadFailed() {
                                MS.Entertainment.UI.Controls.fail("template load failed")
                            })
                        }
                        else if (countChanged)
                            this._validateSelection();
                        if (events && MS.Entertainment.Utilities.isApp2 && !document.activeElement)
                            WinJS.Promise.timeout(500).then(function delayUpdateFocus() {
                                return this.getFirstVisibleIndex()
                            }.bind(this)).done(function setFocus(index) {
                                this.setVisibleIndexFocus(index)
                            }.bind(this), function noItemToFocus(){});
                        return WinJS.Promise.as(returnPromise)
                    }, groupInfo: function getGroupInfo(userData) {
                        return {
                                enableCellSpanning: true, cellWidth: this.slotSize.width, cellHeight: this.slotSize.height
                            }
                    }, itemInfo: function getItemInfo(item) {
                        var size = {};
                        if (item === this.largeItemIndex) {
                            size.width = (this.largeItemSize && this.largeItemSize.width) ? this.largeItemSize.width : this.itemSize.width;
                            size.height = (this.largeItemSize && this.largeItemSize.height) ? this.largeItemSize.height : this._listView.layout.maxRows * this.itemSize.height + (this._listView.layout.maxRows - 1) * (this.itemMargin.top + this.itemMargin.bottom)
                        }
                        else
                            size.width = this.itemSize.width,
                            size.height = this.itemSize.height;
                        if (this.startNewColumnOnHeaders && this.dataSource && this.dataSource.isHeader && this.dataSource.isHeader(item))
                            size.newColumn = true;
                        return size
                    }, _onSnappedChanged: function _onSnappedChanged(args) {
                        if (args && args.detail && !args.detail.newValue && args.detail.oldValue && this._listView && this.dataSource && !this._firstPageRendered)
                            this._updateLayoutAsync()
                    }, _handleWindowResize: function _handleWindowResize() {
                        if (this.maxRows !== -1)
                            return;
                        var newRowCount = MS.Entertainment.Utilities.getRowCountForResolution();
                        this._updateMaxRows(this._listView, newRowCount);
                        this._updateMaxRows(this._zoomedOutView, newRowCount)
                    }, _updateMaxRows: function _updateMaxRows(listView, newRowCount) {
                        if (listView && listView.layout instanceof WinJS.UI.GridLayout && listView.layout.maxRows !== newRowCount)
                            listView.layout.maxRows = newRowCount
                    }, getFirstVisibleIndex: function getFirstVisibleIndex() {
                        return this._activeListView ? WinJS.Promise.as(this._activeListView.indexOfFirstVisible) : WinJS.Promise.wrapError(new Error("There is no first item, as there is no active list view"))
                    }, getLastVisibleIndex: function getLastVisibleIndex() {
                        return this._activeListView ? WinJS.Promise.as(this._activeListView.indexOfLastVisible) : WinJS.Promise.wrapError(new Error("There is no last item, as there is no active list view"))
                    }, getSelection: function getSelection() {
                        return this._listView ? this._listView.selection : null
                    }, setFirstVisibleIndex: function setFirstVisibleIndex(index) {
                        if (this._activeListView)
                            this._activeListView.indexOfFirstVisible = index
                    }, setReadyStateCallback: function setReadyStateCallback(callback) {
                        this._readyStateCallback = callback
                    }, setSelectedIndexChangedCallback: function setSelectedIndexChangedCallback(callback) {
                        this._selectedIndexChangedCallback = callback
                    }, getCurrentItem: function getCurrentItem() {
                        if (this._activeListView)
                            return this._activeListView.currentItem;
                        return null
                    }, setCurrentItem: function setCurrentItem(item) {
                        if (this._activeListView)
                            this._activeListView.currentItem = item
                    }, createItemRenderer: function createItemRenderer(templateType) {
                        templateType = templateType || MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item;
                        var that = this;
                        var restoreSetImmediateModeTimer = null;
                        var placeholders = new MS.Entertainment.UI.Framework.ReferenceMap;
                        var visibleItemCount = 0;
                        var renderedItemCount = 0;
                        var delayedInitializedItemCount = 0;
                        var isItemRenderer = templateType === MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.item;
                        var usePlaceholder = (this.orientation === MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical) || MS.Entertainment.Utilities.isMusicApp2;
                        var isListLayout = isItemRenderer ? this.layout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list : this.finalZoomedOutLayout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                        var traceId = 0;
                        this._moreThanFirstPageRendered = false;
                        var sendFirstPageRenderedIfNeeded = function sendFirstPageRenderedIfNeeded(container) {
                                var activeListView = that._activeListView;
                                if (activeListView) {
                                    if (!visibleItemCount && activeListView.indexOfLastVisible >= 0 && activeListView.indexOfFirstVisible >= 0)
                                        visibleItemCount = (activeListView.indexOfLastVisible - activeListView.indexOfFirstVisible) + 1;
                                    if (renderedItemCount === visibleItemCount && that._sendFirstPageRenderedEvent())
                                        WinJS.Promise.timeout(2500).done(function deferAria() {
                                            if (container && !container.hasAttribute("role") && activeListView && activeListView._view && activeListView._view.deferAriaSetup)
                                                activeListView._view.deferAriaSetup(visibleItemCount, 0, visibleItemCount - 1)
                                        });
                                    else if (renderedItemCount > visibleItemCount)
                                        that._setMoreThanFirstPageRenderedState()
                                }
                            };
                        var handlePlaceholderRendered = function handlePlaceholderRendered(container) {
                                var activeListView = that._activeListView;
                                if (activeListView) {
                                    renderedItemCount++;
                                    sendFirstPageRenderedIfNeeded(container)
                                }
                            };
                        return function galleryViewItemRenderer(itemPromise, recycle) {
                                var container = document.createElement("div");
                                var placeholderRendered;
                                var data;
                                var item;
                                var template;
                                var containerReadySignal = new MS.Entertainment.UI.Framework.Signal;
                                traceId++;
                                var templateTraceId = templateType + ":" + traceId;
                                container.listViewItemContainer = true;
                                window.msWriteProfilerMark("ent:GalleryControl:DataAcquisition:" + templateTraceId + ",StartTM");
                                return {
                                        element: containerReadySignal.promise, renderComplete: itemPromise.then(function selectItemTemplate(itemPromise) {
                                                window.msWriteProfilerMark("ent:GalleryControl:DataAcquisition:" + templateTraceId + ",StopTM");
                                                window.msWriteProfilerMark("ent:GalleryControl:DataAcquired:" + itemPromise.index + ":" + templateTraceId);
                                                item = itemPromise;
                                                data = that.processItemData(item.data || item, item.index, item.key);
                                                window.msWriteProfilerMark("ent:GalleryControl:SelectTemplate:" + templateTraceId + ",StartTM");
                                                return that.templateSelector.selectTemplate(item, templateType).then(function(resultTemplate) {
                                                        template = resultTemplate;
                                                        window.msWriteProfilerMark("ent:GalleryControl:SelectTemplate:" + templateTraceId + ",StopTM")
                                                    })
                                            }).then(function renderUsablePlaceholder() {
                                                if (!template) {
                                                    MS.Entertainment.UI.Controls.fail("Template was not found for the given item");
                                                    return item.ready
                                                }
                                                if (usePlaceholder) {
                                                    var placeholder = placeholders.get(template);
                                                    if (placeholder && placeholder.renderer) {
                                                        window.msWriteProfilerMark("ent:GalleryControl:RenderingListItemPlaceholder:" + templateTraceId + ",StartTM");
                                                        placeholderRendered = true;
                                                        placeholder.renderer.render(container, data);
                                                        window.msWriteProfilerMark("ent:GalleryControl:RenderingListItemPlaceholder:" + templateTraceId + ",StopTM")
                                                    }
                                                    containerReadySignal.complete(container)
                                                }
                                                if (container.parentElement && isItemRenderer)
                                                    WinJS.Utilities.removeClass(container.parentElement, "invoked");
                                                if (usePlaceholder && placeholderRendered) {
                                                    window.msWriteProfilerMark("ent:GalleryControl:ItemReadyPlaceholder:" + templateTraceId + ",StartTM");
                                                    handlePlaceholderRendered(container);
                                                    return item.ready
                                                }
                                            }).then(function renderActualTemplate() {
                                                if (usePlaceholder && placeholderRendered)
                                                    window.msWriteProfilerMark("ent:GalleryControl:ItemReadyPlaceholder:" + templateTraceId + ",StopTM");
                                                if (placeholderRendered)
                                                    container.innerHTML = String.empty;
                                                window.msWriteProfilerMark("ent:GalleryControl:RenderingListItemTemplate:" + templateTraceId + ",StartTM");
                                                return template.render(data, container).then(function() {
                                                        window.msWriteProfilerMark("ent:GalleryControl:RenderingListItemTemplate:" + templateTraceId + ",StopTM");
                                                        if (!usePlaceholder)
                                                            containerReadySignal.complete(container);
                                                        if (!usePlaceholder || !placeholderRendered) {
                                                            window.msWriteProfilerMark("ent:GalleryControl:ItemReadyNoPlaceholder:" + templateTraceId + ",StartTM");
                                                            handlePlaceholderRendered(container);
                                                            return item.ready
                                                        }
                                                    })
                                            }).then(function delayInitializeControls() {
                                                if (!usePlaceholder || !placeholderRendered)
                                                    window.msWriteProfilerMark("ent:GalleryControl:ItemReadyNoPlaceholder:" + templateTraceId + ",StopTM");
                                                sendFirstPageRenderedIfNeeded();
                                                that._raisePanelReadyOnce();
                                                if (usePlaceholder && that._firstPagedRenderedEventDispatched && container.parentElement && container.parentElement.parentElement) {
                                                    var placeholder = placeholders.get(template);
                                                    if (placeholder === undefined) {
                                                        var placeholderLoadingState = {renderer: null};
                                                        placeholders.set(template, placeholderLoadingState);
                                                        window.requestAnimationFrame(function galleryControl_generatePlaceholder() {
                                                            placeholderLoadingState.renderer = MS.Entertainment.UI.Framework.getPlaceholderForElement(container)
                                                        })
                                                    }
                                                }
                                                if (that._firstPagedRenderedEventDispatched) {
                                                    if (restoreSetImmediateModeTimer) {
                                                        restoreSetImmediateModeTimer.cancel();
                                                        restoreSetImmediateModeTimer = null
                                                    }
                                                    MS.Entertainment.UI.Framework.setImmediateMode = MS.Entertainment.UI.Framework.setImmediateModes.panning;
                                                    restoreSetImmediateModeTimer = WinJS.Promise.timeout(MS.Entertainment.UI.Controls.GalleryControl._restoreSetImmediateModeTime).then(function() {
                                                        MS.Entertainment.UI.Framework.setImmediateMode = MS.Entertainment.UI.Framework.setImmediateModes.normal
                                                    })
                                                }
                                                that._delayInitializeContainer(container);
                                                if (container.parentElement)
                                                    container.parentElement.listViewItemContainer = true;
                                                return that._delayHydrateLibraryInfoAsync(item.data)
                                            }).then(function updateInvokedState() {
                                                var eventDetail;
                                                var itemIsInvoked = (that.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline && that.invocationHelper && that.invocationHelper.invokedKey === item.key) || that.initialInvoked === item.index;
                                                if (itemIsInvoked && isItemRenderer && that.invocationHelper) {
                                                    eventDetail = {
                                                        itemPromise: itemPromise, itemIndex: item.index, rerender: true
                                                    };
                                                    if (!container.parentElement || !container.parentElement.parentElement)
                                                        that.invocationHelper.invokeItem({
                                                            srcElement: container.parentElement || container, detail: eventDetail
                                                        });
                                                    else {
                                                        var domEvent = document.createEvent("Event");
                                                        domEvent.initEvent("iteminvoked", true, true);
                                                        domEvent.detail = eventDetail;
                                                        container.parentElement.dispatchEvent(domEvent)
                                                    }
                                                    if (that.initialInvoked !== -1) {
                                                        if (that.scrollToOnInvoked)
                                                            that.scrollTo(that.initialInvoked);
                                                        that.setIndexFocus(that.initialInvoked)
                                                    }
                                                    else
                                                        that.initialInvoked = -1
                                                }
                                                delayedInitializedItemCount++;
                                                if (delayedInitializedItemCount === visibleItemCount)
                                                    that._handleFirstPageDelayedInitialized();
                                                return item
                                            })
                                    }
                            }
                    }, createHeaderRenderer: function createHeaderRenderer(templateType) {
                        var that = this;
                        return function galleryViewRenderGroup(groupPromise) {
                                var container = document.createElement("div");
                                var groupData;
                                if (that.headerClass)
                                    WinJS.Utilities.addClass(container, that.headerClass);
                                return {
                                        element: container, renderComplete: groupPromise.then(function selectGroupTemplate(group) {
                                                groupData = group.data;
                                                return that.templateSelector.getTemplateProvider(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.header)
                                            }).then(function renderGroupTemplate(args) {
                                                if (!args)
                                                    return;
                                                return args.render(that.processItemData(groupData), container)
                                            })
                                    }
                            }
                    }, _updateLayoutAsync: function _updateLayoutAsync() {
                        if (this._unloaded)
                            return;
                        var cancelDragPromise;
                        if (this._dragStarted)
                            cancelDragPromise = this._cancelItemDrag().then(function itemDragCanceled() {
                                this._itemDragEndedOrCanceled();
                                this._updateLayout()
                            }.bind(this));
                        else
                            this._updateLayout();
                        return WinJS.Promise.as(cancelDragPromise)
                    }, _updateLayout: function _updateLayout() {
                        var that = this;
                        var dataSource = this._internalDataSource;
                        var loadingBehavior = this.loadingBehavior;
                        var zoomedInContainer = document.createElement("div");
                        var zoomedOutContainer;
                        var parentContainer;
                        var zoomViewContainer;
                        var emptyTemplateProvider;
                        var debugId = this.debugId || "gallery";
                        if (this._unloaded)
                            return;
                        this._calculateIndexToFocus();
                        this._clearListViewEvents();
                        this._clearZoomViewEvents();
                        this._firstPageRendered = false;
                        if (this._zoomedOutView && this._zoomedOutView.dispose)
                            this._zoomedOutView.dispose();
                        this._zoomedOutView = null;
                        if (this._listView && this._listView.dispose) {
                            if (MS.Entertainment.Utilities.isApp2)
                                window.removeEventListener("gesturedisengaged", this._listView._handleGestureDisengagedBind);
                            this._listView.dispose()
                        }
                        this._listView = null;
                        this._dragBetweenElement = null;
                        if (this._zoomView && this._zoomView.dispose)
                            this._zoomView.dispose();
                        this._zoomView = null;
                        window.msWriteProfilerMark("ent:GalleryControl.ListViewCreated,StartTM");
                        if (this.selectionStyleFilled)
                            WinJS.Utilities.addClass(zoomedInContainer, MS.Entertainment.UI.Controls.GalleryControl.selectionFilledClass);
                        if (this.canZoom) {
                            zoomViewContainer = document.createElement("div");
                            zoomedOutContainer = document.createElement("div");
                            zoomViewContainer.appendChild(zoomedInContainer);
                            zoomViewContainer.appendChild(zoomedOutContainer);
                            parentContainer = zoomViewContainer;
                            zoomViewContainer.id = debugId + "_zoomViewContainer";
                            zoomedOutContainer.id = debugId + "_zoomedOutContainer";
                            zoomedInContainer.id = debugId + "_zoomedInContainer";
                            WinJS.Utilities.addClass(zoomedInContainer, "ent-zoomedin");
                            WinJS.Utilities.addClass(zoomedOutContainer, "ent-zoomedout")
                        }
                        else {
                            parentContainer = zoomedInContainer;
                            zoomedInContainer.id = debugId
                        }
                        if (this.listViewClassName)
                            WinJS.Utilities.addClass(zoomedInContainer, this.listViewClassName);
                        if (this.blockDelayInitializeOfChildren)
                            WinJS.Utilities.addClass(parentContainer, "ent-delayInitializeBlock");
                        if (this.domElement) {
                            MS.Entertainment.Utilities.empty(this.domElement);
                            this.domElement.appendChild(parentContainer)
                        }
                        var visibleItemCount = 0;
                        var renderedItemCount = 0;
                        that._firstPagedRenderedEventDispatched = false;
                        this._firstPagedDelayInitializedHandled = false;
                        that._raisePanelResetOnce();
                        if (this.userGatedGallery) {
                            this.renderTemplate(this.userGatedGalleryTemplate, MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.userGatedGallery, this.userGatedGalleryModel, parentContainer);
                            return
                        }
                        else if (this.syncScreen) {
                            this.renderTemplate(this.syncScreenTemplate, MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.syncScreen, this.syncScreenModel, parentContainer);
                            this.syncScreenModel.action.execute();
                            return
                        }
                        else if (this.raisePanelResetEvents && this.dataSource === null)
                            return;
                        else if (this.syncScreenTemplate && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.userUsageData))
                            this._raisePanelSyncing(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.userUsageData).isSyncing);
                        if ((this.dataSource === null) || (this._initialItemCount < this.minimumListLength)) {
                            this.renderTemplate(this.emptyGalleryTemplate, MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.emptyGallery, this.emptyGalleryModel, parentContainer);
                            if (that.dataSource !== null) {
                                that._bindToDataSource(dataSource);
                                dataSource.invalidateAll()
                            }
                            if (!this._unloaded && !!this.dataSource) {
                                that._sendFirstPageRenderedEvent();
                                that._handleFirstPageDelayedInitialized()
                            }
                            return
                        }
                        else
                            that._raisePanelEmpty(false);
                        var groupedDataSource = this.getGroupedDataSource();
                        this._bindToDataSource(groupedDataSource || dataSource);
                        var layoutOptions = this.layoutOptions || {};
                        layoutOptions.horizontal = this.horizontal;
                        layoutOptions.groupHeaderPosition = this.headerPosition === "inline" ? "left" : this.headerPosition;
                        if (this.maxRows >= 0)
                            layoutOptions.maxRows = this.maxRows;
                        else if (this.maxRows < 0)
                            layoutOptions.maxRows = MS.Entertainment.Utilities.getRowCountForResolution();
                        if (this.multiSize) {
                            layoutOptions.groupInfo = this.groupInfo.bind(this);
                            layoutOptions.itemInfo = this.itemInfo.bind(this)
                        }
                        var isListLayout = this.layout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                        var layout;
                        if (this.shrinkAndStayHeader)
                            layout = isListLayout ? new MS.Entertainment.UI.Controls.ShrinkAndStayListLayout(layoutOptions) : new MS.Entertainment.UI.Controls.ShrinkAndStayGridLayout(layoutOptions);
                        else
                            layout = isListLayout ? new WinJS.UI.ListLayout(layoutOptions) : new WinJS.UI.GridLayout(layoutOptions);
                        if (this.backdropColor && typeof layout.dragOver !== "function") {
                            layout.backdropColor = this.backdropColor;
                            layout.disableBackdrop = (this.backdropColor === "transparent")
                        }
                        if (this.itemsReorderable && layout.dragOver && layout.dragLeave) {
                            layout.dragOver = this._handleDragOver.bind(this);
                            layout.dragLeave = this._handleDragLeave.bind(this)
                        }
                        if (this.orientation)
                            layout.orientation = this.orientation;
                        this._listView = new WinJS.UI.ListView(zoomedInContainer, {
                            resetItem: MS.Entertainment.UI.Controls.GalleryControl.resetItem, layout: layout, itemDataSource: groupedDataSource || dataSource, groupDataSource: groupedDataSource && groupedDataSource.groups, selectionMode: MS.Entertainment.Utilities.isApp2 ? MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.none : this.selectionMode, tapBehavior: this.tap, itemsDraggable: this.itemsDraggable, swipeBehavior: MS.Entertainment.Utilities.isApp2 ? MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.none : this.swipeBehavior, loadingBehavior: loadingBehavior, pagesToLoad: this.pagesToLoad, groupHeaderTemplate: this.createHeaderRenderer(), itemTemplate: this.createItemRenderer(), itemsReorderable: this.itemsReorderable
                        });
                        WinJS.Utilities.addClass(zoomedInContainer, "win-disposable");
                        zoomedInContainer.setAttribute("data-win-control", "WinJS.UI.ListView");
                        if (zoomedOutContainer) {
                            var isZoomedOutListLayout = this.finalZoomedOutLayout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                            var zoomedOutLayout;
                            var zoomedOutOptions;
                            if (this.backdropColor && typeof layout.dragOver !== "function")
                                zoomedOutOptions = {
                                    backdropColor: this.backdropColor, disableBackdrop: (this.backdropColor === "transparent")
                                };
                            zoomedOutLayout = isZoomedOutListLayout ? new WinJS.UI.ListLayout(zoomedOutOptions) : new WinJS.UI.GridLayout(zoomedOutOptions);
                            this._zoomedOutView = new WinJS.UI.ListView(zoomedOutContainer, {
                                resetItem: MS.Entertainment.UI.Controls.GalleryControl.resetItem, zoomedOut: this.initialZoomedOut, layout: zoomedOutLayout, itemsDraggable: false, selectionMode: MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.none, swipeBehavior: MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.none, itemTemplate: this.createItemRenderer(this.finalZoomedOutTemplateType)
                            });
                            WinJS.Utilities.addClass(zoomedOutContainer, "win-disposable");
                            zoomedOutContainer.setAttribute("data-win-control", "WinJS.UI.ListView")
                        }
                        if (zoomViewContainer) {
                            this._zoomView = new WinJS.UI.SemanticZoom(zoomViewContainer);
                            this._zoomView.locked = !this.isZoomReady;
                            WinJS.Utilities.addClass(zoomViewContainer, "win-disposable");
                            zoomViewContainer.setAttribute("data-win-control", "WinJS.UI.SemanticZoom")
                        }
                        window.msWriteProfilerMark("ent:GalleryControl.ListViewCreated,StopTM");
                        if (this.initialSelected !== -1) {
                            this._listView.selection.set(this.initialSelected);
                            this._setSelectedIndex(this.initialSelected);
                            this.initialSelected = -1
                        }
                        if (this.initialInvoked >= 0) {
                            this.ensureVisible(this.initialInvoked);
                            this.setIndexFocus(this.initialInvoked)
                        }
                        else if (this.initialVisible >= 0) {
                            this.ensureVisible(this.initialVisible);
                            this.setIndexFocus(this.initialVisible)
                        }
                        this.refreshGalleryWidth();
                        if (this.forceInteractive) {
                            var currentMode = this._listView._mode;
                            currentMode.isInteractive = this._isElementInteractive.bind(this)
                        }
                        if (this.handleFocus || this.onFocusListviewClass) {
                            if (!this._focusEventHandler || this.onFocusListviewClass)
                                this._focusEventHandler = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                                    focusin: this._onFocusin.bind(this), focusout: this._onFocusout.bind(this)
                                })
                        }
                        else if (this._focusEventHandler) {
                            this._focusEventHandler.cancel();
                            this._focusEventHandler = null
                        }
                        var _cachedSelectedItemsCount = 0;
                        var handleSelectionChanging = function(event) {
                                if (!event || !event.detail || !event.detail.newSelection) {
                                    MS.Entertainment.UI.Controls.fail("Invalid event passed to handlerSelectionChanging");
                                    return
                                }
                                var nonSourceIndices;
                                var oldIndices;
                                var newIndices;
                                var equal;
                                if (event.detail.newSelection.count()) {
                                    if (that.dataSource)
                                        nonSourceIndices = that.dataSource.nonSourceIndices;
                                    that._userSelectedEverything = that.selectionMode === MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi && (event.detail.newSelection.isEverything() || (that._userSelectedEverything && event.detail.newSelection.count() >= _cachedSelectedItemsCount));
                                    _cachedSelectedItemsCount = event.detail.newSelection.count();
                                    if (nonSourceIndices && nonSourceIndices.length) {
                                        event.detail.newSelection.remove(nonSourceIndices);
                                        oldIndices = that._listView.selection.getIndices();
                                        newIndices = event.detail.newSelection.getIndices()
                                    }
                                    if (that.maxSelectionCount >= 0 && that.maxSelectionCount < _cachedSelectedItemsCount) {
                                        oldIndices = oldIndices || that._listView.selection.getIndices();
                                        newIndices = newIndices || event.detail.newSelection.getIndices();
                                        if (newIndices && newIndices.length > that.maxSelectionCount) {
                                            newIndices = newIndices.slice(0, that.maxSelectionCount);
                                            event.detail.newSelection.set(newIndices)
                                        }
                                    }
                                    if (newIndices && oldIndices && newIndices.length === oldIndices.length) {
                                        equal = true;
                                        for (var index in newIndices)
                                            if (newIndices[index] !== oldIndices[index]) {
                                                equal = false;
                                                break
                                            }
                                    }
                                }
                                else
                                    that._userSelectedEverything = false;
                                if (equal)
                                    event.preventDefault()
                            };
                        var handleSelectionChanged = function(event) {
                                that._updateSelection();
                                that._sendFirstPageRenderedEventOnInteraction()
                            };
                        var initializeSelection = true;
                        var handleReadyStateChanged = function(eventObject) {
                                var readyState = that._listView ? that._listView.loadingState : MS.Entertainment.UI.Controls.GalleryControl.ReadyState.itemsLoading;
                                if (readyState === MS.Entertainment.UI.Controls.GalleryControl.ReadyState.complete) {
                                    this._eventProvider.traceGalleryControl_Load_End();
                                    this._sendFirstPageRenderedEvent();
                                    if (initializeSelection) {
                                        initializeSelection = false;
                                        this._raisePanelReadyOnce()
                                    }
                                    var lastNavigationWasPage = true;
                                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                                        lastNavigationWasPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).lastNavigationWasPage;
                                    if ((this.focusFirstItemOnPageLoad && lastNavigationWasPage) || (this.restoreFocusOnDataChanges && this._restoreFocusIndex !== -1)) {
                                        this.focusFirstItemOnPageLoad = false;
                                        MS.Entertainment.Utilities.schedulePromiseBelowNormal().then(function focusFirstElement() {
                                            if (this._listView) {
                                                if (document.activeElement && this._listView.element.contains(document.activeElement))
                                                    return;
                                                var index = 0;
                                                if (this._restoreFocusIndex !== -1) {
                                                    index = this._restoreFocusIndex;
                                                    this._restoreFocusIndex = -1
                                                }
                                                else if (this.dataSource && this.dataSource.indexFromSourceIndex)
                                                    index = this.dataSource.indexFromSourceIndex(0);
                                                this.setVisibleIndexFocus(index)
                                            }
                                        }.bind(this))
                                    }
                                    that.refreshGalleryWidth()
                                }
                                else {
                                    if (this.preventResizeJitter && readyState === MS.Entertainment.UI.Controls.GalleryControl.ReadyState.viewPortLoaded && this._listView) {
                                        var surfaceHeight = this.calculateHeightToShowAllItems();
                                        if (surfaceHeight && this._listView._element && this._listView._element.style)
                                            this._listView._element.style.height = surfaceHeight + "px"
                                    }
                                    this._eventProvider.traceGalleryControl_LoadingState_Changed(readyState)
                                }
                                this._raiseGalleryReadyState(readyState, eventObject)
                            }.bind(this);
                        var handleContentAnimating = function(eventObject) {
                                eventObject.preventDefault();
                                WinJS.UI.Animation.enterContent(eventObject.currentTarget)
                            }.bind(this);
                        var handleClick = function handleClick(event) {
                                if (this.isZoomReady && event.srcElement && WinJS.Utilities.hasClass(event.srcElement, MS.Entertainment.UI.Controls.GalleryControl.zoomedOutClass)) {
                                    this.isZoomedOut = true;
                                    this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.headerClick
                                }
                            }.bind(this);
                        var handleDoubleClick = function handleDoubleClick(event) {
                                if (this.doubleClickBehavior === MS.Entertainment.UI.Controls.GalleryControl.DoubleClickBehavior.play && this.doubleClickHelper)
                                    this.doubleClickHelper.execute();
                                else if (this.doubleClickBehavior === MS.Entertainment.UI.Controls.GalleryControl.DoubleClickBehavior.action)
                                    if (this.doubleClickActionOptions) {
                                        event.preventDefault();
                                        event.stopPropagation();
                                        var actionOptions = this.doubleClickActionOptions || {};
                                        var actionParameter = this.doubleClickActionOptions.parameter || {};
                                        actionParameter.data = data.data;
                                        actionParameter.filter = actionOptions.filter;
                                        var action = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(actionOptions.id);
                                        action.parameter = actionParameter;
                                        action.automationId = action.automationId || this.doubleClickActionOptions.automationId;
                                        action.execute()
                                    }
                            }.bind(this);
                        var handleMouseDown = function handleMouseDown(event) {
                                this._pendingSelectionFromInvoke = -1;
                                var isInteractive = this._listView._mode ? this._listView._mode.isInteractive : null;
                                var downIndex = this._listView.indexOfElement(event.srcElement);
                                var downItemKey;
                                var validIndex = false;
                                if (this.dataSource)
                                    if (this.dataSource.keyFromIndex) {
                                        downItemKey = this.dataSource.keyFromIndex(downIndex);
                                        validIndex = !!downItemKey
                                    }
                                    else
                                        validIndex = true;
                                if (validIndex)
                                    if (!this.isZoomReady && this.dataSource && this.dataSource.isHeader && this.dataSource.isHeader(downIndex))
                                        event.stopPropagation();
                                    else if (downIndex >= 0 && this.invocationHelper && this.invocationHelper.invokedIndex >= 0 && downIndex !== this.invocationHelper.invokedIndex && downItemKey !== this.invocationHelper.invokedKey && (!isInteractive || !isInteractive(event.srcElement))) {
                                        if (this.selectionMode === MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi)
                                            this._pendingSelectionFromInvoke = this.invocationHelper.invokedIndex;
                                        this.invocationHelper.clearInvocation()
                                    }
                            }.bind(this);
                        var handleKeyDown = function handleKeyDown(event) {
                                if (!event)
                                    return;
                                if (this.isZoomReady && event.keyCode === WinJS.Utilities.Key.invokeSemanticZoom) {
                                    this.isZoomedOut = !this.isZoomedOut;
                                    if (MS.Entertainment.Utilities.isApp2)
                                        this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.keyUp;
                                    else
                                        this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.keyDown
                                }
                                else if (event.ctrlKey && !event.altKey && !event.shiftKey && event.keyCode === WinJS.Utilities.Key.a && !this.allowSelectAll)
                                    event.stopPropagation();
                                else if (this._isElementInteractive(event.target) && this.invocationHelper && this._listView.currentItem && this._listView.currentItem.index === this.invocationHelper.invokedIndex && this.layout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list && (event.keyCode === WinJS.Utilities.Key.downArrow || event.keyCode === WinJS.Utilities.Key.upArrow))
                                    this._ignoreNextInteractiveCheck = true;
                                else if (this.invocationHelper && this._listView.currentItem && this._listView.currentItem.index === this.invocationHelper.invokedIndex && event.keyCode === WinJS.Utilities.Key.enter && WinJS.Utilities.hasClass(event.srcElement, "win-item"))
                                    handleDoubleClick(event);
                                else if (this.selectionMode === MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.none && event.keyCode === WinJS.Utilities.Key.space && WinJS.Utilities.hasClass(event.srcElement, "win-item"))
                                    event.srcElement.click()
                            }.bind(this);
                        if (this.layout === MS.Entertainment.UI.Controls.GalleryControl.Layout.list) {
                            var originalListViewResize = this._listView._onResize;
                            this._listView._onResize = function onListViewResize() {
                                if (this._listView && this.visibility)
                                    originalListViewResize.apply(this._listView, arguments)
                            }.bind(this)
                        }
                        var handleScrolledFocusChange = function handleScrolledFocusChange(event) {
                                if (this.ensureNextItemVisibleCount) {
                                    this.setVisibleIndexFocus(event.detail.newFocus);
                                    this.ensureVisible(event.detail.newFocus + this.ensureNextItemVisibleCount)
                                }
                                this.dispatchEvent("scrolledFocusChanged", {
                                    newValue: event.detail.newFocus, oldValue: event.detail.oldFocus
                                });
                                this._updateScrollStyles()
                            }.bind(this);
                        var listViewEventHandlers = {
                                loadingstatechanged: handleReadyStateChanged, selectionchanged: handleSelectionChanged, selectionchanging: handleSelectionChanging, iteminvoked: this._itemInvoked, keyboardnavigating: handleScrolledFocusChange
                            };
                        if (this._isDragAndDropEnabled()) {
                            listViewEventHandlers.itemdragstart = this._itemDragStarted.bind(this);
                            listViewEventHandlers.itemdragend = this._itemDragEndedOrCanceled.bind(this)
                        }
                        if (this.itemsReorderable)
                            listViewEventHandlers.itemdragbetween = this._handleItemDragBetween.bind(this);
                        this._listViewEventHandler = MS.Entertainment.Utilities.addEventHandlers(this._listView, listViewEventHandlers);
                        var keyEvent = MS.Entertainment.Utilities.isApp1 ? "keydown" : "keyup";
                        if (this._zoomView) {
                            var handleZoomPointerDown = this._zoomingIn.bind(this);
                            var zoomEventHandlers = {
                                    MSPointerDown: handleZoomPointerDown, pointerDown: handleZoomPointerDown, zoomchanged: this._zoomChanged.bind(this)
                                };
                            zoomEventHandlers[keyEvent] = this._zoomingIn.bind(this);
                            this._zoomViewEventHandler = MS.Entertainment.Utilities.addEventHandlers(this._zoomView, zoomEventHandlers)
                        }
                        if (layout && (!layout.dragOver || (typeof layout.dragOver !== "function")))
                            this._listView.oncontentanimating = handleContentAnimating;
                        var listViewCaptureEventHandlers = {
                                MSPointerDown: handleMouseDown, pointerdown: handleMouseDown, click: handleClick, dblclick: handleDoubleClick
                            };
                        listViewCaptureEventHandlers[keyEvent] = handleKeyDown;
                        if (this._isDragAndDropEnabled())
                            listViewCaptureEventHandlers.dragstart = this._onDragStartCapture.bind(this);
                        this._listViewEventCaptureHandler = MS.Entertainment.Utilities.addEventHandlers(this._listView, listViewCaptureEventHandlers, true);
                        var systemMediaTransportControls = WinJS.Utilities.getMember("Windows.Media.SystemMediaTransportControls");
                        if (MS.Entertainment.Utilities.isApp2 && systemMediaTransportControls && this.allowZoom) {
                            var systemMediaTransportControlsView = systemMediaTransportControls.getForCurrentView();
                            var systemMediaButtons = Windows.Media.SystemMediaTransportControlsButton;
                            systemMediaTransportControlsView.isViewEnabled = true;
                            systemMediaTransportControlsView.displayUpdater.update();
                            this._mediaControlEventHandler = MS.Entertainment.Utilities.addEventHandlers(systemMediaTransportControlsView, {buttonpressed: function buttonpressed(evt) {
                                    if (!this._mediaControlCommandEnabled)
                                        return;
                                    if (evt && evt.detail)
                                        evt.detail.forEach(function eventIterator(event) {
                                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                            switch (event.button) {
                                                case systemMediaButtons.view:
                                                    if (this.isZoomReady) {
                                                        this.isZoomedOut = !this.isZoomedOut;
                                                        this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.mediaTransportControl
                                                    }
                                                    break
                                            }
                                        }.bind(this))
                                }.bind(this)})
                        }
                    }, renderTemplate: function renderTemplate(template, templateType, galleryModel, parentContainer) {
                        if (template)
                            this.templateSelector.getTemplateProvider(templateType).then(function renderTemplate(templateProvider) {
                                if (templateProvider)
                                    templateProvider.render(galleryModel, parentContainer).done(function focusFirstItem() {
                                        MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(parentContainer, 250).done(function focusFirstItemTryTwo() {
                                            MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(parentContainer, 250).done(function focusFirstItemTryThree() {
                                                MS.Entertainment.UI.Framework.tryAndFocusElementInSubTreeWithTimer(parentContainer, 250)
                                            })
                                        })
                                    });
                                this._raisePanelReadyOnce();
                                this._raiseGalleryReadyState(MS.Entertainment.UI.Controls.GalleryControl.ReadyState.complete);
                                this._raisePanelEmpty(true)
                            }.bind(this));
                        else {
                            this._raisePanelReadyOnce();
                            this._raiseGalleryReadyState(MS.Entertainment.UI.Controls.GalleryControl.ReadyState.complete)
                        }
                    }, _isElementInteractive: function _isElementInteractive(element) {
                        var isInteractive = element && !this._ignoreNextInteractiveCheck && this.forceInteractive && ((element.type === "button") || (element.winControl && element.winControl.isInteractive));
                        this._ignoreNextInteractiveCheck = false;
                        return isInteractive
                    }, _zoomingInIndexPromise: null, _zoomingIn: function _zoomingIn(event) {
                        if (this._disposed)
                            return;
                        var downIndex;
                        if (MS.Entertainment.Utilities.isApp2 && this.isZoomedOut && this._zoomView && this._zoomView._zoom)
                            switch (event.keyCode) {
                                case WinJS.Utilities.Key.dismissButton:
                                case WinJS.Utilities.Key.backspace:
                                    this._zoomView._zoom(false);
                                    event.stopPropagation();
                                    event.stopImmediatePropagation();
                                    return
                            }
                        if (this._zoomedOutView && this._zoomedOutView.itemDataSource && this.isZoomedOut && event && event.srcElement)
                            downIndex = this._zoomedOutView.indexOfElement(event.srcElement);
                        if (downIndex >= 0)
                            this._zoomingInIndexPromise = this._zoomedOutView.itemDataSource.itemFromIndex(downIndex);
                        else
                            this._zoomingInIndexPromise = null;
                        if (WinJS.Utilities.hasClass(event.target, "win-semanticzoom-button"))
                            this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.minusClick
                    }, _semanticZoomInit: function _semanticZoomInit() {
                        if (!this._semanticZoomInitType)
                            this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.pinch;
                        MS.Entertainment.Utilities.Telemetry.logSemanticZoom(this._semanticZoomInitType);
                        this._semanticZoomInitType = null
                    }, _zoomChanged: function _zoomChanged(event) {
                        if (this._disposed)
                            return;
                        msWriteProfilerMark("ent:GalleryControl:zoomedChanged:" + event.detail);
                        this.isZoomedOut = event.detail;
                        if (this.isZoomedOut)
                            this._semanticZoomInit();
                        this.clearInvocation();
                        this.clearSelection();
                        if (this.queryToPause)
                            if (this.isZoomedOut)
                                this.queryToPause.pause();
                            else
                                WinJS.Promise.timeout(5000).done(function() {
                                    if (this.queryToPause)
                                        this.queryToPause.unpause()
                                }.bind(this));
                        this._commitZoomedOutDataSource();
                        if (this._zoomingInIndexPromise) {
                            this._zoomingInIndexPromise.then(function wait(item) {
                                return MS.Entertainment.Utilities.redirectPromise(WinJS.Promise.timeout(), item)
                            }).done(function zoomedOutItem(item) {
                                if (item && item.firstItemIndexHint >= 0)
                                    this.ensureVisible(item.firstItemIndexHint)
                            }.bind(this), function ignoreError(error) {
                                MS.Entertainment.UI.Controls.fail("Ensure visible failed during a zoom-in. Error message: " + (error && error.message))
                            });
                            this._zoomingInIndexPromise = null
                        }
                    }, _pageChanged: function _pageChanged(newValue, oldValue) {
                        if (this.invocationHelper)
                            this.invocationHelper.clearInvocation();
                        this.clearSelection();
                        if (this._selectionHelper) {
                            this._selectionHelper.dispose();
                            this._selectionHelper = null
                        }
                    }, _setMoreThanFirstPageRenderedState: function _setMoreThanFirstPageRenderedState() {
                        if (this._firstPagedRenderedEventDispatched)
                            return;
                        this._clearMoreThanFirstPageRenderedState();
                        this._moreThanFirstPageRendered = true;
                        this._moreThanFirstPageRenderedWorker = MS.Entertainment.Utilities.schedulePromiseIdle(null, "GalleryControl::_moreThanFirstPageRenderedWorker").then(this._sendFirstPageRenderedEventOnInteraction.bind(this), function ignoreError(){})
                    }, _clearMoreThanFirstPageRenderedState: function _clearMoreThanFirstPageRenderedState() {
                        this._moreThanFirstPageRendered = false;
                        if (this._moreThanFirstPageRenderedWorker) {
                            this._moreThanFirstPageRenderedWorker.cancel();
                            this._moreThanFirstPageRenderedWorker = null
                        }
                    }, _sendFirstPageRenderedEventOnInteraction: function _sendFirstPageRenderedEventOnInteraction() {
                        if (this._moreThanFirstPageRendered)
                            this._sendFirstPageRenderedEvent();
                        this._clearMoreThanFirstPageRenderedState()
                    }, _sendFirstPageRenderedEvent: function _sendFirstPageRenderedEvent() {
                        var eventSent = false;
                        if (!this._firstPagedRenderedEventDispatched) {
                            window.msWriteProfilerMark("ent:galleryFirstPageRendered,StartTM");
                            eventSent = true;
                            this._firstPagedRenderedEventDispatched = true;
                            this._firstPageRendered = true;
                            WinJS.Promise.timeout(1).done(function sendFirstPageRenderedEvent() {
                                window.msWriteProfilerMark("ent:galleryFirstPageRendered,StopTM");
                                var domEvent = document.createEvent("Event");
                                domEvent.initEvent("galleryFirstPageRendered", true, true);
                                this.domElement.dispatchEvent(domEvent)
                            }.bind(this), function handleError(error) {
                                window.msWriteProfilerMark("ent:galleryFirstPageRendered,StopTM");
                                MS.Entertainment.UI.Controls.fail("Failed to handle first page rendered. error: " + (error && error.message))
                            });
                            this._updateScrollStyles()
                        }
                        return eventSent
                    }, _handleFirstPageDelayedInitialized: function _handleFirstPageDelayedInitialized() {
                        if (!this._firstPagedDelayInitializedHandled) {
                            window.msWriteProfilerMark("ent:galleryFirstPageDelayedInitialized,StartTM");
                            this._firstPagedDelayInitializedHandled = true;
                            MS.Entertainment.Utilities.schedulePromiseBelowNormal().done(function _handleFirstPageDelayedInitializedWork() {
                                window.msWriteProfilerMark("ent:galleryFirstPageDelayedInitialized,StopTM");
                                this._commitZoomedOutDataSource()
                            }.bind(this), function handleError(error) {
                                window.msWriteProfilerMark("ent:galleryFirstPageRendered,StopTM");
                                MS.Entertainment.UI.Controls.fail("Failed to handle first page delay initialized. error: " + (error && error.message))
                            })
                        }
                    }, _handleItemDragBetween: function _handleItemDragBetween(args) {
                        var dragOverInsertAfterIndex = -1;
                        var dragOverInsertBeforeIndex = -1;
                        if (args && args.detail && !isNaN(args.detail.index) && typeof args.detail.index === "number" && !isNaN(args.detail.insertAfterIndex) && typeof args.detail.insertAfterIndex === "number") {
                            dragOverInsertBeforeIndex = args.detail.index;
                            dragOverInsertAfterIndex = args.detail.insertAfterIndex
                        }
                        this._handleDragLeave();
                        if (dragOverInsertAfterIndex >= 0) {
                            this._dragBetweenElement = this.getElementAtIndex(dragOverInsertAfterIndex);
                            MS.Entertainment.Utilities.safeAddClass(this._dragBetweenElement, MS.Entertainment.UI.Controls.GalleryControl.dragInsertAfterClass)
                        }
                        else if (dragOverInsertBeforeIndex === 0) {
                            this._dragBetweenElement = this.getElementAtIndex(dragOverInsertBeforeIndex);
                            MS.Entertainment.Utilities.safeAddClass(this._dragBetweenElement, MS.Entertainment.UI.Controls.GalleryControl.dragInsertBeforeClass)
                        }
                        else
                            this._dragBetweenElement = null
                    }, _handleDragOver: function _handleDragOver(x, y, dragInfo){}, _handleDragLeave: function _handleDragLeave() {
                        MS.Entertainment.Utilities.safeRemoveClass(this._dragBetweenElement, MS.Entertainment.UI.Controls.GalleryControl.dragInsertAfterClass);
                        MS.Entertainment.Utilities.safeRemoveClass(this._dragBetweenElement, MS.Entertainment.UI.Controls.GalleryControl.dragInsertBeforeClass);
                        this._dragBetweenElement = null
                    }, _updateScrollStyles: function updateScrollStyles() {
                        if (MS.Entertainment.Utilities.isApp1 || this.layout === MS.Entertainment.UI.Controls.GalleryControl.Layout.grid)
                            return;
                        if (this._activeListView && this._activeListView.indexOfLastVisible < Math.max(this._initialItemCount, this._latestCount) - 1)
                            WinJS.Utilities.addClass(this.domElement, "ent-scrollable-down");
                        else
                            WinJS.Utilities.removeClass(this.domElement, "ent-scrollable-down");
                        if (this._activeListView && this._activeListView.indexOfFirstVisible > 0)
                            WinJS.Utilities.addClass(this.domElement, "ent-scrollable-up");
                        else
                            WinJS.Utilities.removeClass(this.domElement, "ent-scrollable-up")
                    }, refreshGalleryWidth: function refreshGalleryWidth() {
                        if (this.autoSize && this._listView) {
                            var calculatedWidth = this.calculateWidthToShowAllItems();
                            this.domElement.style.width = Math.max(calculatedWidth, this.autoSizeMin, 1) + "px"
                        }
                        else
                            this.domElement.style.width = ""
                    }, calculateWidthToShowAllItems: function calculateWidthToShowAllItems() {
                        return this._listView._canvas.scrollWidth
                    }, calculateHeightToShowAllItems: function calculateHeightToShowAllItems() {
                        return this._listView._canvas.scrollHeight
                    }, _updateInvokeHelper: function _updateInvokeHelper() {
                        this._clearInvocationHelper();
                        this._initializeInvocationHelper()
                    }, _initializeInvocationHelper: function _initializeInvocationHelper() {
                        if (!this.invocationHelper && this.invokeHelperFactory && this.isDelayInitialized && this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline) {
                            this.invocationHelper = this.invokeHelperFactory(this);
                            this._invocationHelperEvents = MS.Entertainment.Utilities.addEventHandlers(this.invocationHelper, {invokedItemChanged: this._invokeItemChanged.bind(this)})
                        }
                        return this.invocationHelper
                    }, _clearInvocationHelper: function _clearInvocationHelper() {
                        if (this._invocationHelperEvents) {
                            this._invocationHelperEvents.cancel();
                            this._invocationHelperEvents = null
                        }
                        if (this.invocationHelper) {
                            this.invocationHelper.dispose();
                            this._invokeItemChanged({detail: {
                                    newValue: null, oldValue: this.invocationHelper.invokedItem
                                }});
                            this.invocationHelper = null
                        }
                    }, _invokeItemChanged: function _invokedItemChanged(args) {
                        if (this.queryToPause && args && args.detail)
                            if (!args.detail.oldValue && args.detail.newValue)
                                this.queryToPause.pause();
                            else if (args.detail.oldValue && !args.detail.newValue)
                                this.queryToPause.unpause()
                    }, canInvokeForItem: function canInvokeForItem(item) {
                        return (!item || !item.isHeader || (this.isZoomReady && !this.isZoomedOut)) && this.canInvokeForItemOverride(item)
                    }, canInvokeForItemOverride: function canInvokeForItemOverride(item) {
                        return true
                    }, canToggleInvokeForItem: function canToggleInvokeForItem(item) {
                        return this._invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline && this.canInvokeForItem(item) && !item.isAction
                    }, itemInvoked: function itemInvoked(event) {
                        if (this.tap === MS.Entertainment.UI.Controls.GalleryControl.Tap.toggleSelect) {
                            MS.Entertainment.UI.Controls.assert(this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.none, "Cannot use tap=toggleSelect and specify an invokeBehavior other than none");
                            return
                        }
                        if (this.suppressInvokeBubble)
                            event.stopPropagation();
                        event.detail.itemPromise.then(function getItemData(data) {
                            if (!data || !data.data) {
                                MS.Entertainment.UI.Controls.fail("Invalid data returned from item promise during handling of an item invoked.");
                                return
                            }
                            if (!this.canInvokeForItem(data))
                                return;
                            if (this.selectedIndices && this.selectedIndices.length > 0)
                                this.clearSelection();
                            this._sendFirstPageRenderedEventOnInteraction();
                            MS.Entertainment.Utilities.playSelectButtonClick();
                            if (data && data.isHeader) {
                                this.isZoomedOut = true;
                                this._semanticZoomInitType = MS.Entertainment.UI.Controls.GalleryControl.SemanticZoomSelected.headerClick
                            }
                            else if (data && data.isAction && data.data && data.data.action) {
                                data.data.action.referenceContainer = {domElement: event.target.querySelector("button .win-commandicon") || event.target};
                                var actionPromise = data.data.action.execute();
                                data.data.action.referenceContainer = null;
                                if (actionPromise && data.data.isModifier) {
                                    var itemIndex = this._listView.currentItem.index;
                                    actionPromise.done(function changeIndexOnGalleryLoad(modifierChanged) {
                                        if (this.restoreFocusOnDataChanges && modifierChanged)
                                            this._restoreFocusIndex = itemIndex
                                    }.bind(this))
                                }
                            }
                            else if (this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.popOver) {
                                var currentPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage;
                                if (currentPage) {
                                    data.hasFocus = true;
                                    WinJS.Binding.unwrap(currentPage).specialFocusedElement = {
                                        listView: this._listView, item: data
                                    }
                                }
                                if (data.data.mediaType === Microsoft.Entertainment.Queries.ObjectType.video && (data.data.videoType === Microsoft.Entertainment.Queries.VideoType.other || data.data.videoType === Microsoft.Entertainment.Queries.VideoType.musicVideo)) {
                                    MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PlayCommand);
                                    MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayNonProtectedInApp();
                                    MS.Entertainment.Platform.PlaybackHelpers.showImmersiveDetails(data.data, false, true)
                                }
                                else {
                                    var popOverParameters = this.createPopOverParameters(data);
                                    MS.Entertainment.Platform.PlaybackHelpers.showItemDetails(popOverParameters)
                                }
                            }
                            else if (this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline) {
                                MS.Entertainment.UI.Controls.assert(!this.isDelayInitialized || this.invocationHelper, "inline behavior requires an invocation helper");
                                if (!this.doubleClickHelper)
                                    this.doubleClickHelper = MS.Entertainment.UI.Controls.GalleryControlDoubleClickHelper.create(this);
                                this.doubleClickHelper.wrapItemInvoke(event, data)
                            }
                            else if (this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.details) {
                                var popOverParameters = this.createPopOverParameters(data);
                                MS.Entertainment.Platform.PlaybackHelpers.showItemDetails(popOverParameters)
                            }
                            else if (this.invokeBehavior === MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action) {
                                var actionOptions = this.actionOptions || {};
                                var actionParameter = this.actionOptions.parameter || {};
                                actionParameter.data = data.data;
                                actionParameter.filter = actionOptions.filter;
                                var action = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(actionOptions.id);
                                action.parameter = actionParameter;
                                action.automationId = action.automationId || this.actionOptions.automationId;
                                action.execute().done()
                            }
                        }.bind(this))
                    }, _cancelItemDrag: function _cancelItemDrag() {
                        var cancelDragSignal = new MS.Entertainment.UI.Framework.Signal;
                        var cancelDragHandler = MS.Entertainment.Utilities.addEventHandlers(this._listView, {drag: function cancelDrag(event) {
                                    if (!cancelDragHandler)
                                        return;
                                    cancelDragHandler.cancel();
                                    cancelDragHandler = null;
                                    event.preventDefault();
                                    cancelDragSignal.complete()
                                }.bind(this)});
                        return cancelDragSignal.promise
                    }, _onDragStartCapture: function _onDragStartCapture(event) {
                        if (this.selectionMode === MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.single)
                            this.clearSelection();
                        else if (this.hasSelectionOrInvocation) {
                            var index = this._listView.indexOfElement(event.srcElement);
                            this._listView.selection.add(index)
                        }
                    }, _itemDragStarted: function _itemDragStarted(event) {
                        var dragDataPromise;
                        var indices = event.detail.dragInfo.getIndices();
                        if (indices && indices.length === 1) {
                            var index = indices[0];
                            dragDataPromise = this.getItemAtIndex(index).then(function saveDraggedMediaItem(mediaItem) {
                                return {data: mediaItem && mediaItem.data}
                            })
                        }
                        else {
                            MS.Entertainment.UI.Controls.assert(this.selectedItems && this.selectedItems.count, "GalleryControl::_itemDragStarted: Drag started for multiple items, but no selection was found in the list.");
                            if (this.selectedItems)
                                dragDataPromise = WinJS.Promise.wrap({
                                    data: this.selectedItems, onDragDataHandled: this._onDragDataHandled.bind(this)
                                })
                        }
                        if (dragDataPromise) {
                            this._dragStarted = true;
                            if (this.queryToPause && !this.itemsReorderable)
                                this.queryToPause.pause();
                            var dragDataService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dragData);
                            dragDataService.startDrag(dragDataPromise)
                        }
                    }, _itemDragEndedOrCanceled: function _itemDragEndedOrCanceled(event) {
                        MS.Entertainment.UI.Controls.assert(this._dragStarted, "GalleryControl::_itemDragEndedOrCanceled: Received drag end, without corresponding drag start.");
                        var dragDataService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dragData);
                        dragDataService.finishDrag();
                        if (this.queryToPause && !this.itemsReorderable)
                            this.queryToPause.unpause();
                        this._dragStarted = false
                    }, _onDragDataHandled: function _onDragDataHandled() {
                        this.clearInvocation();
                        this.clearSelection()
                    }, createPopOverParameters: function createPopOverParameters(data) {
                        var panelConstructor;
                        if (this.panelTemplateTypeMappings)
                            for (var x = 0; x < this.panelTemplateTypeMappings.length; x++) {
                                var templateMapping = this.panelTemplateTypeMappings[x];
                                if (data && data.data && data.data[templateMapping.key] === templateMapping.value) {
                                    panelConstructor = templateMapping.panelTemplate;
                                    break
                                }
                            }
                        if (!panelConstructor)
                            panelConstructor = this.templateSelector.getPanelTemplatePath(data);
                        MS.Entertainment.UI.Controls.assert(panelConstructor, "Pop-over behavior requires a panel constructor");
                        var size = this.panelOptions && this.panelOptions.size ? this.panelOptions.size : MS.Entertainment.Utilities.popOverDefaultSize;
                        data.hasFocus = true;
                        this._createItemChangeHandler(data);
                        var popOverParameters = {
                                itemConstructor: panelConstructor, size: size
                            };
                        popOverParameters.onclose = this._onPopOverClosed.bind(this);
                        popOverParameters.presetPreOverlayFocus = {
                            listView: this._listView, item: data
                        };
                        popOverParameters.dataContext = data;
                        popOverParameters.dataContext.inlineExtraData = this.inlineExtraData;
                        popOverParameters.dataContext.location = this.panelOptions && this.panelOptions.location;
                        popOverParameters.dataContext.collectionFilter = this._mediaContext && this._mediaContext.collectionFilter;
                        return popOverParameters
                    }, _onPopOverClosed: function _onPopOverClosed() {
                        this._clearDataSourceHandlers();
                        if (this.queryToPause && this.queryToPause.forceLiveRefresh)
                            this.queryToPause.forceLiveRefresh()
                    }, _createItemChangeHandler: function _createItemChangeHandler(data) {
                        var itemUpdated = function itemUpdated(args) {
                                if (args && args.detail && args.detail.newValue && args.detail.newValue.data && args.detail.newValue.data.libraryId === data.data.libraryId && args.detail.newValue.data.mediaType === data.data.mediaType)
                                    MS.Entertainment.Utilities.copyAugmentedProperties(args.detail.newValue.data, data.data)
                            }.bind(this);
                        this._clearDataItemChangeHandlers();
                        if (data && data.data)
                            this._dataSourceItemChangeHandlers = MS.Entertainment.Utilities.addEventHandlers(this.dataSource, {
                                itemInserted: itemUpdated, itemChanged: itemUpdated
                            })
                    }, _clearSelectionHelper: function _clearSelectionHelper() {
                        if (this._selectionHelper) {
                            this._selectionHelper.dispose();
                            this._selectionHelper = null
                        }
                    }, _canCreateSelectionHelper: {get: function get_canCreateSelectionHelper() {
                            return !!this.selectionHelperFactory && this.isDelayInitialized
                        }}, _initializeSelectionHelper: function _initializeSelectionHelper() {
                        if (!this._selectionHelper && this._canCreateSelectionHelper)
                            this._selectionHelper = this.selectionHelperFactory(this);
                        return this._selectionHelper
                    }, _clearDataItemChangeHandlers: function _clearDataItemChangeHandlers() {
                        if (this._dataSourceItemChangeHandlers) {
                            this._dataSourceItemChangeHandlers.cancel();
                            this._dataSourceItemChangeHandlers = null
                        }
                    }, _clearDataSourceHandlers: function _clearDataSourceHandlers() {
                        this._clearDataItemChangeHandlers();
                        if (this._dataSourceHandlers) {
                            this._dataSourceHandlers.cancel();
                            this._dataSourceHandlers = null
                        }
                    }, _onFocusin: function _onFocusin(event) {
                        if (this.onFocusListviewClass)
                            WinJS.Utilities.addClass(this.domElement, this.onFocusListviewClass);
                        if (this.handleFocus) {
                            var currElement = event && event.target;
                            if (currElement) {
                                this._lastFocusedElement = currElement;
                                WinJS.Promise.timeout().then(function() {
                                    if (this._lastFocusedElement && !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).appBarVisible)
                                        MS.Entertainment.UI.Framework.focusElement(this._lastFocusedElement);
                                    this._lastFocusedElement = null
                                }.bind(this))
                            }
                        }
                    }, _onFocusout: function _onFocusout(event) {
                        if (this.onFocusListviewClass)
                            WinJS.Utilities.removeClass(this.domElement, this.onFocusListviewClass)
                    }, _raisePanelReadyOnce: function _raisePanelReadyOnce() {
                        if (!this._raisedPanelReady) {
                            this._raisedPanelReady = true;
                            if (!this._unloaded && this.raisePanelReadyEvents)
                                MS.Entertainment.Utilities.raisePanelReady(this.domElement);
                            if (MS.Entertainment.Utilities.isApp2 && this.focusFirstItemOnPageLoad)
                                this.setVisibleIndexFocus(0)
                        }
                    }, _raisePanelEmpty: function _raisePanelEmpty(isEmpty) {
                        if (!this._unloaded && (!this._raisedPanelEmpty || this._isEmpty !== isEmpty)) {
                            this._raisedPanelEmpty = true;
                            this._isEmpty = isEmpty;
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("PanelEmpty", true, true);
                            domEvent.empty = isEmpty;
                            this.domElement.dispatchEvent(domEvent)
                        }
                    }, _raisePanelResetOnce: function _raisePanelResetOnce() {
                        if (this._raisedPanelReady) {
                            this._raisedPanelReady = false;
                            if (!this._unloaded && this.raisePanelResetEvents)
                                MS.Entertainment.Utilities.raisePanelReset(this.domElement)
                        }
                    }, _raiseGalleryReadyState: function _raiseGalleryReadyState(readyState, event) {
                        this.readyState = readyState;
                        if (this._readyStateCallback)
                            this._readyStateCallback({
                                readyState: this.readyState, scrolling: (event && event.detail) ? event.detail.scrolling : false
                            })
                    }, _raisePanelSyncing: function _raisePanelSyncing(isSyncing) {
                        if (!this._unloaded && this._isSyncing !== isSyncing) {
                            this._isSyncing = isSyncing;
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("PanelSyncing", true, true);
                            domEvent.isSyncing = isSyncing;
                            this.domElement.dispatchEvent(domEvent)
                        }
                    }, _setSelectedIndex: function _setSelectedIndex(newIndex, oldIndex) {
                        oldIndex = oldIndex === undefined ? this.selectedIndex : oldIndex;
                        if (oldIndex !== newIndex) {
                            this.selectedIndex = newIndex;
                            if (this._selectedIndexChangedCallback)
                                this._selectedIndexChangedCallback(newIndex, oldIndex)
                        }
                        if (this.dataSource && this.dataSource.keyFromIndex)
                            this.selectedKey = this.dataSource.keyFromIndex(newIndex);
                        else
                            this.selectedKey = null
                    }, _validateSelection: function _validateSelection() {
                        var indices;
                        var selection = this._listView && this._listView.selection;
                        if (selection && this.maxSelectionCount >= 0) {
                            if (this.maxSelectionCount < selection.count()) {
                                indices = selection.getIndices();
                                if (indices.length > this.maxSelectionCount)
                                    indices = indices.slice(0, this.maxSelectionCount);
                                else
                                    indices = null
                            }
                            else if (selection.isEverything())
                                indices = [{
                                        firstIndex: 0, lastIndex: this.maxSelectionCount - 1
                                    }];
                            if (indices)
                                selection.set(indices)
                        }
                    }, _updateDataSourceGrouper: function _updateDataSourceGrouper(dataSource) {
                        var promise;
                        if (this._inplaceGrouper) {
                            this._inplaceGrouper.dispose();
                            this._inplaceGrouper = null
                        }
                        if (dataSource && dataSource.setGrouper && !dataSource.grouper && this.useInPlaceHeaders)
                            this._inplaceGrouper = new MS.Entertainment.Data.ListGrouper(this.grouper || MS.Entertainment.Data.emptyGrouper, dataSource);
                        return WinJS.Promise.as(this._inplaceGrouper && this._inplaceGrouper.dataSourceReady)
                    }, _updateSelectionInvokedVisibleAfterMove: function _updateSelectionInvokedVisibleAfterMove(args) {
                        var offset = 0;
                        if (args && args.detail)
                            offset = args.detail.newIndex < args.detail.oldIndex ? -1 : 1;
                        if (this.selectedIndices && this.selectedIndices.length)
                            this._updateSelection();
                        this._ensureSelectionInvokedVisible(offset)
                    }, _getSelectedItems: function _getSelectedItems() {
                        var allSelectedItems = [];
                        if (this.selectedItems)
                            allSelectedItems = this.selectedItems.toArrayAll();
                        return WinJS.Promise.as(allSelectedItems)
                    }, _updateSelection: function _updateSelection() {
                        var newSelection;
                        var oldSelection = this.selectedIndices;
                        if (this._canCreateSelectionHelper) {
                            if (this._listView && this._listView.selection)
                                newSelection = this._listView.selection.getIndices();
                            if (this.invocationHelper && this.invocationHelper.invokedIndex >= 0) {
                                var lastInvokedIndex = this.invocationHelper.invokedIndex;
                                this.invocationHelper.clearInvocation();
                                if (this.selectionMode === MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi)
                                    this._listView.selection.add(lastInvokedIndex)
                            }
                            if (this._pendingSelectionFromInvoke >= 0) {
                                this._listView.selection.add(this._pendingSelectionFromInvoke);
                                this._pendingSelectionFromInvoke = -1
                            }
                            if (newSelection && newSelection.length) {
                                if (!this.selectedItems)
                                    this.selectedItems = new MS.Entertainment.Data.SelectionList;
                                this.selectedItems.maxCount = this.maxSelectionCount;
                                this.selectedItems.setSource(this.dataSource, this._listView.selection, this._userSelectedEverything);
                                this._setSelectedIndices(newSelection);
                                this._setSelectedIndex(newSelection[newSelection.length - 1]);
                                this._selectionHelper = this._initializeSelectionHelper();
                                this._selectionHelper.updateSelectedItems(newSelection, oldSelection)
                            }
                            else {
                                this.selectedItems = null;
                                this._setSelectedIndices([]);
                                this._clearSelectionHelper()
                            }
                            if (this.handleSelectedItemsChangedEvent) {
                                var that = this;
                                this._getSelectedItems().then(function(allSelectedItems) {
                                    var selectedItemsChangedEvent = document.createEvent("Event");
                                    selectedItemsChangedEvent.initEvent("galleryControlSelectionChanged", true, true);
                                    selectedItemsChangedEvent.detail = allSelectedItems;
                                    that.domElement.dispatchEvent(selectedItemsChangedEvent)
                                })
                            }
                            if (this.queryToPause)
                                if (newSelection && newSelection.length) {
                                    if (!oldSelection || !oldSelection.length)
                                        this.queryToPause.pause()
                                }
                                else if (oldSelection && oldSelection.length)
                                    this.queryToPause.unpause()
                        }
                    }, _setSelectedIndices: function _setSelectedIndices(value) {
                        value = value || [];
                        var oldEmpty = !this.selectedIndices.length;
                        var newEmpty = !value.length;
                        if ((value !== this.selectedIndices) && !(oldEmpty && newEmpty)) {
                            var oldValue = this.selectedIndices;
                            this.selectedIndices = value;
                            this.dispatchEvent("selectedIndicesChanged", {
                                newValue: value, oldValue: oldValue
                            })
                        }
                    }
            }, {
                selectedIndex: -1, selectedKey: null, selectedIndices: null, selectedItems: null, readyState: null, autoSizeMin: 1
            }, {
                resetItem: function resetItem(item, element) {
                    element.listViewReset = true;
                    MS.Entertainment.UI.Framework.unloadControlTree(element)
                }, searchAndApply: function searchAndApply(subTree, operation) {
                        if (subTree && operation) {
                            var applyOnGalleryControl = function applyOnGalleryControl(listView) {
                                    var galleryControl;
                                    if (listView)
                                        galleryControl = listView.parentElement;
                                    if (galleryControl && galleryControl.winControl)
                                        operation(galleryControl.winControl)
                                };
                            MS.Entertainment.UI.Framework.applyWithSelector(subTree, ".win-listview", applyOnGalleryControl)
                        }
                    }, zoomedOutClass: "ent-zoomOutButton", selectionFilledClass: "win-selectionstylefilled", dragInsertBeforeClass: "state_dragInsertBefore", dragInsertAfterClass: "state_dragInsertAfter", defaultGrouperItemThreshold: _defaultGrouperItemThreshold, maxItemRenderTime: 40, _restoreSetImmediateModeTime: 1000, Layout: {
                        grid: "grid", list: "list"
                    }, Orientation: {
                        horizontal: "horizontal", vertical: "vertical"
                    }, DoubleClickBehavior: {
                        action: "action", play: "play", none: "none"
                    }, ZoomedOutLayout: {
                        auto: "auto", grid: "grid", list: "list"
                    }, HeaderPosition: {
                        inline: "inline", left: "left", top: "top"
                    }, HeaderType: {
                        none: "none", auto: "auto", inPlace: "inPlace"
                    }, SelectionMode: {
                        none: "none", single: "single", multi: "multi"
                    }, Tap: {
                        directSelect: "directSelect", toggleSelect: "toggleSelect", invokeOnly: "invokeOnly", none: "none"
                    }, swipeBehavior: {
                        select: "select", none: "none"
                    }, ReadyState: {
                        itemsLoading: "itemsLoading", viewPortLoaded: "viewPortLoaded", itemsLoaded: "itemsLoaded", complete: "complete"
                    }, LoadingBehavior: {
                        incremental: "incremental", randomAccess: "randomAccess"
                    }, InvokeBehavior: {
                        popOver: "popOver", inline: "inline", details: "details", action: "action", none: "none"
                    }, SemanticZoomSelected: {
                        headerClick: "headerClick", minusClick: "minusClick", keyDown: "keyDown", keyUp: "keyUp", pinch: "pinch", jumpTo: "jumpTo", mediaTransportControl: "mediaTransportControl"
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ListViewModelGalleryControl: MS.Entertainment.UI.Framework.deriveUserControl("MS.Entertainment.UI.Controls.GalleryControl", null, function listViewModelGalleryControl(element, options){}, {
            listViewModel: null, processItemData: function processItemData(itemData, index, key) {
                    return new MS.Entertainment.UI.Controls.ListItemData(itemData, this.listViewModel, index, key)
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {ListItemData: MS.Entertainment.UI.Framework.define(function listItemData(data, listViewModel, index, key) {
            this.data = data;
            this.index = index;
            this.key = key;
            this.listViewModel = listViewModel
        }, {
            listViewModel: null, data: null, index: -1, key: null, instance: {get: function() {
                        return this
                    }}
        })});
    function closeTooltip(element) {
        var tt = WinJS.Utilities.data(element).tooltip;
        if (tt) {
            tt.close();
            tt.dispose();
            WinJS.Utilities.data(element).tooltip = null
        }
    }
    if (WinJS.UI._ItemEventsHandler) {
        var ssrg = WinJS.UI._ItemEventsHandler.prototype._startSelfRevealGesture;
        WinJS.UI._ItemEventsHandler.prototype._startSelfRevealGesture = function() {
            ssrg.apply(this, arguments);
            if (this._selfRevealGesture) {
                var element = this._site.pressedItemBox;
                var down = String.load(String.id.IDS_SWIPE_VERTICALLY_TO_SELECT);
                var left = String.load(String.id.IDS_SWIPE_HORIZONTALLY_TO_SELECT);
                var directionText = this._site.horizontal ? down : left;
                var directionGlyph = this._site.horizontal ? "&#xE1FD;" : "&#xE112;";
                var tt = new WinJS.UI.Tooltip(element, {innerHTML: directionGlyph + " " + directionText});
                tt.open();
                setTimeout(closeTooltip.bind(null, element), 5000)
            }
        };
        var esrg = WinJS.UI._ItemEventsHandler.prototype._endSelfRevealGesture;
        WinJS.UI._ItemEventsHandler.prototype._endSelfRevealGesture = function() {
            var element = this._site.pressedItemBox;
            if (element)
                closeTooltip(element);
            esrg.apply(this, arguments)
        }
    }
})()
})();
/* >>>>>>/controls/mediastatusicon.js:10960 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls.Music");
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {MediaStatusIcon: MS.Entertainment.UI.Framework.defineUserControl(null, function mediaStatusIconConstructor(element){}, {
            controlName: "MediaStatusIcon", allowAnimations: false, preventHideDuringInitialize: true, hasError: false, index: -1, key: null, inNowPlaying: false, delayHydrateLibraryId: false, showExplicit: false, showMusicVideo: false, showMediaRights: false, _playbackErrorCode: 0, _transferErrorCode: 0, _notLocalErrorCode: false, _isNowPlaying: false, _setIsNowPlayingState: false, _isDownloading: false, _freeTrackLimitExceeded: false, _monthlyFreeLimitExceeded: false, _inCollection: false, _hasMusicVideo: false, _canPlayLocally: true, _isExplicit: false, _hasUsageRightRestrictions: false, _isUnavailable: false, _icon: String.empty, _iconClass: String.empty, _iconContainerDomElement: null, _ariaText: null, _ariaLabelContainerDomElement: null, _visible: false, _setClassFreeStreamLimitExceeded: false, _setCanPlayLocally: true, _setExplicit: false, _notificationText: null, _notificationAction: null, _setUnavailable: false, _bindings: null, _containerElementClickHandler: null, _attachedLibraryId: -1, _attachedServiceId: MS.Entertainment.Utilities.EMPTY_GUID, _attachedActivationFilePath: String.empty, _freePlayLimits: null, _fileTransferNotificationsService: null, _delayInitializePromise: null, _mediaStore: null, _parentWinItemElement: null, iconClass: {
                    get: function() {
                        return this._iconClass
                    }, set: function(value) {
                            if (value !== this._iconClass) {
                                if (this._iconClass && this._iconContainerDomElement)
                                    WinJS.Utilities.removeClass(this._iconContainerDomElement, this._iconClass);
                                this._iconClass = value;
                                if (this._iconClass && this._iconContainerDomElement)
                                    WinJS.Utilities.addClass(this._iconContainerDomElement, this._iconClass)
                            }
                        }
                }, parentWinItemElement: {get: function() {
                        if (!this._parentWinItemElement)
                            this._parentWinItemElement = this._getParentWinItemElement();
                        return this._parentWinItemElement
                    }}, notificationText: {
                    get: function() {
                        return this._notificationText
                    }, set: function(value) {
                            if (value !== this._notificationText)
                                this._notificationText = value
                        }
                }, notificationAction: {
                    get: function() {
                        return this._notificationAction
                    }, set: function(value) {
                            if (value !== this._notificationAction)
                                this._notificationAction = value
                        }
                }, isUnavailable: {
                    get: function() {
                        return this._isUnavailable
                    }, set: function(value) {
                            if (value !== this._isUnavailable)
                                this._isUnavailable = value
                        }
                }, _delayInitialized: function _delayInitialized() {
                    if (!this.domElement)
                        return;
                    this._iconContainerDomElement = this.domElement.querySelector(".mediaStatusIconContainer");
                    MS.Entertainment.UI.Controls.Music.assert(this._iconContainerDomElement, "MediaStatusIcon control is missing required child element of class 'mediaStatusIconContainer'.");
                    this._ariaLabelContainerDomElement = this.domElement.querySelector(".mediaStatusAriaLabelContainer");
                    MS.Entertainment.UI.Controls.Music.assert(this._ariaLabelContainerDomElement, "MediaStatusIcon control is missing required child element of class 'mediaStatusAriaLabelContainer'.");
                    this.domElement.setAttribute("role", "presentation");
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.freePlayLimits))
                        this._freePlayLimits = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.freePlayLimits);
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.fileTransferNotifications))
                        this._fileTransferNotificationsService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransferNotifications);
                    if (this.delayHydrateLibraryId)
                        MS.Entertainment.ViewModels.MediaItemModel.getLibraryIdAsync(this.mediaInstance);
                    this._handleTransferEvent = this._handleTransferEvent.bind(this);
                    this._handlePlaybackEvent = this._handlePlaybackEvent.bind(this);
                    this._handleFreePlayLimitsEvent = this._handleFreePlayLimitsEvent.bind(this);
                    this._handleMediaChange = this._handleMediaChange.bind(this);
                    this._updateFreePlayLimits = this._updateFreePlayLimits.bind(this);
                    this._updateCanPlayLocally = this._updateCanPlayLocally.bind(this);
                    this._delayInitializePromise = MS.Entertainment.Utilities.schedulePromiseBelowNormal(null, "MediaStatusIcon:initializeBindings").then(function initializeBindings() {
                        this._delayInitializePromise = null;
                        if (this._unloaded)
                            return;
                        this._bindings = WinJS.Binding.bind(this, {mediaInstance: {
                                serviceId: this._handleMediaChange, libraryId: this._handleMediaChange, inCollection: this._handleMediaChange, activationFilePath: this._handleMediaChange, musicVideoId: this._handleMediaChange, hasPurchased: this._updateFreePlayLimits, canPlayLocally: this._updateCanPlayLocally, isFreeStreamRestrictedByMonthlyLimit: this._updateFreePlayLimits, isFreeStreamRestrictedByIndividualLimit: this._updateFreePlayLimits
                            }});
                        if (this.domElement) {
                            if (this._containerElementClickHandler)
                                this._containerElementClickHandler.cancel();
                            this._containerElementClickHandler = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {
                                click: this.mediaStatusIconClicked.bind(this), keydown: this.mediaStatusIconClicked.bind(this)
                            })
                        }
                        this._initializeMediaId(this.mediaInstance);
                        this._updateCanPlayLocally();
                        this._updateFreePlayLimits()
                    }.bind(this), function(error) {
                        this._delayInitializePromise = null;
                        MS.Entertainment.UI.Controls.Music.assert(WinJS.Promise.isCanceledError(error), "Failed to initialize bindings. error: " + (error && error.message))
                    }.bind(this))
                }, unload: function unload() {
                    if (this._bindings) {
                        this._bindings.cancel();
                        this._bindings = null
                    }
                    if (this._delayInitializePromise)
                        this._delayInitializePromise.cancel();
                    var playbackEventNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playbackEventNotifications);
                    if (this._isValidMediaId(this._attachedLibraryId)) {
                        playbackEventNotifications.detachListener(this._attachedLibraryId, this._handlePlaybackEvent);
                        if (this._fileTransferNotificationsService)
                            this._fileTransferNotificationsService.detachListener(this._attachedLibraryId, this._handleTransferEvent);
                        this._detachedMediaId(this._attachedLibraryId)
                    }
                    if (this._isValidMediaId(this._attachedServiceId)) {
                        playbackEventNotifications.detachListener(this._attachedServiceId, this._handlePlaybackEvent);
                        if (this._fileTransferNotificationsService)
                            this._fileTransferNotificationsService.detachListener(this._attachedServiceId, this._handleTransferEvent);
                        if (this._freePlayLimits && MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(this.mediaInstance))
                            this._freePlayLimits.detachListener(this._attachedServiceId, this._handleFreePlayLimitsEvent);
                        this._detachedMediaId(this._attachedServiceId)
                    }
                    if (this._isValidMediaId(this._attachedActivationFilePath)) {
                        playbackEventNotifications.detachListener(this._attachedActivationFilePath, this._handlePlaybackEvent);
                        if (this._fileTransferNotificationsService)
                            this._fileTransferNotificationsService.detachListener(this._attachedActivationFilePath, this._handleTransferEvent);
                        this._detachedMediaId(this._attachedActivationFilePath)
                    }
                    if (this._containerElementClickHandler) {
                        this._containerElementClickHandler.cancel();
                        this._containerElementClickHandler = null
                    }
                    MS.Entertainment.UI.Framework.UserControl.prototype.unload.call(this)
                }, mediaStatusIconClicked: function mediaStatusIconClicked(event) {
                    if (event && event.keyCode && !(event.keyCode === WinJS.Utilities.Key.enter || event.keyCode === WinJS.Utilities.Key.space))
                        return;
                    if (this.hasError) {
                        var handled = this.showError();
                        if (handled)
                            event.cancelBubble = true
                    }
                    else if (this.notificationText) {
                        var notificationFlyout = new MS.Entertainment.UI.Controls.MediaStatusFlyout;
                        notificationFlyout.text = this.notificationText;
                        notificationFlyout.action = this.notificationAction;
                        notificationFlyout.referenceDomElement = this.domElement;
                        notificationFlyout.margin = {
                            top: 13, bottom: 13, left: 22, right: 22
                        };
                        notificationFlyout.showFlyout()
                    }
                }, showError: function showError() {
                    var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    if (!uiStateService.servicesEnabled) {
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.upgradeReminderDisplayer).showUpgradeDialog();
                        return true
                    }
                    else {
                        var appView = Windows.UI.ViewManagement.ApplicationView;
                        var handled = false;
                        if (!uiStateService.isSnapped || appView.tryUnsnap())
                            if (this._freeTrackLimitExceeded && this._freePlayLimits) {
                                this._freePlayLimits.showFreeTrackLimitExceededDialog(this.mediaInstance);
                                handled = true
                            }
                            else if (this._monthlyFreeLimitExceeded && this._freePlayLimits) {
                                this._freePlayLimits.showMonthlyFreeLimitExceededDialog(this.mediaInstance);
                                handled = true
                            }
                            else if (this._playbackErrorCode) {
                                MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_PLAYBACK_ERROR_MESSAGE_TITLE), this._playbackErrorCode);
                                handled = true
                            }
                            else if (this._transferErrorCode) {
                                MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_DOWNLOAD_ERROR_CAPTION), this._transferErrorCode);
                                handled = true
                            }
                            else if (this._notLocalErrorCode) {
                                MS.Entertainment.UI.Shell.showError(String.load(String.id.IDS_PLAYBACK_ERROR_MESSAGE_TITLE), this._notLocalErrorCode);
                                handled = true
                            }
                        return handled
                    }
                }, _initializeMediaId: function _initializeMediaId(mediaItem) {
                    var mediaId;
                    mediaId = MS.Entertainment.Platform.Playback.PlaybackEventNotifications.getEventingMediaId(mediaItem);
                    this._handleMediaChange(mediaId)
                }, _handleMediaChange: function _handleMediaChange(newMediaId, oldMediaId) {
                    if (!this._bindings)
                        return;
                    var playbackEventNotifications = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.playbackEventNotifications);
                    if (this._isValidMediaId(oldMediaId) && (this._attachedServiceId === oldMediaId || this._attachedLibraryId === oldMediaId)) {
                        playbackEventNotifications.detachListener(oldMediaId, this._handlePlaybackEvent);
                        if (this._fileTransferNotificationsService)
                            this._fileTransferNotificationsService.detachListener(oldMediaId, this._handleTransferEvent);
                        if (this._freePlayLimits && MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(this.mediaInstance) && this._attachedServiceId === newMediaId)
                            this._freePlayLimits.detachListener(oldMediaId, this._handleFreePlayLimitsEvent);
                        this._detachedMediaId(oldMediaId)
                    }
                    if ((!this._unloaded) && this._isValidMediaId(newMediaId)) {
                        this._attachedMediaId(newMediaId);
                        playbackEventNotifications.attachListener(newMediaId, this._handlePlaybackEvent);
                        if (this._fileTransferNotificationsService)
                            this._fileTransferNotificationsService.attachListener(newMediaId, this._handleTransferEvent);
                        if (this._freePlayLimits && MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(this.mediaInstance) && this._attachedServiceId === newMediaId) {
                            this._freePlayLimits.attachListener(newMediaId, this._handleFreePlayLimitsEvent);
                            this._updateFreePlayLimits()
                        }
                    }
                    var updateState = false;
                    if (this.showInCollectionState && this.mediaInstance && this.mediaInstance.inCollection !== this._inCollection) {
                        this._inCollection = this.mediaInstance.inCollection;
                        updateState = true
                    }
                    if (this.showMusicVideo && this.mediaInstance && this.mediaInstance.hasMusicVideoId !== this._hasMusicVideo) {
                        this._hasMusicVideo = this.mediaInstance.hasMusicVideoId;
                        updateState = true
                    }
                    if (this.showMediaRights)
                        updateState = true;
                    if (updateState)
                        this._updateState()
                }, _updateFreePlayLimits: function _updateFreePlayLimits() {
                    var isFreePlayLimitsExceeded = this._checkIfFreePlayLimitsExceeded();
                    if (isFreePlayLimitsExceeded)
                        this._updateState()
                }, _checkIfFreePlayLimitsExceeded: function _checkIfFreePlayLimitsExceeded() {
                    if (!this._freePlayLimits || !this._bindings)
                        return false;
                    var updateState = false;
                    var isFreeStreamingTrack = MS.Entertainment.Music.FreePlayLimits.isFreeStreamingTrack(this.mediaInstance);
                    var freeTrackLimitExceeded = isFreeStreamingTrack && this.mediaInstance.isFreeStreamRestrictedByIndividualLimit;
                    if (this._freeTrackLimitExceeded !== freeTrackLimitExceeded) {
                        this._freeTrackLimitExceeded = freeTrackLimitExceeded;
                        updateState = true
                    }
                    var monthlyFreeLimitExceeded = isFreeStreamingTrack && (this._freePlayLimits.isMonthlyFreeLimitExceeded || this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit);
                    if (this._monthlyFreeLimitExceeded !== monthlyFreeLimitExceeded) {
                        this._monthlyFreeLimitExceeded = monthlyFreeLimitExceeded;
                        updateState = true
                    }
                    return updateState
                }, _updateCanPlayLocally: function _updateCanPlayLocally() {
                    if (!this.mediaInstance || !this._bindings)
                        return;
                    var updateState = false;
                    if (this._canPlayLocally !== this.mediaInstance.canPlayLocally) {
                        this._canPlayLocally = this.mediaInstance.canPlayLocally;
                        updateState = true
                    }
                    var isFreePlayLimitsExceeded = this._checkIfFreePlayLimitsExceeded();
                    if (updateState || isFreePlayLimitsExceeded)
                        this._updateState()
                }, _isCurrentNowPlayingIndex: {get: function get_isCurrentNowPlayingIndex() {
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        return sessionManager.nowPlayingSession && sessionManager.nowPlayingSession.currentOrdinal === this.index
                    }}, _isCurrentNowPlayingKey: {get: function get_isCurrentNowPlayingKey() {
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        return sessionManager.nowPlayingSession && this.key && sessionManager.nowPlayingSession.currentMediaKey === this.key
                    }}, _isCurrentNowPlayingItem: {get: function get_isCurrentNowPlayingItem() {
                        return this._isCurrentNowPlayingKey || this._isCurrentNowPlayingIndex
                    }}, _hasNowPlayingIndex: {get: function get_hasNowPlayingIndex() {
                        return this.index >= 0 && this.inNowPlaying
                    }}, _hasNowPlayingKey: {get: function get_hasNowPlayingKey() {
                        return this.key && this.inNowPlaying
                    }}, _hasNowPlayingInformation: {get: function get_hasNowPlayingInformation() {
                        return this._hasNowPlayingKey || this._hasNowPlayingIndex
                    }}, _handlePlaybackEvent: function _handlePlaybackEvent(mediaId, event, value) {
                    switch (event) {
                        case MS.Entertainment.Platform.Playback.PlaybackEventNotifications.Event.error:
                            if (value === MS.Entertainment.Platform.Playback.Error.E_MDS_INDIVIDUAL_TRACK_LIMIT.code) {
                                this.mediaInstance.isFreeStreamRestrictedByIndividualLimit = true;
                                this.mediaInstance.canFreeStream = false;
                                this._freeTrackLimitExceeded = true
                            }
                            else if (value === MS.Entertainment.Platform.Playback.Error.E_MDS_AUTHENTICATED_TRACK_LIMIT.code) {
                                this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit = true;
                                this.mediaInstance.canFreeStream = false;
                                this._monthlyFreeLimitExceeded = true
                            }
                            else if (value === MS.Entertainment.Platform.Playback.Error.X8_E_PLAYBACK_MEDIA_ERR_NOT_LOCAL.code && MS.Entertainment.Utilities.isMusicApp2)
                                this._notLocalErrorCode = value;
                            else
                                this._playbackErrorCode = value;
                            this._updateState();
                            break;
                        case MS.Entertainment.Platform.Playback.PlaybackEventNotifications.Event.nowPlaying:
                            this._isNowPlaying = value && (!this._hasNowPlayingInformation || this._isCurrentNowPlayingItem);
                            this._updateState();
                            break;
                        default:
                            MS.Entertainment.UI.Controls.Music.fail("Unknown event type");
                            break
                    }
                }, _handleTransferEvent: function _handleTransferEvent(mediaId, event, value) {
                    switch (event) {
                        case MS.Entertainment.UI.FileTransferNotificationService.Event.transferError:
                            this._transferErrorCode = value;
                            this._updateState();
                            break;
                        case MS.Entertainment.UI.FileTransferNotificationService.Event.download:
                            this._isDownloading = value;
                            this._updateState();
                            break;
                        default:
                            MS.Entertainment.UI.Controls.Music.fail("Unknown event type");
                            break
                    }
                }, _handleFreePlayLimitsEvent: function _handleFreePlayLimitsEvent(event) {
                    switch (event) {
                        case MS.Entertainment.Music.Freeplay.Events.monthlyFreeLimitExceeded:
                            this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit = true;
                            this.mediaInstance.canFreeStream = false;
                            this._monthlyFreeLimitExceeded = true;
                            this._updateState();
                            break;
                        case MS.Entertainment.Music.Freeplay.Events.monthlyFreeLimitReset:
                            this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit = false;
                            this.mediaInstance.canFreeStream = !this.mediaInstance.isFreeStreamRestrictedByIndividualLimit;
                            this._monthlyFreeLimitExceeded = false;
                            this._updateState();
                            break;
                        case MS.Entertainment.Music.Freeplay.Events.freeTrackLimitExceeded:
                            this.mediaInstance.isFreeStreamRestrictedByIndividualLimit = true;
                            this.mediaInstance.canFreeStream = false;
                            this._freeTrackLimitExceeded = true;
                            this._updateState();
                            break;
                        case MS.Entertainment.Music.Freeplay.Events.freeTrackLimitReset:
                            this.mediaInstance.isFreeStreamRestrictedByIndividualLimit = false;
                            this.mediaInstance.canFreeStream = !this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit;
                            this._freeTrackLimitExceeded = false;
                            this._updateState();
                            break;
                        case MS.Entertainment.Music.Freeplay.Events.freeTrialStarted:
                        case MS.Entertainment.Music.Freeplay.Events.freeTrialCompleted:
                            this.mediaInstance.isFreeStreamRestrictedByMonthlyLimit = false;
                            this.mediaInstance.isFreeStreamRestrictedByIndividualLimit = false;
                            this.mediaInstance.canFreeStream = true;
                            this._monthlyFreeLimitExceeded = false;
                            this._freeTrackLimitExceeded = false;
                            this._updateState();
                            break;
                        default:
                            MS.Entertainment.UI.Controls.Music.fail("Unknown event type");
                            break
                    }
                }, _setIconAndAriaString: function _setIconAndAriaString() {
                    var icon = String.empty;
                    var iconClass = String.empty;
                    var ariaId = null;
                    var ariaText = null;
                    this._hasUsageRightRestrictions = false;
                    if (this._unloaded)
                        return;
                    if (this._playbackErrorCode) {
                        icon = MS.Entertainment.UI.Icon.inlineError;
                        iconClass = "mediaStatusIconContainer_inlineError";
                        ariaId = String.id.IDS_MEDIA_STATUS_PLAYBACK_ERROR_ICON
                    }
                    else if (this._freeTrackLimitExceeded) {
                        icon = MS.Entertainment.UI.Icon.inlineNotification;
                        iconClass = "mediaStatusIconContainer_inlineNotification";
                        ariaId = String.id.IDS_MEDIA_STATUS_STREAMING_TRACK_LIMIT_HIT_ICON
                    }
                    else if (this._monthlyFreeLimitExceeded) {
                        icon = MS.Entertainment.UI.Icon.inlineNotification;
                        iconClass = "mediaStatusIconContainer_inlineNotification";
                        ariaId = String.id.IDS_MEDIA_STATUS_STREAMING_MONTHLY_LIMIT_HIT_ICON
                    }
                    else if (this._transferErrorCode) {
                        icon = MS.Entertainment.UI.Icon.inlineError;
                        iconClass = "mediaStatusIconContainer_inlineError";
                        ariaId = String.id.IDS_MEDIA_STATUS_DOWNLOAD_ERROR_ICON
                    }
                    else if (this._notLocalErrorCode) {
                        icon = MS.Entertainment.UI.Icon.inlineNotification;
                        iconClass = "mediaStatusIconContainer_inlineNotification"
                    }
                    else if (this._isNowPlaying) {
                        icon = MS.Entertainment.UI.Icon.nowPlaying;
                        iconClass = "mediaStatusIconContainer_nowPlaying";
                        ariaId = String.id.IDS_MEDIA_STATUS_NOW_PLAYING_ICON
                    }
                    else if (this._isDownloading) {
                        icon = WinJS.UI.AppBarIcon.download;
                        iconClass = "mediaStatusIconContainer_download";
                        ariaId = String.id.IDS_MEDIA_STATUS_DOWNLOADING_ICON
                    }
                    else if (this._hasMusicVideo) {
                        icon = MS.Entertainment.UI.Icon.video11;
                        iconClass = "mediaStatusIconContainer_video11";
                        ariaId = String.id.IDS_MUSIC2_MUSIC_VIDEO_NOTE
                    }
                    else if (this._inCollection) {
                        icon = MS.Entertainment.UI.Icon.musicInCollection;
                        iconClass = "mediaStatusIconContainer_musicInCollection";
                        ariaId = String.id.IDS_MARKETPLACE_TOOLTIP_IN_COLLECTION
                    }
                    else if (this.notificationText) {
                        icon = MS.Entertainment.UI.Icon.inlineNotification;
                        iconClass = "mediaStatusIconContainer_inlineNotification";
                        ariaText = this.notificationText;
                        this._hasUsageRightRestrictions = true
                    }
                    if (this._icon !== icon) {
                        this._icon = icon;
                        this._iconContainerDomElement.textContent = icon
                    }
                    if (this.iconClass !== iconClass)
                        this.iconClass = iconClass;
                    if (ariaId)
                        ariaText = String.load(ariaId);
                    if (this._ariaText !== ariaText) {
                        this._ariaText = ariaText;
                        if (ariaText)
                            this._ariaLabelContainerDomElement.textContent = ariaText;
                        else
                            this._ariaLabelContainerDomElement.textContent = String.empty;
                        this.domElement.title = this._ariaLabelContainerDomElement.textContent
                    }
                }, _setVisible: function _setVisible(hasError) {
                    var visible = hasError || this._isNowPlaying || this._isDownloading || this._inCollection || this._hasMusicVideo || this._hasUsageRightRestrictions;
                    if (this._visible !== visible) {
                        this._visible = visible;
                        this.visibility = visible
                    }
                }, _updateFlyoutState: function _updateFlyoutState() {
                    if (this._unloaded || !this.domElement || this.hasError)
                        return;
                    if (this.notificationText) {
                        this.domElement.disabled = MS.Entertainment.Utilities.isMusicApp2;
                        this.domElement.setAttribute("role", "")
                    }
                    else {
                        this._notificationText = null;
                        this.domElement.disabled = true;
                        this.domElement.setAttribute("role", "presentation")
                    }
                }, _updateState: function _updateState() {
                    this._playability = MS.Entertainment.Utilities.playabilityTest(this.mediaInstance, {
                        cloudRights: this.showCloudRights, mediaRights: this.showMediaRights, checkExplicit: this.showExplicit, rights: this._rights
                    });
                    this.isUnavailable = this._playability.isUnavailable;
                    if (this.showExplicit)
                        this._isExplicit = this.mediaInstance.isExplicit;
                    this._updateFlyoutState();
                    this._setIconAndAriaString();
                    var setClassFreeStreamLimitExceeded = this._freeTrackLimitExceeded || (this.mediaInstance && this.mediaInstance.inCollection && this._monthlyFreeLimitExceeded);
                    if (this._setClassFreeStreamLimitExceeded !== setClassFreeStreamLimitExceeded) {
                        this._setClassFreeStreamLimitExceeded = setClassFreeStreamLimitExceeded;
                        var freeStreamLimitExceededClassName = "state_freeStreamLimitExceeded";
                        if (setClassFreeStreamLimitExceeded)
                            MS.Entertainment.Utilities.safeAddClass(this.parentWinItemElement, freeStreamLimitExceededClassName);
                        else
                            MS.Entertainment.Utilities.safeRemoveClass(this.parentWinItemElement, freeStreamLimitExceededClassName)
                    }
                    if (this._setIsNowPlayingState !== this._isNowPlaying) {
                        this._setIsNowPlayingState = this._isNowPlaying;
                        var stateNowplayingClassName = "state_nowPlaying";
                        if (this._setIsNowPlayingState)
                            MS.Entertainment.Utilities.safeAddClass(this.parentWinItemElement, stateNowplayingClassName);
                        else
                            MS.Entertainment.Utilities.safeRemoveClass(this.parentWinItemElement, stateNowplayingClassName)
                    }
                    if (this._setCanPlayLocally !== this._canPlayLocally) {
                        this._setCanPlayLocally = this._canPlayLocally;
                        var streamOnlyClassName = "state_streamingOnly";
                        if (this._setCanPlayLocally)
                            MS.Entertainment.Utilities.safeRemoveClass(this.parentWinItemElement, streamOnlyClassName);
                        else
                            MS.Entertainment.Utilities.safeAddClass(this.parentWinItemElement, streamOnlyClassName)
                    }
                    this._setExplicit = this._isExplicit;
                    var explicitClassName = "state_explicit";
                    if (this._setExplicit && !this._playability.explicitAllowed)
                        MS.Entertainment.Utilities.safeAddClass(this.parentWinItemElement, explicitClassName);
                    else
                        MS.Entertainment.Utilities.safeRemoveClass(this.parentWinItemElement, explicitClassName);
                    if (this._setUnavailable !== this.isUnavailable) {
                        this._setUnavailable = this.isUnavailable;
                        var unavailableClassName = "state_unavailable";
                        if (this._setUnavailable)
                            MS.Entertainment.Utilities.safeAddClass(this.parentWinItemElement, unavailableClassName);
                        else
                            MS.Entertainment.Utilities.safeRemoveClass(this.parentWinItemElement, unavailableClassName)
                    }
                    var hasError = (this._playbackErrorCode || this._transferErrorCode || this._freeTrackLimitExceeded || this._notLocalErrorCode || this._monthlyFreeLimitExceeded) ? true : false;
                    if (this.hasError !== hasError) {
                        this.hasError = hasError;
                        if (this.domElement)
                            if (hasError) {
                                this.domElement.disabled = MS.Entertainment.Utilities.isMusicApp2;
                                this.domElement.setAttribute("role", "")
                            }
                            else {
                                this.domElement.disabled = true;
                                this.domElement.setAttribute("role", "presentation")
                            }
                        if (this._iconContainerDomElement)
                            MS.Entertainment.Utilities.toggleClassOnElement(this._iconContainerDomElement, hasError, "state-mediaError")
                    }
                    var visible = this._setVisible(hasError)
                }, _getParentWinItemElement: function _getParentWinItemElement() {
                    var parentWinItemElement = this.domElement;
                    if (parentWinItemElement && !WinJS.Utilities.hasClass(parentWinItemElement, "win-item"))
                        parentWinItemElement = MS.Entertainment.Utilities.findParentElementByClassName(parentWinItemElement, "win-item");
                    if (!parentWinItemElement) {
                        parentWinItemElement = this.domElement;
                        do
                            parentWinItemElement = MS.Entertainment.Utilities.findParentElementByClassName(parentWinItemElement, "win-template");
                        while (parentWinItemElement && parentWinItemElement.parentElement)
                    }
                    if (!parentWinItemElement)
                        parentWinItemElement = this.domElement;
                    return parentWinItemElement
                }, _attachedMediaId: function _attachedMediaId(mediaId) {
                    if (typeof mediaId === "number")
                        this._attachedLibraryId = mediaId;
                    else if (typeof mediaId === "string")
                        if (this._isFilePath(mediaId))
                            this._attachedActivationFilePath = mediaId;
                        else
                            this._attachedServiceId = mediaId;
                    else
                        MS.Entertainment.UI.Controls.Music.fail("Attached unknown mediaId type")
                }, _detachedMediaId: function _detachedMediaId(mediaId) {
                    if (typeof mediaId === "number")
                        this._attachedLibraryId = -1;
                    else if (typeof mediaId === "string")
                        if (this._isFilePath(mediaId))
                            this._attachedActivationFilePath = String.empty;
                        else
                            this._attachedServiceId = MS.Entertainment.Utilities.EMPTY_GUID;
                    else
                        MS.Entertainment.UI.Controls.Music.fail("Detached unknown mediaId type")
                }, _isFilePath: function _isFilePath(text) {
                    return (text.indexOf("\\") >= 0 || text.indexOf("/") >= 0)
                }, _isValidMediaId: function _isValidMediaId(mediaId) {
                    return ((typeof mediaId === "number" && mediaId >= 0) || (typeof mediaId === "string" && !MS.Entertainment.Utilities.isEmptyGuid(mediaId)))
                }
        }, {
            mediaInstance: null, showInCollectionState: false
        })})
})()
})();
/* >>>>>>/controls/music1/musicmediastatusicon.js:11492 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
                var MusicMediaStatusIcon = (function(_super) {
                        __extends(MusicMediaStatusIcon, _super);
                        function MusicMediaStatusIcon() {
                            _super.apply(this, arguments);
                            this._currentDataContextEventHandlers = null
                        }
                        MusicMediaStatusIcon.prototype._delayInitialized = function() {
                            _super.prototype._delayInitialized.call(this);
                            this._setVisible(false)
                        };
                        MusicMediaStatusIcon.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._currentDataContextEventHandlers) {
                                this._currentDataContextEventHandlers.cancel();
                                this._currentDataContextEventHandlers = null
                            }
                        };
                        MusicMediaStatusIcon.prototype._setVisible = function(hasError) {
                            if (!this.domElement)
                                return;
                            _super.prototype._setVisible.call(this, hasError);
                            if (!this._visible)
                                WinJS.Utilities.addClass(this.domElement, "removeFromDisplay");
                            else
                                WinJS.Utilities.removeClass(this.domElement, "removeFromDisplay");
                            var siblings = null;
                            if (this.domElement.parentElement)
                                siblings = this.domElement.parentElement.children;
                            if (siblings) {
                                var currentSibling;
                                for (var i = 0; i < siblings.length; i++) {
                                    currentSibling = siblings[i];
                                    if (currentSibling !== this.domElement)
                                        if (this._visible)
                                            WinJS.Utilities.addClass(currentSibling, "removeFromDisplay");
                                        else
                                            WinJS.Utilities.removeClass(currentSibling, "removeFromDisplay")
                                }
                            }
                        };
                        MusicMediaStatusIcon.prototype._updateFlyoutState = function() {
                            this.notificationText = this._playability.notificationText;
                            if (this._playability.notificationAction)
                                this.notificationAction = this._playability.notificationAction;
                            _super.prototype._updateFlyoutState.call(this);
                            return
                        };
                        return MusicMediaStatusIcon
                    })(MS.Entertainment.UI.Controls.MediaStatusIcon);
                Controls.MusicMediaStatusIcon = MusicMediaStatusIcon
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.MusicMediaStatusIcon)
})();
/* >>>>>>/controls/tooltipcontrol.js:11570 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function() {
    "use strict";
    WinJS.Namespace.define("MS.Entertainment.UI.Controls", {Tooltip: MS.Entertainment.UI.Framework.define(function(element, options) {
            this.domElement = element;
            WinJS.UI.setOptions(this, options)
        }, {
            domElement: null, enableDelayInitialization: true, isInteractive: true, title: null, _innerControl: null, delayInitialize: function delayInitialize() {
                    if (!this._innerControl) {
                        var container = document.createElement("div");
                        this._innerControl = new WinJS.UI.Tooltip(container, {title: this.title});
                        this.domElement.appendChild(container)
                    }
                }
        })})
})()
})();
/* >>>>>>/controls/viewstatecontrol.js:11589 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
                var ViewStateControl = (function(_super) {
                        __extends(ViewStateControl, _super);
                        function ViewStateControl(element, options) {
                            _super.call(this, element, options);
                            this._loadingTimer = null;
                            this._moduleWaitTime = null;
                            this._listsRendered = false;
                            this._contentComplete = false;
                            this._networkStatusListener = null;
                            this._selfEventBindings = MS.Entertainment.UI.Framework.addEventHandlers(this, {dataContextChanged: this.handleDataContextChanged.bind(this)});
                            if (!this.skipProcessDeclarative)
                                this.processDeclarativeControlContainer()
                        }
                        Object.defineProperty(ViewStateControl.prototype, "dataContext", {
                            get: function() {
                                return this._dataContext
                            }, set: function(value) {
                                    this.updateAndNotify("dataContext", value)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(ViewStateControl.prototype, "moduleWaitTime", {
                            get: function() {
                                if (!this._moduleWaitTime) {
                                    var configManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                                    this._moduleWaitTime = configManager.music.pageLoadTimeUntilSpinner
                                }
                                return this._moduleWaitTime
                            }, set: function(value) {
                                    this._moduleWaitTime = value
                                }, enumerable: true, configurable: true
                        });
                        ViewStateControl.prototype.freeze = function() {
                            _super.prototype.freeze.call(this);
                            if (this.dataContext && this.dataContext.freeze)
                                this.dataContext.freeze();
                            this._cancelNetworkStatusListener()
                        };
                        ViewStateControl.prototype.thaw = function() {
                            _super.prototype.thaw.call(this);
                            if (this.dataContext && this.dataContext.thaw)
                                this.dataContext.thaw();
                            this._enableNetworkStatusListener()
                        };
                        ViewStateControl.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._selfEventBindings) {
                                this._selfEventBindings.cancel();
                                this._selfEventBindings = null
                            }
                            this._cancelDataContextBindings();
                            this._cancelLoadingTimer();
                            this._cancelListsRenderedBindings();
                            this._cancelNetworkStatusListener()
                        };
                        ViewStateControl.prototype.processDeclarativeControlContainer = function() {
                            var _this = this;
                            var listCount = 0;
                            var listRenderedCount = 0;
                            var listRendered = function() {
                                    if (listRenderedCount >= listCount) {
                                        Controls.assert(listRenderedCount == listCount, "ViewStateControl::_processDeclarativeControlContainer(). We counted more list renders than there are lists.");
                                        _this._listsRendered = true;
                                        _this._onContentComplete();
                                        _this._cancelListsRenderedBindings()
                                    }
                                };
                            var notifyListRendered = function(control) {
                                    if (control && !control.excludeFromContentReady) {
                                        listRenderedCount++;
                                        listRendered()
                                    }
                                };
                            var readyElement = this.domElement.querySelector("[data-ent-member='_readyElement']");
                            if (readyElement)
                                this._listsRenderedBindings = MS.Entertainment.UI.Framework.addEventHandlers(readyElement, {
                                    firstTimeRendered: function(event) {
                                        return notifyListRendered(event.srcElement.winControl)
                                    }, galleryFirstPageRendered: function(event) {
                                            return notifyListRendered(event.srcElement.winControl)
                                        }
                                });
                            var processPromise;
                            if (!this.skipProcessDeclarative)
                                processPromise = MS.Entertainment.UI.Framework.processDeclarativeControlContainer(this);
                            WinJS.Promise.as(processPromise).done(function() {
                                if (readyElement) {
                                    var winControls = readyElement.querySelectorAll("[data-win-control], .ent-control");
                                    var isGalleryControlDefined = !!Controls.GalleryControl;
                                    var isItemsControlDefined = !!Controls.ItemsControl;
                                    for (var i = 0; i < winControls.length; i++) {
                                        var control = winControls[i].winControl;
                                        if (control && !control.excludeFromContentReady && ((isGalleryControlDefined && (control instanceof Controls.GalleryControl)) || (isItemsControlDefined && (control instanceof Controls.ItemsControl))))
                                            listCount++
                                    }
                                }
                                listRendered()
                            })
                        };
                        ViewStateControl.prototype.handleDataContextChanged = function() {
                            this._cancelDataContextBindings();
                            if (!this.dataContext)
                                return;
                            this._dataContextViewStateBindings = MS.Entertainment.UI.Framework.addEventHandlers(this.dataContext.viewStateViewModel, {viewStateChanged: this._viewStateChanged.bind(this)});
                            this._viewStateChanged()
                        };
                        ViewStateControl.prototype._enableNetworkStatusListener = function() {
                            var _this = this;
                            if (!this.contentOfflineStateEnabled || !this._contentComplete)
                                return;
                            var uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            this._networkStatusListener = MS.Entertainment.UI.Framework.addEventHandlers(uiState, {networkStatusChanged: function() {
                                    _this._updateReadyElementOfflineState()
                                }});
                            this._updateReadyElementOfflineState()
                        };
                        ViewStateControl.prototype._cancelNetworkStatusListener = function() {
                            if (this._networkStatusListener) {
                                this._networkStatusListener.cancel();
                                this._networkStatusListener = null
                            }
                        };
                        ViewStateControl.prototype._updateReadyElementOfflineState = function() {
                            if (this.contentOfflineStateEnabled) {
                                var offlineClassName = "state_offline";
                                if (UI.NetworkStatusService.isOnline())
                                    this._safeRemoveClass(this._readyElement, offlineClassName);
                                else
                                    this._safeAddClass(this._readyElement, offlineClassName)
                            }
                        };
                        ViewStateControl.prototype._viewStateChanged = function() {
                            var _this = this;
                            MS.Entertainment.UI.Controls.assert(!!this.domElement, "For some reason we dont have a dom element yet");
                            if (!this.domElement)
                                return;
                            switch (this.dataContext.viewStateViewModel.viewState) {
                                case 1:
                                    {
                                        var suppressLoadingSpinner = this.dataContext.viewStateViewModel.suppressLoadingSpinner;
                                        if (!suppressLoadingSpinner && !this._loadingTimer && this._loadingElement) {
                                            this._loadingTimer = WinJS.Promise.timeout(this.moduleWaitTime);
                                            this._loadingTimer.done(function() {
                                                if (_this._loadingTimer) {
                                                    _this._showHideElements([_this._errorOfflineEmptyElement, _this._readyElement], [_this._notificationsElement, _this._loadingElement]);
                                                    _this._scrollToTopOfContainer()
                                                }
                                                _this._loadingTimer = null
                                            }, function() {
                                                _this._loadingTimer = null
                                            })
                                        }
                                        break
                                    }
                                case-1:
                                case-2:
                                case 0:
                                    {
                                        this._cancelLoadingTimer();
                                        this._showHideElements([this._readyElement, this._loadingElement], [this._notificationsElement, this._errorOfflineEmptyElement]);
                                        this._scrollToTopOfContainer();
                                        this._onContentComplete();
                                        break
                                    }
                                case 2:
                                    {
                                        if (!this.delayShowReadyUntilListsRendered || this._contentComplete) {
                                            this._cancelLoadingTimer();
                                            this._showReadyElements()
                                        }
                                        this._onContentComplete();
                                        break
                                    }
                                default:
                                    this._cancelLoadingTimer();
                                    this._showHideElements([this._errorOfflineEmptyElement, this._notificationsElement, this._readyElement, this._loadingElement], []);
                                    break
                            }
                        };
                        ViewStateControl.prototype._scrollToTopOfContainer = function() {
                            var _this = this;
                            if (!!this.resetScrollTop && this.domElement && this.domElement.parentElement && this.domElement.parentElement.scrollTop != 0)
                                requestAnimationFrame(function() {
                                    _this.domElement.parentElement.scrollTop = 0
                                })
                        };
                        ViewStateControl.prototype._getCollapsingClass = function(element) {
                            return (element && element === this._readyElement && this.hideFromDisplayReadyElement) ? "hideFromDisplay" : "removeFromDisplay"
                        };
                        ViewStateControl.prototype._showHideElements = function(hideElements, showElements) {
                            MS.Entertainment.UI.Controls.assert(hideElements !== null, "hideElements cannot be null");
                            MS.Entertainment.UI.Controls.assert(showElements !== null, "showElements cannot be null");
                            for (var i = 0; i < hideElements.length; i++) {
                                var collapsingClass = this._getCollapsingClass(hideElements[i]);
                                this._safeAddClass(hideElements[i], collapsingClass)
                            }
                            for (var i = 0; i < showElements.length; i++) {
                                var collapsingClass = this._getCollapsingClass(showElements[i]);
                                this._safeRemoveClass(showElements[i], collapsingClass)
                            }
                        };
                        ViewStateControl.prototype._safeAddClass = function(element, className) {
                            if (element)
                                WinJS.Utilities.addClass(element, className)
                        };
                        ViewStateControl.prototype._safeRemoveClass = function(element, className) {
                            if (element)
                                WinJS.Utilities.removeClass(element, className)
                        };
                        ViewStateControl.prototype._cancelDataContextBindings = function() {
                            if (this._dataContextViewStateBindings) {
                                this._dataContextViewStateBindings.cancel();
                                this._dataContextViewStateBindings = null
                            }
                        };
                        ViewStateControl.prototype._cancelLoadingTimer = function() {
                            if (this._loadingTimer) {
                                this._loadingTimer.cancel();
                                this._loadingTimer = null
                            }
                        };
                        ViewStateControl.prototype._cancelListsRenderedBindings = function() {
                            if (this._listsRenderedBindings) {
                                this._listsRenderedBindings.cancel();
                                this._listsRenderedBindings = null
                            }
                        };
                        ViewStateControl.prototype._onContentComplete = function() {
                            var _this = this;
                            if (this._contentComplete || !this.dataContext || !this.dataContext.viewStateViewModel)
                                return;
                            var viewState = this.dataContext.viewStateViewModel.viewState;
                            var pageReady = (this._listsRendered || !!this.dataContext.skipListRendersForContentComplete) && viewState === 2;
                            var viewModelReady = viewState === -2 || viewState === -1 || viewState === 0;
                            if (pageReady || viewModelReady) {
                                if (MS.Entertainment.UI.Framework.Navigation && !this._contentComplete) {
                                    this._contentComplete = true;
                                    MS.Entertainment.UI.Framework.Navigation.raiseContentComplete(this.domElement)
                                }
                                if (!this._unloaded) {
                                    if (this.delayInitializeDataContext && this.dataContext.delayInitialize)
                                        this.dataContext.delayInitialize();
                                    if (this.delayInitializeChildren)
                                        MS.Entertainment.Utilities.schedulePromiseBelowNormal().done(function() {
                                            if (!_this._unloaded)
                                                MS.Entertainment.UI.Framework.delayInitializeChildren(_this.domElement)
                                        }, function(error) {
                                            MS.Entertainment.UI.Controls.assert(WinJS.Promise.isCanceledError(error), "ViewStateControl::_onContentComplete() The scheduler failed. Error: " + (error.message))
                                        });
                                    if (this.delayShowReadyUntilListsRendered && viewState === 2) {
                                        this._cancelLoadingTimer();
                                        this._showReadyElements()
                                    }
                                }
                                this._enableNetworkStatusListener();
                                this._updateReadyElementOfflineState()
                            }
                        };
                        ViewStateControl.prototype._showReadyElements = function() {
                            this._showHideElements([this._errorOfflineEmptyElement, this._notificationsElement, this._loadingElement], [this._readyElement]);
                            this._scrollToTopOfContainer();
                            if (!!this.enableEnterContentAnimation)
                                WinJS.UI.Animation.enterContent(this._readyElement)
                        };
                        ViewStateControl.isDeclarativeControlContainer = true;
                        return ViewStateControl
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.ViewStateControl = ViewStateControl;
                var ViewStateControlWithAds = (function(_super) {
                        __extends(ViewStateControlWithAds, _super);
                        function ViewStateControlWithAds(element, options) {
                            var _this = this;
                            _super.call(this, element, options);
                            this._uiStateServiceBinding = null;
                            this._uiState = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                            this._uiStateServiceBinding = WinJS.Binding.bind(this._uiState, {shouldShowAdsForFreePlay: function() {
                                    return _this._refreshAdState()
                                }})
                        }
                        ViewStateControlWithAds.prototype.initialize = function(){};
                        ViewStateControlWithAds.prototype.freeze = function() {
                            _super.prototype.freeze.call(this)
                        };
                        ViewStateControlWithAds.prototype.thaw = function() {
                            _super.prototype.thaw.call(this)
                        };
                        ViewStateControlWithAds.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._uiStateServiceBinding) {
                                this._uiStateServiceBinding.cancel();
                                this._uiStateServiceBinding = null
                            }
                        };
                        ViewStateControlWithAds.prototype.handleDataContextChanged = function() {
                            _super.prototype.handleDataContextChanged.call(this);
                            this._refreshAdState()
                        };
                        ViewStateControlWithAds.prototype._refreshAdState = function() {
                            if (this._uiState.shouldShowAdsForFreePlay && (!this.dataContext || !this.dataContext.isAdFreePage))
                                WinJS.Utilities.addClass(this.domElement, ViewStateControlWithAds.ADS_ENABLED_CLASS_NAME);
                            else
                                WinJS.Utilities.removeClass(this.domElement, ViewStateControlWithAds.ADS_ENABLED_CLASS_NAME)
                        };
                        ViewStateControlWithAds.ADS_ENABLED_CLASS_NAME = "adsState-enabled";
                        return ViewStateControlWithAds
                    })(ViewStateControl);
                Controls.ViewStateControlWithAds = ViewStateControlWithAds
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));
WinJS.Utilities.markSupportedForProcessing(MS.Entertainment.UI.Controls.ViewStateControl)
})();
/* >>>>>>/controls/shrinkandstayheadercontrol.js:11923 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                var ShrinkAndStayHeaderControl = (function(_super) {
                        __extends(ShrinkAndStayHeaderControl, _super);
                        function ShrinkAndStayHeaderControl(element, options) {
                            _super.call(this, element, options);
                            this._dropDownVisible = false;
                            this._isZoomedOut = false;
                            if (!WinJS.Utilities.hasClass(this.domElement, ShrinkAndStayHeaderControl.containerClass))
                                WinJS.Utilities.addClass(this.domElement, ShrinkAndStayHeaderControl.containerClass);
                            this._dropDownHeader = this.domElement.querySelector("." + ShrinkAndStayHeaderControl.dropDownHeaderClass);
                            this._headerChangeEventHandlers = MS.Entertainment.UI.Framework.addEventHandlers(this.domElement, {
                                showPageHeader: this._showHeaderHandler.bind(this), hidePageHeader: this._hideHeaderHandler.bind(this), zoomchanged: this._handleSemanticZoomChanged.bind(this)
                            });
                            this._scrollerEventHandler = MS.Entertainment.UI.Framework.addEventHandlers(this.scroller, {scroll: this._handleScroll.bind(this)})
                        }
                        Object.defineProperty(ShrinkAndStayHeaderControl.prototype, "dropDownVisible", {
                            get: function() {
                                return this._dropDownVisible
                            }, enumerable: true, configurable: true
                        });
                        ShrinkAndStayHeaderControl.prototype._showHeaderHandler = function(e) {
                            if (this._dropDownVisible || this._isZoomedOut)
                                return;
                            this._updateClassesToShowHeader();
                            this._dropDownVisible = true;
                            if (e.moveFocusToHeader && !this._dropDownHeader.contains(document.activeElement))
                                MS.Entertainment.UI.Framework.focusFirstInSubTree(this._dropDownHeader, true, false, true);
                            var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                            eventProvider.traceShrinkAndStayHeader_Shown()
                        };
                        ShrinkAndStayHeaderControl.prototype._hideHeaderHandler = function() {
                            if (!this._dropDownVisible)
                                return;
                            this._updateClassesToHideHeader();
                            this._dropDownVisible = false;
                            if (this._dropDownHeader.contains(document.activeElement))
                                MS.Entertainment.UI.Framework.focusFirstInSubTree(this.scroller, true, true, true);
                            var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                            eventProvider.traceShrinkAndStayHeader_Dismissed()
                        };
                        ShrinkAndStayHeaderControl.prototype._handleSemanticZoomChanged = function() {
                            var semanticZoomElement = this.domElement.querySelector(".win-semanticzoom");
                            if (!semanticZoomElement || !semanticZoomElement.winControl)
                                return;
                            this._isZoomedOut = semanticZoomElement.winControl.zoomedOut;
                            if (this._dropDownVisible)
                                if (this._isZoomedOut)
                                    this._updateClassesToHideHeader();
                                else
                                    this._updateClassesToShowHeader()
                        };
                        ShrinkAndStayHeaderControl.prototype._updateClassesToShowHeader = function() {
                            WinJS.Utilities.removeClass(this._dropDownHeader, ShrinkAndStayHeaderControl.headerStateCollapsedClass);
                            WinJS.Utilities.addClass(this._dropDownHeader, ShrinkAndStayHeaderControl.headerStateExpandedClass)
                        };
                        ShrinkAndStayHeaderControl.prototype._updateClassesToHideHeader = function() {
                            WinJS.Utilities.removeClass(this._dropDownHeader, ShrinkAndStayHeaderControl.headerStateExpandedClass);
                            WinJS.Utilities.addClass(this._dropDownHeader, ShrinkAndStayHeaderControl.headerStateCollapsedClass)
                        };
                        ShrinkAndStayHeaderControl.prototype._handleScroll = function() {
                            var scrollPosition = this.scroller.scrollTop;
                            if (scrollPosition >= this.dropDownHeaderLimit)
                                ShrinkAndStayHeaderControl.raiseShowPageHeaderEvent(this.domElement);
                            else
                                ShrinkAndStayHeaderControl.raiseHidePageHeaderEvent(this.domElement)
                        };
                        ShrinkAndStayHeaderControl.prototype.initialize = function(){};
                        Object.defineProperty(ShrinkAndStayHeaderControl.prototype, "scroller", {
                            get: function() {
                                return this.domElement
                            }, enumerable: true, configurable: true
                        });
                        ShrinkAndStayHeaderControl.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._headerChangeEventHandlers) {
                                this._headerChangeEventHandlers.cancel();
                                this._headerChangeEventHandlers = null
                            }
                            if (this._scrollerEventHandler) {
                                this._scrollerEventHandler.cancel();
                                this._scrollerEventHandler = null
                            }
                        };
                        ShrinkAndStayHeaderControl.raiseShowPageHeaderEvent = function(element, moveFocusToHeader) {
                            MS.Entertainment.UI.Controls.assert(element, "Require element to raise event");
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("showPageHeader", true, false);
                            domEvent.moveFocusToHeader = moveFocusToHeader;
                            element.dispatchEvent(domEvent)
                        };
                        ShrinkAndStayHeaderControl.raiseHidePageHeaderEvent = function(element) {
                            MS.Entertainment.UI.Controls.assert(element, "Require element to raise event");
                            var domEvent = document.createEvent("Event");
                            domEvent.initEvent("hidePageHeader", true, false);
                            element.dispatchEvent(domEvent)
                        };
                        ShrinkAndStayHeaderControl.containerClass = "control-shrinkAndStayHeaderControl";
                        ShrinkAndStayHeaderControl.dropDownHeaderClass = "shrinkAndStayHeaderControl-dropDownHeader";
                        ShrinkAndStayHeaderControl.headerStateCollapsedClass = "dropDownHeader_collapsed";
                        ShrinkAndStayHeaderControl.headerStateExpandedClass = "dropDownHeader_expanded";
                        return ShrinkAndStayHeaderControl
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.ShrinkAndStayHeaderControl = ShrinkAndStayHeaderControl
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/controls/shrinkandstaylistviewlayout.js:12052 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                var fx = MS.Entertainment.UI.Framework;
                var BaseShrinkAndStayLayout = (function() {
                        function BaseShrinkAndStayLayout(options) {
                            this.headerThreshold = 65;
                            this._cachedSurfaceOffsetTop = 0;
                            this.fixedHeaderVisible = false;
                            WinJS.UI.setOptions(this, options)
                        }
                        BaseShrinkAndStayLayout.prototype._handleHeaderResize = function() {
                            if (this._headerParentedToListview)
                                this._cachedSurfaceOffsetTop = this._site.surface.offsetTop;
                            else
                                this._cachedSurfaceOffsetTop = 0
                        };
                        BaseShrinkAndStayLayout.prototype._handleHeaderKeyEvents = function(e) {
                            switch (e.keyCode) {
                                case WinJS.Utilities.Key.upArrow:
                                case WinJS.Utilities.Key.downArrow:
                                case WinJS.Utilities.Key.leftArrow:
                                case WinJS.Utilities.Key.rightArrow:
                                    e.stopPropagation();
                                    e.preventDefault();
                                    break;
                                case WinJS.Utilities.Key.enter:
                                case WinJS.Utilities.Key.space:
                                    e.stopPropagation();
                                    break
                            }
                        };
                        BaseShrinkAndStayLayout.prototype._cancelHeaderHandlers = function() {
                            if (this._headerHandlers) {
                                this._headerHandlers.cancel();
                                this._headerHandlers = null
                            }
                        };
                        BaseShrinkAndStayLayout.prototype._handleViewportScroll = function() {
                            var scrollPosition = this._site.viewport.scrollTop;
                            this._parentHeaderIntoListview();
                            if ((scrollPosition >= this.headerThreshold) && !this.fixedHeaderVisible) {
                                this.fixedHeaderVisible = true;
                                MS.Entertainment.UI.Controls.ShrinkAndStayHeaderControl.raiseShowPageHeaderEvent(this._site.viewport, this.header.contains(document.activeElement));
                                this._suppressHeaderTabbing()
                            }
                            else if ((scrollPosition < this.headerThreshold) && this.fixedHeaderVisible) {
                                this.fixedHeaderVisible = false;
                                MS.Entertainment.UI.Controls.ShrinkAndStayHeaderControl.raiseHidePageHeaderEvent(this._site.viewport);
                                this._restoreHeaderTabbing()
                            }
                        };
                        BaseShrinkAndStayLayout.prototype._parentHeaderIntoOriginalContainer = function() {
                            if (!this._headerContainer || !this.header)
                                return;
                            this._headerParentedToListview = false;
                            this._cancelHeaderHandlers();
                            if (!this._headerContainer.contains(this.header))
                                return;
                            Controls.ShrinkAndStayHeaderControl.raiseHidePageHeaderEvent(this._site.viewport);
                            MS.Entertainment.UI.Controls.assert(this._originalHeaderContainer, "Didn't have an orignal header, can't reparent");
                            if (this._originalHeaderContainer && this.header)
                                this._reparentHeader(this._originalHeaderContainer)
                        };
                        BaseShrinkAndStayLayout.prototype._parentHeaderIntoListview = function() {
                            if (!this._headerParentedToListview) {
                                if (!this.header || this._headerContainer.contains(this.header))
                                    return;
                                this._originalHeaderContainer = this.header.parentElement;
                                this._reparentHeader(this._headerContainer);
                                if (!this._headerHandlers)
                                    this._headerHandlers = fx.addEventHandlers(this.header, {
                                        mselementresize: this._handleHeaderResize.bind(this), keydown: this._handleHeaderKeyEvents.bind(this), keypress: this._handleHeaderKeyEvents.bind(this), keyup: this._handleHeaderKeyEvents.bind(this)
                                    });
                                this._handleHeaderResize();
                                this._headerParentedToListview = true
                            }
                        };
                        BaseShrinkAndStayLayout.prototype._reparentHeader = function(newParent) {
                            this.header.suppressUnload = true;
                            var activeElement = document.activeElement;
                            var focusIsInHeader = (activeElement && this.header.contains(activeElement));
                            newParent.appendChild(this.header);
                            if (focusIsInHeader)
                                try {
                                    activeElement.setActive()
                                }
                                catch(ex) {}
                            this.header.suppressUnload = false
                        };
                        BaseShrinkAndStayLayout.prototype._getItemOffsetPatch = function() {
                            var _this = this;
                            return WinJS.UI.ListView.prototype._getItemOffset.apply(this._parentListview, arguments).then(function(pos) {
                                    pos.begin -= _this._cachedSurfaceOffsetTop + 5;
                                    if (_this.fixedHeaderVisible)
                                        _this._handleViewportScroll();
                                    return pos
                                })
                        };
                        BaseShrinkAndStayLayout.prototype._animateListEntracePatch = function() {
                            var _this = this;
                            return WinJS.UI.ListView.prototype._animateListEntrance.apply(this._parentListview, arguments).then(function(result) {
                                    _this._parentHeaderIntoListview();
                                    return result
                                })
                        };
                        BaseShrinkAndStayLayout.prototype._getTabStopsForElementsSubtree = function(element, includeNegativeTabStops) {
                            var tabStops = WinJS.Utilities.query("*", element).filter(function(candidateTabstop) {
                                    if ((candidateTabstop.tabIndex < 0) && !includeNegativeTabStops)
                                        return false;
                                    if (candidateTabstop.hasAttribute("tabindex"))
                                        return true;
                                    switch (candidateTabstop.tagName.toLocaleLowerCase()) {
                                        case"button":
                                            return true;
                                        default:
                                            return false
                                    }
                                });
                            return tabStops
                        };
                        BaseShrinkAndStayLayout.prototype._suppressHeaderTabbing = function() {
                            this._getTabStopsForElementsSubtree(this.header, false).forEach(function(item) {
                                item.previousTabIndex = item.tabIndex;
                                item.tabIndex = -1
                            })
                        };
                        BaseShrinkAndStayLayout.prototype._restoreHeaderTabbing = function() {
                            this._getTabStopsForElementsSubtree(this.header, true).forEach(function(item) {
                                if (item.previousTabIndex === undefined)
                                    return;
                                item.tabIndex = item.previousTabIndex;
                                item.previousTabIndex = undefined
                            })
                        };
                        Object.defineProperty(BaseShrinkAndStayLayout.prototype, "orientation", {
                            get: function() {
                                return this._layout.orientation
                            }, set: function(value) {
                                    this._layout.orientation = value
                                }, enumerable: true, configurable: true
                        });
                        BaseShrinkAndStayLayout.prototype.initialize = function(site, groupsEnabled) {
                            this._site = site;
                            MS.Entertainment.UI.Controls.assert(this.header, "We need a header to reparent into the listview");
                            if (!this._headerContainer) {
                                this._headerContainer = document.createElement("div");
                                this._headerContainer.className = "shrinkAndStay-headerContainer"
                            }
                            if (!site.viewport.hasHeader) {
                                this._site.surface.insertAdjacentElement("beforebegin", this._headerContainer);
                                this._site.viewport.hasHeader = true
                            }
                            if (!this._viewportHandlers)
                                this._viewportHandlers = MS.Entertainment.UI.Framework.addEventHandlers(this._site.viewport, {scroll: this._handleViewportScroll.bind(this)});
                            if (!this._parentListview) {
                                this._parentListview = WinJS.Utilities.getMember("_site.viewport.parentElement.winControl", this);
                                if (this._parentListview) {
                                    this._parentListview._getItemOffset = this._getItemOffsetPatch.bind(this);
                                    this._parentListview._animateListEntrance = this._animateListEntracePatch.bind(this)
                                }
                            }
                            this._layout.initialize(site, groupsEnabled)
                        };
                        BaseShrinkAndStayLayout.prototype.uninitialize = function() {
                            if (this._viewportHandlers) {
                                this._viewportHandlers.cancel();
                                this._viewportHandlers = null
                            }
                            this._cancelHeaderHandlers();
                            this._parentHeaderIntoOriginalContainer();
                            this._layout.uninitialize()
                        };
                        BaseShrinkAndStayLayout.prototype.layout = function(tree, changedRange, modifiedItems, modifiedGroups) {
                            var _this = this;
                            var layoutResult = this._layout.layout(tree, changedRange, modifiedItems, modifiedGroups);
                            var absolutelyPositionedElements = this._layout._cachedRemovedItems;
                            if (!absolutelyPositionedElements || !absolutelyPositionedElements.length)
                                return layoutResult;
                            absolutelyPositionedElements.forEach(function(elementInfo) {
                                if (!elementInfo.element)
                                    return;
                                var currentPosition = parseInt(elementInfo.element.style.top);
                                if (isNaN(currentPosition))
                                    return;
                                elementInfo.element.style.top = (currentPosition + _this._cachedSurfaceOffsetTop) + "px"
                            });
                            return layoutResult
                        };
                        BaseShrinkAndStayLayout.prototype.dragOver = function(x, y, dragInfo) {
                            this._layout.dragOver(x, y, dragInfo)
                        };
                        BaseShrinkAndStayLayout.prototype.dragLeave = function() {
                            this._layout.dragLeave()
                        };
                        BaseShrinkAndStayLayout.prototype.setupAnimations = function() {
                            this._layout.setupAnimations()
                        };
                        BaseShrinkAndStayLayout.prototype.executeAnimations = function() {
                            this._layout.executeAnimations()
                        };
                        BaseShrinkAndStayLayout.prototype.itemsFromRange = function(firstPixel, lastPixel) {
                            return this._layout.itemsFromRange(firstPixel, lastPixel)
                        };
                        BaseShrinkAndStayLayout.prototype.getAdjacent = function(currentItem, pressedKey) {
                            return this._layout.getAdjacent(currentItem, pressedKey)
                        };
                        BaseShrinkAndStayLayout.prototype.hitTest = function(x, y) {
                            if (this._headerParentedToListview)
                                y -= this._cachedSurfaceOffsetTop;
                            return this._layout.hitTest(x, y)
                        };
                        Object.defineProperty(BaseShrinkAndStayLayout.prototype, "numberOfItemsPerItemsBlock", {
                            get: function() {
                                return this._layout.numberOfItemsPerItemsBlock
                            }, enumerable: true, configurable: true
                        });
                        BaseShrinkAndStayLayout.prototype._getItemPosition = function(index) {
                            return this._layout._getItemPosition(index)
                        };
                        return BaseShrinkAndStayLayout
                    })();
                Controls.BaseShrinkAndStayLayout = BaseShrinkAndStayLayout;
                var ShrinkAndStayGridLayout = (function(_super) {
                        __extends(ShrinkAndStayGridLayout, _super);
                        function ShrinkAndStayGridLayout(options) {
                            _super.call(this, options);
                            this._layout = new WinJS.UI.GridLayout(options)
                        }
                        return ShrinkAndStayGridLayout
                    })(BaseShrinkAndStayLayout);
                Controls.ShrinkAndStayGridLayout = ShrinkAndStayGridLayout;
                var ShrinkAndStayListLayout = (function(_super) {
                        __extends(ShrinkAndStayListLayout, _super);
                        function ShrinkAndStayListLayout(options) {
                            _super.call(this, options);
                            this._layout = new WinJS.UI.ListLayout(options)
                        }
                        return ShrinkAndStayListLayout
                    })(BaseShrinkAndStayLayout);
                Controls.ShrinkAndStayListLayout = ShrinkAndStayListLayout
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/framework/navigateaction.js:12317 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
(function(undefined) {
    "use strict";

    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Actions");
    WinJS.Namespace.define("MS.Entertainment.UI.Actions", {
        navigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function navigateConstructor() {
            this.base()
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.navigate, offlineMessageTitle: null, executed: function executed(param, referenceElement) {
                    if (referenceElement)
                        MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: referenceElement}, {
                            uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.Dash
                        });
                    if (param === MS.Entertainment.UI.Actions.navigate.NavigateLocation.back) {
                        if (!MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).overlayVisible || WinJS.Utilities.getMember("MS.Entertainment.UI.Framework.currentOverlayContainer.winControl.allowBackNavigate")) {
                            var navigationService;
                            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                                var rootNode = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.informationArchitecture).rootNode;
                                navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                var currentPage = WinJS.Binding.unwrap(navigationService.currentPage);
                                if (window.onDXPage && (currentPage.iaNode === rootNode))
                                    navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation)
                            }
                            else if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation))
                                navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.winJSNavigation);
                            else
                                Trace.fail("No navigation service registered");
                            navigationService.navigateBack()
                        }
                    }
                    else if (param === MS.Entertainment.UI.Actions.navigate.NavigateLocation.home) {
                        var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        navigationService.navigateToDefaultPage()
                    }
                    else {
                        var location = this._extractLocation(param);
                        var args = this._extractArguments(param);
                        var forcePageChange = WinJS.Utilities.getMember("forcePageChange", param);
                        MS.Entertainment.UI.Actions.assert((location), "the navigate command was expecting a location object, but didn't get one.");
                        MS.Entertainment.UI.Actions.assert((typeof location.page === "string"), "the navigate command was expecting a string page location, but didn't get one.");
                        if (location && location.page)
                            MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(location.page, location.hub, location.panel, args, forcePageChange)
                    }
                }, canExecute: function canExecute(param) {
                    if (this.disableWhenOffline)
                        switch (MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).networkStatus) {
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unknown:
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.unrestricted:
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.throttled:
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.onDemand:
                                break;
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.localOnly:
                            case MS.Entertainment.UI.NetworkStatusService.NetworkStatus.none:
                                if (this.offlineMessageTitle) {
                                    var errorCode = MS.Entertainment.Platform.Playback.Error.NS_E_WMPIM_USEROFFLINE.code;
                                    MS.Entertainment.UI.Shell.showError(this.offlineMessageTitle, errorCode)
                                }
                                return false
                        }
                    if (this.disableOnServicesDisabled)
                        return MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).servicesEnabled;
                    var location = this._extractLocation(param);
                    return !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState).isSnapped && (location) && ((typeof location.page === "string") || location === MS.Entertainment.UI.Actions.navigate.NavigateLocation.back || location === MS.Entertainment.UI.Actions.navigate.NavigateLocation.home)
                }, _extractLocation: function _extractLocation(param) {
                    var location;
                    if (param === MS.Entertainment.UI.Actions.navigate.NavigateLocation.back)
                        location = param;
                    else if (param === MS.Entertainment.UI.Actions.navigate.NavigateLocation.home)
                        location = param;
                    else if (typeof param === "object")
                        location = param;
                    else
                        location = {page: param};
                    return location
                }, _extractArguments: function _extractArguments(param) {
                    var result = null;
                    var args = null;
                    if (param && param.args) {
                        args = WinJS.Binding.unwrap(param.args);
                        result = {};
                        for (var key in args)
                            result[key] = args[key]
                    }
                    return result
                }
        }, {NavigateLocation: {
                back: "back", home: "home"
            }}), depthGalleryNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function depthGalleryNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.navigate, executed: function executed() {
                        var parameter = this.parameter || {};
                        var page = parameter.page;
                        var hub = parameter.hub;
                        var panel = parameter.panel;
                        var navigationArguments = parameter.args || {};
                        navigationArguments.data = parameter.data;
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(page, hub, panel, navigationArguments)
                    }, canExecute: function canExecute() {
                        return true
                    }
            }), albumDetailsNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function albumDetailsNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.albumDetailsNavigate, executed: function executed(param) {
                        var data = param && param.data || param;
                        var location = param && param.location;
                        var clearBackstack = param && param.clearBackStackOnExecute;
                        var isTrack = MS.Entertainment.Platform.PlaybackHelpers.isMusicTrack(data) && (param.invokeTrack || param.invokeTrack === undefined);
                        var mediaItem;
                        if (MS.Entertainment.Utilities.isValidGuid(data) || MS.Entertainment.Utilities.isValidLibraryId(data))
                            mediaItem = data;
                        else
                            mediaItem = isTrack ? data : (data && data.album || data);
                        var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        if (clearBackstack)
                            navigationService.clearBackStackOnNextNavigate(true);
                        var options = {
                                mediaItem: mediaItem, isTrack: isTrack
                            };
                        return navigationService.navigateTo(MS.Entertainment.UI.Monikers.albumDetails, null, null, options, true)
                    }, canExecute: function canExecute(param) {
                        var data = param && param.data || param;
                        return (MS.Entertainment.Platform.PlaybackHelpers.isMusicAlbum(data) || MS.Entertainment.Platform.PlaybackHelpers.isMusicTrack(data) || MS.Entertainment.Utilities.isValidGuid(data) || MS.Entertainment.Utilities.isValidLibraryId(data))
                    }
            }), playlistDetailsNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function playlistDetailsNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.playlistDetailsNavigate, executed: function executed(param) {
                        var mediaItem = param && param.data || param;
                        var location = param && param.location;
                        var clearBackstack = param && param.clearBackStackOnExecute;
                        var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        if (clearBackstack)
                            navigationService.clearBackStackOnNextNavigate(true);
                        var options = {mediaItem: mediaItem};
                        return navigationService.navigateTo(MS.Entertainment.UI.Monikers.playlistDetails, null, null, options, true)
                    }, canExecute: function canExecute(param) {
                        var mediaItem = param && param.data || param;
                        return MS.Entertainment.Platform.PlaybackHelpers.isMusicPlaylist(mediaItem)
                    }
            }), artistDetailsNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function artistDetailsNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.artistDetailsNavigate, executed: function executed(param) {
                        var mediaItem = param && param.data || param;
                        var location = param && param.location;
                        var clearBackstack = param && param.clearBackStackOnExecute;
                        var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        if (clearBackstack)
                            navigationService.clearBackStackOnNextNavigate(true);
                        var popOverParameters = {dataContext: {
                                    data: mediaItem, location: param.location
                                }};
                        return MS.Entertainment.Platform.PlaybackHelpers.showItemDetails(popOverParameters)
                    }, canExecute: function canExecute(param) {
                        var mediaItem = param && param.data || param;
                        return MS.Entertainment.Platform.PlaybackHelpers.isMusicArtist(mediaItem)
                    }
            }), mediaItemDetailsNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function mediaItemDetailsNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.mediaItemDetailsNavigate, _getLocationFromMediaItem: function _getLocationFromMediaItem(mediaItem, forceMarketplace) {
                        if (mediaItem && mediaItem.inCollection && (!forceMarketplace || !mediaItem.hasCanonicalId))
                            return MS.Entertainment.Data.ItemLocation.collection;
                        else
                            return MS.Entertainment.Data.ItemLocation.marketplace
                    }, _getNavigateActionFromMediaItem: function _getNavigateActionFromMediaItem(mediaItem, navigateToArtistDetailsForTrack) {
                        if (!mediaItem) {
                            Trace.fail("_getNavigateActionFromMediaItem: null mediaItem passed, I don't know what to do.");
                            return null
                        }
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        var action = null;
                        switch (mediaItem.mediaType) {
                            case Microsoft.Entertainment.Queries.ObjectType.person:
                                action = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.artistDetailsNavigate);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.album:
                                action = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.track:
                                if (navigateToArtistDetailsForTrack)
                                    action = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.artistDetailsNavigate);
                                else
                                    action = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                action = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playlistDetailsNavigate);
                                break;
                            default:
                                Trace.fail(" _getNavigateActionFromMediaItem: Unrecognized mediaType: " + (mediaItem.mediaType))
                        }
                        return action
                    }, executed: function executed(param) {
                        var mediaItem = param && param.data || param;
                        var location = param && param.location;
                        var action = this._getNavigateActionFromMediaItem(mediaItem, !!param.navigateToArtistDetailsForTrack);
                        if (action) {
                            action.parameter = param;
                            if (param.shouldGetLocationFromMediaItem)
                                action.parameter.location = this._getLocationFromMediaItem(mediaItem, !!param.forceMarketplace);
                            return action.execute()
                        }
                    }, canExecute: function canExecute(param) {
                        var mediaItem = param && param.data || param;
                        return mediaItem && (MS.Entertainment.Platform.PlaybackHelpers.isMusicArtist(mediaItem) || MS.Entertainment.Platform.PlaybackHelpers.isMusicAlbum(mediaItem) || MS.Entertainment.Platform.PlaybackHelpers.isMusicPlaylist(mediaItem) || MS.Entertainment.Platform.PlaybackHelpers.isMusicTrack(mediaItem))
                    }
            }), musicCollectionNavigate: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.Action", function musicCollectionNavigateConstructor() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.navigate, executed: function executed() {
                        MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).navigateTo(MS.Entertainment.UI.Monikers.musicCollection)
                    }, canExecute: function canExecute() {
                        return true
                    }
            })
    });
    var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.navigate, function() {
        return new MS.Entertainment.UI.Actions.navigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.depthGalleryNavigate, function() {
        return new MS.Entertainment.UI.Actions.depthGalleryNavigate
    });
    actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.musicCollectionNavigate, function() {
        return new MS.Entertainment.UI.Actions.musicCollectionNavigate
    });
    if (MS.Entertainment.Utilities.isApp2) {
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate, function() {
            return new MS.Entertainment.UI.Actions.albumDetailsNavigate
        });
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.artistDetailsNavigate, function() {
            return new MS.Entertainment.UI.Actions.artistDetailsNavigate
        });
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.playlistDetailsNavigate, function() {
            return new MS.Entertainment.UI.Actions.playlistDetailsNavigate
        });
        actionService.register(MS.Entertainment.UI.Actions.ActionIdentifiers.mediaItemDetailsNavigate, function() {
            return new MS.Entertainment.UI.Actions.mediaItemDetailsNavigate
        })
    }
})()
})();
/* >>>>>>/viewmodels/mediaitemmodel.js:12564 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function(undefined) {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Media");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {MediaItemModel: MS.Entertainment.UI.Framework.define(null, {isFailed: false}, {
            augment: function augment(mediaItem) {
                if (mediaItem && mediaItem.onHydrated)
                    return mediaItem;
                var defaultHydrate = false;
                var modelItem = WinJS.Binding.as(mediaItem);
                if ((!modelItem.hydrated) && (!modelItem.hydrate || modelItem.hydrate === MS.Entertainment.Data.Augmentation.prototype.hydrate))
                    switch (modelItem.mediaType) {
                        case Microsoft.Entertainment.Queries.ObjectType.video:
                            MS.Entertainment.Media.fail("Videos are no longer hydrated via this old method. Please make sure onHydrated has been set on your video augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                            MS.Entertainment.Media.fail("TV serieses are no longer hydrated via this old method. Please make sure onHydrated has been set on your series augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                            MS.Entertainment.Media.fail("TV seasons are no longer hydrated via this old method. Please make sure onHydrated has been set on your season augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.person:
                            if (modelItem.personType === Microsoft.Entertainment.Queries.PersonType.artist)
                                MS.Entertainment.Media.fail("Artists are no longer hydrated via this old method. Please make sure onHydrated has been set on your artists augmentation definition.");
                            else
                                defaultHydrate = true;
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.playlist:
                            MS.Entertainment.Media.fail("Playlists are no longer hydrated via this old method. Please make sure onHydrated has been set on your playlist augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.album:
                            MS.Entertainment.Media.fail("Albums are no longer hydrated via this old method. Please make sure onHydrated has been set on your albums augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.track:
                            MS.Entertainment.Media.fail("Tracks are no longer hydrated via this old method. Please make sure onHydrated has been set on your tracks augmentation definition.");
                            break;
                        case Microsoft.Entertainment.Queries.ObjectType.game:
                            MS.Entertainment.Media.fail("Games are no longer hydrated via this old method. Please make sure onHydrated has been set on your game augmentation definition.");
                            break;
                        default:
                            defaultHydrate = true;
                            break
                    }
                if (defaultHydrate) {
                    modelItem.hydrate = function hydrate() {
                        return WinJS.Promise.wrap(modelItem)
                    };
                    modelItem.hydrated = true
                }
                return modelItem
            }, hydrateListLibraryInfoAsync: function hydrateListLibraryInfoAsync(list) {
                    var promises = [];
                    list = list || [];
                    return WinJS.Promise.as(list.forEach(function hydrate(args) {
                            var item = (args && args.item && args.item.data) || args;
                            if (item)
                                promises.push(MS.Entertainment.ViewModels.MediaItemModel.hydrateLibraryInfoAsync(item))
                        })).then(function joinPromises() {
                            return WinJS.Promise.join(promises)
                        }).then(function hideResult(){}, function handleError(error) {
                            MS.Entertainment.Media.fail("Failed to hydrate collection library ids. Error message: " + (error && error.message))
                        })
                }, getLibraryIdAsync: function getLibraryIdAsync(modelItem) {
                    var promise;
                    var mediaStore;
                    var zuneId = modelItem.zuneId;
                    if (modelItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.tvSeason)
                        zuneId = modelItem.seriesZuneId;
                    if (modelItem && (!modelItem.fromCollection || !modelItem.inCollection) && MS.Entertainment.Utilities.isValidGuid(zuneId) && !MS.Entertainment.Utilities.isEmptyGuid(zuneId)) {
                        mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                        switch (modelItem.mediaType) {
                            case Microsoft.Entertainment.Queries.ObjectType.video:
                                promise = mediaStore.videoProvider.getLibraryIdFromMediaIdAsync(zuneId);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.track:
                                promise = mediaStore.trackProvider.getLibraryIdFromMediaIdAsync(zuneId);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.album:
                                promise = mediaStore.albumProvider.getLibraryIdFromMediaIdAsync(zuneId);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                promise = MS.Entertainment.UI.Actions.Playlists.queryPlaylistById(modelItem.zuneId, true, true);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                                promise = mediaStore.seriesProvider.getLibraryIdFromMediaIdAsync(zuneId);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                                promise = mediaStore.seriesProvider.getSeasonLibraryIdFromMediaIdAsync(zuneId, modelItem.seasonNumber);
                                break;
                            case Microsoft.Entertainment.Queries.ObjectType.person:
                                promise = mediaStore.artistProvider.getLibraryIdFromMediaIdAsync(zuneId);
                                break
                        }
                    }
                    if (promise)
                        promise = promise.then(function _startBaseInnerExecute(result) {
                            return (result && result.libraryId) ? result.libraryId : -1
                        }.bind(this));
                    else
                        promise = WinJS.Promise.as(!modelItem || isNaN(modelItem.libraryId) ? -1 : modelItem.libraryId);
                    return promise
                }, hydrateLibraryInfoAsync: function hydrateLibraryInfoAsync(modelItem) {
                    if (!modelItem || (modelItem.fromCollection && modelItem.inCollection) || modelItem.isFromPlaylist || !modelItem.hasZuneId || !MS.Entertainment.Utilities.isValidGuid(modelItem.zuneId))
                        return WinJS.Promise.as(modelItem);
                    var mediaStore = new Microsoft.Entertainment.Platform.MediaStore;
                    var dataPromise;
                    if (MS.Entertainment.Data.List.isListOrArray(modelItem))
                        dataPromise = MS.Entertainment.ViewModels.hydrateListLibraryInfoAsync(modelItem);
                    else if (modelItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.track)
                        dataPromise = mediaStore.trackProvider.getLibraryTrackInfoAsync(modelItem.zuneId).then(function getLibraryTrackInfoAsyncComplete(trackInfoJSON) {
                            var trackInfo;
                            try {
                                trackInfo = JSON.parse(trackInfoJSON).result
                            }
                            catch(error) {
                                MS.Entertainment.Music.fail("hydrateLibraryInfoAsync has failed because JSON.parse failed. error message = " + (error && error.message) + " json = " + trackInfoJSON)
                            }
                            if (trackInfo)
                                for (var property in trackInfo)
                                    if (property in modelItem)
                                        modelItem[property] = trackInfo[property];
                            return modelItem
                        }, function getLibraryTrackInfoAsyncError(error) {
                            var errorMessage = error && error.message;
                            MS.Entertainment.Media.assert(errorMessage === "Canceled", "Failed to get library track info. Error message: " + errorMessage);
                            return modelItem
                        });
                    else if (modelItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.video)
                        dataPromise = MS.Entertainment.ViewModels.MediaItemModel.getLibraryIdAsync(modelItem).then(function gotLibraryId(id) {
                            modelItem.libraryId = id;
                            return modelItem
                        }, function failedLibraryId(error) {
                            var errorMessage = error && error.message;
                            MS.Entertainment.Media.assert(errorMessage === "Canceled", "Failed to get library id. Error message: " + errorMessage);
                            return modelItem
                        }).then(function getModelItemEntitlements(modelItem) {
                            if (modelItem.hasZuneId)
                                return Microsoft.Entertainment.Marketplace.Marketplace.getMediaEntitlementsAsync([modelItem.zuneId]).then(function gotMediaEntitlements(entitlements) {
                                        try {
                                            entitlements = JSON.parse(entitlements)
                                        }
                                        catch(e) {
                                            entitlements = null
                                        }
                                        modelItem.hasPurchased = !!WinJS.Utilities.getMember("result.counts.purchased", entitlements);
                                        return modelItem
                                    }, function failedItemEntitlements(error) {
                                        var errorMessage = error && error.message;
                                        MS.Entertainment.Media.assert(errorMessage === "Canceled", "Failed to get media entitlements. Error message: " + errorMessage);
                                        return modelItem
                                    });
                            else
                                return modelItem
                        });
                    else
                        dataPromise = MS.Entertainment.ViewModels.MediaItemModel.getLibraryIdAsync(modelItem).then(function gotLibraryId(id) {
                            modelItem.libraryId = id;
                            return modelItem
                        }, function failedLibraryId(error) {
                            var errorMessage = error && error.message;
                            MS.Entertainment.Media.assert(errorMessage === "Canceled", "Failed to get library id. Error message: " + errorMessage);
                            return modelItem
                        });
                    return WinJS.Promise.as(dataPromise).then(function gotData(updatedModelItem) {
                            if ("inCollection" in updatedModelItem)
                                updatedModelItem.inCollection = MS.Entertainment.Utilities.isValidLibraryId(updatedModelItem.libraryId);
                            return updatedModelItem
                        })
                }, getMarketplaceDownloadPermittedAsync: function getMarketplaceDownloadPermittedAsync(mediaItem) {
                    if (!MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn)
                        return WinJS.Promise.wrap(false);
                    return MS.Entertainment.ViewModels.SmartBuyStateEngine.queryMediaStateAsync(mediaItem).then(function queryMediaStateAsync_complete(stateInfo) {
                            return WinJS.Promise.wrap(MS.Entertainment.ViewModels.MediaItemModel.isMarketplaceDownloadPermittedState(stateInfo))
                        }.bind(this))
                }, isMarketplaceDownloadPermittedState: function isMarketplaceDownloadPermittedState(stateInfo) {
                    return MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn && stateInfo.marketplace.counts.canDownload > (stateInfo.collection.playability.counts.local + stateInfo.download.counts.pending + stateInfo.download.counts.active)
                }, createUniqueZestId: function createUniqueZestId(mediaItem) {
                    if (mediaItem && mediaItem.mediaType)
                        switch (mediaItem.mediaType) {
                            case Microsoft.Entertainment.Queries.ObjectType.video:
                            case Microsoft.Entertainment.Queries.ObjectType.track:
                            case Microsoft.Entertainment.Queries.ObjectType.person:
                            case Microsoft.Entertainment.Queries.ObjectType.album:
                            case Microsoft.Entertainment.Queries.ObjectType.playlist:
                                if (!mediaItem.hasServiceId)
                                    return null;
                                return "[" + mediaItem.mediaType + "_" + mediaItem.serviceId + "]";
                            case Microsoft.Entertainment.Queries.ObjectType.tvSeries:
                                if (!mediaItem.hasSeriesId)
                                    return null;
                                return "[" + mediaItem.mediaType + "_" + mediaItem.seriesId + "]";
                            case Microsoft.Entertainment.Queries.ObjectType.tvSeason:
                                if (!mediaItem.hasSeriesId)
                                    return null;
                                return "[" + mediaItem.mediaType + "_" + mediaItem.seriesId + "_" + mediaItem.seasonNumber + "]"
                        }
                    return null
                }
        })})
})()
})();
/* >>>>>>/viewmodels/queryviewmodel.js:12768 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {
        Node: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function Node(id, label, value, secondaryLabel) {
            MS.Entertainment.ViewModels.assert(id, "Attempted to construct a Node without an ID.");
            this.id = id;
            this.label = label || String.empty;
            this.value = value || {};
            this.secondaryLabel = secondaryLabel || String.empty
        }, {
            selected: MS.Entertainment.UI.Framework.observableProperty("selected", false), isRoot: MS.Entertainment.UI.Framework.observableProperty("isRoot", true), label: MS.Entertainment.UI.Framework.observableProperty("label", null), secondaryLabel: MS.Entertainment.UI.Framework.observableProperty("secondaryLabel", null), value: MS.Entertainment.UI.Framework.observableProperty("value", null), items: MS.Entertainment.UI.Framework.observableProperty("items", null)
        }, {isEqual: function isEqual(node1, node2) {
                return !!((node1 === node2) || (node1 && node2 && node1.id && node1.id === node2.id))
            }}), NodeSeparator: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.Node", function NodeSeparator(id) {
                this.id = id;
                this.value = new MS.Entertainment.ViewModels.NodeValues
            }, {isSeparator: true})
    });
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {
        NodeValues: MS.Entertainment.UI.Framework.define(function nodeValues(query, queryOptions, modelOptions, modifierOptions, pivotOptions, trackQuery, trackQueryOptions) {
            this.query = query || null;
            this.queryOptions = queryOptions || {};
            this.modelOptions = modelOptions || {};
            this.modifierOptions = modifierOptions || {};
            this.pivotOptions = pivotOptions || {};
            this.trackQuery = trackQuery || null;
            this.trackQueryOptions = trackQueryOptions || {}
        }, {
            query: null, queryOptions: null, modelOptions: null, modifierOptions: null, filterOptions: null, pivotOptions: null, trackQuery: null, trackQueryOptions: null, subPivotOptions: null
        }, {create: function create(options) {
                var nodeValue = new MS.Entertainment.ViewModels.NodeValues;
                WinJS.UI.setOptions(nodeValue, options);
                return nodeValue
            }}), ActionCell: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", function actionCell(actionId, actionOptions, actionParams, actionArray, actionOptionsArray, actionParamsArray) {
                this._actionParams = actionParams;
                this._actionOptions = actionOptions;
                this._actionId = actionId;
                this._actionParamsArray = actionParamsArray;
                this._actionOptionsArray = actionOptionsArray;
                this._actionArray = actionArray
            }, {
                _actionId: null, _actionOptions: null, _actionParams: null, _actionArray: null, _actionOptionsArray: null, _actionParamsArray: null, isAction: true, icon: MS.Entertainment.UI.Framework.observableProperty("icon", null), text: MS.Entertainment.UI.Framework.observableProperty("text", null), stringId: null, hideDefaultRing: false, groupHeader: String.empty, automationId: String.empty, areActionsInitialized: false, action: {get: function() {
                            if (!this._action)
                                this._initializeAction();
                            return this._action
                        }}, _initializeAction: function _initializeAction() {
                        if (this._actionId)
                            this._action = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(this._actionId);
                        if (this._actionOptions && this._action)
                            WinJS.UI.setOptions(this._action, this._actionOptions);
                        if (this._actionParams && this._action)
                            this._action.parameter = this._actionParams;
                        this._actionOptions = null
                    }, actions: {get: function() {
                            if (!this.areActionsInitialized)
                                this._initializeActions();
                            return this._actionArray
                        }}, _initializeActions: function _initializeActions() {
                        if (this._actionOptionsArray && this._actionArray && (this._actionOptionsArray.length === this._actionArray.length)) {
                            for (var i = 0; i < this._actionOptionsArray.length; i++)
                                WinJS.UI.setOptions(this._actionArray.item(i), this._actionOptionsArray[i]);
                            this.areActionsInitialized = true
                        }
                        if (this._actionParamsArray && this._actionArray && (this._actionParamsArray.length === this._actionArray.length))
                            for (var i = 0; i < this._actionParamsArray.length; i++)
                                this._actionArray.item(i).parameter = this._actionParamsArray[i];
                        this._actionOptionsArray = null
                    }
            })
    });
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {ModifierActionCell: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.ActionCell", function modifierActionCell(modifier, groupHeader, modifierTitleId, forcedModifier) {
            var modifierCount = modifier && modifier.dataSource && modifier.dataSource.length;
            if (modifierCount > 1) {
                var originalIndex = modifier.selectedIndex;
                this._action = {
                    execute: function executedPlay(param) {
                        return MS.Entertainment.UI.Controls.ModifierPopup.createModifierPopup("primaryPanelModifierPopup", modifier).show().then(function modifierChanged() {
                                return WinJS.Promise.wrap(originalIndex !== modifier.selectedIndex)
                            })
                    }, canExecute: function canExecutePlay(param) {
                            return true
                        }
                };
                this.enabled = true
            }
            else {
                this._action = {
                    execute: function executedPlay(param) {
                        return WinJS.Promise.wrap(false)
                    }, canExecute: function canExecutePlay(param) {
                            return true
                        }
                };
                this.enabled = false
            }
            if (modifierCount > 0)
                this.text = modifier.selectedItem ? modifier.selectedItem.label : modifier.dataSource.item(0).label;
            else
                this.text = forcedModifier;
            this.icon = null;
            if (modifierTitleId)
                this.title = modifierTitleId;
            if (groupHeader)
                this.groupHeader = groupHeader
        }, {
            title: null, isModifier: true, action: {get: function() {
                        if (!this._action)
                            var action;
                        return this._action
                    }}
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {NotificationActionCell: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.ActionCell", function notificationActionCell(category, actionArray, actionOptionsArray, clearActionId) {
            this.category = category;
            this._clearActionId = clearActionId;
            this._cloudMatchDialogAction = actionOptionsArray && actionOptionsArray[0] && actionOptionsArray[0].consentDialog ? true : false;
            MS.Entertainment.ViewModels.ActionCell.prototype.constructor.call(this, null, null, null, actionArray, actionOptionsArray, [{category: this.category}]);
            this.notificationClass = category.name
        }, {
            _clearActionId: null, _cloudMatchDialogAction: false, category: null, clearIcon: MS.Entertainment.UI.Icon.close, isNotification: true, subText: MS.Entertainment.UI.Framework.observableProperty("subText", null), notificationClass: null, clearAction: {get: function() {
                        if (!this._clearAction)
                            this._initializeClearAction();
                        return this._clearAction
                    }}, _initializeClearAction: function _initializeClearAction() {
                    if (this._clearActionId) {
                        this._clearAction = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).getAction(this._clearActionId);
                        this._clearAction.title = String.load(String.id.IDS_CLOSE_BUTTON);
                        this._clearAction.optOut = this._cloudMatchDialogAction;
                        this._clearAction.parameter = {
                            category: this.category, actionType: this.category.name
                        }
                    }
                }, setNotification: function setNotification(notification) {
                    if (!notification) {
                        MS.Entertainment.ViewModels.fail("NotificationActionCell::setNotification() Unable to set notification since notification was null.");
                        return
                    }
                    this._actionArray = notification.actionArray;
                    this._actionOptionsArray = notification.actionParamsArray;
                    this.category = notification.category;
                    this._actionParamsArray = [{category: this.category}];
                    this._clearActionId = notification.dismissAction;
                    this.icon = notification.icon;
                    this.text = notification.title;
                    this.subText = notification.subTitle;
                    this._cloudMatchDialogAction = !!(this._actionOptionsArray && this._actionOptionsArray[0] && this._actionOptionsArray[0].consentDialog);
                    var oldActions = this._actionArray;
                    this._initializeActions();
                    this.notify("actions", this._actionArray, oldActions);
                    var oldClearAction = this._clearAction;
                    this._initializeClearAction();
                    this.notify("clearAction", this._clearAction, oldClearAction)
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {QueryViewModelBase: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Framework.ObservableBase", null, {
            items: MS.Entertainment.UI.Framework.observableProperty("items", null), emptyGalleryModel: MS.Entertainment.UI.Framework.observableProperty("emptyGalleryModel", null), modifierSelectionManager: MS.Entertainment.UI.Framework.observableProperty("modifierSelectionManager", null), secondaryModifierSelectionManager: MS.Entertainment.UI.Framework.observableProperty("secondaryModifierSelectionManager", null), pivotsSelectionManager: MS.Entertainment.UI.Framework.observableProperty("pivotsSelectionManager", null), filterSelectionManager: MS.Entertainment.UI.Framework.observableProperty("filterSelectionManager", null), isFailed: MS.Entertainment.UI.Framework.observableProperty("isFailed", false), isLoading: MS.Entertainment.UI.Framework.observableProperty("isLoading", false), selectedTemplate: MS.Entertainment.UI.Framework.observableProperty("selectedTemplate", null), largeItemIndex: MS.Entertainment.UI.Framework.observableProperty("largeItemIndex", -1), titleOverride: MS.Entertainment.UI.Framework.observableProperty("titleOverride", null), titleFormatValues: MS.Entertainment.UI.Framework.observableProperty("titleFormatValues", null), title: MS.Entertainment.UI.Framework.observableProperty("title", null), pivotSelectedIndexOverride: MS.Entertainment.UI.Framework.observableProperty("pivotSelectedIndexOverride", null), modelActions: MS.Entertainment.UI.Framework.observableProperty("modelActions", null), containingMedia: MS.Entertainment.UI.Framework.observableProperty("containingMedia", null), selectionHandlers: MS.Entertainment.UI.Framework.observableProperty("selectionHandlers", null), filterValue: MS.Entertainment.UI.Framework.observableProperty("filterValue", null), primaryItemIndex: MS.Entertainment.UI.Framework.observableProperty("primaryItemIndex", -1), initialInvokedItem: -1
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {QueryViewModel: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.QueryViewModelBase", function queryViewModelConstructor(view) {
            MS.Entertainment.ViewModels.QueryViewModelBase.prototype.constructor.call(this);
            this._fileTransferListenerId = "" + Date.now();
            this._fileTransferListenerId = this._viewModelId + this._fileTransferListenerId + "_" + Math.random();
            this._workingModifierSelectionManager = new MS.Entertainment.UI.Framework.SelectionManager(null, this._defaultModifierSelection, null, this._overrideModifierSetting);
            this._workingSecondaryModifierSelectionManager = new MS.Entertainment.UI.Framework.SelectionManager(null, this._defaultSecondaryModifierSelection);
            this._workingFilterSelectionManager = new MS.Entertainment.UI.Framework.SelectionManager(null, this._defaultFilterIndex, null, this._overrideFilterSettingOnce);
            this._workingPivotsSelectionManager = new MS.Entertainment.UI.Framework.SelectionManager(null, this._defaultPivotIndex, null, this._overridePivotSetting);
            this.selectedTemplate = {};
            this.initialize();
            this.view = view
        }, {
            _defaultModifierSelection: 0, _overrideModifierSetting: false, _overridePivotSetting: false, _overrideFilterSettingOnce: false, _defaultSecondaryModifierSelection: 0, _defaultFilterIndex: 0, _defaultPivotIndex: 0, _viewModelId: null, _queryWatcher: null, _fileTransferListenerId: null, _queryWatcherString: "marketplace", _loadingDoneString: "loadingDone", _pendingViewChange: null, _pendingQueryExecute: null, _lastUsedPivotItem: null, _lastUsedModifierItem: null, _lastUsedSecondaryModifierItem: null, _lastUsedFilterItem: null, _lastUsedView: null, _lastUsedQueryType: null, _lastUsedQuery: null, _lastUsedModifierDefinition: null, _lastUsedSecondaryModifierDefinition: null, _lastUsedFilterDefinition: null, _lastUsedPivotDefinition: null, _lastUsedSubPivotDefinition: null, _modifiersTrimmed: false, _workingModifierSelectionManager: null, _workingSecondaryModifierSelectionManager: null, _workingFilterSelectionManager: null, _workingPivotsSelectionManager: null, _recreateQueries: false, _view: null, _enabled: false, _disposed: false, _modifierEvents: null, _secondaryModifierEvents: null, _filterEvents: null, _pivotEvents: null, _refreshing: false, _queryEventHandlers: null, _isDelayInitialized: false, enableDelayInitialize: false, debugId: null, handleQueryChanges: true, autoHideInvalidModifiers: false, failOnEmpty: false, propertyKey: null, taskKeyGetter: null, notifier: null, addActionCellsToList: true, forceEmpty: false, completedQuery: null, mediaContext: null, isDisposed: {get: function get_isDisposed() {
                        return this._disposed
                    }}, pausableQuery: {get: function() {
                        if (this.getQuery)
                            return this.getQuery;
                        else if (this.completedQuery && this.completedQuery.pause && this.completedQuery.unpause)
                            return this.completedQuery;
                        return null
                    }}, isOnline: {get: function() {
                        return MS.Entertainment.UI.NetworkStatusService.isOnline()
                    }}, isItemsLive: {get: function get_isLiveList() {
                        return !!(this.pausableQuery && this.items && this.items.handleChunkerChanges)
                    }}, initialize: function initialize() {
                    MS.Entertainment.ViewModels.assert(!this._modifierEvents && !this._pivotEvents && !this._secondaryModifierEvents, "These events shouldn't exist");
                    this._modifierEvents = MS.Entertainment.Utilities.addEventHandlers(this._workingModifierSelectionManager, {selectedItemChanged: this._handleModifierSelectionChanged.bind(this)});
                    this._secondaryModifierEvents = MS.Entertainment.Utilities.addEventHandlers(this._workingSecondaryModifierSelectionManager, {selectedItemChanged: this._handleSecondaryModifierSelectionChanged.bind(this)});
                    this._filterEvents = MS.Entertainment.Utilities.addEventHandlers(this._workingFilterSelectionManager, {selectedItemChanged: this._handleFilterSelectionChanged.bind(this)});
                    this._pivotEvents = MS.Entertainment.Utilities.addEventHandlers(this._workingPivotsSelectionManager, {selectedItemChanged: this._handlePivotSelectionChanged.bind(this)});
                    this._eventHandlers = MS.Entertainment.Utilities.addEventHandlers(this, {selectedTemplateChanged: this._handleSelectedTemplateChanged.bind(this)});
                    if (!this.enableDelayInitialize)
                        this.delayInitialize()
                }, isDelayInitialized: {get: function get_isDelayInitialized() {
                        return this._isDelayInitialized
                    }}, delayInitialize: function delayInitialize() {
                    this._isDelayInitialized = true;
                    this._updateSelectionHandlers()
                }, dispose: function dispose() {
                    this._disposed = true;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.fileTransfer)) {
                        var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                        fileTransferService.unregisterListener(this._fileTransferListenerId)
                    }
                    this._disposeQuery();
                    if (this._pendingViewChange) {
                        this._pendingViewChange.cancel();
                        this._pendingViewChange = null
                    }
                    if (this._pendingQueryExecute) {
                        this._pendingQueryExecute.cancel();
                        this._pendingQueryExecute = null
                    }
                    if (this._modifierEvents) {
                        this._modifierEvents.cancel();
                        this._modifierEvents = null
                    }
                    if (this._filterEvents) {
                        this._filterEvents.cancel();
                        this._filterEvents = null
                    }
                    if (this._pivotEvents) {
                        this._pivotEvents.cancel();
                        this._pivotEvents = null
                    }
                    if (this._eventHandlers) {
                        this._eventHandlers.cancel();
                        this._eventHandlers = null
                    }
                    if (this._workingModifierSelectionManager) {
                        this._workingModifierSelectionManager.dispose();
                        this._workingModifierSelectionManager = null
                    }
                    if (this._workingSecondaryModifierSelectionManager) {
                        this._workingSecondaryModifierSelectionManager.dispose();
                        this._workingSecondaryModifierSelectionManager = null
                    }
                    if (this._workingFilterSelectionManager) {
                        this._workingFilterSelectionManager.dispose();
                        this._workingFilterSelectionManager = null
                    }
                    if (this._workingPivotsSelectionManager) {
                        this._workingPivotsSelectionManager.dispose();
                        this._workingPivotsSelectionManager = null
                    }
                    this.selectedTemplate = {};
                    this.containingMedia = null;
                    this.selectionHandlers = null;
                    this._lastUsedPivotItem = null;
                    this._lastUsedModifierItem = null;
                    this._lastUsedSecondaryModifierItem = null;
                    this._lastUsedFilterItem = null
                }, view: {
                    get: function() {
                        return this._view
                    }, set: function(value) {
                            if (this._view !== value && !this._disposed) {
                                var oldValue = this._view;
                                this._view = value;
                                this._handleViewChange();
                                this.notify("view", value, oldValue)
                            }
                        }
                }, impressionGuid: {get: function() {
                        return WinJS.Utilities.getMember("_lastUsedQuery.result.impressionGuid", this) || null
                    }}, isCurrentQuery: function isCurrentQuery() {
                    return !this._pendingQueryExecute
                }, getViewDefinition: function(view) {
                    return {}
                }, getPivotDefinition: function(view) {
                    return null
                }, getSubPivotDefinition: function(view, pivot) {
                    return null
                }, getModifierDefinition: function(view) {
                    return null
                }, getSecondaryModifierDefinition: function getSecondaryModifierDefinition(view, modifier) {
                    return null
                }, getFilterDefinition: function(view) {
                    return null
                }, getFilterOptions: function getFilterOptions(view) {
                    var definition = this.getViewDefinition(view);
                    return definition && definition.filterOptions
                }, getModifierOptions: function getModifierOptions(view) {
                    var definition = this.getViewDefinition(view);
                    return definition && definition.modifierOptions
                }, getSecondaryModifierOptions: function getSecondaryModifierOptions(view, modifier) {
                    var definition = this.getViewDefinition(view);
                    return definition && definition.secondaryModifierOptions
                }, getSecondaryModifierItemQueryOptions: function getSecondaryModifierItemQueryOptions(view, modifier) {
                    var definition = this.getViewDefinition(view);
                    return MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(modifier && modifier.value && modifier.value.itemQueryOptions), WinJS.Binding.unwrap(definition && definition.itemQueryOptions))
                }, getSubPivotItemQueryOptions: function getSubPivotItemQueryOptions(view, pivot) {
                    var definition = this.getViewDefinition(view);
                    return MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(pivot && pivot.value && pivot.value.itemQueryOptions), WinJS.Binding.unwrap(definition && definition.itemQueryOptions))
                }, getPivotOptions: function getPivotOptions(view) {
                    var definition = this.getViewDefinition(view);
                    return definition && definition.pivotOptions
                }, getSubPivotOptions: function getSubPivotOptions(view, pivot) {
                    var definition = this.getViewDefinition(view);
                    return definition && definition.subPivotOptions
                }, getQueryType: function getQueryType(view, pivot, modifier) {
                    var QueryType = null;
                    if (view.query)
                        QueryType = view.query;
                    else if (modifier.value.query)
                        QueryType = modifier.value.query;
                    else if (pivot.value.query)
                        QueryType = pivot.value.query;
                    return QueryType
                }, getQueryOptions: function getQueryOptions(view, pivot, modifier, secondaryModifier, filter) {
                    var options = MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(pivot.value.queryOptions), WinJS.Binding.unwrap(modifier.value.queryOptions));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(secondaryModifier.value.queryOptions));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(filter.value.queryOptions));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(view.queryOptions));
                    return options
                }, getModelOptions: function getModelOptions(view, pivot, modifier, secondaryModifier, filter) {
                    var options;
                    options = MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(WinJS.Utilities.getMember("value.modelOptions", pivot)), WinJS.Binding.unwrap(WinJS.Utilities.getMember("value.modelOptions", modifier)));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(WinJS.Utilities.getMember("value.modelOptions", secondaryModifier)));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(WinJS.Utilities.getMember("value.modelOptions", filter)));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(view && view.modelOptions));
                    return options
                }, createContainingMedia: function createContainingMedia() {
                    return null
                }, createSelectionHandlers: function createSelectionHandlers() {
                    return null
                }, resetSelectedTemplate: function resetSelectedTemplate() {
                    var view = this.getViewDefinition(this.view);
                    var pivot = this.pivotsSelectionManager && this.pivotsSelectionManager.selectedItem;
                    var modifier = this.modifierSelectionManager && this.modifierSelectionManager.selectedItem;
                    var secondaryModifier = this.secondaryModifierSelectionManager && this.secondaryModifierSelectionManager.selectedItem;
                    var filter = this.filterSelectionManager && this.filterSelectionManager.selectedItem;
                    var options = this.getModelOptions(view, pivot, modifier, secondaryModifier, filter);
                    if (options && options.selectedTemplate)
                        this.selectedTemplate = options.selectedTemplate
                }, makeEmpty: function makeEmpty() {
                    this._clear(true)
                }, clear: function clear() {
                    this._clear(false)
                }, _clear: function _clear(setEmptyResult) {
                    this._disposeQuery();
                    this._resetLastUsed();
                    this._setIsFailed(false);
                    this._setItems(setEmptyResult ? new MS.Entertainment.Data.VirtualList : null)
                }, freeze: function freeze(){}, thaw: function thaw(){}, refresh: function refresh() {
                    if (this._disposed)
                        return;
                    this._resetLastUsed();
                    this._enabled = true;
                    return this._refresh()
                }, refreshIfNeeded: function refreshIfNeeded() {
                    if (this._disposed)
                        return;
                    this._enabled = true;
                    return this._refresh()
                }, begin: function begin() {
                    var promise;
                    if (!this._enabled) {
                        this._enabled = true;
                        promise = this._refresh()
                    }
                    return WinJS.Promise.as(promise)
                }, waitForLoad: function waitForLoad() {
                    return WinJS.Promise.join([WinJS.Promise.as(this._pendingViewChange), WinJS.Promise.as(this._pendingQueryExecute)]).then(function hideResult(){})
                }, trySetCurrentFilter: function trySetCurrentFilter(filterId) {
                    this._setCurrentFilter(filterId, true)
                }, setCurrentFilter: function setCurrentFilter(filterId) {
                    this._setCurrentFilter(filterId, false)
                }, _setCurrentFilter: function _setCurrentFilter(filterId, ignoreFailures) {
                    if (this.filterSelectionManager && this.filterSelectionManager.dataSource) {
                        var foundFilter = false;
                        for (var i = 0; i < this.filterSelectionManager.dataSource.length; i++)
                            if (this.filterSelectionManager.dataSource[i].id === filterId) {
                                foundFilter = true;
                                this.filterSelectionManager.selectedIndex = i;
                                break
                            }
                        MS.Entertainment.ViewModels.assert(foundFilter || ignoreFailures, "setCurrentFilter: Filter not found: '" + filterId + "'")
                    }
                }, getCurrentFilter: function getCurrentFilter() {
                    var result = null;
                    if (this._workingFilterSelectionManager && this._workingFilterSelectionManager.selectedItem)
                        result = this._workingFilterSelectionManager.selectedItem.id;
                    return result
                }, reloadFilters: function reloadFilters() {
                    this._resetFilters(true)
                }, _raiseDelayLoadedEvent: function _raiseDelayLoadedEvent() {
                    this.dispatchEvent(MS.Entertainment.ViewModels.QueryViewModel.events.delayLoaded, {sender: this})
                }, _raiseShouldClearSelection: function _raiseShouldClearSelection() {
                    if (!this._disposed)
                        this.dispatchEvent(MS.Entertainment.ViewModels.QueryViewModel.events.shouldClearSelection, {sender: this})
                }, _handleModifierSelectionChanged: function _handleModifierSelectionChanged(args) {
                    if (!this.view || args.detail.oldSelection.index < 0 || this._refreshing)
                        return;
                    this._lastUsedSecondaryModifierDefinition = null;
                    this._resetSecondaryModifier();
                    this._beginQuery()
                }, _handleSecondaryModifierSelectionChanged: function _handleSecondaryModifierSelectionChanged(args) {
                    if (!this.view || args.detail.oldSelection.index < 0 || this._refreshing)
                        return;
                    this._beginQuery()
                }, _handleFilterSelectionChanged: function _handleFilterSelectionChanged(args) {
                    if (!this.view || args.detail.oldSelection.index < 0 || this._refreshing)
                        return;
                    this._beginQuery()
                }, _handlePivotSelectionChanged: function _handlePivotSelectionChanged(args) {
                    if (!this.view || args.detail.oldSelection.index < 0 || this._refreshing) {
                        if (this.isHorizontalLayout)
                            this._resetModifiers();
                        return
                    }
                    if (args.detail.newSelection.index >= 0 && this._modifiersTrimmed)
                        this._lastUsedModifierDefinition = null;
                    this._lastUsedSubPivotDefinition = null;
                    this._resetSubPivots();
                    this._refresh()
                }, _handleSelectedTemplateChanged: function _handleSelectedTemplateChanged(){}, _handleViewChange: function _handleViewChange() {
                    this._setItems(null);
                    this._lastUsedView = null;
                    this._lastUsedPivotDefinition = null;
                    this._lastUsedSubPivotDefinition = null;
                    this._lastUsedModifierDefinition = null;
                    this._lastUsedSecondaryModifierDefinition = null;
                    this._lastUsedFilterDefinition = null;
                    return this._refresh()
                }, _refresh: function _refresh() {
                    if (!this.view || !this._enabled || this._refreshing || this._disposed)
                        return WinJS.Promise.wrap();
                    this._refreshing = true;
                    if (this._pendingViewChange) {
                        this._pendingViewChange.cancel();
                        this._pendingViewChange = null
                    }
                    var promise = this._pendingViewChange = WinJS.Promise.join({
                            pivots: this._resetPivots(), modifier: this._resetModifiers(), filters: this._resetFilters()
                        }).then(this._viewLoadCompleted.bind(this), this._viewLoadFailed.bind(this));
                    this._refreshing = false;
                    return promise
                }, _resetPivots: function _resetPivots() {
                    var promise;
                    var staticPromise;
                    var queryPromise;
                    var pivotsQuery;
                    var pivots = this.getPivotDefinition(this.view);
                    var workingDataSource;
                    if (pivots !== this._lastUsedPivotDefinition) {
                        this._lastUsedPivotDefinition = pivots;
                        workingDataSource = new MS.Entertainment.ObservableArray;
                        this._lastUsedPivotItem = null;
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(this._workingPivotsSelectionManager, this.getPivotOptions(this.view));
                        this.pivotsSelectionManager = this._workingPivotsSelectionManager;
                        if (pivots) {
                            if (pivots.itemFactory) {
                                workingDataSource.spliceArray(workingDataSource.length, 0, pivots.itemFactory());
                                staticPromise = WinJS.Promise.wrap(true)
                            }
                            if (pivots.itemQuery) {
                                pivotsQuery = new pivots.itemQuery;
                                MS.Entertainment.Utilities.BindingAgnostic.setProperties(pivotsQuery, pivots.itemQueryOptions);
                                queryPromise = WinJS.Promise.as(staticPromise).then(function itemsArrayAdded() {
                                    return pivotsQuery.execute()
                                }.bind(this)).then(function queryFinished(q) {
                                    return MS.Entertainment.Data.List.listToArray(q.result.items)
                                }.bind(this), function queryFailed(error) {
                                    if (this._lastUsedPivotDefinition === pivots)
                                        this._lastUsedPivotDefinition = null;
                                    return WinJS.Promise.wrapError(error)
                                }.bind(this)).then(function gotArray(array) {
                                    workingDataSource.spliceArray(workingDataSource.length, 0, array);
                                    return true
                                }.bind(this))
                            }
                        }
                        this._workingPivotsSelectionManager.dataSource = workingDataSource;
                        promise = WinJS.Promise.as(staticPromise || queryPromise);
                        promise = promise.then(function refreshSubPivots() {
                            this._lastUsedSubPivotDefinition = null;
                            return this._resetSubPivots()
                        }.bind(this))
                    }
                    return WinJS.Promise.as(promise)
                }, _resetSubPivots: function _resetSubPivots() {
                    var promise;
                    var staticPromise;
                    var queryPromise;
                    var subPivotQuery;
                    var selectedPivot = this._workingPivotsSelectionManager.selectedItem;
                    var subPivot = this.getSubPivotDefinition(this.view, selectedPivot);
                    var workingDataSource;
                    if (subPivot !== this._lastUsedSubPivotDefinition) {
                        this._lastUsedSubPivotDefinition = subPivot;
                        var workingDataSource = [];
                        var subPivotOptions = this.getSubPivotOptions(this.view, selectedPivot) || {};
                        if (subPivot && selectedPivot) {
                            if (subPivot.itemFactory) {
                                workingDataSource = subPivot.itemFactory().concat(workingDataSource);
                                staticPromise = WinJS.Promise.wrap(true)
                            }
                            if (subPivot.itemQuery) {
                                subPivotQuery = new subPivot.itemQuery;
                                MS.Entertainment.Utilities.BindingAgnostic.setProperties(subPivotQuery, this.getSubPivotItemQueryOptions(this.view, selectedPivot));
                                this._createSubItemAugmentation(subPivotQuery, selectedPivot);
                                queryPromise = WinJS.Promise.as(staticPromise).then(function itemsArrayAdded() {
                                    return subPivotQuery.execute()
                                }).then(function queryFinished(q) {
                                    return MS.Entertainment.Data.List.listToArray(q.result.items)
                                }, function queryFailed(error) {
                                    if (this._lastUsedSubPivotDefinition === subPivot)
                                        this._lastUsedSubPivotDefinition = null;
                                    if (error.name === "Canceled")
                                        return WinJS.Promise.wrapError(error);
                                    else
                                        return []
                                }.bind(this)).then(function gotArray(array) {
                                    workingDataSource = workingDataSource.concat(array);
                                    return true
                                })
                            }
                            promise = WinJS.Promise.as(staticPromise || queryPromise);
                            promise.then(null, function ignoreError(error){}).done(function setItems() {
                                if (this._lastUsedSubPivotDefinition === subPivot && (typeof subPivotOptions.minItems !== "number" || isNaN(subPivotOptions.minItems) || subPivotOptions.minItems <= workingDataSource.length))
                                    selectedPivot.items = workingDataSource;
                                else if (selectedPivot.items)
                                    selectedPivot.items = null
                            }.bind(this))
                        }
                        else if (selectedPivot && selectedPivot.items)
                            selectedPivot.items = null
                    }
                    return WinJS.Promise.as(promise)
                }, _createSubItemAugmentation: function _createSubItemAugmentation(query, parent) {
                    query.resultAugmentation = MS.Entertainment.Data.AugmentQuery.modifyListResultAugmentation(query.resultAugmentation, {parent: parent})
                }, _resetLastUsed: function _resetLastUsed() {
                    this._lastUsedPivotItem = null;
                    this._lastUsedModifierItem = null;
                    this._lastUsedSecondaryModifierItem = null;
                    this._lastUsedFilterItem = null;
                    this._lastUsedView = null
                }, _resetModifiers: function _resetModifiers() {
                    var promise;
                    var staticPromise;
                    var queryPromise;
                    var modifierQuery;
                    var modifier = this.getModifierDefinition(this.view);
                    var workingDataSource;
                    if (modifier !== this._lastUsedModifierDefinition) {
                        this._lastUsedModifierDefinition = modifier;
                        workingDataSource = new MS.Entertainment.ObservableArray;
                        this._lastUsedModifierItem = null;
                        this._lastUsedSecondaryModifierItem = null;
                        this._modifiersTrimmed = false;
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(this._workingModifierSelectionManager, this.getModifierOptions(this.view));
                        this.modifierSelectionManager = this._workingModifierSelectionManager;
                        if (modifier) {
                            if (modifier.itemFactory) {
                                workingDataSource.spliceArray(workingDataSource.length, 0, modifier.itemFactory());
                                staticPromise = WinJS.Promise.wrap(true)
                            }
                            if (modifier.itemQuery) {
                                modifierQuery = new modifier.itemQuery;
                                MS.Entertainment.Utilities.BindingAgnostic.setProperties(modifierQuery, modifier.itemQueryOptions);
                                queryPromise = WinJS.Promise.as(staticPromise).then(function itemsArrayAdded() {
                                    return modifierQuery.execute()
                                }.bind(this)).then(function queryFinished(q) {
                                    return MS.Entertainment.Data.List.listToArray(q.result.items)
                                }.bind(this), function queryFailed(error) {
                                    if (this._lastUsedModifierDefinition === modifier)
                                        this._lastUsedModifierDefinition = null;
                                    if (error.name === "Canceled")
                                        return WinJS.Promise.wrapError(error);
                                    else
                                        return []
                                }.bind(this)).then(function gotArray(array) {
                                    workingDataSource.spliceArray(workingDataSource.length, 0, array);
                                    return true
                                }.bind(this))
                            }
                            if (modifier.options)
                                this._workingModifierSelectionManager.toggleModifier = modifier.options.toggleModifier;
                            promise = staticPromise || queryPromise
                        }
                        this._workingModifierSelectionManager.dataSource = workingDataSource;
                        this._lastUsedSecondaryModifierDefinition = null;
                        if (promise)
                            promise = promise.then(null, function ignoreError(error) {
                                MS.Entertainment.Data.fail("Failed loading the modifier.  Error: " + (error && error.message))
                            }).then(this._resetSecondaryModifier.bind(this))
                    }
                    return WinJS.Promise.as(promise)
                }, _resetFilters: function _resetFilters(presistFilterSelection) {
                    var filters = this.getFilterDefinition(this.view);
                    if (filters !== this._lastUsedFilterDefinition) {
                        this._lastUsedFilterDefinition = filters;
                        if (!presistFilterSelection)
                            this._lastUsedFilterItem = null;
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(this._workingFilterSelectionManager, this.getFilterOptions(this.view));
                        if (filters && filters.itemFactory)
                            this._workingFilterSelectionManager.dataSource = filters.itemFactory();
                        else if (filters && filters.options)
                            this._workingFilterSelectionManager.dataSource = filters.options;
                        else
                            this._workingFilterSelectionManager.dataSource = null;
                        this.filterSelectionManager = this._workingFilterSelectionManager
                    }
                    return WinJS.Promise.as(true)
                }, _resetSecondaryModifier: function _resetSecondaryModifier() {
                    var promise;
                    var staticPromise;
                    var queryPromise;
                    var secondaryModifierQuery;
                    var selectedModifier = this._workingModifierSelectionManager.selectedItem;
                    var secondaryModifier = this.getSecondaryModifierDefinition(this.view, selectedModifier);
                    var workingDataSource;
                    this.secondaryModifierSelectionManager = this._workingSecondaryModifierSelectionManager;
                    if (secondaryModifier !== this._lastUsedSecondaryModifierDefinition) {
                        this._lastUsedSecondaryModifierDefinition = secondaryModifier;
                        var workingDataSource = new MS.Entertainment.ObservableArray;
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(this._workingModifierSelectionManager, this.getSecondaryModifierOptions(this.view, selectedModifier));
                        if (secondaryModifier) {
                            if (secondaryModifier.itemFactory) {
                                workingDataSource.spliceArray(workingDataSource.length, 0, secondaryModifier.itemFactory());
                                staticPromise = WinJS.Promise.wrap(true)
                            }
                            if (secondaryModifier.itemQuery) {
                                secondaryModifierQuery = new secondaryModifier.itemQuery;
                                MS.Entertainment.Utilities.BindingAgnostic.setProperties(secondaryModifierQuery, this.getSecondaryModifierItemQueryOptions(this.view, selectedModifier));
                                queryPromise = WinJS.Promise.as(staticPromise).then(function itemsArrayAdded() {
                                    return secondaryModifierQuery.execute()
                                }.bind(this)).then(function queryFinished(q) {
                                    return MS.Entertainment.Data.List.listToArray(q.result.items)
                                }.bind(this), function queryFailed(error) {
                                    if (this._lastUsedSecondaryModifierDefinition === secondaryModifier)
                                        this._lastUsedSecondaryModifierDefinition = null;
                                    if (error.name === "Canceled")
                                        return WinJS.Promise.wrapError(error);
                                    else
                                        return []
                                }.bind(this)).then(function gotArray(array) {
                                    workingDataSource.spliceArray(workingDataSource.length, 0, array);
                                    return true
                                }.bind(this))
                            }
                            promise = staticPromise || queryPromise
                        }
                        this._workingSecondaryModifierSelectionManager.dataSource = workingDataSource
                    }
                    else if (this._workingSecondaryModifierSelectionManager.dataSource)
                        this._workingSecondaryModifierSelectionManager.dataSource = null;
                    return WinJS.Promise.as(promise)
                }, _viewLoadExit: function _viewLoadExit(results) {
                    this._pendingViewChange = null
                }, _viewLoadCompleted: function _viewLoadCompleted(results) {
                    this._viewLoadExit(results);
                    if (results.modifier && (!this._workingModifierSelectionManager.dataSource || !this._workingModifierSelectionManager.dataSource.length))
                        this.modifierSelectionManager = null;
                    if (results.secondaryModifier && (!this._workingSecondaryModifierSelectionManager.dataSource || !this._workingSecondaryModifierSelectionManager.dataSource.length))
                        this.secondaryModifierSelectionManager = null;
                    if (results.filter && (!this._workingFilterSelectionManager.dataSource || !this._workingFilterSelectionManager.dataSource.length))
                        this.filterSelectionManager = null;
                    if (results.pivots && (!this._workingPivotsSelectionManager.dataSource || !this._workingPivotsSelectionManager.dataSource.length))
                        this.pivotsSelectionManager = null;
                    return this._beginQuery()
                }, _viewLoadFailed: function _viewLoadFailed(results) {
                    this._viewLoadExit({
                        modifier: [], pivots: []
                    });
                    this._setItems(null);
                    this._setIsFailed(true);
                    return WinJS.Promise.wrapError(new Error("Pivots, modifiers or filters failed to load"))
                }, _updateSelectionHandlers: function _updateSelectionHandlers() {
                    if (this.isDelayInitialized && (this.completedQuery || this.items))
                        this.selectionHandlers = this.createSelectionHandlers()
                }, createActionCells: function createActionCells() {
                    return null
                }, createModifierActionCells: function createModifierActionCells(groupHeader, modifierTitleIds, showIfEmptyModifiers) {
                    var modifiers = [this.modifierSelectionManager, this.secondaryModifierSelectionManager];
                    var actionCells = [];
                    modifiers.forEach(function createModifierCell(modifier, i) {
                        if ((modifier.dataSource && modifier.dataSource.length > 1) || (showIfEmptyModifiers && showIfEmptyModifiers[i])) {
                            var newActionCell = new MS.Entertainment.ViewModels.ModifierActionCell(modifier, groupHeader, modifierTitleIds ? modifierTitleIds[i] : null, showIfEmptyModifiers ? showIfEmptyModifiers[i] : null);
                            actionCells.push(newActionCell)
                        }
                    });
                    return actionCells
                }, cloneCurrentQuery: function cloneCurrentQuery() {
                    return null
                }, refreshQuery: function refreshQuery() {
                    this._lastUsedView = null;
                    return this._beginQuery()
                }, _disposeQuery: function _disposeQuery() {
                    if (this._lastUsedQuery && this._lastUsedQuery.dispose) {
                        this._lastUsedQuery.dispose();
                        this._lastUsedQuery = null
                    }
                    if (this._queryWatcher) {
                        this._queryWatcher.clearQueries();
                        this._queryWatcher = null
                    }
                    this._unregisterForQueryEvents()
                }, _beginQuery: function _beginQuery() {
                    if (this._disposed)
                        return WinJS.Promise.wrap();
                    return WinJS.Promise.as(this._onDelayBeginQuery()).then(function _beginQueryWork() {
                            var pivot;
                            var modifier;
                            var secondaryModifier;
                            var filter;
                            var pivotItem = this._workingPivotsSelectionManager.selectedItem;
                            var modifierItem = this._workingModifierSelectionManager.selectedItem;
                            var secondaryModifierItem = this._workingSecondaryModifierSelectionManager.selectedItem;
                            var filterItem = this._workingFilterSelectionManager.selectedItem;
                            var view = this.getViewDefinition(this.view);
                            if (!view || !this._enabled)
                                return WinJS.Promise.wrap();
                            if (this._lastUsedView === view && this._lastUsedPivotItem === pivotItem && this._lastUsedModifierItem === modifierItem && this._lastUsedSecondaryModifierItem === secondaryModifierItem && this._lastUsedFilterItem === filterItem)
                                return WinJS.Promise.wrap();
                            if (this._lastUsedView === view && MS.Entertainment.ViewModels.Node.isEqual(this._lastUsedPivotItem, pivotItem) && MS.Entertainment.ViewModels.Node.isEqual(this._lastUsedModifierItem, modifierItem) && MS.Entertainment.ViewModels.Node.isEqual(this._lastUsedSecondaryModifierItem, secondaryModifierItem) && MS.Entertainment.ViewModels.Node.isEqual(this._lastUsedFilterItem, filterItem))
                                return WinJS.Promise.wrap();
                            pivot = this._workingPivotsSelectionManager.selectedItem;
                            modifier = this._workingModifierSelectionManager.selectedItem;
                            secondaryModifier = this._workingSecondaryModifierSelectionManager.selectedItem;
                            filter = this._workingFilterSelectionManager.selectedItem;
                            this._lastUsedView = view;
                            this._lastUsedPivotItem = pivotItem;
                            this._lastUsedModifierItem = modifierItem;
                            this._lastUsedSecondaryModifierItem = secondaryModifier;
                            this._lastUsedFilterItem = filterItem;
                            pivot = pivot || {value: {}};
                            modifier = modifier || {value: {}};
                            secondaryModifier = secondaryModifier || {value: {}};
                            filter = filter || {value: {}};
                            var options = this.getModelOptions(view, pivot, modifier, secondaryModifier, filter);
                            MS.Entertainment.Utilities.BindingAgnostic.setProperties(this, options);
                            return this._handleBeginQuery(view, pivot, modifier, secondaryModifier, filter)
                        }.bind(this))
                }, _handleBeginQuery: function _handleBeginQuery(view, pivot, modifier, secondaryModifier, filter) {
                    var options;
                    var sender;
                    var QueryType;
                    var returnPromise;
                    var queryPromise;
                    if (this._pendingQueryExecute) {
                        this._pendingQueryExecute.cancel();
                        this._pendingQueryExecute = null
                    }
                    this.completedQuery = null;
                    this.containingMedia = null;
                    this.selectionHandlers = null;
                    this._unregisterForQueryEvents();
                    if (!this.forceEmpty)
                        QueryType = this.getQueryType(view, modifier, pivot);
                    if ((this._lastUsedQueryType !== QueryType || this._recreateQueries) && QueryType) {
                        this._disposeQuery();
                        this._lastUsedQuery = new QueryType;
                        this._lastUsedQueryType = QueryType;
                        this._queryWatcher = new MS.Entertainment.Framework.QueryWatcher(this._queryWatcherString + this.view);
                        this._queryWatcher.registerQuery(this._lastUsedQuery);
                        if (this.taskKeyGetter && this.propertyKey && this.notifier) {
                            var notifications = new MS.Entertainment.UI.ContentNotification.NotificationModification(MS.Entertainment.UI.ContentNotification.listResult(), MS.Entertainment.UI.FileTransferService.keyFromProperty(this.propertyKey, false, true));
                            sender = notifications.createSender();
                            notifications.modifyQuery(this._lastUsedQuery)
                        }
                    }
                    else if (!QueryType) {
                        this._disposeQuery();
                        returnPromise = WinJS.Promise.wrap()
                    }
                    if (this._lastUsedQuery) {
                        options = this.getQueryOptions(view, pivot, modifier, secondaryModifier, filter);
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(this._lastUsedQuery, options);
                        this._onBeginQuery(this._lastUsedQuery);
                        this._setItems(null);
                        var queryFinishedOnExecute = false;
                        queryPromise = this._pendingQueryExecute = this._lastUsedQuery.execute();
                        returnPromise = queryPromise.then(function queryCompleted(q) {
                            if (queryPromise !== this._pendingQueryExecute)
                                return;
                            if (this.failOnEmpty && this._isEmptyListFromQuery(q))
                                this._handleQueryFailure();
                            else {
                                queryFinishedOnExecute = true;
                                this._pendingQueryExecute = null;
                                this.completedQuery = q;
                                if (this.completedQuery.autoUpdateProperties && this.completedQuery.autoUpdateProperties.enabled)
                                    this.completedQuery.autoUpdateProperties.enabled = false;
                                this.completedQuery.enabled = true;
                                if (sender) {
                                    var fileTransferService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.fileTransfer);
                                    fileTransferService.registerListener(this._fileTransferListenerId, this.taskKeyGetter, sender, this.notifier)
                                }
                                var eventProvider = new Diagnostics.Tracing.Microsoft.Entertainment.Instrumentation.Providers.Shell;
                                eventProvider.traceNavigable_Loading_Done(this._loadingDoneString);
                                this._setItemsFromQuery(q);
                                this._registerForQueryEvents(q);
                                this._onQueryCompleted(q);
                                this._updateSelectionHandlers()
                            }
                        }.bind(this), function queryFailed(error) {
                            if (queryPromise !== this._pendingQueryExecute)
                                return;
                            this._onQueryFailed(error);
                            this._handleQueryFailure(error);
                            return WinJS.Promise.wrapError(error)
                        }.bind(this))
                    }
                    else if (this.forceEmpty)
                        this.makeEmpty();
                    else
                        this._setItems(null);
                    if (queryFinishedOnExecute)
                        this._pendingQueryExecute = null;
                    MS.Entertainment.Data.assert(!!returnPromise, "We should be returning a promises");
                    return WinJS.Promise.as(returnPromise)
                }, _handleQueryFailure: function _handleQueryFailure(error) {
                    this._pendingQueryExecute = null;
                    if (!error || !WinJS.Promise.isCanceledError(error)) {
                        if (!this._attemptAnotherQuery()) {
                            this._setIsFailed(true);
                            this._setItems(null)
                        }
                        if (error && error.details && error.details.query) {
                            error.details.query.enabled = true;
                            this._registerForQueryEvents(error.details.query)
                        }
                    }
                }, _isEmptyListFromQuery: function _isEmptyListFromQuery(query) {
                    return !query || !query.result || !query.result.items || query.result.items.count <= 0
                }, _setItemsFromQuery: function _setItemsFromQuery(queryOrEvent) {
                    var result;
                    var error;
                    if (queryOrEvent) {
                        result = queryOrEvent.detail ? queryOrEvent.detail.result : queryOrEvent.result;
                        error = queryOrEvent.detail ? queryOrEvent.detail.error : queryOrEvent.error
                    }
                    if (error) {
                        this._onQueryFailed(error);
                        this._setIsFailed(true);
                        this._setItems(null)
                    }
                    else if (result) {
                        if (!result.items)
                            result.items = new MS.Entertainment.Data.VirtualList(null, []);
                        this._setIsFailed(false);
                        this._setItems(result.items)
                    }
                }, _registerForQueryEvents: function _registerForQueryEvents(query) {
                    this._unregisterForQueryEvents();
                    if (query && this.handleQueryChanges)
                        this._queryEventHandlers = MS.Entertainment.Utilities.addEventHandlers(query, {resultChanged: this._setItemsFromQuery.bind(this)})
                }, _unregisterForQueryEvents: function _unregisterForQueryEvents() {
                    if (this._queryEventHandlers) {
                        this._queryEventHandlers.cancel();
                        this._queryEventHandlers = null
                    }
                }, _setIsFailed: function _setIsFailed(value) {
                    if (this.isFailed !== value) {
                        var oldValue = this.isFailed;
                        this.isFailed = value
                    }
                }, _setItems: function _setItems(items) {
                    if (this.items !== items) {
                        var actionCells;
                        if (items) {
                            actionCells = this.createActionCells(items.count);
                            if (actionCells && !Array.isArray(actionCells))
                                actionCells = [actionCells];
                            if (actionCells && actionCells.length > 0 && this.addActionCellsToList) {
                                actionCells = actionCells.map(function(currentAction) {
                                    return new MS.Entertainment.Data.Factory.ListActionItemWrapper(currentAction)
                                });
                                if (this.addActionCellsAtEnd)
                                    items.insertRangeAtEnd(actionCells);
                                else
                                    items.insertRangeAt(0, actionCells)
                            }
                            else
                                this.modelActions = actionCells
                        }
                        this._onItemsChanging(items, this.items);
                        var oldItems = this.items;
                        this.items = items;
                        this._onItemsChanged(this.items, oldItems);
                        this.containingMedia = this.items ? this.createContainingMedia() : null
                    }
                }, _onItemsChanging: function _onItemsChanging(newValue, oldValue){}, _onItemsChanged: function _onItemsChanged(newValue, oldValue){}, _setLargeItemIndex: function _setLargeItemIndex(value) {
                    if (this.largeItemIndex !== value) {
                        var oldValue = this.largeItemIndex;
                        this.largeItemIndex = value
                    }
                }, _onDelayBeginQuery: function _onDelayBeginQuery() {
                    return WinJS.Promise.as()
                }, _onBeginQuery: function _onBeginQuery(query){}, _onQueryFailed: function _onQueryFailed(error){}, _onQueryCompleted: function _onQueryCompleted(query){}, _attemptAnotherQuery: function _attemptAnotherQuery() {
                    var changedModifier = false;
                    var oldDataSource;
                    if (this.autoHideInvalidModifiers && !this._disposed && this._workingModifierSelectionManager) {
                        if (this._workingModifierSelectionManager.dataSource && this._workingModifierSelectionManager.selectedIndex >= 0) {
                            changedModifier = true;
                            this._modifiersTrimmed = true;
                            this._workingModifierSelectionManager.dataSource.removeAt(this._workingModifierSelectionManager.selectedIndex)
                        }
                        if (this._workingModifierSelectionManager.dataSource && this._workingModifierSelectionManager.dataSource.getArray)
                            oldDataSource = WinJS.Binding.unwrap(this._workingModifierSelectionManager.dataSource.getArray());
                        else
                            oldDataSource = [];
                        this._workingModifierSelectionManager.dataSource = new MS.Entertainment.ObservableArray(oldDataSource)
                    }
                    return changedModifier
                }
        }, {events: {
                modifierClick: "modifierClick", secondaryModifierClick: "secondaryModifierClick", shouldClearSelection: "shouldClearSelection", delayLoaded: "delayLoaded"
            }})})
})()
})();
/* >>>>>>/viewmodels/music/musicviewmodel.js:13682 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {Music: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.QueryViewModel", function musicConstructor(view) {
            this._queryWatcherString = "music-marketplace-";
            this._loadingDoneString = "music";
            var currentPage;
            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation))
                currentPage = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation).currentPage;
            var options = currentPage && currentPage.options || {};
            if (options.defaultModifierIndex > -1) {
                this._defaultModifierSelection = options.defaultModifierIndex;
                if (options.overrideModifierSetting !== undefined && options.overrideModifierSetting !== null)
                    this._overrideModifierSetting = options.overrideModifierSetting
            }
            if (options.defaultSecondaryModifierIndex > -1)
                this._defaultSecondaryModifierSelection = options.defaultSecondaryModifierIndex;
            if (options.filterIndex > -1)
                this._defaultFilterIndex = options.filterIndex;
            if (options.pivotIndex > -1)
                this._defaultPivotIndex = options.pivotIndex;
            MS.Entertainment.ViewModels.QueryViewModel.prototype.constructor.apply(this, arguments)
        }, {createTrackQuery: function createTrackQuery() {
                var query;
                var QueryType;
                var options;
                var view = this.getViewDefinition(this.view);
                var pivot = this._workingPivotsSelectionManager.selectedItem;
                var modifier = this._workingModifierSelectionManager.selectedItem;
                var secondaryModifier = this._workingSecondaryModifierSelectionManager.selectedItem;
                var filter = this._workingFilterSelectionManager.selectedItem;
                pivot = pivot || {value: {}};
                modifier = modifier || {value: {}};
                secondaryModifier = secondaryModifier || {value: {}};
                filter = filter || {value: {}};
                if (view.trackQuery)
                    QueryType = view.trackQuery;
                else if (modifier.value.trackQuery)
                    QueryType = modifier.value.trackQuery;
                else if (pivot.value.trackQuery)
                    QueryType = pivot.value.trackQuery;
                if (QueryType) {
                    query = new QueryType;
                    options = MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(pivot.value.trackQueryOptions), WinJS.Binding.unwrap(modifier.value.trackQueryOptions));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(secondaryModifier.value.trackQueryOptions));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(filter.value.trackQueryOptions));
                    options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(view.trackQueryOptions));
                    MS.Entertainment.Utilities.BindingAgnostic.setProperties(query, options)
                }
                if (!query) {
                    if (view.query)
                        QueryType = view.query;
                    else if (modifier.value.query)
                        QueryType = modifier.value.query;
                    else if (pivot.value.query)
                        QueryType = pivot.value.query;
                    if (QueryType) {
                        query = new QueryType;
                        options = MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(pivot.value.queryOptions), WinJS.Binding.unwrap(modifier.value.queryOptions));
                        options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(filter.value.queryOptions));
                        options = MS.Entertainment.Utilities.uniteObjects(options, WinJS.Binding.unwrap(view.queryOptions));
                        MS.Entertainment.Utilities.BindingAgnostic.setProperties(query, options)
                    }
                }
                MS.Entertainment.ViewModels.assert(query, "No track query was created, when we expected one");
                return query
            }})});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {
        PlayQueryAction: MS.Entertainment.deferredDerive("MS.Entertainment.Platform.PlayAction", function playQueryAction(queryFactory) {
            this.base();
            this.queryFactory = queryFactory;
            this.title = String.load(String.id.IDS_PLAY_ALL_LABEL)
        }, {
            automationId: MS.Entertainment.UI.AutomationIds.playQueryAction, preRollVideoAdIfNeeded: null, _queryFactory: null, _disposed: false, isEnabled: false, dispose: function dispose() {
                    this._queryFactory = null;
                    this.requeryCanExecute();
                    this._disposed = true
                }, queryFactory: {
                    get: function() {
                        return this._queryFactory
                    }, set: function(value) {
                            if (!this._disposed)
                                this._queryFactory = value
                        }
                }, executedPlay: function executedPlay(param) {
                    var playMedia;
                    var query = this.queryFactory();
                    var adService;
                    var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                    var wasMediaQueuedPromise = WinJS.Promise.as(false);
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.adService))
                        adService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.adService);
                    MS.Entertainment.ViewModels.assert(query, "QueryFactory returned a null query");
                    if (query) {
                        query.isLive = false;
                        var shuffle = (param && param.shuffle !== undefined) ? param.shuffle : undefined;
                        var playOptions = {
                                sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, showImmersive: false, showAppBar: true, shuffle: shuffle, saveNowPlaying: false
                            };
                        if (MS.Entertainment.Data.ServiceWrapperQuery.isServiceWrapperQuery(query))
                            playOptions.offset = 0;
                        playMedia = function playMedia() {
                            MS.Entertainment.Platform.PlaybackHelpers.playMedia2(query, playOptions)
                        };
                        if (adService && this.preRollVideoAdIfNeeded && signInService.isSignedIn && !signedInUserService.isSubscription)
                            wasMediaQueuedPromise = adService.playVideoAdIfRequired(query).then(function playVideoAdIfRequired_complete(adPlayedIfNeeded) {
                                if (adPlayedIfNeeded)
                                    playMedia();
                                return adPlayedIfNeeded
                            }, function playVideoAdIfRequired_failed(error) {
                                MS.Entertainment.ViewModels.fail("playVideoAdIfRequired_failed: " + error && error.message);
                                playMedia();
                                return true
                            });
                        else {
                            playMedia();
                            wasMediaQueuedPromise = WinJS.Promise.as(true)
                        }
                    }
                    return wasMediaQueuedPromise
                }, canExecutePlay: function canExecutePlay(param) {
                    return !!this.queryFactory
                }
        }), PlayArtistAction: MS.Entertainment.deferredDerive("MS.Entertainment.Platform.PlayAction", function playArtistAction() {
                this.base()
            }, {
                executedPlay: function executedPlay(param) {
                    MS.Entertainment.Instrumentation.PerfTrack.setStartTime(MS.Entertainment.Instrumentation.PerfTrack.StartPoints.PlayCommand);
                    var isImmersive = false;
                    var query,
                        id;
                    if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.navigation)) {
                        var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                        isImmersive = navigationService.checkUserLocation(MS.Entertainment.UI.Monikers.immersiveDetails)
                    }
                    MS.Entertainment.ViewModels.assert(param.mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.person && param.mediaItem.personType === Microsoft.Entertainment.Queries.PersonType.artist, "Invalid media type. Was expecting an artist media object");
                    if (param.playCollectionItemsOnly) {
                        id = MS.Entertainment.Utilities.isValidLibraryId(param.mediaItem.libraryId) ? param.mediaItem.libraryId : param.libraryId;
                        query = new MS.Entertainment.Data.Query.libraryTracks;
                        query.artistId = param.mediaItem.libraryId;
                        query.mediaAvailability = param.collectionFilter;
                        query.sort = Microsoft.Entertainment.Queries.TracksSortBy.albumTitleDiscNumberNumberAscending;
                        query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist);
                        if (param.librarySort)
                            query.sort = param.librarySort
                    }
                    else {
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.freePlayLimits)) {
                            var freePlayLimits = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.freePlayLimits);
                            if (freePlayLimits.isMonthlyFreeLimitExceeded)
                                return freePlayLimits.showMonthlyFreeLimitExceededDialog()
                        }
                        id = (!MS.Entertainment.Utilities.isEmptyGuid(param.mediaItem.canonicalId)) ? param.mediaItem.canonicalId : param.serviceId;
                        if (param.onlyMusicVideos)
                            query = new MS.Entertainment.Data.Query.Music.ArtistMusicVideos;
                        else
                            query = new MS.Entertainment.Data.Query.Music.ArtistTopSongs;
                        query.hasTotalCount = true;
                        query.id = param.mediaItem.canonicalId;
                        query.impressionGuid = param.mediaItem.impressionGuid;
                        query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.store, Microsoft.Entertainment.Platform.AcquisitionContextType.artist, MS.Entertainment.Utilities.isValidServiceId(param.mediaItem.canonicalId) ? param.mediaItem.canonicalId : String.empty)
                    }
                    if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                        MS.Entertainment.Utilities.Telemetry.logSearchExit(param.mediaItem);
                    MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayProtectedInApp();
                    MS.Entertainment.Instrumentation.PerfTrack.enableScenarioPlayNonProtectedInApp();
                    MS.Entertainment.Platform.PlaybackHelpers.playMedia2(query, {
                        sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, startPositionMsec: param.startPositionMS, showImmersive: !!param.showImmersive, showAppBar: (!!param.showAppBar && !isImmersive), automationId: param.automationId, playPreviewOnly: param.playPreviewOnly, playbackSource: MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.radio, enableFallbackToPreview: !!param.enableFallbackToPreview, immersiveOptions: {
                                sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, startFullScreen: !param.showDetails, overridePageChange: param.overridePageChange
                            }, playContext: {
                                artistSeed: param.mediaItem, isSmartDJ: false
                            }
                    });
                    return true
                }, canExecutePlay: function canExecutePlay(param) {
                        return param && param.mediaItem && ((param.playCollectionItemsOnly && (MS.Entertainment.Utilities.isValidLibraryId(param.mediaItem.libraryId) || MS.Entertainment.Utilities.isValidLibraryId(param.libraryId))) || (!param.playCollectionItemsOnly && (!MS.Entertainment.Utilities.isEmptyGuid(param.mediaItem.serviceId) || !MS.Entertainment.Utilities.isEmptyGuid(param.serviceId))))
                    }
            }), PlaySmartDJAction: MS.Entertainment.deferredDerive("MS.Entertainment.Platform.PlayAction", function playSmartDJAction() {
                this.base();
                this._uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState)
            }, {
                _addSmartDJTimeout: 5000, _uiStateService: null, _numberOfFeaturedArtistNamesToFind: 2, _numberOfArtistNamesToCheck: 8, _appendArtistName: function _appendArtistName(item, mediaNameLowercase, featuredArtists) {
                        var newArtistNameLowerCase = featuredArtists.length < this._numberOfFeaturedArtistNamesToFind && item && item.data.artist && item.data.artist.name && item.data.artist.name.toLowerCase();
                        if (newArtistNameLowerCase !== mediaNameLowercase) {
                            var matchFound = false;
                            for (var i = 0; i < featuredArtists.length; i++)
                                if (featuredArtists[i] && (newArtistNameLowerCase === featuredArtists[i].toLowerCase()))
                                    matchFound = true;
                            if (!matchFound && item && item.data && item.data.artist && item.data.artist.name)
                                featuredArtists.push(item.data.artist.name)
                        }
                        return WinJS.Promise.wrap(item)
                    }, _addSmartDJ: function _addSmartDJ(mediaItem) {
                        var promise;
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        var playbackSession = sessionMgr.nowPlayingSession;
                        var playbackError = playbackSession.playerState === MS.Entertainment.Platform.Playback.PlayerState.error;
                        if (playbackError)
                            promise = WinJS.Promise.wrapError(new Error("Playback failed"));
                        else if (playbackSession.smartDJSeed !== mediaItem)
                            promise = WinJS.Promise.wrap();
                        else if (playbackSession.mediaCollection) {
                            var featuredArtists = [];
                            var mediaNameLowercase = mediaItem.name.toLowerCase();
                            var appendArtistName = function appendArtistName(item) {
                                    return this._appendArtistName(item, mediaNameLowercase, featuredArtists)
                                }.bind(this);
                            promise = MS.Entertainment.Platform.Playback.Playlist.PlaylistCore.forEachItemSequentially(playbackSession.mediaCollection, appendArtistName, this._numberOfArtistNamesToCheck).then(function combineArtists() {
                                var smartDJAddQuery = new MS.Entertainment.Data.Query.Music.SmartDJAdd(mediaItem, featuredArtists);
                                return smartDJAddQuery.execute()
                            }).then(function refreshOnAdd() {
                                var smartDJList = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.smartDJList);
                                smartDJList.add(mediaItem, featuredArtists);
                                smartDJList.refresh()
                            })
                        }
                        else {
                            var smartDJAddQuery = new MS.Entertainment.Data.Query.Music.SmartDJAdd(mediaItem);
                            return smartDJAddQuery.execute().then(function refreshOnAdd() {
                                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.smartDJList).refresh()
                                })
                        }
                        return promise.then(null, function smartDJAddFailed(error) {
                                MS.Entertainment.ViewModels.assert(WinJS.Promise.isCanceledError(error), "SmartDJ add failed. Error message: " + (error && error.message), MS.Entertainment.UI.Debug.errorLevel.low);
                                if (MS.Entertainment.Utilities.isMusicApp2) {
                                    var domEvent = document.createEvent("Event");
                                    domEvent.initEvent("dismissoverlay", true, true);
                                    var smartDJOverlay = document.querySelector(".overlayAnchor .overlayContainer");
                                    if (smartDJOverlay)
                                        smartDJOverlay.dispatchEvent(domEvent)
                                }
                            })
                    }, _addSmartDJAfterPlayback: function _addSmartDJAfterPlayback(mediaItem) {
                        var bindings;
                        var completed;
                        var playbackSession = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).nowPlayingSession;
                        function onPlaybackChanged() {
                            if (!bindings)
                                return;
                            var playbackError = playbackSession.playerState === MS.Entertainment.Platform.Playback.PlayerState.error;
                            if (playbackError)
                                completed();
                            else if (playbackSession.smartDJSeed === mediaItem && playbackSession.currentTransportState === MS.Entertainment.Platform.Playback.TransportState.playing && playbackSession.mediaCollection)
                                playbackSession.mediaCollection.getCount().then(function checkAddedCount(count) {
                                    if (bindings && count > 1)
                                        completed()
                                }, function ignoreError() {
                                    completed()
                                })
                        }
                        var promise = new WinJS.Promise(function initializePromise(c) {
                                completed = c;
                                bindings = WinJS.Binding.bind(playbackSession, {
                                    currentTransportState: onPlaybackChanged, playerState: onPlaybackChanged
                                })
                            }, function canceled(){});
                        promise.then(this._addSmartDJCallback(mediaItem), function ignoreError(){}).done(function clearBindings() {
                            if (bindings) {
                                bindings.cancel();
                                bindings = null
                            }
                        });
                        return promise
                    }, _addSmartDJCallback: function _addSmartDJCallback(mediaItem) {
                        return function addSmartDJ() {
                                this._addSmartDJ(mediaItem)
                            }.bind(this)
                    }, _defaultPlaybackOptions: function _defaultPlaybackOptions(param, artist) {
                        return {
                                sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, showImmersive: !!param.showImmersive, showAppBar: (!!param.showAppBar && !this._uiStateService.nowPlayingVisible), automationId: param.automationId, playbackSource: MS.Entertainment.Platform.PlaybackHelpers.PlaybackSource.radio, immersiveOptions: {
                                        sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, startFullScreen: !param.showDetails, overridePageChange: param.overridePageChange
                                    }, smartDJSeed: artist, playContext: {
                                        artistSeed: artist, isSmartDJ: true
                                    }
                            }
                    }, _openSmartDjOverlay: function _openSmartDjOverlay(media) {
                        MS.Entertainment.Framework.assert(media, "Clicked media was null");
                        var mediaName = media.artistName || media.name;
                        var overlayContent;
                        MS.Entertainment.UI.Controls.Overlay.showLoadingOverlay({
                            closeTimeoutMS: this._addSmartDJTimeout, userControl: "MS.Entertainment.UI.Controls.FailedPanel", hideOnNowPlaying: true, enableKeyboardLightDismiss: true, onInitialize: function processOverlay(overlayContent) {
                                    return WinJS.UI.process(overlayContent).then(function setModel() {
                                            overlayContent.winControl.model = {
                                                primaryStringId: null, primaryText: String.load(String.id.IDS_SMARTDJ_LOADING_TEXT).format(mediaName)
                                            }
                                        }.bind(this))
                                }.bind(this)
                        })
                    }, executedPlay: function executedPlay(param) {
                        var primaryStringId;
                        var secondaryStringId;
                        var error = false;
                        var uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                        var networkStatus = uiStateService.networkStatus;
                        if (networkStatus === MS.Entertainment.UI.NetworkStatusService.NetworkStatus.localOnly || networkStatus === MS.Entertainment.UI.NetworkStatusService.NetworkStatus.none) {
                            error = true;
                            primaryStringId = String.id.IDS_SMARTDJ_OFFINE_ERROR_TITLE;
                            secondaryStringId = String.id.IDS_SMARTDJ_OFFINE_ERROR_DESC
                        }
                        var sessionManager = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        if (sessionManager.primarySession && sessionManager.primarySession.isRemoteSession && sessionManager.primarySession.isRemoteSession() && !MS.Entertainment.Utilities.isWindowsBlue) {
                            error = true;
                            primaryStringId = String.id.IDS_MUSIC_PLAY_TO_DISABLED_TEXT
                        }
                        if (error) {
                            var size = MS.Entertainment.Utilities.popOverDefaultSize;
                            var options = {
                                    userControl: MS.Entertainment.UI.Controls.FailedPanel, width: size.width ? size.width.toString() : String.empty, height: size.height ? size.height.toString() : String.empty, userControlOptions: {model: {
                                                primaryStringId: primaryStringId, secondaryStringId: secondaryStringId
                                            }}
                                };
                            return new MS.Entertainment.UI.Controls.PopOver(document.createElement("div"), options).show()
                        }
                        var query,
                            id;
                        if (MS.Entertainment.Utilities.Telemetry.isCurrentPageSearchPage())
                            MS.Entertainment.Utilities.Telemetry.logSearchExit(mediaItem);
                        if (!uiStateService.servicesEnabled)
                            return MS.Entertainment.UI.Shell.showAppUpdateDialog();
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.freePlayLimits)) {
                            var freePlayLimits = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.freePlayLimits);
                            if (freePlayLimits.isMonthlyFreeLimitExceeded)
                                return freePlayLimits.showMonthlyFreeLimitExceededDialog()
                        }
                        var mediaItem = param.mediaItem;
                        var sessionMgr = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager);
                        var playbackSession = sessionMgr.nowPlayingSession;
                        var adService;
                        if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.adService))
                            adService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.adService);
                        var playActionPromise = function playActionPromise() {
                                var adPromise;
                                if (adService)
                                    adPromise = adService.playVideoAdIfRequired(mediaItem, null, true).then(function playVideoAdIfRequired_complete(adPlayedIfNeeded) {
                                        return adPlayedIfNeeded
                                    }, function playVideoAdIfRequired_failed(error) {
                                        MS.Entertainment.ViewModels.fail("playVideoAdIfRequired_failed: " + error);
                                        return true
                                    });
                                else
                                    adPromise = WinJS.Promise.as(true);
                                return adPromise.then(function onAdPlayed_Complete(adPlayedIfNeeded) {
                                        if (!adPlayedIfNeeded)
                                            return false;
                                        if (MS.Entertainment.Utilities.isMusicApp2) {
                                            var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                            var userHasSubscription = signedInUserService.isSubscription;
                                            var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                            var isFreePlay = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                                            var isLimitedFreePlay = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicLimitedFreePlay);
                                            if (!userHasSubscription && isLimitedFreePlay && !isFreePlay) {
                                                MS.Entertainment.Music2.UpsellDialogOverlay.showTracksLeft(0);
                                                return false
                                            }
                                            else
                                                this._openSmartDjOverlay(mediaItem)
                                        }
                                        if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.person && mediaItem.personType === Microsoft.Entertainment.Queries.PersonType.artist) {
                                            query = new MS.Entertainment.Data.Query.Music.SmartDJ;
                                            query.id = mediaItem.canonicalId;
                                            query.impressionGuid = mediaItem.impressionGuid;
                                            query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.smartDJ, Microsoft.Entertainment.Platform.AcquisitionContextType.artist, MS.Entertainment.Utilities.isValidServiceId(mediaItem.canonicalId) ? mediaItem.canonicalId : String.empty);
                                            var defaultOptions = this._defaultPlaybackOptions(param, mediaItem);
                                            MS.Entertainment.Platform.PlaybackHelpers.playMedia2(query, defaultOptions);
                                            var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                            if (signInService.isSignedIn)
                                                WinJS.Promise.timeout(this._addSmartDJTimeout, this._addSmartDJAfterPlayback(mediaItem)).then(null, this._addSmartDJCallback(mediaItem));
                                            return true
                                        }
                                        else
                                            return this._playTrackOrAlbum(param)
                                    }.bind(this))
                            }.bind(this);
                        return playActionPromise()
                    }, _playTrackOrAlbum: function _playTrackOrAlbum(param) {
                        var trackPromise;
                        var mediaPlayed = false;
                        var mediaItem = param.mediaItem;
                        var defaultOptions = this._defaultPlaybackOptions(param, mediaItem.artist || mediaItem);
                        var trackQuery = null;
                        var canPlayLocallyOrStreamFromCloud = false;
                        if (MS.Entertainment.Platform.PlaybackHelpers.isMusicTrack(mediaItem) || MS.Entertainment.Platform.PlaybackHelpers.isMusicVideo(mediaItem))
                            if (!mediaItem.rights && mediaItem.inCollection) {
                                if (mediaItem.canPlayLocally || mediaItem.hasPurchased || !mediaItem.isFreeStreamRestrictedByIndividualLimit)
                                    canPlayLocallyOrStreamFromCloud = true;
                                else {
                                    var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                    if (signedInUser && signedInUser.isSubscription)
                                        canPlayLocallyOrStreamFromCloud = true
                                }
                                canPlayLocallyOrStreamFromCloud = true;
                                trackPromise = mediaItem
                            }
                            else
                                trackPromise = mediaItem;
                        else if (mediaItem.mediaType === Microsoft.Entertainment.Queries.ObjectType.album && mediaItem.canonicalId) {
                            trackQuery = new MS.Entertainment.Data.Query.Music.AlbumSongs;
                            trackQuery.id = mediaItem.canonicalId;
                            trackQuery.orderBy = MS.Entertainment.Data.Query.edsSortOrder.mostPopular;
                            trackQuery.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.smartDJ, Microsoft.Entertainment.Platform.AcquisitionContextType.artist);
                            trackPromise = trackQuery.execute().then(function getTracks(queryResult) {
                                return queryResult.getItems().then(function getTopTrack(trackList) {
                                        if (trackList !== null && trackList.count)
                                            return trackList.itemsFromIndex(0, 0, 0).then(function unwrapTopTrack(trackList) {
                                                    return trackList.items[trackList.offset].data
                                                })
                                    })
                            }, function handleFailure(error) {
                                MS.Entertainment.ViewModels.fail("Failed to get a list of tracks from the album. Error message: " + error && error.message);
                                return null
                            })
                        }
                        return WinJS.Promise.as(trackPromise).then(function gotTrack(track) {
                                if (track) {
                                    var hasSubscriptionStreamingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(track, MS.Entertainment.ViewModels.SmartBuyStateHandlers.Tuner.Windows, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.Stream]);
                                    var hasFreeStreamingRights = MS.Entertainment.ViewModels.SmartBuyStateHandlers._mediaHasAnyRight(track, MS.Entertainment.ViewModels.SmartBuyStateHandlers.Tuner.Windows, [MS.Entertainment.ViewModels.SmartBuyStateHandlers.MarketplaceRight.FreeStream]);
                                    var signedInUserService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                                    var signedInUserHasSubscription = signedInUserService.isSubscription;
                                    var featureEnablement = new Microsoft.Entertainment.FeatureEnablement.FeatureEnablement;
                                    var freeStreamEnabled = featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                                    if (canPlayLocallyOrStreamFromCloud || (signedInUserHasSubscription && hasSubscriptionStreamingRights) || (freeStreamEnabled && hasFreeStreamingRights)) {
                                        var trackOptions = this._defaultPlaybackOptions(param, track.artist);
                                        trackOptions.queueMedia = false;
                                        var currentSession = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.sessionManager).primarySession;
                                        if (track.isEqual(currentSession.currentMedia) || track.isEqual(currentSession.currentMedia && currentSession.currentMedia.track))
                                            trackOptions.startPositionMsec = currentSession.currentPosition;
                                        MS.Entertainment.Platform.PlaybackHelpers.playMedia2(track, trackOptions);
                                        defaultOptions.queueMedia = true;
                                        defaultOptions.autoPlay = null;
                                        mediaPlayed = true
                                    }
                                }
                                var artist = mediaItem.artist ? mediaItem.artist : mediaItem;
                                mediaItem = MS.Entertainment.ViewModels.MediaItemModel.augment(artist);
                                return mediaItem.hydrate()
                            }.bind(this)).then(function smartDJHydrateCompleted() {
                                var query = new MS.Entertainment.Data.Query.Music.SmartDJ;
                                query.id = mediaItem.canonicalId;
                                query.impressionGuid = mediaItem.impressionGuid;
                                var acquisitionContextID = MS.Entertainment.Utilities.isValidServiceId(mediaItem.canonicalId) ? mediaItem.canonicalId : String.empty;
                                if (trackQuery && trackQuery.acquisitionData)
                                    trackQuery.acquisitionData.acquisitionContextID = acquisitionContextID;
                                query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.smartDJ, Microsoft.Entertainment.Platform.AcquisitionContextType.artist, acquisitionContextID);
                                MS.Entertainment.Platform.PlaybackHelpers.playMedia2(query, defaultOptions);
                                mediaPlayed = true;
                                var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                                if (signInService.isSignedIn)
                                    WinJS.Promise.timeout(this._addSmartDJTimeout, this._addSmartDJAfterPlayback(mediaItem)).then(null, this._addSmartDJCallback(mediaItem));
                                return mediaPlayed
                            }.bind(this), function smartDJHydrateFailed(error) {
                                MS.Entertainment.ViewModels.fail("SmartDJ artist hydrate failed. Error message: " + error && error.message);
                                return mediaPlayed
                            })
                    }, canExecutePlay: function canExecutePlay(param) {
                        return true
                    }
            }), DeleteSmartDJAction: MS.Entertainment.deferredDerive(MS.Entertainment.UI.Actions.Action, function deleteSmartDJAction() {
                this.base()
            }, {
                automationId: MS.Entertainment.UI.AutomationIds.smartButtonDeleteSmartDj, executed: function executed(param) {
                        var selectionIndices;
                        var selectionSourceIndices;
                        var itemPromise;
                        if (MS.Entertainment.Data.List.isList(param.mediaItems)) {
                            selectionIndices = param.mediaItems.originalSelectionIndices;
                            selectionSourceIndices = param.mediaItems.originalSelectionSourceIndices;
                            itemPromise = param.mediaItems.itemsFromIndex(0, 0, 0).then(function gotFirstItem(args) {
                                var item = args.items[args.offset];
                                return item.data
                            })
                        }
                        else if (param.mediaItems && param.mediaItems.index >= 0) {
                            selectionSourceIndices = [param.mediaItems.index];
                            itemPromise = WinJS.Promise.wrap(param.mediaItems)
                        }
                        else
                            return WinJS.Promise.wrapError("We only support deleting SmartDJ items via a selection list or a SmartDJ item");
                        return itemPromise.then(function gotFirstItem(mediaItem) {
                                return mediaItem && mediaItem.listVersion
                            }, function failedToGetFirstItem(error) {
                                MS.Entertainment.ViewModels.fail("Failed to get first item from SmartDJ selection. error: " + (error && error.message));
                                return 0
                            }).then(function gotListVersion(listVersion) {
                                MS.Entertainment.ViewModels.assert(listVersion >= 0, "Invalid list version in delete action.");
                                var smartDJDeleteQuery = new MS.Entertainment.Data.Query.Music.SmartDJDelete(selectionSourceIndices, listVersion || 0);
                                return smartDJDeleteQuery.execute()
                            }).then(function refreshQueryOnDelete() {
                                var smartDJList = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.smartDJList);
                                smartDJList.remove(selectionIndices);
                                smartDJList.refresh()
                            }, function refreshQueryOnDelete() {
                                MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.smartDJList).refresh()
                            })
                    }, canExecute: function canExecute() {
                        return true
                    }
            })
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist, function() {
        return new MS.Entertainment.ViewModels.PlayArtistAction
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.playSmartDJ, function() {
        return new MS.Entertainment.ViewModels.PlaySmartDJAction
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.playQuery, function() {
        return new MS.Entertainment.ViewModels.PlayQueryAction
    });
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.deleteSmartDJ, function() {
        return new MS.Entertainment.ViewModels.DeleteSmartDJAction
    });
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {SmartDJList: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentationWrapperQuery", function smartDJListConstructor(addNewSmartDJAction) {
            this._addNewSmartDJAction = addNewSmartDJAction;
            var query = this._createQuery();
            MS.Entertainment.Data.AugmentationWrapperQuery.prototype.constructor.call(this, query);
            if (this.autoUpdateProperties)
                this.autoUpdateProperties.enabled = false;
            this.enabled = true;
            this._listVersion = {version: null};
            var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
            this._signInHandler = WinJS.Binding.bind(signInService, {isSignedIn: function(value, oldValue) {
                    if (this._signInHandler)
                        this.refresh()
                }.bind(this)})
        }, {
            _queryActivePromise: null, _queryCompletedPromise: null, _updateResults: true, _listVersion: null, _lockedResult: null, _lockResult: false, _listOwnerXuid: null, _addNewSmartDJAction: false, dispose: function dispose() {
                    MS.Entertainment.Data.AugmentationWrapperQuery.prototype.dispose.call(this);
                    if (this._signInHandler) {
                        this._signInHandler.cancel();
                        this._signInHandler = null
                    }
                }, lockResult: {
                    get: function get_lockResult() {
                        return this._lockResult
                    }, set: function set_lockResult(value) {
                            if (value !== this._lockResult) {
                                this._lockResult = value;
                                if (value)
                                    this._lockedResult = this.innerResult;
                                else
                                    this._lockedResult = null
                            }
                        }
                }, add: function add(mediaItem, featuredArtists) {
                    if (mediaItem && this.result && this.result.items) {
                        var smartDJ = MS.Entertainment.Data.Query.Music.SmartDJAdd.convertArtistToSmartDJ(mediaItem, featuredArtists);
                        var matchingIndex = -1;
                        this.result.items.forEachAll(function findMatchingArtist(args) {
                            if (args.item.data && args.item.data.artist && args.item.data.artist.isEqual(mediaItem)) {
                                matchingIndex = args.item.itemIndex;
                                args.stop = true
                            }
                        }).done(function intsertNewOrMoveOld() {
                            var insertIndex = -1;
                            if (this.result && this.result.items)
                                insertIndex = this.result.items.indexFromSourceIndex(0);
                            if (insertIndex >= 0)
                                if (matchingIndex >= 0)
                                    this.result.items.moveAt(matchingIndex, insertIndex);
                                else
                                    this.result.items.insertAt(insertIndex, smartDJ, {isSourceData: true})
                        }.bind(this), function handleError(error) {
                            MS.Entertainment.ViewModels.fail("forEachAll failed. Failed to find a matching artist. error: " + (error & error.message))
                        })
                    }
                }, remove: function remove(indices) {
                    if (indices && indices.length && this.result && this.result.items)
                        this.result.items.removeIndices(indices).done(null, function ignoreError(error) {
                            MS.Entertainment.ViewModels.fail("Failed to remove items in smart dj list. error: " + (error && error.message))
                        })
                }, result: {
                    get: function() {
                        return this._lockedResult ? this._lockedResult : this.innerResult
                    }, set: function(value) {
                            this.innerResult = value
                        }
                }, innerResult: {
                    get: function() {
                        return this.query ? this.query.result : null
                    }, set: function(value) {
                            if (this.query && this.query.result)
                                this.query.result = value
                        }
                }, _createQuery: function _createQuery() {
                    var query = new MS.Entertainment.Data.Query.Music.SmartDJList;
                    if (query.autoUpdateProperties)
                        query.autoUpdateProperties.enabled = false;
                    query.enabled = true;
                    return query
                }, _getXuid: function _getXuid() {
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    return configurationManager.service.lastSignedInUserXuid
                }, execute: function execute(cookie, avoidRefresh) {
                    var queryPromise;
                    var newListOwner = this._getXuid();
                    if (newListOwner !== this._listOwnerXuid) {
                        this._queryCompletedPromise = null;
                        this._queryActivePromise = null
                    }
                    if (this._queryActivePromise)
                        queryPromise = this._queryActivePromise;
                    else if (this._queryCompletedPromise && avoidRefresh)
                        queryPromise = this._queryCompletedPromise;
                    else {
                        this._listOwnerXuid = newListOwner;
                        if (this.lockResult || !this.query)
                            this.query = this._createQuery();
                        if (this.query)
                            this.query.xuid = this._listOwnerXuid;
                        queryPromise = MS.Entertainment.Data.AugmentationWrapperQuery.prototype.execute.call(this, cookie).then(function changeResult() {
                            return this
                        }.bind(this));
                        this._queryActivePromise = queryPromise;
                        this._queryCompletedPromise = null;
                        queryPromise.done(function setCompletedPromiseOnSuccess() {
                            if (this._queryActivePromise === queryPromise) {
                                this._queryCompletedPromise = this._queryActivePromise;
                                this._queryActivePromise = null
                            }
                        }.bind(this), function clearCompletedPromiseOnError(error) {
                            if (this._queryActivePromise === queryPromise) {
                                this._queryCompletedPromise = null;
                                this._queryActivePromise = null;
                                MS.Entertainment.ViewModels.assert(!this._listOwnerXuid || WinJS.Promise.isCanceledError(error), "Executing SmartDJList query has failed. error: " + (error && error.description), null, MS.Entertainment.UI.Debug.errorLevel.low)
                            }
                        }.bind(this))
                    }
                    return queryPromise
                }, _queryResultChanged: function _queryResultChanged(args) {
                    if (args.detail && !args.detail.error) {
                        this._updateResultItemFactory();
                        this._addNewSmartDJActionIfNeeded();
                        if (this._query) {
                            var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                            configurationManager.mdlc.radioCollectionSize = this._query.totalCount
                        }
                    }
                    if (!this.lockResult)
                        MS.Entertainment.Data.AugmentationWrapperQuery.prototype._queryResultChanged.apply(this, arguments)
                }, _addNewSmartDJActionIfNeeded: function _addNewSmartDJActionIfNeeded() {
                    if (this._addNewSmartDJAction && this.innerResult && this.innerResult.items)
                        this.innerResult.items.itemsFromIndex(0, 0, 0).done(function gotFirstItem(args) {
                            var item = args.items[args.offset];
                            if (!item || !item.isAction)
                                this._addNewSmartDJActionWorker();
                            else
                                MS.Entertainment.ViewModels.fail("Action cell already exists. We shouldn't even be asking to add another action cell to the list.")
                        }.bind(this), function ignoreError(error) {
                            MS.Entertainment.ViewModels.fail("Failed to get first list item when checking for action cell. Error: " + (error && error.message))
                        })
                }, _addNewSmartDJActionWorker: function _addNewSmartDJActionWorker() {
                    var actionIndentifier;
                    var actionOptions;
                    var actionCell;
                    if (MS.Entertainment.Utilities.isMusicApp1) {
                        actionIndentifier = MS.Entertainment.UI.Actions.ActionIdentifiers.selectArtist;
                        actionOptions = {isSmartDJ: true};
                        var actionCell = new MS.Entertainment.ViewModels.ActionCell(actionIndentifier, actionOptions);
                        actionCell.icon = MS.Entertainment.UI.Icon.smartDj;
                        actionCell.stringId = String.id.IDS_MUSIC_ENGAGE_NEW_SMARTDJ_ACTION;
                        actionCell.hideDefaultRing = true;
                        if (this.innerResult && this.innerResult.items)
                            this.innerResult.items.insertAt(0, new MS.Entertainment.Data.Factory.ListActionItemWrapper(actionCell))
                    }
                    return this
                }, _createItemFactory: function _createItemFactory(originalFactory, listVersion) {
                    var itemFactory = function itemFactory(source) {
                            var item = originalFactory(source);
                            if (item && item.data)
                                Object.defineProperty(item.data, "listVersion", {
                                    get: function() {
                                        var version = listVersion && listVersion.version;
                                        return version || 0
                                    }, configurable: true
                                });
                            return item
                        };
                    itemFactory.listItemFactory = true;
                    return itemFactory
                }, _updateResultItemFactory: function _updateResultItemFactory() {
                    if (this.innerResult) {
                        this._listVersion.version = this.innerResult.listVersion;
                        if (this.innerResult.items)
                            this.innerResult.items.setItemFactory(this._createItemFactory(this.innerResult.items.itemFactory, this._listVersion))
                    }
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {SmartDJListQueryType: MS.Entertainment.UI.Framework.derive("MS.Entertainment.Data.AugmentationWrapperQuery", function smartDJListQueryType() {
            var smartDJListService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.smartDJList);
            MS.Entertainment.Data.AugmentationWrapperQuery.prototype.constructor.call(this, smartDJListService)
        }, {
            autoDisposeQuery: false, chunkSize: {
                    get: function get_chunkSize() {
                        return 25
                    }, set: function set_chunkSize() {
                            MS.Entertainment.ViewModels.fail("Shouldn't be changing chunkSize for the SmartDJ query")
                        }
                }, aggregateChunks: {
                    get: function get_aggregateChunks() {
                        return true
                    }, set: function set_aggregateChunks() {
                            MS.Entertainment.ViewModels.fail("Shouldn't be changing aggregateChunks for the SmartDJ query")
                        }
                }, execute: function execute(cookie) {
                    var result;
                    if (this.query)
                        result = this.query.execute(cookie, !cookie).then(function changeResult() {
                            return this
                        }.bind(this));
                    else
                        result = WinJS.Promise.wrapError(new Error("Invalid state for executing. The query property was not set to a valid value."));
                    return result
                }
        })});
    MS.Entertainment.ServiceLocator.register(MS.Entertainment.Services.smartDJList, function getSmartDJListService() {
        var addNewSmartDJAction = !window.onNewMusicPage;
        return new MS.Entertainment.ViewModels.SmartDJList(addNewSmartDJAction)
    })
})()
})();
/* >>>>>>/viewmodels/music/musiccollectionviewmodel.js:14406 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    var transferService = MS.Entertainment.UI.FileTransferService;
    var notifiers = MS.Entertainment.UI.FileTransferNotifiers;
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {MusicCollectionAutomationIds: {
            collectionAlbumsDateAdded: "collectionAlbumsDateAdded_modifier", collectionAlbumsAlpha: "collectionAlbumsAlpha_modifier", collectionAlbumsReleaseYear: "collectionAlbumsReleaseYear_modifier", collectionAlbumsGenre: "collectionAlbumsGenre_modifier", collectionAlbumsArtists: "collectionAlbumsArtists_modifier", collectionArtistsAlpha: "collectionArtistsAlpha_modifier", collectionSongsDateAdded: "collectionSongsDateAdded_modifier", collectionSongsAlpha: "collectionSongsAlpha_modifier", collectionSongsGenre: "collectionSongsGenre_modifier", collectionSongsArtist: "collectionSongsArtist_modifier", collectionSongsAlbum: "collectionSongsAlbum_modifier", collectionPlaylistDateEdited: "collectionPlaylistDateEdited_modifier", collectionPlaylistDateAdded: "collectionPlaylistDateAdded_modifier", collectionPlaylistAlpha: "collectionPlaylistAlpha_modifier", collectionSmartDJDatePlayed: "collectionSmartDJDatePlayed_modifier", collectionNewlyAdded: "collectionNewlyAdded_modifier", collectionMusicVideos: "collectionMusicVideos_modifier", collectionCreatePlaylistAction: "collectionCreatePlaylistAction", shuffleAllMusicAction: "shuffleAllMusicAction", playAllMusicAction: "playAllMusicAction", playAnyArtistAction: "playAnyArtistAction", newSmartDjAction: "newSmartDjAction", searchPlayArtist: "searchPlayArtist", searchSmartDjArtist: "searchSmartDjArtist", searchCollection: "searchCollection", collectionFilterAll: "collectionFilterAll", collectionFilterAvailableOffline: "collectionFilterAvailableOffline", collectionFilterNotAvailableOffline: "collectionFilterNotAvailableOffline", collectionFilterInCloud: "collectionFilterInCloud", collectionFilterLocalOnly: "collectionFilterLocalOnly", collectionFilterPurchased: "collectionFilterPurchased", collectionFilterRoamsViaCloudDrive: "collectionFilterRoamsViaCloudDrive", collectionFilterRoamsViaCloud: "collectionFilterRoamsViaCloud", collectionFilterStreaming: "collectionFilterStreaming", collectionFilterNotInCloud: "collectionFilterNotInCloud", collectionFilterSeparatorAll: "collectionFilterSeparatorAll", collectionFilterSeparatorCloud: "collectionFilterSeparatorCloud"
        }});
    MusicCollectionTemplateSelector:MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Controls.GalleryTemplateSelector", function galleryTemplateSelector() {
        MS.Entertainment.UI.Controls.GalleryTemplateSelector.prototype.constructor.call(this)
    }, {onSelectTemplate: function onSelectTemplate(item) {
            var data = (item && item.data) ? item.data : {};
            if (item.isAction)
                return this.getTemplateProvider(MS.Entertainment.UI.Controls.TemplateSelectorBase.templateType.action);
            else
                return MS.Entertainment.UI.Controls.GalleryTemplateSelector.prototype.onSelectTemplate.apply(this, arguments)
        }});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {MusicCollectionBase: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.Music", function musicCollectionBaseConstructor(view) {
            MS.Entertainment.ViewModels.Music.prototype.constructor.apply(this, arguments);
            this._iconActions = [];
            this.modifierDescriptionFormatter = new MS.Entertainment.Formatters.MediaSortFormatter;
            this.addActionCellsToList = !MS.Entertainment.Utilities.isMusicApp2;
            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.listNotification))
                this._listNotificationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.listNotification)
        }, {
            _viewModelId: "musicCollection", _recreateQueries: true, _collectionQueryBindings: null, _subscriptionBindings: null, _iconActions: null, _listNotificationService: null, _notificationEventHandlers: null, totalCount: 0, modifierDescriptionFormatter: null, enableDelayInitialize: true, totalCountString: MS.Entertainment.UI.Framework.observableProperty("totalCountString", null), notificationCells: MS.Entertainment.UI.Framework.observableProperty("notificationCells", null), dispose: function dispose() {
                    MS.Entertainment.ViewModels.Music.prototype.dispose.call(this);
                    if (this._iconActions)
                        this._iconActions.forEach(function iconActionIterator(currentAction) {
                            if (currentAction && currentAction.dispose)
                                currentAction.dispose()
                        });
                    this._iconActions = null;
                    if (this._subscriptionBindings) {
                        this._subscriptionBindings.cancel();
                        this._subscriptionBindings = null
                    }
                    this._clearNotifications()
                }, _onNotificationsChanged: function _onNotificationsChanged() {
                    this.dispatchEvent(MS.Entertainment.ViewModels.MusicCollectionBase.Events.notificationsChanged, this._listNotificationService.notifications)
                }, _showFilters: function _showFilters(view) {
                    var showFilters = false;
                    var cloudCollectionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
                    if (!MS.Entertainment.Utilities.isMusicApp2 && cloudCollectionService.isV2Enabled && view !== MS.Entertainment.ViewModels.MusicCollection.ViewTypes.playlists2 && view !== MS.Entertainment.ViewModels.MusicCollection.ViewTypes.smartDJs)
                        showFilters = true;
                    return showFilters
                }, clearFilter: function clearFilter() {
                    if (this.filterSelectionManager)
                        this.filterSelectionManager.selectedIndex = 0
                }, _supportsNotifications: function _supportsNotifications() {
                    return false
                }, _filterNotifications: function _filterNotifications(notification) {
                    return this._filterNotificationCategories(notification && notification.category)
                }, _filterNotificationCategories: function _filterNotificationCategories(category) {
                    return true
                }, createNotificationActionCell: function createNotificationActionCell(notification) {
                    var notificationCell = new MS.Entertainment.ViewModels.NotificationActionCell(notification.category, notification.actionArray, notification.actionParamsArray, notification.dismissAction);
                    notificationCell.icon = notification.icon;
                    notificationCell.text = notification.title;
                    notificationCell.subText = notification.subTitle;
                    notificationCell.groupHeader = String.id.IDS_FILTER_ALL;
                    return notificationCell
                }, createNotificationActionCells: function createNotificationActionCells() {
                    var notificationCells = [];
                    if (this._supportsNotifications()) {
                        var notifications = this._listNotificationService && this._listNotificationService.notifications;
                        if (notifications)
                            notifications.forEach(function(notification) {
                                if (this._filterNotifications(notification))
                                    notificationCells.push(this.createNotificationActionCell(notification))
                            }.bind(this))
                    }
                    return notificationCells
                }, createActionCells: function createActionCells() {
                    var showIfEmptyModifiers = null;
                    if (this.selectedTemplate && this.selectedTemplate.strings && this.selectedTemplate.strings.showIfEmptyModifiers)
                        showIfEmptyModifiers = this.selectedTemplate.strings.showIfEmptyModifiers;
                    var actionCells = [];
                    if (MS.Entertainment.Utilities.isMusicApp1) {
                        this._initializeNotifications();
                        actionCells = actionCells.concat(this.notificationCells)
                    }
                    var actionCell = new MS.Entertainment.ViewModels.ActionCell(MS.Entertainment.UI.Actions.ActionIdentifiers.playQuery, {
                            automationId: MS.Entertainment.ViewModels.MusicCollectionAutomationIds.playAllMusicAction, icon: MS.Entertainment.UI.Icon.play, voiceGuiTextStringId: String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_PRON, voiceConfidence: String.id.IDS_MUSIC_PLAY_ALL_BUTTON_VUI_CONF
                        });
                    actionCell.icon = MS.Entertainment.UI.Icon.play;
                    actionCell.stringId = String.id.IDS_PLAY_ALL_LABEL;
                    actionCell.groupHeader = String.id.IDS_FILTER_ALL;
                    this._iconActions.push(actionCell.action);
                    actionCells.push(actionCell);
                    return actionCells
                }, _initializeNotifications: function _initializeNotifications() {
                    if (this._supportsNotifications() && this.isDelayInitialized) {
                        if (!this.notificationCells)
                            this.notificationCells = this.createNotificationActionCells();
                        if (!this._notificationEventHandlers)
                            this._notificationEventHandlers = MS.Entertainment.Utilities.addEventHandlers(this._listNotificationService, {
                                sendNotificationReceived: this._handleNotificationServiceInsert.bind(this), clearNotificationReceived: this._handleNotificationServiceRemove.bind(this)
                            })
                    }
                }, _reinitializeNotifications: function _reinitializeNotifications() {
                    this._clearNotifications();
                    this._initializeNotifications()
                }, _clearNotifications: function _clearNotifications() {
                    this.notificationCells = null;
                    if (this._notificationEventHandlers) {
                        this._notificationEventHandlers.cancel();
                        this._notificationEventHandlers = null
                    }
                }, _insertNotificationCell: function _insertNotificationCell(notificationCell, insertIndex) {
                    if (notificationCell && this._filterNotificationCategories(notificationCell.category) && this.notificationCells && insertIndex >= 0) {
                        if (insertIndex > this.notificationCells.length)
                            insertIndex = this.notificationCells.length;
                        this.notificationCells.splice(insertIndex, 0, notificationCell)
                    }
                }, _removeNotificationCell: function _removeNotificationCell(notificationCell) {
                    var removeIndex = -1;
                    if (this.notificationCells) {
                        removeIndex = this.notificationCells.indexOf(notificationCell);
                        this.notificationCells.splice(removeIndex, 1)
                    }
                    return removeIndex
                }, _handleNotificationServiceInsert: function _handleNotificationServiceInsert(eventData) {
                    this._onNotificationsChanged();
                    if (!this.notificationCells)
                        return null;
                    var notification = eventData.detail;
                    var notificationCell = this._getNotificationActionCell(notification.category);
                    if (notificationCell)
                        notificationCell.setNotification(notification);
                    else {
                        notificationCell = this.createNotificationActionCell(notification);
                        var insertIndex = this._listNotificationService.notifications.indexOf(notification);
                        this._insertNotificationCell(notificationCell, insertIndex)
                    }
                }, _handleNotificationServiceRemove: function _handleNotificationServiceRemove(eventData) {
                    this._onNotificationsChanged();
                    if (!this.notificationCells)
                        return null;
                    var category = eventData.detail;
                    var notificationCell = this._getNotificationActionCell(category);
                    if (notificationCell)
                        this._removeNotificationCell(notificationCell)
                }, cloneCurrentQuery: function cloneCurrentQuery() {
                    if (!this._lastUsedQuery)
                        return null;
                    var clonedQuery = this._lastUsedQuery.clone();
                    if (clonedQuery)
                        clonedQuery.allowGroupHints = false;
                    return clonedQuery
                }, _clearQueryBindings: function _clearQueryBindings() {
                    if (this._collectionQueryBindings) {
                        this._collectionQueryBindings.cancel();
                        this._collectionQueryBindings = null
                    }
                }, _getNotificationActionCell: function _getNotificationActionCell(category) {
                    if (!this.notificationCells)
                        return null;
                    var matches = this.notificationCells.filter(function(item) {
                            return item && item.category && item.category.name === category.name
                        });
                    return matches && matches.length > 0 ? matches[0] : null
                }, _onBeginQuery: function _onBeginQuery(query) {
                    if (MS.Entertainment.Utilities.isMusicApp2 && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.cloudCollection)) {
                        var cloudCollectionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.cloudCollection);
                        cloudCollectionService.requestSync()
                    }
                    this._clearQueryBindings();
                    var template = this.selectedTemplate;
                    this.modifierDescriptionFormatter.totalCount = -1;
                    this.modifierDescriptionFormatter.initialize(template && template.strings ? template.strings.countFormatStringId : null, null, null, null);
                    if (this._iconActions)
                        this._updateAllIconQueryFactories(null)
                }, _onTotalCountChanged: function _onTotalCountChanged(newValue, oldValue) {
                    this.modifierDescriptionFormatter.totalCount = newValue;
                    this.totalCount = newValue;
                    var countFormatter = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dateTimeFormatters).decimalNumber;
                    this.totalCountString = countFormatter.format(this.totalCount);
                    if (this.totalCount > 0 && this._iconActions)
                        this._updateAllIconQueryFactories(this.createTrackQuery.bind(this))
                }, _updateAllIconQueryFactories: function _updateIconQueryFactories(newQueryFactory) {
                    if (this._iconActions)
                        this._iconActions.forEach(function iconActionIterator(currentAction) {
                            if (typeof currentAction === "object") {
                                currentAction.queryFactory = newQueryFactory;
                                if (currentAction.requeryCanExecute)
                                    currentAction.requeryCanExecute()
                            }
                        })
                }, _onQueryCompleted: function _onQueryCompleted(query) {
                    MS.Entertainment.ViewModels.Music.prototype._onQueryCompleted.apply(this, arguments);
                    this._clearQueryBindings();
                    this._collectionQueryBindings = WinJS.Binding.bind(query, {totalCount: this._onTotalCountChanged.bind(this)})
                }
        }, {Events: {notificationsChanged: "notificationsChanged"}})});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {MusicCollection: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.MusicCollectionBase", function musicCollectionConstructor(view) {
            MS.Entertainment.ViewModels.MusicCollectionBase.prototype.constructor.apply(this, arguments);
            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.userUsageData))
                this._userUsageData = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.userUsageData);
            if (MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.uiState))
                this._uiStateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
            if (this._userUsageData && this._userUsageData.isSyncing && (this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.newlyAdded || this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.albums2 || this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.playlists2 || this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.artists2 || this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.musicVideos))
                this._initializeSyncingListeners()
        }, {
            _syncingBindings: null, _idleApplicationService: null, _uiStateService: null, _userUsageData: null, _interactionNotifier: null, IDLE_WAIT_TIME_MS: 7000, dispose: function dispose() {
                    MS.Entertainment.ViewModels.MusicCollectionBase.prototype.dispose.call(this);
                    this._disposeSyncingBindings()
                }, _disposeSyncingBindings: function _disposeSyncingBindings() {
                    if (this._interactionNotifier) {
                        this._interactionNotifier.removeInteractionListener(this._pauseQuery);
                        this._interactionNotifier = null
                    }
                    if (this._syncingBindings) {
                        this._syncingBindings.forEach(function(syncingBinding) {
                            syncingBinding.cancel()
                        });
                        this._syncingBindings = null
                    }
                    if (this._idleApplicationService) {
                        this._idleApplicationService.dispose();
                        this._idleApplicationService = null
                    }
                }, _initializeSyncingListeners: function _initializeSyncingListeners() {
                    if (!this._syncingBindings) {
                        this._syncingBindings = [];
                        this._syncingBindings.push(MS.Entertainment.UI.Framework.addEventHandlers(this._uiStateService, {
                            activeListeningChanged: this._uiInteractionChanged.bind(this), nuiEngagedChanged: this._uiInteractionChanged.bind(this)
                        }));
                        this._pauseQuery = this._pauseQuery.bind(this);
                        this._interactionNotifier = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.interactionNotifier);
                        this._interactionNotifier.addInteractionListener(this._pauseQuery);
                        this._idleApplicationService = new MS.Entertainment.Framework.IdleApplicationService;
                        this._idleApplicationService.initialize();
                        this._idleApplicationService.setIdleTime(this.IDLE_WAIT_TIME_MS);
                        this._syncingBindings.push(MS.Entertainment.UI.Framework.addEventHandlers(this._idleApplicationService, {applicationIdleEvent: function idleEvent() {
                                if (!(this._userUsageData && this._userUsageData.isSyncing)) {
                                    this._disposeSyncingBindings();
                                    if (this.pausableQuery)
                                        this.pausableQuery.unpause();
                                    this.refresh()
                                }
                                else if (!this._uiStateService || (!this._uiStateService.activeListening && !this._uiStateService.nuiEngaged))
                                    this._unpauseQuery()
                            }.bind(this)}));
                        this._syncingBindings.push(MS.Entertainment.UI.Framework.addEventHandlers(MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.mediaDeleted), {mediaDeleted: this._unpauseQuery.bind(this)}))
                    }
                }, _unpauseQuery: function _unpauseQuery() {
                    if (this.selectedTemplate && !this.selectedTemplate.userGatedGallery && this.pausableQuery)
                        this.pausableQuery.unpause()
                }, _uiInteractionChanged: function _uiInteractionChanged() {
                    if (this._uiStateService.activeListening || this._uiStateService.nuiEngaged)
                        this._pauseQuery()
                }, _pauseQuery: function _unpauseQuery() {
                    if (this.selectedTemplate && !this.selectedTemplate.userGatedGallery && this.pausableQuery && !this.pausableQuery.isPaused && this.pausableQuery.totalCount >= 1)
                        this.pausableQuery.pause()
                }, delayInitialize: function delayInitialize() {
                    MS.Entertainment.ViewModels.MusicCollectionBase.prototype.delayInitialize.call(this);
                    if (this._userUsageData && this._userUsageData.isSyncing && this.pausableQuery && !this.pausableQuery.isPaused && (this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.newlyAdded || this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.albums2 || this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.playlists2 || this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.artists2 || this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.musicVideos))
                        this.pausableQuery.pause();
                    this._initializeNotifications()
                }, getViewDefinition: function(view) {
                    return MS.Entertainment.ViewModels.MusicCollection.Views[view]
                }, getModifierDefinition: function(view) {
                    return MS.Entertainment.ViewModels.MusicCollection.Modifiers[view]
                }, getFilterDefinition: function(view) {
                    var definition = null;
                    if (this._showFilters(view))
                        definition = MS.Entertainment.ViewModels.MusicCollection.Filters;
                    return definition
                }, getFilterOptions: function(view) {
                    var options = null;
                    if (this._showFilters(view)) {
                        options = {
                            settingsKey: "CollectionFilters", isRoamingSetting: true
                        };
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        if (!signedInUser.isSubscription)
                            options.defaultSelectionIndex = 2
                    }
                    return options
                }, getModelOptions: function getModelOptions(view, pivot, modifier, secondaryModifier, filter) {
                    var options = MS.Entertainment.ViewModels.QueryViewModel.prototype.getModelOptions.apply(this, arguments);
                    options.forceEmpty = modifier.id === MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionMusicVideos && filter.id === MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionFilterRoamsViaCloudDrive;
                    return options
                }, createActionCells: function createActionCells() {
                    var actionCells = MS.Entertainment.ViewModels.MusicCollectionBase.prototype.createActionCells.apply(this, arguments);
                    if (MS.Entertainment.Utilities.isMusicApp2) {
                        var actionCell = new MS.Entertainment.ViewModels.ActionCell(MS.Entertainment.UI.Actions.ActionIdentifiers.search, {
                                automationId: MS.Entertainment.ViewModels.MusicCollectionAutomationIds.searchCollection, icon: MS.Entertainment.UI.Icon.search, voiceGuiTextStringId: String.id.IDS_MUSIC2_SEARCH_COLLECTION_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_MUSIC2_SEARCH_COLLECTION_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_MUSIC2_SEARCH_COLLECTION_BUTTON_VUI_PRON, voiceConfidence: String.id.IDS_MUSIC2_SEARCH_COLLECTION_BUTTON_VUI_CONF
                            });
                        actionCell.stringId = String.id.IDS_MUSIC2_SEARCH_COLLECTION_BUTTON_VUI_GUI;
                        actionCell.groupHeader = String.id.IDS_FILTER_ALL;
                        this._iconActions.push(actionCell.action);
                        actionCells.push(actionCell)
                    }
                    return actionCells
                }, _insertNotificationCell: function _insertNotificationCell(notificationCell, insertIndex) {
                    if (this.items && insertIndex >= 0 && insertIndex < this.items.count)
                        this.items.insertAt(insertIndex, new MS.Entertainment.Data.Factory.ListActionItemWrapper(notificationCell));
                    MS.Entertainment.ViewModels.MusicCollectionBase.prototype._insertNotificationCell.apply(this, arguments)
                }, _removeNotificationCell: function _removeNotificationCell(removeIndex) {
                    var removeIndex = MS.Entertainment.ViewModels.MusicCollectionBase.prototype._removeNotificationCell.apply(this, arguments);
                    if (this.items)
                        this.items.removeAt(removeIndex);
                    else
                        MS.Entertainment.ViewModels.fail("Failed to remove notification from notifications list");
                    return removeIndex
                }, _handleNotificationServiceInsert: function _handleNotificationServiceInsert(eventData) {
                    if (!this.items || this.items.count === 0)
                        return null;
                    return MS.Entertainment.ViewModels.MusicCollectionBase.prototype._handleNotificationServiceInsert.apply(this, arguments)
                }, _handleNotificationServiceRemove: function _handleNotificationServiceRemove(eventData) {
                    if (!this.items || this.items.count === 0)
                        return null;
                    return MS.Entertainment.ViewModels.MusicCollectionBase.prototype._handleNotificationServiceRemove.apply(this, arguments)
                }, _supportsNotifications: function _supportsNotifications() {
                    var configurationManager = new Microsoft.Entertainment.Configuration.ConfigurationManager;
                    return MS.Entertainment.Utilities.isMusicApp1 && (this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.artists || this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.songs || this._view === MS.Entertainment.ViewModels.MusicCollection.ViewTypes.albums) && !configurationManager.shell.retailExperience
                }, _onQueryCompleted: function _onQueryCompleted(query) {
                    MS.Entertainment.ViewModels.MusicCollectionBase.prototype._onQueryCompleted.apply(this, arguments);
                    this.delayInitialize()
                }
        }, {
            ViewTypes: {
                musicVideos: "musicVideos", smartDJs: "smartDJs", albums2: "albums2", artists2: "artists2", newlyAdded: "newlyAdded", playlists2: "playlists2"
            }, Filters: {options: [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionFilterAll, String.id.IDS_MUSIC2_CLOUDV2_MODIFIER_ALL_MUSIC_VUI_GUI, new MS.Entertainment.ViewModels.NodeValues(null, {mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.available}, null, null, null, null, {
                            acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll), mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.available
                        })), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionFilterRoamsViaCloud, String.id.IDS_MUSIC2_CLOUDV2_MODIFIER_FROM_XBOX_MUSIC_MODIFIER_VUI_GUI, new MS.Entertainment.ViewModels.NodeValues(null, {mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.musicPass}, null, null, null, null, {
                            acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll), mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.musicPass
                        })), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionFilterRoamsViaCloudDrive, String.id.IDS_MUSIC2_CLOUDV2_MODIFIER_IN_CLOUDV2_VUI_GUI, new MS.Entertainment.ViewModels.NodeValues(null, {mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.oneDrive}, null, null, null, null, {
                            acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll), mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.oneDrive
                        }))]}, Modifiers: {
                    albums2: {itemFactory: function() {
                            return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionAlbumsArtists, String.id.IDS_MUSIC_COLLECTION_ARTIST_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.AlbumsSortBy.artistAscendingReleaseYearDescending}, {selectedTemplate: MS.Entertainment.ViewModels.MusicCollectionTemplates.albumsArtists}, null, null, MS.Entertainment.Data.Query.libraryTracks, {
                                        isLive: true, sort: Microsoft.Entertainment.Queries.TracksSortBy.albumArtistAscendingReleaseYearDescending
                                    })), ]
                        }}, artists2: {itemFactory: function() {
                                return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionArtistsAlpha, String.id.IDS_MUSIC_COLLECTION_ALPHA_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.PeopleSortBy.nameAscending}, {selectedTemplate: MS.Entertainment.ViewModels.MusicCollectionTemplates.artists}, null, null, MS.Entertainment.Data.Query.libraryTracks, {
                                            isLive: true, sort: Microsoft.Entertainment.Queries.TracksSortBy.albumArtistAscendingAlbumReleaseYearAscendingNumberAscending
                                        }))]
                            }}, playlists2: {itemFactory: function() {
                                return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionPlaylistDateEdited, String.id.IDS_MUSIC2_COLLECTION_DATEEDITED_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {
                                            isLive: true, sort: Microsoft.Entertainment.Queries.PlaylistsSortBy.dateEditedDescending
                                        }, {selectedTemplate: MS.Entertainment.ViewModels.MusicCollectionTemplates.playlistEdited}), String.id.IDS_MUSIC2_COLLECTION_DATEEDITED_SORT_TC), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionPlaylistDateAdded, String.id.IDS_MUSIC2_COLLECTION_DATEADDED_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {
                                            isLive: true, sort: Microsoft.Entertainment.Queries.PlaylistsSortBy.dateAddedDescending
                                        }, {selectedTemplate: MS.Entertainment.ViewModels.MusicCollectionTemplates.playlistAdded}), String.id.IDS_MUSIC2_COLLECTION_DATEADDED_SORT_TC), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionPlaylistAlpha, String.id.IDS_MUSIC2_COLLECTION_ALPHA_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {
                                            isLive: true, sort: Microsoft.Entertainment.Queries.PlaylistsSortBy.nameAscending
                                        }, {selectedTemplate: MS.Entertainment.ViewModels.MusicCollectionTemplates.playlistAlpha}), String.id.IDS_MUSIC2_COLLECTION_ALPHA_SORT_TC), ]
                            }}, smartDJs: {itemFactory: function() {
                                return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionSmartDJDatePlayed, String.id.IDS_MUSIC_COLLECTION_DATEPLAYED_SORT, new MS.Entertainment.ViewModels.NodeValues(null, null, {selectedTemplate: MS.Entertainment.ViewModels.MusicCollectionTemplates.smartDJ}))]
                            }}, musicVideos: {itemFactory: function() {
                                return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionMusicVideos, String.id.IDS_MUSIC_COLLECTION_ARTIST_SORT, new MS.Entertainment.ViewModels.NodeValues(null, null, {selectedTemplate: MS.Entertainment.ViewModels.MusicCollectionTemplates.musicVideos}, null, null, MS.Entertainment.Data.Query.libraryVideoMusic, {
                                            isLive: true, sort: Microsoft.Entertainment.Queries.VideosSortBy.artistAscending, acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll)
                                        }))]
                            }}, newlyAdded: {itemFactory: function() {
                                return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionNewlyAdded, String.id.IDS_MUSIC_COLLECTION_ARTIST_SORT, new MS.Entertainment.ViewModels.NodeValues(null, null, {selectedTemplate: MS.Entertainment.ViewModels.MusicCollectionTemplates.newlyAdded}, null, null, MS.Entertainment.Data.Query.libraryTracks, {
                                            isLive: true, sort: Microsoft.Entertainment.Queries.TracksSortBy.albumDateAddedDescending, maxAlbumsCount: 100, acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll)
                                        }))]
                            }}
                }, Views: {
                    albums2: new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryAlbums, {
                        isLive: true, allowGroupHints: true, allowReset: true, chunkSize: 25
                    }, {
                        propertyKey: "libraryId", taskKeyGetter: transferService && transferService.keyFromProperty("albumLibraryId"), notifier: notifiers && notifiers.trackCollection
                    }, {settingsKey: "collection-albums-modifier-selection"}, null, null, {acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.album)}), artists2: new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryArtists, {
                            isLive: true, allowGroupHints: true, allowReset: true, chunkSize: 25, artistOf: Microsoft.Entertainment.Queries.ArtistOf.album
                        }, {
                            propertyKey: "libraryId", taskKeyGetter: transferService && transferService.keyFromProperty("albumArtistLibraryId"), notifier: notifiers && notifiers.trackCollection
                        }, {settingsKey: "collection-artists-modifier-selection"}, null, null, {acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist)}), playlists2: new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryPlaylists, {
                            isLive: true, allowGroupHints: true, allowReset: true, chunkSize: 25, playlistType: Microsoft.Entertainment.Platform.PlaylistType.static
                        }, {notifier: null}, {settingsKey: "collection-playlists-modifier-selection"}), smartDJs: new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.ViewModels.SmartDJListQueryType, {}, {notifier: null}, {settingsKey: "collection-smartdjs-modifier-selection"}), musicVideos: new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryVideoMusic, {
                            isLive: true, sort: Microsoft.Entertainment.Queries.VideosSortBy.artistAscending, chunkSize: 25, allowReset: true, allowGroupHints: true
                        }, {notifier: null}, {settingsKey: "collection-musicVideos-modifier-selection"}, null, null, MS.Entertainment.Data.Query.libraryVideoMusic, {acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.musicVideo)}), newlyAdded: new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryAlbumsLimited, {
                            isLive: true, sort: Microsoft.Entertainment.Queries.AlbumsSortBy.dateAddedDescending, chunkSize: 25, allowReset: true
                        }, {
                            propertyKey: "libraryId", taskKeyGetter: transferService && transferService.keyFromProperty("albumLibraryId"), notifier: notifiers && notifiers.trackCollection
                        }, null, null, null, {acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.album)})
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {ShuffleAllMusicAction: MS.Entertainment.deferredDerive("MS.Entertainment.Platform.PlayAction", null, {
            automationId: MS.Entertainment.ViewModels.MusicCollectionAutomationIds.shuffleAllMusicAction, canExecutePlay: function canExecute() {
                    return true
                }, executedPlay: function() {
                    var query = new MS.Entertainment.Data.Query.libraryTracks;
                    query.sort = Microsoft.Entertainment.Queries.TracksSortBy.shuffle;
                    query.acquisitionData = new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll);
                    var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    if (!MS.Entertainment.UI.NetworkStatusService.isOnline() || !signInService.isSignedIn)
                        query.mediaAvailability = Microsoft.Entertainment.Platform.MediaAvailability.availableOffline;
                    MS.Entertainment.Platform.PlaybackHelpers.playMedia2(query, {
                        sessionId: MS.Entertainment.Platform.Playback.WellKnownPlaybackSessionId.nowPlaying, autoPlay: true, saveNowPlaying: false, showImmersive: false, showAppBar: true, shuffle: false
                    });
                    return true
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {MusicPlaylistCollection: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.MusicCollection", function musicPlaylistCollection(view) {
            MS.Entertainment.ViewModels.MusicCollection.prototype.constructor.apply(this, arguments)
        }, {
            updateQuery: function updateQuery() {
                if (this.pausableQuery && this.pausableQuery.forceLiveRefresh)
                    this.pausableQuery.forceLiveRefresh()
            }, createActionCells: function createActionCells() {
                    var actionCells = [];
                    var actionCell = new MS.Entertainment.ViewModels.ActionCell(MS.Entertainment.UI.Actions.ActionIdentifiers.createPlaylist, {
                            automationId: MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionCreatePlaylistAction, icon: WinJS.UI.AppBarIcon.add, voiceGuiTextStringId: String.id.IDS_PLAYLIST_GALLERY_ACTION_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_PLAYLIST_GALLERY_ACTION_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_PLAYLIST_GALLERY_ACTION_BUTTON_VUI_PRON
                        }, {completeAction: this.updateQuery.bind(this)});
                    actionCell.icon = WinJS.UI.AppBarIcon.add;
                    actionCell.stringId = String.id.IDS_PLAYLIST_CREATE_LABEL;
                    actionCell.groupHeader = String.id.IDS_FILTER_ALL;
                    actionCells.push(actionCell);
                    return actionCells
                }
        })});
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {MusicSmartDJCollection: MS.Entertainment.UI.Framework.derive("MS.Entertainment.ViewModels.MusicCollection", function musicSmartDJCollection(view) {
            MS.Entertainment.ViewModels.MusicCollection.prototype.constructor.apply(this, arguments);
            var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
            this._signInBindings = WinJS.Binding.bind(signIn, {isSignedIn: this._lockResultsIfNeeded.bind(this)});
            MS.Entertainment.Utilities.addEventHandlers(this, {itemsChanged: this._lockResultsIfNeeded.bind(this)});
            this.handleQueryChanges = !MS.Entertainment.Utilities.isMusicApp2
        }, {
            error: null, errorModel: null, _signInBindings: null, dispose: function dispose() {
                    MS.Entertainment.ViewModels.MusicCollection.prototype.dispose.call(this);
                    if (this._signInBindings) {
                        this._signInBindings.cancel();
                        this._signInBindings = null
                    }
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.smartDJList).lockResult = false
                }, createActionCells: function createActionCells() {
                    var actionCell;
                    var actionIndentifier;
                    var actionOptions;
                    if (MS.Entertainment.Utilities.isMusicApp2) {
                        actionIndentifier = MS.Entertainment.UI.Actions.ActionIdentifiers.searchArtist;
                        actionOptions = {
                            parameter: {
                                hasSmartDJ: true, galleryClass: "smartDjActionGallery"
                            }, icon: MS.Entertainment.UI.Icon.smartDj, voiceGuiTextStringId: String.id.IDS_RADIO_GALLERY_ACTION_BUTTON_VUI_GUI, voicePhraseStringId: String.id.IDS_RADIO_GALLERY_ACTION_BUTTON_VUI_ALM, voicePhoneticPhraseStringId: String.id.IDS_RADIO_GALLERY_ACTION_BUTTON_VUI_PRON
                        };
                        actionCell = new MS.Entertainment.ViewModels.ActionCell(actionIndentifier, actionOptions);
                        actionCell.hideDefaultRing = true
                    }
                    return actionCell
                }, cloneCurrentQuery: function cloneCurrentQuery() {
                    return this._lastUsedQuery
                }, _lockResultsIfNeeded: function _lockResultsIfNeeded() {
                    if (this._disposed)
                        return;
                    var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                    var lockResult = !MS.Entertainment.Utilities.isMusicApp2 && signIn.isSignedIn && !!this.items && this.items.count > 0;
                    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.smartDJList).lockResult = lockResult
                }, _onQueryCompleted: function _onQueryCompleted(query) {
                    this.errorModel = null;
                    this.error = null;
                    MS.Entertainment.ViewModels.MusicCollection.prototype._onQueryCompleted.apply(this, arguments)
                }, _onQueryFailed: function _onQueryFailed(error) {
                    MS.Entertainment.ViewModels.MusicCollection.prototype._onQueryFailed.apply(this, arguments);
                    this.error = error;
                    this.errorModel = new MS.Entertainment.UI.Controls.DefaultFailedPanelModel;
                    if ((this.error.errorCode === MS.Entertainment.Utilities.SignInErrors.INET_E_RESOURCE_NOT_FOUND) || !MS.Entertainment.UI.NetworkStatusService.isOnline()) {
                        this.errorModel.primaryStringId = String.id.IDS_RADIO_OFFINE_ERROR_TITLE;
                        this.errorModel.secondaryStringId = String.id.IDS_SMARTDJ_OFFINE_ERROR_DESC
                    }
                    else if ((this.error.errorCode === MS.Entertainment.Utilities.SignInErrors.HTTP_E_STATUS_DENIED) || !MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn).isSignedIn) {
                        this.errorModel.primaryStringId = String.id.IDS_RADIO_PAGE_ERROR_GALLERY_TITLE;
                        this.errorModel.secondaryStringId = String.id.IDS_RADIO_PAGE_SIGN_IN_SUBTITLE
                    }
                    else {
                        this.errorModel.primaryStringId = String.id.IDS_RADIO_PAGE_ERROR_GALLERY_TITLE;
                        this.errorModel.secondaryStringId = String.id.IDS_SMARTDJ_OFFINE_ERROR_DESC
                    }
                    var refreshOnAdd = function refreshOnAdd() {
                            this.refresh()
                        }.bind(this);
                    this.errorModel.details = MS.Entertainment.Pages.MusicCollection.getEmptySmartDJCollectionDetails(refreshOnAdd)
                }
        })});
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.shuffleAllMusic, function() {
        return new MS.Entertainment.ViewModels.ShuffleAllMusicAction
    });
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {SelectArtistAction: MS.Entertainment.deferredDerive("MS.Entertainment.UI.Actions.CreateFlyoutAction", function SelectArtistActionConstructor() {
            this.base()
        }, {
            automationId: MS.Entertainment.ViewModels.MusicCollectionAutomationIds.playAnyArtistAction, height: "650px", width: "670px", template: "MS.Entertainment.UI.Controls.SelectArtistFlyout", isSmartDJ: false, successCallback: null, _centeredStyle: "calc(50% - {0}px)", _createUserControlOptions: function _createUserControlOptions(parameter) {
                    return {
                            isSmartDJ: this.isSmartDJ, successCallback: this.successCallback
                        }
                }, canExecute: function canExecute(param) {
                    return MS.Entertainment.UI.NetworkStatusService.isOnline()
                }, executed: function executed(parameter, referenceElement) {
                    this.referenceContainer = null;
                    this.left = this.right = this._centeredStyle.format(parseInt(this.width) / 2);
                    this.top = this._centeredStyle.format(parseInt(this.height) / 2);
                    var stateService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.uiState);
                    if (!stateService.servicesEnabled)
                        return MS.Entertainment.UI.Shell.showAppUpdateDialog();
                    if (parameter && parameter.isSmartDJ !== undefined) {
                        this.isSmartDJ = parameter.isSmartDJ;
                        this.successCallback = parameter.successCallback
                    }
                    this.automationId = this.isSmartDJ ? MS.Entertainment.ViewModels.MusicCollectionAutomationIds.newSmartDjAction : MS.Entertainment.ViewModels.MusicCollectionAutomationIds.playAnyArtistAction;
                    if (referenceElement)
                        MS.Entertainment.Utilities.Telemetry.logPageAction({domElement: referenceElement}, {
                            uri: MS.Entertainment.Utilities.getCurrentUserLocation(), pageTypeId: MS.Entertainment.Utilities.Telemetry.PageTypeId.SmartDJ
                        });
                    MS.Entertainment.UI.Actions.CreateFlyoutAction.prototype.executed.apply(this, parameter)
                }
        })});
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.selectArtist, function() {
        return new MS.Entertainment.ViewModels.SelectArtistAction
    });
    WinJS.Namespace.define("MS.Entertainment.ViewModels", {SearchArtistAction: MS.Entertainment.UI.Framework.derive("MS.Entertainment.UI.Actions.Action", function searchArtistActionConstructor() {
            MS.Entertainment.UI.Actions.Action.prototype.constructor.apply(this);
            this.automationId = MS.Entertainment.ViewModels.MusicCollectionAutomationIds.searchPlayArtist
        }, {
            isSmartDJ: false, popupOpened: false, _populateSearchSuggestions: function _populateSearchSuggestions(searchString) {
                    if (WinJS.Utilities.getMember("UI.ViewManagement.InputPaneInternal", Windows)) {
                        var maxWordWheelCount = 10;
                        var inputPaneInternal = Windows.UI.ViewManagement.InputPaneInternal.getForCurrentView();
                        var suggestions = inputPaneInternal.suggestions;
                        suggestions.clear();
                        var query = new MS.Entertainment.Data.Query.Music.AutoSuggest;
                        query.mediaType = MS.Entertainment.Data.Query.bbxMediaType.artistSmartDj;
                        query.keyword = MS.Entertainment.Utilities.sanitizeString(searchString);
                        query.execute().then(function querySuccess(q) {
                            if (q.result.items)
                                return q.result.items.itemsFromIndex(0, 0, maxWordWheelCount)
                        }, function queryFail(q) {
                            return WinJS.Promise.wrap()
                        }).done(function gotResults(results) {
                            if (results)
                                for (var i = 0; i < results.items.length; i++) {
                                    var item = results.items[i].data;
                                    suggestions.append(item.name)
                                }
                        })
                    }
                }, executed: function executed(param) {
                    this.galleryClass = param.galleryClass;
                    this.hasSmartDJ = param.hasSmartDJ;
                    this.initialText = param.initialText;
                    this.automationId = this.hasSmartDJ ? MS.Entertainment.ViewModels.MusicCollectionAutomationIds.searchSmartDjArtist : MS.Entertainment.ViewModels.MusicCollectionAutomationIds.searchPlayArtist;
                    if (!this.popupOpened) {
                        this.popupOpened = true;
                        return MS.Entertainment.UI.Controls.TextInputOverlay.getTextInput({
                                submitText: String.load(String.id.IDS_MUSIC_ENGAGE_ARTIST_ENTER_BUTTON_UC), watermark: String.load(String.id.IDS_MUSIC_ENGAGE_ARTIST_ENTER), initialText: this.initialText, valueChanged: this._populateSearchSuggestions
                            }).then(function searchEntered(query) {
                                var navigationService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.navigation);
                                var _actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                                var actionIdentifier = this.hasSmartDJ ? MS.Entertainment.UI.Actions.ActionIdentifiers.playSmartDJ : MS.Entertainment.UI.Actions.ActionIdentifiers.playArtist;
                                var action = _actionService.getAction(actionIdentifier);
                                action.automationId = this.automationId;
                                var options = {
                                        search: query, action: action, hasSmartDJ: this.hasSmartDJ, galleryClass: this.galleryClass
                                    };
                                navigationService.navigateTo(MS.Entertainment.UI.Monikers.artistSearchAction, null, null, options);
                                this.popupOpened = false
                            }.bind(this), function searchCancelled() {
                                this.popupOpened = false
                            }.bind(this))
                    }
                }, canExecute: function canExecute() {
                    return true
                }
        })});
    MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions).register(MS.Entertainment.UI.Actions.ActionIdentifiers.searchArtist, function() {
        return new MS.Entertainment.ViewModels.SearchArtistAction
    })
})()
})();
/* >>>>>>/viewmodels/music1/music1collectionviewmodel.js:14978 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.ViewModels");

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var Data = MS.Entertainment.Data;
            var UI = MS.Entertainment.UI;
            var MusicCollectionLX = (function(_super) {
                    __extends(MusicCollectionLX, _super);
                    function MusicCollectionLX(view) {
                        _super.call(this, view);
                        this.showActionCells = true;
                        this.grouper = null;
                        this.grouperOptions = null;
                        this.showLocalEmptyAction = true;
                        this._viewStateViewModel = null;
                        this._emptyViewActions = null;
                        this.__delayInitializeSignal = null;
                        this._headerActionsArray = null;
                        this._headerActions = null;
                        window.msWriteProfilerMark("ent:MusicCollectionLX.constructor,StartTM");
                        this.applyNotificationFiltering = true;
                        this.title = String.load(String.id.IDS_COLLECTION_PIVOT_TC);
                        if (!this.featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay)) {
                            var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                            this._subscriptionBindings = WinJS.Binding.bind(signedInUser, {isSubscription: this._refreshIfSignedIn.bind(this)})
                        }
                        this.refresh();
                        window.msWriteProfilerMark("ent:MusicCollectionLX.constructor,StopTM")
                    }
                    MusicCollectionLX.prototype.delayInitialize = function() {
                        var _this = this;
                        this._delayInitializeScripts = MS.Entertainment.Utilities.schedulePromiseBelowNormal(null, "CollectionPageDelayedScripts").then(function() {
                            return WinJS.UI.Fragments.renderCopy("/Components/Music1/CollectionPageDelayedScripts.html")
                        }).then(null, function(error) {
                            MS.Entertainment.ViewModels.assert(WinJS.Promise.isCanceledError(error), "Failed to load delayed scripts. error: " + (error && error.message))
                        }).then(function() {
                            if (_this._disposed)
                                return;
                            _super.prototype.delayInitialize.call(_this);
                            _this._delayInitializeScripts = null;
                            _this._initializeEmptyViewStateActions();
                            _this._raiseDelayLoadedEvent();
                            _this._delayInitializeNotifications();
                            _this._delayInitializeSignal.complete();
                            _this._headerActionsArray = new MS.Entertainment.ObservableArray;
                            _this._updateHeaderActions();
                            _this.showCloudCleanupDialogIfNecessary();
                            _this._pivotChangedEvents = Entertainment.Utilities.addEventHandlers(_this.pivotsSelectionManager, {selectedItemChanged: _this._resetFilters.bind(_this)})
                        })
                    };
                    MusicCollectionLX.prototype.dispose = function() {
                        _super.prototype.dispose.call(this);
                        if (this._pivotChangedEvents) {
                            this._pivotChangedEvents.cancel();
                            this._pivotChangedEvents = null
                        }
                        if (this._subscriptionBindings) {
                            this._subscriptionBindings.cancel();
                            this._subscriptionBindings = null
                        }
                        this._clearGroupDataSourceProvider();
                        if (this._delayInitializeScripts) {
                            this._delayInitializeScripts.cancel();
                            this._delayInitializeScripts = null
                        }
                    };
                    MusicCollectionLX.prototype.loadModules = function() {
                        this.viewStateViewModel.viewState = 0
                    };
                    MusicCollectionLX.prototype.freeze = function(){};
                    MusicCollectionLX.prototype.thaw = function(){};
                    Object.defineProperty(MusicCollectionLX.prototype, "isCloudCollectionV2Enabled", {
                        get: function() {
                            return this.featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.cloudCollectionV2Enabled)
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(MusicCollectionLX.prototype, "isMarketplaceEnabled", {
                        get: function() {
                            return this.featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicMarketplace)
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(MusicCollectionLX.prototype, "isDTO", {
                        get: function() {
                            var isMarketplaceEnabled = this.isMarketplaceEnabled;
                            var isFreeStreamEnabled = this.featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicFreePlay);
                            var isSubscriptionStreamEnabled = this.featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.musicSubscription);
                            return isMarketplaceEnabled && !isFreeStreamEnabled && !isSubscriptionStreamEnabled
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(MusicCollectionLX.prototype, "headerActions", {
                        get: function() {
                            return this._headerActions
                        }, set: function(value) {
                                this.updateAndNotify("headerActions", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(MusicCollectionLX.prototype, "delayInitializePromise", {
                        get: function() {
                            return this._delayInitializeSignal.promise
                        }, enumerable: true, configurable: true
                    });
                    MusicCollectionLX.prototype._filterNotificationCategories = function(category) {
                        return !this.applyNotificationFiltering || UI.NotificationCategoryEnum.isCollectionCategory(category) || UI.NotificationCategoryEnum.isCloudStorageCategory(category)
                    };
                    Object.defineProperty(MusicCollectionLX.prototype, "_delayInitializeSignal", {
                        get: function() {
                            if (!this.__delayInitializeSignal)
                                this.__delayInitializeSignal = new MS.Entertainment.UI.Framework.Signal;
                            return this.__delayInitializeSignal
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(MusicCollectionLX.prototype, "configManager", {
                        get: function() {
                            return new Microsoft.Entertainment.Configuration.ConfigurationManager
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(MusicCollectionLX.prototype, "featureEnablement", {
                        get: function() {
                            return MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.featureEnablement)
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(MusicCollectionLX.prototype, "viewStateViewModel", {
                        get: function() {
                            if (!this._viewStateViewModel) {
                                var viewStateItems = [];
                                viewStateItems[-1] = new ViewModels.ViewStateItem(String.load(String.id.IDS_MUSIC_ERROR_HEADER), String.load(String.id.IDS_MUSIC_ERROR_DETAILS), []);
                                viewStateItems[0] = new ViewModels.ViewStateItem(String.load(String.id.IDS_COLLECTION_MUSIC_EMPTY_TITLE), String.load(String.id.IDS_COLLECTION_MUSIC_EMPTY_SUBTITLE), this._initializeEmptyViewStateActions());
                                this._viewStateViewModel = new ViewModels.ViewStateViewModel(viewStateItems)
                            }
                            return this._viewStateViewModel
                        }, enumerable: true, configurable: true
                    });
                    MusicCollectionLX.prototype._initializeEmptyViewStateActions = function() {
                        if (!this._emptyViewActions)
                            this._emptyViewActions = new MS.Entertainment.ObservableArray;
                        if (this.isDelayInitialized && this._emptyViewActions.length === 0)
                            this._populateObservableArrayWithEmptyActions(this._emptyViewActions);
                        return this._emptyViewActions
                    };
                    MusicCollectionLX.prototype.showCloudCleanupDialogIfNecessary = function() {
                        var _this = this;
                        var signInService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        var signedInUser = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signedInUser);
                        var hasSubscription = (signInService.isSignedIn && signedInUser.isSubscription) || this.configManager.service.lastSignedInUserSubscription;
                        if (!this.configManager.fue.musicCloudContentV1CleanupDialogDismissed && this.configManager.fue.freeStreamingIsGoneAnnouncementDismissed && this.featureEnablement.isEnabled(Microsoft.Entertainment.FeatureEnablement.FeatureItem.formerMusicFreePlay) && !hasSubscription) {
                            var xboxMusicTracksQuery = new MS.Entertainment.Data.Query.libraryTracks;
                            xboxMusicTracksQuery.mediaAvailability = Microsoft.Entertainment.Platform.MediaAvailability.musicPass;
                            xboxMusicTracksQuery.executeCount().done(function(totalCount) {
                                if (totalCount > 0)
                                    MS.Entertainment.UI.Shell.showMessageBox(String.load(String.id.IDS_MUSIC_FREE_STREAM_CLEAN_UP_COLLECTION_TITLE), String.load(String.id.IDS_MUSIC_FREE_STREAM_CLEAN_UP_COLLECTION_BODY), {
                                        defaultButtonIndex: 0, autoSetFocus: true, buttons: [{
                                                    title: String.load(String.id.IDS_MUSIC_FREE_STREAM_CLEAN_UP_COLLECTION_ACTION), execute: function(dialog) {
                                                            dialog.hide();
                                                            _this.configManager.fue.musicCloudContentV1CleanupDialogDismissed = true
                                                        }
                                                }]
                                    })
                            }, function(error) {
                                ViewModels.fail("Music1CollectionViewModel::_showCloudCleanupDialogIfNecessary: Tracks query failed: " + (error && error.message))
                            })
                        }
                    };
                    MusicCollectionLX.prototype._delayInitializeNotifications = function() {
                        var _this = this;
                        MS.Entertainment.Utilities.schedulePromiseIdle(null, "MusicCollectionLX::_delayInitializeNotifications").done(function() {
                            _this._initializeNotifications()
                        })
                    };
                    MusicCollectionLX.prototype._populateObservableArrayWithEmptyActions = function(array) {
                        var actions = this._createEmptyViewStateActions();
                        if (actions && actions.length)
                            array.spliceArray(0, 0, actions)
                    };
                    MusicCollectionLX.prototype._createEmptyViewStateActions = function() {
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        var emptyActions = [];
                        if (this.showLocalEmptyAction)
                            emptyActions.push(new ViewModels.ActionItem(String.id.IDS_COLLECTION_MUSIC_MANAGE_COLLECTION_TITLE, String.id.IDS_COLLECTION_MUSIC_MANAGE_COLLECTION_SUBTITLE, actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.showLocalGrovelInfoDialog), MS.Entertainment.UI.Icon.folder));
                        if (this.isMarketplaceEnabled)
                            emptyActions.push(new ViewModels.ActionItem(String.id.IDS_COLLECTION_PAGE_EMPTY_BROWSE_TITLE, String.id.IDS_COLLECTION_PAGE_EMPTY_BROWSE_SUBTITLE, actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.exploreHubNavigate), MS.Entertainment.UI.Icon.explore));
                        return emptyActions
                    };
                    MusicCollectionLX.prototype._updateEmptyActions = function() {
                        if (!this._emptyViewActions || !this.isDelayInitialized)
                            return;
                        this._emptyViewActions.clear();
                        this._populateObservableArrayWithEmptyActions(this._emptyViewActions)
                    };
                    MusicCollectionLX.createMusicCollectionLX = function() {
                        return new MusicCollectionLX(MusicCollectionLX.ViewTypes.collection)
                    };
                    Object.defineProperty(MusicCollectionLX.prototype, "selectedPivot", {
                        get: function() {
                            return this.pivotsSelectionManager ? this.pivotsSelectionManager.selectedItem : null
                        }, enumerable: true, configurable: true
                    });
                    MusicCollectionLX.prototype.getViewDefinition = function(view) {
                        return MS.Entertainment.ViewModels.MusicCollectionLX.Views[view]
                    };
                    MusicCollectionLX.prototype.getPivotDefinition = function(view) {
                        return MS.Entertainment.ViewModels.MusicCollectionLX.Pivots[view]
                    };
                    MusicCollectionLX.prototype.getModifierDefinition = function(view) {
                        this._modifiers = this._modifiers || this._createModifiers();
                        var id = this.selectedPivot && this.selectedPivot.id;
                        var modifierDefinition = id && this._modifiers ? this._modifiers[id] : null;
                        return modifierDefinition
                    };
                    MusicCollectionLX.prototype.getFilterDefinition = function(view) {
                        var nodeValues = new Array;
                        if (this.isMarketplaceEnabled && !this.isDTO) {
                            nodeValues.push(new MusicCollectionFilters.AllMusic);
                            nodeValues.push(new ViewModels.NodeSeparator(ViewModels.MusicCollectionAutomationIds.collectionFilterSeparatorAll));
                            nodeValues.push(new MusicCollectionFilters.OfflineMusic);
                            nodeValues.push(new MusicCollectionFilters.StreamingMusic);
                            if (this.selectedPivot)
                                switch (this.selectedPivot.id) {
                                    case MS.Entertainment.ViewModels.MusicCollectionLX.PivotTypes.albums:
                                        {
                                            nodeValues.push(new ViewModels.NodeSeparator(ViewModels.MusicCollectionAutomationIds.collectionFilterSeparatorCloud));
                                            if (this.isCloudCollectionV2Enabled)
                                                nodeValues.push(new MusicCollectionFilters.OneDriveMusic);
                                            nodeValues.push(new MusicCollectionFilters.DeviceLocalMusic);
                                            break
                                        }
                                    case MS.Entertainment.ViewModels.MusicCollectionLX.PivotTypes.artists:
                                        {
                                            nodeValues.push(new ViewModels.NodeSeparator(ViewModels.MusicCollectionAutomationIds.collectionFilterSeparatorCloud));
                                            if (this.isCloudCollectionV2Enabled)
                                                nodeValues.push(new MusicCollectionFilters.OneDriveMusic);
                                            nodeValues.push(new MusicCollectionFilters.DeviceLocalMusic);
                                            break
                                        }
                                    case MS.Entertainment.ViewModels.MusicCollectionLX.PivotTypes.tracks:
                                        {
                                            nodeValues.push(new ViewModels.NodeSeparator(ViewModels.MusicCollectionAutomationIds.collectionFilterSeparatorCloud));
                                            nodeValues.push(new MusicCollectionFilters.CatalogMusic);
                                            nodeValues.push(new MusicCollectionFilters.PurchasedMusic);
                                            if (this.isCloudCollectionV2Enabled)
                                                nodeValues.push(new MusicCollectionFilters.OneDriveMusic);
                                            nodeValues.push(new MusicCollectionFilters.DeviceLocalMusic);
                                            break
                                        }
                                    default:
                                        {
                                            ViewModels.fail("MusicCollectionLX::getFilterDefinition: Cannot update filters due to an unexpected pivot.")
                                        }
                                }
                        }
                        return {options: nodeValues}
                    };
                    MusicCollectionLX.prototype.getModifierOptions = function(view) {
                        var definition = this.getViewDefinition(view);
                        var pivot = this.selectedPivot;
                        return MS.Entertainment.Utilities.uniteObjects(WinJS.Binding.unwrap(pivot && pivot.value && pivot.value.modifierOptions), WinJS.Binding.unwrap(definition && definition.modelOptions))
                    };
                    MusicCollectionLX.prototype.createContainingMedia = function() {
                        var containingMedia = null;
                        var clonedQuery = this.cloneCurrentQuery();
                        if (clonedQuery)
                            containingMedia = {
                                playbackItemSource: clonedQuery, playbackOffset: 0
                            };
                        return containingMedia
                    };
                    MusicCollectionLX.prototype.forceLiveQueryRefresh = function() {
                        var refreshPromise;
                        var pausableQuery = this.pausableQuery;
                        if (!this._disposed && pausableQuery && pausableQuery.isLive && pausableQuery.forceLiveRefresh)
                            refreshPromise = pausableQuery.forceLiveRefresh();
                        return WinJS.Promise.as(refreshPromise)
                    };
                    MusicCollectionLX.prototype.createSelectionHandlers = function() {
                        var _this = this;
                        var shouldClearSelection = function() {
                                return _this._raiseShouldClearSelection()
                            };
                        var editItem = function(eventArgs) {
                                return _this._editItemCompleted(eventArgs)
                            };
                        var removeItem = function(eventArgs) {
                                return _this._removeItemCompleted(eventArgs)
                            };
                        var result = [];
                        if (MS.Entertainment.ViewModels.SmartAppbarActions.setDefaultGalleryEventHandlers)
                            result.push(MS.Entertainment.ViewModels.SmartAppbarActions.setDefaultGalleryEventHandlers(shouldClearSelection, removeItem));
                        result.push({
                            deleteMedia: removeItem, findAlbumInfo: shouldClearSelection, editMetadata: editItem
                        });
                        return result
                    };
                    MusicCollectionLX.prototype.createActionCells = function() {
                        var actionCells = [];
                        var observableActionCells = null;
                        if (this.showActionCells)
                            observableActionCells = this.createNotificationActionCells();
                        if (observableActionCells)
                            actionCells = actionCells.concat(observableActionCells.getArray());
                        return actionCells
                    };
                    MusicCollectionLX.prototype.createNotificationActionCells = function() {
                        var notifications = new MS.Entertainment.ObservableArray(_super.prototype.createNotificationActionCells.call(this));
                        return notifications
                    };
                    MusicCollectionLX.prototype._createGroupsDataSource = function(items) {
                        if (!this._groupDataSourceProvider && items && this.grouper) {
                            if (this.grouperOptions)
                                WinJS.UI.setOptions(this.grouper, this.grouperOptions);
                            this._groupDataSourceProvider = new Data.GroupDataSourceProvider(this.grouper, items)
                        }
                    };
                    MusicCollectionLX.prototype.cloneCurrentQuery = function() {
                        if (!this._lastUsedQuery)
                            return null;
                        var clonedQuery = this._lastUsedQuery.clone();
                        if (clonedQuery)
                            clonedQuery.allowGroupHints = false;
                        return clonedQuery
                    };
                    MusicCollectionLX.prototype.waitForLoad = function() {
                        return WinJS.Promise.join([WinJS.Promise.as(_super.prototype.waitForLoad.call(this)), WinJS.Promise.as(this._delayInitializeScripts)]).then(function(){})
                    };
                    MusicCollectionLX.prototype._supportsNotifications = function() {
                        return !this.configManager.shell.retailExperience
                    };
                    MusicCollectionLX.prototype._createModifiers = function() {
                        return new MS.Entertainment.ViewModels.MusicCollectionModifiers.Modifiers
                    };
                    MusicCollectionLX.prototype._removeItemCompleted = function(eventArgs) {
                        var removed = eventArgs.detail && eventArgs.detail.deleted;
                        if (removed && !this._disposed) {
                            this._raiseShouldClearSelection();
                            this.forceLiveQueryRefresh()
                        }
                    };
                    MusicCollectionLX.prototype._editItemCompleted = function(eventArgs) {
                        var _this = this;
                        this._raiseShouldClearSelection();
                        var refreshPromise = this.forceLiveQueryRefresh();
                        var edited = eventArgs.detail && eventArgs.detail.editedMediaItem;
                        if (this._lastUsedQuery && edited)
                            refreshPromise.then(function() {
                                return _this._lastUsedQuery.getItemIndexAsync(edited.libraryId)
                            }).done(function(index) {
                                if (index || index === 0)
                                    _this.dispatchEvent("focusedItemMoved", new UI.Controls.FocusedItemMovedDetail(index))
                            }, function(error) {
                                MS.Entertainment.UI.Controls.fail("Failed to get changed item index: " + (error && error.message))
                            })
                    };
                    MusicCollectionLX.prototype._refreshIfSignedIn = function() {
                        var signIn = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.signIn);
                        if (signIn.isSignedIn)
                            this.refreshIfNeeded()
                    };
                    MusicCollectionLX.prototype._getCollectionFilter = function() {
                        var collectionFilter;
                        var selectedFilter;
                        if (this.filterSelectionManager)
                            selectedFilter = WinJS.Binding.unwrap(this.filterSelectionManager.selectedItem);
                        if (selectedFilter && selectedFilter.value && selectedFilter.value.queryOptions)
                            collectionFilter = selectedFilter.value.queryOptions.mediaAvailability;
                        return collectionFilter
                    };
                    MusicCollectionLX.prototype._onTotalCountChanged = function(newValue, oldValue) {
                        _super.prototype._onTotalCountChanged.call(this, newValue, oldValue);
                        if (this.totalCount === 0) {
                            this.viewStateViewModel.viewState = 0;
                            this.headerActions = null;
                            this._updateEmptyActions()
                        }
                        else {
                            this.viewStateViewModel.viewState = 2;
                            if (!this.headerActions)
                                this._updateHeaderActions()
                        }
                    };
                    MusicCollectionLX.prototype._onBeginQuery = function(query) {
                        _super.prototype._onBeginQuery.call(this, query);
                        this._clearGroupDataSourceProvider()
                    };
                    MusicCollectionLX.prototype._onQueryCompleted = function(query) {
                        _super.prototype._onQueryCompleted.call(this, query);
                        this.filterValue = this._getCollectionFilter();
                        this._updateActionOptions();
                        if (this.totalCount === 0)
                            this.viewStateViewModel.viewState = 0;
                        else
                            this.viewStateViewModel.viewState = 2
                    };
                    MusicCollectionLX.prototype._onQueryFailed = function(error) {
                        _super.prototype._onQueryFailed.call(this, error);
                        if (!WinJS.Promise.isCanceledError(error)) {
                            this.filterValue = this._getCollectionFilter();
                            this._updateActionOptions();
                            this.viewStateViewModel.viewState = -1
                        }
                        MS.Entertainment.Utilities.assertError("MusicCollectionLX::_onQueryFailed() Unexpected failure from the database query.", error)
                    };
                    MusicCollectionLX.prototype._onItemsChanging = function(newItems, oldItems) {
                        _super.prototype._onItemsChanging.call(this, newItems, oldItems);
                        this._clearGroupDataSourceProvider();
                        this._createGroupsDataSource(newItems)
                    };
                    MusicCollectionLX.prototype._clearGroupDataSourceProvider = function() {
                        if (this._groupDataSourceProvider) {
                            this._groupDataSourceProvider.dispose();
                            this._groupDataSourceProvider = null
                        }
                    };
                    MusicCollectionLX.prototype._updateActionOptions = function() {
                        if (this.selectedTemplate && this.selectedTemplate.actionOptions)
                            this.selectedTemplate.actionOptions.filter = this.filterValue
                    };
                    MusicCollectionLX.prototype._updateHeaderActions = function() {
                        if (!this._headerActionsArray || this.totalCount === 0 || !this.isDelayInitialized)
                            return;
                        this._headerActionsArray.clear();
                        var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                        var playQueryAction = actionService.getAction(MS.Entertainment.UI.Actions.ActionIdentifiers.playQuery);
                        playQueryAction.queryFactory = this.createTrackQuery.bind(this);
                        playQueryAction.title = String.load(String.id.IDS_PLAY_ALL_SHUFFLED);
                        playQueryAction.icon = MS.Entertainment.UI.Icon.shuffleOn;
                        this._headerActionsArray.push(playQueryAction);
                        this.headerActions = this._headerActionsArray.bindableItems
                    };
                    MusicCollectionLX.ViewTypes = {
                        collection: "collection", cloudCollection: "cloudCollection", cloudCollectionAlbum: "cloudCollectionAlbum"
                    };
                    MusicCollectionLX.PivotTypes = {
                        artists: "artists", albums: "albums", tracks: "tracks"
                    };
                    MusicCollectionLX.Views = {
                        collection: MS.Entertainment.ViewModels.NodeValues.create({
                            filterOptions: {
                                settingsKey: "collection-filter-selection", isRoamingSetting: false, compareById: true
                            }, pivotOptions: {settingsKey: "collection-pivot-selection"}, queryOptions: {
                                    isLive: true, allowGroupHints: true, allowReset: true, chunkSize: 25, playlistType: Microsoft.Entertainment.Platform.PlaylistType.UserDefined
                                }, trackQuery: MS.Entertainment.Data.Query.libraryTracks, trackQueryOptions: {sort: Microsoft.Entertainment.Queries.TracksSortBy.shuffle}
                        }), cloudCollection: MS.Entertainment.ViewModels.NodeValues.create({
                                pivotOptions: {settingsKey: "device-pivot-selection"}, queryOptions: {
                                        isLive: true, allowGroupHints: true, allowReset: true, chunkSize: 25, playlistType: Microsoft.Entertainment.Platform.PlaylistType.UserDefined
                                    }, trackQuery: MS.Entertainment.Data.Query.libraryTracks, trackQueryOptions: {sort: Microsoft.Entertainment.Queries.TracksSortBy.shuffle}
                            }), cloudCollectionAlbum: MS.Entertainment.ViewModels.NodeValues.create({
                                query: MS.Entertainment.Data.Query.libraryTracks, queryOptions: {
                                        isLive: true, allowGroupHints: false, allowReset: true, sort: Microsoft.Entertainment.Queries.TracksSortBy.numberAscending, chunkSize: 25
                                    }
                            })
                    };
                    MusicCollectionLX.Pivots = {
                        collection: {itemFactory: function itemFactory() {
                                return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionLX.PivotTypes.albums, String.load(String.id.IDS_MUSIC_ALBUMS_PIVOT_TC), new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryAlbums, {
                                            sort: Microsoft.Entertainment.Queries.AlbumsSortBy.dateAddedDescending, acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.album)
                                        }, {
                                            showActionCells: false, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsDateAdded, propertyKey: "libraryId", taskKeyGetter: MS.Entertainment.UI.FileTransferService.keyFromProperty("albumLibraryId"), notifier: MS.Entertainment.UI.FileTransferNotifiers.trackCollection
                                        }, {settingsKey: "collection-albums-modifier-selection"}, null, null, null)), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionLX.PivotTypes.artists, String.load(String.id.IDS_MUSIC_ARTISTS_PIVOT_TC), new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryArtists, {
                                            sort: Microsoft.Entertainment.Queries.PeopleSortBy.nameAscending, artistOf: Microsoft.Entertainment.Queries.ArtistOf.album, acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist)
                                        }, {
                                            showActionCells: false, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.Artists, propertyKey: "libraryId", taskKeyGetter: MS.Entertainment.UI.FileTransferService.keyFromProperty("albumArtistLibraryId"), notifier: MS.Entertainment.UI.FileTransferNotifiers.trackCollection
                                        }, {settingsKey: "collection-artists-modifier-selection"}, null, null, null)), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionLX.PivotTypes.tracks, String.load(String.id.IDS_MUSIC_SONGS_PIVOT_TC), new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryTracks, {
                                            sort: Microsoft.Entertainment.Queries.TracksSortBy.dateAddedDescending, acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.track)
                                        }, {
                                            showActionCells: false, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.SongsDateAdded, propertyKey: "libraryId", taskKeyGetter: MS.Entertainment.UI.FileTransferService.keyFromProperty("libraryId"), notifier: MS.Entertainment.UI.FileTransferNotifiers.trackCollection
                                        }, {settingsKey: "collection-tracks-modifier-selection"}, null, null, null)), ]
                            }}, cloudCollection: {itemFactory: function itemFactory() {
                                    return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionLX.PivotTypes.albums, String.load(String.id.IDS_MUSIC_ALBUMS_PIVOT_TC), new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryAlbums, {
                                                sort: Microsoft.Entertainment.Queries.AlbumsSortBy.dateAddedDescending, acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.album)
                                            }, {
                                                showActionCells: false, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsDateAdded, propertyKey: "libraryId", taskKeyGetter: MS.Entertainment.UI.FileTransferService.keyFromProperty("albumLibraryId"), notifier: MS.Entertainment.UI.FileTransferNotifiers.trackCollection
                                            }, {settingsKey: "device-albums-modifier-selection"}, null, null, null)), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionLX.PivotTypes.artists, String.load(String.id.IDS_MUSIC_ARTISTS_PIVOT_TC), new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryArtists, {
                                                sort: Microsoft.Entertainment.Queries.PeopleSortBy.nameAscending, artistOf: Microsoft.Entertainment.Queries.ArtistOf.album, acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.artist)
                                            }, {
                                                showActionCells: false, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.Artists, propertyKey: "libraryId", taskKeyGetter: MS.Entertainment.UI.FileTransferService.keyFromProperty("albumArtistLibraryId"), notifier: MS.Entertainment.UI.FileTransferNotifiers.trackCollection
                                            }, {settingsKey: "device-artists-modifier-selection"}, null, null, null)), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionLX.PivotTypes.tracks, String.load(String.id.IDS_MUSIC_SONGS_PIVOT_TC), new MS.Entertainment.ViewModels.NodeValues(MS.Entertainment.Data.Query.libraryTracks, {
                                                sort: Microsoft.Entertainment.Queries.TracksSortBy.dateAddedDescending, acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.track)
                                            }, {
                                                showActionCells: false, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.SongsDateAdded, propertyKey: "libraryId", taskKeyGetter: MS.Entertainment.UI.FileTransferService.keyFromProperty("libraryId"), notifier: MS.Entertainment.UI.FileTransferNotifiers.trackCollection
                                            }, {settingsKey: "device-tracks-modifier-selection"}, null, null, null)), ]
                                }}
                    };
                    return MusicCollectionLX
                })(MS.Entertainment.ViewModels.MusicCollectionBase);
            ViewModels.MusicCollectionLX = MusicCollectionLX;
            var MusicCollectionFilters;
            (function(MusicCollectionFilters) {
                var AllMusic = (function(_super) {
                        __extends(AllMusic, _super);
                        function AllMusic() {
                            _super.call(this, ViewModels.MusicCollectionAutomationIds.collectionFilterAll, String.id.IDS_COLLECTION_FILTER_ALL_MUSIC, new ViewModels.NodeValues(null, {mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.available}, {showLocalEmptyAction: true}, null, null, null, {
                                acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll), mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.available
                            }))
                        }
                        return AllMusic
                    })(ViewModels.Node);
                MusicCollectionFilters.AllMusic = AllMusic;
                var OfflineMusic = (function(_super) {
                        __extends(OfflineMusic, _super);
                        function OfflineMusic() {
                            _super.call(this, ViewModels.MusicCollectionAutomationIds.collectionFilterAvailableOffline, String.id.IDS_COLLECTION_FILTER_AVAILABLE_OFFLINE, new ViewModels.NodeValues(null, {mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.availableOffline}, {showLocalEmptyAction: true}, null, null, null, {
                                acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll), mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.availableOffline
                            }))
                        }
                        return OfflineMusic
                    })(ViewModels.Node);
                MusicCollectionFilters.OfflineMusic = OfflineMusic;
                var StreamingMusic = (function(_super) {
                        __extends(StreamingMusic, _super);
                        function StreamingMusic() {
                            _super.call(this, ViewModels.MusicCollectionAutomationIds.collectionFilterStreaming, String.id.IDS_COLLECTION_FILTER_STREAMING, new ViewModels.NodeValues(null, {mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.availableFromCloudOnly}, {showLocalEmptyAction: false}, null, null, null, {
                                acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll), mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.availableFromCloudOnly
                            }))
                        }
                        return StreamingMusic
                    })(ViewModels.Node);
                MusicCollectionFilters.StreamingMusic = StreamingMusic;
                var CatalogMusic = (function(_super) {
                        __extends(CatalogMusic, _super);
                        function CatalogMusic() {
                            _super.call(this, ViewModels.MusicCollectionAutomationIds.collectionFilterRoamsViaCloud, String.id.IDS_COLLECTION_FILTER_FROM_XBOX_MUSIC, new ViewModels.NodeValues(null, {mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.musicPass}, {showLocalEmptyAction: false}, null, null, null, {
                                acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll), mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.musicPass
                            }))
                        }
                        return CatalogMusic
                    })(ViewModels.Node);
                MusicCollectionFilters.CatalogMusic = CatalogMusic;
                var OneDriveMusic = (function(_super) {
                        __extends(OneDriveMusic, _super);
                        function OneDriveMusic() {
                            _super.call(this, ViewModels.MusicCollectionAutomationIds.collectionFilterRoamsViaCloudDrive, String.id.IDS_COLLECTION_FILTER_ON_ONEDRIVE, new ViewModels.NodeValues(null, {mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.oneDrive}, {showLocalEmptyAction: false}, null, null, null, {
                                acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll), mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.oneDrive
                            }))
                        }
                        return OneDriveMusic
                    })(ViewModels.Node);
                MusicCollectionFilters.OneDriveMusic = OneDriveMusic;
                var PurchasedMusic = (function(_super) {
                        __extends(PurchasedMusic, _super);
                        function PurchasedMusic() {
                            _super.call(this, ViewModels.MusicCollectionAutomationIds.collectionFilterPurchased, String.id.IDS_COLLECTION_FILTER_PURCHASED, new ViewModels.NodeValues(null, {mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.purchased}, {showLocalEmptyAction: false}, null, null, null, {
                                acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll), mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.purchased
                            }))
                        }
                        return PurchasedMusic
                    })(ViewModels.Node);
                MusicCollectionFilters.PurchasedMusic = PurchasedMusic;
                var DeviceLocalMusic = (function(_super) {
                        __extends(DeviceLocalMusic, _super);
                        function DeviceLocalMusic() {
                            _super.call(this, ViewModels.MusicCollectionAutomationIds.collectionFilterLocalOnly, String.id.IDS_COLLECTION_FILTER_ONLY_ON_PC, new ViewModels.NodeValues(null, {mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.thisDeviceOnly}, {showLocalEmptyAction: true}, null, null, null, {
                                acquisitionData: new MS.Entertainment.Utilities.AcquisitionData(Microsoft.Entertainment.Platform.AcquisitionContext.collection, Microsoft.Entertainment.Platform.AcquisitionContextType.playAll), mediaAvailability: Microsoft.Entertainment.Platform.MediaAvailability.thisDeviceOnly
                            }))
                        }
                        return DeviceLocalMusic
                    })(ViewModels.Node);
                MusicCollectionFilters.DeviceLocalMusic = DeviceLocalMusic
            })(MusicCollectionFilters = ViewModels.MusicCollectionFilters || (ViewModels.MusicCollectionFilters = {}));
            var MusicCollectionModifiers;
            (function(MusicCollectionModifiers) {
                var Modifiers = (function() {
                        function Modifiers(deviceView) {
                            this.deviceView = false;
                            this.deviceView = !!deviceView
                        }
                        Object.defineProperty(Modifiers.prototype, "albums", {
                            get: function() {
                                this._albums = this._albums || new MusicCollectionModifiers.Album(this.deviceView);
                                return this._albums
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(Modifiers.prototype, "artists", {
                            get: function() {
                                this._artists = this._artists || new MusicCollectionModifiers.Artist(this.deviceView);
                                return this._artists
                            }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(Modifiers.prototype, "tracks", {
                            get: function() {
                                this._tracks = this._tracks || new MusicCollectionModifiers.Track(this.deviceView);
                                return this._tracks
                            }, enumerable: true, configurable: true
                        });
                        return Modifiers
                    })();
                MusicCollectionModifiers.Modifiers = Modifiers;
                var Album = (function() {
                        function Album(deviceView) {
                            this.deviceView = false;
                            this.deviceView = !!deviceView
                        }
                        Album.prototype.itemFactory = function() {
                            return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionAlbumsDateAdded, String.id.IDS_MUSIC_COLLECTION_BY_DATEADDED_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.AlbumsSortBy.dateAddedDescending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryTitleParentGrouper, grouperOptions: {titlePropertyName: "yearOrMonthAdded"}, selectedTemplate: this.deviceView ? new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsDateAddedDevice : new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsDateAdded
                                    }, null, null, MS.Entertainment.Data.Query.libraryTracks, {sort: Microsoft.Entertainment.Queries.TracksSortBy.albumDateAddedDescending})), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionAlbumsAlpha, String.id.IDS_MUSIC_COLLECTION_BY_ALPHA_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.AlbumsSortBy.titleAscending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper, grouperOptions: {keyPropertyName: "sortName"}, selectedTemplate: this.deviceView ? new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsAlphaDevice : new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsAlpha
                                    }, null, null, MS.Entertainment.Data.Query.libraryTracks, {sort: Microsoft.Entertainment.Queries.TracksSortBy.albumTitleDiscNumberNumberAscending})), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionAlbumsReleaseYear, String.id.IDS_MUSIC_COLLECTION_BY_RELEASEYEAR_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.AlbumsSortBy.releaseYearDescendingTitleAscending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryYearGrouper, grouperOptions: {keyPropertyName: "releaseDate"}, selectedTemplate: this.deviceView ? new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsReleaseYearDevice : new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsReleaseYear
                                    }, null, null, MS.Entertainment.Data.Query.libraryTracks, {sort: Microsoft.Entertainment.Queries.TracksSortBy.albumReleaseYearDescendingTitleAscending})), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionAlbumsGenre, String.id.IDS_MUSIC_COLLECTION_BY_GENRE_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.AlbumsSortBy.genreNameTitleAscending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryMediaItemGrouper, grouperOptions: {
                                                keyPropertyName: "genreGroupId", titlePropertyName: "genreName", useKeyAsData: false
                                            }, selectedTemplate: this.deviceView ? new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsGenreDevice : new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsGenre
                                    }, null, null, MS.Entertainment.Data.Query.libraryTracks, {sort: Microsoft.Entertainment.Queries.TracksSortBy.albumGenreNameTitleAscending})), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionAlbumsArtists, String.id.IDS_MUSIC_COLLECTION_BY_ARTIST_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.AlbumsSortBy.artistAscendingReleaseYearDescending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryMediaItemSubGrouper, grouperOptions: {
                                                keyPropertyName: "artistGroupId", titlePropertyName: "artist.name", sortTitlePropertyName: "artist.sortName", useKeyAsData: false
                                            }, selectedTemplate: this.deviceView ? new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsArtistsDevice : new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.AlbumsArtists
                                    }, null, null, MS.Entertainment.Data.Query.libraryTracks, {sort: Microsoft.Entertainment.Queries.TracksSortBy.albumArtistAscendingReleaseYearDescending}))]
                        };
                        return Album
                    })();
                MusicCollectionModifiers.Album = Album;
                var Artist = (function() {
                        function Artist(deviceView) {
                            this.deviceView = false;
                            this.deviceView = !!deviceView
                        }
                        Artist.prototype.itemFactory = function() {
                            return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionArtistsAlpha, String.id.IDS_MUSIC_COLLECTION_BY_ALPHA_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.PeopleSortBy.nameAscending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper, grouperOptions: {keyPropertyName: "sortName"}
                                    }, null, null, MS.Entertainment.Data.Query.libraryTracks, {sort: Microsoft.Entertainment.Queries.TracksSortBy.albumArtistAscendingAlbumReleaseYearAscendingNumberAscending}))]
                        };
                        return Artist
                    })();
                MusicCollectionModifiers.Artist = Artist;
                var Track = (function() {
                        function Track(deviceView) {
                            this.deviceView = false;
                            this.deviceView = !!deviceView
                        }
                        Track.prototype.itemFactory = function() {
                            return [new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionSongsDateAdded, String.id.IDS_MUSIC_COLLECTION_BY_DATEADDED_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.TracksSortBy.dateAddedDescending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryTitleParentGrouper, grouperOptions: {titlePropertyName: "yearOrMonthAdded"}, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.SongsDateAdded
                                    })), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionSongsAlpha, String.id.IDS_MUSIC_COLLECTION_BY_ALPHA_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.TracksSortBy.titleAscending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryAlphaCharGrouper, grouperOptions: {keyPropertyName: "sortName"}, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.SongsAlpha
                                    })), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionSongsGenre, String.id.IDS_MUSIC_COLLECTION_BY_GENRE_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.TracksSortBy.genreAscendingTitleAscending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryMediaItemGrouper, grouperOptions: {
                                                keyPropertyName: "genreGroupId", titlePropertyName: "genreName", useKeyAsData: false
                                            }, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.SongsGenre
                                    })), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionSongsArtist, String.id.IDS_MUSIC_COLLECTION_BY_ARTIST_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.TracksSortBy.artistAscendingAlbumReleaseYearAscendingNumberAscending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryMediaItemSubGrouper, grouperOptions: {
                                                keyPropertyName: "artistGroupId", titlePropertyName: "artist.name", sortTitlePropertyName: "artist.sortName", useKeyAsData: false
                                            }, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.SongsArtist
                                    })), new MS.Entertainment.ViewModels.Node(MS.Entertainment.ViewModels.MusicCollectionAutomationIds.collectionSongsAlbum, String.id.IDS_MUSIC_COLLECTION_BY_ALBUM_SORT, new MS.Entertainment.ViewModels.NodeValues(null, {sort: Microsoft.Entertainment.Queries.TracksSortBy.albumTitleDiscNumberNumberAscending}, {
                                        grouper: new MS.Entertainment.UI.Controls.GalleryMediaItemSubGrouper, grouperOptions: {
                                                keyPropertyName: "albumGroupId", titlePropertyName: "album.name", sortTitlePropertyName: "artist.sortName", useKeyAsData: false
                                            }, selectedTemplate: new MS.Entertainment.ViewModels.MusicCollectionLXTemplates.SongsAlbum
                                    }))]
                        };
                        return Track
                    })();
                MusicCollectionModifiers.Track = Track
            })(MusicCollectionModifiers = ViewModels.MusicCollectionModifiers || (ViewModels.MusicCollectionModifiers = {}));
            var MusicCollectionLXTemplates;
            (function(MusicCollectionLXTemplates) {
                var AlbumsAlpha = (function() {
                        function AlbumsAlpha() {
                            this.debugId = "albumsAlpha";
                            this.itemTemplate = "select(.template-collectionAlbumTemplate)";
                            this.headerTemplate = "select(.template-collectionSimpleHeaderTemplate)";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.grid;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.headerPosition = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.top;
                            this.maxRows = NaN;
                            this.minimumListLength = 1;
                            this.grouperItemThreshold = 80;
                            this.groupHeaderPosition = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.left;
                            this.forceInteractive = true;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.allowSelectAll = true;
                            this.allowZoom = true;
                            this.grouperKeyAsData = true;
                            this.itemsDraggable = true;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action;
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate};
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_ALBUM_PLURAL}
                        }
                        return AlbumsAlpha
                    })();
                MusicCollectionLXTemplates.AlbumsAlpha = AlbumsAlpha;
                var AlbumsAlphaDevice = (function(_super) {
                        __extends(AlbumsAlphaDevice, _super);
                        function AlbumsAlphaDevice() {
                            _super.apply(this, arguments);
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.albumDeviceDetailsNavigate}
                        }
                        return AlbumsAlphaDevice
                    })(AlbumsAlpha);
                MusicCollectionLXTemplates.AlbumsAlphaDevice = AlbumsAlphaDevice;
                var AlbumsArtists = (function() {
                        function AlbumsArtists() {
                            this.debugId = "albumsArtists";
                            this.itemTemplate = "select(.template-collectionAlbumTemplate)";
                            this.headerTemplate = "select(.template-collectionSimpleHeaderTemplate)";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.grid;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.headerPosition = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.top;
                            this.maxRows = NaN;
                            this.minimumListLength = 1;
                            this.grouperItemThreshold = -1;
                            this.grouperKeyAsData = false;
                            this.itemsDraggable = true;
                            this.forceInteractive = true;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.allowSelectAll = true;
                            this.allowZoom = true;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action;
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate};
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_ALBUM_PLURAL}
                        }
                        return AlbumsArtists
                    })();
                MusicCollectionLXTemplates.AlbumsArtists = AlbumsArtists;
                var AlbumsArtistsDevice = (function(_super) {
                        __extends(AlbumsArtistsDevice, _super);
                        function AlbumsArtistsDevice() {
                            _super.apply(this, arguments);
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.albumDeviceDetailsNavigate}
                        }
                        return AlbumsArtistsDevice
                    })(AlbumsArtists);
                MusicCollectionLXTemplates.AlbumsArtistsDevice = AlbumsArtistsDevice;
                var AlbumsDateAdded = (function() {
                        function AlbumsDateAdded() {
                            this.debugId = "albumsDateAdded";
                            this.itemTemplate = "select(.template-collectionAlbumTemplate)";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.grid;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.maxRows = NaN;
                            this.minimumListLength = 1;
                            this.grouperItemThreshold = -1;
                            this.forceInteractive = true;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.allowSelectAll = true;
                            this.allowZoom = true;
                            this.grouperKeyAsData = true;
                            this.itemsDraggable = true;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action;
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate};
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_ALBUM_PLURAL}
                        }
                        return AlbumsDateAdded
                    })();
                MusicCollectionLXTemplates.AlbumsDateAdded = AlbumsDateAdded;
                var AlbumsDateAddedDevice = (function(_super) {
                        __extends(AlbumsDateAddedDevice, _super);
                        function AlbumsDateAddedDevice() {
                            _super.apply(this, arguments);
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.albumDeviceDetailsNavigate}
                        }
                        return AlbumsDateAddedDevice
                    })(AlbumsDateAdded);
                MusicCollectionLXTemplates.AlbumsDateAddedDevice = AlbumsDateAddedDevice;
                var AlbumsReleaseYear = (function() {
                        function AlbumsReleaseYear() {
                            this.debugId = "albumsReleaseYear";
                            this.itemTemplate = "select(.template-collectionAlbumTemplate)";
                            this.headerTemplate = "select(.template-collectionSimpleHeaderTemplate)";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.grid;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.headerPosition = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.top;
                            this.maxRows = NaN;
                            this.minimumListLength = 1;
                            this.grouperItemThreshold = -1;
                            this.forceInteractive = true;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.allowSelectAll = true;
                            this.allowZoom = true;
                            this.grouperKeyAsData = true;
                            this.itemsDraggable = true;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action;
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate};
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_ALBUM_PLURAL}
                        }
                        return AlbumsReleaseYear
                    })();
                MusicCollectionLXTemplates.AlbumsReleaseYear = AlbumsReleaseYear;
                var AlbumsReleaseYearDevice = (function(_super) {
                        __extends(AlbumsReleaseYearDevice, _super);
                        function AlbumsReleaseYearDevice() {
                            _super.apply(this, arguments);
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.albumDeviceDetailsNavigate}
                        }
                        return AlbumsReleaseYearDevice
                    })(AlbumsReleaseYear);
                MusicCollectionLXTemplates.AlbumsReleaseYearDevice = AlbumsReleaseYearDevice;
                var AlbumsGenre = (function() {
                        function AlbumsGenre() {
                            this.debugId = "albumsGenre";
                            this.itemTemplate = "select(.template-collectionAlbumTemplate)";
                            this.headerTemplate = "select(.template-collectionSimpleHeaderTemplate)";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.grid;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.headerPosition = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.top;
                            this.maxRows = NaN;
                            this.minimumListLength = 1;
                            this.grouperItemThreshold = -1;
                            this.hideShadow = true;
                            this.forceInteractive = true;
                            this.allowSelectAll = true;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.allowZoom = true;
                            this.grouperKeyAsData = true;
                            this.itemsDraggable = true;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action;
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.albumDetailsNavigate};
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_ALBUM_PLURAL}
                        }
                        return AlbumsGenre
                    })();
                MusicCollectionLXTemplates.AlbumsGenre = AlbumsGenre;
                var AlbumsGenreDevice = (function(_super) {
                        __extends(AlbumsGenreDevice, _super);
                        function AlbumsGenreDevice() {
                            _super.apply(this, arguments);
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.albumDeviceDetailsNavigate}
                        }
                        return AlbumsGenreDevice
                    })(AlbumsGenre);
                MusicCollectionLXTemplates.AlbumsGenreDevice = AlbumsGenreDevice;
                var Artists = (function() {
                        function Artists() {
                            this.debugId = "artists";
                            this.itemTemplate = "select(.template-collectionArtistTemplate)";
                            this.headerTemplate = "select(.template-collectionSimpleHeaderTemplate)";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.grid;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.headerPosition = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.HeaderPosition.top;
                            this.panelTemplate = "MS.Entertainment.Pages.MusicArtistInlineDetails";
                            this.panelOptions = {location: MS.Entertainment.Data.ItemLocation.collection};
                            this.grouped = true;
                            this.maxRows = NaN;
                            this.minimumListLength = 1;
                            this.grouperItemThreshold = -1;
                            this.hideShadow = true;
                            this.forceInteractive = true;
                            this.allowSelectAll = true;
                            this.allowZoom = true;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.grouperKeyAsData = true;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.action;
                            this.actionOptions = {id: MS.Entertainment.UI.Actions.ActionIdentifiers.artistDetailsNavigate};
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_ARTIST_PLURAL}
                        }
                        return Artists
                    })();
                MusicCollectionLXTemplates.Artists = Artists;
                var SongsDateAdded = (function() {
                        function SongsDateAdded() {
                            this.debugId = "songsDateAdded";
                            this.itemTemplate = "select(.templateid-collectionSongTemplate)";
                            this.actionTemplate = "/Components/Music/MusicCollectionTemplates.html#actionTemplate";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline;
                            this.invokeHelperFactory = MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.create;
                            this.itemsDraggable = true;
                            this.forceInteractive = true;
                            this.maxRows = NaN;
                            this.minimumListLength = 1;
                            this.grouperItemThreshold = -1;
                            this.grouped = false;
                            this.hideShadow = true;
                            this.allowZoom = true;
                            this.allowSelectAll = false;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.grouperKeyAsData = true;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL};
                            this.listViewClassName = "gallery-songs"
                        }
                        return SongsDateAdded
                    })();
                MusicCollectionLXTemplates.SongsDateAdded = SongsDateAdded;
                var SongsAlpha = (function() {
                        function SongsAlpha() {
                            this.debugId = "songsAlpha";
                            this.itemTemplate = "select(.templateid-collectionSongTemplate)";
                            this.headerTemplate = "select(.template-collectionSimpleHeaderTemplate)";
                            this.actionTemplate = "/Components/Music/MusicCollectionTemplates.html#actionTemplate";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline;
                            this.invokeHelperFactory = MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.create;
                            this.itemsDraggable = true;
                            this.forceInteractive = true;
                            this.grouperItemThreshold = -1;
                            this.minimumListLength = 1;
                            this.maxRows = NaN;
                            this.grouped = true;
                            this.hideShadow = true;
                            this.allowZoom = true;
                            this.allowSelectAll = false;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.grouperKeyAsData = true;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL};
                            this.listViewClassName = "gallery-songs"
                        }
                        return SongsAlpha
                    })();
                MusicCollectionLXTemplates.SongsAlpha = SongsAlpha;
                var SongsGenre = (function() {
                        function SongsGenre() {
                            this.debugId = "songsGenre";
                            this.itemTemplate = "select(.templateid-collectionSongTemplate)";
                            this.headerTemplate = "select(.template-collectionSimpleHeaderTemplate)";
                            this.actionTemplate = "/Components/Music/MusicCollectionTemplates.html#actionTemplate";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline;
                            this.invokeHelperFactory = MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.create;
                            this.itemsDraggable = true;
                            this.forceInteractive = true;
                            this.grouped = true;
                            this.minimumListLength = 1;
                            this.maxRows = NaN;
                            this.grouperItemThreshold = -1;
                            this.hideShadow = true;
                            this.allowZoom = true;
                            this.allowSelectAll = false;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.grouperKeyAsData = true;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL};
                            this.listViewClassName = "gallery-songs"
                        }
                        return SongsGenre
                    })();
                MusicCollectionLXTemplates.SongsGenre = SongsGenre;
                var SongsAlbum = (function() {
                        function SongsAlbum() {
                            this.debugId = "songsAlbum";
                            this.itemTemplate = "select(.templateid-collectionSongTemplate)";
                            this.headerTemplate = "select(.template-collectionSimpleHeaderTemplate)";
                            this.actionTemplate = "/Components/Music/MusicCollectionTemplates.html#actionTemplate";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline;
                            this.invokeHelperFactory = MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.create;
                            this.itemsDraggable = true;
                            this.forceInteractive = true;
                            this.grouperItemThreshold = -1;
                            this.minimumListLength = 1;
                            this.maxRows = NaN;
                            this.grouped = true;
                            this.grouperKeyAsData = false;
                            this.hideShadow = true;
                            this.allowZoom = true;
                            this.allowSelectAll = false;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL};
                            this.listViewClassName = "gallery-songs"
                        }
                        return SongsAlbum
                    })();
                MusicCollectionLXTemplates.SongsAlbum = SongsAlbum;
                var SongsArtist = (function() {
                        function SongsArtist() {
                            this.debugId = "songsArtist";
                            this.itemTemplate = "select(.templateid-collectionSongTemplate)";
                            this.headerTemplate = "select(.template-collectionSimpleHeaderTemplate)";
                            this.actionTemplate = "/Components/Music/MusicCollectionTemplates.html#actionTemplate";
                            this.zoomedOutTemplate = "select(.template-simpleZoomedOutTemplate)";
                            this.tap = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Tap.invokeOnly;
                            this.layout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Layout.list;
                            this.orientation = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.Orientation.vertical;
                            this.zoomedOutLayout = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.ZoomedOutLayout.list;
                            this.invokeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.InvokeBehavior.inline;
                            this.invokeHelperFactory = MS.Entertainment.UI.Controls.GalleryControlInvocationHelper.create;
                            this.itemsDraggable = true;
                            this.forceInteractive = true;
                            this.grouperItemThreshold = -1;
                            this.minimumListLength = 1;
                            this.maxRows = NaN;
                            this.grouped = true;
                            this.grouperKeyAsData = false;
                            this.hideShadow = true;
                            this.allowZoom = true;
                            this.allowSelectAll = false;
                            this.delayHydrateLibraryId = false;
                            this.selectionStyleFilled = false;
                            this.swipeBehavior = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.swipeBehavior.select;
                            this.selectionMode = MS.Entertainment.UI.Controls.GalleryControl && MS.Entertainment.UI.Controls.GalleryControl.SelectionMode.multi;
                            this.strings = {countFormatStringId: String.id.IDS_MUSIC_TYPE_TRACK_PLURAL};
                            this.listViewClassName = "gallery-songs"
                        }
                        return SongsArtist
                    })();
                MusicCollectionLXTemplates.SongsArtist = SongsArtist
            })(MusicCollectionLXTemplates = ViewModels.MusicCollectionLXTemplates || (ViewModels.MusicCollectionLXTemplates = {}))
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/viewmodels/viewstateviewmodel.js:16043 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            (function(ViewState) {
                ViewState[ViewState["disabled"] = -5] = "disabled";
                ViewState[ViewState["filtered"] = -4] = "filtered";
                ViewState[ViewState["invalid"] = -3] = "invalid";
                ViewState[ViewState["offline"] = -2] = "offline";
                ViewState[ViewState["error"] = -1] = "error";
                ViewState[ViewState["empty"] = 0] = "empty";
                ViewState[ViewState["loading"] = 1] = "loading";
                ViewState[ViewState["ready"] = 2] = "ready"
            })(UI.ViewState || (UI.ViewState = {}));
            var ViewState = UI.ViewState
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var Utilities;
        (function(Utilities) {
            var ViewState = (function() {
                    function ViewState(){}
                    ViewState.isStateCompleted = function(state) {
                        switch (state) {
                            case 2:
                            case-2:
                            case-1:
                            case 0:
                            case-4:
                            case-5:
                                return true;
                                break
                        }
                        return false
                    };
                    return ViewState
                })();
            Utilities.ViewState = ViewState
        })(Utilities = Entertainment.Utilities || (Entertainment.Utilities = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}));

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var ViewModels;
        (function(ViewModels) {
            var ActionItem = (function() {
                    function ActionItem(titleStringId, subTitleStringId, action, icon) {
                        this.titleStringId = titleStringId;
                        this.subTitleStringId = subTitleStringId;
                        this.action = action;
                        this.icon = icon
                    }
                    return ActionItem
                })();
            ViewModels.ActionItem = ActionItem;
            var ViewStateItem = (function() {
                    function ViewStateItem(title, subTitle, actions) {
                        this.title = title;
                        this.subTitle = subTitle;
                        this.actions = actions
                    }
                    return ViewStateItem
                })();
            ViewModels.ViewStateItem = ViewStateItem;
            var ViewStateViewModel = (function(_super) {
                    __extends(ViewStateViewModel, _super);
                    function ViewStateViewModel(viewStateItems) {
                        _super.call(this);
                        this._actions = [];
                        this._disposed = false;
                        this._subTitle = String.empty;
                        this._title = String.empty;
                        this._viewState = -3;
                        this._suppressLoadingSpinner = false;
                        this._viewStateItems = viewStateItems
                    }
                    Object.defineProperty(ViewStateViewModel.prototype, "actions", {
                        get: function() {
                            return this._actions
                        }, set: function(value) {
                                this.updateAndNotify("actions", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ViewStateViewModel.prototype, "viewStateItems", {
                        get: function() {
                            return this._viewStateItems
                        }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ViewStateViewModel.prototype, "title", {
                        get: function() {
                            return this._title
                        }, set: function(value) {
                                this.updateAndNotify("title", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ViewStateViewModel.prototype, "subTitle", {
                        get: function() {
                            return this._subTitle
                        }, set: function(value) {
                                this.updateAndNotify("subTitle", value)
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ViewStateViewModel.prototype, "viewState", {
                        get: function() {
                            return this._viewState
                        }, set: function(value) {
                                if (value !== this.viewState) {
                                    if (!this._viewStateItems[value] && value !== -3 && value !== 1)
                                        value = 2;
                                    this.updateAndNotify("viewState", value);
                                    this.title = this._viewStateItems[this.viewState] && this._viewStateItems[this.viewState].title || String.empty;
                                    this.subTitle = this._viewStateItems[this.viewState] && this._viewStateItems[this.viewState].subTitle || String.empty;
                                    this.actions = this._viewStateItems[this.viewState] && this._viewStateItems[this.viewState].actions
                                }
                            }, enumerable: true, configurable: true
                    });
                    Object.defineProperty(ViewStateViewModel.prototype, "suppressLoadingSpinner", {
                        get: function() {
                            return this._suppressLoadingSpinner
                        }, set: function(value) {
                                this.updateAndNotify("suppressLoadingSpinner", value)
                            }, enumerable: true, configurable: true
                    });
                    ViewStateViewModel.prototype.dispose = function() {
                        if (this._disposed)
                            return;
                        this._disposed = true
                    };
                    ViewStateViewModel.prototype.freeze = function(){};
                    ViewStateViewModel.prototype.thaw = function(){};
                    ViewStateViewModel.prototype.isSupportedViewState = function(viewState) {
                        return !!this._viewStateItems[viewState]
                    };
                    return ViewStateViewModel
                })(MS.Entertainment.UI.Framework.ObservableBase);
            ViewModels.ViewStateViewModel = ViewStateViewModel
        })(ViewModels = Entertainment.ViewModels || (Entertainment.ViewModels = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/controls/simpleactionbutton.js:16204 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");
                var SimpleActionButton = (function(_super) {
                        __extends(SimpleActionButton, _super);
                        function SimpleActionButton() {
                            _super.apply(this, arguments);
                            this.enableDelayInitialization = true;
                            this.setAriaFromTitle = false;
                            this._isDisabled = false;
                            this._isExecuting = false
                        }
                        SimpleActionButton.prototype._delayInitialized = function() {
                            if (!this.domElement)
                                return;
                            if (!this._eventHandlers)
                                this._eventHandlers = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {click: this._onClick.bind(this)});
                            this._setTextContent(this.action && this.action.title)
                        };
                        SimpleActionButton.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._eventHandlers) {
                                this._eventHandlers.cancel();
                                this._eventHandlers = null
                            }
                        };
                        Object.defineProperty(SimpleActionButton.prototype, "action", {
                            get: function() {
                                return this._action
                            }, set: function(value) {
                                    if (this._action !== value) {
                                        var id = value ? "ActionButton_" + value.automationId : String.empty;
                                        if (this.domElement) {
                                            this.domElement.setAttribute("data-win-automationid", id);
                                            this._setTextContent(value && value.title)
                                        }
                                        this.updateAndNotify("action", value)
                                    }
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(SimpleActionButton.prototype, "actionParameter", {
                            get: function() {
                                return this._actionParameter
                            }, set: function(value) {
                                    this.updateAndNotify("actionParameter", value || null)
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(SimpleActionButton.prototype, "isDisabled", {
                            get: function() {
                                return this._isDisabled
                            }, set: function(value) {
                                    this.updateAndNotify("isDisabled", value);
                                    if (this.domElement)
                                        if (value) {
                                            this.domElement.setAttribute("disabled", "disabled");
                                            WinJS.Utilities.addClass(this.domElement, "disabled")
                                        }
                                        else {
                                            this.domElement.removeAttribute("disabled");
                                            WinJS.Utilities.removeClass(this.domElement, "disabled")
                                        }
                                }, enumerable: true, configurable: true
                        });
                        SimpleActionButton.prototype._onClick = function() {
                            var _this = this;
                            var canExecute = false;
                            if (this.action && !this._isExecuting && !this.isDisabled) {
                                if (this.actionParameter !== undefined)
                                    this.action.parameter = this.actionParameter;
                                this.action.requeryCanExecute();
                                canExecute = this.action.isEnabled
                            }
                            if (canExecute) {
                                this._isExecuting = true;
                                this.action.execute(this.domElement).then(function() {
                                    _this._isExecuting = false
                                })
                            }
                            this._setAriaAttributeFromTitle(this.action && this.action.title)
                        };
                        SimpleActionButton.prototype._setTextContent = function(value) {
                            if (this.isDelayInitialized && this.domElement && this.setTextContent) {
                                this.domElement.textContent = value || String.empty;
                                this._setAriaAttributeFromTitle(value)
                            }
                        };
                        SimpleActionButton.prototype._setAriaAttributeFromTitle = function(value) {
                            if (this.setAriaFromTitle && this.domElement && (value || value === String.empty))
                                this.domElement.setAttribute("aria-label", value)
                        };
                        return SimpleActionButton
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.SimpleActionButton = SimpleActionButton
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/controls/pageviewbase.js:16321 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };
MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.UI.Controls");

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var UI;
        (function(UI) {
            var Controls;
            (function(Controls) {
                var PageViewBase = (function(_super) {
                        __extends(PageViewBase, _super);
                        function PageViewBase(element, options) {
                            _super.call(this, element, options);
                            this.loadModulesImmediately = false;
                            this._moduleSelectionManager = null;
                            this._options = null;
                            this._options = options;
                            this._initializeSelectionManagerAndBindings()
                        }
                        Object.defineProperty(PageViewBase.prototype, "dataContext", {
                            get: function() {
                                return this._dataContext
                            }, set: function(value) {
                                    this.updateAndNotify("dataContext", value);
                                    if (this.dataContext && this.loadModulesImmediately)
                                        this.dataContext.loadModules()
                                }, enumerable: true, configurable: true
                        });
                        Object.defineProperty(PageViewBase.prototype, "_focusEventHandlersEnabled", {
                            get: function() {
                                return !!this._scrollerElement
                            }, enumerable: true, configurable: true
                        });
                        PageViewBase.prototype.initialize = function() {
                            var _this = this;
                            _super.prototype.initialize.call(this);
                            if (this.delayInitializeChildren && this.domElement)
                                this._contentCompleteHandler = Entertainment.Utilities.addEventHandlers(this.domElement, {ContentComplete: function() {
                                        MS.Entertainment.Utilities.schedulePromiseBelowNormal().done(function() {
                                            if (!_this._unloaded)
                                                MS.Entertainment.UI.Framework.delayInitializeChildren(_this.domElement)
                                        }, function(error) {
                                            MS.Entertainment.UI.Controls.assert(WinJS.Promise.isCanceledError(error), "PageViewBase::_onContentComplete() The scheduler failed. Error: " + (error.message))
                                        })
                                    }})
                        };
                        PageViewBase.prototype._initializeSelectionManagerAndBindings = function() {
                            this._moduleSelectionManager = new MS.Entertainment.Framework.ModuleSelectionManager(this.domElement);
                            if (this._options && this._options.handleModuleSelectedItemsChangedEvent === true)
                                this._moduleItemsSelectionChangedHandler = MS.Entertainment.UI.Framework.addEventHandlers(this._moduleSelectionManager, {moduleItemsSelectionChanged: this._handleSelectionChanged.bind(this)});
                            if (this._options && this._options.handleGallerySelectedItemsChangedEvent === true)
                                this._gallerySelectionChangedEventHandler = MS.Entertainment.UI.Framework.addEventHandlers(this.domElement, {galleryControlSelectionChanged: this._handleSelectionChanged.bind(this)})
                        };
                        PageViewBase.prototype.invokeActionForEvent = function(event, actionToExecute) {
                            if (!MS.Entertainment.Utilities.isInvocationEvent(event))
                                return;
                            if (!actionToExecute)
                                return;
                            if (actionToExecute instanceof MS.Entertainment.UI.Actions.Action) {
                                actionToExecute.requeryCanExecute();
                                if (actionToExecute.isEnabled)
                                    actionToExecute.execute()
                            }
                            else
                                actionToExecute();
                            event.stopPropagation()
                        };
                        PageViewBase.prototype.onModuleItemClicked = function(event) {
                            if (!MS.Entertainment.Utilities.isInvocationEvent(event))
                                return;
                            var element = event.srcElement;
                            while (element && element !== this.domElement) {
                                var clickDataContext = element.clickDataContext;
                                if (clickDataContext) {
                                    this.invokeModuleAction(clickDataContext, element);
                                    event.stopPropagation();
                                    event.preventDefault();
                                    break
                                }
                                element = element.parentElement
                            }
                        };
                        PageViewBase.prototype.invokeModuleAction = function(item, referenceElement) {
                            if (!WinJS.Utilities.getMember("actionId", item))
                                if (WinJS.Utilities.getMember("data.actionId", item))
                                    item = item.data;
                                else
                                    return;
                            var actionService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.actions);
                            var actionToExecute = actionService.getAction(item.actionId);
                            if (actionToExecute) {
                                actionToExecute.parameter = item.actionParameter;
                                if (item.automationId)
                                    actionToExecute.automationId = item.automationId;
                                actionToExecute.requeryCanExecute();
                                if (actionToExecute.isEnabled)
                                    actionToExecute.execute(referenceElement)
                            }
                        };
                        PageViewBase.prototype.onModuleHeaderInvoked = function(event) {
                            var element = event.srcElement;
                            while (element && element !== this.domElement) {
                                var moduleDataContext = element.moduleDataContext;
                                if (moduleDataContext) {
                                    var moduleAction = WinJS.Utilities.getMember("moduleDataContext.moduleAction", element);
                                    this.invokeActionForEvent(event, moduleAction);
                                    break
                                }
                                element = element.parentElement
                            }
                        };
                        PageViewBase.prototype.freeze = function() {
                            _super.prototype.freeze.call(this);
                            if (this.dataContext)
                                this.dataContext.freeze();
                            this._clearFocusEventHandlers()
                        };
                        PageViewBase.prototype.thaw = function() {
                            _super.prototype.thaw.call(this);
                            if (this.dataContext)
                                this.dataContext.thaw();
                            if (this._focusEventHandlersEnabled)
                                this._createFocusEventHandlers()
                        };
                        PageViewBase.prototype.unload = function() {
                            _super.prototype.unload.call(this);
                            if (this._contentCompleteHandler) {
                                this._contentCompleteHandler.cancel();
                                this._contentCompleteHandler = null
                            }
                            this._disposeSelectionManagerAndBindings();
                            this._clearFocusEventHandlers()
                        };
                        PageViewBase.prototype._disposeSelectionManagerAndBindings = function() {
                            if (this._moduleSelectionManager) {
                                this._moduleSelectionManager.dispose();
                                this._moduleSelectionManager = null
                            }
                            if (this._moduleItemsSelectionChangedHandler) {
                                this._moduleItemsSelectionChangedHandler.cancel();
                                this._moduleItemsSelectionChangedHandler = null
                            }
                            if (this._gallerySelectionChangedEventHandler) {
                                this._gallerySelectionChangedEventHandler.cancel();
                                this._gallerySelectionChangedEventHandler = null
                            }
                        };
                        PageViewBase.prototype._refreshSelectionManager = function() {
                            this._disposeSelectionManagerAndBindings();
                            this._initializeSelectionManagerAndBindings()
                        };
                        PageViewBase.prototype._enableFocusEventHandlers = function(scrollerElementClassName) {
                            if (!this._scrollerElement && scrollerElementClassName)
                                this._scrollerElement = WinJS.Utilities.hasClass(this.domElement, scrollerElementClassName) ? this.domElement : MS.Entertainment.Utilities.findParentElementByClassName(this.domElement, scrollerElementClassName);
                            Controls.assert(!!this._scrollerElement, "Couldn't find parent scroller");
                            this._createFocusEventHandlers()
                        };
                        PageViewBase.prototype._createFocusEventHandlers = function() {
                            var _this = this;
                            this._clearFocusEventHandlers();
                            this._focusEvents = MS.Entertainment.Utilities.addEventHandlers(this.domElement, {focus: function(eventArgs) {
                                    _this._onFocusChanging(eventArgs)
                                }}, true)
                        };
                        PageViewBase.prototype._clearFocusEventHandlers = function() {
                            if (this._focusEvents) {
                                this._focusEvents.cancel();
                                this._focusEvents = null
                            }
                        };
                        PageViewBase.prototype._onFocusChanging = function(eventArgs) {
                            if (!this.enableAutoScroll || !eventArgs || !eventArgs.target || !this.domElement || !WinJS.Utilities.hasClass(eventArgs.target, "win-item") || !this.domElement.parentElement || !this._scrollerElement || MS.Entertainment.Utilities.isElementInVerticalViewportOfParent(eventArgs.target, this._scrollerElement))
                                return;
                            eventArgs.target.scrollIntoView(false)
                        };
                        PageViewBase.prototype._handleSelectionChanged = function(selectedItemsChangedEvent) {
                            if (selectedItemsChangedEvent && selectedItemsChangedEvent.detail && this.dataContext && this.dataContext.handleSelectionChange)
                                this.dataContext.handleSelectionChange(selectedItemsChangedEvent.detail)
                        };
                        PageViewBase.isDeclarativeControlContainer = true;
                        return PageViewBase
                    })(MS.Entertainment.UI.Framework.UserControl);
                Controls.PageViewBase = PageViewBase
            })(Controls = UI.Controls || (UI.Controls = {}))
        })(UI = Entertainment.UI || (Entertainment.UI = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/framework/moduleselectionmanager.js:16522 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */
var __extends = this.__extends || function(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d
        }
        __.prototype = b.prototype;
        d.prototype = new __
    };

(function(MS) {
    var Entertainment;
    (function(Entertainment) {
        var Framework;
        (function(Framework) {
            MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Framework");
            var ModuleSelectionManager = (function(_super) {
                    __extends(ModuleSelectionManager, _super);
                    function ModuleSelectionManager(element) {
                        var _this = this;
                        _super.call(this);
                        this._itemSelectionAggregator = null;
                        this._selectedItemStateEngine = null;
                        this._selectedMediaItems = [];
                        this._disposed = false;
                        this._shareOperation = null;
                        this._itemSelectionAggregator = new ItemSelectionAggregator(element);
                        this._selectionEventBindings = MS.Entertainment.UI.Framework.addEventHandlers(this._itemSelectionAggregator, {
                            selectedMediaItemsChanged: this._onSelectionChanged.bind(this), mediaItemDragStart: this._onItemDragStart.bind(this), mediaItemDragEnd: this._onItemDragEnd.bind(this)
                        });
                        if (Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.winJSNavigation))
                            this._navigationHandlers = MS.Entertainment.Utilities.addEventHandlers(MS.Entertainment.UI.Framework.Navigation.getJournal(), {navigated: function(arg) {
                                    return _this.onNavigated(arg)
                                }})
                    }
                    ModuleSelectionManager.prototype.dispose = function() {
                        if (this._disposed)
                            return;
                        this._clearSelection();
                        this._disposed = true;
                        this._selectedMediaItems = null;
                        if (this._appbarActionBindings) {
                            this._appbarActionBindings.cancel();
                            this._appbarActionBindings = null
                        }
                        if (this._selectionEventBindings) {
                            this._selectionEventBindings.cancel();
                            this._selectionEventBindings = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        if (this._navigationHandlers) {
                            this._navigationHandlers.cancel();
                            this._navigationHandlers = null
                        }
                        if (this._itemSelectionAggregator) {
                            this._itemSelectionAggregator.dispose();
                            this._itemSelectionAggregator = null
                        }
                        this._cancelShareOperation()
                    };
                    ModuleSelectionManager.prototype._cancelShareOperation = function() {
                        if (this._shareOperation) {
                            this._shareOperation.cancel();
                            this._shareOperation = null
                        }
                    };
                    ModuleSelectionManager.prototype._shareMediaItem = function(item) {
                        this._cancelShareOperation();
                        if (item && MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.shareSender)) {
                            var sender = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.shareSender);
                            this._shareOperation = sender.pendingShare(item)
                        }
                    };
                    ModuleSelectionManager.prototype._onSelectionChanged = function(eventInfo) {
                        this._selectedMediaItems = this._itemSelectionAggregator.selectedMediaItems;
                        this._updateMediaContext();
                        switch (this._selectedMediaItems.length) {
                            case 0:
                                this._clearSelection();
                                break;
                            case 1:
                                this._handleSingleSelection();
                                break;
                            default:
                                this._handleMultipleSelection();
                                break
                        }
                        this.dispatchEvent("moduleItemsSelectionChanged", this._selectedMediaItems)
                    };
                    ModuleSelectionManager.prototype._onItemDragStart = function(eventInfo) {
                        if (!MS.Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.dragData))
                            return;
                        var dragDataPromise;
                        if (this._selectedMediaItems && this._selectedMediaItems.length)
                            dragDataPromise = WinJS.Promise.as({
                                data: this._selectedMediaItems, onDragDataHandled: this._onDragDataHandled.bind(this)
                            });
                        else if (eventInfo.detail && eventInfo.detail.draggedItem)
                            dragDataPromise = WinJS.Promise.as({
                                data: eventInfo.detail.draggedItem, onDragDataHandled: this._onDragDataHandled.bind(this)
                            });
                        if (dragDataPromise) {
                            var dragDataService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dragData);
                            dragDataService.startDrag(dragDataPromise)
                        }
                    };
                    ModuleSelectionManager.prototype._onItemDragEnd = function(eventInfo) {
                        var dragDataService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.dragData);
                        dragDataService.finishDrag()
                    };
                    ModuleSelectionManager.prototype._onDragDataHandled = function() {
                        this._clearSelection()
                    };
                    ModuleSelectionManager.prototype._updateMediaContext = function() {
                        if (this._mediaContext)
                            this._mediaContext.updateMediaItem(this._selectedMediaItems);
                        else if (Entertainment.ServiceLocator.isServiceRegistered(MS.Entertainment.Services.appToolbar)) {
                            var appBarService = MS.Entertainment.ServiceLocator.getService(MS.Entertainment.Services.appToolbar);
                            if (appBarService)
                                this._mediaContext = appBarService.pushMediaContext(this._selectedMediaItems, Entertainment.ViewModels.SmartAppbarActions.setDefaultGalleryEventHandlers(this._clearSelection.bind(this)), [], {executeLocation: MS.Entertainment.UI.Actions.ExecutionLocation.selection})
                        }
                    };
                    ModuleSelectionManager.prototype._releaseSingleSelectionBindings = function() {
                        if (this._appbarActionBindings) {
                            this._appbarActionBindings.cancel();
                            this._appbarActionBindings = null
                        }
                        if (this._selectedItemStateEngine) {
                            this._selectedItemStateEngine.unload();
                            this._selectedItemStateEngine = null
                        }
                        this._cancelShareOperation()
                    };
                    ModuleSelectionManager.prototype._handleSingleSelection = function() {
                        Framework.assert(this._selectedMediaItems.length === 1, "The length of selected media item array should be 1!");
                        if (this._disposed)
                            return;
                        this._releaseSingleSelectionBindings();
                        var mediaItem = this._selectedMediaItems[0];
                        if (mediaItem.hydrate)
                            mediaItem.hydrate();
                        this._shareMediaItem(mediaItem);
                        if (Entertainment.ViewModels.SmartBuyStateEngine) {
                            this._selectedItemStateEngine = MS.Entertainment.ViewModels.SmartBuyStateEngine.getSelectionStateFromMediaItem(mediaItem);
                            this._appbarActionBindings = WinJS.Binding.bind(this._selectedItemStateEngine, {currentAppbarActions: this._setSelectedItemAppbarActions.bind(this)})
                        }
                    };
                    ModuleSelectionManager.prototype._handleMultipleSelection = function() {
                        this._releaseSingleSelectionBindings();
                        this._shareMediaItem(this._selectedMediaItems);
                        if (Entertainment.ViewModels.SmartAppbarActions) {
                            var multiSelectItemActions = MS.Entertainment.ViewModels.SmartAppbarActions.getMultiSelectAppbarActions(this._selectedMediaItems[0]);
                            this._updateAppbarActions(multiSelectItemActions)
                        }
                    };
                    ModuleSelectionManager.prototype._clearSelection = function() {
                        if (this._itemSelectionAggregator)
                            this._itemSelectionAggregator.clearModuleSelection();
                        this._cancelShareOperation();
                        this._releaseSingleSelectionBindings();
                        var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                        if (appBarControl && appBarControl.hide)
                            appBarControl.hide(true);
                        if (this._mediaContext) {
                            this._mediaContext.clearContext();
                            this._mediaContext = null
                        }
                    };
                    ModuleSelectionManager.prototype._setSelectedItemAppbarActions = function(newValue, oldValue) {
                        if (oldValue === undefined)
                            return;
                        this._updateAppbarActions(newValue)
                    };
                    ModuleSelectionManager.prototype._updateAppbarActions = function(actions) {
                        if (this._mediaContext)
                            this._mediaContext.setToolbarActions(actions);
                        if (actions && actions.length > 0) {
                            var appBarControl = MS.Entertainment.globalControls.getControl(MS.Entertainment.globalControls.GlobalControl.appBar);
                            if (appBarControl)
                                appBarControl.show()
                        }
                    };
                    ModuleSelectionManager.prototype.onNavigated = function(args) {
                        var isBackNavigation = args && args.detail && args.detail.value;
                        if (!isBackNavigation)
                            this._clearSelection()
                    };
                    return ModuleSelectionManager
                })(Entertainment.UI.Framework.ObservableBase);
            Framework.ModuleSelectionManager = ModuleSelectionManager;
            var ItemSelectionAggregator = (function(_super) {
                    __extends(ItemSelectionAggregator, _super);
                    function ItemSelectionAggregator(element) {
                        _super.call(this);
                        this._selectedMediaItems = [];
                        this._selectedSrcElementKeys = [];
                        this._disposed = false;
                        this._selectedElementWeakRefTable = new MS.Entertainment.UI.Framework.WeakRefTable("about://moduleSelectedElement");
                        this._domElement = element;
                        this._enableModuleSelectionBindings()
                    }
                    Object.defineProperty(ItemSelectionAggregator.prototype, "selectedMediaItems", {
                        get: function() {
                            return this._selectedMediaItems
                        }, set: function(value) {
                                this.updateAndNotify("selectedMediaItems", value)
                            }, enumerable: true, configurable: true
                    });
                    ItemSelectionAggregator.prototype.clearModuleSelection = function() {
                        var selectionCount = this._selectedSrcElementKeys ? this._selectedSrcElementKeys.length : 0;
                        for (var i = selectionCount - 1; i >= 0; i--) {
                            var element = this._selectedElementWeakRefTable.get(this._selectedSrcElementKeys[i]);
                            if (element && element.winControl && element.winControl.selected)
                                element.winControl.selected = false
                        }
                        this._selectedSrcElementKeys = [];
                        this._selectedMediaItems = []
                    };
                    ItemSelectionAggregator.prototype.dispose = function() {
                        if (this._disposed)
                            return;
                        this._disposed = true;
                        this._selectedMediaItems = null;
                        this._selectedSrcElementKeys = null;
                        if (this._moduleSelectionChangedEventBindings) {
                            this._moduleSelectionChangedEventBindings.cancel();
                            this._moduleSelectionChangedEventBindings = null
                        }
                        if (this._gallerySelectionChangingEventBindings) {
                            this._gallerySelectionChangingEventBindings.cancel();
                            this._gallerySelectionChangingEventBindings = null
                        }
                        this._onModuleItemDragEnd(null)
                    };
                    ItemSelectionAggregator.prototype._enableModuleSelectionBindings = function() {
                        this._moduleSelectionChangedEventBindings = MS.Entertainment.UI.Framework.addEventHandlers(this._domElement, {
                            selectionchanged: this._onSelectionChanged.bind(this), invoked: this._onModuleItemInvoked.bind(this), dragstart: this._onModuleItemDragStart.bind(this), dragend: this._onModuleItemDragEnd.bind(this)
                        })
                    };
                    ItemSelectionAggregator.prototype._searchGalleryControlAndEnableBindings = function() {
                        var _this = this;
                        if (this._gallerySelectionChangingEventBindings === undefined) {
                            this._gallerySelectionChangingEventBindings = null;
                            MS.Entertainment.UI.Framework.applyWithSelector(this._domElement, ".win-listview", function(listView) {
                                if (listView) {
                                    var galleryControl = listView.parentElement;
                                    Framework.assert(!_this._gallerySelectionChangingEventBindings, "We only support one gallery on the page currently!");
                                    if (galleryControl && galleryControl.winControl && !_this._gallerySelectionChangingEventBindings) {
                                        _this._gallerySelectionChangingEventBindings = MS.Entertainment.UI.Framework.addEventHandlers(galleryControl, {
                                            selectionchanging: function(eventInfo) {
                                                if (!eventInfo || !eventInfo.detail || !eventInfo.detail.newSelection || !eventInfo.detail.newSelection.count())
                                                    return;
                                                _this.clearModuleSelection()
                                            }, iteminvoked: _this.clearModuleSelection.bind(_this)
                                        }, true);
                                        _this._hasGalleryControl = true
                                    }
                                }
                            })
                        }
                    };
                    ItemSelectionAggregator.prototype._onModuleItemInvoked = function(eventInfo) {
                        this.clearModuleSelection();
                        if (eventInfo.srcElement && eventInfo.srcElement.click)
                            eventInfo.srcElement.click()
                    };
                    ItemSelectionAggregator.prototype._onModuleItemDragStart = function(eventInfo) {
                        var draggedItemElement = eventInfo.srcElement;
                        var currentSelectionCount = this._selectedSrcElementKeys ? this._selectedSrcElementKeys.length : 0;
                        this._clearDragStyling();
                        while (draggedItemElement && !draggedItemElement.clickDataContext)
                            draggedItemElement = draggedItemElement.parentElement;
                        if (currentSelectionCount > 0)
                            if (draggedItemElement && draggedItemElement.winControl)
                                draggedItemElement.winControl.selected = true;
                            else
                                draggedItemElement = null;
                        if (draggedItemElement && draggedItemElement.clickDataContext) {
                            this._searchGalleryControlAndEnableBindings();
                            this._draggedElements = [];
                            for (var i = currentSelectionCount - 1; i >= 0; i--) {
                                var element = this._selectedElementWeakRefTable.get(this._selectedSrcElementKeys[i]);
                                if (element && element.winControl && element.winControl.selected && element !== event.srcElement) {
                                    MS.Entertainment.Utilities.safeAddClass(element, ItemSelectionAggregator.draggingStateClass);
                                    this._draggedElements.push(element)
                                }
                            }
                            var mediaItem = draggedItemElement.clickDataContext.data || draggedItemElement.clickDataContext;
                            this.dispatchEvent("mediaItemDragStart", {draggedItem: mediaItem})
                        }
                    };
                    ItemSelectionAggregator.prototype._onModuleItemDragEnd = function(eventInfo) {
                        this._clearDragStyling();
                        this.dispatchEvent("mediaItemDragEnd")
                    };
                    ItemSelectionAggregator.prototype._clearDragStyling = function() {
                        if (this._draggedElements) {
                            this._draggedElements.forEach(function(element) {
                                MS.Entertainment.Utilities.safeRemoveClass(element, ItemSelectionAggregator.draggingStateClass)
                            });
                            this._draggedElements = null
                        }
                    };
                    ItemSelectionAggregator.prototype._onSelectionChanged = function(eventInfo) {
                        if (!eventInfo.srcElement)
                            return;
                        var moduleId = eventInfo.srcElement.getAttribute("data-ent-moduleId");
                        if (moduleId) {
                            this._searchGalleryControlAndEnableBindings();
                            if (eventInfo.srcElement.winControl) {
                                var mediaItem = eventInfo.srcElement.clickDataContext.data || eventInfo.srcElement.clickDataContext;
                                var key;
                                if (mediaItem.hasServiceId)
                                    key = mediaItem.serviceId.toLowerCase();
                                else
                                    key = mediaItem.libraryId;
                                if (eventInfo.srcElement.winControl.selected) {
                                    if (this._hasGalleryControl)
                                        MS.Entertainment.UI.Controls.GalleryControl.searchAndApply(this._domElement, this._clearGallerySelection.bind(this));
                                    if (this._selectedItemModuleId !== moduleId) {
                                        this.clearModuleSelection();
                                        this._selectedItemModuleId = moduleId
                                    }
                                    this._selectedMediaItems.push(mediaItem);
                                    this._selectedElementWeakRefTable.set(eventInfo.srcElement, key);
                                    this._selectedSrcElementKeys.push(key)
                                }
                                else {
                                    var itemIndex = this._selectedMediaItems.indexOf(mediaItem);
                                    if (itemIndex > -1)
                                        this._selectedMediaItems.splice(itemIndex, 1);
                                    var keyIndex = this._selectedSrcElementKeys.indexOf(key);
                                    if (keyIndex > -1)
                                        this._selectedSrcElementKeys.splice(keyIndex, 1)
                                }
                                this.dispatchEvent("selectedMediaItemsChanged")
                            }
                        }
                    };
                    ItemSelectionAggregator.prototype._clearGallerySelection = function(galleryControl) {
                        if (galleryControl) {
                            galleryControl.clearInvocation();
                            galleryControl.clearSelection()
                        }
                    };
                    ItemSelectionAggregator.draggingStateClass = "state_dragging";
                    return ItemSelectionAggregator
                })(MS.Entertainment.UI.Framework.ObservableBase);
            Framework.ItemSelectionAggregator = ItemSelectionAggregator
        })(Framework = Entertainment.Framework || (Entertainment.Framework = {}))
    })(Entertainment = MS.Entertainment || (MS.Entertainment = {}))
})(MS || (MS = {}))
})();
/* >>>>>>/components/playback/concurrentstreamingrestriction.js:16882 */
(function() {
/* Copyright (C) Microsoft Corporation. All rights reserved. */

(function() {
    "use strict";
    MS.Entertainment.UI.Debug.defineAssert("MS.Entertainment.Platform.Playback");
    WinJS.Namespace.define("MS.Entertainment.Platform.Playback", {ConcurrentStreamingRestriction: MS.Entertainment.UI.Framework.define(function ConcurrentStreamingRestriction_constructor(playbackControl) {
            this._playbackControl = playbackControl;
            this._observe(playbackControl)
        }, {
            _playbackControl: null, _transportState: null, _currentMedia: null, _concurrentStreamingRestrictionModel: null, _mapStartToResume: false, _playToSenderConnectionState: Windows.Media.PlayTo.PlayToConnectionState.disconnected, _concurrentStreamingRestrictionModelInitialized: false, _blockStreamingCallback: null, _observe: function observe(playbackControl) {
                    var that = this;
                    this._playbackControl = playbackControl;
                    playbackControl.bind("currentMedia", function(newMediaInstance) {
                        that._onCurrentMediaChanged(newMediaInstance)
                    });
                    playbackControl.bind("currentTransportState", function(newTransportState) {
                        that._onCurrentTransportStateChanged(newTransportState)
                    });
                    playbackControl.bind("playToSenderConnectionState", function(newPlayToSenderConnectionState) {
                        that._onCurrentDlnaStateChanged(newPlayToSenderConnectionState)
                    })
                }, _onCurrentMediaChanged: function onCurrentMediaChanged(newMediaInstance) {
                    if (this._blockStreamingCallback) {
                        this._blockStreamingCallback.cancel();
                        this._blockStreamingCallback = null
                    }
                    this._concurrentStreamingRestrictionModel = null;
                    this._transportState = null;
                    this._currentMedia = null;
                    this._mapStartToResume = false;
                    if (newMediaInstance) {
                        this._currentMedia = newMediaInstance;
                        if (this._shouldEnforceVideoConcurrentStreamingRestriction(newMediaInstance)) {
                            this._concurrentStreamingRestrictionModel = new Microsoft.Entertainment.Util.ConcurrentStreamingRestriction;
                            this._concurrentStreamingRestrictionModelInitialized = false;
                            this._blockStreamingCallback = MS.Entertainment.Utilities.addEvents(this._concurrentStreamingRestrictionModel, {blockstreaming: this._blockStreaming.bind(this)})
                        }
                    }
                }, _onCurrentTransportStateChanged: function onCurrentTransportStateChanged(newTransportState) {
                    this._transportState = newTransportState;
                    var initializationPromise;
                    if (this._transportState === MS.Entertainment.Platform.Playback.TransportState.playing && this._concurrentStreamingRestrictionModel && (!this._concurrentStreamingRestrictionModelInitialized))
                        initializationPromise = this._concurrentStreamingRestrictionModel.initializeAsync(this._currentMedia.initialLease ? this._currentMedia.initialLease.url : "", this._currentMedia.serviceIdSafe, this._currentMedia.licenseKeyId, this._currentMedia.offerId).then(function initializeAsync_complete() {
                            this._concurrentStreamingRestrictionModelInitialized = true
                        }.bind(this));
                    else
                        initializationPromise = WinJS.Promise.as();
                    initializationPromise.done(function initialize_complete() {
                        this._reportStreamingState()
                    }.bind(this), function initialize_error(error) {
                        this._blockStreaming(error)
                    }.bind(this))
                }, _onCurrentDlnaStateChanged: function _onCurrentDlnaStateChanged(newPlayToSenderConnectionState) {
                    if (this._playToSenderConnectionState !== newPlayToSenderConnectionState) {
                        this._playToSenderConnectionState = newPlayToSenderConnectionState;
                        switch (newPlayToSenderConnectionState) {
                            case Windows.Media.PlayTo.PlayToConnectionState.connected:
                                break;
                            case Windows.Media.PlayTo.PlayToConnectionState.rendering:
                                if (this._concurrentStreamingRestrictionModel && this._concurrentStreamingRestrictionModelInitialized) {
                                    this._concurrentStreamingRestrictionModel.reportStreamingAction(Microsoft.Entertainment.Util.EStreamingActionType.eStreamingActionTypeStop);
                                    this._concurrentStreamingRestrictionModel = null;
                                    this._concurrentStreamingRestrictionModelInitialized = false
                                }
                                break;
                            case Windows.Media.PlayTo.PlayToConnectionState.disconnected:
                                if (this._currentMedia && this._shouldEnforceVideoConcurrentStreamingRestriction(this._currentMedia)) {
                                    this._onCurrentMediaChanged(this._currentMedia);
                                    if (this._currentMedia.initialLease && this._concurrentStreamingRestrictionModel && !this._concurrentStreamingRestrictionModelInitialized)
                                        this._concurrentStreamingRestrictionModel.initializeAsync(this._currentMedia.initialLease ? this._currentMedia.initialLease.url : "", this._currentMedia.serviceIdSafe, this._currentMedia.licenseKeyId, this._currentMedia.offerId).done(function initializeAsync_complete() {
                                            this._concurrentStreamingRestrictionModelInitialized = true
                                        }.bind(this))
                                }
                                break;
                            default:
                                MS.Entertainment.UI.Controls.assert(false, "unknown playto sender state: " + newPlayToSenderConnectionState.toString());
                                break
                        }
                    }
                }, _reportStreamingState: function reportStreamingState() {
                    if (this._concurrentStreamingRestrictionModel && this._concurrentStreamingRestrictionModelInitialized && this._playToSenderConnectionState === Windows.Media.PlayTo.PlayToConnectionState.disconnected) {
                        var reportState = null;
                        switch (this._transportState) {
                            case MS.Entertainment.Platform.Playback.TransportState.playing:
                                if (this._mapStartToResume)
                                    reportState = Microsoft.Entertainment.Util.EStreamingActionType.eStreamingActionTypeResume;
                                else {
                                    reportState = Microsoft.Entertainment.Util.EStreamingActionType.eStreamingActionTypeStart;
                                    this._mapStartToResume = true
                                }
                                break;
                            case MS.Entertainment.Platform.Playback.TransportState.paused:
                                reportState = Microsoft.Entertainment.Util.EStreamingActionType.eStreamingActionTypePause;
                                break;
                            case MS.Entertainment.Platform.Playback.TransportState.stopped:
                                reportState = Microsoft.Entertainment.Util.EStreamingActionType.eStreamingActionTypeStop;
                                break;
                            default:
                                break
                        }
                        if (reportState !== null)
                            this._concurrentStreamingRestrictionModel.reportStreamingAction(reportState)
                    }
                }, _blockStreaming: function _blockStreaming(errorCode)
                {
                    var error = {
                            code: parseInt(errorCode), innerError: errorCode
                        };
                    if (isNaN(error.code))
                        error = errorCode;
                    this._playbackControl.forceError(error)
                }, _shouldEnforceVideoConcurrentStreamingRestriction: function _shouldEnforceVideoConcurrentStreamingRestriction(mediaInstance) {
                    if (mediaInstance && mediaInstance.isVideo() && mediaInstance.hasOwnProperty("protectionState") && mediaInstance.protectionState === MS.Entertainment.Platform.Playback.ProtectionState.drmProtected && this._playToSenderConnectionState === Windows.Media.PlayTo.PlayToConnectionState.disconnected) {
                        var uri = new Windows.Foundation.Uri(mediaInstance.source);
                        if (uri.schemeName.toLocaleLowerCase() === "http" || uri.schemeName.toLocaleLowerCase() === "https")
                            if (!MS.Entertainment.Utilities.isEmptyGuid(mediaInstance.licenseKeyId) && !MS.Entertainment.Utilities.isEmptyGuid(mediaInstance.serviceIdSafe))
                                return true;
                            else {
                                MS.Entertainment.Platform.Playback.assert(false, "drmProtected content must have a media id and license key id");
                                this._blockStreaming(MS.Entertainment.Platform.Playback.Error.NS_E_NO_PLAYABLE_MEDIA);
                                return true
                            }
                    }
                    return false
                }
        }, {})})
})()
})();
