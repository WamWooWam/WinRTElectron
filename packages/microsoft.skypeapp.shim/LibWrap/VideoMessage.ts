// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { OnPropertyChangeType } from "./OnPropertyChangeType";
import { OnThumbnailPathType } from "./OnThumbnailPathType";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('LibWrap.VideoMessage')
export class VideoMessage implements IClosable { 
    static vod_STATUS_VOD_PLAYABLE_LOCAL: number = null;
    static vod_STATUS_VOD_PLAYABLE: number = null;
    static vod_STATUS_VOD_CONVERTING: number = null;
    static vod_STATUS_VOD_NOT_AVAILABLE: number = null;
    static status_EXPIRED: number = null;
    static status_DELETED: number = null;
    static status_INVALID: number = null;
    static status_CANCELED: number = null;
    static status_FAILED: number = null;
    static status_UPLOADED: number = null;
    static status_UPLOADING: number = null;
    static status_RECORDED: number = null;
    static status_BLANK: number = null;
    getObjectID(): number {
        throw new Error('VideoMessage#getObjectID not implemented')
    }
    getDbID(): number {
        throw new Error('VideoMessage#getDbID not implemented')
    }
    getStrProperty(propKey: number): string {
        throw new Error('VideoMessage#getStrProperty not implemented')
    }
    getStrPropertyWithXmlStripped(propKey: number): string {
        throw new Error('VideoMessage#getStrPropertyWithXmlStripped not implemented')
    }
    getIntProperty(propKey: number): number {
        throw new Error('VideoMessage#getIntProperty not implemented')
    }
    setExtendedStrProperty(propKey: number, value: string): void {
        console.warn('VideoMessage#setExtendedStrProperty not implemented')
    }
    setExtendedIntProperty(propKey: number, value: number): void {
        console.warn('VideoMessage#setExtendedIntProperty not implemented')
    }
    static statustoString(val: number): string {
        throw new Error('VideoMessage#statustoString not implemented')
    }
    static vod_STATUSToString(val: number): string {
        throw new Error('VideoMessage#vod_STATUSToString not implemented')
    }
    prepareForPlay(allowLocalPath: boolean): void {
        console.warn('VideoMessage#prepareForPlay not implemented')
    }
    getThumbnail(): void {
        console.warn('VideoMessage#getThumbnail not implemented')
    }
    discard(): void {
        console.warn('VideoMessage#discard not implemented')
    }
    getThumbnailAsync(): IAsyncAction {
        throw new Error('VideoMessage#getThumbnailAsync not implemented')
    }
    close(): void {
        console.warn('VideoMessage#close not implemented')
    }

    private __propertyChange: Set<OnPropertyChangeType> = new Set();
    @Enumerable(true)
    set onpropertychange(handler: OnPropertyChangeType) {
        this.__propertyChange.add(handler);
    }

    private __thumbnailPath: Set<OnThumbnailPathType> = new Set();
    @Enumerable(true)
    set onthumbnailpath(handler: OnThumbnailPathType) {
        this.__thumbnailPath.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.add(handler);
                break;
            case 'thumbnailpath':
                this.__thumbnailPath.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.delete(handler);
                break;
            case 'thumbnailpath':
                this.__thumbnailPath.delete(handler);
                break;
        }
    }
}
