// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { ConversationMatchEvent } from "./ConversationMatchEvent";
import { ConversationSearchEvent } from "./ConversationSearchEvent";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('LibWrap.ConversationSearch')
export class ConversationSearch implements IClosable { 
    start(term: string): number {
        throw new Error('ConversationSearch#start not implemented')
    }
    cancel(): void {
        console.warn('ConversationSearch#cancel not implemented')
    }
    close(): void {
        console.warn('ConversationSearch#close not implemented')
    }

    private __done: Set<ConversationSearchEvent> = new Set();
    @Enumerable(true)
    set ondone(handler: ConversationSearchEvent) {
        this.__done.add(handler);
    }

    private __match: Set<ConversationMatchEvent> = new Set();
    @Enumerable(true)
    set onmatch(handler: ConversationMatchEvent) {
        this.__match.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'done':
                this.__done.add(handler);
                break;
            case 'match':
                this.__match.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'done':
                this.__done.delete(handler);
                break;
            case 'match':
                this.__match.delete(handler);
                break;
        }
    }
}
