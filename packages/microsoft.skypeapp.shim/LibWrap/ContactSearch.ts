// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { ContactSearchMatchEvent } from "./ContactSearchMatchEvent";
import { OnPropertyChangeType } from "./OnPropertyChangeType";
import { VectUnsignedInt } from "./VectUnsignedInt";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('LibWrap.ContactSearch')
export class ContactSearch implements IClosable { 
    static contact_TYPE_LYNC: number = null;
    static contact_TYPE_SKYPE: number = null;
    static condition_CONTAINS_WORD_PREFIXES: number = null;
    static condition_CONTAINS_WORDS: number = null;
    static condition_PREFIX_LE: number = null;
    static condition_PREFIX_GE: number = null;
    static condition_PREFIX_EQ: number = null;
    static condition_LE: number = null;
    static condition_LT: number = null;
    static condition_GE: number = null;
    static condition_GT: number = null;
    static condition_EQ: number = null;
    static status_FAILED: number = null;
    static status_FINISHED: number = null;
    static status_EXTENDABLE: number = null;
    static status_PENDING: number = null;
    static status_CONSTRUCTION: number = null;
    getObjectID(): number {
        throw new Error('ContactSearch#getObjectID not implemented')
    }
    getDbID(): number {
        throw new Error('ContactSearch#getDbID not implemented')
    }
    getStrProperty(propKey: number): string {
        throw new Error('ContactSearch#getStrProperty not implemented')
    }
    getStrPropertyWithXmlStripped(propKey: number): string {
        throw new Error('ContactSearch#getStrPropertyWithXmlStripped not implemented')
    }
    getIntProperty(propKey: number): number {
        throw new Error('ContactSearch#getIntProperty not implemented')
    }
    setExtendedStrProperty(propKey: number, value: string): void {
        console.warn('ContactSearch#setExtendedStrProperty not implemented')
    }
    setExtendedIntProperty(propKey: number, value: number): void {
        console.warn('ContactSearch#setExtendedIntProperty not implemented')
    }
    static statustoString(val: number): string {
        throw new Error('ContactSearch#statustoString not implemented')
    }
    addMinAgeTerm(min_age_in_years: number, add_to_subs: boolean): boolean {
        throw new Error('ContactSearch#addMinAgeTerm not implemented')
    }
    addMaxAgeTerm(max_age_in_years: number, add_to_subs: boolean): boolean {
        throw new Error('ContactSearch#addMaxAgeTerm not implemented')
    }
    addEmailTerm(email: string, add_to_subs: boolean): boolean {
        throw new Error('ContactSearch#addEmailTerm not implemented')
    }
    addLanguageTerm(language: string, add_to_subs: boolean): boolean {
        throw new Error('ContactSearch#addLanguageTerm not implemented')
    }
    static conditiontoString(val: number): string {
        throw new Error('ContactSearch#conditiontoString not implemented')
    }
    addStrTerm(prop: number, cond: number, value: string, add_to_subs: boolean): boolean {
        throw new Error('ContactSearch#addStrTerm not implemented')
    }
    addIntTerm(prop: number, cond: number, value: number, add_to_subs: boolean): boolean {
        throw new Error('ContactSearch#addIntTerm not implemented')
    }
    addOr(): void {
        console.warn('ContactSearch#addOr not implemented')
    }
    isValid(): boolean {
        throw new Error('ContactSearch#isValid not implemented')
    }
    submit(): void {
        console.warn('ContactSearch#submit not implemented')
    }
    extend(): void {
        console.warn('ContactSearch#extend not implemented')
    }
    _Release(): void {
        console.warn('ContactSearch#_Release not implemented')
    }
    getResults(contacts: VectUnsignedInt, from: number, count: number): void {
        console.warn('ContactSearch#getResults not implemented')
    }
    static contact_TYPEToString(val: number): string {
        throw new Error('ContactSearch#contact_TYPEToString not implemented')
    }
    setSupportedContactTypes(contactTypesBitmask: number): void {
        console.warn('ContactSearch#setSupportedContactTypes not implemented')
    }
    discard(): void {
        console.warn('ContactSearch#discard not implemented')
    }
    search(text: string): boolean {
        throw new Error('ContactSearch#search not implemented')
    }
    close(): void {
        console.warn('ContactSearch#close not implemented')
    }

    private __match: Set<ContactSearchMatchEvent> = new Set();
    @Enumerable(true)
    set onmatch(handler: ContactSearchMatchEvent) {
        this.__match.add(handler);
    }

    private __propertyChange: Set<OnPropertyChangeType> = new Set();
    @Enumerable(true)
    set onpropertychange(handler: OnPropertyChangeType) {
        this.__propertyChange.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'match':
                this.__match.add(handler);
                break;
            case 'propertychange':
                this.__propertyChange.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'match':
                this.__match.delete(handler);
                break;
            case 'propertychange':
                this.__propertyChange.delete(handler);
                break;
        }
    }
}
