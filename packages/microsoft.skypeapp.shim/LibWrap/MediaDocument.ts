// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { MediaDocumentGetMediaLinkResult } from "./MediaDocumentGetMediaLinkResult";
import { OnDownloadErrorType } from "./OnDownloadErrorType";
import { OnMediaLinkProgressType } from "./OnMediaLinkProgressType";
import { OnMediaLinkStatusChangeType } from "./OnMediaLinkStatusChangeType";
import { OnPropertyChangeType } from "./OnPropertyChangeType";
import { OnUploadErrorType } from "./OnUploadErrorType";
import { OnUploadProgressType } from "./OnUploadProgressType";
import { OnUploadStatusChangedType } from "./OnUploadStatusChangedType";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('LibWrap.MediaDocument')
export class MediaDocument implements IClosable { 
    static network_ERROR_INTERNAL_ERROR: number = null;
    static network_ERROR_PROTOCOL_ERROR: number = null;
    static network_ERROR_CONNECTION_TIMEOUT: number = null;
    static network_ERROR_SERVER_NOT_AVAILABLE: number = null;
    static network_ERROR_SSL_ERROR: number = null;
    static network_ERROR_HOST_NAME_NOT_RESOLVED: number = null;
    static media_GET_POLICY_CANCEL_DOWNLOAD: number = null;
    static media_GET_POLICY_DOWNLOAD_ONLY: number = null;
    static media_GET_POLICY_LINK_ONLY: number = null;
    static media_GET_POLICY_CACHE_THEN_DOWNLOAD: number = null;
    static media_GET_POLICY_CACHE_THEN_LINK: number = null;
    static media_GET_POLICY_CACHE_ONLY: number = null;
    static media_STATUS_MEDIA_BAD_CONTENT: number = null;
    static media_STATUS_MEDIA_PROCESSING: number = null;
    static media_STATUS_MEDIA_NOT_AVAILABLE: number = null;
    static media_STATUS_MEDIA_AVAILABLE_ONLINE: number = null;
    static media_STATUS_MEDIA_LOADED: number = null;
    static media_STATUS_MEDIA_LOADING: number = null;
    static upload_STATUS_UPLOAD_FAILED: number = null;
    static upload_STATUS_UPLOAD_COMPLETED: number = null;
    static upload_STATUS_UPLOAD_IN_PROGRESS: number = null;
    static upload_STATUS_UPLOAD_QUEUED: number = null;
    static upload_STATUS_UPLOAD_NOT_STARTED: number = null;
    static document_TYPE_MEDIA_PHOTO_WITH_AUDIO: number = null;
    static document_TYPE_MEDIA_AUDIO: number = null;
    static document_TYPE_MEDIA_PHOTO: number = null;
    static document_TYPE_MEDIA_VIDEO: number = null;
    static document_TYPE_MEDIA_UNKNOWN: number = null;
    static storage_POLICY_STORAGE_POLICY_TAKE_OWNERSHIP: number = null;
    static storage_POLICY_STORAGE_POLICY_WEAK_LINK: number = null;
    static storage_POLICY_STORAGE_POLICY_MOVE_TO_CACHE: number = null;
    static storage_POLICY_STORAGE_POLICY_COPY_TO_CACHE: number = null;
    static status_FAILED: number = null;
    static status_EXPIRED: number = null;
    static status_DELETED: number = null;
    static status_ACCESS_DENIED: number = null;
    static status_AVAILABLE: number = null;
    static status_NOT_AVAILABLE: number = null;
    static status_NOT_CREATED: number = null;
    getObjectID(): number {
        throw new Error('MediaDocument#getObjectID not implemented')
    }
    getDbID(): number {
        throw new Error('MediaDocument#getDbID not implemented')
    }
    getStrProperty(propKey: number): string {
        throw new Error('MediaDocument#getStrProperty not implemented')
    }
    getStrPropertyWithXmlStripped(propKey: number): string {
        throw new Error('MediaDocument#getStrPropertyWithXmlStripped not implemented')
    }
    getIntProperty(propKey: number): number {
        throw new Error('MediaDocument#getIntProperty not implemented')
    }
    setExtendedStrProperty(propKey: number, value: string): void {
        console.warn('MediaDocument#setExtendedStrProperty not implemented')
    }
    setExtendedIntProperty(propKey: number, value: number): void {
        console.warn('MediaDocument#setExtendedIntProperty not implemented')
    }
    static statustoString(val: number): string {
        throw new Error('MediaDocument#statustoString not implemented')
    }
    static storage_POLICYToString(val: number): string {
        throw new Error('MediaDocument#storage_POLICYToString not implemented')
    }
    static document_TYPEToString(val: number): string {
        throw new Error('MediaDocument#document_TYPEToString not implemented')
    }
    static upload_STATUSToString(val: number): string {
        throw new Error('MediaDocument#upload_STATUSToString not implemented')
    }
    static media_STATUSToString(val: number): string {
        throw new Error('MediaDocument#media_STATUSToString not implemented')
    }
    static media_GET_POLICYToString(val: number): string {
        throw new Error('MediaDocument#media_GET_POLICYToString not implemented')
    }
    static network_ERRORToString(val: number): string {
        throw new Error('MediaDocument#network_ERRORToString not implemented')
    }
    sync(): boolean {
        throw new Error('MediaDocument#sync not implemented')
    }
    getMediaLink(profile: string, policy: number): MediaDocumentGetMediaLinkResult {
        throw new Error('MediaDocument#getMediaLink not implemented')
    }
    setMediaByContentId(contentId: string, path: string, policy: number): boolean {
        throw new Error('MediaDocument#setMediaByContentId not implemented')
    }
    setMediaByProfileId(profileId: string, path: string, policy: number): boolean {
        throw new Error('MediaDocument#setMediaByProfileId not implemented')
    }
    linkProfileToContentId(profileId: string, contentId: string): boolean {
        throw new Error('MediaDocument#linkProfileToContentId not implemented')
    }
    linkProfiles(profileFrom: string, profileTo: string): boolean {
        throw new Error('MediaDocument#linkProfiles not implemented')
    }
    upload(contentId: string): boolean {
        throw new Error('MediaDocument#upload not implemented')
    }
    getUploadStatus(contentId: string): number {
        throw new Error('MediaDocument#getUploadStatus not implemented')
    }
    discard(): void {
        console.warn('MediaDocument#discard not implemented')
    }
    close(): void {
        console.warn('MediaDocument#close not implemented')
    }

    private __propertyChange: Set<OnPropertyChangeType> = new Set();
    @Enumerable(true)
    set onpropertychange(handler: OnPropertyChangeType) {
        this.__propertyChange.add(handler);
    }

    private __downloadError: Set<OnDownloadErrorType> = new Set();
    @Enumerable(true)
    set ondownloaderror(handler: OnDownloadErrorType) {
        this.__downloadError.add(handler);
    }

    private __uploadStatusChanged: Set<OnUploadStatusChangedType> = new Set();
    @Enumerable(true)
    set onuploadstatuschanged(handler: OnUploadStatusChangedType) {
        this.__uploadStatusChanged.add(handler);
    }

    private __uploadProgress: Set<OnUploadProgressType> = new Set();
    @Enumerable(true)
    set onuploadprogress(handler: OnUploadProgressType) {
        this.__uploadProgress.add(handler);
    }

    private __uploadError: Set<OnUploadErrorType> = new Set();
    @Enumerable(true)
    set onuploaderror(handler: OnUploadErrorType) {
        this.__uploadError.add(handler);
    }

    private __mediaLinkProgress: Set<OnMediaLinkProgressType> = new Set();
    @Enumerable(true)
    set onmedialinkprogress(handler: OnMediaLinkProgressType) {
        this.__mediaLinkProgress.add(handler);
    }

    private __mediaLinkStatusChange: Set<OnMediaLinkStatusChangeType> = new Set();
    @Enumerable(true)
    set onmedialinkstatuschange(handler: OnMediaLinkStatusChangeType) {
        this.__mediaLinkStatusChange.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.add(handler);
                break;
            case 'downloaderror':
                this.__downloadError.add(handler);
                break;
            case 'uploadstatuschanged':
                this.__uploadStatusChanged.add(handler);
                break;
            case 'uploadprogress':
                this.__uploadProgress.add(handler);
                break;
            case 'uploaderror':
                this.__uploadError.add(handler);
                break;
            case 'medialinkprogress':
                this.__mediaLinkProgress.add(handler);
                break;
            case 'medialinkstatuschange':
                this.__mediaLinkStatusChange.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.delete(handler);
                break;
            case 'downloaderror':
                this.__downloadError.delete(handler);
                break;
            case 'uploadstatuschanged':
                this.__uploadStatusChanged.delete(handler);
                break;
            case 'uploadprogress':
                this.__uploadProgress.delete(handler);
                break;
            case 'uploaderror':
                this.__uploadError.delete(handler);
                break;
            case 'medialinkprogress':
                this.__mediaLinkProgress.delete(handler);
                break;
            case 'medialinkstatuschange':
                this.__mediaLinkStatusChange.delete(handler);
                break;
        }
    }
}
