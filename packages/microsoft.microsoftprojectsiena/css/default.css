html, body, .rootGrid, #content, #contentHost, #configurationHost, .backStageHost, .fullscreenHost, .notificationHost, #waitHost, #header {
    width: 100%;
    height: 100%;
}

html, body {
    /* TASK: 73298: Remove !important once we remove WinJS styles. */
    background-color: #2A2A2A !important;
}

.rootGrid {
    display: grid;
    grid-template-rows: 1fr auto;
    grid-template-columns: 1fr 0px;
}

.expanded {
    grid-template-columns: 1fr auto;
}

#content {
    grid-row: 1;
    /* Clipping the overflow to prevent visuals from rendering 
       outside of the content area and on top of other UI such
       as express view and command bar. */
    overflow: hidden;
}

/* reset the line height for controls, solve bugs when controls are nested. (example 105795) */
.content,
.appmagic-control-view {
    /* TASK 106740 - Move default.css to LESS and use @line-height-default instead of hard-coded constant */
    line-height: 1.3636;
}

#configurationHost {
    grid-column: 2;
    position: relative;
    z-index: 0;
}

#controlGalleryHost {
    position: absolute;
    top: 0px;
    right: 0px;
    bottom: 88px; /* Subtract the commandbar height since control gallery is position absolute, height needs to be reduced. */
}

.backStageHost, #waitHost, .fullscreenHost, .notificationHost {
    padding-top: 0px;
    grid-column: 1 / span 2;
    grid-row: 1 / span 2;
}

.backStageHost, #waitHost {
    /* Need this so the host shows up on top of everything.
       Without it canvas control will render on top of it. */
    position: absolute;
}

#waitHost {
    /* Keep the wait control hidden until we are waiting on something. */
    display: none;
}

.commandBarHost {
    width: 100%;
    grid-column-end: span 2;
    grid-row: 2;
    position: relative;
}

#appBar {
    /* appBarControl is just a container for topAppBar so, height should be 0 as it is not visible. */
    height: 0px;
}

#restErrorPanelHost {
    height: 0px;
}

@media screen and (-ms-view-state: fullscreen-landscape) {
}

@media screen and (-ms-view-state: filled) {
}

@media screen and (-ms-view-state: snapped) {
}

@media screen and (-ms-view-state: fullscreen-portrait) {
}

.firstLaunch {
    width: 100%;
    height: 100%;
    background: #000000;
    display: grid;
    grid-template-columns: 1fr 80% 1fr;
    grid-template-rows: 1fr auto 100px 35px 1fr;
    z-index: 1002;
    position: absolute;
}

.helpVideo {
    grid-column: 2;
    grid-row: 2;
}

.skipTour {
    min-width: 100px;
    color: #FFFFFF; /*Steed*/
    font-size: 11pt;
    grid-column: 2;
    grid-row: 4;
    justify-self: end;
}

/*
    Element used by textRangeClientRectsFixer to calculate the multiplier needed to fix TextRange.getClientRects.
    The actual text in the element doesn't matter as long as it is non-empty and does not wrap.
*/
#textRangeClientRectsFixerElement {
    visibility: hidden;
    white-space: nowrap;
}
