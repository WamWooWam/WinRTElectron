/* Colors */
/* Misc styles */
#blankPage {
  /*
        Constrain the canvas to the range [0, 100]% of this element.
        This is different from auto, which makes the cell the size of the canvas, which can
        grow larger than this element.
    */
  display: -ms-grid;
  -ms-grid-columns: 100%;
  -ms-grid-rows: minmax(0%, 100%);
  width: 100%;
  height: 100%;
  background-color: #2A2A2A;
}
#blankPage.preview {
  /*
        This fixes weirdness where if the canvas doesn't fit, then in preview mode it'll continue to have
        scrollbars despite occupying the entire screen and despite being scaled to fit by the ViewBox control.
    */
  overflow: hidden;
}
#blankPage .header {
  -ms-grid-column: 1;
  -ms-grid-row: 1;
  width: 100%;
  /*
        The header is a container for controls. To avoid eating clicks at the top of the canvas, we give
        it 0 height, which is fine since it is a non-clipping container.
    */
  height: 0px;
  /*
        Stack the children controls higher than the canvas.
    */
  position: relative;
}
#blankPage .header .addVisual {
  float: right;
  margin-top: 40px;
  margin-right: 40px;
  width: 47px;
  height: 47px;
  border-radius: 50%;
}
@media all and (-ms-high-contrast: active) {
  #blankPage .header .addVisual {
    background-color: Window;
  }
}
/* rgba values used below are compensated to look right when they are behind the opacity = 0.3 shading of the addvisualicon.svg */
#blankPage .header .addVisual:hover,
#blankPage .header .addVisual:focus {
  background-color: #7C017C;
  /* Spellbound */
  outline: none;
}
#blankPage .header .addVisual:active {
  background-color: #6F3F6F;
  /* Nightshade */
}
/*
    Centers the canvas when it is smaller than the available space.
*/
#canvasGrid {
  width: 100%;
  height: 100%;
  -ms-grid-column: 1;
  -ms-grid-row: 1;
  /* Center the canvas within the grid. */
  display: -ms-grid;
  -ms-grid-columns: 1fr auto 1fr;
  -ms-grid-rows: 1fr auto 1fr;
}
#canvasGrid.preview {
  -ms-grid-column: 1;
  -ms-grid-column-span: 3;
  -ms-grid-row: 1;
  -ms-grid-row-span: 4;
}
/*
    Makes the canvas the correct size after applying zoom.

    CSS transforms affect rendering but not layout, so the canvas still occupies its original
    space in the layout even after applying the scaling transform. This element overrides
    that size with a transformed size.
*/
#canvasSizer {
  -ms-grid-column: 2;
  -ms-grid-row: 2;
  /*
        Give some space around the canvas so that it doesn't touch the edge when zoomed in.
        Keep synchronized with AppMagic.AuthoringTool.Constants.ScreenCanvasMargin.
    */
  margin: 35px;
}
@media all and (-ms-high-contrast: active) {
  #canvasSizer {
    outline: 1px solid WindowText;
  }
}
#canvasGrid.selected > #canvasSizer {
  /*
            Apply the outline in post-zoom space so that it remains a constant size regardless
            of the zoom level.
        */
  outline: 15px solid rgba(153, 153, 153, 0.4);
}
@media all and (-ms-high-contrast: active) {
  #canvasGrid.selected > #canvasSizer {
    outline: 15px solid Highlight;
  }
}
#canvasGrid.preview > #canvasSizer {
  outline: 0px;
  margin: 0px;
}
/* Scales the canvas content according to the zoom. */
#canvasScaler {
  transform-origin: 0 0;
}
/*
    Occupy the right column and bottom rows of canvasSizer to prevent them from collapsing in the layout.
    These elements serve as whitespace along these edges.
*/
#canvasGrid > .bottom-space {
  -ms-grid-column: 1;
  -ms-grid-column-span: 3;
  -ms-grid-row: 3;
}
#canvasGrid > .right-space {
  -ms-grid-column: 3;
  -ms-grid-row: 1;
  -ms-grid-row-span: 3;
}
#workspaceCanvas {
  position: absolute;
  left: 0px;
  top: 0px;
  width: 100%;
  height: 100%;
}
#workspaceCanvas.animating {
  /*
            Clip screen canvas animations to the container.

            Only clip when animating to avoid clipping the adorners of visuals placed near the edges.
        */
  overflow: hidden;
}
.isLoading {
  /* Hide the canvas so that users don't see changes while the document is loading. */
  visibility: hidden;
}
#screenDropDown {
  margin-left: 40px;
}
#visualDropDown {
  margin-left: 10px;
}
.visualDropDown {
  /* TASK: 78772 is this the right place for these? */
  float: left;
  margin-top: 40px;
  width: 175px;
  border: solid 1px;
  border-color: #434343;
}
.visualDropDown .visualLabel {
  display: block;
  line-height: 45px;
  padding-left: 0px;
  padding-right: 0px;
  padding-top: 0px;
  padding-bottom: 0px;
  background-color: rgba(42, 42, 42, 0.5);
}
.visualDropDown .visualLabel:hover {
  background-color: #3f3f3f;
}
.visualDropDown.listVisible .visualLabel {
  background-color: rgba(42, 42, 42, 0.5);
  color: #EAEAEA;
}
/* Hide the X button */
input[type=text].visualLabelText::-ms-clear {
  display: none;
}
input[type=text].visualLabelText {
  font-family: "Segoe UI";
  font-size: 11pt;
  color: #FFFFFF;
  /*Steed*/
  background-color: rgba(42, 42, 42, 0);
  /* transparancy 0.0 over rides the ::-ms-check background-color from ui-dark.css and fixes some odd color darkening when using 0.5*/
  border: none;
  margin: 0px;
  width: 141px;
  padding-left: 4px;
  min-height: 45px;
}
@media all and (-ms-high-contrast: active) {
  input[type=text].visualLabelText {
    color: WindowText;
  }
}
.visualDropDown.listVisible input[type=text].visualLabelText {
  color: #FFFFFF;
  /*Steed*/
  background-color: rgba(42, 42, 42, 0);
  /* transparancy 0.0 over rides the ::-ms-check background-color from ui-dark.css and fixes some odd color darkening when using 0.5*/
}
.visualDropDown.listVisible input[type=text].visualLabelText:focus {
  color: #000000;
  background-color: #FFFFFF;
  /*Steed*/
}
input[type=text].visualLabelText:focus {
  color: #000000;
  background-color: #FFFFFF;
  /*Steed*/
}
.visualDropDown.listVisible input[type=text].visualLabelText::selection,
input[type=text].visualLabelText::selection {
  background-color: #777777;
  /*Storm (#777777)*/
}
.visualDropArrow {
  display: inline;
  float: right;
  text-align: center;
  width: 30px;
  height: 45px;
}
@media all and (-ms-high-contrast: black-on-white) {
  .visualDropArrow {
    /* TASK 94750: black-on-white visualDropArrow is not visible */
    /* this seems wrong to me, can we use a system color name here*/
    background-color: black;
  }
}
.visualDropArrow > img {
  height: 8px;
  width: 11px;
}
.visualDropDown.listVisible .visualDropArrow {
  color: #FFFFFF;
}
.visualDropDown .visualList {
  background-color: #000000;
  color: #FFFFFF;
  /*Steed*/
  visibility: hidden;
  opacity: 0;
  transition: visibility linear 80ms, opacity linear 80ms;
  font-family: "Segoe UI";
  font-weight: 400;
  font-size: 11pt;
  margin-top: 1px;
  margin-left: -1px;
  /* Align with the the visual label text. */
  position: absolute;
  max-height: 600px;
  overflow-y: auto;
  -ms-overflow-style: scrollbar;
  /* fixes issue with visualListDivider showing underneath scroll bar. */
  width: 177px;
}
@media all and (-ms-high-contrast: active) {
  .visualDropDown .visualList {
    border: 1px;
    border-style: solid;
    border-color: WindowText;
  }
}
.visualDropDown.listVisible .visualList {
  visibility: visible;
  opacity: 1;
}
.visualDropDown .visualList .visualListDivider {
  background-color: #5c5c5c;
  /* Arsenic */
  height: 1px;
  margin-top: 5px;
  margin-bottom: 5px;
}
.visualDropDown .visualList .visualListItem {
  color: #FFFFFF;
  /*Steed*/
  padding-top: 10px;
  padding-bottom: 10px;
  padding-left: 20px;
  padding-right: 20px;
}
@media all and (-ms-high-contrast: active) {
  .visualDropDown .visualList .visualListItem {
    color: WindowText;
    /*Steed*/
  }
}
.visualDropDown .visualList .visualListItem.selected,
.visualDropDown .visualList .visualListItem.selected:hover {
  background-color: #6F3F6F;
  /*Nighshade*/
  color: #EAEAEA;
}
@media all and (-ms-high-contrast: active) {
  .visualDropDown .visualList .visualListItem.selected,
  .visualDropDown .visualList .visualListItem.selected:hover {
    background-color: Highlight;
    color: HighlightText;
  }
}
.visualDropDown .visualList .visualListItem:hover {
  background-color: #888888;
  /*Nimbus*/
}
