// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { GetLibraryIdFromMediaIdReturnValue } from "./GetLibraryIdFromMediaIdReturnValue";
import { IAlbumMetadata } from "./IAlbumMetadata";
import { IAlbumProvider } from "./IAlbumProvider";
import { IPlayableMediaData } from "./IPlayableMediaData";
import { MediaAvailability } from "./MediaAvailability";
import { RequestType } from "./RequestType";
import { UpdateAlbumMetadataReturnValue } from "./UpdateAlbumMetadataReturnValue";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { AsyncAction, IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { AsyncOperation, IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { MediaStore } from "./MediaStore";
import { Vector } from "winrt/Windows/Foundation/Interop/Vector`1";
import { dbPromise, DBTrack } from "../Database/Utils";

@GenerateShim('Microsoft.Entertainment.Platform.AlbumProvider')
export class AlbumProvider implements IAlbumProvider {
    getPlayabilityByLibraryIdAsync(nLibraryId: number, availabilityFilter: MediaAvailability): IAsyncOperation<IVectorView<IPlayableMediaData>> {
        return AsyncOperation.from(async () => {
            let instance = MediaStore.instance;
            await AsyncAction.to(instance.ensureDatabaseOpenedAsync());

            let database = instance.database;
            let transaction = database.transaction(['track'], 'readonly');
            let trackStore = transaction.objectStore('track').index('albumId');
            let tracks = await dbPromise(trackStore.getAll(nLibraryId)) as DBTrack[];

            return new Vector(tracks.map(t => {
                return {
                    cloudStreamable: false,
                    isDownloading: false,
                    libraryId: t.id,
                    locallyPlayable: true,
                    mediaId: "00000000-0000-0000-0000-000000000000",
                    mediaType: 7
                }
            }))
        })
    }
    getLibraryIdFromMediaIdAsync(mediaId: string): IAsyncOperation<GetLibraryIdFromMediaIdReturnValue> {
        // throw new Error('AlbumProvider#getLibraryIdFromMediaIdAsync not implemented')
        return AsyncOperation.from(async () => {
            return { libraryId: -1 };
        })
    }
    updateAlbumMetadataAsync(pIAlbumMetadata: IAlbumMetadata, requestType: RequestType, iAlbumId: number): IAsyncOperation<UpdateAlbumMetadataReturnValue> {
        throw new Error('AlbumProvider#updateAlbumMetadataAsync not implemented')
    }
    setPlayedStatusAsync(libraryId: number, value: number): IAsyncAction {
        return AsyncAction.default();
    }
}
