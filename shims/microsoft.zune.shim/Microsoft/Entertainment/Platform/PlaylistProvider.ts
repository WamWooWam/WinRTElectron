// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { CreatePlaylistReturnValue } from "./CreatePlaylistReturnValue";
import { GetPlaylistCountsReturnValue } from "./GetPlaylistCountsReturnValue";
import { HasPlaylistBeenSyncedReturnValue } from "./HasPlaylistBeenSyncedReturnValue";
import { IPlayableMediaData } from "./IPlayableMediaData";
import { IPlaylistProvider } from "./IPlaylistProvider";
import { ImportPlaylistCountsReturnValue } from "./ImportPlaylistCountsReturnValue";
import { MediaAvailability } from "./MediaAvailability";
import { PlaylistType } from "./PlaylistType";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { AsyncAction, IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { AsyncOperation, IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.Entertainment.Platform.PlaylistProvider')
export class PlaylistProvider implements IPlaylistProvider {

    private playlist: any[] = [];

    createPlaylistAsync(type: PlaylistType, title: string, overwriteExisting: boolean): IAsyncOperation<CreatePlaylistReturnValue> {
        return AsyncOperation.from(async () => {
            this.playlist.push({});
            return { playlistId: this.playlist.length };
        });
    }

    appendPlaylistItemsAsync(playlistId: number, libraryIds: IVectorView<number>, serviceMediaIds: IVectorView<string>, libraryTypeIds: IVectorView<number>, availabilityFilter: MediaAvailability): IAsyncAction {
        // throw new Error('PlaylistProvider#appendPlaylistItemsAsync not implemented')
        return AsyncAction.from(async () => {

        });
    }
    appendPlaylistItemsAsync2(playlistId: number, libraryIds: IVectorView<number>, serviceMediaIds: IVectorView<string>, libraryTypeIds: IVectorView<number>, availabilityFilter: MediaAvailability, acquisitionContextTypes: IVectorView<number>, acquisitionContexts: IVectorView<number>, acquisitionContextIds: IVectorView<string>, acquisitionAdditionalContexts: IVectorView<string>): IAsyncAction {
        throw new Error('PlaylistProvider#appendPlaylistItemsAsync2 not implemented')
    }
    appendMarketplaceTrackPlaylistItemAsync(playlistId: number, libraryIds: IVectorView<number>, albumTitles: IVectorView<string>, albumArtists: IVectorView<string>, trackTitles: IVectorView<string>, trackArtists: IVectorView<string>, genres: IVectorView<string>, durations: IVectorView<number>, albumArtistSmids: IVectorView<string>, trackArtistSmids: IVectorView<string>, serviceMediaIds: IVectorView<string>, libraryTypeId: number): IAsyncAction {
        throw new Error('PlaylistProvider#appendMarketplaceTrackPlaylistItemAsync not implemented')
    }
    appendMarketplaceTrackPlaylistItemAsync2(playlistId: number, libraryIds: IVectorView<number>, albumTitles: IVectorView<string>, albumArtists: IVectorView<string>, trackTitles: IVectorView<string>, trackArtists: IVectorView<string>, genres: IVectorView<string>, durations: IVectorView<number>, albumArtistSmids: IVectorView<string>, trackArtistSmids: IVectorView<string>, serviceMediaIds: IVectorView<string>, libraryTypeId: number, acquisitionContextTypes: IVectorView<number>, acquisitionContexts: IVectorView<number>, acquisitionContextIds: IVectorView<string>, acquisitionAdditionalContexts: IVectorView<string>): IAsyncAction {
        throw new Error('PlaylistProvider#appendMarketplaceTrackPlaylistItemAsync2 not implemented')
    }
    appendMarketplaceVideoPlaylistItemAsync(playlistId: number, libraryIds: IVectorView<number>, titles: IVectorView<string>, imageUrls: IVectorView<string>, genres: IVectorView<string>, durations: IVectorView<number>, serviceMediaIds: IVectorView<string>, libraryTypeId: number): IAsyncAction {
        throw new Error('PlaylistProvider#appendMarketplaceVideoPlaylistItemAsync not implemented')
    }
    appendMarketplaceVideoPlaylistItemAsync2(playlistId: number, libraryIds: IVectorView<number>, titles: IVectorView<string>, imageUrls: IVectorView<string>, genres: IVectorView<string>, durations: IVectorView<number>, serviceMediaIds: IVectorView<string>, libraryTypeId: number, acquisitionContextTypes: IVectorView<number>, acquisitionContexts: IVectorView<number>, acquisitionContextIds: IVectorView<string>, acquisitionAdditionalContexts: IVectorView<string>): IAsyncAction {
        throw new Error('PlaylistProvider#appendMarketplaceVideoPlaylistItemAsync2 not implemented')
    }
    deletePlaylistAsync(piPlaylistIds: IVectorView<number>, availabilityFilter: MediaAvailability): IAsyncAction {
        throw new Error('PlaylistProvider#deletePlaylistAsync not implemented')
    }
    renamePlaylistAsync(nPlaylistId: number, bstrNewTitle: string): IAsyncAction {
        throw new Error('PlaylistProvider#renamePlaylistAsync not implemented')
    }
    setPlayedStatusAsync(libraryId: number, value: number): IAsyncAction {
        // throw new Error('PlaylistProvider#setPlayedStatusAsync not implemented')
        return AsyncAction.default();
    }
    removePlaylistItemsAsync(nPlaylistId: number, piIndexes: IVectorView<number>, availabilityFilter: MediaAvailability): IAsyncAction {
        throw new Error('PlaylistProvider#removePlaylistItemsAsync not implemented')
    }
    reorderPlaylistItemsAsync(nPlaylistId: number, piIndexes: IVectorView<number>, nIndexToInsertBefore: number, availabilityFilter: MediaAvailability): IAsyncAction {
        throw new Error('PlaylistProvider#reorderPlaylistItemsAsync not implemented')
    }
    savePlaylistAsync(nPlaylistId: number, fullpathFilename: string): IAsyncAction {
        return AsyncAction.default();
    }
    importPlaylistsAsync(): IAsyncOperation<ImportPlaylistCountsReturnValue> {
        return new AsyncOperation((res, rej) => res({ importPlaylistsCount: 0 }));
    }
    resumeImportPlaylistsAsync(): IAsyncOperation<ImportPlaylistCountsReturnValue> {
        return new AsyncOperation((res, rej) => res({ importPlaylistsCount: 0 }));
    }
    getPlayabilityByLibraryIdAsync(nLibraryId: number, availabilityFilter: MediaAvailability): IAsyncOperation<IVectorView<IPlayableMediaData>> {
        throw new Error('PlaylistProvider#getPlayabilityByLibraryIdAsync not implemented')
    }
    setPlaylistDateEditedToNowAsync(nPlaylistId: number): IAsyncAction {
        throw new Error('PlaylistProvider#setPlaylistDateEditedToNowAsync not implemented')
    }
    setPlaylistKeepOfflineAsync(nPlaylistId: number, fKeepOffline: boolean): IAsyncAction {
        throw new Error('PlaylistProvider#setPlaylistKeepOfflineAsync not implemented')
    }
    savePlaylistRadioSeedAsync(nPlaylistId: number, smartDjSeed: string): IAsyncAction {
        throw new Error('PlaylistProvider#savePlaylistRadioSeedAsync not implemented')
    }
    savePlaylistCurrentItemIndexAsync(nPlaylistId: number, currentItemIndex: number): IAsyncAction {
        // throw new Error('PlaylistProvider#savePlaylistCurrentItemIndexAsync not implemented')
        return AsyncAction.default();
    }
    saveNowPlayingPlaylistAsync(playlistName: string): IAsyncAction {
        throw new Error('PlaylistProvider#saveNowPlayingPlaylistAsync not implemented')
    }
    getPlaylistItemCountsAsync(nPlaylistId: number): IAsyncOperation<GetPlaylistCountsReturnValue> {
        throw new Error('PlaylistProvider#getPlaylistItemCountsAsync not implemented')
    }
    hasPlaylistBeenSyncedAsync(nPlaylistId: number): IAsyncOperation<HasPlaylistBeenSyncedReturnValue> {
        throw new Error('PlaylistProvider#hasPlaylistBeenSyncedAsync not implemented')
    }
}
