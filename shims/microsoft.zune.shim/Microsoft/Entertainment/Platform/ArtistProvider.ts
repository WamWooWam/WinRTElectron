// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { GetLibraryIdFromMediaIdReturnValue } from "./GetLibraryIdFromMediaIdReturnValue";
import { HasMediaReturnValue } from "./HasMediaReturnValue";
import { IArtistProvider } from "./IArtistProvider";
import { IPlayableMediaData } from "./IPlayableMediaData";
import { MediaAvailability } from "./MediaAvailability";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { AsyncOperation, IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.Entertainment.Platform.ArtistProvider')
export class ArtistProvider implements IArtistProvider { 
    getLibraryIdFromMediaIdAsync(mediaId: string): IAsyncOperation<GetLibraryIdFromMediaIdReturnValue> {
        //throw new Error('ArtistProvider#getLibraryIdFromMediaIdAsync not implemented')
        return AsyncOperation.from(async () => {
            return { libraryId: -1 };
        })
    }
    getPlayabilityByLibraryIdAsync(nLibraryId: number, availabilityFilter: MediaAvailability): IAsyncOperation<IVectorView<IPlayableMediaData>> {
        throw new Error('ArtistProvider#getPlayabilityByLibraryIdAsync not implemented')
    }
    hasLocalMediaAsync(libraryId: number): IAsyncOperation<HasMediaReturnValue> {
        throw new Error('ArtistProvider#hasLocalMediaAsync not implemented')
    }
    hasRemoteMediaAsync(libraryId: number): IAsyncOperation<HasMediaReturnValue> {
        throw new Error('ArtistProvider#hasRemoteMediaAsync not implemented')
    }
}
