// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------


export interface ILibrary {
    isBackgroundWorkLock_AcquiredEnabled: boolean;
    isBackgroundWorkLock_ReleasedEnabled: boolean;
    isBackgroundWorkLock_RequestedEnabled: boolean;
    isCollectionBuildingBeginEnabled: boolean;
    isCollectionBuildingCloudCollectionV2FirstTrackAddedEnabled: boolean;
    isCollectionBuildingEndEnabled: boolean;
    isCollectionBuildingMDLCProgressEnabled: boolean;
    isCollectionBuildingMediaSyncedEnabled: boolean;
    isCollectionBuildingMissingMetadataEnabled: boolean;
    isCollectionBuildingProgressEnabled: boolean;
    isDatabaseCloseCompletedEnabled: boolean;
    isDatabaseCloseStartedEnabled: boolean;
    isDatabaseOpenCompletedEnabled: boolean;
    isDatabaseOpenStartedEnabled: boolean;
    isDbCleanupOnUserSignedOutCompletedEnabled: boolean;
    isDbCleanupOnUserSignedOutStartedEnabled: boolean;
    isEasyTransferAddingPathsEnabled: boolean;
    isEasyTransferBeginImportingMetadataEnabled: boolean;
    isEasyTransferBeginImportingPlaylistsEnabled: boolean;
    isEasyTransferCompleteEnabled: boolean;
    isEasyTransferCompletedImportingMetadataEnabled: boolean;
    isEasyTransferCompletedImportingPlaylistsEnabled: boolean;
    isEasyTransferConfigParseFailedEnabled: boolean;
    isEasyTransferConfigParseSucceededEnabled: boolean;
    isEasyTransferFailedToLocateMediaItemEnabled: boolean;
    isEasyTransferFoundConfigEnabled: boolean;
    isEasyTransferImportedMetadataEnabled: boolean;
    isEasyTransferImportedPlaylistEnabled: boolean;
    isEasyTransferIterationCompleteEnabled: boolean;
    isEasyTransferIterationFailedEnabled: boolean;
    isEasyTransferIterationStartedEnabled: boolean;
    isEasyTransferLocatedMediaItemEnabled: boolean;
    isEasyTransferLocatingMediaItemEnabled: boolean;
    isEasyTransferMatchedByFileUrlEnabled: boolean;
    isEasyTransferNoConfigEnabled: boolean;
    isEasyTransferNoPathsToAddEnabled: boolean;
    isEasyTransferParseErrorEnabled: boolean;
    isEasyTransferParsingConfigEnabled: boolean;
    isEasyTransferStateChangeEnabled: boolean;
    isFileProcessedEnabled: boolean;
    isFingerprintComputedEnabled: boolean;
    isFingerprintGeneration_EndOfStreamReachedEnabled: boolean;
    isFingerprintGeneration_FingerprintRetrievedEnabled: boolean;
    isFingerprintGeneration_InternalErrorEnabled: boolean;
    isFingerprintGeneration_SourceReaderErrorEnabled: boolean;
    isFingerprintIdFoundEnabled: boolean;
    isFingerprintingCompleteEnabled: boolean;
    isFingerprintingStartedEnabled: boolean;
    isGetImmediateFingerprintsCompleteEnabled: boolean;
    isGetImmediateFingerprintsStartEnabled: boolean;
    isGrovelerAddFileEnabled: boolean;
    isGrovelerAdditionScanCompletedEnabled: boolean;
    isGrovelerAdditionScanStartedEnabled: boolean;
    isGrovelerDefinitionChangedNotificationReceivedEnabled: boolean;
    isGrovelerDeleteScanCompletedEnabled: boolean;
    isGrovelerDeleteScanStartedEnabled: boolean;
    isGrovelerFullScanSkippedEnabled: boolean;
    isGrovelerGetEmptyItemListEnabled: boolean;
    isGrovelerGetFilesAsyncRetryEnabled: boolean;
    isGrovelerGetResultsErrorEnabled: boolean;
    isGrovelerIsQuickGrovelNeededEnabled: boolean;
    isGrovelerMasterRatingFileDirtySetEnabled: boolean;
    isGrovelerNetworkConnectedEnabled: boolean;
    isGrovelerNetworkShareAccessedEnabled: boolean;
    isGrovelerNotificationReceivedEnabled: boolean;
    isGrovelerPlaylistScanCompletedEnabled: boolean;
    isGrovelerPlaylistScanStartedEnabled: boolean;
    isGrovelerQueryIndexerDiffEnabled: boolean;
    isGrovelerQuickScanCompletedEnabled: boolean;
    isGrovelerQuickScanStartedEnabled: boolean;
    isGrovelerReadMasterRatingFileCompletedEnabled: boolean;
    isGrovelerReadMasterRatingFileStartedEnabled: boolean;
    isGrovelerReadMasterRatingFileTriggeredEnabled: boolean;
    isGrovelerRefreshLicenseCompletedEnabled: boolean;
    isGrovelerRefreshLicenseStartedEnabled: boolean;
    isGrovelerRetriesExhaustedEnabled: boolean;
    isGrovelerScanCompletedEnabled: boolean;
    isGrovelerScanStartedEnabled: boolean;
    isGrovelerSecondScanCompletedEnabled: boolean;
    isGrovelerSecondScanStartedEnabled: boolean;
    isGrovelerSetFileAvailableEnabled: boolean;
    isGrovelerSetFileUnavailableEnabled: boolean;
    isGrovelerTopLevelFolderAddedEnabled: boolean;
    isGrovelerWaitForCompletionRetryEnabled: boolean;
    isGrovelerWriteMasterRatingFileCompletedEnabled: boolean;
    isGrovelerWriteMasterRatingFileStartedEnabled: boolean;
    isGrovelerWriteMasterRatingFileTriggeredEnabled: boolean;
    isImmediateFingerprintRetrievedEnabled: boolean;
    isMDLCCompletedEnabled: boolean;
    isMDLCStartedEnabled: boolean;
    isPlaylistIOCompletedEnabled: boolean;
    isPlaylistIOStartedEnabled: boolean;
    isProcessRemainingFilesCompleteEnabled: boolean;
    isProcessRemainingFilesStartedEnabled: boolean;
    isQueryCompletedEnabled: boolean;
    isQueryStartedEnabled: boolean;
    traceEasyTransferIterationStarted(): void;
    traceEasyTransferFoundConfig(): void;
    traceEasyTransferNoConfig(): void;
    traceEasyTransferParsingConfig(): void;
    traceEasyTransferConfigParseFailed(): void;
    traceEasyTransferConfigParseSucceeded(): void;
    traceEasyTransferAddingPaths(): void;
    traceEasyTransferNoPathsToAdd(): void;
    traceEasyTransferBeginImportingMetadata(): void;
    traceEasyTransferCompletedImportingMetadata(): void;
    traceEasyTransferBeginImportingPlaylists(): void;
    traceEasyTransferCompletedImportingPlaylists(): void;
    traceEasyTransferIterationComplete(): void;
    traceEasyTransferComplete(): void;
    traceEasyTransferIterationFailed(): void;
    traceEasyTransferParseError(line: number, column: number, message: string): void;
    traceEasyTransferImportedMetadata(mediaId: number, rating: number, playCount: number): void;
    traceEasyTransferImportedPlaylist(name: string, trackCount: number, imported: boolean): void;
    traceEasyTransferLocatingMediaItem(location: string): void;
    traceEasyTransferLocatedMediaItem(mediaId: number, created: boolean): void;
    traceEasyTransferStateChange(oldState: number, newState: number): void;
    traceEasyTransferFailedToLocateMediaItem(hresult: number): void;
    traceEasyTransferMatchedByFileUrl(): void;
    traceGrovelerScanStarted(): void;
    traceGrovelerScanCompleted(fileCount: number): void;
    traceGrovelerQuickScanStarted(): void;
    traceGrovelerQuickScanCompleted(receivedFileCount: number, modifiedFileCount: number): void;
    traceGrovelerDeleteScanStarted(): void;
    traceGrovelerDeleteScanCompleted(fileCount: number): void;
    traceGrovelerPlaylistScanStarted(): void;
    traceGrovelerPlaylistScanCompleted(fileCount: number): void;
    traceGrovelerAdditionScanStarted(): void;
    traceGrovelerAdditionScanCompleted(fileCount: number): void;
    traceGrovelerFullScanSkipped(): void;
    traceGrovelerTopLevelFolderAdded(): void;
    traceGrovelerNotificationReceived(): void;
    traceGrovelerNetworkConnected(): void;
    traceGrovelerNetworkShareAccessed(): void;
    traceGrovelerMasterRatingFileDirtySet(): void;
    traceGrovelerWriteMasterRatingFileTriggered(): void;
    traceGrovelerWriteMasterRatingFileStarted(): void;
    traceGrovelerWriteMasterRatingFileCompleted(hresult: number, ratingCount: number): void;
    traceGrovelerReadMasterRatingFileTriggered(): void;
    traceGrovelerReadMasterRatingFileStarted(): void;
    traceGrovelerReadMasterRatingFileCompleted(hresult: number, ratingCount: number): void;
    traceGrovelerQueryIndexerDiff(timestamp: string): void;
    traceGrovelerIsQuickGrovelNeeded(currentCount: number, changedCount: number, quickScanNeeded: boolean): void;
    traceGrovelerGetFilesAsyncRetry(hresult: number, retryCount: number): void;
    traceGrovelerWaitForCompletionRetry(hresult: number, retryCount: number): void;
    traceGrovelerGetResultsError(hresult: number): void;
    traceGrovelerGetEmptyItemList(hresult: number): void;
    traceGrovelerRefreshLicenseStarted(): void;
    traceGrovelerRefreshLicenseCompleted(hresult: number): void;
    traceGrovelerDefinitionChangedNotificationReceived(): void;
    traceGrovelerRetriesExhausted(hresult: number, fileCount: number): void;
    traceGrovelerAddFile(hresult: number, fileUrl: string): void;
    traceGrovelerSetFileAvailable(fileUrl: string): void;
    traceGrovelerSetFileUnavailable(fileUrl: string): void;
    traceGrovelerSecondScanStarted(): void;
    traceGrovelerSecondScanCompleted(fileCount: number, unindexedFileCount: number, unknownFileCount: number): void;
    traceMDLCStarted(): void;
    traceMDLCCompleted(): void;
    traceDatabaseOpenStarted(): void;
    traceDatabaseOpenCompleted(): void;
    traceDatabaseCloseStarted(): void;
    traceDatabaseCloseCompleted(): void;
    traceDbCleanupOnUserSignedOutStarted(): void;
    traceDbCleanupOnUserSignedOutCompleted(): void;
    traceQueryStarted(queryObjectInstanceId: number, queryType: string, actionName: string): void;
    traceQueryCompleted(queryObjectInstanceId: number, queryType: string, actionName: string): void;
    tracePlaylistIOStarted(): void;
    tracePlaylistIOCompleted(readFileCount: number): void;
    traceBackgroundWorkLock_Requested(requestor: string): void;
    traceBackgroundWorkLock_Acquired(requestor: string): void;
    traceBackgroundWorkLock_Released(requestor: string): void;
    traceCollectionBuildingBegin(eventSource: number): void;
    traceCollectionBuildingEnd(eventSource: number, itemsAdded: number, itemsTotal: number, errorState: number): void;
    traceCollectionBuildingProgress(itemsProcessed: number): void;
    traceCollectionBuildingMediaSynced(): void;
    traceCollectionBuildingMissingMetadata(): void;
    traceCollectionBuildingMDLCProgress(itemsProcessed: number): void;
    traceCollectionBuildingCloudCollectionV2FirstTrackAdded(): void;
    traceFingerprintingStarted(): void;
    traceFingerprintingComplete(hresult: number, canceled: boolean, processedFileCount: number, remainingFileCount: number, failedFileCount: number): void;
    traceProcessRemainingFilesStarted(): void;
    traceProcessRemainingFilesComplete(hresult: number): void;
    traceFileProcessed(fileId: number, foreground: boolean, allowGracenoteId: boolean, hresult: number): void;
    traceFingerprintIdFound(fileId: number, fileUrl: string): void;
    traceFingerprintComputed(fileId: number, fileUrl: string): void;
    traceFingerprintGeneration_InternalError(fileUrl: string, error: number): void;
    traceFingerprintGeneration_EndOfStreamReached(fileUrl: string): void;
    traceFingerprintGeneration_SourceReaderError(fileUrl: string, flags: number): void;
    traceFingerprintGeneration_FingerprintRetrieved(fileUrl: string, qualities: number): void;
    traceGetImmediateFingerprintsStart(): void;
    traceGetImmediateFingerprintsComplete(processedFileCount: number): void;
    traceImmediateFingerprintRetrieved(fileId: number, hresult: number, resultType: number): void;
}
