// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { ILibrary } from "./ILibrary";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.Entertainment.Instrumentation.Providers.Library')
export class Library implements ILibrary { 
    isBackgroundWorkLock_AcquiredEnabled: boolean = null;
    isBackgroundWorkLock_ReleasedEnabled: boolean = null;
    isBackgroundWorkLock_RequestedEnabled: boolean = null;
    isCollectionBuildingBeginEnabled: boolean = null;
    isCollectionBuildingCloudCollectionV2FirstTrackAddedEnabled: boolean = null;
    isCollectionBuildingEndEnabled: boolean = null;
    isCollectionBuildingMDLCProgressEnabled: boolean = null;
    isCollectionBuildingMediaSyncedEnabled: boolean = null;
    isCollectionBuildingMissingMetadataEnabled: boolean = null;
    isCollectionBuildingProgressEnabled: boolean = null;
    isDatabaseCloseCompletedEnabled: boolean = null;
    isDatabaseCloseStartedEnabled: boolean = null;
    isDatabaseOpenCompletedEnabled: boolean = null;
    isDatabaseOpenStartedEnabled: boolean = null;
    isDbCleanupOnUserSignedOutCompletedEnabled: boolean = null;
    isDbCleanupOnUserSignedOutStartedEnabled: boolean = null;
    isEasyTransferAddingPathsEnabled: boolean = null;
    isEasyTransferBeginImportingMetadataEnabled: boolean = null;
    isEasyTransferBeginImportingPlaylistsEnabled: boolean = null;
    isEasyTransferCompleteEnabled: boolean = null;
    isEasyTransferCompletedImportingMetadataEnabled: boolean = null;
    isEasyTransferCompletedImportingPlaylistsEnabled: boolean = null;
    isEasyTransferConfigParseFailedEnabled: boolean = null;
    isEasyTransferConfigParseSucceededEnabled: boolean = null;
    isEasyTransferFailedToLocateMediaItemEnabled: boolean = null;
    isEasyTransferFoundConfigEnabled: boolean = null;
    isEasyTransferImportedMetadataEnabled: boolean = null;
    isEasyTransferImportedPlaylistEnabled: boolean = null;
    isEasyTransferIterationCompleteEnabled: boolean = null;
    isEasyTransferIterationFailedEnabled: boolean = null;
    isEasyTransferIterationStartedEnabled: boolean = null;
    isEasyTransferLocatedMediaItemEnabled: boolean = null;
    isEasyTransferLocatingMediaItemEnabled: boolean = null;
    isEasyTransferMatchedByFileUrlEnabled: boolean = null;
    isEasyTransferNoConfigEnabled: boolean = null;
    isEasyTransferNoPathsToAddEnabled: boolean = null;
    isEasyTransferParseErrorEnabled: boolean = null;
    isEasyTransferParsingConfigEnabled: boolean = null;
    isEasyTransferStateChangeEnabled: boolean = null;
    isFileProcessedEnabled: boolean = null;
    isFingerprintComputedEnabled: boolean = null;
    isFingerprintGeneration_EndOfStreamReachedEnabled: boolean = null;
    isFingerprintGeneration_FingerprintRetrievedEnabled: boolean = null;
    isFingerprintGeneration_InternalErrorEnabled: boolean = null;
    isFingerprintGeneration_SourceReaderErrorEnabled: boolean = null;
    isFingerprintIdFoundEnabled: boolean = null;
    isFingerprintingCompleteEnabled: boolean = null;
    isFingerprintingStartedEnabled: boolean = null;
    isGetImmediateFingerprintsCompleteEnabled: boolean = null;
    isGetImmediateFingerprintsStartEnabled: boolean = null;
    isGrovelerAddFileEnabled: boolean = null;
    isGrovelerAdditionScanCompletedEnabled: boolean = null;
    isGrovelerAdditionScanStartedEnabled: boolean = null;
    isGrovelerDefinitionChangedNotificationReceivedEnabled: boolean = null;
    isGrovelerDeleteScanCompletedEnabled: boolean = null;
    isGrovelerDeleteScanStartedEnabled: boolean = null;
    isGrovelerFullScanSkippedEnabled: boolean = null;
    isGrovelerGetEmptyItemListEnabled: boolean = null;
    isGrovelerGetFilesAsyncRetryEnabled: boolean = null;
    isGrovelerGetResultsErrorEnabled: boolean = null;
    isGrovelerIsQuickGrovelNeededEnabled: boolean = null;
    isGrovelerMasterRatingFileDirtySetEnabled: boolean = null;
    isGrovelerNetworkConnectedEnabled: boolean = null;
    isGrovelerNetworkShareAccessedEnabled: boolean = null;
    isGrovelerNotificationReceivedEnabled: boolean = null;
    isGrovelerPlaylistScanCompletedEnabled: boolean = null;
    isGrovelerPlaylistScanStartedEnabled: boolean = null;
    isGrovelerQueryIndexerDiffEnabled: boolean = null;
    isGrovelerQuickScanCompletedEnabled: boolean = null;
    isGrovelerQuickScanStartedEnabled: boolean = null;
    isGrovelerReadMasterRatingFileCompletedEnabled: boolean = null;
    isGrovelerReadMasterRatingFileStartedEnabled: boolean = null;
    isGrovelerReadMasterRatingFileTriggeredEnabled: boolean = null;
    isGrovelerRefreshLicenseCompletedEnabled: boolean = null;
    isGrovelerRefreshLicenseStartedEnabled: boolean = null;
    isGrovelerRetriesExhaustedEnabled: boolean = null;
    isGrovelerScanCompletedEnabled: boolean = null;
    isGrovelerScanStartedEnabled: boolean = null;
    isGrovelerSecondScanCompletedEnabled: boolean = null;
    isGrovelerSecondScanStartedEnabled: boolean = null;
    isGrovelerSetFileAvailableEnabled: boolean = null;
    isGrovelerSetFileUnavailableEnabled: boolean = null;
    isGrovelerTopLevelFolderAddedEnabled: boolean = null;
    isGrovelerWaitForCompletionRetryEnabled: boolean = null;
    isGrovelerWriteMasterRatingFileCompletedEnabled: boolean = null;
    isGrovelerWriteMasterRatingFileStartedEnabled: boolean = null;
    isGrovelerWriteMasterRatingFileTriggeredEnabled: boolean = null;
    isImmediateFingerprintRetrievedEnabled: boolean = null;
    isMDLCCompletedEnabled: boolean = null;
    isMDLCStartedEnabled: boolean = null;
    isPlaylistIOCompletedEnabled: boolean = null;
    isPlaylistIOStartedEnabled: boolean = null;
    isProcessRemainingFilesCompleteEnabled: boolean = null;
    isProcessRemainingFilesStartedEnabled: boolean = null;
    isQueryCompletedEnabled: boolean = null;
    isQueryStartedEnabled: boolean = null;
    traceEasyTransferIterationStarted(): void {
        console.warn('Library#traceEasyTransferIterationStarted not implemented')
    }
    traceEasyTransferFoundConfig(): void {
        console.warn('Library#traceEasyTransferFoundConfig not implemented')
    }
    traceEasyTransferNoConfig(): void {
        console.warn('Library#traceEasyTransferNoConfig not implemented')
    }
    traceEasyTransferParsingConfig(): void {
        console.warn('Library#traceEasyTransferParsingConfig not implemented')
    }
    traceEasyTransferConfigParseFailed(): void {
        console.warn('Library#traceEasyTransferConfigParseFailed not implemented')
    }
    traceEasyTransferConfigParseSucceeded(): void {
        console.warn('Library#traceEasyTransferConfigParseSucceeded not implemented')
    }
    traceEasyTransferAddingPaths(): void {
        console.warn('Library#traceEasyTransferAddingPaths not implemented')
    }
    traceEasyTransferNoPathsToAdd(): void {
        console.warn('Library#traceEasyTransferNoPathsToAdd not implemented')
    }
    traceEasyTransferBeginImportingMetadata(): void {
        console.warn('Library#traceEasyTransferBeginImportingMetadata not implemented')
    }
    traceEasyTransferCompletedImportingMetadata(): void {
        console.warn('Library#traceEasyTransferCompletedImportingMetadata not implemented')
    }
    traceEasyTransferBeginImportingPlaylists(): void {
        console.warn('Library#traceEasyTransferBeginImportingPlaylists not implemented')
    }
    traceEasyTransferCompletedImportingPlaylists(): void {
        console.warn('Library#traceEasyTransferCompletedImportingPlaylists not implemented')
    }
    traceEasyTransferIterationComplete(): void {
        console.warn('Library#traceEasyTransferIterationComplete not implemented')
    }
    traceEasyTransferComplete(): void {
        console.warn('Library#traceEasyTransferComplete not implemented')
    }
    traceEasyTransferIterationFailed(): void {
        console.warn('Library#traceEasyTransferIterationFailed not implemented')
    }
    traceEasyTransferParseError(line: number, column: number, message: string): void {
        console.warn('Library#traceEasyTransferParseError not implemented')
    }
    traceEasyTransferImportedMetadata(mediaId: number, rating: number, playCount: number): void {
        console.warn('Library#traceEasyTransferImportedMetadata not implemented')
    }
    traceEasyTransferImportedPlaylist(name: string, trackCount: number, imported: boolean): void {
        console.warn('Library#traceEasyTransferImportedPlaylist not implemented')
    }
    traceEasyTransferLocatingMediaItem(location: string): void {
        console.warn('Library#traceEasyTransferLocatingMediaItem not implemented')
    }
    traceEasyTransferLocatedMediaItem(mediaId: number, created: boolean): void {
        console.warn('Library#traceEasyTransferLocatedMediaItem not implemented')
    }
    traceEasyTransferStateChange(oldState: number, newState: number): void {
        console.warn('Library#traceEasyTransferStateChange not implemented')
    }
    traceEasyTransferFailedToLocateMediaItem(hresult: number): void {
        console.warn('Library#traceEasyTransferFailedToLocateMediaItem not implemented')
    }
    traceEasyTransferMatchedByFileUrl(): void {
        console.warn('Library#traceEasyTransferMatchedByFileUrl not implemented')
    }
    traceGrovelerScanStarted(): void {
        console.warn('Library#traceGrovelerScanStarted not implemented')
    }
    traceGrovelerScanCompleted(fileCount: number): void {
        console.warn('Library#traceGrovelerScanCompleted not implemented')
    }
    traceGrovelerQuickScanStarted(): void {
        console.warn('Library#traceGrovelerQuickScanStarted not implemented')
    }
    traceGrovelerQuickScanCompleted(receivedFileCount: number, modifiedFileCount: number): void {
        console.warn('Library#traceGrovelerQuickScanCompleted not implemented')
    }
    traceGrovelerDeleteScanStarted(): void {
        console.warn('Library#traceGrovelerDeleteScanStarted not implemented')
    }
    traceGrovelerDeleteScanCompleted(fileCount: number): void {
        console.warn('Library#traceGrovelerDeleteScanCompleted not implemented')
    }
    traceGrovelerPlaylistScanStarted(): void {
        console.warn('Library#traceGrovelerPlaylistScanStarted not implemented')
    }
    traceGrovelerPlaylistScanCompleted(fileCount: number): void {
        console.warn('Library#traceGrovelerPlaylistScanCompleted not implemented')
    }
    traceGrovelerAdditionScanStarted(): void {
        console.warn('Library#traceGrovelerAdditionScanStarted not implemented')
    }
    traceGrovelerAdditionScanCompleted(fileCount: number): void {
        console.warn('Library#traceGrovelerAdditionScanCompleted not implemented')
    }
    traceGrovelerFullScanSkipped(): void {
        console.warn('Library#traceGrovelerFullScanSkipped not implemented')
    }
    traceGrovelerTopLevelFolderAdded(): void {
        console.warn('Library#traceGrovelerTopLevelFolderAdded not implemented')
    }
    traceGrovelerNotificationReceived(): void {
        console.warn('Library#traceGrovelerNotificationReceived not implemented')
    }
    traceGrovelerNetworkConnected(): void {
        console.warn('Library#traceGrovelerNetworkConnected not implemented')
    }
    traceGrovelerNetworkShareAccessed(): void {
        console.warn('Library#traceGrovelerNetworkShareAccessed not implemented')
    }
    traceGrovelerMasterRatingFileDirtySet(): void {
        console.warn('Library#traceGrovelerMasterRatingFileDirtySet not implemented')
    }
    traceGrovelerWriteMasterRatingFileTriggered(): void {
        console.warn('Library#traceGrovelerWriteMasterRatingFileTriggered not implemented')
    }
    traceGrovelerWriteMasterRatingFileStarted(): void {
        console.warn('Library#traceGrovelerWriteMasterRatingFileStarted not implemented')
    }
    traceGrovelerWriteMasterRatingFileCompleted(hresult: number, ratingCount: number): void {
        console.warn('Library#traceGrovelerWriteMasterRatingFileCompleted not implemented')
    }
    traceGrovelerReadMasterRatingFileTriggered(): void {
        console.warn('Library#traceGrovelerReadMasterRatingFileTriggered not implemented')
    }
    traceGrovelerReadMasterRatingFileStarted(): void {
        console.warn('Library#traceGrovelerReadMasterRatingFileStarted not implemented')
    }
    traceGrovelerReadMasterRatingFileCompleted(hresult: number, ratingCount: number): void {
        console.warn('Library#traceGrovelerReadMasterRatingFileCompleted not implemented')
    }
    traceGrovelerQueryIndexerDiff(timestamp: string): void {
        console.warn('Library#traceGrovelerQueryIndexerDiff not implemented')
    }
    traceGrovelerIsQuickGrovelNeeded(currentCount: number, changedCount: number, quickScanNeeded: boolean): void {
        console.warn('Library#traceGrovelerIsQuickGrovelNeeded not implemented')
    }
    traceGrovelerGetFilesAsyncRetry(hresult: number, retryCount: number): void {
        console.warn('Library#traceGrovelerGetFilesAsyncRetry not implemented')
    }
    traceGrovelerWaitForCompletionRetry(hresult: number, retryCount: number): void {
        console.warn('Library#traceGrovelerWaitForCompletionRetry not implemented')
    }
    traceGrovelerGetResultsError(hresult: number): void {
        console.warn('Library#traceGrovelerGetResultsError not implemented')
    }
    traceGrovelerGetEmptyItemList(hresult: number): void {
        console.warn('Library#traceGrovelerGetEmptyItemList not implemented')
    }
    traceGrovelerRefreshLicenseStarted(): void {
        console.warn('Library#traceGrovelerRefreshLicenseStarted not implemented')
    }
    traceGrovelerRefreshLicenseCompleted(hresult: number): void {
        console.warn('Library#traceGrovelerRefreshLicenseCompleted not implemented')
    }
    traceGrovelerDefinitionChangedNotificationReceived(): void {
        console.warn('Library#traceGrovelerDefinitionChangedNotificationReceived not implemented')
    }
    traceGrovelerRetriesExhausted(hresult: number, fileCount: number): void {
        console.warn('Library#traceGrovelerRetriesExhausted not implemented')
    }
    traceGrovelerAddFile(hresult: number, fileUrl: string): void {
        console.warn('Library#traceGrovelerAddFile not implemented')
    }
    traceGrovelerSetFileAvailable(fileUrl: string): void {
        console.warn('Library#traceGrovelerSetFileAvailable not implemented')
    }
    traceGrovelerSetFileUnavailable(fileUrl: string): void {
        console.warn('Library#traceGrovelerSetFileUnavailable not implemented')
    }
    traceGrovelerSecondScanStarted(): void {
        console.warn('Library#traceGrovelerSecondScanStarted not implemented')
    }
    traceGrovelerSecondScanCompleted(fileCount: number, unindexedFileCount: number, unknownFileCount: number): void {
        console.warn('Library#traceGrovelerSecondScanCompleted not implemented')
    }
    traceMDLCStarted(): void {
        console.warn('Library#traceMDLCStarted not implemented')
    }
    traceMDLCCompleted(): void {
        console.warn('Library#traceMDLCCompleted not implemented')
    }
    traceDatabaseOpenStarted(): void {
        console.warn('Library#traceDatabaseOpenStarted not implemented')
    }
    traceDatabaseOpenCompleted(): void {
        console.warn('Library#traceDatabaseOpenCompleted not implemented')
    }
    traceDatabaseCloseStarted(): void {
        console.warn('Library#traceDatabaseCloseStarted not implemented')
    }
    traceDatabaseCloseCompleted(): void {
        console.warn('Library#traceDatabaseCloseCompleted not implemented')
    }
    traceDbCleanupOnUserSignedOutStarted(): void {
        console.warn('Library#traceDbCleanupOnUserSignedOutStarted not implemented')
    }
    traceDbCleanupOnUserSignedOutCompleted(): void {
        console.warn('Library#traceDbCleanupOnUserSignedOutCompleted not implemented')
    }
    traceQueryStarted(queryObjectInstanceId: number, queryType: string, actionName: string): void {
        console.warn('Library#traceQueryStarted not implemented')
    }
    traceQueryCompleted(queryObjectInstanceId: number, queryType: string, actionName: string): void {
        console.warn('Library#traceQueryCompleted not implemented')
    }
    tracePlaylistIOStarted(): void {
        console.warn('Library#tracePlaylistIOStarted not implemented')
    }
    tracePlaylistIOCompleted(readFileCount: number): void {
        console.warn('Library#tracePlaylistIOCompleted not implemented')
    }
    traceBackgroundWorkLock_Requested(requestor: string): void {
        console.warn('Library#traceBackgroundWorkLock_Requested not implemented')
    }
    traceBackgroundWorkLock_Acquired(requestor: string): void {
        console.warn('Library#traceBackgroundWorkLock_Acquired not implemented')
    }
    traceBackgroundWorkLock_Released(requestor: string): void {
        console.warn('Library#traceBackgroundWorkLock_Released not implemented')
    }
    traceCollectionBuildingBegin(eventSource: number): void {
        console.warn('Library#traceCollectionBuildingBegin not implemented')
    }
    traceCollectionBuildingEnd(eventSource: number, itemsAdded: number, itemsTotal: number, errorState: number): void {
        console.warn('Library#traceCollectionBuildingEnd not implemented')
    }
    traceCollectionBuildingProgress(itemsProcessed: number): void {
        console.warn('Library#traceCollectionBuildingProgress not implemented')
    }
    traceCollectionBuildingMediaSynced(): void {
        console.warn('Library#traceCollectionBuildingMediaSynced not implemented')
    }
    traceCollectionBuildingMissingMetadata(): void {
        console.warn('Library#traceCollectionBuildingMissingMetadata not implemented')
    }
    traceCollectionBuildingMDLCProgress(itemsProcessed: number): void {
        console.warn('Library#traceCollectionBuildingMDLCProgress not implemented')
    }
    traceCollectionBuildingCloudCollectionV2FirstTrackAdded(): void {
        console.warn('Library#traceCollectionBuildingCloudCollectionV2FirstTrackAdded not implemented')
    }
    traceFingerprintingStarted(): void {
        console.warn('Library#traceFingerprintingStarted not implemented')
    }
    traceFingerprintingComplete(hresult: number, canceled: boolean, processedFileCount: number, remainingFileCount: number, failedFileCount: number): void {
        console.warn('Library#traceFingerprintingComplete not implemented')
    }
    traceProcessRemainingFilesStarted(): void {
        console.warn('Library#traceProcessRemainingFilesStarted not implemented')
    }
    traceProcessRemainingFilesComplete(hresult: number): void {
        console.warn('Library#traceProcessRemainingFilesComplete not implemented')
    }
    traceFileProcessed(fileId: number, foreground: boolean, allowGracenoteId: boolean, hresult: number): void {
        console.warn('Library#traceFileProcessed not implemented')
    }
    traceFingerprintIdFound(fileId: number, fileUrl: string): void {
        console.warn('Library#traceFingerprintIdFound not implemented')
    }
    traceFingerprintComputed(fileId: number, fileUrl: string): void {
        console.warn('Library#traceFingerprintComputed not implemented')
    }
    traceFingerprintGeneration_InternalError(fileUrl: string, error: number): void {
        console.warn('Library#traceFingerprintGeneration_InternalError not implemented')
    }
    traceFingerprintGeneration_EndOfStreamReached(fileUrl: string): void {
        console.warn('Library#traceFingerprintGeneration_EndOfStreamReached not implemented')
    }
    traceFingerprintGeneration_SourceReaderError(fileUrl: string, flags: number): void {
        console.warn('Library#traceFingerprintGeneration_SourceReaderError not implemented')
    }
    traceFingerprintGeneration_FingerprintRetrieved(fileUrl: string, qualities: number): void {
        console.warn('Library#traceFingerprintGeneration_FingerprintRetrieved not implemented')
    }
    traceGetImmediateFingerprintsStart(): void {
        console.warn('Library#traceGetImmediateFingerprintsStart not implemented')
    }
    traceGetImmediateFingerprintsComplete(processedFileCount: number): void {
        console.warn('Library#traceGetImmediateFingerprintsComplete not implemented')
    }
    traceImmediateFingerprintRetrieved(fileId: number, hresult: number, resultType: number): void {
        console.warn('Library#traceImmediateFingerprintRetrieved not implemented')
    }
}
