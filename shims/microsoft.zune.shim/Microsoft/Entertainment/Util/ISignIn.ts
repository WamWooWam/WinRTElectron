// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft.Entertainment 255.255.255.255 at Mon Mar 29 16:23:03 2021
// </auto-generated>
// --------------------------------------------------

import { IHeader } from "./IHeader";
import { IProvisioningResult } from "./IProvisioningResult";
import { ITicket } from "./ITicket";
import { IXToken } from "./IXToken";
import { SignInChangedEventArgs } from "./SignInChangedEventArgs";
import { SignInCompletedEventArgs } from "./SignInCompletedEventArgs";
import { SignInPromptType } from "./SignInPromptType";
import { SignOutCompletedEventArgs } from "./SignOutCompletedEventArgs";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { TypedEventHandler } from "winrt/Windows/Foundation/TypedEventHandler`2";

export interface ISignIn {
    canSignOut: boolean;
    cid: string;
    firstName: string;
    id: string;
    isSignInSupported: boolean;
    lastName: string;
    membershipLevel: string;
    signInName: string;
    startTime: Date;
    subscriptionOfferID: string;
    userXuid: string;
    signInUser(ticket: string): IAsyncOperation<ISignIn>;
    authenticateUser(ticket: string): IAsyncOperation<ISignIn>;
    signOut(persistUserDB: boolean): IAsyncOperation<ISignIn>;
    forgetUserInformation(): IAsyncOperation<ISignIn>;
    getTicket(passportPolicy: string, targetService: string, ignoreSignInState: boolean, promptType: SignInPromptType): IAsyncOperation<ITicket>;
    getDeviceTicket(passportPolicy: string, targetService: string): IAsyncOperation<ITicket>;
    getAuthHeader(): IAsyncOperation<IHeader>;
    getAuthHeaderForEndpoint(iEndpointId: number, ignoreSignInState: boolean): IAsyncOperation<IHeader>;
    getXTokenAsyncOp(iEndpointId: number): IAsyncOperation<IXToken>;
    getXTokenByRelyingPartyAsyncOp(relyingParty: string): IAsyncOperation<IXToken>;
    isSignedIn(): boolean;
    provisionUserAccount(): IAsyncOperation<IProvisioningResult>;
    updatePartnerToken(partnerToken: string): IAsyncAction;
    clearTokenMap(): void;
    setUserProperties(cid: string, signInName: string, firstName: string, lastName: string, id: string): void;
    getV3TokenFromMap(endpoint: string): { dateExpires: Date, token: string };
    removeV3TokenEntry(endpoint: string): void;
    setV3Token(endpoint: string, token: string, dateExpires: Date): void;
    getTokenFromMap(iEndpointId: number): string;
    setToken(iEndpointId: number, token: string): void;
    setSignInState(pIdentityInfo: any): void;
    raiseSignInCompleted(signInResult: number): void;
    raiseSignOutCompleted(signOutResult: number): void;
    clearSignInState(): void;
    onsigninchanged: TypedEventHandler<ISignIn, SignInChangedEventArgs>;
    onsignincompleted: TypedEventHandler<ISignIn, SignInCompletedEventArgs>;
    onsigninstarted: TypedEventHandler<ISignIn, any>;
    onsignoutcompleted: TypedEventHandler<ISignIn, SignOutCompletedEventArgs>;
    onsignoutstarted: TypedEventHandler<ISignIn, any>;
    addEventListener(name: string, handler: any)
    removeEventListener(name: string, handler: any)
}
