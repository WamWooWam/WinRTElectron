// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { AccountGetCapabilityStatusResult } from "./AccountGetCapabilityStatusResult";
import { AccountGetStatusWithProgressResult } from "./AccountGetStatusWithProgressResult";
import { Binary } from "./Binary";
import { OnEndpointsChangedType } from "./OnEndpointsChangedType";
import { OnPropertyChangeType } from "./OnPropertyChangeType";
import { VectGIString } from "./VectGIString";
import { VectUnsignedInt } from "./VectUnsignedInt";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { ApplicationData } from "winrt/Windows/Storage/ApplicationData";
import { User } from "discord.js"
import { PROPKEY } from "./PROPKEY";

@GenerateShim('LibWrap.Account')
export class Account implements IClosable {
    static xmppstatus_XMPP_OFFLINE_EXPLICIT: number = 22;
    static xmppstatus_XMPP_OFFLINE_SKYPE: number = 21;
    static xmppstatus_XMPP_DISABLED: number = 20;
    static xmppstatus_XMPP_ERROR_OTHER: number = 11;
    static xmppstatus_XMPP_ERROR_AUTH: number = 10;
    static xmppstatus_XMPP_PAUSING: number = 3;
    static xmppstatus_XMPP_CONNECTING: number = 2;
    static xmppstatus_XMPP_ONLINE: number = 1;
    static xmppstatus_XMPP_UNLINKED: number = 0;
    static servicetype_ST_PREMIUMVIDEO: number = 2;
    static servicetype_ST_PSTN: number = 1;
    static servicetype_ST_NONE: number = 0;
    static packagetype_PT_FREETRIAL: number = 3;
    static packagetype_PT_DAYPASS: number = 2;
    static packagetype_PT_SUBSCRIPTION: number = 1;
    static packagetype_PT_NONE: number = 0;
    static subscriptionstatus_SS_SUSPENDED: number = 3;
    static subscriptionstatus_SS_CANCELLED: number = 2;
    static subscriptionstatus_SS_ACTIVE: number = 1;
    static subscriptionstatus_SS_NONE: number = 0;
    static capabilitystatus_FINAL_EXPIRY_WARNING: number = 4;
    static capabilitystatus_SECOND_EXPIRY_WARNING: number = 3;
    static capabilitystatus_FIRST_EXPIRY_WARNING: number = 2;
    static capabilitystatus_CAPABILITY_EXISTS: number = 1;
    static capabilitystatus_NO_CAPABILITY: number = 0;
    static federatedpresencepolicy_FEDERATED_DISABLE_FLAMINGO: number = 1;
    static shortcircuitsync_SHORTCIRCUITSYNC_ENABLED: number = 1;
    static shortcircuitsync_SHORTCIRCUITSYNC_DISABLED: number = 0;
    static adpolicy_ADS_ENABLED_NOTARGET: number = 4;
    static adpolicy_ADS_RESERVED3: number = 3;
    static adpolicy_ADS_RESERVED2: number = 2;
    static adpolicy_ADS_RESERVED1: number = 1;
    static adpolicy_ADS_ENABLED: number = 0;
    static authrequestpolicy_AUTHREQUEST_DISABLED: number = 9;
    static authrequestpolicy_CHAT_PARTICIPANTS_CAN_AUTHREQ: number = 5;
    static authrequestpolicy_AUTHREQUEST_ENABLED: number = 0;
    static voicemailpolicy_VOICEMAIL_DISABLED: number = 1;
    static voicemailpolicy_VOICEMAIL_ENABLED: number = 0;
    static phonenumberspolicy_PHONENUMBERS_VISIBLE_FOR_EVERYONE: number = 1;
    static phonenumberspolicy_PHONENUMBERS_VISIBLE_FOR_BUDDIES: number = 0;
    static webpresencepolicy_WEBPRESENCE_ENABLED: number = 1;
    static webpresencepolicy_WEBPRESENCE_DISABLED: number = 0;
    static timezonepolicy_TZ_UNDISCLOSED: number = 2;
    static timezonepolicy_TZ_MANUAL: number = 1;
    static timezonepolicy_TZ_AUTOMATIC: number = 0;
    static buddycountpolicy_DISCLOSE_TO_NOONE: number = 1;
    static buddycountpolicy_DISCLOSE_TO_AUTHORIZED: number = 0;
    static avatarpolicy_EVERYONE_CAN_SEE: number = 2;
    static avatarpolicy_BUDDIES_OR_AUTHORIZED_CAN_SEE: number = 0;
    static pstncallpolicy_BUDDY_NUMBERS_CAN_CALL: number = 2;
    static pstncallpolicy_DISCLOSED_NUMBERS_CAN_CALL: number = 1;
    static pstncallpolicy_ALL_NUMBERS_CAN_CALL: number = 0;
    static skypecallpolicy_BUDDIES_OR_AUTHORIZED_CAN_CALL: number = 2;
    static skypecallpolicy_EVERYONE_CAN_CALL: number = 0;
    static chatpolicy_BUDDIES_OR_AUTHORIZED_CAN_ADD: number = 2;
    static chatpolicy_EVERYONE_CAN_ADD: number = 0;
    static commitstatus_COMMIT_FAILED: number = 3;
    static commitstatus_COMMITTING_TO_SERVER: number = 2;
    static commitstatus_COMMITTED: number = 1;
    static pwdchangestatus_PWD_MUST_LOG_IN_TO_CHANGE: number = 7;
    static pwdchangestatus_PWD_INVALID_NEW_PWD: number = 6;
    static pwdchangestatus_PWD_MUST_DIFFER_FROM_OLD: number = 5;
    static pwdchangestatus_PWD_OK_BUT_CHANGE_SUGGESTED: number = 4;
    static pwdchangestatus_PWD_SERVER_CONNECT_FAILED: number = 3;
    static pwdchangestatus_PWD_INVALID_OLD_PASSWORD: number = 2;
    static pwdchangestatus_PWD_CHANGING: number = 1;
    static pwdchangestatus_PWD_OK: number = 0;
    static logoutreason_ACCESS_TOKEN_RENEWAL_FAILED: number = 27;
    static logoutreason_REMOTE_LOGOUT: number = 26;
    static logoutreason_ATO_BLOCKED: number = 25;
    static logoutreason_UNSUPPORTED_VERSION: number = 24;
    static logoutreason_APP_ID_FAILURE: number = 23;
    static logoutreason_INVALID_APP_ID: number = 22;
    static logoutreason_DB_FAILURE: number = 21;
    static logoutreason_DB_CORRUPT: number = 20;
    static logoutreason_DB_IO_ERROR: number = 19;
    static logoutreason_DB_DISK_FULL: number = 18;
    static logoutreason_PERIODIC_UIC_UPDATE_FAILED: number = 17;
    static logoutreason_PASSWORD_HAS_CHANGED: number = 16;
    static logoutreason_TOO_MANY_LOGIN_ATTEMPTS: number = 15;
    static logoutreason_INCORRECT_PASSWORD: number = 14;
    static logoutreason_NO_SUCH_IDENTITY: number = 13;
    static logoutreason_REJECTED_AS_UNDERAGE: number = 12;
    static logoutreason_SKYPENAME_TAKEN: number = 11;
    static logoutreason_UNACCEPTABLE_PASSWORD: number = 10;
    static logoutreason_INVALID_EMAIL: number = 9;
    static logoutreason_INVALID_SKYPENAME: number = 8;
    static logoutreason_DB_IN_USE: number = 7;
    static logoutreason_SERVER_OVERLOADED: number = 6;
    static logoutreason_SERVER_CONNECT_FAILED: number = 5;
    static logoutreason_P2P_CONNECT_FAILED: number = 4;
    static logoutreason_SOCKS_PROXY_AUTH_FAILED: number = 3;
    static logoutreason_HTTPS_PROXY_AUTH_FAILED: number = 2;
    static logoutreason_LOGOUT_CALLED: number = 1;
    static cblsyncstatus_CBL_REMOTE_SYNC_PENDING: number = 6;
    static cblsyncstatus_CBL_SYNC_FAILED: number = 5;
    static cblsyncstatus_CBL_IN_SYNC: number = 4;
    static cblsyncstatus_CBL_SYNC_IN_PROGRESS: number = 3;
    static cblsyncstatus_CBL_SYNC_PENDING: number = 2;
    static cblsyncstatus_CBL_INITIAL_SYNC_PENDING: number = 1;
    static cblsyncstatus_CBL_INITIALIZING: number = 0;
    static status_LOGGED_IN_PARTIALLY: number = 9;
    static status_LOGGING_OUT: number = 8;
    static status_LOGGED_IN: number = 7;
    static status_INITIALIZING: number = 6;
    static status_LOGGING_IN: number = 5;
    static status_CONNECTING_TO_SERVER: number = 4;
    static status_CONNECTING_TO_P2P: number = 3;
    static status_LOGGED_OUT_AND_PWD_SAVED: number = 2;
    static status_LOGGED_OUT: number = 1;

    private user: User;
    constructor(user: User) {
        this.user = user;
    }

    getObjectID(): number {
        return parseInt(this.user.id);
    }
    getDbID(): number {
        return parseInt(this.user.id);
    }

    getStrProperty(propKey: number): string {
        for (const key of Object.keys(PROPKEY)) {
            if (PROPKEY[key] == propKey) {
                console.warn("string PROPKEY." + key);
            }
        }

        if (propKey == PROPKEY.account_SKYPENAME) {
            return `${this.user.username}#${this.user.discriminator}`
        }

        return "";
    }

    getStrPropertyWithXmlStripped(propKey: number): string {
        for (const key of Object.keys(PROPKEY)) {
            if (PROPKEY[key] == propKey) {
                console.warn("string w/o Xml PROPKEY." + key);
            }
        }

        return "";
    }

    getIntProperty(propKey: number): number {
        for (const key of Object.keys(PROPKEY)) {
            if (PROPKEY[key] == propKey) {
                console.warn("int PROPKEY." + key);
            }
        }

        if (propKey == PROPKEY.account_AVAILABILITY) {
            return 1;
        }

        return 0;
    }

    setExtendedStrProperty(propKey: number, value: string): void {
        console.warn('Account#setExtendedStrProperty not implemented')
    }
    setExtendedIntProperty(propKey: number, value: number): void {
        console.warn('Account#setExtendedIntProperty not implemented')
    }
    static statustoString(val: number): string {
        throw new Error('Account#statustoString not implemented')
    }
    getStatusWithProgress(): AccountGetStatusWithProgressResult {
        throw new Error('Account#getStatusWithProgress not implemented')
    }
    static cblsyncstatustoString(val: number): string {
        throw new Error('Account#cblsyncstatustoString not implemented')
    }
    static logoutreasontoString(val: number): string {
        throw new Error('Account#logoutreasontoString not implemented')
    }
    setUIVersion(uiVersionString: string): void {
        console.warn('Account#setUIVersion not implemented')
    }
    login(setAvailabilityTo: number): void {
        console.warn('Account#login not implemented')
    }
    beginLogin(setAvailabilityTo: number): void {
        console.warn('Account#beginLogin not implemented')
    }
    loginWithPassword(password: string, savePwd: boolean, saveDataLocally: boolean): void {
        console.warn('Account#loginWithPassword not implemented')
    }
    loginWithOAuth(partnerId: string, accessToken: string, refreshToken: string, savePwd: boolean, saveDataLocally: boolean): void {
        console.warn('Account#loginWithOAuth not implemented')
    }
    finishLogin(): void {
        console.warn('Account#finishLogin not implemented')
    }
    register(password: string, savePwd: boolean, saveDataLocally: boolean, email: string, allowSpam: boolean): void {
        console.warn('Account#register not implemented')
    }
    logout(clearSavedPwd: boolean): void {
        console.warn('Account#logout not implemented')
    }
    logoutEx(clearSavedPwd: boolean, localOnly: boolean): void {
        console.warn('Account#logoutEx not implemented')
    }
    logoutOtherEndpoints(): void {
        console.warn('Account#logoutOtherEndpoints not implemented')
    }
    logoutOtherEndpoint(endpointID: string): void {
        console.warn('Account#logoutOtherEndpoint not implemented')
    }
    getOwnEndpointsInfo(id: VectGIString, name: VectGIString, type: VectGIString): void {
        console.warn('Account#getOwnEndpointsInfo not implemented')
    }
    externalLoginResponse(response: Binary): void {
        console.warn('Account#externalLoginResponse not implemented')
    }
    static pwdchangestatustoString(val: number): string {
        throw new Error('Account#pwdchangestatustoString not implemented')
    }
    changePassword(oldPassword: string, newPassword: string, savePwd: boolean): void {
        console.warn('Account#changePassword not implemented')
    }
    setPasswordSaved(savePwd: boolean): void {
        console.warn('Account#setPasswordSaved not implemented')
    }
    setServersideIntProperty(propKey: number, value: number): boolean {
        throw new Error('Account#setServersideIntProperty not implemented')
    }
    setServersideStrProperty(propKey: number, value: string): boolean {
        throw new Error('Account#setServersideStrProperty not implemented')
    }
    static commitstatustoString(val: number): string {
        throw new Error('Account#commitstatustoString not implemented')
    }
    cancelServerCommit(): void {
        console.warn('Account#cancelServerCommit not implemented')
    }
    static chatpolicytoString(val: number): string {
        throw new Error('Account#chatpolicytoString not implemented')
    }
    static skypecallpolicytoString(val: number): string {
        throw new Error('Account#skypecallpolicytoString not implemented')
    }
    static pstncallpolicytoString(val: number): string {
        throw new Error('Account#pstncallpolicytoString not implemented')
    }
    static avatarpolicytoString(val: number): string {
        throw new Error('Account#avatarpolicytoString not implemented')
    }
    static buddycountpolicytoString(val: number): string {
        throw new Error('Account#buddycountpolicytoString not implemented')
    }
    static timezonepolicytoString(val: number): string {
        throw new Error('Account#timezonepolicytoString not implemented')
    }
    static webpresencepolicytoString(val: number): string {
        throw new Error('Account#webpresencepolicytoString not implemented')
    }
    static phonenumberspolicytoString(val: number): string {
        throw new Error('Account#phonenumberspolicytoString not implemented')
    }
    static voicemailpolicytoString(val: number): string {
        throw new Error('Account#voicemailpolicytoString not implemented')
    }
    static authrequestpolicytoString(val: number): string {
        throw new Error('Account#authrequestpolicytoString not implemented')
    }
    static adpolicytoString(val: number): string {
        throw new Error('Account#adpolicytoString not implemented')
    }
    static shortcircuitsynctoString(val: number): string {
        throw new Error('Account#shortcircuitsynctoString not implemented')
    }
    static federatedpresencepolicytoString(val: number): string {
        throw new Error('Account#federatedpresencepolicytoString not implemented')
    }
    setIntProperty(propKey: number, value: number): boolean {
        throw new Error('Account#setIntProperty not implemented')
    }
    setStrProperty(propKey: number, value: string): boolean {
        throw new Error('Account#setStrProperty not implemented')
    }
    setBinProperty(propKey: number, value: Binary): boolean {
        throw new Error('Account#setBinProperty not implemented')
    }
    setAvailability(availability: number): void {
        console.warn('Account#setAvailability not implemented')
    }
    setStandby(standby: boolean): void {
        console.warn('Account#setStandby not implemented')
    }
    setProfileAttachment(attachmentID: string, attachment: Binary): boolean {
        throw new Error('Account#setProfileAttachment not implemented')
    }
    static capabilitystatustoString(val: number): string {
        throw new Error('Account#capabilitystatustoString not implemented')
    }
    getCapabilityStatus1(capability: number, expiryTimestamp: number): number {
        throw new Error('Account#getCapabilityStatus1 not implemented')
    }
    getCapabilityStatus2(capability: number): AccountGetCapabilityStatusResult {
        throw new Error('Account#getCapabilityStatus2 not implemented')
    }
    getSkypenameHash(): string {
        throw new Error('Account#getSkypenameHash not implemented')
    }
    getContactObjectID(): number {
        throw new Error('Account#getContactObjectID not implemented')
    }
    static subscriptionstatustoString(val: number): string {
        throw new Error('Account#subscriptionstatustoString not implemented')
    }
    static packagetypetoString(val: number): string {
        throw new Error('Account#packagetypetoString not implemented')
    }
    static servicetypetoString(val: number): string {
        throw new Error('Account#servicetypetoString not implemented')
    }
    getSubscriptionInfo(name: VectGIString, endtime: VectUnsignedInt, status: VectUnsignedInt, package_type: VectUnsignedInt, service_type: VectUnsignedInt): void {
        console.warn('Account#getSubscriptionInfo not implemented')
    }
    static xmppstatustoString(val: number): string {
        throw new Error('Account#xmppstatustoString not implemented')
    }
    reconnectXMPP(): void {
        console.warn('Account#reconnectXMPP not implemented')
    }
    getPartnerChannelStatus(): string {
        throw new Error('Account#getPartnerChannelStatus not implemented')
    }
    getVerifiedEmail(): string {
        throw new Error('Account#getVerifiedEmail not implemented')
    }
    getVerifiedCompany(): string {
        throw new Error('Account#getVerifiedCompany not implemented')
    }
    getDBPath(): string {
        return ApplicationData.current.localFolder.path;
    }
    delete(): void {
        console.warn('Account#delete not implemented')
    }
    getPartnerUID(partnerId: number): string {
        throw new Error('Account#getPartnerUID not implemented')
    }
    getLastPartnerId(): number {
        throw new Error('Account#getLastPartnerId not implemented')
    }
    discard(): void {
        console.warn('Account#discard not implemented')
    }
    getStatus(): number {
        throw new Error('Account#getStatus not implemented')
    }
    getStatusProgress(): number {
        throw new Error('Account#getStatusProgress not implemented')
    }
    hasCapability(capability: number): boolean {
        throw new Error('Account#hasCapability not implemented')
    }
    getMoodTextHtml(): string {
        throw new Error('Account#getMoodTextHtml not implemented')
    }
    close(): void {
        console.warn('Account#close not implemented')
    }

    private __propertyChange: Set<OnPropertyChangeType> = new Set();
    @Enumerable(true)
    set onpropertychange(handler: OnPropertyChangeType) {
        this.__propertyChange.add(handler);
    }

    private __endpointsChanged: Set<OnEndpointsChangedType> = new Set();
    @Enumerable(true)
    set onendpointschanged(handler: OnEndpointsChangedType) {
        this.__endpointsChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.add(handler);
                break;
            case 'endpointschanged':
                this.__endpointsChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.delete(handler);
                break;
            case 'endpointschanged':
                this.__endpointsChanged.delete(handler);
                break;
        }
    }
}
