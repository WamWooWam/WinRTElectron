// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { Filename } from "./Filename";
import { OnPropertyChangeType } from "./OnPropertyChangeType";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('LibWrap.Transfer')
export class Transfer implements IClosable { 
    static failurereason_PLACEHOLDER_TIMEOUT: number = 10;
    static failurereason_TOO_MANY_PARALLEL: number = 9;
    static failurereason_REMOTE_OFFLINE_FOR_TOO_LONG: number = 8;
    static failurereason_REMOTE_DOES_NOT_SUPPORT_FT: number = 7;
    static failurereason_FAILED_REMOTE_WRITE: number = 6;
    static failurereason_FAILED_WRITE: number = 5;
    static failurereason_FAILED_REMOTE_READ: number = 4;
    static failurereason_FAILED_READ: number = 3;
    static failurereason_REMOTELY_CANCELLED: number = 2;
    static failurereason_SENDER_NOT_AUTHORISED: number = 1;
    static status_CANCELLED_BY_REMOTE: number = 12;
    static status_OFFER_FROM_OTHER_INSTANCE: number = 11;
    static status_PLACEHOLDER: number = 10;
    static status_FAILED: number = 9;
    static status_COMPLETED: number = 8;
    static status_CANCELLED: number = 7;
    static status_REMOTELY_PAUSED: number = 6;
    static status_PAUSED: number = 5;
    static status_TRANSFERRING_OVER_RELAY: number = 4;
    static status_TRANSFERRING: number = 3;
    static status_WAITING_FOR_ACCEPT: number = 2;
    static status_CONNECTING: number = 1;
    static status_NEW: number = 0;
    static type_OUTGOING: number = 2;
    static type_INCOMING: number = 1;
    
    getObjectID(): number {
        throw new Error('Transfer#getObjectID not implemented')
    }
    getDbID(): number {
        throw new Error('Transfer#getDbID not implemented')
    }
    getStrProperty(propKey: number): string {
        throw new Error('Transfer#getStrProperty not implemented')
    }
    getStrPropertyWithXmlStripped(propKey: number): string {
        throw new Error('Transfer#getStrPropertyWithXmlStripped not implemented')
    }
    getIntProperty(propKey: number): number {
        throw new Error('Transfer#getIntProperty not implemented')
    }
    setExtendedStrProperty(propKey: number, value: string): void {
        console.warn('Transfer#setExtendedStrProperty not implemented')
    }
    setExtendedIntProperty(propKey: number, value: number): void {
        console.warn('Transfer#setExtendedIntProperty not implemented')
    }
    static typetoString(val: number): string {
        throw new Error('Transfer#typetoString not implemented')
    }
    static statustoString(val: number): string {
        throw new Error('Transfer#statustoString not implemented')
    }
    static failurereasontoString(val: number): string {
        throw new Error('Transfer#failurereasontoString not implemented')
    }
    accept(filenameWithPath: Filename): boolean {
        throw new Error('Transfer#accept not implemented')
    }
    pause(): boolean {
        throw new Error('Transfer#pause not implemented')
    }
    resume(): boolean {
        throw new Error('Transfer#resume not implemented')
    }
    cancel(): boolean {
        throw new Error('Transfer#cancel not implemented')
    }
    isController(): boolean {
        throw new Error('Transfer#isController not implemented')
    }
    discard(): void {
        console.warn('Transfer#discard not implemented')
    }
    close(): void {
        console.warn('Transfer#close not implemented')
    }

    private __propertyChange: Set<OnPropertyChangeType> = new Set();
    @Enumerable(true)
    set onpropertychange(handler: OnPropertyChangeType) {
        this.__propertyChange.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.delete(handler);
                break;
        }
    }
}
