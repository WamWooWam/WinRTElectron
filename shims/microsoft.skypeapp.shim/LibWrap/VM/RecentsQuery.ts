// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:56 2021
// </auto-generated>
// --------------------------------------------------

import { Conversation } from "../Conversation";
import { RecentsCountChangedType } from "../RecentsCountChangedType";
import { RecentsQueryItemAddedType } from "../RecentsQueryItemAddedType";
import { RecentsQueryItemMovedType } from "../RecentsQueryItemMovedType";
import { RecentsQueryItemRemovedType } from "../RecentsQueryItemRemovedType";
import { RecentsQueryResetType } from "../RecentsQueryResetType";
import { UnreadCountChangedType } from "../UnreadCountChangedType";
import { WrSkyLib } from "../WrSkyLib";
import { IVector } from "winrt/Windows/Foundation/Collections/IVector`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('LibWrap.VM.RecentsQuery')
export class RecentsQuery { 
    constructor(lib: WrSkyLib) {
        console.warn('RecentsQuery.ctor not implemented')
    }
    reload(max_items: number): void {
        console.warn('RecentsQuery#reload not implemented')
    }
    resize(max_items: number): void {
        console.warn('RecentsQuery#resize not implemented')
    }
    handleConversationPropertiesChange(conversation: Conversation, props: IVector<number>): void {
        console.warn('RecentsQuery#handleConversationPropertiesChange not implemented')
    }
    handleConversationListChange(sender: any, id: number, filterType: number, added: boolean): void {
        console.warn('RecentsQuery#handleConversationListChange not implemented')
    }

    private __recentsCountChanged: Set<RecentsCountChangedType> = new Set();
    @Enumerable(true)
    set onrecentscountchanged(handler: RecentsCountChangedType) {
        this.__recentsCountChanged.add(handler);
    }

    private __unreadCountChanged: Set<UnreadCountChangedType> = new Set();
    @Enumerable(true)
    set onunreadcountchanged(handler: UnreadCountChangedType) {
        this.__unreadCountChanged.add(handler);
    }

    private __recentsQueryItemMoved: Set<RecentsQueryItemMovedType> = new Set();
    @Enumerable(true)
    set onrecentsqueryitemmoved(handler: RecentsQueryItemMovedType) {
        this.__recentsQueryItemMoved.add(handler);
    }

    private __recentsQueryItemRemoved: Set<RecentsQueryItemRemovedType> = new Set();
    @Enumerable(true)
    set onrecentsqueryitemremoved(handler: RecentsQueryItemRemovedType) {
        this.__recentsQueryItemRemoved.add(handler);
    }

    private __recentsQueryItemAdded: Set<RecentsQueryItemAddedType> = new Set();
    @Enumerable(true)
    set onrecentsqueryitemadded(handler: RecentsQueryItemAddedType) {
        this.__recentsQueryItemAdded.add(handler);
    }

    private __recentsQueryReset: Set<RecentsQueryResetType> = new Set();
    @Enumerable(true)
    set onrecentsqueryreset(handler: RecentsQueryResetType) {
        this.__recentsQueryReset.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'recentscountchanged':
                this.__recentsCountChanged.add(handler);
                break;
            case 'unreadcountchanged':
                this.__unreadCountChanged.add(handler);
                break;
            case 'recentsqueryitemmoved':
                this.__recentsQueryItemMoved.add(handler);
                break;
            case 'recentsqueryitemremoved':
                this.__recentsQueryItemRemoved.add(handler);
                break;
            case 'recentsqueryitemadded':
                this.__recentsQueryItemAdded.add(handler);
                break;
            case 'recentsqueryreset':
                this.__recentsQueryReset.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'recentscountchanged':
                this.__recentsCountChanged.delete(handler);
                break;
            case 'unreadcountchanged':
                this.__unreadCountChanged.delete(handler);
                break;
            case 'recentsqueryitemmoved':
                this.__recentsQueryItemMoved.delete(handler);
                break;
            case 'recentsqueryitemremoved':
                this.__recentsQueryItemRemoved.delete(handler);
                break;
            case 'recentsqueryitemadded':
                this.__recentsQueryItemAdded.delete(handler);
                break;
            case 'recentsqueryreset':
                this.__recentsQueryReset.delete(handler);
                break;
        }
    }
}
