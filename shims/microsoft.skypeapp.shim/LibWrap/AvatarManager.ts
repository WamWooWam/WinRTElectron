// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { OnAvatarURIChangeType } from "./OnAvatarURIChangeType";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { Client, TextChannel, User } from "discord.js"
import { WrSkyLib } from "./WrSkyLib";

@GenerateShim('LibWrap.AvatarManager')
export class AvatarManager {
    private client: Client;
    constructor(client: Client) {
        this.client = client;
    }

    static offlineAvatarURI(identity: string): string {
        return WrSkyLib.getInstance().client.users.resolve(identity).displayAvatarURL();
    }

    static isDefaultAvatarURI(uri: string): boolean {
        return false;
    }

    getAvatarURI(identity: string): string {
        console.warn("getAvatarUrl: " + identity)

        if (identity.startsWith("user_")) {
            return this.client.users.resolve(identity.substr(5))?.displayAvatarURL();
        }
        if (identity.startsWith("channel_")) {
            return (this.client.channels.resolve(identity.substr(8)) as TextChannel)?.guild?.iconURL();
        }

        return this.client.users.cache.find(u => `${u.username}#${u.discriminator}` == identity)?.displayAvatarURL({ size: 1024 });
    }

    private __avatarURIChange: Set<OnAvatarURIChangeType> = new Set();
    @Enumerable(true)
    set onavatarurichange(handler: OnAvatarURIChangeType) {
        this.__avatarURIChange.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'avatarurichange':
                this.__avatarURIChange.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'avatarurichange':
                this.__avatarURIChange.delete(handler);
                break;
        }
    }
}
