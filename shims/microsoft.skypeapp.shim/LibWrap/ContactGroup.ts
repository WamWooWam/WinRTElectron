// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { OnChangeConversationType } from "./OnChangeConversationType";
import { OnChangeType } from "./OnChangeType";
import { OnPropertyChangeType } from "./OnPropertyChangeType";
import { VectUnsignedInt } from "./VectUnsignedInt";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('LibWrap.ContactGroup')
export class ContactGroup implements IClosable { 
    static type_SCD_CONTACTS: number = 19;
    static type_LYNC_CONTACTS: number = 18;
    static type_PASSPORT_CONTACTS: number = 17;
    static type_XMPP_CONTACTS: number = 16;
    static type_EXTERNAL_CONTACTS: number = 15;
    static type_SHARED_GROUP: number = 14;
    static type_PROPOSED_SHARED_GROUP: number = 13;
    static type_CUSTOM_GROUP: number = 12;
    static type_UNGROUPED_BUDDIES: number = 11;
    static type_CONTACTS_BLOCKED_BY_ME: number = 10;
    static type_CONTACTS_AUTHORIZED_BY_ME: number = 9;
    static type_CONTACTS_WAITING_MY_AUTHORIZATION: number = 8;
    static type_RECENTLY_CONTACTED_CONTACTS: number = 7;
    static type_UNKNOWN_OR_PENDINGAUTH_BUDDIES: number = 6;
    static type_ONLINE_BUDDIES: number = 5;
    static type_SKYPEOUT_BUDDIES: number = 4;
    static type_SKYPE_BUDDIES: number = 3;
    static type_ALL_BUDDIES: number = 2;
    static type_ALL_KNOWN_CONTACTS: number = 1;
    
    getObjectID(): number {
        throw new Error('ContactGroup#getObjectID not implemented')
    }
    getDbID(): number {
        throw new Error('ContactGroup#getDbID not implemented')
    }
    getStrProperty(propKey: number): string {
        throw new Error('ContactGroup#getStrProperty not implemented')
    }
    getStrPropertyWithXmlStripped(propKey: number): string {
        throw new Error('ContactGroup#getStrPropertyWithXmlStripped not implemented')
    }
    getIntProperty(propKey: number): number {
        throw new Error('ContactGroup#getIntProperty not implemented')
    }
    setExtendedStrProperty(propKey: number, value: string): void {
        console.warn('ContactGroup#setExtendedStrProperty not implemented')
    }
    setExtendedIntProperty(propKey: number, value: number): void {
        console.warn('ContactGroup#setExtendedIntProperty not implemented')
    }
    static typetoString(val: number): string {
        throw new Error('ContactGroup#typetoString not implemented')
    }
    giveDisplayName(name: string): boolean {
        throw new Error('ContactGroup#giveDisplayName not implemented')
    }
    giveSortOrder(sortOrder: number): boolean {
        throw new Error('ContactGroup#giveSortOrder not implemented')
    }
    delete(): boolean {
        throw new Error('ContactGroup#delete not implemented')
    }
    getConversations(conversations: VectUnsignedInt): void {
        console.warn('ContactGroup#getConversations not implemented')
    }
    canAddConversation(conversationObjectID: number): boolean {
        throw new Error('ContactGroup#canAddConversation not implemented')
    }
    addConversation(conversationObjectID: number): boolean {
        throw new Error('ContactGroup#addConversation not implemented')
    }
    canRemoveConversation(): boolean {
        throw new Error('ContactGroup#canRemoveConversation not implemented')
    }
    removeConversation(conversationObjectID: number): boolean {
        throw new Error('ContactGroup#removeConversation not implemented')
    }
    getContacts(contacts: VectUnsignedInt): void {
        console.warn('ContactGroup#getContacts not implemented')
    }
    canAddContact(contactObjectID: number): boolean {
        throw new Error('ContactGroup#canAddContact not implemented')
    }
    addContact(contactObjectID: number): boolean {
        throw new Error('ContactGroup#addContact not implemented')
    }
    canRemoveContact(): boolean {
        throw new Error('ContactGroup#canRemoveContact not implemented')
    }
    removeContact(contactObjectID: number): boolean {
        throw new Error('ContactGroup#removeContact not implemented')
    }
    discard(): void {
        console.warn('ContactGroup#discard not implemented')
    }
    close(): void {
        console.warn('ContactGroup#close not implemented')
    }

    private __propertyChange: Set<OnPropertyChangeType> = new Set();
    @Enumerable(true)
    set onpropertychange(handler: OnPropertyChangeType) {
        this.__propertyChange.add(handler);
    }

    private __change: Set<OnChangeType> = new Set();
    @Enumerable(true)
    set onchange(handler: OnChangeType) {
        this.__change.add(handler);
    }

    private __changeConversation: Set<OnChangeConversationType> = new Set();
    @Enumerable(true)
    set onchangeconversation(handler: OnChangeConversationType) {
        this.__changeConversation.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.add(handler);
                break;
            case 'change':
                this.__change.add(handler);
                break;
            case 'changeconversation':
                this.__changeConversation.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.delete(handler);
                break;
            case 'change':
                this.__change.delete(handler);
                break;
            case 'changeconversation':
                this.__changeConversation.delete(handler);
                break;
        }
    }
}
