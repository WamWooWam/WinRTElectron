// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { Binary } from "./Binary";
import { OnPropertyChangeType } from "./OnPropertyChangeType";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('LibWrap.AccessSession')
export class AccessSession implements IClosable { 
    static hotspottype_SUPPORTED: number = null;
    static hotspottype_NONE: number = null;
    static hotspottype_FIRSTPAGEREDIRECT: number = null;
    static hotspottype_FORM: number = null;
    static hotspottype_WISPR: number = null;
    static hotspottype_OPEN: number = null;
    static hotspottype_UNKNOWN: number = null;
    static failurereason_SSID_QUERY_FAILURE: number = null;
    static failurereason_TOKEN_QUERY_FAILURE: number = null;
    static failurereason_NO_HTML_URL: number = null;
    static failurereason_WISPR_LOGIN_ERROR: number = null;
    static failurereason_WISPR_LOGIN_REJECTED: number = null;
    static failurereason_WISPR_CONTENT_ERROR: number = null;
    static failurereason_HTTP_FAILURE: number = null;
    static failurereason_TOO_MANY_REDIRECTS: number = null;
    static failurereason_ALREADY_ONLINE: number = null;
    static failurereason_CONNECTION_ERROR: number = null;
    static failurereason_LOGIN_ABORTED: number = null;
    static failurereason_LOGOUT_FAILURE: number = null;
    static failurereason_LOGIN_FAILURE: number = null;
    static failurereason_NO_SUPPORT: number = null;
    static failurereason_NO_SUBSCRIPTION: number = null;
    static failurereason_NO_BALANCE: number = null;
    static failurereason_NO_FAILURE: number = null;
    static status_LOGGING_OUT: number = null;
    static status_LOGIN_FAILED: number = null;
    static status_LOGGED_OUT: number = null;
    static status_LOGGED_IN: number = null;
    static status_LOGGING_IN: number = null;
    static status_AVAILABLE: number = null;
    static status_UNAVAILABLE: number = null;
    static sessionflags_SA_LOW_CREDIT: number = null;
    static sessionflags_SA_PRODUCT_CREDIT: number = null;
    static sessionflags_SA_STAR_RATING_2: number = null;
    static sessionflags_SA_STAR_RATING_1: number = null;
    static sessionflags_SA_STAR_RATING_0: number = null;
    static sessionflags_SA_ASK_TO_RATE: number = null;
    static sessionflags_SA_NO_CURRENCY_CHANGE: number = null;
    static sessionflags_SA_SHOW_PROMO_DIALOG: number = null;
    static sessionflags_SA_OPEN_URL: number = null;
    static connectionprogress_MAXSTEPS: number = null;
    static connectionprogress_COMPLETED: number = null;
    static connectionprogress_WAITING: number = null;
    static connectionprogress_CHECKING: number = null;
    static connectionprogress_SUBMITTING: number = null;
    static connectionprogress_VERIFYING: number = null;
    static connectionprogress_STARTING: number = null;
    getObjectID(): number {
        throw new Error('AccessSession#getObjectID not implemented')
    }
    getDbID(): number {
        throw new Error('AccessSession#getDbID not implemented')
    }
    getStrProperty(propKey: number): string {
        throw new Error('AccessSession#getStrProperty not implemented')
    }
    getStrPropertyWithXmlStripped(propKey: number): string {
        throw new Error('AccessSession#getStrPropertyWithXmlStripped not implemented')
    }
    getIntProperty(propKey: number): number {
        throw new Error('AccessSession#getIntProperty not implemented')
    }
    setExtendedStrProperty(propKey: number, value: string): void {
        console.warn('AccessSession#setExtendedStrProperty not implemented')
    }
    setExtendedIntProperty(propKey: number, value: number): void {
        console.warn('AccessSession#setExtendedIntProperty not implemented')
    }
    static connectionprogresstoString(val: number): string {
        throw new Error('AccessSession#connectionprogresstoString not implemented')
    }
    static sessionflagstoString(val: number): string {
        throw new Error('AccessSession#sessionflagstoString not implemented')
    }
    static statustoString(val: number): string {
        throw new Error('AccessSession#statustoString not implemented')
    }
    static failurereasontoString(val: number): string {
        throw new Error('AccessSession#failurereasontoString not implemented')
    }
    static hotspottypetoString(val: number): string {
        throw new Error('AccessSession#hotspottypetoString not implemented')
    }
    login(): boolean {
        throw new Error('AccessSession#login not implemented')
    }
    logout(): void {
        console.warn('AccessSession#logout not implemented')
    }
    detectHotspot(): void {
        console.warn('AccessSession#detectHotspot not implemented')
    }
    notifyWifiChanged(accessPointMAC: Binary, accessPointSSID: string, deviceMAC: Binary, dnsServer: string): void {
        console.warn('AccessSession#notifyWifiChanged not implemented')
    }
    sendLocation(latitude: number, longitude: number, accuracy: number): void {
        console.warn('AccessSession#sendLocation not implemented')
    }
    loginWispr(username: string, password: string): void {
        console.warn('AccessSession#loginWispr not implemented')
    }
    sendRating(rating: number): void {
        console.warn('AccessSession#sendRating not implemented')
    }
    discard(): void {
        console.warn('AccessSession#discard not implemented')
    }
    close(): void {
        console.warn('AccessSession#close not implemented')
    }

    private __propertyChange: Set<OnPropertyChangeType> = new Set();
    @Enumerable(true)
    set onpropertychange(handler: OnPropertyChangeType) {
        this.__propertyChange.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.delete(handler);
                break;
        }
    }
}
