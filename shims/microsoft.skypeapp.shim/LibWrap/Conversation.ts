// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { Binary } from "./Binary";
import { Contact } from "./Contact";
import { ConversationOnMessageType } from "./ConversationOnMessageType";
import { ConversationPostFilesResult } from "./ConversationPostFilesResult";
import { Filename } from "./Filename";
import { OnCapabilitiesChangedType } from "./OnCapabilitiesChangedType";
import { OnLiveSessionEventType } from "./OnLiveSessionEventType";
import { OnLiveSessionMovedType } from "./OnLiveSessionMovedType";
import { OnPremiumVideoSubscriptionCheckResultType } from "./OnPremiumVideoSubscriptionCheckResultType";
import { OnPropertyChangeType } from "./OnPropertyChangeType";
import { OnSpawnConferenceType } from "./OnSpawnConferenceType";
import { Participant } from "./Participant";
import { ParticipantListChangeEventType } from "./ParticipantListChangeEventType";
import { PropertiesChangedEventType } from "./PropertiesChangedEventType";
import { VectBool } from "./VectBool";
import { VectGIFilename } from "./VectGIFilename";
import { VectGIString } from "./VectGIString";
import { VectUnsignedInt } from "./VectUnsignedInt";
import { IVector } from "winrt/Windows/Foundation/Collections/IVector`1";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { TextChannel } from "discord.js"
import { PROPKEY } from "./PROPKEY";

@GenerateShim('LibWrap.Conversation')
export class Conversation implements IClosable {
    participants: IVector<any> = null;
    partnerContact: Contact = null;
    partner: Participant = null;
    myself: Participant = null;

    static subscription_CHECK_CONTEXT_USER_IS_ABOUT_TO_START_VIDEO: number = 1;
    static subscription_CHECK_CONTEXT_USER_IS_ABOUT_TO_START_SCREENSHARE: number = 0;
    static capability_CAPABILITY_COUNT: number = 24;
    static capability_CAN_SEND_STATIC_LOCATION_MESSAGE: number = 23;
    static capability_CAN_SEND_MEDIAMESSAGE: number = 22;
    static capability_CAN_SEND_VIDEOMESSAGE: number = 21;
    static capability_CAN_SPAWN: number = 20;
    static capability_CAN_KICK: number = 19;
    static capability_CAN_RETIRE: number = 18;
    static capability_CAN_ADD: number = 17;
    static capability_CAN_CHANGE_PICTURE: number = 16;
    static capability_CAN_CHANGE_TOPIC: number = 15;
    static capability_CAN_EDIT_OTHERS: number = 14;
    static capability_CAN_EDIT_MYSELF: number = 13;
    static capability_CAN_SEND_CONTACTS: number = 12;
    static capability_CAN_SEND_VOICEMAIL: number = 11;
    static capability_CAN_SEND_FILE: number = 10;
    static capability_CAN_SEND_TEXT: number = 9;
    static capability_CAN_SEND_SMS: number = 8;
    static capability_CAN_CHECK_QUALITY: number = 7;
    static capability_CAN_HOLD_LIVE_SESSION: number = 6;
    static capability_CAN_SHARE_SCREEN: number = 5;
    static capability_CAN_RING_PSTN: number = 4;
    static capability_CAN_RING_VIDEO: number = 3;
    static capability_CAN_RING_ALL: number = 2;
    static capability_CAN_RING: number = 1;
    static capability_CAN_GO_LIVE: number = 0;
    static list_TYPE_REALLY_ALL_CONVERSATIONS: number = 5;
    static list_TYPE_PINNED_CONVERSATIONS: number = 4;
    static list_TYPE_LIVE_CONVERSATIONS: number = 3;
    static list_TYPE_BOOKMARKED_CONVERSATIONS: number = 2;
    static list_TYPE_INBOX_CONVERSATIONS: number = 1;
    static list_TYPE_ALL_CONVERSATIONS: number = 0;
    static participantfilter_OTHER_CONSUMERS: number = 5;
    static participantfilter_MYSELF: number = 4;
    static participantfilter_CONSUMERS_AND_APPLICANTS: number = 3;
    static participantfilter_APPLICANTS: number = 2;
    static participantfilter_CONSUMERS: number = 1;
    static participantfilter_ALL: number = 0;
    static picture_FORMAT_PICTURE_SINGLE_URL: number = 1;
    static picture_FORMAT_PICTURE_DEFAULT: number = 0;
    static live_SESSION_EVENT_USER_REJECTED_BECAUSE_OF_CONF_PARTICIPANTS_LIMIT: number = 1;
    static live_SESSION_EVENT_DOWNGRADED_TO_AUDIO_BECAUSE_OF_VIDEO_PARTICIPANTS_LIMIT: number = 0;
    static premium_VIDEO_STATUS_RESULT_503_SERVICE_TIMEOUT: number = 16;
    static premium_VIDEO_STATUS_RESULT_500_GENERAL_SERVICE_ERROR: number = 15;
    static premium_VIDEO_STATUS_RESULT_430_GRACE_TIME_EXPIRED: number = 14;
    static premium_VIDEO_STATUS_RESULT_424_FAIR_USAGE_POLICY_VIOLATION_SPONSORS_MONTH_LIMIT_REACHED: number = 13;
    static premium_VIDEO_STATUS_RESULT_422_FAIR_USAGE_POLICY_VIOLATION_SPONSORS_DAY_LIMIT_REACHED: number = 12;
    static premium_VIDEO_STATUS_RESULT_420_FAIR_USAGE_POLICY_VIOLATION_CALL_LIMIT_REACHED: number = 11;
    static premium_VIDEO_STATUS_RESULT_416_SUBSCRIPTION_IS_ALREADY_IN_USE: number = 10;
    static premium_VIDEO_STATUS_RESULT_414_NO_SUBSCRIPTION: number = 9;
    static premium_VIDEO_STATUS_RESULT_412_SUBSCRIPTION_INSUFFICENT_FOR_THIS_CALL: number = 8;
    static premium_VIDEO_STATUS_RESULT_410_NO_VALID_SUBSCRIPTION_BUT_TRIAL_IS_AVAILABLE: number = 7;
    static premium_VIDEO_STATUS_RESULT_405_GROUP_TOO_LARGE: number = 6;
    static premium_VIDEO_STATUS_RESULT_404_CONVERSATION_ID_NOT_FOUND_OR_CALL_ALREADY_TERMINATED: number = 5;
    static premium_VIDEO_STATUS_RESULT_403_PAID_SERVICE_BLOCK: number = 4;
    static premium_VIDEO_STATUS_RESULT_401_P2P_BLOCK: number = 3;
    static premium_VIDEO_STATUS_RESULT_400_BAD_REQUEST_SOME_FIELDS_MISSING: number = 2;
    static premium_VIDEO_STATUS_RESULT_200_OK: number = 1;
    static premium_VIDEO_STATUS_NOT_MULTIPARTY_VIDEO: number = 0;
    static allowed_ACTIVITY_SPEAK_AND_WRITE: number = 8;
    static allowed_ACTIVITY_SPEAK: number = 4;
    static allowed_ACTIVITY_ADD_CONSUMERS: number = 2;
    static allowed_ACTIVITY_SET_META: number = 1;
    static local_LIVESTATUS_ACTIVATING: number = 13;
    static local_LIVESTATUS_TRANSFERRING: number = 12;
    static local_LIVESTATUS_RECENTLY_LIVE: number = 10;
    static local_LIVESTATUS_RECORDING_VOICE_MESSAGE: number = 9;
    static local_LIVESTATUS_PLAYING_VOICE_MESSAGE: number = 8;
    static local_LIVESTATUS_OTHERS_ARE_LIVE_FULL: number = 11;
    static local_LIVESTATUS_OTHERS_ARE_LIVE: number = 7;
    static local_LIVESTATUS_ON_HOLD_REMOTELY: number = 6;
    static local_LIVESTATUS_ON_HOLD_LOCALLY: number = 5;
    static local_LIVESTATUS_IM_LIVE: number = 3;
    static local_LIVESTATUS_RINGING_FOR_ME: number = 2;
    static local_LIVESTATUS_STARTING: number = 1;
    static local_LIVESTATUS_NONE: number = 0;
    static my_STATUS_RETIRED_VOLUNTARILY: number = 10;
    static my_STATUS_RETIRED_FORCEFULLY: number = 9;
    static my_STATUS_CONSUMER: number = 8;
    static my_STATUS_INVALID_ACCESS_TOKEN: number = 7;
    static my_STATUS_APPLICATION_DENIED: number = 6;
    static my_STATUS_APPLICANT: number = 5;
    static my_STATUS_QUEUED_TO_ENTER: number = 4;
    static my_STATUS_DOWNLOADING_MESSAGES: number = 3;
    static my_STATUS_RETRY_CONNECTING: number = 2;
    static my_STATUS_CONNECTING: number = 1;
    static type_LEGACY_SHAREDGROUP: number = 5;
    static type_LEGACY_VOICE_CONFERENCE: number = 4;
    static type_TERMINATED_CONFERENCE: number = 3;
    static type_CONFERENCE: number = 2;
    static type_DIALOG: number = 1;
    static setupkey_KEEP_IN_INBOX_WHEN_BLOCKING: string = 'Lib/Conversation/KeepInInboxWhenBlocking';
    static setupkey_INCOMING_AUTH_REQUEST_IN_CONV: string = 'Lib/Conversation/IncomingAuthRequestInConv';
    static setupkey_ENABLE_REACHBACK_CALLING: string = 'Lib/Reachback/Enable';
    static setupkey_HASH_LINK_URL: string = 'UI/General/HashLinkURL';
    static setupkey_ENABLE_DIFF_HIGHLIGHTING: string = 'Lib/Chat/HighlightDiffs';
    static setupkey_CALL_SEAMLESS_UPGRADE_CAPABLE: string = '*Lib/Call/SeamlessUpgradeCapable';
    static setupkey_CALL_EMERGENCY_COUNTRY: string = 'Lib/Call/EmergencyCountry';
    static setupkey_CALL_INCOMING_IN_ROUTING_STATUS: string = '*Lib/Call/IncomingInRoutingStatus';
    static setupkey_CALL_APPLY_CF: string = 'Lib/Call/ApplyCF';
    static setupkey_CALL_SEND_TO_VM: string = 'Lib/Call/SendToVM';
    static setupkey_CALL_NOANSWER_TIMEOUT: string = 'Lib/Call/NoAnswerTimeout';
    static setupkey_DISABLE_CHAT_ACTIVITY_INDICATION: string = 'Lib/Chat/DisableActivityIndication';
    static setupkey_CHATDB_LIMIT_KB: string = 'Lib/Chat/ChatDBLimitKb';
    static setupkey_CHAT_HISTORY_DAYS: string = 'Lib/Chat/HistoryDays';
    static setupkey_DISABLE_CHAT_HISTORY: string = 'Lib/Message/DisableHistory';
    static setupkey_DISABLE_P2P_CHAT: string = '*Lib/Chat/Disable';
    static setupkey_DISABLE_CHAT: string = 'Lib/Chat/DisableChat';
    static setupkey_QUIET_P2P_IN_CALL: string = '*Lib/Conversation/QuietP2PInCall';
    static setupkey_RECENTLY_LIVE_TIMEOUT: string = 'Lib/Conversation/RecentlyLiveTimeout';
    static setupkey_INBOX_LIMIT_DAYS: string = 'Lib/Conversation/InboxLimitDays';
    static setupkey_UPDATE_INBOX_MESSAGE_ID_METHOD: string = 'Lib/Conversation/UpdateInboxMessageIDMethod';
    static setupkey_DISABLE_INBOX_UPDATE_ON_TYPING: string = 'Lib/Conversation/DisableInboxUpdateOnTyping';
    static setupkey_INBOX_UPDATE_TIMEOUT: string = 'Lib/Conversation/InboxUpdateTimeout';
    static setupkey_ENABLE_EXTERNAL_CONTACTS: string = 'Lib/Contacts/EnableExternalContacts';
    static setupkey_ENABLE_BIRTHDAY_NOTIFICATION: string = 'Lib/Conversation/EnableBirthday';

    private id: number;
    private channel: TextChannel;
    constructor(channel: TextChannel, id: number) {
        this.id = id;
        this.channel = channel;
    }

    getChatname(): string {
        return `#${this.channel.name}`
    }

    getObjectID(): number {
        return this.id
    }

    getDbID(): number {
        return this.id
    }

    getIdentity(): string {
        return "channel_" + this.channel.id;
    }

    getDisplayNameHtml(): string {
        return `#<b>${this.channel.name}</b>`;
    }

    getTopicHtml(): string {
        return this.channel.topic;
    }

    getStrProperty(propKey: number): string {
        for (const key of Object.keys(PROPKEY)) {
            if (PROPKEY[key] == propKey) {
                console.warn("string PROPKEY." + key);
            }
        }

        return "";
    }

    getStrPropertyWithXmlStripped(propKey: number): string {
        for (const key of Object.keys(PROPKEY)) {
            if (PROPKEY[key] == propKey) {
                console.warn("string w/o Xml PROPKEY." + key);
            }
        }

        return "";
    }

    getIntProperty(propKey: number): number {
        for (const key of Object.keys(PROPKEY)) {
            if (PROPKEY[key] == propKey) {
                console.warn("int PROPKEY." + key);
            }
        }

        if (propKey == PROPKEY.conversation_LOCAL_LIVESTATUS) {
            return Conversation.local_LIVESTATUS_OTHERS_ARE_LIVE;
        }

        if (propKey == PROPKEY.conversation_TYPE) {
            return Conversation.type_CONFERENCE;
        }

        if (propKey == PROPKEY.conversation_PINNED_ORDER) {
            return 0;
        }

        return 0;
    }

    setExtendedStrProperty(propKey: number, value: string): void {
        console.warn('Conversation#setExtendedStrProperty not implemented')
    }
    setExtendedIntProperty(propKey: number, value: number): void {
        console.warn('Conversation#setExtendedIntProperty not implemented')
    }
    static typetoString(val: number): string {
        throw new Error('Conversation#typetoString not implemented')
    }
    static my_STATUSToString(val: number): string {
        throw new Error('Conversation#my_STATUSToString not implemented')
    }
    static local_LIVESTATUSToString(val: number): string {
        throw new Error('Conversation#local_LIVESTATUSToString not implemented')
    }
    static allowed_ACTIVITYToString(val: number): string {
        throw new Error('Conversation#allowed_ACTIVITYToString not implemented')
    }
    static premium_VIDEO_STATUSToString(val: number): string {
        throw new Error('Conversation#premium_VIDEO_STATUSToString not implemented')
    }
    static live_SESSION_EVENTToString(val: number): string {
        throw new Error('Conversation#live_SESSION_EVENTToString not implemented')
    }
    static picture_FORMATToString(val: number): string {
        throw new Error('Conversation#picture_FORMATToString not implemented')
    }
    setOption(propKey: number, value: number): boolean {
        throw new Error('Conversation#setOption not implemented')
    }
    setTopic(topic: string, isXML: boolean): boolean {
        throw new Error('Conversation#setTopic not implemented')
    }
    setPicture(jpeg: Binary): boolean {
        throw new Error('Conversation#setPicture not implemented')
    }
    spawnConference(identitiesToAdd: VectGIString, autoRingAddedParticipantsIfLive: boolean): number {
        throw new Error('Conversation#spawnConference not implemented')
    }
    addConsumers(identities: VectGIString, autoRingAddedParticipantsIfLive: boolean): boolean {
        throw new Error('Conversation#addConsumers not implemented')
    }
    canAddConsumersOrSpawn(identities: VectGIString): boolean {
        throw new Error('Conversation#canAddConsumersOrSpawn not implemented')
    }
    assimilate(otherConversationObjectID: number): number {
        throw new Error('Conversation#assimilate not implemented')
    }
    joinLiveSession(accessToken: string): boolean {
        throw new Error('Conversation#joinLiveSession not implemented')
    }
    ringOthers(identities: VectGIString, videoCall: boolean, origin: string): boolean {
        throw new Error('Conversation#ringOthers not implemented')
    }
    ringSeamless(videoCall: boolean): boolean {
        throw new Error('Conversation#ringSeamless not implemented')
    }
    muteMyMicrophone(): boolean {
        throw new Error('Conversation#muteMyMicrophone not implemented')
    }
    unmuteMyMicrophone(): boolean {
        throw new Error('Conversation#unmuteMyMicrophone not implemented')
    }
    holdMyLiveSession(): boolean {
        throw new Error('Conversation#holdMyLiveSession not implemented')
    }
    resumeMyLiveSession(): boolean {
        throw new Error('Conversation#resumeMyLiveSession not implemented')
    }
    leaveLiveSession(postVoiceAutoresponse: boolean): boolean {
        throw new Error('Conversation#leaveLiveSession not implemented')
    }
    startVoiceMessage(): boolean {
        throw new Error('Conversation#startVoiceMessage not implemented')
    }
    transferLiveSession(identities: VectGIString, transferTopic: string, context: Binary): boolean {
        throw new Error('Conversation#transferLiveSession not implemented')
    }
    canTransferLiveSession(identity: string): boolean {
        throw new Error('Conversation#canTransferLiveSession not implemented')
    }
    sendDTMF(dtmf: number, lengthInMS: number): boolean {
        throw new Error('Conversation#sendDTMF not implemented')
    }
    stopSendDTMF(): boolean {
        throw new Error('Conversation#stopSendDTMF not implemented')
    }
    provideLiveSessionQualityFeedback(questionaryID: string, trackingReason: string, qualityRating: number, problemTokens: string, cdr_id: string): boolean {
        throw new Error('Conversation#provideLiveSessionQualityFeedback not implemented')
    }
    setMyTextStatusTo(status: number): boolean {
        throw new Error('Conversation#setMyTextStatusTo not implemented')
    }
    postText(text: string, isXML: boolean): number {
        throw new Error('Conversation#postText not implemented')
    }
    postContacts(contacts: VectUnsignedInt, altText: string): boolean {
        throw new Error('Conversation#postContacts not implemented')
    }
    postFiles(paths: VectGIFilename, body: string, error_file: Filename): ConversationPostFilesResult {
        throw new Error('Conversation#postFiles not implemented')
    }
    postVoiceMessage(voicemailObjectID: number, body: string): boolean {
        throw new Error('Conversation#postVoiceMessage not implemented')
    }
    postSMS(smsObjectID: number, body: string): boolean {
        throw new Error('Conversation#postSMS not implemented')
    }
    postVideoMessage(videoMessageObjectID: number, legacyMessage: string): boolean {
        throw new Error('Conversation#postVideoMessage not implemented')
    }
    postMediaDocument(documentObjectID: number, legacyMessage: string): boolean {
        throw new Error('Conversation#postMediaDocument not implemented')
    }
    postExternalMessage(type: number, bodyXml: string): number {
        throw new Error('Conversation#postExternalMessage not implemented')
    }
    postLocationMessage(latitude: number, longitude: number, altitude: number, horizontalAccuracy: number, verticalAccuracy: number, speed: number, course: number, timeStamp: number, address: string, pointOfInterest: string, legacyMessage: string): number {
        throw new Error('Conversation#postLocationMessage not implemented')
    }
    postSystemMessage(text: string, isXML: boolean): number {
        throw new Error('Conversation#postSystemMessage not implemented')
    }
    getJoinBlob(): string {
        throw new Error('Conversation#getJoinBlob not implemented')
    }
    getNonseWord(): string {
        throw new Error('Conversation#getNonseWord not implemented')
    }
    setDeferredSetup(deferred: boolean): boolean {
        throw new Error('Conversation#setDeferredSetup not implemented')
    }
    join_(): boolean {
        throw new Error('Conversation#join_ not implemented')
    }
    enterPassword(password: string): boolean {
        throw new Error('Conversation#enterPassword not implemented')
    }
    setPassword(password: string, hint: string): boolean {
        throw new Error('Conversation#setPassword not implemented')
    }
    retireFrom(): boolean {
        throw new Error('Conversation#retireFrom not implemented')
    }
    delete(): boolean {
        throw new Error('Conversation#delete not implemented')
    }
    renameTo(name: string): boolean {
        throw new Error('Conversation#renameTo not implemented')
    }
    setBookmark(bookmark: boolean): boolean {
        throw new Error('Conversation#setBookmark not implemented')
    }
    setAlertString(alertString: string): boolean {
        throw new Error('Conversation#setAlertString not implemented')
    }
    removeFromInbox(): boolean {
        throw new Error('Conversation#removeFromInbox not implemented')
    }
    addToInbox(timestamp: number): boolean {
        throw new Error('Conversation#addToInbox not implemented')
    }
    setConsumedHorizon(timestamp: number, also_unconsume: boolean): boolean {
        throw new Error('Conversation#setConsumedHorizon not implemented')
    }
    markUnread(): boolean {
        throw new Error('Conversation#markUnread not implemented')
    }
    isMemberOf(groupObjectID: number): boolean {
        throw new Error('Conversation#isMemberOf not implemented')
    }
    pinFirst(): boolean {
        throw new Error('Conversation#pinFirst not implemented')
    }
    pinAfter(previousConversationObjectID: number): boolean {
        throw new Error('Conversation#pinAfter not implemented')
    }
    unPin(): boolean {
        throw new Error('Conversation#unPin not implemented')
    }
    static participantfiltertoString(val: number): string {
        throw new Error('Conversation#participantfiltertoString not implemented')
    }
    getParticipants(participants: VectUnsignedInt, filter: number): void {
        console.warn('Conversation#getParticipants not implemented')
    }
    getLastMessages(contextMessages: VectUnsignedInt, unconsumedMessages: VectUnsignedInt, requireTimestamp: number): void {
        console.warn('Conversation#getLastMessages not implemented')
    }
    loadMessages(timestampExcl: number, count: number, returnNewer: boolean, messages: VectUnsignedInt): void {
        console.warn('Conversation#loadMessages not implemented')
    }
    findMessage(text: string, fromTimestampUp: number): number {
        throw new Error('Conversation#findMessage not implemented')
    }
    attachVideoToLiveSession(sendVideoObjectID: number): boolean {
        throw new Error('Conversation#attachVideoToLiveSession not implemented')
    }
    static list_TYPEToString(val: number): string {
        throw new Error('Conversation#list_TYPEToString not implemented')
    }
    static capabilitytoString(val: number): string {
        throw new Error('Conversation#capabilitytoString not implemented')
    }
    getCapabilities(): VectBool {
        throw new Error('Conversation#getCapabilities not implemented')
    }
    static subscription_CHECK_CONTEXTToString(val: number): string {
        throw new Error('Conversation#subscription_CHECK_CONTEXTToString not implemented')
    }
    checkPremiumVideoSubscription(context: number): number {
        throw new Error('Conversation#checkPremiumVideoSubscription not implemented')
    }
    getChatNameFromThreadId(): string {
        throw new Error('Conversation#getChatNameFromThreadId not implemented')
    }
    getThreadIdFromChatName(): string {
        throw new Error('Conversation#getThreadIdFromChatName not implemented')
    }
    subscribePropChanges(propKeys: IVector<number>): void {
        console.warn('Conversation#subscribePropChanges not implemented')
    }
    discard(): void {
        console.warn('Conversation#discard not implemented')
    }
    close(): void {
        console.warn('Conversation#close not implemented')
    }

    private __propertiesChanged: Set<PropertiesChangedEventType> = new Set();
    @Enumerable(true)
    set onpropertieschanged(handler: PropertiesChangedEventType) {
        this.__propertiesChanged.add(handler);
    }

    private __participantListChange: Set<ParticipantListChangeEventType> = new Set();
    @Enumerable(true)
    set onparticipantlistchange(handler: ParticipantListChangeEventType) {
        this.__participantListChange.add(handler);
    }

    private __propertyChange: Set<OnPropertyChangeType> = new Set();
    @Enumerable(true)
    set onpropertychange(handler: OnPropertyChangeType) {
        this.__propertyChange.add(handler);
    }

    private __liveSessionEvent: Set<OnLiveSessionEventType> = new Set();
    @Enumerable(true)
    set onlivesessionevent(handler: OnLiveSessionEventType) {
        this.__liveSessionEvent.add(handler);
    }

    private __liveSessionMoved: Set<OnLiveSessionMovedType> = new Set();
    @Enumerable(true)
    set onlivesessionmoved(handler: OnLiveSessionMovedType) {
        this.__liveSessionMoved.add(handler);
    }

    private __premiumVideoSubscriptionCheckResult: Set<OnPremiumVideoSubscriptionCheckResultType> = new Set();
    @Enumerable(true)
    set onpremiumvideosubscriptioncheckresult(handler: OnPremiumVideoSubscriptionCheckResultType) {
        this.__premiumVideoSubscriptionCheckResult.add(handler);
    }

    private __capabilitiesChanged: Set<OnCapabilitiesChangedType> = new Set();
    @Enumerable(true)
    set oncapabilitieschanged(handler: OnCapabilitiesChangedType) {
        this.__capabilitiesChanged.add(handler);
    }

    private __spawnedConference: Set<OnSpawnConferenceType> = new Set();
    @Enumerable(true)
    set onspawnedconference(handler: OnSpawnConferenceType) {
        this.__spawnedConference.add(handler);
    }

    private __incomingMessage: Set<ConversationOnMessageType> = new Set();
    @Enumerable(true)
    set onincomingmessage(handler: ConversationOnMessageType) {
        this.__incomingMessage.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertieschanged':
                this.__propertiesChanged.add(handler);
                break;
            case 'participantlistchange':
                this.__participantListChange.add(handler);
                break;
            case 'propertychange':
                this.__propertyChange.add(handler);
                break;
            case 'livesessionevent':
                this.__liveSessionEvent.add(handler);
                break;
            case 'livesessionmoved':
                this.__liveSessionMoved.add(handler);
                break;
            case 'premiumvideosubscriptioncheckresult':
                this.__premiumVideoSubscriptionCheckResult.add(handler);
                break;
            case 'capabilitieschanged':
                this.__capabilitiesChanged.add(handler);
                break;
            case 'spawnedconference':
                this.__spawnedConference.add(handler);
                break;
            case 'incomingmessage':
                this.__incomingMessage.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertieschanged':
                this.__propertiesChanged.delete(handler);
                break;
            case 'participantlistchange':
                this.__participantListChange.delete(handler);
                break;
            case 'propertychange':
                this.__propertyChange.delete(handler);
                break;
            case 'livesessionevent':
                this.__liveSessionEvent.delete(handler);
                break;
            case 'livesessionmoved':
                this.__liveSessionMoved.delete(handler);
                break;
            case 'premiumvideosubscriptioncheckresult':
                this.__premiumVideoSubscriptionCheckResult.delete(handler);
                break;
            case 'capabilitieschanged':
                this.__capabilitiesChanged.delete(handler);
                break;
            case 'spawnedconference':
                this.__spawnedConference.delete(handler);
                break;
            case 'incomingmessage':
                this.__incomingMessage.delete(handler);
                break;
        }
    }
}
