// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from LibWrap 255.255.255.255 at Fri Mar 26 17:24:55 2021
// </auto-generated>
// --------------------------------------------------

import { OnCaptureRequestCompletedType } from "./OnCaptureRequestCompletedType";
import { OnLastFrameCaptureType } from "./OnLastFrameCaptureType";
import { OnPropertyChangeType } from "./OnPropertyChangeType";
import { VideoGetCurrentVideoDeviceResult } from "./VideoGetCurrentVideoDeviceResult";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('LibWrap.Video')
export class Video implements IClosable { 
    static orientation_TRANSPOSE_MASK: number = null;
    static orientation_FLIP_V_MASK: number = null;
    static orientation_FLIP_H_MASK: number = null;
    static orientation_TRANSPOSE_FLIP_H_V: number = null;
    static orientation_TRANSPOSE_FLIP_V: number = null;
    static orientation_TRANSPOSE_FLIP_H: number = null;
    static orientation_TRANSPOSE: number = null;
    static orientation_FLIP_H_V: number = null;
    static orientation_FLIP_V: number = null;
    static orientation_FLIP_H: number = null;
    static orientation_NONE: number = null;
    static video_DEVICE_CAPABILITY_VIDEOCAP_USB_HIGHSPEED: number = null;
    static video_DEVICE_CAPABILITY_VIDEOCAP_REQ_DRIVERUPDATE: number = null;
    static video_DEVICE_CAPABILITY_VIDEOCAP_HQ_CERTIFIED: number = null;
    static video_DEVICE_CAPABILITY_VIDEOCAP_HQ_CAPABLE: number = null;
    static mediatype_MEDIA_VIDEO: number = null;
    static mediatype_MEDIA_SCREENSHARING: number = null;
    static status_UNATTACHED: number = null;
    static status_SWITCHING_DEVICE: number = null;
    static status_CHECKING_SUBSCRIPTION: number = null;
    static status_UNKNOWN: number = null;
    static status_HINT_IS_VIDEOCALL_RECEIVED: number = null;
    static status_NOT_STARTED: number = null;
    static status_PAUSED: number = null;
    static status_STOPPING: number = null;
    static status_RUNNING: number = null;
    static status_REJECTED: number = null;
    static status_STARTING: number = null;
    static status_AVAILABLE: number = null;
    static status_NOT_AVAILABLE: number = null;
    static setupkey_VIDEO_ADVERTPOLICY: string = null;
    static setupkey_VIDEO_RECVPOLICY: string = null;
    static setupkey_VIDEO_DISABLE: string = null;
    static setupkey_VIDEO_AUTOSEND: string = null;
    static setupkey_VIDEO_DEVICE_PATH: string = null;
    static setupkey_VIDEO_DEVICE: string = null;
    getObjectID(): number {
        throw new Error('Video#getObjectID not implemented')
    }
    getDbID(): number {
        throw new Error('Video#getDbID not implemented')
    }
    getStrProperty(propKey: number): string {
        throw new Error('Video#getStrProperty not implemented')
    }
    getStrPropertyWithXmlStripped(propKey: number): string {
        throw new Error('Video#getStrPropertyWithXmlStripped not implemented')
    }
    getIntProperty(propKey: number): number {
        throw new Error('Video#getIntProperty not implemented')
    }
    setExtendedStrProperty(propKey: number, value: string): void {
        console.warn('Video#setExtendedStrProperty not implemented')
    }
    setExtendedIntProperty(propKey: number, value: number): void {
        console.warn('Video#setExtendedIntProperty not implemented')
    }
    static statustoString(val: number): string {
        throw new Error('Video#statustoString not implemented')
    }
    static mediatypetoString(val: number): string {
        throw new Error('Video#mediatypetoString not implemented')
    }
    static video_DEVICE_CAPABILITYToString(val: number): string {
        throw new Error('Video#video_DEVICE_CAPABILITYToString not implemented')
    }
    start(): void {
        console.warn('Video#start not implemented')
    }
    stop(): void {
        console.warn('Video#stop not implemented')
    }
    setIncomingTransmissionsDesired(desire: boolean): void {
        console.warn('Video#setIncomingTransmissionsDesired not implemented')
    }
    setScreenCaptureRectangle(x0: number, y0: number, width: number, height: number, monitorNumber: number, windowHandle: number): void {
        console.warn('Video#setScreenCaptureRectangle not implemented')
    }
    setRemoteRendererId(id: number): void {
        console.warn('Video#setRemoteRendererId not implemented')
    }
    setVideoConsumptionProperties(renderedWidth: number, renderedHeight: number): void {
        console.warn('Video#setVideoConsumptionProperties not implemented')
    }
    getCurrentVideoDevice(): VideoGetCurrentVideoDeviceResult {
        throw new Error('Video#getCurrentVideoDevice not implemented')
    }
    discard(): void {
        console.warn('Video#discard not implemented')
    }
    getVideoSrc(): string {
        throw new Error('Video#getVideoSrc not implemented')
    }
    getVideoDeviceHandle(): string {
        throw new Error('Video#getVideoDeviceHandle not implemented')
    }
    getAspectRatio(): number {
        throw new Error('Video#getAspectRatio not implemented')
    }
    getOrientation(): number {
        throw new Error('Video#getOrientation not implemented')
    }
    getWidth(): number {
        throw new Error('Video#getWidth not implemented')
    }
    getHeight(): number {
        throw new Error('Video#getHeight not implemented')
    }
    setVisible(visible: boolean): boolean {
        throw new Error('Video#setVisible not implemented')
    }
    close(): void {
        console.warn('Video#close not implemented')
    }

    private __propertyChange: Set<OnPropertyChangeType> = new Set();
    @Enumerable(true)
    set onpropertychange(handler: OnPropertyChangeType) {
        this.__propertyChange.add(handler);
    }

    private __lastFrameCapture: Set<OnLastFrameCaptureType> = new Set();
    @Enumerable(true)
    set onlastframecapture(handler: OnLastFrameCaptureType) {
        this.__lastFrameCapture.add(handler);
    }

    private __captureRequestCompleted: Set<OnCaptureRequestCompletedType> = new Set();
    @Enumerable(true)
    set oncapturerequestcompleted(handler: OnCaptureRequestCompletedType) {
        this.__captureRequestCompleted.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.add(handler);
                break;
            case 'lastframecapture':
                this.__lastFrameCapture.add(handler);
                break;
            case 'capturerequestcompleted':
                this.__captureRequestCompleted.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertychange':
                this.__propertyChange.delete(handler);
                break;
            case 'lastframecapture':
                this.__lastFrameCapture.delete(handler);
                break;
            case 'capturerequestcompleted':
                this.__captureRequestCompleted.delete(handler);
                break;
        }
    }
}
