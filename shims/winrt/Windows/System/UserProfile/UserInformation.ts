// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:08 2021
// </auto-generated>
// --------------------------------------------------

import { EventHandler } from "../../Foundation/EventHandler`1";
import { AsyncOperation, IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { Uri } from "../../Foundation/Uri";
import { IStorageFile } from "../../Storage/IStorageFile";
import { IRandomAccessStream } from "../../Storage/Streams/IRandomAccessStream";
import { AccountPictureKind } from "./AccountPictureKind";
import { SetAccountPictureResult } from "./SetAccountPictureResult";

const os = require ("os");

@GenerateShim('Windows.System.UserProfile.UserInformation')
export class UserInformation { 
    static accountPictureChangeEnabled: boolean = null;
    static nameAccessAllowed: boolean = null;

    static getDisplayNameAsync(): IAsyncOperation<string> {
        return AsyncOperation.from(async () => os.userInfo().username);
    }

    static getAccountPicture(kind: AccountPictureKind): IStorageFile {
        throw new Error('UserInformation#getAccountPicture not implemented')
    }
    static setAccountPictureAsync(image: IStorageFile): IAsyncOperation<SetAccountPictureResult> {
        throw new Error('UserInformation#setAccountPictureAsync not implemented')
    }
    static setAccountPicturesAsync(smallImage: IStorageFile, largeImage: IStorageFile, video: IStorageFile): IAsyncOperation<SetAccountPictureResult> {
        throw new Error('UserInformation#setAccountPicturesAsync not implemented')
    }
    static setAccountPictureFromStreamAsync(image: IRandomAccessStream): IAsyncOperation<SetAccountPictureResult> {
        throw new Error('UserInformation#setAccountPictureFromStreamAsync not implemented')
    }
    static setAccountPicturesFromStreamsAsync(smallImage: IRandomAccessStream, largeImage: IRandomAccessStream, video: IRandomAccessStream): IAsyncOperation<SetAccountPictureResult> {
        throw new Error('UserInformation#setAccountPicturesFromStreamsAsync not implemented')
    }
    static getFirstNameAsync(): IAsyncOperation<string> {
        throw new Error('UserInformation#getFirstNameAsync not implemented')
    }
    static getLastNameAsync(): IAsyncOperation<string> {
        throw new Error('UserInformation#getLastNameAsync not implemented')
    }
    static getPrincipalNameAsync(): IAsyncOperation<string> {
        throw new Error('UserInformation#getPrincipalNameAsync not implemented')
    }
    static getSessionInitiationProtocolUriAsync(): IAsyncOperation<Uri> {
        throw new Error('UserInformation#getSessionInitiationProtocolUriAsync not implemented')
    }
    static getDomainNameAsync(): IAsyncOperation<string> {
        throw new Error('UserInformation#getDomainNameAsync not implemented')
    }

    static __accountPictureChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onaccountpicturechanged(handler: EventHandler<any>) {
        UserInformation.__accountPictureChanged.add(handler);
    }

    static addEventListener(name: string, handler: any) {
        switch (name) {
            case 'accountpicturechanged':
                UserInformation.__accountPictureChanged.add(handler);
                break;
        }
    }

    static removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'accountpicturechanged':
                UserInformation.__accountPictureChanged.delete(handler);
                break;
        }
    }
}
