// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:01 2021
// </auto-generated>
// --------------------------------------------------

import { LocalContentSuggestionSettings } from "./LocalContentSuggestionSettings";
import { SearchPaneQueryChangedEventArgs } from "./SearchPaneQueryChangedEventArgs";
import { SearchPaneQuerySubmittedEventArgs } from "./SearchPaneQuerySubmittedEventArgs";
import { SearchPaneResultSuggestionChosenEventArgs } from "./SearchPaneResultSuggestionChosenEventArgs";
import { SearchPaneSuggestionsRequestedEventArgs } from "./SearchPaneSuggestionsRequestedEventArgs";
import { SearchPaneVisibilityChangedEventArgs } from "./SearchPaneVisibilityChangedEventArgs";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";

@GenerateShim('Windows.ApplicationModel.Search.SearchPane')
export class SearchPane { 
    showOnKeyboardInput: boolean = null;
    searchHistoryEnabled: boolean = null;
    searchHistoryContext: string = null;
    placeholderText: string = null;
    language: string = null;
    queryText: string = null;
    visible: boolean = null;
    setLocalContentSuggestionSettings(settings: LocalContentSuggestionSettings): void {
        console.warn('SearchPane#setLocalContentSuggestionSettings not implemented')
    }
    showOverloadDefault(): void {
        console.warn('SearchPane#showOverloadDefault not implemented')
    }
    showOverloadWithQuery(query: string): void {
        console.warn('SearchPane#showOverloadWithQuery not implemented')
    }
    trySetQueryText(query: string): boolean {
        throw new Error('SearchPane#trySetQueryText not implemented')
    }
    static hideThisApplication(): void {
        console.warn('SearchPane#hideThisApplication not implemented')
    }
    static getForCurrentView(): SearchPane {
        throw new Error('SearchPane#getForCurrentView not implemented')
    }

    #queryChanged: Set<TypedEventHandler<SearchPane, SearchPaneQueryChangedEventArgs>> = new Set();
    @Enumerable(true)
    set onquerychanged(handler: TypedEventHandler<SearchPane, SearchPaneQueryChangedEventArgs>) {
        this.#queryChanged.add(handler);
    }

    #querySubmitted: Set<TypedEventHandler<SearchPane, SearchPaneQuerySubmittedEventArgs>> = new Set();
    @Enumerable(true)
    set onquerysubmitted(handler: TypedEventHandler<SearchPane, SearchPaneQuerySubmittedEventArgs>) {
        this.#querySubmitted.add(handler);
    }

    #resultSuggestionChosen: Set<TypedEventHandler<SearchPane, SearchPaneResultSuggestionChosenEventArgs>> = new Set();
    @Enumerable(true)
    set onresultsuggestionchosen(handler: TypedEventHandler<SearchPane, SearchPaneResultSuggestionChosenEventArgs>) {
        this.#resultSuggestionChosen.add(handler);
    }

    #suggestionsRequested: Set<TypedEventHandler<SearchPane, SearchPaneSuggestionsRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set onsuggestionsrequested(handler: TypedEventHandler<SearchPane, SearchPaneSuggestionsRequestedEventArgs>) {
        this.#suggestionsRequested.add(handler);
    }

    #visibilityChanged: Set<TypedEventHandler<SearchPane, SearchPaneVisibilityChangedEventArgs>> = new Set();
    @Enumerable(true)
    set onvisibilitychanged(handler: TypedEventHandler<SearchPane, SearchPaneVisibilityChangedEventArgs>) {
        this.#visibilityChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'querychanged':
                this.#queryChanged.add(handler);
                break;
            case 'querysubmitted':
                this.#querySubmitted.add(handler);
                break;
            case 'resultsuggestionchosen':
                this.#resultSuggestionChosen.add(handler);
                break;
            case 'suggestionsrequested':
                this.#suggestionsRequested.add(handler);
                break;
            case 'visibilitychanged':
                this.#visibilityChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'querychanged':
                this.#queryChanged.delete(handler);
                break;
            case 'querysubmitted':
                this.#querySubmitted.delete(handler);
                break;
            case 'resultsuggestionchosen':
                this.#resultSuggestionChosen.delete(handler);
                break;
            case 'suggestionsrequested':
                this.#suggestionsRequested.delete(handler);
                break;
            case 'visibilitychanged':
                this.#visibilityChanged.delete(handler);
                break;
        }
    }
}
