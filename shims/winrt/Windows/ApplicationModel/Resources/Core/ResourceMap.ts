// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:00 2021
// </auto-generated>
// --------------------------------------------------

import { NamedResource } from "./NamedResource";
import { ResourceCandidate } from "./ResourceCandidate";
import { ResourceContext } from "./ResourceContext";
import { IIterable } from "../../../Foundation/Collections/IIterable`1";
import { IIterator } from "../../../Foundation/Collections/IIterator`1";
import { IKeyValuePair } from "../../../Foundation/Collections/IKeyValuePair`2";
import { IMapView } from "../../../Foundation/Collections/IMapView`2";
import { GenerateShim } from "../../../Foundation/Interop/GenerateShim";
import { Uri } from "../../../Foundation/Uri";
import { Dictionary } from "../../../Foundation/Interop/Dictionary`2";
import { Package } from "../../Package";

import deepRename from "deep-rename-keys"
import { getCurrentPackageName } from "../../../Foundation/Interop/Utils";
import { ResourceQualifier } from "./ResourceQualifier";
const path = require('path');
const fs = require('fs');
const { remote } = require("electron");

const supportedLanguages = ["en-gb", "en-us", "en", "generic"]; // this should be detected from the system. KEEP IN SYNC WITH index.ts!!

export class ResourceMap extends Dictionary<string, NamedResource> {
    __parent: ResourceMap;
    __languages: Map<any, any>;
    __subtree: string;

    get uri(): Uri {
        return new Uri(this.__parent != null ? this.__parent.__subtree + this.__subtree : this.__subtree);
    }

    constructor(parent?: ResourceMap, subtree?: string) {
        super();
        if (parent == null) {
            this.__subtree = "ms-resource://"
            this.__languages = new Map();
            let basePath = path.join(remote.app.getAppPath(), "packages", getCurrentPackageName(), "resources");
            for (const language of supportedLanguages) {
                let filePath = path.join(basePath, language + ".json");
                if (fs.existsSync(filePath)) {
                    const resourcesJson = fs.readFileSync(filePath, "utf-8");
                    const parsedResource = deepRename(JSON.parse(resourcesJson), (k: string) => k.toLowerCase());
                    this.__languages.set(language, parsedResource);
                }
            }
        }
        else {
            this.__parent = parent;
            this.__subtree = subtree;
            this.__languages = new Map();
            for (const key of parent.__languages.keys()) {
                this.__languages.set(key, parent.__languages.get(key)[subtree.toLowerCase()]);
            }
        }
    }

    getValue(resource: string): ResourceCandidate {
        if (resource.startsWith("ms-resource")) {
            resource = resource.substring(12);
        }

        if (!resource.startsWith("/")) {
            resource = "/resources/" + resource;
        }

        let splits = resource.toLowerCase().split("/");
        let name = splits[splits.length - 1];
        let subsplits = splits.slice(0, splits.length - 1);
        let string = null;

        let lang = null;
        for (const language of this.__languages) {
            if (string != null)
                break;

            lang = language[0];
            let json = language[1];
            for (const split of subsplits) {
                if (json === undefined || split == null || split == "")
                    continue;

                json = json[split];
            }

            if (json === undefined)
                continue;

            string = json[name];
        }

        console.debug(`ResourceMap:got string ${string} for ${resource}`);

        let candidate = new ResourceCandidate();
        candidate.valueAsString = string;

        let qualifier = new ResourceQualifier();
        qualifier.qualifierName = "Language";
        qualifier.qualifierValue = lang;
        candidate.qualifiers.append(qualifier);

        return candidate;
    }

    getSubtree(reference: string): ResourceMap {
        return new ResourceMap(this, reference);
    }

    getValueForContext(resource: string, context: ResourceContext): ResourceCandidate {
        throw new Error('ResourceMap#getValueForContext not implemented')
    }
}
