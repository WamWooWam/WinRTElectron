// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:22:59 2021
// </auto-generated>
// --------------------------------------------------

import { PackageId } from "./PackageId";
import { IVectorView } from "../Foundation/Collections/IVectorView`1";
import { GenerateShim } from "../Foundation/Interop/GenerateShim";
import { Uri } from "../Foundation/Uri";
import { StorageFolder } from "../Storage/StorageFolder";
import { getCurrentPackageName } from "../Foundation/Interop/Utils";

import * as fs from "fs";
import * as path from "path"
import { ipcRenderer, remote } from "electron";
import { ProcessorArchitecture } from "../System/ProcessorArchitecture";

@GenerateShim('Windows.ApplicationModel.Package')
export class Package {
    constructor(name: string) {
        let appPath = remote?.app.getAppPath();
        let packageManifestPath = path.join(appPath, "packages", name, "AppxManifest.xml");
        if (!fs.existsSync(packageManifestPath)) {
            return;
        }

        this.installedLocation = StorageFolder.getFolderFromPathSync(path.dirname(packageManifestPath), false);

        let content = fs.readFileSync(packageManifestPath, 'utf-8');
        let manifestDocument = new DOMParser().parseFromString(content, 'application/xml');
        let identityElement = manifestDocument.querySelector("Identity");

        let version = identityElement.getAttribute("Version")
                                     .split('.')
                                     .map(s => parseInt(s));

        this.id.name = identityElement.getAttribute("Name");
        this.id.architecture = ProcessorArchitecture[identityElement.getAttribute("ProcessorArchitecture")]
        this.id.publisher = identityElement.getAttribute("Publisher");
        this.id.version = { major: version[0], minor: version[1], build: version[2], revision: version[3] }
    }

    dependencies: IVectorView<Package> = null;
    id: PackageId = new PackageId();
    installedLocation: StorageFolder = null;
    isFramework: boolean = null;
    description: string = null;
    displayName: string = null;
    isBundle: boolean = null;
    isDevelopmentMode: boolean = null;
    isResourcePackage: boolean = null;
    logo: Uri = null;
    publisherDisplayName: string = null;

    static _current: Package = null;
    static get current(): Package {
        return (Package._current ?? (Package._current = new Package(getCurrentPackageName())));
    } 
}
