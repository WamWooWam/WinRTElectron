// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:00 2021
// </auto-generated>
// --------------------------------------------------

import { DataPackageOperation } from "./DataPackageOperation";
import { DataPackagePropertySet } from "./DataPackagePropertySet";
import { DataPackageView } from "./DataPackageView";
import { DataProviderHandler } from "./DataProviderHandler";
import { OperationCompletedEventArgs } from "./OperationCompletedEventArgs";
import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IMap } from "../../Foundation/Collections/IMap`2";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { Uri } from "../../Foundation/Uri";
import { IStorageItem } from "../../Storage/IStorageItem";
import { RandomAccessStreamReference } from "../../Storage/Streams/RandomAccessStreamReference";

@GenerateShim('Windows.ApplicationModel.DataTransfer.DataPackage')
export class DataPackage { 
    requestedOperation: DataPackageOperation = null;
    properties: DataPackagePropertySet = null;
    resourceMap: IMap<string, RandomAccessStreamReference> = null;
    getView(): DataPackageView {
        throw new Error('DataPackage#getView not implemented')
    }
    setData(formatId: string, value: any): void {
        console.warn('DataPackage#setData not implemented')
    }
    setDataProvider(formatId: string, delayRenderer: DataProviderHandler): void {
        console.warn('DataPackage#setDataProvider not implemented')
    }
    setText(value: string): void {
        console.warn('DataPackage#setText not implemented')
    }
    setUri(value: Uri): void {
        console.warn('DataPackage#setUri not implemented')
    }
    setHtmlFormat(value: string): void {
        console.warn('DataPackage#setHtmlFormat not implemented')
    }
    setRtf(value: string): void {
        console.warn('DataPackage#setRtf not implemented')
    }
    setBitmap(value: RandomAccessStreamReference): void {
        console.warn('DataPackage#setBitmap not implemented')
    }
    setStorageItemsReadOnly(value: IIterable<IStorageItem>): void {
        console.warn('DataPackage#setStorageItemsReadOnly not implemented')
    }
    setStorageItems(value: IIterable<IStorageItem>, readOnly: boolean): void {
        console.warn('DataPackage#setStorageItems not implemented')
    }
    setApplicationLink(value: Uri): void {
        console.warn('DataPackage#setApplicationLink not implemented')
    }
    setWebLink(value: Uri): void {
        console.warn('DataPackage#setWebLink not implemented')
    }

    #destroyed: Set<TypedEventHandler<DataPackage, any>> = new Set();
    @Enumerable(true)
    set ondestroyed(handler: TypedEventHandler<DataPackage, any>) {
        this.#destroyed.add(handler);
    }

    #operationCompleted: Set<TypedEventHandler<DataPackage, OperationCompletedEventArgs>> = new Set();
    @Enumerable(true)
    set onoperationcompleted(handler: TypedEventHandler<DataPackage, OperationCompletedEventArgs>) {
        this.#operationCompleted.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'destroyed':
                this.#destroyed.add(handler);
                break;
            case 'operationcompleted':
                this.#operationCompleted.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'destroyed':
                this.#destroyed.delete(handler);
                break;
            case 'operationcompleted':
                this.#operationCompleted.delete(handler);
                break;
        }
    }
}
