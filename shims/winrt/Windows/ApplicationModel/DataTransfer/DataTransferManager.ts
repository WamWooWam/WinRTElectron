// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:00 2021
// </auto-generated>
// --------------------------------------------------

import { DataRequestedEventArgs } from "./DataRequestedEventArgs";
import { TargetApplicationChosenEventArgs } from "./TargetApplicationChosenEventArgs";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";

@GenerateShim('Windows.ApplicationModel.DataTransfer.DataTransferManager')
export class DataTransferManager { 
    static _instance: DataTransferManager = new DataTransferManager();

    static showShareUI(): void {
        console.warn('DataTransferManager#showShareUI not implemented')
    }
    static getForCurrentView(): DataTransferManager {
        // throw new Error('DataTransferManager#getForCurrentView not implemented')
        return DataTransferManager._instance;
    }

    #dataRequested: Set<TypedEventHandler<DataTransferManager, DataRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ondatarequested(handler: TypedEventHandler<DataTransferManager, DataRequestedEventArgs>) {
        this.#dataRequested.add(handler);
    }

    #targetApplicationChosen: Set<TypedEventHandler<DataTransferManager, TargetApplicationChosenEventArgs>> = new Set();
    @Enumerable(true)
    set ontargetapplicationchosen(handler: TypedEventHandler<DataTransferManager, TargetApplicationChosenEventArgs>) {
        this.#targetApplicationChosen.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'datarequested':
                this.#dataRequested.add(handler);
                break;
            case 'targetapplicationchosen':
                this.#targetApplicationChosen.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'datarequested':
                this.#dataRequested.delete(handler);
                break;
            case 'targetapplicationchosen':
                this.#targetApplicationChosen.delete(handler);
                break;
        }
    }
}
