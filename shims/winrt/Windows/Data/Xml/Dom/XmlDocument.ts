// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:01 2021
// </auto-generated>
// --------------------------------------------------

import { IXmlNode } from "./IXmlNode";
import { IXmlNodeSelector } from "./IXmlNodeSelector";
import { IXmlNodeSerializer } from "./IXmlNodeSerializer";
import { NodeType } from "./NodeType";
import { XmlAttribute } from "./XmlAttribute";
import { XmlCDataSection } from "./XmlCDataSection";
import { XmlComment } from "./XmlComment";
import { XmlDocumentFragment } from "./XmlDocumentFragment";
import { XmlDocumentType } from "./XmlDocumentType";
import { XmlDomImplementation } from "./XmlDomImplementation";
import { XmlElement } from "./XmlElement";
import { XmlEntityReference } from "./XmlEntityReference";
import { XmlLoadSettings } from "./XmlLoadSettings";
import { XmlNamedNodeMap } from "./XmlNamedNodeMap";
import { XmlNodeList } from "./XmlNodeList";
import { XmlProcessingInstruction } from "./XmlProcessingInstruction";
import { XmlText } from "./XmlText";
import { IAsyncAction } from "../../../Foundation/IAsyncAction";
import { IAsyncOperation } from "../../../Foundation/IAsyncOperation`1";
import { GenerateShim } from "../../../Foundation/Interop/GenerateShim";
import { Uri } from "../../../Foundation/Uri";
import { IStorageFile } from "../../../Storage/IStorageFile";
import { XmlNode } from "./XmlNode";

class XmlElementFactory {
    private document: XmlDocument;
    constructor(doc: XmlDocument) {
        this.document = doc;
    }

    getXmlNode(node: Node): IXmlNode {
        switch (node.nodeType) {
            case 1: // Element
                return new XmlElement(node, this.document);
            case 2: // attribute
                return new XmlAttribute(node, this.document);
            case 3: // text
                return new XmlText(node, this.document);
            default:
                throw new Error(`${node.nodeType}`);
        }
    }

    getNodeList(domElements: NodeListOf<Node> | HTMLCollectionOf<Element>) {
        let list = new XmlNodeList();
        for (let i = 0; i < domElements.length; i++) {
            const element = domElements[i];
            list.append(this.getXmlNode(element));
        }

        return list;
    }

}

// @GenerateShim('Windows.Data.Xml.Dom.XmlDocument')
export class XmlDocument extends XmlElement {
    __parser: DOMParser;
    __document: Document;
    __factory: XmlElementFactory;
    
    doctype: XmlDocumentType = null;
    documentElement: XmlElement = null;
    documentUri: string = null;
    implementation: XmlDomImplementation = null;

    constructor() {
        super(null, null);
        this.__parser = new DOMParser();
        this.__factory = new XmlElementFactory(this);
        this.ownerDocument = this;
        return this;
    }

    loadXml(xml: string): void {
        this.loadXmlWithSettings(xml, null)
    }
    loadXmlWithSettings(xml: string, loadSettings: XmlLoadSettings): void {
        this.__document = this.__parser.parseFromString(xml, 'application/xml');
        this.__domNode = this.__document.getRootNode();
        this.doctype = new XmlDocumentType(this.__document.doctype, this);
        this.documentElement = <XmlElement>this.__factory.getXmlNode(this.__document.documentElement);
    }
    saveToFileAsync(file: IStorageFile): IAsyncAction {
        throw new Error('XmlDocument#saveToFileAsync not implemented')
    }

    getElementsByTagName(tagName: string): XmlNodeList {
        let domElements = this.__document.getElementsByTagName(tagName);
        return this.__factory.getNodeList(domElements);
    }

    getElementById(elementId: string): XmlElement {
        throw new Error('XmlDocument#getElementById not implemented')
    }

    createElement(tagName: string): XmlElement {
        throw new Error('XmlDocument#createElement not implemented')
    }
    createDocumentFragment(): XmlDocumentFragment {
        throw new Error('XmlDocument#createDocumentFragment not implemented')
    }
    createTextNode(data: string): XmlText {
        return new XmlText(this.__document.createTextNode(data), this);
    }
    createComment(data: string): XmlComment {
        throw new Error('XmlDocument#createComment not implemented')
    }
    createProcessingInstruction(target: string, data: string): XmlProcessingInstruction {
        throw new Error('XmlDocument#createProcessingInstruction not implemented')
    }
    createAttribute(name: string): XmlAttribute {
        throw new Error('XmlDocument#createAttribute not implemented')
    }
    createEntityReference(name: string): XmlEntityReference {
        throw new Error('XmlDocument#createEntityReference not implemented')
    }
    createCDataSection(data: string): XmlCDataSection {
        throw new Error('XmlDocument#createCDataSection not implemented')
    }
    createAttributeNS(namespaceUri: any, qualifiedName: string): XmlAttribute {
        throw new Error('XmlDocument#createAttributeNS not implemented')
    }
    createElementNS(namespaceUri: any, qualifiedName: string): XmlElement {
        throw new Error('XmlDocument#createElementNS not implemented')
    }
    importNode(node: IXmlNode, deep: boolean): IXmlNode {
        return this.__factory.getXmlNode(this.__document.importNode(node.__domNode, deep));
    }

    static loadFromUriAsync(uri: Uri): IAsyncOperation<XmlDocument> {
        throw new Error('XmlDocument#loadFromUriAsync not implemented')
    }
    static loadFromUriWithSettingsAsync(uri: Uri, loadSettings: XmlLoadSettings): IAsyncOperation<XmlDocument> {
        throw new Error('XmlDocument#loadFromUriWithSettingsAsync not implemented')
    }
    static loadFromFileAsync(file: IStorageFile): IAsyncOperation<XmlDocument> {
        throw new Error('XmlDocument#loadFromFileAsync not implemented')
    }
    static loadFromFileWithSettingsAsync(file: IStorageFile, loadSettings: XmlLoadSettings): IAsyncOperation<XmlDocument> {
        throw new Error('XmlDocument#loadFromFileWithSettingsAsync not implemented')
    }
}
