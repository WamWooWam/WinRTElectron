// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:03 2021
// </auto-generated>
// --------------------------------------------------

import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IVectorView } from "../../Foundation/Collections/IVectorView`1";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { INumberFormatter } from "./INumberFormatter";
import { INumberFormatter2 } from "./INumberFormatter2";
import { INumberFormatterOptions } from "./INumberFormatterOptions";
import { INumberParser } from "./INumberParser";
import { INumberRounder } from "./INumberRounder";
import { INumberRounderOption } from "./INumberRounderOption";
import { ISignedZeroOption } from "./ISignedZeroOption";
import { ISignificantDigitsOption } from "./ISignificantDigitsOption";

@GenerateShim('Windows.Globalization.NumberFormatting.PercentFormatter')
export class PercentFormatter implements INumberFormatterOptions, INumberFormatter, INumberFormatter2, INumberParser, ISignificantDigitsOption, INumberRounderOption, ISignedZeroOption { 
    numeralSystem: string = null;
    isGrouped: boolean = null;
    isDecimalPointAlwaysDisplayed: boolean = null;
    integerDigits: number = null;
    fractionDigits: number = null;
    geographicRegion: string = null;
    languages: IVectorView<string> = null;
    resolvedGeographicRegion: string = null;
    resolvedLanguage: string = null;
    numberRounder: INumberRounder = null;
    significantDigits: number = null;
    isZeroSigned: boolean = null;
    // constructor();
    // constructor(languages: IIterable<string>, geographicRegion: string);
    constructor(...args) { }
    formatInt(value: number): string {
        throw new Error('PercentFormatter#formatInt not implemented')
    }
    formatUInt(value: number): string {
        throw new Error('PercentFormatter#formatUInt not implemented')
    }
    formatDouble(value: number): string {
        throw new Error('PercentFormatter#formatDouble not implemented')
    }
    parseInt(text: string): number | null {
        throw new Error('PercentFormatter#parseInt not implemented')
    }
    parseUInt(text: string): number | null {
        throw new Error('PercentFormatter#parseUInt not implemented')
    }
    parseDouble(text: string): number | null {
        throw new Error('PercentFormatter#parseDouble not implemented')
    }
}
