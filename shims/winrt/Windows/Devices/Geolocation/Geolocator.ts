// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { Geoposition } from "./Geoposition";
import { PositionAccuracy } from "./PositionAccuracy";
import { PositionChangedEventArgs } from "./PositionChangedEventArgs";
import { PositionStatus } from "./PositionStatus";
import { StatusChangedEventArgs } from "./StatusChangedEventArgs";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TimeSpan } from "../../Foundation/TimeSpan";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";

@GenerateShim('Windows.Devices.Geolocation.Geolocator')
export class Geolocator { 
    desiredAccuracyInMeters: number | null = null;
    reportInterval: number = null;
    movementThreshold: number = null;
    desiredAccuracy: PositionAccuracy = null;
    locationStatus: PositionStatus = null;
    getGeopositionAsync(): IAsyncOperation<Geoposition> {
        throw new Error('Geolocator#getGeopositionAsync not implemented')
    }
    getGeopositionAsyncWithAgeAndTimeout(maximumAge: number, timeout: number): IAsyncOperation<Geoposition> {
        throw new Error('Geolocator#getGeopositionAsyncWithAgeAndTimeout not implemented')
    }

    #positionChanged: Set<TypedEventHandler<Geolocator, PositionChangedEventArgs>> = new Set();
    @Enumerable(true)
    set onpositionchanged(handler: TypedEventHandler<Geolocator, PositionChangedEventArgs>) {
        this.#positionChanged.add(handler);
    }

    #statusChanged: Set<TypedEventHandler<Geolocator, StatusChangedEventArgs>> = new Set();
    @Enumerable(true)
    set onstatuschanged(handler: TypedEventHandler<Geolocator, StatusChangedEventArgs>) {
        this.#statusChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'positionchanged':
                this.#positionChanged.add(handler);
                break;
            case 'statuschanged':
                this.#statusChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'positionchanged':
                this.#positionChanged.delete(handler);
                break;
            case 'statuschanged':
                this.#statusChanged.delete(handler);
                break;
        }
    }
}
