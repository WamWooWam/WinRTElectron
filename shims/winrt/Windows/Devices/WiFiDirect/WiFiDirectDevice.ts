// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:03 2021
// </auto-generated>
// --------------------------------------------------

import { WiFiDirectConnectionStatus } from "./WiFiDirectConnectionStatus";
import { IVectorView } from "../../Foundation/Collections/IVectorView`1";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { IClosable } from "../../Foundation/IClosable";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { EndpointPair } from "../../Networking/EndpointPair";

@GenerateShim('Windows.Devices.WiFiDirect.WiFiDirectDevice')
export class WiFiDirectDevice implements IClosable { 
    connectionStatus: WiFiDirectConnectionStatus = null;
    deviceId: string = null;
    getConnectionEndpointPairs(): IVectorView<EndpointPair> {
        throw new Error('WiFiDirectDevice#getConnectionEndpointPairs not implemented')
    }
    close(): void {
        console.warn('WiFiDirectDevice#close not implemented')
    }
    static getDeviceSelector(): string {
        throw new Error('WiFiDirectDevice#getDeviceSelector not implemented')
    }
    static fromIdAsync(deviceId: string): IAsyncOperation<WiFiDirectDevice> {
        throw new Error('WiFiDirectDevice#fromIdAsync not implemented')
    }

    #connectionStatusChanged: Set<TypedEventHandler<WiFiDirectDevice, any>> = new Set();
    @Enumerable(true)
    set onconnectionstatuschanged(handler: TypedEventHandler<WiFiDirectDevice, any>) {
        this.#connectionStatusChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'connectionstatuschanged':
                this.#connectionStatusChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'connectionstatuschanged':
                this.#connectionStatusChanged.delete(handler);
                break;
        }
    }
}
