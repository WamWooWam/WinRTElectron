// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { BarcodeScannerDataReceivedEventArgs } from "./BarcodeScannerDataReceivedEventArgs";
import { BarcodeScannerErrorOccurredEventArgs } from "./BarcodeScannerErrorOccurredEventArgs";
import { BarcodeScannerImagePreviewReceivedEventArgs } from "./BarcodeScannerImagePreviewReceivedEventArgs";
import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IKeyValuePair } from "../../Foundation/Collections/IKeyValuePair`2";
import { EventHandler } from "../../Foundation/EventHandler`1";
import { IAsyncAction } from "../../Foundation/IAsyncAction";
import { IClosable } from "../../Foundation/IClosable";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";

@GenerateShim('Windows.Devices.PointOfService.ClaimedBarcodeScanner')
export class ClaimedBarcodeScanner implements IClosable { 
    isDisabledOnDataReceived: boolean = null;
    isDecodeDataEnabled: boolean = null;
    deviceId: string = null;
    isEnabled: boolean = null;
    enableAsync(): IAsyncAction {
        throw new Error('ClaimedBarcodeScanner#enableAsync not implemented')
    }
    disableAsync(): IAsyncAction {
        throw new Error('ClaimedBarcodeScanner#disableAsync not implemented')
    }
    retainDevice(): void {
        console.warn('ClaimedBarcodeScanner#retainDevice not implemented')
    }
    setActiveSymbologiesAsync(symbologies: IIterable<number>): IAsyncAction {
        throw new Error('ClaimedBarcodeScanner#setActiveSymbologiesAsync not implemented')
    }
    resetStatisticsAsync(statisticsCategories: IIterable<string>): IAsyncAction {
        throw new Error('ClaimedBarcodeScanner#resetStatisticsAsync not implemented')
    }
    updateStatisticsAsync(statistics: IIterable<IKeyValuePair<string, string>>): IAsyncAction {
        throw new Error('ClaimedBarcodeScanner#updateStatisticsAsync not implemented')
    }
    setActiveProfileAsync(profile: string): IAsyncAction {
        throw new Error('ClaimedBarcodeScanner#setActiveProfileAsync not implemented')
    }
    close(): void {
        console.warn('ClaimedBarcodeScanner#close not implemented')
    }

    #dataReceived: Set<TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerDataReceivedEventArgs>> = new Set();
    @Enumerable(true)
    set ondatareceived(handler: TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerDataReceivedEventArgs>) {
        this.#dataReceived.add(handler);
    }

    #errorOccurred: Set<TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerErrorOccurredEventArgs>> = new Set();
    @Enumerable(true)
    set onerroroccurred(handler: TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerErrorOccurredEventArgs>) {
        this.#errorOccurred.add(handler);
    }

    #imagePreviewReceived: Set<TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerImagePreviewReceivedEventArgs>> = new Set();
    @Enumerable(true)
    set onimagepreviewreceived(handler: TypedEventHandler<ClaimedBarcodeScanner, BarcodeScannerImagePreviewReceivedEventArgs>) {
        this.#imagePreviewReceived.add(handler);
    }

    #releaseDeviceRequested: Set<EventHandler<ClaimedBarcodeScanner>> = new Set();
    @Enumerable(true)
    set onreleasedevicerequested(handler: EventHandler<ClaimedBarcodeScanner>) {
        this.#releaseDeviceRequested.add(handler);
    }

    #triggerPressed: Set<EventHandler<ClaimedBarcodeScanner>> = new Set();
    @Enumerable(true)
    set ontriggerpressed(handler: EventHandler<ClaimedBarcodeScanner>) {
        this.#triggerPressed.add(handler);
    }

    #triggerReleased: Set<EventHandler<ClaimedBarcodeScanner>> = new Set();
    @Enumerable(true)
    set ontriggerreleased(handler: EventHandler<ClaimedBarcodeScanner>) {
        this.#triggerReleased.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'datareceived':
                this.#dataReceived.add(handler);
                break;
            case 'erroroccurred':
                this.#errorOccurred.add(handler);
                break;
            case 'imagepreviewreceived':
                this.#imagePreviewReceived.add(handler);
                break;
            case 'releasedevicerequested':
                this.#releaseDeviceRequested.add(handler);
                break;
            case 'triggerpressed':
                this.#triggerPressed.add(handler);
                break;
            case 'triggerreleased':
                this.#triggerReleased.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'datareceived':
                this.#dataReceived.delete(handler);
                break;
            case 'erroroccurred':
                this.#errorOccurred.delete(handler);
                break;
            case 'imagepreviewreceived':
                this.#imagePreviewReceived.delete(handler);
                break;
            case 'releasedevicerequested':
                this.#releaseDeviceRequested.delete(handler);
                break;
            case 'triggerpressed':
                this.#triggerPressed.delete(handler);
                break;
            case 'triggerreleased':
                this.#triggerReleased.delete(handler);
                break;
        }
    }
}
