// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { BarcodeScannerCapabilities } from "./BarcodeScannerCapabilities";
import { BarcodeScannerStatusUpdatedEventArgs } from "./BarcodeScannerStatusUpdatedEventArgs";
import { ClaimedBarcodeScanner } from "./ClaimedBarcodeScanner";
import { UnifiedPosHealthCheckLevel } from "./UnifiedPosHealthCheckLevel";
import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IVectorView } from "../../Foundation/Collections/IVectorView`1";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { IBuffer } from "../../Storage/Streams/IBuffer";

@GenerateShim('Windows.Devices.PointOfService.BarcodeScanner')
export class BarcodeScanner { 
    capabilities: BarcodeScannerCapabilities = null;
    deviceId: string = null;
    claimScannerAsync(): IAsyncOperation<ClaimedBarcodeScanner> {
        throw new Error('BarcodeScanner#claimScannerAsync not implemented')
    }
    checkHealthAsync(level: UnifiedPosHealthCheckLevel): IAsyncOperation<string> {
        throw new Error('BarcodeScanner#checkHealthAsync not implemented')
    }
    getSupportedSymbologiesAsync(): IAsyncOperation<IVectorView<number>> {
        throw new Error('BarcodeScanner#getSupportedSymbologiesAsync not implemented')
    }
    isSymbologySupportedAsync(barcodeSymbology: number): IAsyncOperation<boolean> {
        throw new Error('BarcodeScanner#isSymbologySupportedAsync not implemented')
    }
    retrieveStatisticsAsync(statisticsCategories: IIterable<string>): IAsyncOperation<IBuffer> {
        throw new Error('BarcodeScanner#retrieveStatisticsAsync not implemented')
    }
    getSupportedProfiles(): IVectorView<string> {
        throw new Error('BarcodeScanner#getSupportedProfiles not implemented')
    }
    isProfileSupported(profile: string): boolean {
        throw new Error('BarcodeScanner#isProfileSupported not implemented')
    }
    static getDefaultAsync(): IAsyncOperation<BarcodeScanner> {
        throw new Error('BarcodeScanner#getDefaultAsync not implemented')
    }
    static fromIdAsync(deviceId: string): IAsyncOperation<BarcodeScanner> {
        throw new Error('BarcodeScanner#fromIdAsync not implemented')
    }
    static getDeviceSelector(): string {
        throw new Error('BarcodeScanner#getDeviceSelector not implemented')
    }

    #statusUpdated: Set<TypedEventHandler<BarcodeScanner, BarcodeScannerStatusUpdatedEventArgs>> = new Set();
    @Enumerable(true)
    set onstatusupdated(handler: TypedEventHandler<BarcodeScanner, BarcodeScannerStatusUpdatedEventArgs>) {
        this.#statusUpdated.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'statusupdated':
                this.#statusUpdated.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'statusupdated':
                this.#statusUpdated.delete(handler);
                break;
        }
    }
}
