// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { MagneticStripeReaderAamvaCardDataReceivedEventArgs } from "./MagneticStripeReaderAamvaCardDataReceivedEventArgs";
import { MagneticStripeReaderBankCardDataReceivedEventArgs } from "./MagneticStripeReaderBankCardDataReceivedEventArgs";
import { MagneticStripeReaderErrorOccurredEventArgs } from "./MagneticStripeReaderErrorOccurredEventArgs";
import { MagneticStripeReaderErrorReportingType } from "./MagneticStripeReaderErrorReportingType";
import { MagneticStripeReaderTrackIds } from "./MagneticStripeReaderTrackIds";
import { MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs } from "./MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs";
import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IKeyValuePair } from "../../Foundation/Collections/IKeyValuePair`2";
import { EventHandler } from "../../Foundation/EventHandler`1";
import { IAsyncAction } from "../../Foundation/IAsyncAction";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { IClosable } from "../../Foundation/IClosable";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { IBuffer } from "../../Storage/Streams/IBuffer";

@GenerateShim('Windows.Devices.PointOfService.ClaimedMagneticStripeReader')
export class ClaimedMagneticStripeReader implements IClosable { 
    tracksToRead: MagneticStripeReaderTrackIds = null;
    isTransmitSentinelsEnabled: boolean = null;
    isDisabledOnDataReceived: boolean = null;
    isDecodeDataEnabled: boolean = null;
    dataEncryptionAlgorithm: number = null;
    deviceId: string = null;
    isDeviceAuthenticated: boolean = null;
    isEnabled: boolean = null;
    enableAsync(): IAsyncAction {
        throw new Error('ClaimedMagneticStripeReader#enableAsync not implemented')
    }
    disableAsync(): IAsyncAction {
        throw new Error('ClaimedMagneticStripeReader#disableAsync not implemented')
    }
    retainDevice(): void {
        console.warn('ClaimedMagneticStripeReader#retainDevice not implemented')
    }
    setErrorReportingType(value: MagneticStripeReaderErrorReportingType): void {
        console.warn('ClaimedMagneticStripeReader#setErrorReportingType not implemented')
    }
    retrieveDeviceAuthenticationDataAsync(): IAsyncOperation<IBuffer> {
        throw new Error('ClaimedMagneticStripeReader#retrieveDeviceAuthenticationDataAsync not implemented')
    }
    authenticateDeviceAsync(responseToken: number[]): IAsyncAction {
        throw new Error('ClaimedMagneticStripeReader#authenticateDeviceAsync not implemented')
    }
    deAuthenticateDeviceAsync(responseToken: number[]): IAsyncAction {
        throw new Error('ClaimedMagneticStripeReader#deAuthenticateDeviceAsync not implemented')
    }
    updateKeyAsync(key: string, keyName: string): IAsyncAction {
        throw new Error('ClaimedMagneticStripeReader#updateKeyAsync not implemented')
    }
    resetStatisticsAsync(statisticsCategories: IIterable<string>): IAsyncAction {
        throw new Error('ClaimedMagneticStripeReader#resetStatisticsAsync not implemented')
    }
    updateStatisticsAsync(statistics: IIterable<IKeyValuePair<string, string>>): IAsyncAction {
        throw new Error('ClaimedMagneticStripeReader#updateStatisticsAsync not implemented')
    }
    close(): void {
        console.warn('ClaimedMagneticStripeReader#close not implemented')
    }

    #aamvaCardDataReceived: Set<TypedEventHandler<ClaimedMagneticStripeReader, MagneticStripeReaderAamvaCardDataReceivedEventArgs>> = new Set();
    @Enumerable(true)
    set onaamvacarddatareceived(handler: TypedEventHandler<ClaimedMagneticStripeReader, MagneticStripeReaderAamvaCardDataReceivedEventArgs>) {
        this.#aamvaCardDataReceived.add(handler);
    }

    #bankCardDataReceived: Set<TypedEventHandler<ClaimedMagneticStripeReader, MagneticStripeReaderBankCardDataReceivedEventArgs>> = new Set();
    @Enumerable(true)
    set onbankcarddatareceived(handler: TypedEventHandler<ClaimedMagneticStripeReader, MagneticStripeReaderBankCardDataReceivedEventArgs>) {
        this.#bankCardDataReceived.add(handler);
    }

    #errorOccurred: Set<TypedEventHandler<ClaimedMagneticStripeReader, MagneticStripeReaderErrorOccurredEventArgs>> = new Set();
    @Enumerable(true)
    set onerroroccurred(handler: TypedEventHandler<ClaimedMagneticStripeReader, MagneticStripeReaderErrorOccurredEventArgs>) {
        this.#errorOccurred.add(handler);
    }

    #releaseDeviceRequested: Set<EventHandler<ClaimedMagneticStripeReader>> = new Set();
    @Enumerable(true)
    set onreleasedevicerequested(handler: EventHandler<ClaimedMagneticStripeReader>) {
        this.#releaseDeviceRequested.add(handler);
    }

    #vendorSpecificDataReceived: Set<TypedEventHandler<ClaimedMagneticStripeReader, MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>> = new Set();
    @Enumerable(true)
    set onvendorspecificdatareceived(handler: TypedEventHandler<ClaimedMagneticStripeReader, MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>) {
        this.#vendorSpecificDataReceived.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'aamvacarddatareceived':
                this.#aamvaCardDataReceived.add(handler);
                break;
            case 'bankcarddatareceived':
                this.#bankCardDataReceived.add(handler);
                break;
            case 'erroroccurred':
                this.#errorOccurred.add(handler);
                break;
            case 'releasedevicerequested':
                this.#releaseDeviceRequested.add(handler);
                break;
            case 'vendorspecificdatareceived':
                this.#vendorSpecificDataReceived.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'aamvacarddatareceived':
                this.#aamvaCardDataReceived.delete(handler);
                break;
            case 'bankcarddatareceived':
                this.#bankCardDataReceived.delete(handler);
                break;
            case 'erroroccurred':
                this.#errorOccurred.delete(handler);
                break;
            case 'releasedevicerequested':
                this.#releaseDeviceRequested.delete(handler);
                break;
            case 'vendorspecificdatareceived':
                this.#vendorSpecificDataReceived.delete(handler);
                break;
        }
    }
}
