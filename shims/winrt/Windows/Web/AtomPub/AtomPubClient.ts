// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:10 2021
// </auto-generated>
// --------------------------------------------------

import { IAsyncActionWithProgress } from "../../Foundation/IAsyncActionWithProgress`1";
import { IAsyncOperationWithProgress } from "../../Foundation/IAsyncOperationWithProgress`2";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { Uri } from "../../Foundation/Uri";
import { PasswordCredential } from "../../Security/Credentials/PasswordCredential";
import { IInputStream } from "../../Storage/Streams/IInputStream";
import { ServiceDocument } from "./ServiceDocument";
import { ISyndicationClient } from "../Syndication/ISyndicationClient";
import { RetrievalProgress } from "../Syndication/RetrievalProgress";
import { SyndicationFeed } from "../Syndication/SyndicationFeed";
import { SyndicationItem } from "../Syndication/SyndicationItem";
import { TransferProgress } from "../Syndication/TransferProgress";

@GenerateShim('Windows.Web.AtomPub.AtomPubClient')
export class AtomPubClient implements ISyndicationClient { 
    timeout: number = null;
    serverCredential: PasswordCredential = null;
    proxyCredential: PasswordCredential = null;
    maxResponseBufferSize: number = null;
    bypassCacheOnRetrieve: boolean = null;
    // constructor();
    // constructor(serverCredential: PasswordCredential);
    constructor(...args) { }
    retrieveServiceDocumentAsync(uri: Uri): IAsyncOperationWithProgress<ServiceDocument, RetrievalProgress> {
        throw new Error('AtomPubClient#retrieveServiceDocumentAsync not implemented')
    }
    retrieveMediaResourceAsync(uri: Uri): IAsyncOperationWithProgress<IInputStream, RetrievalProgress> {
        throw new Error('AtomPubClient#retrieveMediaResourceAsync not implemented')
    }
    retrieveResourceAsync(uri: Uri): IAsyncOperationWithProgress<SyndicationItem, RetrievalProgress> {
        throw new Error('AtomPubClient#retrieveResourceAsync not implemented')
    }
    createResourceAsync(uri: Uri, description: string, item: SyndicationItem): IAsyncOperationWithProgress<SyndicationItem, TransferProgress> {
        throw new Error('AtomPubClient#createResourceAsync not implemented')
    }
    createMediaResourceAsync(uri: Uri, mediaType: string, description: string, mediaStream: IInputStream): IAsyncOperationWithProgress<SyndicationItem, TransferProgress> {
        throw new Error('AtomPubClient#createMediaResourceAsync not implemented')
    }
    updateMediaResourceAsync(uri: Uri, mediaType: string, mediaStream: IInputStream): IAsyncActionWithProgress<TransferProgress> {
        throw new Error('AtomPubClient#updateMediaResourceAsync not implemented')
    }
    updateResourceAsync(uri: Uri, item: SyndicationItem): IAsyncActionWithProgress<TransferProgress> {
        throw new Error('AtomPubClient#updateResourceAsync not implemented')
    }
    updateResourceItemAsync(item: SyndicationItem): IAsyncActionWithProgress<TransferProgress> {
        throw new Error('AtomPubClient#updateResourceItemAsync not implemented')
    }
    deleteResourceAsync(uri: Uri): IAsyncActionWithProgress<TransferProgress> {
        throw new Error('AtomPubClient#deleteResourceAsync not implemented')
    }
    deleteResourceItemAsync(item: SyndicationItem): IAsyncActionWithProgress<TransferProgress> {
        throw new Error('AtomPubClient#deleteResourceItemAsync not implemented')
    }
    cancelAsyncOperations(): void {
        console.warn('AtomPubClient#cancelAsyncOperations not implemented')
    }
    setRequestHeader(name: string, value: string): void {
        console.warn('AtomPubClient#setRequestHeader not implemented')
    }
    retrieveFeedAsync(uri: Uri): IAsyncOperationWithProgress<SyndicationFeed, RetrievalProgress> {
        throw new Error('AtomPubClient#retrieveFeedAsync not implemented')
    }
}
