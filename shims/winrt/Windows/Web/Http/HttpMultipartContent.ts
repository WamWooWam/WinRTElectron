// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:10 2021
// </auto-generated>
// --------------------------------------------------

import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IIterator } from "../../Foundation/Collections/IIterator`1";
import { IAsyncOperationWithProgress } from "../../Foundation/IAsyncOperationWithProgress`2";
import { IClosable } from "../../Foundation/IClosable";
import { IStringable } from "../../Foundation/IStringable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { IBuffer } from "../../Storage/Streams/IBuffer";
import { IInputStream } from "../../Storage/Streams/IInputStream";
import { IOutputStream } from "../../Storage/Streams/IOutputStream";
import { HttpContentHeaderCollection } from "./Headers/HttpContentHeaderCollection";
import { IHttpContent } from "./IHttpContent";

@GenerateShim('Windows.Web.Http.HttpMultipartContent')
export class HttpMultipartContent implements IHttpContent, IClosable, IIterable<IHttpContent>, IStringable { 
    [Symbol.iterator]() {
        return null;
    }

    headers: HttpContentHeaderCollection = null;
    // constructor();
    // constructor(subtype: string);
    // constructor(subtype: string, boundary: string);
    constructor(...args) { }
    bufferAllAsync(): IAsyncOperationWithProgress<number, number> {
        throw new Error('HttpMultipartContent#bufferAllAsync not implemented')
    }
    readAsBufferAsync(): IAsyncOperationWithProgress<IBuffer, number> {
        throw new Error('HttpMultipartContent#readAsBufferAsync not implemented')
    }
    readAsInputStreamAsync(): IAsyncOperationWithProgress<IInputStream, number> {
        throw new Error('HttpMultipartContent#readAsInputStreamAsync not implemented')
    }
    readAsStringAsync(): IAsyncOperationWithProgress<string, number> {
        throw new Error('HttpMultipartContent#readAsStringAsync not implemented')
    }
    tryComputeLength(): { succeeded: boolean, length: number } {
        throw new Error('HttpMultipartContent#tryComputeLength not implemented')
    }
    writeToStreamAsync(outputStream: IOutputStream): IAsyncOperationWithProgress<number, number> {
        throw new Error('HttpMultipartContent#writeToStreamAsync not implemented')
    }
    close(): void {
        console.warn('HttpMultipartContent#close not implemented')
    }
    add(content: IHttpContent): void {
        console.warn('HttpMultipartContent#add not implemented')
    }
    first(): IIterator<IHttpContent> {
        throw new Error('HttpMultipartContent#first not implemented')
    }
    toString(): string {
        throw new Error('HttpMultipartContent#toString not implemented')
    }
}
