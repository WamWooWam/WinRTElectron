// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:11 2021
// </auto-generated>
// --------------------------------------------------

import { IIterable } from "../../../Foundation/Collections/IIterable`1";
import { IIterator } from "../../../Foundation/Collections/IIterator`1";
import { IVectorView } from "../../../Foundation/Collections/IVectorView`1";
import { IVector } from "../../../Foundation/Collections/IVector`1";
import { IStringable } from "../../../Foundation/IStringable";
import { GenerateShim } from "../../../Foundation/Interop/GenerateShim";
import { HttpConnectionOptionHeaderValue } from "./HttpConnectionOptionHeaderValue";

@GenerateShim('Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection')
export class HttpConnectionOptionHeaderValueCollection implements IVector<HttpConnectionOptionHeaderValue>, IIterable<HttpConnectionOptionHeaderValue>, IStringable { 
    size: number = null;
    [Symbol.iterator](): Iterator<HttpConnectionOptionHeaderValue> {
        return null;
    }
    parseAdd(input: string): void {
        console.warn('HttpConnectionOptionHeaderValueCollection#parseAdd not implemented')
    }
    tryParseAdd(input: string): boolean {
        throw new Error('HttpConnectionOptionHeaderValueCollection#tryParseAdd not implemented')
    }
    getAt(index: number): HttpConnectionOptionHeaderValue {
        throw new Error('HttpConnectionOptionHeaderValueCollection#getAt not implemented')
    }
    getView(): IVectorView<HttpConnectionOptionHeaderValue> {
        throw new Error('HttpConnectionOptionHeaderValueCollection#getView not implemented')
    }
    setAt(index: number, value: HttpConnectionOptionHeaderValue): void {
        console.warn('HttpConnectionOptionHeaderValueCollection#setAt not implemented')
    }
    insertAt(index: number, value: HttpConnectionOptionHeaderValue): void {
        console.warn('HttpConnectionOptionHeaderValueCollection#insertAt not implemented')
    }
    removeAt(index: number): void {
        console.warn('HttpConnectionOptionHeaderValueCollection#removeAt not implemented')
    }
    append(value: HttpConnectionOptionHeaderValue): void {
        console.warn('HttpConnectionOptionHeaderValueCollection#append not implemented')
    }
    removeAtEnd(): void {
        console.warn('HttpConnectionOptionHeaderValueCollection#removeAtEnd not implemented')
    }
    clear(): void {
        console.warn('HttpConnectionOptionHeaderValueCollection#clear not implemented')
    }
    getMany(startIndex: number): { returnValue: number, items: HttpConnectionOptionHeaderValue[] } {
        throw new Error('HttpConnectionOptionHeaderValueCollection#getMany not implemented')
    }
    replaceAll(items: HttpConnectionOptionHeaderValue[]): void {
        console.warn('HttpConnectionOptionHeaderValueCollection#replaceAll not implemented')
    }
    first(): IIterator<HttpConnectionOptionHeaderValue> {
        throw new Error('HttpConnectionOptionHeaderValueCollection#first not implemented')
    }
    toString(): string {
        throw new Error('HttpConnectionOptionHeaderValueCollection#toString not implemented')
    }
}
