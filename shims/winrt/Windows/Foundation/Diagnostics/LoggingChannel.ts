// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:03 2021
// </auto-generated>
// --------------------------------------------------

import { ILoggingChannel } from "./ILoggingChannel";
import { LoggingLevel } from "./LoggingLevel";
import { IClosable } from "../IClosable";
import { Enumerable } from "../Interop/Enumerable";
import { GenerateShim } from "../Interop/GenerateShim";
import { TypedEventHandler } from "../TypedEventHandler`2";

@GenerateShim('Windows.Foundation.Diagnostics.LoggingChannel')
export class LoggingChannel implements ILoggingChannel, IClosable { 
    enabled: boolean = null;
    level: LoggingLevel = null;
    name: string = null;
    constructor(name: string) {
        console.warn('LoggingChannel.ctor not implemented')
    }
    logMessage(eventString: string): void {
        console.warn('LoggingChannel#logMessage not implemented')
    }
    logMessageWithLevel(eventString: string, level: LoggingLevel): void {
        console.warn('LoggingChannel#logMessageWithLevel not implemented')
    }
    logValuePair(value1: string, value2: number): void {
        console.warn('LoggingChannel#logValuePair not implemented')
    }
    logValuePairWithLevel(value1: string, value2: number, level: LoggingLevel): void {
        console.warn('LoggingChannel#logValuePairWithLevel not implemented')
    }
    close(): void {
        console.warn('LoggingChannel#close not implemented')
    }

    __loggingEnabled: Set<TypedEventHandler<ILoggingChannel, any>> = new Set();
    @Enumerable(true)
    set onloggingenabled(handler: TypedEventHandler<ILoggingChannel, any>) {
        this.__loggingEnabled.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'loggingenabled':
                this.__loggingEnabled.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'loggingenabled':
                this.__loggingEnabled.delete(handler);
                break;
        }
    }
}
