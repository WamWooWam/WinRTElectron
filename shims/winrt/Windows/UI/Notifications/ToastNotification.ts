// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:09 2021
// </auto-generated>
// --------------------------------------------------

import { XmlDocument } from "../../Data/Xml/Dom/XmlDocument";
import { DateTime } from "../../Foundation/DateTime";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { ToastDismissedEventArgs } from "./ToastDismissedEventArgs";
import { ToastFailedEventArgs } from "./ToastFailedEventArgs";

@GenerateShim('Windows.UI.Notifications.ToastNotification')
export class ToastNotification { 
    expirationTime: Date | null = null;
    content: XmlDocument = null;
    constructor(content: XmlDocument) {
        console.warn('ToastNotification.ctor not implemented')
    }

    #activated: Set<TypedEventHandler<ToastNotification, any>> = new Set();
    @Enumerable(true)
    set onactivated(handler: TypedEventHandler<ToastNotification, any>) {
        this.#activated.add(handler);
    }

    #dismissed: Set<TypedEventHandler<ToastNotification, ToastDismissedEventArgs>> = new Set();
    @Enumerable(true)
    set ondismissed(handler: TypedEventHandler<ToastNotification, ToastDismissedEventArgs>) {
        this.#dismissed.add(handler);
    }

    #failed: Set<TypedEventHandler<ToastNotification, ToastFailedEventArgs>> = new Set();
    @Enumerable(true)
    set onfailed(handler: TypedEventHandler<ToastNotification, ToastFailedEventArgs>) {
        this.#failed.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'activated':
                this.#activated.add(handler);
                break;
            case 'dismissed':
                this.#dismissed.add(handler);
                break;
            case 'failed':
                this.#failed.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'activated':
                this.#activated.delete(handler);
                break;
            case 'dismissed':
                this.#dismissed.delete(handler);
                break;
            case 'failed':
                this.#failed.delete(handler);
                break;
        }
    }
}
