// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:08 2021
// </auto-generated>
// --------------------------------------------------

import { IpcHelper } from "../../../IpcHelper";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { SettingsEdgeLocation } from "./SettingsEdgeLocation";
import { SettingsPaneCommandsRequestedEventArgs } from "./SettingsPaneCommandsRequestedEventArgs";
import { SettingsCommand } from "./SettingsCommand";
import { Vector } from "../../Foundation/Interop/Vector`1";
import { InvokeRawEvent } from "../../Foundation/Interop/InvokeEvent";
import { SettingsPaneV2 } from "../../Foundation/Interop/IpcConstants";
import { ipcRenderer } from "electron";

enum SettingsPaneMessageType {
    show,
    hide,
    requestContent,
    contentInvoked
}

@GenerateShim('Windows.UI.ApplicationSettings.SettingsPane')
export class SettingsPane {
    private commands: Vector<SettingsCommand>
    static edge: SettingsEdgeLocation = SettingsEdgeLocation.right;

    constructor() {
        ipcRenderer.on(SettingsPaneV2, this._onIpcMessage.bind(this));
    }

    getCommands() {
        if (!this.commands) {
            var event = new SettingsPaneCommandsRequestedEventArgs();
            InvokeRawEvent(this.__commandsRequested, "commandsrequested", event);
            this.commands = new Vector<SettingsCommand>([...<Vector<SettingsCommand>>event.request.applicationCommands]);
        }

        return this.commands;
    }

    private static __instance: SettingsPane;
    static getForCurrentView() {
        return SettingsPane.__instance ?? (SettingsPane.__instance = new SettingsPane());
    }

    static show(): void {
        IpcHelper.send(SettingsPaneV2, { type: SettingsPaneMessageType.show });
    }
    
    private _onIpcMessage(event, resp) {
        if (resp.type == SettingsPaneMessageType.requestContent) {
            let pane = SettingsPane.getForCurrentView();
            let commands = pane.getCommands()
                .getArray()
                .map(c => { return { id: c.id, label: c.label } });;

            let message = {
                type: SettingsPaneMessageType.requestContent,
                commands: commands
            }

            return IpcHelper.send(SettingsPaneV2, message);
        }

        if (resp.type == SettingsPaneMessageType.contentInvoked) {
            let pane = SettingsPane.getForCurrentView();
            let commands = pane.getCommands();

            let command: SettingsCommand = null;
            for (const item of commands.getArray()) {
                if (item.id == resp.index) {
                    command = item;
                    break;
                }
            }

            if (!command) return;

            if (command.invoked)
                command.invoked(command);
        }
    }

    __commandsRequested: Set<TypedEventHandler<SettingsPane, SettingsPaneCommandsRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set oncommandsrequested(handler: TypedEventHandler<SettingsPane, SettingsPaneCommandsRequestedEventArgs>) {
        this.__commandsRequested.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'commandsrequested':
                this.__commandsRequested.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'commandsrequested':
                this.__commandsRequested.delete(handler);
                break;
        }
    }
}
