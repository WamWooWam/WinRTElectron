// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:09 2021
// </auto-generated>
// --------------------------------------------------

import { IVectorView } from "../../Foundation/Collections/IVectorView`1";
import { AsyncOperation, IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { Vector } from "../../Foundation/Interop/Vector`1";
import { Point } from "../../Foundation/Point";
import { Rect } from "../../Foundation/Rect";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { Uri } from "../../Foundation/Uri";
import { Color } from "../Color";
import { Placement } from "../Popups/Placement";
import { ForegroundText } from "./ForegroundText";
import { SecondaryTileVisualElements } from "./SecondaryTileVisualElements";
import { TileOptions } from "./TileOptions";
import { TileSize } from "./TileSize";
import { VisualElementsRequestedEventArgs } from "./VisualElementsRequestedEventArgs";

@GenerateShim('Windows.UI.StartScreen.SecondaryTile')
export class SecondaryTile {
    wideLogo: Uri = null;
    tileOptions: TileOptions = null;
    tileId: string = null;
    smallLogo: Uri = null;
    shortName: string = null;
    logo: Uri = null;
    lockScreenDisplayBadgeAndTileText: boolean = null;
    lockScreenBadgeLogo: Uri = null;
    foregroundText: ForegroundText = null;
    displayName: string = null;
    backgroundColor: Color = null;
    arguments: string = null;
    roamingEnabled: boolean = null;
    phoneticName: string = null;
    visualElements: SecondaryTileVisualElements = null;
    // constructor();
    // constructor(tileId: string);
    // constructor(tileId: string, displayName: string, #arguments: string, square150x150Logo: Uri, desiredSize: TileSize);
    // constructor(tileId: string, shortName: string, displayName: string, #arguments: string, tileOptions: TileOptions, logoReference: Uri);
    // constructor(tileId: string, shortName: string, displayName: string, #arguments: string, tileOptions: TileOptions, logoReference: Uri, wideLogoReference: Uri);
    constructor(...args) { }
    requestCreateAsync(): IAsyncOperation<boolean> {
        throw new Error('SecondaryTile#requestCreateAsync not implemented')
    }
    requestCreateAsyncWithPoint(invocationPoint: Point): IAsyncOperation<boolean> {
        throw new Error('SecondaryTile#requestCreateAsyncWithPoint not implemented')
    }
    requestCreateAsyncWithRect(selection: Rect): IAsyncOperation<boolean> {
        throw new Error('SecondaryTile#requestCreateAsyncWithRect not implemented')
    }
    requestCreateAsyncWithRectAndPlacement(selection: Rect, preferredPlacement: Placement): IAsyncOperation<boolean> {
        throw new Error('SecondaryTile#requestCreateAsyncWithRectAndPlacement not implemented')
    }
    requestDeleteAsync(): IAsyncOperation<boolean> {
        throw new Error('SecondaryTile#requestDeleteAsync not implemented')
    }
    requestDeleteAsyncWithPoint(invocationPoint: Point): IAsyncOperation<boolean> {
        throw new Error('SecondaryTile#requestDeleteAsyncWithPoint not implemented')
    }
    requestDeleteAsyncWithRect(selection: Rect): IAsyncOperation<boolean> {
        throw new Error('SecondaryTile#requestDeleteAsyncWithRect not implemented')
    }
    requestDeleteAsyncWithRectAndPlacement(selection: Rect, preferredPlacement: Placement): IAsyncOperation<boolean> {
        throw new Error('SecondaryTile#requestDeleteAsyncWithRectAndPlacement not implemented')
    }
    updateAsync(): IAsyncOperation<boolean> {
        throw new Error('SecondaryTile#updateAsync not implemented')
    }
    static exists(tileId: string): boolean {
        throw new Error('SecondaryTile#exists not implemented')
    }
    static findAllAsync(): IAsyncOperation<IVectorView<SecondaryTile>> {
        return AsyncOperation.from(async () => { return new Vector() })
    }
    static findAllForApplicationAsync(applicationId: string): IAsyncOperation<IVectorView<SecondaryTile>> {
        throw new Error('SecondaryTile#findAllForApplicationAsync not implemented')
    }
    static findAllForPackageAsync(): IAsyncOperation<IVectorView<SecondaryTile>> {
        throw new Error('SecondaryTile#findAllForPackageAsync not implemented')
    }

    #visualElementsRequested: Set<TypedEventHandler<SecondaryTile, VisualElementsRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set onvisualelementsrequested(handler: TypedEventHandler<SecondaryTile, VisualElementsRequestedEventArgs>) {
        this.#visualElementsRequested.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'visualelementsrequested':
                this.#visualElementsRequested.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'visualelementsrequested':
                this.#visualElementsRequested.delete(handler);
                break;
        }
    }
}
