// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:08 2021
// </auto-generated>
// --------------------------------------------------

import { IIterable } from "../../../Foundation/Collections/IIterable`1";
import { IVectorView } from "../../../Foundation/Collections/IVectorView`1";
import { IAsyncActionWithProgress } from "../../../Foundation/IAsyncActionWithProgress`1";
import { IAsyncOperationWithProgress } from "../../../Foundation/IAsyncOperationWithProgress`2";
import { IAsyncOperation } from "../../../Foundation/IAsyncOperation`1";
import { GenerateShim } from "../../../Foundation/Interop/GenerateShim";
import { Point } from "../../../Foundation/Point";
import { Rect } from "../../../Foundation/Rect";
import { IInputStream } from "../../../Storage/Streams/IInputStream";
import { IOutputStream } from "../../../Storage/Streams/IOutputStream";
import { IInkRecognizerContainer } from "./IInkRecognizerContainer";
import { IInkStrokeContainer } from "./IInkStrokeContainer";
import { InkDrawingAttributes } from "./InkDrawingAttributes";
import { InkManipulationMode } from "./InkManipulationMode";
import { InkRecognitionResult } from "./InkRecognitionResult";
import { InkRecognitionTarget } from "./InkRecognitionTarget";
import { InkRecognizer } from "./InkRecognizer";
import { InkStroke } from "./InkStroke";
import { InkStrokeContainer } from "./InkStrokeContainer";
import { PointerPoint } from "../PointerPoint";

@GenerateShim('Windows.UI.Input.Inking.InkManager')
export class InkManager implements IInkRecognizerContainer, IInkStrokeContainer { 
    mode: InkManipulationMode = null;
    boundingRect: Rect = null;
    processPointerDown(pointerPoint: PointerPoint): void {
        console.warn('InkManager#processPointerDown not implemented')
    }
    processPointerUpdate(pointerPoint: PointerPoint): any {
        throw new Error('InkManager#processPointerUpdate not implemented')
    }
    processPointerUp(pointerPoint: PointerPoint): Rect {
        throw new Error('InkManager#processPointerUp not implemented')
    }
    setDefaultDrawingAttributes(drawingAttributes: InkDrawingAttributes): void {
        console.warn('InkManager#setDefaultDrawingAttributes not implemented')
    }
    recognizeAsync2(recognitionTarget: InkRecognitionTarget): IAsyncOperation<IVectorView<InkRecognitionResult>> {
        throw new Error('InkManager#recognizeAsync2 not implemented')
    }
    addStroke(stroke: InkStroke): void {
        console.warn('InkManager#addStroke not implemented')
    }
    deleteSelected(): Rect {
        throw new Error('InkManager#deleteSelected not implemented')
    }
    moveSelected(translation: Point): Rect {
        throw new Error('InkManager#moveSelected not implemented')
    }
    selectWithPolyLine(polyline: IIterable<Point>): Rect {
        throw new Error('InkManager#selectWithPolyLine not implemented')
    }
    selectWithLine(from: Point, to: Point): Rect {
        throw new Error('InkManager#selectWithLine not implemented')
    }
    copySelectedToClipboard(): void {
        console.warn('InkManager#copySelectedToClipboard not implemented')
    }
    pasteFromClipboard(position: Point): Rect {
        throw new Error('InkManager#pasteFromClipboard not implemented')
    }
    canPasteFromClipboard(): boolean {
        throw new Error('InkManager#canPasteFromClipboard not implemented')
    }
    loadAsync(inputStream: IInputStream): IAsyncActionWithProgress<number> {
        throw new Error('InkManager#loadAsync not implemented')
    }
    saveAsync(outputStream: IOutputStream): IAsyncOperationWithProgress<number, number> {
        throw new Error('InkManager#saveAsync not implemented')
    }
    updateRecognitionResults(recognitionResults: IVectorView<InkRecognitionResult>): void {
        console.warn('InkManager#updateRecognitionResults not implemented')
    }
    getStrokes(): IVectorView<InkStroke> {
        throw new Error('InkManager#getStrokes not implemented')
    }
    getRecognitionResults(): IVectorView<InkRecognitionResult> {
        throw new Error('InkManager#getRecognitionResults not implemented')
    }
    setDefaultRecognizer(recognizer: InkRecognizer): void {
        console.warn('InkManager#setDefaultRecognizer not implemented')
    }
    recognizeAsync(strokeCollection: InkStrokeContainer, recognitionTarget: InkRecognitionTarget): IAsyncOperation<IVectorView<InkRecognitionResult>> {
        throw new Error('InkManager#recognizeAsync not implemented')
    }
    getRecognizers(): IVectorView<InkRecognizer> {
        throw new Error('InkManager#getRecognizers not implemented')
    }
}
