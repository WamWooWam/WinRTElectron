// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:09 2021
// </auto-generated>
// --------------------------------------------------

import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
type ICoreWindow = any
import { ApplicationViewConsolidatedEventArgs } from "./ApplicationViewConsolidatedEventArgs";
import { ApplicationViewOrientation } from "./ApplicationViewOrientation";
import { ApplicationViewState } from "./ApplicationViewState";

@GenerateShim('Windows.UI.ViewManagement.ApplicationView')
export class ApplicationView { 
    id: number = 0;
    title: string = "Title";
    isScreenCaptureEnabled: boolean = null;
    adjacentToLeftDisplayEdge: boolean = null;
    adjacentToRightDisplayEdge: boolean = null;
    isFullScreen: boolean = null;
    isOnLockScreen: boolean = null;
    orientation: ApplicationViewOrientation = null;

    public static get value(): ApplicationViewState {
        if (window.matchMedia("(max-width: 376px)").matches)
            return ApplicationViewState.snapped
        else
            return ApplicationViewState.filled;
    }
    
    static _instance: ApplicationView;
    static terminateAppOnFinalViewClose: boolean = null;
    static getForCurrentView(): ApplicationView {
        return ApplicationView._instance ?? (ApplicationView._instance = new ApplicationView());
    }
    static tryUnsnap(): boolean {
        // throw new Error('ApplicationView#tryUnsnap not implemented')
        return true;
    }

    #consolidated: Set<TypedEventHandler<ApplicationView, ApplicationViewConsolidatedEventArgs>> = new Set();
    @Enumerable(true)
    set onconsolidated(handler: TypedEventHandler<ApplicationView, ApplicationViewConsolidatedEventArgs>) {
        this.#consolidated.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'consolidated':
                this.#consolidated.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'consolidated':
                this.#consolidated.delete(handler);
                break;
        }
    }
}
