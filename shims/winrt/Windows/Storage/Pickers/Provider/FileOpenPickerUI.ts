// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:07 2021
// </auto-generated>
// --------------------------------------------------

import { IVectorView } from "../../../Foundation/Collections/IVectorView`1";
import { Enumerable } from "../../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../../Foundation/TypedEventHandler`2";
import { IStorageFile } from "../../IStorageFile";
import { AddFileResult } from "./AddFileResult";
import { FileRemovedEventArgs } from "./FileRemovedEventArgs";
import { FileSelectionMode } from "./FileSelectionMode";
import { PickerClosingEventArgs } from "./PickerClosingEventArgs";

@GenerateShim('Windows.Storage.Pickers.Provider.FileOpenPickerUI')
export class FileOpenPickerUI { 
    title: string = null;
    allowedFileTypes: IVectorView<string> = null;
    selectionMode: FileSelectionMode = null;
    settingsIdentifier: string = null;
    addFile(id: string, file: IStorageFile): AddFileResult {
        throw new Error('FileOpenPickerUI#addFile not implemented')
    }
    removeFile(id: string): void {
        console.warn('FileOpenPickerUI#removeFile not implemented')
    }
    containsFile(id: string): boolean {
        throw new Error('FileOpenPickerUI#containsFile not implemented')
    }
    canAddFile(file: IStorageFile): boolean {
        throw new Error('FileOpenPickerUI#canAddFile not implemented')
    }

    #closing: Set<TypedEventHandler<FileOpenPickerUI, PickerClosingEventArgs>> = new Set();
    @Enumerable(true)
    set onclosing(handler: TypedEventHandler<FileOpenPickerUI, PickerClosingEventArgs>) {
        this.#closing.add(handler);
    }

    #fileRemoved: Set<TypedEventHandler<FileOpenPickerUI, FileRemovedEventArgs>> = new Set();
    @Enumerable(true)
    set onfileremoved(handler: TypedEventHandler<FileOpenPickerUI, FileRemovedEventArgs>) {
        this.#fileRemoved.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'closing':
                this.#closing.add(handler);
                break;
            case 'fileremoved':
                this.#fileRemoved.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'closing':
                this.#closing.delete(handler);
                break;
            case 'fileremoved':
                this.#fileRemoved.delete(handler);
                break;
        }
    }
}
