// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:08 2021
// </auto-generated>
// --------------------------------------------------

import { DateTime } from "../../Foundation/DateTime";
import { IClosable } from "../../Foundation/IClosable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TimeSpan } from "../../Foundation/TimeSpan";
import { ByteOrder } from "./ByteOrder";
import { DataReaderLoadOperation } from "./DataReaderLoadOperation";
import { IBuffer } from "./IBuffer";
import { IDataReader } from "./IDataReader";
import { IInputStream } from "./IInputStream";
import { InputStreamOptions } from "./InputStreamOptions";
import { UnicodeEncoding } from "./UnicodeEncoding";

@GenerateShim('Windows.Storage.Streams.DataReader')
export class DataReader implements IDataReader, IClosable { 
    unicodeEncoding: UnicodeEncoding = null;
    inputStreamOptions: InputStreamOptions = null;
    byteOrder: ByteOrder = null;
    unconsumedBufferLength: number = null;
    constructor(inputStream: IInputStream) {
        console.warn('DataReader.ctor not implemented')
    }
    readByte(): number {
        throw new Error('DataReader#readByte not implemented')
    }
    readBytes(): number[] {
        throw new Error('DataReader#readBytes not implemented')
    }
    readBuffer(length: number): IBuffer {
        throw new Error('DataReader#readBuffer not implemented')
    }
    readBoolean(): boolean {
        throw new Error('DataReader#readBoolean not implemented')
    }
    readGuid(): string {
        throw new Error('DataReader#readGuid not implemented')
    }
    readInt16(): number {
        throw new Error('DataReader#readInt16 not implemented')
    }
    readInt32(): number {
        throw new Error('DataReader#readInt32 not implemented')
    }
    readInt64(): number {
        throw new Error('DataReader#readInt64 not implemented')
    }
    readUInt16(): number {
        throw new Error('DataReader#readUInt16 not implemented')
    }
    readUInt32(): number {
        throw new Error('DataReader#readUInt32 not implemented')
    }
    readUInt64(): number {
        throw new Error('DataReader#readUInt64 not implemented')
    }
    readSingle(): number {
        throw new Error('DataReader#readSingle not implemented')
    }
    readDouble(): number {
        throw new Error('DataReader#readDouble not implemented')
    }
    readString(codeUnitCount: number): string {
        throw new Error('DataReader#readString not implemented')
    }
    readDateTime(): Date {
        throw new Error('DataReader#readDateTime not implemented')
    }
    readTimeSpan(): number {
        throw new Error('DataReader#readTimeSpan not implemented')
    }
    loadAsync(count: number): DataReaderLoadOperation {
        throw new Error('DataReader#loadAsync not implemented')
    }
    detachBuffer(): IBuffer {
        throw new Error('DataReader#detachBuffer not implemented')
    }
    detachStream(): IInputStream {
        throw new Error('DataReader#detachStream not implemented')
    }
    close(): void {
        console.warn('DataReader#close not implemented')
    }
    static fromBuffer(buffer: IBuffer): DataReader {
        throw new Error('DataReader#fromBuffer not implemented')
    }
}
