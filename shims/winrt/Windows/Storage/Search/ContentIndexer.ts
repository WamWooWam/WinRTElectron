// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:08 2021
// </auto-generated>
// --------------------------------------------------

import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IMapView } from "../../Foundation/Collections/IMapView`2";
import { IAsyncAction } from "../../Foundation/IAsyncAction";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { ContentIndexerQuery } from "./ContentIndexerQuery";
import { IIndexableContent } from "./IIndexableContent";
import { SortEntry } from "./SortEntry";

@GenerateShim('Windows.Storage.Search.ContentIndexer')
export class ContentIndexer { 
    revision: number = null;
    addAsync(indexableContent: IIndexableContent): IAsyncAction {
        throw new Error('ContentIndexer#addAsync not implemented')
    }
    updateAsync(indexableContent: IIndexableContent): IAsyncAction {
        throw new Error('ContentIndexer#updateAsync not implemented')
    }
    deleteAsync(contentId: string): IAsyncAction {
        throw new Error('ContentIndexer#deleteAsync not implemented')
    }
    deleteMultipleAsync(contentIds: IIterable<string>): IAsyncAction {
        throw new Error('ContentIndexer#deleteMultipleAsync not implemented')
    }
    deleteAllAsync(): IAsyncAction {
        throw new Error('ContentIndexer#deleteAllAsync not implemented')
    }
    retrievePropertiesAsync(contentId: string, propertiesToRetrieve: IIterable<string>): IAsyncOperation<IMapView<string, any>> {
        throw new Error('ContentIndexer#retrievePropertiesAsync not implemented')
    }
    createQueryWithSortOrderAndLanguage(searchFilter: string, propertiesToRetrieve: IIterable<string>, sortOrder: IIterable<SortEntry>, searchFilterLanguage: string): ContentIndexerQuery {
        throw new Error('ContentIndexer#createQueryWithSortOrderAndLanguage not implemented')
    }
    createQueryWithSortOrder(searchFilter: string, propertiesToRetrieve: IIterable<string>, sortOrder: IIterable<SortEntry>): ContentIndexerQuery {
        throw new Error('ContentIndexer#createQueryWithSortOrder not implemented')
    }
    createQuery(searchFilter: string, propertiesToRetrieve: IIterable<string>): ContentIndexerQuery {
        throw new Error('ContentIndexer#createQuery not implemented')
    }
    static getIndexerWithName(indexName: string): ContentIndexer {
        throw new Error('ContentIndexer#getIndexerWithName not implemented')
    }
    static getIndexer(): ContentIndexer {
        throw new Error('ContentIndexer#getIndexer not implemented')
    }
}
