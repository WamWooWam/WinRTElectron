// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:08 2021
// </auto-generated>
// --------------------------------------------------

import { IVectorView } from "../../Foundation/Collections/IVectorView`1";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { IStorageItem } from "../IStorageItem";
import { IStorageQueryResultBase } from "./IStorageQueryResultBase";
import { QueryOptions } from "./QueryOptions";
import { StorageFolder } from "../StorageFolder";

@GenerateShim('Windows.Storage.Search.StorageItemQueryResult')
export class StorageItemQueryResult implements IStorageQueryResultBase { 
    folder: StorageFolder = null;
    getItemsAsync(startIndex: number, maxNumberOfItems: number): IAsyncOperation<IVectorView<IStorageItem>> {
        throw new Error('StorageItemQueryResult#getItemsAsync not implemented')
    }
    getItemsAsyncDefaultStartAndCount(): IAsyncOperation<IVectorView<IStorageItem>> {
        throw new Error('StorageItemQueryResult#getItemsAsyncDefaultStartAndCount not implemented')
    }
    getItemCountAsync(): IAsyncOperation<number> {
        throw new Error('StorageItemQueryResult#getItemCountAsync not implemented')
    }
    findStartIndexAsync(value: any): IAsyncOperation<number> {
        throw new Error('StorageItemQueryResult#findStartIndexAsync not implemented')
    }
    getCurrentQueryOptions(): QueryOptions {
        throw new Error('StorageItemQueryResult#getCurrentQueryOptions not implemented')
    }
    applyNewQueryOptions(newQueryOptions: QueryOptions): void {
        console.warn('StorageItemQueryResult#applyNewQueryOptions not implemented')
    }

    #contentsChanged: Set<TypedEventHandler<IStorageQueryResultBase, any>> = new Set();
    @Enumerable(true)
    set oncontentschanged(handler: TypedEventHandler<IStorageQueryResultBase, any>) {
        this.#contentsChanged.add(handler);
    }

    #optionsChanged: Set<TypedEventHandler<IStorageQueryResultBase, any>> = new Set();
    @Enumerable(true)
    set onoptionschanged(handler: TypedEventHandler<IStorageQueryResultBase, any>) {
        this.#optionsChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'contentschanged':
                this.#contentsChanged.add(handler);
                break;
            case 'optionschanged':
                this.#optionsChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'contentschanged':
                this.#contentsChanged.delete(handler);
                break;
            case 'optionschanged':
                this.#optionsChanged.delete(handler);
                break;
        }
    }
}
