// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:07 2021
// </auto-generated>
// --------------------------------------------------

import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IKeyValuePair } from "../../Foundation/Collections/IKeyValuePair`2";
import { IMap } from "../../Foundation/Collections/IMap`2";
import { IVector } from "../../Foundation/Collections/IVector`1";
import { IAsyncAction } from "../../Foundation/IAsyncAction";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TimeSpan } from "../../Foundation/TimeSpan";
import { StorageFile } from "../StorageFile";
import { IStorageItemExtraProperties } from "./IStorageItemExtraProperties";
import * as mm from 'music-metadata';
import { Vector } from "../../Foundation/Interop/Vector`1";

@GenerateShim('Windows.Storage.FileProperties.MusicProperties')
export class MusicProperties implements IStorageItemExtraProperties {
    year: number = 0;
    trackNumber: number = 0;
    title: string = "";
    subtitle: string = "";
    rating: number = 0;
    publisher: string = "";
    artist: string = "";
    albumArtist: string = "";
    album: string = "";
    bitrate: number = 0;
    composers: IVector<string> = new Vector();
    conductors: IVector<string> = new Vector();
    duration: number = 0;
    genre: IVector<string> = new Vector();
    producers: IVector<string> = new Vector();
    writers: IVector<string> = new Vector();

    retrievePropertiesAsync(propertiesToRetrieve: IIterable<string>): IAsyncOperation<IMap<string, any>> {
        throw new Error('MusicProperties#retrievePropertiesAsync not implemented')
    }
    savePropertiesAsync(propertiesToSave: IIterable<IKeyValuePair<string, any>>): IAsyncAction {
        throw new Error('MusicProperties#savePropertiesAsync not implemented')
    }
    savePropertiesAsyncOverloadDefault(): IAsyncAction {
        throw new Error('MusicProperties#savePropertiesAsyncOverloadDefault not implemented')
    }

    async _readPropertiesAsync(_storageItem: StorageFile) {
        try {
            let file = await mm.parseFile(_storageItem.path);
            this.bitrate = file.format.bitrate;
            this.duration = file.format.duration;

            this.title = file.common.title;
            this.subtitle = file.common.subtitle[0] ?? "";
            this.album = file.common.album;
            this.albumArtist = file.common.albumartist;
            this.artist = file.common.artist;
            this.trackNumber = file.common.track.no;

            for (const composer of file.common.composer) {
                this.composers.append(composer);                
            }
            for (const composer of file.common.genre) {
                this.genre.append(composer);                
            }
        }
        catch (e) {
            console.error(e);
        }
    }
}
