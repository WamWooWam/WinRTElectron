// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:04 2021
// </auto-generated>
// --------------------------------------------------

import { EventHandler } from "../../Foundation/EventHandler`1";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { ContentAccessRestrictionLevel } from "./ContentAccessRestrictionLevel";
import { ContentRestrictionsBrowsePolicy } from "./ContentRestrictionsBrowsePolicy";
import { RatedContentDescription } from "./RatedContentDescription";

@GenerateShim('Windows.Media.ContentRestrictions.RatedContentRestrictions')
export class RatedContentRestrictions { 
    // constructor();
    // constructor(maxAgeRating: number);
    constructor(...args) { }
    getBrowsePolicyAsync(): IAsyncOperation<ContentRestrictionsBrowsePolicy> {
        throw new Error('RatedContentRestrictions#getBrowsePolicyAsync not implemented')
    }
    getRestrictionLevelAsync(ratedContentDescription: RatedContentDescription): IAsyncOperation<ContentAccessRestrictionLevel> {
        throw new Error('RatedContentRestrictions#getRestrictionLevelAsync not implemented')
    }
    requestContentAccessAsync(ratedContentDescription: RatedContentDescription): IAsyncOperation<boolean> {
        throw new Error('RatedContentRestrictions#requestContentAccessAsync not implemented')
    }

    #restrictionsChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onrestrictionschanged(handler: EventHandler<any>) {
        this.#restrictionsChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'restrictionschanged':
                this.#restrictionsChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'restrictionschanged':
                this.#restrictionsChanged.delete(handler);
                break;
        }
    }
}
