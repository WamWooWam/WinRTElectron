// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:05 2021
// </auto-generated>
// --------------------------------------------------

import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { PlayToSourceRequestedEventArgs } from "./PlayToSourceRequestedEventArgs";
import { PlayToSourceSelectedEventArgs } from "./PlayToSourceSelectedEventArgs";

@GenerateShim('Windows.Media.PlayTo.PlayToManager')
export class PlayToManager { 
    defaultSourceSelection: boolean = null;
    static _instance: PlayToManager;
    static getForCurrentView(): PlayToManager {
        return PlayToManager._instance ?? (PlayToManager._instance = new PlayToManager());
    }
    static showPlayToUI(): void {
        console.warn('PlayToManager#showPlayToUI not implemented')
    }

    #sourceRequested: Set<TypedEventHandler<PlayToManager, PlayToSourceRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set onsourcerequested(handler: TypedEventHandler<PlayToManager, PlayToSourceRequestedEventArgs>) {
        this.#sourceRequested.add(handler);
    }

    #sourceSelected: Set<TypedEventHandler<PlayToManager, PlayToSourceSelectedEventArgs>> = new Set();
    @Enumerable(true)
    set onsourceselected(handler: TypedEventHandler<PlayToManager, PlayToSourceSelectedEventArgs>) {
        this.#sourceSelected.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'sourcerequested':
                this.#sourceRequested.add(handler);
                break;
            case 'sourceselected':
                this.#sourceSelected.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'sourcerequested':
                this.#sourceRequested.delete(handler);
                break;
            case 'sourceselected':
                this.#sourceSelected.delete(handler);
                break;
        }
    }
}
