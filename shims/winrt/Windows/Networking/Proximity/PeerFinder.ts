// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:06 2021
// </auto-generated>
// --------------------------------------------------

import { IMap } from "../../Foundation/Collections/IMap`2";
import { IVectorView } from "../../Foundation/Collections/IVectorView`1";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { ConnectionRequestedEventArgs } from "./ConnectionRequestedEventArgs";
import { PeerDiscoveryTypes } from "./PeerDiscoveryTypes";
import { PeerInformation } from "./PeerInformation";
import { PeerRole } from "./PeerRole";
import { PeerWatcher } from "./PeerWatcher";
import { TriggeredConnectionStateChangedEventArgs } from "./TriggeredConnectionStateChangedEventArgs";
import { StreamSocket } from "../Sockets/StreamSocket";
import { IBuffer } from "../../Storage/Streams/IBuffer";

@GenerateShim('Windows.Networking.Proximity.PeerFinder')
export class PeerFinder { 
    static role: PeerRole = null;
    static discoveryData: IBuffer = null;
    static displayName: string = null;
    static allowWiFiDirect: boolean = null;
    static allowInfrastructure: boolean = null;
    static allowBluetooth: boolean = null;
    static alternateIdentities: IMap<string, string> = null;
    static supportedDiscoveryTypes: PeerDiscoveryTypes = null;
    static createWatcher(): PeerWatcher {
        throw new Error('PeerFinder#createWatcher not implemented')
    }
    static start(): void {
        console.warn('PeerFinder#start not implemented')
    }
    static startWithMessage(peerMessage: string): void {
        console.warn('PeerFinder#startWithMessage not implemented')
    }
    static stop(): void {
        console.warn('PeerFinder#stop not implemented')
    }
    static findAllPeersAsync(): IAsyncOperation<IVectorView<PeerInformation>> {
        throw new Error('PeerFinder#findAllPeersAsync not implemented')
    }
    static connectAsync(peerInformation: PeerInformation): IAsyncOperation<StreamSocket> {
        throw new Error('PeerFinder#connectAsync not implemented')
    }

    static __connectionRequested: Set<TypedEventHandler<any, ConnectionRequestedEventArgs>> = new Set();
    @Enumerable(true)
    static set onconnectionrequested(handler: TypedEventHandler<any, ConnectionRequestedEventArgs>) {
        PeerFinder.__connectionRequested.add(handler);
    }

    static __triggeredConnectionStateChanged: Set<TypedEventHandler<any, TriggeredConnectionStateChangedEventArgs>> = new Set();
    @Enumerable(true)
    static set ontriggeredconnectionstatechanged(handler: TypedEventHandler<any, TriggeredConnectionStateChangedEventArgs>) {
        PeerFinder.__triggeredConnectionStateChanged.add(handler);
    }

    static addEventListener(name: string, handler: any) {
        switch (name) {
            case 'connectionrequested':
                PeerFinder.__connectionRequested.add(handler);
                break;
            case 'triggeredconnectionstatechanged':
                PeerFinder.__triggeredConnectionStateChanged.add(handler);
                break;
        }
    }

    static removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'connectionrequested':
                PeerFinder.__connectionRequested.delete(handler);
                break;
            case 'triggeredconnectionstatechanged':
                PeerFinder.__triggeredConnectionStateChanged.delete(handler);
                break;
        }
    }
}
