// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:06 2021
// </auto-generated>
// --------------------------------------------------

import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { Uri } from "../../Foundation/Uri";
import { DeviceArrivedEventHandler } from "./DeviceArrivedEventHandler";
import { DeviceDepartedEventHandler } from "./DeviceDepartedEventHandler";
import { MessageReceivedHandler } from "./MessageReceivedHandler";
import { MessageTransmittedHandler } from "./MessageTransmittedHandler";
import { IBuffer } from "../../Storage/Streams/IBuffer";

@GenerateShim('Windows.Networking.Proximity.ProximityDevice')
export class ProximityDevice { 
    bitsPerSecond: number = null;
    deviceId: string = null;
    maxMessageBytes: number = null;
    subscribeForMessage(messageType: string, messageReceivedHandler: MessageReceivedHandler): number {
        throw new Error('ProximityDevice#subscribeForMessage not implemented')
    }
    publishMessage(messageType: string, message: string): number {
        throw new Error('ProximityDevice#publishMessage not implemented')
    }
    publishMessageWithCallback(messageType: string, message: string, messageTransmittedHandler: MessageTransmittedHandler): number {
        throw new Error('ProximityDevice#publishMessageWithCallback not implemented')
    }
    publishBinaryMessage(messageType: string, message: IBuffer): number {
        throw new Error('ProximityDevice#publishBinaryMessage not implemented')
    }
    publishBinaryMessageWithCallback(messageType: string, message: IBuffer, messageTransmittedHandler: MessageTransmittedHandler): number {
        throw new Error('ProximityDevice#publishBinaryMessageWithCallback not implemented')
    }
    publishUriMessage(message: Uri): number {
        throw new Error('ProximityDevice#publishUriMessage not implemented')
    }
    publishUriMessageWithCallback(message: Uri, messageTransmittedHandler: MessageTransmittedHandler): number {
        throw new Error('ProximityDevice#publishUriMessageWithCallback not implemented')
    }
    stopSubscribingForMessage(subscriptionId: number): void {
        console.warn('ProximityDevice#stopSubscribingForMessage not implemented')
    }
    stopPublishingMessage(messageId: number): void {
        console.warn('ProximityDevice#stopPublishingMessage not implemented')
    }
    static getDeviceSelector(): string {
        throw new Error('ProximityDevice#getDeviceSelector not implemented')
    }
    static getDefault(): ProximityDevice {
        throw new Error('ProximityDevice#getDefault not implemented')
    }
    static fromId(deviceId: string): ProximityDevice {
        throw new Error('ProximityDevice#fromId not implemented')
    }

    #deviceArrived: Set<DeviceArrivedEventHandler> = new Set();
    @Enumerable(true)
    set ondevicearrived(handler: DeviceArrivedEventHandler) {
        this.#deviceArrived.add(handler);
    }

    #deviceDeparted: Set<DeviceDepartedEventHandler> = new Set();
    @Enumerable(true)
    set ondevicedeparted(handler: DeviceDepartedEventHandler) {
        this.#deviceDeparted.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'devicearrived':
                this.#deviceArrived.add(handler);
                break;
            case 'devicedeparted':
                this.#deviceDeparted.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'devicearrived':
                this.#deviceArrived.delete(handler);
                break;
            case 'devicedeparted':
                this.#deviceDeparted.delete(handler);
                break;
        }
    }
}
