// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:04 2021
// </auto-generated>
// --------------------------------------------------

import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IKeyValuePair } from "../../Foundation/Collections/IKeyValuePair`2";
import { IVectorView } from "../../Foundation/Collections/IVectorView`1";
import { IAsyncAction } from "../../Foundation/IAsyncAction";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { BitmapAlphaMode } from "./BitmapAlphaMode";
import { BitmapCodecInformation } from "./BitmapCodecInformation";
import { BitmapDecoder } from "./BitmapDecoder";
import { BitmapPixelFormat } from "./BitmapPixelFormat";
import { BitmapProperties } from "./BitmapProperties";
import { BitmapTransform } from "./BitmapTransform";
import { BitmapTypedValue } from "./BitmapTypedValue";
import { IRandomAccessStream } from "../../Storage/Streams/IRandomAccessStream";

@GenerateShim('Windows.Graphics.Imaging.BitmapEncoder')
export class BitmapEncoder { 
    isThumbnailGenerated: boolean = null;
    generatedThumbnailWidth: number = null;
    generatedThumbnailHeight: number = null;
    bitmapContainerProperties: BitmapProperties = null;
    bitmapProperties: BitmapProperties = null;
    bitmapTransform: BitmapTransform = null;
    encoderInformation: BitmapCodecInformation = null;
    static bmpEncoderId: string = null;
    static gifEncoderId: string = null;
    static jpegEncoderId: string = null;
    static jpegXREncoderId: string = null;
    static pngEncoderId: string = null;
    static tiffEncoderId: string = null;
    setPixelData(pixelFormat: BitmapPixelFormat, alphaMode: BitmapAlphaMode, width: number, height: number, dpiX: number, dpiY: number, pixels: number[]): void {
        console.warn('BitmapEncoder#setPixelData not implemented')
    }
    goToNextFrameAsync(): IAsyncAction {
        throw new Error('BitmapEncoder#goToNextFrameAsync not implemented')
    }
    goToNextFrameWithEncodingOptionsAsync(encodingOptions: IIterable<IKeyValuePair<string, BitmapTypedValue>>): IAsyncAction {
        throw new Error('BitmapEncoder#goToNextFrameWithEncodingOptionsAsync not implemented')
    }
    flushAsync(): IAsyncAction {
        throw new Error('BitmapEncoder#flushAsync not implemented')
    }
    static getEncoderInformationEnumerator(): IVectorView<BitmapCodecInformation> {
        throw new Error('BitmapEncoder#getEncoderInformationEnumerator not implemented')
    }
    static createAsync(encoderId: string, stream: IRandomAccessStream): IAsyncOperation<BitmapEncoder> {
        throw new Error('BitmapEncoder#createAsync not implemented')
    }
    static createWithEncodingOptionsAsync(encoderId: string, stream: IRandomAccessStream, encodingOptions: IIterable<IKeyValuePair<string, BitmapTypedValue>>): IAsyncOperation<BitmapEncoder> {
        throw new Error('BitmapEncoder#createWithEncodingOptionsAsync not implemented')
    }
    static createForTranscodingAsync(stream: IRandomAccessStream, bitmapDecoder: BitmapDecoder): IAsyncOperation<BitmapEncoder> {
        throw new Error('BitmapEncoder#createForTranscodingAsync not implemented')
    }
    static createForInPlacePropertyEncodingAsync(bitmapDecoder: BitmapDecoder): IAsyncOperation<BitmapEncoder> {
        throw new Error('BitmapEncoder#createForInPlacePropertyEncodingAsync not implemented')
    }
}
