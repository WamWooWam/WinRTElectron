// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:10 2021
// </auto-generated>
// --------------------------------------------------

import { IPlayer } from "../../../Media/Advertising/IPlayer";
import { CurrentBitrateRequestedEventArgs } from "./CurrentBitrateRequestedEventArgs";
import { CurrentPositionRequestedEventArgs } from "./CurrentPositionRequestedEventArgs";
import { EventHandler } from "winrt/Windows/Foundation/EventHandler`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { Size } from "winrt/Windows/Foundation/Size";

@GenerateShim('Microsoft.PlayerFramework.Js.Advertising.MediaPlayerAdapterBridge')
export class MediaPlayerAdapterBridge implements IPlayer, IStringable { 
    currentBitrate: number = null;
    readonly currentPosition: number = null;
    dimensions: Size = null;
    isFullScreen: boolean = null;
    volume: number = null;
    isMuted: boolean = null;
    toString(): string {
        throw new Error('MediaPlayerAdapterBridge#toString not implemented')
    }

    private __fullscreenChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onfullscreenchanged(handler: EventHandler<any>) {
        this.__fullscreenChanged.add(handler);
    }

    private __dimensionsChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ondimensionschanged(handler: EventHandler<any>) {
        this.__dimensionsChanged.add(handler);
    }

    private __volumeChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onvolumechanged(handler: EventHandler<any>) {
        this.__volumeChanged.add(handler);
    }

    private __isMutedChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onismutedchanged(handler: EventHandler<any>) {
        this.__isMutedChanged.add(handler);
    }

    private __currentBitrateRequested: Set<EventHandler<CurrentBitrateRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set oncurrentbitraterequested(handler: EventHandler<CurrentBitrateRequestedEventArgs>) {
        this.__currentBitrateRequested.add(handler);
    }

    private __currentPositionRequested: Set<EventHandler<CurrentPositionRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set oncurrentpositionrequested(handler: EventHandler<CurrentPositionRequestedEventArgs>) {
        this.__currentPositionRequested.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'fullscreenchanged':
                this.__fullscreenChanged.add(handler);
                break;
            case 'dimensionschanged':
                this.__dimensionsChanged.add(handler);
                break;
            case 'volumechanged':
                this.__volumeChanged.add(handler);
                break;
            case 'ismutedchanged':
                this.__isMutedChanged.add(handler);
                break;
            case 'currentbitraterequested':
                this.__currentBitrateRequested.add(handler);
                break;
            case 'currentpositionrequested':
                this.__currentPositionRequested.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'fullscreenchanged':
                this.__fullscreenChanged.delete(handler);
                break;
            case 'dimensionschanged':
                this.__dimensionsChanged.delete(handler);
                break;
            case 'volumechanged':
                this.__volumeChanged.delete(handler);
                break;
            case 'ismutedchanged':
                this.__isMutedChanged.delete(handler);
                break;
            case 'currentbitraterequested':
                this.__currentBitrateRequested.delete(handler);
                break;
            case 'currentpositionrequested':
                this.__currentPositionRequested.delete(handler);
                break;
        }
    }
}
