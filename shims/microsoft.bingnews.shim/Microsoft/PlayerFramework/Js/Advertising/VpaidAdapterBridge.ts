// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:10 2021
// </auto-generated>
// --------------------------------------------------

import { AdInteractionEventArgs } from "../../../Media/Advertising/AdInteractionEventArgs";
import { ClickThroughEventArgs } from "../../../Media/Advertising/ClickThroughEventArgs";
import { IVpaid } from "../../../Media/Advertising/IVpaid";
import { IVpaid2 } from "../../../Media/Advertising/IVpaid2";
import { VpaidMessageEventArgs } from "../../../Media/Advertising/VpaidMessageEventArgs";
import { BoolRequestedEventArgs } from "./BoolRequestedEventArgs";
import { DoubleRequestedEventArgs } from "./DoubleRequestedEventArgs";
import { HandshakeVersionRequestedEventArgs } from "./HandshakeVersionRequestedEventArgs";
import { InitAdRequestedEventArgs } from "./InitAdRequestedEventArgs";
import { ResizeAdRequestedEventArgs } from "./ResizeAdRequestedEventArgs";
import { SetVolumeRequestedEventArgs } from "./SetVolumeRequestedEventArgs";
import { StringRequestedEventArgs } from "./StringRequestedEventArgs";
import { TimeSpanRequestedEventArgs } from "./TimeSpanRequestedEventArgs";
import { EventHandler } from "winrt/Windows/Foundation/EventHandler`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.PlayerFramework.Js.Advertising.VpaidAdapterBridge')
export class VpaidAdapterBridge implements IVpaid2, IVpaid, IStringable { 
    readonly adWidth: number = null;
    readonly adHeight: number = null;
    readonly adSkippableState: boolean = null;
    readonly adCompanions: string = null;
    readonly adIcons: boolean = null;
    readonly adDuration: number = null;
    readonly adLinear: boolean = null;
    readonly adExpanded: boolean = null;
    readonly adRemainingTime: number = null;
    adVolume: number = null;
    handshakeVersion(version: string): string {
        throw new Error('VpaidAdapterBridge#handshakeVersion not implemented')
    }
    skipAd(): void {
        console.warn('VpaidAdapterBridge#skipAd not implemented')
    }
    initAd(width: number, height: number, viewMode: string, desiredBitrate: number, creativeData: string, environmentVariables: string): void {
        console.warn('VpaidAdapterBridge#initAd not implemented')
    }
    startAd(): void {
        console.warn('VpaidAdapterBridge#startAd not implemented')
    }
    stopAd(): void {
        console.warn('VpaidAdapterBridge#stopAd not implemented')
    }
    resizeAd(width: number, height: number, viewMode: string): void {
        console.warn('VpaidAdapterBridge#resizeAd not implemented')
    }
    pauseAd(): void {
        console.warn('VpaidAdapterBridge#pauseAd not implemented')
    }
    resumeAd(): void {
        console.warn('VpaidAdapterBridge#resumeAd not implemented')
    }
    expandAd(): void {
        console.warn('VpaidAdapterBridge#expandAd not implemented')
    }
    collapseAd(): void {
        console.warn('VpaidAdapterBridge#collapseAd not implemented')
    }
    onAdClickThru(url: string, id: string, playerHandles: boolean): void {
        console.warn('VpaidAdapterBridge#onAdClickThru not implemented')
    }
    onAdDurationChange(): void {
        console.warn('VpaidAdapterBridge#onAdDurationChange not implemented')
    }
    onAdError(message: string): void {
        console.warn('VpaidAdapterBridge#onAdError not implemented')
    }
    onAdExpandedChanged(): void {
        console.warn('VpaidAdapterBridge#onAdExpandedChanged not implemented')
    }
    onAdImpression(): void {
        console.warn('VpaidAdapterBridge#onAdImpression not implemented')
    }
    onAdInteraction(id: string): void {
        console.warn('VpaidAdapterBridge#onAdInteraction not implemented')
    }
    onAdLinearChanged(): void {
        console.warn('VpaidAdapterBridge#onAdLinearChanged not implemented')
    }
    onAdLoaded(): void {
        console.warn('VpaidAdapterBridge#onAdLoaded not implemented')
    }
    onAdLog(message: string): void {
        console.warn('VpaidAdapterBridge#onAdLog not implemented')
    }
    onAdPaused(): void {
        console.warn('VpaidAdapterBridge#onAdPaused not implemented')
    }
    onAdPlaying(): void {
        console.warn('VpaidAdapterBridge#onAdPlaying not implemented')
    }
    onAdRemainingTimeChange(): void {
        console.warn('VpaidAdapterBridge#onAdRemainingTimeChange not implemented')
    }
    onAdSizeChanged(): void {
        console.warn('VpaidAdapterBridge#onAdSizeChanged not implemented')
    }
    onAdSkippableStateChange(): void {
        console.warn('VpaidAdapterBridge#onAdSkippableStateChange not implemented')
    }
    onAdSkipped(): void {
        console.warn('VpaidAdapterBridge#onAdSkipped not implemented')
    }
    onAdStarted(): void {
        console.warn('VpaidAdapterBridge#onAdStarted not implemented')
    }
    onAdStopped(): void {
        console.warn('VpaidAdapterBridge#onAdStopped not implemented')
    }
    onAdUserAcceptInvitation(): void {
        console.warn('VpaidAdapterBridge#onAdUserAcceptInvitation not implemented')
    }
    onAdUserClose(): void {
        console.warn('VpaidAdapterBridge#onAdUserClose not implemented')
    }
    onAdUserMinimize(): void {
        console.warn('VpaidAdapterBridge#onAdUserMinimize not implemented')
    }
    onAdVideoComplete(): void {
        console.warn('VpaidAdapterBridge#onAdVideoComplete not implemented')
    }
    onAdVideoFirstQuartile(): void {
        console.warn('VpaidAdapterBridge#onAdVideoFirstQuartile not implemented')
    }
    onAdVideoMidpoint(): void {
        console.warn('VpaidAdapterBridge#onAdVideoMidpoint not implemented')
    }
    onAdVideoStart(): void {
        console.warn('VpaidAdapterBridge#onAdVideoStart not implemented')
    }
    onAdVideoThirdQuartile(): void {
        console.warn('VpaidAdapterBridge#onAdVideoThirdQuartile not implemented')
    }
    onAdVolumeChanged(): void {
        console.warn('VpaidAdapterBridge#onAdVolumeChanged not implemented')
    }
    toString(): string {
        throw new Error('VpaidAdapterBridge#toString not implemented')
    }

    private __adLoaded: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadloaded(handler: EventHandler<any>) {
        this.__adLoaded.add(handler);
    }

    private __adStarted: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadstarted(handler: EventHandler<any>) {
        this.__adStarted.add(handler);
    }

    private __adStopped: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadstopped(handler: EventHandler<any>) {
        this.__adStopped.add(handler);
    }

    private __adPaused: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadpaused(handler: EventHandler<any>) {
        this.__adPaused.add(handler);
    }

    private __adPlaying: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadplaying(handler: EventHandler<any>) {
        this.__adPlaying.add(handler);
    }

    private __adExpandedChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadexpandedchanged(handler: EventHandler<any>) {
        this.__adExpandedChanged.add(handler);
    }

    private __adLinearChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadlinearchanged(handler: EventHandler<any>) {
        this.__adLinearChanged.add(handler);
    }

    private __adVolumeChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadvolumechanged(handler: EventHandler<any>) {
        this.__adVolumeChanged.add(handler);
    }

    private __adVideoStart: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadvideostart(handler: EventHandler<any>) {
        this.__adVideoStart.add(handler);
    }

    private __adVideoFirstQuartile: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadvideofirstquartile(handler: EventHandler<any>) {
        this.__adVideoFirstQuartile.add(handler);
    }

    private __adVideoMidpoint: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadvideomidpoint(handler: EventHandler<any>) {
        this.__adVideoMidpoint.add(handler);
    }

    private __adVideoThirdQuartile: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadvideothirdquartile(handler: EventHandler<any>) {
        this.__adVideoThirdQuartile.add(handler);
    }

    private __adVideoComplete: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadvideocomplete(handler: EventHandler<any>) {
        this.__adVideoComplete.add(handler);
    }

    private __adUserAcceptInvitation: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onaduseracceptinvitation(handler: EventHandler<any>) {
        this.__adUserAcceptInvitation.add(handler);
    }

    private __adUserClose: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onaduserclose(handler: EventHandler<any>) {
        this.__adUserClose.add(handler);
    }

    private __adUserMinimize: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onaduserminimize(handler: EventHandler<any>) {
        this.__adUserMinimize.add(handler);
    }

    private __adRemainingTimeChange: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadremainingtimechange(handler: EventHandler<any>) {
        this.__adRemainingTimeChange.add(handler);
    }

    private __adImpression: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadimpression(handler: EventHandler<any>) {
        this.__adImpression.add(handler);
    }

    private __adClickThru: Set<EventHandler<ClickThroughEventArgs>> = new Set();
    @Enumerable(true)
    set onadclickthru(handler: EventHandler<ClickThroughEventArgs>) {
        this.__adClickThru.add(handler);
    }

    private __adError: Set<EventHandler<VpaidMessageEventArgs>> = new Set();
    @Enumerable(true)
    set onaderror(handler: EventHandler<VpaidMessageEventArgs>) {
        this.__adError.add(handler);
    }

    private __adLog: Set<EventHandler<VpaidMessageEventArgs>> = new Set();
    @Enumerable(true)
    set onadlog(handler: EventHandler<VpaidMessageEventArgs>) {
        this.__adLog.add(handler);
    }

    private __adInteraction: Set<EventHandler<AdInteractionEventArgs>> = new Set();
    @Enumerable(true)
    set onadinteraction(handler: EventHandler<AdInteractionEventArgs>) {
        this.__adInteraction.add(handler);
    }

    private __adSkipped: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadskipped(handler: EventHandler<any>) {
        this.__adSkipped.add(handler);
    }

    private __adSizeChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadsizechanged(handler: EventHandler<any>) {
        this.__adSizeChanged.add(handler);
    }

    private __adSkippableStateChange: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onadskippablestatechange(handler: EventHandler<any>) {
        this.__adSkippableStateChange.add(handler);
    }

    private __adDurationChange: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onaddurationchange(handler: EventHandler<any>) {
        this.__adDurationChange.add(handler);
    }

    private __handshakeVersionRequested: Set<EventHandler<HandshakeVersionRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set onhandshakeversionrequested(handler: EventHandler<HandshakeVersionRequestedEventArgs>) {
        this.__handshakeVersionRequested.add(handler);
    }

    private __skipAdRequested: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onskipadrequested(handler: EventHandler<any>) {
        this.__skipAdRequested.add(handler);
    }

    private __initAdRequested: Set<EventHandler<InitAdRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set oninitadrequested(handler: EventHandler<InitAdRequestedEventArgs>) {
        this.__initAdRequested.add(handler);
    }

    private __startAdRequested: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onstartadrequested(handler: EventHandler<any>) {
        this.__startAdRequested.add(handler);
    }

    private __stopAdRequested: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onstopadrequested(handler: EventHandler<any>) {
        this.__stopAdRequested.add(handler);
    }

    private __resizeAdRequested: Set<EventHandler<ResizeAdRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set onresizeadrequested(handler: EventHandler<ResizeAdRequestedEventArgs>) {
        this.__resizeAdRequested.add(handler);
    }

    private __pauseAdRequested: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onpauseadrequested(handler: EventHandler<any>) {
        this.__pauseAdRequested.add(handler);
    }

    private __resumeAdRequested: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onresumeadrequested(handler: EventHandler<any>) {
        this.__resumeAdRequested.add(handler);
    }

    private __expandAdRequested: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set onexpandadrequested(handler: EventHandler<any>) {
        this.__expandAdRequested.add(handler);
    }

    private __collapseAdRequested: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set oncollapseadrequested(handler: EventHandler<any>) {
        this.__collapseAdRequested.add(handler);
    }

    private __getAdWidthRequested: Set<EventHandler<DoubleRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ongetadwidthrequested(handler: EventHandler<DoubleRequestedEventArgs>) {
        this.__getAdWidthRequested.add(handler);
    }

    private __getAdHeightRequested: Set<EventHandler<DoubleRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ongetadheightrequested(handler: EventHandler<DoubleRequestedEventArgs>) {
        this.__getAdHeightRequested.add(handler);
    }

    private __getAdSkippableStateRequested: Set<EventHandler<BoolRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ongetadskippablestaterequested(handler: EventHandler<BoolRequestedEventArgs>) {
        this.__getAdSkippableStateRequested.add(handler);
    }

    private __getAdCompanionsRequested: Set<EventHandler<StringRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ongetadcompanionsrequested(handler: EventHandler<StringRequestedEventArgs>) {
        this.__getAdCompanionsRequested.add(handler);
    }

    private __getAdIconsRequested: Set<EventHandler<BoolRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ongetadiconsrequested(handler: EventHandler<BoolRequestedEventArgs>) {
        this.__getAdIconsRequested.add(handler);
    }

    private __getAdDurationRequested: Set<EventHandler<TimeSpanRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ongetaddurationrequested(handler: EventHandler<TimeSpanRequestedEventArgs>) {
        this.__getAdDurationRequested.add(handler);
    }

    private __getAdLinearRequested: Set<EventHandler<BoolRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ongetadlinearrequested(handler: EventHandler<BoolRequestedEventArgs>) {
        this.__getAdLinearRequested.add(handler);
    }

    private __getAdExpandedRequested: Set<EventHandler<BoolRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ongetadexpandedrequested(handler: EventHandler<BoolRequestedEventArgs>) {
        this.__getAdExpandedRequested.add(handler);
    }

    private __getAdRemainingTimeRequested: Set<EventHandler<TimeSpanRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ongetadremainingtimerequested(handler: EventHandler<TimeSpanRequestedEventArgs>) {
        this.__getAdRemainingTimeRequested.add(handler);
    }

    private __setAdVolumeRequested: Set<EventHandler<SetVolumeRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set onsetadvolumerequested(handler: EventHandler<SetVolumeRequestedEventArgs>) {
        this.__setAdVolumeRequested.add(handler);
    }

    private __getAdVolumeRequested: Set<EventHandler<DoubleRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set ongetadvolumerequested(handler: EventHandler<DoubleRequestedEventArgs>) {
        this.__getAdVolumeRequested.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'adloaded':
                this.__adLoaded.add(handler);
                break;
            case 'adstarted':
                this.__adStarted.add(handler);
                break;
            case 'adstopped':
                this.__adStopped.add(handler);
                break;
            case 'adpaused':
                this.__adPaused.add(handler);
                break;
            case 'adplaying':
                this.__adPlaying.add(handler);
                break;
            case 'adexpandedchanged':
                this.__adExpandedChanged.add(handler);
                break;
            case 'adlinearchanged':
                this.__adLinearChanged.add(handler);
                break;
            case 'advolumechanged':
                this.__adVolumeChanged.add(handler);
                break;
            case 'advideostart':
                this.__adVideoStart.add(handler);
                break;
            case 'advideofirstquartile':
                this.__adVideoFirstQuartile.add(handler);
                break;
            case 'advideomidpoint':
                this.__adVideoMidpoint.add(handler);
                break;
            case 'advideothirdquartile':
                this.__adVideoThirdQuartile.add(handler);
                break;
            case 'advideocomplete':
                this.__adVideoComplete.add(handler);
                break;
            case 'aduseracceptinvitation':
                this.__adUserAcceptInvitation.add(handler);
                break;
            case 'aduserclose':
                this.__adUserClose.add(handler);
                break;
            case 'aduserminimize':
                this.__adUserMinimize.add(handler);
                break;
            case 'adremainingtimechange':
                this.__adRemainingTimeChange.add(handler);
                break;
            case 'adimpression':
                this.__adImpression.add(handler);
                break;
            case 'adclickthru':
                this.__adClickThru.add(handler);
                break;
            case 'aderror':
                this.__adError.add(handler);
                break;
            case 'adlog':
                this.__adLog.add(handler);
                break;
            case 'adinteraction':
                this.__adInteraction.add(handler);
                break;
            case 'adskipped':
                this.__adSkipped.add(handler);
                break;
            case 'adsizechanged':
                this.__adSizeChanged.add(handler);
                break;
            case 'adskippablestatechange':
                this.__adSkippableStateChange.add(handler);
                break;
            case 'addurationchange':
                this.__adDurationChange.add(handler);
                break;
            case 'handshakeversionrequested':
                this.__handshakeVersionRequested.add(handler);
                break;
            case 'skipadrequested':
                this.__skipAdRequested.add(handler);
                break;
            case 'initadrequested':
                this.__initAdRequested.add(handler);
                break;
            case 'startadrequested':
                this.__startAdRequested.add(handler);
                break;
            case 'stopadrequested':
                this.__stopAdRequested.add(handler);
                break;
            case 'resizeadrequested':
                this.__resizeAdRequested.add(handler);
                break;
            case 'pauseadrequested':
                this.__pauseAdRequested.add(handler);
                break;
            case 'resumeadrequested':
                this.__resumeAdRequested.add(handler);
                break;
            case 'expandadrequested':
                this.__expandAdRequested.add(handler);
                break;
            case 'collapseadrequested':
                this.__collapseAdRequested.add(handler);
                break;
            case 'getadwidthrequested':
                this.__getAdWidthRequested.add(handler);
                break;
            case 'getadheightrequested':
                this.__getAdHeightRequested.add(handler);
                break;
            case 'getadskippablestaterequested':
                this.__getAdSkippableStateRequested.add(handler);
                break;
            case 'getadcompanionsrequested':
                this.__getAdCompanionsRequested.add(handler);
                break;
            case 'getadiconsrequested':
                this.__getAdIconsRequested.add(handler);
                break;
            case 'getaddurationrequested':
                this.__getAdDurationRequested.add(handler);
                break;
            case 'getadlinearrequested':
                this.__getAdLinearRequested.add(handler);
                break;
            case 'getadexpandedrequested':
                this.__getAdExpandedRequested.add(handler);
                break;
            case 'getadremainingtimerequested':
                this.__getAdRemainingTimeRequested.add(handler);
                break;
            case 'setadvolumerequested':
                this.__setAdVolumeRequested.add(handler);
                break;
            case 'getadvolumerequested':
                this.__getAdVolumeRequested.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'adloaded':
                this.__adLoaded.delete(handler);
                break;
            case 'adstarted':
                this.__adStarted.delete(handler);
                break;
            case 'adstopped':
                this.__adStopped.delete(handler);
                break;
            case 'adpaused':
                this.__adPaused.delete(handler);
                break;
            case 'adplaying':
                this.__adPlaying.delete(handler);
                break;
            case 'adexpandedchanged':
                this.__adExpandedChanged.delete(handler);
                break;
            case 'adlinearchanged':
                this.__adLinearChanged.delete(handler);
                break;
            case 'advolumechanged':
                this.__adVolumeChanged.delete(handler);
                break;
            case 'advideostart':
                this.__adVideoStart.delete(handler);
                break;
            case 'advideofirstquartile':
                this.__adVideoFirstQuartile.delete(handler);
                break;
            case 'advideomidpoint':
                this.__adVideoMidpoint.delete(handler);
                break;
            case 'advideothirdquartile':
                this.__adVideoThirdQuartile.delete(handler);
                break;
            case 'advideocomplete':
                this.__adVideoComplete.delete(handler);
                break;
            case 'aduseracceptinvitation':
                this.__adUserAcceptInvitation.delete(handler);
                break;
            case 'aduserclose':
                this.__adUserClose.delete(handler);
                break;
            case 'aduserminimize':
                this.__adUserMinimize.delete(handler);
                break;
            case 'adremainingtimechange':
                this.__adRemainingTimeChange.delete(handler);
                break;
            case 'adimpression':
                this.__adImpression.delete(handler);
                break;
            case 'adclickthru':
                this.__adClickThru.delete(handler);
                break;
            case 'aderror':
                this.__adError.delete(handler);
                break;
            case 'adlog':
                this.__adLog.delete(handler);
                break;
            case 'adinteraction':
                this.__adInteraction.delete(handler);
                break;
            case 'adskipped':
                this.__adSkipped.delete(handler);
                break;
            case 'adsizechanged':
                this.__adSizeChanged.delete(handler);
                break;
            case 'adskippablestatechange':
                this.__adSkippableStateChange.delete(handler);
                break;
            case 'addurationchange':
                this.__adDurationChange.delete(handler);
                break;
            case 'handshakeversionrequested':
                this.__handshakeVersionRequested.delete(handler);
                break;
            case 'skipadrequested':
                this.__skipAdRequested.delete(handler);
                break;
            case 'initadrequested':
                this.__initAdRequested.delete(handler);
                break;
            case 'startadrequested':
                this.__startAdRequested.delete(handler);
                break;
            case 'stopadrequested':
                this.__stopAdRequested.delete(handler);
                break;
            case 'resizeadrequested':
                this.__resizeAdRequested.delete(handler);
                break;
            case 'pauseadrequested':
                this.__pauseAdRequested.delete(handler);
                break;
            case 'resumeadrequested':
                this.__resumeAdRequested.delete(handler);
                break;
            case 'expandadrequested':
                this.__expandAdRequested.delete(handler);
                break;
            case 'collapseadrequested':
                this.__collapseAdRequested.delete(handler);
                break;
            case 'getadwidthrequested':
                this.__getAdWidthRequested.delete(handler);
                break;
            case 'getadheightrequested':
                this.__getAdHeightRequested.delete(handler);
                break;
            case 'getadskippablestaterequested':
                this.__getAdSkippableStateRequested.delete(handler);
                break;
            case 'getadcompanionsrequested':
                this.__getAdCompanionsRequested.delete(handler);
                break;
            case 'getadiconsrequested':
                this.__getAdIconsRequested.delete(handler);
                break;
            case 'getaddurationrequested':
                this.__getAdDurationRequested.delete(handler);
                break;
            case 'getadlinearrequested':
                this.__getAdLinearRequested.delete(handler);
                break;
            case 'getadexpandedrequested':
                this.__getAdExpandedRequested.delete(handler);
                break;
            case 'getadremainingtimerequested':
                this.__getAdRemainingTimeRequested.delete(handler);
                break;
            case 'setadvolumerequested':
                this.__setAdVolumeRequested.delete(handler);
                break;
            case 'getadvolumerequested':
                this.__getAdVolumeRequested.delete(handler);
                break;
        }
    }
}
