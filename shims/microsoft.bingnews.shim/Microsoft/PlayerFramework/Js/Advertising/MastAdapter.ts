// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:10 2021
// </auto-generated>
// --------------------------------------------------

import { IMastAdapter } from "../../../Media/Advertising/IMastAdapter";
import { EventHandler } from "winrt/Windows/Foundation/EventHandler`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.PlayerFramework.Js.Advertising.MastAdapter')
export class MastAdapter implements IMastAdapter, IStringable { 
    readonly watchedTime: number = null;
    readonly totalWatchedTime: number = null;
    readonly duration: number = null;
    readonly position: number = null;
    readonly isPlaying: boolean = null;
    readonly isPaused: boolean = null;
    readonly isStopped: boolean = null;
    readonly itemsPlayed: number = null;
    readonly fullScreen: boolean = null;
    readonly captionsActive: boolean = null;
    readonly hasVideo: boolean = null;
    readonly hasAudio: boolean = null;
    readonly hasCaptions: boolean = null;
    readonly playerWidth: number = null;
    readonly playerHeight: number = null;
    readonly contentWidth: number = null;
    readonly contentHeight: number = null;
    readonly contentBitrate: number = null;
    readonly contentTitle: string = null;
    readonly contentUrl: string = null;
    invokeEnd(): void {
        console.warn('MastAdapter#invokeEnd not implemented')
    }
    invokeError(): void {
        console.warn('MastAdapter#invokeError not implemented')
    }
    invokeFullScreenChange(): void {
        console.warn('MastAdapter#invokeFullScreenChange not implemented')
    }
    invokeItemEnd(): void {
        console.warn('MastAdapter#invokeItemEnd not implemented')
    }
    invokeItemStart(): void {
        console.warn('MastAdapter#invokeItemStart not implemented')
    }
    invokeMouseOver(): void {
        console.warn('MastAdapter#invokeMouseOver not implemented')
    }
    invokeMute(): void {
        console.warn('MastAdapter#invokeMute not implemented')
    }
    invokePause(): void {
        console.warn('MastAdapter#invokePause not implemented')
    }
    invokePlay(): void {
        console.warn('MastAdapter#invokePlay not implemented')
    }
    invokePlayerSizeChanged(): void {
        console.warn('MastAdapter#invokePlayerSizeChanged not implemented')
    }
    invokeSeek(): void {
        console.warn('MastAdapter#invokeSeek not implemented')
    }
    invokeStop(): void {
        console.warn('MastAdapter#invokeStop not implemented')
    }
    invokeVolumeChange(): void {
        console.warn('MastAdapter#invokeVolumeChange not implemented')
    }
    setCaptionsActive(value: boolean): void {
        console.warn('MastAdapter#setCaptionsActive not implemented')
    }
    setContentBitrate(value: number): void {
        console.warn('MastAdapter#setContentBitrate not implemented')
    }
    setContentHeight(value: number): void {
        console.warn('MastAdapter#setContentHeight not implemented')
    }
    setContentTitle(value: string): void {
        console.warn('MastAdapter#setContentTitle not implemented')
    }
    setContentUrl(value: string): void {
        console.warn('MastAdapter#setContentUrl not implemented')
    }
    setContentWidth(value: number): void {
        console.warn('MastAdapter#setContentWidth not implemented')
    }
    setDuration(value: number): void {
        console.warn('MastAdapter#setDuration not implemented')
    }
    setFullScreen(value: boolean): void {
        console.warn('MastAdapter#setFullScreen not implemented')
    }
    setHasAudio(value: boolean): void {
        console.warn('MastAdapter#setHasAudio not implemented')
    }
    setHasCaptions(value: boolean): void {
        console.warn('MastAdapter#setHasCaptions not implemented')
    }
    setHasVideo(value: boolean): void {
        console.warn('MastAdapter#setHasVideo not implemented')
    }
    setPlayerHeight(value: number): void {
        console.warn('MastAdapter#setPlayerHeight not implemented')
    }
    setPlayerWidth(value: number): void {
        console.warn('MastAdapter#setPlayerWidth not implemented')
    }
    setPosition(value: number): void {
        console.warn('MastAdapter#setPosition not implemented')
    }
    toString(): string {
        throw new Error('MastAdapter#toString not implemented')
    }

    private __onPlay: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononplay(handler: EventHandler<any>) {
        this.__onPlay.add(handler);
    }

    private __onStop: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononstop(handler: EventHandler<any>) {
        this.__onStop.add(handler);
    }

    private __onPause: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononpause(handler: EventHandler<any>) {
        this.__onPause.add(handler);
    }

    private __onMute: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononmute(handler: EventHandler<any>) {
        this.__onMute.add(handler);
    }

    private __onVolumeChange: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononvolumechange(handler: EventHandler<any>) {
        this.__onVolumeChange.add(handler);
    }

    private __onEnd: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononend(handler: EventHandler<any>) {
        this.__onEnd.add(handler);
    }

    private __onSeek: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononseek(handler: EventHandler<any>) {
        this.__onSeek.add(handler);
    }

    private __onItemStart: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononitemstart(handler: EventHandler<any>) {
        this.__onItemStart.add(handler);
    }

    private __onItemEnd: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononitemend(handler: EventHandler<any>) {
        this.__onItemEnd.add(handler);
    }

    private __onFullScreenChange: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononfullscreenchange(handler: EventHandler<any>) {
        this.__onFullScreenChange.add(handler);
    }

    private __onPlayerSizeChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononplayersizechanged(handler: EventHandler<any>) {
        this.__onPlayerSizeChanged.add(handler);
    }

    private __onError: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononerror(handler: EventHandler<any>) {
        this.__onError.add(handler);
    }

    private __onMouseOver: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    set ononmouseover(handler: EventHandler<any>) {
        this.__onMouseOver.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'onplay':
                this.__onPlay.add(handler);
                break;
            case 'onstop':
                this.__onStop.add(handler);
                break;
            case 'onpause':
                this.__onPause.add(handler);
                break;
            case 'onmute':
                this.__onMute.add(handler);
                break;
            case 'onvolumechange':
                this.__onVolumeChange.add(handler);
                break;
            case 'onend':
                this.__onEnd.add(handler);
                break;
            case 'onseek':
                this.__onSeek.add(handler);
                break;
            case 'onitemstart':
                this.__onItemStart.add(handler);
                break;
            case 'onitemend':
                this.__onItemEnd.add(handler);
                break;
            case 'onfullscreenchange':
                this.__onFullScreenChange.add(handler);
                break;
            case 'onplayersizechanged':
                this.__onPlayerSizeChanged.add(handler);
                break;
            case 'onerror':
                this.__onError.add(handler);
                break;
            case 'onmouseover':
                this.__onMouseOver.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'onplay':
                this.__onPlay.delete(handler);
                break;
            case 'onstop':
                this.__onStop.delete(handler);
                break;
            case 'onpause':
                this.__onPause.delete(handler);
                break;
            case 'onmute':
                this.__onMute.delete(handler);
                break;
            case 'onvolumechange':
                this.__onVolumeChange.delete(handler);
                break;
            case 'onend':
                this.__onEnd.delete(handler);
                break;
            case 'onseek':
                this.__onSeek.delete(handler);
                break;
            case 'onitemstart':
                this.__onItemStart.delete(handler);
                break;
            case 'onitemend':
                this.__onItemEnd.delete(handler);
                break;
            case 'onfullscreenchange':
                this.__onFullScreenChange.delete(handler);
                break;
            case 'onplayersizechanged':
                this.__onPlayerSizeChanged.delete(handler);
                break;
            case 'onerror':
                this.__onError.delete(handler);
                break;
            case 'onmouseover':
                this.__onMouseOver.delete(handler);
                break;
        }
    }
}
