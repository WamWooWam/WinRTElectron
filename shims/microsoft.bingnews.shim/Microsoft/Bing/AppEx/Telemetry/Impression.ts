// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:09 2021
// </auto-generated>
// --------------------------------------------------

import { ContentClear } from "./ContentClear";
import { ContentViewMechanism } from "./ContentViewMechanism";
import { ContentViewProgress } from "./ContentViewProgress";
import { ContentWorth } from "./ContentWorth";
import { ImpressionSource } from "./ImpressionSource";
import { ImpressionView } from "./ImpressionView";
import { LogLevel } from "./LogLevel";
import { IMap } from "winrt/Windows/Foundation/Collections/IMap`2";
import { IVector } from "winrt/Windows/Foundation/Collections/IVector`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.Bing.AppEx.Telemetry.Impression')
export class Impression implements IStringable { 
    readonly isWrapper: boolean = null;
    readonly id: string = null;
    readonly context: string = null;
    type: string = null;
    navMethod: string = null;
    partnerCode: string = null;
    entryPartnerCode: string = null;
    readonly views: IVector<ImpressionView> = null;
    constructor(context: string) {
        console.warn('Impression.ctor not implemented')
    }
    static parse(jsonText: string): Impression {
        // throw new Error('Impression#parse not implemented')
        return new Impression("parse");
    }
    addContentLayoutRegion(name: string, kValues: number[]): void {
        console.warn('Impression#addContentLayoutRegion not implemented')
    }
    addContent(sourceName: string, partnerCode: string, contentId: string, type: string, date: Date | null, uri: string, slug: string, isSummary: boolean, worth: ContentWorth, isAd: boolean, adCampaign: string): number {
        // throw new Error('Impression#addContent not implemented')
        return 938921;
    }
    equals(obj: any): boolean {
        throw new Error('Impression#equals not implemented')
    }
    getHashCode(): number {
        throw new Error('Impression#getHashCode not implemented')
    }
    getSource(sourceId: number): ImpressionSource {
        throw new Error('Impression#getSource not implemented')
    }
    logContentClear(level: LogLevel, reason: ContentClear): void {
        console.warn('Impression#logContentClear not implemented')
    }
    logContentClearWithAttributes(level: LogLevel, reason: ContentClear, attributes: IMap<string, string>): void {
        console.warn('Impression#logContentClearWithAttributes not implemented')
    }
    logContentClearWithJsonAttributes(level: LogLevel, reason: ContentClear, jsonAttributes: string): void {
        console.warn('Impression#logContentClearWithJsonAttributes not implemented')
    }
    logContentError(level: LogLevel, k: number, uri: string, message: string, httpCode: number, exception: string, latency: number): void {
        console.warn('Impression#logContentError not implemented')
    }
    logContentErrorWithAttributes(level: LogLevel, k: number, uri: string, message: string, httpCode: number, exception: string, latency: number, attributes: IMap<string, string>): void {
        console.warn('Impression#logContentErrorWithAttributes not implemented')
    }
    logContentErrorWithJsonAttributes(level: LogLevel, k: number, uri: string, message: string, httpCode: number, exception: string, latency: number, jsonAttributes: string): void {
        console.warn('Impression#logContentErrorWithJsonAttributes not implemented')
    }
    logContentLayoutJsonAttributes(level: LogLevel, jsonAttributes: string): void {
        console.warn('Impression#logContentLayoutJsonAttributes not implemented')
    }
    logContentLayout(level: LogLevel): void {
        console.warn('Impression#logContentLayout not implemented')
    }
    logContentLayoutWithAttributes(level: LogLevel, attributes: IMap<string, string>): void {
        console.warn('Impression#logContentLayoutWithAttributes not implemented')
    }
    logContent(level: LogLevel): void {
        console.warn('Impression#logContent not implemented')
    }
    logContentShare(level: LogLevel, target: string, uri: string, k: number): void {
        console.warn('Impression#logContentShare not implemented')
    }
    logContentShareWithAttributes(level: LogLevel, target: string, uri: string, k: number, attributes: IMap<string, string>): void {
        console.warn('Impression#logContentShareWithAttributes not implemented')
    }
    logContentShareWithJsonAttributes(level: LogLevel, target: string, uri: string, k: number, jsonAttributes: string): void {
        console.warn('Impression#logContentShareWithJsonAttributes not implemented')
    }
    logContentView(level: LogLevel, k: number, viewMechanism: ContentViewMechanism, logOnlyIfNotViewed: boolean, progress: ContentViewProgress): void {
        console.warn('Impression#logContentView2 not implemented')
    }
    logContentViewWithAttributes1(level: LogLevel, k: number, viewMechanism: ContentViewMechanism, progress: ContentViewProgress, attributes: IMap<string, string>): void {
        console.warn('Impression#logContentViewWithAttributes1 not implemented')
    }
    logContentViewWithAttributes2(level: LogLevel, k: number, viewMechanism: ContentViewMechanism, logOnlyIfNotViewed: boolean, progress: ContentViewProgress, attributes: IMap<string, string>): void {
        console.warn('Impression#logContentViewWithAttributes2 not implemented')
    }
    logContentViewWithJsonAttributes1(level: LogLevel, k: number, viewMechanism: ContentViewMechanism, progress: ContentViewProgress, jsonAttributes: string): void {
        console.warn('Impression#logContentViewWithJsonAttributes1 not implemented')
    }
    logContentViewWithJsonAttributes2(level: LogLevel, k: number, viewMechanism: ContentViewMechanism, logOnlyIfNotViewed: boolean, progress: ContentViewProgress, jsonAttributes: string): void {
        console.warn('Impression#logContentViewWithJsonAttributes2 not implemented')
    }
    logContentWithAttributes(level: LogLevel, attributes: IMap<string, string>): void {
        console.warn('Impression#logContentWithAttributes not implemented')
    }
    logContentWithJsonAttributes(level: LogLevel, jsonAttributes: string): void {
        console.warn('Impression#logContentWithJsonAttributes not implemented')
    }
    toString(): string {
        throw new Error('Impression#toString not implemented')
    }
}
