// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:08 2021
// </auto-generated>
// --------------------------------------------------

import { IAppActionFlightEvent } from "./IAppActionFlightEvent";
import { ICodeErrorFlightEvent } from "./ICodeErrorFlightEvent";
import { IContentErrorFlightEvent } from "./IContentErrorFlightEvent";
import { IContentFlightEvent } from "./IContentFlightEvent";
import { IContentLayoutFlightEvent } from "./IContentLayoutFlightEvent";
import { IContentViewFlightEvent } from "./IContentViewFlightEvent";
import { ICrashFlightEvent } from "./ICrashFlightEvent";
import { ICustomFlightEvent } from "./ICustomFlightEvent";
import { IDataPointFlightEvent } from "./IDataPointFlightEvent";
import { IDisplayChangeFlightEvent } from "./IDisplayChangeFlightEvent";
import { IFlightEvent } from "./IFlightEvent";
import { IImpressionFlightEvent } from "./IImpressionFlightEvent";
import { INetworkFlightEvent } from "./INetworkFlightEvent";
import { IPaywallFlightEvent } from "./IPaywallFlightEvent";
import { IPerfFlightEvent } from "./IPerfFlightEvent";
import { IPreferencesFlightEvent } from "./IPreferencesFlightEvent";
import { ISearchFlightEvent } from "./ISearchFlightEvent";
import { ISessionFlightEvent } from "./ISessionFlightEvent";
import { IShareFlightEvent } from "./IShareFlightEvent";
import { ISysInfoFlightEvent } from "./ISysInfoFlightEvent";
import { ITimerFlightEvent } from "./ITimerFlightEvent";
import { ITraceFlightEvent } from "./ITraceFlightEvent";
import { IUserActionFlightEvent } from "./IUserActionFlightEvent";
type JsonItem = any
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.Bing.AppEx.Telemetry.FlightRecorderTestHelper')
export class FlightRecorderTestHelper implements IStringable { 
    static readonly jsonEpoch: Date = null;
    static readonly hundredYears: number = null;
    static createAppActionEvent(): IAppActionFlightEvent {
        throw new Error('FlightRecorderTestHelper#createAppActionEvent not implemented')
    }
    static createCodeErrorEvent(): ICodeErrorFlightEvent {
        throw new Error('FlightRecorderTestHelper#createCodeErrorEvent not implemented')
    }
    static createContentErrorEvent(): IContentErrorFlightEvent {
        throw new Error('FlightRecorderTestHelper#createContentErrorEvent not implemented')
    }
    static createContentEvent(): IContentFlightEvent {
        throw new Error('FlightRecorderTestHelper#createContentEvent not implemented')
    }
    static createContentLayoutEvent(): IContentLayoutFlightEvent {
        throw new Error('FlightRecorderTestHelper#createContentLayoutEvent not implemented')
    }
    static createContentViewEvent(): IContentViewFlightEvent {
        throw new Error('FlightRecorderTestHelper#createContentViewEvent not implemented')
    }
    static createCrashEvent(): ICrashFlightEvent {
        throw new Error('FlightRecorderTestHelper#createCrashEvent not implemented')
    }
    static createCustomEvent(type: string, jsonText: string): ICustomFlightEvent {
        throw new Error('FlightRecorderTestHelper#createCustomEvent not implemented')
    }
    static createDataPointEvent(): IDataPointFlightEvent {
        throw new Error('FlightRecorderTestHelper#createDataPointEvent not implemented')
    }
    static createDisplayChangeEvent(): IDisplayChangeFlightEvent {
        throw new Error('FlightRecorderTestHelper#createDisplayChangeEvent not implemented')
    }
    static createFlightEvent(type: string): IFlightEvent {
        throw new Error('FlightRecorderTestHelper#createFlightEvent not implemented')
    }
    static createImpressionEvent(): IImpressionFlightEvent {
        throw new Error('FlightRecorderTestHelper#createImpressionEvent not implemented')
    }
    static createNetworkEvent(): INetworkFlightEvent {
        throw new Error('FlightRecorderTestHelper#createNetworkEvent not implemented')
    }
    static createPaywallEvent(): IPaywallFlightEvent {
        throw new Error('FlightRecorderTestHelper#createPaywallEvent not implemented')
    }
    static createPerfEvent(): IPerfFlightEvent {
        throw new Error('FlightRecorderTestHelper#createPerfEvent not implemented')
    }
    static createPreferencesEvent(): IPreferencesFlightEvent {
        throw new Error('FlightRecorderTestHelper#createPreferencesEvent not implemented')
    }
    static createSearchEvent(): ISearchFlightEvent {
        throw new Error('FlightRecorderTestHelper#createSearchEvent not implemented')
    }
    static createSessionEvent(): ISessionFlightEvent {
        throw new Error('FlightRecorderTestHelper#createSessionEvent not implemented')
    }
    static createShareEvent(): IShareFlightEvent {
        throw new Error('FlightRecorderTestHelper#createShareEvent not implemented')
    }
    static createSysInfoEvent(): ISysInfoFlightEvent {
        throw new Error('FlightRecorderTestHelper#createSysInfoEvent not implemented')
    }
    static createTimerEvent(): ITimerFlightEvent {
        throw new Error('FlightRecorderTestHelper#createTimerEvent not implemented')
    }
    static createTraceEvent(): ITraceFlightEvent {
        throw new Error('FlightRecorderTestHelper#createTraceEvent not implemented')
    }
    static createUserActionEvent(): IUserActionFlightEvent {
        throw new Error('FlightRecorderTestHelper#createUserActionEvent not implemented')
    }
    static fromJsonEpoch(jsonTime: number, timezone: number): Date {
        throw new Error('FlightRecorderTestHelper#fromJsonEpoch not implemented')
    }
    static parseEvent(json: JsonItem): IFlightEvent {
        throw new Error('FlightRecorderTestHelper#parseEvent not implemented')
    }
    static toJsonEpoch(time: Date): number {
        throw new Error('FlightRecorderTestHelper#toJsonEpoch not implemented')
    }
    toString(): string {
        throw new Error('FlightRecorderTestHelper#toString not implemented')
    }
}
