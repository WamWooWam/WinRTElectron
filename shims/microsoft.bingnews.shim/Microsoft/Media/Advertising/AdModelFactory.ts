// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:09 2021
// </auto-generated>
// --------------------------------------------------

import { Ad } from "./Ad";
import { AdDocumentPayload } from "./AdDocumentPayload";
import { AdPod } from "./AdPod";
import { AdSystem } from "./AdSystem";
import { Companion } from "./Companion";
import { CreativeCompanions } from "./CreativeCompanions";
import { CreativeLinear } from "./CreativeLinear";
import { CreativeNonLinears } from "./CreativeNonLinears";
import { Extension } from "./Extension";
import { HtmlResource } from "./HtmlResource";
import { IFrameResource } from "./IFrameResource";
import { Icon } from "./Icon";
import { MediaFile } from "./MediaFile";
import { NonLinear } from "./NonLinear";
import { Pricing } from "./Pricing";
import { StaticResource } from "./StaticResource";
import { TrackingEvent } from "./TrackingEvent";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { Uri } from "winrt/Windows/Foundation/Uri";
import { IInputStream } from "winrt/Windows/Storage/Streams/IInputStream";

@GenerateShim('Microsoft.Media.Advertising.AdModelFactory')
export class AdModelFactory implements IStringable { 
    static fallbackAdPod: AdPod = null;
    static createAd(): Ad {
        throw new Error('AdModelFactory#createAd not implemented')
    }
    static createAdDocumentPayload(): AdDocumentPayload {
        throw new Error('AdModelFactory#createAdDocumentPayload not implemented')
    }
    static createAdPod(): AdPod {
        throw new Error('AdModelFactory#createAdPod not implemented')
    }
    static createAdSystem(): AdSystem {
        throw new Error('AdModelFactory#createAdSystem not implemented')
    }
    static createCompanion(): Companion {
        throw new Error('AdModelFactory#createCompanion not implemented')
    }
    static createCreativeCompanions(): CreativeCompanions {
        throw new Error('AdModelFactory#createCreativeCompanions not implemented')
    }
    static createCreativeLinear(): CreativeLinear {
        throw new Error('AdModelFactory#createCreativeLinear not implemented')
    }
    static createCreativeNonLinears(): CreativeNonLinears {
        throw new Error('AdModelFactory#createCreativeNonLinears not implemented')
    }
    static createExtension(): Extension {
        throw new Error('AdModelFactory#createExtension not implemented')
    }
    static createFromVast(stream: IInputStream, maxRedirectDepth: number | null, allowMultipleAds: boolean): IAsyncOperation<AdDocumentPayload> {
        return AsyncOperation.from(async () => { throw new Error('AdModelFactory#createFromVast not implemented') });
    }
    static createHtmlResource(): HtmlResource {
        throw new Error('AdModelFactory#createHtmlResource not implemented')
    }
    static createIcon(): Icon {
        throw new Error('AdModelFactory#createIcon not implemented')
    }
    static createIFrameResource(): IFrameResource {
        throw new Error('AdModelFactory#createIFrameResource not implemented')
    }
    static createMediaFile(): MediaFile {
        throw new Error('AdModelFactory#createMediaFile not implemented')
    }
    static createNonLinear(): NonLinear {
        throw new Error('AdModelFactory#createNonLinear not implemented')
    }
    static createPricing(): Pricing {
        throw new Error('AdModelFactory#createPricing not implemented')
    }
    static createStaticResource(): StaticResource {
        throw new Error('AdModelFactory#createStaticResource not implemented')
    }
    static createTrackingEvent(): TrackingEvent {
        throw new Error('AdModelFactory#createTrackingEvent not implemented')
    }
    static getTrackingEvent(eventName: string, url: string): TrackingEvent {
        throw new Error('AdModelFactory#getTrackingEvent not implemented')
    }
    static loadSource(source: Uri, maxRedirectDepth: number | null, allowMultipleAds: boolean): IAsyncOperation<AdDocumentPayload> {
        return AsyncOperation.from(async () => { throw new Error('AdModelFactory#loadSource not implemented') });
    }
    toString(): string {
        throw new Error('AdModelFactory#toString not implemented')
    }
}
