// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:10 2021
// </auto-generated>
// --------------------------------------------------

import { AdDocumentPayload } from "./AdDocumentPayload";
import { CreativeCompanions } from "./CreativeCompanions";
import { FWAd } from "./FWAd";
import { FWAdReference } from "./FWAdReference";
import { FWAdResponse } from "./FWAdResponse";
import { FWTemporalAdSlot } from "./FWTemporalAdSlot";
import { ICompanionSource } from "./ICompanionSource";
import { IIterable } from "winrt/Windows/Foundation/Collections/IIterable`1";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { Uri } from "winrt/Windows/Foundation/Uri";
import { IInputStream } from "winrt/Windows/Storage/Streams/IInputStream";

@GenerateShim('Microsoft.Media.Advertising.FreeWheelFactory')
export class FreeWheelFactory implements IStringable { 
    static createCompanionAds(source: FWAd, reference: FWAdReference): CreativeCompanions {
        throw new Error('FreeWheelFactory#createCompanionAds not implemented')
    }
    static createFromSmartXml(stream: IInputStream): FWAdResponse {
        throw new Error('FreeWheelFactory#createFromSmartXml not implemented')
    }
    static getAdDocumentPayload(adSlot: FWTemporalAdSlot, adResponse: FWAdResponse): IAsyncOperation<AdDocumentPayload> {
        return AsyncOperation.from(async () => { throw new Error('FreeWheelFactory#getAdDocumentPayload not implemented') });
    }
    static getNonTemporalCompanions(adResponse: FWAdResponse): IIterable<ICompanionSource> {
        throw new Error('FreeWheelFactory#getNonTemporalCompanions not implemented')
    }
    static getSupportedMetrics(): number {
        throw new Error('FreeWheelFactory#getSupportedMetrics not implemented')
    }
    static loadSource(source: Uri): IAsyncOperation<FWAdResponse> {
        return AsyncOperation.from(async () => { throw new Error('FreeWheelFactory#loadSource not implemented') });
    }
    toString(): string {
        throw new Error('FreeWheelFactory#toString not implemented')
    }
}
