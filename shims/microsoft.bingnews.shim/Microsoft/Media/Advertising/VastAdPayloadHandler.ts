// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:10 2021
// </auto-generated>
// --------------------------------------------------

import { ActivateAdUnitEventArgs } from "./ActivateAdUnitEventArgs";
import { AdFailureEventArgs } from "./AdFailureEventArgs";
import { AdStatus } from "./AdStatus";
import { AdTrackingEventEventArgs } from "./AdTrackingEventEventArgs";
import { DeactivateAdUnitEventArgs } from "./DeactivateAdUnitEventArgs";
import { IAdPayloadHandler } from "./IAdPayloadHandler";
import { IAdSource } from "./IAdSource";
import { IPlayer } from "./IPlayer";
import { LoadPlayerEventArgs } from "./LoadPlayerEventArgs";
import { UnloadPlayerEventArgs } from "./UnloadPlayerEventArgs";
import { EventHandler } from "winrt/Windows/Foundation/EventHandler`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IAsyncActionWithProgress } from "winrt/Windows/Foundation/IAsyncActionWithProgress`1";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { AsyncActionWithProgress } from "winrt/Windows/Foundation/Interop/AsyncActionWithProgress`1";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.Media.Advertising.VastAdPayloadHandler')
export class VastAdPayloadHandler implements IAdPayloadHandler, IStringable { 
    static readonly adType: string = null;
    readonly supportedTypes: string[] = null;
    player: IPlayer = null;
    preloadAdAsync(adSource: IAdSource): IAsyncAction {
        return AsyncAction.from(async () => console.warn('VastAdPayloadHandler#preloadAdAsync not implemented'));
    }
    playAdAsync(adSource: IAdSource, startTimeout: number | null): IAsyncActionWithProgress<AdStatus> {
        return AsyncActionWithProgress.from(async () => console.warn('VastAdPayloadHandler#playAdAsync not implemented'));
    }
    cancelAd(force: boolean): IAsyncOperation<boolean> {
        return AsyncOperation.from(async () => { throw new Error('VastAdPayloadHandler#cancelAd not implemented') });
    }
    toString(): string {
        throw new Error('VastAdPayloadHandler#toString not implemented')
    }

    private __loadPlayer: Set<EventHandler<LoadPlayerEventArgs>> = new Set();
    @Enumerable(true)
    set onloadplayer(handler: EventHandler<LoadPlayerEventArgs>) {
        this.__loadPlayer.add(handler);
    }

    private __unloadPlayer: Set<EventHandler<UnloadPlayerEventArgs>> = new Set();
    @Enumerable(true)
    set onunloadplayer(handler: EventHandler<UnloadPlayerEventArgs>) {
        this.__unloadPlayer.add(handler);
    }

    private __activateAdUnit: Set<EventHandler<ActivateAdUnitEventArgs>> = new Set();
    @Enumerable(true)
    set onactivateadunit(handler: EventHandler<ActivateAdUnitEventArgs>) {
        this.__activateAdUnit.add(handler);
    }

    private __deactivateAdUnit: Set<EventHandler<DeactivateAdUnitEventArgs>> = new Set();
    @Enumerable(true)
    set ondeactivateadunit(handler: EventHandler<DeactivateAdUnitEventArgs>) {
        this.__deactivateAdUnit.add(handler);
    }

    private __adFailure: Set<EventHandler<AdFailureEventArgs>> = new Set();
    @Enumerable(true)
    set onadfailure(handler: EventHandler<AdFailureEventArgs>) {
        this.__adFailure.add(handler);
    }

    private __adTrackingEventOccurred: Set<EventHandler<AdTrackingEventEventArgs>> = new Set();
    @Enumerable(true)
    set onadtrackingeventoccurred(handler: EventHandler<AdTrackingEventEventArgs>) {
        this.__adTrackingEventOccurred.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'loadplayer':
                this.__loadPlayer.add(handler);
                break;
            case 'unloadplayer':
                this.__unloadPlayer.add(handler);
                break;
            case 'activateadunit':
                this.__activateAdUnit.add(handler);
                break;
            case 'deactivateadunit':
                this.__deactivateAdUnit.add(handler);
                break;
            case 'adfailure':
                this.__adFailure.add(handler);
                break;
            case 'adtrackingeventoccurred':
                this.__adTrackingEventOccurred.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'loadplayer':
                this.__loadPlayer.delete(handler);
                break;
            case 'unloadplayer':
                this.__unloadPlayer.delete(handler);
                break;
            case 'activateadunit':
                this.__activateAdUnit.delete(handler);
                break;
            case 'deactivateadunit':
                this.__deactivateAdUnit.delete(handler);
                break;
            case 'adfailure':
                this.__adFailure.delete(handler);
                break;
            case 'adtrackingeventoccurred':
                this.__adTrackingEventOccurred.delete(handler);
                break;
        }
    }
}
