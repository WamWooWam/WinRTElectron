// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:12 2021
// </auto-generated>
// --------------------------------------------------

import { SqlResults } from "../SqlResults";
import { IVector } from "winrt/Windows/Foundation/Collections/IVector`1";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('SqliteWrapper.Travel.TravelConnection')
export class TravelConnection implements IClosable { 
    static open1(dbPath: string, readOnly: boolean): TravelConnection {
        throw new Error('TravelConnection#open1 not implemented')
    }
    static open2(dbPath: string): TravelConnection {
        throw new Error('TravelConnection#open2 not implemented')
    }
    executeAsync1(query: string, hintExpectedNumberOfRows: number, useCache: boolean, parameters: IVector<any>, getColumnNames: boolean): IAsyncOperation<SqlResults> {
        return AsyncOperation.from(async () => { throw new Error('TravelConnection#executeAsync1 not implemented') });
    }
    executeAsync2(query: string, hintExpectedNumberOfRows: number, useCache: boolean, parameters: IVector<any>): IAsyncOperation<SqlResults> {
        return AsyncOperation.from(async () => { throw new Error('TravelConnection#executeAsync2 not implemented') });
    }
    executeAsync3(query: string, hintExpectedNumberOfRows: number): IAsyncOperation<SqlResults> {
        return AsyncOperation.from(async () => { throw new Error('TravelConnection#executeAsync3 not implemented') });
    }
    executeAsync4(query: string): IAsyncOperation<SqlResults> {
        return AsyncOperation.from(async () => { throw new Error('TravelConnection#executeAsync4 not implemented') });
    }
    execute(query: string, hintExpectedNumberOfRows: number, useCache: boolean, parameters: IVector<any>, getColumnNames: boolean): SqlResults {
        throw new Error('TravelConnection#execute not implemented')
    }
    deleteCachedStatement(query: string): void {
        console.warn('TravelConnection#deleteCachedStatement not implemented')
    }
    close(): void {
        console.warn('TravelConnection#close not implemented')
    }
}
