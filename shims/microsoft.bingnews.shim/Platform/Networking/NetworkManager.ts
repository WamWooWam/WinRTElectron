// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:11 2021
// </auto-generated>
// --------------------------------------------------

import { NetworkCostSuggestion } from "./NetworkCostSuggestion";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { NetworkConnectivityLevel } from "winrt/Windows/Networking/Connectivity/NetworkConnectivityLevel";
import { NetworkCostType } from "winrt/Windows/Networking/Connectivity/NetworkCostType";
import { NetworkStatusChangedEventHandler } from "winrt/Windows/Networking/Connectivity/NetworkStatusChangedEventHandler";

@GenerateShim('Platform.Networking.NetworkManager')
export class NetworkManager implements IStringable { 
    static readonly instance: NetworkManager = new NetworkManager();
    readonly lastUpdateSuccessful: boolean = null;
    readonly isNetworkAvailable: boolean = true;
    readonly networkConnectivityLevel: NetworkConnectivityLevel = NetworkConnectivityLevel.internetAccess;
    readonly networkCostSuggestion: NetworkCostSuggestion = NetworkCostSuggestion.none;
    readonly networkCostType: NetworkCostType = NetworkCostType.unrestricted;
    readonly ianaInterfaceType: number = null;
    readonly isApproachingDataLimit: boolean = false;
    readonly isOverDataLimit: boolean = false;
    readonly isRoaming: boolean = false;
    readonly maxTransferSizeInMegabytes: number = null;
    readonly carrier: string = "3";
    updateNetworkStatus(): void {
        console.warn('NetworkManager#updateNetworkStatus not implemented')
    }
    toString(): string {
        throw new Error('NetworkManager#toString not implemented')
    }

    private static __networkStatusChanged: Set<NetworkStatusChangedEventHandler> = new Set();
    @Enumerable(true)
    static set onnetworkstatuschanged(handler: NetworkStatusChangedEventHandler) {
        NetworkManager.__networkStatusChanged.add(handler);
    }

    static addEventListener(name: string, handler: any) {
        switch (name) {
            case 'networkstatuschanged':
                NetworkManager.__networkStatusChanged.add(handler);
                break;
        }
    }

    static removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'networkstatuschanged':
                NetworkManager.__networkStatusChanged.delete(handler);
                break;
        }
    }
}
