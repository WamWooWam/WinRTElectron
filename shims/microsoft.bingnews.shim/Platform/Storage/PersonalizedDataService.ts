// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:11 2021
// </auto-generated>
// --------------------------------------------------

import { ApplyUpdate } from "./ApplyUpdate";
import { IPersonalDataService } from "./IPersonalDataService";
import { IPersonalizedConflictResolver } from "./IPersonalizedConflictResolver";
import { IPersonalizedData } from "./IPersonalizedData";
import { IPersonalizedDataFactory } from "./IPersonalizedDataFactory";
import { ResolveConflictDelegate } from "./ResolveConflictDelegate";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IAsyncOperationWithProgress } from "winrt/Windows/Foundation/IAsyncOperationWithProgress`2";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { AsyncOperationWithProgress } from "winrt/Windows/Foundation/Interop/AsyncOperationWithProgress`2";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Platform.Storage.PersonalizedDataService')
export class PersonalizedDataService implements IPersonalDataService, IStringable {
    static readonly isPdpEnabledInConfig: boolean = null;
    static isPersonalDataPlatformEnabled: boolean = null;
    static forceConnectionUI: boolean = null;
    // constructor(domain: string, factory: IPersonalizedDataFactory);
    // constructor(domain: string, factory: IPersonalizedDataFactory, conflictResolver: IPersonalizedConflictResolver);
    constructor(...args) { }
    static isConnectedAsync(): IAsyncOperation<boolean> {
        return AsyncOperation.from(async () => {
            return false;
        });
    }
    readAsync1(): IAsyncOperationWithProgress<IPersonalizedData, IPersonalizedData> {
        return AsyncOperationWithProgress.from(async () => { throw new Error('PersonalizedDataService#readAsync1 not implemented') });
    }
    readAsync2(bypassCache: boolean): IAsyncOperationWithProgress<IPersonalizedData, IPersonalizedData> {
        return AsyncOperationWithProgress.from(async () => { throw new Error('PersonalizedDataService#readAsync2 not implemented') });
    }
    scheduleUpdate(updateDelegate: ApplyUpdate, customParams: any[]): void {
        console.warn('PersonalizedDataService#scheduleUpdate not implemented')
    }
    updateAsync(updateDelegate: ApplyUpdate, customParams: any[]): IAsyncAction {
        return AsyncAction.from(async () => console.warn('PersonalizedDataService#updateAsync not implemented'));
    }
    deleteCachedDataAsync(): IAsyncAction {
        return AsyncAction.from(async () => console.warn('PersonalizedDataService#deleteCachedDataAsync not implemented'));
    }
    deleteServerDataAsync(): IAsyncOperation<boolean> {
        return AsyncOperation.from(async () => { throw new Error('PersonalizedDataService#deleteServerDataAsync not implemented') });
    }
    isPersonalizationEnabledAsync(): IAsyncOperation<boolean> {
        return AsyncOperation.from(async () => { throw new Error('PersonalizedDataService#isPersonalizationEnabledAsync not implemented') });
    }
    setPersonalizationEnabled(isEnabled: boolean): IAsyncAction {
        return AsyncAction.from(async () => console.warn('PersonalizedDataService#setPersonalizationEnabled not implemented'));
    }
    toString(): string {
        throw new Error('PersonalizedDataService#toString not implemented')
    }

    private static __resolveConflicts: Set<ResolveConflictDelegate> = new Set();
    @Enumerable(true)
    static set onresolveconflicts(handler: ResolveConflictDelegate) {
        PersonalizedDataService.__resolveConflicts.add(handler);
    }

    static addEventListener(name: string, handler: any) {
        switch (name) {
            case 'resolveconflicts':
                PersonalizedDataService.__resolveConflicts.add(handler);
                break;
        }
    }

    static removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'resolveconflicts':
                PersonalizedDataService.__resolveConflicts.delete(handler);
                break;
        }
    }
}
