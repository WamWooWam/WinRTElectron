// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:11 2021
// </auto-generated>
// --------------------------------------------------

import { NotificationChangedDelegate } from "./NotificationChangedDelegate";
import { IVector } from "winrt/Windows/Foundation/Collections/IVector`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Platform.Notifications')
export class Notifications implements IStringable { 
    static readonly instance: Notifications = null;
    addTagsAsync(tags: IVector<string>): IAsyncAction {
        return AsyncAction.from(async () => console.warn('Notifications#addTagsAsync not implemented'));
    }
    deleteTagsAsync(tags: IVector<string>): IAsyncAction {
        return AsyncAction.from(async () => console.warn('Notifications#deleteTagsAsync not implemented'));
    }
    getTagsAsync(): IAsyncOperation<IVector<string>> {
        return AsyncOperation.from(async () => { throw new Error('Notifications#getTagsAsync not implemented') });
    }
    toString(): string {
        throw new Error('Notifications#toString not implemented')
    }

    private __notificationReceived: Set<NotificationChangedDelegate> = new Set();
    @Enumerable(true)
    set onnotificationreceived(handler: NotificationChangedDelegate) {
        this.__notificationReceived.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'notificationreceived':
                this.__notificationReceived.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'notificationreceived':
                this.__notificationReceived.delete(handler);
                break;
        }
    }
}
