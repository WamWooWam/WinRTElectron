// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:11 2021
// </auto-generated>
// --------------------------------------------------

import { PrefetchQueryServiceOptions } from "./DataServices/PrefetchQueryServiceOptions";
import { QueryServiceOptions } from "./DataServices/QueryServiceOptions";
import { QueryServiceProgress } from "./DataServices/QueryServiceProgress";
import { QueryServiceFailureHandler } from "./QueryServiceFailureHandler";
import { QueryServiceSuccessHandler } from "./QueryServiceSuccessHandler";
import { ResponseData } from "./ResponseData";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IAsyncOperationWithProgress } from "winrt/Windows/Foundation/IAsyncOperationWithProgress`2";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { AsyncOperationWithProgress } from "winrt/Windows/Foundation/Interop/AsyncOperationWithProgress`2";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { FileSavePickerActivatedEventArgs } from "winrt/Windows/ApplicationModel/Activation/FileSavePickerActivatedEventArgs";

@GenerateShim('Platform.ImageService')
export class ImageService implements IStringable {
    constructor(cacheId: string) {
        console.warn('ImageService.ctor not implemented')
    }
    static hasImageEntryAsync(uri: string, cacheIdentifier: string): IAsyncOperation<boolean> {
        return AsyncOperation.from(async () => { return false; });
    }
    cacheEntryUpdateAsync(uri: string, doNotPurge: boolean): IAsyncOperation<boolean> {
        return AsyncOperation.from(async () => {
            return false;
        });
    }
    cancelPrefetch1(): void {
        console.warn('ImageService#cancelPrefetch1 not implemented')
    }
    cancelPrefetch2(token: string): void {
        console.warn('ImageService#cancelPrefetch2 not implemented')
    }
    deleteCacheEntryAsync(uri: string): IAsyncAction {
        return AsyncAction.from(async () => console.warn('ImageService#deleteCacheEntryAsync not implemented'));
    }
    downloadImageAsync1(uri: string, options: QueryServiceOptions): IAsyncOperationWithProgress<ResponseData, QueryServiceProgress> {
        return AsyncOperationWithProgress.from(async () => { throw new Error('ImageService#downloadImageAsync1 not implemented') });
    }
    downloadImageAsync2(uri: string, options: QueryServiceOptions, retrieveLocalUrl: boolean): IAsyncOperationWithProgress<ResponseData, QueryServiceProgress> {
        return AsyncOperationWithProgress.from(async () => { throw new Error('ImageService#downloadImageAsync2 not implemented') });
    }
    fetchImageAsync(uri: string): IAsyncOperationWithProgress<ResponseData, QueryServiceProgress> {
        return AsyncOperationWithProgress.from(async () => {
            // throw new Error('ImageService#fetchImageAsync not implemented')

            let resp = await fetch(uri);
            let responseData = new ResponseData();
            responseData.isImage = true;
            responseData.dataString = URL.createObjectURL(await resp.blob());
            return responseData
        });
    }
    getCacheId(): string {
        throw new Error('ImageService#getCacheId not implemented')
    }
    hasEntryAsync(uri: string): IAsyncOperation<boolean> {
        return AsyncOperation.from(async () => { throw new Error('ImageService#hasEntryAsync not implemented') });
    }
    isEntryExpiredAsync(uri: string): IAsyncOperation<boolean> {
        return AsyncOperation.from(async () => { throw new Error('ImageService#isEntryExpiredAsync not implemented') });
    }
    prefetchImage1(uri: string, options: PrefetchQueryServiceOptions): void {
        console.warn('ImageService#prefetchImage1 not implemented')
    }
    prefetchImage2(uri: string, options: PrefetchQueryServiceOptions, successCallback: QueryServiceSuccessHandler, failureCallback: QueryServiceFailureHandler): void {
        console.warn('ImageService#prefetchImage2 not implemented')
    }
    toString(): string {
        throw new Error('ImageService#toString not implemented')
    }
}
