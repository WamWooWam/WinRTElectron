// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:11 2021
// </auto-generated>
// --------------------------------------------------

import { ArticleAccessibility } from "./ArticleAccessibility";
import { LoginStatus } from "./LoginStatus";
import { LoginStatusChangeHandler } from "./LoginStatusChangeHandler";
import { MeterStatus } from "./MeterStatus";
import { MeterStatusChangeHandler } from "./MeterStatusChangeHandler";
import { PaywallResponse } from "./PaywallResponse";
import { IMap } from "winrt/Windows/Foundation/Collections/IMap`2";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Platform.Paywall.PaywallProvider')
export class PaywallProvider implements IStringable { 
    readonly paywallType: string = null;
    readonly paywallSettings: IMap<string, any> = null;
    readonly currentLoginStatus: LoginStatus = null;
    readonly currentMeterStatus: MeterStatus = null;
    readonly authToken: string = null;
    accessItem(itemId: string, isPaidArticle: boolean): void {
        console.warn('PaywallProvider#accessItem not implemented')
    }
    checkArticleAccessibility(itemId: string, isPaidArticle: boolean): ArticleAccessibility {
        throw new Error('PaywallProvider#checkArticleAccessibility not implemented')
    }
    isAccessAllowed(itemId: string, isPaidArticle: boolean): boolean {
        throw new Error('PaywallProvider#isAccessAllowed not implemented')
    }
    loginAsync(name: string, password: string, data: string): IAsyncOperation<PaywallResponse> {
        return AsyncOperation.from(async () => { throw new Error('PaywallProvider#loginAsync not implemented') });
    }
    logoutAsync(): IAsyncOperation<PaywallResponse> {
        return AsyncOperation.from(async () => { throw new Error('PaywallProvider#logoutAsync not implemented') });
    }
    toString(): string {
        throw new Error('PaywallProvider#toString not implemented')
    }

    private __loginStatusChange: Set<LoginStatusChangeHandler> = new Set();
    @Enumerable(true)
    set onloginstatuschange(handler: LoginStatusChangeHandler) {
        this.__loginStatusChange.add(handler);
    }

    private __meterStatusChange: Set<MeterStatusChangeHandler> = new Set();
    @Enumerable(true)
    set onmeterstatuschange(handler: MeterStatusChangeHandler) {
        this.__meterStatusChange.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'loginstatuschange':
                this.__loginStatusChange.add(handler);
                break;
            case 'meterstatuschange':
                this.__meterStatusChange.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'loginstatuschange':
                this.__loginStatusChange.delete(handler);
                break;
            case 'meterstatuschange':
                this.__meterStatusChange.delete(handler);
                break;
        }
    }
}
