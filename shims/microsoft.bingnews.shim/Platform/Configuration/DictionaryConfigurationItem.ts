// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:11 2021
// </auto-generated>
// --------------------------------------------------

import { ListConfigurationItem } from "./ListConfigurationItem";
import { IIterable } from "winrt/Windows/Foundation/Collections/IIterable`1";
import { IIterator } from "winrt/Windows/Foundation/Collections/IIterator`1";
import { IKeyValuePair } from "winrt/Windows/Foundation/Collections/IKeyValuePair`2";
import { IMapView } from "winrt/Windows/Foundation/Collections/IMapView`2";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { Dictionary } from "winrt/Windows/Foundation/Interop/Dictionary`2";
import * as BetterSqlite3 from "better-sqlite3";
import { ConfigurationManager } from "./ConfigurationManager";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
type IBindableIterable = any
type IBindableIterator = any

export class DictionaryConfigurationItem extends Dictionary<string, any> {
    static readonly empty: DictionaryConfigurationItem = new DictionaryConfigurationItem(-1);

    @Enumerable(true)
    get value(): IMapView<string, any> {
        return this;
    }

    private __sqliteId: number;
    private __dictionary: Dictionary<string, any>;
    constructor(sqliteId: number = -1) {
        super();
        this.__sqliteId = sqliteId;

        if (sqliteId != -1) {
            const manager = ConfigurationManager.instance;
            let items = manager.getCollectionChildItems(sqliteId);
            for (const item of items) {
                let configItem = manager.createConfigurationItem(item);
                if (configItem && item.name) {
                    this.insert(item.name, configItem);
                }
            }
        }
    }

    getBool(name: string, defaultValue: boolean = false): boolean {
        return this.hasKey(name) ? this.lookup(name).value : defaultValue;
    }
    getDictionary(name: string, defaultValue: DictionaryConfigurationItem = null): DictionaryConfigurationItem {
        return this.hasKey(name) ? this.lookup(name).value : defaultValue;
    }
    getInt32(name: string, defaultValue: number = 0): number {
        return this.hasKey(name) ? this.lookup(name).value : defaultValue;
    }
    getList(name: string, defaultValue: ListConfigurationItem = null): ListConfigurationItem {
        return this.hasKey(name) ? this.lookup(name).value : defaultValue;
    }
    getString(name: string, defaultValue: string = ""): string {
        return this.hasKey(name) ? this.lookup(name).value : defaultValue;
    }
    hasItem(name: string): boolean {
        return this.hasKey(name);
    }
    toString(): string {
        throw new Error('DictionaryConfigurationItem#toString not implemented')
    }
}
