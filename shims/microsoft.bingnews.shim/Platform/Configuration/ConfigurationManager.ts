// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:11 2021
// </auto-generated>
// --------------------------------------------------

import { DictionaryConfigurationItem } from "./DictionaryConfigurationItem";
import { AppManifest } from "./Manifest/AppManifest";
import { PhysicalMarketInfoUpdaterDelegate } from "./PhysicalMarketInfoUpdaterDelegate";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { Package } from "winrt/Windows/ApplicationModel/Package";

import * as BetterSqlite3 from "better-sqlite3";
import * as path from "path";
import { Int32ConfigurationItem } from "./Int32ConfigurationItem";
import { StringConfigurationItem } from "./StringConfigurationItem";
import { BooleanConfigurationItem } from "./BooleanConfigurationItem";
import { ListConfigurationItem } from "./ListConfigurationItem";
import { Marketization } from "../Globalization/Marketization";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { ApplicationData } from "winrt/Windows/Storage/ApplicationData";
import { CreationCollisionOption } from "winrt/Windows/Storage/CreationCollisionOption";
import { AsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { FileIO } from "winrt/Windows/Storage/FileIO";

const SelectRootQuery = "SELECT id, name, parentId, market, itemType, value FROM Config WHERE parentId IS NULL LIMIT 1";
const SelectChildrenByMarketQuery = "SELECT id, name, parentId, market, itemType, value FROM Config WHERE (parentId = ? AND market = ?)";
const SelectChildrenAllMarketsQuery = "SELECT id, name, parentId, market, itemType, value FROM Config WHERE (parentId = ? AND market IS NULL)";
const SelectAllMarketItemsQuery = "SELECT id, name, parentId, market, itemType, value FROM Config WHERE (market = ? OR market IS NULL) ORDER BY id";
const SelectMarketExistsQuery = "SELECT market FROM Config WHERE market = ? LIMIT 1";

interface SqlConfigItem { id, name, parentId, market, itemType, value };
enum ItemType {
    unknown,
    dictionary,
    list,
    string,
    int32,
    bool
}


//@GenerateShim('Platform.Configuration.ConfigurationManager')
export class ConfigurationManager implements IStringable {
    constructor() {
        if (ConfigurationManager.instance)
            return ConfigurationManager.instance;
        ConfigurationManager.instance = this;
    }

    static physicalMarketInfoUpdater: PhysicalMarketInfoUpdaterDelegate = null;
    static manifest: AppManifest = null;

    @Enumerable(true)
    static get custom(): DictionaryConfigurationItem {
        return this.instance.__rootItem.getDictionary("Custom");
    }

    @Enumerable(true)
    static get app(): DictionaryConfigurationItem {
        return this.instance.__rootItem.getDictionary("Custom");
    } // deprecated

    @Enumerable(true)
    static get platform(): DictionaryConfigurationItem {
        return this.instance.__rootItem.getDictionary("Custom");
    } // deprecated

    static instance: ConfigurationManager = null;
    static hasPendingUpdate: boolean = null;
    static azureEnvironment: string = "";
    static partnerDataFeedUrl: string = "";
    static cmsserverName: string = null;
    static enableLocationLookup: boolean = null;
    currentConfigurationFolderName: string = null;
    currentMarketConfigurationFolderName: string = null;
    physicalLocationOverrideConfigurationFolderName: string = null;
    previewFeaturedDataSource: boolean = null;
    isEmbargoed: boolean = null;
    disableNetworkForPrelaunch: boolean = null;
    hasPendingFeaturesConfigUpdate: boolean = null;

    __database: BetterSqlite3.Database;
    __rootItem: DictionaryConfigurationItem;

    static getMarketStringForEditorial(): string {
        throw new Error('ConfigurationManager#getMarketStringForEditorial not implemented')
    }

    async loadAsync(): Promise<void> {
        this.__database = new BetterSqlite3(path.join(Package.current.installedLocation.path, "Configuration", "configuration.sqlite"));
        this.__rootItem = this.createConfigurationItem(this.__database.prepare(SelectRootQuery).get()) as DictionaryConfigurationItem;

        ConfigurationManager.manifest = new AppManifest(this.__rootItem.getDictionary("Manifest"));

        let file = await AsyncOperation.to(ApplicationData.current.localFolder.createFileAsync("out.txt", CreationCollisionOption.replaceExisting));
        let stack = [];
        let root = {};

        const doArray = (v) => {
            let newRoot = [];
            for (let k = 0; k < v.size; k++) {
                let val = v[k];
                if (val instanceof DictionaryConfigurationItem) {
                    newRoot[k] = doDictionary(val)
                }
                else if (val instanceof ListConfigurationItem) {
                    newRoot[k] = doArray(val);
                }
                else {
                    newRoot[k] = val.value;
                }
            }

            return newRoot;
        }

        const doDictionary = (v) => {
            let newRoot = {};
            for (const item of v) {
                let k = item[0];
                let v = item[1];

                if (v instanceof DictionaryConfigurationItem) {
                    newRoot[k] = doDictionary(v)
                }
                else if (v instanceof ListConfigurationItem) {
                    newRoot[k] = doArray(v);
                }
                else {
                    newRoot[k] = v.value;
                }
            }

            return newRoot;
        }

        let result = doDictionary(this.__rootItem);
        await FileIO.writeTextAsync(file, JSON.stringify(result))
    }

    createConfigurationItem(result: SqlConfigItem) {
        let type = result.itemType as ItemType;
        switch (type) {
            case ItemType.dictionary:
                return new DictionaryConfigurationItem(result.id);
            case ItemType.list:
                return new ListConfigurationItem(result.id);
            case ItemType.int32:
                return new Int32ConfigurationItem(result.value);
            case ItemType.string:
                return new StringConfigurationItem(result.value);
            case ItemType.bool:
                return new BooleanConfigurationItem(result.value);
            default:
                break;
        }
    }

    getCollectionChildItems(sqliteId: number) {
        let items = new Map<string, SqlConfigItem>();
        let market = Marketization.getCurrentMarket();

        let query = this.__database.prepare(SelectChildrenByMarketQuery);
        for (const item of query.iterate(sqliteId, market)) {
            items.set(item.name, item);
        }

        query = this.__database.prepare(SelectChildrenAllMarketsQuery);
        for (const item of query.iterate(sqliteId)) {
            if (!items.has(item.name))
                items.set(item.name, item);
        }

        return items.values();
    }

    applyPendingUpdate(): void {
        console.warn('ConfigurationManager#applyPendingUpdate not implemented')
    }
    downloadFeaturesConfigurationAsync(): IAsyncAction {
        return AsyncAction.from(async () => console.warn('ConfigurationManager#downloadFeaturesConfigurationAsync not implemented'));
    }
    forceUpdateMarket(): void {
        console.warn('ConfigurationManager#forceUpdateMarket not implemented')
    }
    loadUpdatedConfigAndNotify(bypassCache: boolean): void {
        console.warn('ConfigurationManager#loadUpdatedConfigAndNotify not implemented')
    }
    onSuspend(): void {
        console.warn('ConfigurationManager#onSuspend not implemented')
    }
    updateMarket(): void {
        console.warn('ConfigurationManager#updateMarket not implemented')
    }
    toString(): string {
        throw new Error('ConfigurationManager#toString not implemented')
    }
}
