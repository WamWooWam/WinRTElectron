// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:11 2021
// </auto-generated>
// --------------------------------------------------

import { DictionaryConfigurationItem } from "../DictionaryConfigurationItem";
import { Channel } from "./Channel";
import { ProcessListener } from "./ProcessListener";
import { IMap } from "winrt/Windows/Foundation/Collections/IMap`2";
import { IVector } from "winrt/Windows/Foundation/Collections/IVector`1";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { Vector } from "winrt/Windows/Foundation/Interop/Vector`1";
import { Dictionary } from "winrt/Windows/Foundation/Interop/Dictionary`2";
import { DataSource } from "./DataSource";

@GenerateShim('Platform.Configuration.Manifest.AppManifest')
export class AppManifest implements IStringable {
    readonly localProviderFREOnly: boolean = null;
    readonly enableFREForOfflineOnly: boolean = null;
    readonly disableNetworkForPrelaunch: boolean = true;
    readonly disablePrelaunch: boolean = true;
    readonly appId: string = null;
    readonly bingAppId: string = null;
    readonly appNumber: number = null;
    readonly splashImage: string = null;
    readonly splashBackground: string = null;
    readonly channels: IVector<Channel> = new Vector();
    readonly snappedChannels: IVector<Channel> = new Vector();
    readonly processListeners: IVector<ProcessListener> = new Vector();
    readonly prefetchingEnabled: boolean = null;
    readonly instrumentationMapping: IMap<string, number> = new Dictionary();
    readonly featuredChannels: IVector<Channel> = new Vector();
    readonly dataSources: Vector<DataSource> = new Vector();

    constructor(item: DictionaryConfigurationItem) {
        console.warn('AppManifest.ctor not implemented')

        let features = item.getDictionary("Features");
        for (const feature of features) {
            let k = feature[0]
            let v = feature[1] as DictionaryConfigurationItem;
            console.log(k);

            // if(!v.getBool("IsEnabled")) break;

            let channels = v.getDictionary("Channels", new DictionaryConfigurationItem());
            for (const channel of channels) {
                let clrChannel = new Channel(channel[1]);
                clrChannel.id = channel[0];
                this.channels.append(clrChannel);
            }
        } 
        
        let dataSources = item.getDictionary("DataSources", new DictionaryConfigurationItem());
        for (const sourceDict of dataSources) {
            let dataSource = new DataSource(sourceDict[1]);
            dataSource.id = sourceDict[0];
            this.dataSources.append(dataSource);
        }

        for (const listener of item.getList("ProcessListeners")) {
            console.log(listener.value);
            var processListener = new ProcessListener();
            processListener.name = listener.value;
            this.processListeners.append(processListener);
        }
    }
    toString(): string {
        throw new Error('AppManifest#toString not implemented')
    }
}
