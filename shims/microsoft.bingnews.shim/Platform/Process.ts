// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Platform 3.0.0.0 at Fri Jun  4 19:45:11 2021
// </auto-generated>
// --------------------------------------------------

import { IPerfTrackLogger } from "../Microsoft/PerfTrack/IPerfTrackLogger";
import { PerfTrackScenarioId } from "./PerfTrackScenarioId";
import { PlatformUIEvent } from "./PlatformUIEvent";
import { PlatformUIEventHandler } from "./PlatformUIEventHandler";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IStringable } from "winrt/Windows/Foundation/IStringable";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { ConfigurationManager } from "./Configuration/ConfigurationManager";
import { Package } from "winrt/Windows/ApplicationModel/Package";

@GenerateShim('Platform.Process')
export class Process implements IStringable {
    constructor() {
        if (Process.instance)
            return Process.instance;
        Process.instance = this;
    }


    static instance: Process = new Process();
    static isRecoverMode: boolean = false;
    static isRetailMode: boolean = false;
    static isPrelaunched: boolean = false;
    static isResetDoNotPurgeSignalled: boolean = null;
    static readonly suspendedLength: number = null;
    static readonly perfTrackLogger: IPerfTrackLogger = null;
    readonly fredone: boolean = null;
    readonly avgNetworkSpeedInKbps: number = null;
    readonly isNetworkTestCacheEnabled: boolean = null;
    readonly networkTestCacheDelay: number = null;
    static collect(): void {
        console.warn('Process#collect not implemented')
    }
    static disableHealthPing(): void {
        console.warn('Process#disableHealthPing not implemented')
    }
    static enableHealthPing(): void {
        console.warn('Process#enableHealthPing not implemented')
    }
    static exitApplication1(message: string): void {
        console.warn('Process#exitApplication1 not implemented')
    }
    static exitApplication2(message: string, failFast: boolean): void {
        console.warn('Process#exitApplication2 not implemented')
    }
    static isDebug(): boolean {
        // throw new Error('Process#isDebug not implemented')
        return false;
    }
    static isProd(): boolean {
        // throw new Error('Process#isProd not implemented')
        return true;
    }
    static perfTrackWriteStartEvent(scenarioId: PerfTrackScenarioId, scenarioName: string, matchKey: string): void {
        console.warn('Process#perfTrackWriteStartEvent not implemented')
    }
    static raisePlatformUIEventAsync(eventName: string, uiEventValue: PlatformUIEvent): void {
        console.warn('Process#raisePlatformUIEventAsync not implemented')
    }
    static registerPlatformUIEventHandler(eventName: string, handler: PlatformUIEventHandler): void {
        console.warn('Process#registerPlatformUIEventHandler not implemented')
    }
    static setDirtyShutdownCount(dirtyShutdownCount: number): void {
        console.warn('Process#setDirtyShutdownCount not implemented')
    }
    static setUIDispatcher(): void {
        console.warn('Process#setUIDispatcher not implemented')
    }
    static signalFlushCachesAndShutdown(): void {
        console.warn('Process#signalFlushCachesAndShutdown not implemented')
    }
    applyPendingConfigurationUpdate(): void {
        console.warn('Process#applyPendingConfigurationUpdate not implemented')
    }
    getAppLastKnownVersionString(): string {
        // throw new Error('Process#getAppLastKnownVersionString not implemented')
        let version = Package.current.id.version;
        return `${version.major}.${version.minor}.${version.build}.${version.revision}`
    }
    getAppVersionString(): string {
        // throw new Error('Process#getAppVersionString not implemented')
        let version = Package.current.id.version;
        return `${version.major}.${version.minor}.${version.build}.${version.revision}`
    }
    isVersionUpdate(): boolean {
        // throw new Error('Process#isVersionUpdate not implemented')
        return false;
    }
    onActivate(): void {
        console.warn('Process#onActivate not implemented')
    }
    onActivateLaunchTelemetry(__arguments: string, fromSearchTile: boolean): void {
        console.warn('Process#onActivateLaunchTelemetry not implemented')
    }
    onActivateProtocolTelemetry(uri: string, __arguments: string): void {
        console.warn('Process#onActivateProtocolTelemetry not implemented')
    }
    onActivateSearchTelemetry(query: string, __arguments: string): void {
        console.warn('Process#onActivateSearchTelemetry not implemented')
    }
    onActivateShareTelemetry(uri: string, __arguments: string): void {
        console.warn('Process#onActivateShareTelemetry not implemented')
    }
    onAfterNavigate(): void {
        console.warn('Process#onAfterNavigate not implemented')
    }
    onBadIdAsync(): IAsyncAction {
        return AsyncAction.from(async () => console.warn('Process#onBadIdAsync not implemented'));
    }
    onBeforeNavigate(): void {
        console.warn('Process#onBeforeNavigate not implemented')
    }
    onCheckpointAsync(): IAsyncAction {
        return AsyncAction.from(async () => console.warn('Process#onCheckpointAsync not implemented'));
    }
    onInitialize(): IAsyncAction {
        return AsyncAction.from(async () => {
            await new ConfigurationManager().loadAsync();
        });
    }
    onResume(): void {
        console.warn('Process#onResume not implemented')
    }
    onSuspend(): void {
        console.warn('Process#onSuspend not implemented')
    }
    onVisibilityChange(hidden: boolean): void {
        console.warn('Process#onVisibilityChange not implemented')
    }
    perfTrackWriteStopEventWithMetadata(scenarioId: PerfTrackScenarioId, scenarioName: string, matchKey: string, matchKeyAsMetadata: boolean): void {
        console.warn('Process#perfTrackWriteStopEventWithMetadata not implemented')
    }
    sendReportsAsync(sendPingReport: boolean): void {
        console.warn('Process#sendReportsAsync not implemented')
    }
    startPostActivateWork(): void {
        console.warn('Process#startPostActivateWork not implemented')
    }
    toString(): string {
        throw new Error('Process#toString not implemented')
    }
}
