// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:37 2021
// </auto-generated>
// --------------------------------------------------

import { IAttachmentManager } from "./IAttachmentManager";
import { ImageResizeOption } from "./ImageResizeOption";
import { QueueEmptyHandler } from "./QueueEmptyHandler";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { StorageFile } from "winrt/Windows/Storage/StorageFile";

@GenerateShim('Microsoft.WindowsLive.Photomail.AttachmentManager')
export class AttachmentManager implements IAttachmentManager { 
    stripImageMetadata: boolean = null;
    imageSize: ImageResizeOption = null;
    enableTranscode: boolean = null;
    addFiles(fileItems: IVectorView<StorageFile>): void {
        console.warn('AttachmentManager#addFiles not implemented')
    }
    removeFile(attachmentId: string): void {
        console.warn('AttachmentManager#removeFile not implemented')
    }
    isAttaching(attachmentId: string): boolean {
        throw new Error('AttachmentManager#isAttaching not implemented')
    }
    isTranscoding(attachmentId: string): boolean {
        throw new Error('AttachmentManager#isTranscoding not implemented')
    }
    discard(): void {
        console.warn('AttachmentManager#discard not implemented')
    }
    stopAll(): void {
        console.warn('AttachmentManager#stopAll not implemented')
    }
    finalizeForSend(): void {
        console.warn('AttachmentManager#finalizeForSend not implemented')
    }
    dispose(): void {
        console.warn('AttachmentManager#dispose not implemented')
    }
    static getManager(messageId: string): IAttachmentManager {
        throw new Error('AttachmentManager#getManager not implemented')
    }

    private __attachQueueEmpty: Set<QueueEmptyHandler> = new Set();
    @Enumerable(true)
    set onattachqueueempty(handler: QueueEmptyHandler) {
        this.__attachQueueEmpty.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'attachqueueempty':
                this.__attachQueueEmpty.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'attachqueueempty':
                this.__attachQueueEmpty.delete(handler);
                break;
        }
    }
}
