// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:37 2021
// </auto-generated>
// --------------------------------------------------

import { ApplicationId } from "./ApplicationId";
import { IApp } from "./IApp";
import { ISuiteUpdate } from "./ISuiteUpdate";
import { IClient } from "../../Platform/IClient";
import { IConfigManager } from "../../Platform/IConfigManager";
import { IMapView } from "winrt/Windows/Foundation/Collections/IMapView`2";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { IClosable } from "winrt/Windows/Foundation/IClosable";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "winrt/Windows/Foundation/TypedEventHandler`2";
import { Uri } from "winrt/Windows/Foundation/Uri";
import { IStorageFile } from "winrt/Windows/Storage/IStorageFile";
import { Dictionary } from "winrt/Windows/Foundation/Interop/Dictionary`2";

@GenerateShim('Microsoft.WindowsLive.Config.Shared.SuiteUpdate')
export class SuiteUpdate implements ISuiteUpdate, IClosable { 
    readonly app: IMapView<ApplicationId, IApp> = null;
    constructor() {
        let app = new Dictionary<ApplicationId, IApp>();
        app.insert(ApplicationId.people, {
            minVersion: "17.2.9600.22013",
            currentVersion: "17.2.9600.22013",
            moreInfoUrl: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
            id: ApplicationId.people,
            message: "YEP"
        });

        app.insert(ApplicationId.mail, {
            minVersion: "17.2.9600.22013",
            currentVersion: "17.2.9600.22013",
            moreInfoUrl: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
            id: ApplicationId.mail,
            message: "YEP"
        });

        this.app = app;
    }    

    close(): void {
        console.warn('SuiteUpdate#close not implemented')
    }
    static loadAsync(obj: any): IAsyncOperation<ISuiteUpdate> {
        return AsyncOperation.from(async () => { 
            return new SuiteUpdate();
        });
    }
    static loadPlatformAsync(client: IClient): IAsyncOperation<ISuiteUpdate> {
        return AsyncOperation.from(async () => { throw new Error('SuiteUpdate#loadPlatformAsync not implemented') });
    }
    static loadManagerAsync(manager: IConfigManager): IAsyncOperation<ISuiteUpdate> {
        return AsyncOperation.from(async () => { throw new Error('SuiteUpdate#loadManagerAsync not implemented') });
    }
    static loadUriAsync(uri: Uri): IAsyncOperation<ISuiteUpdate> {
        return AsyncOperation.from(async () => { throw new Error('SuiteUpdate#loadUriAsync not implemented') });
    }
    static loadStorageFileAsync(pFile: IStorageFile): IAsyncOperation<ISuiteUpdate> {
        return AsyncOperation.from(async () => { throw new Error('SuiteUpdate#loadStorageFileAsync not implemented') });
    }
    static loadXmlAsync(xml: string): IAsyncOperation<ISuiteUpdate> {
        return AsyncOperation.from(async () => { throw new Error('SuiteUpdate#loadXmlAsync not implemented') });
    }
    static loadPlatform(pClient: IClient): ISuiteUpdate {
        throw new Error('SuiteUpdate#loadPlatform not implemented')
    }
    static loadManager(pManager: IConfigManager): ISuiteUpdate {
        throw new Error('SuiteUpdate#loadManager not implemented')
    }
    static loadUri(pUri: Uri): ISuiteUpdate {
        throw new Error('SuiteUpdate#loadUri not implemented')
    }
    static loadStorageFile(pFile: IStorageFile): ISuiteUpdate {
        throw new Error('SuiteUpdate#loadStorageFile not implemented')
    }
    static loadXml(strXml: string): ISuiteUpdate {
        throw new Error('SuiteUpdate#loadXml not implemented')
    }

    private __changed: Set<TypedEventHandler<ISuiteUpdate, any>> = new Set();
    @Enumerable(true)
    set onchanged(handler: TypedEventHandler<ISuiteUpdate, any>) {
        this.__changed.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.delete(handler);
                break;
        }
    }
}
