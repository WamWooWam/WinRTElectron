// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:38 2021
// </auto-generated>
// --------------------------------------------------

import { FavoritesFilter } from "./FavoritesFilter";
import { IAccount } from "./IAccount";
import { ICollection } from "./ICollection";
import { IContact } from "./IContact";
import { IPeopleManager } from "./IPeopleManager";
import { IPerson } from "./IPerson";
import { IRecipient } from "./IRecipient";
import { IRelevanceEntity } from "./IRelevanceEntity";
import { OnlineStatusFilter } from "./OnlineStatusFilter";
import { PeoplePickerFilter } from "./PeoplePickerFilter";
import { PeopleSearchType } from "./PeopleSearchType";
import { RelevanceAction } from "./RelevanceAction";
import { RelevanceScenario } from "./RelevanceScenario";
import { TemporaryContactData } from "./TemporaryContactData";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { Collection } from "./Collection";
import { Person } from "./Person";
import { Client } from "./Client";

@GenerateShim('Microsoft.WindowsLive.Platform.PeopleManager')
export class PeopleManager implements IPeopleManager {

    _client: Client;
    constructor(client: Client) {
        this._client = client;
    }

    _mockPeople: Array<Person>;
    get MockPeople() {
        if (this._mockPeople)
            return this._mockPeople;

        this._mockPeople = [
            new Person(this, this._client.accountManager.defaultAccount, "Thomas", "May"),
            new Person(this, this._client.accountManager.defaultAccount, "Ronny", "Stevens"),
            new Person(this, this._client.accountManager.defaultAccount, "Steph", "Curtis"),
            new Person(this, this._client.accountManager.defaultAccount, "Flower", "Jephson"),
            new Person(this, this._client.accountManager.defaultAccount, "Keiran", "Corey"),
            new Person(this, this._client.accountManager.defaultAccount, "Carissa", "Tirrell"),
            new Person(this, this._client.accountManager.defaultAccount, "Warren", "Royle"),
            new Person(this, this._client.accountManager.defaultAccount, "Raine", "Burton"),
            new Person(this, this._client.accountManager.defaultAccount, "Janetta", "Everly"),
            new Person(this, this._client.accountManager.defaultAccount, "Jaylin", "Wheeler"),
            new Person(this, this._client.accountManager.defaultAccount, "Kizzy", "Abrahams"),
            new Person(this, this._client.accountManager.defaultAccount, "Clover", "Tailor"),
            new Person(this, this._client.accountManager.defaultAccount, "Theodora", "Daubney"),
            new Person(this, this._client.accountManager.defaultAccount, "Nigella", "Anson"),
            new Person(this, this._client.accountManager.defaultAccount, "Nanette", "Rome"),
            new Person(this, this._client.accountManager.defaultAccount, "Lex", "Readdie"),
            new Person(this, this._client.accountManager.defaultAccount, "Aliah", "Rush"),
            new Person(this, this._client.accountManager.defaultAccount, "Mary Ann", "Stark"),
            new Person(this, this._client.accountManager.defaultAccount, "Herbie", "Goffe"),
            new Person(this, this._client.accountManager.defaultAccount, "Victoria", "Humphrey"),
        ]

        return this._mockPeople;
    }


    nameSortOrder: boolean = false;
    createContactForDefaultAccount(): IContact {
        throw new Error('PeopleManager#createContactForDefaultAccount not implemented')
    }
    createContact(pAccount: IAccount): IContact {
        throw new Error('PeopleManager#createContact not implemented')
    }
    loadContact(objectId: string): IContact {
        throw new Error('PeopleManager#loadContact not implemented')
    }
    tryLoadContact(objectId: string): IContact {
        throw new Error('PeopleManager#tryLoadContact not implemented')
    }
    tryLoadContactByLaunchArguments(hstrLaunchArguments: string): IContact {
        throw new Error('PeopleManager#tryLoadContactByLaunchArguments not implemented')
    }
    createTemporaryPerson(pAccount: IAccount, data: TemporaryContactData): IPerson {
        throw new Error('PeopleManager#createTemporaryPerson not implemented')
    }
    loadPerson(objectId: string): IPerson {
        throw new Error('PeopleManager#loadPerson not implemented')
    }
    tryLoadPerson(objectId: string): IPerson {
        // throw new Error('PeopleManager#tryLoadPerson not implemented')
        for (const person of this.MockPeople) {
            if (person.objectId == objectId)
                return person;
        }

        return null;
    }
    tryLoadPersonByCID(cid: number): IPerson {
        throw new Error('PeopleManager#tryLoadPersonByCID not implemented')
    }
    tryLoadPersonBySourceIDAndObjectID(sourceId: string, sourceObjectId: string): IPerson {
        throw new Error('PeopleManager#tryLoadPersonBySourceIDAndObjectID not implemented')
    }
    tryLoadPersonByMri(mri: string): IPerson {
        throw new Error('PeopleManager#tryLoadPersonByMri not implemented')
    }
    tryLoadPersonByTileId(hstrTileId: string): IPerson {
        throw new Error('PeopleManager#tryLoadPersonByTileId not implemented')
    }
    loadRecipientByEmail(email: string, name: string): IRecipient {
        throw new Error('PeopleManager#loadRecipientByEmail not implemented')
    }
    promoteImplicitContact(pAccount: IAccount, implicitContactObjectId: string): void {
        console.warn('PeopleManager#promoteImplicitContact not implemented')
    }
    getFavoritePeople(): ICollection {
        // throw new Error('PeopleManager#getFavoritePeople not implemented')
        return new Collection();
    }
    getFavoritePeopleByCustomOrder(): ICollection {
        throw new Error('PeopleManager#getFavoritePeopleByCustomOrder not implemented')
    }
    getRelevantPeople(): ICollection {
        throw new Error('PeopleManager#getRelevantPeople not implemented')
    }
    getPeopleNameBetween(onlineFilter: OnlineStatusFilter, hstrLowerBound: string, isLowerBoundInclusive: boolean, hstrUpperBound: string, isUpperBoundInclusive: boolean): ICollection {
        if (hstrLowerBound == "" && hstrUpperBound == "")
            return new Collection(this.MockPeople);

        let collection = new Collection();
        let regex = new RegExp(`^${hstrLowerBound}`, "i")
        for (const person of this.MockPeople) {
            let name = person.firstName ?? person.lastName ?? person.nickname;
            if (regex.test(name))
                collection._add(person);
        }

        return collection;
    }
    getPeopleNameOrEmailStartWith(hstrSearch: string): ICollection {
        throw new Error('PeopleManager#getPeopleNameOrEmailStartWith not implemented')
    }
    getPeopleByPickerQuery(filter: PeoplePickerFilter, favoritesFilter: FavoritesFilter, onlineFilter: OnlineStatusFilter, hstrLowerBound: string, isLowerBoundInclusive: boolean, hstrUpperBound: string, isUpperBoundInclusive: boolean): ICollection {
        throw new Error('PeopleManager#getPeopleByPickerQuery not implemented')
    }
    getPeopleNameOrEmailStartWithEx(hstrSearch: string): ICollection {
        throw new Error('PeopleManager#getPeopleNameOrEmailStartWithEx not implemented')
    }
    getPeopleByHasLocalUserTile(fHasLocalUserTile: boolean, fOnlyFavorites: boolean): ICollection {
        throw new Error('PeopleManager#getPeopleByHasLocalUserTile not implemented')
    }
    search(searchType: PeopleSearchType, hstrSearchFilter: string, hstrSearchLocale: string, uiPageSize: number): ICollection {
        let collection = new Collection();
        for (const person of this.MockPeople) {
            let name = (person.firstName + person.lastName + person.nickname).toLowerCase();
            if (name.includes(hstrSearchFilter))
                collection._add(person);
        }

        return collection;
    }
    searchServer(hstrSearch: string, cInitialResultCount: number, pAccount: IAccount, uCachePeriod: number): ICollection {
        throw new Error('PeopleManager#searchServer not implemented')
    }
    searchServerBackground(hstrSearch: string, cInitialResultCount: number, pAccount: IAccount, uCachePeriod: number): ICollection {
        throw new Error('PeopleManager#searchServerBackground not implemented')
    }
    recordRelevanceAction(pAssociatedEntities: IVectorView<IRelevanceEntity>, action: RelevanceAction, pContextualAccount: IAccount, timestamp: Date): void {
        console.warn('PeopleManager#recordRelevanceAction not implemented')
    }
    getSuggestions(pAssociatedEntities: IVectorView<IRelevanceEntity>, scenario: RelevanceScenario, pContextualAccount: IAccount, count: number): IVectorView<IRelevanceEntity> {
        throw new Error('PeopleManager#getSuggestions not implemented')
    }
    addressWellSearchAsync(hstrSearchFilter: string, hstrSearchLocale: string, scenario: RelevanceScenario, pContextualAccount: IAccount, count: number, pExcludeRecipients: IVectorView<IRecipient>): IAsyncOperation<IVectorView<IRecipient>> {
        return AsyncOperation.from(async () => { throw new Error('PeopleManager#addressWellSearchAsync not implemented') });
    }
}
