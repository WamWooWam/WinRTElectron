// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:37 2021
// </auto-generated>
// --------------------------------------------------

import { ClientCreateOptions } from "./ClientCreateOptions";
import { IAccount } from "./IAccount";
import { IAccountManager } from "./IAccountManager";
import { IClient } from "./IClient";
import { IClientServices } from "./IClientServices";
import { IConfigManager } from "./IConfigManager";
import { IDisposable } from "./IDisposable";
import { IFolderManager } from "./IFolderManager";
import { IMailManager } from "./IMailManager";
import { IPeopleManager } from "./IPeopleManager";
import { IPluginVerb } from "./IPluginVerb";
import { IPluginVerbManager } from "./IPluginVerbManager";
import { RestartNeededHandler } from "./RestartNeededHandler";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { HResultError } from "winrt/Windows/Foundation/Interop/HResultError"
import { AccountManager } from "./AccountManager";
import { ConfigManager } from "./ConfigManager";
import { FolderManager } from "./FolderManager";
import { MailManager } from "./MailManager";
import { PeopleManager } from "./PeopleManager";
import { VerbManager } from "./VerbManager";
import { ICalendarManager } from "./Calendar/ICalendarManager";
import { IInvitesManager } from "./Meetings/IInvitesManager";
import { CalendarManager } from "./Calendar/CalendarManager";
import { InvitesManager } from "./Meetings/InvitesManager";
import { Account } from "./Account";

@GenerateShim('Microsoft.WindowsLive.Platform.Client')
export class Client implements IClient, IDisposable, IClientServices, IPluginVerbManager {
    private static _instance: Client;

    static get instance() {
        return Client._instance;
    }

    readonly accountManager: IAccountManager = null;
    readonly calendarManager: ICalendarManager = null;
    readonly configManager: IConfigManager = null;
    readonly folderManager: IFolderManager = null;
    readonly invitesManager: IInvitesManager = null;
    readonly mailManager: IMailManager = null;
    readonly peopleManager: IPeopleManager = null;
    readonly pluginVerbManager: IPluginVerbManager = null;
    // constructor(applicationId: string);
    // constructor(applicationId: string, options: ClientCreateOptions);
    constructor(applicationId: string, options: ClientCreateOptions = ClientCreateOptions.normal) {
        // throw new HResultError("The specified account does not exist.", 0x8009030E);

        // if (Client._instance)
        //     return Client._instance;

        Client._instance = this;
        let defaultAccount = new Account();
        this.accountManager = new AccountManager(defaultAccount);
        this.calendarManager = new CalendarManager();
        this.configManager = new ConfigManager();
        this.folderManager = new FolderManager();
        this.invitesManager = new InvitesManager();
        this.mailManager = new MailManager(this);
        this.peopleManager = new PeopleManager(this);
        this.pluginVerbManager = new VerbManager();
    }

    dispose(): void {
        console.warn('Client#dispose not implemented')
    }
    flushLogfile(): string {
        throw new Error('Client#flushLogfile not implemented')
    }
    requestDelayedResources(): void {
        console.warn('Client#requestDelayedResources not implemented')
    }
    suspend(): void {
        console.warn('Client#suspend not implemented')
    }
    resume(): void {
        console.warn('Client#resume not implemented')
    }
    registerForDispose(pDisposable: IDisposable): void {
        console.warn('Client#registerForDispose not implemented')
    }
    unregisterForDispose(pDisposable: IDisposable): void {
        console.warn('Client#unregisterForDispose not implemented')
    }
    createVerb(hstrVerbName: string, hstrVerbParams: string): IPluginVerb {
        // throw new Error('Client#createVerb not implemented')
        return this.pluginVerbManager.createVerb(hstrVerbName, hstrVerbParams);
    }
    createVerbFromTask(hstrVerbName: string, hstrVerbParams: string, pTaskInstance: any): IPluginVerb {
        throw new Error('Client#createVerbFromTask not implemented')
    }
    createVerbFromTaskWithContext(hstrVerbName: string, hstrVerbParams: string, pContext: any, pTaskInstance: any): IPluginVerb {
        throw new Error('Client#createVerbFromTaskWithContext not implemented')
    }
    runResourceVerb(pAccount: IAccount, hstrResName: string, pVerb: IPluginVerb): void {
        console.warn('Client#runResourceVerb not implemented')
    }
    runResourceVerbAsync(pAccount: IAccount, hstrResName: string, pVerb: IPluginVerb): IAsyncAction {
        return AsyncAction.from(async () => console.warn('Client#runResourceVerbAsync not implemented'));
    }
    cancelResourceVerb(pAccount: IAccount, hstrResName: string, pVerb: IPluginVerb): void {
        console.warn('Client#cancelResourceVerb not implemented')
    }

    private __restartNeeded: Set<RestartNeededHandler> = new Set();
    @Enumerable(true)
    set onrestartneeded(handler: RestartNeededHandler) {
        this.__restartNeeded.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'restartneeded':
                this.__restartNeeded.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'restartneeded':
                this.__restartNeeded.delete(handler);
                break;
        }
    }
}
