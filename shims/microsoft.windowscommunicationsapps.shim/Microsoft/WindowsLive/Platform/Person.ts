// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:38 2021
// </auto-generated>
// --------------------------------------------------

import { ContactStatus } from "./ContactStatus";
import { FavoriteInsertPosition } from "./FavoriteInsertPosition";
import { IBaseContact } from "./IBaseContact";
import { ICollection } from "./ICollection";
import { IContact } from "./IContact";
import { IObject } from "./IObject";
import { IPerson } from "./IPerson";
import { IRecipient } from "./IRecipient";
import { ITransientObjectHolder } from "./ITransientObjectHolder";
import { IUserTile } from "./IUserTile";
import { ObjectChangedHandler } from "./ObjectChangedHandler";
import { UserTileSize } from "./UserTileSize";
import { Contact as WinContact } from "winrt/Windows/ApplicationModel/Contacts/Contact";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { IRandomAccessStream } from "winrt/Windows/Storage/Streams/IRandomAccessStream";
import { PlatformObject } from "./PlatformObject";
import { Collection } from "./Collection";
import { UserTile } from "./UserTile";
import { Contact } from "./Contact";
import { PeopleManager } from "./PeopleManager";
import { IAccount } from "./IAccount";

@GenerateShim('Microsoft.WindowsLive.Platform.Person')
export class Person extends PlatformObject implements IPerson, IBaseContact {
    _manager: PeopleManager;

    constructor(peopleManager: PeopleManager, account: IAccount, firstName: string = "", lastName: string = "") {
        super("Person");
        this._manager = peopleManager;
        this.firstName = firstName;
        this.lastName = lastName;
        this.isFavorite = false;
        this.isInAddressBook = true;
        let linkedContacts = new Collection();
        let contact = new Contact(this, account);
        linkedContacts._add(contact);
        this.linkedContacts = linkedContacts;
        this.suggestedPeople = new Collection();
        this.onlineStatus = Math.random() > 0.5 ? ContactStatus.online : ContactStatus.offline;
        this.mostRelevantEmail = `${firstName}.${lastName}.${Math.floor(Math.random() * 100000)}@hotmail.com`.toLowerCase()
    }

    readonly calculatedYomiDisplayName: string = "";
    readonly canClearPersonTile: boolean = null;
    readonly isFavorite: boolean = null;
    readonly isInAddressBook: boolean = null;
    readonly linkedContacts: ICollection = null;
    readonly mostRelevantEmail: string = "";
    readonly mostRelevantPhone: string = "";
    readonly suggestedPeople: ICollection = null;
    readonly tileId: string = "";

    firstName: string = "";
    middleName: string = "";
    lastName: string = "";
    nickname: string = "";

    @Enumerable(true)
    get sortNameLastFirst(): string {
        return `${this.lastName}${this.firstName}`.trim()
    }

    @Enumerable(true)
    get calculatedUIName(): string {
        return `${this.firstName} ${this.lastName}`
    }

    @Enumerable(true)
    get canEmail(): boolean {
        return this.mostRelevantEmail != null;
    }

    readonly isGal: boolean = null;
    readonly onlineStatus: ContactStatus = null;
    createLink(pPerson: IPerson): void {
        console.warn('Person#createLink not implemented')
    }
    manageLinks(personObjectIdsToLink: IVectorView<string>, contactObjectIdsToUnlink: IVectorView<string>): void {
        console.warn('Person#manageLinks not implemented')
    }
    commitAndLink(pUncommittedContact: IContact): void {
        console.warn('Person#commitAndLink not implemented')
    }
    insertFavorite(position: FavoriteInsertPosition, pFavoriteMember: IPerson): void {
        console.warn('Person#insertFavorite not implemented')
    }
    removeFavorite(): void {
        console.warn('Person#removeFavorite not implemented')
    }
    createRecipient(email: string): IRecipient {
        throw new Error('Person#createRecipient not implemented')
    }
    augmentViaServerAsync(fBackground: boolean): IAsyncAction {
        return AsyncAction.from(async () => console.warn('Person#augmentViaServerAsync not implemented'));
    }
    getWindowsContact(): WinContact {
        throw new Error('Person#getWindowsContact not implemented')
    }
    setPersonTile(pExtraLargeTile: IRandomAccessStream): void {
        console.warn('Person#setPersonTile not implemented')
    }
    clearPersonTile(): void {
        console.warn('Person#clearPersonTile not implemented')
    }
    setStartScreenTileId(hstrTileId: string, hstrLaunchArguments: string): void {
        console.warn('Person#setStartScreenTileId not implemented')
    }
    getUserTile(size: UserTileSize, cachedOnly: boolean): IUserTile {
        // throw new Error('Person#getUserTile not implemented')
        let tile = new UserTile(this);
        return tile;
    }
}
