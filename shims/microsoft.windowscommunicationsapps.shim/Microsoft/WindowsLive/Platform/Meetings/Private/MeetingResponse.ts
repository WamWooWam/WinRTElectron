// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:39 2021
// </auto-generated>
// --------------------------------------------------

import { IObject } from "../../IObject";
import { ITransientObjectHolder } from "../../ITransientObjectHolder";
import { IMeetingResponse } from "./IMeetingResponse";
import { Response } from "./Response";
import { ObjectChangedHandler } from "../../ObjectChangedHandler";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.WindowsLive.Platform.Meetings.Private.MeetingResponse')
export class MeetingResponse implements IMeetingResponse, IObject { 
    response: Response = null;
    requestId: string = null;
    longId: string = null;
    instanceId: Date = null;
    errors: number = null;
    collectionId: string = null;
    accountRowId: number = null;
    readonly canDelete: boolean = null;
    readonly canEdit: boolean = null;
    readonly isObjectValid: boolean = null;
    readonly objectId: string = null;
    readonly objectType: string = null;
    commit(): void {
        console.warn('MeetingResponse#commit not implemented')
    }
    deleteObject(): void {
        console.warn('MeetingResponse#deleteObject not implemented')
    }
    getKeepAlive(): ITransientObjectHolder {
        throw new Error('MeetingResponse#getKeepAlive not implemented')
    }

    private __changed: Set<ObjectChangedHandler> = new Set();
    @Enumerable(true)
    set onchanged(handler: ObjectChangedHandler) {
        this.__changed.add(handler);
    }

    private __deleted: Set<ObjectChangedHandler> = new Set();
    @Enumerable(true)
    set ondeleted(handler: ObjectChangedHandler) {
        this.__deleted.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.add(handler);
                break;
            case 'deleted':
                this.__deleted.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.delete(handler);
                break;
            case 'deleted':
                this.__deleted.delete(handler);
                break;
        }
    }
}
