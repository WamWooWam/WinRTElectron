// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:38 2021
// </auto-generated>
// --------------------------------------------------

import { IAccount } from "./IAccount";
import { ICollection } from "./ICollection";
import { IFolder } from "./IFolder";
import { IMailManager } from "./IMailManager";
import { IMailMessage } from "./IMailMessage";
import { IMailView } from "./IMailView";
import { IObject } from "./IObject";
import { MailLaunchArguments } from "./MailLaunchArguments";
import { MailMessageChangeOperation } from "./MailMessageChangeOperation";
import { MailViewScenario } from "./MailViewScenario";
import { MailViewType } from "./MailViewType";
import { SanitizedVersion } from "./SanitizedVersion";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { IAsyncOperation } from "winrt/Windows/Foundation/IAsyncOperation`1";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { AsyncOperation } from "winrt/Windows/Foundation/Interop/AsyncOperation`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { IRandomAccessStream } from "winrt/Windows/Storage/Streams/IRandomAccessStream";
import { MailMessage } from "./MailMessage";
import { Client } from "./Client";
import { MailView } from "./MailView";
import { Collection } from "./Collection";

@GenerateShim('Microsoft.WindowsLive.Platform.MailManager')
export class MailManager implements IMailManager {
    _client: Client;
    _mailViews: Map<MailViewType, IMailView>;
    // mailMessages: Map<string, MailMessage>;

    constructor(client: Client) {
        this._client = client;
        this._mailViews = new Map();
    }

    getPermanentlyFailedMessageCollection(hstrAccountId: string): ICollection {
        throw new Error('MailManager#getPermanentlyFailedMessageCollection not implemented')
    }
    createMessage(pAccount: IAccount): IMailMessage {
        // throw new Error('MailManager#createMessage not implemented')
        return new MailMessage(pAccount.objectId);
    }
    createMessageInFolder(pFolder: IFolder): IMailMessage {
        //throw new Error('MailManager#createMessageInFolder not implemented')
        return new MailMessage(pFolder.accountId);
    }
    createDraftMessage(pSourceView: IMailView): IMailMessage {
        // throw new Error('MailManager#createDraftMessage not implemented')
        return new MailMessage(pSourceView.accountId);
    }
    createMessageFromMime(pFolder: IFolder, pStream: IRandomAccessStream, fAllowCommit: boolean): IMailMessage {
        throw new Error('MailManager#createMessageFromMime not implemented')
    }
    createMessageFromMimeAsync(pFolder: IFolder, pStream: IRandomAccessStream, fAllowCommit: boolean): IAsyncOperation<IMailMessage> {
        return AsyncOperation.from(async () => { throw new Error('MailManager#createMessageFromMimeAsync not implemented') });
    }
    loadMessage(hstrMessageId: string): IMailMessage {
        // throw new Error('MailManager#loadMessage not implemented')
        return null;
    }
    waitForInstanceNumberOnMessage(hstrMessageId: string, uInstanceNumber: number): IAsyncAction {
        return AsyncAction.from(async () => console.warn('MailManager#waitForInstanceNumberOnMessage not implemented'));
    }
    batchChange(pCollectionToKeepInView: ICollection, hstrSourceViewId: string, changeType: MailMessageChangeOperation, objectIds: IVectorView<string>): void {
        console.warn('MailManager#batchChange not implemented')
    }
    batchMove(hstrSourceViewId: string, hstrDestViewId: string, objectIds: IVectorView<string>): void {
        console.warn('MailManager#batchMove not implemented')
    }
    batchDelete(objectIds: IVectorView<string>): void {
        console.warn('MailManager#batchDelete not implemented')
    }
    search(pScope: IObject, hstrSearchFilter: string, hstrSearchLocale: string, uiPageSize: number): ICollection {
        throw new Error('MailManager#search not implemented')
    }
    setMailVisible(fVisible: boolean): void {
        console.warn('MailManager#setMailVisible not implemented')
    }
    getMailView(type: MailViewType, pAccount: IAccount): IMailView {
        throw new Error('MailManager#getMailView not implemented')
    }
    getMailViews(scenario: MailViewScenario, accountId: string): ICollection {
        if (scenario != MailViewScenario.allPeople)
            return new Collection(Array.from(this._mailViews.values()));

        return new Collection();
    }
    ensureMailView(type: MailViewType, accountId: string, objectId: string): IMailView {
        // throw new Error('MailManager#ensureMailView not implemented')
        if (type == MailViewType.allPinnedPeople)
            return null;

        if (!this._mailViews.has(type)) {
            var newView = new MailView(objectId, accountId, type);
            this._mailViews.set(type, newView);
            return newView;
        }
        else {
            return this._mailViews.get(type);
        }

    }
    keepObjectInView(pFilteredCollection: ICollection, objectIds: IVectorView<string>): void {
        console.warn('MailManager#keepObjectInView not implemented')
    }
    getMessageCollectionBySanitizedVersion(eVersion: SanitizedVersion): ICollection {
        throw new Error('MailManager#getMessageCollectionBySanitizedVersion not implemented')
    }
    parseLaunchArguments(launchArguments: string): MailLaunchArguments {
        throw new Error('MailManager#parseLaunchArguments not implemented')
    }
    tryLoadMailView(viewObjectId: string): IMailView {
        throw new Error('MailManager#tryLoadMailView not implemented')
    }
    getIncludeSentItemsInConversation(): boolean {
        throw new Error('MailManager#getIncludeSentItemsInConversation not implemented')
    }
    setIncludeSentItemsInConversation(fIncludeSentItemsInConversation: boolean): void {
        console.warn('MailManager#setIncludeSentItemsInConversation not implemented')
    }
    checkIncludeSentItemsInConversationForChange(): void {
        console.warn('MailManager#checkIncludeSentItemsInConversationForChange not implemented')
    }
}
