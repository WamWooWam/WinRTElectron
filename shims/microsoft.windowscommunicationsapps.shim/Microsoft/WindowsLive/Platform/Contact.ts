// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:37 2021
// </auto-generated>
// --------------------------------------------------

import { CID } from "./CID";
import { ContactIMType } from "./ContactIMType";
import { ContactLinkingType } from "./ContactLinkingType";
import { ContactStatus } from "./ContactStatus";
import { ContactTrustLevel } from "./ContactTrustLevel";
import { IAccount } from "./IAccount";
import { IBaseContact } from "./IBaseContact";
import { ICollection } from "./ICollection";
import { IContact } from "./IContact";
import { IObject } from "./IObject";
import { IPerson } from "./IPerson";
import { ITransientObjectHolder } from "./ITransientObjectHolder";
import { IUserTile } from "./IUserTile";
import { Location } from "./Location";
import { ObjectChangedHandler } from "./ObjectChangedHandler";
import { UserTileSize } from "./UserTileSize";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { PlatformObject } from "./PlatformObject";
import { Client } from "./Client";
import { Person } from "./Person";

@GenerateShim('Microsoft.WindowsLive.Platform.Contact')
export class Contact extends PlatformObject implements IContact, IBaseContact {
    constructor(person: IPerson, account: IAccount) {
        super("Contact");
        if (!person)
            return;

        this.firstName = person.firstName;
        this.lastName = person.lastName;
        this.person = person;
        this.account = account;
        this.personalEmailAddress = `${this.firstName}.${this.lastName}.${Math.floor(Math.random() * 100000)}@hotmail.com`.toLowerCase()
    }

    yomiLastName: string = null;
    yomiFirstName: string = null;
    yomiCompanyName: string = null;
    webSite: string = null;
    trustLevel: ContactTrustLevel = null;
    title: string = null;
    suffix: string = null;
    significantOther: string = null;
    personalEmailAddress: string = null;
    pagerNumber: string = null;
    notes: string = null;
    homePhoneNumber: string = null;
    homeLocation: Location = null;
    homeFaxNumber: string = null;
    home2PhoneNumber: string = null;
    mobilePhoneNumber: string = null;
    companyName: string = null;
    mobile2PhoneNumber: string = null;
    otherEmailAddress: string = null;
    businessPhoneNumber: string = null;
    businessLocation: Location = null;
    businessFaxNumber: string = null;
    otherLocation: Location = null;
    business2PhoneNumber: string = null;
    birthdate: Date = null;
    anniversary: Date = null;
    alias: string = null;
    jobTitle: string = null;
    officeLocation: string = null;
    businessEmailAddress: string = null;

    readonly imtype: ContactIMType = null;
    readonly person: IPerson = null;
    readonly account: IAccount = null;
    readonly cid: CID = null;
    readonly canIMNow: boolean = null;
    readonly supportsMobileIM: boolean = null;
    readonly thirdPartyObjectId: string = null;
    readonly canOIM: boolean = null;
    readonly federatedEmailAddress: string = null;
    readonly verbs: ICollection = null;
    readonly isBuddy: boolean = null;
    readonly windowsLiveEmailAddress: string = null;
    readonly yahooEmailAddress: string = null;
    readonly isPublicEntity: boolean = null;
    readonly mainMri: string = null;
    readonly linkType: ContactLinkingType = null;
    nickname: string = null;
    middleName: string = null;
    lastName: string = null;
    firstName: string = null;
    readonly onlineStatus: ContactStatus = null;
    readonly calculatedUIName: string = null;
    readonly isGal: boolean = null;
    unlink(): void {
        console.warn('Contact#unlink not implemented')
    }
    getUserTile(size: UserTileSize, cachedOnly: boolean): IUserTile {
        throw new Error('Contact#getUserTile not implemented')
    }
}
