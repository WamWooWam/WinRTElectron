// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:37 2021
// </auto-generated>
// --------------------------------------------------

import { AccountSort } from "./AccountSort";
import { ApplicationScenario } from "./ApplicationScenario";
import { ConnectableFilter } from "./ConnectableFilter";
import { ConnectedFilter } from "./ConnectedFilter";
import { IAccount } from "./IAccount";
import { IAccountManager } from "./IAccountManager";
import { ICertificateCollection } from "./ICertificateCollection";
import { ICertificateObject } from "./ICertificateObject";
import { ICollection } from "./ICollection";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { Account } from "./Account";
import { Collection } from "./Collection";

@GenerateShim('Microsoft.WindowsLive.Platform.AccountManager')
export class AccountManager implements IAccountManager { 
    readonly defaultAccount: IAccount;

    constructor(defaultAccount: IAccount) {
        this.defaultAccount = defaultAccount;
    }

    canSetSyncTypePush(): boolean {
        throw new Error('AccountManager#canSetSyncTypePush not implemented')
    }
    getAccountByControlChannelId(controlChannelId: string): IAccount {
        throw new Error('AccountManager#getAccountByControlChannelId not implemented')
    }
    getAccountBySourceId(sourceId: string, emailAddress: string): IAccount {
        throw new Error('AccountManager#getAccountBySourceId not implemented')
    }
    getConnectableAccountByEmailDomain(sourceId: string, emailAddress: string): IAccount {
        throw new Error('AccountManager#getConnectableAccountByEmailDomain not implemented')
    }
    getConnectableAccountsByScenario(scenario: ApplicationScenario, filter: ConnectableFilter): ICollection {
        // throw new Error('AccountManager#getConnectableAccountsByScenario not implemented')
        return new Collection([]);
    }
    getConnectedAccountsByScenario(scenario: ApplicationScenario, filter: ConnectedFilter, sort: AccountSort): ICollection {
        // throw new Error('AccountManager#getConnectedAccountsByScenario not implemented')
        return new Collection([this.defaultAccount]);
    }
    loadAccount(objectId: string): IAccount {
        // throw new Error('AccountManager#loadAccount not implemented')
        return this.defaultAccount; // for now
    }
    queryForCertificateCollection(pAccount: IAccount): ICertificateCollection {
        throw new Error('AccountManager#queryForCertificateCollection not implemented')
    }
    queryForCertificate(pbThumbPrint: number[]): ICertificateObject {
        throw new Error('AccountManager#queryForCertificate not implemented')
    }
}
