// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:38 2021
// </auto-generated>
// --------------------------------------------------

import { CID } from "./CID";
import { ContactIMType } from "./ContactIMType";
import { ContactLinkingType } from "./ContactLinkingType";
import { ContactStatus } from "./ContactStatus";
import { ContactTrustLevel } from "./ContactTrustLevel";
import { FavoriteInsertPosition } from "./FavoriteInsertPosition";
import { IAccount } from "./IAccount";
import { IBaseContact } from "./IBaseContact";
import { ICollection } from "./ICollection";
import { IContact } from "./IContact";
import { IObject } from "./IObject";
import { IPerson } from "./IPerson";
import { IRecipient } from "./IRecipient";
import { ISearchPerson } from "./ISearchPerson";
import { ITransientObjectHolder } from "./ITransientObjectHolder";
import { IUserTile } from "./IUserTile";
import { Location } from "./Location";
import { ObjectChangedHandler } from "./ObjectChangedHandler";
import { UserTileSize } from "./UserTileSize";
import { Contact } from "winrt/Windows/ApplicationModel/Contacts/Contact";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { IRandomAccessStream } from "winrt/Windows/Storage/Streams/IRandomAccessStream";

@GenerateShim('Microsoft.WindowsLive.Platform.ImplicitPerson')
export class ImplicitPerson implements IPerson, IBaseContact, IObject, ISearchPerson, IContact { 
    readonly calculatedYomiDisplayName: string = null;
    readonly canClearPersonTile: boolean = null;
    readonly canEmail: boolean = null;
    readonly isFavorite: boolean = null;
    readonly isInAddressBook: boolean = null;
    readonly linkedContacts: ICollection = null;
    readonly mostRelevantEmail: string = null;
    readonly mostRelevantPhone: string = null;
    readonly sortNameLastFirst: string = null;
    readonly suggestedPeople: ICollection = null;
    readonly tileId: string = null;
    readonly canDelete: boolean = null;
    readonly canEdit: boolean = null;
    readonly isObjectValid: boolean = null;
    readonly objectId: string = null;
    readonly objectType: string = null;
    nickname: string = null;
    middleName: string = null;
    lastName: string = null;
    firstName: string = null;
    readonly calculatedUIName: string = null;
    readonly isGal: boolean = null;
    readonly onlineStatus: ContactStatus = null;
    businessEmailAddress: string = null;
    business2PhoneNumber: string = null;
    birthdate: Date = null;
    anniversary: Date = null;
    alias: string = null;
    businessPhoneNumber: string = null;
    businessLocation: Location = null;
    businessFaxNumber: string = null;
    title: string = null;
    homePhoneNumber: string = null;
    homeLocation: Location = null;
    homeFaxNumber: string = null;
    home2PhoneNumber: string = null;
    mobilePhoneNumber: string = null;
    companyName: string = null;
    jobTitle: string = null;
    mobile2PhoneNumber: string = null;
    notes: string = null;
    otherLocation: Location = null;
    officeLocation: string = null;
    yomiFirstName: string = null;
    yomiCompanyName: string = null;
    webSite: string = null;
    trustLevel: ContactTrustLevel = null;
    suffix: string = null;
    significantOther: string = null;
    personalEmailAddress: string = null;
    pagerNumber: string = null;
    yomiLastName: string = null;
    otherEmailAddress: string = null;
    readonly imtype: ContactIMType = null;
    readonly account: IAccount = null;
    readonly canOIM: boolean = null;
    readonly federatedEmailAddress: string = null;
    readonly isBuddy: boolean = null;
    readonly isPublicEntity: boolean = null;
    readonly linkType: ContactLinkingType = null;
    readonly mainMri: string = null;
    readonly person: IPerson = null;
    readonly supportsMobileIM: boolean = null;
    readonly thirdPartyObjectId: string = null;
    readonly canIMNow: boolean = null;
    readonly verbs: ICollection = null;
    readonly windowsLiveEmailAddress: string = null;
    readonly yahooEmailAddress: string = null;
    readonly cid: CID = null;
    createLink(pPerson: IPerson): void {
        console.warn('ImplicitPerson#createLink not implemented')
    }
    manageLinks(personObjectIdsToLink: IVectorView<string>, contactObjectIdsToUnlink: IVectorView<string>): void {
        console.warn('ImplicitPerson#manageLinks not implemented')
    }
    commitAndLink(pUncommittedContact: IContact): void {
        console.warn('ImplicitPerson#commitAndLink not implemented')
    }
    insertFavorite(position: FavoriteInsertPosition, pFavoriteMember: IPerson): void {
        console.warn('ImplicitPerson#insertFavorite not implemented')
    }
    removeFavorite(): void {
        console.warn('ImplicitPerson#removeFavorite not implemented')
    }
    createRecipient(email: string): IRecipient {
        throw new Error('ImplicitPerson#createRecipient not implemented')
    }
    augmentViaServerAsync(fBackground: boolean): IAsyncAction {
        return AsyncAction.from(async () => console.warn('ImplicitPerson#augmentViaServerAsync not implemented'));
    }
    getWindowsContact(): Contact {
        throw new Error('ImplicitPerson#getWindowsContact not implemented')
    }
    setPersonTile(pExtraLargeTile: IRandomAccessStream): void {
        console.warn('ImplicitPerson#setPersonTile not implemented')
    }
    clearPersonTile(): void {
        console.warn('ImplicitPerson#clearPersonTile not implemented')
    }
    setStartScreenTileId(hstrTileId: string, hstrLaunchArguments: string): void {
        console.warn('ImplicitPerson#setStartScreenTileId not implemented')
    }
    commit(): void {
        console.warn('ImplicitPerson#commit not implemented')
    }
    deleteObject(): void {
        console.warn('ImplicitPerson#deleteObject not implemented')
    }
    getKeepAlive(): ITransientObjectHolder {
        throw new Error('ImplicitPerson#getKeepAlive not implemented')
    }
    getUserTile(size: UserTileSize, cachedOnly: boolean): IUserTile {
        throw new Error('ImplicitPerson#getUserTile not implemented')
    }
    savePermanently(pLinkTarget: IPerson): void {
        console.warn('ImplicitPerson#savePermanently not implemented')
    }
    unlink(): void {
        console.warn('ImplicitPerson#unlink not implemented')
    }

    private __changed: Set<ObjectChangedHandler> = new Set();
    @Enumerable(true)
    set onchanged(handler: ObjectChangedHandler) {
        this.__changed.add(handler);
    }

    private __deleted: Set<ObjectChangedHandler> = new Set();
    @Enumerable(true)
    set ondeleted(handler: ObjectChangedHandler) {
        this.__deleted.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.add(handler);
                break;
            case 'deleted':
                this.__deleted.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.delete(handler);
                break;
            case 'deleted':
                this.__deleted.delete(handler);
                break;
        }
    }
}
