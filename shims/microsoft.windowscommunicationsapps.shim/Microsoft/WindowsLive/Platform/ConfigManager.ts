// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:37 2021
// </auto-generated>
// --------------------------------------------------

import { ConfigArea } from "./ConfigArea";
import { ConfigCloud } from "./ConfigCloud";
import { ICollection } from "./ICollection";
import { IConfigInstance } from "./IConfigInstance";
import { IConfigManager } from "./IConfigManager";
import { IConfigMetadataObject } from "./IConfigMetadataObject";
import { IConfigObject } from "./IConfigObject";
import { IObject } from "./IObject";
import { ITransientObjectHolder } from "./ITransientObjectHolder";
import { ObjectChangedHandler } from "./ObjectChangedHandler";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.WindowsLive.Platform.ConfigManager')
export class ConfigManager implements IConfigManager, IObject { 
    readonly canDelete: boolean = null;
    readonly canEdit: boolean = null;
    readonly isObjectValid: boolean = null;
    readonly objectId: string = null;
    readonly objectType: string = null;
    readonly metadataObject: IConfigMetadataObject = null;
    getCurrentConfigCollection(area: ConfigArea, feature: string): ICollection {
        throw new Error('ConfigManager#getCurrentConfigCollection not implemented')
    }
    getConfigCollection(area: ConfigArea, feature: string, marketId: number, cloud: ConfigCloud): ICollection {
        throw new Error('ConfigManager#getConfigCollection not implemented')
    }
    createNewFeature(area: ConfigArea, feature: string, cloud: ConfigCloud, market: number, begin: Date, end: Date, hash: string, xmlData: string): void {
        console.warn('ConfigManager#createNewFeature not implemented')
    }
    createNewFeatureWithInstance(instance: IConfigInstance): void {
        console.warn('ConfigManager#createNewFeatureWithInstance not implemented')
    }
    deleteComplement(prgKeep: IVectorView<IConfigObject>): void {
        console.warn('ConfigManager#deleteComplement not implemented')
    }
    resetDatabase(): void {
        console.warn('ConfigManager#resetDatabase not implemented')
    }
    insertMetadataRow(version: string): void {
        console.warn('ConfigManager#insertMetadataRow not implemented')
    }
    modifyConfig(area: ConfigArea, feature: string, xpath: string, newValue: string): void {
        console.warn('ConfigManager#modifyConfig not implemented')
    }
    commit(): void {
        console.warn('ConfigManager#commit not implemented')
    }
    deleteObject(): void {
        console.warn('ConfigManager#deleteObject not implemented')
    }
    getKeepAlive(): ITransientObjectHolder {
        throw new Error('ConfigManager#getKeepAlive not implemented')
    }

    private __changed: Set<ObjectChangedHandler> = new Set();
    @Enumerable(true)
    set onchanged(handler: ObjectChangedHandler) {
        this.__changed.add(handler);
    }

    private __deleted: Set<ObjectChangedHandler> = new Set();
    @Enumerable(true)
    set ondeleted(handler: ObjectChangedHandler) {
        this.__deleted.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.add(handler);
                break;
            case 'deleted':
                this.__deleted.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.delete(handler);
                break;
            case 'deleted':
                this.__deleted.delete(handler);
                break;
        }
    }
}
