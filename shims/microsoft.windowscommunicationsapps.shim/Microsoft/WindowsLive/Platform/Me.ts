// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:38 2021
// </auto-generated>
// --------------------------------------------------

import { CID } from "./CID";
import { ContactIMType } from "./ContactIMType";
import { ContactLinkingType } from "./ContactLinkingType";
import { ContactStatus } from "./ContactStatus";
import { ContactTrustLevel } from "./ContactTrustLevel";
import { FavoriteInsertPosition } from "./FavoriteInsertPosition";
import { IAccount } from "./IAccount";
import { IBaseContact } from "./IBaseContact";
import { ICollection } from "./ICollection";
import { IContact } from "./IContact";
import { IMe } from "./IMe";
import { IObject } from "./IObject";
import { IPerson } from "./IPerson";
import { IRecipient } from "./IRecipient";
import { ITransientObjectHolder } from "./ITransientObjectHolder";
import { IUserTile } from "./IUserTile";
import { Location } from "./Location";
import { ObjectChangedHandler } from "./ObjectChangedHandler";
import { UserTileCrop } from "./UserTileCrop";
import { UserTileSize } from "./UserTileSize";
import { Contact as WinContact } from "winrt/Windows/ApplicationModel/Contacts/Contact";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { IAsyncAction } from "winrt/Windows/Foundation/IAsyncAction";
import { AsyncAction } from "winrt/Windows/Foundation/Interop/AsyncAction";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { IRandomAccessStream } from "winrt/Windows/Storage/Streams/IRandomAccessStream";
import { PlatformObject } from "./PlatformObject";
import { UserTile } from "./UserTile";
import { Collection } from "./Collection";
import { Contact } from "./Contact";

@GenerateShim('Microsoft.WindowsLive.Platform.Me')
export class Me extends PlatformObject implements IContact, IBaseContact, IPerson, IMe {

    constructor(account: IAccount) {
        super("MeContact")
        this.firstName = "Thomas";
        this.lastName = "May";
        this.person = this;
        let linkedContacts = new Collection();
        let contact = new Contact(this, account);
        linkedContacts._add(contact);
        this.linkedContacts = linkedContacts;
    }

    @Enumerable(true)
    get sortNameLastFirst(): string {
        return `${this.lastName}${this.firstName}`.trim()
    }

    @Enumerable(true)
    get calculatedUIName(): string {
        return `${this.firstName} ${this.lastName}`
    }

    @Enumerable(true)
    get canEmail(): boolean {
        return this.mostRelevantEmail != null;
    }

    readonly userTileCrop: UserTileCrop = null;
    firstName: string = null;
    lastName: string = null;
    middleName: string = null;
    nickname: string = null;
    readonly onlineStatus: ContactStatus = null;
    readonly isGal: boolean = null;
    homeLocation: Location = null;
    home2PhoneNumber: string = null;
    companyName: string = null;
    businessPhoneNumber: string = null;
    businessLocation: Location = null;
    businessEmailAddress: string = null;
    business2PhoneNumber: string = null;
    birthdate: Date = null;
    anniversary: Date = null;
    alias: string = null;
    homePhoneNumber: string = null;
    homeFaxNumber: string = null;
    suffix: string = null;
    significantOther: string = null;
    personalEmailAddress: string = null;
    jobTitle: string = null;
    pagerNumber: string = null;
    otherLocation: Location = null;
    otherEmailAddress: string = null;
    yomiCompanyName: string = null;
    notes: string = null;
    mobilePhoneNumber: string = null;
    mobile2PhoneNumber: string = null;
    officeLocation: string = null;
    businessFaxNumber: string = null;
    yomiLastName: string = null;
    webSite: string = null;
    yomiFirstName: string = null;
    trustLevel: ContactTrustLevel = null;
    title: string = null;
    readonly windowsLiveEmailAddress: string = null;
    readonly yahooEmailAddress: string = null;
    readonly supportsMobileIM: boolean = null;
    readonly person: IPerson = null;
    readonly mainMri: string = null;
    readonly linkType: ContactLinkingType = null;
    readonly isPublicEntity: boolean = null;
    readonly isBuddy: boolean = null;
    readonly cid: CID = null;
    readonly federatedEmailAddress: string = null;
    readonly canOIM: boolean = null;
    readonly canIMNow: boolean = null;
    readonly account: IAccount = null;
    readonly imtype: ContactIMType = null;
    readonly thirdPartyObjectId: string = null;
    readonly verbs: ICollection = null;
    readonly canClearPersonTile: boolean = null;
    readonly calculatedYomiDisplayName: string = null;
    readonly isInAddressBook: boolean = null;
    readonly linkedContacts: ICollection = null;
    readonly mostRelevantEmail: string = null;
    readonly mostRelevantPhone: string = null;
    readonly suggestedPeople: ICollection = null;
    readonly tileId: string = null;
    readonly isFavorite: boolean = null;
    unlink(): void {
        console.warn('Me#unlink not implemented')
    }
    getUserTile(size: UserTileSize, cachedOnly: boolean): IUserTile {
        // throw new Error('Me#getUserTile not implemented')
        let tile = new UserTile(this);
        return tile;
    }
    createLink(pPerson: IPerson): void {
        console.warn('Me#createLink not implemented')
    }
    manageLinks(personObjectIdsToLink: IVectorView<string>, contactObjectIdsToUnlink: IVectorView<string>): void {
        console.warn('Me#manageLinks not implemented')
    }
    commitAndLink(pUncommittedContact: IContact): void {
        console.warn('Me#commitAndLink not implemented')
    }
    insertFavorite(position: FavoriteInsertPosition, pFavoriteMember: IPerson): void {
        console.warn('Me#insertFavorite not implemented')
    }
    removeFavorite(): void {
        console.warn('Me#removeFavorite not implemented')
    }
    createRecipient(email: string): IRecipient {
        throw new Error('Me#createRecipient not implemented')
    }
    augmentViaServerAsync(fBackground: boolean): IAsyncAction {
        return AsyncAction.from(async () => console.warn('Me#augmentViaServerAsync not implemented'));
    }
    getWindowsContact(): WinContact {
        throw new Error('Me#getWindowsContact not implemented')
    }
    setPersonTile(pExtraLargeTile: IRandomAccessStream): void {
        console.warn('Me#setPersonTile not implemented')
    }
    clearPersonTile(): void {
        console.warn('Me#clearPersonTile not implemented')
    }
    setStartScreenTileId(hstrTileId: string, hstrLaunchArguments: string): void {
        console.warn('Me#setStartScreenTileId not implemented')
    }
    setOnlineStatus(csStatus: ContactStatus): void {
        console.warn('Me#setOnlineStatus not implemented')
    }
    setUserTile(pWebReadyTile: IRandomAccessStream, pExtraLargeTile: IRandomAccessStream, crop: UserTileCrop): void {
        console.warn('Me#setUserTile not implemented')
    }
    clearUserTile(): void {
        console.warn('Me#clearUserTile not implemented')
    }
}
