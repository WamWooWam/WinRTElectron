// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:39 2021
// </auto-generated>
// --------------------------------------------------

import { BusyStatus } from "./BusyStatus";
import { DataType } from "./DataType";
import { EventType } from "./EventType";
import { IAttendee } from "./IAttendee";
import { ICalendar } from "./ICalendar";
import { IEvent } from "./IEvent";
import { IRecurrence } from "./IRecurrence";
import { MeetingMessageType } from "./MeetingMessageType";
import { MeetingStatus } from "./MeetingStatus";
import { ResponseType } from "./ResponseType";
import { Sensitivity } from "./Sensitivity";
import { ServerCapability } from "./ServerCapability";
import { Status } from "./Status";
import { ICollection } from "../ICollection";
import { IDisposable } from "../IDisposable";
import { IObject } from "../IObject";
import { ITransientObjectHolder } from "../ITransientObjectHolder";
import { ObjectChangedHandler } from "../ObjectChangedHandler";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { Enumerable } from "winrt/Windows/Foundation/Interop/Enumerable";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.WindowsLive.Platform.Calendar.Event')
export class Event implements IObject, IDisposable, IEvent { 
    timeZoneId: string = null;
    subject: string = null;
    startDate: Date = null;
    sensitivity: Sensitivity = null;
    responseType: ResponseType = null;
    responseRequested: boolean = null;
    reminder: number = null;
    recurring: boolean = null;
    endDate: Date = null;
    disallowNewTime: boolean = null;
    dataType: DataType = null;
    busyStatus: BusyStatus = null;
    allDayEvent: boolean = null;
    location: string = null;
    meetingStatus: MeetingStatus = null;
    organizerEmail: string = null;
    organizerName: string = null;
    data: string = null;
    readonly isEventTypeValid: boolean = null;
    readonly uid: string = null;
    readonly meetingMessageType: MeetingMessageType = null;
    readonly modified: Date = null;
    readonly occurrenceDeleted: boolean = null;
    readonly recurrence: IRecurrence = null;
    readonly isOrganizer: boolean = null;
    readonly calendar: ICalendar = null;
    readonly reminderTime: Date = null;
    readonly replyTime: Date = null;
    readonly capabilities: ServerCapability = null;
    readonly color: number = null;
    readonly eventType: EventType = null;
    readonly exceptions: boolean = null;
    readonly handle: string = null;
    readonly id: number = null;
    readonly canEdit: boolean = null;
    readonly objectType: string = null;
    readonly objectId: string = null;
    readonly isObjectValid: boolean = null;
    readonly canDelete: boolean = null;
    commit(): void {
        console.warn('Event#commit not implemented')
    }
    deleteObject(): void {
        console.warn('Event#deleteObject not implemented')
    }
    getKeepAlive(): ITransientObjectHolder {
        throw new Error('Event#getKeepAlive not implemented')
    }
    dispose(): void {
        console.warn('Event#dispose not implemented')
    }
    getSeries(): IEvent {
        throw new Error('Event#getSeries not implemented')
    }
    deleteExceptions(): void {
        console.warn('Event#deleteExceptions not implemented')
    }
    getOccurrence(start: Date): IEvent {
        throw new Error('Event#getOccurrence not implemented')
    }
    getOccurrenceByExceptionStart(dtExceptionStart: Date): IEvent {
        throw new Error('Event#getOccurrenceByExceptionStart not implemented')
    }
    getiCalendar(): string {
        throw new Error('Event#getiCalendar not implemented')
    }
    getiCalendarWithAttendees(pAttendees: IVectorView<IAttendee>): string {
        throw new Error('Event#getiCalendarWithAttendees not implemented')
    }
    getAttendees(): ICollection {
        throw new Error('Event#getAttendees not implemented')
    }
    addAttendee(name: string, email: string): IAttendee {
        throw new Error('Event#addAttendee not implemented')
    }
    validate(): Status {
        throw new Error('Event#validate not implemented')
    }
    markDirty(): void {
        console.warn('Event#markDirty not implemented')
    }

    private __changed: Set<ObjectChangedHandler> = new Set();
    @Enumerable(true)
    set onchanged(handler: ObjectChangedHandler) {
        this.__changed.add(handler);
    }

    private __deleted: Set<ObjectChangedHandler> = new Set();
    @Enumerable(true)
    set ondeleted(handler: ObjectChangedHandler) {
        this.__deleted.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.add(handler);
                break;
            case 'deleted':
                this.__deleted.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'changed':
                this.__changed.delete(handler);
                break;
            case 'deleted':
                this.__deleted.delete(handler);
                break;
        }
    }
}
