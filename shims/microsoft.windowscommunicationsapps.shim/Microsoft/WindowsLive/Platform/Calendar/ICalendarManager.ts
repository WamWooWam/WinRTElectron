// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:39 2021
// </auto-generated>
// --------------------------------------------------

import { ErrorPriority } from "./ErrorPriority";
import { ErrorType } from "./ErrorType";
import { EventSortOrder } from "./EventSortOrder";
import { GetEventsOptions } from "./GetEventsOptions";
import { ICalendar } from "./ICalendar";
import { IColorTable } from "./IColorTable";
import { IErrorMessage } from "./IErrorMessage";
import { IEvent } from "./IEvent";
import { IFreeBusyRequest } from "./IFreeBusyRequest";
import { IAccount } from "../IAccount";
import { ICollection } from "../ICollection";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";

export interface ICalendarManager {
    readonly cacheRanges: ICollection;
    readonly colorTable: IColorTable;
    readonly defaultCalendar: ICalendar;
    readonly locale: string;
    readonly timeZoneId: string;
    getCalendarIfExists(calendarId: number): ICalendar;
    getAllCalendars(): ICollection;
    getAllCalendarsOptionallyIncludeDeleted(includeDeleted: boolean): ICollection;
    getAllCalendarsForAccount(pAccount: IAccount): ICollection;
    getAllCalendarsForAccountOptionallyIncludeDeleted(pAccount: IAccount, includeDeleted: boolean): ICollection;
    getDefaultCalendarForAccount(pAccount: IAccount): ICalendar;
    getEventFromUID(pAccount: IAccount, uid: string): IEvent;
    getEventsFromUID(uid: string): ICollection;
    getEventFromID(eventId: number): IEvent;
    getEventFromHandle(handle: string): IEvent;
    getReminders(dtStart: Date, dtEnd: Date): ICollection;
    getEvents(dtStart: Date, dtEnd: Date): ICollection;
    getEventsSorted(dtStart: Date, dtEnd: Date, sortOrder: EventSortOrder): ICollection;
    getEventsSortedWithOptions(dtStart: Date, dtEnd: Date, sortOrder: EventSortOrder, options: GetEventsOptions): ICollection;
    getNextEvent(eventId: number): IEvent;
    getNextEventAfter(eventId: number, dtStart: Date): IEvent;
    requestFreeBusyData(pAccount: IAccount, dtStart: Date, dtEnd: Date, attendees: IVectorView<string>): IFreeBusyRequest;
    getCalendarErrors(): ICollection;
    getCalendarError(objectId: string): IErrorMessage;
    addCalendarError(message: string, priority: ErrorPriority): void;
    addCalendarErrorWithEvent(message: string, priority: ErrorPriority, eventHandle: string): void;
    addCalendarErrorWithEventAndType(message: string, priority: ErrorPriority, type: ErrorType, eventHandle: string): void;
    purgeAllCalendars(): void;
}
