// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:39 2021
// </auto-generated>
// --------------------------------------------------

import { ErrorPriority } from "./ErrorPriority";
import { ErrorType } from "./ErrorType";
import { EventSortOrder } from "./EventSortOrder";
import { GetEventsOptions } from "./GetEventsOptions";
import { ICalendar } from "./ICalendar";
import { ICalendarManager } from "./ICalendarManager";
import { IColorTable } from "./IColorTable";
import { IErrorMessage } from "./IErrorMessage";
import { IEvent } from "./IEvent";
import { IFreeBusyRequest } from "./IFreeBusyRequest";
import { IAccount } from "../IAccount";
import { ICollection } from "../ICollection";
import { IVectorView } from "winrt/Windows/Foundation/Collections/IVectorView`1";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";

@GenerateShim('Microsoft.WindowsLive.Platform.Calendar.CalendarManager')
export class CalendarManager implements ICalendarManager { 
    readonly cacheRanges: ICollection = null;
    readonly colorTable: IColorTable = null;
    readonly defaultCalendar: ICalendar = null;
    readonly locale: string = null;
    readonly timeZoneId: string = null;
    getCalendarIfExists(calendarId: number): ICalendar {
        throw new Error('CalendarManager#getCalendarIfExists not implemented')
    }
    getAllCalendars(): ICollection {
        throw new Error('CalendarManager#getAllCalendars not implemented')
    }
    getAllCalendarsOptionallyIncludeDeleted(includeDeleted: boolean): ICollection {
        throw new Error('CalendarManager#getAllCalendarsOptionallyIncludeDeleted not implemented')
    }
    getAllCalendarsForAccount(pAccount: IAccount): ICollection {
        throw new Error('CalendarManager#getAllCalendarsForAccount not implemented')
    }
    getAllCalendarsForAccountOptionallyIncludeDeleted(pAccount: IAccount, includeDeleted: boolean): ICollection {
        throw new Error('CalendarManager#getAllCalendarsForAccountOptionallyIncludeDeleted not implemented')
    }
    getDefaultCalendarForAccount(pAccount: IAccount): ICalendar {
        throw new Error('CalendarManager#getDefaultCalendarForAccount not implemented')
    }
    getEventFromUID(pAccount: IAccount, uid: string): IEvent {
        throw new Error('CalendarManager#getEventFromUID not implemented')
    }
    getEventsFromUID(uid: string): ICollection {
        throw new Error('CalendarManager#getEventsFromUID not implemented')
    }
    getEventFromID(eventId: number): IEvent {
        throw new Error('CalendarManager#getEventFromID not implemented')
    }
    getEventFromHandle(handle: string): IEvent {
        throw new Error('CalendarManager#getEventFromHandle not implemented')
    }
    getReminders(dtStart: Date, dtEnd: Date): ICollection {
        throw new Error('CalendarManager#getReminders not implemented')
    }
    getEvents(dtStart: Date, dtEnd: Date): ICollection {
        throw new Error('CalendarManager#getEvents not implemented')
    }
    getEventsSorted(dtStart: Date, dtEnd: Date, sortOrder: EventSortOrder): ICollection {
        throw new Error('CalendarManager#getEventsSorted not implemented')
    }
    getEventsSortedWithOptions(dtStart: Date, dtEnd: Date, sortOrder: EventSortOrder, options: GetEventsOptions): ICollection {
        throw new Error('CalendarManager#getEventsSortedWithOptions not implemented')
    }
    getNextEvent(eventId: number): IEvent {
        throw new Error('CalendarManager#getNextEvent not implemented')
    }
    getNextEventAfter(eventId: number, dtStart: Date): IEvent {
        throw new Error('CalendarManager#getNextEventAfter not implemented')
    }
    requestFreeBusyData(pAccount: IAccount, dtStart: Date, dtEnd: Date, attendees: IVectorView<string>): IFreeBusyRequest {
        throw new Error('CalendarManager#requestFreeBusyData not implemented')
    }
    getCalendarErrors(): ICollection {
        throw new Error('CalendarManager#getCalendarErrors not implemented')
    }
    getCalendarError(objectId: string): IErrorMessage {
        throw new Error('CalendarManager#getCalendarError not implemented')
    }
    addCalendarError(message: string, priority: ErrorPriority): void {
        console.warn('CalendarManager#addCalendarError not implemented')
    }
    addCalendarErrorWithEvent(message: string, priority: ErrorPriority, eventHandle: string): void {
        console.warn('CalendarManager#addCalendarErrorWithEvent not implemented')
    }
    addCalendarErrorWithEventAndType(message: string, priority: ErrorPriority, type: ErrorType, eventHandle: string): void {
        console.warn('CalendarManager#addCalendarErrorWithEventAndType not implemented')
    }
    purgeAllCalendars(): void {
        console.warn('CalendarManager#purgeAllCalendars not implemented')
    }
}
