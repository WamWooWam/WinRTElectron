// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Microsoft 255.255.255.255 at Wed Apr 14 20:25:37 2021
// </auto-generated>
// --------------------------------------------------

import { ApiId } from "./ApiId";
import { ErrorType } from "./ErrorType";
import { IBici } from "./IBici";
import { IDatapointValueList } from "./IDatapointValueList";
import { ITransactionId } from "./ITransactionId";
import { PropertyId } from "./PropertyId";
import { ScenarioId } from "./ScenarioId";
import { GenerateShim } from "winrt/Windows/Foundation/Interop/GenerateShim";
import { UserIdentity } from "winrt/Windows/Security/Authentication/OnlineId/UserIdentity";

@GenerateShim('Microsoft.WindowsLive.Instrumentation.Bici')
export class Bici implements IBici { 
    errorsFound: boolean = null;
    applicationId: number = null;
    startExperience(): void {
        console.warn('Bici#startExperience not implemented')
    }
    endExperience(): void {
        console.warn('Bici#endExperience not implemented')
    }
    pauseExperience(): void {
        console.warn('Bici#pauseExperience not implemented')
    }
    continueExperience(): void {
        console.warn('Bici#continueExperience not implemented')
    }
    transferExperienceToWeb(inputUrl: string): string {
        throw new Error('Bici#transferExperienceToWeb not implemented')
    }
    set(datapointId: number, datapointValue: number): void {
        console.warn('Bici#set not implemented')
    }
    setString(datapointId: number, datapointValue: string): void {
        console.warn('Bici#setString not implemented')
    }
    increment(datapointId: number, increment: number): void {
        console.warn('Bici#increment not implemented')
    }
    addToStream(datapointId: number, datapointValueList: IDatapointValueList): void {
        console.warn('Bici#addToStream not implemented')
    }
    getExperienceId(): string {
        throw new Error('Bici#getExperienceId not implemented')
    }
    setPrimaryIdentity(identity: UserIdentity): void {
        console.warn('Bici#setPrimaryIdentity not implemented')
    }
    convertPuidToAnid(puid: string): string {
        throw new Error('Bici#convertPuidToAnid not implemented')
    }
    recordQosStream(scenarioId: ScenarioId, action: ApiId, target: PropertyId, durationInMillisecond: number, errorCode: number, errorType: ErrorType, pTransactionID: ITransactionId, datapointValueList: IDatapointValueList): void {
        console.warn('Bici#recordQosStream not implemented')
    }
    recordDependentApiQos(scenario: ScenarioId, api: ApiId, target: PropertyId, durationInMillisecond: number, requestSizeInBytes: number, returnCode: number, returnType: ErrorType, pTransactionID: ITransactionId, datapointValueList: IDatapointValueList): void {
        console.warn('Bici#recordDependentApiQos not implemented')
    }
    recordIncomingApiQos(datapointId: ScenarioId, action: ApiId, callerProperty: PropertyId, durationInMillisecond: number, requestSizeInBytes: number, returnCode: number, returnType: ErrorType, pTransactionID: ITransactionId, datapointValueList: IDatapointValueList): void {
        console.warn('Bici#recordIncomingApiQos not implemented')
    }
    recordInternalApiQos(datapointId: ScenarioId, action: ApiId, durationInMillisecond: number, requestSizeInBytes: number, returnCode: number, returnType: ErrorType, pTransactionID: ITransactionId, datapointValueList: IDatapointValueList): void {
        console.warn('Bici#recordInternalApiQos not implemented')
    }
    recordScenarioQos(datapointId: ScenarioId, durationInMillisecond: number, requestSizeInBytes: number, returnCode: number, returnType: ErrorType, pTransactionID: ITransactionId, datapointValueList: IDatapointValueList): void {
        console.warn('Bici#recordScenarioQos not implemented')
    }
    reloadConfig(): void {
        console.warn('Bici#reloadConfig not implemented')
    }
    testLoading(): string {
        throw new Error('Bici#testLoading not implemented')
    }
    compactNColsToOneStringCol(pBytes: number[]): string {
        throw new Error('Bici#compactNColsToOneStringCol not implemented')
    }
    uncompactOneStringColToNCols(header: string): number[] {
        throw new Error('Bici#uncompactOneStringColToNCols not implemented')
    }
}
