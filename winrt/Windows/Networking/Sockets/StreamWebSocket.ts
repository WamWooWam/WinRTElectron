// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:06 2021
// </auto-generated>
// --------------------------------------------------

import { IAsyncAction } from "../../Foundation/IAsyncAction";
import { IClosable } from "../../Foundation/IClosable";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { Uri } from "../../Foundation/Uri";
import { IWebSocket } from "./IWebSocket";
import { StreamWebSocketControl } from "./StreamWebSocketControl";
import { StreamWebSocketInformation } from "./StreamWebSocketInformation";
import { WebSocketClosedEventArgs } from "./WebSocketClosedEventArgs";
import { IInputStream } from "../../Storage/Streams/IInputStream";
import { IOutputStream } from "../../Storage/Streams/IOutputStream";

@GenerateShim('Windows.Networking.Sockets.StreamWebSocket')
export class StreamWebSocket implements IWebSocket, IClosable { 
    control: StreamWebSocketControl = null;
    information: StreamWebSocketInformation = null;
    inputStream: IInputStream = null;
    outputStream: IOutputStream = null;
    connectAsync(uri: Uri): IAsyncAction {
        throw new Error('StreamWebSocket#connectAsync not implemented')
    }
    setRequestHeader(headerName: string, headerValue: string): void {
        console.warn('StreamWebSocket#setRequestHeader not implemented')
    }
    closeWithStatus(code: number, reason: string): void {
        console.warn('StreamWebSocket#closeWithStatus not implemented')
    }
    close(): void {
        console.warn('StreamWebSocket#close not implemented')
    }

    #closed: Set<TypedEventHandler<IWebSocket, WebSocketClosedEventArgs>> = new Set();
    @Enumerable(true)
    set onclosed(handler: TypedEventHandler<IWebSocket, WebSocketClosedEventArgs>) {
        this.#closed.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'closed':
                this.#closed.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'closed':
                this.#closed.delete(handler);
                break;
        }
    }
}
