// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:06 2021
// </auto-generated>
// --------------------------------------------------

import { IVectorView } from "../../Foundation/Collections/IVectorView`1";
import { IAsyncAction } from "../../Foundation/IAsyncAction";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { IClosable } from "../../Foundation/IClosable";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { NetworkAdapter } from "../Connectivity/NetworkAdapter";
import { EndpointPair } from "../EndpointPair";
import { HostName } from "../HostName";
import { HostNameSortOptions } from "../HostNameSortOptions";
import { DatagramSocketControl } from "./DatagramSocketControl";
import { DatagramSocketInformation } from "./DatagramSocketInformation";
import { DatagramSocketMessageReceivedEventArgs } from "./DatagramSocketMessageReceivedEventArgs";
import { IOutputStream } from "../../Storage/Streams/IOutputStream";

@GenerateShim('Windows.Networking.Sockets.DatagramSocket')
export class DatagramSocket implements IClosable { 
    control: DatagramSocketControl = null;
    information: DatagramSocketInformation = null;
    outputStream: IOutputStream = null;
    connectAsync(remoteHostName: HostName, remoteServiceName: string): IAsyncAction {
        throw new Error('DatagramSocket#connectAsync not implemented')
    }
    connectWithEndpointPairAsync(endpointPair: EndpointPair): IAsyncAction {
        throw new Error('DatagramSocket#connectWithEndpointPairAsync not implemented')
    }
    bindServiceNameAsync(localServiceName: string): IAsyncAction {
        throw new Error('DatagramSocket#bindServiceNameAsync not implemented')
    }
    bindEndpointAsync(localHostName: HostName, localServiceName: string): IAsyncAction {
        throw new Error('DatagramSocket#bindEndpointAsync not implemented')
    }
    joinMulticastGroup(host: HostName): void {
        console.warn('DatagramSocket#joinMulticastGroup not implemented')
    }
    getOutputStreamAsync(remoteHostName: HostName, remoteServiceName: string): IAsyncOperation<IOutputStream> {
        throw new Error('DatagramSocket#getOutputStreamAsync not implemented')
    }
    getOutputStreamWithEndpointPairAsync(endpointPair: EndpointPair): IAsyncOperation<IOutputStream> {
        throw new Error('DatagramSocket#getOutputStreamWithEndpointPairAsync not implemented')
    }
    close(): void {
        console.warn('DatagramSocket#close not implemented')
    }
    bindServiceNameAndAdapterAsync(localServiceName: string, adapter: NetworkAdapter): IAsyncAction {
        throw new Error('DatagramSocket#bindServiceNameAndAdapterAsync not implemented')
    }
    static getEndpointPairsAsync(remoteHostName: HostName, remoteServiceName: string): IAsyncOperation<IVectorView<EndpointPair>> {
        throw new Error('DatagramSocket#getEndpointPairsAsync not implemented')
    }
    static getEndpointPairsWithSortOptionsAsync(remoteHostName: HostName, remoteServiceName: string, sortOptions: HostNameSortOptions): IAsyncOperation<IVectorView<EndpointPair>> {
        throw new Error('DatagramSocket#getEndpointPairsWithSortOptionsAsync not implemented')
    }

    #messageReceived: Set<TypedEventHandler<DatagramSocket, DatagramSocketMessageReceivedEventArgs>> = new Set();
    @Enumerable(true)
    set onmessagereceived(handler: TypedEventHandler<DatagramSocket, DatagramSocketMessageReceivedEventArgs>) {
        this.#messageReceived.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'messagereceived':
                this.#messageReceived.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'messagereceived':
                this.#messageReceived.delete(handler);
                break;
        }
    }
}
