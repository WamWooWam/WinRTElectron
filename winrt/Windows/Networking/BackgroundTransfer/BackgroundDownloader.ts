// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:05 2021
// </auto-generated>
// --------------------------------------------------

import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IVectorView } from "../../Foundation/Collections/IVectorView`1";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { Uri } from "../../Foundation/Uri";
import { BackgroundTransferCostPolicy } from "./BackgroundTransferCostPolicy";
import { BackgroundTransferGroup } from "./BackgroundTransferGroup";
import { DownloadOperation } from "./DownloadOperation";
import { IBackgroundTransferBase } from "./IBackgroundTransferBase";
import { UnconstrainedTransferRequestResult } from "./UnconstrainedTransferRequestResult";
import { PasswordCredential } from "../../Security/Credentials/PasswordCredential";
import { IStorageFile } from "../../Storage/IStorageFile";
import { IInputStream } from "../../Storage/Streams/IInputStream";
import { TileNotification } from "../../UI/Notifications/TileNotification";
import { ToastNotification } from "../../UI/Notifications/ToastNotification";

@GenerateShim('Windows.Networking.BackgroundTransfer.BackgroundDownloader')
export class BackgroundDownloader implements IBackgroundTransferBase { 
    serverCredential: PasswordCredential = null;
    proxyCredential: PasswordCredential = null;
    method: string = null;
    group: string = null;
    costPolicy: BackgroundTransferCostPolicy = null;
    transferGroup: BackgroundTransferGroup = null;
    successToastNotification: ToastNotification = null;
    successTileNotification: TileNotification = null;
    failureToastNotification: ToastNotification = null;
    failureTileNotification: TileNotification = null;
    createDownload(uri: Uri, resultFile: IStorageFile): DownloadOperation {
        throw new Error('BackgroundDownloader#createDownload not implemented')
    }
    createDownloadFromFile(uri: Uri, resultFile: IStorageFile, requestBodyFile: IStorageFile): DownloadOperation {
        throw new Error('BackgroundDownloader#createDownloadFromFile not implemented')
    }
    createDownloadAsync(uri: Uri, resultFile: IStorageFile, requestBodyStream: IInputStream): IAsyncOperation<DownloadOperation> {
        throw new Error('BackgroundDownloader#createDownloadAsync not implemented')
    }
    setRequestHeader(headerName: string, headerValue: string): void {
        console.warn('BackgroundDownloader#setRequestHeader not implemented')
    }
    static getCurrentDownloadsForTransferGroupAsync(group: BackgroundTransferGroup): IAsyncOperation<IVectorView<DownloadOperation>> {
        throw new Error('BackgroundDownloader#getCurrentDownloadsForTransferGroupAsync not implemented')
    }
    static requestUnconstrainedDownloadsAsync(operations: IIterable<DownloadOperation>): IAsyncOperation<UnconstrainedTransferRequestResult> {
        throw new Error('BackgroundDownloader#requestUnconstrainedDownloadsAsync not implemented')
    }
    static getCurrentDownloadsAsync(): IAsyncOperation<IVectorView<DownloadOperation>> {
        throw new Error('BackgroundDownloader#getCurrentDownloadsAsync not implemented')
    }
    static getCurrentDownloadsForGroupAsync(group: string): IAsyncOperation<IVectorView<DownloadOperation>> {
        throw new Error('BackgroundDownloader#getCurrentDownloadsForGroupAsync not implemented')
    }
}
