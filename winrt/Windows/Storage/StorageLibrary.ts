// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:07 2021
// </auto-generated>
// --------------------------------------------------

import { IObservableVector } from "../Foundation/Collections/IObservableVector`1";
import { AsyncOperation, IAsyncOperation } from "../Foundation/IAsyncOperation`1";
import { Enumerable } from "../Foundation/Interop/Enumerable";
import { GenerateShim } from "../Foundation/Interop/GenerateShim";
import { Vector } from "../Foundation/Interop/Vector`1";
import { TypedEventHandler } from "../Foundation/TypedEventHandler`2";
import { KnownFolders } from "./KnownFolders";
import { KnownLibraryId } from "./KnownLibraryId";
import { StorageFolder } from "./StorageFolder";

@GenerateShim('Windows.Storage.StorageLibrary')
export class StorageLibrary {
    constructor(folders: StorageFolder[]) {
        this.folders = new Vector(folders);
        this.saveFolder = folders[0];
    }

    folders: IObservableVector<StorageFolder> = null;
    saveFolder: StorageFolder = null;
    requestAddFolderAsync(): IAsyncOperation<StorageFolder> {
        throw new Error('StorageLibrary#requestAddFolderAsync not implemented')
    }
    requestRemoveFolderAsync(folder: StorageFolder): IAsyncOperation<boolean> {
        throw new Error('StorageLibrary#requestRemoveFolderAsync not implemented')
    }
    static getLibraryAsync(libraryId: KnownLibraryId): IAsyncOperation<StorageLibrary> {
        return AsyncOperation.from(async () => {
            switch (libraryId) {
                case KnownLibraryId.music:
                    return new StorageLibrary([KnownFolders.musicLibrary]);
                default:
                    throw new Error("Unknown libraryId " + KnownLibraryId[libraryId]);
            }
        })
    }

    #definitionChanged: Set<TypedEventHandler<StorageLibrary, any>> = new Set();
    @Enumerable(true)
    set ondefinitionchanged(handler: TypedEventHandler<StorageLibrary, any>) {
        this.#definitionChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'definitionchanged':
                this.#definitionChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'definitionchanged':
                this.#definitionChanged.delete(handler);
                break;
        }
    }
}
