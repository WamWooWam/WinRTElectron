// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:07 2021
// </auto-generated>
// --------------------------------------------------

import { DateTime } from "../../Foundation/DateTime";
import { IAsyncAction } from "../../Foundation/IAsyncAction";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { IStorageItemInformation } from "./IStorageItemInformation";
import { FileAccessMode } from "../FileAccessMode";
import { FileAttributes } from "../FileAttributes";
import { BasicProperties } from "../FileProperties/BasicProperties";
import { DocumentProperties } from "../FileProperties/DocumentProperties";
import { ImageProperties } from "../FileProperties/ImageProperties";
import { MusicProperties } from "../FileProperties/MusicProperties";
import { StorageItemContentProperties } from "../FileProperties/StorageItemContentProperties";
import { StorageItemThumbnail } from "../FileProperties/StorageItemThumbnail";
import { ThumbnailMode } from "../FileProperties/ThumbnailMode";
import { ThumbnailOptions } from "../FileProperties/ThumbnailOptions";
import { VideoProperties } from "../FileProperties/VideoProperties";
import { IStorageFile } from "../IStorageFile";
import { IStorageFilePropertiesWithAvailability } from "../IStorageFilePropertiesWithAvailability";
import { IStorageFolder } from "../IStorageFolder";
import { IStorageItem } from "../IStorageItem";
import { IStorageItem2 } from "../IStorageItem2";
import { IStorageItemProperties } from "../IStorageItemProperties";
import { IStorageItemPropertiesWithProvider } from "../IStorageItemPropertiesWithProvider";
import { NameCollisionOption } from "../NameCollisionOption";
import { StorageDeleteOption } from "../StorageDeleteOption";
import { StorageFile } from "../StorageFile";
import { StorageFolder } from "../StorageFolder";
import { StorageItemTypes } from "../StorageItemTypes";
import { StorageProvider } from "../StorageProvider";
import { StorageStreamTransaction } from "../StorageStreamTransaction";
import { IInputStream } from "../Streams/IInputStream";
import { IInputStreamReference } from "../Streams/IInputStreamReference";
import { IRandomAccessStream } from "../Streams/IRandomAccessStream";
import { IRandomAccessStreamReference } from "../Streams/IRandomAccessStreamReference";
import { IRandomAccessStreamWithContentType } from "../Streams/IRandomAccessStreamWithContentType";

@GenerateShim('Windows.Storage.BulkAccess.FileInformation')
export class FileInformation implements IStorageItemInformation, IStorageFile, IInputStreamReference, IRandomAccessStreamReference, IStorageItem, IStorageItemProperties, IStorageItem2, IStorageItemPropertiesWithProvider, IStorageFilePropertiesWithAvailability { 
    basicProperties: BasicProperties = null;
    documentProperties: DocumentProperties = null;
    imageProperties: ImageProperties = null;
    musicProperties: MusicProperties = null;
    thumbnail: StorageItemThumbnail = null;
    videoProperties: VideoProperties = null;
    contentType: string = null;
    fileType: string = null;
    attributes: FileAttributes = null;
    dateCreated: Date = null;
    name: string = null;
    path: string = null;
    provider: StorageProvider = null;
    displayName: string = null;
    displayType: string = null;
    folderRelativeId: string = null;
    properties: StorageItemContentProperties = null;
    isAvailable: boolean = null;
    openAsync(accessMode: FileAccessMode): IAsyncOperation<IRandomAccessStream> {
        throw new Error('FileInformation#openAsync not implemented')
    }
    openTransactedWriteAsync(): IAsyncOperation<StorageStreamTransaction> {
        throw new Error('FileInformation#openTransactedWriteAsync not implemented')
    }
    copyOverloadDefaultNameAndOptions(destinationFolder: IStorageFolder): IAsyncOperation<StorageFile> {
        throw new Error('FileInformation#copyOverloadDefaultNameAndOptions not implemented')
    }
    copyOverloadDefaultOptions(destinationFolder: IStorageFolder, desiredNewName: string): IAsyncOperation<StorageFile> {
        throw new Error('FileInformation#copyOverloadDefaultOptions not implemented')
    }
    copyOverload(destinationFolder: IStorageFolder, desiredNewName: string, option: NameCollisionOption): IAsyncOperation<StorageFile> {
        throw new Error('FileInformation#copyOverload not implemented')
    }
    copyAndReplaceAsync(fileToReplace: IStorageFile): IAsyncAction {
        throw new Error('FileInformation#copyAndReplaceAsync not implemented')
    }
    moveOverloadDefaultNameAndOptions(destinationFolder: IStorageFolder): IAsyncAction {
        throw new Error('FileInformation#moveOverloadDefaultNameAndOptions not implemented')
    }
    moveOverloadDefaultOptions(destinationFolder: IStorageFolder, desiredNewName: string): IAsyncAction {
        throw new Error('FileInformation#moveOverloadDefaultOptions not implemented')
    }
    moveOverload(destinationFolder: IStorageFolder, desiredNewName: string, option: NameCollisionOption): IAsyncAction {
        throw new Error('FileInformation#moveOverload not implemented')
    }
    moveAndReplaceAsync(fileToReplace: IStorageFile): IAsyncAction {
        throw new Error('FileInformation#moveAndReplaceAsync not implemented')
    }
    renameAsyncOverloadDefaultOptions(desiredName: string): IAsyncAction {
        throw new Error('FileInformation#renameAsyncOverloadDefaultOptions not implemented')
    }
    renameAsync(desiredName: string, option: NameCollisionOption): IAsyncAction {
        throw new Error('FileInformation#renameAsync not implemented')
    }
    deleteAsyncOverloadDefaultOptions(): IAsyncAction {
        throw new Error('FileInformation#deleteAsyncOverloadDefaultOptions not implemented')
    }
    deleteAsync(option: StorageDeleteOption): IAsyncAction {
        throw new Error('FileInformation#deleteAsync not implemented')
    }
    getBasicPropertiesAsync(): IAsyncOperation<BasicProperties> {
        throw new Error('FileInformation#getBasicPropertiesAsync not implemented')
    }
    isOfType(type: StorageItemTypes): boolean {
        throw new Error('FileInformation#isOfType not implemented')
    }
    openReadAsync(): IAsyncOperation<IRandomAccessStreamWithContentType> {
        throw new Error('FileInformation#openReadAsync not implemented')
    }
    openSequentialReadAsync(): IAsyncOperation<IInputStream> {
        throw new Error('FileInformation#openSequentialReadAsync not implemented')
    }
    getThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode: ThumbnailMode): IAsyncOperation<StorageItemThumbnail> {
        throw new Error('FileInformation#getThumbnailAsyncOverloadDefaultSizeDefaultOptions not implemented')
    }
    getThumbnailAsyncOverloadDefaultOptions(mode: ThumbnailMode, requestedSize: number): IAsyncOperation<StorageItemThumbnail> {
        throw new Error('FileInformation#getThumbnailAsyncOverloadDefaultOptions not implemented')
    }
    getThumbnailAsync(mode: ThumbnailMode, requestedSize: number, options: ThumbnailOptions): IAsyncOperation<StorageItemThumbnail> {
        throw new Error('FileInformation#getThumbnailAsync not implemented')
    }
    getParentAsync(): IAsyncOperation<StorageFolder> {
        throw new Error('FileInformation#getParentAsync not implemented')
    }
    isEqual(item: IStorageItem): boolean {
        throw new Error('FileInformation#isEqual not implemented')
    }

    #propertiesUpdated: Set<TypedEventHandler<IStorageItemInformation, any>> = new Set();
    @Enumerable(true)
    set onpropertiesupdated(handler: TypedEventHandler<IStorageItemInformation, any>) {
        this.#propertiesUpdated.add(handler);
    }

    #thumbnailUpdated: Set<TypedEventHandler<IStorageItemInformation, any>> = new Set();
    @Enumerable(true)
    set onthumbnailupdated(handler: TypedEventHandler<IStorageItemInformation, any>) {
        this.#thumbnailUpdated.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertiesupdated':
                this.#propertiesUpdated.add(handler);
                break;
            case 'thumbnailupdated':
                this.#thumbnailUpdated.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'propertiesupdated':
                this.#propertiesUpdated.delete(handler);
                break;
            case 'thumbnailupdated':
                this.#thumbnailUpdated.delete(handler);
                break;
        }
    }
}
