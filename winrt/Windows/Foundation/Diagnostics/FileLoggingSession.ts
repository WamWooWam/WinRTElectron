// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:03 2021
// </auto-generated>
// --------------------------------------------------

import { IFileLoggingSession } from "./IFileLoggingSession";
import { ILoggingChannel } from "./ILoggingChannel";
import { LogFileGeneratedEventArgs } from "./LogFileGeneratedEventArgs";
import { LoggingLevel } from "./LoggingLevel";
import { IAsyncOperation } from "../IAsyncOperation`1";
import { IClosable } from "../IClosable";
import { Enumerable } from "../Interop/Enumerable";
import { GenerateShim } from "../Interop/GenerateShim";
import { TypedEventHandler } from "../TypedEventHandler`2";
import { StorageFile } from "../../Storage/StorageFile";

@GenerateShim('Windows.Foundation.Diagnostics.FileLoggingSession')
export class FileLoggingSession implements IFileLoggingSession, IClosable { 
    name: string = null;
    constructor(name: string) {
        console.warn('FileLoggingSession.ctor not implemented')
    }
    addLoggingChannel(loggingChannel: ILoggingChannel): void {
        console.warn('FileLoggingSession#addLoggingChannel not implemented')
    }
    addLoggingChannelWithLevel(loggingChannel: ILoggingChannel, maxLevel: LoggingLevel): void {
        console.warn('FileLoggingSession#addLoggingChannelWithLevel not implemented')
    }
    removeLoggingChannel(loggingChannel: ILoggingChannel): void {
        console.warn('FileLoggingSession#removeLoggingChannel not implemented')
    }
    closeAndSaveToFileAsync(): IAsyncOperation<StorageFile> {
        throw new Error('FileLoggingSession#closeAndSaveToFileAsync not implemented')
    }
    close(): void {
        console.warn('FileLoggingSession#close not implemented')
    }

    #logFileGenerated: Set<TypedEventHandler<IFileLoggingSession, LogFileGeneratedEventArgs>> = new Set();
    @Enumerable(true)
    set onlogfilegenerated(handler: TypedEventHandler<IFileLoggingSession, LogFileGeneratedEventArgs>) {
        this.#logFileGenerated.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'logfilegenerated':
                this.#logFileGenerated.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'logfilegenerated':
                this.#logFileGenerated.delete(handler);
                break;
        }
    }
}
