// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:05 2021
// </auto-generated>
// --------------------------------------------------

import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TimeSpan } from "../../Foundation/TimeSpan";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { IMediaSource } from "./IMediaSource";
import { IMediaStreamDescriptor } from "./IMediaStreamDescriptor";
import { MediaStreamSourceClosedEventArgs } from "./MediaStreamSourceClosedEventArgs";
import { MediaStreamSourceErrorStatus } from "./MediaStreamSourceErrorStatus";
import { MediaStreamSourceSampleRequestedEventArgs } from "./MediaStreamSourceSampleRequestedEventArgs";
import { MediaStreamSourceStartingEventArgs } from "./MediaStreamSourceStartingEventArgs";
import { MediaStreamSourceSwitchStreamsRequestedEventArgs } from "./MediaStreamSourceSwitchStreamsRequestedEventArgs";
import { MediaProtectionManager } from "../Protection/MediaProtectionManager";
import { MusicProperties } from "../../Storage/FileProperties/MusicProperties";
import { VideoProperties } from "../../Storage/FileProperties/VideoProperties";
import { IRandomAccessStreamReference } from "../../Storage/Streams/IRandomAccessStreamReference";

@GenerateShim('Windows.Media.Core.MediaStreamSource')
export class MediaStreamSource implements IMediaSource { 
    thumbnail: IRandomAccessStreamReference = null;
    mediaProtectionManager: MediaProtectionManager = null;
    duration: number = null;
    canSeek: boolean = null;
    bufferTime: number = null;
    musicProperties: MusicProperties = null;
    videoProperties: VideoProperties = null;
    // constructor(descriptor: IMediaStreamDescriptor);
    // constructor(descriptor: IMediaStreamDescriptor, descriptor2: IMediaStreamDescriptor);
    constructor(...args) { }
    notifyError(errorStatus: MediaStreamSourceErrorStatus): void {
        console.warn('MediaStreamSource#notifyError not implemented')
    }
    addStreamDescriptor(descriptor: IMediaStreamDescriptor): void {
        console.warn('MediaStreamSource#addStreamDescriptor not implemented')
    }
    setBufferedRange(startOffset: number, endOffset: number): void {
        console.warn('MediaStreamSource#setBufferedRange not implemented')
    }
    addProtectionKey(streamDescriptor: IMediaStreamDescriptor, keyIdentifier: number[], licenseData: number[]): void {
        console.warn('MediaStreamSource#addProtectionKey not implemented')
    }

    #closed: Set<TypedEventHandler<MediaStreamSource, MediaStreamSourceClosedEventArgs>> = new Set();
    @Enumerable(true)
    set onclosed(handler: TypedEventHandler<MediaStreamSource, MediaStreamSourceClosedEventArgs>) {
        this.#closed.add(handler);
    }

    #paused: Set<TypedEventHandler<MediaStreamSource, any>> = new Set();
    @Enumerable(true)
    set onpaused(handler: TypedEventHandler<MediaStreamSource, any>) {
        this.#paused.add(handler);
    }

    #sampleRequested: Set<TypedEventHandler<MediaStreamSource, MediaStreamSourceSampleRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set onsamplerequested(handler: TypedEventHandler<MediaStreamSource, MediaStreamSourceSampleRequestedEventArgs>) {
        this.#sampleRequested.add(handler);
    }

    #starting: Set<TypedEventHandler<MediaStreamSource, MediaStreamSourceStartingEventArgs>> = new Set();
    @Enumerable(true)
    set onstarting(handler: TypedEventHandler<MediaStreamSource, MediaStreamSourceStartingEventArgs>) {
        this.#starting.add(handler);
    }

    #switchStreamsRequested: Set<TypedEventHandler<MediaStreamSource, MediaStreamSourceSwitchStreamsRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set onswitchstreamsrequested(handler: TypedEventHandler<MediaStreamSource, MediaStreamSourceSwitchStreamsRequestedEventArgs>) {
        this.#switchStreamsRequested.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'closed':
                this.#closed.add(handler);
                break;
            case 'paused':
                this.#paused.add(handler);
                break;
            case 'samplerequested':
                this.#sampleRequested.add(handler);
                break;
            case 'starting':
                this.#starting.add(handler);
                break;
            case 'switchstreamsrequested':
                this.#switchStreamsRequested.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'closed':
                this.#closed.delete(handler);
                break;
            case 'paused':
                this.#paused.delete(handler);
                break;
            case 'samplerequested':
                this.#sampleRequested.delete(handler);
                break;
            case 'starting':
                this.#starting.delete(handler);
                break;
            case 'switchstreamsrequested':
                this.#switchStreamsRequested.delete(handler);
                break;
        }
    }
}
