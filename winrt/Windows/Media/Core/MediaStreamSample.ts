// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:05 2021
// </auto-generated>
// --------------------------------------------------

import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TimeSpan } from "../../Foundation/TimeSpan";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { MediaStreamSamplePropertySet } from "./MediaStreamSamplePropertySet";
import { MediaStreamSampleProtectionProperties } from "./MediaStreamSampleProtectionProperties";
import { IBuffer } from "../../Storage/Streams/IBuffer";
import { IInputStream } from "../../Storage/Streams/IInputStream";

@GenerateShim('Windows.Media.Core.MediaStreamSample')
export class MediaStreamSample { 
    keyFrame: boolean = null;
    duration: number = null;
    discontinuous: boolean = null;
    decodeTimestamp: number = null;
    buffer: IBuffer = null;
    extendedProperties: MediaStreamSamplePropertySet = null;
    protection: MediaStreamSampleProtectionProperties = null;
    timestamp: number = null;
    static createFromBuffer(buffer: IBuffer, timestamp: number): MediaStreamSample {
        throw new Error('MediaStreamSample#createFromBuffer not implemented')
    }
    static createFromStreamAsync(stream: IInputStream, count: number, timestamp: number): IAsyncOperation<MediaStreamSample> {
        throw new Error('MediaStreamSample#createFromStreamAsync not implemented')
    }

    #processed: Set<TypedEventHandler<MediaStreamSample, any>> = new Set();
    @Enumerable(true)
    set onprocessed(handler: TypedEventHandler<MediaStreamSample, any>) {
        this.#processed.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'processed':
                this.#processed.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'processed':
                this.#processed.delete(handler);
                break;
        }
    }
}
