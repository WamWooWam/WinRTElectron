// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:05 2021
// </auto-generated>
// --------------------------------------------------

import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { CallControlEventHandler } from "./CallControlEventHandler";
import { DialRequestedEventHandler } from "./DialRequestedEventHandler";
import { KeypadPressedEventHandler } from "./KeypadPressedEventHandler";
import { RedialRequestedEventHandler } from "./RedialRequestedEventHandler";

@GenerateShim('Windows.Media.Devices.CallControl')
export class CallControl { 
    hasRinger: boolean = null;
    indicateNewIncomingCall(enableRinger: boolean, callerId: string): number {
        throw new Error('CallControl#indicateNewIncomingCall not implemented')
    }
    indicateNewOutgoingCall(): number {
        throw new Error('CallControl#indicateNewOutgoingCall not implemented')
    }
    indicateActiveCall(callToken: number): void {
        console.warn('CallControl#indicateActiveCall not implemented')
    }
    endCall(callToken: number): void {
        console.warn('CallControl#endCall not implemented')
    }
    static getDefault(): CallControl {
        throw new Error('CallControl#getDefault not implemented')
    }
    static fromId(deviceId: string): CallControl {
        throw new Error('CallControl#fromId not implemented')
    }

    #answerRequested: Set<CallControlEventHandler> = new Set();
    @Enumerable(true)
    set onanswerrequested(handler: CallControlEventHandler) {
        this.#answerRequested.add(handler);
    }

    #audioTransferRequested: Set<CallControlEventHandler> = new Set();
    @Enumerable(true)
    set onaudiotransferrequested(handler: CallControlEventHandler) {
        this.#audioTransferRequested.add(handler);
    }

    #dialRequested: Set<DialRequestedEventHandler> = new Set();
    @Enumerable(true)
    set ondialrequested(handler: DialRequestedEventHandler) {
        this.#dialRequested.add(handler);
    }

    #hangUpRequested: Set<CallControlEventHandler> = new Set();
    @Enumerable(true)
    set onhanguprequested(handler: CallControlEventHandler) {
        this.#hangUpRequested.add(handler);
    }

    #keypadPressed: Set<KeypadPressedEventHandler> = new Set();
    @Enumerable(true)
    set onkeypadpressed(handler: KeypadPressedEventHandler) {
        this.#keypadPressed.add(handler);
    }

    #redialRequested: Set<RedialRequestedEventHandler> = new Set();
    @Enumerable(true)
    set onredialrequested(handler: RedialRequestedEventHandler) {
        this.#redialRequested.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'answerrequested':
                this.#answerRequested.add(handler);
                break;
            case 'audiotransferrequested':
                this.#audioTransferRequested.add(handler);
                break;
            case 'dialrequested':
                this.#dialRequested.add(handler);
                break;
            case 'hanguprequested':
                this.#hangUpRequested.add(handler);
                break;
            case 'keypadpressed':
                this.#keypadPressed.add(handler);
                break;
            case 'redialrequested':
                this.#redialRequested.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'answerrequested':
                this.#answerRequested.delete(handler);
                break;
            case 'audiotransferrequested':
                this.#audioTransferRequested.delete(handler);
                break;
            case 'dialrequested':
                this.#dialRequested.delete(handler);
                break;
            case 'hanguprequested':
                this.#hangUpRequested.delete(handler);
                break;
            case 'keypadpressed':
                this.#keypadPressed.delete(handler);
                break;
            case 'redialrequested':
                this.#redialRequested.delete(handler);
                break;
        }
    }
}
