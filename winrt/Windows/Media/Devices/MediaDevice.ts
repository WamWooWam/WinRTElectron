// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:05 2021
// </auto-generated>
// --------------------------------------------------

import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { AudioDeviceRole } from "./AudioDeviceRole";
import { DefaultAudioCaptureDeviceChangedEventArgs } from "./DefaultAudioCaptureDeviceChangedEventArgs";
import { DefaultAudioRenderDeviceChangedEventArgs } from "./DefaultAudioRenderDeviceChangedEventArgs";

@GenerateShim('Windows.Media.Devices.MediaDevice')
export class MediaDevice { 
    static getAudioCaptureSelector(): string {
        throw new Error('MediaDevice#getAudioCaptureSelector not implemented')
    }
    static getAudioRenderSelector(): string {
        throw new Error('MediaDevice#getAudioRenderSelector not implemented')
    }
    static getVideoCaptureSelector(): string {
        throw new Error('MediaDevice#getVideoCaptureSelector not implemented')
    }
    static getDefaultAudioCaptureId(role: AudioDeviceRole): string {
        throw new Error('MediaDevice#getDefaultAudioCaptureId not implemented')
    }
    static getDefaultAudioRenderId(role: AudioDeviceRole): string {
        throw new Error('MediaDevice#getDefaultAudioRenderId not implemented')
    }

    static __defaultAudioCaptureDeviceChanged: Set<TypedEventHandler<any, DefaultAudioCaptureDeviceChangedEventArgs>> = new Set();
    @Enumerable(true)
    static set ondefaultaudiocapturedevicechanged(handler: TypedEventHandler<any, DefaultAudioCaptureDeviceChangedEventArgs>) {
        MediaDevice.__defaultAudioCaptureDeviceChanged.add(handler);
    }

    static __defaultAudioRenderDeviceChanged: Set<TypedEventHandler<any, DefaultAudioRenderDeviceChangedEventArgs>> = new Set();
    @Enumerable(true)
    static set ondefaultaudiorenderdevicechanged(handler: TypedEventHandler<any, DefaultAudioRenderDeviceChangedEventArgs>) {
        MediaDevice.__defaultAudioRenderDeviceChanged.add(handler);
    }

    static addEventListener(name: string, handler: any) {
        switch (name) {
            case 'defaultaudiocapturedevicechanged':
                MediaDevice.__defaultAudioCaptureDeviceChanged.add(handler);
                break;
            case 'defaultaudiorenderdevicechanged':
                MediaDevice.__defaultAudioRenderDeviceChanged.add(handler);
                break;
        }
    }

    static removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'defaultaudiocapturedevicechanged':
                MediaDevice.__defaultAudioCaptureDeviceChanged.delete(handler);
                break;
            case 'defaultaudiorenderdevicechanged':
                MediaDevice.__defaultAudioRenderDeviceChanged.delete(handler);
                break;
        }
    }
}
