// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:05 2021
// </auto-generated>
// --------------------------------------------------

import { IPropertySet } from "../../Foundation/Collections/IPropertySet";
import { PropertySet } from "../../Foundation/Collections/PropertySet";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { ComponentLoadFailedEventHandler } from "./ComponentLoadFailedEventHandler";
import { RebootNeededEventHandler } from "./RebootNeededEventHandler";
import { ServiceRequestedEventHandler } from "./ServiceRequestedEventHandler";

@GenerateShim('Windows.Media.Protection.MediaProtectionManager')
export class MediaProtectionManager { 
    properties: IPropertySet = null;

    constructor() {
        this.properties = new PropertySet();
    }

    #componentLoadFailed: Set<ComponentLoadFailedEventHandler> = new Set();
    @Enumerable(true)
    set oncomponentloadfailed(handler: ComponentLoadFailedEventHandler) {
        this.#componentLoadFailed.add(handler);
    }

    #rebootNeeded: Set<RebootNeededEventHandler> = new Set();
    @Enumerable(true)
    set onrebootneeded(handler: RebootNeededEventHandler) {
        this.#rebootNeeded.add(handler);
    }

    #serviceRequested: Set<ServiceRequestedEventHandler> = new Set();
    @Enumerable(true)
    set onservicerequested(handler: ServiceRequestedEventHandler) {
        this.#serviceRequested.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'componentloadfailed':
                this.#componentLoadFailed.add(handler);
                break;
            case 'rebootneeded':
                this.#rebootNeeded.add(handler);
                break;
            case 'servicerequested':
                this.#serviceRequested.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'componentloadfailed':
                this.#componentLoadFailed.delete(handler);
                break;
            case 'rebootneeded':
                this.#rebootNeeded.delete(handler);
                break;
            case 'servicerequested':
                this.#serviceRequested.delete(handler);
                break;
        }
    }
}
