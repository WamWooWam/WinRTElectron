// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:04 2021
// </auto-generated>
// --------------------------------------------------

import { EventHandler } from "../Foundation/EventHandler`1";
import { Enumerable } from "../Foundation/Interop/Enumerable";
import { GenerateShim } from "../Foundation/Interop/GenerateShim";
import { Uri } from "../Foundation/Uri";
import { SoundLevel } from "./SoundLevel";

@GenerateShim('Windows.Media.MediaControl')
export class MediaControl { 
    static trackName: string = null;
    static isPlaying: boolean = null;
    static artistName: string = null;
    static albumArt: Uri = null;
    static soundLevel: SoundLevel = null;

    private static __channelDownPressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onchanneldownpressed(handler: EventHandler<any>) {
        MediaControl.__channelDownPressed.add(handler);
    }

    static __channelUpPressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onchanneluppressed(handler: EventHandler<any>) {
        MediaControl.__channelUpPressed.add(handler);
    }

    static __fastForwardPressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onfastforwardpressed(handler: EventHandler<any>) {
        MediaControl.__fastForwardPressed.add(handler);
    }

    static __nextTrackPressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onnexttrackpressed(handler: EventHandler<any>) {
        MediaControl.__nextTrackPressed.add(handler);
    }

    static __pausePressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onpausepressed(handler: EventHandler<any>) {
        MediaControl.__pausePressed.add(handler);
    }

    static __playPauseTogglePressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onplaypausetogglepressed(handler: EventHandler<any>) {
        MediaControl.__playPauseTogglePressed.add(handler);
    }

    static __playPressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onplaypressed(handler: EventHandler<any>) {
        MediaControl.__playPressed.add(handler);
    }

    static __previousTrackPressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onprevioustrackpressed(handler: EventHandler<any>) {
        MediaControl.__previousTrackPressed.add(handler);
    }

    static __recordPressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onrecordpressed(handler: EventHandler<any>) {
        MediaControl.__recordPressed.add(handler);
    }

    static __rewindPressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onrewindpressed(handler: EventHandler<any>) {
        MediaControl.__rewindPressed.add(handler);
    }

    static __soundLevelChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onsoundlevelchanged(handler: EventHandler<any>) {
        MediaControl.__soundLevelChanged.add(handler);
    }

    static __stopPressed: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onstoppressed(handler: EventHandler<any>) {
        MediaControl.__stopPressed.add(handler);
    }

    static addEventListener(name: string, handler: any) {
        switch (name) {
            case 'channeldownpressed':
                MediaControl.__channelDownPressed.add(handler);
                break;
            case 'channeluppressed':
                MediaControl.__channelUpPressed.add(handler);
                break;
            case 'fastforwardpressed':
                MediaControl.__fastForwardPressed.add(handler);
                break;
            case 'nexttrackpressed':
                MediaControl.__nextTrackPressed.add(handler);
                break;
            case 'pausepressed':
                MediaControl.__pausePressed.add(handler);
                break;
            case 'playpausetogglepressed':
                MediaControl.__playPauseTogglePressed.add(handler);
                break;
            case 'playpressed':
                MediaControl.__playPressed.add(handler);
                break;
            case 'previoustrackpressed':
                MediaControl.__previousTrackPressed.add(handler);
                break;
            case 'recordpressed':
                MediaControl.__recordPressed.add(handler);
                break;
            case 'rewindpressed':
                MediaControl.__rewindPressed.add(handler);
                break;
            case 'soundlevelchanged':
                MediaControl.__soundLevelChanged.add(handler);
                break;
            case 'stoppressed':
                MediaControl.__stopPressed.add(handler);
                break;
        }
    }

    static removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'channeldownpressed':
                MediaControl.__channelDownPressed.delete(handler);
                break;
            case 'channeluppressed':
                MediaControl.__channelUpPressed.delete(handler);
                break;
            case 'fastforwardpressed':
                MediaControl.__fastForwardPressed.delete(handler);
                break;
            case 'nexttrackpressed':
                MediaControl.__nextTrackPressed.delete(handler);
                break;
            case 'pausepressed':
                MediaControl.__pausePressed.delete(handler);
                break;
            case 'playpausetogglepressed':
                MediaControl.__playPauseTogglePressed.delete(handler);
                break;
            case 'playpressed':
                MediaControl.__playPressed.delete(handler);
                break;
            case 'previoustrackpressed':
                MediaControl.__previousTrackPressed.delete(handler);
                break;
            case 'recordpressed':
                MediaControl.__recordPressed.delete(handler);
                break;
            case 'rewindpressed':
                MediaControl.__rewindPressed.delete(handler);
                break;
            case 'soundlevelchanged':
                MediaControl.__soundLevelChanged.delete(handler);
                break;
            case 'stoppressed':
                MediaControl.__stopPressed.delete(handler);
                break;
        }
    }
}
