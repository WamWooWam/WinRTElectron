// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:04 2021
// </auto-generated>
// --------------------------------------------------

import { DataPackagePropertySet } from "../../ApplicationModel/DataTransfer/DataPackagePropertySet";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { IPrintDocumentSource } from "./IPrintDocumentSource";
import { PrintTaskCompletedEventArgs } from "./PrintTaskCompletedEventArgs";
import { PrintTaskOptions } from "./PrintTaskOptions";
import { PrintTaskProgressingEventArgs } from "./PrintTaskProgressingEventArgs";

@GenerateShim('Windows.Graphics.Printing.PrintTask')
export class PrintTask { 
    options: PrintTaskOptions = null;
    properties: DataPackagePropertySet = null;
    source: IPrintDocumentSource = null;
    isPrinterTargetEnabled: boolean = null;
    is3DManufacturingTargetEnabled: boolean = null;

    #completed: Set<TypedEventHandler<PrintTask, PrintTaskCompletedEventArgs>> = new Set();
    @Enumerable(true)
    set oncompleted(handler: TypedEventHandler<PrintTask, PrintTaskCompletedEventArgs>) {
        this.#completed.add(handler);
    }

    #previewing: Set<TypedEventHandler<PrintTask, any>> = new Set();
    @Enumerable(true)
    set onpreviewing(handler: TypedEventHandler<PrintTask, any>) {
        this.#previewing.add(handler);
    }

    #progressing: Set<TypedEventHandler<PrintTask, PrintTaskProgressingEventArgs>> = new Set();
    @Enumerable(true)
    set onprogressing(handler: TypedEventHandler<PrintTask, PrintTaskProgressingEventArgs>) {
        this.#progressing.add(handler);
    }

    #submitting: Set<TypedEventHandler<PrintTask, any>> = new Set();
    @Enumerable(true)
    set onsubmitting(handler: TypedEventHandler<PrintTask, any>) {
        this.#submitting.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'completed':
                this.#completed.add(handler);
                break;
            case 'previewing':
                this.#previewing.add(handler);
                break;
            case 'progressing':
                this.#progressing.add(handler);
                break;
            case 'submitting':
                this.#submitting.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'completed':
                this.#completed.delete(handler);
                break;
            case 'previewing':
                this.#previewing.delete(handler);
                break;
            case 'progressing':
                this.#progressing.delete(handler);
                break;
            case 'submitting':
                this.#submitting.delete(handler);
                break;
        }
    }
}
