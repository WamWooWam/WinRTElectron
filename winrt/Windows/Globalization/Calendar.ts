// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:03 2021
// </auto-generated>
// --------------------------------------------------

import { IIterable } from "../Foundation/Collections/IIterable`1";
import { IVectorView } from "../Foundation/Collections/IVectorView`1";
import { DateTime } from "../Foundation/DateTime";
import { GenerateShim } from "../Foundation/Interop/GenerateShim";
import { DayOfWeek } from "./DayOfWeek";

@GenerateShim('Windows.Globalization.Calendar')
export class Calendar {
    private date: Date;

    get second() {
        return this.date.getSeconds();
    }

    set second(num: number) {
        this.date.setSeconds(num);
    }

    period: number = null;
    numeralSystem: string = null;

    get year() {
        return this.date.getFullYear();
    }

    set year(num: number) {
        this.date.setFullYear(num);
    }

    get nanosecond() {
        return this.date.getMilliseconds() * 1000;
    }

    set nanosecond(num: number) {
        this.date.setMilliseconds(num / 1000);
    }

    get minute() {
        return this.date.getMinutes();
    }

    set minute(num: number) {
        this.date.setMinutes(num);
    }

    get hour() {
        return this.date.getHours();
    }

    set hour(num: number) {
        this.date.setHours(num);
    }

    era: number = null;

    get month() {
        return this.date.getMonth();
    }

    set month(num: number) {
        this.date.setMonth(num);
    }

    get day() {
        return this.date.getDate();
    }

    set day(num: number) {
        this.date.setDate(num);
    }

    firstPeriodInThisDay: number = null;
    firstSecondInThisMinute: number = null;
    firstYearInThisEra: number = null;
    isDaylightSavingTime: boolean = null;
    languages: IVectorView<string> = null;
    lastEra: number = null;
    lastHourInThisPeriod: number = null;
    lastMinuteInThisHour: number = null;
    lastMonthInThisYear: number = null;
    firstEra: number = null;
    lastPeriodInThisDay: number = null;
    lastSecondInThisMinute: number = null;
    lastYearInThisEra: number = null;

    get dayOfWeek() {
        return this.date.getDay();
    }

    firstDayInThisMonth: number = null;
    numberOfDaysInThisMonth: number = null;
    numberOfEras: number = null;
    numberOfHoursInThisPeriod: number = null;
    numberOfMonthsInThisYear: number = null;
    numberOfPeriodsInThisDay: number = null;
    numberOfSecondsInThisMinute: number = null;
    numberOfYearsInThisEra: number = null;
    lastDayInThisMonth: number = null;
    firstHourInThisPeriod: number = null;
    firstMinuteInThisHour: number = null;
    resolvedLanguage: string = null;
    firstMonthInThisYear: number = null;
    numberOfMinutesInThisHour: number = null;
    // constructor();
    // constructor(languages: IIterable<string>);
    // constructor(languages: IIterable<string>, calendar: string, clock: string);
    // constructor(languages: IIterable<string>, calendar: string, clock: string, timeZoneId: string);
    constructor(...args) {
        this.date = new Date(Date.now());
    }

    addDays(days: number) {
        this.date.setDate(this.date.getDate() + days);
    }

    addMonths(months: number) {
        this.date.setMonth(this.date.getMonth() + months);
    }

    addYears(years: number) {
        this.date.setFullYear(this.date.getFullYear() + years);
    }

    addHours(hours: number) {
        this.date.setHours(this.date.getHours() + hours);
    }

    addMinutes(minutes: number) {
        this.date.setMinutes(this.date.getMinutes() + minutes);
    }

    addSeconds(seconds: number) {
        this.date.setSeconds(this.date.getSeconds() + seconds);
    }

    setToMin() {
        this.date = new Date(-8640000000000000 / 2);
    }

    setToMax() {
        this.date = new Date(8640000000000000 / 2);
    }

    getDateTime() {
        return this.date;
    }

    setDateTime(date: Date) {
        this.date = date;
    }

    clone(): Calendar {
        throw new Error('Calendar#clone not implemented')
    }
    getCalendarSystem(): string {
        throw new Error('Calendar#getCalendarSystem not implemented')
    }
    changeCalendarSystem(value: string): void {
        console.warn('Calendar#changeCalendarSystem not implemented')
    }
    getClock(): string {
        throw new Error('Calendar#getClock not implemented')
    }
    changeClock(value: string): void {
        console.warn('Calendar#changeClock not implemented')
    }
    setToNow(): void {
        console.warn('Calendar#setToNow not implemented')
    }
    addEras(eras: number): void {
        console.warn('Calendar#addEras not implemented')
    }
    eraAsFullString(): string {
        throw new Error('Calendar#eraAsFullString not implemented')
    }
    eraAsString(idealLength: number): string {
        throw new Error('Calendar#eraAsString not implemented')
    }
    yearAsString(): string {
        throw new Error('Calendar#yearAsString not implemented')
    }
    yearAsTruncatedString(remainingDigits: number): string {
        throw new Error('Calendar#yearAsTruncatedString not implemented')
    }
    yearAsPaddedString(minDigits: number): string {
        throw new Error('Calendar#yearAsPaddedString not implemented')
    }
    monthAsFullString(): string {
        throw new Error('Calendar#monthAsFullString not implemented')
    }
    monthAsString(idealLength: number): string {
        throw new Error('Calendar#monthAsString not implemented')
    }
    monthAsFullSoloString(): string {
        throw new Error('Calendar#monthAsFullSoloString not implemented')
    }
    monthAsSoloString(idealLength: number): string {
        throw new Error('Calendar#monthAsSoloString not implemented')
    }
    monthAsNumericString(): string {
        throw new Error('Calendar#monthAsNumericString not implemented')
    }
    monthAsPaddedNumericString(minDigits: number): string {
        throw new Error('Calendar#monthAsPaddedNumericString not implemented')
    }
    addWeeks(weeks: number): void {
        console.warn('Calendar#addWeeks not implemented')
    }
    dayAsString(): string {
        throw new Error('Calendar#dayAsString not implemented')
    }
    dayAsPaddedString(minDigits: number): string {
        throw new Error('Calendar#dayAsPaddedString not implemented')
    }
    dayOfWeekAsFullString(): string {
        throw new Error('Calendar#dayOfWeekAsFullString not implemented')
    }
    dayOfWeekAsString(idealLength: number): string {
        throw new Error('Calendar#dayOfWeekAsString not implemented')
    }
    dayOfWeekAsFullSoloString(): string {
        throw new Error('Calendar#dayOfWeekAsFullSoloString not implemented')
    }
    dayOfWeekAsSoloString(idealLength: number): string {
        throw new Error('Calendar#dayOfWeekAsSoloString not implemented')
    }
    addPeriods(periods: number): void {
        console.warn('Calendar#addPeriods not implemented')
    }
    periodAsFullString(): string {
        throw new Error('Calendar#periodAsFullString not implemented')
    }
    periodAsString(idealLength: number): string {
        throw new Error('Calendar#periodAsString not implemented')
    }
    hourAsString(): string {
        throw new Error('Calendar#hourAsString not implemented')
    }
    hourAsPaddedString(minDigits: number): string {
        throw new Error('Calendar#hourAsPaddedString not implemented')
    }
    minuteAsString(): string {
        throw new Error('Calendar#minuteAsString not implemented')
    }
    minuteAsPaddedString(minDigits: number): string {
        throw new Error('Calendar#minuteAsPaddedString not implemented')
    }
    secondAsString(): string {
        throw new Error('Calendar#secondAsString not implemented')
    }
    secondAsPaddedString(minDigits: number): string {
        throw new Error('Calendar#secondAsPaddedString not implemented')
    }
    addNanoseconds(nanoseconds: number): void {
        console.warn('Calendar#addNanoseconds not implemented')
    }
    nanosecondAsString(): string {
        throw new Error('Calendar#nanosecondAsString not implemented')
    }
    nanosecondAsPaddedString(minDigits: number): string {
        throw new Error('Calendar#nanosecondAsPaddedString not implemented')
    }
    compare(other: Calendar): number {
        throw new Error('Calendar#compare not implemented')
    }
    compareDateTime(other: Date): number {
        throw new Error('Calendar#compareDateTime not implemented')
    }
    copyTo(other: Calendar): void {
        console.warn('Calendar#copyTo not implemented')
    }
    getTimeZone(): string {
        throw new Error('Calendar#getTimeZone not implemented')
    }
    changeTimeZone(timeZoneId: string): void {
        console.warn('Calendar#changeTimeZone not implemented')
    }
    timeZoneAsFullString(): string {
        throw new Error('Calendar#timeZoneAsFullString not implemented')
    }
    timeZoneAsString(idealLength: number): string {
        throw new Error('Calendar#timeZoneAsString not implemented')
    }
}
