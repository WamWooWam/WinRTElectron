// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:01 2021
// </auto-generated>
// --------------------------------------------------

import { RequestingFocusOnKeyboardInputEventArgs } from "./RequestingFocusOnKeyboardInputEventArgs";
import { SearchSuggestion } from "./SearchSuggestion";
import { SearchSuggestionsRequestedEventArgs } from "./SearchSuggestionsRequestedEventArgs";
import { LocalContentSuggestionSettings } from "../LocalContentSuggestionSettings";
import { SearchQueryLinguisticDetails } from "../SearchQueryLinguisticDetails";
import { IObservableVector } from "../../../Foundation/Collections/IObservableVector`1";
import { Enumerable } from "../../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../../Foundation/TypedEventHandler`2";

@GenerateShim('Windows.ApplicationModel.Search.Core.SearchSuggestionManager')
export class SearchSuggestionManager { 
    searchHistoryEnabled: boolean = null;
    searchHistoryContext: string = null;
    suggestions: IObservableVector<SearchSuggestion> = null;
    setLocalContentSuggestionSettings(settings: LocalContentSuggestionSettings): void {
        console.warn('SearchSuggestionManager#setLocalContentSuggestionSettings not implemented')
    }
    setQuery(queryText: string): void {
        console.warn('SearchSuggestionManager#setQuery not implemented')
    }
    setQueryWithLanguage(queryText: string, language: string): void {
        console.warn('SearchSuggestionManager#setQueryWithLanguage not implemented')
    }
    setQueryWithSearchQueryLinguisticDetails(queryText: string, language: string, linguisticDetails: SearchQueryLinguisticDetails): void {
        console.warn('SearchSuggestionManager#setQueryWithSearchQueryLinguisticDetails not implemented')
    }
    addToHistory(queryText: string): void {
        console.warn('SearchSuggestionManager#addToHistory not implemented')
    }
    addToHistoryWithLanguage(queryText: string, language: string): void {
        console.warn('SearchSuggestionManager#addToHistoryWithLanguage not implemented')
    }
    clearHistory(): void {
        console.warn('SearchSuggestionManager#clearHistory not implemented')
    }

    #requestingFocusOnKeyboardInput: Set<TypedEventHandler<SearchSuggestionManager, RequestingFocusOnKeyboardInputEventArgs>> = new Set();
    @Enumerable(true)
    set onrequestingfocusonkeyboardinput(handler: TypedEventHandler<SearchSuggestionManager, RequestingFocusOnKeyboardInputEventArgs>) {
        this.#requestingFocusOnKeyboardInput.add(handler);
    }

    #suggestionsRequested: Set<TypedEventHandler<SearchSuggestionManager, SearchSuggestionsRequestedEventArgs>> = new Set();
    @Enumerable(true)
    set onsuggestionsrequested(handler: TypedEventHandler<SearchSuggestionManager, SearchSuggestionsRequestedEventArgs>) {
        this.#suggestionsRequested.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'requestingfocusonkeyboardinput':
                this.#requestingFocusOnKeyboardInput.add(handler);
                break;
            case 'suggestionsrequested':
                this.#suggestionsRequested.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'requestingfocusonkeyboardinput':
                this.#requestingFocusOnKeyboardInput.delete(handler);
                break;
            case 'suggestionsrequested':
                this.#suggestionsRequested.delete(handler);
                break;
        }
    }
}
