// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:11 2021
// </auto-generated>
// --------------------------------------------------

import { IIterable } from "../../../Foundation/Collections/IIterable`1";
import { IIterator } from "../../../Foundation/Collections/IIterator`1";
import { IKeyValuePair } from "../../../Foundation/Collections/IKeyValuePair`2";
import { IMapView } from "../../../Foundation/Collections/IMapView`2";
import { IMap } from "../../../Foundation/Collections/IMap`2";
import { DateTime } from "../../../Foundation/DateTime";
import { IStringable } from "../../../Foundation/IStringable";
import { GenerateShim } from "../../../Foundation/Interop/GenerateShim";
import { Uri } from "../../../Foundation/Uri";
import { HostName } from "../../../Networking/HostName";
import { HttpCacheDirectiveHeaderValueCollection } from "./HttpCacheDirectiveHeaderValueCollection";
import { HttpConnectionOptionHeaderValueCollection } from "./HttpConnectionOptionHeaderValueCollection";
import { HttpContentCodingWithQualityHeaderValueCollection } from "./HttpContentCodingWithQualityHeaderValueCollection";
import { HttpCookiePairHeaderValueCollection } from "./HttpCookiePairHeaderValueCollection";
import { HttpCredentialsHeaderValue } from "./HttpCredentialsHeaderValue";
import { HttpExpectationHeaderValueCollection } from "./HttpExpectationHeaderValueCollection";
import { HttpLanguageRangeWithQualityHeaderValueCollection } from "./HttpLanguageRangeWithQualityHeaderValueCollection";
import { HttpMediaTypeWithQualityHeaderValueCollection } from "./HttpMediaTypeWithQualityHeaderValueCollection";
import { HttpProductInfoHeaderValueCollection } from "./HttpProductInfoHeaderValueCollection";
import { HttpTransferCodingHeaderValueCollection } from "./HttpTransferCodingHeaderValueCollection";

@GenerateShim('Windows.Web.Http.Headers.HttpRequestHeaderCollection')
export class HttpRequestHeaderCollection implements IMap<string, string>, IIterable<IKeyValuePair<string, string>>, IStringable { 
    [Symbol.iterator]() {
        return null;
    }

    size: number = null;
    date: Date | null = null;
    authorization: HttpCredentialsHeaderValue = null;
    from: string = null;
    referer: Uri = null;
    proxyAuthorization: HttpCredentialsHeaderValue = null;
    maxForwards: number | null = null;
    ifUnmodifiedSince: Date | null = null;
    ifModifiedSince: Date | null = null;
    host: HostName = null;
    accept: HttpMediaTypeWithQualityHeaderValueCollection = null;
    acceptEncoding: HttpContentCodingWithQualityHeaderValueCollection = null;
    acceptLanguage: HttpLanguageRangeWithQualityHeaderValueCollection = null;
    cacheControl: HttpCacheDirectiveHeaderValueCollection = null;
    connection: HttpConnectionOptionHeaderValueCollection = null;
    cookie: HttpCookiePairHeaderValueCollection = null;
    transferEncoding: HttpTransferCodingHeaderValueCollection = null;
    userAgent: HttpProductInfoHeaderValueCollection = null;
    expect: HttpExpectationHeaderValueCollection = null;
    append(name: string, value: string): void {
        console.warn('HttpRequestHeaderCollection#append not implemented')
    }
    tryAppendWithoutValidation(name: string, value: string): boolean {
        throw new Error('HttpRequestHeaderCollection#tryAppendWithoutValidation not implemented')
    }
    lookup(key: string): string {
        throw new Error('HttpRequestHeaderCollection#lookup not implemented')
    }
    hasKey(key: string): boolean {
        throw new Error('HttpRequestHeaderCollection#hasKey not implemented')
    }
    getView(): IMapView<string, string> {
        throw new Error('HttpRequestHeaderCollection#getView not implemented')
    }
    insert(key: string, value: string): boolean {
        throw new Error('HttpRequestHeaderCollection#insert not implemented')
    }
    remove(key: string): void {
        console.warn('HttpRequestHeaderCollection#remove not implemented')
    }
    clear(): void {
        console.warn('HttpRequestHeaderCollection#clear not implemented')
    }
    first(): IIterator<IKeyValuePair<string, string>> {
        throw new Error('HttpRequestHeaderCollection#first not implemented')
    }
    toString(): string {
        throw new Error('HttpRequestHeaderCollection#toString not implemented')
    }
}
