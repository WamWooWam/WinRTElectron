// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:11 2021
// </auto-generated>
// --------------------------------------------------

import { IAsyncOperationWithProgress } from "../../Foundation/IAsyncOperationWithProgress`2";
import { IClosable } from "../../Foundation/IClosable";
import { IStringable } from "../../Foundation/IStringable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { IBuffer } from "../../Storage/Streams/IBuffer";
import { IInputStream } from "../../Storage/Streams/IInputStream";
import { IOutputStream } from "../../Storage/Streams/IOutputStream";
import { UnicodeEncoding } from "../../Storage/Streams/UnicodeEncoding";
import { HttpContentHeaderCollection } from "./Headers/HttpContentHeaderCollection";
import { IHttpContent } from "./IHttpContent";

@GenerateShim('Windows.Web.Http.HttpStringContent')
export class HttpStringContent implements IHttpContent, IClosable, IStringable { 
    headers: HttpContentHeaderCollection = null;
    // constructor(content: string);
    // constructor(content: string, encoding: UnicodeEncoding);
    // constructor(content: string, encoding: UnicodeEncoding, mediaType: string);
    constructor(...args) { }
    bufferAllAsync(): IAsyncOperationWithProgress<number, number> {
        throw new Error('HttpStringContent#bufferAllAsync not implemented')
    }
    readAsBufferAsync(): IAsyncOperationWithProgress<IBuffer, number> {
        throw new Error('HttpStringContent#readAsBufferAsync not implemented')
    }
    readAsInputStreamAsync(): IAsyncOperationWithProgress<IInputStream, number> {
        throw new Error('HttpStringContent#readAsInputStreamAsync not implemented')
    }
    readAsStringAsync(): IAsyncOperationWithProgress<string, number> {
        throw new Error('HttpStringContent#readAsStringAsync not implemented')
    }
    tryComputeLength(): { succeeded: boolean, length: number } {
        throw new Error('HttpStringContent#tryComputeLength not implemented')
    }
    writeToStreamAsync(outputStream: IOutputStream): IAsyncOperationWithProgress<number, number> {
        throw new Error('HttpStringContent#writeToStreamAsync not implemented')
    }
    close(): void {
        console.warn('HttpStringContent#close not implemented')
    }
    toString(): string {
        throw new Error('HttpStringContent#toString not implemented')
    }
}
