// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { DeviceWatcherStatus } from "../DeviceWatcherStatus";
import { PnpObject } from "./PnpObject";
import { PnpObjectUpdate } from "./PnpObjectUpdate";
import { Enumerable } from "../../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../../Foundation/TypedEventHandler`2";

@GenerateShim('Windows.Devices.Enumeration.Pnp.PnpObjectWatcher')
export class PnpObjectWatcher { 
    status: DeviceWatcherStatus = null;
    start(): void {
        console.warn('PnpObjectWatcher#start not implemented')
    }
    stop(): void {
        console.warn('PnpObjectWatcher#stop not implemented')
    }

    #added: Set<TypedEventHandler<PnpObjectWatcher, PnpObject>> = new Set();
    @Enumerable(true)
    set onadded(handler: TypedEventHandler<PnpObjectWatcher, PnpObject>) {
        this.#added.add(handler);
    }

    #enumerationCompleted: Set<TypedEventHandler<PnpObjectWatcher, any>> = new Set();
    @Enumerable(true)
    set onenumerationcompleted(handler: TypedEventHandler<PnpObjectWatcher, any>) {
        this.#enumerationCompleted.add(handler);
    }

    #removed: Set<TypedEventHandler<PnpObjectWatcher, PnpObjectUpdate>> = new Set();
    @Enumerable(true)
    set onremoved(handler: TypedEventHandler<PnpObjectWatcher, PnpObjectUpdate>) {
        this.#removed.add(handler);
    }

    #stopped: Set<TypedEventHandler<PnpObjectWatcher, any>> = new Set();
    @Enumerable(true)
    set onstopped(handler: TypedEventHandler<PnpObjectWatcher, any>) {
        this.#stopped.add(handler);
    }

    #updated: Set<TypedEventHandler<PnpObjectWatcher, PnpObjectUpdate>> = new Set();
    @Enumerable(true)
    set onupdated(handler: TypedEventHandler<PnpObjectWatcher, PnpObjectUpdate>) {
        this.#updated.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'added':
                this.#added.add(handler);
                break;
            case 'enumerationcompleted':
                this.#enumerationCompleted.add(handler);
                break;
            case 'removed':
                this.#removed.add(handler);
                break;
            case 'stopped':
                this.#stopped.add(handler);
                break;
            case 'updated':
                this.#updated.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'added':
                this.#added.delete(handler);
                break;
            case 'enumerationcompleted':
                this.#enumerationCompleted.delete(handler);
                break;
            case 'removed':
                this.#removed.delete(handler);
                break;
            case 'stopped':
                this.#stopped.delete(handler);
                break;
            case 'updated':
                this.#updated.delete(handler);
                break;
        }
    }
}
