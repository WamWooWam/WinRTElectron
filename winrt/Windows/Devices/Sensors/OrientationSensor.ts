// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { OrientationSensorReading } from "./OrientationSensorReading";
import { OrientationSensorReadingChangedEventArgs } from "./OrientationSensorReadingChangedEventArgs";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";

@GenerateShim('Windows.Devices.Sensors.OrientationSensor')
export class OrientationSensor { 
    reportInterval: number = null;
    minimumReportInterval: number = null;
    getCurrentReading(): OrientationSensorReading {
        throw new Error('OrientationSensor#getCurrentReading not implemented')
    }
    static getDefault(): OrientationSensor {
        throw new Error('OrientationSensor#getDefault not implemented')
    }

    #readingChanged: Set<TypedEventHandler<OrientationSensor, OrientationSensorReadingChangedEventArgs>> = new Set();
    @Enumerable(true)
    set onreadingchanged(handler: TypedEventHandler<OrientationSensor, OrientationSensorReadingChangedEventArgs>) {
        this.#readingChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'readingchanged':
                this.#readingChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'readingchanged':
                this.#readingChanged.delete(handler);
                break;
        }
    }
}
