// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { AccelerometerReading } from "./AccelerometerReading";
import { AccelerometerReadingChangedEventArgs } from "./AccelerometerReadingChangedEventArgs";
import { AccelerometerShakenEventArgs } from "./AccelerometerShakenEventArgs";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";

@GenerateShim('Windows.Devices.Sensors.Accelerometer')
export class Accelerometer { 
    reportInterval: number = null;
    minimumReportInterval: number = null;
    getCurrentReading(): AccelerometerReading {
        throw new Error('Accelerometer#getCurrentReading not implemented')
    }
    static getDefault(): Accelerometer {
        throw new Error('Accelerometer#getDefault not implemented')
    }

    #readingChanged: Set<TypedEventHandler<Accelerometer, AccelerometerReadingChangedEventArgs>> = new Set();
    @Enumerable(true)
    set onreadingchanged(handler: TypedEventHandler<Accelerometer, AccelerometerReadingChangedEventArgs>) {
        this.#readingChanged.add(handler);
    }

    #shaken: Set<TypedEventHandler<Accelerometer, AccelerometerShakenEventArgs>> = new Set();
    @Enumerable(true)
    set onshaken(handler: TypedEventHandler<Accelerometer, AccelerometerShakenEventArgs>) {
        this.#shaken.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'readingchanged':
                this.#readingChanged.add(handler);
                break;
            case 'shaken':
                this.#shaken.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'readingchanged':
                this.#readingChanged.delete(handler);
                break;
            case 'shaken':
                this.#shaken.delete(handler);
                break;
        }
    }
}
