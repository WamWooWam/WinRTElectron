// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { ClaimedMagneticStripeReader } from "./ClaimedMagneticStripeReader";
import { MagneticStripeReaderAuthenticationProtocol } from "./MagneticStripeReaderAuthenticationProtocol";
import { MagneticStripeReaderCapabilities } from "./MagneticStripeReaderCapabilities";
import { MagneticStripeReaderErrorReportingType } from "./MagneticStripeReaderErrorReportingType";
import { MagneticStripeReaderStatusUpdatedEventArgs } from "./MagneticStripeReaderStatusUpdatedEventArgs";
import { UnifiedPosHealthCheckLevel } from "./UnifiedPosHealthCheckLevel";
import { IIterable } from "../../Foundation/Collections/IIterable`1";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { IBuffer } from "../../Storage/Streams/IBuffer";

@GenerateShim('Windows.Devices.PointOfService.MagneticStripeReader')
export class MagneticStripeReader { 
    capabilities: MagneticStripeReaderCapabilities = null;
    deviceAuthenticationProtocol: MagneticStripeReaderAuthenticationProtocol = null;
    deviceId: string = null;
    supportedCardTypes: number[] = null;
    checkHealthAsync(level: UnifiedPosHealthCheckLevel): IAsyncOperation<string> {
        throw new Error('MagneticStripeReader#checkHealthAsync not implemented')
    }
    claimReaderAsync(): IAsyncOperation<ClaimedMagneticStripeReader> {
        throw new Error('MagneticStripeReader#claimReaderAsync not implemented')
    }
    retrieveStatisticsAsync(statisticsCategories: IIterable<string>): IAsyncOperation<IBuffer> {
        throw new Error('MagneticStripeReader#retrieveStatisticsAsync not implemented')
    }
    getErrorReportingType(): MagneticStripeReaderErrorReportingType {
        throw new Error('MagneticStripeReader#getErrorReportingType not implemented')
    }
    static getDefaultAsync(): IAsyncOperation<MagneticStripeReader> {
        throw new Error('MagneticStripeReader#getDefaultAsync not implemented')
    }
    static fromIdAsync(deviceId: string): IAsyncOperation<MagneticStripeReader> {
        throw new Error('MagneticStripeReader#fromIdAsync not implemented')
    }
    static getDeviceSelector(): string {
        throw new Error('MagneticStripeReader#getDeviceSelector not implemented')
    }

    #statusUpdated: Set<TypedEventHandler<MagneticStripeReader, MagneticStripeReaderStatusUpdatedEventArgs>> = new Set();
    @Enumerable(true)
    set onstatusupdated(handler: TypedEventHandler<MagneticStripeReader, MagneticStripeReaderStatusUpdatedEventArgs>) {
        this.#statusUpdated.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'statusupdated':
                this.#statusUpdated.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'statusupdated':
                this.#statusUpdated.delete(handler);
                break;
        }
    }
}
