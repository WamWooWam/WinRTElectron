// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:02 2021
// </auto-generated>
// --------------------------------------------------

import { HidBooleanControlDescription } from "./HidBooleanControlDescription";
import { HidFeatureReport } from "./HidFeatureReport";
import { HidInputReport } from "./HidInputReport";
import { HidInputReportReceivedEventArgs } from "./HidInputReportReceivedEventArgs";
import { HidNumericControlDescription } from "./HidNumericControlDescription";
import { HidOutputReport } from "./HidOutputReport";
import { HidReportType } from "./HidReportType";
import { IVectorView } from "../../Foundation/Collections/IVectorView`1";
import { IAsyncOperation } from "../../Foundation/IAsyncOperation`1";
import { IClosable } from "../../Foundation/IClosable";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { FileAccessMode } from "../../Storage/FileAccessMode";

@GenerateShim('Windows.Devices.HumanInterfaceDevice.HidDevice')
export class HidDevice implements IClosable { 
    productId: number = null;
    usageId: number = null;
    usagePage: number = null;
    vendorId: number = null;
    version: number = null;
    getInputReportAsync(): IAsyncOperation<HidInputReport> {
        throw new Error('HidDevice#getInputReportAsync not implemented')
    }
    getInputReportByIdAsync(reportId: number): IAsyncOperation<HidInputReport> {
        throw new Error('HidDevice#getInputReportByIdAsync not implemented')
    }
    getFeatureReportAsync(): IAsyncOperation<HidFeatureReport> {
        throw new Error('HidDevice#getFeatureReportAsync not implemented')
    }
    getFeatureReportByIdAsync(reportId: number): IAsyncOperation<HidFeatureReport> {
        throw new Error('HidDevice#getFeatureReportByIdAsync not implemented')
    }
    createOutputReport(): HidOutputReport {
        throw new Error('HidDevice#createOutputReport not implemented')
    }
    createOutputReportById(reportId: number): HidOutputReport {
        throw new Error('HidDevice#createOutputReportById not implemented')
    }
    createFeatureReport(): HidFeatureReport {
        throw new Error('HidDevice#createFeatureReport not implemented')
    }
    createFeatureReportById(reportId: number): HidFeatureReport {
        throw new Error('HidDevice#createFeatureReportById not implemented')
    }
    sendOutputReportAsync(outputReport: HidOutputReport): IAsyncOperation<number> {
        throw new Error('HidDevice#sendOutputReportAsync not implemented')
    }
    sendFeatureReportAsync(featureReport: HidFeatureReport): IAsyncOperation<number> {
        throw new Error('HidDevice#sendFeatureReportAsync not implemented')
    }
    getBooleanControlDescriptions(reportType: HidReportType, usagePage: number, usageId: number): IVectorView<HidBooleanControlDescription> {
        throw new Error('HidDevice#getBooleanControlDescriptions not implemented')
    }
    getNumericControlDescriptions(reportType: HidReportType, usagePage: number, usageId: number): IVectorView<HidNumericControlDescription> {
        throw new Error('HidDevice#getNumericControlDescriptions not implemented')
    }
    close(): void {
        console.warn('HidDevice#close not implemented')
    }
    static getDeviceSelector(usagePage: number, usageId: number): string {
        throw new Error('HidDevice#getDeviceSelector not implemented')
    }
    static getDeviceSelectorVidPid(usagePage: number, usageId: number, vendorId: number, productId: number): string {
        throw new Error('HidDevice#getDeviceSelectorVidPid not implemented')
    }
    static fromIdAsync(deviceId: string, accessMode: FileAccessMode): IAsyncOperation<HidDevice> {
        throw new Error('HidDevice#fromIdAsync not implemented')
    }

    #inputReportReceived: Set<TypedEventHandler<HidDevice, HidInputReportReceivedEventArgs>> = new Set();
    @Enumerable(true)
    set oninputreportreceived(handler: TypedEventHandler<HidDevice, HidInputReportReceivedEventArgs>) {
        this.#inputReportReceived.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'inputreportreceived':
                this.#inputReportReceived.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'inputreportreceived':
                this.#inputReportReceived.delete(handler);
                break;
        }
    }
}
