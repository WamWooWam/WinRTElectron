// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:01 2021
// </auto-generated>
// --------------------------------------------------

import { BluetoothCacheMode } from "../BluetoothCacheMode";
import { GattCharacteristicProperties } from "./GattCharacteristicProperties";
import { GattClientCharacteristicConfigurationDescriptorValue } from "./GattClientCharacteristicConfigurationDescriptorValue";
import { GattCommunicationStatus } from "./GattCommunicationStatus";
import { GattDescriptor } from "./GattDescriptor";
import { GattPresentationFormat } from "./GattPresentationFormat";
import { GattProtectionLevel } from "./GattProtectionLevel";
import { GattReadClientCharacteristicConfigurationDescriptorResult } from "./GattReadClientCharacteristicConfigurationDescriptorResult";
import { GattReadResult } from "./GattReadResult";
import { GattValueChangedEventArgs } from "./GattValueChangedEventArgs";
import { GattWriteOption } from "./GattWriteOption";
import { IVectorView } from "../../../Foundation/Collections/IVectorView`1";
import { IAsyncOperation } from "../../../Foundation/IAsyncOperation`1";
import { Enumerable } from "../../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../../Foundation/Interop/GenerateShim";
import { TypedEventHandler } from "../../../Foundation/TypedEventHandler`2";
import { IBuffer } from "../../../Storage/Streams/IBuffer";

@GenerateShim('Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic')
export class GattCharacteristic { 
    protectionLevel: GattProtectionLevel = null;
    attributeHandle: number = null;
    characteristicProperties: GattCharacteristicProperties = null;
    presentationFormats: IVectorView<GattPresentationFormat> = null;
    userDescription: string = null;
    uuid: string = null;
    getDescriptors(descriptorUuid: string): IVectorView<GattDescriptor> {
        throw new Error('GattCharacteristic#getDescriptors not implemented')
    }
    readValueAsync(): IAsyncOperation<GattReadResult> {
        throw new Error('GattCharacteristic#readValueAsync not implemented')
    }
    readValueWithCacheModeAsync(cacheMode: BluetoothCacheMode): IAsyncOperation<GattReadResult> {
        throw new Error('GattCharacteristic#readValueWithCacheModeAsync not implemented')
    }
    writeValueAsync(value: IBuffer): IAsyncOperation<GattCommunicationStatus> {
        throw new Error('GattCharacteristic#writeValueAsync not implemented')
    }
    writeValueWithOptionAsync(value: IBuffer, writeOption: GattWriteOption): IAsyncOperation<GattCommunicationStatus> {
        throw new Error('GattCharacteristic#writeValueWithOptionAsync not implemented')
    }
    readClientCharacteristicConfigurationDescriptorAsync(): IAsyncOperation<GattReadClientCharacteristicConfigurationDescriptorResult> {
        throw new Error('GattCharacteristic#readClientCharacteristicConfigurationDescriptorAsync not implemented')
    }
    writeClientCharacteristicConfigurationDescriptorAsync(clientCharacteristicConfigurationDescriptorValue: GattClientCharacteristicConfigurationDescriptorValue): IAsyncOperation<GattCommunicationStatus> {
        throw new Error('GattCharacteristic#writeClientCharacteristicConfigurationDescriptorAsync not implemented')
    }
    static convertShortIdToUuid(shortId: number): string {
        throw new Error('GattCharacteristic#convertShortIdToUuid not implemented')
    }

    #valueChanged: Set<TypedEventHandler<GattCharacteristic, GattValueChangedEventArgs>> = new Set();
    @Enumerable(true)
    set onvaluechanged(handler: TypedEventHandler<GattCharacteristic, GattValueChangedEventArgs>) {
        this.#valueChanged.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'valuechanged':
                this.#valueChanged.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'valuechanged':
                this.#valueChanged.delete(handler);
                break;
        }
    }
}
