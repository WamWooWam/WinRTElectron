// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:09 2021
// </auto-generated>
// --------------------------------------------------

import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { ActivatedEventHandler } from "./ActivatedEventHandler";
import { NavigatedEventHandler } from "./NavigatedEventHandler";
import { ResumingEventHandler } from "./ResumingEventHandler";
import { SuspendingEventHandler } from "./SuspendingEventHandler";
import { WebUILaunchActivatedEventArgs } from "./WebUILaunchActivatedEventArgs";
import { InvokeEvent } from "../../Foundation/Interop/InvokeEvent";
import { SuspendingEventArgs } from "../../ApplicationModel/SuspendingEventArgs";
import { AppLifecycleV2 } from "../../Foundation/Interop/IpcConstants";
import { IAppLifecycleEvent } from "../../Foundation/Interop/AppLifecycle";

import { ipcRenderer } from "electron";
import { ActivationKind } from "../../ApplicationModel/Activation/ActivationKind";
import { SplashScreen } from "../../ApplicationModel/Activation/SplashScreen";
import { WebUIFileActivatedEventArgs } from "./WebUIFileActivatedEventArgs";
import { Vector } from "../../Foundation/Interop/Vector`1";
import { StorageFile } from "../../Storage/StorageFile";

@GenerateShim('Windows.UI.WebUI.WebUIApplication')
export class WebUIApplication {

    static init() {
        ipcRenderer.on(AppLifecycleV2, WebUIApplication._handleAppLifecycleEvent);
    }

    static _handleAppLifecycleEvent(ev, event: IAppLifecycleEvent) {
        let _this = WebUIApplication;

        if (event.type === "activated") {
            if (event.details) {
                if (event.details.kind === ActivationKind.launch) {
                    let args = new WebUILaunchActivatedEventArgs();
                    args.arguments = event.details.args;
                    args.splashScreen = new SplashScreen(event.details.splashRect);
                    InvokeEvent(_this.__activated, "activated", args);
                    return
                }

                if(event.details.kind === ActivationKind.file && event.details.files) {
                    let args = new WebUIFileActivatedEventArgs();
                    let fileVector = new Vector<StorageFile>();
                    for (const filePath of event.details.files) {
                        fileVector.append(StorageFile.getFileFromPath(filePath));
                    }

                    args.files = fileVector;
                    args.splashScreen = new SplashScreen(event.details.splashRect);
                    InvokeEvent(_this.__activated, "activated", args);
                    return
                }
            }

            InvokeEvent(_this.__activated, "activated", new WebUILaunchActivatedEventArgs())
        }

        if (event.type === "suspending") {
            InvokeEvent(_this.__suspending, "suspending", new SuspendingEventArgs())
        }

        if (event.type === "resuming") {
            InvokeEvent(_this.__resuming, "resuming", null)
        }
    }

    static __activated: Set<ActivatedEventHandler> = new Set();
    @Enumerable(true)
    static set onactivated(handler: ActivatedEventHandler) {
        WebUIApplication.__activated.add(handler);
    }

    static __navigated: Set<NavigatedEventHandler> = new Set();
    @Enumerable(true)
    static set onnavigated(handler: NavigatedEventHandler) {
        WebUIApplication.__navigated.add(handler);
    }

    static __resuming: Set<ResumingEventHandler> = new Set();
    @Enumerable(true)
    static set onresuming(handler: ResumingEventHandler) {
        WebUIApplication.__resuming.add(handler);
    }

    static __suspending: Set<SuspendingEventHandler> = new Set();
    @Enumerable(true)
    static set onsuspending(handler: SuspendingEventHandler) {
        WebUIApplication.__suspending.add(handler);
    }

    static addEventListener(name: string, handler: any) {
        switch (name) {
            case 'activated':
                WebUIApplication.__activated.add(handler);
                break;
            case 'navigated':
                WebUIApplication.__navigated.add(handler);
                break;
            case 'resuming':
                WebUIApplication.__resuming.add(handler);
                break;
            case 'suspending':
                WebUIApplication.__suspending.add(handler);
                break;
        }
    }

    static removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'activated':
                WebUIApplication.__activated.delete(handler);
                break;
            case 'navigated':
                WebUIApplication.__navigated.delete(handler);
                break;
            case 'resuming':
                WebUIApplication.__resuming.delete(handler);
                break;
            case 'suspending':
                WebUIApplication.__suspending.delete(handler);
                break;
        }
    }
}

WebUIApplication.init();
