// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:09 2021
// </auto-generated>
// --------------------------------------------------

import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";
import { Rect } from "../../Foundation/Rect";
import { TypedEventHandler } from "../../Foundation/TypedEventHandler`2";
import { InputPaneVisibilityEventArgs } from "./InputPaneVisibilityEventArgs";

@GenerateShim('Windows.UI.ViewManagement.InputPane')
export class InputPane {
    static __instance: InputPane;
    occludedRect: Rect = { x: 0, y: 0, width: 0, height: 0 };
    static getForCurrentView(): InputPane {
        if (!InputPane.__instance)
            InputPane.__instance = new InputPane();
        return InputPane.__instance;
    }

    #hiding: Set<TypedEventHandler<InputPane, InputPaneVisibilityEventArgs>> = new Set();
    @Enumerable(true)
    set onhiding(handler: TypedEventHandler<InputPane, InputPaneVisibilityEventArgs>) {
        this.#hiding.add(handler);
    }

    #showing: Set<TypedEventHandler<InputPane, InputPaneVisibilityEventArgs>> = new Set();
    @Enumerable(true)
    set onshowing(handler: TypedEventHandler<InputPane, InputPaneVisibilityEventArgs>) {
        this.#showing.add(handler);
    }

    addEventListener(name: string, handler: any) {
        switch (name) {
            case 'hiding':
                this.#hiding.add(handler);
                break;
            case 'showing':
                this.#showing.add(handler);
                break;
        }
    }

    removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'hiding':
                this.#hiding.delete(handler);
                break;
            case 'showing':
                this.#showing.delete(handler);
                break;
        }
    }
}
