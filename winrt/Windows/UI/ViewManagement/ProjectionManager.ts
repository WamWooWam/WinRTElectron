// --------------------------------------------------
// <auto-generated>
//     This code was generated by tswinrt.
//     Generated from Windows 255.255.255.255 at Fri Mar 26 17:23:09 2021
// </auto-generated>
// --------------------------------------------------

import { EventHandler } from "../../Foundation/EventHandler`1";
import { IAsyncAction } from "../../Foundation/IAsyncAction";
import { Enumerable } from "../../Foundation/Interop/Enumerable";
import { GenerateShim } from "../../Foundation/Interop/GenerateShim";

@GenerateShim('Windows.UI.ViewManagement.ProjectionManager')
export class ProjectionManager { 
    static projectionDisplayAvailable: boolean = null;
    static startProjectingAsync(projectionViewId: number, anchorViewId: number): IAsyncAction {
        throw new Error('ProjectionManager#startProjectingAsync not implemented')
    }
    static swapDisplaysForViewsAsync(projectionViewId: number, anchorViewId: number): IAsyncAction {
        throw new Error('ProjectionManager#swapDisplaysForViewsAsync not implemented')
    }
    static stopProjectingAsync(projectionViewId: number, anchorViewId: number): IAsyncAction {
        throw new Error('ProjectionManager#stopProjectingAsync not implemented')
    }

    static __projectionDisplayAvailableChanged: Set<EventHandler<any>> = new Set();
    @Enumerable(true)
    static set onprojectiondisplayavailablechanged(handler: EventHandler<any>) {
        ProjectionManager.__projectionDisplayAvailableChanged.add(handler);
    }

    static addEventListener(name: string, handler: any) {
        switch (name) {
            case 'projectiondisplayavailablechanged':
                ProjectionManager.__projectionDisplayAvailableChanged.add(handler);
                break;
        }
    }

    static removeEventListener(name: string, handler: any) {
        switch (name) {
            case 'projectiondisplayavailablechanged':
                ProjectionManager.__projectionDisplayAvailableChanged.delete(handler);
                break;
        }
    }
}
