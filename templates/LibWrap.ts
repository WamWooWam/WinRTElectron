// ----------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a tool.
//     
//     Generated from LibWrap.winmd version 255.255.255.255 at 23/08/2020 02:54:35
// </auto-generated>
// ----------------------------------------------------------------------------------
export namespace LibWrap { 
    export interface __IAccessSessionProtectedNonVirtuals {
    }
    export interface __IAccessSessionPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        login(): Boolean;
        logout(): void;
        detectHotspot(): void;
        notifyWifiChanged(accessPointMAC: Binary, accessPointSSID: string, deviceMAC: Binary, dnsServer: string): void;
        sendLocation(latitude: number, longitude: number, accuracy: number): void;
        loginWispr(username: string, password: string): void;
        sendRating(rating: number): void;
        discard(): void;
    }
    export interface __IAccessSessionStatics {
        hotspottype_SUPPORTED: number;
        hotspottype_NONE: number;
        hotspottype_FIRSTPAGEREDIRECT: number;
        hotspottype_FORM: number;
        hotspottype_WISPR: number;
        hotspottype_OPEN: number;
        hotspottype_UNKNOWN: number;
        failurereason_SSID_QUERY_FAILURE: number;
        failurereason_TOKEN_QUERY_FAILURE: number;
        failurereason_NO_HTML_URL: number;
        failurereason_WISPR_LOGIN_ERROR: number;
        failurereason_WISPR_LOGIN_REJECTED: number;
        failurereason_WISPR_CONTENT_ERROR: number;
        failurereason_HTTP_FAILURE: number;
        failurereason_TOO_MANY_REDIRECTS: number;
        failurereason_ALREADY_ONLINE: number;
        failurereason_CONNECTION_ERROR: number;
        failurereason_LOGIN_ABORTED: number;
        failurereason_LOGOUT_FAILURE: number;
        failurereason_LOGIN_FAILURE: number;
        failurereason_NO_SUPPORT: number;
        failurereason_NO_SUBSCRIPTION: number;
        failurereason_NO_BALANCE: number;
        failurereason_NO_FAILURE: number;
        status_LOGGING_OUT: number;
        status_LOGIN_FAILED: number;
        status_LOGGED_OUT: number;
        status_LOGGED_IN: number;
        status_LOGGING_IN: number;
        status_AVAILABLE: number;
        status_UNAVAILABLE: number;
        sessionflags_SA_LOW_CREDIT: number;
        sessionflags_SA_PRODUCT_CREDIT: number;
        sessionflags_SA_STAR_RATING_2: number;
        sessionflags_SA_STAR_RATING_1: number;
        sessionflags_SA_STAR_RATING_0: number;
        sessionflags_SA_ASK_TO_RATE: number;
        sessionflags_SA_NO_CURRENCY_CHANGE: number;
        sessionflags_SA_SHOW_PROMO_DIALOG: number;
        sessionflags_SA_OPEN_URL: number;
        connectionprogress_MAXSTEPS: number;
        connectionprogress_COMPLETED: number;
        connectionprogress_WAITING: number;
        connectionprogress_CHECKING: number;
        connectionprogress_SUBMITTING: number;
        connectionprogress_VERIFYING: number;
        connectionprogress_STARTING: number;
        connectionprogresstoString(val: number): string;
        sessionflagstoString(val: number): string;
        statustoString(val: number): string;
        failurereasontoString(val: number): string;
        hotspottypetoString(val: number): string;
    }
    export interface __IAccountGetCapabilityStatusResultPublicNonVirtuals {
        expiryTimestamp: number;
        status: number;
    }
    export interface __IAccountGetStatusWithProgressResultPublicNonVirtuals {
        progress: number;
        status: number;
    }
    export interface __IAccountManagerPublicNonVirtuals {
    }
    export interface __IAccountManagerStatics {
        local_SETTINGS_KEY_USER_CID: string;
        isTheSameLiveUser(): Boolean;
        isTheSameSkypeUser(accountName: string): Boolean;
        updateAccountName(accountName: string): void;
    }
    export interface __IAccountProtectedNonVirtuals {
    }
    export interface __IAccountPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        getStatusWithProgress(): AccountGetStatusWithProgressResult;
        setUIVersion(uiVersionString: string): void;
        login(setAvailabilityTo: number): void;
        beginLogin(setAvailabilityTo: number): void;
        loginWithPassword(password: string, savePwd: Boolean, saveDataLocally: Boolean): void;
        loginWithOAuth(partnerId: string, accessToken: string, refreshToken: string, savePwd: Boolean, saveDataLocally: Boolean): void;
        finishLogin(): void;
        register(password: string, savePwd: Boolean, saveDataLocally: Boolean, email: string, allowSpam: Boolean): void;
        logout(clearSavedPwd: Boolean): void;
        logoutEx(clearSavedPwd: Boolean, localOnly: Boolean): void;
        logoutOtherEndpoints(): void;
        logoutOtherEndpoint(endpointID: string): void;
        getOwnEndpointsInfo(id: VectGIString, name: VectGIString, type: VectGIString): void;
        externalLoginResponse(response: Binary): void;
        changePassword(oldPassword: string, newPassword: string, savePwd: Boolean): void;
        setPasswordSaved(savePwd: Boolean): void;
        setServersideIntProperty(propKey: number, value: number): Boolean;
        setServersideStrProperty(propKey: number, value: string): Boolean;
        cancelServerCommit(): void;
        setIntProperty(propKey: number, value: number): Boolean;
        setStrProperty(propKey: number, value: string): Boolean;
        setBinProperty(propKey: number, value: Binary): Boolean;
        setAvailability(availability: number): void;
        setStandby(standby: Boolean): void;
        setProfileAttachment(attachmentID: string, attachment: Binary): Boolean;
        getCapabilityStatus(capability: number): AccountGetCapabilityStatusResult;
        getCapabilityStatus_1(capability: number, expiryTimestamp: number): number;
        getSkypenameHash(): string;
        getContactObjectID(): number;
        getSubscriptionInfo(name: VectGIString, endtime: VectUnsignedInt, status: VectUnsignedInt, package_type: VectUnsignedInt, service_type: VectUnsignedInt): void;
        reconnectXMPP(): void;
        getPartnerChannelStatus(): string;
        getVerifiedEmail(): string;
        getVerifiedCompany(): string;
        getDBPath(): string;
        delete(): void;
        getPartnerUID(partnerId: number): string;
        getLastPartnerId(): number;
        discard(): void;
        getStatus(): number;
        getStatusProgress(): number;
        hasCapability(capability: number): Boolean;
        getMoodTextHtml(): string;
    }
    export interface __IAccountStatics {
        xmppstatus_XMPP_OFFLINE_EXPLICIT: number;
        xmppstatus_XMPP_OFFLINE_SKYPE: number;
        xmppstatus_XMPP_DISABLED: number;
        xmppstatus_XMPP_ERROR_OTHER: number;
        xmppstatus_XMPP_ERROR_AUTH: number;
        xmppstatus_XMPP_PAUSING: number;
        xmppstatus_XMPP_CONNECTING: number;
        xmppstatus_XMPP_ONLINE: number;
        xmppstatus_XMPP_UNLINKED: number;
        servicetype_ST_PREMIUMVIDEO: number;
        servicetype_ST_PSTN: number;
        servicetype_ST_NONE: number;
        packagetype_PT_FREETRIAL: number;
        packagetype_PT_DAYPASS: number;
        packagetype_PT_SUBSCRIPTION: number;
        packagetype_PT_NONE: number;
        subscriptionstatus_SS_SUSPENDED: number;
        subscriptionstatus_SS_CANCELLED: number;
        subscriptionstatus_SS_ACTIVE: number;
        subscriptionstatus_SS_NONE: number;
        capabilitystatus_FINAL_EXPIRY_WARNING: number;
        capabilitystatus_SECOND_EXPIRY_WARNING: number;
        capabilitystatus_FIRST_EXPIRY_WARNING: number;
        capabilitystatus_CAPABILITY_EXISTS: number;
        capabilitystatus_NO_CAPABILITY: number;
        federatedpresencepolicy_FEDERATED_DISABLE_FLAMINGO: number;
        shortcircuitsync_SHORTCIRCUITSYNC_ENABLED: number;
        shortcircuitsync_SHORTCIRCUITSYNC_DISABLED: number;
        adpolicy_ADS_ENABLED_NOTARGET: number;
        adpolicy_ADS_RESERVED3: number;
        adpolicy_ADS_RESERVED2: number;
        adpolicy_ADS_RESERVED1: number;
        adpolicy_ADS_ENABLED: number;
        authrequestpolicy_AUTHREQUEST_DISABLED: number;
        authrequestpolicy_CHAT_PARTICIPANTS_CAN_AUTHREQ: number;
        authrequestpolicy_AUTHREQUEST_ENABLED: number;
        voicemailpolicy_VOICEMAIL_DISABLED: number;
        voicemailpolicy_VOICEMAIL_ENABLED: number;
        phonenumberspolicy_PHONENUMBERS_VISIBLE_FOR_EVERYONE: number;
        phonenumberspolicy_PHONENUMBERS_VISIBLE_FOR_BUDDIES: number;
        webpresencepolicy_WEBPRESENCE_ENABLED: number;
        webpresencepolicy_WEBPRESENCE_DISABLED: number;
        timezonepolicy_TZ_UNDISCLOSED: number;
        timezonepolicy_TZ_MANUAL: number;
        timezonepolicy_TZ_AUTOMATIC: number;
        buddycountpolicy_DISCLOSE_TO_NOONE: number;
        buddycountpolicy_DISCLOSE_TO_AUTHORIZED: number;
        avatarpolicy_EVERYONE_CAN_SEE: number;
        avatarpolicy_BUDDIES_OR_AUTHORIZED_CAN_SEE: number;
        pstncallpolicy_BUDDY_NUMBERS_CAN_CALL: number;
        pstncallpolicy_DISCLOSED_NUMBERS_CAN_CALL: number;
        pstncallpolicy_ALL_NUMBERS_CAN_CALL: number;
        skypecallpolicy_BUDDIES_OR_AUTHORIZED_CAN_CALL: number;
        skypecallpolicy_EVERYONE_CAN_CALL: number;
        chatpolicy_BUDDIES_OR_AUTHORIZED_CAN_ADD: number;
        chatpolicy_EVERYONE_CAN_ADD: number;
        commitstatus_COMMIT_FAILED: number;
        commitstatus_COMMITTING_TO_SERVER: number;
        commitstatus_COMMITTED: number;
        pwdchangestatus_PWD_MUST_LOG_IN_TO_CHANGE: number;
        pwdchangestatus_PWD_INVALID_NEW_PWD: number;
        pwdchangestatus_PWD_MUST_DIFFER_FROM_OLD: number;
        pwdchangestatus_PWD_OK_BUT_CHANGE_SUGGESTED: number;
        pwdchangestatus_PWD_SERVER_CONNECT_FAILED: number;
        pwdchangestatus_PWD_INVALID_OLD_PASSWORD: number;
        pwdchangestatus_PWD_CHANGING: number;
        pwdchangestatus_PWD_OK: number;
        logoutreason_ACCESS_TOKEN_RENEWAL_FAILED: number;
        logoutreason_REMOTE_LOGOUT: number;
        logoutreason_ATO_BLOCKED: number;
        logoutreason_UNSUPPORTED_VERSION: number;
        logoutreason_APP_ID_FAILURE: number;
        logoutreason_INVALID_APP_ID: number;
        logoutreason_DB_FAILURE: number;
        logoutreason_DB_CORRUPT: number;
        logoutreason_DB_IO_ERROR: number;
        logoutreason_DB_DISK_FULL: number;
        logoutreason_PERIODIC_UIC_UPDATE_FAILED: number;
        logoutreason_PASSWORD_HAS_CHANGED: number;
        logoutreason_TOO_MANY_LOGIN_ATTEMPTS: number;
        logoutreason_INCORRECT_PASSWORD: number;
        logoutreason_NO_SUCH_IDENTITY: number;
        logoutreason_REJECTED_AS_UNDERAGE: number;
        logoutreason_SKYPENAME_TAKEN: number;
        logoutreason_UNACCEPTABLE_PASSWORD: number;
        logoutreason_INVALID_EMAIL: number;
        logoutreason_INVALID_SKYPENAME: number;
        logoutreason_DB_IN_USE: number;
        logoutreason_SERVER_OVERLOADED: number;
        logoutreason_SERVER_CONNECT_FAILED: number;
        logoutreason_P2P_CONNECT_FAILED: number;
        logoutreason_SOCKS_PROXY_AUTH_FAILED: number;
        logoutreason_HTTPS_PROXY_AUTH_FAILED: number;
        logoutreason_LOGOUT_CALLED: number;
        cblsyncstatus_CBL_REMOTE_SYNC_PENDING: number;
        cblsyncstatus_CBL_SYNC_FAILED: number;
        cblsyncstatus_CBL_IN_SYNC: number;
        cblsyncstatus_CBL_SYNC_IN_PROGRESS: number;
        cblsyncstatus_CBL_SYNC_PENDING: number;
        cblsyncstatus_CBL_INITIAL_SYNC_PENDING: number;
        cblsyncstatus_CBL_INITIALIZING: number;
        status_LOGGED_IN_PARTIALLY: number;
        status_LOGGING_OUT: number;
        status_LOGGED_IN: number;
        status_INITIALIZING: number;
        status_LOGGING_IN: number;
        status_CONNECTING_TO_SERVER: number;
        status_CONNECTING_TO_P2P: number;
        status_LOGGED_OUT_AND_PWD_SAVED: number;
        status_LOGGED_OUT: number;
        statustoString(val: number): string;
        cblsyncstatustoString(val: number): string;
        logoutreasontoString(val: number): string;
        pwdchangestatustoString(val: number): string;
        commitstatustoString(val: number): string;
        chatpolicytoString(val: number): string;
        skypecallpolicytoString(val: number): string;
        pstncallpolicytoString(val: number): string;
        avatarpolicytoString(val: number): string;
        buddycountpolicytoString(val: number): string;
        timezonepolicytoString(val: number): string;
        webpresencepolicytoString(val: number): string;
        phonenumberspolicytoString(val: number): string;
        voicemailpolicytoString(val: number): string;
        authrequestpolicytoString(val: number): string;
        adpolicytoString(val: number): string;
        shortcircuitsynctoString(val: number): string;
        federatedpresencepolicytoString(val: number): string;
        capabilitystatustoString(val: number): string;
        subscriptionstatustoString(val: number): string;
        packagetypetoString(val: number): string;
        servicetypetoString(val: number): string;
        xmppstatustoString(val: number): string;
    }
    export interface __IAlertProtectedNonVirtuals {
    }
    export interface __IAlertPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        markSeen(): void;
        delete(): Boolean;
        discard(): void;
    }
    export interface __IAlertStatics {
        window_SIZE_LARGE: number;
        window_SIZE_PIC: number;
        window_SIZE_SMALL: number;
        type_AUTHREQ: number;
        type_INFO: number;
        type_NOTICE: number;
        typetoString(val: number): string;
        window_SIZEToString(val: number): string;
    }
    export interface __IAvatarManagerProtectedNonVirtuals {
    }
    export interface __IAvatarManagerPublicNonVirtuals {
        getAvatarURI(identity: string): string;
    }
    export interface __IAvatarManagerStatics {
        offlineAvatarURI(identity: string): string;
        isDefaultAvatarURI(uri: string): Boolean;
    }
    export interface __IBinaryPublicNonVirtuals {
        set(bytes: number[]): void;
        getAsBase64(): string;
        append(other: Binary): void;
    }
    export interface __IBuildPublicNonVirtuals {
    }
    export interface __IBuildStatics {
        release: Boolean;
        getBuildType(): BuildType;
    }
    export interface __ICallMemberPublicNonVirtuals {
    }
    export interface __ICallPublicNonVirtuals {
    }
    export interface __IChatMemberPublicNonVirtuals {
    }
    export interface __IChatMessagePublicNonVirtuals {
    }
    export interface __IChatPublicNonVirtuals {
    }
    export interface __IContactGroupProtectedNonVirtuals {
    }
    export interface __IContactGroupPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        giveDisplayName(name: string): Boolean;
        giveSortOrder(sortOrder: number): Boolean;
        delete(): Boolean;
        getConversations(conversations: VectUnsignedInt): void;
        canAddConversation(conversationObjectID: number): Boolean;
        addConversation(conversationObjectID: number): Boolean;
        canRemoveConversation(): Boolean;
        removeConversation(conversationObjectID: number): Boolean;
        getContacts(contacts: VectUnsignedInt): void;
        canAddContact(contactObjectID: number): Boolean;
        addContact(contactObjectID: number): Boolean;
        canRemoveContact(): Boolean;
        removeContact(contactObjectID: number): Boolean;
        discard(): void;
    }
    export interface __IContactGroupStatics {
        type_SCD_CONTACTS: number;
        type_LYNC_CONTACTS: number;
        type_PASSPORT_CONTACTS: number;
        type_XMPP_CONTACTS: number;
        type_EXTERNAL_CONTACTS: number;
        type_SHARED_GROUP: number;
        type_PROPOSED_SHARED_GROUP: number;
        type_CUSTOM_GROUP: number;
        type_UNGROUPED_BUDDIES: number;
        type_CONTACTS_BLOCKED_BY_ME: number;
        type_CONTACTS_AUTHORIZED_BY_ME: number;
        type_CONTACTS_WAITING_MY_AUTHORIZATION: number;
        type_RECENTLY_CONTACTED_CONTACTS: number;
        type_UNKNOWN_OR_PENDINGAUTH_BUDDIES: number;
        type_ONLINE_BUDDIES: number;
        type_SKYPEOUT_BUDDIES: number;
        type_SKYPE_BUDDIES: number;
        type_ALL_BUDDIES: number;
        type_ALL_KNOWN_CONTACTS: number;
        typetoString(val: number): string;
    }
    export interface __IContactProtectedNonVirtuals {
    }
    export interface __IContactPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        getContactType(): number;
        getIdentity(): string;
        getAvatar(avatar: Binary): Boolean;
        getProfileAttachment(attachmentID: string, attachment: Binary): Boolean;
        getVerifiedEmail(): string;
        getVerifiedCompany(): string;
        isMemberOf(groupObjectID: number): Boolean;
        isMemberOfHardwiredGroup(groupType: number): Boolean;
        getUnifiedMasters(masters: VectUnsignedInt): void;
        getUnifiedServants(servants: VectUnsignedInt): void;
        setBlocked(blocked: Boolean, abuse: Boolean): Boolean;
        ignoreAuthRequest(): Boolean;
        giveDisplayName(name: string): Boolean;
        assignSpeedDial(dial: string): Boolean;
        setBuddyStatus(isMyBuddy: Boolean, syncAuth: Boolean): Boolean;
        sendAuthRequest(message: string, extras_bitmask: number): Boolean;
        hasAuthorizedMe(): Boolean;
        setPhoneNumber(num: number, label: string, number: string): Boolean;
        copyLocalDataFrom(fromContactObjectID: number): Boolean;
        openConversation(conversation: Conversation): Boolean;
        hasCapability(capability: number, queryServer: Boolean): Boolean;
        getCapabilityStatus(capability: number, queryServer: Boolean): number;
        refreshProfile(): void;
        getKnownRemoteVersions(versions: VectGIString, useMSNPPresence: Boolean): void;
        discard(): void;
        getAuthRequestMessageHtml(): string;
        getDisplayNameHtml(): string;
        getFullNameHtml(): string;
        getMoodTextHtml(): string;
    }
    export interface __IContactSearchMatchFactory {
        createInstance(c: Contact, title: string, property: number, rank: number): ContactSearchMatch;
    }
    export interface __IContactSearchMatchPublicNonVirtuals {
        property: number;
        rank: number;
        title: string;
        target: Contact;
        asString(): string;
    }
    export interface __IContactSearchProtectedNonVirtuals {
    }
    export interface __IContactSearchPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        addMinAgeTerm(min_age_in_years: number, add_to_subs: Boolean): Boolean;
        addMaxAgeTerm(max_age_in_years: number, add_to_subs: Boolean): Boolean;
        addEmailTerm(email: string, add_to_subs: Boolean): Boolean;
        addLanguageTerm(language: string, add_to_subs: Boolean): Boolean;
        addStrTerm(prop: number, cond: number, value: string, add_to_subs: Boolean): Boolean;
        addIntTerm(prop: number, cond: number, value: number, add_to_subs: Boolean): Boolean;
        addOr(): void;
        isValid(): Boolean;
        submit(): void;
        extend(): void;
        _Release(): void;
        getResults(contacts: VectUnsignedInt, from: number, count: number): void;
        setSupportedContactTypes(contactTypesBitmask: number): void;
        discard(): void;
        search(text: string): Boolean;
    }
    export interface __IContactSearchStatics {
        contact_TYPE_LYNC: number;
        contact_TYPE_SKYPE: number;
        condition_CONTAINS_WORD_PREFIXES: number;
        condition_CONTAINS_WORDS: number;
        condition_PREFIX_LE: number;
        condition_PREFIX_GE: number;
        condition_PREFIX_EQ: number;
        condition_LE: number;
        condition_LT: number;
        condition_GE: number;
        condition_GT: number;
        condition_EQ: number;
        status_FAILED: number;
        status_FINISHED: number;
        status_EXTENDABLE: number;
        status_PENDING: number;
        status_CONSTRUCTION: number;
        statustoString(val: number): string;
        conditiontoString(val: number): string;
        contact_TYPEToString(val: number): string;
    }
    export interface __IContactStatics {
        capabilitystatus_CAPABILITY_EXISTS: number;
        capabilitystatus_CAPABILITY_MIXED: number;
        capabilitystatus_NO_CAPABILITY: number;
        capability_CAPABILITY_PUBLIC_CONTACT: number;
        capability_CAPABILITY_MOBILE_DEVICE: number;
        capability_CAPABILITY_VOICE_EVER: number;
        capability_CAPABILITY_TEXT_EVER: number;
        capability_CAPABILITY_PSTN_TRANSFER: number;
        capability_CAPABILITY_COMMERCIAL_CONTACT: number;
        capability_CAPABILITY_LARGE_CONFERENCE: number;
        capability_CAPABILITY_SERVICE_PROVIDER: number;
        capability_CAPABILITY_TEXT: number;
        capability_CAPABILITY_VIDEO: number;
        capability_CAPABILITY_CALL_FORWARD: number;
        capability_CAPABILITY_CAN_BE_SENT_VM: number;
        capability_CAPABILITY_SKYPEIN: number;
        capability_CAPABILITY_SKYPEOUT: number;
        capability_CAPABILITY_VOICEMAIL: number;
        extra_AUTHREQ_FIELDS_SEND_VERIFIED_COMPANY: number;
        extra_AUTHREQ_FIELDS_SEND_VERIFIED_EMAIL: number;
        availability_SKYPE_ME_FROM_MOBILE: number;
        availability_DO_NOT_DISTURB_FROM_MOBILE: number;
        availability_NOT_AVAILABLE_FROM_MOBILE: number;
        availability_AWAY_FROM_MOBILE: number;
        availability_ONLINE_FROM_MOBILE: number;
        availability_CONNECTING: number;
        availability_INVISIBLE: number;
        availability_SKYPE_ME: number;
        availability_DO_NOT_DISTURB: number;
        availability_NOT_AVAILABLE: number;
        availability_AWAY: number;
        availability_ONLINE: number;
        availability_OFFLINE_BUT_CF_ABLE: number;
        availability_OFFLINE_BUT_VM_ABLE: number;
        availability_OFFLINE: number;
        availability_SKYPEOUT: number;
        availability_BLOCKED_SKYPEOUT: number;
        availability_BLOCKED: number;
        availability_PENDINGAUTH: number;
        availability_UNKNOWN: number;
        authlevel_BLOCKED_BY_ME: number;
        authlevel_AUTHORIZED_BY_ME: number;
        authlevel_NONE: number;
        type_LYNC: number;
        type_PASSPORT: number;
        type_XMPP: number;
        type_EXTERNAL: number;
        type_UNDISCLOSED_PSTN: number;
        type_FREE_PSTN: number;
        type_EMERGENCY_PSTN: number;
        type_PSTN: number;
        type_SKYPE: number;
        type_UNRECOGNIZED: number;
        typetoString(val: number): string;
        authleveltoString(val: number): string;
        availabilitytoString(val: number): string;
        extra_AUTHREQ_FIELDSToString(val: number): string;
        capabilitytoString(val: number): string;
        capabilitystatustoString(val: number): string;
    }
    export interface __IContentItemProtectedNonVirtuals {
    }
    export interface __IContentItemPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        discard(): void;
    }
    export interface __IConversationMatchFactory {
        createInstance(c: Conversation, title: string, description: string, index: number, property: number): ConversationMatch;
    }
    export interface __IConversationMatchPublicNonVirtuals {
        propertyRank: number;
        property: number;
        index: number;
        description: string;
        title: string;
        conv: Conversation;
        asString(): string;
        compareTo(otherMatch: ConversationMatch): Boolean;
    }
    export interface __IConversationPostFilesResultPublicNonVirtuals {
        error_code: number;
        messageObjectID: number;
    }
    export interface __IConversationProtectedNonVirtuals {
    }
    export interface __IConversationPublicNonVirtuals {
        participants: any[];
        partnerContact: Contact;
        partner: Participant;
        myself: Participant;
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        setOption(propKey: number, value: number): Boolean;
        setTopic(topic: string, isXML: Boolean): Boolean;
        setPicture(jpeg: Binary): Boolean;
        getChatname(): string;
        spawnConference(identitiesToAdd: VectGIString, autoRingAddedParticipantsIfLive: Boolean): number;
        addConsumers(identities: VectGIString, autoRingAddedParticipantsIfLive: Boolean): Boolean;
        canAddConsumersOrSpawn(identities: VectGIString): Boolean;
        assimilate(otherConversationObjectID: number): number;
        joinLiveSession(accessToken: string): Boolean;
        ringOthers(identities: VectGIString, videoCall: Boolean, origin: string): Boolean;
        ringSeamless(videoCall: Boolean): Boolean;
        muteMyMicrophone(): Boolean;
        unmuteMyMicrophone(): Boolean;
        holdMyLiveSession(): Boolean;
        resumeMyLiveSession(): Boolean;
        leaveLiveSession(postVoiceAutoresponse: Boolean): Boolean;
        startVoiceMessage(): Boolean;
        transferLiveSession(identities: VectGIString, transferTopic: string, context: Binary): Boolean;
        canTransferLiveSession(identity: string): Boolean;
        sendDTMF(dtmf: number, lengthInMS: number): Boolean;
        stopSendDTMF(): Boolean;
        provideLiveSessionQualityFeedback(questionaryID: string, trackingReason: string, qualityRating: number, problemTokens: string, cdr_id: string): Boolean;
        setMyTextStatusTo(status: number): Boolean;
        postText(text: string, isXML: Boolean): number;
        postContacts(contacts: VectUnsignedInt, altText: string): Boolean;
        postFiles(paths: VectGIFilename, body: string, error_file: Filename): ConversationPostFilesResult;
        postVoiceMessage(voicemailObjectID: number, body: string): Boolean;
        postSMS(smsObjectID: number, body: string): Boolean;
        postVideoMessage(videoMessageObjectID: number, legacyMessage: string): Boolean;
        postMediaDocument(documentObjectID: number, legacyMessage: string): Boolean;
        postExternalMessage(type: number, bodyXml: string): number;
        postLocationMessage(latitude: number, longitude: number, altitude: number, horizontalAccuracy: number, verticalAccuracy: number, speed: number, course: number, timeStamp: number, address: string, pointOfInterest: string, legacyMessage: string): number;
        postSystemMessage(text: string, isXML: Boolean): number;
        getJoinBlob(): string;
        getNonseWord(): string;
        setDeferredSetup(deferred: Boolean): Boolean;
        join_(): Boolean;
        enterPassword(password: string): Boolean;
        setPassword(password: string, hint: string): Boolean;
        retireFrom(): Boolean;
        delete(): Boolean;
        renameTo(name: string): Boolean;
        setBookmark(bookmark: Boolean): Boolean;
        setAlertString(alertString: string): Boolean;
        removeFromInbox(): Boolean;
        addToInbox(timestamp: number): Boolean;
        setConsumedHorizon(timestamp: number, also_unconsume: Boolean): Boolean;
        markUnread(): Boolean;
        isMemberOf(groupObjectID: number): Boolean;
        pinFirst(): Boolean;
        pinAfter(previousConversationObjectID: number): Boolean;
        unPin(): Boolean;
        getParticipants(participants: VectUnsignedInt, filter: number): void;
        getLastMessages(contextMessages: VectUnsignedInt, unconsumedMessages: VectUnsignedInt, requireTimestamp: number): void;
        loadMessages(timestampExcl: number, count: number, returnNewer: Boolean, messages: VectUnsignedInt): void;
        findMessage(text: string, fromTimestampUp: number): number;
        attachVideoToLiveSession(sendVideoObjectID: number): Boolean;
        getCapabilities(): VectBool;
        checkPremiumVideoSubscription(context: number): number;
        getChatNameFromThreadId(): string;
        getThreadIdFromChatName(): string;
        getIdentity(): string;
        getDisplayNameHtml(): string;
        getTopicHtml(): string;
        subscribePropChanges(propKeys: number[]): void;
        discard(): void;
    }
    export interface __IConversationSearchProtectedNonVirtuals {
    }
    export interface __IConversationSearchPublicNonVirtuals {
        start(term: string): number;
        cancel(): void;
    }
    export interface __IConversationStatics {
        subscription_CHECK_CONTEXT_USER_IS_ABOUT_TO_START_VIDEO: number;
        subscription_CHECK_CONTEXT_USER_IS_ABOUT_TO_START_SCREENSHARE: number;
        capability_CAPABILITY_COUNT: number;
        capability_CAN_SEND_STATIC_LOCATION_MESSAGE: number;
        capability_CAN_SEND_MEDIAMESSAGE: number;
        capability_CAN_SEND_VIDEOMESSAGE: number;
        capability_CAN_SPAWN: number;
        capability_CAN_KICK: number;
        capability_CAN_RETIRE: number;
        capability_CAN_ADD: number;
        capability_CAN_CHANGE_PICTURE: number;
        capability_CAN_CHANGE_TOPIC: number;
        capability_CAN_EDIT_OTHERS: number;
        capability_CAN_EDIT_MYSELF: number;
        capability_CAN_SEND_CONTACTS: number;
        capability_CAN_SEND_VOICEMAIL: number;
        capability_CAN_SEND_FILE: number;
        capability_CAN_SEND_TEXT: number;
        capability_CAN_SEND_SMS: number;
        capability_CAN_CHECK_QUALITY: number;
        capability_CAN_HOLD_LIVE_SESSION: number;
        capability_CAN_SHARE_SCREEN: number;
        capability_CAN_RING_PSTN: number;
        capability_CAN_RING_VIDEO: number;
        capability_CAN_RING_ALL: number;
        capability_CAN_RING: number;
        capability_CAN_GO_LIVE: number;
        list_TYPE_REALLY_ALL_CONVERSATIONS: number;
        list_TYPE_PINNED_CONVERSATIONS: number;
        list_TYPE_LIVE_CONVERSATIONS: number;
        list_TYPE_BOOKMARKED_CONVERSATIONS: number;
        list_TYPE_INBOX_CONVERSATIONS: number;
        list_TYPE_ALL_CONVERSATIONS: number;
        participantfilter_OTHER_CONSUMERS: number;
        participantfilter_MYSELF: number;
        participantfilter_CONSUMERS_AND_APPLICANTS: number;
        participantfilter_APPLICANTS: number;
        participantfilter_CONSUMERS: number;
        participantfilter_ALL: number;
        picture_FORMAT_PICTURE_SINGLE_URL: number;
        picture_FORMAT_PICTURE_DEFAULT: number;
        live_SESSION_EVENT_USER_REJECTED_BECAUSE_OF_CONF_PARTICIPANTS_LIMIT: number;
        live_SESSION_EVENT_DOWNGRADED_TO_AUDIO_BECAUSE_OF_VIDEO_PARTICIPANTS_LIMIT: number;
        premium_VIDEO_STATUS_RESULT_503_SERVICE_TIMEOUT: number;
        premium_VIDEO_STATUS_RESULT_500_GENERAL_SERVICE_ERROR: number;
        premium_VIDEO_STATUS_RESULT_430_GRACE_TIME_EXPIRED: number;
        premium_VIDEO_STATUS_RESULT_424_FAIR_USAGE_POLICY_VIOLATION_SPONSORS_MONTH_LIMIT_REACHED: number;
        premium_VIDEO_STATUS_RESULT_422_FAIR_USAGE_POLICY_VIOLATION_SPONSORS_DAY_LIMIT_REACHED: number;
        premium_VIDEO_STATUS_RESULT_420_FAIR_USAGE_POLICY_VIOLATION_CALL_LIMIT_REACHED: number;
        premium_VIDEO_STATUS_RESULT_416_SUBSCRIPTION_IS_ALREADY_IN_USE: number;
        premium_VIDEO_STATUS_RESULT_414_NO_SUBSCRIPTION: number;
        premium_VIDEO_STATUS_RESULT_412_SUBSCRIPTION_INSUFFICENT_FOR_THIS_CALL: number;
        premium_VIDEO_STATUS_RESULT_410_NO_VALID_SUBSCRIPTION_BUT_TRIAL_IS_AVAILABLE: number;
        premium_VIDEO_STATUS_RESULT_405_GROUP_TOO_LARGE: number;
        premium_VIDEO_STATUS_RESULT_404_CONVERSATION_ID_NOT_FOUND_OR_CALL_ALREADY_TERMINATED: number;
        premium_VIDEO_STATUS_RESULT_403_PAID_SERVICE_BLOCK: number;
        premium_VIDEO_STATUS_RESULT_401_P2P_BLOCK: number;
        premium_VIDEO_STATUS_RESULT_400_BAD_REQUEST_SOME_FIELDS_MISSING: number;
        premium_VIDEO_STATUS_RESULT_200_OK: number;
        premium_VIDEO_STATUS_NOT_MULTIPARTY_VIDEO: number;
        allowed_ACTIVITY_SPEAK_AND_WRITE: number;
        allowed_ACTIVITY_SPEAK: number;
        allowed_ACTIVITY_ADD_CONSUMERS: number;
        allowed_ACTIVITY_SET_META: number;
        local_LIVESTATUS_ACTIVATING: number;
        local_LIVESTATUS_TRANSFERRING: number;
        local_LIVESTATUS_RECENTLY_LIVE: number;
        local_LIVESTATUS_RECORDING_VOICE_MESSAGE: number;
        local_LIVESTATUS_PLAYING_VOICE_MESSAGE: number;
        local_LIVESTATUS_OTHERS_ARE_LIVE_FULL: number;
        local_LIVESTATUS_OTHERS_ARE_LIVE: number;
        local_LIVESTATUS_ON_HOLD_REMOTELY: number;
        local_LIVESTATUS_ON_HOLD_LOCALLY: number;
        local_LIVESTATUS_IM_LIVE: number;
        local_LIVESTATUS_RINGING_FOR_ME: number;
        local_LIVESTATUS_STARTING: number;
        local_LIVESTATUS_NONE: number;
        my_STATUS_RETIRED_VOLUNTARILY: number;
        my_STATUS_RETIRED_FORCEFULLY: number;
        my_STATUS_CONSUMER: number;
        my_STATUS_INVALID_ACCESS_TOKEN: number;
        my_STATUS_APPLICATION_DENIED: number;
        my_STATUS_APPLICANT: number;
        my_STATUS_QUEUED_TO_ENTER: number;
        my_STATUS_DOWNLOADING_MESSAGES: number;
        my_STATUS_RETRY_CONNECTING: number;
        my_STATUS_CONNECTING: number;
        type_LEGACY_SHAREDGROUP: number;
        type_LEGACY_VOICE_CONFERENCE: number;
        type_TERMINATED_CONFERENCE: number;
        type_CONFERENCE: number;
        type_DIALOG: number;
        setupkey_KEEP_IN_INBOX_WHEN_BLOCKING: string;
        setupkey_INCOMING_AUTH_REQUEST_IN_CONV: string;
        setupkey_ENABLE_REACHBACK_CALLING: string;
        setupkey_HASH_LINK_URL: string;
        setupkey_ENABLE_DIFF_HIGHLIGHTING: string;
        setupkey_CALL_SEAMLESS_UPGRADE_CAPABLE: string;
        setupkey_CALL_EMERGENCY_COUNTRY: string;
        setupkey_CALL_INCOMING_IN_ROUTING_STATUS: string;
        setupkey_CALL_APPLY_CF: string;
        setupkey_CALL_SEND_TO_VM: string;
        setupkey_CALL_NOANSWER_TIMEOUT: string;
        setupkey_DISABLE_CHAT_ACTIVITY_INDICATION: string;
        setupkey_CHATDB_LIMIT_KB: string;
        setupkey_CHAT_HISTORY_DAYS: string;
        setupkey_DISABLE_CHAT_HISTORY: string;
        setupkey_DISABLE_P2P_CHAT: string;
        setupkey_DISABLE_CHAT: string;
        setupkey_QUIET_P2P_IN_CALL: string;
        setupkey_RECENTLY_LIVE_TIMEOUT: string;
        setupkey_INBOX_LIMIT_DAYS: string;
        setupkey_UPDATE_INBOX_MESSAGE_ID_METHOD: string;
        setupkey_DISABLE_INBOX_UPDATE_ON_TYPING: string;
        setupkey_INBOX_UPDATE_TIMEOUT: string;
        setupkey_ENABLE_EXTERNAL_CONTACTS: string;
        setupkey_ENABLE_BIRTHDAY_NOTIFICATION: string;
        typetoString(val: number): string;
        my_STATUSToString(val: number): string;
        local_LIVESTATUSToString(val: number): string;
        allowed_ACTIVITYToString(val: number): string;
        premium_VIDEO_STATUSToString(val: number): string;
        live_SESSION_EVENTToString(val: number): string;
        picture_FORMATToString(val: number): string;
        participantfiltertoString(val: number): string;
        list_TYPEToString(val: number): string;
        capabilitytoString(val: number): string;
        subscription_CHECK_CONTEXTToString(val: number): string;
    }
    export interface __IEXTPROPKEYPublicNonVirtuals {
    }
    export interface __IEXTPROPKEYStatics {
        ft_LOCALSTATUS: number;
        ft_LOCALFILENAME: number;
    }
    export interface __IFilenameFactory {
        createInstance(fromString: string): Filename;
    }
    export interface __IFilenamePublicNonVirtuals {
        setFromString(fromString: string): Boolean;
    }
    export interface __IIMCachePublicNonVirtuals {
    }
    export interface __IIMCacheStatics {
        name: string;
        save(cache: string): void;
        load(): string;
    }
    export interface __IMediaDocumentGetMediaLinkResultPublicNonVirtuals {
        path: string;
        success: number;
    }
    export interface __IMediaDocumentProtectedNonVirtuals {
    }
    export interface __IMediaDocumentPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        sync(): Boolean;
        getMediaLink(profile: string, policy: number): MediaDocumentGetMediaLinkResult;
        setMediaByContentId(contentId: string, path: string, policy: number): Boolean;
        setMediaByProfileId(profileId: string, path: string, policy: number): Boolean;
        linkProfileToContentId(profileId: string, contentId: string): Boolean;
        linkProfiles(profileFrom: string, profileTo: string): Boolean;
        upload(contentId: string): Boolean;
        getUploadStatus(contentId: string): number;
        discard(): void;
    }
    export interface __IMediaDocumentStatics {
        network_ERROR_INTERNAL_ERROR: number;
        network_ERROR_PROTOCOL_ERROR: number;
        network_ERROR_CONNECTION_TIMEOUT: number;
        network_ERROR_SERVER_NOT_AVAILABLE: number;
        network_ERROR_SSL_ERROR: number;
        network_ERROR_HOST_NAME_NOT_RESOLVED: number;
        media_GET_POLICY_CANCEL_DOWNLOAD: number;
        media_GET_POLICY_DOWNLOAD_ONLY: number;
        media_GET_POLICY_LINK_ONLY: number;
        media_GET_POLICY_CACHE_THEN_DOWNLOAD: number;
        media_GET_POLICY_CACHE_THEN_LINK: number;
        media_GET_POLICY_CACHE_ONLY: number;
        media_STATUS_MEDIA_BAD_CONTENT: number;
        media_STATUS_MEDIA_PROCESSING: number;
        media_STATUS_MEDIA_NOT_AVAILABLE: number;
        media_STATUS_MEDIA_AVAILABLE_ONLINE: number;
        media_STATUS_MEDIA_LOADED: number;
        media_STATUS_MEDIA_LOADING: number;
        upload_STATUS_UPLOAD_FAILED: number;
        upload_STATUS_UPLOAD_COMPLETED: number;
        upload_STATUS_UPLOAD_IN_PROGRESS: number;
        upload_STATUS_UPLOAD_QUEUED: number;
        upload_STATUS_UPLOAD_NOT_STARTED: number;
        document_TYPE_MEDIA_PHOTO_WITH_AUDIO: number;
        document_TYPE_MEDIA_AUDIO: number;
        document_TYPE_MEDIA_PHOTO: number;
        document_TYPE_MEDIA_VIDEO: number;
        document_TYPE_MEDIA_UNKNOWN: number;
        storage_POLICY_STORAGE_POLICY_TAKE_OWNERSHIP: number;
        storage_POLICY_STORAGE_POLICY_WEAK_LINK: number;
        storage_POLICY_STORAGE_POLICY_MOVE_TO_CACHE: number;
        storage_POLICY_STORAGE_POLICY_COPY_TO_CACHE: number;
        status_FAILED: number;
        status_EXPIRED: number;
        status_DELETED: number;
        status_ACCESS_DENIED: number;
        status_AVAILABLE: number;
        status_NOT_AVAILABLE: number;
        status_NOT_CREATED: number;
        statustoString(val: number): string;
        storage_POLICYToString(val: number): string;
        document_TYPEToString(val: number): string;
        upload_STATUSToString(val: number): string;
        media_STATUSToString(val: number): string;
        media_GET_POLICYToString(val: number): string;
        network_ERRORToString(val: number): string;
    }
    export interface __IMessageGetLocationResultPublicNonVirtuals {
        pointOfInterest: string;
        address: string;
        timeStamp: number;
        course: number;
        speed: number;
        verticalAccuracy: number;
        horizontalAccuracy: number;
        altitude: number;
        longitude: number;
        latitude: number;
        success: Boolean;
    }
    export interface __IMessageProtectedNonVirtuals {
    }
    export interface __IMessagePublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        canEdit(): Boolean;
        getPermissions(): number;
        edit(newText: string, isXML: Boolean, undo: Boolean, legacyPrefix: string): Boolean;
        getContacts(contacts: VectUnsignedInt): Boolean;
        getTransfers(transfers: VectUnsignedInt): Boolean;
        getVoiceMessage(voicemail: Voicemail): Boolean;
        getSMS(sms: Sms): Boolean;
        deleteLocally(): Boolean;
        getOtherLiveMessage(): number;
        getVideoMessage(videoMessage: VideoMessage): Boolean;
        getLocation(): MessageGetLocationResult;
        getMediaDocument(document: MediaDocument): Boolean;
        discard(): void;
        getBodyHtml(): string;
        getBodyText(): string;
        getAuthorDisplayNameHtml(): string;
        getVideoMessageAsync(): Windows.Foundation.IAsyncOperation<VideoMessage>;
    }
    export interface __IMessageStatics {
        permissions_PERM_DELETABLE: number;
        permissions_PERM_EDITABLE: number;
        permissions_PERM_NONE: number;
        leavereason_INTERNAL_ERROR: number;
        leavereason_CHAT_FULL: number;
        leavereason_UNSUBSCRIBE: number;
        leavereason_DECLINE_ADD: number;
        leavereason_ADDER_MUST_BE_AUTHORIZED: number;
        leavereason_ADDER_MUST_BE_FRIEND: number;
        leavereason_USER_INCAPABLE: number;
        leavereason_USER_NOT_FOUND: number;
        set_OPTION_KEY_SET_OPTION_ADMIN_ONLY_ACTIVITIES: number;
        set_OPTION_KEY_SET_OPTION_HISTORY_LIMIT_IN_DAYS: number;
        set_OPTION_KEY_SET_OPTION_DISCLOSE_HISTORY: number;
        set_OPTION_KEY_SET_OPTION_ENTRY_LEVEL_RANK: number;
        set_OPTION_KEY_SET_OPTION_JOINING_ENABLED: number;
        set_METADATA_KEY_SET_META_PICTURE: number;
        set_METADATA_KEY_SET_META_GUIDELINES: number;
        set_METADATA_KEY_SET_META_TOPIC: number;
        set_METADATA_KEY_SET_META_NAME: number;
        consumption_STATUS_UNCONSUMED_ELEVATED: number;
        consumption_STATUS_UNCONSUMED_NORMAL: number;
        consumption_STATUS_UNCONSUMED_SUPPRESSED: number;
        consumption_STATUS_CONSUMED: number;
        sending_STATUS_FAILED_TO_SEND: number;
        sending_STATUS_SENT: number;
        sending_STATUS_SENDING: number;
        sending_STATUS_SENDING_STATUS_UNKNOWN: number;
        type_RECEIVED_DELIVERY_FAILURE_NOTIFICATION: number;
        type_POSTED_DTMF: number;
        type_UNBLOCKED: number;
        type_REVOKED_AUTH: number;
        type_EJECTED_FROM_LIVESESSION: number;
        type_LEFT_LIVESESSION: number;
        type_HAD_VIDEO_ERROR: number;
        type_HAD_VOICE_ERROR: number;
        type_PAUSED_LIVESESSION: number;
        type_JOINED_LIVESESSION: number;
        type_STOPPED_RINGING: number;
        type_STARTED_RINGING_OTHERS: number;
        type_TERMINATED_CONVERSATION: number;
        type_POSTED_VOICE_AUTORESPONSE: number;
        type_REQUESTED_RANK: number;
        type_SET_OPTION: number;
        type_MESSAGE_EXPANSION_END: number;
        type_POSTED_SKYPECHAT_MESSAGE: number;
        type_POSTED_LOCATION: number;
        type_POSTED_MEDIA_MESSAGE: number;
        type_MESSAGE_EXPANSION_START: number;
        type_HAS_BIRTHDAY: number;
        type_LEGACY_MESSAGE: number;
        type_MISSING_MESSAGES: number;
        type_POSTED_VIDEO_MESSAGE: number;
        type_POSTED_INVOICE: number;
        type_POSTED_FILES: number;
        type_POSTED_VOICE_MESSAGE: number;
        type_POSTED_ALERT: number;
        type_POSTED_SMS: number;
        type_POSTED_CONTACTS: number;
        type_POSTED_EMOTE: number;
        type_POSTED_TEXT: number;
        type_BLOCKED: number;
        type_GRANTED_AUTH: number;
        type_REQUESTED_AUTH: number;
        type_ENDED_LIVESESSION: number;
        type_STARTED_LIVESESSION: number;
        type_SET_RANK: number;
        type_RETIRED: number;
        type_RETIRED_OTHERS: number;
        type_ADDED_APPLICANTS: number;
        type_ADDED_CONSUMERS: number;
        type_ADDED_LEGACY_CONSUMERS: number;
        type_LEGACY_MEMBER_UPGRADED: number;
        type_SPAWNED_CONFERENCE: number;
        type_SET_METADATA: number;
        typetoString(val: number): string;
        sending_STATUSToString(val: number): string;
        consumption_STATUSToString(val: number): string;
        set_METADATA_KEYToString(val: number): string;
        set_OPTION_KEYToString(val: number): string;
        leavereasontoString(val: number): string;
        permissionstoString(val: number): string;
    }
    export interface __IMetatagPublicNonVirtuals {
    }
    export interface __IMetatagStatics {
        type_BINARY: number;
        type_STRING: number;
        type_INTEGER: number;
    }
    export interface __IObjectInterfacePublicNonVirtuals {
    }
    export interface __IParticipantProtectedNonVirtuals {
    }
    export interface __IParticipantPublicNonVirtuals {
        participantContact: Contact;
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        canSetRankTo(rank: number): Boolean;
        setRankTo(rank: number): Boolean;
        ring(identityToUse: string, videoCall: Boolean, nrofRedials: number, redialPeriod: number, autoStartVM: Boolean, origin: string, nonseWord: string, callerConversationId: string): Boolean;
        ringNodeInfo(identityToUse: string, videoCall: Boolean, nodeInfo: Binary, nonseWord: string): Boolean;
        ringIt(videoCall: Boolean): Boolean;
        setLiveIdentityToUse(identityToUse: string): Boolean;
        hangup(): Boolean;
        retire(): Boolean;
        setPosition(position: number): Boolean;
        getLiveSessionVideos(videos: VectUnsignedInt): Boolean;
        getDisplayNameHtml(): string;
        discard(): void;
    }
    export interface __IParticipantStatics {
        dtmf_DTMF_POUND: number;
        dtmf_DTMF_STAR: number;
        dtmf_DTMF_9: number;
        dtmf_DTMF_8: number;
        dtmf_DTMF_7: number;
        dtmf_DTMF_6: number;
        dtmf_DTMF_5: number;
        dtmf_DTMF_4: number;
        dtmf_DTMF_3: number;
        dtmf_DTMF_2: number;
        dtmf_DTMF_1: number;
        dtmf_DTMF_0: number;
        voice_STATUS_PLAYING_VOICE_AUTORESPONSE: number;
        voice_STATUS_VOICE_STOPPED: number;
        voice_STATUS_VOICE_ON_HOLD: number;
        voice_STATUS_SPEAKING: number;
        voice_STATUS_LISTENING: number;
        voice_STATUS_EARLY_MEDIA: number;
        voice_STATUS_RINGING: number;
        voice_STATUS_VOICE_CONNECTING: number;
        voice_STATUS_VOICE_AVAILABLE: number;
        voice_STATUS_VOICE_NA: number;
        voice_STATUS_VOICE_UNKNOWN: number;
        text_STATUS_WRITING_AS_CAT: number;
        text_STATUS_WRITING_AS_ANGRY: number;
        text_STATUS_WRITING: number;
        text_STATUS_READING: number;
        text_STATUS_TEXT_NA: number;
        text_STATUS_TEXT_UNKNOWN: number;
        rank_OUTLAW: number;
        rank_RETIRED: number;
        rank_APPLICANT: number;
        rank_SPECTATOR: number;
        rank_WRITER: number;
        rank_SPEAKER: number;
        rank_ADMIN: number;
        rank_CREATOR: number;
        ranktoString(val: number): string;
        text_STATUSToString(val: number): string;
        voice_STATUSToString(val: number): string;
        dtmftoString(val: number): string;
    }
    export interface __IPriceQuoteProtectedNonVirtuals {
    }
    export interface __IPriceQuotePublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        getReferredObjectID(): number;
        accept(): Boolean;
        reject(): Boolean;
        discard(): void;
    }
    export interface __IPriceQuoteStatics {
        failurereason_CALL_NOT_IN_PROGRESS: number;
        failurereason_ACCOUNT_ON_HOLD: number;
        failurereason_TIMEOUT: number;
        failurereason_OUT_OF_FUNDS: number;
        failurereason_SECURITY_CHECK_FAILED: number;
        failurereason_PAYMENTS_STOPPED: number;
        failurereason_NOT_SUPPORTED_BY_BUYER: number;
        failurereason_PRICE_EXCEEDS_LIMIT: number;
        failurereason_SIGNUP_REQUIRED: number;
        failurereason_GW_AUTHENTICATION_FAILED: number;
        failurereason_INTERNAL_ERROR: number;
        failurereason_NETWORK_PROBLEM: number;
        failurereason_REJECTED_BY_BUYER: number;
        failurereason_NO_FAILURE: number;
        status_FINISHED: number;
        status_INPROGRESS: number;
        status_ACCEPTED: number;
        status_PENDING: number;
        type_CALL_EVENT: number;
        type_CALL_MINUTE: number;
        typetoString(val: number): string;
        statustoString(val: number): string;
        failurereasontoString(val: number): string;
    }
    export interface __IPROPKEYPublicNonVirtuals {
    }
    export interface __IPROPKEYStatics {
        mediadocument_URI: number;
        mediadocument_DOC_TYPE: number;
        mediadocument_STATUS: number;
        videomessage_TYPE: number;
        videomessage_CREATION_TIMESTAMP: number;
        videomessage_AUTHOR: number;
        videomessage_DESCRIPTION: number;
        videomessage_TITLE: number;
        videomessage_PROGRESS: number;
        videomessage_PUBLIC_LINK: number;
        videomessage_LOCAL_PATH: number;
        videomessage_VOD_PATH: number;
        videomessage_VOD_STATUS: number;
        videomessage_STATUS: number;
        accesssession_ACCOUNT_ID: number;
        accesssession_DNS_SERVER: number;
        accesssession_HOTSPOT_RATING: number;
        accesssession_CONNECTION_PROGRESS: number;
        accesssession_PROMO_ID: number;
        accesssession_SESSION_FLAGS: number;
        accesssession_HOTSPOT_TYPE: number;
        accesssession_PARTNER_ID: number;
        accesssession_MINUTES_REMAINING: number;
        accesssession_SESSION_DURATION: number;
        accesssession_SESSION_TIMESTAMP: number;
        accesssession_PRICE_CURRENCY: number;
        accesssession_PRICE_PRECISION: number;
        accesssession_PRICE_PER_MINUTE: number;
        accesssession_AP_MAC: number;
        accesssession_AP_SSID: number;
        accesssession_FAILUREREASON: number;
        accesssession_STATUS: number;
        account_RICH_MOOD_TEXT: number;
        account_MOOD_TIMESTAMP: number;
        account_AVATAR_TIMESTAMP: number;
        account_ALERTSTRING: number;
        account_ASSIGNED_COMMENT: number;
        account_AUTHREQUEST_COUNT: number;
        account_LASTUSED_TIMESTAMP: number;
        account_ASSIGNED_SPEEDDIAL: number;
        account_AVATAR_IMAGE: number;
        account_CAPABILITIES: number;
        account_LASTONLINE_TIMESTAMP: number;
        account_AVAILABILITY: number;
        account_GIVEN_DISPLAYNAME: number;
        account_IPCOUNTRY: number;
        account_NROF_AUTHED_BUDDIES: number;
        account_TIMEZONE: number;
        account_MOOD_TEXT: number;
        account_AUTHREQ_TIMESTAMP: number;
        account_GIVEN_AUTHLEVEL: number;
        account_REFRESHING: number;
        account_DISPLAYNAME: number;
        account_RECEIVED_AUTHREQUEST: number;
        account_PROFILE_TIMESTAMP: number;
        account_ABOUT: number;
        account_HOMEPAGE: number;
        account_EMAILS: number;
        account_PHONE_MOBILE: number;
        account_PHONE_OFFICE: number;
        account_PHONE_HOME: number;
        account_CITY: number;
        account_PROVINCE: number;
        account_COUNTRY: number;
        account_LANGUAGES: number;
        account_GENDER: number;
        account_BIRTHDAY: number;
        account_FULLNAME: number;
        account_PSTNNUMBER: number;
        account_SKYPENAME: number;
        account_TYPE: number;
        account_ACCOUNT_PASSWORD: number;
        account_SHORTCIRCUIT_SYNC: number;
        account_COBRAND_ID: number;
        account_ROAMING_HISTORY_ENABLED: number;
        account_LIVEID_MEMBERNAME: number;
        account_FEDERATED_PRESENCE_POLICY: number;
        account_FLAMINGO_XMPP_STATUS: number;
        account_PARTNER_CHANNEL_STATUS: number;
        account_NR_OF_OTHER_INSTANCES: number;
        account_REGISTRATION_TIMESTAMP: number;
        account_SERVICE_PROVIDER_INFO: number;
        account_PARTNER_OPTEDOUT: number;
        account_AD_POLICY: number;
        account_AUTHREQUEST_POLICY: number;
        account_VOICEMAIL_POLICY: number;
        account_PHONENUMBERS_POLICY: number;
        account_WEBPRESENCE_POLICY: number;
        account_TIMEZONE_POLICY: number;
        account_BUDDYCOUNT_POLICY: number;
        account_AVATAR_POLICY: number;
        account_PSTN_CALL_POLICY: number;
        account_SKYPE_CALL_POLICY: number;
        account_CHAT_POLICY: number;
        account_OFFLINE_CALLFORWARD: number;
        account_CBLSYNCSTATUS: number;
        account_SUBSCRIPTIONS: number;
        account_SKYPEIN_NUMBERS: number;
        account_SKYPEOUT_PRECISION: number;
        account_SKYPEOUT_BALANCE: number;
        account_SKYPEOUT_BALANCE_CURRENCY: number;
        account_SUGGESTED_SKYPENAME: number;
        account_COMMITSTATUS: number;
        account_LOGOUTREASON: number;
        account_PWDCHANGESTATUS: number;
        account_STATUS: number;
        pricequote_MESSAGE_ID: number;
        pricequote_USERTOUCHED_TIMESTAMP: number;
        pricequote_FAILUREREASON: number;
        pricequote_STATUS: number;
        pricequote_AMOUNT_PAID: number;
        pricequote_PRICE_CURRENCY: number;
        pricequote_PRICE_PRECISION: number;
        pricequote_PRICE: number;
        pricequote_DESCRIPTION: number;
        pricequote_TYPE: number;
        pricequote_BUYER: number;
        pricequote_PROVIDER: number;
        pricequote_CONVO_ID: number;
        alert_CHATMSG_GUID: number;
        alert_WINDOW_SIZE: number;
        alert_MESSAGE_TYPE: number;
        alert_MESSAGE_BUTTON_URI: number;
        alert_MESSAGE_BUTTON_CAPTION: number;
        alert_MESSAGE_FOOTER: number;
        alert_MESSAGE_CONTENT: number;
        alert_MESSAGE_HEADER_LATER: number;
        alert_MESSAGE_HEADER_CANCEL: number;
        alert_MESSAGE_HEADER_SUBJECT: number;
        alert_MESSAGE_HEADER_TITLE: number;
        alert_MESSAGE_HEADER_CAPTION: number;
        alert_META_EXPIRY: number;
        alert_PARTNER_LOGO: number;
        alert_PARTNER_HEADER: number;
        alert_PARTNER_HISTORY: number;
        alert_PARTNER_EVENT: number;
        alert_PARTNER_ID: number;
        alert_IS_UNSEEN: number;
        alert_PARTNER_NAME: number;
        alert_TIMESTAMP: number;
        transfer_CONVO_ID: number;
        transfer_CHATMSG_INDEX: number;
        transfer_CHATMSG_GUID: number;
        transfer_BYTESPERSECOND: number;
        transfer_BYTESTRANSFERRED: number;
        transfer_FILESIZE: number;
        transfer_FILENAME: number;
        transfer_FILEPATH: number;
        transfer_FINISHTIME: number;
        transfer_STARTTIME: number;
        transfer_FAILUREREASON: number;
        transfer_STATUS: number;
        transfer_PARTNER_DISPNAME: number;
        transfer_PARTNER_HANDLE: number;
        transfer_TYPE: number;
        sms_CONVO_NAME: number;
        sms_REPLY_ID_NUMBER: number;
        sms_IDENTITY: number;
        sms_CHATMSG_ID: number;
        sms_BODY: number;
        sms_TARGET_STATUSES: number;
        sms_TARGET_NUMBERS: number;
        sms_REPLY_TO_NUMBER: number;
        sms_PRICE_CURRENCY: number;
        sms_PRICE_PRECISION: number;
        sms_PRICE: number;
        sms_TIMESTAMP: number;
        sms_IS_FAILED_UNSEEN: number;
        sms_ERROR_CATEGORY: number;
        sms_FAILUREREASON: number;
        sms_STATUS: number;
        sms_OUTGOING_REPLY_TYPE: number;
        sms_TYPE: number;
        voicemail_CHATMSG_GUID: number;
        voicemail_CONVO_ID: number;
        voicemail_PLAYBACK_PROGRESS: number;
        voicemail_ALLOWED_DURATION: number;
        voicemail_DURATION: number;
        voicemail_TIMESTAMP: number;
        voicemail_SUBJECT: number;
        voicemail_FAILUREREASON: number;
        voicemail_STATUS: number;
        voicemail_PARTNER_DISPNAME: number;
        voicemail_PARTNER_HANDLE: number;
        voicemail_TYPE: number;
        video_DEVICE_PATH: number;
        video_CONVO_ID: number;
        video_SS_TIMESTAMP: number;
        video_DURATION_SS: number;
        video_HQ_PRESENT: number;
        video_TIMESTAMP: number;
        video_DURATION_LTVGAD2: number;
        video_DURATION_VGAD2: number;
        video_DURATION_HQV: number;
        video_DURATION_720: number;
        video_DURATION_1080: number;
        video_MEDIA_TYPE: number;
        video_DIMENSIONS: number;
        video_DEBUGINFO: number;
        video_ERROR: number;
        video_STATUS: number;
        message_CALL_GUID: number;
        message_PARTICIPANT_COUNT: number;
        message_LEAVEREASON: number;
        message_REASON: number;
        message_IDENTITIES: number;
        message_BODY_XML: number;
        message_PARAM_VALUE: number;
        message_PARAM_KEY: number;
        message_EDIT_TIMESTAMP: number;
        message_EDITED_BY: number;
        message_CONSUMPTION_STATUS: number;
        message_SENDING_STATUS: number;
        message_TYPE: number;
        message_TIMESTAMP: number;
        message_ORIGINALLY_MEANT_FOR: number;
        message_GUID: number;
        message_AUTHOR_WAS_LIVE: number;
        message_AUTHOR_DISPLAYNAME: number;
        message_AUTHOR: number;
        message_CONVO_GUID: number;
        message_CONVO_ID: number;
        conversation_ALT_IDENTITY: number;
        conversation_MCR_CALLER: number;
        conversation_PREMIUM_VIDEO_SPONSOR_LIST: number;
        conversation_UNCONSUMED_MESSAGES_PRIO: number;
        conversation_UNCONSUMED_MESSAGE_COUNT: number;
        conversation_PREMIUM_VIDEO_IS_GRACE_PERIOD: number;
        conversation_PREMIUM_VIDEO_STATUS: number;
        conversation_IS_P2P_MIGRATED: number;
        conversation_PICTURE: number;
        conversation_META_PICTURE: number;
        conversation_META_GUIDELINES: number;
        conversation_META_TOPIC: number;
        conversation_META_NAME: number;
        conversation_PASSWORDHINT: number;
        conversation_OPT_ADMIN_ONLY_ACTIVITIES: number;
        conversation_OPT_DISCLOSE_HISTORY: number;
        conversation_OPT_ENTRY_LEVEL_RANK: number;
        conversation_OPT_JOINING_ENABLED: number;
        conversation_MY_STATUS: number;
        conversation_CREATION_TIMESTAMP: number;
        conversation_CREATOR: number;
        conversation_PINNED_ORDER: number;
        conversation_SPAWNED_FROM_CONVO_ID: number;
        conversation_ACTIVE_INVOICE_MESSAGE: number;
        conversation_LAST_ACTIVITY_TIMESTAMP: number;
        conversation_CONSUMPTION_HORIZON: number;
        conversation_ACTIVE_VM_ID: number;
        conversation_UNCONSUMED_MESSAGES_VOICE: number;
        conversation_UNCONSUMED_ELEVATED_MESSAGES: number;
        conversation_UNCONSUMED_NORMAL_MESSAGES: number;
        conversation_UNCONSUMED_SUPPRESSED_MESSAGES: number;
        conversation_LAST_MESSAGE_ID: number;
        conversation_INBOX_MESSAGE_ID: number;
        conversation_INBOX_TIMESTAMP: number;
        conversation_LOCAL_LIVESTATUS: number;
        conversation_DISPLAYNAME: number;
        conversation_GIVEN_DISPLAYNAME: number;
        conversation_IS_BLOCKED: number;
        conversation_IS_BOOKMARKED: number;
        conversation_ALERT_STRING: number;
        conversation_LIVE_IS_MUTED: number;
        conversation_LIVE_START_TIMESTAMP: number;
        conversation_LIVE_HOST: number;
        conversation_TYPE: number;
        conversation_IDENTITY: number;
        participant_IS_SEAMLESSLY_UPGRADED_CALL: number;
        participant_IS_VIDEO_CODEC_COMPATIBLE: number;
        participant_LIVE_IP_ADDRESS: number;
        participant_IS_MULTIPARTY_VIDEO_UPDATABLE: number;
        participant_LIVESESSION_RECOVERY_IN_PROGRESS: number;
        participant_LIVE_IDENTITY_TO_USE: number;
        participant_IS_MULTIPARTY_VIDEO_CAPABLE: number;
        participant_IS_PREMIUM_VIDEO_SPONSOR: number;
        participant_LAST_LEAVEREASON: number;
        participant_ADDER: number;
        participant_TRANSFERRED_TO: number;
        participant_TRANSFERRED_BY: number;
        participant_LIVE_COUNTRY: number;
        participant_LIVE_TYPE: number;
        participant_QUALITY_PROBLEMS: number;
        participant_LAST_VOICE_ERROR: number;
        participant_DEBUGINFO: number;
        participant_SOUND_LEVEL: number;
        participant_LIVE_START_TIMESTAMP: number;
        participant_LIVE_FWD_IDENTITIES: number;
        participant_LIVE_PRICE_FOR_ME: number;
        participant_LIVE_IDENTITY: number;
        participant_VOICE_STATUS: number;
        participant_TEXT_STATUS: number;
        participant_REQUESTED_RANK: number;
        participant_RANK: number;
        participant_IDENTITY: number;
        participant_CONVO_ID: number;
        contactsearch_CONTACT_SEARCH_STATUS: number;
        contactsearch_STATUS: number;
        contact_EXTERNAL_SYSTEM_ID: number;
        contact_EXTERNAL_ID: number;
        contact_POPULARITY_ORD: number;
        contact_ASSIGNED_PHONE3_LABEL: number;
        contact_ASSIGNED_PHONE3: number;
        contact_ASSIGNED_PHONE2_LABEL: number;
        contact_ASSIGNED_PHONE2: number;
        contact_ASSIGNED_PHONE1_LABEL: number;
        contact_ASSIGNED_PHONE1: number;
        contact_AUTHREQUEST_COUNT: number;
        contact_LASTUSED_TIMESTAMP: number;
        contact_ALERTSTRING: number;
        contact_ASSIGNED_COMMENT: number;
        contact_ASSIGNED_SPEEDDIAL: number;
        contact_GIVEN_DISPLAYNAME: number;
        contact_GIVEN_AUTHLEVEL: number;
        contact_REFRESHING: number;
        contact_DISPLAYNAME: number;
        contact_AVAILABILITY: number;
        contact_LASTONLINE_TIMESTAMP: number;
        contact_AUTHREQ_TIMESTAMP: number;
        contact_RECEIVED_AUTHREQUEST: number;
        contact_MOOD_TIMESTAMP: number;
        contact_AVATAR_TIMESTAMP: number;
        contact_IPCOUNTRY: number;
        contact_NROF_AUTHED_BUDDIES: number;
        contact_PROFILE_TIMESTAMP: number;
        contact_CAPABILITIES: number;
        contact_TIMEZONE: number;
        contact_RICH_MOOD_TEXT: number;
        contact_MOOD_TEXT: number;
        contact_AVATAR_IMAGE: number;
        contact_ABOUT: number;
        contact_HOMEPAGE: number;
        contact_HASHED_EMAILS: number;
        contact_EMAILS: number;
        contact_PHONE_MOBILE: number;
        contact_PHONE_OFFICE: number;
        contact_PHONE_HOME: number;
        contact_CITY: number;
        contact_PROVINCE: number;
        contact_COUNTRY: number;
        contact_LANGUAGES: number;
        contact_GENDER: number;
        contact_BIRTHDAY: number;
        contact_FULLNAME: number;
        contact_PSTNNUMBER: number;
        contact_SKYPENAME: number;
        contact_TYPE: number;
        contactgroup_GIVEN_SORTORDER: number;
        contactgroup_NROFCONTACTS_ONLINE: number;
        contactgroup_NROFCONTACTS: number;
        contactgroup_GIVEN_DISPLAYNAME: number;
        contactgroup_CUSTOM_GROUP_ID: number;
        contactgroup_TYPE: number;
        valueToString(val: number): string;
    }
    export interface __ISearchPublicNonVirtuals {
    }
    export interface __ISetupPublicNonVirtuals {
        isDefined(key: string): Boolean;
        delete(key: string): void;
        getSubKey(key: string, index: number): string;
        getStr(key: string): string;
        getInt(key: string, defaultValue: number): number;
        setInt(key: string, value: number): void;
        setStr(key: string, value: string): void;
    }
    export interface __ISkyLibAccessPaymentGetIntResultPublicNonVirtuals {
        value: number;
        success: Boolean;
    }
    export interface __ISkyLibAccessPaymentGetStringResultPublicNonVirtuals {
        value: string;
        success: Boolean;
    }
    export interface __ISkyLibCanUnifyContactsResultPublicNonVirtuals {
        resultCode: number;
        contactObjectID: number;
    }
    export interface __ISkyLibContentEncodeResultPublicNonVirtuals {
        result: string;
        rslt: Boolean;
    }
    export interface __ISkyLibContentGetEditableResultPublicNonVirtuals {
        result: string;
        rslt: Boolean;
    }
    export interface __ISkyLibContentGetRichEditableResultPublicNonVirtuals {
        result: string;
        rslt: Boolean;
    }
    export interface __ISkyLibContentItemGetChildItemResultPublicNonVirtuals {
        resultItem: number;
        success: Boolean;
    }
    export interface __ISkyLibContentItemGetResultPublicNonVirtuals {
        resultItem: number;
        success: Boolean;
    }
    export interface __ISkyLibContentStripXMLResultPublicNonVirtuals {
        result: string;
        rslt: Boolean;
    }
    export interface __ISkyLibFindContactByPstnNumberResultPublicNonVirtuals {
        foundInKey: number;
        found: Boolean;
    }
    export interface __ISkyLibGetAudioDeviceCapabilitiesResultPublicNonVirtuals {
        interfaceString: string;
        capabilities: number;
    }
    export interface __ISkyLibGetCallerIDOptionsResultPublicNonVirtuals {
        idconfig: number;
        callerID: string;
        smsID: string;
        success: Boolean;
    }
    export interface __ISkyLibGetDefaultContentIdResultPublicNonVirtuals {
        contentId: string;
        success: Boolean;
    }
    export interface __ISkyLibGetNrgLevelsResultPublicNonVirtuals {
        speakerLevel: number;
        micLevel: number;
    }
    export interface __ISkyLibGetVideoMessagingEntitlementResultPublicNonVirtuals {
        planName: string;
        isEntitled: Boolean;
    }
    export interface __ISkyLibIsMicrophoneMutedResultPublicNonVirtuals {
        muted: Boolean;
        rslt: Boolean;
    }
    export interface __ISkyLibIsSpeakerMutedResultPublicNonVirtuals {
        muted: Boolean;
        rslt: Boolean;
    }
    export interface __ISkyLibNormalizeIdentityResultPublicNonVirtuals {
        normalized: string;
        result: number;
    }
    export interface __ISkyLibNormalizePSTNWithCountryResultPublicNonVirtuals {
        normalized: string;
        result: number;
    }
    export interface __ISkyLibQueryContentListingResultPublicNonVirtuals {
        requestID: number;
        result: number;
    }
    export interface __ISkyLibUnifyContactsResultPublicNonVirtuals {
        resultCode: number;
        contactObjectID: number;
    }
    export interface __ISkyLibValidateAvatarResultPublicNonVirtuals {
        freeBytesLeft: number;
        result: number;
    }
    export interface __ISkyLibValidateProfileStringResultPublicNonVirtuals {
        freeBytesLeft: number;
        result: number;
    }
    export interface __ISkyLibVerifyAndUnpackResultPublicNonVirtuals {
        file_error: number;
        result: number;
    }
    export interface __ISkyMetadataPublicNonVirtuals {
    }
    export interface __ISmsGetBodyChunksResultPublicNonVirtuals {
        charsUntilNextChunk: number;
        rslt: Boolean;
    }
    export interface __ISmsProtectedNonVirtuals {
    }
    export interface __ISmsPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        getTargetStatus(target: string): number;
        getTargetReplyNumber(target: string): string;
        getTargetReplyType(target: string): number;
        getTargetPrice(target: string): number;
        getTargetCLIUsed(target: string): number;
        getTargetHandsetDeliveryReport(target: string): number;
        getTargetErrorCategory(target: string): number;
        canTargetReply(target: string): number;
        setReplyTo(number: string): Boolean;
        setReplyId(callerId: string): Boolean;
        setTargets(numbers: VectGIString): Boolean;
        setBody(text: string, chunks: VectGIString): SmsSetBodyResult;
        getBodyChunks(textChunks: VectGIString): SmsGetBodyChunksResult;
        send(): Boolean;
        setOrigin(origin: string): Boolean;
        setConfirmationType(type: number): void;
        discard(): void;
    }
    export interface __ISmsSetBodyResultPublicNonVirtuals {
        charsUntilNextChunk: number;
        result: number;
    }
    export interface __ISmsStatics {
        confirm_TYPE_ID_SKYPEIN: number;
        confirm_TYPE_ID_MOBILE: number;
        confirm_TYPE_ID_SMS: number;
        setbodyresult_BODY_LASTCHAR_IGNORED: number;
        setbodyresult_BODY_OK: number;
        setbodyresult_BODY_TRUNCATED: number;
        setbodyresult_BODY_INVALID: number;
        handset_DELIVERY_REPORT_HANDSET_DELIVERY_REPORT_UNKNOWN: number;
        handset_DELIVERY_REPORT_HANDSET_DELIVERY_REPORT_CAPABLE: number;
        handset_DELIVERY_REPORT_HANDSET_DELIVERY_REPORT_NOT_CAPABLE: number;
        cli_USED_CLI_USE_UNKNOWN: number;
        cli_USED_CLI_CAN_BE_USED: number;
        cli_USED_CLI_CANNOT_BE_USED: number;
        reply_CAPABILITY_CAPABLE_LOCALLY: number;
        reply_CAPABILITY_CAPABLE_GLOBALLY: number;
        reply_CAPABILITY_NOT_CAPABLE: number;
        targetstatus_TARGET_DELIVERY_FAILED: number;
        targetstatus_TARGET_DELIVERY_SUCCESSFUL: number;
        targetstatus_TARGET_DELIVERY_PENDING: number;
        targetstatus_TARGET_NOT_ROUTABLE: number;
        targetstatus_TARGET_ACCEPTABLE: number;
        targetstatus_TARGET_UNDEFINED: number;
        targetstatus_TARGET_ANALYZING: number;
        error_CATEGORY_ERROR_CATEGORY_PERMANENT_SERVICE_ERROR: number;
        error_CATEGORY_ERROR_CATEGORY_TRANSIENT_SERVICE_ERROR: number;
        error_CATEGORY_ERROR_CATEGORY_MESSAGE_EXPIRED_BACKEND: number;
        error_CATEGORY_ERROR_CATEGORY_MESSAGE_EXPIRED_OPERATOR: number;
        error_CATEGORY_ERROR_CATEGORY_NUMBER_UNREACHABLE: number;
        error_CATEGORY_ERROR_CATEGORY_NUMBER_BLOCKED: number;
        error_CATEGORY_ERROR_CATEGORY_NUMBER_DOES_NOT_EXIST: number;
        error_CATEGORY_ERROR_CATEGORY_DESTINATION_NOT_SUPPORTED: number;
        error_CATEGORY_ERROR_CATEGORY_INVALID_DST_ADDRESS: number;
        error_CATEGORY_ERROR_CATEGORY_INVALID_SRC_ADDRESS: number;
        error_CATEGORY_ERROR_CATEGORY_SMS_VELOCITY_DST_REACHED: number;
        error_CATEGORY_ERROR_CATEGORY_SYSTEM_ID_BLOCKED: number;
        error_CATEGORY_ERROR_CATEGORY_BROKEN_DELIVERY_REPORT: number;
        error_CATEGORY_ERROR_CATEGORY_NO_DELIVERY_REPORT: number;
        error_CATEGORY_ERROR_CATEGORY_SPAM_DETECTED: number;
        error_CATEGORY_ERROR_CATEGORY_SPAM_VELOCITY_REACHED: number;
        error_CATEGORY_ERROR_CATEGORY_SMS_VELOCITY_REACHED: number;
        error_CATEGORY_ERROR_CATEGORY_SENDER_BLOCKED: number;
        error_CATEGORY_ERROR_CATEGORY_SENDER_BLOCKED_BY_RECIPIENT: number;
        error_CATEGORY_ERROR_CATEGORY_RECIPIENT_BLOCKED: number;
        error_CATEGORY_ERROR_CATEGORY_NO_SENDERID_CAPABILITY: number;
        error_CATEGORY_ERROR_CATEGORY_NODE_BLOCKED: number;
        error_CATEGORY_ERROR_CATEGORY_IP_BLOCKED: number;
        error_CATEGORY_ERROR_CATEGORY_USER_BLOCKED: number;
        error_CATEGORY_ERROR_CATEGORY_INVALID_CONFIRMATION_CODE: number;
        error_CATEGORY_ERROR_CATEGORY_INSUFFICIENT_FUNDS: number;
        error_CATEGORY_ERROR_CATEGORY_NO_SMS_CAPABILITY: number;
        error_CATEGORY_ERROR_CATEGORY_SERVER_CONNECT_FAILED: number;
        error_CATEGORY_ERROR_CATEGORY_MISC_ERROR: number;
        error_CATEGORY_ERROR_CATEGORY_NO_ERROR: number;
        failurereason_NO_SENDERID_CAPABILITY: number;
        failurereason_NODE_BLOCKED: number;
        failurereason_IP_BLOCKED: number;
        failurereason_USER_BLOCKED: number;
        failurereason_INVALID_CONFIRMATION_CODE: number;
        failurereason_INSUFFICIENT_FUNDS: number;
        failurereason_NO_SMS_CAPABILITY: number;
        failurereason_SERVER_CONNECT_FAILED: number;
        failurereason_MISC_ERROR: number;
        status_FAILED: number;
        status_SOME_TARGETS_FAILED: number;
        status_DELIVERED: number;
        status_SENT_TO_SERVER: number;
        status_SENDING_TO_SERVER: number;
        status_COMPOSING: number;
        status_READ: number;
        status_RECEIVED: number;
        outgoing_REPLY_TYPE_REPLY_TYPE_MIXED: number;
        outgoing_REPLY_TYPE_REPLY_2WAY_AUTOASSIGNED_NR: number;
        outgoing_REPLY_TYPE_REPLY_USER_PHONE_NR: number;
        outgoing_REPLY_TYPE_REPLY_SKYPENAME: number;
        type_CONFIRMATION_CODE_SUBMIT: number;
        type_CONFIRMATION_CODE_REQUEST: number;
        type_OUTGOING: number;
        type_INCOMING: number;
        typetoString(val: number): string;
        outgoing_REPLY_TYPEToString(val: number): string;
        statustoString(val: number): string;
        failurereasontoString(val: number): string;
        error_CATEGORYToString(val: number): string;
        targetstatustoString(val: number): string;
        reply_CAPABILITYToString(val: number): string;
        cli_USEDToString(val: number): string;
        handset_DELIVERY_REPORTToString(val: number): string;
        setbodyresulttoString(val: number): string;
        confirm_TYPEToString(val: number): string;
    }
    export interface __IStatsEventAttributeContainerPublicNonVirtuals {
        deserialize(binary: Binary): void;
        send(eventType: number): void;
        addIntegerValue(key: number, value: number): void;
        addStringValue(key: number, value: string): void;
    }
    export interface __ISubstringFinderFactory {
        createInstance(searchString: string): SubstringFinder;
    }
    export interface __ISubstringFinderPublicNonVirtuals {
        markupTag: string;
        requiredMatch: number;
        markupMatches(source: string): string;
    }
    export interface __ITransferProtectedNonVirtuals {
    }
    export interface __ITransferPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        accept(filenameWithPath: Filename): Boolean;
        pause(): Boolean;
        resume(): Boolean;
        cancel(): Boolean;
        isController(): Boolean;
        discard(): void;
    }
    export interface __ITransferStatics {
        failurereason_PLACEHOLDER_TIMEOUT: number;
        failurereason_TOO_MANY_PARALLEL: number;
        failurereason_REMOTE_OFFLINE_FOR_TOO_LONG: number;
        failurereason_REMOTE_DOES_NOT_SUPPORT_FT: number;
        failurereason_FAILED_REMOTE_WRITE: number;
        failurereason_FAILED_WRITE: number;
        failurereason_FAILED_REMOTE_READ: number;
        failurereason_FAILED_READ: number;
        failurereason_REMOTELY_CANCELLED: number;
        failurereason_SENDER_NOT_AUTHORISED: number;
        status_CANCELLED_BY_REMOTE: number;
        status_OFFER_FROM_OTHER_INSTANCE: number;
        status_PLACEHOLDER: number;
        status_FAILED: number;
        status_COMPLETED: number;
        status_CANCELLED: number;
        status_REMOTELY_PAUSED: number;
        status_PAUSED: number;
        status_TRANSFERRING_OVER_RELAY: number;
        status_TRANSFERRING: number;
        status_WAITING_FOR_ACCEPT: number;
        status_CONNECTING: number;
        status_NEW: number;
        type_OUTGOING: number;
        type_INCOMING: number;
        typetoString(val: number): string;
        statustoString(val: number): string;
        failurereasontoString(val: number): string;
    }
    export interface __IUIEventRunnerPublicNonVirtuals {
        run(context: UIEventContext, durationThreshold: number): void;
    }
    export interface __IUIEventRunnerStatics {
        instance(): UIEventRunner;
    }
    export interface __IVectBoolPublicNonVirtuals {
        getCount(): number;
        append(val: Boolean): number;
        get(index: number): Boolean;
    }
    export interface __IVectGIFilenamePublicNonVirtuals {
        getCount(): number;
        append(fileName: Filename): void;
    }
    export interface __IVectGIStringFactory {
        createInstance(vals: string[]): VectGIString;
    }
    export interface __IVectGIStringPublicNonVirtuals {
        getCount(): number;
        append(val: string): string;
        get(index: number): string;
    }
    export interface __IVectIntPublicNonVirtuals {
        getCount(): number;
        append(val: number): number;
        get(index: number): number;
    }
    export interface __IVectUnsignedIntFactory {
        createInstance(vals: number[]): VectUnsignedInt;
    }
    export interface __IVectUnsignedIntPublicNonVirtuals {
        getCount(): number;
        append(val: number): number;
        get(index: number): number;
    }
    export interface __IVideoGetCurrentVideoDeviceResultPublicNonVirtuals {
        devicePath: string;
        deviceName: string;
        mediatype: number;
    }
    export interface __IVideoMessageProtectedNonVirtuals {
    }
    export interface __IVideoMessagePublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        prepareForPlay(allowLocalPath: Boolean): void;
        getThumbnail(): void;
        discard(): void;
        getThumbnailAsync(): Windows.Foundation.IAsyncAction;
    }
    export interface __IVideoMessageStatics {
        vod_STATUS_VOD_PLAYABLE_LOCAL: number;
        vod_STATUS_VOD_PLAYABLE: number;
        vod_STATUS_VOD_CONVERTING: number;
        vod_STATUS_VOD_NOT_AVAILABLE: number;
        status_EXPIRED: number;
        status_DELETED: number;
        status_INVALID: number;
        status_CANCELED: number;
        status_FAILED: number;
        status_UPLOADED: number;
        status_UPLOADING: number;
        status_RECORDED: number;
        status_BLANK: number;
        statustoString(val: number): string;
        vod_STATUSToString(val: number): string;
    }
    export interface __IVideoProtectedNonVirtuals {
    }
    export interface __IVideoPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        start(): void;
        stop(): void;
        setIncomingTransmissionsDesired(desire: Boolean): void;
        setScreenCaptureRectangle(x0: number, y0: number, width: number, height: number, monitorNumber: number, windowHandle: number): void;
        setRemoteRendererId(id: number): void;
        setVideoConsumptionProperties(renderedWidth: number, renderedHeight: number): void;
        getCurrentVideoDevice(): VideoGetCurrentVideoDeviceResult;
        discard(): void;
        getVideoSrc(): string;
        getVideoDeviceHandle(): string;
        getAspectRatio(): number;
        getOrientation(): number;
        getWidth(): number;
        getHeight(): number;
        setVisible(visible: Boolean): Boolean;
    }
    export interface __IVideoStatics {
        orientation_TRANSPOSE_MASK: number;
        orientation_FLIP_V_MASK: number;
        orientation_FLIP_H_MASK: number;
        orientation_TRANSPOSE_FLIP_H_V: number;
        orientation_TRANSPOSE_FLIP_V: number;
        orientation_TRANSPOSE_FLIP_H: number;
        orientation_TRANSPOSE: number;
        orientation_FLIP_H_V: number;
        orientation_FLIP_V: number;
        orientation_FLIP_H: number;
        orientation_NONE: number;
        video_DEVICE_CAPABILITY_VIDEOCAP_USB_HIGHSPEED: number;
        video_DEVICE_CAPABILITY_VIDEOCAP_REQ_DRIVERUPDATE: number;
        video_DEVICE_CAPABILITY_VIDEOCAP_HQ_CERTIFIED: number;
        video_DEVICE_CAPABILITY_VIDEOCAP_HQ_CAPABLE: number;
        mediatype_MEDIA_VIDEO: number;
        mediatype_MEDIA_SCREENSHARING: number;
        status_UNATTACHED: number;
        status_SWITCHING_DEVICE: number;
        status_CHECKING_SUBSCRIPTION: number;
        status_UNKNOWN: number;
        status_HINT_IS_VIDEOCALL_RECEIVED: number;
        status_NOT_STARTED: number;
        status_PAUSED: number;
        status_STOPPING: number;
        status_RUNNING: number;
        status_REJECTED: number;
        status_STARTING: number;
        status_AVAILABLE: number;
        status_NOT_AVAILABLE: number;
        setupkey_VIDEO_ADVERTPOLICY: string;
        setupkey_VIDEO_RECVPOLICY: string;
        setupkey_VIDEO_DISABLE: string;
        setupkey_VIDEO_AUTOSEND: string;
        setupkey_VIDEO_DEVICE_PATH: string;
        setupkey_VIDEO_DEVICE: string;
        statustoString(val: number): string;
        mediatypetoString(val: number): string;
        video_DEVICE_CAPABILITYToString(val: number): string;
    }
    export interface __IVoicemailProtectedNonVirtuals {
    }
    export interface __IVoicemailPublicNonVirtuals {
        getObjectID(): number;
        getDbID(): number;
        getStrProperty(propKey: number): string;
        getStrPropertyWithXmlStripped(propKey: number): string;
        getIntProperty(propKey: number): number;
        setExtendedStrProperty(propKey: number, value: string): void;
        setExtendedIntProperty(propKey: number, value: number): void;
        startRecording(): Boolean;
        stopRecording(): Boolean;
        startPlayback(): Boolean;
        stopPlayback(): Boolean;
        delete(): Boolean;
        cancel(): Boolean;
        forwardToContacts(contacts: VectUnsignedInt): Boolean;
        forwardToGroups(groups: VectUnsignedInt): Boolean;
        getEventId(): number;
        checkPermission(): Boolean;
        discard(): void;
    }
    export interface __IVoicemailStatics {
        failurereason_SENDER_BLOCKED: number;
        failurereason_SENDER_NOT_AUTHORIZED: number;
        failurereason_RECEIVER_DISABLED_VOICEMAIL: number;
        failurereason_NO_PERMISSION: number;
        failurereason_PLAYBACK_ERROR: number;
        failurereason_RECORDING_ERROR: number;
        failurereason_FILE_WRITE_ERROR: number;
        failurereason_FILE_READ_ERROR: number;
        failurereason_NO_SUCH_VOICEMAIL: number;
        failurereason_NO_VOICEMAIL_CAPABILITY: number;
        failurereason_CONNECT_ERROR: number;
        failurereason_MISC_ERROR: number;
        status_CANCELLED: number;
        status_CHECKING: number;
        status_DELETING_FAILED: number;
        status_FAILED: number;
        status_DELETING: number;
        status_UPLOADED: number;
        status_UPLOADING: number;
        status_RECORDED: number;
        status_RECORDING: number;
        status_BLANK: number;
        status_PLAYED: number;
        status_PLAYING: number;
        status_BUFFERING: number;
        status_UNPLAYED: number;
        status_DOWNLOADING: number;
        status_NOTDOWNLOADED: number;
        type_OUTGOING: number;
        type_CUSTOM_GREETING: number;
        type_DEFAULT_GREETING: number;
        type_INCOMING: number;
        typetoString(val: number): string;
        statustoString(val: number): string;
        failurereasontoString(val: number): string;
    }
    export interface __IWrSkyLibFactory {
        createInstance(skypeVersion: string): WrSkyLib;
    }
    export interface __IWrSkyLibProtectedNonVirtuals {
    }
    export interface __IWrSkyLibPublicNonVirtuals {
        defaultVideoDeviceHandle: string;
        logoutReason: number;
        myIdentity: string;
        loginInProgress: Boolean;
        loggedIn: Boolean;
        myself: Contact;
        account: Account;
        setup: Setup;
        avatarmanager: AvatarManager;
        setIMEI(imei: string): void;
        setAndroidId(androidId: string): void;
        getContactGroup(objectId: number): ContactGroup;
        getHardwiredContactGroup(type: number): number;
        getCustomContactGroups(groups: VectUnsignedInt): void;
        createCustomContactGroup(group: ContactGroup): Boolean;
        getContactType(identity: string): number;
        getContact__(identity: string, contact: Contact): Boolean;
        findContactBySpeedDial(dial: string, contact: Contact): Boolean;
        findContactByPstnNumber(number: string, contact: Contact): SkyLibFindContactByPstnNumberResult;
        findContactsByEmail(email: string, contacts: VectUnsignedInt): void;
        getIdentityType(identity: string): number;
        canUnifyContacts(contacts: VectUnsignedInt): SkyLibCanUnifyContactsResult;
        unifyContacts(contacts: VectUnsignedInt): SkyLibUnifyContactsResult;
        unUnifyContact(masterObjectID: number, servantObjectID: number): Boolean;
        forceEasContactsSync(): void;
        getContactSearch(objectId: number): ContactSearch;
        createContactSearch(search: ContactSearch): void;
        createBasicContactSearch(text: string, search: ContactSearch): Boolean;
        createIdentitySearch(identity: string, search: ContactSearch): Boolean;
        findPromotedSCDContacts(updatesOnly: Boolean): number;
        getParticipant(objectId: number): Participant;
        createConference(conference: Conversation): Boolean;
        createConference_1(): Conversation;
        getConversationByConvoID_(convoID: number, conversation: Conversation): Boolean;
        getConversationByIdentity_(convoIdentity: string, conversation: Conversation, matchPSTN: Boolean): Boolean;
        getConversationByParticipants(participantIdentities: VectGIString, conversation: Conversation, createIfNonExisting: Boolean, ignoreBookmarkedOrNamed: Boolean): Boolean;
        getConversationByBlob(joinBlob: string, conversation: Conversation, alsoJoin: Boolean): Boolean;
        getConversationByBlob_1(joinBlob: string, alsoJoin: Boolean): Conversation;
        getConversationByCallGUID(callGUID: string, conversation: Conversation): Boolean;
        getConversationByCallGUID_1(callGUID: string): Conversation;
        getConversationList(conversations: VectUnsignedInt, type: number): void;
        getUnconsumedConversationsCount(type: number): number;
        joinExistingConferenceCall(hostIdentity: string, accessToken: string): Boolean;
        callExistingConference(participants: VectGIString, conversationIdentity: string, conversation: Conversation, accessToken: string, callId: string): Boolean;
        getConversationMessage(objectId: number): Message;
        getMessageByGuid(guid: Binary, message: Message): Boolean;
        getMessageList(messages: VectUnsignedInt, fromTimestampInc: number, toTimestampExc: number): void;
        getMessageListByType(type: number, latestPerConvOnly: Boolean, messages: VectUnsignedInt, fromTimestampInc: number, toTimestampExc: number): void;
        searchMessages(text: string, limit: number): number;
        hasCalled(identity: string): Boolean;
        clearInbox(upToTimestamp: number): void;
        fillInbox(lookBackTimestamp: number, dryRun: Boolean): Boolean;
        consumeAllConversations(): void;
        deleteAllMessages(): void;
        getChatMemberCountLimit(): number;
        getVideo(objectId: number): Video;
        getAvailableVideoDevices(deviceNames: VectGIString, devicePaths: VectGIString): number;
        getVideoDeviceType(deviceName: string, devicePath: string): number;
        hasVideoDeviceCapability(deviceName: string, devicePath: string, cap: number): Boolean;
        displayVideoDeviceTuningDialog(deviceName: string, devicePath: string): void;
        createLocalVideo(type: number, deviceName: string, devicePath: string): number;
        createLocalVideo_1(deviceHandle: string): Video;
        createPreviewVideo(type: number, deviceName: string, devicePath: string): number;
        createPreviewVideo_1(deviceHandle: string): Video;
        videoCommand(command: string): string;
        startMonitoringQuality(withUser: string, excludeNetworkTest: Boolean): void;
        stopMonitoringQuality(withUser: string, justStop: Boolean): number;
        getVoicemail(objectId: number): Voicemail;
        getGreeting(skypeName: string, greeting: Voicemail): Boolean;
        prepareSound(data: Binary, sound: Binary): number;
        prepareSoundFromFile(datafile: Filename, sound: Binary): number;
        playStart(soundid: number, sound: Binary, loop: Boolean, useCallOutDevice: Boolean): void;
        playStartFromFile(soundid: number, datafile: Filename, loop: Boolean, useCallOutDevice: Boolean): number;
        playStop(soundid: number): void;
        startRecordingTest(recordAndPlaybackData: Boolean): void;
        stopRecordingTest(): void;
        stopPlayDTMF(): void;
        getAvailableOutputDevices(handleList: VectGIString, nameList: VectGIString, productIdList: VectGIString): Boolean;
        getAvailableRecordingDevices(handleList: VectGIString, nameList: VectGIString, productIdList: VectGIString): Boolean;
        selectSoundDevices(callInDevice: string, callOutDevice: string, waveOutDevice: string): void;
        getAudioDeviceCapabilities(deviceHandle: string): SkyLibGetAudioDeviceCapabilitiesResult;
        getNrgLevels(): SkyLibGetNrgLevelsResult;
        voiceCommand(command: string): string;
        getSpeakerVolume(): number;
        setSpeakerVolume(volume: number): void;
        getMicVolume(): number;
        setMicVolume(volume: number): void;
        isSpeakerMuted(): SkyLibIsSpeakerMutedResult;
        isMicrophoneMuted(): SkyLibIsMicrophoneMutedResult;
        muteSpeakers(mute: Boolean): Boolean;
        muteMicrophone(mute: Boolean): Boolean;
        setOperatingMedia(media: number, maxUplinkBps: number, maxDownlinkBps: number): void;
        setMobileDataUsageLevel(usage: number): void;
        getSms(objectId: number): Sms;
        requestConfirmationCode(type: number, number: string, sms: Sms): Boolean;
        submitConfirmationCode(number: string, code: string, sms: Sms): Boolean;
        createOutgoingSms(sms: Sms): Boolean;
        getValidatedSmsNumbers(numbers: VectGIString): void;
        getLastConfirmationNumber(): string;
        setCallerIDOptions(smsID: string, callerID: string, idconfig: number): number;
        getCallerIDOptions(): SkyLibGetCallerIDOptionsResult;
        getTransfer(objectId: number): Transfer;
        contentItemGet(uri: string, block: Boolean): SkyLibContentItemGetResult;
        contentItemDelete(id: number): void;
        contentItemGetType(id: number): string;
        contentItemGetUri(id: number): string;
        contentItemGetBody(id: number, body: Binary): Boolean;
        contentItemGetMeta(id: number): string;
        contentItemExposingNow(id: number, yes: Boolean): void;
        contentItemExecuted(id: number): void;
        contentItemClosed(id: number, count: Boolean): void;
        contentItemGetChildNames(id: number, list: VectGIString): Boolean;
        contentItemGetChildItem(id: number, suburi: string): SkyLibContentItemGetChildItemResult;
        contentItemRunBytecode(id: number): number;
        contentItemGetChildCount(id: number, suburi: string, any: Boolean): number;
        setInstallContentBundleName(filename: Filename): Boolean;
        getAlert(objectId: number): Alert;
        getRecentAlerts(maxPageResults: number, page: number, alerts: VectUnsignedInt): Boolean;
        getRecentAlertsOfType(maxPageResults: number, page: number, types: VectUnsignedInt, alerts: VectUnsignedInt): Boolean;
        getPriceQuote(objectId: number): PriceQuote;
        issuePriceQuote(buyer: string, type: number, description: string, price: number, precision: number, currency: string, referredObjectID: number, priceQuote: PriceQuote): Boolean;
        createSignedToken(target: string, token: Binary): Boolean;
        partnerQueryData(qt: number, partner: number, params: Binary): number;
        getAccount(objectId: number): Account;
        getAccount_(identity: string, account: Account): Boolean;
        getExistingAccounts(accountNameList: VectGIString): Boolean;
        getDefaultAccountName(): string;
        getAccessSession(objectId: number): AccessSession;
        createAccessSession(session: AccessSession): Boolean;
        accessPaymentSubmit(): Boolean;
        accessPaymentPoll(): number;
        accessPaymentReset(): void;
        accessPaymentSetString(id: number, value: string): Boolean;
        accessPaymentGetString(id: number): SkyLibAccessPaymentGetStringResult;
        accessPaymentSetInt(id: number, value: number): Boolean;
        accessPaymentGetInt(id: number): SkyLibAccessPaymentGetIntResult;
        sendHttpRequest(method: number, uri: string, payload: string, headers: string, userdata: number): number;
        createHttpStream(method: number, uri: string, headers: string, userdata: number): number;
        sendHttpStream(streamID: number, payload: Binary): Boolean;
        clearHttpCookies(): void;
        getVCard(vcard: Binary): Boolean;
        getVCardOwner(vcard: Binary): string;
        importProfile(vcard: Binary): Boolean;
        importBuddylist(vcard: Binary): Boolean;
        parseVCard(vcard: Binary, dest: SkyMetadata): Boolean;
        contactToVCard(contactObjectID: number): string;
        vcardToContact(vcard: string): number;
        attachPublicAPIClient(allowFilterCommand: Boolean): number;
        detachPublicAPIClient(clientID: number): void;
        publicAPIRequest(clientID: number, request: string): string;
        queryContentListing(src: string, clc: number): SkyLibQueryContentListingResult;
        setUIIntProp(key: number, value: number): void;
        setUIStrProp(key: number, value: string): void;
        getUIIntProp(key: number): number;
        getUIStrProp(key: number, defaultValue: string): string;
        deleteUIProp(key: number): void;
        getIntLibProp(key: number): number;
        getStrLibProp(key: number, defaultValue: string): string;
        getStrLibPropInternal(lib_key: number, defaultValue: string): string;
        getTotalOnlineUserCount(): number;
        reportStatsEvent(statsType: number, attributes: Binary, samplingValue: string): Boolean;
        checkClientUpgrade(): Boolean;
        changeBackgroundMode(inBackground: Boolean): void;
        setNetworkActivityLevel(level: number): Boolean;
        executeBackgroundTask(): void;
        changeOperationMode(level: number): void;
        getISOLanguageInfo(languageCodeList: VectGIString, languageNameList: VectGIString): void;
        getISOCountryInfo(countryCodeList: VectGIString, countryNameList: VectGIString, countryPrefixList: VectUnsignedInt, countryDialExampleList: VectGIString): void;
        getSupportedUILanguageList(uiLanguageCodeList: VectGIString): void;
        getISOFormattedCurrency(amount: string, precision: number, countryCode: string): string;
        getISOCountryCodebyPhoneNo(number: string): string;
        storeLocal(key: string, value: Binary): Boolean;
        fetchLocal(key: string, value: Binary): Boolean;
        app2AppCreate(appname: string): Boolean;
        app2AppDelete(appname: string): Boolean;
        app2AppConnect(appname: string, skypename: string): Boolean;
        app2AppDisconnect(appname: string, stream: string): Boolean;
        app2AppWrite(appname: string, stream: string, data: Binary): Boolean;
        app2AppDatagram(appname: string, stream: string, data: Binary): Boolean;
        app2AppRead(appname: string, stream: string, data: Binary): Boolean;
        app2AppGetConnectableUsers(appname: string, users: VectGIString): Boolean;
        app2AppGetStreamsList(appname: string, listType: number, streams: VectGIString, receivedSizes: VectUnsignedInt): Boolean;
        getVideoMessage(objectId: number): VideoMessage;
        createVideoMessageWithFile(filename: string, title: string, description: string, result: VideoMessage, thumbnail: string, type: string): Boolean;
        getVideoMessagingEntitlement(ids: VectGIString, values: VectUnsignedInt): SkyLibGetVideoMessagingEntitlementResult;
        getMediaDocument(objectId: number): MediaDocument;
        createMediaDocument(type: number, mediaDocument: MediaDocument): Boolean;
        getDefaultContentId(type: number): SkyLibGetDefaultContentIdResult;
        requestSSOToken(): number;
        requestWebSession(): number;
        requestWebSessionWithPassword(skypename: string, password: string): number;
        requestSkypeToken(): number;
        requestAccessToken(partnerId: string, scope: string, bypassCache: Boolean): number;
        putAuthTokens(partnerId: string, scopes: VectGIString, accessToken: string, expirationTime: number, refreshToken: string): Boolean;
        linkAccountWithPartner(partnerId: string, accessToken: string, skypename: string, password: string, reason: string, allowSpam: Boolean, allowSms: Boolean): Boolean;
        getSkypeLinkInfo(partnerId: string, accessToken: string): Boolean;
        getPartnerLinkInfo(partnerId: string, skypename: string, password: string): Boolean;
        getSuggestedAccounts(partnerId: string, accessToken: string): Boolean;
        getAccountAvatar(partnerId: string, accessToken: string, username: string, password: string, skypename: string): Boolean;
        handlePushNotification(eventType: number, nodeSpecificNotificationPayload: Binary, genericNotificationPayload: Binary): number;
        registerContexts(serviceType: number, platform: string, templateKey: string, contexts: VectGIString, registrationTokens: VectGIString, registrationTTLs: VectUnsignedInt): number;
        unregisterContexts(contexts: VectGIString): number;
        reregisterContexts(): number;
        setLocalizedString(localizedString: number, value: string): void;
        getServerTime(): number;
        getSeamlessCapable(identity: string): void;
        setSeamlessCapable(capable: Boolean): void;
        setUserActive(isActive: Boolean): void;
        getDebugString(debugString: number): string;
        findObjectByDbID(type: number, dbID: number): number;
        getObjectType(objectID: number): number;
        getAccountByIdentity(identity: string): Account;
        getContact(objectID: number): Contact;
        getContactByIdentity(identity: string): Contact;
        getConversationByConvoId(convoID: number): Conversation;
        getConversationByIdentity(identity: string): Conversation;
        getConversation(objectID: number): Conversation;
        getConversationTable(type: number, properties: number[]): number[];
        isMe(identity: string): Boolean;
        loginWithOAuth(partnerId: string, accessToken: string, refreshToken: string, savePwd: Boolean, saveDataLocally: Boolean): void;
        finishLogin(): void;
        logoutUser(clearCachedCredentials: Boolean): void;
        invalidateUserLogin(): void;
        subscribePropChange(props: number[]): void;
        registerContextsWin8(platform: string, templateKey: string, uri: string, ttl: number): void;
        handleCallNotification(eventType: number, nodeSpecificPayload: string, genericPayload: string): number;
        handleNotification(notificationContent: string): void;
        declareExtendedProp(objectType: number, columnName: string, propKey: number, valueType: number): void;
        getLibStatus(): number;
        start(block: Boolean): void;
        getSpeakerLevel(): number;
        getMicLevel(): number;
        getVideoDevicePath(deviceHandle: string): string;
        getVideoDeviceHandles(): string[];
        getActiveVideoDeviceHandle(): string;
        getAvailableOutputDevicesAsync(handleList: VectGIString, nameList: VectGIString, productIdList: VectGIString): Windows.Foundation.IAsyncOperation<Boolean>;
        getAvailableRecordingDevicesAsync(handleList: VectGIString, nameList: VectGIString, productIdList: VectGIString): Windows.Foundation.IAsyncOperation<Boolean>;
    }
    export interface __IWrSkyLibStatics {
        libstatus_FATAL_ERROR: number;
        libstatus_STOPPED: number;
        libstatus_STOPPING: number;
        libstatus_RUNNING: number;
        libstatus_STARTING: number;
        libstatus_CONSTRUCTED: number;
        objecttype_MEDIADOCUMENT: number;
        objecttype_VIDEOMESSAGE: number;
        objecttype_ACCESSSESSION: number;
        objecttype_ACCOUNT: number;
        objecttype_PRICEQUOTE: number;
        objecttype_ALERT: number;
        objecttype_CONTENTITEM: number;
        objecttype_TRANSFER: number;
        objecttype_SMS: number;
        objecttype_VOICEMAIL: number;
        objecttype_VIDEO: number;
        objecttype_MESSAGE: number;
        objecttype_CONVERSATION: number;
        objecttype_PARTICIPANT: number;
        objecttype_CONTACTSEARCH: number;
        objecttype_CONTACT: number;
        objecttype_CONTACTGROUP: number;
        debug_STRING_DEBUG_STRING_MSNP_LOG: number;
        debug_STRING_DEBUG_STRING_MSNP_SUMMARY: number;
        debug_STRING_DEBUG_STRING_DEFAULT: number;
        localized_STRING_LOCALIZED_COUNT: number;
        localized_STRING_LOCALIZED_UPGRADE_MESSAGE_IN_P2P: number;
        pnm_REGISTER_CONTEXTS_RESULT_REGISTER_CONTEXTS_FAILED: number;
        pnm_REGISTER_CONTEXTS_RESULT_REGISTER_CONTEXTS_SUCCEEDED: number;
        pushhandlingresult_CALL_SETUP_FAILED: number;
        pushhandlingresult_CALL_SETUP_SUCCEEDED: number;
        pushhandlingresult_BAD_NOTIFICATION_PAYLOAD: number;
        service_TYPE_NNA: number;
        service_TYPE_ADM: number;
        service_TYPE_GRIFFIN: number;
        service_TYPE_TROUTER: number;
        service_TYPE_GOOGLE_AC2DM: number;
        service_TYPE_HOTMAIL: number;
        service_TYPE_GOOGLE_AGCM: number;
        service_TYPE_APPLE_APN: number;
        service_TYPE_MICROSOFT_WP7NS: number;
        service_TYPE_MICROSOFT_WNS: number;
        service_TYPE_TESTING: number;
        auth_RESULT_AUTH_PARTNER_TIMEOUT: number;
        auth_RESULT_AUTH_PARTNER_INTERNAL_ERROR: number;
        auth_RESULT_AUTH_USER_IS_UNDERAGE: number;
        auth_RESULT_AUTH_INVALID_OAUTH_AUTHENTICATION: number;
        auth_RESULT_AUTH_INVALID_SKYPE_AUTHENTICATION: number;
        auth_RESULT_AUTH_ANOTHER_MAPPING_EXISTS: number;
        auth_RESULT_AUTH_INVALID_PARAMETER: number;
        auth_RESULT_AUTH_MISSING_PARAMETER: number;
        auth_RESULT_AUTH_INTERNAL_ERROR: number;
        auth_RESULT_AUTH_OK: number;
        app2APP_STREAMS_RECEIVED_STREAMS: number;
        app2APP_STREAMS_SENDING_STREAMS: number;
        app2APP_STREAMS_ALL_STREAMS: number;
        unpack_RESULT_UNPACK_SIGNATURE_ERROR: number;
        unpack_RESULT_UNPACK_BLOB_ERROR: number;
        unpack_RESULT_UNPACK_FILE_ERROR: number;
        unpack_RESULT_UNPACK_OK: number;
        unpack_TYPE_UP_SKYPEHOME_BUNDLE: number;
        unpack_TYPE_UP_MAC_UPGRADE: number;
        upgraderesult_UPGRADE_CHECK_FAILED: number;
        upgraderesult_GOLD_AND_BETA_AVAILABLE: number;
        upgraderesult_BETA_AVAILABLE: number;
        upgraderesult_GOLD_AVAILABLE: number;
        upgraderesult_DISCONTINUED: number;
        upgraderesult_FORCED_STEALTH_UPGRADE: number;
        upgraderesult_FORCED_UPGRADE: number;
        upgraderesult_RECOMMENDED_STEALTH_UPGRADE: number;
        upgraderesult_RECOMMENDED_UPGRADE: number;
        upgraderesult_NO_UPGRADE: number;
        libprop_LIBPROP_NRT_CAPABILITIES: number;
        libprop_LIBPROP_API_ALLOWLIST_LOCK: number;
        libprop_LIBPROP_LOGIN_STATS_SAMPLING: number;
        libprop_LIBPROP_DISABLE_VIRAL_UPGRADES: number;
        libprop_LIBPROP_VIDEO_MESSAGE_SENDING_ENABLED: number;
        libprop_LIBPROP_DISABLED_AUTH_PARTNERS: number;
        libprop_LIBPROP_AD_ALLOWED_RICH: number;
        libprop_LIBPROP_AD_ALLOWED_BASIC: number;
        libprop_LIBPROP_BILLING_TYPE: number;
        libprop_LIBPROP_NETCONF_IS_LATEST: number;
        libprop_LIBPROP_USER_LIKENESS: number;
        libprop_LIBPROP_SKYPEMANAGER_MEMBER_STATUS: number;
        libprop_LIBPROP_POLICY_DISABLE_VIDEO: number;
        libprop_LIBPROP_SKYPEHOME_CHANNEL_DISABLED: number;
        libprop_LIBPROP_MESH_PROBLEMS: number;
        libprop_LIBPROP_CURCALL_TBYB_SECONDS_REMAINING: number;
        libprop_LIBPROP_UPGRADE_SIGNER_NAME: number;
        libprop_LIBPROP_ALL_LASTCALL_PROPERTIES_SET: number;
        libprop_LIBPROP_POSTCALL_JUNCTION_DISABLED: number;
        libprop_LIBPROP_LASTCALL_END_DETAILS: number;
        libprop_LIBPROP_AUTO_TOPUP_STATUS: number;
        libprop_LIBPROP_MPV_ENABLED: number;
        libprop_LIBPROP_DISABLE_WEB_SEARCH: number;
        libprop_LIBPROP_3G_FREE_TRIAL_IS_OVER: number;
        libprop_LIBPROP_MAX_VIDEOCONFCALL_PARTICIPANTS: number;
        libprop_LIBPROP_POLICY_DISABLE_FLAMINGO_CHANNEL: number;
        libprop_LIBPROP_LASTCALL_REMOTE_PROBLEMS: number;
        libprop_LIBPROP_LASTCALL_LOCAL_PROBLEMS: number;
        libprop_LIBPROP_POLICY_DISABLE_LOGOUT: number;
        libprop_LIBPROP_OLD_CAMERA_DRIVER: number;
        libprop_LIBPROP_POLICY_DISABLE_SCREENSHARING: number;
        libprop_LIBPROP_POLICY_DISABLE_DRAGONFLY: number;
        libprop_LIBPROP_POLICY_DISABLE_MICROPAYMENTS: number;
        libprop_LIBPROP_DISABLE_SENDMONEY: number;
        libprop_LIBPROP_POLICY_DISABLE_LANGUAGE_EDIT: number;
        libprop_LIBPROP_POLICY_DISABLE_PERSONALISE: number;
        libprop_LIBPROP_POLICY_DISABLE_VERSION_CHECK: number;
        libprop_LIBPROP_POLICY_DISABLE_CONTACT_IMPORT: number;
        libprop_LIBPROP_POLICY_DISABLE_FILE_TRANSFER: number;
        libprop_LIBPROP_POLICY_DISABLE_PUBLIC_API: number;
        libprop_LIBPROP_BW_CUROUT_KB: number;
        libprop_LIBPROP_BW_CURIN_KB: number;
        libprop_LIBPROP_IS_HTTPFE_ENABLED: number;
        libprop_LIBPROP_MAX_CONFCALL_PARTICIPANTS: number;
        nrt_CAPABILITIES_NRT_LYNC_PHASE2_ENABLED: number;
        nrt_CAPABILITIES_NRT_ENABLED: number;
        nrt_CAPABILITIES_NRT_DISABLED: number;
        uiprop_UIPROP_POLICY_LISTEN_RANGE_END: number;
        uiprop_UIPROP_POLICY_LISTEN_RANGE_BEGIN: number;
        uiprop_UIPROP_NOTIFICATIONS_LANGUAGE: number;
        uiprop_UIPROP_CALL_QUALITY_FEEDBACK_EXPECTED_WITH_NEXT_CALL: number;
        uiprop_UIPROP_IS_MOBILE_DEVICE: number;
        uiprop_UIPROP_SELECTED_CONTACT_IDENTITY: number;
        uiprop_UIPROP_POLICY_PROXY_USERNAME: number;
        uiprop_UIPROP_POLICY_PROXY_ADDRESS: number;
        uiprop_UIPROP_POLICY_PROXY_SETTING: number;
        uiprop_UIPROP_POLICY_LISTEN_HTTP_PORTS: number;
        uiprop_UIPROP_POLICY_LISTEN_PORT: number;
        uiprop_UIPROP_EXPRESSIVECONTENT_ITEMS: number;
        uiprop_UIPROP_LAST_CALL_ORIGIN: number;
        uiprop_UIPROP_TOOLBARITEM_USED_IN_LAST_MINUTE: number;
        uiprop_UIPROP_MENUITEM_USED_IN_LAST_MINUTE: number;
        uiprop_UIPROP_IC_LAST_YIELD: number;
        uiprop_UIPROP_IC_TOTAL_YIELD: number;
        uiprop_UIPROP_IC_RUN_COMPLETED_COUNT: number;
        uiprop_UIPROP_IC_RUN_STARTUP_COUNT: number;
        uiprop_UIPROP_LANGUAGE: number;
        user_LIKENESSES_USERLIKE_BUSINESS: number;
        user_LIKENESSES_USERLIKE_REGULAR: number;
        skypemanager_MEMBER_STATUSES_SM_ADMIN: number;
        skypemanager_MEMBER_STATUSES_SM_MANAGED: number;
        skypemanager_MEMBER_STATUSES_SM_MEMBER: number;
        skypemanager_MEMBER_STATUSES_SM_NONE: number;
        policy_DISABLE_VIDEO_OPTIONS_POLICY_VIDEO_DISABLED: number;
        policy_DISABLE_VIDEO_OPTIONS_POLICY_VIDEO_RECEIVE_DISABLED: number;
        policy_DISABLE_VIDEO_OPTIONS_POLICY_VIDEO_SEND_DISABLED: number;
        policy_DISABLE_VIDEO_OPTIONS_POLICY_VIDEO_ENABLED: number;
        livesession_END_DETAILS_LED_HOST_WENT_OFFLINE: number;
        livesession_END_DETAILS_LED_ENDED_NORMALLY_WITH_SUCCESSFUL_RECOVERY: number;
        livesession_END_DETAILS_LED_REMOTE_USER_TERMINATED_DURING_RECOVERY: number;
        livesession_END_DETAILS_LED_LOCAL_USER_TERMINATED_DURING_RECOVERY: number;
        livesession_END_DETAILS_LED_RECOVERY_UNSUCCESSFUL: number;
        livesession_END_DETAILS_LED_NO_REMOTE_CONNECTIVITY: number;
        livesession_END_DETAILS_LED_NO_LOCAL_CONNECTIVITY: number;
        content_LIST_CONTEXT_CL_CONTEXT_SDK_ALLOWLIST: number;
        content_LIST_CONTEXT_CL_CONTEXT_SDK_BLOCKLIST: number;
        content_LIST_CONTEXT_CL_CONTEXT_SF_BLOCKLIST: number;
        content_LIST_CONTEXT_CL_CONTEXT_PLUGIN_ALLOWLIST: number;
        content_LIST_CONTEXT_CL_CONTEXT_API_BLOCKLIST: number;
        content_LIST_CONTEXT_CL_CONTEXT_API_ALLOWLIST: number;
        content_LIST_CONTEXT_CL_CONTEXT_HTTPS_DIRECT: number;
        content_LIST_CONTEXT_CL_CONTEXT_DF_BLOCKED: number;
        content_LIST_RESULT_CL_FILE_ERROR: number;
        content_LIST_RESULT_CL_QUERY_FAILED: number;
        content_LIST_RESULT_CL_QUERY_PENDING: number;
        content_LIST_RESULT_CL_NOT_LISTED: number;
        content_LIST_RESULT_CL_LISTED: number;
        webgw_RESULT_WG_COOKIE_ERROR: number;
        webgw_RESULT_WG_REDIRECT_ERROR: number;
        webgw_RESULT_WG_INVALID_HOST: number;
        webgw_RESULT_WG_INVALID_URI_FORMAT: number;
        webgw_RESULT_WG_INVALID_URI_SCHEME: number;
        webgw_RESULT_WG_NO_ROUTES: number;
        webgw_RESULT_WG_WEB_TIMEOUT: number;
        webgw_RESULT_WG_TRANSFER_FAILED: number;
        webgw_RESULT_WG_ERROR: number;
        webgw_RESULT_WG_LOCAL_ERROR: number;
        webgw_RESULT_WG_SUCCESS: number;
        httpfe_METHOD_HTTPFE_POST: number;
        httpfe_METHOD_HTTPFE_GET: number;
        setupkey_HTTPFE_ACCEPT_DEFLATE: string;
        setupkey_HTTPFE_DISABLE_COOKIES: string;
        sa_PAYMENT_IID_SA_PAYMENT_IID_ATU: number;
        sa_PAYMENT_IID_SA_PAYMENT_IID_EXPDATE_YEAR: number;
        sa_PAYMENT_IID_SA_PAYMENT_IID_EXPDATE_MON: number;
        sa_PAYMENT_IID_SA_PAYMENT_IID_CARDTYPE: number;
        sa_PAYMENT_IID_SA_PAYMENT_IID_PRODUCT: number;
        sa_PAYMENT_IID_SA_PAYMENT_IID_AMOUNT_NUM: number;
        sa_PAYMENT_SID_SA_PAYMENT_SID_ORDER_ID: number;
        sa_PAYMENT_SID_SA_PAYMENT_SID_COUNTRY: number;
        sa_PAYMENT_SID_SA_PAYMENT_SID_CURRENCY: number;
        sa_PAYMENT_SID_SA_PAYMENT_SID_AMOUNT_STR: number;
        sa_PAYMENT_SID_SA_PAYMENT_SID_CARD_VAL_NO: number;
        sa_PAYMENT_SID_SA_PAYMENT_SID_CARD_NO: number;
        sa_PAYMENT_SID_SA_PAYMENT_SID_CARDHOLDER: number;
        sa_PAYMENT_SID_SA_PAYMENT_SID_SKYPERPWD: number;
        sa_PAYMENT_SID_SA_PAYMENT_SID_SKYPENAME: number;
        sa_PAYMENT_CARDTYPE_SA_PAYMENT_CARDTYPE_AMEX: number;
        sa_PAYMENT_CARDTYPE_SA_PAYMENT_CARDTYPE_MC: number;
        sa_PAYMENT_CARDTYPE_SA_PAYMENT_CARDTYPE_VISA: number;
        sa_PAYMENT_CARDTYPE_SA_PAYMENT_CARDTYPE_UNKNOWN: number;
        sa_PAYMENT_PRODUCT_SA_PAYMENT_PRODUCT_SKYPE_CREDIT: number;
        accesseventtype_EV_IS_HOTSPOT: number;
        accesseventtype_EV_IS_ONLINE: number;
        accesseventtype_EV_DISABLE_TEST_MODE: number;
        accesseventtype_EV_ENABLE_TEST_MODE: number;
        accesseventtype_EV_DISABLE_ACCESS: number;
        accesseventtype_EV_ENABLE_ACCESS: number;
        accesseventtype_EV_SET_SESSION_LENGTH: number;
        accesseventtype_EV_LOGIN_OPERATOR: number;
        accesseventtype_EV_REPORT_LOCATION: number;
        accesseventtype_EV_RATE_HOTSPOT: number;
        accesseventtype_EV_WIFI_CHANGED_DISABLED: number;
        accesseventtype_EV_WIFI_CHANGED_UNSUPPORTED: number;
        accesseventtype_EV_WIFI_CHANGED_SUPPORTED: number;
        accesseventtype_EV_START_PAYMENT: number;
        accesseventtype_EV_EXTEND: number;
        accesseventtype_EV_REDETECT: number;
        accesseventtype_EV_LOGOUT: number;
        accesseventtype_EV_LOGIN: number;
        accesseventtype_SA_SESSION_RECOVERABLE: number;
        accesseventtype_SA_SESSION_LOST: number;
        accesseventtype_SA_SESSION_AUTO_END: number;
        accesseventtype_SA_OBJECT_INVALIDATED: number;
        setupkey_ACCESS_SESSION_LEN: string;
        setupkey_ACCESS_ENABLED: string;
        validateresult_STARTS_WITH_INVALID_CHAR: number;
        validateresult_TOO_SIMPLE: number;
        validateresult_CONTAINS_INVALID_WORD: number;
        validateresult_INVALID_FORMAT: number;
        validateresult_SAME_AS_USERNAME: number;
        validateresult_CONTAINS_SPACE: number;
        validateresult_CONTAINS_INVALID_CHAR: number;
        validateresult_TOO_LONG: number;
        validateresult_TOO_SHORT: number;
        validateresult_VALIDATED_OK: number;
        validateresult_NOT_VALIDATED: number;
        partner_ID_PARTNER_MICROSOFT: number;
        partner_ID_PARTNER_FACEBOOK: number;
        partner_ID_PARTNER_SKYPE: number;
        partner_ID_PARTNER_NONE: number;
        setupkey_ENDPOINT_NAME: string;
        setupkey_DISABLE_XMPP: string;
        setupkey_PRIVATE_SKYPE_MODE: string;
        setupkey_IDLE_TIME_FOR_NA: string;
        setupkey_IDLE_TIME_FOR_AWAY: string;
        partner_QUERY_ERROR_PQ_SERVER_NOCONNECT: number;
        partner_QUERY_ERROR_PQ_SERVER_NOSUCCESS: number;
        partner_QUERY_ERROR_PQ_SUCCESS: number;
        partner_QUERY_ID_PQ_MANDALAY: number;
        partner_QUERY_PARAMS_PQ_USERID: number;
        partner_QUERY_PARAMS_PQ_PASSWORD: number;
        partner_QUERY_PARAMS_PQ_EMAIL: number;
        partner_QUERY_PARAMS_PQ_PARTNER_ID: number;
        partner_QUERY_TYPE_PQ_USERID_QUERY: number;
        partner_QUERY_TYPE_PQ_PROFILE_URL: number;
        partner_QUERY_TYPE_PQ_PICTURE_URL: number;
        partner_QUERY_TYPE_PQ_SESSIONTOKEN: number;
        setupkey_DC_NOPERSONAL: string;
        setupkey_DC_NOPROMO: string;
        setupkey_DC_NOTIPS: string;
        setupkey_FT_INCOMING_LIMIT: string;
        setupkey_FT_SAVEPATH: string;
        setupkey_FT_AUTOACCEPT: string;
        callerid_STATE_CLI_BLOCKED: number;
        callerid_STATE_CLI_FAILED: number;
        callerid_STATE_CLI_ACTIVE: number;
        callerid_STATE_CLI_VERIFIED: number;
        callerid_STATE_CLI_PENDING: number;
        callerid_OPTIONS_CHANGE_CLI_LOADED_NEW: number;
        callerid_OPTIONS_CHANGE_CLI_SET_FAILED: number;
        callerid_OPTIONS_CHANGE_CLI_SET_SUCCESS: number;
        callerid_IDCONFIG_AUTOSELECT_CLI: number;
        callerid_IDCONFIG_USE_SMS_FOR_CLI: number;
        callerid_IDCONFIG_USE_CLI_FOR_SMS: number;
        callerid_TYPE_CLI_T_SKYPEIN: number;
        callerid_TYPE_CLI_T_MOBILE: number;
        callerid_TYPE_CLI_T_SMS: number;
        mobile_DATA_USAGE_LEVEL_UNLIMITED: number;
        mobile_DATA_USAGE_LEVEL_MEDIUM: number;
        mobile_DATA_USAGE_LEVEL_LOW: number;
        operating_MEDIA_OM_4G: number;
        operating_MEDIA_OM_3G: number;
        operating_MEDIA_OM_FREE_WIRELESS: number;
        operating_MEDIA_OM_FREE: number;
        operating_MEDIA_OM_UNKNOWN: number;
        audiodevice_CAPABILITIES_HAS_BLUETOOTH_INTERFACE: number;
        audiodevice_CAPABILITIES_HAS_VIDEO_RENDERING: number;
        audiodevice_CAPABILITIES_POSSIBLY_WEBCAM: number;
        audiodevice_CAPABILITIES_IS_HEADSET: number;
        audiodevice_CAPABILITIES_IS_WEBCAM: number;
        audiodevice_CAPABILITIES_HAS_LOWBANDWIDTH_CAPTURE: number;
        audiodevice_CAPABILITIES_HAS_AUDIO_RENDERING: number;
        audiodevice_CAPABILITIES_HAS_AUDIO_CAPTURE: number;
        audiodevice_CAPABILITIES_POSSIBLY_HEADSET: number;
        audiodevice_CAPABILITIES_HAS_USB_INTERFACE: number;
        audiodevice_CAPABILITIES_HAS_VIDEO_CAPTURE: number;
        preparesoundresult_PREPARESOUND_PLAYBACK_NOT_SUPPORTED: number;
        preparesoundresult_PREPARESOUND_UNSUPPORTED_FILE_FORMAT: number;
        preparesoundresult_PREPARESOUND_FILE_READ_ERROR: number;
        preparesoundresult_PREPARESOUND_FILE_TOO_BIG: number;
        preparesoundresult_PREPARESOUND_FILE_NOT_FOUND: number;
        preparesoundresult_PREPARESOUND_MISC_ERROR: number;
        preparesoundresult_PREPARESOUND_SUCCESS: number;
        setupkey_DISABLE_AUDIO_DEVICE_PROBING: string;
        setupkey_BEAMFORMER_MIC_SPACING: string;
        setupkey_DISABLE_DIGITAL_FAR_END_AGC: string;
        setupkey_DISABLE_DIGITAL_NEAR_END_AGC: string;
        setupkey_DISABLE_AGC: string;
        setupkey_DISABLE_NOISE_SUPPRESSOR: string;
        setupkey_DISABLE_AEC: string;
        setupkey_DISABLED_CODECS: string;
        qualitytestresult_QTR_EXCELLENT: number;
        qualitytestresult_QTR_GOOD: number;
        qualitytestresult_QTR_AVERAGE: number;
        qualitytestresult_QTR_POOR: number;
        qualitytestresult_QTR_CRITICAL: number;
        qualitytestresult_QTR_UNDEFINED: number;
        qualitytesttype_QTT_VIDEO_IN: number;
        qualitytesttype_QTT_NETWORK: number;
        qualitytesttype_QTT_CPU: number;
        qualitytesttype_QTT_VIDEO_OUT: number;
        qualitytesttype_QTT_AUDIO_OUT: number;
        qualitytesttype_QTT_AUDIO_IN: number;
        video_DEVICE_TYPE_VIDEO_DEVICE_VIRTUAL: number;
        video_DEVICE_TYPE_VIDEO_DEVICE_CAPTURE_ADAPTER: number;
        video_DEVICE_TYPE_VIDEO_DEVICE_USB_CAMERA: number;
        codec_COMPATIBILITY_CODEC_NOT_COMPATIBLE: number;
        codec_COMPATIBILITY_CODEC_NOT_COMPATIBLE_BUT_PLATFORM_IS_GVC_SUPPORTED: number;
        codec_COMPATIBILITY_CODEC_COMPATIBLE: number;
        livesession_QUALITYRATING_VERY_GOOD: number;
        livesession_QUALITYRATING_GOOD: number;
        livesession_QUALITYRATING_AVERAGE: number;
        livesession_QUALITYRATING_BAD: number;
        livesession_QUALITYRATING_VERY_BAD: number;
        leave_REASON_LIVE_PARTICIPANT_COUNT_LIMIT_REACHED: number;
        leave_REASON_LIVE_TOO_MANY_IDENTITIES: number;
        leave_REASON_LIVE_PLUGIN_INSTALL_NEEDED: number;
        leave_REASON_LIVE_EMERGENCY_CALL_DENIED: number;
        leave_REASON_LIVE_BLOCKED_BY_US: number;
        leave_REASON_LIVE_TRANSFER_INSUFFICIENT_FUNDS: number;
        leave_REASON_LIVE_TRANSFER_FAILED: number;
        leave_REASON_LIVE_ERROR: number;
        leave_REASON_LIVE_BLOCKED_BY_PRIVACY_SETTINGS: number;
        leave_REASON_LIVE_LEGACY_ERROR: number;
        leave_REASON_LIVE_PLAYBACK_ERROR: number;
        leave_REASON_LIVE_RECORDING_FAILED: number;
        leave_REASON_LIVE_UNABLE_TO_CONNECT: number;
        leave_REASON_LIVE_INTERNAL_ERROR: number;
        leave_REASON_LIVE_PSTN_MISC_ERROR: number;
        leave_REASON_LIVE_PSTN_CALL_REJECTED: number;
        leave_REASON_LIVE_NUMBER_UNAVAILABLE: number;
        leave_REASON_LIVE_PSTN_NETWORK_ERROR: number;
        leave_REASON_LIVE_PSTN_CALL_TERMINATED: number;
        leave_REASON_LIVE_PSTN_BUSY: number;
        leave_REASON_LIVE_PSTN_CALL_TIMED_OUT: number;
        leave_REASON_LIVE_PSTN_NUMBER_FORBIDDEN: number;
        leave_REASON_LIVE_PSTN_INVALID_NUMBER: number;
        leave_REASON_LIVE_PSTN_COULD_NOT_CONNECT_TO_SKYPE_PROXY: number;
        leave_REASON_LIVE_SKYPEOUT_ACCOUNT_BLOCKED: number;
        leave_REASON_LIVE_INTERNET_CONNECTION_LOST: number;
        leave_REASON_LIVE_INSUFFICIENT_FUNDS: number;
        leave_REASON_LIVE_NO_SKYPEOUT_SUBSCRIPTION: number;
        leave_REASON_LIVE_CONNECTION_DROPPED: number;
        leave_REASON_LIVE_BUSY: number;
        leave_REASON_LIVE_MANUAL: number;
        leave_REASON_LIVE_NO_ANSWER: number;
        leave_REASON_RETIRED_INTERNAL_ERROR: number;
        leave_REASON_RETIRED_CHAT_FULL: number;
        leave_REASON_RETIRED_UNSUBSCRIBE: number;
        leave_REASON_RETIRED_DECLINE_ADD: number;
        leave_REASON_RETIRED_ADDER_MUST_BE_AUTHORIZED: number;
        leave_REASON_RETIRED_ADDER_MUST_BE_FRIEND: number;
        leave_REASON_RETIRED_USER_INCAPABLE: number;
        leave_REASON_LEAVE_REASON_NONE: number;
        transfer_SENDFILE_ERROR_TRANSFER_TOO_MANY_PARALLEL: number;
        transfer_SENDFILE_ERROR_TRANSFER_OPEN_FAILED: number;
        transfer_SENDFILE_ERROR_TRANSFER_BAD_FILENAME: number;
        transfer_SENDFILE_ERROR_TRANSFER_OPEN_SUCCESS: number;
        contact_SYNC_TYPE_CONTACT_SCD: number;
        unifyresult_UNIFY_TOO_MANY_OUTLOOK: number;
        unifyresult_UNIFY_TOO_MANY_SKYPE: number;
        unifyresult_UNIFY_ALREADY_UNIFIED: number;
        unifyresult_UNIFY_INVALID_IDENTITY: number;
        unifyresult_UNIFY_OK: number;
        normalizeresult_SKYPENAME_SHORTER_THAN_6_CHARS: number;
        normalizeresult_SKYPENAME_STARTS_WITH_NONALPHA: number;
        normalizeresult_PSTN_NUMBER_HAS_INVALID_PREFIX: number;
        normalizeresult_PSTN_NUMBER_TOO_SHORT: number;
        normalizeresult_IDENTITY_CONTAINS_INVALID_CHAR: number;
        normalizeresult_IDENTITY_TOO_LONG: number;
        normalizeresult_IDENTITY_EMPTY: number;
        normalizeresult_IDENTITY_OK: number;
        identitytype_LYNC: number;
        identitytype_PASSPORT: number;
        identitytype_XMPP: number;
        identitytype_EXTERNAL: number;
        identitytype_CONFERENCE: number;
        identitytype_PSTN_UNDISCLOSED: number;
        identitytype_PSTN_FREE: number;
        identitytype_PSTN_EMERGENCY: number;
        identitytype_PSTN: number;
        identitytype_SKYPE_UNDISCLOSED: number;
        identitytype_SKYPE_MYSELF: number;
        identitytype_SKYPE: number;
        identitytype_UNRECOGNIZED: number;
        setupkey_ALLOW_INCOMING_LYNC_ID: string;
        setupkey_ALLOW_DEBUG_DATA_COLLECTION: string;
        setupkey_DB_PAGE_SIZE: string;
        setupkey_DB_STORAGE_QUOTA_KB: string;
        identitytypetoString(val: number): string;
        normalizeresulttoString(val: number): string;
        identitiesMatch(identityA: string, identityB: string): Boolean;
        normalizeIdentity_(original: string, isNewSkypeName: Boolean): SkyLibNormalizeIdentityResult;
        normalizePSTNWithCountry_(original: string, countryPrefix: number): SkyLibNormalizePSTNWithCountryResult;
        unifyresulttoString(val: number): string;
        getOptimalAgeRanges(rangeList: VectUnsignedInt): void;
        contact_SYNC_TYPEToString(val: number): string;
        transfer_SENDFILE_ERRORToString(val: number): string;
        leave_REASONToString(val: number): string;
        livesession_QUALITYRATINGToString(val: number): string;
        codec_COMPATIBILITYToString(val: number): string;
        contentEncode_(source: string, raw_xml: Boolean): SkyLibContentEncodeResult;
        contentStripXML(source: string): SkyLibContentStripXMLResult;
        contentGetEditable(xml_source: string): SkyLibContentGetEditableResult;
        contentGetRichEditable(xml_source: string, preserve_tags: VectGIString): SkyLibContentGetRichEditableResult;
        video_DEVICE_TYPEToString(val: number): string;
        qualitytesttypetoString(val: number): string;
        qualitytestresulttoString(val: number): string;
        preparesoundresulttoString(val: number): string;
        audiodevice_CAPABILITIESToString(val: number): string;
        operating_MEDIAToString(val: number): string;
        mobile_DATA_USAGE_LEVELToString(val: number): string;
        callerid_TYPEToString(val: number): string;
        callerid_IDCONFIGToString(val: number): string;
        callerid_OPTIONS_CHANGEToString(val: number): string;
        callerid_STATEToString(val: number): string;
        partner_QUERY_TYPEToString(val: number): string;
        partner_QUERY_PARAMSToString(val: number): string;
        partner_QUERY_IDToString(val: number): string;
        partner_QUERY_ERRORToString(val: number): string;
        partner_IDToString(val: number): string;
        getSuggestedSkypename(fullname: string): string;
        validateresulttoString(val: number): string;
        validateAvatar(value: Binary): SkyLibValidateAvatarResult;
        validateProfileString(propKey: number, strValue: string, forRegistration: Boolean): SkyLibValidateProfileStringResult;
        validatePassword(username: string, password: string): number;
        accesseventtypetoString(val: number): string;
        sa_PAYMENT_PRODUCTToString(val: number): string;
        sa_PAYMENT_CARDTYPEToString(val: number): string;
        sa_PAYMENT_SIDToString(val: number): string;
        sa_PAYMENT_IIDToString(val: number): string;
        httpfe_METHODToString(val: number): string;
        webgw_RESULTToString(val: number): string;
        content_LIST_RESULTToString(val: number): string;
        content_LIST_CONTEXTToString(val: number): string;
        livesession_END_DETAILSToString(val: number): string;
        policy_DISABLE_VIDEO_OPTIONSToString(val: number): string;
        skypemanager_MEMBER_STATUSESToString(val: number): string;
        user_LIKENESSESToString(val: number): string;
        uiproptoString(val: number): string;
        nrt_CAPABILITIESToString(val: number): string;
        libproptoString(val: number): string;
        upgraderesulttoString(val: number): string;
        unpack_TYPEToString(val: number): string;
        unpack_RESULTToString(val: number): string;
        verifyAndUnpack(sourcePath: string, destPath: string, key_id: number): SkyLibVerifyAndUnpackResult;
        app2APP_STREAMSToString(val: number): string;
        auth_RESULTToString(val: number): string;
        service_TYPEToString(val: number): string;
        pushhandlingresulttoString(val: number): string;
        pnm_REGISTER_CONTEXTS_RESULTToString(val: number): string;
        localized_STRINGToString(val: number): string;
        debug_STRINGToString(val: number): string;
        objecttypetoString(val: number): string;
        getInstance(): WrSkyLib;
        initPlatform(): Windows.Foundation.IAsyncAction;
        log(subsystem: string, message: string): void;
        contentEncode(source: string, raw_xml: Boolean): string;
        validateIdentity(identity: string, isNewUser: Boolean): number;
        normalizeIdentity(identity: string): string;
        normalizePSTNWithCountry(original: string, countryPrefix: number): string;
        wrapCodeCheckPublic(): Boolean;
    }
    export class AccessSession implements Windows.Foundation.IClosable, __IAccessSessionPublicNonVirtuals, __IAccessSessionProtectedNonVirtuals {
        // constructor();
        static hotspottype_SUPPORTED: number = 6;
        static hotspottype_NONE: number = 5;
        static hotspottype_FIRSTPAGEREDIRECT: number = 4;
        static hotspottype_FORM: number = 3;
        static hotspottype_WISPR: number = 2;
        static hotspottype_OPEN: number = 1;
        static hotspottype_UNKNOWN: number = 0;
        static failurereason_SSID_QUERY_FAILURE: number = 16;
        static failurereason_TOKEN_QUERY_FAILURE: number = 15;
        static failurereason_NO_HTML_URL: number = 14;
        static failurereason_WISPR_LOGIN_ERROR: number = 13;
        static failurereason_WISPR_LOGIN_REJECTED: number = 12;
        static failurereason_WISPR_CONTENT_ERROR: number = 11;
        static failurereason_HTTP_FAILURE: number = 10;
        static failurereason_TOO_MANY_REDIRECTS: number = 9;
        static failurereason_ALREADY_ONLINE: number = 8;
        static failurereason_CONNECTION_ERROR: number = 7;
        static failurereason_LOGIN_ABORTED: number = 6;
        static failurereason_LOGOUT_FAILURE: number = 5;
        static failurereason_LOGIN_FAILURE: number = 4;
        static failurereason_NO_SUPPORT: number = 3;
        static failurereason_NO_SUBSCRIPTION: number = 2;
        static failurereason_NO_BALANCE: number = 1;
        static failurereason_NO_FAILURE: number = 0;
        static status_LOGGING_OUT: number = 6;
        static status_LOGIN_FAILED: number = 5;
        static status_LOGGED_OUT: number = 4;
        static status_LOGGED_IN: number = 3;
        static status_LOGGING_IN: number = 2;
        static status_AVAILABLE: number = 1;
        static status_UNAVAILABLE: number = 0;
        static sessionflags_SA_LOW_CREDIT: number = 65536;
        static sessionflags_SA_PRODUCT_CREDIT: number = 256;
        static sessionflags_SA_STAR_RATING_2: number = 128;
        static sessionflags_SA_STAR_RATING_1: number = 64;
        static sessionflags_SA_STAR_RATING_0: number = 32;
        static sessionflags_SA_ASK_TO_RATE: number = 8;
        static sessionflags_SA_NO_CURRENCY_CHANGE: number = 4;
        static sessionflags_SA_SHOW_PROMO_DIALOG: number = 2;
        static sessionflags_SA_OPEN_URL: number = 1;
        static connectionprogress_MAXSTEPS: number = 6;
        static connectionprogress_COMPLETED: number = 5;
        static connectionprogress_WAITING: number = 4;
        static connectionprogress_CHECKING: number = 3;
        static connectionprogress_SUBMITTING: number = 2;
        static connectionprogress_VERIFYING: number = 1;
        static connectionprogress_STARTING: number = 0;

        getObjectID(): number {
            throw new Error('shimmed function AccessSession.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function AccessSession.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function AccessSession.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function AccessSession.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function AccessSession.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function AccessSession.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function AccessSession.setExtendedIntProperty');
        }

        login(): Boolean {
            throw new Error('shimmed function AccessSession.login');
        }

        logout(): void {
            console.warn('shimmed function AccessSession.logout');
        }

        detectHotspot(): void {
            console.warn('shimmed function AccessSession.detectHotspot');
        }

        notifyWifiChanged(accessPointMAC: Binary, accessPointSSID: string, deviceMAC: Binary, dnsServer: string): void {
            console.warn('shimmed function AccessSession.notifyWifiChanged');
        }

        sendLocation(latitude: number, longitude: number, accuracy: number): void {
            console.warn('shimmed function AccessSession.sendLocation');
        }

        loginWispr(username: string, password: string): void {
            console.warn('shimmed function AccessSession.loginWispr');
        }

        sendRating(rating: number): void {
            console.warn('shimmed function AccessSession.sendRating');
        }

        discard(): void {
            console.warn('shimmed function AccessSession.discard');
        }

        close(): void {
            console.warn('shimmed function AccessSession.close');
        }

        static connectionprogresstoString(val: number): string {
            throw new Error('shimmed function AccessSession.connectionprogresstoString');
        }

        static sessionflagstoString(val: number): string {
            throw new Error('shimmed function AccessSession.sessionflagstoString');
        }

        static statustoString(val: number): string {
            throw new Error('shimmed function AccessSession.statustoString');
        }

        static failurereasontoString(val: number): string {
            throw new Error('shimmed function AccessSession.failurereasontoString');
        }

        static hotspottypetoString(val: number): string {
            throw new Error('shimmed function AccessSession.hotspottypetoString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`AccessSession::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                    break;
            }

        }
    }
    export class Account implements Windows.Foundation.IClosable, __IAccountPublicNonVirtuals, __IAccountProtectedNonVirtuals {
        // constructor();
        static xmppstatus_XMPP_OFFLINE_EXPLICIT: number = 22;
        static xmppstatus_XMPP_OFFLINE_SKYPE: number = 21;
        static xmppstatus_XMPP_DISABLED: number = 20;
        static xmppstatus_XMPP_ERROR_OTHER: number = 11;
        static xmppstatus_XMPP_ERROR_AUTH: number = 10;
        static xmppstatus_XMPP_PAUSING: number = 3;
        static xmppstatus_XMPP_CONNECTING: number = 2;
        static xmppstatus_XMPP_ONLINE: number = 1;
        static xmppstatus_XMPP_UNLINKED: number = 0;
        static servicetype_ST_PREMIUMVIDEO: number = 2;
        static servicetype_ST_PSTN: number = 1;
        static servicetype_ST_NONE: number = 0;
        static packagetype_PT_FREETRIAL: number = 3;
        static packagetype_PT_DAYPASS: number = 2;
        static packagetype_PT_SUBSCRIPTION: number = 1;
        static packagetype_PT_NONE: number = 0;
        static subscriptionstatus_SS_SUSPENDED: number = 3;
        static subscriptionstatus_SS_CANCELLED: number = 2;
        static subscriptionstatus_SS_ACTIVE: number = 1;
        static subscriptionstatus_SS_NONE: number = 0;
        static capabilitystatus_FINAL_EXPIRY_WARNING: number = 4;
        static capabilitystatus_SECOND_EXPIRY_WARNING: number = 3;
        static capabilitystatus_FIRST_EXPIRY_WARNING: number = 2;
        static capabilitystatus_CAPABILITY_EXISTS: number = 1;
        static capabilitystatus_NO_CAPABILITY: number = 0;
        static federatedpresencepolicy_FEDERATED_DISABLE_FLAMINGO: number = 1;
        static shortcircuitsync_SHORTCIRCUITSYNC_ENABLED: number = 1;
        static shortcircuitsync_SHORTCIRCUITSYNC_DISABLED: number = 0;
        static adpolicy_ADS_ENABLED_NOTARGET: number = 4;
        static adpolicy_ADS_RESERVED3: number = 3;
        static adpolicy_ADS_RESERVED2: number = 2;
        static adpolicy_ADS_RESERVED1: number = 1;
        static adpolicy_ADS_ENABLED: number = 0;
        static authrequestpolicy_AUTHREQUEST_DISABLED: number = 9;
        static authrequestpolicy_CHAT_PARTICIPANTS_CAN_AUTHREQ: number = 5;
        static authrequestpolicy_AUTHREQUEST_ENABLED: number = 0;
        static voicemailpolicy_VOICEMAIL_DISABLED: number = 1;
        static voicemailpolicy_VOICEMAIL_ENABLED: number = 0;
        static phonenumberspolicy_PHONENUMBERS_VISIBLE_FOR_EVERYONE: number = 1;
        static phonenumberspolicy_PHONENUMBERS_VISIBLE_FOR_BUDDIES: number = 0;
        static webpresencepolicy_WEBPRESENCE_ENABLED: number = 1;
        static webpresencepolicy_WEBPRESENCE_DISABLED: number = 0;
        static timezonepolicy_TZ_UNDISCLOSED: number = 2;
        static timezonepolicy_TZ_MANUAL: number = 1;
        static timezonepolicy_TZ_AUTOMATIC: number = 0;
        static buddycountpolicy_DISCLOSE_TO_NOONE: number = 1;
        static buddycountpolicy_DISCLOSE_TO_AUTHORIZED: number = 0;
        static avatarpolicy_EVERYONE_CAN_SEE: number = 2;
        static avatarpolicy_BUDDIES_OR_AUTHORIZED_CAN_SEE: number = 0;
        static pstncallpolicy_BUDDY_NUMBERS_CAN_CALL: number = 2;
        static pstncallpolicy_DISCLOSED_NUMBERS_CAN_CALL: number = 1;
        static pstncallpolicy_ALL_NUMBERS_CAN_CALL: number = 0;
        static skypecallpolicy_BUDDIES_OR_AUTHORIZED_CAN_CALL: number = 2;
        static skypecallpolicy_EVERYONE_CAN_CALL: number = 0;
        static chatpolicy_BUDDIES_OR_AUTHORIZED_CAN_ADD: number = 2;
        static chatpolicy_EVERYONE_CAN_ADD: number = 0;
        static commitstatus_COMMIT_FAILED: number = 3;
        static commitstatus_COMMITTING_TO_SERVER: number = 2;
        static commitstatus_COMMITTED: number = 1;
        static pwdchangestatus_PWD_MUST_LOG_IN_TO_CHANGE: number = 7;
        static pwdchangestatus_PWD_INVALID_NEW_PWD: number = 6;
        static pwdchangestatus_PWD_MUST_DIFFER_FROM_OLD: number = 5;
        static pwdchangestatus_PWD_OK_BUT_CHANGE_SUGGESTED: number = 4;
        static pwdchangestatus_PWD_SERVER_CONNECT_FAILED: number = 3;
        static pwdchangestatus_PWD_INVALID_OLD_PASSWORD: number = 2;
        static pwdchangestatus_PWD_CHANGING: number = 1;
        static pwdchangestatus_PWD_OK: number = 0;
        static logoutreason_ACCESS_TOKEN_RENEWAL_FAILED: number = 27;
        static logoutreason_REMOTE_LOGOUT: number = 26;
        static logoutreason_ATO_BLOCKED: number = 25;
        static logoutreason_UNSUPPORTED_VERSION: number = 24;
        static logoutreason_APP_ID_FAILURE: number = 23;
        static logoutreason_INVALID_APP_ID: number = 22;
        static logoutreason_DB_FAILURE: number = 21;
        static logoutreason_DB_CORRUPT: number = 20;
        static logoutreason_DB_IO_ERROR: number = 19;
        static logoutreason_DB_DISK_FULL: number = 18;
        static logoutreason_PERIODIC_UIC_UPDATE_FAILED: number = 17;
        static logoutreason_PASSWORD_HAS_CHANGED: number = 16;
        static logoutreason_TOO_MANY_LOGIN_ATTEMPTS: number = 15;
        static logoutreason_INCORRECT_PASSWORD: number = 14;
        static logoutreason_NO_SUCH_IDENTITY: number = 13;
        static logoutreason_REJECTED_AS_UNDERAGE: number = 12;
        static logoutreason_SKYPENAME_TAKEN: number = 11;
        static logoutreason_UNACCEPTABLE_PASSWORD: number = 10;
        static logoutreason_INVALID_EMAIL: number = 9;
        static logoutreason_INVALID_SKYPENAME: number = 8;
        static logoutreason_DB_IN_USE: number = 7;
        static logoutreason_SERVER_OVERLOADED: number = 6;
        static logoutreason_SERVER_CONNECT_FAILED: number = 5;
        static logoutreason_P2P_CONNECT_FAILED: number = 4;
        static logoutreason_SOCKS_PROXY_AUTH_FAILED: number = 3;
        static logoutreason_HTTPS_PROXY_AUTH_FAILED: number = 2;
        static logoutreason_LOGOUT_CALLED: number = 1;
        static cblsyncstatus_CBL_REMOTE_SYNC_PENDING: number = 6;
        static cblsyncstatus_CBL_SYNC_FAILED: number = 5;
        static cblsyncstatus_CBL_IN_SYNC: number = 4;
        static cblsyncstatus_CBL_SYNC_IN_PROGRESS: number = 3;
        static cblsyncstatus_CBL_SYNC_PENDING: number = 2;
        static cblsyncstatus_CBL_INITIAL_SYNC_PENDING: number = 1;
        static cblsyncstatus_CBL_INITIALIZING: number = 0;
        static status_LOGGED_IN_PARTIALLY: number = 9;
        static status_LOGGING_OUT: number = 8;
        static status_LOGGED_IN: number = 7;
        static status_INITIALIZING: number = 6;
        static status_LOGGING_IN: number = 5;
        static status_CONNECTING_TO_SERVER: number = 4;
        static status_CONNECTING_TO_P2P: number = 3;
        static status_LOGGED_OUT_AND_PWD_SAVED: number = 2;
        static status_LOGGED_OUT: number = 1;

        getObjectID(): number {
            throw new Error('shimmed function Account.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function Account.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function Account.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function Account.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function Account.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function Account.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function Account.setExtendedIntProperty');
        }

        getStatusWithProgress(): AccountGetStatusWithProgressResult {
            throw new Error('shimmed function Account.getStatusWithProgress');
        }

        setUIVersion(uiVersionString: string): void {
            console.warn('shimmed function Account.setUIVersion');
        }

        login(setAvailabilityTo: number): void {
            console.warn('shimmed function Account.login');
        }

        beginLogin(setAvailabilityTo: number): void {
            console.warn('shimmed function Account.beginLogin');
        }

        loginWithPassword(password: string, savePwd: Boolean, saveDataLocally: Boolean): void {
            console.warn('shimmed function Account.loginWithPassword');
        }

        loginWithOAuth(partnerId: string, accessToken: string, refreshToken: string, savePwd: Boolean, saveDataLocally: Boolean): void {
            console.warn('shimmed function Account.loginWithOAuth');
        }

        finishLogin(): void {
            console.warn('shimmed function Account.finishLogin');
        }

        register(password: string, savePwd: Boolean, saveDataLocally: Boolean, email: string, allowSpam: Boolean): void {
            console.warn('shimmed function Account.register');
        }

        logout(clearSavedPwd: Boolean): void {
            console.warn('shimmed function Account.logout');
        }

        logoutEx(clearSavedPwd: Boolean, localOnly: Boolean): void {
            console.warn('shimmed function Account.logoutEx');
        }

        logoutOtherEndpoints(): void {
            console.warn('shimmed function Account.logoutOtherEndpoints');
        }

        logoutOtherEndpoint(endpointID: string): void {
            console.warn('shimmed function Account.logoutOtherEndpoint');
        }

        getOwnEndpointsInfo(id: VectGIString, name: VectGIString, type: VectGIString): void {
            console.warn('shimmed function Account.getOwnEndpointsInfo');
        }

        externalLoginResponse(response: Binary): void {
            console.warn('shimmed function Account.externalLoginResponse');
        }

        changePassword(oldPassword: string, newPassword: string, savePwd: Boolean): void {
            console.warn('shimmed function Account.changePassword');
        }

        setPasswordSaved(savePwd: Boolean): void {
            console.warn('shimmed function Account.setPasswordSaved');
        }

        setServersideIntProperty(propKey: number, value: number): Boolean {
            throw new Error('shimmed function Account.setServersideIntProperty');
        }

        setServersideStrProperty(propKey: number, value: string): Boolean {
            throw new Error('shimmed function Account.setServersideStrProperty');
        }

        cancelServerCommit(): void {
            console.warn('shimmed function Account.cancelServerCommit');
        }

        setIntProperty(propKey: number, value: number): Boolean {
            throw new Error('shimmed function Account.setIntProperty');
        }

        setStrProperty(propKey: number, value: string): Boolean {
            throw new Error('shimmed function Account.setStrProperty');
        }

        setBinProperty(propKey: number, value: Binary): Boolean {
            throw new Error('shimmed function Account.setBinProperty');
        }

        setAvailability(availability: number): void {
            console.warn('shimmed function Account.setAvailability');
        }

        setStandby(standby: Boolean): void {
            console.warn('shimmed function Account.setStandby');
        }

        setProfileAttachment(attachmentID: string, attachment: Binary): Boolean {
            throw new Error('shimmed function Account.setProfileAttachment');
        }

        getCapabilityStatus(capability: number, expiryTimestamp: number): number {
            throw new Error('shimmed function Account.getCapabilityStatus');
        }

        getCapabilityStatus_1(capability: number): AccountGetCapabilityStatusResult {
            throw new Error('shimmed function Account.getCapabilityStatus_1');
        }

        getSkypenameHash(): string {
            throw new Error('shimmed function Account.getSkypenameHash');
        }

        getContactObjectID(): number {
            throw new Error('shimmed function Account.getContactObjectID');
        }

        getSubscriptionInfo(name: VectGIString, endtime: VectUnsignedInt, status: VectUnsignedInt, package_type: VectUnsignedInt, service_type: VectUnsignedInt): void {
            console.warn('shimmed function Account.getSubscriptionInfo');
        }

        reconnectXMPP(): void {
            console.warn('shimmed function Account.reconnectXMPP');
        }

        getPartnerChannelStatus(): string {
            throw new Error('shimmed function Account.getPartnerChannelStatus');
        }

        getVerifiedEmail(): string {
            throw new Error('shimmed function Account.getVerifiedEmail');
        }

        getVerifiedCompany(): string {
            throw new Error('shimmed function Account.getVerifiedCompany');
        }

        getDBPath(): string {
            throw new Error('shimmed function Account.getDBPath');
        }

        delete(): void {
            console.warn('shimmed function Account.delete');
        }

        getPartnerUID(partnerId: number): string {
            throw new Error('shimmed function Account.getPartnerUID');
        }

        getLastPartnerId(): number {
            throw new Error('shimmed function Account.getLastPartnerId');
        }

        discard(): void {
            console.warn('shimmed function Account.discard');
        }

        getStatus(): number {
            throw new Error('shimmed function Account.getStatus');
        }

        getStatusProgress(): number {
            throw new Error('shimmed function Account.getStatusProgress');
        }

        hasCapability(capability: number): Boolean {
            throw new Error('shimmed function Account.hasCapability');
        }

        getMoodTextHtml(): string {
            throw new Error('shimmed function Account.getMoodTextHtml');
        }

        close(): void {
            console.warn('shimmed function Account.close');
        }

        static statustoString(val: number): string {
            throw new Error('shimmed function Account.statustoString');
        }

        static cblsyncstatustoString(val: number): string {
            throw new Error('shimmed function Account.cblsyncstatustoString');
        }

        static logoutreasontoString(val: number): string {
            throw new Error('shimmed function Account.logoutreasontoString');
        }

        static pwdchangestatustoString(val: number): string {
            throw new Error('shimmed function Account.pwdchangestatustoString');
        }

        static commitstatustoString(val: number): string {
            throw new Error('shimmed function Account.commitstatustoString');
        }

        static chatpolicytoString(val: number): string {
            throw new Error('shimmed function Account.chatpolicytoString');
        }

        static skypecallpolicytoString(val: number): string {
            throw new Error('shimmed function Account.skypecallpolicytoString');
        }

        static pstncallpolicytoString(val: number): string {
            throw new Error('shimmed function Account.pstncallpolicytoString');
        }

        static avatarpolicytoString(val: number): string {
            throw new Error('shimmed function Account.avatarpolicytoString');
        }

        static buddycountpolicytoString(val: number): string {
            throw new Error('shimmed function Account.buddycountpolicytoString');
        }

        static timezonepolicytoString(val: number): string {
            throw new Error('shimmed function Account.timezonepolicytoString');
        }

        static webpresencepolicytoString(val: number): string {
            throw new Error('shimmed function Account.webpresencepolicytoString');
        }

        static phonenumberspolicytoString(val: number): string {
            throw new Error('shimmed function Account.phonenumberspolicytoString');
        }

        static voicemailpolicytoString(val: number): string {
            throw new Error('shimmed function Account.voicemailpolicytoString');
        }

        static authrequestpolicytoString(val: number): string {
            throw new Error('shimmed function Account.authrequestpolicytoString');
        }

        static adpolicytoString(val: number): string {
            throw new Error('shimmed function Account.adpolicytoString');
        }

        static shortcircuitsynctoString(val: number): string {
            throw new Error('shimmed function Account.shortcircuitsynctoString');
        }

        static federatedpresencepolicytoString(val: number): string {
            throw new Error('shimmed function Account.federatedpresencepolicytoString');
        }

        static capabilitystatustoString(val: number): string {
            throw new Error('shimmed function Account.capabilitystatustoString');
        }

        static subscriptionstatustoString(val: number): string {
            throw new Error('shimmed function Account.subscriptionstatustoString');
        }

        static packagetypetoString(val: number): string {
            throw new Error('shimmed function Account.packagetypetoString');
        }

        static servicetypetoString(val: number): string {
            throw new Error('shimmed function Account.servicetypetoString');
        }

        static xmppstatustoString(val: number): string {
            throw new Error('shimmed function Account.xmppstatustoString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`Account::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                case "endpointschanged": // OnEndpointsChangedType
                    break;
            }

        }
    }
    export class AccountGetCapabilityStatusResult implements __IAccountGetCapabilityStatusResultPublicNonVirtuals {
        expiryTimestamp: number;
        status: number;

    }
    export class AccountGetStatusWithProgressResult implements __IAccountGetStatusWithProgressResultPublicNonVirtuals {
        progress: number;
        status: number;

    }
    export class AccountManager implements __IAccountManagerPublicNonVirtuals {
        // constructor();
        static local_SETTINGS_KEY_USER_CID: string = 'skype.liveuser.CID';

        static isTheSameLiveUser(): Boolean {
            throw new Error('shimmed function AccountManager.isTheSameLiveUser');
        }

        static isTheSameSkypeUser(accountName: string): Boolean {
            throw new Error('shimmed function AccountManager.isTheSameSkypeUser');
        }

        static updateAccountName(accountName: string): void {
            console.warn('shimmed function AccountManager.updateAccountName');
        }

    }
    export class Alert implements Windows.Foundation.IClosable, __IAlertPublicNonVirtuals, __IAlertProtectedNonVirtuals {
        // constructor();
        static window_SIZE_LARGE: number = 2;
        static window_SIZE_PIC: number = 1;
        static window_SIZE_SMALL: number = 0;
        static type_AUTHREQ: number = 2;
        static type_INFO: number = 1;
        static type_NOTICE: number = 0;

        getObjectID(): number {
            throw new Error('shimmed function Alert.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function Alert.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function Alert.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function Alert.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function Alert.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function Alert.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function Alert.setExtendedIntProperty');
        }

        markSeen(): void {
            console.warn('shimmed function Alert.markSeen');
        }

        delete(): Boolean {
            throw new Error('shimmed function Alert.delete');
        }

        discard(): void {
            console.warn('shimmed function Alert.discard');
        }

        close(): void {
            console.warn('shimmed function Alert.close');
        }

        static typetoString(val: number): string {
            throw new Error('shimmed function Alert.typetoString');
        }

        static window_SIZEToString(val: number): string {
            throw new Error('shimmed function Alert.window_SIZEToString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`Alert::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                    break;
            }

        }
    }
    export class AvatarManager implements __IAvatarManagerPublicNonVirtuals, __IAvatarManagerProtectedNonVirtuals {
        getAvatarURI(identity: string): string {
            throw new Error('shimmed function AvatarManager.getAvatarURI');
        }

        static offlineAvatarURI(identity: string): string {
            throw new Error('shimmed function AvatarManager.offlineAvatarURI');
        }

        static isDefaultAvatarURI(uri: string): Boolean {
            throw new Error('shimmed function AvatarManager.isDefaultAvatarURI');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`AvatarManager::addEventListener: ${name}`);
            switch (name) {
                case "avatarurichange": // OnAvatarURIChangeType
                    break;
            }

        }
    }
    export class Binary implements Windows.Foundation.IClosable, __IBinaryPublicNonVirtuals {
        // constructor();
        set(bytes: number[]): void {
            console.warn('shimmed function Binary.set');
        }

        getAsBase64(): string {
            throw new Error('shimmed function Binary.getAsBase64');
        }

        append(other: Binary): void {
            console.warn('shimmed function Binary.append');
        }

        close(): void {
            console.warn('shimmed function Binary.close');
        }

    }
    export class Build implements __IBuildPublicNonVirtuals {
        // constructor();
        static release: Boolean = true;

        static getBuildType(): BuildType {
            throw new Error('shimmed function Build.getBuildType');
        }

    }
    export enum BuildType {
        buildtype_REAL_ENV,
        buildtype_TEST_ENV,
    }
    export class Call implements __ICallPublicNonVirtuals {
        // constructor();
    }
    export class CallMember implements __ICallMemberPublicNonVirtuals {
        // constructor();
    }
    export class Chat implements __IChatPublicNonVirtuals {
        // constructor();
    }
    export class ChatMember implements __IChatMemberPublicNonVirtuals {
        // constructor();
    }
    export class ChatMessage implements __IChatMessagePublicNonVirtuals {
        // constructor();
    }
    export class Contact implements Windows.Foundation.IClosable, __IContactPublicNonVirtuals, __IContactProtectedNonVirtuals {
        // constructor();
        static capabilitystatus_CAPABILITY_EXISTS: number = 2;
        static capabilitystatus_CAPABILITY_MIXED: number = 1;
        static capabilitystatus_NO_CAPABILITY: number = 0;
        static capability_CAPABILITY_PUBLIC_CONTACT: number = 14;
        static capability_CAPABILITY_MOBILE_DEVICE: number = 13;
        static capability_CAPABILITY_VOICE_EVER: number = 12;
        static capability_CAPABILITY_TEXT_EVER: number = 11;
        static capability_CAPABILITY_PSTN_TRANSFER: number = 10;
        static capability_CAPABILITY_COMMERCIAL_CONTACT: number = 9;
        static capability_CAPABILITY_LARGE_CONFERENCE: number = 8;
        static capability_CAPABILITY_SERVICE_PROVIDER: number = 7;
        static capability_CAPABILITY_TEXT: number = 6;
        static capability_CAPABILITY_VIDEO: number = 5;
        static capability_CAPABILITY_CALL_FORWARD: number = 4;
        static capability_CAPABILITY_CAN_BE_SENT_VM: number = 3;
        static capability_CAPABILITY_SKYPEIN: number = 2;
        static capability_CAPABILITY_SKYPEOUT: number = 1;
        static capability_CAPABILITY_VOICEMAIL: number = 0;
        static extra_AUTHREQ_FIELDS_SEND_VERIFIED_COMPANY: number = 2;
        static extra_AUTHREQ_FIELDS_SEND_VERIFIED_EMAIL: number = 1;
        static availability_SKYPE_ME_FROM_MOBILE: number = 20;
        static availability_DO_NOT_DISTURB_FROM_MOBILE: number = 18;
        static availability_NOT_AVAILABLE_FROM_MOBILE: number = 17;
        static availability_AWAY_FROM_MOBILE: number = 16;
        static availability_ONLINE_FROM_MOBILE: number = 15;
        static availability_CONNECTING: number = 14;
        static availability_INVISIBLE: number = 6;
        static availability_SKYPE_ME: number = 7;
        static availability_DO_NOT_DISTURB: number = 5;
        static availability_NOT_AVAILABLE: number = 4;
        static availability_AWAY: number = 3;
        static availability_ONLINE: number = 2;
        static availability_OFFLINE_BUT_CF_ABLE: number = 13;
        static availability_OFFLINE_BUT_VM_ABLE: number = 12;
        static availability_OFFLINE: number = 1;
        static availability_SKYPEOUT: number = 10;
        static availability_BLOCKED_SKYPEOUT: number = 11;
        static availability_BLOCKED: number = 9;
        static availability_PENDINGAUTH: number = 8;
        static availability_UNKNOWN: number = 0;
        static authlevel_BLOCKED_BY_ME: number = 2;
        static authlevel_AUTHORIZED_BY_ME: number = 1;
        static authlevel_NONE: number = 0;
        static type_LYNC: number = 9;
        static type_PASSPORT: number = 8;
        static type_XMPP: number = 7;
        static type_EXTERNAL: number = 6;
        static type_UNDISCLOSED_PSTN: number = 5;
        static type_FREE_PSTN: number = 4;
        static type_EMERGENCY_PSTN: number = 3;
        static type_PSTN: number = 2;
        static type_SKYPE: number = 1;
        static type_UNRECOGNIZED: number = 0;

        getObjectID(): number {
            throw new Error('shimmed function Contact.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function Contact.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function Contact.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function Contact.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function Contact.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function Contact.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function Contact.setExtendedIntProperty');
        }

        getContactType(): number {
            throw new Error('shimmed function Contact.getContactType');
        }

        getIdentity(): string {
            throw new Error('shimmed function Contact.getIdentity');
        }

        getAvatar(avatar: Binary): Boolean {
            throw new Error('shimmed function Contact.getAvatar');
        }

        getProfileAttachment(attachmentID: string, attachment: Binary): Boolean {
            throw new Error('shimmed function Contact.getProfileAttachment');
        }

        getVerifiedEmail(): string {
            throw new Error('shimmed function Contact.getVerifiedEmail');
        }

        getVerifiedCompany(): string {
            throw new Error('shimmed function Contact.getVerifiedCompany');
        }

        isMemberOf(groupObjectID: number): Boolean {
            throw new Error('shimmed function Contact.isMemberOf');
        }

        isMemberOfHardwiredGroup(groupType: number): Boolean {
            throw new Error('shimmed function Contact.isMemberOfHardwiredGroup');
        }

        getUnifiedMasters(masters: VectUnsignedInt): void {
            console.warn('shimmed function Contact.getUnifiedMasters');
        }

        getUnifiedServants(servants: VectUnsignedInt): void {
            console.warn('shimmed function Contact.getUnifiedServants');
        }

        setBlocked(blocked: Boolean, abuse: Boolean): Boolean {
            throw new Error('shimmed function Contact.setBlocked');
        }

        ignoreAuthRequest(): Boolean {
            throw new Error('shimmed function Contact.ignoreAuthRequest');
        }

        giveDisplayName(name: string): Boolean {
            throw new Error('shimmed function Contact.giveDisplayName');
        }

        assignSpeedDial(dial: string): Boolean {
            throw new Error('shimmed function Contact.assignSpeedDial');
        }

        setBuddyStatus(isMyBuddy: Boolean, syncAuth: Boolean): Boolean {
            throw new Error('shimmed function Contact.setBuddyStatus');
        }

        sendAuthRequest(message: string, extras_bitmask: number): Boolean {
            throw new Error('shimmed function Contact.sendAuthRequest');
        }

        hasAuthorizedMe(): Boolean {
            throw new Error('shimmed function Contact.hasAuthorizedMe');
        }

        setPhoneNumber(num: number, label: string, number: string): Boolean {
            throw new Error('shimmed function Contact.setPhoneNumber');
        }

        copyLocalDataFrom(fromContactObjectID: number): Boolean {
            throw new Error('shimmed function Contact.copyLocalDataFrom');
        }

        openConversation(conversation: Conversation): Boolean {
            throw new Error('shimmed function Contact.openConversation');
        }

        hasCapability(capability: number, queryServer: Boolean): Boolean {
            throw new Error('shimmed function Contact.hasCapability');
        }

        getCapabilityStatus(capability: number, queryServer: Boolean): number {
            throw new Error('shimmed function Contact.getCapabilityStatus');
        }

        refreshProfile(): void {
            console.warn('shimmed function Contact.refreshProfile');
        }

        getKnownRemoteVersions(versions: VectGIString, useMSNPPresence: Boolean): void {
            console.warn('shimmed function Contact.getKnownRemoteVersions');
        }

        discard(): void {
            console.warn('shimmed function Contact.discard');
        }

        getAuthRequestMessageHtml(): string {
            throw new Error('shimmed function Contact.getAuthRequestMessageHtml');
        }

        getDisplayNameHtml(): string {
            throw new Error('shimmed function Contact.getDisplayNameHtml');
        }

        getFullNameHtml(): string {
            throw new Error('shimmed function Contact.getFullNameHtml');
        }

        getMoodTextHtml(): string {
            throw new Error('shimmed function Contact.getMoodTextHtml');
        }

        close(): void {
            console.warn('shimmed function Contact.close');
        }

        static typetoString(val: number): string {
            throw new Error('shimmed function Contact.typetoString');
        }

        static authleveltoString(val: number): string {
            throw new Error('shimmed function Contact.authleveltoString');
        }

        static availabilitytoString(val: number): string {
            throw new Error('shimmed function Contact.availabilitytoString');
        }

        static extra_AUTHREQ_FIELDSToString(val: number): string {
            throw new Error('shimmed function Contact.extra_AUTHREQ_FIELDSToString');
        }

        static capabilitytoString(val: number): string {
            throw new Error('shimmed function Contact.capabilitytoString');
        }

        static capabilitystatustoString(val: number): string {
            throw new Error('shimmed function Contact.capabilitystatustoString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`Contact::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                    break;
            }

        }
    }
    export class ContactGroup implements Windows.Foundation.IClosable, __IContactGroupPublicNonVirtuals, __IContactGroupProtectedNonVirtuals {
        // constructor();
        static type_SCD_CONTACTS: number = 19;
        static type_LYNC_CONTACTS: number = 18;
        static type_PASSPORT_CONTACTS: number = 17;
        static type_XMPP_CONTACTS: number = 16;
        static type_EXTERNAL_CONTACTS: number = 15;
        static type_SHARED_GROUP: number = 14;
        static type_PROPOSED_SHARED_GROUP: number = 13;
        static type_CUSTOM_GROUP: number = 12;
        static type_UNGROUPED_BUDDIES: number = 11;
        static type_CONTACTS_BLOCKED_BY_ME: number = 10;
        static type_CONTACTS_AUTHORIZED_BY_ME: number = 9;
        static type_CONTACTS_WAITING_MY_AUTHORIZATION: number = 8;
        static type_RECENTLY_CONTACTED_CONTACTS: number = 7;
        static type_UNKNOWN_OR_PENDINGAUTH_BUDDIES: number = 6;
        static type_ONLINE_BUDDIES: number = 5;
        static type_SKYPEOUT_BUDDIES: number = 4;
        static type_SKYPE_BUDDIES: number = 3;
        static type_ALL_BUDDIES: number = 2;
        static type_ALL_KNOWN_CONTACTS: number = 1;

        getObjectID(): number {
            throw new Error('shimmed function ContactGroup.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function ContactGroup.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function ContactGroup.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function ContactGroup.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function ContactGroup.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function ContactGroup.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function ContactGroup.setExtendedIntProperty');
        }

        giveDisplayName(name: string): Boolean {
            throw new Error('shimmed function ContactGroup.giveDisplayName');
        }

        giveSortOrder(sortOrder: number): Boolean {
            throw new Error('shimmed function ContactGroup.giveSortOrder');
        }

        delete(): Boolean {
            throw new Error('shimmed function ContactGroup.delete');
        }

        getConversations(conversations: VectUnsignedInt): void {
            console.warn('shimmed function ContactGroup.getConversations');
        }

        canAddConversation(conversationObjectID: number): Boolean {
            throw new Error('shimmed function ContactGroup.canAddConversation');
        }

        addConversation(conversationObjectID: number): Boolean {
            throw new Error('shimmed function ContactGroup.addConversation');
        }

        canRemoveConversation(): Boolean {
            throw new Error('shimmed function ContactGroup.canRemoveConversation');
        }

        removeConversation(conversationObjectID: number): Boolean {
            throw new Error('shimmed function ContactGroup.removeConversation');
        }

        getContacts(contacts: VectUnsignedInt): void {
            console.warn('shimmed function ContactGroup.getContacts');
        }

        canAddContact(contactObjectID: number): Boolean {
            throw new Error('shimmed function ContactGroup.canAddContact');
        }

        addContact(contactObjectID: number): Boolean {
            throw new Error('shimmed function ContactGroup.addContact');
        }

        canRemoveContact(): Boolean {
            throw new Error('shimmed function ContactGroup.canRemoveContact');
        }

        removeContact(contactObjectID: number): Boolean {
            throw new Error('shimmed function ContactGroup.removeContact');
        }

        discard(): void {
            console.warn('shimmed function ContactGroup.discard');
        }

        close(): void {
            console.warn('shimmed function ContactGroup.close');
        }

        static typetoString(val: number): string {
            throw new Error('shimmed function ContactGroup.typetoString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`ContactGroup::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                case "change": // OnChangeType
                case "changeconversation": // OnChangeConversationType
                    break;
            }

        }
    }
    export class ContactSearch implements Windows.Foundation.IClosable, __IContactSearchPublicNonVirtuals, __IContactSearchProtectedNonVirtuals {
        // constructor();
        static contact_TYPE_LYNC: number = 2;
        static contact_TYPE_SKYPE: number = 1;
        static condition_CONTAINS_WORD_PREFIXES: number = 9;
        static condition_CONTAINS_WORDS: number = 8;
        static condition_PREFIX_LE: number = 7;
        static condition_PREFIX_GE: number = 6;
        static condition_PREFIX_EQ: number = 5;
        static condition_LE: number = 4;
        static condition_LT: number = 3;
        static condition_GE: number = 2;
        static condition_GT: number = 1;
        static condition_EQ: number = 0;
        static status_FAILED: number = 5;
        static status_FINISHED: number = 4;
        static status_EXTENDABLE: number = 3;
        static status_PENDING: number = 2;
        static status_CONSTRUCTION: number = 1;

        getObjectID(): number {
            throw new Error('shimmed function ContactSearch.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function ContactSearch.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function ContactSearch.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function ContactSearch.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function ContactSearch.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function ContactSearch.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function ContactSearch.setExtendedIntProperty');
        }

        addMinAgeTerm(min_age_in_years: number, add_to_subs: Boolean): Boolean {
            throw new Error('shimmed function ContactSearch.addMinAgeTerm');
        }

        addMaxAgeTerm(max_age_in_years: number, add_to_subs: Boolean): Boolean {
            throw new Error('shimmed function ContactSearch.addMaxAgeTerm');
        }

        addEmailTerm(email: string, add_to_subs: Boolean): Boolean {
            throw new Error('shimmed function ContactSearch.addEmailTerm');
        }

        addLanguageTerm(language: string, add_to_subs: Boolean): Boolean {
            throw new Error('shimmed function ContactSearch.addLanguageTerm');
        }

        addStrTerm(prop: number, cond: number, value: string, add_to_subs: Boolean): Boolean {
            throw new Error('shimmed function ContactSearch.addStrTerm');
        }

        addIntTerm(prop: number, cond: number, value: number, add_to_subs: Boolean): Boolean {
            throw new Error('shimmed function ContactSearch.addIntTerm');
        }

        addOr(): void {
            console.warn('shimmed function ContactSearch.addOr');
        }

        isValid(): Boolean {
            throw new Error('shimmed function ContactSearch.isValid');
        }

        submit(): void {
            console.warn('shimmed function ContactSearch.submit');
        }

        extend(): void {
            console.warn('shimmed function ContactSearch.extend');
        }

        _Release(): void {
            console.warn('shimmed function ContactSearch._Release');
        }

        getResults(contacts: VectUnsignedInt, from: number, count: number): void {
            console.warn('shimmed function ContactSearch.getResults');
        }

        setSupportedContactTypes(contactTypesBitmask: number): void {
            console.warn('shimmed function ContactSearch.setSupportedContactTypes');
        }

        discard(): void {
            console.warn('shimmed function ContactSearch.discard');
        }

        search(text: string): Boolean {
            throw new Error('shimmed function ContactSearch.search');
        }

        close(): void {
            console.warn('shimmed function ContactSearch.close');
        }

        static statustoString(val: number): string {
            throw new Error('shimmed function ContactSearch.statustoString');
        }

        static conditiontoString(val: number): string {
            throw new Error('shimmed function ContactSearch.conditiontoString');
        }

        static contact_TYPEToString(val: number): string {
            throw new Error('shimmed function ContactSearch.contact_TYPEToString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`ContactSearch::addEventListener: ${name}`);
            switch (name) {
                case "match": // ContactSearchMatchEvent
                case "propertychange": // OnPropertyChangeType
                    break;
            }

        }
    }
    export class ContactSearchMatch implements __IContactSearchMatchPublicNonVirtuals {
        // constructor(c: Contact, title: string, property: number, rank: number);
        constructor(c: Contact, title: string, property: number, rank: number) {}

        property: number;
        rank: number;
        title: string;
        target: Contact;

        asString(): string {
            throw new Error('shimmed function ContactSearchMatch.asString');
        }

    }
    export type ContactSearchMatchEvent = (match: ContactSearchMatch) => void;
    export class ContentItem implements Windows.Foundation.IClosable, __IContentItemPublicNonVirtuals, __IContentItemProtectedNonVirtuals {
        // constructor();
        getObjectID(): number {
            throw new Error('shimmed function ContentItem.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function ContentItem.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function ContentItem.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function ContentItem.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function ContentItem.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function ContentItem.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function ContentItem.setExtendedIntProperty');
        }

        discard(): void {
            console.warn('shimmed function ContentItem.discard');
        }

        close(): void {
            console.warn('shimmed function ContentItem.close');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`ContentItem::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                    break;
            }

        }
    }
    export class Conversation implements Windows.Foundation.IClosable, __IConversationPublicNonVirtuals, __IConversationProtectedNonVirtuals {
        // constructor();
        participants: any[] = null;
        partnerContact: Contact;
        partner: Participant;
        myself: Participant;
        static subscription_CHECK_CONTEXT_USER_IS_ABOUT_TO_START_VIDEO: number = 1;
        static subscription_CHECK_CONTEXT_USER_IS_ABOUT_TO_START_SCREENSHARE: number = 0;
        static capability_CAPABILITY_COUNT: number = 24;
        static capability_CAN_SEND_STATIC_LOCATION_MESSAGE: number = 23;
        static capability_CAN_SEND_MEDIAMESSAGE: number = 22;
        static capability_CAN_SEND_VIDEOMESSAGE: number = 21;
        static capability_CAN_SPAWN: number = 20;
        static capability_CAN_KICK: number = 19;
        static capability_CAN_RETIRE: number = 18;
        static capability_CAN_ADD: number = 17;
        static capability_CAN_CHANGE_PICTURE: number = 16;
        static capability_CAN_CHANGE_TOPIC: number = 15;
        static capability_CAN_EDIT_OTHERS: number = 14;
        static capability_CAN_EDIT_MYSELF: number = 13;
        static capability_CAN_SEND_CONTACTS: number = 12;
        static capability_CAN_SEND_VOICEMAIL: number = 11;
        static capability_CAN_SEND_FILE: number = 10;
        static capability_CAN_SEND_TEXT: number = 9;
        static capability_CAN_SEND_SMS: number = 8;
        static capability_CAN_CHECK_QUALITY: number = 7;
        static capability_CAN_HOLD_LIVE_SESSION: number = 6;
        static capability_CAN_SHARE_SCREEN: number = 5;
        static capability_CAN_RING_PSTN: number = 4;
        static capability_CAN_RING_VIDEO: number = 3;
        static capability_CAN_RING_ALL: number = 2;
        static capability_CAN_RING: number = 1;
        static capability_CAN_GO_LIVE: number = 0;
        static list_TYPE_REALLY_ALL_CONVERSATIONS: number = 5;
        static list_TYPE_PINNED_CONVERSATIONS: number = 4;
        static list_TYPE_LIVE_CONVERSATIONS: number = 3;
        static list_TYPE_BOOKMARKED_CONVERSATIONS: number = 2;
        static list_TYPE_INBOX_CONVERSATIONS: number = 1;
        static list_TYPE_ALL_CONVERSATIONS: number = 0;
        static participantfilter_OTHER_CONSUMERS: number = 5;
        static participantfilter_MYSELF: number = 4;
        static participantfilter_CONSUMERS_AND_APPLICANTS: number = 3;
        static participantfilter_APPLICANTS: number = 2;
        static participantfilter_CONSUMERS: number = 1;
        static participantfilter_ALL: number = 0;
        static picture_FORMAT_PICTURE_SINGLE_URL: number = 1;
        static picture_FORMAT_PICTURE_DEFAULT: number = 0;
        static live_SESSION_EVENT_USER_REJECTED_BECAUSE_OF_CONF_PARTICIPANTS_LIMIT: number = 1;
        static live_SESSION_EVENT_DOWNGRADED_TO_AUDIO_BECAUSE_OF_VIDEO_PARTICIPANTS_LIMIT: number = 0;
        static premium_VIDEO_STATUS_RESULT_503_SERVICE_TIMEOUT: number = 16;
        static premium_VIDEO_STATUS_RESULT_500_GENERAL_SERVICE_ERROR: number = 15;
        static premium_VIDEO_STATUS_RESULT_430_GRACE_TIME_EXPIRED: number = 14;
        static premium_VIDEO_STATUS_RESULT_424_FAIR_USAGE_POLICY_VIOLATION_SPONSORS_MONTH_LIMIT_REACHED: number = 13;
        static premium_VIDEO_STATUS_RESULT_422_FAIR_USAGE_POLICY_VIOLATION_SPONSORS_DAY_LIMIT_REACHED: number = 12;
        static premium_VIDEO_STATUS_RESULT_420_FAIR_USAGE_POLICY_VIOLATION_CALL_LIMIT_REACHED: number = 11;
        static premium_VIDEO_STATUS_RESULT_416_SUBSCRIPTION_IS_ALREADY_IN_USE: number = 10;
        static premium_VIDEO_STATUS_RESULT_414_NO_SUBSCRIPTION: number = 9;
        static premium_VIDEO_STATUS_RESULT_412_SUBSCRIPTION_INSUFFICENT_FOR_THIS_CALL: number = 8;
        static premium_VIDEO_STATUS_RESULT_410_NO_VALID_SUBSCRIPTION_BUT_TRIAL_IS_AVAILABLE: number = 7;
        static premium_VIDEO_STATUS_RESULT_405_GROUP_TOO_LARGE: number = 6;
        static premium_VIDEO_STATUS_RESULT_404_CONVERSATION_ID_NOT_FOUND_OR_CALL_ALREADY_TERMINATED: number = 5;
        static premium_VIDEO_STATUS_RESULT_403_PAID_SERVICE_BLOCK: number = 4;
        static premium_VIDEO_STATUS_RESULT_401_P2P_BLOCK: number = 3;
        static premium_VIDEO_STATUS_RESULT_400_BAD_REQUEST_SOME_FIELDS_MISSING: number = 2;
        static premium_VIDEO_STATUS_RESULT_200_OK: number = 1;
        static premium_VIDEO_STATUS_NOT_MULTIPARTY_VIDEO: number = 0;
        static allowed_ACTIVITY_SPEAK_AND_WRITE: number = 8;
        static allowed_ACTIVITY_SPEAK: number = 4;
        static allowed_ACTIVITY_ADD_CONSUMERS: number = 2;
        static allowed_ACTIVITY_SET_META: number = 1;
        static local_LIVESTATUS_ACTIVATING: number = 13;
        static local_LIVESTATUS_TRANSFERRING: number = 12;
        static local_LIVESTATUS_RECENTLY_LIVE: number = 10;
        static local_LIVESTATUS_RECORDING_VOICE_MESSAGE: number = 9;
        static local_LIVESTATUS_PLAYING_VOICE_MESSAGE: number = 8;
        static local_LIVESTATUS_OTHERS_ARE_LIVE_FULL: number = 11;
        static local_LIVESTATUS_OTHERS_ARE_LIVE: number = 7;
        static local_LIVESTATUS_ON_HOLD_REMOTELY: number = 6;
        static local_LIVESTATUS_ON_HOLD_LOCALLY: number = 5;
        static local_LIVESTATUS_IM_LIVE: number = 3;
        static local_LIVESTATUS_RINGING_FOR_ME: number = 2;
        static local_LIVESTATUS_STARTING: number = 1;
        static local_LIVESTATUS_NONE: number = 0;
        static my_STATUS_RETIRED_VOLUNTARILY: number = 10;
        static my_STATUS_RETIRED_FORCEFULLY: number = 9;
        static my_STATUS_CONSUMER: number = 8;
        static my_STATUS_INVALID_ACCESS_TOKEN: number = 7;
        static my_STATUS_APPLICATION_DENIED: number = 6;
        static my_STATUS_APPLICANT: number = 5;
        static my_STATUS_QUEUED_TO_ENTER: number = 4;
        static my_STATUS_DOWNLOADING_MESSAGES: number = 3;
        static my_STATUS_RETRY_CONNECTING: number = 2;
        static my_STATUS_CONNECTING: number = 1;
        static type_LEGACY_SHAREDGROUP: number = 5;
        static type_LEGACY_VOICE_CONFERENCE: number = 4;
        static type_TERMINATED_CONFERENCE: number = 3;
        static type_CONFERENCE: number = 2;
        static type_DIALOG: number = 1;
        static setupkey_KEEP_IN_INBOX_WHEN_BLOCKING: string = 'Lib/Conversation/KeepInInboxWhenBlocking';
        static setupkey_INCOMING_AUTH_REQUEST_IN_CONV: string = 'Lib/Conversation/IncomingAuthRequestInConv';
        static setupkey_ENABLE_REACHBACK_CALLING: string = 'Lib/Reachback/Enable';
        static setupkey_HASH_LINK_URL: string = 'UI/General/HashLinkURL';
        static setupkey_ENABLE_DIFF_HIGHLIGHTING: string = 'Lib/Chat/HighlightDiffs';
        static setupkey_CALL_SEAMLESS_UPGRADE_CAPABLE: string = '*Lib/Call/SeamlessUpgradeCapable';
        static setupkey_CALL_EMERGENCY_COUNTRY: string = 'Lib/Call/EmergencyCountry';
        static setupkey_CALL_INCOMING_IN_ROUTING_STATUS: string = '*Lib/Call/IncomingInRoutingStatus';
        static setupkey_CALL_APPLY_CF: string = 'Lib/Call/ApplyCF';
        static setupkey_CALL_SEND_TO_VM: string = 'Lib/Call/SendToVM';
        static setupkey_CALL_NOANSWER_TIMEOUT: string = 'Lib/Call/NoAnswerTimeout';
        static setupkey_DISABLE_CHAT_ACTIVITY_INDICATION: string = 'Lib/Chat/DisableActivityIndication';
        static setupkey_CHATDB_LIMIT_KB: string = 'Lib/Chat/ChatDBLimitKb';
        static setupkey_CHAT_HISTORY_DAYS: string = 'Lib/Chat/HistoryDays';
        static setupkey_DISABLE_CHAT_HISTORY: string = 'Lib/Message/DisableHistory';
        static setupkey_DISABLE_P2P_CHAT: string = '*Lib/Chat/Disable';
        static setupkey_DISABLE_CHAT: string = 'Lib/Chat/DisableChat';
        static setupkey_QUIET_P2P_IN_CALL: string = '*Lib/Conversation/QuietP2PInCall';
        static setupkey_RECENTLY_LIVE_TIMEOUT: string = 'Lib/Conversation/RecentlyLiveTimeout';
        static setupkey_INBOX_LIMIT_DAYS: string = 'Lib/Conversation/InboxLimitDays';
        static setupkey_UPDATE_INBOX_MESSAGE_ID_METHOD: string = 'Lib/Conversation/UpdateInboxMessageIDMethod';
        static setupkey_DISABLE_INBOX_UPDATE_ON_TYPING: string = 'Lib/Conversation/DisableInboxUpdateOnTyping';
        static setupkey_INBOX_UPDATE_TIMEOUT: string = 'Lib/Conversation/InboxUpdateTimeout';
        static setupkey_ENABLE_EXTERNAL_CONTACTS: string = 'Lib/Contacts/EnableExternalContacts';
        static setupkey_ENABLE_BIRTHDAY_NOTIFICATION: string = 'Lib/Conversation/EnableBirthday';

        getObjectID(): number {
            throw new Error('shimmed function Conversation.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function Conversation.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function Conversation.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function Conversation.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function Conversation.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function Conversation.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function Conversation.setExtendedIntProperty');
        }

        setOption(propKey: number, value: number): Boolean {
            throw new Error('shimmed function Conversation.setOption');
        }

        setTopic(topic: string, isXML: Boolean): Boolean {
            throw new Error('shimmed function Conversation.setTopic');
        }

        setPicture(jpeg: Binary): Boolean {
            throw new Error('shimmed function Conversation.setPicture');
        }

        getChatname(): string {
            throw new Error('shimmed function Conversation.getChatname');
        }

        spawnConference(identitiesToAdd: VectGIString, autoRingAddedParticipantsIfLive: Boolean): number {
            throw new Error('shimmed function Conversation.spawnConference');
        }

        addConsumers(identities: VectGIString, autoRingAddedParticipantsIfLive: Boolean): Boolean {
            throw new Error('shimmed function Conversation.addConsumers');
        }

        canAddConsumersOrSpawn(identities: VectGIString): Boolean {
            throw new Error('shimmed function Conversation.canAddConsumersOrSpawn');
        }

        assimilate(otherConversationObjectID: number): number {
            throw new Error('shimmed function Conversation.assimilate');
        }

        joinLiveSession(accessToken: string): Boolean {
            throw new Error('shimmed function Conversation.joinLiveSession');
        }

        ringOthers(identities: VectGIString, videoCall: Boolean, origin: string): Boolean {
            throw new Error('shimmed function Conversation.ringOthers');
        }

        ringSeamless(videoCall: Boolean): Boolean {
            throw new Error('shimmed function Conversation.ringSeamless');
        }

        muteMyMicrophone(): Boolean {
            throw new Error('shimmed function Conversation.muteMyMicrophone');
        }

        unmuteMyMicrophone(): Boolean {
            throw new Error('shimmed function Conversation.unmuteMyMicrophone');
        }

        holdMyLiveSession(): Boolean {
            throw new Error('shimmed function Conversation.holdMyLiveSession');
        }

        resumeMyLiveSession(): Boolean {
            throw new Error('shimmed function Conversation.resumeMyLiveSession');
        }

        leaveLiveSession(postVoiceAutoresponse: Boolean): Boolean {
            throw new Error('shimmed function Conversation.leaveLiveSession');
        }

        startVoiceMessage(): Boolean {
            throw new Error('shimmed function Conversation.startVoiceMessage');
        }

        transferLiveSession(identities: VectGIString, transferTopic: string, context: Binary): Boolean {
            throw new Error('shimmed function Conversation.transferLiveSession');
        }

        canTransferLiveSession(identity: string): Boolean {
            throw new Error('shimmed function Conversation.canTransferLiveSession');
        }

        sendDTMF(dtmf: number, lengthInMS: number): Boolean {
            throw new Error('shimmed function Conversation.sendDTMF');
        }

        stopSendDTMF(): Boolean {
            throw new Error('shimmed function Conversation.stopSendDTMF');
        }

        provideLiveSessionQualityFeedback(questionaryID: string, trackingReason: string, qualityRating: number, problemTokens: string, cdr_id: string): Boolean {
            throw new Error('shimmed function Conversation.provideLiveSessionQualityFeedback');
        }

        setMyTextStatusTo(status: number): Boolean {
            throw new Error('shimmed function Conversation.setMyTextStatusTo');
        }

        postText(text: string, isXML: Boolean): number {
            throw new Error('shimmed function Conversation.postText');
        }

        postContacts(contacts: VectUnsignedInt, altText: string): Boolean {
            throw new Error('shimmed function Conversation.postContacts');
        }

        postFiles(paths: VectGIFilename, body: string, error_file: Filename): ConversationPostFilesResult {
            throw new Error('shimmed function Conversation.postFiles');
        }

        postVoiceMessage(voicemailObjectID: number, body: string): Boolean {
            throw new Error('shimmed function Conversation.postVoiceMessage');
        }

        postSMS(smsObjectID: number, body: string): Boolean {
            throw new Error('shimmed function Conversation.postSMS');
        }

        postVideoMessage(videoMessageObjectID: number, legacyMessage: string): Boolean {
            throw new Error('shimmed function Conversation.postVideoMessage');
        }

        postMediaDocument(documentObjectID: number, legacyMessage: string): Boolean {
            throw new Error('shimmed function Conversation.postMediaDocument');
        }

        postExternalMessage(type: number, bodyXml: string): number {
            throw new Error('shimmed function Conversation.postExternalMessage');
        }

        postLocationMessage(latitude: number, longitude: number, altitude: number, horizontalAccuracy: number, verticalAccuracy: number, speed: number, course: number, timeStamp: number, address: string, pointOfInterest: string, legacyMessage: string): number {
            throw new Error('shimmed function Conversation.postLocationMessage');
        }

        postSystemMessage(text: string, isXML: Boolean): number {
            throw new Error('shimmed function Conversation.postSystemMessage');
        }

        getJoinBlob(): string {
            throw new Error('shimmed function Conversation.getJoinBlob');
        }

        getNonseWord(): string {
            throw new Error('shimmed function Conversation.getNonseWord');
        }

        setDeferredSetup(deferred: Boolean): Boolean {
            throw new Error('shimmed function Conversation.setDeferredSetup');
        }

        join_(): Boolean {
            throw new Error('shimmed function Conversation.join_');
        }

        enterPassword(password: string): Boolean {
            throw new Error('shimmed function Conversation.enterPassword');
        }

        setPassword(password: string, hint: string): Boolean {
            throw new Error('shimmed function Conversation.setPassword');
        }

        retireFrom(): Boolean {
            throw new Error('shimmed function Conversation.retireFrom');
        }

        delete(): Boolean {
            throw new Error('shimmed function Conversation.delete');
        }

        renameTo(name: string): Boolean {
            throw new Error('shimmed function Conversation.renameTo');
        }

        setBookmark(bookmark: Boolean): Boolean {
            throw new Error('shimmed function Conversation.setBookmark');
        }

        setAlertString(alertString: string): Boolean {
            throw new Error('shimmed function Conversation.setAlertString');
        }

        removeFromInbox(): Boolean {
            throw new Error('shimmed function Conversation.removeFromInbox');
        }

        addToInbox(timestamp: number): Boolean {
            throw new Error('shimmed function Conversation.addToInbox');
        }

        setConsumedHorizon(timestamp: number, also_unconsume: Boolean): Boolean {
            throw new Error('shimmed function Conversation.setConsumedHorizon');
        }

        markUnread(): Boolean {
            throw new Error('shimmed function Conversation.markUnread');
        }

        isMemberOf(groupObjectID: number): Boolean {
            throw new Error('shimmed function Conversation.isMemberOf');
        }

        pinFirst(): Boolean {
            throw new Error('shimmed function Conversation.pinFirst');
        }

        pinAfter(previousConversationObjectID: number): Boolean {
            throw new Error('shimmed function Conversation.pinAfter');
        }

        unPin(): Boolean {
            throw new Error('shimmed function Conversation.unPin');
        }

        getParticipants(participants: VectUnsignedInt, filter: number): void {
            console.warn('shimmed function Conversation.getParticipants');
        }

        getLastMessages(contextMessages: VectUnsignedInt, unconsumedMessages: VectUnsignedInt, requireTimestamp: number): void {
            console.warn('shimmed function Conversation.getLastMessages');
        }

        loadMessages(timestampExcl: number, count: number, returnNewer: Boolean, messages: VectUnsignedInt): void {
            console.warn('shimmed function Conversation.loadMessages');
        }

        findMessage(text: string, fromTimestampUp: number): number {
            throw new Error('shimmed function Conversation.findMessage');
        }

        attachVideoToLiveSession(sendVideoObjectID: number): Boolean {
            throw new Error('shimmed function Conversation.attachVideoToLiveSession');
        }

        getCapabilities(): VectBool {
            throw new Error('shimmed function Conversation.getCapabilities');
        }

        checkPremiumVideoSubscription(context: number): number {
            throw new Error('shimmed function Conversation.checkPremiumVideoSubscription');
        }

        getChatNameFromThreadId(): string {
            throw new Error('shimmed function Conversation.getChatNameFromThreadId');
        }

        getThreadIdFromChatName(): string {
            throw new Error('shimmed function Conversation.getThreadIdFromChatName');
        }

        getIdentity(): string {
            throw new Error('shimmed function Conversation.getIdentity');
        }

        getDisplayNameHtml(): string {
            throw new Error('shimmed function Conversation.getDisplayNameHtml');
        }

        getTopicHtml(): string {
            throw new Error('shimmed function Conversation.getTopicHtml');
        }

        subscribePropChanges(propKeys: number[]): void {
            console.warn('shimmed function Conversation.subscribePropChanges');
        }

        discard(): void {
            console.warn('shimmed function Conversation.discard');
        }

        close(): void {
            console.warn('shimmed function Conversation.close');
        }

        static typetoString(val: number): string {
            throw new Error('shimmed function Conversation.typetoString');
        }

        static my_STATUSToString(val: number): string {
            throw new Error('shimmed function Conversation.my_STATUSToString');
        }

        static local_LIVESTATUSToString(val: number): string {
            throw new Error('shimmed function Conversation.local_LIVESTATUSToString');
        }

        static allowed_ACTIVITYToString(val: number): string {
            throw new Error('shimmed function Conversation.allowed_ACTIVITYToString');
        }

        static premium_VIDEO_STATUSToString(val: number): string {
            throw new Error('shimmed function Conversation.premium_VIDEO_STATUSToString');
        }

        static live_SESSION_EVENTToString(val: number): string {
            throw new Error('shimmed function Conversation.live_SESSION_EVENTToString');
        }

        static picture_FORMATToString(val: number): string {
            throw new Error('shimmed function Conversation.picture_FORMATToString');
        }

        static participantfiltertoString(val: number): string {
            throw new Error('shimmed function Conversation.participantfiltertoString');
        }

        static list_TYPEToString(val: number): string {
            throw new Error('shimmed function Conversation.list_TYPEToString');
        }

        static capabilitytoString(val: number): string {
            throw new Error('shimmed function Conversation.capabilitytoString');
        }

        static subscription_CHECK_CONTEXTToString(val: number): string {
            throw new Error('shimmed function Conversation.subscription_CHECK_CONTEXTToString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`Conversation::addEventListener: ${name}`);
            switch (name) {
                case "propertieschanged": // PropertiesChangedEventType
                case "participantlistchange": // ParticipantListChangeEventType
                case "propertychange": // OnPropertyChangeType
                case "livesessionevent": // OnLiveSessionEventType
                case "livesessionmoved": // OnLiveSessionMovedType
                case "premiumvideosubscriptioncheckresult": // OnPremiumVideoSubscriptionCheckResultType
                case "capabilitieschanged": // OnCapabilitiesChangedType
                case "spawnedconference": // OnSpawnConferenceType
                case "incomingmessage": // ConversationOnMessageType
                    break;
            }

        }
    }
    export class ConversationMatch implements __IConversationMatchPublicNonVirtuals {
        // constructor(c: Conversation, title: string, description: string, index: number, property: number);
        constructor(c: Conversation, title: string, description: string, index: number, property: number) {}

        propertyRank: number;
        property: number;
        index: number;
        description: string;
        title: string;
        conv: Conversation;

        asString(): string {
            throw new Error('shimmed function ConversationMatch.asString');
        }

        compareTo(otherMatch: ConversationMatch): Boolean {
            throw new Error('shimmed function ConversationMatch.compareTo');
        }

    }
    export type ConversationMatchEvent = (serial: number, match: ConversationMatch) => void;
    export type ConversationOnMessageType = (__unnamed001: number) => void;
    export class ConversationPostFilesResult implements __IConversationPostFilesResultPublicNonVirtuals {
        error_code: number;
        messageObjectID: number;

    }
    export class ConversationSearch implements Windows.Foundation.IClosable, __IConversationSearchPublicNonVirtuals, __IConversationSearchProtectedNonVirtuals {
        // constructor();
        start(term: string): number {
            throw new Error('shimmed function ConversationSearch.start');
        }

        cancel(): void {
            console.warn('shimmed function ConversationSearch.cancel');
        }

        close(): void {
            console.warn('shimmed function ConversationSearch.close');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`ConversationSearch::addEventListener: ${name}`);
            switch (name) {
                case "done": // ConversationSearchEvent
                case "match": // ConversationMatchEvent
                    break;
            }

        }
    }
    export type ConversationSearchEvent = (serial: number, results: ConversationMatch[]) => void;
    export type CountChangedType = (count: number, conversationIdentity: string) => void;
    export class EXTPROPKEY implements __IEXTPROPKEYPublicNonVirtuals {
        // constructor();
        static ft_LOCALSTATUS: number = 1001;
        static ft_LOCALFILENAME: number = 1000;

    }
    export class Filename implements Windows.Foundation.IClosable, __IFilenamePublicNonVirtuals {
        // constructor(fromString: string);
        // constructor();
        constructor(fromString: string) {}

        setFromString(fromString: string): Boolean {
            throw new Error('shimmed function Filename.setFromString');
        }

        close(): void {
            console.warn('shimmed function Filename.close');
        }

    }
    export class IMCache implements __IIMCachePublicNonVirtuals {
        static name: string = 'imcache';

        static save(cache: string): void {
            console.warn('shimmed function IMCache.save');
        }

        static load(): string {
            throw new Error('shimmed function IMCache.load');
        }

    }
    export class MediaDocument implements Windows.Foundation.IClosable, __IMediaDocumentPublicNonVirtuals, __IMediaDocumentProtectedNonVirtuals {
        // constructor();
        static network_ERROR_INTERNAL_ERROR: number = 5;
        static network_ERROR_PROTOCOL_ERROR: number = 4;
        static network_ERROR_CONNECTION_TIMEOUT: number = 3;
        static network_ERROR_SERVER_NOT_AVAILABLE: number = 2;
        static network_ERROR_SSL_ERROR: number = 1;
        static network_ERROR_HOST_NAME_NOT_RESOLVED: number = 0;
        static media_GET_POLICY_CANCEL_DOWNLOAD: number = 5;
        static media_GET_POLICY_DOWNLOAD_ONLY: number = 4;
        static media_GET_POLICY_LINK_ONLY: number = 3;
        static media_GET_POLICY_CACHE_THEN_DOWNLOAD: number = 2;
        static media_GET_POLICY_CACHE_THEN_LINK: number = 1;
        static media_GET_POLICY_CACHE_ONLY: number = 0;
        static media_STATUS_MEDIA_BAD_CONTENT: number = 5;
        static media_STATUS_MEDIA_PROCESSING: number = 4;
        static media_STATUS_MEDIA_NOT_AVAILABLE: number = 3;
        static media_STATUS_MEDIA_AVAILABLE_ONLINE: number = 2;
        static media_STATUS_MEDIA_LOADED: number = 1;
        static media_STATUS_MEDIA_LOADING: number = 0;
        static upload_STATUS_UPLOAD_FAILED: number = 4;
        static upload_STATUS_UPLOAD_COMPLETED: number = 3;
        static upload_STATUS_UPLOAD_IN_PROGRESS: number = 2;
        static upload_STATUS_UPLOAD_QUEUED: number = 1;
        static upload_STATUS_UPLOAD_NOT_STARTED: number = 0;
        static document_TYPE_MEDIA_PHOTO_WITH_AUDIO: number = 4;
        static document_TYPE_MEDIA_AUDIO: number = 3;
        static document_TYPE_MEDIA_PHOTO: number = 2;
        static document_TYPE_MEDIA_VIDEO: number = 1;
        static document_TYPE_MEDIA_UNKNOWN: number = 0;
        static storage_POLICY_STORAGE_POLICY_TAKE_OWNERSHIP: number = 3;
        static storage_POLICY_STORAGE_POLICY_WEAK_LINK: number = 2;
        static storage_POLICY_STORAGE_POLICY_MOVE_TO_CACHE: number = 1;
        static storage_POLICY_STORAGE_POLICY_COPY_TO_CACHE: number = 0;
        static status_FAILED: number = 6;
        static status_EXPIRED: number = 5;
        static status_DELETED: number = 4;
        static status_ACCESS_DENIED: number = 3;
        static status_AVAILABLE: number = 2;
        static status_NOT_AVAILABLE: number = 1;
        static status_NOT_CREATED: number = 0;

        getObjectID(): number {
            throw new Error('shimmed function MediaDocument.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function MediaDocument.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function MediaDocument.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function MediaDocument.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function MediaDocument.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function MediaDocument.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function MediaDocument.setExtendedIntProperty');
        }

        sync(): Boolean {
            throw new Error('shimmed function MediaDocument.sync');
        }

        getMediaLink(profile: string, policy: number): MediaDocumentGetMediaLinkResult {
            throw new Error('shimmed function MediaDocument.getMediaLink');
        }

        setMediaByContentId(contentId: string, path: string, policy: number): Boolean {
            throw new Error('shimmed function MediaDocument.setMediaByContentId');
        }

        setMediaByProfileId(profileId: string, path: string, policy: number): Boolean {
            throw new Error('shimmed function MediaDocument.setMediaByProfileId');
        }

        linkProfileToContentId(profileId: string, contentId: string): Boolean {
            throw new Error('shimmed function MediaDocument.linkProfileToContentId');
        }

        linkProfiles(profileFrom: string, profileTo: string): Boolean {
            throw new Error('shimmed function MediaDocument.linkProfiles');
        }

        upload(contentId: string): Boolean {
            throw new Error('shimmed function MediaDocument.upload');
        }

        getUploadStatus(contentId: string): number {
            throw new Error('shimmed function MediaDocument.getUploadStatus');
        }

        discard(): void {
            console.warn('shimmed function MediaDocument.discard');
        }

        close(): void {
            console.warn('shimmed function MediaDocument.close');
        }

        static statustoString(val: number): string {
            throw new Error('shimmed function MediaDocument.statustoString');
        }

        static storage_POLICYToString(val: number): string {
            throw new Error('shimmed function MediaDocument.storage_POLICYToString');
        }

        static document_TYPEToString(val: number): string {
            throw new Error('shimmed function MediaDocument.document_TYPEToString');
        }

        static upload_STATUSToString(val: number): string {
            throw new Error('shimmed function MediaDocument.upload_STATUSToString');
        }

        static media_STATUSToString(val: number): string {
            throw new Error('shimmed function MediaDocument.media_STATUSToString');
        }

        static media_GET_POLICYToString(val: number): string {
            throw new Error('shimmed function MediaDocument.media_GET_POLICYToString');
        }

        static network_ERRORToString(val: number): string {
            throw new Error('shimmed function MediaDocument.network_ERRORToString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`MediaDocument::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                case "downloaderror": // OnDownloadErrorType
                case "uploadstatuschanged": // OnUploadStatusChangedType
                case "uploadprogress": // OnUploadProgressType
                case "uploaderror": // OnUploadErrorType
                case "medialinkprogress": // OnMediaLinkProgressType
                case "medialinkstatuschange": // OnMediaLinkStatusChangeType
                    break;
            }

        }
    }
    export class MediaDocumentGetMediaLinkResult implements __IMediaDocumentGetMediaLinkResultPublicNonVirtuals {
        path: string;
        success: number;

    }
    export class Message implements Windows.Foundation.IClosable, __IMessagePublicNonVirtuals, __IMessageProtectedNonVirtuals {
        // constructor();
        static permissions_PERM_DELETABLE: number = 2;
        static permissions_PERM_EDITABLE: number = 1;
        static permissions_PERM_NONE: number = 0;
        static leavereason_INTERNAL_ERROR: number = 8;
        static leavereason_CHAT_FULL: number = 7;
        static leavereason_UNSUBSCRIBE: number = 6;
        static leavereason_DECLINE_ADD: number = 5;
        static leavereason_ADDER_MUST_BE_AUTHORIZED: number = 4;
        static leavereason_ADDER_MUST_BE_FRIEND: number = 3;
        static leavereason_USER_INCAPABLE: number = 2;
        static leavereason_USER_NOT_FOUND: number = 1;
        static set_OPTION_KEY_SET_OPTION_ADMIN_ONLY_ACTIVITIES: number = 3637;
        static set_OPTION_KEY_SET_OPTION_HISTORY_LIMIT_IN_DAYS: number = 3633;
        static set_OPTION_KEY_SET_OPTION_DISCLOSE_HISTORY: number = 3629;
        static set_OPTION_KEY_SET_OPTION_ENTRY_LEVEL_RANK: number = 3625;
        static set_OPTION_KEY_SET_OPTION_JOINING_ENABLED: number = 3689;
        static set_METADATA_KEY_SET_META_PICTURE: number = 3658;
        static set_METADATA_KEY_SET_META_GUIDELINES: number = 3652;
        static set_METADATA_KEY_SET_META_TOPIC: number = 3644;
        static set_METADATA_KEY_SET_META_NAME: number = 3640;
        static consumption_STATUS_UNCONSUMED_ELEVATED: number = 3;
        static consumption_STATUS_UNCONSUMED_NORMAL: number = 2;
        static consumption_STATUS_UNCONSUMED_SUPPRESSED: number = 1;
        static consumption_STATUS_CONSUMED: number = 0;
        static sending_STATUS_FAILED_TO_SEND: number = 3;
        static sending_STATUS_SENT: number = 2;
        static sending_STATUS_SENDING: number = 1;
        static sending_STATUS_SENDING_STATUS_UNKNOWN: number = 0;
        static type_RECEIVED_DELIVERY_FAILURE_NOTIFICATION: number = 80;
        static type_POSTED_DTMF: number = 62;
        static type_UNBLOCKED: number = 54;
        static type_REVOKED_AUTH: number = 52;
        static type_EJECTED_FROM_LIVESESSION: number = 38;
        static type_LEFT_LIVESESSION: number = 37;
        static type_HAD_VIDEO_ERROR: number = 36;
        static type_HAD_VOICE_ERROR: number = 35;
        static type_PAUSED_LIVESESSION: number = 34;
        static type_JOINED_LIVESESSION: number = 33;
        static type_STOPPED_RINGING: number = 32;
        static type_STARTED_RINGING_OTHERS: number = 31;
        static type_TERMINATED_CONVERSATION: number = 3;
        static type_POSTED_VOICE_AUTORESPONSE: number = 66;
        static type_REQUESTED_RANK: number = 20;
        static type_SET_OPTION: number = 1;
        static type_MESSAGE_EXPANSION_END: number = 250;
        static type_POSTED_SKYPECHAT_MESSAGE: number = 203;
        static type_POSTED_LOCATION: number = 202;
        static type_POSTED_MEDIA_MESSAGE: number = 201;
        static type_MESSAGE_EXPANSION_START: number = 200;
        static type_HAS_BIRTHDAY: number = 110;
        static type_LEGACY_MESSAGE: number = 100;
        static type_MISSING_MESSAGES: number = 90;
        static type_POSTED_VIDEO_MESSAGE: number = 70;
        static type_POSTED_INVOICE: number = 69;
        static type_POSTED_FILES: number = 68;
        static type_POSTED_VOICE_MESSAGE: number = 67;
        static type_POSTED_ALERT: number = 65;
        static type_POSTED_SMS: number = 64;
        static type_POSTED_CONTACTS: number = 63;
        static type_POSTED_EMOTE: number = 60;
        static type_POSTED_TEXT: number = 61;
        static type_BLOCKED: number = 53;
        static type_GRANTED_AUTH: number = 51;
        static type_REQUESTED_AUTH: number = 50;
        static type_ENDED_LIVESESSION: number = 39;
        static type_STARTED_LIVESESSION: number = 30;
        static type_SET_RANK: number = 21;
        static type_RETIRED: number = 13;
        static type_RETIRED_OTHERS: number = 12;
        static type_ADDED_APPLICANTS: number = 11;
        static type_ADDED_CONSUMERS: number = 10;
        static type_ADDED_LEGACY_CONSUMERS: number = 9;
        static type_LEGACY_MEMBER_UPGRADED: number = 8;
        static type_SPAWNED_CONFERENCE: number = 4;
        static type_SET_METADATA: number = 2;

        getObjectID(): number {
            throw new Error('shimmed function Message.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function Message.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function Message.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function Message.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function Message.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function Message.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function Message.setExtendedIntProperty');
        }

        canEdit(): Boolean {
            throw new Error('shimmed function Message.canEdit');
        }

        getPermissions(): number {
            throw new Error('shimmed function Message.getPermissions');
        }

        edit(newText: string, isXML: Boolean, undo: Boolean, legacyPrefix: string): Boolean {
            throw new Error('shimmed function Message.edit');
        }

        getContacts(contacts: VectUnsignedInt): Boolean {
            throw new Error('shimmed function Message.getContacts');
        }

        getTransfers(transfers: VectUnsignedInt): Boolean {
            throw new Error('shimmed function Message.getTransfers');
        }

        getVoiceMessage(voicemail: Voicemail): Boolean {
            throw new Error('shimmed function Message.getVoiceMessage');
        }

        getSMS(sms: Sms): Boolean {
            throw new Error('shimmed function Message.getSMS');
        }

        deleteLocally(): Boolean {
            throw new Error('shimmed function Message.deleteLocally');
        }

        getOtherLiveMessage(): number {
            throw new Error('shimmed function Message.getOtherLiveMessage');
        }

        getVideoMessage(videoMessage: VideoMessage): Boolean {
            throw new Error('shimmed function Message.getVideoMessage');
        }

        getLocation(): MessageGetLocationResult {
            throw new Error('shimmed function Message.getLocation');
        }

        getMediaDocument(document: MediaDocument): Boolean {
            throw new Error('shimmed function Message.getMediaDocument');
        }

        discard(): void {
            console.warn('shimmed function Message.discard');
        }

        getBodyHtml(): string {
            throw new Error('shimmed function Message.getBodyHtml');
        }

        getBodyText(): string {
            throw new Error('shimmed function Message.getBodyText');
        }

        getAuthorDisplayNameHtml(): string {
            throw new Error('shimmed function Message.getAuthorDisplayNameHtml');
        }

        getVideoMessageAsync(): Windows.Foundation.IAsyncOperation<VideoMessage> {
            throw new Error('shimmed function Message.getVideoMessageAsync');
        }

        close(): void {
            console.warn('shimmed function Message.close');
        }

        static typetoString(val: number): string {
            throw new Error('shimmed function Message.typetoString');
        }

        static sending_STATUSToString(val: number): string {
            throw new Error('shimmed function Message.sending_STATUSToString');
        }

        static consumption_STATUSToString(val: number): string {
            throw new Error('shimmed function Message.consumption_STATUSToString');
        }

        static set_METADATA_KEYToString(val: number): string {
            throw new Error('shimmed function Message.set_METADATA_KEYToString');
        }

        static set_OPTION_KEYToString(val: number): string {
            throw new Error('shimmed function Message.set_OPTION_KEYToString');
        }

        static leavereasontoString(val: number): string {
            throw new Error('shimmed function Message.leavereasontoString');
        }

        static permissionstoString(val: number): string {
            throw new Error('shimmed function Message.permissionstoString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`Message::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                    break;
            }

        }
    }
    export class MessageGetLocationResult implements __IMessageGetLocationResultPublicNonVirtuals {
        pointOfInterest: string;
        address: string;
        timeStamp: number;
        course: number;
        speed: number;
        verticalAccuracy: number;
        horizontalAccuracy: number;
        altitude: number;
        longitude: number;
        latitude: number;
        success: Boolean;

    }
    export class Metatag implements __IMetatagPublicNonVirtuals {
        // constructor();
        static type_BINARY: number = 2;
        static type_STRING: number = 1;
        static type_INTEGER: number = 0;

    }
    export type NotifyEventType = () => void;
    export class ObjectInterface implements __IObjectInterfacePublicNonVirtuals {
        // constructor();
    }
    export type OnAccessConnectedType = () => void;
    export type OnAccessConnectionFailureType = (__unnamed001: number) => void;
    export type OnAccessDetectFailureType = () => void;
    export type OnAccessDetectingType = (__unnamed001: number) => void;
    export type OnAccessDisconnectedType = () => void;
    export type OnAccessEventType = (__unnamed001: number, __unnamed002: number) => void;
    export type OnAccountAvatarResultType = (__unnamed001: number, __unnamed002: string, __unnamed003: Binary) => void;
    export type OnAccountPartnerLinkResultType = (__unnamed001: number, __unnamed002: string) => void;
    export type OnApp2AppDatagramType = (__unnamed001: string, __unnamed002: string, __unnamed003: Binary) => void;
    export type OnApp2AppStreamListChangeType = (__unnamed001: string, __unnamed002: number, __unnamed003: VectGIString, __unnamed004: VectUnsignedInt) => void;
    export type OnAuthTokenRequestType = (__unnamed001: string, __unnamed002: VectGIString) => void;
    export type OnAuthTokenResultType = (__unnamed001: Boolean, __unnamed002: number, __unnamed003: string) => void;
    export type OnAuthTokenResultWithTimeoutType = (__unnamed001: Boolean, __unnamed002: number, __unnamed003: string, __unnamed004: number, __unnamed005: number) => void;
    export type OnAvailableDeviceListChangeType = () => void;
    export type OnAvailableVideoDeviceListChangeType = () => void;
    export type OnAvatarURIChangeType = (identity: string, uri: string) => void;
    export type OnCallerIDOptionsChangeType = (__unnamed001: number, __unnamed002: number) => void;
    export type OnCapabilitiesChangedType = (__unnamed001: VectBool) => void;
    export type OnCaptureRequestCompletedType = (__unnamed001: number, __unnamed002: Boolean, __unnamed003: Binary, __unnamed004: number, __unnamed005: number) => void;
    export type OnChangeConversationType = (__unnamed001: number) => void;
    export type OnChangeType = (__unnamed001: number) => void;
    export type OnCheckUpgradeResultType = (__unnamed001: Boolean, __unnamed002: number) => void;
    export type OnContactGoneOfflineType = (__unnamed001: number) => void;
    export type OnContactOnlineAppearanceType = (__unnamed001: number) => void;
    export type OnContentItemChangeType = (__unnamed001: number) => void;
    export type OnContentListingResultType = (__unnamed001: number, __unnamed002: number, __unnamed003: Binary, __unnamed004: number) => void;
    export type OnConversationListChangeType = (__unnamed001: number, __unnamed002: number, __unnamed003: Boolean) => void;
    export type OnDownloadErrorType = (__unnamed001: string, __unnamed002: number, __unnamed003: Boolean) => void;
    export type OnEndpointsChangedType = () => void;
    export type OnExternalLoginRequestType = (__unnamed001: Binary) => void;
    export type OnFileTransferInitiatedType = (__unnamed001: number, __unnamed002: number, __unnamed003: number) => void;
    export type OnH264ActivatedType = () => void;
    export type OnHttpResponseType = (__unnamed001: number, __unnamed002: number, __unnamed003: number, __unnamed004: Binary, __unnamed005: number) => void;
    export type OnHttpStreamResponseType = (__unnamed001: number, __unnamed002: Binary, __unnamed003: number) => void;
    export type OnIncomingAlertType = (__unnamed001: number) => void;
    export type OnIncomingDTMFType = (__unnamed001: number) => void;
    export type OnIncomingPriceQuoteType = (__unnamed001: number) => void;
    export type OnInitialEasSyncDoneType = (__unnamed001: number) => void;
    export type OnLastFrameCaptureType = () => void;
    export type OnLibPropChangeType = (__unnamed001: number, __unnamed002: number) => void;
    export type OnLiveSessionEventType = (__unnamed001: number) => void;
    export type OnLiveSessionMovedType = (__unnamed001: number) => void;
    export type OnLiveSessionVideosChangedType = () => void;
    export type OnMediaLinkProgressType = (__unnamed001: string, __unnamed002: number, __unnamed003: number, __unnamed004: number) => void;
    export type OnMediaLinkStatusChangeType = (__unnamed001: number, __unnamed002: string, __unnamed003: string) => void;
    export type OnNewCustomContactGroupType = (__unnamed001: number) => void;
    export type OnNewResultType = (__unnamed001: number, __unnamed002: number) => void;
    export type OnNrgLevelsChangeType = () => void;
    export type OnObjectDeleteType = (objectType: number, objectID: number) => void;
    export type OnObjectPropertyChangeType = (objectID: number, propKey: number) => void;
    export type OnOperationModeChangedType = (__unnamed001: number) => void;
    export type OnParticipantListChangeType = () => void;
    export type OnPartnerLinkInfoResultType = (__unnamed001: number, __unnamed002: string, __unnamed003: string, __unnamed004: string, __unnamed005: string) => void;
    export type OnPartnerQueryResultType = (__unnamed001: number, __unnamed002: number, __unnamed003: string) => void;
    export type OnPremiumVideoSubscriptionCheckResultType = (__unnamed001: number, __unnamed002: number) => void;
    export type OnPromotedSCDContactsFoundType = (__unnamed001: number, __unnamed002: VectUnsignedInt) => void;
    export type OnPropertyChangeType = (propKey: number) => void;
    export type OnPublicAPINotificationType = (__unnamed001: number, __unnamed002: string) => void;
    export type OnPushHandlingCompleteType = (__unnamed001: number, __unnamed002: number) => void;
    export type OnQualityTestResultType = (__unnamed001: number, __unnamed002: number, __unnamed003: string, __unnamed004: string, __unnamed005: string) => void;
    export type OnRegisterContextsCompleteType = (__unnamed001: number, __unnamed002: number) => void;
    export type OnSeamlessCapableResultType = (__unnamed001: string, __unnamed002: Boolean) => void;
    export type OnSearchMessagesResultType = (__unnamed001: number, __unnamed002: VectUnsignedInt, __unnamed003: VectGIString) => void;
    export type OnServerTimeAvailableType = () => void;
    export type OnSpawnConferenceType = (__unnamed001: number) => void;
    export type OnStatsReportedType = (__unnamed001: number, __unnamed002: Binary) => void;
    export type OnSuggestedAccountsResultType = (__unnamed001: number, __unnamed002: VectGIString, __unnamed003: VectGIString, __unnamed004: VectGIString) => void;
    export type OnThumbnailPathType = (__unnamed001: string) => void;
    export type OnUnifiedMastersChangedType = (__unnamed001: number) => void;
    export type OnUnifiedServantsChangedType = (__unnamed001: number) => void;
    export type OnUpgradeNoticeType = () => void;
    export type OnUploadErrorType = (__unnamed001: string, __unnamed002: number, __unnamed003: Boolean) => void;
    export type OnUploadProgressType = (__unnamed001: string, __unnamed002: number, __unnamed003: number) => void;
    export type OnUploadStatusChangedType = (__unnamed001: string, __unnamed002: number) => void;
    export type OnVideoAspectRatioChanged = (videoObjectID: number) => void;
    export type OnVideoMessagingEntitlementChangedType = (__unnamed001: Boolean, __unnamed002: string, __unnamed003: VectGIString, __unnamed004: VectUnsignedInt) => void;
    export class Participant implements Windows.Foundation.IClosable, __IParticipantPublicNonVirtuals, __IParticipantProtectedNonVirtuals {
        // constructor();
        participantContact: Contact;
        static dtmf_DTMF_POUND: number = 11;
        static dtmf_DTMF_STAR: number = 10;
        static dtmf_DTMF_9: number = 9;
        static dtmf_DTMF_8: number = 8;
        static dtmf_DTMF_7: number = 7;
        static dtmf_DTMF_6: number = 6;
        static dtmf_DTMF_5: number = 5;
        static dtmf_DTMF_4: number = 4;
        static dtmf_DTMF_3: number = 3;
        static dtmf_DTMF_2: number = 2;
        static dtmf_DTMF_1: number = 1;
        static dtmf_DTMF_0: number = 0;
        static voice_STATUS_PLAYING_VOICE_AUTORESPONSE: number = 10;
        static voice_STATUS_VOICE_STOPPED: number = 9;
        static voice_STATUS_VOICE_ON_HOLD: number = 8;
        static voice_STATUS_SPEAKING: number = 7;
        static voice_STATUS_LISTENING: number = 6;
        static voice_STATUS_EARLY_MEDIA: number = 5;
        static voice_STATUS_RINGING: number = 4;
        static voice_STATUS_VOICE_CONNECTING: number = 3;
        static voice_STATUS_VOICE_AVAILABLE: number = 2;
        static voice_STATUS_VOICE_NA: number = 1;
        static voice_STATUS_VOICE_UNKNOWN: number = 0;
        static text_STATUS_WRITING_AS_CAT: number = 5;
        static text_STATUS_WRITING_AS_ANGRY: number = 4;
        static text_STATUS_WRITING: number = 3;
        static text_STATUS_READING: number = 2;
        static text_STATUS_TEXT_NA: number = 1;
        static text_STATUS_TEXT_UNKNOWN: number = 0;
        static rank_OUTLAW: number = 8;
        static rank_RETIRED: number = 7;
        static rank_APPLICANT: number = 6;
        static rank_SPECTATOR: number = 5;
        static rank_WRITER: number = 4;
        static rank_SPEAKER: number = 3;
        static rank_ADMIN: number = 2;
        static rank_CREATOR: number = 1;

        getObjectID(): number {
            throw new Error('shimmed function Participant.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function Participant.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function Participant.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function Participant.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function Participant.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function Participant.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function Participant.setExtendedIntProperty');
        }

        canSetRankTo(rank: number): Boolean {
            throw new Error('shimmed function Participant.canSetRankTo');
        }

        setRankTo(rank: number): Boolean {
            throw new Error('shimmed function Participant.setRankTo');
        }

        ring(identityToUse: string, videoCall: Boolean, nrofRedials: number, redialPeriod: number, autoStartVM: Boolean, origin: string, nonseWord: string, callerConversationId: string): Boolean {
            throw new Error('shimmed function Participant.ring');
        }

        ringNodeInfo(identityToUse: string, videoCall: Boolean, nodeInfo: Binary, nonseWord: string): Boolean {
            throw new Error('shimmed function Participant.ringNodeInfo');
        }

        ringIt(videoCall: Boolean): Boolean {
            throw new Error('shimmed function Participant.ringIt');
        }

        setLiveIdentityToUse(identityToUse: string): Boolean {
            throw new Error('shimmed function Participant.setLiveIdentityToUse');
        }

        hangup(): Boolean {
            throw new Error('shimmed function Participant.hangup');
        }

        retire(): Boolean {
            throw new Error('shimmed function Participant.retire');
        }

        setPosition(position: number): Boolean {
            throw new Error('shimmed function Participant.setPosition');
        }

        getLiveSessionVideos(videos: VectUnsignedInt): Boolean {
            throw new Error('shimmed function Participant.getLiveSessionVideos');
        }

        getDisplayNameHtml(): string {
            throw new Error('shimmed function Participant.getDisplayNameHtml');
        }

        discard(): void {
            console.warn('shimmed function Participant.discard');
        }

        close(): void {
            console.warn('shimmed function Participant.close');
        }

        static ranktoString(val: number): string {
            throw new Error('shimmed function Participant.ranktoString');
        }

        static text_STATUSToString(val: number): string {
            throw new Error('shimmed function Participant.text_STATUSToString');
        }

        static voice_STATUSToString(val: number): string {
            throw new Error('shimmed function Participant.voice_STATUSToString');
        }

        static dtmftoString(val: number): string {
            throw new Error('shimmed function Participant.dtmftoString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`Participant::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                case "livesessionvideoschanged": // OnLiveSessionVideosChangedType
                case "incomingdtmf": // OnIncomingDTMFType
                    break;
            }

        }
    }
    export type ParticipantListChangeEventType = () => void;
    export class PriceQuote implements Windows.Foundation.IClosable, __IPriceQuotePublicNonVirtuals, __IPriceQuoteProtectedNonVirtuals {
        // constructor();
        static failurereason_CALL_NOT_IN_PROGRESS: number = 13;
        static failurereason_ACCOUNT_ON_HOLD: number = 12;
        static failurereason_TIMEOUT: number = 11;
        static failurereason_OUT_OF_FUNDS: number = 10;
        static failurereason_SECURITY_CHECK_FAILED: number = 9;
        static failurereason_PAYMENTS_STOPPED: number = 8;
        static failurereason_NOT_SUPPORTED_BY_BUYER: number = 7;
        static failurereason_PRICE_EXCEEDS_LIMIT: number = 6;
        static failurereason_SIGNUP_REQUIRED: number = 5;
        static failurereason_GW_AUTHENTICATION_FAILED: number = 4;
        static failurereason_INTERNAL_ERROR: number = 3;
        static failurereason_NETWORK_PROBLEM: number = 2;
        static failurereason_REJECTED_BY_BUYER: number = 1;
        static failurereason_NO_FAILURE: number = 0;
        static status_FINISHED: number = 4;
        static status_INPROGRESS: number = 3;
        static status_ACCEPTED: number = 2;
        static status_PENDING: number = 1;
        static type_CALL_EVENT: number = 2;
        static type_CALL_MINUTE: number = 1;

        getObjectID(): number {
            throw new Error('shimmed function PriceQuote.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function PriceQuote.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function PriceQuote.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function PriceQuote.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function PriceQuote.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function PriceQuote.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function PriceQuote.setExtendedIntProperty');
        }

        getReferredObjectID(): number {
            throw new Error('shimmed function PriceQuote.getReferredObjectID');
        }

        accept(): Boolean {
            throw new Error('shimmed function PriceQuote.accept');
        }

        reject(): Boolean {
            throw new Error('shimmed function PriceQuote.reject');
        }

        discard(): void {
            console.warn('shimmed function PriceQuote.discard');
        }

        close(): void {
            console.warn('shimmed function PriceQuote.close');
        }

        static typetoString(val: number): string {
            throw new Error('shimmed function PriceQuote.typetoString');
        }

        static statustoString(val: number): string {
            throw new Error('shimmed function PriceQuote.statustoString');
        }

        static failurereasontoString(val: number): string {
            throw new Error('shimmed function PriceQuote.failurereasontoString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`PriceQuote::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                    break;
            }

        }
    }
    export type PropertiesChangedEventType = (props: number[]) => void;
    export class PROPKEY implements __IPROPKEYPublicNonVirtuals {
        // constructor();
        static mediadocument_URI: number = 5208;
        static mediadocument_DOC_TYPE: number = 5205;
        static mediadocument_STATUS: number = 5201;
        static videomessage_TYPE: number = 4864;
        static videomessage_CREATION_TIMESTAMP: number = 4841;
        static videomessage_AUTHOR: number = 4836;
        static videomessage_DESCRIPTION: number = 4832;
        static videomessage_TITLE: number = 4828;
        static videomessage_PROGRESS: number = 4825;
        static videomessage_PUBLIC_LINK: number = 4820;
        static videomessage_LOCAL_PATH: number = 4816;
        static videomessage_VOD_PATH: number = 4812;
        static videomessage_VOD_STATUS: number = 4805;
        static videomessage_STATUS: number = 4801;
        static accesssession_ACCOUNT_ID: number = 4070;
        static accesssession_DNS_SERVER: number = 4064;
        static accesssession_HOTSPOT_RATING: number = 4061;
        static accesssession_CONNECTION_PROGRESS: number = 4057;
        static accesssession_PROMO_ID: number = 4053;
        static accesssession_SESSION_FLAGS: number = 4049;
        static accesssession_HOTSPOT_TYPE: number = 4045;
        static accesssession_PARTNER_ID: number = 4041;
        static accesssession_MINUTES_REMAINING: number = 4037;
        static accesssession_SESSION_DURATION: number = 4033;
        static accesssession_SESSION_TIMESTAMP: number = 4029;
        static accesssession_PRICE_CURRENCY: number = 4024;
        static accesssession_PRICE_PRECISION: number = 4021;
        static accesssession_PRICE_PER_MINUTE: number = 4017;
        static accesssession_AP_MAC: number = 4014;
        static accesssession_AP_SSID: number = 4008;
        static accesssession_FAILUREREASON: number = 4005;
        static accesssession_STATUS: number = 4001;
        static account_RICH_MOOD_TEXT: number = 820;
        static account_MOOD_TIMESTAMP: number = 733;
        static account_AVATAR_TIMESTAMP: number = 729;
        static account_ALERTSTRING: number = 724;
        static account_ASSIGNED_COMMENT: number = 720;
        static account_AUTHREQUEST_COUNT: number = 165;
        static account_LASTUSED_TIMESTAMP: number = 157;
        static account_ASSIGNED_SPEEDDIAL: number = 152;
        static account_AVATAR_IMAGE: number = 150;
        static account_CAPABILITIES: number = 146;
        static account_LASTONLINE_TIMESTAMP: number = 141;
        static account_AVAILABILITY: number = 137;
        static account_GIVEN_DISPLAYNAME: number = 132;
        static account_IPCOUNTRY: number = 116;
        static account_NROF_AUTHED_BUDDIES: number = 113;
        static account_TIMEZONE: number = 109;
        static account_MOOD_TEXT: number = 104;
        static account_AUTHREQ_TIMESTAMP: number = 101;
        static account_GIVEN_AUTHLEVEL: number = 93;
        static account_REFRESHING: number = 89;
        static account_DISPLAYNAME: number = 84;
        static account_RECEIVED_AUTHREQUEST: number = 80;
        static account_PROFILE_TIMESTAMP: number = 77;
        static account_ABOUT: number = 72;
        static account_HOMEPAGE: number = 68;
        static account_EMAILS: number = 64;
        static account_PHONE_MOBILE: number = 60;
        static account_PHONE_OFFICE: number = 56;
        static account_PHONE_HOME: number = 52;
        static account_CITY: number = 48;
        static account_PROVINCE: number = 44;
        static account_COUNTRY: number = 40;
        static account_LANGUAGES: number = 36;
        static account_GENDER: number = 33;
        static account_BIRTHDAY: number = 29;
        static account_FULLNAME: number = 20;
        static account_PSTNNUMBER: number = 24;
        static account_SKYPENAME: number = 16;
        static account_TYPE: number = 809;
        static account_ACCOUNT_PASSWORD: number = 12848;
        static account_SHORTCIRCUIT_SYNC: number = 3265;
        static account_COBRAND_ID: number = 3261;
        static account_ROAMING_HISTORY_ENABLED: number = 3237;
        static account_LIVEID_MEMBERNAME: number = 3232;
        static account_FEDERATED_PRESENCE_POLICY: number = 3229;
        static account_FLAMINGO_XMPP_STATUS: number = 3225;
        static account_PARTNER_CHANNEL_STATUS: number = 3212;
        static account_NR_OF_OTHER_INSTANCES: number = 3209;
        static account_REGISTRATION_TIMESTAMP: number = 3205;
        static account_SERVICE_PROVIDER_INFO: number = 3200;
        static account_PARTNER_OPTEDOUT: number = 3092;
        static account_AD_POLICY: number = 709;
        static account_AUTHREQUEST_POLICY: number = 705;
        static account_VOICEMAIL_POLICY: number = 677;
        static account_PHONENUMBERS_POLICY: number = 673;
        static account_WEBPRESENCE_POLICY: number = 665;
        static account_TIMEZONE_POLICY: number = 661;
        static account_BUDDYCOUNT_POLICY: number = 657;
        static account_AVATAR_POLICY: number = 653;
        static account_PSTN_CALL_POLICY: number = 649;
        static account_SKYPE_CALL_POLICY: number = 645;
        static account_CHAT_POLICY: number = 641;
        static account_OFFLINE_CALLFORWARD: number = 308;
        static account_CBLSYNCSTATUS: number = 317;
        static account_SUBSCRIPTIONS: number = 3220;
        static account_SKYPEIN_NUMBERS: number = 304;
        static account_SKYPEOUT_PRECISION: number = 3217;
        static account_SKYPEOUT_BALANCE: number = 301;
        static account_SKYPEOUT_BALANCE_CURRENCY: number = 296;
        static account_SUGGESTED_SKYPENAME: number = 288;
        static account_COMMITSTATUS: number = 313;
        static account_LOGOUTREASON: number = 293;
        static account_PWDCHANGESTATUS: number = 285;
        static account_STATUS: number = 281;
        static pricequote_MESSAGE_ID: number = 3177;
        static pricequote_USERTOUCHED_TIMESTAMP: number = 3161;
        static pricequote_FAILUREREASON: number = 3157;
        static pricequote_STATUS: number = 3153;
        static pricequote_AMOUNT_PAID: number = 3149;
        static pricequote_PRICE_CURRENCY: number = 3144;
        static pricequote_PRICE_PRECISION: number = 3141;
        static pricequote_PRICE: number = 3137;
        static pricequote_DESCRIPTION: number = 3132;
        static pricequote_TYPE: number = 3129;
        static pricequote_BUYER: number = 3124;
        static pricequote_PROVIDER: number = 3120;
        static pricequote_CONVO_ID: number = 3173;
        static alert_CHATMSG_GUID: number = 4046;
        static alert_WINDOW_SIZE: number = 3077;
        static alert_MESSAGE_TYPE: number = 3073;
        static alert_MESSAGE_BUTTON_URI: number = 3068;
        static alert_MESSAGE_BUTTON_CAPTION: number = 3064;
        static alert_MESSAGE_FOOTER: number = 3040;
        static alert_MESSAGE_CONTENT: number = 3036;
        static alert_MESSAGE_HEADER_LATER: number = 3060;
        static alert_MESSAGE_HEADER_CANCEL: number = 3056;
        static alert_MESSAGE_HEADER_SUBJECT: number = 3052;
        static alert_MESSAGE_HEADER_TITLE: number = 3048;
        static alert_MESSAGE_HEADER_CAPTION: number = 3044;
        static alert_META_EXPIRY: number = 3033;
        static alert_PARTNER_LOGO: number = 3028;
        static alert_PARTNER_HEADER: number = 3024;
        static alert_PARTNER_HISTORY: number = 3020;
        static alert_PARTNER_EVENT: number = 3016;
        static alert_PARTNER_ID: number = 3013;
        static alert_IS_UNSEEN: number = 3009;
        static alert_PARTNER_NAME: number = 3004;
        static alert_TIMESTAMP: number = 3001;
        static transfer_CONVO_ID: number = 393;
        static transfer_CHATMSG_INDEX: number = 373;
        static transfer_CHATMSG_GUID: number = 370;
        static transfer_BYTESPERSECOND: number = 365;
        static transfer_BYTESTRANSFERRED: number = 360;
        static transfer_FILESIZE: number = 356;
        static transfer_FILENAME: number = 352;
        static transfer_FILEPATH: number = 348;
        static transfer_FINISHTIME: number = 345;
        static transfer_STARTTIME: number = 341;
        static transfer_FAILUREREASON: number = 337;
        static transfer_STATUS: number = 333;
        static transfer_PARTNER_DISPNAME: number = 328;
        static transfer_PARTNER_HANDLE: number = 324;
        static transfer_TYPE: number = 321;
        static sms_CONVO_NAME: number = 4484;
        static sms_REPLY_ID_NUMBER: number = 4480;
        static sms_IDENTITY: number = 3992;
        static sms_CHATMSG_ID: number = 3361;
        static sms_BODY: number = 788;
        static sms_TARGET_STATUSES: number = 786;
        static sms_TARGET_NUMBERS: number = 780;
        static sms_REPLY_TO_NUMBER: number = 796;
        static sms_PRICE_CURRENCY: number = 776;
        static sms_PRICE_PRECISION: number = 197;
        static sms_PRICE: number = 773;
        static sms_TIMESTAMP: number = 793;
        static sms_IS_FAILED_UNSEEN: number = 193;
        static sms_ERROR_CATEGORY: number = 5221;
        static sms_FAILUREREASON: number = 769;
        static sms_STATUS: number = 765;
        static sms_OUTGOING_REPLY_TYPE: number = 4845;
        static sms_TYPE: number = 761;
        static voicemail_CHATMSG_GUID: number = 3326;
        static voicemail_CONVO_ID: number = 3321;
        static voicemail_PLAYBACK_PROGRESS: number = 437;
        static voicemail_ALLOWED_DURATION: number = 433;
        static voicemail_DURATION: number = 429;
        static voicemail_TIMESTAMP: number = 425;
        static voicemail_SUBJECT: number = 420;
        static voicemail_FAILUREREASON: number = 417;
        static voicemail_STATUS: number = 413;
        static voicemail_PARTNER_DISPNAME: number = 408;
        static voicemail_PARTNER_HANDLE: number = 404;
        static voicemail_TYPE: number = 401;
        static video_DEVICE_PATH: number = 4420;
        static video_CONVO_ID: number = 4417;
        static video_SS_TIMESTAMP: number = 4413;
        static video_DURATION_SS: number = 4409;
        static video_HQ_PRESENT: number = 4405;
        static video_TIMESTAMP: number = 4401;
        static video_DURATION_LTVGAD2: number = 557;
        static video_DURATION_VGAD2: number = 553;
        static video_DURATION_HQV: number = 549;
        static video_DURATION_720: number = 545;
        static video_DURATION_1080: number = 541;
        static video_MEDIA_TYPE: number = 537;
        static video_DIMENSIONS: number = 532;
        static video_DEBUGINFO: number = 528;
        static video_ERROR: number = 524;
        static video_STATUS: number = 521;
        static message_CALL_GUID: number = 3860;
        static message_PARTICIPANT_COUNT: number = 3929;
        static message_LEAVEREASON: number = 505;
        static message_REASON: number = 3864;
        static message_IDENTITIES: number = 500;
        static message_BODY_XML: number = 508;
        static message_PARAM_VALUE: number = 3857;
        static message_PARAM_KEY: number = 3853;
        static message_EDIT_TIMESTAMP: number = 893;
        static message_EDITED_BY: number = 888;
        static message_CONSUMPTION_STATUS: number = 3873;
        static message_SENDING_STATUS: number = 3849;
        static message_TYPE: number = 3845;
        static message_TIMESTAMP: number = 485;
        static message_ORIGINALLY_MEANT_FOR: number = 3160;
        static message_GUID: number = 3170;
        static message_AUTHOR_WAS_LIVE: number = 3877;
        static message_AUTHOR_DISPLAYNAME: number = 492;
        static message_AUTHOR: number = 488;
        static message_CONVO_GUID: number = 480;
        static message_CONVO_ID: number = 3841;
        static conversation_ALT_IDENTITY: number = 28;
        static conversation_MCR_CALLER: number = 4488;
        static conversation_PREMIUM_VIDEO_SPONSOR_LIST: number = 4468;
        static conversation_UNCONSUMED_MESSAGES_PRIO: number = 3717;
        static conversation_UNCONSUMED_MESSAGE_COUNT: number = 3693;
        static conversation_PREMIUM_VIDEO_IS_GRACE_PERIOD: number = 4453;
        static conversation_PREMIUM_VIDEO_STATUS: number = 4449;
        static conversation_IS_P2P_MIGRATED: number = 4513;
        static conversation_PICTURE: number = 4508;
        static conversation_META_PICTURE: number = 3658;
        static conversation_META_GUIDELINES: number = 3652;
        static conversation_META_TOPIC: number = 3644;
        static conversation_META_NAME: number = 3640;
        static conversation_PASSWORDHINT: number = 3920;
        static conversation_OPT_ADMIN_ONLY_ACTIVITIES: number = 3637;
        static conversation_OPT_DISCLOSE_HISTORY: number = 3629;
        static conversation_OPT_ENTRY_LEVEL_RANK: number = 3625;
        static conversation_OPT_JOINING_ENABLED: number = 3689;
        static conversation_MY_STATUS: number = 3677;
        static conversation_CREATION_TIMESTAMP: number = 3617;
        static conversation_CREATOR: number = 3612;
        static conversation_PINNED_ORDER: number = 3989;
        static conversation_SPAWNED_FROM_CONVO_ID: number = 3661;
        static conversation_ACTIVE_INVOICE_MESSAGE: number = 3981;
        static conversation_LAST_ACTIVITY_TIMESTAMP: number = 3925;
        static conversation_CONSUMPTION_HORIZON: number = 3917;
        static conversation_ACTIVE_VM_ID: number = 3885;
        static conversation_UNCONSUMED_MESSAGES_VOICE: number = 3881;
        static conversation_UNCONSUMED_ELEVATED_MESSAGES: number = 3909;
        static conversation_UNCONSUMED_NORMAL_MESSAGES: number = 3905;
        static conversation_UNCONSUMED_SUPPRESSED_MESSAGES: number = 3901;
        static conversation_LAST_MESSAGE_ID: number = 3997;
        static conversation_INBOX_MESSAGE_ID: number = 3893;
        static conversation_INBOX_TIMESTAMP: number = 3713;
        static conversation_LOCAL_LIVESTATUS: number = 3709;
        static conversation_DISPLAYNAME: number = 3696;
        static conversation_GIVEN_DISPLAYNAME: number = 3700;
        static conversation_IS_BLOCKED: number = 3761;
        static conversation_IS_BOOKMARKED: number = 3685;
        static conversation_ALERT_STRING: number = 3680;
        static conversation_LIVE_IS_MUTED: number = 3985;
        static conversation_LIVE_START_TIMESTAMP: number = 3897;
        static conversation_LIVE_HOST: number = 3672;
        static conversation_TYPE: number = 3609;
        static conversation_IDENTITY: number = 3888;
        static participant_IS_SEAMLESSLY_UPGRADED_CALL: number = 4861;
        static participant_IS_VIDEO_CODEC_COMPATIBLE: number = 4857;
        static participant_LIVE_IP_ADDRESS: number = 4852;
        static participant_IS_MULTIPARTY_VIDEO_UPDATABLE: number = 4849;
        static participant_LIVESESSION_RECOVERY_IN_PROGRESS: number = 4465;
        static participant_LIVE_IDENTITY_TO_USE: number = 4456;
        static participant_IS_MULTIPARTY_VIDEO_CAPABLE: number = 4445;
        static participant_IS_PREMIUM_VIDEO_SPONSOR: number = 4441;
        static participant_LAST_LEAVEREASON: number = 3821;
        static participant_ADDER: number = 3816;
        static participant_TRANSFERRED_TO: number = 3812;
        static participant_TRANSFERRED_BY: number = 3808;
        static participant_LIVE_COUNTRY: number = 3804;
        static participant_LIVE_TYPE: number = 3801;
        static participant_QUALITY_PROBLEMS: number = 3796;
        static participant_LAST_VOICE_ERROR: number = 3788;
        static participant_DEBUGINFO: number = 3768;
        static participant_SOUND_LEVEL: number = 3765;
        static participant_LIVE_START_TIMESTAMP: number = 3757;
        static participant_LIVE_FWD_IDENTITIES: number = 3792;
        static participant_LIVE_PRICE_FOR_ME: number = 3752;
        static participant_LIVE_IDENTITY: number = 3772;
        static participant_VOICE_STATUS: number = 3741;
        static participant_TEXT_STATUS: number = 3737;
        static participant_REQUESTED_RANK: number = 3733;
        static participant_RANK: number = 3729;
        static participant_IDENTITY: number = 3724;
        static participant_CONVO_ID: number = 3721;
        static contactsearch_CONTACT_SEARCH_STATUS: number = 801;
        static contactsearch_STATUS: number = 13;
        static contact_EXTERNAL_SYSTEM_ID: number = 764;
        static contact_EXTERNAL_ID: number = 760;
        static contact_POPULARITY_ORD: number = 169;
        static contact_ASSIGNED_PHONE3_LABEL: number = 756;
        static contact_ASSIGNED_PHONE3: number = 752;
        static contact_ASSIGNED_PHONE2_LABEL: number = 748;
        static contact_ASSIGNED_PHONE2: number = 744;
        static contact_ASSIGNED_PHONE1_LABEL: number = 740;
        static contact_ASSIGNED_PHONE1: number = 736;
        static contact_AUTHREQUEST_COUNT: number = 165;
        static contact_LASTUSED_TIMESTAMP: number = 157;
        static contact_ALERTSTRING: number = 724;
        static contact_ASSIGNED_COMMENT: number = 720;
        static contact_ASSIGNED_SPEEDDIAL: number = 152;
        static contact_GIVEN_DISPLAYNAME: number = 132;
        static contact_GIVEN_AUTHLEVEL: number = 93;
        static contact_REFRESHING: number = 89;
        static contact_DISPLAYNAME: number = 84;
        static contact_AVAILABILITY: number = 137;
        static contact_LASTONLINE_TIMESTAMP: number = 141;
        static contact_AUTHREQ_TIMESTAMP: number = 101;
        static contact_RECEIVED_AUTHREQUEST: number = 80;
        static contact_MOOD_TIMESTAMP: number = 733;
        static contact_AVATAR_TIMESTAMP: number = 729;
        static contact_IPCOUNTRY: number = 116;
        static contact_NROF_AUTHED_BUDDIES: number = 113;
        static contact_PROFILE_TIMESTAMP: number = 77;
        static contact_CAPABILITIES: number = 146;
        static contact_TIMEZONE: number = 109;
        static contact_RICH_MOOD_TEXT: number = 820;
        static contact_MOOD_TEXT: number = 104;
        static contact_AVATAR_IMAGE: number = 150;
        static contact_ABOUT: number = 72;
        static contact_HOMEPAGE: number = 68;
        static contact_HASHED_EMAILS: number = 768;
        static contact_EMAILS: number = 64;
        static contact_PHONE_MOBILE: number = 60;
        static contact_PHONE_OFFICE: number = 56;
        static contact_PHONE_HOME: number = 52;
        static contact_CITY: number = 48;
        static contact_PROVINCE: number = 44;
        static contact_COUNTRY: number = 40;
        static contact_LANGUAGES: number = 36;
        static contact_GENDER: number = 33;
        static contact_BIRTHDAY: number = 29;
        static contact_FULLNAME: number = 20;
        static contact_PSTNNUMBER: number = 24;
        static contact_SKYPENAME: number = 16;
        static contact_TYPE: number = 809;
        static contactgroup_GIVEN_SORTORDER: number = 685;
        static contactgroup_NROFCONTACTS_ONLINE: number = 613;
        static contactgroup_NROFCONTACTS: number = 609;
        static contactgroup_GIVEN_DISPLAYNAME: number = 604;
        static contactgroup_CUSTOM_GROUP_ID: number = 617;
        static contactgroup_TYPE: number = 621;

        static valueToString(val: number): string {
            throw new Error('shimmed function PROPKEY.valueToString');
        }

    }
    export type RecentsCountChangedType = (count: number) => void;
    export type RecentsQueryItemAddedType = (id: number, pos: number) => void;
    export type RecentsQueryItemMovedType = (id: number, newPos: number, oldPos: number) => void;
    export type RecentsQueryItemRemovedType = (id: number, pos: number) => void;
    export type RecentsQueryResetType = (conversations: number[]) => void;
    export class Search implements __ISearchPublicNonVirtuals {
        // constructor();
    }
    export class Setup implements __ISetupPublicNonVirtuals {
        isDefined(key: string): Boolean {
            throw new Error('shimmed function Setup.isDefined');
        }

        delete(key: string): void {
            console.warn('shimmed function Setup.delete');
        }

        getSubKey(key: string, index: number): string {
            throw new Error('shimmed function Setup.getSubKey');
        }

        getStr(key: string): string {
            throw new Error('shimmed function Setup.getStr');
        }

        getInt(key: string, defaultValue: number): number {
            throw new Error('shimmed function Setup.getInt');
        }

        setInt(key: string, value: number): void {
            console.warn('shimmed function Setup.setInt');
        }

        setStr(key: string, value: string): void {
            console.warn('shimmed function Setup.setStr');
        }

    }
    export class SkyLibAccessPaymentGetIntResult implements __ISkyLibAccessPaymentGetIntResultPublicNonVirtuals {
        value: number;
        success: Boolean;

    }
    export class SkyLibAccessPaymentGetStringResult implements __ISkyLibAccessPaymentGetStringResultPublicNonVirtuals {
        value: string;
        success: Boolean;

    }
    export class SkyLibCanUnifyContactsResult implements __ISkyLibCanUnifyContactsResultPublicNonVirtuals {
        resultCode: number;
        contactObjectID: number;

    }
    export class SkyLibContentEncodeResult implements __ISkyLibContentEncodeResultPublicNonVirtuals {
        result: string;
        rslt: Boolean;

    }
    export class SkyLibContentGetEditableResult implements __ISkyLibContentGetEditableResultPublicNonVirtuals {
        result: string;
        rslt: Boolean;

    }
    export class SkyLibContentGetRichEditableResult implements __ISkyLibContentGetRichEditableResultPublicNonVirtuals {
        result: string;
        rslt: Boolean;

    }
    export class SkyLibContentItemGetChildItemResult implements __ISkyLibContentItemGetChildItemResultPublicNonVirtuals {
        resultItem: number;
        success: Boolean;

    }
    export class SkyLibContentItemGetResult implements __ISkyLibContentItemGetResultPublicNonVirtuals {
        resultItem: number;
        success: Boolean;

    }
    export class SkyLibContentStripXMLResult implements __ISkyLibContentStripXMLResultPublicNonVirtuals {
        result: string;
        rslt: Boolean;

    }
    export class SkyLibFindContactByPstnNumberResult implements __ISkyLibFindContactByPstnNumberResultPublicNonVirtuals {
        foundInKey: number;
        found: Boolean;

    }
    export class SkyLibGetAudioDeviceCapabilitiesResult implements __ISkyLibGetAudioDeviceCapabilitiesResultPublicNonVirtuals {
        interfaceString: string;
        capabilities: number;

    }
    export class SkyLibGetCallerIDOptionsResult implements __ISkyLibGetCallerIDOptionsResultPublicNonVirtuals {
        idconfig: number;
        callerID: string;
        smsID: string;
        success: Boolean;

    }
    export class SkyLibGetDefaultContentIdResult implements __ISkyLibGetDefaultContentIdResultPublicNonVirtuals {
        contentId: string;
        success: Boolean;

    }
    export class SkyLibGetNrgLevelsResult implements __ISkyLibGetNrgLevelsResultPublicNonVirtuals {
        speakerLevel: number;
        micLevel: number;

    }
    export class SkyLibGetVideoMessagingEntitlementResult implements __ISkyLibGetVideoMessagingEntitlementResultPublicNonVirtuals {
        planName: string;
        isEntitled: Boolean;

    }
    export class SkyLibIsMicrophoneMutedResult implements __ISkyLibIsMicrophoneMutedResultPublicNonVirtuals {
        muted: Boolean;
        rslt: Boolean;

    }
    export class SkyLibIsSpeakerMutedResult implements __ISkyLibIsSpeakerMutedResultPublicNonVirtuals {
        muted: Boolean;
        rslt: Boolean;

    }
    export class SkyLibNormalizeIdentityResult implements __ISkyLibNormalizeIdentityResultPublicNonVirtuals {
        normalized: string;
        result: number;

    }
    export class SkyLibNormalizePSTNWithCountryResult implements __ISkyLibNormalizePSTNWithCountryResultPublicNonVirtuals {
        normalized: string;
        result: number;

    }
    export type SkyLibOnMessageType = (__unnamed001: number, __unnamed002: Boolean, __unnamed003: number, __unnamed004: number, __unnamed005: Boolean) => void;
    export class SkyLibQueryContentListingResult implements __ISkyLibQueryContentListingResultPublicNonVirtuals {
        requestID: number;
        result: number;

    }
    export class SkyLibUnifyContactsResult implements __ISkyLibUnifyContactsResultPublicNonVirtuals {
        resultCode: number;
        contactObjectID: number;

    }
    export class SkyLibValidateAvatarResult implements __ISkyLibValidateAvatarResultPublicNonVirtuals {
        freeBytesLeft: number;
        result: number;

    }
    export class SkyLibValidateProfileStringResult implements __ISkyLibValidateProfileStringResultPublicNonVirtuals {
        freeBytesLeft: number;
        result: number;

    }
    export class SkyLibVerifyAndUnpackResult implements __ISkyLibVerifyAndUnpackResultPublicNonVirtuals {
        file_error: number;
        result: number;

    }
    export class SkyMetadata implements __ISkyMetadataPublicNonVirtuals {
        // constructor();
    }
    export class Sms implements Windows.Foundation.IClosable, __ISmsPublicNonVirtuals, __ISmsProtectedNonVirtuals {
        // constructor();
        static confirm_TYPE_ID_SKYPEIN: number = 3;
        static confirm_TYPE_ID_MOBILE: number = 2;
        static confirm_TYPE_ID_SMS: number = 1;
        static setbodyresult_BODY_LASTCHAR_IGNORED: number = 3;
        static setbodyresult_BODY_OK: number = 2;
        static setbodyresult_BODY_TRUNCATED: number = 1;
        static setbodyresult_BODY_INVALID: number = 0;
        static handset_DELIVERY_REPORT_HANDSET_DELIVERY_REPORT_UNKNOWN: number = 2;
        static handset_DELIVERY_REPORT_HANDSET_DELIVERY_REPORT_CAPABLE: number = 1;
        static handset_DELIVERY_REPORT_HANDSET_DELIVERY_REPORT_NOT_CAPABLE: number = 0;
        static cli_USED_CLI_USE_UNKNOWN: number = 2;
        static cli_USED_CLI_CAN_BE_USED: number = 1;
        static cli_USED_CLI_CANNOT_BE_USED: number = 0;
        static reply_CAPABILITY_CAPABLE_LOCALLY: number = 2;
        static reply_CAPABILITY_CAPABLE_GLOBALLY: number = 1;
        static reply_CAPABILITY_NOT_CAPABLE: number = 0;
        static targetstatus_TARGET_DELIVERY_FAILED: number = 7;
        static targetstatus_TARGET_DELIVERY_SUCCESSFUL: number = 6;
        static targetstatus_TARGET_DELIVERY_PENDING: number = 5;
        static targetstatus_TARGET_NOT_ROUTABLE: number = 4;
        static targetstatus_TARGET_ACCEPTABLE: number = 3;
        static targetstatus_TARGET_UNDEFINED: number = 2;
        static targetstatus_TARGET_ANALYZING: number = 1;
        static error_CATEGORY_ERROR_CATEGORY_PERMANENT_SERVICE_ERROR: number = 301;
        static error_CATEGORY_ERROR_CATEGORY_TRANSIENT_SERVICE_ERROR: number = 300;
        static error_CATEGORY_ERROR_CATEGORY_MESSAGE_EXPIRED_BACKEND: number = 201;
        static error_CATEGORY_ERROR_CATEGORY_MESSAGE_EXPIRED_OPERATOR: number = 200;
        static error_CATEGORY_ERROR_CATEGORY_NUMBER_UNREACHABLE: number = 105;
        static error_CATEGORY_ERROR_CATEGORY_NUMBER_BLOCKED: number = 104;
        static error_CATEGORY_ERROR_CATEGORY_NUMBER_DOES_NOT_EXIST: number = 103;
        static error_CATEGORY_ERROR_CATEGORY_DESTINATION_NOT_SUPPORTED: number = 102;
        static error_CATEGORY_ERROR_CATEGORY_INVALID_DST_ADDRESS: number = 101;
        static error_CATEGORY_ERROR_CATEGORY_INVALID_SRC_ADDRESS: number = 100;
        static error_CATEGORY_ERROR_CATEGORY_SMS_VELOCITY_DST_REACHED: number = 19;
        static error_CATEGORY_ERROR_CATEGORY_SYSTEM_ID_BLOCKED: number = 18;
        static error_CATEGORY_ERROR_CATEGORY_BROKEN_DELIVERY_REPORT: number = 17;
        static error_CATEGORY_ERROR_CATEGORY_NO_DELIVERY_REPORT: number = 16;
        static error_CATEGORY_ERROR_CATEGORY_SPAM_DETECTED: number = 15;
        static error_CATEGORY_ERROR_CATEGORY_SPAM_VELOCITY_REACHED: number = 14;
        static error_CATEGORY_ERROR_CATEGORY_SMS_VELOCITY_REACHED: number = 13;
        static error_CATEGORY_ERROR_CATEGORY_SENDER_BLOCKED: number = 12;
        static error_CATEGORY_ERROR_CATEGORY_SENDER_BLOCKED_BY_RECIPIENT: number = 11;
        static error_CATEGORY_ERROR_CATEGORY_RECIPIENT_BLOCKED: number = 10;
        static error_CATEGORY_ERROR_CATEGORY_NO_SENDERID_CAPABILITY: number = 9;
        static error_CATEGORY_ERROR_CATEGORY_NODE_BLOCKED: number = 8;
        static error_CATEGORY_ERROR_CATEGORY_IP_BLOCKED: number = 7;
        static error_CATEGORY_ERROR_CATEGORY_USER_BLOCKED: number = 6;
        static error_CATEGORY_ERROR_CATEGORY_INVALID_CONFIRMATION_CODE: number = 5;
        static error_CATEGORY_ERROR_CATEGORY_INSUFFICIENT_FUNDS: number = 4;
        static error_CATEGORY_ERROR_CATEGORY_NO_SMS_CAPABILITY: number = 3;
        static error_CATEGORY_ERROR_CATEGORY_SERVER_CONNECT_FAILED: number = 2;
        static error_CATEGORY_ERROR_CATEGORY_MISC_ERROR: number = 1;
        static error_CATEGORY_ERROR_CATEGORY_NO_ERROR: number = 0;
        static failurereason_NO_SENDERID_CAPABILITY: number = 9;
        static failurereason_NODE_BLOCKED: number = 8;
        static failurereason_IP_BLOCKED: number = 7;
        static failurereason_USER_BLOCKED: number = 6;
        static failurereason_INVALID_CONFIRMATION_CODE: number = 5;
        static failurereason_INSUFFICIENT_FUNDS: number = 4;
        static failurereason_NO_SMS_CAPABILITY: number = 3;
        static failurereason_SERVER_CONNECT_FAILED: number = 2;
        static failurereason_MISC_ERROR: number = 1;
        static status_FAILED: number = 8;
        static status_SOME_TARGETS_FAILED: number = 7;
        static status_DELIVERED: number = 6;
        static status_SENT_TO_SERVER: number = 5;
        static status_SENDING_TO_SERVER: number = 4;
        static status_COMPOSING: number = 3;
        static status_READ: number = 2;
        static status_RECEIVED: number = 1;
        static outgoing_REPLY_TYPE_REPLY_TYPE_MIXED: number = 4;
        static outgoing_REPLY_TYPE_REPLY_2WAY_AUTOASSIGNED_NR: number = 3;
        static outgoing_REPLY_TYPE_REPLY_USER_PHONE_NR: number = 2;
        static outgoing_REPLY_TYPE_REPLY_SKYPENAME: number = 1;
        static type_CONFIRMATION_CODE_SUBMIT: number = 4;
        static type_CONFIRMATION_CODE_REQUEST: number = 3;
        static type_OUTGOING: number = 2;
        static type_INCOMING: number = 1;

        getObjectID(): number {
            throw new Error('shimmed function Sms.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function Sms.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function Sms.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function Sms.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function Sms.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function Sms.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function Sms.setExtendedIntProperty');
        }

        getTargetStatus(target: string): number {
            throw new Error('shimmed function Sms.getTargetStatus');
        }

        getTargetReplyNumber(target: string): string {
            throw new Error('shimmed function Sms.getTargetReplyNumber');
        }

        getTargetReplyType(target: string): number {
            throw new Error('shimmed function Sms.getTargetReplyType');
        }

        getTargetPrice(target: string): number {
            throw new Error('shimmed function Sms.getTargetPrice');
        }

        getTargetCLIUsed(target: string): number {
            throw new Error('shimmed function Sms.getTargetCLIUsed');
        }

        getTargetHandsetDeliveryReport(target: string): number {
            throw new Error('shimmed function Sms.getTargetHandsetDeliveryReport');
        }

        getTargetErrorCategory(target: string): number {
            throw new Error('shimmed function Sms.getTargetErrorCategory');
        }

        canTargetReply(target: string): number {
            throw new Error('shimmed function Sms.canTargetReply');
        }

        setReplyTo(number: string): Boolean {
            throw new Error('shimmed function Sms.setReplyTo');
        }

        setReplyId(callerId: string): Boolean {
            throw new Error('shimmed function Sms.setReplyId');
        }

        setTargets(numbers: VectGIString): Boolean {
            throw new Error('shimmed function Sms.setTargets');
        }

        setBody(text: string, chunks: VectGIString): SmsSetBodyResult {
            throw new Error('shimmed function Sms.setBody');
        }

        getBodyChunks(textChunks: VectGIString): SmsGetBodyChunksResult {
            throw new Error('shimmed function Sms.getBodyChunks');
        }

        send(): Boolean {
            throw new Error('shimmed function Sms.send');
        }

        setOrigin(origin: string): Boolean {
            throw new Error('shimmed function Sms.setOrigin');
        }

        setConfirmationType(type: number): void {
            console.warn('shimmed function Sms.setConfirmationType');
        }

        discard(): void {
            console.warn('shimmed function Sms.discard');
        }

        close(): void {
            console.warn('shimmed function Sms.close');
        }

        static typetoString(val: number): string {
            throw new Error('shimmed function Sms.typetoString');
        }

        static outgoing_REPLY_TYPEToString(val: number): string {
            throw new Error('shimmed function Sms.outgoing_REPLY_TYPEToString');
        }

        static statustoString(val: number): string {
            throw new Error('shimmed function Sms.statustoString');
        }

        static failurereasontoString(val: number): string {
            throw new Error('shimmed function Sms.failurereasontoString');
        }

        static error_CATEGORYToString(val: number): string {
            throw new Error('shimmed function Sms.error_CATEGORYToString');
        }

        static targetstatustoString(val: number): string {
            throw new Error('shimmed function Sms.targetstatustoString');
        }

        static reply_CAPABILITYToString(val: number): string {
            throw new Error('shimmed function Sms.reply_CAPABILITYToString');
        }

        static cli_USEDToString(val: number): string {
            throw new Error('shimmed function Sms.cli_USEDToString');
        }

        static handset_DELIVERY_REPORTToString(val: number): string {
            throw new Error('shimmed function Sms.handset_DELIVERY_REPORTToString');
        }

        static setbodyresulttoString(val: number): string {
            throw new Error('shimmed function Sms.setbodyresulttoString');
        }

        static confirm_TYPEToString(val: number): string {
            throw new Error('shimmed function Sms.confirm_TYPEToString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`Sms::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                    break;
            }

        }
    }
    export class SmsGetBodyChunksResult implements __ISmsGetBodyChunksResultPublicNonVirtuals {
        charsUntilNextChunk: number;
        rslt: Boolean;

    }
    export class SmsSetBodyResult implements __ISmsSetBodyResultPublicNonVirtuals {
        charsUntilNextChunk: number;
        result: number;

    }
    export enum StatsClickStreamEvents {
        event_ID = 1,
        value,
        last_EVENT_ID,
        sec_FROM_LAST_EVENT,
    }
    export class StatsEventAttributeContainer implements Windows.Foundation.IClosable, __IStatsEventAttributeContainerPublicNonVirtuals {
        // constructor();
        deserialize(binary: Binary): void {
            console.warn('shimmed function StatsEventAttributeContainer.deserialize');
        }

        send(eventType: number): void {
            console.warn('shimmed function StatsEventAttributeContainer.send');
        }

        addIntegerValue(key: number, value: number): void {
            console.warn('shimmed function StatsEventAttributeContainer.addIntegerValue');
        }

        addStringValue(key: number, value: string): void {
            console.warn('shimmed function StatsEventAttributeContainer.addStringValue');
        }

        close(): void {
            console.warn('shimmed function StatsEventAttributeContainer.close');
        }

    }
    export enum StatsHardwareInventoryInfo {
        trigger_TYPE = 1,
        relation_ID,
        inventory_STRING,
        os_NAME,
        os_VERSION,
        device_MANUFACTURER,
        device_NAME,
        inventory_STRING_EXTRAS,
    }
    export enum StatsWin8Events {
        event_ID = 1,
        value,
        event_COUNTER,
    }
    export class SubstringFinder implements __ISubstringFinderPublicNonVirtuals {
        // constructor(searchString: string);
        constructor(searchString: string) {}

        markupTag: string;
        requiredMatch: number;

        markupMatches(source: string): string {
            throw new Error('shimmed function SubstringFinder.markupMatches');
        }

    }
    export class Transfer implements Windows.Foundation.IClosable, __ITransferPublicNonVirtuals, __ITransferProtectedNonVirtuals {
        // constructor();
        static failurereason_PLACEHOLDER_TIMEOUT: number = 10;
        static failurereason_TOO_MANY_PARALLEL: number = 9;
        static failurereason_REMOTE_OFFLINE_FOR_TOO_LONG: number = 8;
        static failurereason_REMOTE_DOES_NOT_SUPPORT_FT: number = 7;
        static failurereason_FAILED_REMOTE_WRITE: number = 6;
        static failurereason_FAILED_WRITE: number = 5;
        static failurereason_FAILED_REMOTE_READ: number = 4;
        static failurereason_FAILED_READ: number = 3;
        static failurereason_REMOTELY_CANCELLED: number = 2;
        static failurereason_SENDER_NOT_AUTHORISED: number = 1;
        static status_CANCELLED_BY_REMOTE: number = 12;
        static status_OFFER_FROM_OTHER_INSTANCE: number = 11;
        static status_PLACEHOLDER: number = 10;
        static status_FAILED: number = 9;
        static status_COMPLETED: number = 8;
        static status_CANCELLED: number = 7;
        static status_REMOTELY_PAUSED: number = 6;
        static status_PAUSED: number = 5;
        static status_TRANSFERRING_OVER_RELAY: number = 4;
        static status_TRANSFERRING: number = 3;
        static status_WAITING_FOR_ACCEPT: number = 2;
        static status_CONNECTING: number = 1;
        static status_NEW: number = 0;
        static type_OUTGOING: number = 2;
        static type_INCOMING: number = 1;

        getObjectID(): number {
            throw new Error('shimmed function Transfer.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function Transfer.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function Transfer.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function Transfer.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function Transfer.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function Transfer.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function Transfer.setExtendedIntProperty');
        }

        accept(filenameWithPath: Filename): Boolean {
            throw new Error('shimmed function Transfer.accept');
        }

        pause(): Boolean {
            throw new Error('shimmed function Transfer.pause');
        }

        resume(): Boolean {
            throw new Error('shimmed function Transfer.resume');
        }

        cancel(): Boolean {
            throw new Error('shimmed function Transfer.cancel');
        }

        isController(): Boolean {
            throw new Error('shimmed function Transfer.isController');
        }

        discard(): void {
            console.warn('shimmed function Transfer.discard');
        }

        close(): void {
            console.warn('shimmed function Transfer.close');
        }

        static typetoString(val: number): string {
            throw new Error('shimmed function Transfer.typetoString');
        }

        static statustoString(val: number): string {
            throw new Error('shimmed function Transfer.statustoString');
        }

        static failurereasontoString(val: number): string {
            throw new Error('shimmed function Transfer.failurereasontoString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`Transfer::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                    break;
            }

        }
    }
    export enum UIEventContext {
        ui,
        background,
    }
    export class UIEventRunner implements Windows.Foundation.IClosable, __IUIEventRunnerPublicNonVirtuals {
        run(context: UIEventContext, durationThreshold: number): void {
            console.warn('shimmed function UIEventRunner.run');
        }

        close(): void {
            console.warn('shimmed function UIEventRunner.close');
        }

        static instance(): UIEventRunner {
            throw new Error('shimmed function UIEventRunner.instance');
        }

    }
    export type UnreadCountChangedType = (count: number) => void;
    export class VectBool implements Windows.Foundation.IClosable, __IVectBoolPublicNonVirtuals {
        // constructor();
        getCount(): number {
            throw new Error('shimmed function VectBool.getCount');
        }

        append(val: Boolean): number {
            throw new Error('shimmed function VectBool.append');
        }

        get(index: number): Boolean {
            throw new Error('shimmed function VectBool.get');
        }

        close(): void {
            console.warn('shimmed function VectBool.close');
        }

    }
    export class VectGIFilename implements Windows.Foundation.IClosable, __IVectGIFilenamePublicNonVirtuals {
        // constructor();
        getCount(): number {
            throw new Error('shimmed function VectGIFilename.getCount');
        }

        append(fileName: Filename): void {
            console.warn('shimmed function VectGIFilename.append');
        }

        close(): void {
            console.warn('shimmed function VectGIFilename.close');
        }

    }
    export class VectGIString implements Windows.Foundation.IClosable, __IVectGIStringPublicNonVirtuals {
        // constructor(vals: string[]);
        // constructor();
        constructor(vals: string[]) {}

        getCount(): number {
            throw new Error('shimmed function VectGIString.getCount');
        }

        append(val: string): string {
            throw new Error('shimmed function VectGIString.append');
        }

        get(index: number): string {
            throw new Error('shimmed function VectGIString.get');
        }

        close(): void {
            console.warn('shimmed function VectGIString.close');
        }

    }
    export class VectInt implements Windows.Foundation.IClosable, __IVectIntPublicNonVirtuals {
        // constructor();
        getCount(): number {
            throw new Error('shimmed function VectInt.getCount');
        }

        append(val: number): number {
            throw new Error('shimmed function VectInt.append');
        }

        get(index: number): number {
            throw new Error('shimmed function VectInt.get');
        }

        close(): void {
            console.warn('shimmed function VectInt.close');
        }

    }
    export class VectUnsignedInt implements Windows.Foundation.IClosable, __IVectUnsignedIntPublicNonVirtuals {
        // constructor(vals: number[]);
        // constructor();
        constructor(vals: number[]) {}

        getCount(): number {
            throw new Error('shimmed function VectUnsignedInt.getCount');
        }

        append(val: number): number {
            throw new Error('shimmed function VectUnsignedInt.append');
        }

        get(index: number): number {
            throw new Error('shimmed function VectUnsignedInt.get');
        }

        close(): void {
            console.warn('shimmed function VectUnsignedInt.close');
        }

    }
    export class Video implements Windows.Foundation.IClosable, __IVideoPublicNonVirtuals, __IVideoProtectedNonVirtuals {
        // constructor();
        static orientation_TRANSPOSE_MASK: number = 4;
        static orientation_FLIP_V_MASK: number = 2;
        static orientation_FLIP_H_MASK: number = 1;
        static orientation_TRANSPOSE_FLIP_H_V: number = 7;
        static orientation_TRANSPOSE_FLIP_V: number = 6;
        static orientation_TRANSPOSE_FLIP_H: number = 5;
        static orientation_TRANSPOSE: number = 4;
        static orientation_FLIP_H_V: number = 3;
        static orientation_FLIP_V: number = 2;
        static orientation_FLIP_H: number = 1;
        static orientation_NONE: number = 0;
        static video_DEVICE_CAPABILITY_VIDEOCAP_USB_HIGHSPEED: number = 3;
        static video_DEVICE_CAPABILITY_VIDEOCAP_REQ_DRIVERUPDATE: number = 2;
        static video_DEVICE_CAPABILITY_VIDEOCAP_HQ_CERTIFIED: number = 1;
        static video_DEVICE_CAPABILITY_VIDEOCAP_HQ_CAPABLE: number = 0;
        static mediatype_MEDIA_VIDEO: number = 0;
        static mediatype_MEDIA_SCREENSHARING: number = 1;
        static status_UNATTACHED: number = 13;
        static status_SWITCHING_DEVICE: number = 12;
        static status_CHECKING_SUBSCRIPTION: number = 11;
        static status_UNKNOWN: number = 9;
        static status_HINT_IS_VIDEOCALL_RECEIVED: number = 8;
        static status_NOT_STARTED: number = 7;
        static status_PAUSED: number = 6;
        static status_STOPPING: number = 5;
        static status_RUNNING: number = 4;
        static status_REJECTED: number = 3;
        static status_STARTING: number = 2;
        static status_AVAILABLE: number = 1;
        static status_NOT_AVAILABLE: number = 0;
        static setupkey_VIDEO_ADVERTPOLICY: string = 'Lib/Video/AdvertPolicy';
        static setupkey_VIDEO_RECVPOLICY: string = 'Lib/Video/RecvPolicy';
        static setupkey_VIDEO_DISABLE: string = '*Lib/Video/Disable';
        static setupkey_VIDEO_AUTOSEND: string = 'Lib/Video/AutoSend';
        static setupkey_VIDEO_DEVICE_PATH: string = 'Lib/Video/DevicePath';
        static setupkey_VIDEO_DEVICE: string = 'Lib/Video/Device';

        getObjectID(): number {
            throw new Error('shimmed function Video.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function Video.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function Video.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function Video.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function Video.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function Video.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function Video.setExtendedIntProperty');
        }

        start(): void {
            console.warn('shimmed function Video.start');
        }

        stop(): void {
            console.warn('shimmed function Video.stop');
        }

        setIncomingTransmissionsDesired(desire: Boolean): void {
            console.warn('shimmed function Video.setIncomingTransmissionsDesired');
        }

        setScreenCaptureRectangle(x0: number, y0: number, width: number, height: number, monitorNumber: number, windowHandle: number): void {
            console.warn('shimmed function Video.setScreenCaptureRectangle');
        }

        setRemoteRendererId(id: number): void {
            console.warn('shimmed function Video.setRemoteRendererId');
        }

        setVideoConsumptionProperties(renderedWidth: number, renderedHeight: number): void {
            console.warn('shimmed function Video.setVideoConsumptionProperties');
        }

        getCurrentVideoDevice(): VideoGetCurrentVideoDeviceResult {
            throw new Error('shimmed function Video.getCurrentVideoDevice');
        }

        discard(): void {
            console.warn('shimmed function Video.discard');
        }

        getVideoSrc(): string {
            throw new Error('shimmed function Video.getVideoSrc');
        }

        getVideoDeviceHandle(): string {
            throw new Error('shimmed function Video.getVideoDeviceHandle');
        }

        getAspectRatio(): number {
            throw new Error('shimmed function Video.getAspectRatio');
        }

        getOrientation(): number {
            throw new Error('shimmed function Video.getOrientation');
        }

        getWidth(): number {
            throw new Error('shimmed function Video.getWidth');
        }

        getHeight(): number {
            throw new Error('shimmed function Video.getHeight');
        }

        setVisible(visible: Boolean): Boolean {
            throw new Error('shimmed function Video.setVisible');
        }

        close(): void {
            console.warn('shimmed function Video.close');
        }

        static statustoString(val: number): string {
            throw new Error('shimmed function Video.statustoString');
        }

        static mediatypetoString(val: number): string {
            throw new Error('shimmed function Video.mediatypetoString');
        }

        static video_DEVICE_CAPABILITYToString(val: number): string {
            throw new Error('shimmed function Video.video_DEVICE_CAPABILITYToString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`Video::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                case "lastframecapture": // OnLastFrameCaptureType
                case "capturerequestcompleted": // OnCaptureRequestCompletedType
                    break;
            }

        }
    }
    export class VideoGetCurrentVideoDeviceResult implements __IVideoGetCurrentVideoDeviceResultPublicNonVirtuals {
        devicePath: string;
        deviceName: string;
        mediatype: number;

    }
    export class VideoMessage implements Windows.Foundation.IClosable, __IVideoMessagePublicNonVirtuals, __IVideoMessageProtectedNonVirtuals {
        // constructor();
        static vod_STATUS_VOD_PLAYABLE_LOCAL: number = 3;
        static vod_STATUS_VOD_PLAYABLE: number = 2;
        static vod_STATUS_VOD_CONVERTING: number = 1;
        static vod_STATUS_VOD_NOT_AVAILABLE: number = 0;
        static status_EXPIRED: number = 8;
        static status_DELETED: number = 7;
        static status_INVALID: number = 6;
        static status_CANCELED: number = 5;
        static status_FAILED: number = 4;
        static status_UPLOADED: number = 3;
        static status_UPLOADING: number = 2;
        static status_RECORDED: number = 1;
        static status_BLANK: number = 0;

        getObjectID(): number {
            throw new Error('shimmed function VideoMessage.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function VideoMessage.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function VideoMessage.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function VideoMessage.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function VideoMessage.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function VideoMessage.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function VideoMessage.setExtendedIntProperty');
        }

        prepareForPlay(allowLocalPath: Boolean): void {
            console.warn('shimmed function VideoMessage.prepareForPlay');
        }

        getThumbnail(): void {
            console.warn('shimmed function VideoMessage.getThumbnail');
        }

        discard(): void {
            console.warn('shimmed function VideoMessage.discard');
        }

        getThumbnailAsync(): Windows.Foundation.IAsyncAction {
            throw new Error('shimmed function VideoMessage.getThumbnailAsync');
        }

        close(): void {
            console.warn('shimmed function VideoMessage.close');
        }

        static statustoString(val: number): string {
            throw new Error('shimmed function VideoMessage.statustoString');
        }

        static vod_STATUSToString(val: number): string {
            throw new Error('shimmed function VideoMessage.vod_STATUSToString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`VideoMessage::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                case "thumbnailpath": // OnThumbnailPathType
                    break;
            }

        }
    }
    export namespace VM { 
        export interface __IRecentsQueryFactory {
            createInstance(lib: WrSkyLib): RecentsQuery;
        }
        export interface __IRecentsQueryProtectedNonVirtuals {
        }
        export interface __IRecentsQueryPublicNonVirtuals {
            reload(max_items: number): void;
            resize(max_items: number): void;
            handleConversationPropertiesChange(conversation: Conversation, props: number[]): void;
            handleConversationListChange(sender: any, id: number, filterType: number, added: Boolean): void;
        }
        export interface __IUnreadCountQueryFactory {
            createInstance(lib: WrSkyLib): UnreadCountQuery;
        }
        export interface __IUnreadCountQueryProtectedNonVirtuals {
        }
        export interface __IUnreadCountQueryPublicNonVirtuals {
            reload(): void;
            handleConversationPropertiesChange(conversation: Conversation, props: number[]): void;
            handleConversationListChange(sender: any, id: number, filterType: number, added: Boolean): void;
        }
        export class RecentsQuery implements __IRecentsQueryPublicNonVirtuals, __IRecentsQueryProtectedNonVirtuals {
            // constructor(lib: WrSkyLib);
            constructor(lib: WrSkyLib) {}

            reload(max_items: number): void {
                console.warn('shimmed function RecentsQuery.reload');
            }

            resize(max_items: number): void {
                console.warn('shimmed function RecentsQuery.resize');
            }

            handleConversationPropertiesChange(conversation: Conversation, props: number[]): void {
                console.warn('shimmed function RecentsQuery.handleConversationPropertiesChange');
            }

            handleConversationListChange(sender: any, id: number, filterType: number, added: Boolean): void {
                console.warn('shimmed function RecentsQuery.handleConversationListChange');
            }

            addEventListener(name: string, handler: Function) {
                console.warn(`RecentsQuery::addEventListener: ${name}`);
                switch (name) {
                    case "recentscountchanged": // RecentsCountChangedType
                    case "unreadcountchanged": // UnreadCountChangedType
                    case "recentsqueryitemmoved": // RecentsQueryItemMovedType
                    case "recentsqueryitemremoved": // RecentsQueryItemRemovedType
                    case "recentsqueryitemadded": // RecentsQueryItemAddedType
                    case "recentsqueryreset": // RecentsQueryResetType
                        break;
                }

            }
        }
        export class UnreadCountQuery implements __IUnreadCountQueryPublicNonVirtuals, __IUnreadCountQueryProtectedNonVirtuals {
            // constructor(lib: WrSkyLib);
            constructor(lib: WrSkyLib) {}

            reload(): void {
                console.warn('shimmed function UnreadCountQuery.reload');
            }

            handleConversationPropertiesChange(conversation: Conversation, props: number[]): void {
                console.warn('shimmed function UnreadCountQuery.handleConversationPropertiesChange');
            }

            handleConversationListChange(sender: any, id: number, filterType: number, added: Boolean): void {
                console.warn('shimmed function UnreadCountQuery.handleConversationListChange');
            }

            addEventListener(name: string, handler: Function) {
                console.warn(`UnreadCountQuery::addEventListener: ${name}`);
                switch (name) {
                    case "countchanged": // CountChangedType
                        break;
                }

            }
        }
    }
    export class Voicemail implements Windows.Foundation.IClosable, __IVoicemailPublicNonVirtuals, __IVoicemailProtectedNonVirtuals {
        // constructor();
        static failurereason_SENDER_BLOCKED: number = 12;
        static failurereason_SENDER_NOT_AUTHORIZED: number = 11;
        static failurereason_RECEIVER_DISABLED_VOICEMAIL: number = 10;
        static failurereason_NO_PERMISSION: number = 9;
        static failurereason_PLAYBACK_ERROR: number = 8;
        static failurereason_RECORDING_ERROR: number = 7;
        static failurereason_FILE_WRITE_ERROR: number = 6;
        static failurereason_FILE_READ_ERROR: number = 5;
        static failurereason_NO_SUCH_VOICEMAIL: number = 4;
        static failurereason_NO_VOICEMAIL_CAPABILITY: number = 3;
        static failurereason_CONNECT_ERROR: number = 2;
        static failurereason_MISC_ERROR: number = 1;
        static status_CANCELLED: number = 16;
        static status_CHECKING: number = 15;
        static status_DELETING_FAILED: number = 14;
        static status_FAILED: number = 13;
        static status_DELETING: number = 12;
        static status_UPLOADED: number = 11;
        static status_UPLOADING: number = 10;
        static status_RECORDED: number = 9;
        static status_RECORDING: number = 8;
        static status_BLANK: number = 7;
        static status_PLAYED: number = 6;
        static status_PLAYING: number = 5;
        static status_BUFFERING: number = 4;
        static status_UNPLAYED: number = 3;
        static status_DOWNLOADING: number = 2;
        static status_NOTDOWNLOADED: number = 1;
        static type_OUTGOING: number = 3;
        static type_CUSTOM_GREETING: number = 2;
        static type_DEFAULT_GREETING: number = 4;
        static type_INCOMING: number = 1;

        getObjectID(): number {
            throw new Error('shimmed function Voicemail.getObjectID');
        }

        getDbID(): number {
            throw new Error('shimmed function Voicemail.getDbID');
        }

        getStrProperty(propKey: number): string {
            throw new Error('shimmed function Voicemail.getStrProperty');
        }

        getStrPropertyWithXmlStripped(propKey: number): string {
            throw new Error('shimmed function Voicemail.getStrPropertyWithXmlStripped');
        }

        getIntProperty(propKey: number): number {
            throw new Error('shimmed function Voicemail.getIntProperty');
        }

        setExtendedStrProperty(propKey: number, value: string): void {
            console.warn('shimmed function Voicemail.setExtendedStrProperty');
        }

        setExtendedIntProperty(propKey: number, value: number): void {
            console.warn('shimmed function Voicemail.setExtendedIntProperty');
        }

        startRecording(): Boolean {
            throw new Error('shimmed function Voicemail.startRecording');
        }

        stopRecording(): Boolean {
            throw new Error('shimmed function Voicemail.stopRecording');
        }

        startPlayback(): Boolean {
            throw new Error('shimmed function Voicemail.startPlayback');
        }

        stopPlayback(): Boolean {
            throw new Error('shimmed function Voicemail.stopPlayback');
        }

        delete(): Boolean {
            throw new Error('shimmed function Voicemail.delete');
        }

        cancel(): Boolean {
            throw new Error('shimmed function Voicemail.cancel');
        }

        forwardToContacts(contacts: VectUnsignedInt): Boolean {
            throw new Error('shimmed function Voicemail.forwardToContacts');
        }

        forwardToGroups(groups: VectUnsignedInt): Boolean {
            throw new Error('shimmed function Voicemail.forwardToGroups');
        }

        getEventId(): number {
            throw new Error('shimmed function Voicemail.getEventId');
        }

        checkPermission(): Boolean {
            throw new Error('shimmed function Voicemail.checkPermission');
        }

        discard(): void {
            console.warn('shimmed function Voicemail.discard');
        }

        close(): void {
            console.warn('shimmed function Voicemail.close');
        }

        static typetoString(val: number): string {
            throw new Error('shimmed function Voicemail.typetoString');
        }

        static statustoString(val: number): string {
            throw new Error('shimmed function Voicemail.statustoString');
        }

        static failurereasontoString(val: number): string {
            throw new Error('shimmed function Voicemail.failurereasontoString');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`Voicemail::addEventListener: ${name}`);
            switch (name) {
                case "propertychange": // OnPropertyChangeType
                    break;
            }

        }
    }
    export class WrSkyLib implements Windows.Foundation.IClosable, __IWrSkyLibPublicNonVirtuals, __IWrSkyLibProtectedNonVirtuals {
        // constructor(skypeVersion: string);
        constructor(skypeVersion: string) {}

        defaultVideoDeviceHandle: string;
        logoutReason: number;
        myIdentity: string;
        loginInProgress: Boolean;
        loggedIn: Boolean;
        myself: Contact;
        account: Account;
        setup: Setup;
        avatarmanager: AvatarManager;
        static libstatus_FATAL_ERROR: number = 5;
        static libstatus_STOPPED: number = 4;
        static libstatus_STOPPING: number = 3;
        static libstatus_RUNNING: number = 2;
        static libstatus_STARTING: number = 1;
        static libstatus_CONSTRUCTED: number = 0;
        static objecttype_MEDIADOCUMENT: number = 22;
        static objecttype_VIDEOMESSAGE: number = 21;
        static objecttype_ACCESSSESSION: number = 20;
        static objecttype_ACCOUNT: number = 5;
        static objecttype_PRICEQUOTE: number = 17;
        static objecttype_ALERT: number = 16;
        static objecttype_CONTENTITEM: number = 14;
        static objecttype_TRANSFER: number = 6;
        static objecttype_SMS: number = 12;
        static objecttype_VOICEMAIL: number = 7;
        static objecttype_VIDEO: number = 11;
        static objecttype_MESSAGE: number = 9;
        static objecttype_CONVERSATION: number = 18;
        static objecttype_PARTICIPANT: number = 19;
        static objecttype_CONTACTSEARCH: number = 1;
        static objecttype_CONTACT: number = 2;
        static objecttype_CONTACTGROUP: number = 10;
        static debug_STRING_DEBUG_STRING_MSNP_LOG: number = 2;
        static debug_STRING_DEBUG_STRING_MSNP_SUMMARY: number = 1;
        static debug_STRING_DEBUG_STRING_DEFAULT: number = 0;
        static localized_STRING_LOCALIZED_COUNT: number = 1;
        static localized_STRING_LOCALIZED_UPGRADE_MESSAGE_IN_P2P: number = 0;
        static pnm_REGISTER_CONTEXTS_RESULT_REGISTER_CONTEXTS_FAILED: number = 1;
        static pnm_REGISTER_CONTEXTS_RESULT_REGISTER_CONTEXTS_SUCCEEDED: number = 0;
        static pushhandlingresult_CALL_SETUP_FAILED: number = 2;
        static pushhandlingresult_CALL_SETUP_SUCCEEDED: number = 1;
        static pushhandlingresult_BAD_NOTIFICATION_PAYLOAD: number = 0;
        static service_TYPE_NNA: number = 10;
        static service_TYPE_ADM: number = 9;
        static service_TYPE_GRIFFIN: number = 8;
        static service_TYPE_TROUTER: number = 7;
        static service_TYPE_GOOGLE_AC2DM: number = 6;
        static service_TYPE_HOTMAIL: number = 5;
        static service_TYPE_GOOGLE_AGCM: number = 4;
        static service_TYPE_APPLE_APN: number = 3;
        static service_TYPE_MICROSOFT_WP7NS: number = 2;
        static service_TYPE_MICROSOFT_WNS: number = 1;
        static service_TYPE_TESTING: number = 0;
        static auth_RESULT_AUTH_PARTNER_TIMEOUT: number = 9;
        static auth_RESULT_AUTH_PARTNER_INTERNAL_ERROR: number = 8;
        static auth_RESULT_AUTH_USER_IS_UNDERAGE: number = 7;
        static auth_RESULT_AUTH_INVALID_OAUTH_AUTHENTICATION: number = 6;
        static auth_RESULT_AUTH_INVALID_SKYPE_AUTHENTICATION: number = 5;
        static auth_RESULT_AUTH_ANOTHER_MAPPING_EXISTS: number = 4;
        static auth_RESULT_AUTH_INVALID_PARAMETER: number = 3;
        static auth_RESULT_AUTH_MISSING_PARAMETER: number = 2;
        static auth_RESULT_AUTH_INTERNAL_ERROR: number = 1;
        static auth_RESULT_AUTH_OK: number = 0;
        static app2APP_STREAMS_RECEIVED_STREAMS: number = 2;
        static app2APP_STREAMS_SENDING_STREAMS: number = 1;
        static app2APP_STREAMS_ALL_STREAMS: number = 0;
        static unpack_RESULT_UNPACK_SIGNATURE_ERROR: number = 3;
        static unpack_RESULT_UNPACK_BLOB_ERROR: number = 2;
        static unpack_RESULT_UNPACK_FILE_ERROR: number = 1;
        static unpack_RESULT_UNPACK_OK: number = 0;
        static unpack_TYPE_UP_SKYPEHOME_BUNDLE: number = 4106;
        static unpack_TYPE_UP_MAC_UPGRADE: number = 4103;
        static upgraderesult_UPGRADE_CHECK_FAILED: number = 20;
        static upgraderesult_GOLD_AND_BETA_AVAILABLE: number = 12;
        static upgraderesult_BETA_AVAILABLE: number = 11;
        static upgraderesult_GOLD_AVAILABLE: number = 10;
        static upgraderesult_DISCONTINUED: number = 5;
        static upgraderesult_FORCED_STEALTH_UPGRADE: number = 4;
        static upgraderesult_FORCED_UPGRADE: number = 3;
        static upgraderesult_RECOMMENDED_STEALTH_UPGRADE: number = 2;
        static upgraderesult_RECOMMENDED_UPGRADE: number = 1;
        static upgraderesult_NO_UPGRADE: number = 0;
        static libprop_LIBPROP_NRT_CAPABILITIES: number = 44;
        static libprop_LIBPROP_API_ALLOWLIST_LOCK: number = 43;
        static libprop_LIBPROP_LOGIN_STATS_SAMPLING: number = 42;
        static libprop_LIBPROP_DISABLE_VIRAL_UPGRADES: number = 41;
        static libprop_LIBPROP_VIDEO_MESSAGE_SENDING_ENABLED: number = 40;
        static libprop_LIBPROP_DISABLED_AUTH_PARTNERS: number = 39;
        static libprop_LIBPROP_AD_ALLOWED_RICH: number = 38;
        static libprop_LIBPROP_AD_ALLOWED_BASIC: number = 37;
        static libprop_LIBPROP_BILLING_TYPE: number = 36;
        static libprop_LIBPROP_NETCONF_IS_LATEST: number = 35;
        static libprop_LIBPROP_USER_LIKENESS: number = 34;
        static libprop_LIBPROP_SKYPEMANAGER_MEMBER_STATUS: number = 33;
        static libprop_LIBPROP_POLICY_DISABLE_VIDEO: number = 32;
        static libprop_LIBPROP_SKYPEHOME_CHANNEL_DISABLED: number = 31;
        static libprop_LIBPROP_MESH_PROBLEMS: number = 30;
        static libprop_LIBPROP_CURCALL_TBYB_SECONDS_REMAINING: number = 29;
        static libprop_LIBPROP_UPGRADE_SIGNER_NAME: number = 27;
        static libprop_LIBPROP_ALL_LASTCALL_PROPERTIES_SET: number = 26;
        static libprop_LIBPROP_POSTCALL_JUNCTION_DISABLED: number = 25;
        static libprop_LIBPROP_LASTCALL_END_DETAILS: number = 24;
        static libprop_LIBPROP_AUTO_TOPUP_STATUS: number = 23;
        static libprop_LIBPROP_MPV_ENABLED: number = 22;
        static libprop_LIBPROP_DISABLE_WEB_SEARCH: number = 21;
        static libprop_LIBPROP_3G_FREE_TRIAL_IS_OVER: number = 20;
        static libprop_LIBPROP_MAX_VIDEOCONFCALL_PARTICIPANTS: number = 19;
        static libprop_LIBPROP_POLICY_DISABLE_FLAMINGO_CHANNEL: number = 18;
        static libprop_LIBPROP_LASTCALL_REMOTE_PROBLEMS: number = 17;
        static libprop_LIBPROP_LASTCALL_LOCAL_PROBLEMS: number = 16;
        static libprop_LIBPROP_POLICY_DISABLE_LOGOUT: number = 15;
        static libprop_LIBPROP_OLD_CAMERA_DRIVER: number = 14;
        static libprop_LIBPROP_POLICY_DISABLE_SCREENSHARING: number = 13;
        static libprop_LIBPROP_POLICY_DISABLE_DRAGONFLY: number = 12;
        static libprop_LIBPROP_POLICY_DISABLE_MICROPAYMENTS: number = 11;
        static libprop_LIBPROP_DISABLE_SENDMONEY: number = 10;
        static libprop_LIBPROP_POLICY_DISABLE_LANGUAGE_EDIT: number = 9;
        static libprop_LIBPROP_POLICY_DISABLE_PERSONALISE: number = 8;
        static libprop_LIBPROP_POLICY_DISABLE_VERSION_CHECK: number = 7;
        static libprop_LIBPROP_POLICY_DISABLE_CONTACT_IMPORT: number = 6;
        static libprop_LIBPROP_POLICY_DISABLE_FILE_TRANSFER: number = 5;
        static libprop_LIBPROP_POLICY_DISABLE_PUBLIC_API: number = 4;
        static libprop_LIBPROP_BW_CUROUT_KB: number = 3;
        static libprop_LIBPROP_BW_CURIN_KB: number = 2;
        static libprop_LIBPROP_IS_HTTPFE_ENABLED: number = 1;
        static libprop_LIBPROP_MAX_CONFCALL_PARTICIPANTS: number = 0;
        static nrt_CAPABILITIES_NRT_LYNC_PHASE2_ENABLED: number = 2;
        static nrt_CAPABILITIES_NRT_ENABLED: number = 1;
        static nrt_CAPABILITIES_NRT_DISABLED: number = 0;
        static uiprop_UIPROP_POLICY_LISTEN_RANGE_END: number = 19;
        static uiprop_UIPROP_POLICY_LISTEN_RANGE_BEGIN: number = 18;
        static uiprop_UIPROP_NOTIFICATIONS_LANGUAGE: number = 17;
        static uiprop_UIPROP_CALL_QUALITY_FEEDBACK_EXPECTED_WITH_NEXT_CALL: number = 16;
        static uiprop_UIPROP_IS_MOBILE_DEVICE: number = 15;
        static uiprop_UIPROP_SELECTED_CONTACT_IDENTITY: number = 14;
        static uiprop_UIPROP_POLICY_PROXY_USERNAME: number = 13;
        static uiprop_UIPROP_POLICY_PROXY_ADDRESS: number = 12;
        static uiprop_UIPROP_POLICY_PROXY_SETTING: number = 11;
        static uiprop_UIPROP_POLICY_LISTEN_HTTP_PORTS: number = 10;
        static uiprop_UIPROP_POLICY_LISTEN_PORT: number = 9;
        static uiprop_UIPROP_EXPRESSIVECONTENT_ITEMS: number = 8;
        static uiprop_UIPROP_LAST_CALL_ORIGIN: number = 7;
        static uiprop_UIPROP_TOOLBARITEM_USED_IN_LAST_MINUTE: number = 6;
        static uiprop_UIPROP_MENUITEM_USED_IN_LAST_MINUTE: number = 5;
        static uiprop_UIPROP_IC_LAST_YIELD: number = 4;
        static uiprop_UIPROP_IC_TOTAL_YIELD: number = 3;
        static uiprop_UIPROP_IC_RUN_COMPLETED_COUNT: number = 2;
        static uiprop_UIPROP_IC_RUN_STARTUP_COUNT: number = 1;
        static uiprop_UIPROP_LANGUAGE: number = 0;
        static user_LIKENESSES_USERLIKE_BUSINESS: number = 1;
        static user_LIKENESSES_USERLIKE_REGULAR: number = 0;
        static skypemanager_MEMBER_STATUSES_SM_ADMIN: number = 3;
        static skypemanager_MEMBER_STATUSES_SM_MANAGED: number = 2;
        static skypemanager_MEMBER_STATUSES_SM_MEMBER: number = 1;
        static skypemanager_MEMBER_STATUSES_SM_NONE: number = 0;
        static policy_DISABLE_VIDEO_OPTIONS_POLICY_VIDEO_DISABLED: number = 3;
        static policy_DISABLE_VIDEO_OPTIONS_POLICY_VIDEO_RECEIVE_DISABLED: number = 2;
        static policy_DISABLE_VIDEO_OPTIONS_POLICY_VIDEO_SEND_DISABLED: number = 1;
        static policy_DISABLE_VIDEO_OPTIONS_POLICY_VIDEO_ENABLED: number = 0;
        static livesession_END_DETAILS_LED_HOST_WENT_OFFLINE: number = 64;
        static livesession_END_DETAILS_LED_ENDED_NORMALLY_WITH_SUCCESSFUL_RECOVERY: number = 32;
        static livesession_END_DETAILS_LED_REMOTE_USER_TERMINATED_DURING_RECOVERY: number = 16;
        static livesession_END_DETAILS_LED_LOCAL_USER_TERMINATED_DURING_RECOVERY: number = 8;
        static livesession_END_DETAILS_LED_RECOVERY_UNSUCCESSFUL: number = 4;
        static livesession_END_DETAILS_LED_NO_REMOTE_CONNECTIVITY: number = 2;
        static livesession_END_DETAILS_LED_NO_LOCAL_CONNECTIVITY: number = 1;
        static content_LIST_CONTEXT_CL_CONTEXT_SDK_ALLOWLIST: number = 8;
        static content_LIST_CONTEXT_CL_CONTEXT_SDK_BLOCKLIST: number = 7;
        static content_LIST_CONTEXT_CL_CONTEXT_SF_BLOCKLIST: number = 6;
        static content_LIST_CONTEXT_CL_CONTEXT_PLUGIN_ALLOWLIST: number = 5;
        static content_LIST_CONTEXT_CL_CONTEXT_API_BLOCKLIST: number = 4;
        static content_LIST_CONTEXT_CL_CONTEXT_API_ALLOWLIST: number = 3;
        static content_LIST_CONTEXT_CL_CONTEXT_HTTPS_DIRECT: number = 2;
        static content_LIST_CONTEXT_CL_CONTEXT_DF_BLOCKED: number = 1;
        static content_LIST_RESULT_CL_FILE_ERROR: number = 4;
        static content_LIST_RESULT_CL_QUERY_FAILED: number = 3;
        static content_LIST_RESULT_CL_QUERY_PENDING: number = 2;
        static content_LIST_RESULT_CL_NOT_LISTED: number = 1;
        static content_LIST_RESULT_CL_LISTED: number = 0;
        static webgw_RESULT_WG_COOKIE_ERROR: number = 10;
        static webgw_RESULT_WG_REDIRECT_ERROR: number = 9;
        static webgw_RESULT_WG_INVALID_HOST: number = 8;
        static webgw_RESULT_WG_INVALID_URI_FORMAT: number = 7;
        static webgw_RESULT_WG_INVALID_URI_SCHEME: number = 6;
        static webgw_RESULT_WG_NO_ROUTES: number = 5;
        static webgw_RESULT_WG_WEB_TIMEOUT: number = 4;
        static webgw_RESULT_WG_TRANSFER_FAILED: number = 3;
        static webgw_RESULT_WG_ERROR: number = 2;
        static webgw_RESULT_WG_LOCAL_ERROR: number = 1;
        static webgw_RESULT_WG_SUCCESS: number = 0;
        static httpfe_METHOD_HTTPFE_POST: number = 1;
        static httpfe_METHOD_HTTPFE_GET: number = 0;
        static setupkey_HTTPFE_ACCEPT_DEFLATE: string = 'Lib/Pic/AcceptDeflate';
        static setupkey_HTTPFE_DISABLE_COOKIES: string = 'Lib/Pic/DisableCookies';
        static sa_PAYMENT_IID_SA_PAYMENT_IID_ATU: number = 5;
        static sa_PAYMENT_IID_SA_PAYMENT_IID_EXPDATE_YEAR: number = 4;
        static sa_PAYMENT_IID_SA_PAYMENT_IID_EXPDATE_MON: number = 3;
        static sa_PAYMENT_IID_SA_PAYMENT_IID_CARDTYPE: number = 2;
        static sa_PAYMENT_IID_SA_PAYMENT_IID_PRODUCT: number = 1;
        static sa_PAYMENT_IID_SA_PAYMENT_IID_AMOUNT_NUM: number = 0;
        static sa_PAYMENT_SID_SA_PAYMENT_SID_ORDER_ID: number = 8;
        static sa_PAYMENT_SID_SA_PAYMENT_SID_COUNTRY: number = 7;
        static sa_PAYMENT_SID_SA_PAYMENT_SID_CURRENCY: number = 6;
        static sa_PAYMENT_SID_SA_PAYMENT_SID_AMOUNT_STR: number = 5;
        static sa_PAYMENT_SID_SA_PAYMENT_SID_CARD_VAL_NO: number = 4;
        static sa_PAYMENT_SID_SA_PAYMENT_SID_CARD_NO: number = 3;
        static sa_PAYMENT_SID_SA_PAYMENT_SID_CARDHOLDER: number = 2;
        static sa_PAYMENT_SID_SA_PAYMENT_SID_SKYPERPWD: number = 1;
        static sa_PAYMENT_SID_SA_PAYMENT_SID_SKYPENAME: number = 0;
        static sa_PAYMENT_CARDTYPE_SA_PAYMENT_CARDTYPE_AMEX: number = 3;
        static sa_PAYMENT_CARDTYPE_SA_PAYMENT_CARDTYPE_MC: number = 2;
        static sa_PAYMENT_CARDTYPE_SA_PAYMENT_CARDTYPE_VISA: number = 1;
        static sa_PAYMENT_CARDTYPE_SA_PAYMENT_CARDTYPE_UNKNOWN: number = 0;
        static sa_PAYMENT_PRODUCT_SA_PAYMENT_PRODUCT_SKYPE_CREDIT: number = 0;
        static accesseventtype_EV_IS_HOTSPOT: number = 2003;
        static accesseventtype_EV_IS_ONLINE: number = 2002;
        static accesseventtype_EV_DISABLE_TEST_MODE: number = 2001;
        static accesseventtype_EV_ENABLE_TEST_MODE: number = 2000;
        static accesseventtype_EV_DISABLE_ACCESS: number = 1013;
        static accesseventtype_EV_ENABLE_ACCESS: number = 1012;
        static accesseventtype_EV_SET_SESSION_LENGTH: number = 1011;
        static accesseventtype_EV_LOGIN_OPERATOR: number = 1010;
        static accesseventtype_EV_REPORT_LOCATION: number = 1009;
        static accesseventtype_EV_RATE_HOTSPOT: number = 1008;
        static accesseventtype_EV_WIFI_CHANGED_DISABLED: number = 1007;
        static accesseventtype_EV_WIFI_CHANGED_UNSUPPORTED: number = 1006;
        static accesseventtype_EV_WIFI_CHANGED_SUPPORTED: number = 1005;
        static accesseventtype_EV_START_PAYMENT: number = 1004;
        static accesseventtype_EV_EXTEND: number = 1003;
        static accesseventtype_EV_REDETECT: number = 1002;
        static accesseventtype_EV_LOGOUT: number = 1001;
        static accesseventtype_EV_LOGIN: number = 1000;
        static accesseventtype_SA_SESSION_RECOVERABLE: number = 3;
        static accesseventtype_SA_SESSION_LOST: number = 2;
        static accesseventtype_SA_SESSION_AUTO_END: number = 1;
        static accesseventtype_SA_OBJECT_INVALIDATED: number = 0;
        static setupkey_ACCESS_SESSION_LEN: string = '*Lib/Access/SessionLen';
        static setupkey_ACCESS_ENABLED: string = '*Lib/Access/Enabled';
        static validateresult_STARTS_WITH_INVALID_CHAR: number = 10;
        static validateresult_TOO_SIMPLE: number = 9;
        static validateresult_CONTAINS_INVALID_WORD: number = 8;
        static validateresult_INVALID_FORMAT: number = 7;
        static validateresult_SAME_AS_USERNAME: number = 6;
        static validateresult_CONTAINS_SPACE: number = 5;
        static validateresult_CONTAINS_INVALID_CHAR: number = 4;
        static validateresult_TOO_LONG: number = 3;
        static validateresult_TOO_SHORT: number = 2;
        static validateresult_VALIDATED_OK: number = 1;
        static validateresult_NOT_VALIDATED: number = 0;
        static partner_ID_PARTNER_MICROSOFT: number = 999;
        static partner_ID_PARTNER_FACEBOOK: number = 95;
        static partner_ID_PARTNER_SKYPE: number = 1;
        static partner_ID_PARTNER_NONE: number = 0;
        static setupkey_ENDPOINT_NAME: string = 'Lib/MSNP/EndpointName';
        static setupkey_DISABLE_XMPP: string = '*Lib/XMPP/Disable';
        static setupkey_PRIVATE_SKYPE_MODE: string = 'Lib/Account/PrivateSkypeMode';
        static setupkey_IDLE_TIME_FOR_NA: string = 'Lib/Account/IdleTimeForNA';
        static setupkey_IDLE_TIME_FOR_AWAY: string = 'Lib/Account/IdleTimeForAway';
        static partner_QUERY_ERROR_PQ_SERVER_NOCONNECT: number = 2;
        static partner_QUERY_ERROR_PQ_SERVER_NOSUCCESS: number = 1;
        static partner_QUERY_ERROR_PQ_SUCCESS: number = 0;
        static partner_QUERY_ID_PQ_MANDALAY: number = 0;
        static partner_QUERY_PARAMS_PQ_USERID: number = 35;
        static partner_QUERY_PARAMS_PQ_PASSWORD: number = 34;
        static partner_QUERY_PARAMS_PQ_EMAIL: number = 33;
        static partner_QUERY_PARAMS_PQ_PARTNER_ID: number = 32;
        static partner_QUERY_TYPE_PQ_USERID_QUERY: number = 3;
        static partner_QUERY_TYPE_PQ_PROFILE_URL: number = 2;
        static partner_QUERY_TYPE_PQ_PICTURE_URL: number = 1;
        static partner_QUERY_TYPE_PQ_SESSIONTOKEN: number = 0;
        static setupkey_DC_NOPERSONAL: string = 'Lib/DynContent/DisablePersonal';
        static setupkey_DC_NOPROMO: string = 'Lib/DynContent/DisablePromo';
        static setupkey_DC_NOTIPS: string = 'Lib/DynContent/DisableTip';
        static setupkey_FT_INCOMING_LIMIT: string = 'Lib/FileTransfer/IncomingLimit';
        static setupkey_FT_SAVEPATH: string = 'Lib/FileTransfer/SavePath';
        static setupkey_FT_AUTOACCEPT: string = 'Lib/FileTransfer/AutoAccept';
        static callerid_STATE_CLI_BLOCKED: number = 5;
        static callerid_STATE_CLI_FAILED: number = 4;
        static callerid_STATE_CLI_ACTIVE: number = 3;
        static callerid_STATE_CLI_VERIFIED: number = 2;
        static callerid_STATE_CLI_PENDING: number = 1;
        static callerid_OPTIONS_CHANGE_CLI_LOADED_NEW: number = 3;
        static callerid_OPTIONS_CHANGE_CLI_SET_FAILED: number = 2;
        static callerid_OPTIONS_CHANGE_CLI_SET_SUCCESS: number = 1;
        static callerid_IDCONFIG_AUTOSELECT_CLI: number = 4;
        static callerid_IDCONFIG_USE_SMS_FOR_CLI: number = 2;
        static callerid_IDCONFIG_USE_CLI_FOR_SMS: number = 1;
        static callerid_TYPE_CLI_T_SKYPEIN: number = 3;
        static callerid_TYPE_CLI_T_MOBILE: number = 2;
        static callerid_TYPE_CLI_T_SMS: number = 1;
        static mobile_DATA_USAGE_LEVEL_UNLIMITED: number = 100;
        static mobile_DATA_USAGE_LEVEL_MEDIUM: number = 20;
        static mobile_DATA_USAGE_LEVEL_LOW: number = 10;
        static operating_MEDIA_OM_4G: number = 4;
        static operating_MEDIA_OM_3G: number = 3;
        static operating_MEDIA_OM_FREE_WIRELESS: number = 2;
        static operating_MEDIA_OM_FREE: number = 1;
        static operating_MEDIA_OM_UNKNOWN: number = 0;
        static audiodevice_CAPABILITIES_HAS_BLUETOOTH_INTERFACE: number = 4096;
        static audiodevice_CAPABILITIES_HAS_VIDEO_RENDERING: number = 2048;
        static audiodevice_CAPABILITIES_POSSIBLY_WEBCAM: number = 256;
        static audiodevice_CAPABILITIES_IS_HEADSET: number = 128;
        static audiodevice_CAPABILITIES_IS_WEBCAM: number = 64;
        static audiodevice_CAPABILITIES_HAS_LOWBANDWIDTH_CAPTURE: number = 32;
        static audiodevice_CAPABILITIES_HAS_AUDIO_RENDERING: number = 16;
        static audiodevice_CAPABILITIES_HAS_AUDIO_CAPTURE: number = 8;
        static audiodevice_CAPABILITIES_POSSIBLY_HEADSET: number = 4;
        static audiodevice_CAPABILITIES_HAS_USB_INTERFACE: number = 2;
        static audiodevice_CAPABILITIES_HAS_VIDEO_CAPTURE: number = 1;
        static preparesoundresult_PREPARESOUND_PLAYBACK_NOT_SUPPORTED: number = 6;
        static preparesoundresult_PREPARESOUND_UNSUPPORTED_FILE_FORMAT: number = 5;
        static preparesoundresult_PREPARESOUND_FILE_READ_ERROR: number = 4;
        static preparesoundresult_PREPARESOUND_FILE_TOO_BIG: number = 3;
        static preparesoundresult_PREPARESOUND_FILE_NOT_FOUND: number = 2;
        static preparesoundresult_PREPARESOUND_MISC_ERROR: number = 1;
        static preparesoundresult_PREPARESOUND_SUCCESS: number = 0;
        static setupkey_DISABLE_AUDIO_DEVICE_PROBING: string = '*Lib/QualityMonitor/DisableAudioDeviceProbing';
        static setupkey_BEAMFORMER_MIC_SPACING: string = '*Lib/Audio/BeamformerMicSpacing';
        static setupkey_DISABLE_DIGITAL_FAR_END_AGC: string = '*Lib/Audio/DisableDigitalFarEndAGC';
        static setupkey_DISABLE_DIGITAL_NEAR_END_AGC: string = '*Lib/Audio/DisableDigitalNearEndAGC';
        static setupkey_DISABLE_AGC: string = '*Lib/Audio/DisableAGC';
        static setupkey_DISABLE_NOISE_SUPPRESSOR: string = '*Lib/Audio/DisableNS';
        static setupkey_DISABLE_AEC: string = '*Lib/Audio/DisableAEC';
        static setupkey_DISABLED_CODECS: string = '*Lib/Audio/DisableCodecs';
        static qualitytestresult_QTR_EXCELLENT: number = 5;
        static qualitytestresult_QTR_GOOD: number = 4;
        static qualitytestresult_QTR_AVERAGE: number = 3;
        static qualitytestresult_QTR_POOR: number = 2;
        static qualitytestresult_QTR_CRITICAL: number = 1;
        static qualitytestresult_QTR_UNDEFINED: number = 0;
        static qualitytesttype_QTT_VIDEO_IN: number = 5;
        static qualitytesttype_QTT_NETWORK: number = 4;
        static qualitytesttype_QTT_CPU: number = 3;
        static qualitytesttype_QTT_VIDEO_OUT: number = 2;
        static qualitytesttype_QTT_AUDIO_OUT: number = 1;
        static qualitytesttype_QTT_AUDIO_IN: number = 0;
        static video_DEVICE_TYPE_VIDEO_DEVICE_VIRTUAL: number = 2;
        static video_DEVICE_TYPE_VIDEO_DEVICE_CAPTURE_ADAPTER: number = 1;
        static video_DEVICE_TYPE_VIDEO_DEVICE_USB_CAMERA: number = 0;
        static codec_COMPATIBILITY_CODEC_NOT_COMPATIBLE: number = 2;
        static codec_COMPATIBILITY_CODEC_NOT_COMPATIBLE_BUT_PLATFORM_IS_GVC_SUPPORTED: number = 1;
        static codec_COMPATIBILITY_CODEC_COMPATIBLE: number = 0;
        static livesession_QUALITYRATING_VERY_GOOD: number = 4;
        static livesession_QUALITYRATING_GOOD: number = 3;
        static livesession_QUALITYRATING_AVERAGE: number = 2;
        static livesession_QUALITYRATING_BAD: number = 1;
        static livesession_QUALITYRATING_VERY_BAD: number = 0;
        static leave_REASON_LIVE_PARTICIPANT_COUNT_LIMIT_REACHED: number = 131;
        static leave_REASON_LIVE_TOO_MANY_IDENTITIES: number = 130;
        static leave_REASON_LIVE_PLUGIN_INSTALL_NEEDED: number = 129;
        static leave_REASON_LIVE_EMERGENCY_CALL_DENIED: number = 128;
        static leave_REASON_LIVE_BLOCKED_BY_US: number = 127;
        static leave_REASON_LIVE_TRANSFER_INSUFFICIENT_FUNDS: number = 126;
        static leave_REASON_LIVE_TRANSFER_FAILED: number = 125;
        static leave_REASON_LIVE_ERROR: number = 124;
        static leave_REASON_LIVE_BLOCKED_BY_PRIVACY_SETTINGS: number = 123;
        static leave_REASON_LIVE_LEGACY_ERROR: number = 122;
        static leave_REASON_LIVE_PLAYBACK_ERROR: number = 121;
        static leave_REASON_LIVE_RECORDING_FAILED: number = 120;
        static leave_REASON_LIVE_UNABLE_TO_CONNECT: number = 119;
        static leave_REASON_LIVE_INTERNAL_ERROR: number = 118;
        static leave_REASON_LIVE_PSTN_MISC_ERROR: number = 117;
        static leave_REASON_LIVE_PSTN_CALL_REJECTED: number = 116;
        static leave_REASON_LIVE_NUMBER_UNAVAILABLE: number = 115;
        static leave_REASON_LIVE_PSTN_NETWORK_ERROR: number = 114;
        static leave_REASON_LIVE_PSTN_CALL_TERMINATED: number = 113;
        static leave_REASON_LIVE_PSTN_BUSY: number = 112;
        static leave_REASON_LIVE_PSTN_CALL_TIMED_OUT: number = 111;
        static leave_REASON_LIVE_PSTN_NUMBER_FORBIDDEN: number = 110;
        static leave_REASON_LIVE_PSTN_INVALID_NUMBER: number = 109;
        static leave_REASON_LIVE_PSTN_COULD_NOT_CONNECT_TO_SKYPE_PROXY: number = 108;
        static leave_REASON_LIVE_SKYPEOUT_ACCOUNT_BLOCKED: number = 107;
        static leave_REASON_LIVE_INTERNET_CONNECTION_LOST: number = 106;
        static leave_REASON_LIVE_INSUFFICIENT_FUNDS: number = 105;
        static leave_REASON_LIVE_NO_SKYPEOUT_SUBSCRIPTION: number = 104;
        static leave_REASON_LIVE_CONNECTION_DROPPED: number = 103;
        static leave_REASON_LIVE_BUSY: number = 102;
        static leave_REASON_LIVE_MANUAL: number = 101;
        static leave_REASON_LIVE_NO_ANSWER: number = 100;
        static leave_REASON_RETIRED_INTERNAL_ERROR: number = 8;
        static leave_REASON_RETIRED_CHAT_FULL: number = 7;
        static leave_REASON_RETIRED_UNSUBSCRIBE: number = 6;
        static leave_REASON_RETIRED_DECLINE_ADD: number = 5;
        static leave_REASON_RETIRED_ADDER_MUST_BE_AUTHORIZED: number = 4;
        static leave_REASON_RETIRED_ADDER_MUST_BE_FRIEND: number = 3;
        static leave_REASON_RETIRED_USER_INCAPABLE: number = 2;
        static leave_REASON_LEAVE_REASON_NONE: number = 0;
        static transfer_SENDFILE_ERROR_TRANSFER_TOO_MANY_PARALLEL: number = 3;
        static transfer_SENDFILE_ERROR_TRANSFER_OPEN_FAILED: number = 2;
        static transfer_SENDFILE_ERROR_TRANSFER_BAD_FILENAME: number = 1;
        static transfer_SENDFILE_ERROR_TRANSFER_OPEN_SUCCESS: number = 0;
        static contact_SYNC_TYPE_CONTACT_SCD: number = 0;
        static unifyresult_UNIFY_TOO_MANY_OUTLOOK: number = 4;
        static unifyresult_UNIFY_TOO_MANY_SKYPE: number = 3;
        static unifyresult_UNIFY_ALREADY_UNIFIED: number = 2;
        static unifyresult_UNIFY_INVALID_IDENTITY: number = 1;
        static unifyresult_UNIFY_OK: number = 0;
        static normalizeresult_SKYPENAME_SHORTER_THAN_6_CHARS: number = 7;
        static normalizeresult_SKYPENAME_STARTS_WITH_NONALPHA: number = 6;
        static normalizeresult_PSTN_NUMBER_HAS_INVALID_PREFIX: number = 5;
        static normalizeresult_PSTN_NUMBER_TOO_SHORT: number = 4;
        static normalizeresult_IDENTITY_CONTAINS_INVALID_CHAR: number = 3;
        static normalizeresult_IDENTITY_TOO_LONG: number = 2;
        static normalizeresult_IDENTITY_EMPTY: number = 1;
        static normalizeresult_IDENTITY_OK: number = 0;
        static identitytype_LYNC: number = 12;
        static identitytype_PASSPORT: number = 11;
        static identitytype_XMPP: number = 10;
        static identitytype_EXTERNAL: number = 9;
        static identitytype_CONFERENCE: number = 8;
        static identitytype_PSTN_UNDISCLOSED: number = 7;
        static identitytype_PSTN_FREE: number = 6;
        static identitytype_PSTN_EMERGENCY: number = 5;
        static identitytype_PSTN: number = 4;
        static identitytype_SKYPE_UNDISCLOSED: number = 3;
        static identitytype_SKYPE_MYSELF: number = 2;
        static identitytype_SKYPE: number = 1;
        static identitytype_UNRECOGNIZED: number = 0;
        static setupkey_ALLOW_INCOMING_LYNC_ID: string = '*Lib/Call/AllowIncomingLyncId';
        static setupkey_ALLOW_DEBUG_DATA_COLLECTION: string = 'Lib/Sherlock/AllowDebugDataCollection';
        static setupkey_DB_PAGE_SIZE: string = '*Lib/DbManager/PageSize';
        static setupkey_DB_STORAGE_QUOTA_KB: string = '*Lib/DbManager/StorageQuotaKb';

        setIMEI(imei: string): void {
            console.warn('shimmed function WrSkyLib.setIMEI');
        }

        setAndroidId(androidId: string): void {
            console.warn('shimmed function WrSkyLib.setAndroidId');
        }

        getContactGroup(objectId: number): ContactGroup {
            throw new Error('shimmed function WrSkyLib.getContactGroup');
        }

        getHardwiredContactGroup(type: number): number {
            throw new Error('shimmed function WrSkyLib.getHardwiredContactGroup');
        }

        getCustomContactGroups(groups: VectUnsignedInt): void {
            console.warn('shimmed function WrSkyLib.getCustomContactGroups');
        }

        createCustomContactGroup(group: ContactGroup): Boolean {
            throw new Error('shimmed function WrSkyLib.createCustomContactGroup');
        }

        getContactType(identity: string): number {
            throw new Error('shimmed function WrSkyLib.getContactType');
        }

        getContact__(identity: string, contact: Contact): Boolean {
            throw new Error('shimmed function WrSkyLib.getContact__');
        }

        findContactBySpeedDial(dial: string, contact: Contact): Boolean {
            throw new Error('shimmed function WrSkyLib.findContactBySpeedDial');
        }

        findContactByPstnNumber(number: string, contact: Contact): SkyLibFindContactByPstnNumberResult {
            throw new Error('shimmed function WrSkyLib.findContactByPstnNumber');
        }

        findContactsByEmail(email: string, contacts: VectUnsignedInt): void {
            console.warn('shimmed function WrSkyLib.findContactsByEmail');
        }

        getIdentityType(identity: string): number {
            throw new Error('shimmed function WrSkyLib.getIdentityType');
        }

        canUnifyContacts(contacts: VectUnsignedInt): SkyLibCanUnifyContactsResult {
            throw new Error('shimmed function WrSkyLib.canUnifyContacts');
        }

        unifyContacts(contacts: VectUnsignedInt): SkyLibUnifyContactsResult {
            throw new Error('shimmed function WrSkyLib.unifyContacts');
        }

        unUnifyContact(masterObjectID: number, servantObjectID: number): Boolean {
            throw new Error('shimmed function WrSkyLib.unUnifyContact');
        }

        forceEasContactsSync(): void {
            console.warn('shimmed function WrSkyLib.forceEasContactsSync');
        }

        getContactSearch(objectId: number): ContactSearch {
            throw new Error('shimmed function WrSkyLib.getContactSearch');
        }

        createContactSearch(search: ContactSearch): void {
            console.warn('shimmed function WrSkyLib.createContactSearch');
        }

        createBasicContactSearch(text: string, search: ContactSearch): Boolean {
            throw new Error('shimmed function WrSkyLib.createBasicContactSearch');
        }

        createIdentitySearch(identity: string, search: ContactSearch): Boolean {
            throw new Error('shimmed function WrSkyLib.createIdentitySearch');
        }

        findPromotedSCDContacts(updatesOnly: Boolean): number {
            throw new Error('shimmed function WrSkyLib.findPromotedSCDContacts');
        }

        getParticipant(objectId: number): Participant {
            throw new Error('shimmed function WrSkyLib.getParticipant');
        }

        createConference(): Conversation {
            throw new Error('shimmed function WrSkyLib.createConference');
        }

        createConference_1(conference: Conversation): Boolean {
            throw new Error('shimmed function WrSkyLib.createConference_1');
        }

        getConversationByConvoID_(convoID: number, conversation: Conversation): Boolean {
            throw new Error('shimmed function WrSkyLib.getConversationByConvoID_');
        }

        getConversationByIdentity_(convoIdentity: string, conversation: Conversation, matchPSTN: Boolean): Boolean {
            throw new Error('shimmed function WrSkyLib.getConversationByIdentity_');
        }

        getConversationByParticipants(participantIdentities: VectGIString, conversation: Conversation, createIfNonExisting: Boolean, ignoreBookmarkedOrNamed: Boolean): Boolean {
            throw new Error('shimmed function WrSkyLib.getConversationByParticipants');
        }

        getConversationByBlob(joinBlob: string, alsoJoin: Boolean): Conversation {
            throw new Error('shimmed function WrSkyLib.getConversationByBlob');
        }

        getConversationByBlob_1(joinBlob: string, conversation: Conversation, alsoJoin: Boolean): Boolean {
            throw new Error('shimmed function WrSkyLib.getConversationByBlob_1');
        }

        getConversationByCallGUID(callGUID: string): Conversation {
            throw new Error('shimmed function WrSkyLib.getConversationByCallGUID');
        }

        getConversationByCallGUID_1(callGUID: string, conversation: Conversation): Boolean {
            throw new Error('shimmed function WrSkyLib.getConversationByCallGUID_1');
        }

        getConversationList(conversations: VectUnsignedInt, type: number): void {
            console.warn('shimmed function WrSkyLib.getConversationList');
        }

        getUnconsumedConversationsCount(type: number): number {
            throw new Error('shimmed function WrSkyLib.getUnconsumedConversationsCount');
        }

        joinExistingConferenceCall(hostIdentity: string, accessToken: string): Boolean {
            throw new Error('shimmed function WrSkyLib.joinExistingConferenceCall');
        }

        callExistingConference(participants: VectGIString, conversationIdentity: string, conversation: Conversation, accessToken: string, callId: string): Boolean {
            throw new Error('shimmed function WrSkyLib.callExistingConference');
        }

        getConversationMessage(objectId: number): Message {
            throw new Error('shimmed function WrSkyLib.getConversationMessage');
        }

        getMessageByGuid(guid: Binary, message: Message): Boolean {
            throw new Error('shimmed function WrSkyLib.getMessageByGuid');
        }

        getMessageList(messages: VectUnsignedInt, fromTimestampInc: number, toTimestampExc: number): void {
            console.warn('shimmed function WrSkyLib.getMessageList');
        }

        getMessageListByType(type: number, latestPerConvOnly: Boolean, messages: VectUnsignedInt, fromTimestampInc: number, toTimestampExc: number): void {
            console.warn('shimmed function WrSkyLib.getMessageListByType');
        }

        searchMessages(text: string, limit: number): number {
            throw new Error('shimmed function WrSkyLib.searchMessages');
        }

        hasCalled(identity: string): Boolean {
            throw new Error('shimmed function WrSkyLib.hasCalled');
        }

        clearInbox(upToTimestamp: number): void {
            console.warn('shimmed function WrSkyLib.clearInbox');
        }

        fillInbox(lookBackTimestamp: number, dryRun: Boolean): Boolean {
            throw new Error('shimmed function WrSkyLib.fillInbox');
        }

        consumeAllConversations(): void {
            console.warn('shimmed function WrSkyLib.consumeAllConversations');
        }

        deleteAllMessages(): void {
            console.warn('shimmed function WrSkyLib.deleteAllMessages');
        }

        getChatMemberCountLimit(): number {
            throw new Error('shimmed function WrSkyLib.getChatMemberCountLimit');
        }

        getVideo(objectId: number): Video {
            throw new Error('shimmed function WrSkyLib.getVideo');
        }

        getAvailableVideoDevices(deviceNames: VectGIString, devicePaths: VectGIString): number {
            throw new Error('shimmed function WrSkyLib.getAvailableVideoDevices');
        }

        getVideoDeviceType(deviceName: string, devicePath: string): number {
            throw new Error('shimmed function WrSkyLib.getVideoDeviceType');
        }

        hasVideoDeviceCapability(deviceName: string, devicePath: string, cap: number): Boolean {
            throw new Error('shimmed function WrSkyLib.hasVideoDeviceCapability');
        }

        displayVideoDeviceTuningDialog(deviceName: string, devicePath: string): void {
            console.warn('shimmed function WrSkyLib.displayVideoDeviceTuningDialog');
        }

        createLocalVideo(deviceHandle: string): Video {
            throw new Error('shimmed function WrSkyLib.createLocalVideo');
        }

        createLocalVideo_1(type: number, deviceName: string, devicePath: string): number {
            throw new Error('shimmed function WrSkyLib.createLocalVideo_1');
        }

        createPreviewVideo(deviceHandle: string): Video {
            throw new Error('shimmed function WrSkyLib.createPreviewVideo');
        }

        createPreviewVideo_1(type: number, deviceName: string, devicePath: string): number {
            throw new Error('shimmed function WrSkyLib.createPreviewVideo_1');
        }

        videoCommand(command: string): string {
            throw new Error('shimmed function WrSkyLib.videoCommand');
        }

        startMonitoringQuality(withUser: string, excludeNetworkTest: Boolean): void {
            console.warn('shimmed function WrSkyLib.startMonitoringQuality');
        }

        stopMonitoringQuality(withUser: string, justStop: Boolean): number {
            throw new Error('shimmed function WrSkyLib.stopMonitoringQuality');
        }

        getVoicemail(objectId: number): Voicemail {
            throw new Error('shimmed function WrSkyLib.getVoicemail');
        }

        getGreeting(skypeName: string, greeting: Voicemail): Boolean {
            throw new Error('shimmed function WrSkyLib.getGreeting');
        }

        prepareSound(data: Binary, sound: Binary): number {
            throw new Error('shimmed function WrSkyLib.prepareSound');
        }

        prepareSoundFromFile(datafile: Filename, sound: Binary): number {
            throw new Error('shimmed function WrSkyLib.prepareSoundFromFile');
        }

        playStart(soundid: number, sound: Binary, loop: Boolean, useCallOutDevice: Boolean): void {
            console.warn('shimmed function WrSkyLib.playStart');
        }

        playStartFromFile(soundid: number, datafile: Filename, loop: Boolean, useCallOutDevice: Boolean): number {
            throw new Error('shimmed function WrSkyLib.playStartFromFile');
        }

        playStop(soundid: number): void {
            console.warn('shimmed function WrSkyLib.playStop');
        }

        startRecordingTest(recordAndPlaybackData: Boolean): void {
            console.warn('shimmed function WrSkyLib.startRecordingTest');
        }

        stopRecordingTest(): void {
            console.warn('shimmed function WrSkyLib.stopRecordingTest');
        }

        stopPlayDTMF(): void {
            console.warn('shimmed function WrSkyLib.stopPlayDTMF');
        }

        getAvailableOutputDevices(handleList: VectGIString, nameList: VectGIString, productIdList: VectGIString): Boolean {
            throw new Error('shimmed function WrSkyLib.getAvailableOutputDevices');
        }

        getAvailableRecordingDevices(handleList: VectGIString, nameList: VectGIString, productIdList: VectGIString): Boolean {
            throw new Error('shimmed function WrSkyLib.getAvailableRecordingDevices');
        }

        selectSoundDevices(callInDevice: string, callOutDevice: string, waveOutDevice: string): void {
            console.warn('shimmed function WrSkyLib.selectSoundDevices');
        }

        getAudioDeviceCapabilities(deviceHandle: string): SkyLibGetAudioDeviceCapabilitiesResult {
            throw new Error('shimmed function WrSkyLib.getAudioDeviceCapabilities');
        }

        getNrgLevels(): SkyLibGetNrgLevelsResult {
            throw new Error('shimmed function WrSkyLib.getNrgLevels');
        }

        voiceCommand(command: string): string {
            throw new Error('shimmed function WrSkyLib.voiceCommand');
        }

        getSpeakerVolume(): number {
            throw new Error('shimmed function WrSkyLib.getSpeakerVolume');
        }

        setSpeakerVolume(volume: number): void {
            console.warn('shimmed function WrSkyLib.setSpeakerVolume');
        }

        getMicVolume(): number {
            throw new Error('shimmed function WrSkyLib.getMicVolume');
        }

        setMicVolume(volume: number): void {
            console.warn('shimmed function WrSkyLib.setMicVolume');
        }

        isSpeakerMuted(): SkyLibIsSpeakerMutedResult {
            throw new Error('shimmed function WrSkyLib.isSpeakerMuted');
        }

        isMicrophoneMuted(): SkyLibIsMicrophoneMutedResult {
            throw new Error('shimmed function WrSkyLib.isMicrophoneMuted');
        }

        muteSpeakers(mute: Boolean): Boolean {
            throw new Error('shimmed function WrSkyLib.muteSpeakers');
        }

        muteMicrophone(mute: Boolean): Boolean {
            throw new Error('shimmed function WrSkyLib.muteMicrophone');
        }

        setOperatingMedia(media: number, maxUplinkBps: number, maxDownlinkBps: number): void {
            console.warn('shimmed function WrSkyLib.setOperatingMedia');
        }

        setMobileDataUsageLevel(usage: number): void {
            console.warn('shimmed function WrSkyLib.setMobileDataUsageLevel');
        }

        getSms(objectId: number): Sms {
            throw new Error('shimmed function WrSkyLib.getSms');
        }

        requestConfirmationCode(type: number, number: string, sms: Sms): Boolean {
            throw new Error('shimmed function WrSkyLib.requestConfirmationCode');
        }

        submitConfirmationCode(number: string, code: string, sms: Sms): Boolean {
            throw new Error('shimmed function WrSkyLib.submitConfirmationCode');
        }

        createOutgoingSms(sms: Sms): Boolean {
            throw new Error('shimmed function WrSkyLib.createOutgoingSms');
        }

        getValidatedSmsNumbers(numbers: VectGIString): void {
            console.warn('shimmed function WrSkyLib.getValidatedSmsNumbers');
        }

        getLastConfirmationNumber(): string {
            throw new Error('shimmed function WrSkyLib.getLastConfirmationNumber');
        }

        setCallerIDOptions(smsID: string, callerID: string, idconfig: number): number {
            throw new Error('shimmed function WrSkyLib.setCallerIDOptions');
        }

        getCallerIDOptions(): SkyLibGetCallerIDOptionsResult {
            throw new Error('shimmed function WrSkyLib.getCallerIDOptions');
        }

        getTransfer(objectId: number): Transfer {
            throw new Error('shimmed function WrSkyLib.getTransfer');
        }

        contentItemGet(uri: string, block: Boolean): SkyLibContentItemGetResult {
            throw new Error('shimmed function WrSkyLib.contentItemGet');
        }

        contentItemDelete(id: number): void {
            console.warn('shimmed function WrSkyLib.contentItemDelete');
        }

        contentItemGetType(id: number): string {
            throw new Error('shimmed function WrSkyLib.contentItemGetType');
        }

        contentItemGetUri(id: number): string {
            throw new Error('shimmed function WrSkyLib.contentItemGetUri');
        }

        contentItemGetBody(id: number, body: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.contentItemGetBody');
        }

        contentItemGetMeta(id: number): string {
            throw new Error('shimmed function WrSkyLib.contentItemGetMeta');
        }

        contentItemExposingNow(id: number, yes: Boolean): void {
            console.warn('shimmed function WrSkyLib.contentItemExposingNow');
        }

        contentItemExecuted(id: number): void {
            console.warn('shimmed function WrSkyLib.contentItemExecuted');
        }

        contentItemClosed(id: number, count: Boolean): void {
            console.warn('shimmed function WrSkyLib.contentItemClosed');
        }

        contentItemGetChildNames(id: number, list: VectGIString): Boolean {
            throw new Error('shimmed function WrSkyLib.contentItemGetChildNames');
        }

        contentItemGetChildItem(id: number, suburi: string): SkyLibContentItemGetChildItemResult {
            throw new Error('shimmed function WrSkyLib.contentItemGetChildItem');
        }

        contentItemRunBytecode(id: number): number {
            throw new Error('shimmed function WrSkyLib.contentItemRunBytecode');
        }

        contentItemGetChildCount(id: number, suburi: string, any: Boolean): number {
            throw new Error('shimmed function WrSkyLib.contentItemGetChildCount');
        }

        setInstallContentBundleName(filename: Filename): Boolean {
            throw new Error('shimmed function WrSkyLib.setInstallContentBundleName');
        }

        getAlert(objectId: number): Alert {
            throw new Error('shimmed function WrSkyLib.getAlert');
        }

        getRecentAlerts(maxPageResults: number, page: number, alerts: VectUnsignedInt): Boolean {
            throw new Error('shimmed function WrSkyLib.getRecentAlerts');
        }

        getRecentAlertsOfType(maxPageResults: number, page: number, types: VectUnsignedInt, alerts: VectUnsignedInt): Boolean {
            throw new Error('shimmed function WrSkyLib.getRecentAlertsOfType');
        }

        getPriceQuote(objectId: number): PriceQuote {
            throw new Error('shimmed function WrSkyLib.getPriceQuote');
        }

        issuePriceQuote(buyer: string, type: number, description: string, price: number, precision: number, currency: string, referredObjectID: number, priceQuote: PriceQuote): Boolean {
            throw new Error('shimmed function WrSkyLib.issuePriceQuote');
        }

        createSignedToken(target: string, token: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.createSignedToken');
        }

        partnerQueryData(qt: number, partner: number, params: Binary): number {
            throw new Error('shimmed function WrSkyLib.partnerQueryData');
        }

        getAccount(objectId: number): Account {
            throw new Error('shimmed function WrSkyLib.getAccount');
        }

        getAccount_(identity: string, account: Account): Boolean {
            throw new Error('shimmed function WrSkyLib.getAccount_');
        }

        getExistingAccounts(accountNameList: VectGIString): Boolean {
            throw new Error('shimmed function WrSkyLib.getExistingAccounts');
        }

        getDefaultAccountName(): string {
            throw new Error('shimmed function WrSkyLib.getDefaultAccountName');
        }

        getAccessSession(objectId: number): AccessSession {
            throw new Error('shimmed function WrSkyLib.getAccessSession');
        }

        createAccessSession(session: AccessSession): Boolean {
            throw new Error('shimmed function WrSkyLib.createAccessSession');
        }

        accessPaymentSubmit(): Boolean {
            throw new Error('shimmed function WrSkyLib.accessPaymentSubmit');
        }

        accessPaymentPoll(): number {
            throw new Error('shimmed function WrSkyLib.accessPaymentPoll');
        }

        accessPaymentReset(): void {
            console.warn('shimmed function WrSkyLib.accessPaymentReset');
        }

        accessPaymentSetString(id: number, value: string): Boolean {
            throw new Error('shimmed function WrSkyLib.accessPaymentSetString');
        }

        accessPaymentGetString(id: number): SkyLibAccessPaymentGetStringResult {
            throw new Error('shimmed function WrSkyLib.accessPaymentGetString');
        }

        accessPaymentSetInt(id: number, value: number): Boolean {
            throw new Error('shimmed function WrSkyLib.accessPaymentSetInt');
        }

        accessPaymentGetInt(id: number): SkyLibAccessPaymentGetIntResult {
            throw new Error('shimmed function WrSkyLib.accessPaymentGetInt');
        }

        sendHttpRequest(method: number, uri: string, payload: string, headers: string, userdata: number): number {
            throw new Error('shimmed function WrSkyLib.sendHttpRequest');
        }

        createHttpStream(method: number, uri: string, headers: string, userdata: number): number {
            throw new Error('shimmed function WrSkyLib.createHttpStream');
        }

        sendHttpStream(streamID: number, payload: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.sendHttpStream');
        }

        clearHttpCookies(): void {
            console.warn('shimmed function WrSkyLib.clearHttpCookies');
        }

        getVCard(vcard: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.getVCard');
        }

        getVCardOwner(vcard: Binary): string {
            throw new Error('shimmed function WrSkyLib.getVCardOwner');
        }

        importProfile(vcard: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.importProfile');
        }

        importBuddylist(vcard: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.importBuddylist');
        }

        parseVCard(vcard: Binary, dest: SkyMetadata): Boolean {
            throw new Error('shimmed function WrSkyLib.parseVCard');
        }

        contactToVCard(contactObjectID: number): string {
            throw new Error('shimmed function WrSkyLib.contactToVCard');
        }

        vcardToContact(vcard: string): number {
            throw new Error('shimmed function WrSkyLib.vcardToContact');
        }

        attachPublicAPIClient(allowFilterCommand: Boolean): number {
            throw new Error('shimmed function WrSkyLib.attachPublicAPIClient');
        }

        detachPublicAPIClient(clientID: number): void {
            console.warn('shimmed function WrSkyLib.detachPublicAPIClient');
        }

        publicAPIRequest(clientID: number, request: string): string {
            throw new Error('shimmed function WrSkyLib.publicAPIRequest');
        }

        queryContentListing(src: string, clc: number): SkyLibQueryContentListingResult {
            throw new Error('shimmed function WrSkyLib.queryContentListing');
        }

        setUIIntProp(key: number, value: number): void {
            console.warn('shimmed function WrSkyLib.setUIIntProp');
        }

        setUIStrProp(key: number, value: string): void {
            console.warn('shimmed function WrSkyLib.setUIStrProp');
        }

        getUIIntProp(key: number): number {
            throw new Error('shimmed function WrSkyLib.getUIIntProp');
        }

        getUIStrProp(key: number, defaultValue: string): string {
            throw new Error('shimmed function WrSkyLib.getUIStrProp');
        }

        deleteUIProp(key: number): void {
            console.warn('shimmed function WrSkyLib.deleteUIProp');
        }

        getIntLibProp(key: number): number {
            throw new Error('shimmed function WrSkyLib.getIntLibProp');
        }

        getStrLibProp(key: number, defaultValue: string): string {
            throw new Error('shimmed function WrSkyLib.getStrLibProp');
        }

        getStrLibPropInternal(lib_key: number, defaultValue: string): string {
            throw new Error('shimmed function WrSkyLib.getStrLibPropInternal');
        }

        getTotalOnlineUserCount(): number {
            throw new Error('shimmed function WrSkyLib.getTotalOnlineUserCount');
        }

        reportStatsEvent(statsType: number, attributes: Binary, samplingValue: string): Boolean {
            throw new Error('shimmed function WrSkyLib.reportStatsEvent');
        }

        checkClientUpgrade(): Boolean {
            throw new Error('shimmed function WrSkyLib.checkClientUpgrade');
        }

        changeBackgroundMode(inBackground: Boolean): void {
            console.warn('shimmed function WrSkyLib.changeBackgroundMode');
        }

        setNetworkActivityLevel(level: number): Boolean {
            throw new Error('shimmed function WrSkyLib.setNetworkActivityLevel');
        }

        executeBackgroundTask(): void {
            console.warn('shimmed function WrSkyLib.executeBackgroundTask');
        }

        changeOperationMode(level: number): void {
            console.warn('shimmed function WrSkyLib.changeOperationMode');
        }

        getISOLanguageInfo(languageCodeList: VectGIString, languageNameList: VectGIString): void {
            console.warn('shimmed function WrSkyLib.getISOLanguageInfo');
        }

        getISOCountryInfo(countryCodeList: VectGIString, countryNameList: VectGIString, countryPrefixList: VectUnsignedInt, countryDialExampleList: VectGIString): void {
            console.warn('shimmed function WrSkyLib.getISOCountryInfo');
        }

        getSupportedUILanguageList(uiLanguageCodeList: VectGIString): void {
            console.warn('shimmed function WrSkyLib.getSupportedUILanguageList');
        }

        getISOFormattedCurrency(amount: string, precision: number, countryCode: string): string {
            throw new Error('shimmed function WrSkyLib.getISOFormattedCurrency');
        }

        getISOCountryCodebyPhoneNo(number: string): string {
            throw new Error('shimmed function WrSkyLib.getISOCountryCodebyPhoneNo');
        }

        storeLocal(key: string, value: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.storeLocal');
        }

        fetchLocal(key: string, value: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.fetchLocal');
        }

        app2AppCreate(appname: string): Boolean {
            throw new Error('shimmed function WrSkyLib.app2AppCreate');
        }

        app2AppDelete(appname: string): Boolean {
            throw new Error('shimmed function WrSkyLib.app2AppDelete');
        }

        app2AppConnect(appname: string, skypename: string): Boolean {
            throw new Error('shimmed function WrSkyLib.app2AppConnect');
        }

        app2AppDisconnect(appname: string, stream: string): Boolean {
            throw new Error('shimmed function WrSkyLib.app2AppDisconnect');
        }

        app2AppWrite(appname: string, stream: string, data: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.app2AppWrite');
        }

        app2AppDatagram(appname: string, stream: string, data: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.app2AppDatagram');
        }

        app2AppRead(appname: string, stream: string, data: Binary): Boolean {
            throw new Error('shimmed function WrSkyLib.app2AppRead');
        }

        app2AppGetConnectableUsers(appname: string, users: VectGIString): Boolean {
            throw new Error('shimmed function WrSkyLib.app2AppGetConnectableUsers');
        }

        app2AppGetStreamsList(appname: string, listType: number, streams: VectGIString, receivedSizes: VectUnsignedInt): Boolean {
            throw new Error('shimmed function WrSkyLib.app2AppGetStreamsList');
        }

        getVideoMessage(objectId: number): VideoMessage {
            throw new Error('shimmed function WrSkyLib.getVideoMessage');
        }

        createVideoMessageWithFile(filename: string, title: string, description: string, result: VideoMessage, thumbnail: string, type: string): Boolean {
            throw new Error('shimmed function WrSkyLib.createVideoMessageWithFile');
        }

        getVideoMessagingEntitlement(ids: VectGIString, values: VectUnsignedInt): SkyLibGetVideoMessagingEntitlementResult {
            throw new Error('shimmed function WrSkyLib.getVideoMessagingEntitlement');
        }

        getMediaDocument(objectId: number): MediaDocument {
            throw new Error('shimmed function WrSkyLib.getMediaDocument');
        }

        createMediaDocument(type: number, mediaDocument: MediaDocument): Boolean {
            throw new Error('shimmed function WrSkyLib.createMediaDocument');
        }

        getDefaultContentId(type: number): SkyLibGetDefaultContentIdResult {
            throw new Error('shimmed function WrSkyLib.getDefaultContentId');
        }

        requestSSOToken(): number {
            throw new Error('shimmed function WrSkyLib.requestSSOToken');
        }

        requestWebSession(): number {
            throw new Error('shimmed function WrSkyLib.requestWebSession');
        }

        requestWebSessionWithPassword(skypename: string, password: string): number {
            throw new Error('shimmed function WrSkyLib.requestWebSessionWithPassword');
        }

        requestSkypeToken(): number {
            throw new Error('shimmed function WrSkyLib.requestSkypeToken');
        }

        requestAccessToken(partnerId: string, scope: string, bypassCache: Boolean): number {
            throw new Error('shimmed function WrSkyLib.requestAccessToken');
        }

        putAuthTokens(partnerId: string, scopes: VectGIString, accessToken: string, expirationTime: number, refreshToken: string): Boolean {
            throw new Error('shimmed function WrSkyLib.putAuthTokens');
        }

        linkAccountWithPartner(partnerId: string, accessToken: string, skypename: string, password: string, reason: string, allowSpam: Boolean, allowSms: Boolean): Boolean {
            throw new Error('shimmed function WrSkyLib.linkAccountWithPartner');
        }

        getSkypeLinkInfo(partnerId: string, accessToken: string): Boolean {
            throw new Error('shimmed function WrSkyLib.getSkypeLinkInfo');
        }

        getPartnerLinkInfo(partnerId: string, skypename: string, password: string): Boolean {
            throw new Error('shimmed function WrSkyLib.getPartnerLinkInfo');
        }

        getSuggestedAccounts(partnerId: string, accessToken: string): Boolean {
            throw new Error('shimmed function WrSkyLib.getSuggestedAccounts');
        }

        getAccountAvatar(partnerId: string, accessToken: string, username: string, password: string, skypename: string): Boolean {
            throw new Error('shimmed function WrSkyLib.getAccountAvatar');
        }

        handlePushNotification(eventType: number, nodeSpecificNotificationPayload: Binary, genericNotificationPayload: Binary): number {
            throw new Error('shimmed function WrSkyLib.handlePushNotification');
        }

        registerContexts(serviceType: number, platform: string, templateKey: string, contexts: VectGIString, registrationTokens: VectGIString, registrationTTLs: VectUnsignedInt): number {
            throw new Error('shimmed function WrSkyLib.registerContexts');
        }

        unregisterContexts(contexts: VectGIString): number {
            throw new Error('shimmed function WrSkyLib.unregisterContexts');
        }

        reregisterContexts(): number {
            throw new Error('shimmed function WrSkyLib.reregisterContexts');
        }

        setLocalizedString(localizedString: number, value: string): void {
            console.warn('shimmed function WrSkyLib.setLocalizedString');
        }

        getServerTime(): number {
            throw new Error('shimmed function WrSkyLib.getServerTime');
        }

        getSeamlessCapable(identity: string): void {
            console.warn('shimmed function WrSkyLib.getSeamlessCapable');
        }

        setSeamlessCapable(capable: Boolean): void {
            console.warn('shimmed function WrSkyLib.setSeamlessCapable');
        }

        setUserActive(isActive: Boolean): void {
            console.warn('shimmed function WrSkyLib.setUserActive');
        }

        getDebugString(debugString: number): string {
            throw new Error('shimmed function WrSkyLib.getDebugString');
        }

        findObjectByDbID(type: number, dbID: number): number {
            throw new Error('shimmed function WrSkyLib.findObjectByDbID');
        }

        getObjectType(objectID: number): number {
            throw new Error('shimmed function WrSkyLib.getObjectType');
        }

        getAccountByIdentity(identity: string): Account {
            throw new Error('shimmed function WrSkyLib.getAccountByIdentity');
        }

        getContact(objectID: number): Contact {
            throw new Error('shimmed function WrSkyLib.getContact');
        }

        getContactByIdentity(identity: string): Contact {
            throw new Error('shimmed function WrSkyLib.getContactByIdentity');
        }

        getConversationByConvoId(convoID: number): Conversation {
            throw new Error('shimmed function WrSkyLib.getConversationByConvoId');
        }

        getConversationByIdentity(identity: string): Conversation {
            throw new Error('shimmed function WrSkyLib.getConversationByIdentity');
        }

        getConversation(objectID: number): Conversation {
            throw new Error('shimmed function WrSkyLib.getConversation');
        }

        getConversationTable(type: number, properties: number[]): number[] {
            throw new Error('shimmed function WrSkyLib.getConversationTable');
        }

        isMe(identity: string): Boolean {
            throw new Error('shimmed function WrSkyLib.isMe');
        }

        loginWithOAuth(partnerId: string, accessToken: string, refreshToken: string, savePwd: Boolean, saveDataLocally: Boolean): void {
            console.warn('shimmed function WrSkyLib.loginWithOAuth');
        }

        finishLogin(): void {
            console.warn('shimmed function WrSkyLib.finishLogin');
        }

        logoutUser(clearCachedCredentials: Boolean): void {
            console.warn('shimmed function WrSkyLib.logoutUser');
        }

        invalidateUserLogin(): void {
            console.warn('shimmed function WrSkyLib.invalidateUserLogin');
        }

        subscribePropChange(props: number[]): void {
            console.warn('shimmed function WrSkyLib.subscribePropChange');
        }

        registerContextsWin8(platform: string, templateKey: string, uri: string, ttl: number): void {
            console.warn('shimmed function WrSkyLib.registerContextsWin8');
        }

        handleCallNotification(eventType: number, nodeSpecificPayload: string, genericPayload: string): number {
            throw new Error('shimmed function WrSkyLib.handleCallNotification');
        }

        handleNotification(notificationContent: string): void {
            console.warn('shimmed function WrSkyLib.handleNotification');
        }

        declareExtendedProp(objectType: number, columnName: string, propKey: number, valueType: number): void {
            console.warn('shimmed function WrSkyLib.declareExtendedProp');
        }

        getLibStatus(): number {
            throw new Error('shimmed function WrSkyLib.getLibStatus');
        }

        start(block: Boolean): void {
            console.warn('shimmed function WrSkyLib.start');
        }

        getSpeakerLevel(): number {
            throw new Error('shimmed function WrSkyLib.getSpeakerLevel');
        }

        getMicLevel(): number {
            throw new Error('shimmed function WrSkyLib.getMicLevel');
        }

        getVideoDevicePath(deviceHandle: string): string {
            throw new Error('shimmed function WrSkyLib.getVideoDevicePath');
        }

        getVideoDeviceHandles(): string[] {
            throw new Error('shimmed function WrSkyLib.getVideoDeviceHandles');
        }

        getActiveVideoDeviceHandle(): string {
            throw new Error('shimmed function WrSkyLib.getActiveVideoDeviceHandle');
        }

        getAvailableOutputDevicesAsync(handleList: VectGIString, nameList: VectGIString, productIdList: VectGIString): Windows.Foundation.IAsyncOperation<Boolean> {
            throw new Error('shimmed function WrSkyLib.getAvailableOutputDevicesAsync');
        }

        getAvailableRecordingDevicesAsync(handleList: VectGIString, nameList: VectGIString, productIdList: VectGIString): Windows.Foundation.IAsyncOperation<Boolean> {
            throw new Error('shimmed function WrSkyLib.getAvailableRecordingDevicesAsync');
        }

        close(): void {
            console.warn('shimmed function WrSkyLib.close');
        }

        static identitytypetoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.identitytypetoString');
        }

        static normalizeresulttoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.normalizeresulttoString');
        }

        static identitiesMatch(identityA: string, identityB: string): Boolean {
            throw new Error('shimmed function WrSkyLib.identitiesMatch');
        }

        static normalizeIdentity_(original: string, isNewSkypeName: Boolean): SkyLibNormalizeIdentityResult {
            throw new Error('shimmed function WrSkyLib.normalizeIdentity_');
        }

        static normalizePSTNWithCountry_(original: string, countryPrefix: number): SkyLibNormalizePSTNWithCountryResult {
            throw new Error('shimmed function WrSkyLib.normalizePSTNWithCountry_');
        }

        static unifyresulttoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.unifyresulttoString');
        }

        static getOptimalAgeRanges(rangeList: VectUnsignedInt): void {
            console.warn('shimmed function WrSkyLib.getOptimalAgeRanges');
        }

        static contact_SYNC_TYPEToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.contact_SYNC_TYPEToString');
        }

        static transfer_SENDFILE_ERRORToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.transfer_SENDFILE_ERRORToString');
        }

        static leave_REASONToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.leave_REASONToString');
        }

        static livesession_QUALITYRATINGToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.livesession_QUALITYRATINGToString');
        }

        static codec_COMPATIBILITYToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.codec_COMPATIBILITYToString');
        }

        static contentEncode_(source: string, raw_xml: Boolean): SkyLibContentEncodeResult {
            throw new Error('shimmed function WrSkyLib.contentEncode_');
        }

        static contentStripXML(source: string): SkyLibContentStripXMLResult {
            throw new Error('shimmed function WrSkyLib.contentStripXML');
        }

        static contentGetEditable(xml_source: string): SkyLibContentGetEditableResult {
            throw new Error('shimmed function WrSkyLib.contentGetEditable');
        }

        static contentGetRichEditable(xml_source: string, preserve_tags: VectGIString): SkyLibContentGetRichEditableResult {
            throw new Error('shimmed function WrSkyLib.contentGetRichEditable');
        }

        static video_DEVICE_TYPEToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.video_DEVICE_TYPEToString');
        }

        static qualitytesttypetoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.qualitytesttypetoString');
        }

        static qualitytestresulttoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.qualitytestresulttoString');
        }

        static preparesoundresulttoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.preparesoundresulttoString');
        }

        static audiodevice_CAPABILITIESToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.audiodevice_CAPABILITIESToString');
        }

        static operating_MEDIAToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.operating_MEDIAToString');
        }

        static mobile_DATA_USAGE_LEVELToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.mobile_DATA_USAGE_LEVELToString');
        }

        static callerid_TYPEToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.callerid_TYPEToString');
        }

        static callerid_IDCONFIGToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.callerid_IDCONFIGToString');
        }

        static callerid_OPTIONS_CHANGEToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.callerid_OPTIONS_CHANGEToString');
        }

        static callerid_STATEToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.callerid_STATEToString');
        }

        static partner_QUERY_TYPEToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.partner_QUERY_TYPEToString');
        }

        static partner_QUERY_PARAMSToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.partner_QUERY_PARAMSToString');
        }

        static partner_QUERY_IDToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.partner_QUERY_IDToString');
        }

        static partner_QUERY_ERRORToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.partner_QUERY_ERRORToString');
        }

        static partner_IDToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.partner_IDToString');
        }

        static getSuggestedSkypename(fullname: string): string {
            throw new Error('shimmed function WrSkyLib.getSuggestedSkypename');
        }

        static validateresulttoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.validateresulttoString');
        }

        static validateAvatar(value: Binary): SkyLibValidateAvatarResult {
            throw new Error('shimmed function WrSkyLib.validateAvatar');
        }

        static validateProfileString(propKey: number, strValue: string, forRegistration: Boolean): SkyLibValidateProfileStringResult {
            throw new Error('shimmed function WrSkyLib.validateProfileString');
        }

        static validatePassword(username: string, password: string): number {
            throw new Error('shimmed function WrSkyLib.validatePassword');
        }

        static accesseventtypetoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.accesseventtypetoString');
        }

        static sa_PAYMENT_PRODUCTToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.sa_PAYMENT_PRODUCTToString');
        }

        static sa_PAYMENT_CARDTYPEToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.sa_PAYMENT_CARDTYPEToString');
        }

        static sa_PAYMENT_SIDToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.sa_PAYMENT_SIDToString');
        }

        static sa_PAYMENT_IIDToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.sa_PAYMENT_IIDToString');
        }

        static httpfe_METHODToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.httpfe_METHODToString');
        }

        static webgw_RESULTToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.webgw_RESULTToString');
        }

        static content_LIST_RESULTToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.content_LIST_RESULTToString');
        }

        static content_LIST_CONTEXTToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.content_LIST_CONTEXTToString');
        }

        static livesession_END_DETAILSToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.livesession_END_DETAILSToString');
        }

        static policy_DISABLE_VIDEO_OPTIONSToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.policy_DISABLE_VIDEO_OPTIONSToString');
        }

        static skypemanager_MEMBER_STATUSESToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.skypemanager_MEMBER_STATUSESToString');
        }

        static user_LIKENESSESToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.user_LIKENESSESToString');
        }

        static uiproptoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.uiproptoString');
        }

        static nrt_CAPABILITIESToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.nrt_CAPABILITIESToString');
        }

        static libproptoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.libproptoString');
        }

        static upgraderesulttoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.upgraderesulttoString');
        }

        static unpack_TYPEToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.unpack_TYPEToString');
        }

        static unpack_RESULTToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.unpack_RESULTToString');
        }

        static verifyAndUnpack(sourcePath: string, destPath: string, key_id: number): SkyLibVerifyAndUnpackResult {
            throw new Error('shimmed function WrSkyLib.verifyAndUnpack');
        }

        static app2APP_STREAMSToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.app2APP_STREAMSToString');
        }

        static auth_RESULTToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.auth_RESULTToString');
        }

        static service_TYPEToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.service_TYPEToString');
        }

        static pushhandlingresulttoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.pushhandlingresulttoString');
        }

        static pnm_REGISTER_CONTEXTS_RESULTToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.pnm_REGISTER_CONTEXTS_RESULTToString');
        }

        static localized_STRINGToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.localized_STRINGToString');
        }

        static debug_STRINGToString(val: number): string {
            throw new Error('shimmed function WrSkyLib.debug_STRINGToString');
        }

        static objecttypetoString(val: number): string {
            throw new Error('shimmed function WrSkyLib.objecttypetoString');
        }

        static getInstance(): WrSkyLib {
            throw new Error('shimmed function WrSkyLib.getInstance');
        }

        static initPlatform(): Windows.Foundation.IAsyncAction {
            throw new Error('shimmed function WrSkyLib.initPlatform');
        }

        static log(subsystem: string, message: string): void {
            console.warn('shimmed function WrSkyLib.log');
        }

        static contentEncode(source: string, raw_xml: Boolean): string {
            throw new Error('shimmed function WrSkyLib.contentEncode');
        }

        static validateIdentity(identity: string, isNewUser: Boolean): number {
            throw new Error('shimmed function WrSkyLib.validateIdentity');
        }

        static normalizeIdentity(identity: string): string {
            throw new Error('shimmed function WrSkyLib.normalizeIdentity');
        }

        static normalizePSTNWithCountry(original: string, countryPrefix: number): string {
            throw new Error('shimmed function WrSkyLib.normalizePSTNWithCountry');
        }

        static wrapCodeCheckPublic(): Boolean {
            throw new Error('shimmed function WrSkyLib.wrapCodeCheckPublic');
        }

        addEventListener(name: string, handler: Function) {
            console.warn(`WrSkyLib::addEventListener: ${name}`);
            switch (name) {
                case "videoaspectratiochanged": // OnVideoAspectRatioChanged
                case "libready": // NotifyEventType
                case "loginstart": // NotifyEventType
                case "logout": // NotifyEventType
                case "loginpartially": // NotifyEventType
                case "login": // NotifyEventType
                case "objectpropertychange": // OnObjectPropertyChangeType
                case "objectdelete": // OnObjectDeleteType
                case "seamlesscapableresult": // OnSeamlessCapableResultType
                case "servertimeavailable": // OnServerTimeAvailableType
                case "registercontextscomplete": // OnRegisterContextsCompleteType
                case "pushhandlingcomplete": // OnPushHandlingCompleteType
                case "accountavatarresult": // OnAccountAvatarResultType
                case "suggestedaccountsresult": // OnSuggestedAccountsResultType
                case "partnerlinkinforesult": // OnPartnerLinkInfoResultType
                case "accountpartnerlinkresult": // OnAccountPartnerLinkResultType
                case "authtokenrequest": // OnAuthTokenRequestType
                case "authtokenresultwithtimeout": // OnAuthTokenResultWithTimeoutType
                case "authtokenresult": // OnAuthTokenResultType
                case "videomessagingentitlementchanged": // OnVideoMessagingEntitlementChangedType
                case "app2appstreamlistchange": // OnApp2AppStreamListChangeType
                case "incomingapp2appdatagram": // OnApp2AppDatagramType
                case "operationmodechanged": // OnOperationModeChangedType
                case "upgradenotice": // OnUpgradeNoticeType
                case "checkupgraderesult": // OnCheckUpgradeResultType
                case "statsreported": // OnStatsReportedType
                case "libpropchange": // OnLibPropChangeType
                case "contentlistingresult": // OnContentListingResultType
                case "publicapinotification": // OnPublicAPINotificationType
                case "httpstreamresponse": // OnHttpStreamResponseType
                case "httpresponse": // OnHttpResponseType
                case "accessevent": // OnAccessEventType
                case "accessconnectionfailure": // OnAccessConnectionFailureType
                case "accessdisconnected": // OnAccessDisconnectedType
                case "accessconnected": // OnAccessConnectedType
                case "accessdetectfailure": // OnAccessDetectFailureType
                case "accessdetecting": // OnAccessDetectingType
                case "externalloginrequest": // OnExternalLoginRequestType
                case "partnerqueryresult": // OnPartnerQueryResultType
                case "incomingpricequote": // OnIncomingPriceQuoteType
                case "incomingalert": // OnIncomingAlertType
                case "contentitemchange": // OnContentItemChangeType
                case "calleridoptionschange": // OnCallerIDOptionsChangeType
                case "nrglevelschange": // OnNrgLevelsChangeType
                case "availabledevicelistchange": // OnAvailableDeviceListChangeType
                case "qualitytestresult": // OnQualityTestResultType
                case "h264activated": // OnH264ActivatedType
                case "availablevideodevicelistchange": // OnAvailableVideoDeviceListChangeType
                case "filetransferinitiated": // OnFileTransferInitiatedType
                case "incomingmessage": // SkyLibOnMessageType
                case "searchmessagesresult": // OnSearchMessagesResultType
                case "conversationlistchange": // OnConversationListChangeType
                case "initialeassyncdone": // OnInitialEasSyncDoneType
                case "promotedscdcontactsfound": // OnPromotedSCDContactsFoundType
                case "unifiedmasterschanged": // OnUnifiedMastersChangedType
                case "unifiedservantschanged": // OnUnifiedServantsChangedType
                case "contactgoneoffline": // OnContactGoneOfflineType
                case "contactonlineappearance": // OnContactOnlineAppearanceType
                case "newcustomcontactgroup": // OnNewCustomContactGroupType
                    break;
            }

        }
    }
}
