// --------------------------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a tool.
//     
//     Generated from Microsoft.Entertainment.winmd version 255.255.255.255 at 12/08/2020 17:12:55
// </auto-generated>
// --------------------------------------------------------------------------------------------------
export namespace Microsoft { 
    export namespace Entertainment { 
        export namespace Ads { 
            export class AdManager implements IAdManager {
                // constructor();
                getEmptyRoomTimeout(): number {
                    throw new Error('shimmed function AdManager.getEmptyRoomTimeout');
                }

                setAdPlayed(adType: AdType): void {
                    console.warn('shimmed function AdManager.setAdPlayed');
                }

                setStreamingTrackPlayed(): void {
                    console.warn('shimmed function AdManager.setStreamingTrackPlayed');
                }

                setStreamingTrackInvoked(): void {
                    console.warn('shimmed function AdManager.setStreamingTrackInvoked');
                }

                isAdRequired(adType: AdType, currentMediaIsFreeStreaming: Boolean): Boolean {
                    throw new Error('shimmed function AdManager.isAdRequired');
                }

            }
            export enum AdType {
                audio,
                video,
                adTypeCount,
            }
            export interface IAdManager {
                getEmptyRoomTimeout(): number;
                setAdPlayed(adType: AdType): void;
                setStreamingTrackPlayed(): void;
                setStreamingTrackInvoked(): void;
                isAdRequired(adType: AdType, currentMediaIsFreeStreaming: Boolean): Boolean;
            }
        }
        export namespace Application { 
            export class Application implements IApplication {
                // constructor();
                init(executionMode: ExecMode): void {
                    console.warn('shimmed function Application.init');
                }

                shutdownAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function Application.shutdownAsync');
                }

                setResourceStringProvider(resourceStringProvider: any): void {
                    console.warn('shimmed function Application.setResourceStringProvider');
                }

                setLicenseAcquisitionService(licenseService: any): void {
                    console.warn('shimmed function Application.setLicenseAcquisitionService');
                }

                shouldUseWLAN(): Boolean {
                    throw new Error('shimmed function Application.shouldUseWLAN');
                }

                requestGrovel(): void {
                    console.warn('shimmed function Application.requestGrovel');
                }

                requestUserServiceContent(): void {
                    console.warn('shimmed function Application.requestUserServiceContent');
                }

                requestMDLC(): void {
                    console.warn('shimmed function Application.requestMDLC');
                }

                setCloudSyncRegKey(cloudSyncOn: Boolean): void {
                    console.warn('shimmed function Application.setCloudSyncRegKey');
                }

                saveDatabase(): string {
                    throw new Error('shimmed function Application.saveDatabase');
                }

                cleanUnistore(): void {
                    console.warn('shimmed function Application.cleanUnistore');
                }

            }
            export class ApplicationStatics implements IApplicationStatics {
                // constructor();
                appMode: AppMode = -1;

            }
            export enum AppMode {
                music,
                music2,
                music3,
                video,
                video2,
                video3,
                test,
                amsterdam,
            }
            export enum ExecMode {
                background,
                backgroundResourceIntensive,
                foreground,
            }
            export interface IApplication {
                init(executionMode: ExecMode): void;
                shutdownAsync(): Windows.Foundation.IAsyncAction;
                setResourceStringProvider(resourceStringProvider: any): void;
                setLicenseAcquisitionService(licenseService: any): void;
                shouldUseWLAN(): Boolean;
                requestGrovel(): void;
                requestUserServiceContent(): void;
                requestMDLC(): void;
                setCloudSyncRegKey(cloudSyncOn: Boolean): void;
                saveDatabase(): string;
                cleanUnistore(): void;
            }
            export interface IApplicationStatics {
                appMode: AppMode;
            }
            export interface ICharacterGroupings {
                size: number;
                lookup(item: string): string;
                getItemGroup(index: number): string;
            }
            export interface ILicenseAcquisitionService {
                acquireLicenseForKeyIdAsync(base64EncodedKeyId: string, instanceId: string, licenseRight: string, offerId: string): Windows.Foundation.IAsyncAction;
            }
            export interface IResourceStringProvider {
                getResourceString(resourceId: string): string;
            }
        }
        export class ApplicationLifetimeManager implements IApplicationLifetimeManager {
            // constructor();
            raiseActivated(args: any): void {
                console.warn('shimmed function ApplicationLifetimeManager.raiseActivated');
            }

            raiseResuming(): void {
                console.warn('shimmed function ApplicationLifetimeManager.raiseResuming');
            }

            raiseSuspending(): void {
                console.warn('shimmed function ApplicationLifetimeManager.raiseSuspending');
            }

        }
        export class ApplicationState implements IApplicationState {
            // constructor();
            count: number = 0;

            getValue(key: string): string {
                throw new Error('shimmed function ApplicationState.getValue');
            }

            setValue(key: string, value: string): void {
                console.warn('shimmed function ApplicationState.setValue');
            }

            clearValue(key: string): void {
                console.warn('shimmed function ApplicationState.clearValue');
            }

            getKey(index: number): string {
                throw new Error('shimmed function ApplicationState.getKey');
            }

            flush(): void {
                console.warn('shimmed function ApplicationState.flush');
            }

        }
        export namespace AppVolumeManager { 
            export class AppVolume implements IAppVolume {
                // constructor();
                getVolumeLevelAsync(): Windows.Foundation.IAsyncOperation<VolumeValue> {
                    throw new Error('shimmed function AppVolume.getVolumeLevelAsync');
                }

                setVolumeLevelAsync(value: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function AppVolume.setVolumeLevelAsync');
                }

                getMutedAsync(): Windows.Foundation.IAsyncOperation<MuteValue> {
                    throw new Error('shimmed function AppVolume.getMutedAsync');
                }

                setMutedAsync(muteValue: Boolean): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function AppVolume.setMutedAsync');
                }

                audioRenderDeviceChanged(): void {
                    console.warn('shimmed function AppVolume.audioRenderDeviceChanged');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`AppVolume::addEventListener: ${name}`);
                    switch (name) {
                        case "audioendpointchanged": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "systemvolumestatechanged": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                            break;
                    }

                }
            }
            export interface IAppVolume {
                getVolumeLevelAsync(): Windows.Foundation.IAsyncOperation<VolumeValue>;
                setVolumeLevelAsync(value: number): Windows.Foundation.IAsyncAction;
                getMutedAsync(): Windows.Foundation.IAsyncOperation<MuteValue>;
                setMutedAsync(muteValue: Boolean): Windows.Foundation.IAsyncAction;
                audioRenderDeviceChanged(): void;
            }
            export interface MuteValue {
                value: Boolean = false;
            }
            export interface VolumeValue {
                value: number;
            }
        }
        export class ClosedCaptionDownloader {
            static downloadClosedCaptionFileAsync(url: string, serviceMediaId: string, serviceMediaInstanceId: string, name: string, localeId: number): Windows.Foundation.IAsyncAction {
                throw new Error('shimmed function ClosedCaptionDownloader.downloadClosedCaptionFileAsync');
            }

            static getClosedCaptionFileAsync(url: string, serviceMediaId: string, serviceMediaInstanceId: string, name: string, localeId: number): Windows.Foundation.IAsyncOperation<string> {
                throw new Error('shimmed function ClosedCaptionDownloader.getClosedCaptionFileAsync');
            }

            static getDownloadedClosedCaptionListAsync(serviceMediaId: string, serviceMediaInstanceId: string): Windows.Foundation.IAsyncOperation<string> {
                throw new Error('shimmed function ClosedCaptionDownloader.getDownloadedClosedCaptionListAsync');
            }

        }
        export namespace ClosedCaptions { 
            export enum ETTMLProcessorProgress {
                verifyingFile,
                verificationFailure,
                loadingXML,
                timeAnalysis,
                styleComputation,
                readyToRender,
            }
            export interface ITTMLProcessor {
                loadFromString(xml: string): void;
                loadFromStorageFile(pFile: Windows.Storage.IStorageFile): Windows.Foundation.IAsyncActionWithProgress<number>;
                renderAt(streamTimeMsec: number): string;
            }
            export class TTMLProcessor implements ITTMLProcessor {
                // constructor();
                loadFromString(xml: string): void {
                    console.warn('shimmed function TTMLProcessor.loadFromString');
                }

                loadFromStorageFile(pFile: Windows.Storage.IStorageFile): Windows.Foundation.IAsyncActionWithProgress<number> {
                    throw new Error('shimmed function TTMLProcessor.loadFromStorageFile');
                }

                renderAt(streamTimeMsec: number): string {
                    throw new Error('shimmed function TTMLProcessor.renderAt');
                }

            }
        }
        export namespace Common { 
            export namespace Fulfillment { 
                export class EntitlementId implements IEntitlementId {
                    // constructor(entitlementIdValue: string);
                    // constructor(productId: string, skuId: string);
                    // constructor();
                    constructor(entitlementIdValue: string, productId: string, skuId: string) {}

                    hasSkuId: Boolean;
                    productId: string;
                    skuId: string;
                    value: string;

                    isSubclassOf(entitlementId: IEntitlementId): Boolean {
                        throw new Error('shimmed function EntitlementId.isSubclassOf');
                    }

                }
                export class Entitlements {
                    static getPurchaseStateFromCache(entitlementId: IEntitlementId): Boolean {
                        throw new Error('shimmed function Entitlements.getPurchaseStateFromCache');
                    }

                    static getPurchaseStateFromServiceAsync(entitlementIds: IEntitlementId[]): Windows.Foundation.IAsyncOperation<Boolean[]> {
                        throw new Error('shimmed function Entitlements.getPurchaseStateFromServiceAsync');
                    }

                }
                export interface IEntitlementId {
                    hasSkuId: Boolean;
                    productId: string;
                    skuId: string;
                    value: string;
                    isSubclassOf(entitlementId: IEntitlementId): Boolean;
                }
                export interface IEntitlementIdFactory {
                    createUsingEntitlementIdValue(entitlementIdValue: string): EntitlementId;
                    createUsingProductIdAndSkuId(productId: string, skuId: string): EntitlementId;
                }
                export interface IEntitlementsStatics {
                    getPurchaseStateFromCache(entitlementId: IEntitlementId): Boolean;
                    getPurchaseStateFromServiceAsync(entitlementIds: IEntitlementId[]): Windows.Foundation.IAsyncOperation<Boolean[]>;
                }
            }
            export namespace Infrastructure { 
                export interface ITunerInfoStatics {
                    applicationSpecificHardwareId: string;
                    applicationUserModelId: string;
                    networkHostName: string;
                    uniqueDeviceId: string;
                    version: string;
                    generateServiceRequestXml(includeConsoleId: Boolean, endpointId: number): string;
                    getTypeForEndpoint(endpointId: number): string;
                }
                export class TunerInfo {
                    static applicationSpecificHardwareId: string = '{"HardwareId":"AwBQiwMAPs8IAE1BBQA/OgUA+3gFAKGQBQA61wUA6vYGAAEABADAJQQA6DYEALVfBABGmAEAmFcCANgWCQDIOg==", "Signature": "EInNd7YoQeBDHetmM5MSiXFJnj3dSAKaW4KYkv13su1tw+hy+C/iAxT596DM5dU0E1HNlR67+QIF6XKdt2BK4ldWh47lLoJ/MHNALJ2EAhU16W2TxmxgVSDvxrvZzXXe8DwR5vgrjh+xZ9QL8KJoh/Kfww/tNO39I+3S0I7JpzQ=", "ClientCert": "MIIR2gYJKoZIhvcNAQcCoIIRyzCCEccCAQExADALBgkqhkiG9w0BBwGgghGvMIIE3zCCAsegAwIBAgIKYQYL2gAAAAAADjANBgkqhkiG9w0BAQsFADCBhzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjExMC8GA1UEAxMoTWljcm9zb2Z0IEFzc3VyYW5jZSBEZXNpZ25hdGlvbiBQQ0EgMjAxMTAeFw0xMjA1MjEyMDQ1MjZaFw0xMzA4MjEyMDU1MjZaMCMxITAfBgNVBAMTGE1pY3Jvc29mdCBXaW5kb3dzIEFTSFdJRDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAruJC3ZkSUfXPC0uYhzgACFoAaInBKtRkmDitV+3noRWtk45WPv5yD0WfDStGTTgKzivGolIYqI3dmSduhrFatGLSX2u2Q+BYXBly4V7S62Q01r+8oRdnSDjho4O6zUVr3A3EcwXM2kT/5K7ywCgUCrdKeYFTMYf4V7z75AtNHwUCAwEAAaOCATIwggEuMA4GA1UdDwEB/wQEAwIHgDAVBgNVHSUEDjAMBgorBgEEAYI3CgUoMB0GA1UdDgQWBBQlOZgV9+11fEmlXRpakgNCt8aVnDAfBgNVHSMEGDAWgBRYQgkSKX0GY5S0TP8Rvtc4VDAlmTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNBc3NEZXNQQ0EyMDExXzIwMTEtMDYtMjguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNBc3NEZXNQQ0EyMDExXzIwMTEtMDYtMjguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAGQFCukEKNKVuXtjIQgc3ClDscKAm6mByxhs/n4tcZM0wABMZb//5cm8DJufvvCD36+PZCrg3OKcZWTZPcE/XL9iOD1COaOvAK/RDM4qxAU/EUELb2ZS3+KomtocOr1Ws5CLS/d2cPMxYHtCKPLC8m6mDxhV09RCWAq+pT4aIrfZwgGauqokS6yOyd2dthR3iiJwnIo6yJ7wEene95PboP787sXgmHsBy890wXZ4feU1CAPOC/pJvpfXeJV0odi8qbVQIOfgoAWK3jnXRldsA7T8aPvyzwTeRrY7Xuv0FDlWdBPAYVyBuxl4ovz8ff9ennp9Skplef8JAemgjs0CxhZLKbKjR36ke+ASvf9WZoM7RL4jouQudVdTgeajlJ/7rfiWgpYNyLflrnZ3QPgVeNvvw4cdrjQpi1jd0Vpt23S393qRvfJoX8Y48MvnRw8HRaJKo8s+sDbG+Hy03xiKHjBDzwXlaByWpcXnif4Q1RW1uqoiFai0xeIWiR90i/OfFdFcReJPORbY6Jadiwd9IQsvzl5qARoZywL++YP4U1pXc2EL9fcpsxmCJusM7XFAvHkXFCx8b1E1mTexvIrIslpPlslSHCQ/TJdBQQ6Nb8znsEFmBYbR6WQOZFK+4pNKs6v8MQ8imJf3i1n3OCnA6Wm1Ko8BW5BxEZYOUXoDxfzJMIIF7TCCA9WgAwIBAgIQCxwEHJx0NK9BOjy/OfVWvzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IEFzc3VyYW5jZSBEZXNpZ25hdGlvbiBSb290IDIwMTEwHhcNMTEwMzIzMTc0MTI3WhcNMzYwMzIzMTc0ODExWjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IEFzc3VyYW5jZSBEZXNpZ25hdGlvbiBSb290IDIwMTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCo787v7BKLkpTtz6qlgY1PpK1K7KXw2qg9tuVhAZnOOiNzWlhnn/W2W/VP+aCbdR7MU2IQPKelOjvmJCL0GJYu8vzZpYjG/VHwMcO9AdxFtvZAK7dFe0VP7cC0fFhE+Yn7anU7bfEurDWhX3qUzTptmLi4KeYzmC4zg3qGt6gKEPIHMmPkMu1NqwUModdySaw1LC5w7e4S/COx3FrfYeksRM2u2wZUj0/B1hVyrlCJOYn1lYLc/0HriW+84J95XSQW9x04qt7YJJf2l0d0WyM4yJ0uqtEfzglc8bmfkjjSEWg+zF1Oz5Sf0kK94vFL8aepXHkF+yX3wVP32cRNeQ+KTbQwcabpUeWO4MiDxzH8mEb2onb8poFtdpCNMiEfLT5pK0+q7HvTuWTB1rtf+jjEQaZtWsMRh/u8M3BKJovmRN3LuDDTm3saDgO0UeDKv3s8V5qg2Ev+fjbYgfolvX4D9Vks9tenbd0Qd3cJrnbihTOmfXEg+DpPKrbqQinQ08YpSwUs57hKz9K7giAwm6JNH3gs2VQT2CooaFFWpffbrlkOudEwl4IEZqUCPCX63e0JwmC8F2yhWraXzIoTVva0rt/PfkAvSUHgY45YIMyjTzM7m888cn5IQUI9Y+Ne53Vsf+9tgAmkK6Q+3uQrLCupRFaDvrZuYLkWGuFi6VSdvwIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUGqlTRTOO0G4iUlR2OXZDHv95FEEwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAAsu+lTeEaRy5BMdi7xCNnz+dsMYPCcGCxqD+gBrB/41d3tcu4URKJJTVamxEjQM8UaVtZ6dVB09Afjn7ai2gLVv5U1jddZtw7xuOAtf/GpsoTjveKm4B0yDesG1r4aDlBQ4yiKtKZYxdSXsmyy6PghuvrWQnJ6xvvS803EdJ3IlriwPzBdm6hnjUMefZfipJ6lXwoqy5lPr23h8HLOn8lW/IRAeX1oVIEwMXpzhrtMU2RRW6M23xBfBRqqjGSDcDENLUbqqfa9LvTT5AATozCHVm8nMFc5YGn1Ey6KoSYEk5Lwn/dsrd7G5u+Qa2XswEWiR36wZBM3cP28iHCO38vQ8LKd4OLXNdpy7d5Vczy8AKYgPlhPyaMuqwDsGmv1uGUjt9rhRdtJy08GvXUD3CfAhaYb0YBAfmh4ZhA6w7g7lqDnb/u8OyrQp7MMI0IqwoMyJXiNMz5xT2UMCEj4ZCu/bZtJXXIfF+fDBWEj8GW/mYID4sie/KcHemfsiG4hRQHhQJBb4oPP+FKmksJG5pyjc9Eca3hmliMeTiKEC4IVRD2sHwH9ez+s+0CG0Nj4to5sLbCBwSqSyFifhTPSRVvee4rJE+113bZFz2xu/CHZVkMpq9GdZevaepgfbXt8ObEwkRyxCXPq+AlsawdlYZsIMs87ktOz061ZPmszMsqCkMIIG1zCCBL+gAwIBAgIKYRDHKgAAAAAAAjANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IEFzc3VyYW5jZSBEZXNpZ25hdGlvbiBSb290IDIwMTEwHhcNMTEwNjI4MTkyMTU5WhcNMzEwNjI4MTkzMTU5WjCBhzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjExMC8GA1UEAxMoTWljcm9zb2Z0IEFzc3VyYW5jZSBEZXNpZ25hdGlvbiBQQ0EgMjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAJbPzmFzKfyRtqdezYAmaTmZyToZbmgIldwY7dwdiyutmHbexkirDsvQj1otnVvKZfPAHvVPJWhQcSDXtgnXTFu/8SdY7YpudZOZ6hAQ3vYea7feQhgYN2T5ZrYOX6++sQwtJr96uDs0B4a6tbZA7cadMCicissnWjygpKba2Id45O2R0EwY4Ml83kH3OMWyVy+UUCCxkiqwyGb/gN6MpaljI9OiwMf7QXK35WRG2SFObQIlBb4YgLuoGlOIkDFGHPVgYcAF/CIapE6vtT44HaMkkPxUcLFHpZGdDA/wthbhaSV+5MiaBwMhQah8sDbl9JEWFNWcA654rLTkOHeg7klU8wO0yNjo7+pjdhcJz1PxYxItoxjxmoI/DVMm+XNeKr29+6Zhdn5n6DK0BB/z9j3U1whHNYmiuGdUAJUli718FXhWkYH7NKpS3eLBQg+QHbvgEO4bed2wQ2US4ZcSyd+boNwAkG/jHYrMPM7ObRMW+TAOvKtKHcEb3yWuHTbHViWBwQcdTiv7AAPH73neRzU3XHhqwxO/aqwbiFcvzBesqV6eh8TypwB8i+90f8nzR2YYXB1JsM74ggf6DC6/AO/qLPN1A/Zrba9xP1imddXJgvbvjcW+x/Ye2d+xNjH+33goPGJPSUyhkzUHVj0szJmRfOIqglHsBSirUiErBqgBAgMBAAGjggFAMIIBPDAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQUWEIJEil9BmOUtEz/Eb7XOFQwJZkwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUGqlTRTOO0G4iUlR2OXZDHv95FEEwUAYDVR0fBEkwRzBFoEOgQYY/aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQXNzRGVzUm9vXzIwMTFfMDNfMjMuY3JsMF0GCCsGAQUFBwEBBFEwTzBNBggrBgEFBQcwAoZBaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNBc3NEZXNSb29fMjAxMV8wM18yMy5jcnQwDQYJKoZIhvcNAQELBQADggIBAIoMbZz985UPTHi2Cl6QPuj7s/+mCLJLWXRr37Wf20hmOKKMrb+TzV+ci22YJdsQ5ApbN9K3mDAPIClnnh89TrKFiuYSg9VgzrZ+m6D6LBL/karcuePObrVumNODVZxCTKNCiReJakfhsWyafz1J4Bpe2uH3NEzb+OnpOEDsKjhDMiywxfeKIJoMPRJYTDWmE8TcFx6E/fJbSxB9Ao0scyG/ClVpszDdl0SsXm2AGN3BWGOm7+5+UbbwQfFlOdWB46yI/KNmykosVZewv/w2nXxE7/oEPlbzhwr5ysQEe+hRyD/m4xDRYv9hjtClJMVxysCyVwVnTm5ejVbmue7W6vrmi1VNb2/DUt+0WBGM5/ixrQhwlEmNrMAhE1va75PMRzO/7hnD97m28buFQfQztYDiKKxYl68IOlZQqpY8TBry3qxF/Ds1NWa8kPvG1zbVz3HJeN0NNR7BO3/Z1D7ajIimPT8/K/EqSreNK7CGXwY9kGEvkf5cX88IuKcCdeWTkH8ltFihllsDTsPrpMlsHIClAkgzIbR7fE9wGIy300WShWEEQqxn1od+pDwsZfbG2T+NP5M7QLV8Wp+EqlpIc1OmOEW49ly/EeFjUuhpvkaxT93lRPYN3jxaumAZ4wXWlvUvqaYhqOzTMYMdOV71b76Nk6hR6LN+iQMbEDCEQheiMQA="}';
                    static applicationUserModelId: string = '987b1149-74a8-4c3e-b074-70bd90cddc4e_hgez539ap9dme!987b1149-74a8-4c3e-b074-70bd90cddc4e.Application';
                    static networkHostName: string = 'Thomas-PX';
                    static uniqueDeviceId: string = 'S-1-5-21-1529299986-1659850158-1710369214';
                    static version: string = '1.6.672';

                    static generateServiceRequestXml(includeConsoleId: Boolean, endpointId: number): string {
                        throw new Error('shimmed function TunerInfo.generateServiceRequestXml');
                    }

                    static getTypeForEndpoint(endpointId: number): string {
                        throw new Error('shimmed function TunerInfo.getTypeForEndpoint');
                    }

                }
            }
            export namespace Service { 
                export class HttpQueryEngine implements IHttpQueryEngine {
                    // constructor(pHttpQueryImpl: any);
                    // constructor();
                    constructor(pHttpQueryImpl: any) {}

                    sendAsync(): Windows.Foundation.IAsyncOperation<IHttpQueryResponse> {
                        throw new Error('shimmed function HttpQueryEngine.sendAsync');
                    }

                }
                export interface IHttpQuery {
                    sendAsync(): Windows.Foundation.IAsyncOperation<IHttpQueryResponse>;
                }
                export interface IHttpQueryEngine {
                    sendAsync(): Windows.Foundation.IAsyncOperation<IHttpQueryResponse>;
                }
                export interface IHttpQueryEngineFactory {
                    create(pHttpQueryImpl: any): HttpQueryEngine;
                }
                export interface IHttpQueryResponse {
                    body: any;
                    request: any;
                    status: number;
                    statusResult: number;
                    getHeader(hstrName: string): string;
                }
                export namespace Requests { 
                    export namespace Mds { 
                        export namespace Video { 
                            export class AssetLocationRequest implements IAssetLocationRequest, IHttpQuery {
                                // constructor();
                                serviceMediaId: string = '00000000-0000-0000-0000-000000000000';
                                preferredResolution: Resolution = Resolution._Invalid;
                                licenseKeyId: string = '00000000-0000-0000-0000-000000000000';
                                intendedUse: IntendedUse = IntendedUse._Invalid;
                                fetchSubtitles: Boolean = false;

                                addSubtitleLocaleFilter(hstrLocale: string): void {
                                    console.warn('shimmed function AssetLocationRequest.addSubtitleLocaleFilter');
                                }

                                addSubtitleTypeFilter(eSubtitleType: SubtitleType): void {
                                    console.warn('shimmed function AssetLocationRequest.addSubtitleTypeFilter');
                                }

                                resetSubtitleFilters(): void {
                                    console.warn('shimmed function AssetLocationRequest.resetSubtitleFilters');
                                }

                                sendAsync(): Windows.Foundation.IAsyncOperation<IHttpQueryResponse> {
                                    throw new Error('shimmed function AssetLocationRequest.sendAsync');
                                }

                            }
                            export class AssetLocationResponse implements IAssetLocationResponse {
                                // constructor();
                                encoding: Encoding;
                                licenseKeyId: string;
                                offerId: string;
                                resolution: Resolution;
                                serviceMediaId: string;
                                serviceMediaInstanceId: string;
                                signedLicensePolicyTicket: string;
                                subtitles: IAssetLocationSubtitle[];
                                url: string;

                            }
                            export class AssetLocationSubtitle implements IAssetLocationSubtitle {
                                // constructor();
                                locale: string;
                                subType: string;
                                type: SubtitleType;
                                url: string;

                            }
                            export enum Encoding {
                                _Invalid = -1,
                                h264,
                                vc1,
                                _Count,
                            }
                            export interface IAssetLocationRequest extends IHttpQuery {
                                fetchSubtitles: Boolean;
                                intendedUse: IntendedUse;
                                licenseKeyId: string;
                                preferredResolution: Resolution;
                                serviceMediaId: string;
                                addSubtitleLocaleFilter(hstrLocale: string): void;
                                addSubtitleTypeFilter(eSubtitleType: SubtitleType): void;
                                resetSubtitleFilters(): void;
                            }
                            export interface IAssetLocationResponse {
                                encoding: Encoding;
                                licenseKeyId: string;
                                offerId: string;
                                resolution: Resolution;
                                serviceMediaId: string;
                                serviceMediaInstanceId: string;
                                signedLicensePolicyTicket: string;
                                subtitles: IAssetLocationSubtitle[];
                                url: string;
                            }
                            export interface IAssetLocationSubtitle {
                                locale: string;
                                subType: string;
                                type: SubtitleType;
                                url: string;
                            }
                            export enum IntendedUse {
                                _Invalid = -1,
                                stream,
                                download,
                                preview,
                                _Count,
                            }
                            export enum Resolution {
                                _Invalid = -1,
                                sd480p,
                                hd720p,
                                hd1080p,
                                _Count,
                            }
                            export enum SubtitleType {
                                _Invalid = -1,
                                closedCaption,
                                fullSubtitle,
                                forcedSubtitle,
                                _Count,
                            }
                        }
                    }
                }
            }
        }
        export namespace Configuration { 
            export class ABTestingOverridesConfiguration implements IABTestingOverridesConfiguration {
                // constructor();
                videoSpotlightFeedUrl: string;
                videoPostRollNoTvMarketplace: number;
                videoPostRollNoMovieMarketplace: number;
                videoPostRoll: number;
                testABTests: number;
                musicUpsellBannerMessage: number;
                musicUpsellBannerAction: number;
                fileActivationPostRoll: number;

            }
            export class AdsConfiguration implements IAdsConfiguration {
                // constructor();
                videoTvAdUnitIds: string;
                videoMovieAdUnitIds: string;
                videoAdApplicationId: string;
                video2TvAdUnitIds: string;
                video2MovieFreeWithAdUnitId: string;
                video2MovieAdUnitIds: string;
                video2AdApplicationId: string;
                musicVideoAdUnitIdsUnAuth: string;
                musicVideoAdUnitIds: string;
                musicSpotlightSidebarAdUnitIds: string;
                musicPopularSidebarAdUnitIds: string;
                musicDashboardAdUnitIds: string;
                musicAudioAdUnitIdsUnAuth: string;
                musicAudioAdUnitIds: string;
                musicAdApplicationId: string;

            }
            export class AmsterdamConfiguration implements IAmsterdamConfiguration {
                // constructor();
                videoThumbnailsEnabled: Boolean;
                videoFileExtensions: string;
                videoContentTypes: string;
                usbEnabled: Boolean;
                supportsMKV: Boolean;
                sortingEnabled: Boolean;
                photoThumbnailsEnabled: Boolean;
                photoFileExtensions: string;
                onUsbErrorCodecRetrievalEnabled: Boolean;
                musicThumbnailsEnabled: Boolean;
                musicFileExtensions: string;
                musicContentTypes: string;
                minimumSetBackgroundImageSupportedBuild: number;
                minimumDlnaSupportedBuild: number;
                folderThumbnailsEnabled: Boolean;
                filteringEnabled: Boolean;

            }
            export class ConfigurationManager implements IConfigurationManager {
                // constructor();
                abtestingOverrides: ABTestingOverridesConfiguration = null;
                ads: AdsConfiguration = null;
                amsterdam: AmsterdamConfiguration = null;
                drm: DRMConfiguration = null;
                fue: FUEConfiguration = null;
                features: FeaturesConfiguration = null;
                flighting: FlightingConfiguration = null;
                fulfillment: FulfillmentConfiguration = null;
                generalSettings: GeneralSettingsConfiguration = null;
                groveler: GrovelerConfiguration = null;
                mbr: MBRConfiguration = null;
                mdlc: MDLCConfiguration = null;
                marketplace: MarketplaceConfiguration = null;
                mediaStore: MediaStoreConfiguration = null;
                music: MusicConfiguration = null;
                playback: PlaybackConfiguration = null;
                queries: QueriesConfiguration = null;
                service: ServiceConfiguration = null;
                services: ServicesConfiguration = null;
                shell: ShellConfiguration = null;
                shipAsserts: ShipAssertsConfiguration = null;
                sync: SyncConfiguration = null;
                telemetry: TelemetryConfiguration = null;
                transfer: TransferConfiguration = null;
                unitTest: UnitTestConfiguration = null;
                video: VideoConfiguration = null;

            }
            export class DRMConfiguration implements IDRMConfiguration {
                // constructor();
                timeBetweenRefreshms: number;
                timeBetweenRefreshSessionsMins: number;
                syncLicenseMinHours: number;
                syncLicenseMinCount: number;
                silentDRMConfiguration: Boolean;
                lastFullRefresh: Date;

            }
            export class FeaturesConfiguration implements IFeaturesConfiguration {
                // constructor();
                musicSignInAvailable: string;
                musicShareToPhone: string;
                musicMarketplaceEditorial: string;
                musicMarketplace: string;
                musicFreePlayAnonymous: string;
                rottenTomatoes: string;
                musicFreePlay: string;
                musicFreeGiveAwayMarketplace: string;
                musicAudioAdsEnabled: string;
                moviesMarketplace: string;
                movieTrailersMarketplace: string;
                movieCriticRatingSort: string;
                metroGamesPurchase: string;
                metroGamesMarketplace: string;
                audioFingerprinter: string;
                metaCritic: string;
                logNetworkServiceRequests: string;
                keystoneRegionEnabled: string;
                formerMusicFreePlay: string;
                flightingEnabled: string;
                videoLiveTile: string;
                explicitMatchingEnabled: string;
                devicesEnabled: string;
                cloudCollectionV2Enabled: string;
                closedCaptionsEnabled: string;
                castAndCrew: string;
                metadataEdit: string;
                musicSubscription: string;
                tvMarketplace: string;
                xbox360GamesMarketplace: string;
                xbox360ConsoleRegions: string;
                videoWatchlist: string;
                videoSignInAvailable: string;
                videoShowMovieTrailers: string;
                fileLaunchToDashboard: string;
                videoFreeWithAds: string;
                videoFreePurchase: string;
                videoFeaturedSetsEnabled: string;
                videoAllQuerySupported: string;
                upgradeToBlue: string;
                xbox360GamesPurchase: string;
                tvLastNightQuery: string;
                tvCriticRatingSort: string;
                streamXbox360GameTrailers: string;
                streamMetroGameTrailers: string;
                storeSync: string;
                smartVJMarketplace: string;
                smartDJMarketplace: string;
                secureEDSEndpointsEnabled: string;
                musicFreePlayAnonAds: string;
                previewMovieTrailers: string;
                pinToStart: string;
                musicVideosMarketplace: string;
                musicVideosEnabled: string;
                musicVideosCollectionEnabled: string;

            }
            export class FlightingConfiguration implements IFlightingConfiguration {
                // constructor();
                groupIds: string;
                experimentIds: string;
                deeplinkTunerConfigEnabled: Boolean;

            }
            export class FUEConfiguration implements IFUEConfiguration {
                // constructor();
                showLXFUE: Boolean;
                showFirstLaunchVideo: Boolean;
                showFUE: Boolean;
                settingsVersion: number;
                musicCloudContentV2FlyoutFilterShown: Boolean;
                musicCloudContentV1CleanupDialogDismissed: Boolean;
                musicAvailableOfflineFlyoutFilterShown: Boolean;
                minVideoAppSupportedVersion: string;
                minVersionBlockAllAppUse: string;
                minMusicAppSupportedVersion: string;
                freeStreamingIsGoneAnnouncementDismissed: Boolean;
                acceptedPrivacyStatement: Boolean;
                acceptedEula: Boolean;

            }
            export class FulfillmentConfiguration implements IFulfillmentConfiguration {
                // constructor();
                videoProductFilterTimeSpanForProductNotAvailableToDeviceInMinutes: number;
                videoProductFilterTimeSpanForEdsRequestFailedInMinutes: number;
                videoProductFilterTimeSpanForEdsOmittedItemInMinutes: number;
                videoProductFilterTimeSpanForDownloadOnlyInMinutes: number;
                videoOnlyFiltersRentalsWithDeviceName: Boolean;
                videoLicensingClientTypeOverride: string;
                purchasedServiceProductSkus: string;
                purchasedCacheProductSkus: string;
                preferH264Content: Boolean;
                maxInputVideoItemsInEdsDetailsRequest: number;
                logSuccessTelemetryDuringVideoIngestion: Boolean;
                lastHandledIngestionRefreshSyncToken: string;
                forceVideoIngestionRefreshSyncToken: string;
                enableRentalFilteringHack: Boolean;

            }
            export class GeneralSettingsConfiguration implements IGeneralSettingsConfiguration {
                // constructor();
                isDogfoodBuild: Boolean;
                initialRatingsDialogBuild: string;
                imageCleanupLastRun: Date;
                imageCleanupIntervalTime: number;
                imageCleanupAccessTime: number;
                idleApplicationServiceTimeout: number;
                musicMatchDeferralTimeMS: number;
                forceChunkDownload: Boolean;
                fileTransferProgressCheckTime: number;
                debugDRM: Boolean;
                daysSinceFirstLaunchToShowRatingsDialog: number;
                databaseProductVersion: string;
                consecutiveDownloadsSucceeded: number;
                compactModeAlwaysOnTop: Boolean;
                collectionBuildingUpsyncProgressThreshold: number;
                collectionBuildingProgressThreshold: number;
                avienabled: Boolean;
                collectionBuildingMissingDataThesholdPercentage: number;
                collectionBuildingMDLCProgressThreshold: number;
                collectionBuildingMDLCProgressBatchSize: number;
                collectionBuildingEndDelaySec: number;
                cloudCollectionV2FirstTrackAdded: Boolean;
                bandwidthTestTimeoutSec: number;
                totalDownloadsRequested: number;
                appLaunchesRequiredToShowRatingsDialog: number;
                appLaunchCount: number;
                appFirstLaunchDate: Date;
                animationsEnabled: Boolean;
                alwaysPromptOnPurchase: Boolean;
                accessMediaHangTimeoutSec: number;
                collectionBuildingProgressBatchSize: number;
                isEnterpriseMachine: Boolean;
                showDebugAssertDialogs: Boolean;
                userResponseToRatingsDialog: number;
                useCellularData: Boolean;
                upgradeToBlueUri: string;
                unctimeout: number;
                uncretryTimeout: number;
                totalDownloadsSucceeded: number;
                backgroundBackstopDueTimeSec: number;
                totalDownloadsQueued: number;
                totalDownloadsFailed: number;
                subServicesStartupDelaySecs: number;
                showTaskbarPlayerPrompt: Boolean;
                showPromptOnPurchaseSetting: Boolean;
                showPerfTrackLog: Boolean;
                versionOfLastClose: string;
                resetRatingsDialogBuild: string;
                ratingsDialogLaunchDeferralTimeInSeconds: number;
                proxyAuthenticationEnabled: Boolean;
                promptOnPurchaseFirstRun: Boolean;
                productVersion: string;
                overrideIsInternetConnected: Boolean;
                oneDriveDialogShown: Boolean;
                musicMatchMaxDeferralTimeMS: number;
                forceChunkDownloadForWMV: Boolean;
                minimumScoreForHCR: number;
                maxSimultaneousDownloads: number;
                maxParallelDownloadFileSizeKB: number;
                maxChunkDownloadSizeBytes: number;
                maxBackgroundSimultaneousDownloads: number;
                legacyConfigSettingsUserId: string;

            }
            export class GrovelerConfiguration implements IGrovelerConfiguration {
                // constructor();
                lastGrovelMusicCount: number;
                lastGrovelDate: Date;
                isFirstTimeGrovel: Boolean;
                hasMigratedToCloudCollectionV2: Boolean;
                grovelBatchSize: number;
                fullGrovelIntervalSec: number;
                fullGrovelCompleted: Boolean;
                fixStorageLocationsInDB: Boolean;
                fixSortTitlesInDB: Boolean;
                fixFuzzyMatchedTracksInDB: Boolean;
                enabled: Boolean;
                disableTrackDeduping: Boolean;
                configuration: number;
                cleanUpUnistore: Boolean;
                checkNetworkAfterResume: Boolean;
                autoRefreshLicenseForWMA: Boolean;
                allowDiscMedia: Boolean;
                zmediaRevisionNumber: number;
                lastGrovelVideoCount: number;
                allowDVRMSOnMediaCenter: Boolean;
                usePropertyPrefetch: Boolean;
                totalImportedPlaylistCount: number;
                sendFuzzyMatchedTelemetry: Boolean;
                scanRemovedFiles: Boolean;
                runningSecondGrovel: Boolean;
                ripDirectory: string;
                removedPlaceholderFiles: Boolean;
                playlistImportCompleted: Boolean;
                onlyUseIndexer: Boolean;
                migrateToStrictMetadataGrouping: Boolean;
                maxPlaylistsInCollection: number;
                maxPlaylistTitleLength: number;
                maxPlaylistItemCount: number;
                masterRatingFileDirty: Boolean;
                masterPlaylistFileDirty: Boolean;
                librarySync: number;
                legacyImportComplete: Boolean;

            }
            export interface IABTestingOverridesConfiguration {
                fileActivationPostRoll: number;
                musicUpsellBannerAction: number;
                musicUpsellBannerMessage: number;
                testABTests: number;
                videoPostRoll: number;
                videoPostRollNoMovieMarketplace: number;
                videoPostRollNoTvMarketplace: number;
                videoSpotlightFeedUrl: string;
            }
            export interface IAdsConfiguration {
                musicAdApplicationId: string;
                musicAudioAdUnitIds: string;
                musicAudioAdUnitIdsUnAuth: string;
                musicDashboardAdUnitIds: string;
                musicPopularSidebarAdUnitIds: string;
                musicSpotlightSidebarAdUnitIds: string;
                musicVideoAdUnitIds: string;
                musicVideoAdUnitIdsUnAuth: string;
                video2AdApplicationId: string;
                video2MovieAdUnitIds: string;
                video2MovieFreeWithAdUnitId: string;
                video2TvAdUnitIds: string;
                videoAdApplicationId: string;
                videoMovieAdUnitIds: string;
                videoTvAdUnitIds: string;
            }
            export interface IAmsterdamConfiguration {
                filteringEnabled: Boolean;
                folderThumbnailsEnabled: Boolean;
                minimumDlnaSupportedBuild: number;
                minimumSetBackgroundImageSupportedBuild: number;
                musicContentTypes: string;
                musicFileExtensions: string;
                musicThumbnailsEnabled: Boolean;
                onUsbErrorCodecRetrievalEnabled: Boolean;
                photoFileExtensions: string;
                photoThumbnailsEnabled: Boolean;
                sortingEnabled: Boolean;
                supportsMKV: Boolean;
                usbEnabled: Boolean;
                videoContentTypes: string;
                videoFileExtensions: string;
                videoThumbnailsEnabled: Boolean;
            }
            export interface IConfigurationManager {
                abtestingOverrides: ABTestingOverridesConfiguration;
                ads: AdsConfiguration;
                amsterdam: AmsterdamConfiguration;
                drm: DRMConfiguration;
                fue: FUEConfiguration;
                features: FeaturesConfiguration;
                flighting: FlightingConfiguration;
                fulfillment: FulfillmentConfiguration;
                generalSettings: GeneralSettingsConfiguration;
                groveler: GrovelerConfiguration;
                mbr: MBRConfiguration;
                mdlc: MDLCConfiguration;
                marketplace: MarketplaceConfiguration;
                mediaStore: MediaStoreConfiguration;
                music: MusicConfiguration;
                playback: PlaybackConfiguration;
                queries: QueriesConfiguration;
                service: ServiceConfiguration;
                services: ServicesConfiguration;
                shell: ShellConfiguration;
                shipAsserts: ShipAssertsConfiguration;
                sync: SyncConfiguration;
                telemetry: TelemetryConfiguration;
                transfer: TransferConfiguration;
                unitTest: UnitTestConfiguration;
                video: VideoConfiguration;
            }
            export interface IDRMConfiguration {
                lastFullRefresh: Date;
                silentDRMConfiguration: Boolean;
                syncLicenseMinCount: number;
                syncLicenseMinHours: number;
                timeBetweenRefreshSessionsMins: number;
                timeBetweenRefreshms: number;
            }
            export interface IFeaturesConfiguration {
                audioFingerprinter: string;
                castAndCrew: string;
                closedCaptionsEnabled: string;
                cloudCollectionV2Enabled: string;
                devicesEnabled: string;
                explicitMatchingEnabled: string;
                fileLaunchToDashboard: string;
                flightingEnabled: string;
                formerMusicFreePlay: string;
                keystoneRegionEnabled: string;
                logNetworkServiceRequests: string;
                metaCritic: string;
                metadataEdit: string;
                metroGamesMarketplace: string;
                metroGamesPurchase: string;
                movieCriticRatingSort: string;
                movieTrailersMarketplace: string;
                moviesMarketplace: string;
                musicAudioAdsEnabled: string;
                musicFreeGiveAwayMarketplace: string;
                musicFreePlay: string;
                musicFreePlayAnonAds: string;
                musicFreePlayAnonymous: string;
                musicMarketplace: string;
                musicMarketplaceEditorial: string;
                musicShareToPhone: string;
                musicSignInAvailable: string;
                musicSubscription: string;
                musicVideosCollectionEnabled: string;
                musicVideosEnabled: string;
                musicVideosMarketplace: string;
                pinToStart: string;
                previewMovieTrailers: string;
                rottenTomatoes: string;
                secureEDSEndpointsEnabled: string;
                smartDJMarketplace: string;
                smartVJMarketplace: string;
                storeSync: string;
                streamMetroGameTrailers: string;
                streamXbox360GameTrailers: string;
                tvCriticRatingSort: string;
                tvLastNightQuery: string;
                tvMarketplace: string;
                upgradeToBlue: string;
                videoAllQuerySupported: string;
                videoFeaturedSetsEnabled: string;
                videoFreePurchase: string;
                videoFreeWithAds: string;
                videoLiveTile: string;
                videoShowMovieTrailers: string;
                videoSignInAvailable: string;
                videoWatchlist: string;
                xbox360ConsoleRegions: string;
                xbox360GamesMarketplace: string;
                xbox360GamesPurchase: string;
            }
            export interface IFlightingConfiguration {
                deeplinkTunerConfigEnabled: Boolean;
                experimentIds: string;
                groupIds: string;
            }
            export interface IFUEConfiguration {
                acceptedEula: Boolean;
                acceptedPrivacyStatement: Boolean;
                freeStreamingIsGoneAnnouncementDismissed: Boolean;
                minMusicAppSupportedVersion: string;
                minVersionBlockAllAppUse: string;
                minVideoAppSupportedVersion: string;
                musicAvailableOfflineFlyoutFilterShown: Boolean;
                musicCloudContentV1CleanupDialogDismissed: Boolean;
                musicCloudContentV2FlyoutFilterShown: Boolean;
                settingsVersion: number;
                showFUE: Boolean;
                showFirstLaunchVideo: Boolean;
                showLXFUE: Boolean;
            }
            export interface IFulfillmentConfiguration {
                enableRentalFilteringHack: Boolean;
                forceVideoIngestionRefreshSyncToken: string;
                lastHandledIngestionRefreshSyncToken: string;
                logSuccessTelemetryDuringVideoIngestion: Boolean;
                maxInputVideoItemsInEdsDetailsRequest: number;
                preferH264Content: Boolean;
                purchasedCacheProductSkus: string;
                purchasedServiceProductSkus: string;
                videoLicensingClientTypeOverride: string;
                videoOnlyFiltersRentalsWithDeviceName: Boolean;
                videoProductFilterTimeSpanForDownloadOnlyInMinutes: number;
                videoProductFilterTimeSpanForEdsOmittedItemInMinutes: number;
                videoProductFilterTimeSpanForEdsRequestFailedInMinutes: number;
                videoProductFilterTimeSpanForProductNotAvailableToDeviceInMinutes: number;
            }
            export interface IGeneralSettingsConfiguration {
                avienabled: Boolean;
                accessMediaHangTimeoutSec: number;
                alwaysPromptOnPurchase: Boolean;
                animationsEnabled: Boolean;
                appFirstLaunchDate: Date;
                appLaunchCount: number;
                appLaunchesRequiredToShowRatingsDialog: number;
                backgroundBackstopDueTimeSec: number;
                bandwidthTestTimeoutSec: number;
                cloudCollectionV2FirstTrackAdded: Boolean;
                collectionBuildingEndDelaySec: number;
                collectionBuildingMDLCProgressBatchSize: number;
                collectionBuildingMDLCProgressThreshold: number;
                collectionBuildingMissingDataThesholdPercentage: number;
                collectionBuildingProgressBatchSize: number;
                collectionBuildingProgressThreshold: number;
                collectionBuildingUpsyncProgressThreshold: number;
                compactModeAlwaysOnTop: Boolean;
                consecutiveDownloadsSucceeded: number;
                databaseProductVersion: string;
                daysSinceFirstLaunchToShowRatingsDialog: number;
                debugDRM: Boolean;
                fileTransferProgressCheckTime: number;
                forceChunkDownload: Boolean;
                forceChunkDownloadForWMV: Boolean;
                idleApplicationServiceTimeout: number;
                imageCleanupAccessTime: number;
                imageCleanupIntervalTime: number;
                imageCleanupLastRun: Date;
                initialRatingsDialogBuild: string;
                isDogfoodBuild: Boolean;
                isEnterpriseMachine: Boolean;
                legacyConfigSettingsUserId: string;
                maxBackgroundSimultaneousDownloads: number;
                maxChunkDownloadSizeBytes: number;
                maxParallelDownloadFileSizeKB: number;
                maxSimultaneousDownloads: number;
                minimumScoreForHCR: number;
                musicMatchDeferralTimeMS: number;
                musicMatchMaxDeferralTimeMS: number;
                oneDriveDialogShown: Boolean;
                overrideIsInternetConnected: Boolean;
                productVersion: string;
                promptOnPurchaseFirstRun: Boolean;
                proxyAuthenticationEnabled: Boolean;
                ratingsDialogLaunchDeferralTimeInSeconds: number;
                resetRatingsDialogBuild: string;
                showDebugAssertDialogs: Boolean;
                showPerfTrackLog: Boolean;
                showPromptOnPurchaseSetting: Boolean;
                showTaskbarPlayerPrompt: Boolean;
                subServicesStartupDelaySecs: number;
                totalDownloadsFailed: number;
                totalDownloadsQueued: number;
                totalDownloadsRequested: number;
                totalDownloadsSucceeded: number;
                uncretryTimeout: number;
                unctimeout: number;
                upgradeToBlueUri: string;
                useCellularData: Boolean;
                userResponseToRatingsDialog: number;
                versionOfLastClose: string;
            }
            export interface IGrovelerConfiguration {
                allowDVRMSOnMediaCenter: Boolean;
                allowDiscMedia: Boolean;
                autoRefreshLicenseForWMA: Boolean;
                checkNetworkAfterResume: Boolean;
                cleanUpUnistore: Boolean;
                configuration: number;
                disableTrackDeduping: Boolean;
                enabled: Boolean;
                fixFuzzyMatchedTracksInDB: Boolean;
                fixSortTitlesInDB: Boolean;
                fixStorageLocationsInDB: Boolean;
                fullGrovelCompleted: Boolean;
                fullGrovelIntervalSec: number;
                grovelBatchSize: number;
                hasMigratedToCloudCollectionV2: Boolean;
                isFirstTimeGrovel: Boolean;
                lastGrovelDate: Date;
                lastGrovelMusicCount: number;
                lastGrovelVideoCount: number;
                legacyImportComplete: Boolean;
                librarySync: number;
                masterPlaylistFileDirty: Boolean;
                masterRatingFileDirty: Boolean;
                maxPlaylistItemCount: number;
                maxPlaylistTitleLength: number;
                maxPlaylistsInCollection: number;
                migrateToStrictMetadataGrouping: Boolean;
                onlyUseIndexer: Boolean;
                playlistImportCompleted: Boolean;
                removedPlaceholderFiles: Boolean;
                ripDirectory: string;
                runningSecondGrovel: Boolean;
                scanRemovedFiles: Boolean;
                sendFuzzyMatchedTelemetry: Boolean;
                totalImportedPlaylistCount: number;
                usePropertyPrefetch: Boolean;
                zmediaRevisionNumber: number;
            }
            export interface IMarketplaceConfiguration {
                marketplaceCulture: string;
                marketplaceDownloadSupported: Boolean;
                marketplaceMappings: string;
            }
            export interface IMBRConfiguration {
                enableMultiChannelAudio: Boolean;
                excessiveBufferingMaxAttempts: number;
                excessiveBufferingPositionThresholdMs: number;
                excessiveBufferingTimeoutMs: number;
                initialBandwidthBps: number;
                maxMissingOrCorruptedChunks: number;
                openTimeoutMs: number;
                reportingPercentage: number;
            }
            export interface IMDLCConfiguration {
                albumArtPrefetchEnabled: Boolean;
                albumArtV2Enabled: Boolean;
                albumsSuggestXblContractVersion: string;
                artPrefetchInterval: number;
                bingIdFoundSearchRetryIntervalHr: number;
                bingIdNotFoundSearchRetryIntervalHr: number;
                bingIdRetrievalBatchSize: number;
                bingIdRetrievalEnabled: Boolean;
                bingIdRetrievalOfTracksEnabled: Boolean;
                bingIdRetrievalRequestIntervalMs: number;
                connectToInternetForAlbumMetadata: Boolean;
                enabled: Boolean;
                expirationIntervalError: number;
                expirationIntervalFound: number;
                expirationIntervalNotFound: number;
                fileCountRecalculateIntervalHr: number;
                findAlbumInfoAlbumWinningScoreThreshold: number;
                findAlbumInfoDurationMatchScore: number;
                findAlbumInfoDurationMaxDifferenceMs: number;
                findAlbumInfoEnabled: Boolean;
                findAlbumInfoExactMatchingTrackScore: number;
                findAlbumInfoExplicitAlbumScore: number;
                findAlbumInfoFuzzyMatchingTrackScore: number;
                findAlbumInfoFuzzyStringMatchThresholdPercentage: number;
                findAlbumInfoFuzzyStringMatchingDelimiters: string;
                findAlbumInfoNonMatchingAlbumScore: number;
                findAlbumInfoNonMatchingDurationScore: number;
                findAlbumInfoNonMatchingTrackScore: number;
                findAlbumInfoPartiallyMatchingTrackScore: number;
                findAlbumInfoRequestIntervalMs: number;
                findAlbumInfoUpdateTrackMetadataStateEnabled: Boolean;
                fingerprintRetryIntervalMinutes: number;
                fingerprintingMaxParallelizableTasks: number;
                firstMDLCDidWork: Boolean;
                firstMDLCFinished: Boolean;
                firstMDLCPercentageComplete: number;
                firstMDLCTracksComplete: number;
                lastArtPrefetchDate: Date;
                lastTimeCollectionCharacteristicsCalculated: number;
                lastTimeFileCountsRecalculated: number;
                libraryCharacteristicsIntervalHr: number;
                logWMISRequests: Boolean;
                matchTracksXblContractVersion: string;
                maximumTracksInMatchRequest: number;
                metadataLookup_AMGAttempt: number;
                metadataLookup_AMGSuccess: number;
                metadataLookup_EDSDetailsAttempt: number;
                metadataLookup_EDSDetailsSuccess: number;
                metadataLookup_ETMAttempt: number;
                metadataLookup_ETMSuccess: number;
                metadataLookup_FAIAttempt: number;
                metadataLookup_FAISuccess: number;
                metadataLookup_TOCAttempt: number;
                metadataLookup_TOCSuccess: number;
                metadataLookup_WMIDAttempt: number;
                metadataLookup_WMIDSuccess: number;
                metadataRetrievalRequestIntervalMs: number;
                minimumWorkPeriodBeforeGrovel: number;
                minimumWorkPeriodBeforeSync: number;
                musicMatchPartialMatchThresholdBehavior: Boolean;
                musicMatchPartialMatchThresholdPercent: number;
                musicMatchRequestTimeoutMs: number;
                musicVideosRefreshIntervalMin: number;
                performWMISInNonMarketplace: Boolean;
                performWMISRequestDelay: Boolean;
                preferExplicitMatching: Boolean;
                radioCollectionSize: number;
                sendTrackTitleEvenIfEmptyInFile: Boolean;
            }
            export interface IMediaStoreConfiguration {
                bypassDbSchemaVersionCheck: Boolean;
                currentDbSchemaVersion: number;
                dbMigrationProgress: number;
                enableFuzzyMatching: Boolean;
                executeMediaRightTableCleanup: Boolean;
                lastOpenedDatabaseUserId: string;
                maxTrackDurationDeltaMS: number;
                overwriteAllMetadata: Boolean;
                writeOutMetadata: Boolean;
            }
            export interface IMusicConfiguration {
                aas: string;
                allowArtistGrid: Boolean;
                anonymousLimitReached: Boolean;
                anonymousLimitReachedVideoShown: Boolean;
                backgroundAudioEnabled: Boolean;
                defaultPivotIndex: number;
                disableArtistBioLinks: Boolean;
                ertMin: string;
                exploreHubRefreshTime: number;
                fpaisli: number;
                fpspsli: number;
                firstFreeStringsLaunch: Boolean;
                freeIndividualTrackAllowance: number;
                freePlayAnnounce: Boolean;
                freeTrialCompleted: number;
                monthlyFreeLimitExceeded: number;
                monthlyFreeMinutesAllowance: number;
                musicPassDownloadEnabled: Boolean;
                nextMonthlyFreeLimitResetDate: string;
                pageLoadTimeUntilSpinner: number;
                purchaseSubfolderName: string;
                radioStringLocales: string;
                showWelcomeDialog: Boolean;
                subscriptionFolderName: string;
                totalAudioAdImpressions: number;
                totalUnauthenticatedTrackAllowance: number;
                totalUnauthenticatedTracksUsed: number;
                totalVideoAdImpressions: number;
                trackFreeLimitsResetToken: string;
                useDXDashboard: Boolean;
                useStickyPivots: Boolean;
                vas: string;
                welcomeAcknowledged: Boolean;
            }
            export interface IPlaybackConfiguration {
                allowApproximateSeeking: Boolean;
                allowApproximateSeekingOnShinyDiscOnly: Boolean;
                allowLRCSubnetTransport: Boolean;
                approximateSeekBitrate: number;
                approximateSeekDuration: number;
                cdplayJitterCorrect: Boolean;
                dxvamaximumFPS: number;
                defaultStartBitrate: number;
                disableMediaQueuing: Boolean;
                dumpErrorInfo: Boolean;
                dynamicRangeControl: number;
                enableLRC: Boolean;
                enableMusicVisualization: Boolean;
                enableVideo2SmoothFastForwardRewind: Boolean;
                enableVideo2SmoothFastForwardRewindForH264: Boolean;
                enableVideo2SmoothStreamingTelemetry: Boolean;
                enableVideoQualitySelector: Boolean;
                fsdkcloseReaderThresholdMs: number;
                fastStartForceAudioFormatMismatch: Boolean;
                fastStartForceKIDMismatch: Boolean;
                forceApproximateSeeking: Boolean;
                forceDeinterlaceMode: number;
                getPreferredStreamRetries: number;
                getPreferredStreamRetryDelayMS: number;
                h264StreamingDownloadBufferSizeSecs: number;
                h264StreamingHealthyBufferPercentage: number;
                h264StreamingSendSamplesAfterDownloadCompletes: Boolean;
                leqenabledForAudio: Boolean;
                leqenabledForVideo: Boolean;
                mcplayerAdapterSeekBackDeltaHNS: number;
                mcplayerAdapterSeekForwardDeltaHNS: number;
                mp4DropFramesIfLateByInMilliseconds: number;
                maxBitrateConstrained: number;
                maxHeightConstrained: number;
                maxWidthConstrained: number;
                modeLoop: Boolean;
                modeShuffle: Boolean;
                music2MaxNowPlayingItemCount: number;
                music2VolumeValue: number;
                notifyIMClient: Boolean;
                notifyIncludePodcasts: Boolean;
                notifyIncludeVideos: Boolean;
                offlineNetworkRequestDelay: number;
                previewOnly: Boolean;
                respectConstrainedMode: Boolean;
                showNowPlayingClipAnimations: Boolean;
                showNowPlayingList: Boolean;
                showTotalTime: Boolean;
                streamingPrerollMS: number;
                useTMFProdEnv: Boolean;
                verifyRightsDelayMS: number;
                video2SmoothFastForwardRewindMaxRate: number;
                videoPlaybackParentalRatingsListing: string;
                videoRatingAvailable: string;
                videoRatingValues: string;
                xmediaEnvironment: string;
                musicMuteState: Boolean;
                musicVolumeValue: number;
            }
            export interface IQueriesConfiguration {
                computeOneDriveFlags: Boolean;
                dbQueryCachingEnabled: Boolean;
                dbQueryRefreshEnabled: Boolean;
                pageSize: number;
                serviceCachingOverride: number;
                showSongsWithNoRights: Boolean;
            }
            export interface IServiceConfiguration {
                accountsAuthEndpoint: string;
                accountsTroubleshooterEndpoint: string;
                accountsTroubleshooterRelyingPartyEndpoint: string;
                alwaysShowUpgradeNotification: Boolean;
                authTransferEndpoint: string;
                autoRefreshQueryFallback: number;
                bigCatEndpoint: string;
                bingAutoSuggestEndpoint: string;
                blockPurchaseOnServiceFailure: Boolean;
                blockVideoRentalsDuringGrovel: Boolean;
                ctpauthEndpoint: string;
                ctppassportEndpoint: string;
                cdfXboxLiveDotComEndpoint: string;
                cleanedUpDatabase: Boolean;
                cloudCollectionEndpoint: string;
                cloudCollectionPlaylistEndpoint: string;
                cloudCollectionRelyingPartyEndpoint: string;
                cloudCollectionV2Endpoint: string;
                commerceBaseEndpoint: string;
                commerceBillingHistoryEndpoint: string;
                commerceContactInfoEndpoint: string;
                commerceContactPreferencesEndpoint: string;
                commerceEndpoint: string;
                commercePaymentOptionsEndpoint: string;
                commercePrivacyEndpoint: string;
                commercePurchaseEndpoint: string;
                commercePurchaseRelyingPartyEndpoint: string;
                commerceV2Endpoint: string;
                commerceV3Endpoint: string;
                commerceXdlcInventoryEndpoint: string;
                commerceXdlcInventoryRelyingPartyEndpoint: string;
                commerceXdlcLicensingEndpoint: string;
                commerceXdlcLicensingRelyingPartyEndpoint: string;
                configDownloadCheckTimer: number;
                configDownloadPeriod: number;
                configLastDownload: Date;
                defaultHeaderDeviceType: string;
                defaultHeaderDeviceTypeNative: string;
                defaultTargetDeviceType: string;
                defaultTargetDeviceTypeNative: string;
                downloadQoSFrequency: number;
                edsrelyingPartyEndpoint: string;
                edssearchEndpoint: string;
                edsserviceAnonEndpoint: string;
                edsserviceAnonNoCultureEndpoint: string;
                edsserviceAuthEndpoint: string;
                edsserviceAuthNoCultureEndpoint: string;
                eslistServiceEndpoint: string;
                esrelyingPartyEndpoint: string;
                echoNestApiKey: string;
                echoNestDeveloperApiEndpoint: string;
                echoNestTextExtractMaxChunks: number;
                echoNestTextExtractMaxSize: number;
                enableFreeJustPlays: Boolean;
                enableMusicZestSignIn: Boolean;
                enableNativeSignIn: Boolean;
                enableSecureAuth: Boolean;
                enableTimeTravel: Boolean;
                enableVideoZestSignIn: Boolean;
                entitlementsCollectionsEndpoint: string;
                environmentName: string;
                feedbackEndpoint: string;
                flightAssignmentEndpoint: string;
                gamesCatalogEndpoint: string;
                gamesCatalogNoCultureEndpoint: string;
                getAlbumDetailsByAlbumIdEndpoint: string;
                graceNoteEndpoint: string;
                graceNoteSupportedLanguageStringMap: string;
                imageCatalogEndpoint: string;
                lastSignInAccountRegion: string;
                lastSignedInUserAccountLocale: string;
                lastSignedInUserCid: string;
                lastSignedInUserExplicitPrivilege: Boolean;
                lastSignedInUserGamerTag: string;
                lastSignedInUserGuid: string;
                lastSignedInUserMembership: string;
                lastSignedInUserParentControl: Boolean;
                lastSignedInUserSignInName: string;
                lastSignedInUserSubscription: Boolean;
                lastSignedInUserXuid: string;
                liveTileEndpoint: string;
                localCurrencyFilters: string;
                marketplaceLicensingEndpoint: string;
                maxInventoryFilterIds: number;
                mediaDeliveryV1RelyingPartyEndpoint: string;
                mediaDeliveryV2Endpoint: string;
                mediaDeliveryV2RelyingPartyEndpoint: string;
                mediaDiscoveryEndpoint: string;
                mediaUsageEndpoint: string;
                mediaUsageRelyingPartyEndpoint: string;
                microsoftBillingEndpoint: string;
                minMusicServiceSupportedVersion: string;
                minMusicSignInSupportedVersion: string;
                minSystemDiskSpaceBuffer: number;
                minVersionAllowSignInButNag: string;
                minVersionOnlyAllowLocalUse: string;
                minVideoServiceSupportedVersion: string;
                minVideoSignInSupportedVersion: string;
                modernPurchaseEndpoint: string;
                modernWebBlendHeight: string;
                musicAppSpotlightVersion: string;
                musicAssetRequestsEndpoint: string;
                musicAuthEndpoint: string;
                musicImageServiceEndpoint: string;
                musicMatchRelyingPartyEndpoint: string;
                musicMatchRequestsEndpoint: string;
                musicPassSignupPageEndpoint: string;
                nookGpbEndpoint: string;
                nookProxyEndpoint: string;
                nookStoreEndpoint: string;
                pcmarketplaceEndpoint: string;
                passportEndpoint: string;
                passportEnvironment: string;
                passportTicketEndpoint: string;
                pastPurchaseData: string;
                postrollCreditsEndpoint: string;
                purchaseFlowEndpoint: string;
                purchaseHD: Boolean;
                purchaseHistoryFrequencyInSeconds: number;
                purchaseHistoryMinimumIncrementInSeconds: number;
                purchaseHistoryReattemptAfterFailureInSeconds: number;
                purchaseHistoryRentalWindowInDays: number;
                ratingsEndpoint: string;
                ratingsRelyingPartyEndpoint: string;
                readAccountMergeEndpoint: string;
                readBuyerUXEndpoint: string;
                readBuyerUXTOUEndpoint: string;
                readCommerceServiceEndpoint: string;
                readPurchaseEndpoint: string;
                recommendationsMaxTrackCount: number;
                refreshDeviceLicenseResult: number;
                refreshPCLicenseResult: number;
                refreshSubscriptionLicenseDuration: number;
                reportUsageDataDuration: number;
                richPresenceEndpoint: string;
                rootCatalogEndpoint: string;
                rootLicenseAcquired: Boolean;
                rootLicenseFirstRefreshDate: string;
                sandboxId: string;
                signInAtStartupUser: string;
                signInNetworkErrorRetryCount: number;
                skipDrmDuringRightsManagement: Boolean;
                storeChannelsEndpoint: string;
                submitAddFeedbackEndpoint: string;
                subscriptionProductId: string;
                targetedProgrammingArchitecture: string;
                targetedProgrammingClientOs: string;
                targetedProgrammingClientVersion: string;
                timeTravel: string;
                timeTravelStartDate: string;
                tunerInfoWindowsMachineId: string;
                tunersEndpoint: string;
                uxservicesRelyingPartyEndpoint: string;
                useEntCommonSignInRequests: Boolean;
                useLandingPageForMusicPassSignup: Boolean;
                useRichPresenceService: Boolean;
                useTestExpirationService: Boolean;
                useUserEngagementService: Boolean;
                useZuneCatalog: Boolean;
                userEngagementServiceEndpoint: string;
                userEngagementUrlEnd: string;
                userProfileEndpoint: string;
                userTokenAuthRequestEndpoint: string;
                userTokenTargetEndpoint: string;
                videoAppFlexHubSuffix: string;
                videoAppLiveTileSuffix: string;
                videoAppMovieHubSuffix: string;
                videoAppPostRollCreditsSuffix: string;
                videoAppSpotlightSuffix: string;
                videoAppTvHubSuffix: string;
                videoAppTvOnLastNightHubSuffix: string;
                videoDeliveryEndpoint: string;
                videoDeliveryRelyingPartyEndpoint: string;
                wmisendpointsEndpoint: string;
                wmisimageEndpoint: string;
                wmispartner: string;
                wmisredirEndpoint: string;
                winPhoneXboxDotComEndpoint: string;
                xblauthEndpoint: string;
                xboxEndpoint: string;
                xboxLiveEndpoint: string;
                xboxLiveSSLEndpoint: string;
                xstsauthEndpoint: string;
                xstsauthPassportEndpoint: string;
                xtokenAuthRequestEndpoint: string;
                xtokenTargetEndpoint: string;
                xblEnvironment: string;
                xblRelyingPartyEndpoint: string;
                xboxLiveDataEndpoint: string;
                xboxLiveDataRelyingPartyEndpoint: string;
                xboxMusicEndpoint: string;
                xboxSupportEndpoint: string;
            }
            export interface IServicesConfiguration {
                introBarkerShown: Boolean;
            }
            export interface IShellConfiguration {
                applyBackgroundOnAccountCreation: Boolean;
                attachCookieToRemovedDomElements: Boolean;
                attachLargeObjectToUnloadedControl: Boolean;
                backgroundBackStackTrimmingDelay: number;
                backgroundColor: number;
                backgroundImage: string;
                cloudMatching: number;
                defaultLibraryChunkSize: number;
                dontPendControlUnloadCleanup: Boolean;
                dragAndDropEnabled: Boolean;
                enableWebHostResizeMessage: Boolean;
                enableWindowSnap: Boolean;
                gamesDashboardRefreshTimer: number;
                ignoreLowPriorityAsserts: Boolean;
                initializationSequence: number;
                lastClientCulture: string;
                lastMarketplaceCulture: string;
                lastUpdateCheck: Date;
                lastUsedAppNavigationMonikerData: string;
                loadClassicApp: Boolean;
                mixFixedRandom: Boolean;
                mixIdleTimeoutMS: number;
                music2DashboardRefreshTimer: number;
                musicCollectionView: number;
                musicDashboardRefreshTimer: number;
                musicDeviceView: number;
                notificationVersion: number;
                preventSelectionManagerSettingSaves: Boolean;
                previousSoftBlockVersion: string;
                randomAccessCacheLifespanMS: number;
                retailExperience: Boolean;
                showApplicationPivot: Boolean;
                showAppsCollectionNotification: Boolean;
                showAppsForWindowsPhoneOnlyHeader: Boolean;
                showAppsForZuneHDOnlyHeader: Boolean;
                showContentTypes: Boolean;
                showMoviesPivot: Boolean;
                showNowPlayingBackgroundOnIdleTimeout: number;
                showPlayInfoInTaskbar: Boolean;
                showPreviewBranding: Boolean;
                showRemoveInPreferences: Boolean;
                showSongInfoInWindowTitle: Boolean;
                showTVPivot: Boolean;
                showWhatsNew: Boolean;
                sounds: Boolean;
                startupPage: string;
                suppressWhatsNewShownForRelease: Boolean;
                topBarColor: number;
                topBarHoveredColor: number;
                topBarSelectedColor: number;
                topBarSelectedHoveredColor: number;
                uirefresh: Boolean;
                useEDSForSearch: Boolean;
                useStickyPivots: Boolean;
                useUserEngagementService: Boolean;
                video2DashboardRefreshTimer: number;
                videoCollectionView: number;
                videoDashboardRefreshTimer: number;
                webBlendLoadTimeoutMS: number;
                webBlendResponseTimeoutMS: number;
                whatsNewNonLaunchCountData: string;
                whatsNewReleaseName: string;
                whatsNewShownForRelease: string;
                whatsNewStringIdsForMusic: string;
            }
            export interface IShipAssertsConfiguration {
                captureDumpTimeOutSec: number;
                configEndpoint: string;
                configSerialNumber: number;
                deactivateLogging: Boolean;
                defaultExpirationDays: number;
                defaultWaitDays: number;
                disableRemoteTraceCollection: number;
                lastConfigDownload: Date;
                lastPrompt: Date;
                managedAssertsBreakInNative: Boolean;
                updateFrequency: number;
            }
            export interface ISyncConfiguration {
                accountMergeHandled: Boolean;
                backgroundLibrarySyncMaxBatchSize: number;
                cloudCollectionEnabled: Boolean;
                cloudCollectionOfflineFolderName: string;
                cloudCollectionV2DeduplicationStrategy: number;
                cloudCollectionV2DeduplicationStrategyShadowCopy: number;
                cloudCollectionV2DeduplicationStrategyUI: Boolean;
                cloudMinSyncIntervalMS: number;
                currentSyncRunStart: Date;
                enableVideoBookmarkSync: Boolean;
                fullSync: Boolean;
                fullSyncStartTick: number;
                initialSyncCompleteSyncTypes: number;
                keepCloudCollectionOffline: Boolean;
                lastSyncSessionState: Boolean;
                latestSyncReason: number;
                librarySyncMaxBatchSize: number;
                maxTracksInCollection: number;
                musicLibrarySyncDeferralTimeMS: number;
                musicLibrarySyncMaxDeferralTimeMS: number;
                phonePollIntervalSeconds: number;
                prefetchSyncBatch: Boolean;
                readingAlwaysAssumeSyncNotificationReceived: Boolean;
                readingNextSafetySyncTime: Date;
                skipAppModeCheck: Boolean;
                syncBlockedItems: Boolean;
                syncDeferralTimeMS: number;
                syncMaxDeferralTimeMS: number;
                tdsyncToken: string;
                videoBookmarkChangesWereEverTracked: Boolean;
                videoLibrarySyncDeferralTimeMS: number;
                videoLibrarySyncMaxDeferralTimeMS: number;
                videoSafetySyncIntervalInSeconds: number;
            }
            export interface ITelemetryConfiguration {
                appStateHeartbeatInterval: number;
                cosmosBackOffTimeMs: number;
                cosmosMaxBatchSizeInChars: number;
                cosmosOfflineCacheSize: number;
                cosmosSendInterval: number;
                enabled: Boolean;
                eventIdsToDrop: string;
                flightId: string;
                flightNumber: number;
                immediateEventIds: string;
                keystoneDropEvents: string;
                keystoneDropHTTPContentTypes: string;
                keystoneDropHTTPHostNames: string;
                keystoneEnabled: Boolean;
                keystoneHeartbeatInterval: number;
                keystoneMaxBackOffMs: number;
                keystoneMaxBatchSizeInChars: number;
                keystoneProvisioningServer: string;
                keystoneSamplingPercentage: number;
                keystoneSendInterval: number;
                maxTelemetryEventGeneration: number;
                musicPlaybackBackground: number;
                musicPlaybackSnapped: number;
                musicPlaybackUnsnapped: number;
                notSnapped: number;
                persistTelemetryEventFailed: Boolean;
                previousSessionGuid: string;
                purchaseHistoryItemProcessErrorCount: number;
                purchaseHistoryItemProcessTotalCount: number;
                selectivelyEnabledComponents: string;
                sendAllEventsImmediately: Boolean;
                sessionGuid: string;
                shipAssertParamIdsToDrop: string;
                snappedMode: number;
                submitIdAnonymous: string;
                submitIdSignedIn: string;
                submitSequenceNumberAnonymous: number;
                submitSequenceNumberSignedIn: number;
                submitTelemetryEventFailed: Boolean;
                timeSpent: number;
                umsbatchSize: number;
                umsenabled: Boolean;
                umsisTestScenario: Boolean;
                userTimeEventTimeout: number;
                videoPlaybackBackground: number;
                videoPlaybackSnapped: number;
                videoPlaybackUnsnapped: number;
                visitorId: string;
            }
            export interface ITransferConfiguration {
                transferState: number;
                userEnabled: Boolean;
            }
            export interface IUnitTestConfiguration {
                myBoolValue: Boolean;
                myDateValue: Date;
                myDoubleValue: number;
                myInt64Value: number;
                myIntValue: number;
                myStringValue: string;
            }
            export interface IVideoConfiguration {
                actorSearchEnabled: Boolean;
                actorSearchSlot0EditValue: number;
                actorSearchSlot11EditValue: number;
                actorSearchSlot14EditValue: number;
                actorSearchSlot17EditValue: number;
                actorSearchSlot2EditValue: number;
                actorSearchSlot5EditValue: number;
                actorSearchSlot8EditValue: number;
                contentRestrictionMaxEmptyFeaturedItems: number;
                customerRatingSort: Boolean;
                defaultPivotIndex: number;
                downloadCopyFileTransferRate: number;
                enablePresaleAndBundles: Boolean;
                epgBackgroundTaskTimeTriggerInMinutes: number;
                epgMaxItemsPerChannel: number;
                epgPrimaryColorA: number;
                epgPrimaryColorB: number;
                epgPrimaryColorG: number;
                epgPrimaryColorR: number;
                epgSecondaryColorA: number;
                epgSecondaryColorB: number;
                epgSecondaryColorG: number;
                epgSecondaryColorR: number;
                interactiveAppTextIds: number;
                interactiveMovieDeepLinkUrls: string;
                interactiveMovieMediaIDs: string;
                interactiveTVDeepLinkUrls: string;
                interactiveTVMediaIDs: string;
                lastNightOnTVFriday: string;
                lastNightOnTVMonday: string;
                lastNightOnTVSaturday: string;
                lastNightOnTVSunday: string;
                lastNightOnTVThursday: string;
                lastNightOnTVTuesday: string;
                lastNightOnTVWednesday: string;
                offerIdsVideoFreeWithAds: string;
                postRollCountdownTimeInSeconds: number;
                postRollCreditsGapInSeconds: number;
                postRollCreditsServiceEnabled: Boolean;
                postRollEnabled: Boolean;
                postRollMinDurationForShortEpisodes: number;
                postRollPurchasesEnabled: Boolean;
                requireGoldForInteractive: Boolean;
                showDownloadCopyingHelpLink: Boolean;
                showVideoPostRollCount: number;
                showVideoPostRollMax: number;
                showWelcomeDialog: Boolean;
                supportsEditorialTVEpisodes: Boolean;
                supportsGraceNote: Boolean;
                videoDownloadQualityDialogUsesSizes: Boolean;
                videoLXAutoResumePersonalVideos: Boolean;
                videoLXDefaultToClassic: Boolean;
                videoPlaySeasonDeepLinkEnabled: Boolean;
                videoPostRollResetDate: Date;
                videoPostRollResetInterval: number;
            }
            export class MarketplaceConfiguration implements IMarketplaceConfiguration {
                // constructor();
                marketplaceMappings: string;
                marketplaceDownloadSupported: Boolean;
                marketplaceCulture: string;

            }
            export class MBRConfiguration implements IMBRConfiguration {
                // constructor();
                reportingPercentage: number;
                openTimeoutMs: number;
                maxMissingOrCorruptedChunks: number;
                initialBandwidthBps: number;
                excessiveBufferingTimeoutMs: number;
                excessiveBufferingPositionThresholdMs: number;
                excessiveBufferingMaxAttempts: number;
                enableMultiChannelAudio: Boolean;

            }
            export class MDLCConfiguration implements IMDLCConfiguration {
                // constructor();
                albumArtPrefetchEnabled: Boolean;
                fileCountRecalculateIntervalHr: number;
                expirationIntervalNotFound: number;
                expirationIntervalFound: number;
                expirationIntervalError: number;
                enabled: Boolean;
                connectToInternetForAlbumMetadata: Boolean;
                bingIdRetrievalRequestIntervalMs: number;
                musicMatchPartialMatchThresholdBehavior: Boolean;
                bingIdRetrievalEnabled: Boolean;
                bingIdRetrievalBatchSize: number;
                bingIdNotFoundSearchRetryIntervalHr: number;
                bingIdFoundSearchRetryIntervalHr: number;
                artPrefetchInterval: number;
                albumsSuggestXblContractVersion: string;
                albumArtV2Enabled: Boolean;
                firstMDLCDidWork: Boolean;
                findAlbumInfoDurationMatchScore: number;
                findAlbumInfoAlbumWinningScoreThreshold: number;
                fingerprintingMaxParallelizableTasks: number;
                fingerprintRetryIntervalMinutes: number;
                findAlbumInfoUpdateTrackMetadataStateEnabled: Boolean;
                findAlbumInfoRequestIntervalMs: number;
                findAlbumInfoPartiallyMatchingTrackScore: number;
                findAlbumInfoNonMatchingTrackScore: number;
                matchTracksXblContractVersion: string;
                findAlbumInfoNonMatchingAlbumScore: number;
                findAlbumInfoFuzzyStringMatchingDelimiters: string;
                findAlbumInfoFuzzyStringMatchThresholdPercentage: number;
                findAlbumInfoFuzzyMatchingTrackScore: number;
                findAlbumInfoExplicitAlbumScore: number;
                findAlbumInfoExactMatchingTrackScore: number;
                findAlbumInfoEnabled: Boolean;
                findAlbumInfoDurationMaxDifferenceMs: number;
                firstMDLCFinished: Boolean;
                metadataLookup_FAIAttempt: number;
                metadataLookup_ETMSuccess: number;
                metadataLookup_ETMAttempt: number;
                metadataLookup_EDSDetailsSuccess: number;
                metadataLookup_EDSDetailsAttempt: number;
                metadataLookup_AMGSuccess: number;
                metadataLookup_AMGAttempt: number;
                maximumTracksInMatchRequest: number;
                findAlbumInfoNonMatchingDurationScore: number;
                logWMISRequests: Boolean;
                libraryCharacteristicsIntervalHr: number;
                lastTimeFileCountsRecalculated: number;
                lastTimeCollectionCharacteristicsCalculated: number;
                lastArtPrefetchDate: Date;
                firstMDLCTracksComplete: number;
                metadataLookup_FAISuccess: number;
                sendTrackTitleEvenIfEmptyInFile: Boolean;
                firstMDLCPercentageComplete: number;
                radioCollectionSize: number;
                preferExplicitMatching: Boolean;
                performWMISRequestDelay: Boolean;
                performWMISInNonMarketplace: Boolean;
                musicVideosRefreshIntervalMin: number;
                musicMatchRequestTimeoutMs: number;
                musicMatchPartialMatchThresholdPercent: number;
                bingIdRetrievalOfTracksEnabled: Boolean;
                minimumWorkPeriodBeforeSync: number;
                minimumWorkPeriodBeforeGrovel: number;
                metadataRetrievalRequestIntervalMs: number;
                metadataLookup_WMIDSuccess: number;
                metadataLookup_WMIDAttempt: number;
                metadataLookup_TOCSuccess: number;
                metadataLookup_TOCAttempt: number;

            }
            export class MediaStoreConfiguration implements IMediaStoreConfiguration {
                // constructor();
                writeOutMetadata: Boolean;
                overwriteAllMetadata: Boolean;
                maxTrackDurationDeltaMS: number;
                lastOpenedDatabaseUserId: string;
                executeMediaRightTableCleanup: Boolean;
                enableFuzzyMatching: Boolean;
                dbMigrationProgress: number;
                currentDbSchemaVersion: number;
                bypassDbSchemaVersionCheck: Boolean;

            }
            export class MusicConfiguration implements IMusicConfiguration {
                // constructor();
                monthlyFreeLimitExceeded: number;
                freeTrialCompleted: number;
                freePlayAnnounce: Boolean;
                freeIndividualTrackAllowance: number;
                firstFreeStringsLaunch: Boolean;
                fpspsli: number;
                fpaisli: number;
                exploreHubRefreshTime: number;
                ertMin: string;
                disableArtistBioLinks: Boolean;
                defaultPivotIndex: number;
                backgroundAudioEnabled: Boolean;
                anonymousLimitReachedVideoShown: Boolean;
                anonymousLimitReached: Boolean;
                allowArtistGrid: Boolean;
                welcomeAcknowledged: Boolean;
                monthlyFreeMinutesAllowance: number;
                aas: string;
                vas: string;
                useStickyPivots: Boolean;
                useDXDashboard: Boolean;
                trackFreeLimitsResetToken: string;
                totalVideoAdImpressions: number;
                totalUnauthenticatedTracksUsed: number;
                totalUnauthenticatedTrackAllowance: number;
                totalAudioAdImpressions: number;
                subscriptionFolderName: string;
                showWelcomeDialog: Boolean;
                radioStringLocales: string;
                purchaseSubfolderName: string;
                pageLoadTimeUntilSpinner: number;
                nextMonthlyFreeLimitResetDate: string;
                musicPassDownloadEnabled: Boolean;

            }
            export class PlaybackConfiguration implements IPlaybackConfiguration {
                // constructor();
                leqenabledForVideo: Boolean;
                leqenabledForAudio: Boolean;
                h264StreamingSendSamplesAfterDownloadCompletes: Boolean;
                h264StreamingHealthyBufferPercentage: number;
                h264StreamingDownloadBufferSizeSecs: number;
                getPreferredStreamRetryDelayMS: number;
                modeShuffle: Boolean;
                forceDeinterlaceMode: number;
                forceApproximateSeeking: Boolean;
                fastStartForceKIDMismatch: Boolean;
                fastStartForceAudioFormatMismatch: Boolean;
                fsdkcloseReaderThresholdMs: number;
                enableVideoQualitySelector: Boolean;
                enableVideo2SmoothStreamingTelemetry: Boolean;
                allowApproximateSeeking: Boolean;
                enableVideo2SmoothFastForwardRewind: Boolean;
                enableMusicVisualization: Boolean;
                enableLRC: Boolean;
                dynamicRangeControl: number;
                dumpErrorInfo: Boolean;
                disableMediaQueuing: Boolean;
                verifyRightsDelayMS: number;
                dxvamaximumFPS: number;
                cdplayJitterCorrect: Boolean;
                approximateSeekDuration: number;
                approximateSeekBitrate: number;
                allowLRCSubnetTransport: Boolean;
                allowApproximateSeekingOnShinyDiscOnly: Boolean;
                enableVideo2SmoothFastForwardRewindForH264: Boolean;
                mcplayerAdapterSeekBackDeltaHNS: number;
                previewOnly: Boolean;
                musicMuteState: Boolean;
                xmediaEnvironment: string;
                videoRatingValues: string;
                videoRatingAvailable: string;
                videoPlaybackParentalRatingsListing: string;
                video2SmoothFastForwardRewindMaxRate: number;
                defaultStartBitrate: number;
                useTMFProdEnv: Boolean;
                streamingPrerollMS: number;
                showTotalTime: Boolean;
                showNowPlayingList: Boolean;
                showNowPlayingClipAnimations: Boolean;
                respectConstrainedMode: Boolean;
                musicVolumeValue: number;
                offlineNetworkRequestDelay: number;
                notifyIncludeVideos: Boolean;
                notifyIncludePodcasts: Boolean;
                notifyIMClient: Boolean;
                music2VolumeValue: number;
                music2MaxNowPlayingItemCount: number;
                getPreferredStreamRetries: number;
                modeLoop: Boolean;
                maxWidthConstrained: number;
                maxHeightConstrained: number;
                maxBitrateConstrained: number;
                mp4DropFramesIfLateByInMilliseconds: number;
                mcplayerAdapterSeekForwardDeltaHNS: number;

            }
            export class QueriesConfiguration implements IQueriesConfiguration {
                // constructor();
                showSongsWithNoRights: Boolean;
                serviceCachingOverride: number;
                pageSize: number;
                dbQueryRefreshEnabled: Boolean;
                dbQueryCachingEnabled: Boolean;
                computeOneDriveFlags: Boolean;

            }
            export class ServiceConfiguration implements IServiceConfiguration {
                // constructor();
                commercePaymentOptionsEndpoint: string;
                commerceEndpoint: string;
                commerceContactPreferencesEndpoint: string;
                commerceContactInfoEndpoint: string;
                commerceBillingHistoryEndpoint: string;
                commerceXdlcInventoryRelyingPartyEndpoint: string;
                cloudCollectionV2Endpoint: string;
                cloudCollectionRelyingPartyEndpoint: string;
                cloudCollectionPlaylistEndpoint: string;
                cloudCollectionEndpoint: string;
                cleanedUpDatabase: Boolean;
                videoAppPostRollCreditsSuffix: string;
                ctppassportEndpoint: string;
                ctpauthEndpoint: string;
                blockVideoRentalsDuringGrovel: Boolean;
                blockPurchaseOnServiceFailure: Boolean;
                bingAutoSuggestEndpoint: string;
                edsrelyingPartyEndpoint: string;
                autoRefreshQueryFallback: number;
                authTransferEndpoint: string;
                alwaysShowUpgradeNotification: Boolean;
                accountsTroubleshooterRelyingPartyEndpoint: string;
                accountsTroubleshooterEndpoint: string;
                maxInventoryFilterIds: number;
                esrelyingPartyEndpoint: string;
                configLastDownload: Date;
                edsserviceAuthNoCultureEndpoint: string;
                edsserviceAuthEndpoint: string;
                edsserviceAnonNoCultureEndpoint: string;
                edsserviceAnonEndpoint: string;
                edssearchEndpoint: string;
                bigCatEndpoint: string;
                downloadQoSFrequency: number;
                defaultTargetDeviceTypeNative: string;
                defaultTargetDeviceType: string;
                defaultHeaderDeviceTypeNative: string;
                environmentName: string;
                eslistServiceEndpoint: string;
                configDownloadPeriod: number;
                configDownloadCheckTimer: number;
                commerceXdlcLicensingRelyingPartyEndpoint: string;
                commerceXdlcLicensingEndpoint: string;
                commerceBaseEndpoint: string;
                commerceXdlcInventoryEndpoint: string;
                commerceV3Endpoint: string;
                commerceV2Endpoint: string;
                commercePurchaseRelyingPartyEndpoint: string;
                commercePurchaseEndpoint: string;
                accountsAuthEndpoint: string;
                minVersionOnlyAllowLocalUse: string;
                lastSignedInUserAccountLocale: string;
                lastSignInAccountRegion: string;
                imageCatalogEndpoint: string;
                lastSignedInUserSignInName: string;
                graceNoteEndpoint: string;
                getAlbumDetailsByAlbumIdEndpoint: string;
                gamesCatalogNoCultureEndpoint: string;
                gamesCatalogEndpoint: string;
                flightAssignmentEndpoint: string;
                feedbackEndpoint: string;
                defaultHeaderDeviceType: string;
                echoNestApiKey: string;
                enableVideoZestSignIn: Boolean;
                enableTimeTravel: Boolean;
                enableSecureAuth: Boolean;
                enableNativeSignIn: Boolean;
                microsoftBillingEndpoint: string;
                enableFreeJustPlays: Boolean;
                echoNestTextExtractMaxSize: number;
                echoNestTextExtractMaxChunks: number;
                echoNestDeveloperApiEndpoint: string;
                entitlementsCollectionsEndpoint: string;
                purchaseHistoryReattemptAfterFailureInSeconds: number;
                mediaDeliveryV2Endpoint: string;
                minVersionAllowSignInButNag: string;
                minSystemDiskSpaceBuffer: number;
                minMusicSignInSupportedVersion: string;
                minMusicServiceSupportedVersion: string;
                enableMusicZestSignIn: Boolean;
                mediaUsageRelyingPartyEndpoint: string;
                mediaUsageEndpoint: string;
                mediaDiscoveryEndpoint: string;
                mediaDeliveryV2RelyingPartyEndpoint: string;
                lastSignedInUserCid: string;
                mediaDeliveryV1RelyingPartyEndpoint: string;
                cdfXboxLiveDotComEndpoint: string;
                marketplaceLicensingEndpoint: string;
                localCurrencyFilters: string;
                liveTileEndpoint: string;
                lastSignedInUserXuid: string;
                lastSignedInUserSubscription: Boolean;
                graceNoteSupportedLanguageStringMap: string;
                lastSignedInUserParentControl: Boolean;
                lastSignedInUserMembership: string;
                lastSignedInUserGuid: string;
                lastSignedInUserGamerTag: string;
                minVideoServiceSupportedVersion: string;
                minVideoSignInSupportedVersion: string;
                purchaseHistoryFrequencyInSeconds: number;
                purchaseHD: Boolean;
                purchaseFlowEndpoint: string;
                readBuyerUXEndpoint: string;
                pastPurchaseData: string;
                passportTicketEndpoint: string;
                passportEnvironment: string;
                passportEndpoint: string;
                pcmarketplaceEndpoint: string;
                nookStoreEndpoint: string;
                xboxLiveEndpoint: string;
                purchaseHistoryMinimumIncrementInSeconds: number;
                musicPassSignupPageEndpoint: string;
                musicMatchRequestsEndpoint: string;
                musicMatchRelyingPartyEndpoint: string;
                musicImageServiceEndpoint: string;
                sandboxId: string;
                musicAssetRequestsEndpoint: string;
                musicAppSpotlightVersion: string;
                modernWebBlendHeight: string;
                modernPurchaseEndpoint: string;
                nookGpbEndpoint: string;
                lastSignedInUserExplicitPrivilege: Boolean;
                useRichPresenceService: Boolean;
                storeChannelsEndpoint: string;
                skipDrmDuringRightsManagement: Boolean;
                signInNetworkErrorRetryCount: number;
                signInAtStartupUser: string;
                musicAuthEndpoint: string;
                rootLicenseFirstRefreshDate: string;
                rootLicenseAcquired: Boolean;
                rootCatalogEndpoint: string;
                richPresenceEndpoint: string;
                xboxSupportEndpoint: string;
                refreshSubscriptionLicenseDuration: number;
                refreshPCLicenseResult: number;
                refreshDeviceLicenseResult: number;
                recommendationsMaxTrackCount: number;
                readPurchaseEndpoint: string;
                readCommerceServiceEndpoint: string;
                readBuyerUXTOUEndpoint: string;
                postrollCreditsEndpoint: string;
                readAccountMergeEndpoint: string;
                ratingsRelyingPartyEndpoint: string;
                ratingsEndpoint: string;
                purchaseHistoryRentalWindowInDays: number;
                subscriptionProductId: string;
                commercePrivacyEndpoint: string;
                videoAppMovieHubSuffix: string;
                videoAppLiveTileSuffix: string;
                videoAppFlexHubSuffix: string;
                wmisendpointsEndpoint: string;
                userTokenAuthRequestEndpoint: string;
                userProfileEndpoint: string;
                userEngagementUrlEnd: string;
                userEngagementServiceEndpoint: string;
                useZuneCatalog: Boolean;
                useUserEngagementService: Boolean;
                useTestExpirationService: Boolean;
                targetedProgrammingArchitecture: string;
                useLandingPageForMusicPassSignup: Boolean;
                useEntCommonSignInRequests: Boolean;
                uxservicesRelyingPartyEndpoint: string;
                tunersEndpoint: string;
                xblEnvironment: string;
                timeTravelStartDate: string;
                timeTravel: string;
                targetedProgrammingClientVersion: string;
                targetedProgrammingClientOs: string;
                reportUsageDataDuration: number;
                videoAppSpotlightSuffix: string;
                xboxLiveSSLEndpoint: string;
                xboxMusicEndpoint: string;
                xboxLiveDataRelyingPartyEndpoint: string;
                xboxLiveDataEndpoint: string;
                xblRelyingPartyEndpoint: string;
                tunerInfoWindowsMachineId: string;
                xtokenTargetEndpoint: string;
                xtokenAuthRequestEndpoint: string;
                xstsauthPassportEndpoint: string;
                xstsauthEndpoint: string;
                videoAppTvHubSuffix: string;
                nookProxyEndpoint: string;
                xboxEndpoint: string;
                xblauthEndpoint: string;
                winPhoneXboxDotComEndpoint: string;
                wmisredirEndpoint: string;
                wmispartner: string;
                wmisimageEndpoint: string;
                userTokenTargetEndpoint: string;
                videoDeliveryRelyingPartyEndpoint: string;
                videoDeliveryEndpoint: string;
                videoAppTvOnLastNightHubSuffix: string;
                submitAddFeedbackEndpoint: string;

            }
            export class ServicesConfiguration implements IServicesConfiguration {
                // constructor();
                introBarkerShown: Boolean;

            }
            export class ShellConfiguration implements IShellConfiguration {
                // constructor();
                showApplicationPivot: Boolean;
                retailExperience: Boolean;
                randomAccessCacheLifespanMS: number;
                previousSoftBlockVersion: string;
                preventSelectionManagerSettingSaves: Boolean;
                notificationVersion: number;
                musicDeviceView: number;
                showRemoveInPreferences: Boolean;
                musicCollectionView: number;
                music2DashboardRefreshTimer: number;
                mixIdleTimeoutMS: number;
                mixFixedRandom: Boolean;
                loadClassicApp: Boolean;
                lastUsedAppNavigationMonikerData: string;
                lastUpdateCheck: Date;
                applyBackgroundOnAccountCreation: Boolean;
                lastClientCulture: string;
                initializationSequence: number;
                ignoreLowPriorityAsserts: Boolean;
                gamesDashboardRefreshTimer: number;
                enableWindowSnap: Boolean;
                enableWebHostResizeMessage: Boolean;
                dragAndDropEnabled: Boolean;
                video2DashboardRefreshTimer: number;
                defaultLibraryChunkSize: number;
                cloudMatching: number;
                backgroundImage: string;
                backgroundColor: number;
                backgroundBackStackTrimmingDelay: number;
                attachLargeObjectToUnloadedControl: Boolean;
                attachCookieToRemovedDomElements: Boolean;
                lastMarketplaceCulture: string;
                showAppsCollectionNotification: Boolean;
                topBarColor: number;
                whatsNewShownForRelease: string;
                whatsNewReleaseName: string;
                whatsNewNonLaunchCountData: string;
                webBlendResponseTimeoutMS: number;
                webBlendLoadTimeoutMS: number;
                videoDashboardRefreshTimer: number;
                videoCollectionView: number;
                dontPendControlUnloadCleanup: Boolean;
                useUserEngagementService: Boolean;
                useStickyPivots: Boolean;
                useEDSForSearch: Boolean;
                uirefresh: Boolean;
                topBarSelectedHoveredColor: number;
                topBarSelectedColor: number;
                topBarHoveredColor: number;
                whatsNewStringIdsForMusic: string;
                suppressWhatsNewShownForRelease: Boolean;
                startupPage: string;
                sounds: Boolean;
                showWhatsNew: Boolean;
                showTVPivot: Boolean;
                showSongInfoInWindowTitle: Boolean;
                musicDashboardRefreshTimer: number;
                showPreviewBranding: Boolean;
                showPlayInfoInTaskbar: Boolean;
                showNowPlayingBackgroundOnIdleTimeout: number;
                showMoviesPivot: Boolean;
                showContentTypes: Boolean;
                showAppsForZuneHDOnlyHeader: Boolean;
                showAppsForWindowsPhoneOnlyHeader: Boolean;

            }
            export class ShipAssertsConfiguration implements IShipAssertsConfiguration {
                // constructor();
                updateFrequency: number;
                managedAssertsBreakInNative: Boolean;
                lastPrompt: Date;
                lastConfigDownload: Date;
                disableRemoteTraceCollection: number;
                defaultWaitDays: number;
                defaultExpirationDays: number;
                deactivateLogging: Boolean;
                configSerialNumber: number;
                configEndpoint: string;
                captureDumpTimeOutSec: number;

            }
            export class SyncConfiguration implements ISyncConfiguration {
                // constructor();
                latestSyncReason: number;
                lastSyncSessionState: Boolean;
                keepCloudCollectionOffline: Boolean;
                initialSyncCompleteSyncTypes: number;
                fullSyncStartTick: number;
                fullSync: Boolean;
                enableVideoBookmarkSync: Boolean;
                currentSyncRunStart: Date;
                cloudMinSyncIntervalMS: number;
                cloudCollectionV2DeduplicationStrategyUI: Boolean;
                cloudCollectionV2DeduplicationStrategyShadowCopy: number;
                cloudCollectionV2DeduplicationStrategy: number;
                cloudCollectionOfflineFolderName: string;
                cloudCollectionEnabled: Boolean;
                backgroundLibrarySyncMaxBatchSize: number;
                videoSafetySyncIntervalInSeconds: number;
                librarySyncMaxBatchSize: number;
                accountMergeHandled: Boolean;
                videoLibrarySyncMaxDeferralTimeMS: number;
                videoLibrarySyncDeferralTimeMS: number;
                videoBookmarkChangesWereEverTracked: Boolean;
                tdsyncToken: string;
                syncMaxDeferralTimeMS: number;
                syncDeferralTimeMS: number;
                syncBlockedItems: Boolean;
                skipAppModeCheck: Boolean;
                readingNextSafetySyncTime: Date;
                readingAlwaysAssumeSyncNotificationReceived: Boolean;
                prefetchSyncBatch: Boolean;
                phonePollIntervalSeconds: number;
                musicLibrarySyncMaxDeferralTimeMS: number;
                musicLibrarySyncDeferralTimeMS: number;
                maxTracksInCollection: number;

            }
            export class TelemetryConfiguration implements ITelemetryConfiguration {
                // constructor();
                musicPlaybackUnsnapped: number;
                musicPlaybackSnapped: number;
                musicPlaybackBackground: number;
                maxTelemetryEventGeneration: number;
                keystoneSendInterval: number;
                sendAllEventsImmediately: Boolean;
                keystoneProvisioningServer: string;
                keystoneMaxBatchSizeInChars: number;
                keystoneMaxBackOffMs: number;
                keystoneHeartbeatInterval: number;
                keystoneEnabled: Boolean;
                appStateHeartbeatInterval: number;
                keystoneDropHTTPContentTypes: string;
                keystoneDropEvents: string;
                immediateEventIds: string;
                flightNumber: number;
                flightId: string;
                umsenabled: Boolean;
                enabled: Boolean;
                cosmosSendInterval: number;
                cosmosOfflineCacheSize: number;
                cosmosMaxBatchSizeInChars: number;
                cosmosBackOffTimeMs: number;
                keystoneDropHTTPHostNames: string;
                notSnapped: number;
                submitIdSignedIn: string;
                videoPlaybackUnsnapped: number;
                videoPlaybackSnapped: number;
                videoPlaybackBackground: number;
                userTimeEventTimeout: number;
                umsisTestScenario: Boolean;
                eventIdsToDrop: string;
                umsbatchSize: number;
                timeSpent: number;
                submitTelemetryEventFailed: Boolean;
                submitSequenceNumberSignedIn: number;
                submitSequenceNumberAnonymous: number;
                visitorId: string;
                submitIdAnonymous: string;
                snappedMode: number;
                shipAssertParamIdsToDrop: string;
                sessionGuid: string;
                keystoneSamplingPercentage: number;
                selectivelyEnabledComponents: string;
                purchaseHistoryItemProcessTotalCount: number;
                purchaseHistoryItemProcessErrorCount: number;
                previousSessionGuid: string;
                persistTelemetryEventFailed: Boolean;

            }
            export class TransferConfiguration implements ITransferConfiguration {
                // constructor();
                userEnabled: Boolean;
                transferState: number;

            }
            export class UnitTestConfiguration implements IUnitTestConfiguration {
                // constructor();
                myStringValue: string;
                myIntValue: number;
                myInt64Value: number;
                myDoubleValue: number;
                myDateValue: Date;
                myBoolValue: Boolean;

            }
            export class VideoConfiguration implements IVideoConfiguration {
                // constructor();
                interactiveTVDeepLinkUrls: string;
                interactiveMovieMediaIDs: string;
                interactiveMovieDeepLinkUrls: string;
                interactiveAppTextIds: number;
                epgSecondaryColorR: number;
                lastNightOnTVTuesday: string;
                epgSecondaryColorB: number;
                epgSecondaryColorA: number;
                epgPrimaryColorR: number;
                epgPrimaryColorG: number;
                epgPrimaryColorB: number;
                epgPrimaryColorA: number;
                epgMaxItemsPerChannel: number;
                epgBackgroundTaskTimeTriggerInMinutes: number;
                actorSearchEnabled: Boolean;
                downloadCopyFileTransferRate: number;
                defaultPivotIndex: number;
                customerRatingSort: Boolean;
                contentRestrictionMaxEmptyFeaturedItems: number;
                actorSearchSlot8EditValue: number;
                supportsGraceNote: Boolean;
                actorSearchSlot2EditValue: number;
                actorSearchSlot17EditValue: number;
                actorSearchSlot14EditValue: number;
                actorSearchSlot11EditValue: number;
                actorSearchSlot0EditValue: number;
                enablePresaleAndBundles: Boolean;
                interactiveTVMediaIDs: string;
                requireGoldForInteractive: Boolean;
                videoPostRollResetDate: Date;
                videoPlaySeasonDeepLinkEnabled: Boolean;
                videoLXDefaultToClassic: Boolean;
                videoLXAutoResumePersonalVideos: Boolean;
                videoDownloadQualityDialogUsesSizes: Boolean;
                actorSearchSlot5EditValue: number;
                supportsEditorialTVEpisodes: Boolean;
                showWelcomeDialog: Boolean;
                showVideoPostRollMax: number;
                showVideoPostRollCount: number;
                showDownloadCopyingHelpLink: Boolean;
                videoPostRollResetInterval: number;
                postRollPurchasesEnabled: Boolean;
                postRollMinDurationForShortEpisodes: number;
                postRollEnabled: Boolean;
                postRollCreditsServiceEnabled: Boolean;
                postRollCreditsGapInSeconds: number;
                postRollCountdownTimeInSeconds: number;
                offerIdsVideoFreeWithAds: string;
                lastNightOnTVWednesday: string;
                epgSecondaryColorG: number;
                lastNightOnTVThursday: string;
                lastNightOnTVSunday: string;
                lastNightOnTVSaturday: string;
                lastNightOnTVMonday: string;
                lastNightOnTVFriday: string;

            }
        }
        export interface CopyFileToImageStoreReturnValue {
            url: string;
            filePath: string;
        }
        export namespace FeatureEnablement { 
            export class FeatureEnablement implements IFeatureEnablement {
                // constructor();
                isEnabled(feature: FeatureItem): number {
                    throw new Error('shimmed function FeatureEnablement.isEnabled');
                }

                checkForNewFeatures(): void {
                    console.warn('shimmed function FeatureEnablement.checkForNewFeatures');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`FeatureEnablement::addEventListener: ${name}`);
                    switch (name) {
                        case "featureschangedevent": // Windows.Foundation.TypedEventHandler<IFeatureEnablement,FeaturesChangedEventHandlerArgs>
                            break;
                    }

                }
            }
            export enum FeatureItem {
                featureStart,
                musicSignInAvailable,
                videoSignInAvailable,
                storeSync,
                xbox360ConsoleRegions,
                xbox360GamesMarketplace,
                xbox360GamesPurchase,
                metroGamesMarketplace,
                metroGamesPurchase,
                musicVideosMarketplace,
                tvMarketplace,
                tvLastNightQuery,
                movieTrailersMarketplace,
                previewMovieTrailers,
                moviesMarketplace,
                musicMarketplace,
                musicMarketplaceEditorial,
                streamXbox360GameTrailers,
                streamMetroGameTrailers,
                smartDJMarketplace,
                smartVJMarketplace,
                musicSubscription,
                musicFreeGiveAwayMarketplace,
                musicFreePlay,
                formerMusicFreePlay,
                videoAllQuerySupported,
                closedCaptionsEnabled,
                secureEDSEndpointsEnabled,
                explicitMatchingEnabled,
                videoShowMovieTrailers,
                logNetworkServiceRequests,
                metaCritic,
                rottenTomatoes,
                movieCriticRatingSort,
                tvCriticRatingSort,
                castAndCrew,
                musicShareToPhone,
                videoFreePurchase,
                audioFingerprinter,
                musicFreePlayAnonymous,
                musicFreePlayAnonAds,
                fileLaunchToDashboard,
                pinToStart,
                upgradeToBlue,
                metadataEdit,
                videoFreeWithAds,
                videoLiveTile,
                cloudCollectionV2Enabled,
                devicesEnabled,
                videoFeaturedSetsEnabled,
                musicVideosEnabled,
                musicVideosCollectionEnabled,
                musicAudioAdsEnabled,
                cloudCollectionInterface,
                videoWatchlist,
                flightingEnabled,
                keystoneRegionEnabled,
                featureCount,
            }
            export class FeaturesChangedEventHandlerArgs implements IFeaturesChangedEventHandlerArgs {
                newFeatures: number[];
                oldFeatures: number[];

            }
            export interface IFeatureEnablement {
                isEnabled(feature: FeatureItem): number;
                checkForNewFeatures(): void;
            }
            export interface IFeaturesChangedEventHandlerArgs {
                newFeatures: number[];
                oldFeatures: number[];
            }
        }
        export class FileDownload implements IFileDownload {
            albumArtistLibraryId: number;
            albumArtistMediaId: string;
            albumLibraryId: number;
            albumMediaId: string;
            bytesReceived: number;
            canRetry: Boolean;
            contextLibraryId: number;
            contextLibraryTypeId: number;
            isBackground: Boolean;
            isClosed: Boolean;
            libraryId: number;
            libraryTypeId: number;
            mediaId: string;
            percentage: number;
            responseCode: number;
            seasonLibraryId: number;
            seasonNumber: number;
            seriesLibraryId: number;
            seriesMediaId: string;
            taskId: number;
            taskStatus: FileTransferStatus;
            taskType: FileTransferRequestType;
            totalBytesToReceive: number;

            restart(): void {
                console.warn('shimmed function FileDownload.restart');
            }

            pause(): void {
                console.warn('shimmed function FileDownload.pause');
            }

            resume(): void {
                console.warn('shimmed function FileDownload.resume');
            }

            cancel(): void {
                console.warn('shimmed function FileDownload.cancel');
            }

            closeAsync(): Windows.Foundation.IAsyncOperation<IFileDownload> {
                throw new Error('shimmed function FileDownload.closeAsync');
            }

        }
        export class FileTransferManager {
            static getFileDownloadsAsync(): Windows.Foundation.IAsyncOperation<IFileDownload[]> {
                throw new Error('shimmed function FileTransferManager.getFileDownloadsAsync');
            }

            static getFileDownloadByIdAsync(taskId: number): Windows.Foundation.IAsyncOperation<IFileDownload> {
                throw new Error('shimmed function FileTransferManager.getFileDownloadByIdAsync');
            }

            static getFileDownloadsByQueryAsync(query: IFileTransferQuery): Windows.Foundation.IAsyncOperation<IFileDownload[]> {
                throw new Error('shimmed function FileTransferManager.getFileDownloadsByQueryAsync');
            }

            static cancelAllDownloadsAsync(): Windows.Foundation.IAsyncAction {
                throw new Error('shimmed function FileTransferManager.cancelAllDownloadsAsync');
            }

            static scheduleProgressCheck(): void {
                console.warn('shimmed function FileTransferManager.scheduleProgressCheck');
            }

            static initializeEvents(): void {
                console.warn('shimmed function FileTransferManager.initializeEvents');
            }

            static addEventListener(name: string, handler: Function) {
                console.warn(`FileTransferManager::addEventListener: ${name}`);
                switch (name) {
                    case "downloadschanged": // /* System.EventHandler`1[[System.Collections.Generic.IReadOnlyList`1[[Microsoft.Entertainment.IFileDownload, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        break;
                }

            }
        }
        export class FileTransferQuery implements IFileTransferQuery {
            // constructor();
            taskId: number = -1;
            seriesMediaId: string = '00000000-0000-0000-0000-000000000000';
            seriesLibraryId: number = -1;
            seasonNumber: number = -1;
            seasonLibraryId: number = -1;
            requestType: FileTransferRequestType = -1;
            mediaId: string = '00000000-0000-0000-0000-000000000000';
            libraryTypeId: number = -1;
            libraryId: number = -1;
            albumMediaId: string = '00000000-0000-0000-0000-000000000000';
            albumLibraryId: number = -1;
            albumArtistMediaId: string = '00000000-0000-0000-0000-000000000000';
            albumArtistLibraryId: number = -1;

        }
        export enum FileTransferRequestType {
            invalid,
            marketPlace,
            genericFile,
        }
        export enum FileTransferStatus {
            notStarted,
            running,
            paused,
            pausedCostedNetwork,
            pausedNoNetwork,
            completed,
            canceled,
            error,
            pending,
            copying,
        }
        export namespace Flighting { 
            export class FlightService {
                static updateAssignmentsAsync(fAuthenticated: Boolean): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function FlightService.updateAssignmentsAsync');
                }

                static hasAssignedGroup(guidExperimentId: string): Boolean {
                    throw new Error('shimmed function FlightService.hasAssignedGroup');
                }

                static getAssignedGroup(guidExperimentId: string): string {
                    throw new Error('shimmed function FlightService.getAssignedGroup');
                }

            }
            export interface IFlightServiceStatics {
                updateAssignmentsAsync(fAuthenticated: Boolean): Windows.Foundation.IAsyncAction;
                hasAssignedGroup(guidExperimentId: string): Boolean;
                getAssignedGroup(guidExperimentId: string): string;
            }
        }
        export namespace Fulfillment { 
            export namespace Video { 
                export class BlockRefresh implements IBlockRefresh {
                    // constructor();
                    cancelBlock(): void {
                        console.warn('shimmed function BlockRefresh.cancelBlock');
                    }

                }
                export class Entitlements {
                    static isBlockRefreshPending: Boolean = false;

                    static blockRefreshAsync(): Windows.Foundation.IAsyncOperation<IBlockRefresh> {
                        throw new Error('shimmed function Entitlements.blockRefreshAsync');
                    }

                    static checkServiceAvailabilityAsync(productGroups: string[][]): Windows.Foundation.IAsyncOperation<Boolean> {
                        throw new Error('shimmed function Entitlements.checkServiceAvailabilityAsync');
                    }

                    static purchaseOfferAsync(signedOffer: string): Windows.Foundation.IAsyncAction {
                        throw new Error('shimmed function Entitlements.purchaseOfferAsync');
                    }

                    static queryForOfferInstanceIdsAsync(productIds: string[]): Windows.Foundation.IAsyncOperation<string[]> {
                        throw new Error('shimmed function Entitlements.queryForOfferInstanceIdsAsync');
                    }

                    static refreshAsync(refreshOnlyProductIds: string[], fResetFilteredProductIds: Boolean, fDontShortCircuitAndForceUpdateAllRights: Boolean, fRestoreDeletedPurchasesToCollection: Boolean, fMarkRentalExpirationsAsTrusted: Boolean): Windows.Foundation.IAsyncOperation<IRefreshEntitlementsResult> {
                        throw new Error('shimmed function Entitlements.refreshAsync');
                    }

                }
                export interface IBlockRefresh {
                    cancelBlock(): void;
                }
                export interface IEntitlementsStatics {
                    isBlockRefreshPending: Boolean;
                    blockRefreshAsync(): Windows.Foundation.IAsyncOperation<IBlockRefresh>;
                    checkServiceAvailabilityAsync(productGroups: string[][]): Windows.Foundation.IAsyncOperation<Boolean>;
                    purchaseOfferAsync(signedOffer: string): Windows.Foundation.IAsyncAction;
                    queryForOfferInstanceIdsAsync(productIds: string[]): Windows.Foundation.IAsyncOperation<string[]>;
                    refreshAsync(refreshOnlyProductIds: string[], fResetFilteredProductIds: Boolean, fDontShortCircuitAndForceUpdateAllRights: Boolean, fRestoreDeletedPurchasesToCollection: Boolean, fMarkRentalExpirationsAsTrusted: Boolean): Windows.Foundation.IAsyncOperation<IRefreshEntitlementsResult>;
                }
                export interface IRefreshEntitlementsResult {
                    addedEntitlements: Boolean;
                    hasFailures: Boolean;
                }
                export class RefreshEntitlementsResult implements IRefreshEntitlementsResult {
                    // constructor();
                    addedEntitlements: Boolean;
                    hasFailures: Boolean;

                }
            }
        }
        export interface IApplicationLifetimeManager {
            raiseActivated(args: any): void;
            raiseResuming(): void;
            raiseSuspending(): void;
        }
        export interface IApplicationState {
            count: number;
            getValue(key: string): string;
            setValue(key: string, value: string): void;
            clearValue(key: string): void;
            getKey(index: number): string;
            flush(): void;
        }
        export interface IClosedCaptionDownloader {
            downloadClosedCaptionFileAsync(url: string, serviceMediaId: string, serviceMediaInstanceId: string, name: string, localeId: number): Windows.Foundation.IAsyncAction;
            getClosedCaptionFileAsync(url: string, serviceMediaId: string, serviceMediaInstanceId: string, name: string, localeId: number): Windows.Foundation.IAsyncOperation<string>;
            getDownloadedClosedCaptionListAsync(serviceMediaId: string, serviceMediaInstanceId: string): Windows.Foundation.IAsyncOperation<string>;
        }
        export interface IFileDownload {
            albumArtistLibraryId: number;
            albumArtistMediaId: string;
            albumLibraryId: number;
            albumMediaId: string;
            bytesReceived: number;
            canRetry: Boolean;
            contextLibraryId: number;
            contextLibraryTypeId: number;
            isBackground: Boolean;
            isClosed: Boolean;
            libraryId: number;
            libraryTypeId: number;
            mediaId: string;
            percentage: number;
            responseCode: number;
            seasonLibraryId: number;
            seasonNumber: number;
            seriesLibraryId: number;
            seriesMediaId: string;
            taskId: number;
            taskStatus: FileTransferStatus;
            taskType: FileTransferRequestType;
            totalBytesToReceive: number;
            restart(): void;
            pause(): void;
            resume(): void;
            cancel(): void;
            closeAsync(): Windows.Foundation.IAsyncOperation<IFileDownload>;
        }
        export interface IFileTransferManager {
            getFileDownloadsAsync(): Windows.Foundation.IAsyncOperation<IFileDownload[]>;
            getFileDownloadByIdAsync(taskId: number): Windows.Foundation.IAsyncOperation<IFileDownload>;
            getFileDownloadsByQueryAsync(query: IFileTransferQuery): Windows.Foundation.IAsyncOperation<IFileDownload[]>;
            cancelAllDownloadsAsync(): Windows.Foundation.IAsyncAction;
            scheduleProgressCheck(): void;
            initializeEvents(): void;
        }
        export interface IFileTransferQuery {
            albumArtistLibraryId: number;
            albumArtistMediaId: string;
            albumLibraryId: number;
            albumMediaId: string;
            libraryId: number;
            libraryTypeId: number;
            mediaId: string;
            requestType: FileTransferRequestType;
            seasonLibraryId: number;
            seasonNumber: number;
            seriesLibraryId: number;
            seriesMediaId: string;
            taskId: number;
        }
        export interface IImageCleanupCallback {
            getCollectionServiceMediaIds(): string[];
            getCollectionImageUrls(): string[];
        }
        export interface IImageCleanupStatics {
            initialize(callback: IImageCleanupCallback): void;
            shutdown(): void;
        }
        export interface IImageManager {
            retrieveImageFromUrlAsync(netUsage: NetworkUsage, imageUrl: string, filePath: string, defaultUrl: string): Windows.Foundation.IAsyncOperation<string>;
            retrieveImageFromBaseUrlAsync(baseImageUrl: string, width: number, height: number, netUsage: NetworkUsage, resolutionFallback: ResolutionFallback, cacheType: ImageCacheType, defaultUrl: string): Windows.Foundation.IAsyncOperation<string>;
            retrieveImageForMediaAsync(imageNamespace: ImageNamespace, serviceMediaId: string, width: number, height: number, sourceFilter: ImageSourceFilterFlag, resizeMode: ImageResizeMode, netUsage: NetworkUsage, resolutionFallback: ResolutionFallback, cacheType: ImageCacheType, defaultUrl: string): Windows.Foundation.IAsyncOperation<string>;
            copyFileToImageStoreAsync(file: Windows.Storage.IStorageFile): Windows.Foundation.IAsyncOperation<CopyFileToImageStoreReturnValue>;
            registerImageUrl(imageUrl: string): void;
            unregisterImageUrl(imageUrl: string): void;
        }
        export enum ImageCacheType {
            undefinedImageCacheType,
            permanent,
            temporary,
        }
        export enum ImageIdType {
            undefinedImageIdType,
            movie,
            artist,
            album,
            track,
            musicVideo,
            movieTrailer,
            playlist,
            podcast,
            network,
            series,
            episode,
            application,
            season,
            parentalRating,
            social,
            gamer,
            image,
            studio,
            xboxGame,
            url,
        }
        export class ImageManager implements IImageManager {
            // constructor();
            retrieveImageFromUrlAsync(netUsage: NetworkUsage, imageUrl: string, filePath: string, defaultUrl: string): Windows.Foundation.IAsyncOperation<string> {
                throw new Error('shimmed function ImageManager.retrieveImageFromUrlAsync');
            }

            retrieveImageFromBaseUrlAsync(baseImageUrl: string, width: number, height: number, netUsage: NetworkUsage, resolutionFallback: ResolutionFallback, cacheType: ImageCacheType, defaultUrl: string): Windows.Foundation.IAsyncOperation<string> {
                throw new Error('shimmed function ImageManager.retrieveImageFromBaseUrlAsync');
            }

            retrieveImageForMediaAsync(imageNamespace: ImageNamespace, serviceMediaId: string, width: number, height: number, sourceFilter: ImageSourceFilterFlag, resizeMode: ImageResizeMode, netUsage: NetworkUsage, resolutionFallback: ResolutionFallback, cacheType: ImageCacheType, defaultUrl: string): Windows.Foundation.IAsyncOperation<string> {
                throw new Error('shimmed function ImageManager.retrieveImageForMediaAsync');
            }

            copyFileToImageStoreAsync(file: Windows.Storage.IStorageFile): Windows.Foundation.IAsyncOperation<CopyFileToImageStoreReturnValue> {
                throw new Error('shimmed function ImageManager.copyFileToImageStoreAsync');
            }

            registerImageUrl(imageUrl: string): void {
                console.warn('shimmed function ImageManager.registerImageUrl');
            }

            unregisterImageUrl(imageUrl: string): void {
                console.warn('shimmed function ImageManager.unregisterImageUrl');
            }

            static initialize(callback: IImageCleanupCallback): void {
                console.warn('shimmed function ImageManager.initialize');
            }

            static shutdown(): void {
                console.warn('shimmed function ImageManager.shutdown');
            }

        }
        export enum ImageNamespace {
            music,
            video,
        }
        export enum ImageResizeMode {
            crop,
            scale,
            letterbox,
        }
        export enum ImageSourceFilterFlag {
            none,
            editorial,
            generated,
            label = 4,
            external = 8,
            userGeneratedContent = 16,
        }
        export namespace Infrastructure { 
            export interface IShipAssertProvider {
                shipAssert(area: string, __function: string, callStack: string, message: string, parameter: number): void;
            }
            export class ShipAssertProvider implements IShipAssertProvider {
                // constructor();
                shipAssert(area: string, __function: string, callStack: string, message: string, parameter: number): void {
                    console.warn('shimmed function ShipAssertProvider.shipAssert');
                }

            }
        }
        export namespace Instrumentation { 
            export namespace Providers { 
                export class Common implements ICommon {
                    // constructor();
                    isAppVisibilityChangedEnabled: Boolean = false;
                    isBusinessIntelligenceScalarDataPointEnabled: Boolean = false;
                    isBusinessIntelligenceStreamBooleanParameterEnabled: Boolean = false;
                    isBusinessIntelligenceStreamDataPointEnabled: Boolean = false;
                    isBusinessIntelligenceStreamIntParameterEnabled: Boolean = false;
                    isBusinessIntelligenceStreamStringParameterEnabled: Boolean = false;
                    isClientLaunchEnabled: Boolean = false;
                    isClientShutdownEnabled: Boolean = false;
                    isClosedCaptionDownloadCompletedEnabled: Boolean = false;
                    isClosedCaptionDownloadFailedEnabled: Boolean = false;
                    isClosedCaptionDownloadStartedEnabled: Boolean = false;
                    isEventSystemErrorEnabled: Boolean = false;
                    isFileTransferBackgroundTransferAttachFailedEnabled: Boolean = false;
                    isFileTransferBackgroundTransferCanceledEnabled: Boolean = false;
                    isFileTransferBackgroundTransferCompletedEnabled: Boolean = false;
                    isFileTransferBackgroundTransferErrorEnabled: Boolean = false;
                    isFileTransferBackgroundTransferStartFailedEnabled: Boolean = false;
                    isFileTransferClosedEnabled: Boolean = false;
                    isFileTransferCompletedEnabled: Boolean = false;
                    isFileTransferDownloadInfoFailedEnabled: Boolean = false;
                    isFileTransferFailedEnabled: Boolean = false;
                    isFileTransferManagerInitializationStartEnabled: Boolean = false;
                    isFileTransferManagerInitializationStopEnabled: Boolean = false;
                    isFileTransferMoveToLibraryFailedEnabled: Boolean = false;
                    isFileTransferQueuedEnabled: Boolean = false;
                    isFileTransferStart_FailedEnabled: Boolean = false;
                    isFileTransferStart_SuccessedEnabled: Boolean = false;
                    isLogFileUploadedToWatsonEnabled: Boolean = false;
                    isProcessInitializeEventStartEnabled: Boolean = false;
                    isProcessInitializeEventStopEnabled: Boolean = false;
                    isProcessResumeEventSingletonStartEnabled: Boolean = false;
                    isProcessResumeEventSingletonStopEnabled: Boolean = false;
                    isProcessResumeEventStartEnabled: Boolean = false;
                    isProcessResumeEventStopEnabled: Boolean = false;
                    isProcessResumeTelemetryStartEnabled: Boolean = false;
                    isProcessResumeTelemetryStopEnabled: Boolean = false;
                    isProcessSuspendEventSingletonStartEnabled: Boolean = false;
                    isProcessSuspendEventSingletonStopEnabled: Boolean = false;
                    isProcessSuspendEventStartEnabled: Boolean = false;
                    isProcessSuspendEventStopEnabled: Boolean = false;
                    isProcessSuspendTelemetryStartEnabled: Boolean = false;
                    isProcessSuspendTelemetryStopEnabled: Boolean = false;
                    isSingletonInitializationCompletedEnabled: Boolean = false;
                    isSingletonInitializationStartedEnabled: Boolean = false;
                    isZuneHostLaunchEnabled: Boolean = false;
                    isZuneHostShutdownEnabled: Boolean = false;
                    is_ShipAssertEnabled: Boolean = false;

                    trace_ShipAssert(id: number, param: number, message: string, hresult: number, functionName: string, file: string, line: number): void {
                        console.warn('shimmed function Common.trace_ShipAssert');
                    }

                    traceBusinessIntelligenceScalarDataPoint(id: number, userId: string, timestamp: number, classId: number, typeId: number, allowedByPrivacySettings: Boolean, parameterName: string, parameterValue: number): void {
                        console.warn('shimmed function Common.traceBusinessIntelligenceScalarDataPoint');
                    }

                    traceBusinessIntelligenceStreamDataPoint(id: number, userId: string, timestamp: number, classId: number, typeId: number, allowedByPrivacySettings: Boolean, parameterCount: number): void {
                        console.warn('shimmed function Common.traceBusinessIntelligenceStreamDataPoint');
                    }

                    traceBusinessIntelligenceStreamIntParameter(id: number, parameterName: string, parameterValue: number): void {
                        console.warn('shimmed function Common.traceBusinessIntelligenceStreamIntParameter');
                    }

                    traceBusinessIntelligenceStreamBooleanParameter(id: number, parameterName: string, parameterValue: Boolean): void {
                        console.warn('shimmed function Common.traceBusinessIntelligenceStreamBooleanParameter');
                    }

                    traceBusinessIntelligenceStreamStringParameter(id: number, parameterName: string, parameterValue: string): void {
                        console.warn('shimmed function Common.traceBusinessIntelligenceStreamStringParameter');
                    }

                    traceClientLaunch(): void {
                        console.warn('shimmed function Common.traceClientLaunch');
                    }

                    traceClientShutdown(code: number): void {
                        console.warn('shimmed function Common.traceClientShutdown');
                    }

                    traceEventSystemError(errorCode: number, provider: string, eventChannel: number, eventId: number, eventKeywords: number, eventLevel: number, eventOpcode: number, eventTask: number, eventVersion: number): void {
                        console.warn('shimmed function Common.traceEventSystemError');
                    }

                    traceZuneHostLaunch(isElevated: Boolean, parameter: string): void {
                        console.warn('shimmed function Common.traceZuneHostLaunch');
                    }

                    traceZuneHostShutdown(code: number): void {
                        console.warn('shimmed function Common.traceZuneHostShutdown');
                    }

                    traceLogFileUploadedToWatson(filePath: string): void {
                        console.warn('shimmed function Common.traceLogFileUploadedToWatson');
                    }

                    traceProcessInitializeEventStart(): void {
                        console.warn('shimmed function Common.traceProcessInitializeEventStart');
                    }

                    traceProcessInitializeEventStop(durationMsec: number): void {
                        console.warn('shimmed function Common.traceProcessInitializeEventStop');
                    }

                    traceProcessSuspendEventStart(): void {
                        console.warn('shimmed function Common.traceProcessSuspendEventStart');
                    }

                    traceProcessSuspendEventStop(durationMsec: number): void {
                        console.warn('shimmed function Common.traceProcessSuspendEventStop');
                    }

                    traceProcessResumeEventStart(): void {
                        console.warn('shimmed function Common.traceProcessResumeEventStart');
                    }

                    traceProcessResumeEventStop(durationMsec: number): void {
                        console.warn('shimmed function Common.traceProcessResumeEventStop');
                    }

                    traceProcessSuspendEventSingletonStart(singletonEnumValue: number): void {
                        console.warn('shimmed function Common.traceProcessSuspendEventSingletonStart');
                    }

                    traceProcessSuspendEventSingletonStop(singletonEnumValue: number): void {
                        console.warn('shimmed function Common.traceProcessSuspendEventSingletonStop');
                    }

                    traceProcessResumeEventSingletonStart(singletonEnumValue: number): void {
                        console.warn('shimmed function Common.traceProcessResumeEventSingletonStart');
                    }

                    traceProcessResumeEventSingletonStop(singletonEnumValue: number): void {
                        console.warn('shimmed function Common.traceProcessResumeEventSingletonStop');
                    }

                    traceProcessSuspendTelemetryStart(): void {
                        console.warn('shimmed function Common.traceProcessSuspendTelemetryStart');
                    }

                    traceProcessSuspendTelemetryStop(): void {
                        console.warn('shimmed function Common.traceProcessSuspendTelemetryStop');
                    }

                    traceProcessResumeTelemetryStart(): void {
                        console.warn('shimmed function Common.traceProcessResumeTelemetryStart');
                    }

                    traceProcessResumeTelemetryStop(): void {
                        console.warn('shimmed function Common.traceProcessResumeTelemetryStop');
                    }

                    traceSingletonInitializationStarted(singletonEnumValue: number): void {
                        console.warn('shimmed function Common.traceSingletonInitializationStarted');
                    }

                    traceSingletonInitializationCompleted(singletonEnumValue: number): void {
                        console.warn('shimmed function Common.traceSingletonInitializationCompleted');
                    }

                    traceFileTransferManagerInitializationStart(): void {
                        console.warn('shimmed function Common.traceFileTransferManagerInitializationStart');
                    }

                    traceFileTransferManagerInitializationStop(): void {
                        console.warn('shimmed function Common.traceFileTransferManagerInitializationStop');
                    }

                    traceFileTransferBackgroundTransferStartFailed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferBackgroundTransferStartFailed');
                    }

                    traceFileTransferBackgroundTransferAttachFailed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferBackgroundTransferAttachFailed');
                    }

                    traceFileTransferBackgroundTransferCompleted(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferBackgroundTransferCompleted');
                    }

                    traceFileTransferBackgroundTransferError(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferBackgroundTransferError');
                    }

                    traceFileTransferBackgroundTransferCanceled(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferBackgroundTransferCanceled');
                    }

                    traceFileTransferMoveToLibraryFailed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferMoveToLibraryFailed');
                    }

                    traceFileTransferDownloadInfoFailed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferDownloadInfoFailed');
                    }

                    traceFileTransferQueued(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferQueued');
                    }

                    traceFileTransferFailed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferFailed');
                    }

                    traceFileTransferStart_Successed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferStart_Successed');
                    }

                    traceFileTransferStart_Failed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferStart_Failed');
                    }

                    traceFileTransferCompleted(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferCompleted');
                    }

                    traceFileTransferClosed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function Common.traceFileTransferClosed');
                    }

                    traceClosedCaptionDownloadStarted(hresult: number, path: string, url: string, isXHR: Boolean): void {
                        console.warn('shimmed function Common.traceClosedCaptionDownloadStarted');
                    }

                    traceClosedCaptionDownloadFailed(hresult: number, path: string, url: string, isXHR: Boolean): void {
                        console.warn('shimmed function Common.traceClosedCaptionDownloadFailed');
                    }

                    traceClosedCaptionDownloadCompleted(hresult: number, path: string, url: string, isXHR: Boolean): void {
                        console.warn('shimmed function Common.traceClosedCaptionDownloadCompleted');
                    }

                    traceAppVisibilityChanged(appVisible: Boolean): void {
                        console.warn('shimmed function Common.traceAppVisibilityChanged');
                    }

                }
                export class CommonTemplate implements ICommonTemplate {
                    // constructor();
                    eventEnabled(eventIndex: number): number {
                        throw new Error('shimmed function CommonTemplate.eventEnabled');
                    }

                    traceTemplate_qqzdzzq(_MCGEN_EventIndex: number, id: number, param: number, message: string, hresult: number, functionName: string, file: string, line: number): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_qqzdzzq');
                    }

                    traceTemplate_qjiqqtzq(_MCGEN_EventIndex: number, id: number, userId: string, timestamp: number, classId: number, typeId: number, allowedByPrivacySettings: Boolean, parameterName: string, parameterValue: number): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_qjiqqtzq');
                    }

                    traceTemplate_qjiqqtq(_MCGEN_EventIndex: number, id: number, userId: string, timestamp: number, classId: number, typeId: number, allowedByPrivacySettings: Boolean, parameterCount: number): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_qjiqqtq');
                    }

                    traceTemplate_qzq(_MCGEN_EventIndex: number, id: number, parameterName: string, parameterValue: number): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_qzq');
                    }

                    traceTemplate_qzt(_MCGEN_EventIndex: number, id: number, parameterName: string, parameterValue: Boolean): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_qzt');
                    }

                    traceTemplate_qzz(_MCGEN_EventIndex: number, id: number, parameterName: string, parameterValue: string): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_qzz');
                    }

                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void {
                        console.warn('shimmed function CommonTemplate.traceTemplateEventDescriptor');
                    }

                    traceTemplate_d(_MCGEN_EventIndex: number, code: number): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_d');
                    }

                    traceTemplate_qjqqxqqqq(_MCGEN_EventIndex: number, errorCode: number, provider: string, eventChannel: number, eventId: number, eventKeywords: number, eventLevel: number, eventOpcode: number, eventTask: number, eventVersion: number): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_qjqqxqqqq');
                    }

                    traceTemplate_tz(_MCGEN_EventIndex: number, isElevated: Boolean, parameter: string): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_tz');
                    }

                    traceTemplate_z(_MCGEN_EventIndex: number, filePath: string): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_z');
                    }

                    traceTemplate_q(_MCGEN_EventIndex: number, durationMsec: number): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_q');
                    }

                    traceTemplate_ddjxxdddjzzd(_MCGEN_EventIndex: number, hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_ddjxxdddjzzd');
                    }

                    traceTemplate_dzzt(_MCGEN_EventIndex: number, hresult: number, path: string, url: string, isXHR: Boolean): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_dzzt');
                    }

                    traceTemplate_t(_MCGEN_EventIndex: number, appVisible: Boolean): void {
                        console.warn('shimmed function CommonTemplate.traceTemplate_t');
                    }

                }
                export interface ICommon {
                    isAppVisibilityChangedEnabled: Boolean;
                    isBusinessIntelligenceScalarDataPointEnabled: Boolean;
                    isBusinessIntelligenceStreamBooleanParameterEnabled: Boolean;
                    isBusinessIntelligenceStreamDataPointEnabled: Boolean;
                    isBusinessIntelligenceStreamIntParameterEnabled: Boolean;
                    isBusinessIntelligenceStreamStringParameterEnabled: Boolean;
                    isClientLaunchEnabled: Boolean;
                    isClientShutdownEnabled: Boolean;
                    isClosedCaptionDownloadCompletedEnabled: Boolean;
                    isClosedCaptionDownloadFailedEnabled: Boolean;
                    isClosedCaptionDownloadStartedEnabled: Boolean;
                    isEventSystemErrorEnabled: Boolean;
                    isFileTransferBackgroundTransferAttachFailedEnabled: Boolean;
                    isFileTransferBackgroundTransferCanceledEnabled: Boolean;
                    isFileTransferBackgroundTransferCompletedEnabled: Boolean;
                    isFileTransferBackgroundTransferErrorEnabled: Boolean;
                    isFileTransferBackgroundTransferStartFailedEnabled: Boolean;
                    isFileTransferClosedEnabled: Boolean;
                    isFileTransferCompletedEnabled: Boolean;
                    isFileTransferDownloadInfoFailedEnabled: Boolean;
                    isFileTransferFailedEnabled: Boolean;
                    isFileTransferManagerInitializationStartEnabled: Boolean;
                    isFileTransferManagerInitializationStopEnabled: Boolean;
                    isFileTransferMoveToLibraryFailedEnabled: Boolean;
                    isFileTransferQueuedEnabled: Boolean;
                    isFileTransferStart_FailedEnabled: Boolean;
                    isFileTransferStart_SuccessedEnabled: Boolean;
                    isLogFileUploadedToWatsonEnabled: Boolean;
                    isProcessInitializeEventStartEnabled: Boolean;
                    isProcessInitializeEventStopEnabled: Boolean;
                    isProcessResumeEventSingletonStartEnabled: Boolean;
                    isProcessResumeEventSingletonStopEnabled: Boolean;
                    isProcessResumeEventStartEnabled: Boolean;
                    isProcessResumeEventStopEnabled: Boolean;
                    isProcessResumeTelemetryStartEnabled: Boolean;
                    isProcessResumeTelemetryStopEnabled: Boolean;
                    isProcessSuspendEventSingletonStartEnabled: Boolean;
                    isProcessSuspendEventSingletonStopEnabled: Boolean;
                    isProcessSuspendEventStartEnabled: Boolean;
                    isProcessSuspendEventStopEnabled: Boolean;
                    isProcessSuspendTelemetryStartEnabled: Boolean;
                    isProcessSuspendTelemetryStopEnabled: Boolean;
                    isSingletonInitializationCompletedEnabled: Boolean;
                    isSingletonInitializationStartedEnabled: Boolean;
                    isZuneHostLaunchEnabled: Boolean;
                    isZuneHostShutdownEnabled: Boolean;
                    is_ShipAssertEnabled: Boolean;
                    trace_ShipAssert(id: number, param: number, message: string, hresult: number, functionName: string, file: string, line: number): void;
                    traceBusinessIntelligenceScalarDataPoint(id: number, userId: string, timestamp: number, classId: number, typeId: number, allowedByPrivacySettings: Boolean, parameterName: string, parameterValue: number): void;
                    traceBusinessIntelligenceStreamDataPoint(id: number, userId: string, timestamp: number, classId: number, typeId: number, allowedByPrivacySettings: Boolean, parameterCount: number): void;
                    traceBusinessIntelligenceStreamIntParameter(id: number, parameterName: string, parameterValue: number): void;
                    traceBusinessIntelligenceStreamBooleanParameter(id: number, parameterName: string, parameterValue: Boolean): void;
                    traceBusinessIntelligenceStreamStringParameter(id: number, parameterName: string, parameterValue: string): void;
                    traceClientLaunch(): void;
                    traceClientShutdown(code: number): void;
                    traceEventSystemError(errorCode: number, provider: string, eventChannel: number, eventId: number, eventKeywords: number, eventLevel: number, eventOpcode: number, eventTask: number, eventVersion: number): void;
                    traceZuneHostLaunch(isElevated: Boolean, parameter: string): void;
                    traceZuneHostShutdown(code: number): void;
                    traceLogFileUploadedToWatson(filePath: string): void;
                    traceProcessInitializeEventStart(): void;
                    traceProcessInitializeEventStop(durationMsec: number): void;
                    traceProcessSuspendEventStart(): void;
                    traceProcessSuspendEventStop(durationMsec: number): void;
                    traceProcessResumeEventStart(): void;
                    traceProcessResumeEventStop(durationMsec: number): void;
                    traceProcessSuspendEventSingletonStart(singletonEnumValue: number): void;
                    traceProcessSuspendEventSingletonStop(singletonEnumValue: number): void;
                    traceProcessResumeEventSingletonStart(singletonEnumValue: number): void;
                    traceProcessResumeEventSingletonStop(singletonEnumValue: number): void;
                    traceProcessSuspendTelemetryStart(): void;
                    traceProcessSuspendTelemetryStop(): void;
                    traceProcessResumeTelemetryStart(): void;
                    traceProcessResumeTelemetryStop(): void;
                    traceSingletonInitializationStarted(singletonEnumValue: number): void;
                    traceSingletonInitializationCompleted(singletonEnumValue: number): void;
                    traceFileTransferManagerInitializationStart(): void;
                    traceFileTransferManagerInitializationStop(): void;
                    traceFileTransferBackgroundTransferStartFailed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferBackgroundTransferAttachFailed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferBackgroundTransferCompleted(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferBackgroundTransferError(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferBackgroundTransferCanceled(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferMoveToLibraryFailed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferDownloadInfoFailed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferQueued(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferFailed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferStart_Successed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferStart_Failed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferCompleted(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceFileTransferClosed(hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceClosedCaptionDownloadStarted(hresult: number, path: string, url: string, isXHR: Boolean): void;
                    traceClosedCaptionDownloadFailed(hresult: number, path: string, url: string, isXHR: Boolean): void;
                    traceClosedCaptionDownloadCompleted(hresult: number, path: string, url: string, isXHR: Boolean): void;
                    traceAppVisibilityChanged(appVisible: Boolean): void;
                }
                export interface ICommonTemplate {
                    eventEnabled(eventIndex: number): number;
                    traceTemplate_qqzdzzq(_MCGEN_EventIndex: number, id: number, param: number, message: string, hresult: number, functionName: string, file: string, line: number): void;
                    traceTemplate_qjiqqtzq(_MCGEN_EventIndex: number, id: number, userId: string, timestamp: number, classId: number, typeId: number, allowedByPrivacySettings: Boolean, parameterName: string, parameterValue: number): void;
                    traceTemplate_qjiqqtq(_MCGEN_EventIndex: number, id: number, userId: string, timestamp: number, classId: number, typeId: number, allowedByPrivacySettings: Boolean, parameterCount: number): void;
                    traceTemplate_qzq(_MCGEN_EventIndex: number, id: number, parameterName: string, parameterValue: number): void;
                    traceTemplate_qzt(_MCGEN_EventIndex: number, id: number, parameterName: string, parameterValue: Boolean): void;
                    traceTemplate_qzz(_MCGEN_EventIndex: number, id: number, parameterName: string, parameterValue: string): void;
                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void;
                    traceTemplate_d(_MCGEN_EventIndex: number, code: number): void;
                    traceTemplate_qjqqxqqqq(_MCGEN_EventIndex: number, errorCode: number, provider: string, eventChannel: number, eventId: number, eventKeywords: number, eventLevel: number, eventOpcode: number, eventTask: number, eventVersion: number): void;
                    traceTemplate_tz(_MCGEN_EventIndex: number, isElevated: Boolean, parameter: string): void;
                    traceTemplate_z(_MCGEN_EventIndex: number, filePath: string): void;
                    traceTemplate_q(_MCGEN_EventIndex: number, durationMsec: number): void;
                    traceTemplate_ddjxxdddjzzd(_MCGEN_EventIndex: number, hresult: number, taskId: number, backgroundTransferId: string, bytes: number, totalBytes: number, fileId: number, libraryId: number, libraryTypeId: number, mediaId: string, isolatedStoragePath: string, targetPath: string, status: number): void;
                    traceTemplate_dzzt(_MCGEN_EventIndex: number, hresult: number, path: string, url: string, isXHR: Boolean): void;
                    traceTemplate_t(_MCGEN_EventIndex: number, appVisible: Boolean): void;
                }
                export interface ILegacyPerfTrace {
                    isLegacyPerfTraceClientEventEnabled: Boolean;
                    isLegacyPerfTraceCollectionEventEnabled: Boolean;
                    isLegacyPerfTraceDBMutexEventEnabled: Boolean;
                    isLegacyPerfTraceDownloadEventEnabled: Boolean;
                    isLegacyPerfTraceDriverEventEnabled: Boolean;
                    isLegacyPerfTraceGenericEventEnabled: Boolean;
                    isLegacyPerfTraceHttpEventEnabled: Boolean;
                    isLegacyPerfTraceLaunchEventEnabled: Boolean;
                    isLegacyPerfTraceQRSEventEnabled: Boolean;
                    isLegacyPerfTraceQuickMixEventEnabled: Boolean;
                    isLegacyPerfTraceSyncEventEnabled: Boolean;
                    isLegacyPerfTraceWMPPlaybackEventEnabled: Boolean;
                    traceLegacyPerfTraceHttpEvent(httpEvent: number, url: string): void;
                    traceLegacyPerfTraceClientEvent(reporterTag: number, actionType: number, reason: number): void;
                    traceLegacyPerfTraceWMPPlaybackEvent(type: number, fileName: string, graphType: number, lastHR: number): void;
                    traceLegacyPerfTraceDBMutexEvent(dbmutexEvent: number, threadId: number, time: number): void;
                    traceLegacyPerfTraceLaunchEvent(launchEvent: number, launchEventData: number): void;
                    traceLegacyPerfTraceSyncEvent(syncEvent: number, syncEventData: number): void;
                    traceLegacyPerfTraceQRSEvent(qrsevent: number, qrseventData: number): void;
                    traceLegacyPerfTraceGenericEvent(reporterTag: number, type: number, action: number): void;
                    traceLegacyPerfTraceDriverEvent(driverEvent: number, driverEventData: number): void;
                    traceLegacyPerfTraceCollectionEvent(collectionEvent: number, detail: string): void;
                    traceLegacyPerfTraceQuickMixEvent(quickMixEvent: number, quickMixEventData: number): void;
                    traceLegacyPerfTraceDownloadEvent(downloadEvent: number, id: string): void;
                }
                export interface ILegacyPerfTraceTemplate {
                    eventEnabled(eventIndex: number): number;
                    traceTemplate_qz(_MCGEN_EventIndex: number, httpEvent: number, url: string): void;
                    traceTemplate_qqq(_MCGEN_EventIndex: number, reporterTag: number, actionType: number, reason: number): void;
                    traceTemplate_qzqd(_MCGEN_EventIndex: number, type: number, fileName: string, graphType: number, lastHR: number): void;
                    traceTemplate_qq(_MCGEN_EventIndex: number, launchEvent: number, launchEventData: number): void;
                }
                export interface ILibrary {
                    isBackgroundWorkLock_AcquiredEnabled: Boolean;
                    isBackgroundWorkLock_ReleasedEnabled: Boolean;
                    isBackgroundWorkLock_RequestedEnabled: Boolean;
                    isCollectionBuildingBeginEnabled: Boolean;
                    isCollectionBuildingCloudCollectionV2FirstTrackAddedEnabled: Boolean;
                    isCollectionBuildingEndEnabled: Boolean;
                    isCollectionBuildingMDLCProgressEnabled: Boolean;
                    isCollectionBuildingMediaSyncedEnabled: Boolean;
                    isCollectionBuildingMissingMetadataEnabled: Boolean;
                    isCollectionBuildingProgressEnabled: Boolean;
                    isDatabaseCloseCompletedEnabled: Boolean;
                    isDatabaseCloseStartedEnabled: Boolean;
                    isDatabaseOpenCompletedEnabled: Boolean;
                    isDatabaseOpenStartedEnabled: Boolean;
                    isDbCleanupOnUserSignedOutCompletedEnabled: Boolean;
                    isDbCleanupOnUserSignedOutStartedEnabled: Boolean;
                    isEasyTransferAddingPathsEnabled: Boolean;
                    isEasyTransferBeginImportingMetadataEnabled: Boolean;
                    isEasyTransferBeginImportingPlaylistsEnabled: Boolean;
                    isEasyTransferCompleteEnabled: Boolean;
                    isEasyTransferCompletedImportingMetadataEnabled: Boolean;
                    isEasyTransferCompletedImportingPlaylistsEnabled: Boolean;
                    isEasyTransferConfigParseFailedEnabled: Boolean;
                    isEasyTransferConfigParseSucceededEnabled: Boolean;
                    isEasyTransferFailedToLocateMediaItemEnabled: Boolean;
                    isEasyTransferFoundConfigEnabled: Boolean;
                    isEasyTransferImportedMetadataEnabled: Boolean;
                    isEasyTransferImportedPlaylistEnabled: Boolean;
                    isEasyTransferIterationCompleteEnabled: Boolean;
                    isEasyTransferIterationFailedEnabled: Boolean;
                    isEasyTransferIterationStartedEnabled: Boolean;
                    isEasyTransferLocatedMediaItemEnabled: Boolean;
                    isEasyTransferLocatingMediaItemEnabled: Boolean;
                    isEasyTransferMatchedByFileUrlEnabled: Boolean;
                    isEasyTransferNoConfigEnabled: Boolean;
                    isEasyTransferNoPathsToAddEnabled: Boolean;
                    isEasyTransferParseErrorEnabled: Boolean;
                    isEasyTransferParsingConfigEnabled: Boolean;
                    isEasyTransferStateChangeEnabled: Boolean;
                    isFileProcessedEnabled: Boolean;
                    isFingerprintComputedEnabled: Boolean;
                    isFingerprintGeneration_EndOfStreamReachedEnabled: Boolean;
                    isFingerprintGeneration_FingerprintRetrievedEnabled: Boolean;
                    isFingerprintGeneration_InternalErrorEnabled: Boolean;
                    isFingerprintGeneration_SourceReaderErrorEnabled: Boolean;
                    isFingerprintIdFoundEnabled: Boolean;
                    isFingerprintingCompleteEnabled: Boolean;
                    isFingerprintingStartedEnabled: Boolean;
                    isGetImmediateFingerprintsCompleteEnabled: Boolean;
                    isGetImmediateFingerprintsStartEnabled: Boolean;
                    isGrovelerAddFileEnabled: Boolean;
                    isGrovelerAdditionScanCompletedEnabled: Boolean;
                    isGrovelerAdditionScanStartedEnabled: Boolean;
                    isGrovelerDefinitionChangedNotificationReceivedEnabled: Boolean;
                    isGrovelerDeleteScanCompletedEnabled: Boolean;
                    isGrovelerDeleteScanStartedEnabled: Boolean;
                    isGrovelerFullScanSkippedEnabled: Boolean;
                    isGrovelerGetEmptyItemListEnabled: Boolean;
                    isGrovelerGetFilesAsyncRetryEnabled: Boolean;
                    isGrovelerGetResultsErrorEnabled: Boolean;
                    isGrovelerIsQuickGrovelNeededEnabled: Boolean;
                    isGrovelerMasterRatingFileDirtySetEnabled: Boolean;
                    isGrovelerNetworkConnectedEnabled: Boolean;
                    isGrovelerNetworkShareAccessedEnabled: Boolean;
                    isGrovelerNotificationReceivedEnabled: Boolean;
                    isGrovelerPlaylistScanCompletedEnabled: Boolean;
                    isGrovelerPlaylistScanStartedEnabled: Boolean;
                    isGrovelerQueryIndexerDiffEnabled: Boolean;
                    isGrovelerQuickScanCompletedEnabled: Boolean;
                    isGrovelerQuickScanStartedEnabled: Boolean;
                    isGrovelerReadMasterRatingFileCompletedEnabled: Boolean;
                    isGrovelerReadMasterRatingFileStartedEnabled: Boolean;
                    isGrovelerReadMasterRatingFileTriggeredEnabled: Boolean;
                    isGrovelerRefreshLicenseCompletedEnabled: Boolean;
                    isGrovelerRefreshLicenseStartedEnabled: Boolean;
                    isGrovelerRetriesExhaustedEnabled: Boolean;
                    isGrovelerScanCompletedEnabled: Boolean;
                    isGrovelerScanStartedEnabled: Boolean;
                    isGrovelerSecondScanCompletedEnabled: Boolean;
                    isGrovelerSecondScanStartedEnabled: Boolean;
                    isGrovelerSetFileAvailableEnabled: Boolean;
                    isGrovelerSetFileUnavailableEnabled: Boolean;
                    isGrovelerTopLevelFolderAddedEnabled: Boolean;
                    isGrovelerWaitForCompletionRetryEnabled: Boolean;
                    isGrovelerWriteMasterRatingFileCompletedEnabled: Boolean;
                    isGrovelerWriteMasterRatingFileStartedEnabled: Boolean;
                    isGrovelerWriteMasterRatingFileTriggeredEnabled: Boolean;
                    isImmediateFingerprintRetrievedEnabled: Boolean;
                    isMDLCCompletedEnabled: Boolean;
                    isMDLCStartedEnabled: Boolean;
                    isPlaylistIOCompletedEnabled: Boolean;
                    isPlaylistIOStartedEnabled: Boolean;
                    isProcessRemainingFilesCompleteEnabled: Boolean;
                    isProcessRemainingFilesStartedEnabled: Boolean;
                    isQueryCompletedEnabled: Boolean;
                    isQueryStartedEnabled: Boolean;
                    traceEasyTransferIterationStarted(): void;
                    traceEasyTransferFoundConfig(): void;
                    traceEasyTransferNoConfig(): void;
                    traceEasyTransferParsingConfig(): void;
                    traceEasyTransferConfigParseFailed(): void;
                    traceEasyTransferConfigParseSucceeded(): void;
                    traceEasyTransferAddingPaths(): void;
                    traceEasyTransferNoPathsToAdd(): void;
                    traceEasyTransferBeginImportingMetadata(): void;
                    traceEasyTransferCompletedImportingMetadata(): void;
                    traceEasyTransferBeginImportingPlaylists(): void;
                    traceEasyTransferCompletedImportingPlaylists(): void;
                    traceEasyTransferIterationComplete(): void;
                    traceEasyTransferComplete(): void;
                    traceEasyTransferIterationFailed(): void;
                    traceEasyTransferParseError(line: number, column: number, message: string): void;
                    traceEasyTransferImportedMetadata(mediaId: number, rating: number, playCount: number): void;
                    traceEasyTransferImportedPlaylist(name: string, trackCount: number, imported: Boolean): void;
                    traceEasyTransferLocatingMediaItem(location: string): void;
                    traceEasyTransferLocatedMediaItem(mediaId: number, created: Boolean): void;
                    traceEasyTransferStateChange(oldState: number, newState: number): void;
                    traceEasyTransferFailedToLocateMediaItem(hresult: number): void;
                    traceEasyTransferMatchedByFileUrl(): void;
                    traceGrovelerScanStarted(): void;
                    traceGrovelerScanCompleted(fileCount: number): void;
                    traceGrovelerQuickScanStarted(): void;
                    traceGrovelerQuickScanCompleted(receivedFileCount: number, modifiedFileCount: number): void;
                    traceGrovelerDeleteScanStarted(): void;
                    traceGrovelerDeleteScanCompleted(fileCount: number): void;
                    traceGrovelerPlaylistScanStarted(): void;
                    traceGrovelerPlaylistScanCompleted(fileCount: number): void;
                    traceGrovelerAdditionScanStarted(): void;
                    traceGrovelerAdditionScanCompleted(fileCount: number): void;
                    traceGrovelerFullScanSkipped(): void;
                    traceGrovelerTopLevelFolderAdded(): void;
                    traceGrovelerNotificationReceived(): void;
                    traceGrovelerNetworkConnected(): void;
                    traceGrovelerNetworkShareAccessed(): void;
                    traceGrovelerMasterRatingFileDirtySet(): void;
                    traceGrovelerWriteMasterRatingFileTriggered(): void;
                    traceGrovelerWriteMasterRatingFileStarted(): void;
                    traceGrovelerWriteMasterRatingFileCompleted(hresult: number, ratingCount: number): void;
                    traceGrovelerReadMasterRatingFileTriggered(): void;
                    traceGrovelerReadMasterRatingFileStarted(): void;
                    traceGrovelerReadMasterRatingFileCompleted(hresult: number, ratingCount: number): void;
                    traceGrovelerQueryIndexerDiff(timestamp: string): void;
                    traceGrovelerIsQuickGrovelNeeded(currentCount: number, changedCount: number, quickScanNeeded: Boolean): void;
                    traceGrovelerGetFilesAsyncRetry(hresult: number, retryCount: number): void;
                    traceGrovelerWaitForCompletionRetry(hresult: number, retryCount: number): void;
                    traceGrovelerGetResultsError(hresult: number): void;
                    traceGrovelerGetEmptyItemList(hresult: number): void;
                    traceGrovelerRefreshLicenseStarted(): void;
                    traceGrovelerRefreshLicenseCompleted(hresult: number): void;
                    traceGrovelerDefinitionChangedNotificationReceived(): void;
                    traceGrovelerRetriesExhausted(hresult: number, fileCount: number): void;
                    traceGrovelerAddFile(hresult: number, fileUrl: string): void;
                    traceGrovelerSetFileAvailable(fileUrl: string): void;
                    traceGrovelerSetFileUnavailable(fileUrl: string): void;
                    traceGrovelerSecondScanStarted(): void;
                    traceGrovelerSecondScanCompleted(fileCount: number, unindexedFileCount: number, unknownFileCount: number): void;
                    traceMDLCStarted(): void;
                    traceMDLCCompleted(): void;
                    traceDatabaseOpenStarted(): void;
                    traceDatabaseOpenCompleted(): void;
                    traceDatabaseCloseStarted(): void;
                    traceDatabaseCloseCompleted(): void;
                    traceDbCleanupOnUserSignedOutStarted(): void;
                    traceDbCleanupOnUserSignedOutCompleted(): void;
                    traceQueryStarted(queryObjectInstanceId: number, queryType: string, actionName: string): void;
                    traceQueryCompleted(queryObjectInstanceId: number, queryType: string, actionName: string): void;
                    tracePlaylistIOStarted(): void;
                    tracePlaylistIOCompleted(readFileCount: number): void;
                    traceBackgroundWorkLock_Requested(requestor: string): void;
                    traceBackgroundWorkLock_Acquired(requestor: string): void;
                    traceBackgroundWorkLock_Released(requestor: string): void;
                    traceCollectionBuildingBegin(eventSource: number): void;
                    traceCollectionBuildingEnd(eventSource: number, itemsAdded: number, itemsTotal: number, errorState: number): void;
                    traceCollectionBuildingProgress(itemsProcessed: number): void;
                    traceCollectionBuildingMediaSynced(): void;
                    traceCollectionBuildingMissingMetadata(): void;
                    traceCollectionBuildingMDLCProgress(itemsProcessed: number): void;
                    traceCollectionBuildingCloudCollectionV2FirstTrackAdded(): void;
                    traceFingerprintingStarted(): void;
                    traceFingerprintingComplete(hresult: number, canceled: Boolean, processedFileCount: number, remainingFileCount: number, failedFileCount: number): void;
                    traceProcessRemainingFilesStarted(): void;
                    traceProcessRemainingFilesComplete(hresult: number): void;
                    traceFileProcessed(fileId: number, foreground: Boolean, allowGracenoteId: Boolean, hresult: number): void;
                    traceFingerprintIdFound(fileId: number, fileUrl: string): void;
                    traceFingerprintComputed(fileId: number, fileUrl: string): void;
                    traceFingerprintGeneration_InternalError(fileUrl: string, error: number): void;
                    traceFingerprintGeneration_EndOfStreamReached(fileUrl: string): void;
                    traceFingerprintGeneration_SourceReaderError(fileUrl: string, flags: number): void;
                    traceFingerprintGeneration_FingerprintRetrieved(fileUrl: string, qualities: number): void;
                    traceGetImmediateFingerprintsStart(): void;
                    traceGetImmediateFingerprintsComplete(processedFileCount: number): void;
                    traceImmediateFingerprintRetrieved(fileId: number, hresult: number, resultType: number): void;
                }
                export interface ILibraryTemplate {
                    eventEnabled(eventIndex: number): number;
                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void;
                    traceTemplate_qqz(_MCGEN_EventIndex: number, line: number, column: number, message: string): void;
                    traceTemplate_qqq(_MCGEN_EventIndex: number, mediaId: number, rating: number, playCount: number): void;
                    traceTemplate_zqt(_MCGEN_EventIndex: number, name: string, trackCount: number, imported: Boolean): void;
                    traceTemplate_z(_MCGEN_EventIndex: number, location: string): void;
                    traceTemplate_qt(_MCGEN_EventIndex: number, mediaId: number, created: Boolean): void;
                    traceTemplate_qq(_MCGEN_EventIndex: number, oldState: number, newState: number): void;
                    traceTemplate_d(_MCGEN_EventIndex: number, hresult: number): void;
                    traceTemplate_q(_MCGEN_EventIndex: number, fileCount: number): void;
                    traceTemplate_dq(_MCGEN_EventIndex: number, hresult: number, ratingCount: number): void;
                    traceTemplate_qqt(_MCGEN_EventIndex: number, currentCount: number, changedCount: number, quickScanNeeded: Boolean): void;
                    traceTemplate_dz(_MCGEN_EventIndex: number, hresult: number, fileUrl: string): void;
                    traceTemplate_dzz(_MCGEN_EventIndex: number, queryObjectInstanceId: number, queryType: string, actionName: string): void;
                    traceTemplate_qqqq(_MCGEN_EventIndex: number, eventSource: number, itemsAdded: number, itemsTotal: number, errorState: number): void;
                    traceTemplate_dtqqq(_MCGEN_EventIndex: number, hresult: number, canceled: Boolean, processedFileCount: number, remainingFileCount: number, failedFileCount: number): void;
                    traceTemplate_qttd(_MCGEN_EventIndex: number, fileId: number, foreground: Boolean, allowGracenoteId: Boolean, hresult: number): void;
                    traceTemplate_qz(_MCGEN_EventIndex: number, fileId: number, fileUrl: string): void;
                    traceTemplate_zd(_MCGEN_EventIndex: number, fileUrl: string, error: number): void;
                    traceTemplate_zq(_MCGEN_EventIndex: number, fileUrl: string, flags: number): void;
                    traceTemplate_qdd(_MCGEN_EventIndex: number, fileId: number, hresult: number, resultType: number): void;
                }
                export interface IPipeline {
                    isClosedCaptions_DroppedFrameEnabled: Boolean;
                    isClosedCaptions_EnterRenderingLoopEnabled: Boolean;
                    isClosedCaptions_ExitRenderingLoopEnabled: Boolean;
                    isClosedCaptions_OnEnabled: Boolean;
                    isClosedCaptions_RendererGetTTMLFilepathEnabled: Boolean;
                    isClosedCaptions_RendererLoadTTMLFileEnabled: Boolean;
                    isDRM_DeleteLicense_CompletedEnabled: Boolean;
                    isDRM_DeleteLicense_InvokedEnabled: Boolean;
                    isDRM_ReportMetering_AccountEnabled: Boolean;
                    isDRM_ReportMetering_CompletedEnabled: Boolean;
                    isDRM_ReportMetering_InvokedEnabled: Boolean;
                    isDRM_ReportMetering_NoDataToReportEnabled: Boolean;
                    isDRM_RootLicenseRefresh_AccountEnabled: Boolean;
                    isDRM_RootLicenseRefresh_CompletedEnabled: Boolean;
                    isDRM_RootLicenseRefresh_DetailsEnabled: Boolean;
                    isDRM_RootLicenseRefresh_InvokedEnabled: Boolean;
                    isFastStartMediaSource_CreatedEnabled: Boolean;
                    isFastStartMediaSource_PlaybackStartEnabled: Boolean;
                    isFastStartMediaSource_ReceivedUrlEnabled: Boolean;
                    isLEQ_EnabledEnabled: Boolean;
                    isLEQ_Process_CompleteEnabled: Boolean;
                    isLEQ_Process_StartEnabled: Boolean;
                    isLEQ_SetFormatEnabled: Boolean;
                    isMBR_BufferStatusEnabled: Boolean;
                    isMBR_DMO_ProcessInput_ReturnEnabled: Boolean;
                    isMBR_DMO_ProcessOutput_ReturnEnabled: Boolean;
                    isMBR_DropFrameEnabled: Boolean;
                    isMBR_EOSEnabled: Boolean;
                    isMBR_GotNewSampleEnabled: Boolean;
                    isMBR_ManifestStreamEnabled: Boolean;
                    isMBR_NextChunkEnabled: Boolean;
                    isMBR_Pause_EnterEnabled: Boolean;
                    isMBR_Pause_ExitEnabled: Boolean;
                    isMBR_PinBeginFlush_EnterEnabled: Boolean;
                    isMBR_PinBeginFlush_ExitEnabled: Boolean;
                    isMBR_PinDecompress_BeginEnabled: Boolean;
                    isMBR_PinDecompress_CallEnabled: Boolean;
                    isMBR_PinDecompress_EndEnabled: Boolean;
                    isMBR_PinDecompress_ReturnEnabled: Boolean;
                    isMBR_PinEndFlush_EnterEnabled: Boolean;
                    isMBR_PinEndFlush_ExitEnabled: Boolean;
                    isMBR_PinPumpState_ChangedEnabled: Boolean;
                    isMBR_Preroll_ExitEnabled: Boolean;
                    isMBR_Preroll_Forced_ExitEnabled: Boolean;
                    isMBR_Run_EnterEnabled: Boolean;
                    isMBR_Run_ExitEnabled: Boolean;
                    isMBR_Run_LockEnabled: Boolean;
                    isMBR_SamplePushedDownStream_BeginEnabled: Boolean;
                    isMBR_SamplePushedDownStream_EndEnabled: Boolean;
                    isMBR_SamplePushedToPinPumpEnabled: Boolean;
                    isMBR_Seek_EnterEnabled: Boolean;
                    isMBR_Seek_ExitEnabled: Boolean;
                    isMBR_SourceState_ChangedEnabled: Boolean;
                    isMBR_Stop_EnterEnabled: Boolean;
                    isMBR_Stop_ExitEnabled: Boolean;
                    isMBR_Transcrypt_BeginEnabled: Boolean;
                    isMBR_Transcrypt_EndEnabled: Boolean;
                    isPlaybackInterop_PlayerStateChangedEnabled: Boolean;
                    isPlaybackInterop_PositionChangedEnabled: Boolean;
                    isPlaybackInterop_TransportStateChangedEnabled: Boolean;
                    isPlaybackInterop_TrickPlayStateChangedEnabled: Boolean;
                    isPlayback_ControlInitializedEnabled: Boolean;
                    isPlayback_CurrentMediaLoadedEnabled: Boolean;
                    isPlayback_DisableTimeUpdateEnabled: Boolean;
                    isPlayback_EnableTimeUpdateEnabled: Boolean;
                    isPlayback_ErrorOccurredEnabled: Boolean;
                    isPlayback_ForceTimeUpdateEnabled: Boolean;
                    isPlayback_MCPlayerAdapter_CreateInstanceEnabled: Boolean;
                    isPlayback_MFPlayer_CreateInstanceEnabled: Boolean;
                    isPlayback_NextMediaLoadedEnabled: Boolean;
                    isPlayback_NextMediaStartedEnabled: Boolean;
                    isPlayback_PBMSoundLevelChangedEnabled: Boolean;
                    isPlayback_PlayerStateChangedEnabled: Boolean;
                    isPlayback_SessionInitializedEnabled: Boolean;
                    isPlayback_SetMediaEnabled: Boolean;
                    isPlayback_SetNextMediaEnabled: Boolean;
                    isPlayback_SwitchingToNextMediaEnabled: Boolean;
                    isPlayback_TargetTransportStateSetEnabled: Boolean;
                    isPlayback_TransportStateChangedEnabled: Boolean;
                    isPlayback_WPPEnabled: Boolean;
                    isPlaylist_ActivateEnabled: Boolean;
                    isPlaylist_CreatedEnabled: Boolean;
                    isPlaylist_InterpretingDataEnabled: Boolean;
                    isPlaylist_SetDataSourceBeginEnabled: Boolean;
                    isPlaylist_SetDataSourceEndEnabled: Boolean;
                    isPlaylist_SetMediaEnabled: Boolean;
                    isPlaylist_SetNextMediaEnabled: Boolean;
                    isPlaylog_BookmarkLoadEnabled: Boolean;
                    isPlaylog_BookmarkSaveEnabled: Boolean;
                    isPlaylog_PlayCountLoadEnabled: Boolean;
                    isPlaylog_PlayCountSaveEnabled: Boolean;
                    isPlaylog_PlayedLoadEnabled: Boolean;
                    isPlaylog_PlayedSaveEnabled: Boolean;
                    isPresenter_Display_Video_SizeEnabled: Boolean;
                    isPresenter_DownresEnabled: Boolean;
                    isPresenter_FrameDroppedEnabled: Boolean;
                    isPresenter_FrameTimesEnabled: Boolean;
                    isPresenter_Native_Video_SizeEnabled: Boolean;
                    isPresenter_OperationEnabled: Boolean;
                    isPresenter_Target_Video_SizeEnabled: Boolean;
                    isTranscoding_CompleteEnabled: Boolean;
                    isTranscoding_Crash_StatusEnabled: Boolean;
                    isTranscoding_Disable_HW_AccelerationEnabled: Boolean;
                    isTranscoding_JobTypeEnabled: Boolean;
                    isTranscoding_MF_DShow_FallbackEnabled: Boolean;
                    isTranscoding_MF_HW_SW_FallbackEnabled: Boolean;
                    isTranscoding_MF_HW_StatusEnabled: Boolean;
                    isTranscoding_Reenable_HW_AccelerationEnabled: Boolean;
                    isTranscoding_SW_Retranscode_After_CrashEnabled: Boolean;
                    isTranscoding_StartEnabled: Boolean;
                    traceMBR_Pause_Enter(currentStreamTimeHns: number): void;
                    traceMBR_Pause_Exit(currentStreamTimeHns: number, hresult: number): void;
                    traceMBR_Run_Enter(startTimeHns: number, currentStreamTimeHns: number): void;
                    traceMBR_Run_Lock(currentStreamTimeHns: number): void;
                    traceMBR_Run_Exit(currentStreamTimeHns: number, hresult: number): void;
                    traceMBR_Seek_Enter(possitionHns: number, currentStreamTimeHns: number): void;
                    traceMBR_Seek_Exit(currentStreamTimeHns: number, hresult: number): void;
                    traceMBR_Stop_Enter(currentStreamTimeHns: number): void;
                    traceMBR_Stop_Exit(currentStreamTimeHns: number, hresult: number): void;
                    traceMBR_SourceState_Changed(filterState: number, oldState: number, newState: number): void;
                    traceMBR_PinPumpState_Changed(streamType: number, oldState: number, newState: number): void;
                    traceMBR_EOS(streamType: number, currentStreamTimeHns: number): void;
                    traceMBR_Preroll_Exit(streamType: number, initialAudioTimeHns: number, initialVideoTimeHns: number, newStartBaseTimeHns: number): void;
                    traceMBR_Preroll_Forced_Exit(streamType: number, initialAudioTimeHns: number, initialVideoTimeHns: number, newStartBaseTimeHns: number): void;
                    traceMBR_PinBeginFlush_Enter(streamType: number, currentStreamTimeHns: number): void;
                    traceMBR_PinBeginFlush_Exit(streamType: number, currentStreamTimeHns: number, hresult: number): void;
                    traceMBR_PinEndFlush_Enter(streamType: number, currentStreamTimeHns: number): void;
                    traceMBR_PinEndFlush_Exit(streamType: number, currentStreamTimeHns: number, hresult: number): void;
                    traceMBR_GotNewSample(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
                    traceMBR_SamplePushedToPinPump(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
                    traceMBR_SamplePushedDownStream_Begin(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
                    traceMBR_SamplePushedDownStream_End(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
                    traceMBR_BufferStatus(currentStreamTimeHns: number, bufferSizeMs: number): void;
                    traceMBR_DropFrame(totalFramesDropped: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
                    traceMBR_PinDecompress_Begin(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
                    traceMBR_PinDecompress_End(streamType: number, frameSizeInBytes: number, durationHns: number): void;
                    traceMBR_PinDecompress_Call(streamType: number): void;
                    traceMBR_PinDecompress_Return(streamType: number): void;
                    traceMBR_Transcrypt_Begin(streamType: number): void;
                    traceMBR_Transcrypt_End(streamType: number): void;
                    traceMBR_DMO_ProcessInput_Return(streamType: number, sampleTimeHns: number, hresult: number): void;
                    traceMBR_DMO_ProcessOutput_Return(streamType: number, hresult: number, durationHns: number): void;
                    traceMBR_NextChunk(streamType: number, chunkIndex: number, bitrateBps: number, sampleTimeHns: number, durationHns: number, sizeInBytes: number, quality: number, targetQuality: number, totalBandwidthBps: number, targetBandwidthBps: number, bufferSizeMs: number): void;
                    traceMBR_ManifestStream(streamType: number, id: number, bitrate: number, width: number, height: number, channels: number): void;
                    traceTranscoding_JobType(jobType: number): void;
                    traceTranscoding_Start(): void;
                    traceTranscoding_Complete(hresult: number): void;
                    traceTranscoding_MF_DShow_Fallback(): void;
                    traceTranscoding_MF_HW_SW_Fallback(): void;
                    traceTranscoding_MF_HW_Status(hw_Status: Boolean): void;
                    traceTranscoding_Crash_Status(crashCount: number, maxCrashCount: number, hw_Status: Boolean, isConfirmed: Boolean, hresult: number): void;
                    traceTranscoding_Disable_HW_Acceleration(): void;
                    traceTranscoding_Reenable_HW_Acceleration(): void;
                    traceTranscoding_SW_Retranscode_After_Crash(): void;
                    tracePresenter_Downres(width: number, height: number): void;
                    tracePresenter_Native_Video_Size(width: number, height: number): void;
                    tracePresenter_Target_Video_Size(width: number, height: number): void;
                    tracePresenter_Display_Video_Size(width: number, height: number): void;
                    tracePresenter_FrameTimes(frameNumber: number, timestampStream: number, timestampQPC: number, systime100ns: number, streamtime100ns: number, freqQPC: number): void;
                    tracePresenter_FrameDropped(framesDropped: number): void;
                    tracePresenter_Operation(op: string, lastPTS: number, splashOwnedFrameCount: number, stepCount: number, state: number, connectedState: number): void;
                    traceLEQ_Enabled(enabled: Boolean): void;
                    traceLEQ_SetFormat(format: number, channels: number, samplesPerChannel: number, action: number, hresult: number): void;
                    traceLEQ_Process_Start(): void;
                    traceLEQ_Process_Complete(passthrough: Boolean, hresult: number): void;
                    tracePlaybackInterop_PlayerStateChanged(state: number): void;
                    tracePlaybackInterop_PositionChanged(position: number, minSeekPosition: number, maxSeekPosition: number, endOfMedia: Boolean, canSeek: Boolean): void;
                    tracePlaybackInterop_TransportStateChanged(state: number): void;
                    tracePlaybackInterop_TrickPlayStateChanged(state: number): void;
                    tracePlayback_MCPlayerAdapter_CreateInstance(hresult: number): void;
                    tracePlayback_MFPlayer_CreateInstance(hresult: number): void;
                    tracePlayback_ControlInitialized(): void;
                    tracePlayback_SessionInitialized(): void;
                    tracePlayback_PlayerStateChanged(newState: string, oldState: string): void;
                    tracePlayback_TransportStateChanged(newState: string, oldState: string): void;
                    tracePlayback_SetMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void;
                    tracePlayback_SetNextMedia(readyForNext: Boolean, source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void;
                    tracePlayback_CurrentMediaLoaded(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void;
                    tracePlayback_NextMediaLoaded(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void;
                    tracePlayback_SwitchingToNextMedia(source: string): void;
                    tracePlayback_NextMediaStarted(source: string): void;
                    tracePlayback_ErrorOccurred(errorCode: number, extendedCode: number, context: string): void;
                    tracePlayback_EnableTimeUpdate(currentPositionMsec: number): void;
                    tracePlayback_DisableTimeUpdate(currentPositionMsec: number): void;
                    tracePlayback_ForceTimeUpdate(currentPositionMsec: number): void;
                    tracePlayback_PBMSoundLevelChanged(soundLevel: string, currentTransportState: string): void;
                    tracePlayback_TargetTransportStateSet(wannaBe: string, current: string): void;
                    tracePlaylist_SetDataSourceBegin(): void;
                    tracePlaylist_SetDataSourceEnd(): void;
                    tracePlaylist_InterpretingData(): void;
                    tracePlaylist_Activate(index: number, startPosition: number, shuffle: Boolean, repeat: Boolean): void;
                    tracePlaylist_SetMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void;
                    tracePlaylist_SetNextMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void;
                    tracePlaylist_Created(): void;
                    tracePlaylog_BookmarkLoad(positionMS: number, playFromBookmark: Boolean): void;
                    tracePlaylog_BookmarkSave(positionMS: number): void;
                    tracePlaylog_PlayCountLoad(playCount: number): void;
                    tracePlaylog_PlayCountSave(playCount: number): void;
                    tracePlaylog_PlayedLoad(played: Boolean): void;
                    tracePlaylog_PlayedSave(played: Boolean): void;
                    traceDRM_RootLicenseRefresh_Account(subscription: Boolean, tunerActivated: Boolean): void;
                    traceDRM_RootLicenseRefresh_Details(now: string, lastRefresh: string, spanMs: number): void;
                    traceDRM_RootLicenseRefresh_Invoked(): void;
                    traceDRM_RootLicenseRefresh_Completed(status: string): void;
                    traceDRM_ReportMetering_Account(subscription: Boolean, tunerActivated: Boolean, meteringCertificate: string): void;
                    traceDRM_ReportMetering_Invoked(): void;
                    traceDRM_ReportMetering_Completed(status: string): void;
                    traceDRM_ReportMetering_NoDataToReport(): void;
                    traceDRM_DeleteLicense_Invoked(kid: string): void;
                    traceDRM_DeleteLicense_Completed(kid: string, hresult: number): void;
                    traceClosedCaptions_RendererGetTTMLFilepath(state: string, smid: string, miid: string, lcid: number, filepath: string): void;
                    traceClosedCaptions_RendererLoadTTMLFile(state: string, filepath: string): void;
                    traceClosedCaptions_EnterRenderingLoop(currentPosition: number, transportState: string): void;
                    traceClosedCaptions_ExitRenderingLoop(currentPosition: number, transportState: string, closedCaptionsOn: Boolean): void;
                    traceClosedCaptions_On(enabled: Boolean): void;
                    traceClosedCaptions_DroppedFrame(generatedAt: number, validUntil: number, currentPosition: number): void;
                    traceFastStartMediaSource_Created(): void;
                    traceFastStartMediaSource_ReceivedUrl(info: string): void;
                    traceFastStartMediaSource_PlaybackStart(): void;
                    tracePlayback_WPP(info: string): void;
                }
                export interface IPipelineTemplate {
                    eventEnabled(eventIndex: number): number;
                    traceTemplate_x(_MCGEN_EventIndex: number, currentStreamTimeHns: number): void;
                    traceTemplate_xd(_MCGEN_EventIndex: number, currentStreamTimeHns: number, hresult: number): void;
                    traceTemplate_xx(_MCGEN_EventIndex: number, startTimeHns: number, currentStreamTimeHns: number): void;
                    traceTemplate_ix(_MCGEN_EventIndex: number, possitionHns: number, currentStreamTimeHns: number): void;
                    traceTemplate_ddd(_MCGEN_EventIndex: number, filterState: number, oldState: number, newState: number): void;
                    traceTemplate_qdd(_MCGEN_EventIndex: number, streamType: number, oldState: number, newState: number): void;
                    traceTemplate_qx(_MCGEN_EventIndex: number, streamType: number, currentStreamTimeHns: number): void;
                    traceTemplate_dxxx(_MCGEN_EventIndex: number, streamType: number, initialAudioTimeHns: number, initialVideoTimeHns: number, newStartBaseTimeHns: number): void;
                    traceTemplate_qxd(_MCGEN_EventIndex: number, streamType: number, currentStreamTimeHns: number, hresult: number): void;
                    traceTemplate_qxx(_MCGEN_EventIndex: number, streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void;
                    traceTemplate_qqx(_MCGEN_EventIndex: number, streamType: number, frameSizeInBytes: number, durationHns: number): void;
                    traceTemplate_q(_MCGEN_EventIndex: number, streamType: number): void;
                    traceTemplate_qdx(_MCGEN_EventIndex: number, streamType: number, hresult: number, durationHns: number): void;
                    traceTemplate_qdqxxqqqqqq(_MCGEN_EventIndex: number, streamType: number, chunkIndex: number, bitrateBps: number, sampleTimeHns: number, durationHns: number, sizeInBytes: number, quality: number, targetQuality: number, totalBandwidthBps: number, targetBandwidthBps: number, bufferSizeMs: number): void;
                    traceTemplate_qqqqqq(_MCGEN_EventIndex: number, streamType: number, id: number, bitrate: number, width: number, height: number, channels: number): void;
                    traceTemplate_d(_MCGEN_EventIndex: number, jobType: number): void;
                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void;
                    traceTemplate_t(_MCGEN_EventIndex: number, hw_Status: Boolean): void;
                    traceTemplate_qqttd(_MCGEN_EventIndex: number, crashCount: number, maxCrashCount: number, hw_Status: Boolean, isConfirmed: Boolean, hresult: number): void;
                    traceTemplate_qq(_MCGEN_EventIndex: number, width: number, height: number): void;
                    traceTemplate_xxxxxx(_MCGEN_EventIndex: number, frameNumber: number, timestampStream: number, timestampQPC: number, systime100ns: number, streamtime100ns: number, freqQPC: number): void;
                    traceTemplate_zxqqdd(_MCGEN_EventIndex: number, op: string, lastPTS: number, splashOwnedFrameCount: number, stepCount: number, state: number, connectedState: number): void;
                    traceTemplate_qqqqd(_MCGEN_EventIndex: number, format: number, channels: number, samplesPerChannel: number, action: number, hresult: number): void;
                    traceTemplate_td(_MCGEN_EventIndex: number, passthrough: Boolean, hresult: number): void;
                    traceTemplate_xxxtt(_MCGEN_EventIndex: number, position: number, minSeekPosition: number, maxSeekPosition: number, endOfMedia: Boolean, canSeek: Boolean): void;
                    traceTemplate_zz(_MCGEN_EventIndex: number, newState: string, oldState: string): void;
                    traceTemplate_zzzqqq(_MCGEN_EventIndex: number, source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void;
                    traceTemplate_tzzzqq(_MCGEN_EventIndex: number, readyForNext: Boolean, source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void;
                    traceTemplate_z(_MCGEN_EventIndex: number, source: string): void;
                    traceTemplate_qqz(_MCGEN_EventIndex: number, errorCode: number, extendedCode: number, context: string): void;
                    traceTemplate_qqtt(_MCGEN_EventIndex: number, index: number, startPosition: number, shuffle: Boolean, repeat: Boolean): void;
                    traceTemplate_zzzqq(_MCGEN_EventIndex: number, source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void;
                    traceTemplate_qt(_MCGEN_EventIndex: number, positionMS: number, playFromBookmark: Boolean): void;
                    traceTemplate_tt(_MCGEN_EventIndex: number, subscription: Boolean, tunerActivated: Boolean): void;
                    traceTemplate_zzx(_MCGEN_EventIndex: number, now: string, lastRefresh: string, spanMs: number): void;
                    traceTemplate_ttz(_MCGEN_EventIndex: number, subscription: Boolean, tunerActivated: Boolean, meteringCertificate: string): void;
                    traceTemplate_zd(_MCGEN_EventIndex: number, kid: string, hresult: number): void;
                    traceTemplate_zzzqz(_MCGEN_EventIndex: number, state: string, smid: string, miid: string, lcid: number, filepath: string): void;
                    traceTemplate_qz(_MCGEN_EventIndex: number, currentPosition: number, transportState: string): void;
                    traceTemplate_qzt(_MCGEN_EventIndex: number, currentPosition: number, transportState: string, closedCaptionsOn: Boolean): void;
                    traceTemplate_qqq(_MCGEN_EventIndex: number, generatedAt: number, validUntil: number, currentPosition: number): void;
                }
                export interface IProviders {
                    isAddAlbumAndFindTrackIdBasedOnMetadataEndEnabled: Boolean;
                    isAddAlbumAndFindTrackIdBasedOnMetadataStartEnabled: Boolean;
                    isAddAlbumAndFindTrackIdEndEnabled: Boolean;
                    isAddAlbumAndFindTrackIdStartEnabled: Boolean;
                    isAddAlbumWithTitleArtistEnabled: Boolean;
                    isAddAudioAlbumEndEnabled: Boolean;
                    isAddAudioAlbumStartEnabled: Boolean;
                    isAddFileEndEnabled: Boolean;
                    isAddFileStartEnabled: Boolean;
                    isAddFolderEndEnabled: Boolean;
                    isAddFolderStartEnabled: Boolean;
                    isAddMediaEndEnabled: Boolean;
                    isAddMediaStartEnabled: Boolean;
                    isAddPersonEndEnabled: Boolean;
                    isAddPersonLinkEndEnabled: Boolean;
                    isAddPersonLinkStartEnabled: Boolean;
                    isAddPersonLinksEndEnabled: Boolean;
                    isAddPersonLinksStartEnabled: Boolean;
                    isAddPersonStartEnabled: Boolean;
                    isAddTrackEndEnabled: Boolean;
                    isAddTrackFileEndEnabled: Boolean;
                    isAddTrackFileStartEnabled: Boolean;
                    isAddTrackStartEnabled: Boolean;
                    isAddingAlbumEnabled: Boolean;
                    isAddingFileEnabled: Boolean;
                    isAddingFolderEnabled: Boolean;
                    isAddingPersonEnabled: Boolean;
                    isAddingPersonLinkEnabled: Boolean;
                    isAddingTrackEnabled: Boolean;
                    isAddingTrackEntryEnabled: Boolean;
                    isAddingUnknownArtistEnabled: Boolean;
                    isAlbumAsVariousArtistsEnabled: Boolean;
                    isFindAndGetAudioTrackEndEnabled: Boolean;
                    isFindAndGetAudioTrackStartEnabled: Boolean;
                    isFindArtistAndAlbumEndEnabled: Boolean;
                    isFindArtistAndAlbumStartEnabled: Boolean;
                    isFindTrackIdAndAlbumBasedOnTrackSmidEndEnabled: Boolean;
                    isFindTrackIdAndAlbumBasedOnTrackSmidStartEnabled: Boolean;
                    isFoundExistingTrackEnabled: Boolean;
                    isFoundTrackAndAlbumEnabled: Boolean;
                    isFoundTrackBySmidEnabled: Boolean;
                    isPromotingTrackArtistEnabled: Boolean;
                    isRecomputeAlbumReleaseYearEndEnabled: Boolean;
                    isRecomputeAlbumReleaseYearStartEnabled: Boolean;
                    isReflectTrackFilesStateEndEnabled: Boolean;
                    isReflectTrackFilesStateStartEnabled: Boolean;
                    isSetTrackRatingFromFileEnabled: Boolean;
                    isSetUnknownGenreEnabled: Boolean;
                    isSplitExistingFileEnabled: Boolean;
                    isTrackIsAudioBookEnabled: Boolean;
                    isUpdateAlbumSetGenreEnabled: Boolean;
                    isUpdateAlbumVisibilityEnabled: Boolean;
                    isUpdateCurrentAudioAlbumEndEnabled: Boolean;
                    isUpdateCurrentAudioAlbumStartEnabled: Boolean;
                    isUpdateCurrentTrackEndEnabled: Boolean;
                    isUpdateCurrentTrackStartEnabled: Boolean;
                    isUpdateFileEndEnabled: Boolean;
                    isUpdateFileStartEnabled: Boolean;
                    isUpdateOldAlbumVisibilityEnabled: Boolean;
                    isUpdatePlaylistContentsEndEnabled: Boolean;
                    isUpdatePlaylistContentsStartEnabled: Boolean;
                    isUpdatingAlbumAcquisitionDateEnabled: Boolean;
                    isUpdatingAlbumEnabled: Boolean;
                    isUpdatingFileCountsEnabled: Boolean;
                    isUpdatingFileEnabled: Boolean;
                    isUpdatingPersonEnabled: Boolean;
                    isUpdatingPlaylistItemWithMediaIdEnabled: Boolean;
                    isUpdatingTrackAcquisitionDateEnabled: Boolean;
                    isUpdatingTrackEnabled: Boolean;
                    traceAddMediaStart(): void;
                    traceAddMediaEnd(): void;
                    traceAddTrackStart(): void;
                    traceAddTrackEnd(): void;
                    traceAddAlbumAndFindTrackIdStart(): void;
                    traceAddAlbumAndFindTrackIdEnd(): void;
                    traceFindTrackIdAndAlbumBasedOnTrackSmidStart(): void;
                    traceFindTrackIdAndAlbumBasedOnTrackSmidEnd(): void;
                    traceAddAlbumAndFindTrackIdBasedOnMetadataStart(): void;
                    traceAddAlbumAndFindTrackIdBasedOnMetadataEnd(): void;
                    traceAddAudioAlbumStart(): void;
                    traceAddAudioAlbumEnd(): void;
                    traceFindArtistAndAlbumStart(): void;
                    traceFindArtistAndAlbumEnd(): void;
                    traceUpdateCurrentAudioAlbumStart(): void;
                    traceUpdateCurrentAudioAlbumEnd(): void;
                    traceAddPersonLinksStart(): void;
                    traceAddPersonLinksEnd(): void;
                    traceAddPersonStart(): void;
                    traceAddPersonEnd(): void;
                    traceAddPersonLinkStart(): void;
                    traceAddPersonLinkEnd(): void;
                    traceFindAndGetAudioTrackStart(): void;
                    traceFindAndGetAudioTrackEnd(): void;
                    traceUpdateCurrentTrackStart(): void;
                    traceUpdateCurrentTrackEnd(): void;
                    traceRecomputeAlbumReleaseYearStart(): void;
                    traceRecomputeAlbumReleaseYearEnd(): void;
                    traceAddTrackFileStart(): void;
                    traceAddTrackFileEnd(): void;
                    traceReflectTrackFilesStateStart(): void;
                    traceReflectTrackFilesStateEnd(): void;
                    traceAddFileStart(): void;
                    traceAddFileEnd(): void;
                    traceUpdateFileStart(): void;
                    traceUpdateFileEnd(): void;
                    traceAddFolderStart(): void;
                    traceAddFolderEnd(): void;
                    traceUpdatePlaylistContentsStart(): void;
                    traceUpdatePlaylistContentsEnd(): void;
                    traceFoundTrackBySmid(): void;
                    traceFoundTrackAndAlbum(albumId: number, artistId: number, trackId: number): void;
                    tracePromotingTrackArtist(albumTitle: string): void;
                    traceAlbumAsVariousArtists(): void;
                    traceAddingAlbum(albumName: string): void;
                    traceAddAlbumWithTitleArtist(albumTitle: string, artistId: number): void;
                    traceUpdatingAlbum(): void;
                    traceAddingPerson(personName: string): void;
                    traceUpdatingPerson(personName: string): void;
                    traceAddingPersonLink(personId: number, mediaId: number): void;
                    traceAddingTrackEntry(albumId: number, trackTitle: string, trackNumber: number): void;
                    traceTrackIsAudioBook(): void;
                    traceFoundExistingTrack(trackId: number): void;
                    traceAddingUnknownArtist(): void;
                    traceUpdateAlbumSetGenre(genreId: number): void;
                    traceSetUnknownGenre(): void;
                    traceAddingTrack(trackName: string): void;
                    traceUpdatingTrack(trackName: string): void;
                    traceSetTrackRatingFromFile(trackTitle: string, rating: number): void;
                    traceSplitExistingFile(oldTrackId: number, newTrackId: number): void;
                    traceAddingFolder(folderPath: string): void;
                    traceAddingFile(filename: string): void;
                    traceUpdatingFile(filename: string): void;
                    traceUpdatingFileCounts(): void;
                    traceUpdateOldAlbumVisibility(albumId: number): void;
                    traceUpdateAlbumVisibility(albumId: number): void;
                    traceUpdatingTrackAcquisitionDate(trackId: number): void;
                    traceUpdatingAlbumAcquisitionDate(albumId: number): void;
                    traceUpdatingPlaylistItemWithMediaId(playlistContentId: number, mediaId: number): void;
                }
                export interface IProvidersTemplate {
                    eventEnabled(eventIndex: number): number;
                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void;
                    traceTemplate_qqq(_MCGEN_EventIndex: number, albumId: number, artistId: number, trackId: number): void;
                    traceTemplate_z(_MCGEN_EventIndex: number, albumTitle: string): void;
                    traceTemplate_zq(_MCGEN_EventIndex: number, albumTitle: string, artistId: number): void;
                    traceTemplate_qq(_MCGEN_EventIndex: number, personId: number, mediaId: number): void;
                    traceTemplate_qzq(_MCGEN_EventIndex: number, albumId: number, trackTitle: string, trackNumber: number): void;
                    traceTemplate_q(_MCGEN_EventIndex: number, trackId: number): void;
                }
                export interface IServiceEventProvider {
                    isFamilyUserPropertyEnabled: Boolean;
                    isPurchaseHistoryGrovelCompletedEnabled: Boolean;
                    isPurchaseHistoryGrovelErrorEnabled: Boolean;
                    isPurchaseHistoryGrovelStartedEnabled: Boolean;
                    isServiceAuthHeaderEnabled: Boolean;
                    isServiceAuthHeaderErrorEnabled: Boolean;
                    isServiceFamilyUserCompletedEnabled: Boolean;
                    isServiceFamilyUserStartedEnabled: Boolean;
                    isServiceForgetUserInformationCompletedEnabled: Boolean;
                    isServiceForgetUserInformationStartedEnabled: Boolean;
                    isServiceGetTicketCompletedEnabled: Boolean;
                    isServiceGetTicketErrorEnabled: Boolean;
                    isServiceGetTicketStartedEnabled: Boolean;
                    isServiceRefreshSignInCompletedEnabled: Boolean;
                    isServiceRefreshSignInStartedEnabled: Boolean;
                    isServiceSignInCompletedEnabled: Boolean;
                    isServiceSignInErrorEnabled: Boolean;
                    isServiceSignInStartedEnabled: Boolean;
                    isServiceSignOutCompletedEnabled: Boolean;
                    isServiceSignOutStartedEnabled: Boolean;
                    isServiceSubscriptionInfoCompletedEnabled: Boolean;
                    isServiceSubscriptionInfoStartedEnabled: Boolean;
                    isServiceUserChangedEnabled: Boolean;
                    isServiceUserProfileCompletedEnabled: Boolean;
                    isServiceUserProfilePropertyEnabled: Boolean;
                    isServiceUserProfileStartedEnabled: Boolean;
                    isServiceZestSignInCompletedEnabled: Boolean;
                    isServiceZestSignInStartedEnabled: Boolean;
                    isSubscriptionInfoPropertyEnabled: Boolean;
                    traceServiceSignInError(hresult: number): void;
                    traceServiceGetTicketStarted(message: string): void;
                    traceServiceGetTicketCompleted(message: string): void;
                    traceServiceGetTicketError(hresult: number): void;
                    traceServiceSignOutStarted(message: string): void;
                    traceServiceSignOutCompleted(message: string): void;
                    traceServiceZestSignInStarted(message: string): void;
                    traceServiceZestSignInCompleted(message: string): void;
                    traceServiceRefreshSignInStarted(): void;
                    traceServiceRefreshSignInCompleted(): void;
                    traceServiceAuthHeader(message: string): void;
                    traceServiceUserProfileProperty(name: string, value: string): void;
                    traceServiceUserProfileStarted(message: string): void;
                    traceServiceUserProfileCompleted(message: string): void;
                    traceFamilyUserProperty(name: string, value: string): void;
                    traceServiceFamilyUserStarted(message: string): void;
                    traceServiceFamilyUserCompleted(message: string): void;
                    traceSubscriptionInfoProperty(name: string, value: string): void;
                    traceServiceSubscriptionInfoStarted(message: string): void;
                    traceServiceSubscriptionInfoCompleted(message: string): void;
                    traceServiceUserChanged(message: string): void;
                    traceServiceForgetUserInformationStarted(message: string): void;
                    traceServiceForgetUserInformationCompleted(message: string): void;
                    traceServiceSignInStarted(message: string): void;
                    traceServiceSignInCompleted(message: string): void;
                    traceServiceAuthHeaderError(hresult: number): void;
                    tracePurchaseHistoryGrovelStarted(): void;
                    tracePurchaseHistoryGrovelCompleted(hresult: number): void;
                    tracePurchaseHistoryGrovelError(hresult: number): void;
                }
                export interface IServiceEventProviderTemplate {
                    eventEnabled(eventIndex: number): number;
                    traceTemplate_d(_MCGEN_EventIndex: number, hresult: number): void;
                    traceTemplate_z(_MCGEN_EventIndex: number, message: string): void;
                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void;
                    traceTemplate_zz(_MCGEN_EventIndex: number, name: string, value: string): void;
                }
                export interface IShell {
                    isAcceptTermsOfService_CancelEnabled: Boolean;
                    isAcceptTermsOfService_FinishEnabled: Boolean;
                    isAcceptTermsOfService_StartEnabled: Boolean;
                    isActionListControl_ItemAddedEnabled: Boolean;
                    isActionListControl_ItemRemovedEnabled: Boolean;
                    isActionListControl_ItemsChangedEnabled: Boolean;
                    isAction_InvokedEnabled: Boolean;
                    isAdControl_RefreshedEnabled: Boolean;
                    isAdService_AudioAdPlayedEnabled: Boolean;
                    isAdService_AudioAdPlayingEnabled: Boolean;
                    isAdService_AudioAdRefreshedEnabled: Boolean;
                    isAdService_AudioAdRefreshingEnabled: Boolean;
                    isAdService_InitializedEnabled: Boolean;
                    isAdService_StreamingTrackPlayedEnabled: Boolean;
                    isAdService_StreamingTrackPlayingEnabled: Boolean;
                    isAdService_TrackPlayingEnabled: Boolean;
                    isAdService_UnloadedEnabled: Boolean;
                    isAdService_VideoAdRefreshedEnabled: Boolean;
                    isAdService_VideoAdRefreshingEnabled: Boolean;
                    isAd_Companion_HiddenEnabled: Boolean;
                    isAd_Companion_ShownEnabled: Boolean;
                    isControlFramework_ControlCompleteInitializationDequeuedForRootEnabled: Boolean;
                    isControlFramework_ControlCompleteInitializationQueuedEnabled: Boolean;
                    isControlFramework_ControlCompleteInitializationQueuedForRootEnabled: Boolean;
                    isControlFramework_ControlCompleteInitializationRequeuedEnabled: Boolean;
                    isControlFramework_ControlConstructedEnabled: Boolean;
                    isControlFramework_ControlInitializationCompletedEnabled: Boolean;
                    isControlFramework_ControlInitializationStartedEnabled: Boolean;
                    isControlFramework_ControlTemplateLoadCompletedEnabled: Boolean;
                    isControlFramework_ControlTemplateLoadStartedEnabled: Boolean;
                    isControlFramework_TemplateLoadCompletedEnabled: Boolean;
                    isControlFramework_TemplateLoadCompletedFromCacheEnabled: Boolean;
                    isControlFramework_TemplateLoadFragmentCompletedEnabled: Boolean;
                    isControlFramework_TemplateLoadFragmentStartedEnabled: Boolean;
                    isControlFramework_TemplateLoadStartedEnabled: Boolean;
                    isControlFramework_TemplateLoadTemplateExtractedEnabled: Boolean;
                    isControlFramework_UserInitializationCompletedEnabled: Boolean;
                    isControlFramework_UserInitializationStartedEnabled: Boolean;
                    isCreateAccount_CancelEnabled: Boolean;
                    isCreateAccount_ErrorEnabled: Boolean;
                    isCreateAccount_FinishEnabled: Boolean;
                    isCreateAccount_StartEnabled: Boolean;
                    isDeepLink_Protocol_FailedEnabled: Boolean;
                    isDeepLink_Protocol_InvokedEnabled: Boolean;
                    isDeepLink_Tile_FailedEnabled: Boolean;
                    isDeepLink_Tile_InvokedEnabled: Boolean;
                    isDom_Content_LoadedEnabled: Boolean;
                    isFinish_ProcessAllEnabled: Boolean;
                    isGalleryControl_InLine_CloseEnabled: Boolean;
                    isGalleryControl_InLine_Open_EndEnabled: Boolean;
                    isGalleryControl_InLine_Open_ErrorEnabled: Boolean;
                    isGalleryControl_InLine_Open_StartEnabled: Boolean;
                    isGalleryControl_Load_EndEnabled: Boolean;
                    isGalleryControl_Load_StartEnabled: Boolean;
                    isGalleryControl_LoadingState_ChangedEnabled: Boolean;
                    isHomeHub_Load_EndEnabled: Boolean;
                    isHomeHub_Load_StartEnabled: Boolean;
                    isHomeHub_ReadyEnabled: Boolean;
                    isHubStrip_Load_EndEnabled: Boolean;
                    isHubStrip_Load_StartEnabled: Boolean;
                    isHubStrip_MoveToCompleteEnabled: Boolean;
                    isHubStrip_ReadyEnabled: Boolean;
                    isHub_Load_EndEnabled: Boolean;
                    isHub_Load_StartEnabled: Boolean;
                    isHub_ReadyEnabled: Boolean;
                    isJavascript_Load_EndEnabled: Boolean;
                    isJavascript_Load_StartEnabled: Boolean;
                    isLocation_ChangedEnabled: Boolean;
                    isMarketplaceBrowse_PageLoadStartEnabled: Boolean;
                    isMediaStateEngine_ActionsChangedEnabled: Boolean;
                    isMediaStateEngine_ButtonsChangedEnabled: Boolean;
                    isMediaStateEngine_InitializedEnabled: Boolean;
                    isMediaStateEngine_UnloadedEnabled: Boolean;
                    isMediaStateEngine_UpdateStateEnabled: Boolean;
                    isModifierControl_PopupClosedEnabled: Boolean;
                    isModifierControl_PopupOpenedEnabled: Boolean;
                    isModifierControl_SelectionChangedEnabled: Boolean;
                    isNavigable_Loading_DoneEnabled: Boolean;
                    isNavigation_StartedEnabled: Boolean;
                    isNotification_NotificationArrivedEnabled: Boolean;
                    isNotification_NotificationClickedEnabled: Boolean;
                    isNotification_PageSelectedEnabled: Boolean;
                    isOverlay_DismissedEnabled: Boolean;
                    isOverlay_ShownEnabled: Boolean;
                    isPanel_Load_EndEnabled: Boolean;
                    isPanel_Load_StartEnabled: Boolean;
                    isPanel_ReadyEnabled: Boolean;
                    isPerfTrack_Trigger_AlbumDetailsRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchCompletedEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchPlayNonProtectedContentEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchPlayProtectedContentEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchToCollectionCompletedEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchToExploreCompleteEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchToMoviesStoreEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchToOOBECompleteEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchToRadioCompleteEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchToShopBooksCompleteEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchToShopMagsCompleteEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchToTvStoreEnabled: Boolean;
                    isPerfTrack_Trigger_AppLaunchToVideoCollectionEnabled: Boolean;
                    isPerfTrack_Trigger_ArtistDetailsRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_BNDeviceRegistrationRequestSucceededEnabled: Boolean;
                    isPerfTrack_Trigger_BNLoginRequestSucceededEnabled: Boolean;
                    isPerfTrack_Trigger_BookDetailsRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_CategoryGalleryRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_CollectionGalleryRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_DevicesPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_ExplorePageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_FeaturedMoviesPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_FeaturedTvPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_FlexHubPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_IssuesGalleryRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_LastNightsTvPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_MagDetailsRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_MarketplaceGalleryRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_MovieDetailsRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_MoviesCollectionPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_MoviesStorePageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_NewMoviesPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_NewTvPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_NowPlayingPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_PersonalCollectionPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_PlayNonProtectedInAppPlaybackStartedEnabled: Boolean;
                    isPerfTrack_Trigger_PlayProtectedInAppPlaybackStartedEnabled: Boolean;
                    isPerfTrack_Trigger_PlaylistDetailsRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_PopoverRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_RadioPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_SearchAutoCompleteResultsReceivedEnabled: Boolean;
                    isPerfTrack_Trigger_SearchCatalogRequestToQueryResultsEnabled: Boolean;
                    isPerfTrack_Trigger_SearchGalleryRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_SearchLibraryRequestToQueryResultsEnabled: Boolean;
                    isPerfTrack_Trigger_ShopBooksPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_ShopMagsPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_StandardGalleryRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_TVDetailsRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_TopSellingMoviesPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_TopSellingTvPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_TvCollectionPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_TvStorePageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_VideoCollectionPageRequestToLoadEnabled: Boolean;
                    isPerfTrack_Trigger_WebBlendRequestToLoadEnabled: Boolean;
                    isPurchaseFlowGames_CancelEnabled: Boolean;
                    isPurchaseFlowGames_ErrorEnabled: Boolean;
                    isPurchaseFlowGames_FinishEnabled: Boolean;
                    isPurchaseFlowGames_RejectionEnabled: Boolean;
                    isPurchaseFlowGames_StartEnabled: Boolean;
                    isPurchaseFlowMusic_CancelEnabled: Boolean;
                    isPurchaseFlowMusic_ErrorEnabled: Boolean;
                    isPurchaseFlowMusic_FinishEnabled: Boolean;
                    isPurchaseFlowMusic_RejectionEnabled: Boolean;
                    isPurchaseFlowMusic_StartEnabled: Boolean;
                    isPurchaseFlowVideo_CancelEnabled: Boolean;
                    isPurchaseFlowVideo_DoneEnabled: Boolean;
                    isPurchaseFlowVideo_DownloadEnabled: Boolean;
                    isPurchaseFlowVideo_ErrorEnabled: Boolean;
                    isPurchaseFlowVideo_FinishEnabled: Boolean;
                    isPurchaseFlowVideo_RejectionEnabled: Boolean;
                    isPurchaseFlowVideo_StartEnabled: Boolean;
                    isPurchaseFlowVideo_Start_Bandwidth_TestEnabled: Boolean;
                    isPurchaseFlowVideo_StreamEnabled: Boolean;
                    isQueries_BeginEnabled: Boolean;
                    isQueries_CompleteEnabled: Boolean;
                    isSearch_CompletedEnabled: Boolean;
                    isSearch_StartEnabled: Boolean;
                    isServiceQuery_ParseCompleteEnabled: Boolean;
                    isServiceQuery_QueryReturnEnabled: Boolean;
                    isServiceQuery_QueryStartEnabled: Boolean;
                    isSettingsAbout_LaunchCompleteEnabled: Boolean;
                    isSettingsAbout_LaunchEnabled: Boolean;
                    isSettingsAccount_ErrorEnabled: Boolean;
                    isSettingsAccount_FinishEnabled: Boolean;
                    isSettingsAccount_LaunchCompleteEnabled: Boolean;
                    isSettingsAccount_LaunchEnabled: Boolean;
                    isSettingsCaptions_LaunchCompleteEnabled: Boolean;
                    isSettingsCaptions_LaunchEnabled: Boolean;
                    isSettingsFeedback_LaunchCompleteEnabled: Boolean;
                    isSettingsFeedback_LaunchEnabled: Boolean;
                    isSettingsHome_FinishEnabled: Boolean;
                    isSettingsHome_StartEnabled: Boolean;
                    isSettingsPopulate_EndEnabled: Boolean;
                    isSettingsPopulate_StartEnabled: Boolean;
                    isSettingsPreferences_LaunchCompleteEnabled: Boolean;
                    isSettingsPreferences_LaunchEnabled: Boolean;
                    isSettingsWinJSPopulate_StartEnabled: Boolean;
                    isSettings_BackToHomeEnabled: Boolean;
                    isShrinkAndStayHeader_DismissedEnabled: Boolean;
                    isShrinkAndStayHeader_ShownEnabled: Boolean;
                    isSignInResultEnabled: Boolean;
                    isSplashScreen_RemovedEnabled: Boolean;
                    isSubscriptionSignup_CancelEnabled: Boolean;
                    isSubscriptionSignup_ErrorEnabled: Boolean;
                    isSubscriptionSignup_FinishEnabled: Boolean;
                    isSubscriptionSignup_StartEnabled: Boolean;
                    isTest_Event_ErrorEnabled: Boolean;
                    isTest_Event_ResultEnabled: Boolean;
                    isTest_Event_TraceEnabled: Boolean;
                    isVideo_Ad_CompletedEnabled: Boolean;
                    isVideo_Ad_ErrorEnabled: Boolean;
                    isVideo_Ad_SkippedEnabled: Boolean;
                    isVideo_Ad_StartedEnabled: Boolean;
                    isVideo_Ad_UpSellEnabled: Boolean;
                    isWebExperience_CancelEnabled: Boolean;
                    isWebExperience_ErrorEnabled: Boolean;
                    isWebExperience_FinishEnabled: Boolean;
                    isWebExperience_PageLoadEnabled: Boolean;
                    isWebExperience_StartEnabled: Boolean;
                    isWinJSNavigation_ContentCompleteEnabled: Boolean;
                    traceNavigable_Loading_Done(moniker: string): void;
                    traceQueries_Begin(moniker: string): void;
                    traceQueries_Complete(moniker: string): void;
                    traceJavascript_Load_Start(): void;
                    traceSplashScreen_Removed(): void;
                    traceJavascript_Load_End(): void;
                    traceDom_Content_Loaded(): void;
                    traceFinish_ProcessAll(): void;
                    traceNavigation_Started(moniker: string): void;
                    traceLocation_Changed(pageMoniker: string, hubMoniker: string, panelMoniker: string): void;
                    traceOverlay_Shown(templateId: string): void;
                    traceOverlay_Dismissed(templateId: string): void;
                    traceAction_Invoked(actionId: string): void;
                    traceDeepLink_Protocol_Invoked(url: string): void;
                    traceDeepLink_Protocol_Failed(url: string): void;
                    traceDeepLink_Tile_Invoked(__arguments: string): void;
                    traceDeepLink_Tile_Failed(__arguments: string): void;
                    traceSearch_Start(): void;
                    traceSearch_Completed(): void;
                    traceWebExperience_Start(templateId: string): void;
                    traceWebExperience_Finish(templateId: string): void;
                    traceWebExperience_Cancel(templateId: string): void;
                    traceWebExperience_Error(templateId: string): void;
                    traceWebExperience_PageLoad(templateId: string): void;
                    traceTest_Event_Result(result: Boolean, message: string): void;
                    traceTest_Event_Trace(id: number, message: string): void;
                    traceTest_Event_Error(id: number, message: string): void;
                    traceHubStrip_Load_Start(moniker: string): void;
                    traceHubStrip_Load_End(moniker: string): void;
                    traceHub_Load_Start(moniker: string): void;
                    traceHub_Load_End(moniker: string): void;
                    tracePanel_Load_Start(moniker: string): void;
                    tracePanel_Load_End(moniker: string): void;
                    traceHubStrip_Ready(moniker: string): void;
                    traceHub_Ready(moniker: string): void;
                    tracePanel_Ready(moniker: string): void;
                    traceHubStrip_MoveToComplete(moniker: string): void;
                    traceCreateAccount_Start(templateId: string): void;
                    traceCreateAccount_Finish(templateId: string): void;
                    traceCreateAccount_Cancel(templateId: string): void;
                    traceCreateAccount_Error(templateId: string): void;
                    traceAcceptTermsOfService_Start(templateId: string): void;
                    traceAcceptTermsOfService_Finish(templateId: string): void;
                    traceAcceptTermsOfService_Cancel(templateId: string): void;
                    traceSignInResult(templateId: string): void;
                    traceSettingsHome_Start(templateId: string): void;
                    traceSettingsHome_Finish(templateId: string): void;
                    traceSettingsAccount_Launch(templateId: string): void;
                    traceSettingsAccount_Finish(templateId: string): void;
                    traceSettingsAccount_Error(templateId: string): void;
                    traceSettingsPreferences_Launch(templateId: string): void;
                    traceSettingsAbout_Launch(templateId: string): void;
                    traceSettingsFeedback_Launch(templateId: string): void;
                    traceSettingsCaptions_Launch(templateId: string): void;
                    traceSettingsPopulate_Start(templateId: string): void;
                    traceSettingsWinJSPopulate_Start(templateId: string): void;
                    traceSettingsPopulate_End(templateId: string): void;
                    tracePurchaseFlowGames_Start(templateId: string): void;
                    tracePurchaseFlowGames_Finish(templateId: string): void;
                    tracePurchaseFlowGames_Cancel(templateId: string): void;
                    tracePurchaseFlowGames_Error(templateId: string): void;
                    tracePurchaseFlowGames_Rejection(templateId: string): void;
                    traceMarketplaceBrowse_PageLoadStart(templateId: string): void;
                    traceServiceQuery_QueryStart(templateId: string): void;
                    traceServiceQuery_QueryReturn(templateId: string): void;
                    traceServiceQuery_ParseComplete(templateId: string): void;
                    traceSettingsAccount_LaunchComplete(templateId: string): void;
                    traceSettingsPreferences_LaunchComplete(templateId: string): void;
                    traceSettingsAbout_LaunchComplete(templateId: string): void;
                    traceSettings_BackToHome(templateId: string): void;
                    traceSettingsFeedback_LaunchComplete(templateId: string): void;
                    traceSettingsCaptions_LaunchComplete(templateId: string): void;
                    traceHomeHub_Load_Start(): void;
                    traceHomeHub_Load_End(): void;
                    traceHomeHub_Ready(): void;
                    tracePurchaseFlowMusic_Start(templateId: string): void;
                    tracePurchaseFlowMusic_Finish(templateId: string): void;
                    tracePurchaseFlowMusic_Cancel(templateId: string): void;
                    tracePurchaseFlowMusic_Error(templateId: string): void;
                    tracePurchaseFlowMusic_Rejection(templateId: string): void;
                    tracePurchaseFlowVideo_Start(templateId: string): void;
                    tracePurchaseFlowVideo_Finish(templateId: string): void;
                    tracePurchaseFlowVideo_Cancel(templateId: string): void;
                    tracePurchaseFlowVideo_Error(templateId: string): void;
                    tracePurchaseFlowVideo_Start_Bandwidth_Test(templateId: string): void;
                    tracePurchaseFlowVideo_Download(templateId: string): void;
                    tracePurchaseFlowVideo_Stream(templateId: string): void;
                    tracePurchaseFlowVideo_Done(templateId: string): void;
                    tracePurchaseFlowVideo_Rejection(templateId: string): void;
                    traceGalleryControl_Load_Start(): void;
                    traceGalleryControl_Load_End(): void;
                    traceGalleryControl_InLine_Open_Start(): void;
                    traceGalleryControl_InLine_Open_End(): void;
                    traceGalleryControl_InLine_Open_Error(): void;
                    traceGalleryControl_InLine_Close(): void;
                    traceGalleryControl_LoadingState_Changed(newState: string): void;
                    traceModifierControl_SelectionChanged(value: string, source: string): void;
                    traceModifierControl_PopupOpened(templateId: string): void;
                    traceModifierControl_PopupClosed(templateId: string): void;
                    traceActionListControl_ItemAdded(templateId: string): void;
                    traceActionListControl_ItemRemoved(templateId: string): void;
                    traceActionListControl_ItemsChanged(templateId: string): void;
                    traceControlFramework_ControlConstructed(templateId: string): void;
                    traceControlFramework_ControlCompleteInitializationQueued(templateId: string): void;
                    traceControlFramework_ControlCompleteInitializationRequeued(templateId: string): void;
                    traceControlFramework_ControlInitializationStarted(templateId: string): void;
                    traceControlFramework_UserInitializationStarted(templateId: string): void;
                    traceControlFramework_ControlTemplateLoadStarted(templateId: string): void;
                    traceControlFramework_ControlTemplateLoadCompleted(templateId: string): void;
                    traceControlFramework_TemplateLoadStarted(templateId: string): void;
                    traceControlFramework_TemplateLoadFragmentStarted(templateId: string): void;
                    traceControlFramework_TemplateLoadFragmentCompleted(templateId: string): void;
                    traceControlFramework_TemplateLoadTemplateExtracted(templateId: string): void;
                    traceControlFramework_TemplateLoadCompletedFromCache(templateId: string): void;
                    traceControlFramework_TemplateLoadCompleted(templateId: string): void;
                    traceControlFramework_ControlInitializationCompleted(templateId: string): void;
                    traceControlFramework_UserInitializationCompleted(templateId: string): void;
                    traceControlFramework_ControlCompleteInitializationQueuedForRoot(templateId: string): void;
                    traceControlFramework_ControlCompleteInitializationDequeuedForRoot(templateId: string): void;
                    traceSubscriptionSignup_Start(templateId: string): void;
                    traceSubscriptionSignup_Finish(templateId: string): void;
                    traceSubscriptionSignup_Cancel(templateId: string): void;
                    traceSubscriptionSignup_Error(templateId: string): void;
                    traceNotification_NotificationArrived(templateId: string): void;
                    traceNotification_PageSelected(templateId: string): void;
                    traceNotification_NotificationClicked(templateId: string): void;
                    traceAd_Companion_Shown(linkUrl: string, imageUrl: string): void;
                    traceAd_Companion_Hidden(linkUrl: string, imageUrl: string): void;
                    traceVideo_Ad_Started(videoUrl: string, clickUrl: string): void;
                    traceVideo_Ad_Completed(videoUrl: string, clickUrl: string): void;
                    traceVideo_Ad_Skipped(videoUrl: string, clickUrl: string): void;
                    traceVideo_Ad_Error(videoUrl: string, clickUrl: string): void;
                    traceVideo_Ad_UpSell(videoUrl: string, clickUrl: string): void;
                    traceAdControl_Refreshed(applicationId: string, unitId: string): void;
                    traceAdService_Initialized(): void;
                    traceAdService_Unloaded(): void;
                    traceAdService_AudioAdRefreshing(): void;
                    traceAdService_AudioAdRefreshed(): void;
                    traceAdService_VideoAdRefreshing(): void;
                    traceAdService_VideoAdRefreshed(): void;
                    traceAdService_AudioAdPlaying(): void;
                    traceAdService_AudioAdPlayed(): void;
                    traceAdService_StreamingTrackPlaying(): void;
                    traceAdService_StreamingTrackPlayed(): void;
                    traceAdService_TrackPlaying(): void;
                    traceMediaStateEngine_Initialized(mediaType: string, serviceId: string, libraryId: string): void;
                    traceMediaStateEngine_Unloaded(mediaType: string, serviceId: string, libraryId: string): void;
                    traceMediaStateEngine_UpdateState(mediaType: string, serviceId: string, libraryId: string): void;
                    traceMediaStateEngine_ButtonsChanged(mediaType: string, serviceId: string, libraryId: string): void;
                    traceMediaStateEngine_ActionsChanged(mediaType: string, serviceId: string, libraryId: string): void;
                    traceWinJSNavigation_ContentComplete(location: string): void;
                    traceShrinkAndStayHeader_Shown(): void;
                    traceShrinkAndStayHeader_Dismissed(): void;
                    tracePerfTrack_Trigger_AppLaunchCompleted(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchToCollectionCompleted(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchPlayNonProtectedContent(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchPlayProtectedContent(durationMsec: number): void;
                    tracePerfTrack_Trigger_PlayProtectedInAppPlaybackStarted(durationMsec: number): void;
                    tracePerfTrack_Trigger_PlayNonProtectedInAppPlaybackStarted(durationMsec: number): void;
                    tracePerfTrack_Trigger_CollectionGalleryRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_SearchGalleryRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_PopoverRequestToLoad(name: string, durationMsec: number): void;
                    tracePerfTrack_Trigger_MarketplaceGalleryRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_WebBlendRequestToLoad(url: string, durationMsec: number): void;
                    tracePerfTrack_Trigger_ExplorePageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_RadioPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchToExploreComplete(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchToRadioComplete(durationMsec: number): void;
                    tracePerfTrack_Trigger_TVDetailsRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_MovieDetailsRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_AlbumDetailsRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_ArtistDetailsRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_PlaylistDetailsRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_DevicesPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_NowPlayingPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_MoviesStorePageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_TvStorePageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_VideoCollectionPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_ShopBooksPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_ShopMagsPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchToShopBooksComplete(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchToShopMagsComplete(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchToOOBEComplete(durationMsec: number): void;
                    tracePerfTrack_Trigger_CategoryGalleryRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_IssuesGalleryRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_StandardGalleryRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_BookDetailsRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_MagDetailsRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_SearchLibraryRequestToQueryResults(durationMsec: number): void;
                    tracePerfTrack_Trigger_SearchCatalogRequestToQueryResults(durationMsec: number): void;
                    tracePerfTrack_Trigger_SearchAutoCompleteResultsReceived(durationMsec: number): void;
                    tracePerfTrack_Trigger_BNDeviceRegistrationRequestSucceeded(durationMsec: number): void;
                    tracePerfTrack_Trigger_BNLoginRequestSucceeded(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchToMoviesStore(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchToTvStore(durationMsec: number): void;
                    tracePerfTrack_Trigger_AppLaunchToVideoCollection(durationMsec: number): void;
                    tracePerfTrack_Trigger_MoviesCollectionPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_TvCollectionPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_PersonalCollectionPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_FeaturedMoviesPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_NewMoviesPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_TopSellingMoviesPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_FeaturedTvPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_NewTvPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_LastNightsTvPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_TopSellingTvPageRequestToLoad(durationMsec: number): void;
                    tracePerfTrack_Trigger_FlexHubPageRequestToLoad(durationMsec: number): void;
                }
                export interface IShellTemplate {
                    eventEnabled(eventIndex: number): number;
                    traceTemplate_z(_MCGEN_EventIndex: number, moniker: string): void;
                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void;
                    traceTemplate_zzz(_MCGEN_EventIndex: number, pageMoniker: string, hubMoniker: string, panelMoniker: string): void;
                    traceTemplate_tz(_MCGEN_EventIndex: number, result: Boolean, message: string): void;
                    traceTemplate_dz(_MCGEN_EventIndex: number, id: number, message: string): void;
                    traceTemplate_zz(_MCGEN_EventIndex: number, value: string, source: string): void;
                    traceTemplate_q(_MCGEN_EventIndex: number, durationMsec: number): void;
                    traceTemplate_zq(_MCGEN_EventIndex: number, name: string, durationMsec: number): void;
                }
                export interface ISocial {
                    isAvatarRendererFrameEndEnabled: Boolean;
                    isAvatarRendererFrameStartEnabled: Boolean;
                    isAvatarRendererShutdownEnabled: Boolean;
                    traceAvatarRendererFrameStart(id: string): void;
                    traceAvatarRendererFrameEnd(id: string, duration: number): void;
                    traceAvatarRendererShutdown(id: string): void;
                }
                export interface ISocialTemplate {
                    eventEnabled(eventIndex: number): number;
                    traceTemplate_z(_MCGEN_EventIndex: number, id: string): void;
                    traceTemplate_zf(_MCGEN_EventIndex: number, id: string, duration: number): void;
                }
                export interface ISyncEventProvider {
                    isCloudSync_CloudProvider_ApplyBatch_StartEnabled: Boolean;
                    isCloudSync_CloudProvider_ApplyBatch_StopEnabled: Boolean;
                    isCloudSync_CloudProvider_ApplyItem_ErrorEnabled: Boolean;
                    isCloudSync_CloudProvider_ApplyItem_SkippedEnabled: Boolean;
                    isCloudSync_CloudProvider_ContentChangedEnabled: Boolean;
                    isCloudSync_CloudProvider_FindChangesEnabled: Boolean;
                    isCloudSync_CloudProvider_FoundChangeEnabled: Boolean;
                    isCloudSync_CloudProvider_IsAvailableEnabled: Boolean;
                    isCloudSync_CloudProvider_IsDirtyEnabled: Boolean;
                    isCloudSync_CloudProvider_LoadItem_ErrorEnabled: Boolean;
                    isCloudSync_CloudProvider_TakeDownEnabled: Boolean;
                    isCloudSync_CloudProvider_UpdateMetadata_StartEnabled: Boolean;
                    isCloudSync_CloudProvider_UpdateMetadata_StopEnabled: Boolean;
                    isCloudSync_Engine_BlockSync_StartEnabled: Boolean;
                    isCloudSync_Engine_BlockSync_StopEnabled: Boolean;
                    isCloudSync_Engine_CancelSyncEnabled: Boolean;
                    isCloudSync_Engine_NotificationEnabled: Boolean;
                    isCloudSync_Engine_RequestSyncEnabled: Boolean;
                    isCloudSync_Engine_ScheduleSyncEnabled: Boolean;
                    isCloudSync_Engine_SyncEndEnabled: Boolean;
                    isCloudSync_Engine_SyncErrorEnabled: Boolean;
                    isCloudSync_Engine_Sync_StartEnabled: Boolean;
                    isCloudSync_Engine_Sync_StopEnabled: Boolean;
                    isCloudSync_LibraryProvider_AddItemEnabled: Boolean;
                    isCloudSync_LibraryProvider_ContentChangedEnabled: Boolean;
                    isCloudSync_LibraryProvider_DeleteItemEnabled: Boolean;
                    isCloudSync_LibraryProvider_DeletedItemsEnabled: Boolean;
                    isCloudSync_LibraryProvider_DirtyItemsEnabled: Boolean;
                    isCloudSync_LibraryProvider_InvalidItemsEnabled: Boolean;
                    isCloudSync_LibraryProvider_IsAvailableEnabled: Boolean;
                    isCloudSync_LibraryProvider_IsDirtyEnabled: Boolean;
                    isCloudSync_LibraryProvider_LoadItemEnabled: Boolean;
                    isCloudSync_LibraryProvider_UpdateItemEnabled: Boolean;
                    isCloudSync_LibraryProvider_UpdateMetadata_StartEnabled: Boolean;
                    isCloudSync_LibraryProvider_UpdateMetadata_StopEnabled: Boolean;
                    traceCloudSync_Engine_Sync_Start(requestSyncOption: number): void;
                    traceCloudSync_Engine_Sync_Stop(hresult: number): void;
                    traceCloudSync_Engine_BlockSync_Start(): void;
                    traceCloudSync_Engine_BlockSync_Stop(): void;
                    traceCloudSync_Engine_RequestSync(requestSyncOption: number, cookieNextCompleteSync: number): void;
                    traceCloudSync_Engine_SyncError(hresult: number): void;
                    traceCloudSync_Engine_SyncEnd(hresult: number, changes: Boolean, cookieCompleteSync: number): void;
                    traceCloudSync_Engine_ScheduleSync(delayTimeMS: number): void;
                    traceCloudSync_Engine_CancelSync(hresult: number): void;
                    traceCloudSync_Engine_Notification(syncPointId: string): void;
                    traceCloudSync_LibraryProvider_LoadItem(syncType: number, mediaId: number): void;
                    traceCloudSync_LibraryProvider_AddItem(syncType: number, mediaId: number): void;
                    traceCloudSync_LibraryProvider_UpdateItem(syncType: number, mediaIdIn: number, mediaIdOut: number): void;
                    traceCloudSync_LibraryProvider_DeleteItem(syncType: number, mediaId: number): void;
                    traceCloudSync_LibraryProvider_DirtyItems(syncType: number, dirtyItems: string): void;
                    traceCloudSync_LibraryProvider_DeletedItems(syncType: number, deletedItems: string): void;
                    traceCloudSync_LibraryProvider_InvalidItems(syncType: number, invalidItems: string): void;
                    traceCloudSync_LibraryProvider_IsDirty(isDirty: Boolean): void;
                    traceCloudSync_LibraryProvider_IsAvailable(isAvailable: Boolean): void;
                    traceCloudSync_LibraryProvider_ContentChanged(notifyDelayMS: number): void;
                    traceCloudSync_LibraryProvider_UpdateMetadata_Start(): void;
                    traceCloudSync_LibraryProvider_UpdateMetadata_Stop(): void;
                    traceCloudSync_CloudProvider_ApplyItem_Error(syncType: number, cloudId: string, hresult: number): void;
                    traceCloudSync_CloudProvider_ApplyItem_Skipped(syncType: number, cloudId: string): void;
                    traceCloudSync_CloudProvider_LoadItem_Error(syncType: number, cloudId: string, hresult: number): void;
                    traceCloudSync_CloudProvider_IsDirty(isDirty: Boolean, dirtyReason: number): void;
                    traceCloudSync_CloudProvider_IsAvailable(availability: number): void;
                    traceCloudSync_CloudProvider_ContentChanged(): void;
                    traceCloudSync_CloudProvider_FindChanges(anchor: string, requestedBatchSize: number, hasMoreData: Boolean): void;
                    traceCloudSync_CloudProvider_FoundChange(syncType: number, cloudId: string, changeType: number): void;
                    traceCloudSync_CloudProvider_TakeDown(cloudId: string): void;
                    traceCloudSync_CloudProvider_UpdateMetadata_Start(): void;
                    traceCloudSync_CloudProvider_UpdateMetadata_Stop(): void;
                    traceCloudSync_CloudProvider_ApplyBatch_Start(): void;
                    traceCloudSync_CloudProvider_ApplyBatch_Stop(): void;
                }
                export interface ISyncEventProviderTemplate {
                    eventEnabled(eventIndex: number): number;
                    traceTemplate_q(_MCGEN_EventIndex: number, requestSyncOption: number): void;
                    traceTemplate_d(_MCGEN_EventIndex: number, hresult: number): void;
                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void;
                    traceTemplate_qq(_MCGEN_EventIndex: number, requestSyncOption: number, cookieNextCompleteSync: number): void;
                    traceTemplate_dtq(_MCGEN_EventIndex: number, hresult: number, changes: Boolean, cookieCompleteSync: number): void;
                    traceTemplate_z(_MCGEN_EventIndex: number, syncPointId: string): void;
                    traceTemplate_qd(_MCGEN_EventIndex: number, syncType: number, mediaId: number): void;
                    traceTemplate_qdd(_MCGEN_EventIndex: number, syncType: number, mediaIdIn: number, mediaIdOut: number): void;
                    traceTemplate_qz(_MCGEN_EventIndex: number, syncType: number, dirtyItems: string): void;
                    traceTemplate_t(_MCGEN_EventIndex: number, isDirty: Boolean): void;
                    traceTemplate_qzd(_MCGEN_EventIndex: number, syncType: number, cloudId: string, hresult: number): void;
                    traceTemplate_tq(_MCGEN_EventIndex: number, isDirty: Boolean, dirtyReason: number): void;
                    traceTemplate_zqt(_MCGEN_EventIndex: number, anchor: string, requestedBatchSize: number, hasMoreData: Boolean): void;
                    traceTemplate_qzq(_MCGEN_EventIndex: number, syncType: number, cloudId: string, changeType: number): void;
                }
                export interface IXbox {
                    isXboxAcquireExclusiveModeBeginEnabled: Boolean;
                    isXboxAcquireExclusiveModeDoneEnabled: Boolean;
                    isXboxAcquireExclusiveModeErrorEnabled: Boolean;
                    isXboxBogusMediaStateMessageIgnoredEnabled: Boolean;
                    isXboxControlCommandErrorEnabled: Boolean;
                    isXboxControlCommandSentEnabled: Boolean;
                    isXboxControlSeekCommandErrorEnabled: Boolean;
                    isXboxControlSeekCommandSentEnabled: Boolean;
                    isXboxDisconnectSessionBeginEnabled: Boolean;
                    isXboxDisconnectSessionDoneEnabled: Boolean;
                    isXboxDisconnectSessionErrorEnabled: Boolean;
                    isXboxEstablishTitleChannelBeginEnabled: Boolean;
                    isXboxEstablishTitleChannelDoneEnabled: Boolean;
                    isXboxEstablishTitleChannelErrorEnabled: Boolean;
                    isXboxGetActiveTitleInformationBeginEnabled: Boolean;
                    isXboxGetActiveTitleInformationDoneEnabled: Boolean;
                    isXboxGetActiveTitleInformationErrorEnabled: Boolean;
                    isXboxGetKeyboardBeginEnabled: Boolean;
                    isXboxGetKeyboardDoneEnabled: Boolean;
                    isXboxGetKeyboardErrorEnabled: Boolean;
                    isXboxGetKeyboardStateBeginEnabled: Boolean;
                    isXboxGetKeyboardStateDoneEnabled: Boolean;
                    isXboxGetKeyboardStateErrorEnabled: Boolean;
                    isXboxGetKeyboardTextBeginEnabled: Boolean;
                    isXboxGetKeyboardTextDoneEnabled: Boolean;
                    isXboxGetKeyboardTextErrorEnabled: Boolean;
                    isXboxGetMediaStateErrorEnabled: Boolean;
                    isXboxHeartBeatPingErrorEnabled: Boolean;
                    isXboxHideXboxControlsEnabled: Boolean;
                    isXboxLaunchTitleCallEnabled: Boolean;
                    isXboxLocalTransportStateChangedEnabled: Boolean;
                    isXboxNewSessionObjectAssignedEnabled: Boolean;
                    isXboxOnlinePresenceBeginEnabled: Boolean;
                    isXboxOnlinePresenceErrorEnabled: Boolean;
                    isXboxOnlinePresenceReceivedEnabled: Boolean;
                    isXboxReleaseExclusiveModeBeginEnabled: Boolean;
                    isXboxReleaseExclusiveModeDoneEnabled: Boolean;
                    isXboxReleaseExclusiveModeErrorEnabled: Boolean;
                    isXboxSendTitleMessageBeginEnabled: Boolean;
                    isXboxSendTitleMessageDoneEnabled: Boolean;
                    isXboxSendTitleMessageErrorEnabled: Boolean;
                    isXboxSendTouchPointsBeginEnabled: Boolean;
                    isXboxSendTouchPointsDoneEnabled: Boolean;
                    isXboxSendTouchPointsErrorEnabled: Boolean;
                    isXboxSessionConnectCallEnabled: Boolean;
                    isXboxSessionObjectReassignedEnabled: Boolean;
                    isXboxSessionObjectResetToNullEnabled: Boolean;
                    isXboxSessionStateChangeEnabled: Boolean;
                    isXboxSessionStatusChangedEnabled: Boolean;
                    isXboxSetKeyboardTextAndSelectionBeginEnabled: Boolean;
                    isXboxSetKeyboardTextAndSelectionDoneEnabled: Boolean;
                    isXboxSetKeyboardTextAndSelectionErrorEnabled: Boolean;
                    isXboxSetKeyboardTextBeginEnabled: Boolean;
                    isXboxSetKeyboardTextDoneEnabled: Boolean;
                    isXboxSetKeyboardTextErrorEnabled: Boolean;
                    isXboxShowXboxControlsEnabled: Boolean;
                    isXboxShowXboxControlsSetVisibleEnabled: Boolean;
                    isXboxSigninJoinSessionEnabled: Boolean;
                    isXboxSigninNoUserSessionsEnabled: Boolean;
                    isXboxSigninTMFServiceSigninEnabled: Boolean;
                    isXboxSigninX8AppSigninEnabled: Boolean;
                    isXboxStreamingModeChangedEnabled: Boolean;
                    isXboxTitleChangedEnabled: Boolean;
                    isXboxTitleChannelStatusChangedEnabled: Boolean;
                    isXboxTitleMessagingConfigChangedEnabled: Boolean;
                    isXboxTransportControlsLRCStateChangeEnabled: Boolean;
                    traceXboxSessionStateChange(newState: string, oldState: string): void;
                    traceXboxTransportControlsLRCStateChange(newState: string, oldState: string): void;
                    traceXboxSigninTMFServiceSignin(tag: string, hresult: number, errorText: string): void;
                    traceXboxSigninJoinSession(tag: string, hresult: number, errorText: string): void;
                    traceXboxSigninX8AppSignin(tag: string, hresult: number, errorText: string): void;
                    traceXboxSigninNoUserSessions(tag: string, hresult: number, errorText: string): void;
                    traceXboxControlCommandSent(controlKey: number, executionTimeMilliseconds: number): void;
                    traceXboxControlCommandError(controlKey: number, executionTimeMilliseconds: number, responseCode: number): void;
                    traceXboxControlSeekCommandSent(seekPosition: number, executionTimeMilliseconds: number): void;
                    traceXboxControlSeekCommandError(seekPosition: number, executionTimeMilliseconds: number, responseCode: number): void;
                    traceXboxBogusMediaStateMessageIgnored(position: number, transportState: number, positionBeforeLastSeek: number, lastSeekPosition: number): void;
                    traceXboxGetMediaStateError(executionTimeMilliseconds: number, responseCode: number): void;
                    traceXboxShowXboxControls(): void;
                    traceXboxShowXboxControlsSetVisible(): void;
                    traceXboxHideXboxControls(): void;
                    traceXboxOnlinePresenceBegin(): void;
                    traceXboxOnlinePresenceReceived(titleId: number, mediaAssetId: string): void;
                    traceXboxOnlinePresenceError(hresult: number, errorMessage: string): void;
                    traceXboxGetActiveTitleInformationBegin(): void;
                    traceXboxGetActiveTitleInformationDone(): void;
                    traceXboxGetActiveTitleInformationError(hresult: number, errorMessage: string): void;
                    traceXboxEstablishTitleChannelBegin(): void;
                    traceXboxEstablishTitleChannelDone(): void;
                    traceXboxEstablishTitleChannelError(hresult: number, errorMessage: string): void;
                    traceXboxSendTouchPointsBegin(): void;
                    traceXboxSendTouchPointsDone(): void;
                    traceXboxSendTouchPointsError(hresult: number, errorMessage: string): void;
                    traceXboxGetKeyboardBegin(): void;
                    traceXboxGetKeyboardDone(): void;
                    traceXboxGetKeyboardError(hresult: number, errorMessage: string): void;
                    traceXboxGetKeyboardStateBegin(): void;
                    traceXboxGetKeyboardStateDone(): void;
                    traceXboxGetKeyboardStateError(hresult: number, errorMessage: string): void;
                    traceXboxGetKeyboardTextBegin(): void;
                    traceXboxGetKeyboardTextDone(): void;
                    traceXboxGetKeyboardTextError(hresult: number, errorMessage: string): void;
                    traceXboxSetKeyboardTextBegin(text: string): void;
                    traceXboxSetKeyboardTextDone(): void;
                    traceXboxSetKeyboardTextError(hresult: number, errorMessage: string): void;
                    traceXboxSetKeyboardTextAndSelectionBegin(text: string, selectionStart: number, selectionLength: number): void;
                    traceXboxSetKeyboardTextAndSelectionDone(): void;
                    traceXboxSetKeyboardTextAndSelectionError(hresult: number, errorMessage: string): void;
                    traceXboxSendTitleMessageBegin(): void;
                    traceXboxSendTitleMessageDone(): void;
                    traceXboxSendTitleMessageError(hresult: number, errorMessage: string): void;
                    traceXboxDisconnectSessionBegin(): void;
                    traceXboxDisconnectSessionDone(): void;
                    traceXboxDisconnectSessionError(hresult: number, errorMessage: string): void;
                    traceXboxNewSessionObjectAssigned(): void;
                    traceXboxSessionObjectReassigned(): void;
                    traceXboxSessionObjectResetToNull(): void;
                    traceXboxTitleChanged(titleId: number): void;
                    traceXboxTitleMessagingConfigChanged(titleId: number, titlePort: number, enabled: Boolean): void;
                    traceXboxTitleChannelStatusChanged(status: number, titleId: number, titlePort: number, hresult: number): void;
                    traceXboxStreamingModeChanged(clientExclusiveModeStatus: number, consoleExclusiveModeStatus: number): void;
                    traceXboxLocalTransportStateChanged(localTransportConnected: Boolean): void;
                    traceXboxSessionStatusChanged(sessionState: number): void;
                    traceXboxAcquireExclusiveModeBegin(): void;
                    traceXboxAcquireExclusiveModeDone(): void;
                    traceXboxAcquireExclusiveModeError(hresult: number, errorMessage: string): void;
                    traceXboxHeartBeatPingError(hresult: number, errorMessage: string, sessionState: string, isCurrentWinRTSessionReassigned: Boolean, isCurrentWinRTSessionNull: Boolean): void;
                    traceXboxSessionConnectCall(sessionState: string, isRetry: Boolean): void;
                    traceXboxLaunchTitleCall(titleId: number, startTimeMilliseconds: number, firstAction: string): void;
                    traceXboxReleaseExclusiveModeBegin(): void;
                    traceXboxReleaseExclusiveModeDone(): void;
                    traceXboxReleaseExclusiveModeError(hresult: number, errorMessage: string): void;
                }
                export interface IXboxTemplate {
                    eventEnabled(eventIndex: number): number;
                    traceTemplate_zz(_MCGEN_EventIndex: number, newState: string, oldState: string): void;
                    traceTemplate_zdz(_MCGEN_EventIndex: number, tag: string, hresult: number, errorText: string): void;
                    traceTemplate_qf(_MCGEN_EventIndex: number, controlKey: number, executionTimeMilliseconds: number): void;
                    traceTemplate_qfq(_MCGEN_EventIndex: number, controlKey: number, executionTimeMilliseconds: number, responseCode: number): void;
                    traceTemplate_xf(_MCGEN_EventIndex: number, seekPosition: number, executionTimeMilliseconds: number): void;
                    traceTemplate_xfq(_MCGEN_EventIndex: number, seekPosition: number, executionTimeMilliseconds: number, responseCode: number): void;
                    traceTemplate_xqxx(_MCGEN_EventIndex: number, position: number, transportState: number, positionBeforeLastSeek: number, lastSeekPosition: number): void;
                    traceTemplate_fq(_MCGEN_EventIndex: number, executionTimeMilliseconds: number, responseCode: number): void;
                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void;
                    traceTemplate_qz(_MCGEN_EventIndex: number, titleId: number, mediaAssetId: string): void;
                    traceTemplate_dz(_MCGEN_EventIndex: number, hresult: number, errorMessage: string): void;
                    traceTemplate_z(_MCGEN_EventIndex: number, text: string): void;
                    traceTemplate_zqq(_MCGEN_EventIndex: number, text: string, selectionStart: number, selectionLength: number): void;
                    traceTemplate_q(_MCGEN_EventIndex: number, titleId: number): void;
                    traceTemplate_qqt(_MCGEN_EventIndex: number, titleId: number, titlePort: number, enabled: Boolean): void;
                    traceTemplate_qqqd(_MCGEN_EventIndex: number, status: number, titleId: number, titlePort: number, hresult: number): void;
                    traceTemplate_qq(_MCGEN_EventIndex: number, clientExclusiveModeStatus: number, consoleExclusiveModeStatus: number): void;
                    traceTemplate_t(_MCGEN_EventIndex: number, localTransportConnected: Boolean): void;
                    traceTemplate_dzztt(_MCGEN_EventIndex: number, hresult: number, errorMessage: string, sessionState: string, isCurrentWinRTSessionReassigned: Boolean, isCurrentWinRTSessionNull: Boolean): void;
                    traceTemplate_zt(_MCGEN_EventIndex: number, sessionState: string, isRetry: Boolean): void;
                    traceTemplate_qfz(_MCGEN_EventIndex: number, titleId: number, startTimeMilliseconds: number, firstAction: string): void;
                }
                export class LegacyPerfTrace implements ILegacyPerfTrace {
                    // constructor();
                    isLegacyPerfTraceClientEventEnabled: Boolean;
                    isLegacyPerfTraceCollectionEventEnabled: Boolean;
                    isLegacyPerfTraceDBMutexEventEnabled: Boolean;
                    isLegacyPerfTraceDownloadEventEnabled: Boolean;
                    isLegacyPerfTraceDriverEventEnabled: Boolean;
                    isLegacyPerfTraceGenericEventEnabled: Boolean;
                    isLegacyPerfTraceHttpEventEnabled: Boolean;
                    isLegacyPerfTraceLaunchEventEnabled: Boolean;
                    isLegacyPerfTraceQRSEventEnabled: Boolean;
                    isLegacyPerfTraceQuickMixEventEnabled: Boolean;
                    isLegacyPerfTraceSyncEventEnabled: Boolean;
                    isLegacyPerfTraceWMPPlaybackEventEnabled: Boolean;

                    traceLegacyPerfTraceHttpEvent(httpEvent: number, url: string): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceHttpEvent');
                    }

                    traceLegacyPerfTraceClientEvent(reporterTag: number, actionType: number, reason: number): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceClientEvent');
                    }

                    traceLegacyPerfTraceWMPPlaybackEvent(type: number, fileName: string, graphType: number, lastHR: number): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceWMPPlaybackEvent');
                    }

                    traceLegacyPerfTraceDBMutexEvent(dbmutexEvent: number, threadId: number, time: number): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceDBMutexEvent');
                    }

                    traceLegacyPerfTraceLaunchEvent(launchEvent: number, launchEventData: number): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceLaunchEvent');
                    }

                    traceLegacyPerfTraceSyncEvent(syncEvent: number, syncEventData: number): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceSyncEvent');
                    }

                    traceLegacyPerfTraceQRSEvent(qrsevent: number, qrseventData: number): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceQRSEvent');
                    }

                    traceLegacyPerfTraceGenericEvent(reporterTag: number, type: number, action: number): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceGenericEvent');
                    }

                    traceLegacyPerfTraceDriverEvent(driverEvent: number, driverEventData: number): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceDriverEvent');
                    }

                    traceLegacyPerfTraceCollectionEvent(collectionEvent: number, detail: string): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceCollectionEvent');
                    }

                    traceLegacyPerfTraceQuickMixEvent(quickMixEvent: number, quickMixEventData: number): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceQuickMixEvent');
                    }

                    traceLegacyPerfTraceDownloadEvent(downloadEvent: number, id: string): void {
                        console.warn('shimmed function LegacyPerfTrace.traceLegacyPerfTraceDownloadEvent');
                    }

                }
                export class LegacyPerfTraceTemplate implements ILegacyPerfTraceTemplate {
                    // constructor();
                    eventEnabled(eventIndex: number): number {
                        throw new Error('shimmed function LegacyPerfTraceTemplate.eventEnabled');
                    }

                    traceTemplate_qz(_MCGEN_EventIndex: number, httpEvent: number, url: string): void {
                        console.warn('shimmed function LegacyPerfTraceTemplate.traceTemplate_qz');
                    }

                    traceTemplate_qqq(_MCGEN_EventIndex: number, reporterTag: number, actionType: number, reason: number): void {
                        console.warn('shimmed function LegacyPerfTraceTemplate.traceTemplate_qqq');
                    }

                    traceTemplate_qzqd(_MCGEN_EventIndex: number, type: number, fileName: string, graphType: number, lastHR: number): void {
                        console.warn('shimmed function LegacyPerfTraceTemplate.traceTemplate_qzqd');
                    }

                    traceTemplate_qq(_MCGEN_EventIndex: number, launchEvent: number, launchEventData: number): void {
                        console.warn('shimmed function LegacyPerfTraceTemplate.traceTemplate_qq');
                    }

                }
                export class Library implements ILibrary {
                    // constructor();
                    isBackgroundWorkLock_AcquiredEnabled: Boolean = false;
                    isBackgroundWorkLock_ReleasedEnabled: Boolean = false;
                    isBackgroundWorkLock_RequestedEnabled: Boolean = false;
                    isCollectionBuildingBeginEnabled: Boolean = false;
                    isCollectionBuildingCloudCollectionV2FirstTrackAddedEnabled: Boolean = false;
                    isCollectionBuildingEndEnabled: Boolean = false;
                    isCollectionBuildingMDLCProgressEnabled: Boolean = false;
                    isCollectionBuildingMediaSyncedEnabled: Boolean = false;
                    isCollectionBuildingMissingMetadataEnabled: Boolean = false;
                    isCollectionBuildingProgressEnabled: Boolean = false;
                    isDatabaseCloseCompletedEnabled: Boolean = false;
                    isDatabaseCloseStartedEnabled: Boolean = false;
                    isDatabaseOpenCompletedEnabled: Boolean = false;
                    isDatabaseOpenStartedEnabled: Boolean = false;
                    isDbCleanupOnUserSignedOutCompletedEnabled: Boolean = false;
                    isDbCleanupOnUserSignedOutStartedEnabled: Boolean = false;
                    isEasyTransferAddingPathsEnabled: Boolean = false;
                    isEasyTransferBeginImportingMetadataEnabled: Boolean = false;
                    isEasyTransferBeginImportingPlaylistsEnabled: Boolean = false;
                    isEasyTransferCompleteEnabled: Boolean = false;
                    isEasyTransferCompletedImportingMetadataEnabled: Boolean = false;
                    isEasyTransferCompletedImportingPlaylistsEnabled: Boolean = false;
                    isEasyTransferConfigParseFailedEnabled: Boolean = false;
                    isEasyTransferConfigParseSucceededEnabled: Boolean = false;
                    isEasyTransferFailedToLocateMediaItemEnabled: Boolean = false;
                    isEasyTransferFoundConfigEnabled: Boolean = false;
                    isEasyTransferImportedMetadataEnabled: Boolean = false;
                    isEasyTransferImportedPlaylistEnabled: Boolean = false;
                    isEasyTransferIterationCompleteEnabled: Boolean = false;
                    isEasyTransferIterationFailedEnabled: Boolean = false;
                    isEasyTransferIterationStartedEnabled: Boolean = false;
                    isEasyTransferLocatedMediaItemEnabled: Boolean = false;
                    isEasyTransferLocatingMediaItemEnabled: Boolean = false;
                    isEasyTransferMatchedByFileUrlEnabled: Boolean = false;
                    isEasyTransferNoConfigEnabled: Boolean = false;
                    isEasyTransferNoPathsToAddEnabled: Boolean = false;
                    isEasyTransferParseErrorEnabled: Boolean = false;
                    isEasyTransferParsingConfigEnabled: Boolean = false;
                    isEasyTransferStateChangeEnabled: Boolean = false;
                    isFileProcessedEnabled: Boolean = false;
                    isFingerprintComputedEnabled: Boolean = false;
                    isFingerprintGeneration_EndOfStreamReachedEnabled: Boolean = false;
                    isFingerprintGeneration_FingerprintRetrievedEnabled: Boolean = false;
                    isFingerprintGeneration_InternalErrorEnabled: Boolean = false;
                    isFingerprintGeneration_SourceReaderErrorEnabled: Boolean = false;
                    isFingerprintIdFoundEnabled: Boolean = false;
                    isFingerprintingCompleteEnabled: Boolean = false;
                    isFingerprintingStartedEnabled: Boolean = false;
                    isGetImmediateFingerprintsCompleteEnabled: Boolean = false;
                    isGetImmediateFingerprintsStartEnabled: Boolean = false;
                    isGrovelerAddFileEnabled: Boolean = false;
                    isGrovelerAdditionScanCompletedEnabled: Boolean = false;
                    isGrovelerAdditionScanStartedEnabled: Boolean = false;
                    isGrovelerDefinitionChangedNotificationReceivedEnabled: Boolean = false;
                    isGrovelerDeleteScanCompletedEnabled: Boolean = false;
                    isGrovelerDeleteScanStartedEnabled: Boolean = false;
                    isGrovelerFullScanSkippedEnabled: Boolean = false;
                    isGrovelerGetEmptyItemListEnabled: Boolean = false;
                    isGrovelerGetFilesAsyncRetryEnabled: Boolean = false;
                    isGrovelerGetResultsErrorEnabled: Boolean = false;
                    isGrovelerIsQuickGrovelNeededEnabled: Boolean = false;
                    isGrovelerMasterRatingFileDirtySetEnabled: Boolean = false;
                    isGrovelerNetworkConnectedEnabled: Boolean = false;
                    isGrovelerNetworkShareAccessedEnabled: Boolean = false;
                    isGrovelerNotificationReceivedEnabled: Boolean = false;
                    isGrovelerPlaylistScanCompletedEnabled: Boolean = false;
                    isGrovelerPlaylistScanStartedEnabled: Boolean = false;
                    isGrovelerQueryIndexerDiffEnabled: Boolean = false;
                    isGrovelerQuickScanCompletedEnabled: Boolean = false;
                    isGrovelerQuickScanStartedEnabled: Boolean = false;
                    isGrovelerReadMasterRatingFileCompletedEnabled: Boolean = false;
                    isGrovelerReadMasterRatingFileStartedEnabled: Boolean = false;
                    isGrovelerReadMasterRatingFileTriggeredEnabled: Boolean = false;
                    isGrovelerRefreshLicenseCompletedEnabled: Boolean = false;
                    isGrovelerRefreshLicenseStartedEnabled: Boolean = false;
                    isGrovelerRetriesExhaustedEnabled: Boolean = false;
                    isGrovelerScanCompletedEnabled: Boolean = false;
                    isGrovelerScanStartedEnabled: Boolean = false;
                    isGrovelerSecondScanCompletedEnabled: Boolean = false;
                    isGrovelerSecondScanStartedEnabled: Boolean = false;
                    isGrovelerSetFileAvailableEnabled: Boolean = false;
                    isGrovelerSetFileUnavailableEnabled: Boolean = false;
                    isGrovelerTopLevelFolderAddedEnabled: Boolean = false;
                    isGrovelerWaitForCompletionRetryEnabled: Boolean = false;
                    isGrovelerWriteMasterRatingFileCompletedEnabled: Boolean = false;
                    isGrovelerWriteMasterRatingFileStartedEnabled: Boolean = false;
                    isGrovelerWriteMasterRatingFileTriggeredEnabled: Boolean = false;
                    isImmediateFingerprintRetrievedEnabled: Boolean = false;
                    isMDLCCompletedEnabled: Boolean = false;
                    isMDLCStartedEnabled: Boolean = false;
                    isPlaylistIOCompletedEnabled: Boolean = false;
                    isPlaylistIOStartedEnabled: Boolean = false;
                    isProcessRemainingFilesCompleteEnabled: Boolean = false;
                    isProcessRemainingFilesStartedEnabled: Boolean = false;
                    isQueryCompletedEnabled: Boolean = false;
                    isQueryStartedEnabled: Boolean = false;

                    traceEasyTransferIterationStarted(): void {
                        console.warn('shimmed function Library.traceEasyTransferIterationStarted');
                    }

                    traceEasyTransferFoundConfig(): void {
                        console.warn('shimmed function Library.traceEasyTransferFoundConfig');
                    }

                    traceEasyTransferNoConfig(): void {
                        console.warn('shimmed function Library.traceEasyTransferNoConfig');
                    }

                    traceEasyTransferParsingConfig(): void {
                        console.warn('shimmed function Library.traceEasyTransferParsingConfig');
                    }

                    traceEasyTransferConfigParseFailed(): void {
                        console.warn('shimmed function Library.traceEasyTransferConfigParseFailed');
                    }

                    traceEasyTransferConfigParseSucceeded(): void {
                        console.warn('shimmed function Library.traceEasyTransferConfigParseSucceeded');
                    }

                    traceEasyTransferAddingPaths(): void {
                        console.warn('shimmed function Library.traceEasyTransferAddingPaths');
                    }

                    traceEasyTransferNoPathsToAdd(): void {
                        console.warn('shimmed function Library.traceEasyTransferNoPathsToAdd');
                    }

                    traceEasyTransferBeginImportingMetadata(): void {
                        console.warn('shimmed function Library.traceEasyTransferBeginImportingMetadata');
                    }

                    traceEasyTransferCompletedImportingMetadata(): void {
                        console.warn('shimmed function Library.traceEasyTransferCompletedImportingMetadata');
                    }

                    traceEasyTransferBeginImportingPlaylists(): void {
                        console.warn('shimmed function Library.traceEasyTransferBeginImportingPlaylists');
                    }

                    traceEasyTransferCompletedImportingPlaylists(): void {
                        console.warn('shimmed function Library.traceEasyTransferCompletedImportingPlaylists');
                    }

                    traceEasyTransferIterationComplete(): void {
                        console.warn('shimmed function Library.traceEasyTransferIterationComplete');
                    }

                    traceEasyTransferComplete(): void {
                        console.warn('shimmed function Library.traceEasyTransferComplete');
                    }

                    traceEasyTransferIterationFailed(): void {
                        console.warn('shimmed function Library.traceEasyTransferIterationFailed');
                    }

                    traceEasyTransferParseError(line: number, column: number, message: string): void {
                        console.warn('shimmed function Library.traceEasyTransferParseError');
                    }

                    traceEasyTransferImportedMetadata(mediaId: number, rating: number, playCount: number): void {
                        console.warn('shimmed function Library.traceEasyTransferImportedMetadata');
                    }

                    traceEasyTransferImportedPlaylist(name: string, trackCount: number, imported: Boolean): void {
                        console.warn('shimmed function Library.traceEasyTransferImportedPlaylist');
                    }

                    traceEasyTransferLocatingMediaItem(location: string): void {
                        console.warn('shimmed function Library.traceEasyTransferLocatingMediaItem');
                    }

                    traceEasyTransferLocatedMediaItem(mediaId: number, created: Boolean): void {
                        console.warn('shimmed function Library.traceEasyTransferLocatedMediaItem');
                    }

                    traceEasyTransferStateChange(oldState: number, newState: number): void {
                        console.warn('shimmed function Library.traceEasyTransferStateChange');
                    }

                    traceEasyTransferFailedToLocateMediaItem(hresult: number): void {
                        console.warn('shimmed function Library.traceEasyTransferFailedToLocateMediaItem');
                    }

                    traceEasyTransferMatchedByFileUrl(): void {
                        console.warn('shimmed function Library.traceEasyTransferMatchedByFileUrl');
                    }

                    traceGrovelerScanStarted(): void {
                        console.warn('shimmed function Library.traceGrovelerScanStarted');
                    }

                    traceGrovelerScanCompleted(fileCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerScanCompleted');
                    }

                    traceGrovelerQuickScanStarted(): void {
                        console.warn('shimmed function Library.traceGrovelerQuickScanStarted');
                    }

                    traceGrovelerQuickScanCompleted(receivedFileCount: number, modifiedFileCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerQuickScanCompleted');
                    }

                    traceGrovelerDeleteScanStarted(): void {
                        console.warn('shimmed function Library.traceGrovelerDeleteScanStarted');
                    }

                    traceGrovelerDeleteScanCompleted(fileCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerDeleteScanCompleted');
                    }

                    traceGrovelerPlaylistScanStarted(): void {
                        console.warn('shimmed function Library.traceGrovelerPlaylistScanStarted');
                    }

                    traceGrovelerPlaylistScanCompleted(fileCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerPlaylistScanCompleted');
                    }

                    traceGrovelerAdditionScanStarted(): void {
                        console.warn('shimmed function Library.traceGrovelerAdditionScanStarted');
                    }

                    traceGrovelerAdditionScanCompleted(fileCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerAdditionScanCompleted');
                    }

                    traceGrovelerFullScanSkipped(): void {
                        console.warn('shimmed function Library.traceGrovelerFullScanSkipped');
                    }

                    traceGrovelerTopLevelFolderAdded(): void {
                        console.warn('shimmed function Library.traceGrovelerTopLevelFolderAdded');
                    }

                    traceGrovelerNotificationReceived(): void {
                        console.warn('shimmed function Library.traceGrovelerNotificationReceived');
                    }

                    traceGrovelerNetworkConnected(): void {
                        console.warn('shimmed function Library.traceGrovelerNetworkConnected');
                    }

                    traceGrovelerNetworkShareAccessed(): void {
                        console.warn('shimmed function Library.traceGrovelerNetworkShareAccessed');
                    }

                    traceGrovelerMasterRatingFileDirtySet(): void {
                        console.warn('shimmed function Library.traceGrovelerMasterRatingFileDirtySet');
                    }

                    traceGrovelerWriteMasterRatingFileTriggered(): void {
                        console.warn('shimmed function Library.traceGrovelerWriteMasterRatingFileTriggered');
                    }

                    traceGrovelerWriteMasterRatingFileStarted(): void {
                        console.warn('shimmed function Library.traceGrovelerWriteMasterRatingFileStarted');
                    }

                    traceGrovelerWriteMasterRatingFileCompleted(hresult: number, ratingCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerWriteMasterRatingFileCompleted');
                    }

                    traceGrovelerReadMasterRatingFileTriggered(): void {
                        console.warn('shimmed function Library.traceGrovelerReadMasterRatingFileTriggered');
                    }

                    traceGrovelerReadMasterRatingFileStarted(): void {
                        console.warn('shimmed function Library.traceGrovelerReadMasterRatingFileStarted');
                    }

                    traceGrovelerReadMasterRatingFileCompleted(hresult: number, ratingCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerReadMasterRatingFileCompleted');
                    }

                    traceGrovelerQueryIndexerDiff(timestamp: string): void {
                        console.warn('shimmed function Library.traceGrovelerQueryIndexerDiff');
                    }

                    traceGrovelerIsQuickGrovelNeeded(currentCount: number, changedCount: number, quickScanNeeded: Boolean): void {
                        console.warn('shimmed function Library.traceGrovelerIsQuickGrovelNeeded');
                    }

                    traceGrovelerGetFilesAsyncRetry(hresult: number, retryCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerGetFilesAsyncRetry');
                    }

                    traceGrovelerWaitForCompletionRetry(hresult: number, retryCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerWaitForCompletionRetry');
                    }

                    traceGrovelerGetResultsError(hresult: number): void {
                        console.warn('shimmed function Library.traceGrovelerGetResultsError');
                    }

                    traceGrovelerGetEmptyItemList(hresult: number): void {
                        console.warn('shimmed function Library.traceGrovelerGetEmptyItemList');
                    }

                    traceGrovelerRefreshLicenseStarted(): void {
                        console.warn('shimmed function Library.traceGrovelerRefreshLicenseStarted');
                    }

                    traceGrovelerRefreshLicenseCompleted(hresult: number): void {
                        console.warn('shimmed function Library.traceGrovelerRefreshLicenseCompleted');
                    }

                    traceGrovelerDefinitionChangedNotificationReceived(): void {
                        console.warn('shimmed function Library.traceGrovelerDefinitionChangedNotificationReceived');
                    }

                    traceGrovelerRetriesExhausted(hresult: number, fileCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerRetriesExhausted');
                    }

                    traceGrovelerAddFile(hresult: number, fileUrl: string): void {
                        console.warn('shimmed function Library.traceGrovelerAddFile');
                    }

                    traceGrovelerSetFileAvailable(fileUrl: string): void {
                        console.warn('shimmed function Library.traceGrovelerSetFileAvailable');
                    }

                    traceGrovelerSetFileUnavailable(fileUrl: string): void {
                        console.warn('shimmed function Library.traceGrovelerSetFileUnavailable');
                    }

                    traceGrovelerSecondScanStarted(): void {
                        console.warn('shimmed function Library.traceGrovelerSecondScanStarted');
                    }

                    traceGrovelerSecondScanCompleted(fileCount: number, unindexedFileCount: number, unknownFileCount: number): void {
                        console.warn('shimmed function Library.traceGrovelerSecondScanCompleted');
                    }

                    traceMDLCStarted(): void {
                        console.warn('shimmed function Library.traceMDLCStarted');
                    }

                    traceMDLCCompleted(): void {
                        console.warn('shimmed function Library.traceMDLCCompleted');
                    }

                    traceDatabaseOpenStarted(): void {
                        console.warn('shimmed function Library.traceDatabaseOpenStarted');
                    }

                    traceDatabaseOpenCompleted(): void {
                        console.warn('shimmed function Library.traceDatabaseOpenCompleted');
                    }

                    traceDatabaseCloseStarted(): void {
                        console.warn('shimmed function Library.traceDatabaseCloseStarted');
                    }

                    traceDatabaseCloseCompleted(): void {
                        console.warn('shimmed function Library.traceDatabaseCloseCompleted');
                    }

                    traceDbCleanupOnUserSignedOutStarted(): void {
                        console.warn('shimmed function Library.traceDbCleanupOnUserSignedOutStarted');
                    }

                    traceDbCleanupOnUserSignedOutCompleted(): void {
                        console.warn('shimmed function Library.traceDbCleanupOnUserSignedOutCompleted');
                    }

                    traceQueryStarted(queryObjectInstanceId: number, queryType: string, actionName: string): void {
                        console.warn('shimmed function Library.traceQueryStarted');
                    }

                    traceQueryCompleted(queryObjectInstanceId: number, queryType: string, actionName: string): void {
                        console.warn('shimmed function Library.traceQueryCompleted');
                    }

                    tracePlaylistIOStarted(): void {
                        console.warn('shimmed function Library.tracePlaylistIOStarted');
                    }

                    tracePlaylistIOCompleted(readFileCount: number): void {
                        console.warn('shimmed function Library.tracePlaylistIOCompleted');
                    }

                    traceBackgroundWorkLock_Requested(requestor: string): void {
                        console.warn('shimmed function Library.traceBackgroundWorkLock_Requested');
                    }

                    traceBackgroundWorkLock_Acquired(requestor: string): void {
                        console.warn('shimmed function Library.traceBackgroundWorkLock_Acquired');
                    }

                    traceBackgroundWorkLock_Released(requestor: string): void {
                        console.warn('shimmed function Library.traceBackgroundWorkLock_Released');
                    }

                    traceCollectionBuildingBegin(eventSource: number): void {
                        console.warn('shimmed function Library.traceCollectionBuildingBegin');
                    }

                    traceCollectionBuildingEnd(eventSource: number, itemsAdded: number, itemsTotal: number, errorState: number): void {
                        console.warn('shimmed function Library.traceCollectionBuildingEnd');
                    }

                    traceCollectionBuildingProgress(itemsProcessed: number): void {
                        console.warn('shimmed function Library.traceCollectionBuildingProgress');
                    }

                    traceCollectionBuildingMediaSynced(): void {
                        console.warn('shimmed function Library.traceCollectionBuildingMediaSynced');
                    }

                    traceCollectionBuildingMissingMetadata(): void {
                        console.warn('shimmed function Library.traceCollectionBuildingMissingMetadata');
                    }

                    traceCollectionBuildingMDLCProgress(itemsProcessed: number): void {
                        console.warn('shimmed function Library.traceCollectionBuildingMDLCProgress');
                    }

                    traceCollectionBuildingCloudCollectionV2FirstTrackAdded(): void {
                        console.warn('shimmed function Library.traceCollectionBuildingCloudCollectionV2FirstTrackAdded');
                    }

                    traceFingerprintingStarted(): void {
                        console.warn('shimmed function Library.traceFingerprintingStarted');
                    }

                    traceFingerprintingComplete(hresult: number, canceled: Boolean, processedFileCount: number, remainingFileCount: number, failedFileCount: number): void {
                        console.warn('shimmed function Library.traceFingerprintingComplete');
                    }

                    traceProcessRemainingFilesStarted(): void {
                        console.warn('shimmed function Library.traceProcessRemainingFilesStarted');
                    }

                    traceProcessRemainingFilesComplete(hresult: number): void {
                        console.warn('shimmed function Library.traceProcessRemainingFilesComplete');
                    }

                    traceFileProcessed(fileId: number, foreground: Boolean, allowGracenoteId: Boolean, hresult: number): void {
                        console.warn('shimmed function Library.traceFileProcessed');
                    }

                    traceFingerprintIdFound(fileId: number, fileUrl: string): void {
                        console.warn('shimmed function Library.traceFingerprintIdFound');
                    }

                    traceFingerprintComputed(fileId: number, fileUrl: string): void {
                        console.warn('shimmed function Library.traceFingerprintComputed');
                    }

                    traceFingerprintGeneration_InternalError(fileUrl: string, error: number): void {
                        console.warn('shimmed function Library.traceFingerprintGeneration_InternalError');
                    }

                    traceFingerprintGeneration_EndOfStreamReached(fileUrl: string): void {
                        console.warn('shimmed function Library.traceFingerprintGeneration_EndOfStreamReached');
                    }

                    traceFingerprintGeneration_SourceReaderError(fileUrl: string, flags: number): void {
                        console.warn('shimmed function Library.traceFingerprintGeneration_SourceReaderError');
                    }

                    traceFingerprintGeneration_FingerprintRetrieved(fileUrl: string, qualities: number): void {
                        console.warn('shimmed function Library.traceFingerprintGeneration_FingerprintRetrieved');
                    }

                    traceGetImmediateFingerprintsStart(): void {
                        console.warn('shimmed function Library.traceGetImmediateFingerprintsStart');
                    }

                    traceGetImmediateFingerprintsComplete(processedFileCount: number): void {
                        console.warn('shimmed function Library.traceGetImmediateFingerprintsComplete');
                    }

                    traceImmediateFingerprintRetrieved(fileId: number, hresult: number, resultType: number): void {
                        console.warn('shimmed function Library.traceImmediateFingerprintRetrieved');
                    }

                }
                export class LibraryTemplate implements ILibraryTemplate {
                    // constructor();
                    eventEnabled(eventIndex: number): number {
                        throw new Error('shimmed function LibraryTemplate.eventEnabled');
                    }

                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplateEventDescriptor');
                    }

                    traceTemplate_qqz(_MCGEN_EventIndex: number, line: number, column: number, message: string): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_qqz');
                    }

                    traceTemplate_qqq(_MCGEN_EventIndex: number, mediaId: number, rating: number, playCount: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_qqq');
                    }

                    traceTemplate_zqt(_MCGEN_EventIndex: number, name: string, trackCount: number, imported: Boolean): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_zqt');
                    }

                    traceTemplate_z(_MCGEN_EventIndex: number, location: string): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_z');
                    }

                    traceTemplate_qt(_MCGEN_EventIndex: number, mediaId: number, created: Boolean): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_qt');
                    }

                    traceTemplate_qq(_MCGEN_EventIndex: number, oldState: number, newState: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_qq');
                    }

                    traceTemplate_d(_MCGEN_EventIndex: number, hresult: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_d');
                    }

                    traceTemplate_q(_MCGEN_EventIndex: number, fileCount: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_q');
                    }

                    traceTemplate_dq(_MCGEN_EventIndex: number, hresult: number, ratingCount: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_dq');
                    }

                    traceTemplate_qqt(_MCGEN_EventIndex: number, currentCount: number, changedCount: number, quickScanNeeded: Boolean): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_qqt');
                    }

                    traceTemplate_dz(_MCGEN_EventIndex: number, hresult: number, fileUrl: string): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_dz');
                    }

                    traceTemplate_dzz(_MCGEN_EventIndex: number, queryObjectInstanceId: number, queryType: string, actionName: string): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_dzz');
                    }

                    traceTemplate_qqqq(_MCGEN_EventIndex: number, eventSource: number, itemsAdded: number, itemsTotal: number, errorState: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_qqqq');
                    }

                    traceTemplate_dtqqq(_MCGEN_EventIndex: number, hresult: number, canceled: Boolean, processedFileCount: number, remainingFileCount: number, failedFileCount: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_dtqqq');
                    }

                    traceTemplate_qttd(_MCGEN_EventIndex: number, fileId: number, foreground: Boolean, allowGracenoteId: Boolean, hresult: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_qttd');
                    }

                    traceTemplate_qz(_MCGEN_EventIndex: number, fileId: number, fileUrl: string): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_qz');
                    }

                    traceTemplate_zd(_MCGEN_EventIndex: number, fileUrl: string, error: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_zd');
                    }

                    traceTemplate_zq(_MCGEN_EventIndex: number, fileUrl: string, flags: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_zq');
                    }

                    traceTemplate_qdd(_MCGEN_EventIndex: number, fileId: number, hresult: number, resultType: number): void {
                        console.warn('shimmed function LibraryTemplate.traceTemplate_qdd');
                    }

                }
                export class Pipeline implements IPipeline {
                    // constructor();
                    isClosedCaptions_DroppedFrameEnabled: Boolean = false;
                    isClosedCaptions_EnterRenderingLoopEnabled: Boolean = false;
                    isClosedCaptions_ExitRenderingLoopEnabled: Boolean = false;
                    isClosedCaptions_OnEnabled: Boolean = false;
                    isClosedCaptions_RendererGetTTMLFilepathEnabled: Boolean = false;
                    isClosedCaptions_RendererLoadTTMLFileEnabled: Boolean = false;
                    isDRM_DeleteLicense_CompletedEnabled: Boolean = false;
                    isDRM_DeleteLicense_InvokedEnabled: Boolean = false;
                    isDRM_ReportMetering_AccountEnabled: Boolean = false;
                    isDRM_ReportMetering_CompletedEnabled: Boolean = false;
                    isDRM_ReportMetering_InvokedEnabled: Boolean = false;
                    isDRM_ReportMetering_NoDataToReportEnabled: Boolean = false;
                    isDRM_RootLicenseRefresh_AccountEnabled: Boolean = false;
                    isDRM_RootLicenseRefresh_CompletedEnabled: Boolean = false;
                    isDRM_RootLicenseRefresh_DetailsEnabled: Boolean = false;
                    isDRM_RootLicenseRefresh_InvokedEnabled: Boolean = false;
                    isFastStartMediaSource_CreatedEnabled: Boolean = false;
                    isFastStartMediaSource_PlaybackStartEnabled: Boolean = false;
                    isFastStartMediaSource_ReceivedUrlEnabled: Boolean = false;
                    isLEQ_EnabledEnabled: Boolean = false;
                    isLEQ_Process_CompleteEnabled: Boolean = false;
                    isLEQ_Process_StartEnabled: Boolean = false;
                    isLEQ_SetFormatEnabled: Boolean = false;
                    isMBR_BufferStatusEnabled: Boolean = false;
                    isMBR_DMO_ProcessInput_ReturnEnabled: Boolean = false;
                    isMBR_DMO_ProcessOutput_ReturnEnabled: Boolean = false;
                    isMBR_DropFrameEnabled: Boolean = false;
                    isMBR_EOSEnabled: Boolean = false;
                    isMBR_GotNewSampleEnabled: Boolean = false;
                    isMBR_ManifestStreamEnabled: Boolean = false;
                    isMBR_NextChunkEnabled: Boolean = false;
                    isMBR_Pause_EnterEnabled: Boolean = false;
                    isMBR_Pause_ExitEnabled: Boolean = false;
                    isMBR_PinBeginFlush_EnterEnabled: Boolean = false;
                    isMBR_PinBeginFlush_ExitEnabled: Boolean = false;
                    isMBR_PinDecompress_BeginEnabled: Boolean = false;
                    isMBR_PinDecompress_CallEnabled: Boolean = false;
                    isMBR_PinDecompress_EndEnabled: Boolean = false;
                    isMBR_PinDecompress_ReturnEnabled: Boolean = false;
                    isMBR_PinEndFlush_EnterEnabled: Boolean = false;
                    isMBR_PinEndFlush_ExitEnabled: Boolean = false;
                    isMBR_PinPumpState_ChangedEnabled: Boolean = false;
                    isMBR_Preroll_ExitEnabled: Boolean = false;
                    isMBR_Preroll_Forced_ExitEnabled: Boolean = false;
                    isMBR_Run_EnterEnabled: Boolean = false;
                    isMBR_Run_ExitEnabled: Boolean = false;
                    isMBR_Run_LockEnabled: Boolean = false;
                    isMBR_SamplePushedDownStream_BeginEnabled: Boolean = false;
                    isMBR_SamplePushedDownStream_EndEnabled: Boolean = false;
                    isMBR_SamplePushedToPinPumpEnabled: Boolean = false;
                    isMBR_Seek_EnterEnabled: Boolean = false;
                    isMBR_Seek_ExitEnabled: Boolean = false;
                    isMBR_SourceState_ChangedEnabled: Boolean = false;
                    isMBR_Stop_EnterEnabled: Boolean = false;
                    isMBR_Stop_ExitEnabled: Boolean = false;
                    isMBR_Transcrypt_BeginEnabled: Boolean = false;
                    isMBR_Transcrypt_EndEnabled: Boolean = false;
                    isPlaybackInterop_PlayerStateChangedEnabled: Boolean = false;
                    isPlaybackInterop_PositionChangedEnabled: Boolean = false;
                    isPlaybackInterop_TransportStateChangedEnabled: Boolean = false;
                    isPlaybackInterop_TrickPlayStateChangedEnabled: Boolean = false;
                    isPlayback_ControlInitializedEnabled: Boolean = false;
                    isPlayback_CurrentMediaLoadedEnabled: Boolean = false;
                    isPlayback_DisableTimeUpdateEnabled: Boolean = false;
                    isPlayback_EnableTimeUpdateEnabled: Boolean = false;
                    isPlayback_ErrorOccurredEnabled: Boolean = false;
                    isPlayback_ForceTimeUpdateEnabled: Boolean = false;
                    isPlayback_MCPlayerAdapter_CreateInstanceEnabled: Boolean = false;
                    isPlayback_MFPlayer_CreateInstanceEnabled: Boolean = false;
                    isPlayback_NextMediaLoadedEnabled: Boolean = false;
                    isPlayback_NextMediaStartedEnabled: Boolean = false;
                    isPlayback_PBMSoundLevelChangedEnabled: Boolean = false;
                    isPlayback_PlayerStateChangedEnabled: Boolean = false;
                    isPlayback_SessionInitializedEnabled: Boolean = false;
                    isPlayback_SetMediaEnabled: Boolean = false;
                    isPlayback_SetNextMediaEnabled: Boolean = false;
                    isPlayback_SwitchingToNextMediaEnabled: Boolean = false;
                    isPlayback_TargetTransportStateSetEnabled: Boolean = false;
                    isPlayback_TransportStateChangedEnabled: Boolean = false;
                    isPlayback_WPPEnabled: Boolean = false;
                    isPlaylist_ActivateEnabled: Boolean = false;
                    isPlaylist_CreatedEnabled: Boolean = false;
                    isPlaylist_InterpretingDataEnabled: Boolean = false;
                    isPlaylist_SetDataSourceBeginEnabled: Boolean = false;
                    isPlaylist_SetDataSourceEndEnabled: Boolean = false;
                    isPlaylist_SetMediaEnabled: Boolean = false;
                    isPlaylist_SetNextMediaEnabled: Boolean = false;
                    isPlaylog_BookmarkLoadEnabled: Boolean = false;
                    isPlaylog_BookmarkSaveEnabled: Boolean = false;
                    isPlaylog_PlayCountLoadEnabled: Boolean = false;
                    isPlaylog_PlayCountSaveEnabled: Boolean = false;
                    isPlaylog_PlayedLoadEnabled: Boolean = false;
                    isPlaylog_PlayedSaveEnabled: Boolean = false;
                    isPresenter_Display_Video_SizeEnabled: Boolean = false;
                    isPresenter_DownresEnabled: Boolean = false;
                    isPresenter_FrameDroppedEnabled: Boolean = false;
                    isPresenter_FrameTimesEnabled: Boolean = false;
                    isPresenter_Native_Video_SizeEnabled: Boolean = false;
                    isPresenter_OperationEnabled: Boolean = false;
                    isPresenter_Target_Video_SizeEnabled: Boolean = false;
                    isTranscoding_CompleteEnabled: Boolean = false;
                    isTranscoding_Crash_StatusEnabled: Boolean = false;
                    isTranscoding_Disable_HW_AccelerationEnabled: Boolean = false;
                    isTranscoding_JobTypeEnabled: Boolean = false;
                    isTranscoding_MF_DShow_FallbackEnabled: Boolean = false;
                    isTranscoding_MF_HW_SW_FallbackEnabled: Boolean = false;
                    isTranscoding_MF_HW_StatusEnabled: Boolean = false;
                    isTranscoding_Reenable_HW_AccelerationEnabled: Boolean = false;
                    isTranscoding_SW_Retranscode_After_CrashEnabled: Boolean = false;
                    isTranscoding_StartEnabled: Boolean = false;

                    traceMBR_Pause_Enter(currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Pause_Enter');
                    }

                    traceMBR_Pause_Exit(currentStreamTimeHns: number, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Pause_Exit');
                    }

                    traceMBR_Run_Enter(startTimeHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Run_Enter');
                    }

                    traceMBR_Run_Lock(currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Run_Lock');
                    }

                    traceMBR_Run_Exit(currentStreamTimeHns: number, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Run_Exit');
                    }

                    traceMBR_Seek_Enter(possitionHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Seek_Enter');
                    }

                    traceMBR_Seek_Exit(currentStreamTimeHns: number, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Seek_Exit');
                    }

                    traceMBR_Stop_Enter(currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Stop_Enter');
                    }

                    traceMBR_Stop_Exit(currentStreamTimeHns: number, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Stop_Exit');
                    }

                    traceMBR_SourceState_Changed(filterState: number, oldState: number, newState: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_SourceState_Changed');
                    }

                    traceMBR_PinPumpState_Changed(streamType: number, oldState: number, newState: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_PinPumpState_Changed');
                    }

                    traceMBR_EOS(streamType: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_EOS');
                    }

                    traceMBR_Preroll_Exit(streamType: number, initialAudioTimeHns: number, initialVideoTimeHns: number, newStartBaseTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Preroll_Exit');
                    }

                    traceMBR_Preroll_Forced_Exit(streamType: number, initialAudioTimeHns: number, initialVideoTimeHns: number, newStartBaseTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Preroll_Forced_Exit');
                    }

                    traceMBR_PinBeginFlush_Enter(streamType: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_PinBeginFlush_Enter');
                    }

                    traceMBR_PinBeginFlush_Exit(streamType: number, currentStreamTimeHns: number, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_PinBeginFlush_Exit');
                    }

                    traceMBR_PinEndFlush_Enter(streamType: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_PinEndFlush_Enter');
                    }

                    traceMBR_PinEndFlush_Exit(streamType: number, currentStreamTimeHns: number, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_PinEndFlush_Exit');
                    }

                    traceMBR_GotNewSample(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_GotNewSample');
                    }

                    traceMBR_SamplePushedToPinPump(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_SamplePushedToPinPump');
                    }

                    traceMBR_SamplePushedDownStream_Begin(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_SamplePushedDownStream_Begin');
                    }

                    traceMBR_SamplePushedDownStream_End(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_SamplePushedDownStream_End');
                    }

                    traceMBR_BufferStatus(currentStreamTimeHns: number, bufferSizeMs: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_BufferStatus');
                    }

                    traceMBR_DropFrame(totalFramesDropped: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_DropFrame');
                    }

                    traceMBR_PinDecompress_Begin(streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_PinDecompress_Begin');
                    }

                    traceMBR_PinDecompress_End(streamType: number, frameSizeInBytes: number, durationHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_PinDecompress_End');
                    }

                    traceMBR_PinDecompress_Call(streamType: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_PinDecompress_Call');
                    }

                    traceMBR_PinDecompress_Return(streamType: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_PinDecompress_Return');
                    }

                    traceMBR_Transcrypt_Begin(streamType: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Transcrypt_Begin');
                    }

                    traceMBR_Transcrypt_End(streamType: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_Transcrypt_End');
                    }

                    traceMBR_DMO_ProcessInput_Return(streamType: number, sampleTimeHns: number, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_DMO_ProcessInput_Return');
                    }

                    traceMBR_DMO_ProcessOutput_Return(streamType: number, hresult: number, durationHns: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_DMO_ProcessOutput_Return');
                    }

                    traceMBR_NextChunk(streamType: number, chunkIndex: number, bitrateBps: number, sampleTimeHns: number, durationHns: number, sizeInBytes: number, quality: number, targetQuality: number, totalBandwidthBps: number, targetBandwidthBps: number, bufferSizeMs: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_NextChunk');
                    }

                    traceMBR_ManifestStream(streamType: number, id: number, bitrate: number, width: number, height: number, channels: number): void {
                        console.warn('shimmed function Pipeline.traceMBR_ManifestStream');
                    }

                    traceTranscoding_JobType(jobType: number): void {
                        console.warn('shimmed function Pipeline.traceTranscoding_JobType');
                    }

                    traceTranscoding_Start(): void {
                        console.warn('shimmed function Pipeline.traceTranscoding_Start');
                    }

                    traceTranscoding_Complete(hresult: number): void {
                        console.warn('shimmed function Pipeline.traceTranscoding_Complete');
                    }

                    traceTranscoding_MF_DShow_Fallback(): void {
                        console.warn('shimmed function Pipeline.traceTranscoding_MF_DShow_Fallback');
                    }

                    traceTranscoding_MF_HW_SW_Fallback(): void {
                        console.warn('shimmed function Pipeline.traceTranscoding_MF_HW_SW_Fallback');
                    }

                    traceTranscoding_MF_HW_Status(hw_Status: Boolean): void {
                        console.warn('shimmed function Pipeline.traceTranscoding_MF_HW_Status');
                    }

                    traceTranscoding_Crash_Status(crashCount: number, maxCrashCount: number, hw_Status: Boolean, isConfirmed: Boolean, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceTranscoding_Crash_Status');
                    }

                    traceTranscoding_Disable_HW_Acceleration(): void {
                        console.warn('shimmed function Pipeline.traceTranscoding_Disable_HW_Acceleration');
                    }

                    traceTranscoding_Reenable_HW_Acceleration(): void {
                        console.warn('shimmed function Pipeline.traceTranscoding_Reenable_HW_Acceleration');
                    }

                    traceTranscoding_SW_Retranscode_After_Crash(): void {
                        console.warn('shimmed function Pipeline.traceTranscoding_SW_Retranscode_After_Crash');
                    }

                    tracePresenter_Downres(width: number, height: number): void {
                        console.warn('shimmed function Pipeline.tracePresenter_Downres');
                    }

                    tracePresenter_Native_Video_Size(width: number, height: number): void {
                        console.warn('shimmed function Pipeline.tracePresenter_Native_Video_Size');
                    }

                    tracePresenter_Target_Video_Size(width: number, height: number): void {
                        console.warn('shimmed function Pipeline.tracePresenter_Target_Video_Size');
                    }

                    tracePresenter_Display_Video_Size(width: number, height: number): void {
                        console.warn('shimmed function Pipeline.tracePresenter_Display_Video_Size');
                    }

                    tracePresenter_FrameTimes(frameNumber: number, timestampStream: number, timestampQPC: number, systime100ns: number, streamtime100ns: number, freqQPC: number): void {
                        console.warn('shimmed function Pipeline.tracePresenter_FrameTimes');
                    }

                    tracePresenter_FrameDropped(framesDropped: number): void {
                        console.warn('shimmed function Pipeline.tracePresenter_FrameDropped');
                    }

                    tracePresenter_Operation(op: string, lastPTS: number, splashOwnedFrameCount: number, stepCount: number, state: number, connectedState: number): void {
                        console.warn('shimmed function Pipeline.tracePresenter_Operation');
                    }

                    traceLEQ_Enabled(enabled: Boolean): void {
                        console.warn('shimmed function Pipeline.traceLEQ_Enabled');
                    }

                    traceLEQ_SetFormat(format: number, channels: number, samplesPerChannel: number, action: number, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceLEQ_SetFormat');
                    }

                    traceLEQ_Process_Start(): void {
                        console.warn('shimmed function Pipeline.traceLEQ_Process_Start');
                    }

                    traceLEQ_Process_Complete(passthrough: Boolean, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceLEQ_Process_Complete');
                    }

                    tracePlaybackInterop_PlayerStateChanged(state: number): void {
                        console.warn('shimmed function Pipeline.tracePlaybackInterop_PlayerStateChanged');
                    }

                    tracePlaybackInterop_PositionChanged(position: number, minSeekPosition: number, maxSeekPosition: number, endOfMedia: Boolean, canSeek: Boolean): void {
                        console.warn('shimmed function Pipeline.tracePlaybackInterop_PositionChanged');
                    }

                    tracePlaybackInterop_TransportStateChanged(state: number): void {
                        console.warn('shimmed function Pipeline.tracePlaybackInterop_TransportStateChanged');
                    }

                    tracePlaybackInterop_TrickPlayStateChanged(state: number): void {
                        console.warn('shimmed function Pipeline.tracePlaybackInterop_TrickPlayStateChanged');
                    }

                    tracePlayback_MCPlayerAdapter_CreateInstance(hresult: number): void {
                        console.warn('shimmed function Pipeline.tracePlayback_MCPlayerAdapter_CreateInstance');
                    }

                    tracePlayback_MFPlayer_CreateInstance(hresult: number): void {
                        console.warn('shimmed function Pipeline.tracePlayback_MFPlayer_CreateInstance');
                    }

                    tracePlayback_ControlInitialized(): void {
                        console.warn('shimmed function Pipeline.tracePlayback_ControlInitialized');
                    }

                    tracePlayback_SessionInitialized(): void {
                        console.warn('shimmed function Pipeline.tracePlayback_SessionInitialized');
                    }

                    tracePlayback_PlayerStateChanged(newState: string, oldState: string): void {
                        console.warn('shimmed function Pipeline.tracePlayback_PlayerStateChanged');
                    }

                    tracePlayback_TransportStateChanged(newState: string, oldState: string): void {
                        console.warn('shimmed function Pipeline.tracePlayback_TransportStateChanged');
                    }

                    tracePlayback_SetMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void {
                        console.warn('shimmed function Pipeline.tracePlayback_SetMedia');
                    }

                    tracePlayback_SetNextMedia(readyForNext: Boolean, source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void {
                        console.warn('shimmed function Pipeline.tracePlayback_SetNextMedia');
                    }

                    tracePlayback_CurrentMediaLoaded(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void {
                        console.warn('shimmed function Pipeline.tracePlayback_CurrentMediaLoaded');
                    }

                    tracePlayback_NextMediaLoaded(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void {
                        console.warn('shimmed function Pipeline.tracePlayback_NextMediaLoaded');
                    }

                    tracePlayback_SwitchingToNextMedia(source: string): void {
                        console.warn('shimmed function Pipeline.tracePlayback_SwitchingToNextMedia');
                    }

                    tracePlayback_NextMediaStarted(source: string): void {
                        console.warn('shimmed function Pipeline.tracePlayback_NextMediaStarted');
                    }

                    tracePlayback_ErrorOccurred(errorCode: number, extendedCode: number, context: string): void {
                        console.warn('shimmed function Pipeline.tracePlayback_ErrorOccurred');
                    }

                    tracePlayback_EnableTimeUpdate(currentPositionMsec: number): void {
                        console.warn('shimmed function Pipeline.tracePlayback_EnableTimeUpdate');
                    }

                    tracePlayback_DisableTimeUpdate(currentPositionMsec: number): void {
                        console.warn('shimmed function Pipeline.tracePlayback_DisableTimeUpdate');
                    }

                    tracePlayback_ForceTimeUpdate(currentPositionMsec: number): void {
                        console.warn('shimmed function Pipeline.tracePlayback_ForceTimeUpdate');
                    }

                    tracePlayback_PBMSoundLevelChanged(soundLevel: string, currentTransportState: string): void {
                        console.warn('shimmed function Pipeline.tracePlayback_PBMSoundLevelChanged');
                    }

                    tracePlayback_TargetTransportStateSet(wannaBe: string, current: string): void {
                        console.warn('shimmed function Pipeline.tracePlayback_TargetTransportStateSet');
                    }

                    tracePlaylist_SetDataSourceBegin(): void {
                        console.warn('shimmed function Pipeline.tracePlaylist_SetDataSourceBegin');
                    }

                    tracePlaylist_SetDataSourceEnd(): void {
                        console.warn('shimmed function Pipeline.tracePlaylist_SetDataSourceEnd');
                    }

                    tracePlaylist_InterpretingData(): void {
                        console.warn('shimmed function Pipeline.tracePlaylist_InterpretingData');
                    }

                    tracePlaylist_Activate(index: number, startPosition: number, shuffle: Boolean, repeat: Boolean): void {
                        console.warn('shimmed function Pipeline.tracePlaylist_Activate');
                    }

                    tracePlaylist_SetMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void {
                        console.warn('shimmed function Pipeline.tracePlaylist_SetMedia');
                    }

                    tracePlaylist_SetNextMedia(source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void {
                        console.warn('shimmed function Pipeline.tracePlaylist_SetNextMedia');
                    }

                    tracePlaylist_Created(): void {
                        console.warn('shimmed function Pipeline.tracePlaylist_Created');
                    }

                    tracePlaylog_BookmarkLoad(positionMS: number, playFromBookmark: Boolean): void {
                        console.warn('shimmed function Pipeline.tracePlaylog_BookmarkLoad');
                    }

                    tracePlaylog_BookmarkSave(positionMS: number): void {
                        console.warn('shimmed function Pipeline.tracePlaylog_BookmarkSave');
                    }

                    tracePlaylog_PlayCountLoad(playCount: number): void {
                        console.warn('shimmed function Pipeline.tracePlaylog_PlayCountLoad');
                    }

                    tracePlaylog_PlayCountSave(playCount: number): void {
                        console.warn('shimmed function Pipeline.tracePlaylog_PlayCountSave');
                    }

                    tracePlaylog_PlayedLoad(played: Boolean): void {
                        console.warn('shimmed function Pipeline.tracePlaylog_PlayedLoad');
                    }

                    tracePlaylog_PlayedSave(played: Boolean): void {
                        console.warn('shimmed function Pipeline.tracePlaylog_PlayedSave');
                    }

                    traceDRM_RootLicenseRefresh_Account(subscription: Boolean, tunerActivated: Boolean): void {
                        console.warn('shimmed function Pipeline.traceDRM_RootLicenseRefresh_Account');
                    }

                    traceDRM_RootLicenseRefresh_Details(now: string, lastRefresh: string, spanMs: number): void {
                        console.warn('shimmed function Pipeline.traceDRM_RootLicenseRefresh_Details');
                    }

                    traceDRM_RootLicenseRefresh_Invoked(): void {
                        console.warn('shimmed function Pipeline.traceDRM_RootLicenseRefresh_Invoked');
                    }

                    traceDRM_RootLicenseRefresh_Completed(status: string): void {
                        console.warn('shimmed function Pipeline.traceDRM_RootLicenseRefresh_Completed');
                    }

                    traceDRM_ReportMetering_Account(subscription: Boolean, tunerActivated: Boolean, meteringCertificate: string): void {
                        console.warn('shimmed function Pipeline.traceDRM_ReportMetering_Account');
                    }

                    traceDRM_ReportMetering_Invoked(): void {
                        console.warn('shimmed function Pipeline.traceDRM_ReportMetering_Invoked');
                    }

                    traceDRM_ReportMetering_Completed(status: string): void {
                        console.warn('shimmed function Pipeline.traceDRM_ReportMetering_Completed');
                    }

                    traceDRM_ReportMetering_NoDataToReport(): void {
                        console.warn('shimmed function Pipeline.traceDRM_ReportMetering_NoDataToReport');
                    }

                    traceDRM_DeleteLicense_Invoked(kid: string): void {
                        console.warn('shimmed function Pipeline.traceDRM_DeleteLicense_Invoked');
                    }

                    traceDRM_DeleteLicense_Completed(kid: string, hresult: number): void {
                        console.warn('shimmed function Pipeline.traceDRM_DeleteLicense_Completed');
                    }

                    traceClosedCaptions_RendererGetTTMLFilepath(state: string, smid: string, miid: string, lcid: number, filepath: string): void {
                        console.warn('shimmed function Pipeline.traceClosedCaptions_RendererGetTTMLFilepath');
                    }

                    traceClosedCaptions_RendererLoadTTMLFile(state: string, filepath: string): void {
                        console.warn('shimmed function Pipeline.traceClosedCaptions_RendererLoadTTMLFile');
                    }

                    traceClosedCaptions_EnterRenderingLoop(currentPosition: number, transportState: string): void {
                        console.warn('shimmed function Pipeline.traceClosedCaptions_EnterRenderingLoop');
                    }

                    traceClosedCaptions_ExitRenderingLoop(currentPosition: number, transportState: string, closedCaptionsOn: Boolean): void {
                        console.warn('shimmed function Pipeline.traceClosedCaptions_ExitRenderingLoop');
                    }

                    traceClosedCaptions_On(enabled: Boolean): void {
                        console.warn('shimmed function Pipeline.traceClosedCaptions_On');
                    }

                    traceClosedCaptions_DroppedFrame(generatedAt: number, validUntil: number, currentPosition: number): void {
                        console.warn('shimmed function Pipeline.traceClosedCaptions_DroppedFrame');
                    }

                    traceFastStartMediaSource_Created(): void {
                        console.warn('shimmed function Pipeline.traceFastStartMediaSource_Created');
                    }

                    traceFastStartMediaSource_ReceivedUrl(info: string): void {
                        console.warn('shimmed function Pipeline.traceFastStartMediaSource_ReceivedUrl');
                    }

                    traceFastStartMediaSource_PlaybackStart(): void {
                        console.warn('shimmed function Pipeline.traceFastStartMediaSource_PlaybackStart');
                    }

                    tracePlayback_WPP(info: string): void {
                        console.warn('shimmed function Pipeline.tracePlayback_WPP');
                    }

                }
                export class PipelineTemplate implements IPipelineTemplate {
                    // constructor();
                    eventEnabled(eventIndex: number): number {
                        throw new Error('shimmed function PipelineTemplate.eventEnabled');
                    }

                    traceTemplate_x(_MCGEN_EventIndex: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_x');
                    }

                    traceTemplate_xd(_MCGEN_EventIndex: number, currentStreamTimeHns: number, hresult: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_xd');
                    }

                    traceTemplate_xx(_MCGEN_EventIndex: number, startTimeHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_xx');
                    }

                    traceTemplate_ix(_MCGEN_EventIndex: number, possitionHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_ix');
                    }

                    traceTemplate_ddd(_MCGEN_EventIndex: number, filterState: number, oldState: number, newState: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_ddd');
                    }

                    traceTemplate_qdd(_MCGEN_EventIndex: number, streamType: number, oldState: number, newState: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qdd');
                    }

                    traceTemplate_qx(_MCGEN_EventIndex: number, streamType: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qx');
                    }

                    traceTemplate_dxxx(_MCGEN_EventIndex: number, streamType: number, initialAudioTimeHns: number, initialVideoTimeHns: number, newStartBaseTimeHns: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_dxxx');
                    }

                    traceTemplate_qxd(_MCGEN_EventIndex: number, streamType: number, currentStreamTimeHns: number, hresult: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qxd');
                    }

                    traceTemplate_qxx(_MCGEN_EventIndex: number, streamType: number, sampleTimeHns: number, currentStreamTimeHns: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qxx');
                    }

                    traceTemplate_qqx(_MCGEN_EventIndex: number, streamType: number, frameSizeInBytes: number, durationHns: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qqx');
                    }

                    traceTemplate_q(_MCGEN_EventIndex: number, streamType: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_q');
                    }

                    traceTemplate_qdx(_MCGEN_EventIndex: number, streamType: number, hresult: number, durationHns: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qdx');
                    }

                    traceTemplate_qdqxxqqqqqq(_MCGEN_EventIndex: number, streamType: number, chunkIndex: number, bitrateBps: number, sampleTimeHns: number, durationHns: number, sizeInBytes: number, quality: number, targetQuality: number, totalBandwidthBps: number, targetBandwidthBps: number, bufferSizeMs: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qdqxxqqqqqq');
                    }

                    traceTemplate_qqqqqq(_MCGEN_EventIndex: number, streamType: number, id: number, bitrate: number, width: number, height: number, channels: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qqqqqq');
                    }

                    traceTemplate_d(_MCGEN_EventIndex: number, jobType: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_d');
                    }

                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplateEventDescriptor');
                    }

                    traceTemplate_t(_MCGEN_EventIndex: number, hw_Status: Boolean): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_t');
                    }

                    traceTemplate_qqttd(_MCGEN_EventIndex: number, crashCount: number, maxCrashCount: number, hw_Status: Boolean, isConfirmed: Boolean, hresult: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qqttd');
                    }

                    traceTemplate_qq(_MCGEN_EventIndex: number, width: number, height: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qq');
                    }

                    traceTemplate_xxxxxx(_MCGEN_EventIndex: number, frameNumber: number, timestampStream: number, timestampQPC: number, systime100ns: number, streamtime100ns: number, freqQPC: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_xxxxxx');
                    }

                    traceTemplate_zxqqdd(_MCGEN_EventIndex: number, op: string, lastPTS: number, splashOwnedFrameCount: number, stepCount: number, state: number, connectedState: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_zxqqdd');
                    }

                    traceTemplate_qqqqd(_MCGEN_EventIndex: number, format: number, channels: number, samplesPerChannel: number, action: number, hresult: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qqqqd');
                    }

                    traceTemplate_td(_MCGEN_EventIndex: number, passthrough: Boolean, hresult: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_td');
                    }

                    traceTemplate_xxxtt(_MCGEN_EventIndex: number, position: number, minSeekPosition: number, maxSeekPosition: number, endOfMedia: Boolean, canSeek: Boolean): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_xxxtt');
                    }

                    traceTemplate_zz(_MCGEN_EventIndex: number, newState: string, oldState: string): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_zz');
                    }

                    traceTemplate_zzzqqq(_MCGEN_EventIndex: number, source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number, durationMsec: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_zzzqqq');
                    }

                    traceTemplate_tzzzqq(_MCGEN_EventIndex: number, readyForNext: Boolean, source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_tzzzqq');
                    }

                    traceTemplate_z(_MCGEN_EventIndex: number, source: string): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_z');
                    }

                    traceTemplate_qqz(_MCGEN_EventIndex: number, errorCode: number, extendedCode: number, context: string): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qqz');
                    }

                    traceTemplate_qqtt(_MCGEN_EventIndex: number, index: number, startPosition: number, shuffle: Boolean, repeat: Boolean): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qqtt');
                    }

                    traceTemplate_zzzqq(_MCGEN_EventIndex: number, source: string, mediaType: string, protectionState: string, startPosition: number, cookie: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_zzzqq');
                    }

                    traceTemplate_qt(_MCGEN_EventIndex: number, positionMS: number, playFromBookmark: Boolean): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qt');
                    }

                    traceTemplate_tt(_MCGEN_EventIndex: number, subscription: Boolean, tunerActivated: Boolean): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_tt');
                    }

                    traceTemplate_zzx(_MCGEN_EventIndex: number, now: string, lastRefresh: string, spanMs: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_zzx');
                    }

                    traceTemplate_ttz(_MCGEN_EventIndex: number, subscription: Boolean, tunerActivated: Boolean, meteringCertificate: string): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_ttz');
                    }

                    traceTemplate_zd(_MCGEN_EventIndex: number, kid: string, hresult: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_zd');
                    }

                    traceTemplate_zzzqz(_MCGEN_EventIndex: number, state: string, smid: string, miid: string, lcid: number, filepath: string): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_zzzqz');
                    }

                    traceTemplate_qz(_MCGEN_EventIndex: number, currentPosition: number, transportState: string): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qz');
                    }

                    traceTemplate_qzt(_MCGEN_EventIndex: number, currentPosition: number, transportState: string, closedCaptionsOn: Boolean): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qzt');
                    }

                    traceTemplate_qqq(_MCGEN_EventIndex: number, generatedAt: number, validUntil: number, currentPosition: number): void {
                        console.warn('shimmed function PipelineTemplate.traceTemplate_qqq');
                    }

                }
                export class Providers implements IProviders {
                    // constructor();
                    isAddAlbumAndFindTrackIdBasedOnMetadataEndEnabled: Boolean;
                    isAddAlbumAndFindTrackIdBasedOnMetadataStartEnabled: Boolean;
                    isAddAlbumAndFindTrackIdEndEnabled: Boolean;
                    isAddAlbumAndFindTrackIdStartEnabled: Boolean;
                    isAddAlbumWithTitleArtistEnabled: Boolean;
                    isAddAudioAlbumEndEnabled: Boolean;
                    isAddAudioAlbumStartEnabled: Boolean;
                    isAddFileEndEnabled: Boolean;
                    isAddFileStartEnabled: Boolean;
                    isAddFolderEndEnabled: Boolean;
                    isAddFolderStartEnabled: Boolean;
                    isAddMediaEndEnabled: Boolean;
                    isAddMediaStartEnabled: Boolean;
                    isAddPersonEndEnabled: Boolean;
                    isAddPersonLinkEndEnabled: Boolean;
                    isAddPersonLinkStartEnabled: Boolean;
                    isAddPersonLinksEndEnabled: Boolean;
                    isAddPersonLinksStartEnabled: Boolean;
                    isAddPersonStartEnabled: Boolean;
                    isAddTrackEndEnabled: Boolean;
                    isAddTrackFileEndEnabled: Boolean;
                    isAddTrackFileStartEnabled: Boolean;
                    isAddTrackStartEnabled: Boolean;
                    isAddingAlbumEnabled: Boolean;
                    isAddingFileEnabled: Boolean;
                    isAddingFolderEnabled: Boolean;
                    isAddingPersonEnabled: Boolean;
                    isAddingPersonLinkEnabled: Boolean;
                    isAddingTrackEnabled: Boolean;
                    isAddingTrackEntryEnabled: Boolean;
                    isAddingUnknownArtistEnabled: Boolean;
                    isAlbumAsVariousArtistsEnabled: Boolean;
                    isFindAndGetAudioTrackEndEnabled: Boolean;
                    isFindAndGetAudioTrackStartEnabled: Boolean;
                    isFindArtistAndAlbumEndEnabled: Boolean;
                    isFindArtistAndAlbumStartEnabled: Boolean;
                    isFindTrackIdAndAlbumBasedOnTrackSmidEndEnabled: Boolean;
                    isFindTrackIdAndAlbumBasedOnTrackSmidStartEnabled: Boolean;
                    isFoundExistingTrackEnabled: Boolean;
                    isFoundTrackAndAlbumEnabled: Boolean;
                    isFoundTrackBySmidEnabled: Boolean;
                    isPromotingTrackArtistEnabled: Boolean;
                    isRecomputeAlbumReleaseYearEndEnabled: Boolean;
                    isRecomputeAlbumReleaseYearStartEnabled: Boolean;
                    isReflectTrackFilesStateEndEnabled: Boolean;
                    isReflectTrackFilesStateStartEnabled: Boolean;
                    isSetTrackRatingFromFileEnabled: Boolean;
                    isSetUnknownGenreEnabled: Boolean;
                    isSplitExistingFileEnabled: Boolean;
                    isTrackIsAudioBookEnabled: Boolean;
                    isUpdateAlbumSetGenreEnabled: Boolean;
                    isUpdateAlbumVisibilityEnabled: Boolean;
                    isUpdateCurrentAudioAlbumEndEnabled: Boolean;
                    isUpdateCurrentAudioAlbumStartEnabled: Boolean;
                    isUpdateCurrentTrackEndEnabled: Boolean;
                    isUpdateCurrentTrackStartEnabled: Boolean;
                    isUpdateFileEndEnabled: Boolean;
                    isUpdateFileStartEnabled: Boolean;
                    isUpdateOldAlbumVisibilityEnabled: Boolean;
                    isUpdatePlaylistContentsEndEnabled: Boolean;
                    isUpdatePlaylistContentsStartEnabled: Boolean;
                    isUpdatingAlbumAcquisitionDateEnabled: Boolean;
                    isUpdatingAlbumEnabled: Boolean;
                    isUpdatingFileCountsEnabled: Boolean;
                    isUpdatingFileEnabled: Boolean;
                    isUpdatingPersonEnabled: Boolean;
                    isUpdatingPlaylistItemWithMediaIdEnabled: Boolean;
                    isUpdatingTrackAcquisitionDateEnabled: Boolean;
                    isUpdatingTrackEnabled: Boolean;

                    traceAddMediaStart(): void {
                        console.warn('shimmed function Providers.traceAddMediaStart');
                    }

                    traceAddMediaEnd(): void {
                        console.warn('shimmed function Providers.traceAddMediaEnd');
                    }

                    traceAddTrackStart(): void {
                        console.warn('shimmed function Providers.traceAddTrackStart');
                    }

                    traceAddTrackEnd(): void {
                        console.warn('shimmed function Providers.traceAddTrackEnd');
                    }

                    traceAddAlbumAndFindTrackIdStart(): void {
                        console.warn('shimmed function Providers.traceAddAlbumAndFindTrackIdStart');
                    }

                    traceAddAlbumAndFindTrackIdEnd(): void {
                        console.warn('shimmed function Providers.traceAddAlbumAndFindTrackIdEnd');
                    }

                    traceFindTrackIdAndAlbumBasedOnTrackSmidStart(): void {
                        console.warn('shimmed function Providers.traceFindTrackIdAndAlbumBasedOnTrackSmidStart');
                    }

                    traceFindTrackIdAndAlbumBasedOnTrackSmidEnd(): void {
                        console.warn('shimmed function Providers.traceFindTrackIdAndAlbumBasedOnTrackSmidEnd');
                    }

                    traceAddAlbumAndFindTrackIdBasedOnMetadataStart(): void {
                        console.warn('shimmed function Providers.traceAddAlbumAndFindTrackIdBasedOnMetadataStart');
                    }

                    traceAddAlbumAndFindTrackIdBasedOnMetadataEnd(): void {
                        console.warn('shimmed function Providers.traceAddAlbumAndFindTrackIdBasedOnMetadataEnd');
                    }

                    traceAddAudioAlbumStart(): void {
                        console.warn('shimmed function Providers.traceAddAudioAlbumStart');
                    }

                    traceAddAudioAlbumEnd(): void {
                        console.warn('shimmed function Providers.traceAddAudioAlbumEnd');
                    }

                    traceFindArtistAndAlbumStart(): void {
                        console.warn('shimmed function Providers.traceFindArtistAndAlbumStart');
                    }

                    traceFindArtistAndAlbumEnd(): void {
                        console.warn('shimmed function Providers.traceFindArtistAndAlbumEnd');
                    }

                    traceUpdateCurrentAudioAlbumStart(): void {
                        console.warn('shimmed function Providers.traceUpdateCurrentAudioAlbumStart');
                    }

                    traceUpdateCurrentAudioAlbumEnd(): void {
                        console.warn('shimmed function Providers.traceUpdateCurrentAudioAlbumEnd');
                    }

                    traceAddPersonLinksStart(): void {
                        console.warn('shimmed function Providers.traceAddPersonLinksStart');
                    }

                    traceAddPersonLinksEnd(): void {
                        console.warn('shimmed function Providers.traceAddPersonLinksEnd');
                    }

                    traceAddPersonStart(): void {
                        console.warn('shimmed function Providers.traceAddPersonStart');
                    }

                    traceAddPersonEnd(): void {
                        console.warn('shimmed function Providers.traceAddPersonEnd');
                    }

                    traceAddPersonLinkStart(): void {
                        console.warn('shimmed function Providers.traceAddPersonLinkStart');
                    }

                    traceAddPersonLinkEnd(): void {
                        console.warn('shimmed function Providers.traceAddPersonLinkEnd');
                    }

                    traceFindAndGetAudioTrackStart(): void {
                        console.warn('shimmed function Providers.traceFindAndGetAudioTrackStart');
                    }

                    traceFindAndGetAudioTrackEnd(): void {
                        console.warn('shimmed function Providers.traceFindAndGetAudioTrackEnd');
                    }

                    traceUpdateCurrentTrackStart(): void {
                        console.warn('shimmed function Providers.traceUpdateCurrentTrackStart');
                    }

                    traceUpdateCurrentTrackEnd(): void {
                        console.warn('shimmed function Providers.traceUpdateCurrentTrackEnd');
                    }

                    traceRecomputeAlbumReleaseYearStart(): void {
                        console.warn('shimmed function Providers.traceRecomputeAlbumReleaseYearStart');
                    }

                    traceRecomputeAlbumReleaseYearEnd(): void {
                        console.warn('shimmed function Providers.traceRecomputeAlbumReleaseYearEnd');
                    }

                    traceAddTrackFileStart(): void {
                        console.warn('shimmed function Providers.traceAddTrackFileStart');
                    }

                    traceAddTrackFileEnd(): void {
                        console.warn('shimmed function Providers.traceAddTrackFileEnd');
                    }

                    traceReflectTrackFilesStateStart(): void {
                        console.warn('shimmed function Providers.traceReflectTrackFilesStateStart');
                    }

                    traceReflectTrackFilesStateEnd(): void {
                        console.warn('shimmed function Providers.traceReflectTrackFilesStateEnd');
                    }

                    traceAddFileStart(): void {
                        console.warn('shimmed function Providers.traceAddFileStart');
                    }

                    traceAddFileEnd(): void {
                        console.warn('shimmed function Providers.traceAddFileEnd');
                    }

                    traceUpdateFileStart(): void {
                        console.warn('shimmed function Providers.traceUpdateFileStart');
                    }

                    traceUpdateFileEnd(): void {
                        console.warn('shimmed function Providers.traceUpdateFileEnd');
                    }

                    traceAddFolderStart(): void {
                        console.warn('shimmed function Providers.traceAddFolderStart');
                    }

                    traceAddFolderEnd(): void {
                        console.warn('shimmed function Providers.traceAddFolderEnd');
                    }

                    traceUpdatePlaylistContentsStart(): void {
                        console.warn('shimmed function Providers.traceUpdatePlaylistContentsStart');
                    }

                    traceUpdatePlaylistContentsEnd(): void {
                        console.warn('shimmed function Providers.traceUpdatePlaylistContentsEnd');
                    }

                    traceFoundTrackBySmid(): void {
                        console.warn('shimmed function Providers.traceFoundTrackBySmid');
                    }

                    traceFoundTrackAndAlbum(albumId: number, artistId: number, trackId: number): void {
                        console.warn('shimmed function Providers.traceFoundTrackAndAlbum');
                    }

                    tracePromotingTrackArtist(albumTitle: string): void {
                        console.warn('shimmed function Providers.tracePromotingTrackArtist');
                    }

                    traceAlbumAsVariousArtists(): void {
                        console.warn('shimmed function Providers.traceAlbumAsVariousArtists');
                    }

                    traceAddingAlbum(albumName: string): void {
                        console.warn('shimmed function Providers.traceAddingAlbum');
                    }

                    traceAddAlbumWithTitleArtist(albumTitle: string, artistId: number): void {
                        console.warn('shimmed function Providers.traceAddAlbumWithTitleArtist');
                    }

                    traceUpdatingAlbum(): void {
                        console.warn('shimmed function Providers.traceUpdatingAlbum');
                    }

                    traceAddingPerson(personName: string): void {
                        console.warn('shimmed function Providers.traceAddingPerson');
                    }

                    traceUpdatingPerson(personName: string): void {
                        console.warn('shimmed function Providers.traceUpdatingPerson');
                    }

                    traceAddingPersonLink(personId: number, mediaId: number): void {
                        console.warn('shimmed function Providers.traceAddingPersonLink');
                    }

                    traceAddingTrackEntry(albumId: number, trackTitle: string, trackNumber: number): void {
                        console.warn('shimmed function Providers.traceAddingTrackEntry');
                    }

                    traceTrackIsAudioBook(): void {
                        console.warn('shimmed function Providers.traceTrackIsAudioBook');
                    }

                    traceFoundExistingTrack(trackId: number): void {
                        console.warn('shimmed function Providers.traceFoundExistingTrack');
                    }

                    traceAddingUnknownArtist(): void {
                        console.warn('shimmed function Providers.traceAddingUnknownArtist');
                    }

                    traceUpdateAlbumSetGenre(genreId: number): void {
                        console.warn('shimmed function Providers.traceUpdateAlbumSetGenre');
                    }

                    traceSetUnknownGenre(): void {
                        console.warn('shimmed function Providers.traceSetUnknownGenre');
                    }

                    traceAddingTrack(trackName: string): void {
                        console.warn('shimmed function Providers.traceAddingTrack');
                    }

                    traceUpdatingTrack(trackName: string): void {
                        console.warn('shimmed function Providers.traceUpdatingTrack');
                    }

                    traceSetTrackRatingFromFile(trackTitle: string, rating: number): void {
                        console.warn('shimmed function Providers.traceSetTrackRatingFromFile');
                    }

                    traceSplitExistingFile(oldTrackId: number, newTrackId: number): void {
                        console.warn('shimmed function Providers.traceSplitExistingFile');
                    }

                    traceAddingFolder(folderPath: string): void {
                        console.warn('shimmed function Providers.traceAddingFolder');
                    }

                    traceAddingFile(filename: string): void {
                        console.warn('shimmed function Providers.traceAddingFile');
                    }

                    traceUpdatingFile(filename: string): void {
                        console.warn('shimmed function Providers.traceUpdatingFile');
                    }

                    traceUpdatingFileCounts(): void {
                        console.warn('shimmed function Providers.traceUpdatingFileCounts');
                    }

                    traceUpdateOldAlbumVisibility(albumId: number): void {
                        console.warn('shimmed function Providers.traceUpdateOldAlbumVisibility');
                    }

                    traceUpdateAlbumVisibility(albumId: number): void {
                        console.warn('shimmed function Providers.traceUpdateAlbumVisibility');
                    }

                    traceUpdatingTrackAcquisitionDate(trackId: number): void {
                        console.warn('shimmed function Providers.traceUpdatingTrackAcquisitionDate');
                    }

                    traceUpdatingAlbumAcquisitionDate(albumId: number): void {
                        console.warn('shimmed function Providers.traceUpdatingAlbumAcquisitionDate');
                    }

                    traceUpdatingPlaylistItemWithMediaId(playlistContentId: number, mediaId: number): void {
                        console.warn('shimmed function Providers.traceUpdatingPlaylistItemWithMediaId');
                    }

                }
                export class ProvidersTemplate implements IProvidersTemplate {
                    // constructor();
                    eventEnabled(eventIndex: number): number {
                        throw new Error('shimmed function ProvidersTemplate.eventEnabled');
                    }

                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void {
                        console.warn('shimmed function ProvidersTemplate.traceTemplateEventDescriptor');
                    }

                    traceTemplate_qqq(_MCGEN_EventIndex: number, albumId: number, artistId: number, trackId: number): void {
                        console.warn('shimmed function ProvidersTemplate.traceTemplate_qqq');
                    }

                    traceTemplate_z(_MCGEN_EventIndex: number, albumTitle: string): void {
                        console.warn('shimmed function ProvidersTemplate.traceTemplate_z');
                    }

                    traceTemplate_zq(_MCGEN_EventIndex: number, albumTitle: string, artistId: number): void {
                        console.warn('shimmed function ProvidersTemplate.traceTemplate_zq');
                    }

                    traceTemplate_qq(_MCGEN_EventIndex: number, personId: number, mediaId: number): void {
                        console.warn('shimmed function ProvidersTemplate.traceTemplate_qq');
                    }

                    traceTemplate_qzq(_MCGEN_EventIndex: number, albumId: number, trackTitle: string, trackNumber: number): void {
                        console.warn('shimmed function ProvidersTemplate.traceTemplate_qzq');
                    }

                    traceTemplate_q(_MCGEN_EventIndex: number, trackId: number): void {
                        console.warn('shimmed function ProvidersTemplate.traceTemplate_q');
                    }

                }
                export class ServiceEventProvider implements IServiceEventProvider {
                    // constructor();
                    isFamilyUserPropertyEnabled: Boolean = false;
                    isPurchaseHistoryGrovelCompletedEnabled: Boolean = false;
                    isPurchaseHistoryGrovelErrorEnabled: Boolean = false;
                    isPurchaseHistoryGrovelStartedEnabled: Boolean = false;
                    isServiceAuthHeaderEnabled: Boolean = false;
                    isServiceAuthHeaderErrorEnabled: Boolean = false;
                    isServiceFamilyUserCompletedEnabled: Boolean = false;
                    isServiceFamilyUserStartedEnabled: Boolean = false;
                    isServiceForgetUserInformationCompletedEnabled: Boolean = false;
                    isServiceForgetUserInformationStartedEnabled: Boolean = false;
                    isServiceGetTicketCompletedEnabled: Boolean = false;
                    isServiceGetTicketErrorEnabled: Boolean = false;
                    isServiceGetTicketStartedEnabled: Boolean = false;
                    isServiceRefreshSignInCompletedEnabled: Boolean = false;
                    isServiceRefreshSignInStartedEnabled: Boolean = false;
                    isServiceSignInCompletedEnabled: Boolean = false;
                    isServiceSignInErrorEnabled: Boolean = false;
                    isServiceSignInStartedEnabled: Boolean = false;
                    isServiceSignOutCompletedEnabled: Boolean = false;
                    isServiceSignOutStartedEnabled: Boolean = false;
                    isServiceSubscriptionInfoCompletedEnabled: Boolean = false;
                    isServiceSubscriptionInfoStartedEnabled: Boolean = false;
                    isServiceUserChangedEnabled: Boolean = false;
                    isServiceUserProfileCompletedEnabled: Boolean = false;
                    isServiceUserProfilePropertyEnabled: Boolean = false;
                    isServiceUserProfileStartedEnabled: Boolean = false;
                    isServiceZestSignInCompletedEnabled: Boolean = false;
                    isServiceZestSignInStartedEnabled: Boolean = false;
                    isSubscriptionInfoPropertyEnabled: Boolean = false;

                    traceServiceSignInError(hresult: number): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceSignInError');
                    }

                    traceServiceGetTicketStarted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceGetTicketStarted');
                    }

                    traceServiceGetTicketCompleted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceGetTicketCompleted');
                    }

                    traceServiceGetTicketError(hresult: number): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceGetTicketError');
                    }

                    traceServiceSignOutStarted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceSignOutStarted');
                    }

                    traceServiceSignOutCompleted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceSignOutCompleted');
                    }

                    traceServiceZestSignInStarted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceZestSignInStarted');
                    }

                    traceServiceZestSignInCompleted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceZestSignInCompleted');
                    }

                    traceServiceRefreshSignInStarted(): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceRefreshSignInStarted');
                    }

                    traceServiceRefreshSignInCompleted(): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceRefreshSignInCompleted');
                    }

                    traceServiceAuthHeader(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceAuthHeader');
                    }

                    traceServiceUserProfileProperty(name: string, value: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceUserProfileProperty');
                    }

                    traceServiceUserProfileStarted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceUserProfileStarted');
                    }

                    traceServiceUserProfileCompleted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceUserProfileCompleted');
                    }

                    traceFamilyUserProperty(name: string, value: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceFamilyUserProperty');
                    }

                    traceServiceFamilyUserStarted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceFamilyUserStarted');
                    }

                    traceServiceFamilyUserCompleted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceFamilyUserCompleted');
                    }

                    traceSubscriptionInfoProperty(name: string, value: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceSubscriptionInfoProperty');
                    }

                    traceServiceSubscriptionInfoStarted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceSubscriptionInfoStarted');
                    }

                    traceServiceSubscriptionInfoCompleted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceSubscriptionInfoCompleted');
                    }

                    traceServiceUserChanged(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceUserChanged');
                    }

                    traceServiceForgetUserInformationStarted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceForgetUserInformationStarted');
                    }

                    traceServiceForgetUserInformationCompleted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceForgetUserInformationCompleted');
                    }

                    traceServiceSignInStarted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceSignInStarted');
                    }

                    traceServiceSignInCompleted(message: string): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceSignInCompleted');
                    }

                    traceServiceAuthHeaderError(hresult: number): void {
                        console.warn('shimmed function ServiceEventProvider.traceServiceAuthHeaderError');
                    }

                    tracePurchaseHistoryGrovelStarted(): void {
                        console.warn('shimmed function ServiceEventProvider.tracePurchaseHistoryGrovelStarted');
                    }

                    tracePurchaseHistoryGrovelCompleted(hresult: number): void {
                        console.warn('shimmed function ServiceEventProvider.tracePurchaseHistoryGrovelCompleted');
                    }

                    tracePurchaseHistoryGrovelError(hresult: number): void {
                        console.warn('shimmed function ServiceEventProvider.tracePurchaseHistoryGrovelError');
                    }

                }
                export class ServiceEventProviderTemplate implements IServiceEventProviderTemplate {
                    // constructor();
                    eventEnabled(eventIndex: number): number {
                        throw new Error('shimmed function ServiceEventProviderTemplate.eventEnabled');
                    }

                    traceTemplate_d(_MCGEN_EventIndex: number, hresult: number): void {
                        console.warn('shimmed function ServiceEventProviderTemplate.traceTemplate_d');
                    }

                    traceTemplate_z(_MCGEN_EventIndex: number, message: string): void {
                        console.warn('shimmed function ServiceEventProviderTemplate.traceTemplate_z');
                    }

                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void {
                        console.warn('shimmed function ServiceEventProviderTemplate.traceTemplateEventDescriptor');
                    }

                    traceTemplate_zz(_MCGEN_EventIndex: number, name: string, value: string): void {
                        console.warn('shimmed function ServiceEventProviderTemplate.traceTemplate_zz');
                    }

                }
                export class Shell implements IShell {
                    // constructor();
                    isAcceptTermsOfService_CancelEnabled: Boolean = false;
                    isAcceptTermsOfService_FinishEnabled: Boolean = false;
                    isAcceptTermsOfService_StartEnabled: Boolean = false;
                    isActionListControl_ItemAddedEnabled: Boolean = false;
                    isActionListControl_ItemRemovedEnabled: Boolean = false;
                    isActionListControl_ItemsChangedEnabled: Boolean = false;
                    isAction_InvokedEnabled: Boolean = false;
                    isAdControl_RefreshedEnabled: Boolean = false;
                    isAdService_AudioAdPlayedEnabled: Boolean = false;
                    isAdService_AudioAdPlayingEnabled: Boolean = false;
                    isAdService_AudioAdRefreshedEnabled: Boolean = false;
                    isAdService_AudioAdRefreshingEnabled: Boolean = false;
                    isAdService_InitializedEnabled: Boolean = false;
                    isAdService_StreamingTrackPlayedEnabled: Boolean = false;
                    isAdService_StreamingTrackPlayingEnabled: Boolean = false;
                    isAdService_TrackPlayingEnabled: Boolean = false;
                    isAdService_UnloadedEnabled: Boolean = false;
                    isAdService_VideoAdRefreshedEnabled: Boolean = false;
                    isAdService_VideoAdRefreshingEnabled: Boolean = false;
                    isAd_Companion_HiddenEnabled: Boolean = false;
                    isAd_Companion_ShownEnabled: Boolean = false;
                    isControlFramework_ControlCompleteInitializationDequeuedForRootEnabled: Boolean = false;
                    isControlFramework_ControlCompleteInitializationQueuedEnabled: Boolean = false;
                    isControlFramework_ControlCompleteInitializationQueuedForRootEnabled: Boolean = false;
                    isControlFramework_ControlCompleteInitializationRequeuedEnabled: Boolean = false;
                    isControlFramework_ControlConstructedEnabled: Boolean = false;
                    isControlFramework_ControlInitializationCompletedEnabled: Boolean = false;
                    isControlFramework_ControlInitializationStartedEnabled: Boolean = false;
                    isControlFramework_ControlTemplateLoadCompletedEnabled: Boolean = false;
                    isControlFramework_ControlTemplateLoadStartedEnabled: Boolean = false;
                    isControlFramework_TemplateLoadCompletedEnabled: Boolean = false;
                    isControlFramework_TemplateLoadCompletedFromCacheEnabled: Boolean = false;
                    isControlFramework_TemplateLoadFragmentCompletedEnabled: Boolean = false;
                    isControlFramework_TemplateLoadFragmentStartedEnabled: Boolean = false;
                    isControlFramework_TemplateLoadStartedEnabled: Boolean = false;
                    isControlFramework_TemplateLoadTemplateExtractedEnabled: Boolean = false;
                    isControlFramework_UserInitializationCompletedEnabled: Boolean = false;
                    isControlFramework_UserInitializationStartedEnabled: Boolean = false;
                    isCreateAccount_CancelEnabled: Boolean = false;
                    isCreateAccount_ErrorEnabled: Boolean = false;
                    isCreateAccount_FinishEnabled: Boolean = false;
                    isCreateAccount_StartEnabled: Boolean = false;
                    isDeepLink_Protocol_FailedEnabled: Boolean = false;
                    isDeepLink_Protocol_InvokedEnabled: Boolean = false;
                    isDeepLink_Tile_FailedEnabled: Boolean = false;
                    isDeepLink_Tile_InvokedEnabled: Boolean = false;
                    isDom_Content_LoadedEnabled: Boolean = false;
                    isFinish_ProcessAllEnabled: Boolean = false;
                    isGalleryControl_InLine_CloseEnabled: Boolean = false;
                    isGalleryControl_InLine_Open_EndEnabled: Boolean = false;
                    isGalleryControl_InLine_Open_ErrorEnabled: Boolean = false;
                    isGalleryControl_InLine_Open_StartEnabled: Boolean = false;
                    isGalleryControl_Load_EndEnabled: Boolean = false;
                    isGalleryControl_Load_StartEnabled: Boolean = false;
                    isGalleryControl_LoadingState_ChangedEnabled: Boolean = false;
                    isHomeHub_Load_EndEnabled: Boolean = false;
                    isHomeHub_Load_StartEnabled: Boolean = false;
                    isHomeHub_ReadyEnabled: Boolean = false;
                    isHubStrip_Load_EndEnabled: Boolean = false;
                    isHubStrip_Load_StartEnabled: Boolean = false;
                    isHubStrip_MoveToCompleteEnabled: Boolean = false;
                    isHubStrip_ReadyEnabled: Boolean = false;
                    isHub_Load_EndEnabled: Boolean = false;
                    isHub_Load_StartEnabled: Boolean = false;
                    isHub_ReadyEnabled: Boolean = false;
                    isJavascript_Load_EndEnabled: Boolean = false;
                    isJavascript_Load_StartEnabled: Boolean = false;
                    isLocation_ChangedEnabled: Boolean = false;
                    isMarketplaceBrowse_PageLoadStartEnabled: Boolean = false;
                    isMediaStateEngine_ActionsChangedEnabled: Boolean = false;
                    isMediaStateEngine_ButtonsChangedEnabled: Boolean = false;
                    isMediaStateEngine_InitializedEnabled: Boolean = false;
                    isMediaStateEngine_UnloadedEnabled: Boolean = false;
                    isMediaStateEngine_UpdateStateEnabled: Boolean = false;
                    isModifierControl_PopupClosedEnabled: Boolean = false;
                    isModifierControl_PopupOpenedEnabled: Boolean = false;
                    isModifierControl_SelectionChangedEnabled: Boolean = false;
                    isNavigable_Loading_DoneEnabled: Boolean = false;
                    isNavigation_StartedEnabled: Boolean = false;
                    isNotification_NotificationArrivedEnabled: Boolean = false;
                    isNotification_NotificationClickedEnabled: Boolean = false;
                    isNotification_PageSelectedEnabled: Boolean = false;
                    isOverlay_DismissedEnabled: Boolean = false;
                    isOverlay_ShownEnabled: Boolean = false;
                    isPanel_Load_EndEnabled: Boolean = false;
                    isPanel_Load_StartEnabled: Boolean = false;
                    isPanel_ReadyEnabled: Boolean = false;
                    isPerfTrack_Trigger_AlbumDetailsRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchCompletedEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchPlayNonProtectedContentEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchPlayProtectedContentEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchToCollectionCompletedEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchToExploreCompleteEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchToMoviesStoreEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchToOOBECompleteEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchToRadioCompleteEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchToShopBooksCompleteEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchToShopMagsCompleteEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchToTvStoreEnabled: Boolean = false;
                    isPerfTrack_Trigger_AppLaunchToVideoCollectionEnabled: Boolean = false;
                    isPerfTrack_Trigger_ArtistDetailsRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_BNDeviceRegistrationRequestSucceededEnabled: Boolean = false;
                    isPerfTrack_Trigger_BNLoginRequestSucceededEnabled: Boolean = false;
                    isPerfTrack_Trigger_BookDetailsRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_CategoryGalleryRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_CollectionGalleryRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_DevicesPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_ExplorePageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_FeaturedMoviesPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_FeaturedTvPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_FlexHubPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_IssuesGalleryRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_LastNightsTvPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_MagDetailsRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_MarketplaceGalleryRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_MovieDetailsRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_MoviesCollectionPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_MoviesStorePageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_NewMoviesPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_NewTvPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_NowPlayingPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_PersonalCollectionPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_PlayNonProtectedInAppPlaybackStartedEnabled: Boolean = false;
                    isPerfTrack_Trigger_PlayProtectedInAppPlaybackStartedEnabled: Boolean = false;
                    isPerfTrack_Trigger_PlaylistDetailsRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_PopoverRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_RadioPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_SearchAutoCompleteResultsReceivedEnabled: Boolean = false;
                    isPerfTrack_Trigger_SearchCatalogRequestToQueryResultsEnabled: Boolean = false;
                    isPerfTrack_Trigger_SearchGalleryRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_SearchLibraryRequestToQueryResultsEnabled: Boolean = false;
                    isPerfTrack_Trigger_ShopBooksPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_ShopMagsPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_StandardGalleryRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_TVDetailsRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_TopSellingMoviesPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_TopSellingTvPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_TvCollectionPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_TvStorePageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_VideoCollectionPageRequestToLoadEnabled: Boolean = false;
                    isPerfTrack_Trigger_WebBlendRequestToLoadEnabled: Boolean = false;
                    isPurchaseFlowGames_CancelEnabled: Boolean = false;
                    isPurchaseFlowGames_ErrorEnabled: Boolean = false;
                    isPurchaseFlowGames_FinishEnabled: Boolean = false;
                    isPurchaseFlowGames_RejectionEnabled: Boolean = false;
                    isPurchaseFlowGames_StartEnabled: Boolean = false;
                    isPurchaseFlowMusic_CancelEnabled: Boolean = false;
                    isPurchaseFlowMusic_ErrorEnabled: Boolean = false;
                    isPurchaseFlowMusic_FinishEnabled: Boolean = false;
                    isPurchaseFlowMusic_RejectionEnabled: Boolean = false;
                    isPurchaseFlowMusic_StartEnabled: Boolean = false;
                    isPurchaseFlowVideo_CancelEnabled: Boolean = false;
                    isPurchaseFlowVideo_DoneEnabled: Boolean = false;
                    isPurchaseFlowVideo_DownloadEnabled: Boolean = false;
                    isPurchaseFlowVideo_ErrorEnabled: Boolean = false;
                    isPurchaseFlowVideo_FinishEnabled: Boolean = false;
                    isPurchaseFlowVideo_RejectionEnabled: Boolean = false;
                    isPurchaseFlowVideo_StartEnabled: Boolean = false;
                    isPurchaseFlowVideo_Start_Bandwidth_TestEnabled: Boolean = false;
                    isPurchaseFlowVideo_StreamEnabled: Boolean = false;
                    isQueries_BeginEnabled: Boolean = false;
                    isQueries_CompleteEnabled: Boolean = false;
                    isSearch_CompletedEnabled: Boolean = false;
                    isSearch_StartEnabled: Boolean = false;
                    isServiceQuery_ParseCompleteEnabled: Boolean = false;
                    isServiceQuery_QueryReturnEnabled: Boolean = false;
                    isServiceQuery_QueryStartEnabled: Boolean = false;
                    isSettingsAbout_LaunchCompleteEnabled: Boolean = false;
                    isSettingsAbout_LaunchEnabled: Boolean = false;
                    isSettingsAccount_ErrorEnabled: Boolean = false;
                    isSettingsAccount_FinishEnabled: Boolean = false;
                    isSettingsAccount_LaunchCompleteEnabled: Boolean = false;
                    isSettingsAccount_LaunchEnabled: Boolean = false;
                    isSettingsCaptions_LaunchCompleteEnabled: Boolean = false;
                    isSettingsCaptions_LaunchEnabled: Boolean = false;
                    isSettingsFeedback_LaunchCompleteEnabled: Boolean = false;
                    isSettingsFeedback_LaunchEnabled: Boolean = false;
                    isSettingsHome_FinishEnabled: Boolean = false;
                    isSettingsHome_StartEnabled: Boolean = false;
                    isSettingsPopulate_EndEnabled: Boolean = false;
                    isSettingsPopulate_StartEnabled: Boolean = false;
                    isSettingsPreferences_LaunchCompleteEnabled: Boolean = false;
                    isSettingsPreferences_LaunchEnabled: Boolean = false;
                    isSettingsWinJSPopulate_StartEnabled: Boolean = false;
                    isSettings_BackToHomeEnabled: Boolean = false;
                    isShrinkAndStayHeader_DismissedEnabled: Boolean = false;
                    isShrinkAndStayHeader_ShownEnabled: Boolean = false;
                    isSignInResultEnabled: Boolean = false;
                    isSplashScreen_RemovedEnabled: Boolean = false;
                    isSubscriptionSignup_CancelEnabled: Boolean = false;
                    isSubscriptionSignup_ErrorEnabled: Boolean = false;
                    isSubscriptionSignup_FinishEnabled: Boolean = false;
                    isSubscriptionSignup_StartEnabled: Boolean = false;
                    isTest_Event_ErrorEnabled: Boolean = false;
                    isTest_Event_ResultEnabled: Boolean = false;
                    isTest_Event_TraceEnabled: Boolean = false;
                    isVideo_Ad_CompletedEnabled: Boolean = false;
                    isVideo_Ad_ErrorEnabled: Boolean = false;
                    isVideo_Ad_SkippedEnabled: Boolean = false;
                    isVideo_Ad_StartedEnabled: Boolean = false;
                    isVideo_Ad_UpSellEnabled: Boolean = false;
                    isWebExperience_CancelEnabled: Boolean = false;
                    isWebExperience_ErrorEnabled: Boolean = false;
                    isWebExperience_FinishEnabled: Boolean = false;
                    isWebExperience_PageLoadEnabled: Boolean = false;
                    isWebExperience_StartEnabled: Boolean = false;
                    isWinJSNavigation_ContentCompleteEnabled: Boolean = false;

                    traceNavigable_Loading_Done(moniker: string): void {
                        console.warn('shimmed function Shell.traceNavigable_Loading_Done');
                    }

                    traceQueries_Begin(moniker: string): void {
                        console.warn('shimmed function Shell.traceQueries_Begin');
                    }

                    traceQueries_Complete(moniker: string): void {
                        console.warn('shimmed function Shell.traceQueries_Complete');
                    }

                    traceJavascript_Load_Start(): void {
                        console.warn('shimmed function Shell.traceJavascript_Load_Start');
                    }

                    traceSplashScreen_Removed(): void {
                        console.warn('shimmed function Shell.traceSplashScreen_Removed');
                    }

                    traceJavascript_Load_End(): void {
                        console.warn('shimmed function Shell.traceJavascript_Load_End');
                    }

                    traceDom_Content_Loaded(): void {
                        console.warn('shimmed function Shell.traceDom_Content_Loaded');
                    }

                    traceFinish_ProcessAll(): void {
                        console.warn('shimmed function Shell.traceFinish_ProcessAll');
                    }

                    traceNavigation_Started(moniker: string): void {
                        console.warn('shimmed function Shell.traceNavigation_Started');
                    }

                    traceLocation_Changed(pageMoniker: string, hubMoniker: string, panelMoniker: string): void {
                        console.warn('shimmed function Shell.traceLocation_Changed');
                    }

                    traceOverlay_Shown(templateId: string): void {
                        console.warn('shimmed function Shell.traceOverlay_Shown');
                    }

                    traceOverlay_Dismissed(templateId: string): void {
                        console.warn('shimmed function Shell.traceOverlay_Dismissed');
                    }

                    traceAction_Invoked(actionId: string): void {
                        console.warn('shimmed function Shell.traceAction_Invoked');
                    }

                    traceDeepLink_Protocol_Invoked(url: string): void {
                        console.warn('shimmed function Shell.traceDeepLink_Protocol_Invoked');
                    }

                    traceDeepLink_Protocol_Failed(url: string): void {
                        console.warn('shimmed function Shell.traceDeepLink_Protocol_Failed');
                    }

                    traceDeepLink_Tile_Invoked(__arguments: string): void {
                        console.warn('shimmed function Shell.traceDeepLink_Tile_Invoked');
                    }

                    traceDeepLink_Tile_Failed(__arguments: string): void {
                        console.warn('shimmed function Shell.traceDeepLink_Tile_Failed');
                    }

                    traceSearch_Start(): void {
                        console.warn('shimmed function Shell.traceSearch_Start');
                    }

                    traceSearch_Completed(): void {
                        console.warn('shimmed function Shell.traceSearch_Completed');
                    }

                    traceWebExperience_Start(templateId: string): void {
                        console.warn('shimmed function Shell.traceWebExperience_Start');
                    }

                    traceWebExperience_Finish(templateId: string): void {
                        console.warn('shimmed function Shell.traceWebExperience_Finish');
                    }

                    traceWebExperience_Cancel(templateId: string): void {
                        console.warn('shimmed function Shell.traceWebExperience_Cancel');
                    }

                    traceWebExperience_Error(templateId: string): void {
                        console.warn('shimmed function Shell.traceWebExperience_Error');
                    }

                    traceWebExperience_PageLoad(templateId: string): void {
                        console.warn('shimmed function Shell.traceWebExperience_PageLoad');
                    }

                    traceTest_Event_Result(result: Boolean, message: string): void {
                        console.warn('shimmed function Shell.traceTest_Event_Result');
                    }

                    traceTest_Event_Trace(id: number, message: string): void {
                        console.warn('shimmed function Shell.traceTest_Event_Trace');
                    }

                    traceTest_Event_Error(id: number, message: string): void {
                        console.warn('shimmed function Shell.traceTest_Event_Error');
                    }

                    traceHubStrip_Load_Start(moniker: string): void {
                        console.warn('shimmed function Shell.traceHubStrip_Load_Start');
                    }

                    traceHubStrip_Load_End(moniker: string): void {
                        console.warn('shimmed function Shell.traceHubStrip_Load_End');
                    }

                    traceHub_Load_Start(moniker: string): void {
                        console.warn('shimmed function Shell.traceHub_Load_Start');
                    }

                    traceHub_Load_End(moniker: string): void {
                        console.warn('shimmed function Shell.traceHub_Load_End');
                    }

                    tracePanel_Load_Start(moniker: string): void {
                        console.warn('shimmed function Shell.tracePanel_Load_Start');
                    }

                    tracePanel_Load_End(moniker: string): void {
                        console.warn('shimmed function Shell.tracePanel_Load_End');
                    }

                    traceHubStrip_Ready(moniker: string): void {
                        console.warn('shimmed function Shell.traceHubStrip_Ready');
                    }

                    traceHub_Ready(moniker: string): void {
                        console.warn('shimmed function Shell.traceHub_Ready');
                    }

                    tracePanel_Ready(moniker: string): void {
                        console.warn('shimmed function Shell.tracePanel_Ready');
                    }

                    traceHubStrip_MoveToComplete(moniker: string): void {
                        console.warn('shimmed function Shell.traceHubStrip_MoveToComplete');
                    }

                    traceCreateAccount_Start(templateId: string): void {
                        console.warn('shimmed function Shell.traceCreateAccount_Start');
                    }

                    traceCreateAccount_Finish(templateId: string): void {
                        console.warn('shimmed function Shell.traceCreateAccount_Finish');
                    }

                    traceCreateAccount_Cancel(templateId: string): void {
                        console.warn('shimmed function Shell.traceCreateAccount_Cancel');
                    }

                    traceCreateAccount_Error(templateId: string): void {
                        console.warn('shimmed function Shell.traceCreateAccount_Error');
                    }

                    traceAcceptTermsOfService_Start(templateId: string): void {
                        console.warn('shimmed function Shell.traceAcceptTermsOfService_Start');
                    }

                    traceAcceptTermsOfService_Finish(templateId: string): void {
                        console.warn('shimmed function Shell.traceAcceptTermsOfService_Finish');
                    }

                    traceAcceptTermsOfService_Cancel(templateId: string): void {
                        console.warn('shimmed function Shell.traceAcceptTermsOfService_Cancel');
                    }

                    traceSignInResult(templateId: string): void {
                        console.warn('shimmed function Shell.traceSignInResult');
                    }

                    traceSettingsHome_Start(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsHome_Start');
                    }

                    traceSettingsHome_Finish(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsHome_Finish');
                    }

                    traceSettingsAccount_Launch(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsAccount_Launch');
                    }

                    traceSettingsAccount_Finish(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsAccount_Finish');
                    }

                    traceSettingsAccount_Error(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsAccount_Error');
                    }

                    traceSettingsPreferences_Launch(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsPreferences_Launch');
                    }

                    traceSettingsAbout_Launch(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsAbout_Launch');
                    }

                    traceSettingsFeedback_Launch(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsFeedback_Launch');
                    }

                    traceSettingsCaptions_Launch(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsCaptions_Launch');
                    }

                    traceSettingsPopulate_Start(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsPopulate_Start');
                    }

                    traceSettingsWinJSPopulate_Start(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsWinJSPopulate_Start');
                    }

                    traceSettingsPopulate_End(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsPopulate_End');
                    }

                    tracePurchaseFlowGames_Start(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowGames_Start');
                    }

                    tracePurchaseFlowGames_Finish(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowGames_Finish');
                    }

                    tracePurchaseFlowGames_Cancel(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowGames_Cancel');
                    }

                    tracePurchaseFlowGames_Error(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowGames_Error');
                    }

                    tracePurchaseFlowGames_Rejection(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowGames_Rejection');
                    }

                    traceMarketplaceBrowse_PageLoadStart(templateId: string): void {
                        console.warn('shimmed function Shell.traceMarketplaceBrowse_PageLoadStart');
                    }

                    traceServiceQuery_QueryStart(templateId: string): void {
                        console.warn('shimmed function Shell.traceServiceQuery_QueryStart');
                    }

                    traceServiceQuery_QueryReturn(templateId: string): void {
                        console.warn('shimmed function Shell.traceServiceQuery_QueryReturn');
                    }

                    traceServiceQuery_ParseComplete(templateId: string): void {
                        console.warn('shimmed function Shell.traceServiceQuery_ParseComplete');
                    }

                    traceSettingsAccount_LaunchComplete(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsAccount_LaunchComplete');
                    }

                    traceSettingsPreferences_LaunchComplete(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsPreferences_LaunchComplete');
                    }

                    traceSettingsAbout_LaunchComplete(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsAbout_LaunchComplete');
                    }

                    traceSettings_BackToHome(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettings_BackToHome');
                    }

                    traceSettingsFeedback_LaunchComplete(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsFeedback_LaunchComplete');
                    }

                    traceSettingsCaptions_LaunchComplete(templateId: string): void {
                        console.warn('shimmed function Shell.traceSettingsCaptions_LaunchComplete');
                    }

                    traceHomeHub_Load_Start(): void {
                        console.warn('shimmed function Shell.traceHomeHub_Load_Start');
                    }

                    traceHomeHub_Load_End(): void {
                        console.warn('shimmed function Shell.traceHomeHub_Load_End');
                    }

                    traceHomeHub_Ready(): void {
                        console.warn('shimmed function Shell.traceHomeHub_Ready');
                    }

                    tracePurchaseFlowMusic_Start(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowMusic_Start');
                    }

                    tracePurchaseFlowMusic_Finish(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowMusic_Finish');
                    }

                    tracePurchaseFlowMusic_Cancel(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowMusic_Cancel');
                    }

                    tracePurchaseFlowMusic_Error(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowMusic_Error');
                    }

                    tracePurchaseFlowMusic_Rejection(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowMusic_Rejection');
                    }

                    tracePurchaseFlowVideo_Start(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowVideo_Start');
                    }

                    tracePurchaseFlowVideo_Finish(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowVideo_Finish');
                    }

                    tracePurchaseFlowVideo_Cancel(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowVideo_Cancel');
                    }

                    tracePurchaseFlowVideo_Error(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowVideo_Error');
                    }

                    tracePurchaseFlowVideo_Start_Bandwidth_Test(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowVideo_Start_Bandwidth_Test');
                    }

                    tracePurchaseFlowVideo_Download(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowVideo_Download');
                    }

                    tracePurchaseFlowVideo_Stream(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowVideo_Stream');
                    }

                    tracePurchaseFlowVideo_Done(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowVideo_Done');
                    }

                    tracePurchaseFlowVideo_Rejection(templateId: string): void {
                        console.warn('shimmed function Shell.tracePurchaseFlowVideo_Rejection');
                    }

                    traceGalleryControl_Load_Start(): void {
                        console.warn('shimmed function Shell.traceGalleryControl_Load_Start');
                    }

                    traceGalleryControl_Load_End(): void {
                        console.warn('shimmed function Shell.traceGalleryControl_Load_End');
                    }

                    traceGalleryControl_InLine_Open_Start(): void {
                        console.warn('shimmed function Shell.traceGalleryControl_InLine_Open_Start');
                    }

                    traceGalleryControl_InLine_Open_End(): void {
                        console.warn('shimmed function Shell.traceGalleryControl_InLine_Open_End');
                    }

                    traceGalleryControl_InLine_Open_Error(): void {
                        console.warn('shimmed function Shell.traceGalleryControl_InLine_Open_Error');
                    }

                    traceGalleryControl_InLine_Close(): void {
                        console.warn('shimmed function Shell.traceGalleryControl_InLine_Close');
                    }

                    traceGalleryControl_LoadingState_Changed(newState: string): void {
                        console.warn('shimmed function Shell.traceGalleryControl_LoadingState_Changed');
                    }

                    traceModifierControl_SelectionChanged(value: string, source: string): void {
                        console.warn('shimmed function Shell.traceModifierControl_SelectionChanged');
                    }

                    traceModifierControl_PopupOpened(templateId: string): void {
                        console.warn('shimmed function Shell.traceModifierControl_PopupOpened');
                    }

                    traceModifierControl_PopupClosed(templateId: string): void {
                        console.warn('shimmed function Shell.traceModifierControl_PopupClosed');
                    }

                    traceActionListControl_ItemAdded(templateId: string): void {
                        console.warn('shimmed function Shell.traceActionListControl_ItemAdded');
                    }

                    traceActionListControl_ItemRemoved(templateId: string): void {
                        console.warn('shimmed function Shell.traceActionListControl_ItemRemoved');
                    }

                    traceActionListControl_ItemsChanged(templateId: string): void {
                        console.warn('shimmed function Shell.traceActionListControl_ItemsChanged');
                    }

                    traceControlFramework_ControlConstructed(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_ControlConstructed');
                    }

                    traceControlFramework_ControlCompleteInitializationQueued(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_ControlCompleteInitializationQueued');
                    }

                    traceControlFramework_ControlCompleteInitializationRequeued(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_ControlCompleteInitializationRequeued');
                    }

                    traceControlFramework_ControlInitializationStarted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_ControlInitializationStarted');
                    }

                    traceControlFramework_UserInitializationStarted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_UserInitializationStarted');
                    }

                    traceControlFramework_ControlTemplateLoadStarted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_ControlTemplateLoadStarted');
                    }

                    traceControlFramework_ControlTemplateLoadCompleted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_ControlTemplateLoadCompleted');
                    }

                    traceControlFramework_TemplateLoadStarted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_TemplateLoadStarted');
                    }

                    traceControlFramework_TemplateLoadFragmentStarted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_TemplateLoadFragmentStarted');
                    }

                    traceControlFramework_TemplateLoadFragmentCompleted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_TemplateLoadFragmentCompleted');
                    }

                    traceControlFramework_TemplateLoadTemplateExtracted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_TemplateLoadTemplateExtracted');
                    }

                    traceControlFramework_TemplateLoadCompletedFromCache(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_TemplateLoadCompletedFromCache');
                    }

                    traceControlFramework_TemplateLoadCompleted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_TemplateLoadCompleted');
                    }

                    traceControlFramework_ControlInitializationCompleted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_ControlInitializationCompleted');
                    }

                    traceControlFramework_UserInitializationCompleted(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_UserInitializationCompleted');
                    }

                    traceControlFramework_ControlCompleteInitializationQueuedForRoot(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_ControlCompleteInitializationQueuedForRoot');
                    }

                    traceControlFramework_ControlCompleteInitializationDequeuedForRoot(templateId: string): void {
                        console.warn('shimmed function Shell.traceControlFramework_ControlCompleteInitializationDequeuedForRoot');
                    }

                    traceSubscriptionSignup_Start(templateId: string): void {
                        console.warn('shimmed function Shell.traceSubscriptionSignup_Start');
                    }

                    traceSubscriptionSignup_Finish(templateId: string): void {
                        console.warn('shimmed function Shell.traceSubscriptionSignup_Finish');
                    }

                    traceSubscriptionSignup_Cancel(templateId: string): void {
                        console.warn('shimmed function Shell.traceSubscriptionSignup_Cancel');
                    }

                    traceSubscriptionSignup_Error(templateId: string): void {
                        console.warn('shimmed function Shell.traceSubscriptionSignup_Error');
                    }

                    traceNotification_NotificationArrived(templateId: string): void {
                        console.warn('shimmed function Shell.traceNotification_NotificationArrived');
                    }

                    traceNotification_PageSelected(templateId: string): void {
                        console.warn('shimmed function Shell.traceNotification_PageSelected');
                    }

                    traceNotification_NotificationClicked(templateId: string): void {
                        console.warn('shimmed function Shell.traceNotification_NotificationClicked');
                    }

                    traceAd_Companion_Shown(linkUrl: string, imageUrl: string): void {
                        console.warn('shimmed function Shell.traceAd_Companion_Shown');
                    }

                    traceAd_Companion_Hidden(linkUrl: string, imageUrl: string): void {
                        console.warn('shimmed function Shell.traceAd_Companion_Hidden');
                    }

                    traceVideo_Ad_Started(videoUrl: string, clickUrl: string): void {
                        console.warn('shimmed function Shell.traceVideo_Ad_Started');
                    }

                    traceVideo_Ad_Completed(videoUrl: string, clickUrl: string): void {
                        console.warn('shimmed function Shell.traceVideo_Ad_Completed');
                    }

                    traceVideo_Ad_Skipped(videoUrl: string, clickUrl: string): void {
                        console.warn('shimmed function Shell.traceVideo_Ad_Skipped');
                    }

                    traceVideo_Ad_Error(videoUrl: string, clickUrl: string): void {
                        console.warn('shimmed function Shell.traceVideo_Ad_Error');
                    }

                    traceVideo_Ad_UpSell(videoUrl: string, clickUrl: string): void {
                        console.warn('shimmed function Shell.traceVideo_Ad_UpSell');
                    }

                    traceAdControl_Refreshed(applicationId: string, unitId: string): void {
                        console.warn('shimmed function Shell.traceAdControl_Refreshed');
                    }

                    traceAdService_Initialized(): void {
                        console.warn('shimmed function Shell.traceAdService_Initialized');
                    }

                    traceAdService_Unloaded(): void {
                        console.warn('shimmed function Shell.traceAdService_Unloaded');
                    }

                    traceAdService_AudioAdRefreshing(): void {
                        console.warn('shimmed function Shell.traceAdService_AudioAdRefreshing');
                    }

                    traceAdService_AudioAdRefreshed(): void {
                        console.warn('shimmed function Shell.traceAdService_AudioAdRefreshed');
                    }

                    traceAdService_VideoAdRefreshing(): void {
                        console.warn('shimmed function Shell.traceAdService_VideoAdRefreshing');
                    }

                    traceAdService_VideoAdRefreshed(): void {
                        console.warn('shimmed function Shell.traceAdService_VideoAdRefreshed');
                    }

                    traceAdService_AudioAdPlaying(): void {
                        console.warn('shimmed function Shell.traceAdService_AudioAdPlaying');
                    }

                    traceAdService_AudioAdPlayed(): void {
                        console.warn('shimmed function Shell.traceAdService_AudioAdPlayed');
                    }

                    traceAdService_StreamingTrackPlaying(): void {
                        console.warn('shimmed function Shell.traceAdService_StreamingTrackPlaying');
                    }

                    traceAdService_StreamingTrackPlayed(): void {
                        console.warn('shimmed function Shell.traceAdService_StreamingTrackPlayed');
                    }

                    traceAdService_TrackPlaying(): void {
                        console.warn('shimmed function Shell.traceAdService_TrackPlaying');
                    }

                    traceMediaStateEngine_Initialized(mediaType: string, serviceId: string, libraryId: string): void {
                        console.warn('shimmed function Shell.traceMediaStateEngine_Initialized');
                    }

                    traceMediaStateEngine_Unloaded(mediaType: string, serviceId: string, libraryId: string): void {
                        console.warn('shimmed function Shell.traceMediaStateEngine_Unloaded');
                    }

                    traceMediaStateEngine_UpdateState(mediaType: string, serviceId: string, libraryId: string): void {
                        console.warn('shimmed function Shell.traceMediaStateEngine_UpdateState');
                    }

                    traceMediaStateEngine_ButtonsChanged(mediaType: string, serviceId: string, libraryId: string): void {
                        console.warn('shimmed function Shell.traceMediaStateEngine_ButtonsChanged');
                    }

                    traceMediaStateEngine_ActionsChanged(mediaType: string, serviceId: string, libraryId: string): void {
                        console.warn('shimmed function Shell.traceMediaStateEngine_ActionsChanged');
                    }

                    traceWinJSNavigation_ContentComplete(location: string): void {
                        console.warn('shimmed function Shell.traceWinJSNavigation_ContentComplete');
                    }

                    traceShrinkAndStayHeader_Shown(): void {
                        console.warn('shimmed function Shell.traceShrinkAndStayHeader_Shown');
                    }

                    traceShrinkAndStayHeader_Dismissed(): void {
                        console.warn('shimmed function Shell.traceShrinkAndStayHeader_Dismissed');
                    }

                    tracePerfTrack_Trigger_AppLaunchCompleted(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchCompleted');
                    }

                    tracePerfTrack_Trigger_AppLaunchToCollectionCompleted(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchToCollectionCompleted');
                    }

                    tracePerfTrack_Trigger_AppLaunchPlayNonProtectedContent(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchPlayNonProtectedContent');
                    }

                    tracePerfTrack_Trigger_AppLaunchPlayProtectedContent(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchPlayProtectedContent');
                    }

                    tracePerfTrack_Trigger_PlayProtectedInAppPlaybackStarted(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_PlayProtectedInAppPlaybackStarted');
                    }

                    tracePerfTrack_Trigger_PlayNonProtectedInAppPlaybackStarted(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_PlayNonProtectedInAppPlaybackStarted');
                    }

                    tracePerfTrack_Trigger_CollectionGalleryRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_CollectionGalleryRequestToLoad');
                    }

                    tracePerfTrack_Trigger_SearchGalleryRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_SearchGalleryRequestToLoad');
                    }

                    tracePerfTrack_Trigger_PopoverRequestToLoad(name: string, durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_PopoverRequestToLoad');
                    }

                    tracePerfTrack_Trigger_MarketplaceGalleryRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_MarketplaceGalleryRequestToLoad');
                    }

                    tracePerfTrack_Trigger_WebBlendRequestToLoad(url: string, durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_WebBlendRequestToLoad');
                    }

                    tracePerfTrack_Trigger_ExplorePageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_ExplorePageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_RadioPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_RadioPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_AppLaunchToExploreComplete(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchToExploreComplete');
                    }

                    tracePerfTrack_Trigger_AppLaunchToRadioComplete(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchToRadioComplete');
                    }

                    tracePerfTrack_Trigger_TVDetailsRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_TVDetailsRequestToLoad');
                    }

                    tracePerfTrack_Trigger_MovieDetailsRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_MovieDetailsRequestToLoad');
                    }

                    tracePerfTrack_Trigger_AlbumDetailsRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AlbumDetailsRequestToLoad');
                    }

                    tracePerfTrack_Trigger_ArtistDetailsRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_ArtistDetailsRequestToLoad');
                    }

                    tracePerfTrack_Trigger_PlaylistDetailsRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_PlaylistDetailsRequestToLoad');
                    }

                    tracePerfTrack_Trigger_DevicesPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_DevicesPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_NowPlayingPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_NowPlayingPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_MoviesStorePageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_MoviesStorePageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_TvStorePageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_TvStorePageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_VideoCollectionPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_VideoCollectionPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_ShopBooksPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_ShopBooksPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_ShopMagsPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_ShopMagsPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_AppLaunchToShopBooksComplete(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchToShopBooksComplete');
                    }

                    tracePerfTrack_Trigger_AppLaunchToShopMagsComplete(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchToShopMagsComplete');
                    }

                    tracePerfTrack_Trigger_AppLaunchToOOBEComplete(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchToOOBEComplete');
                    }

                    tracePerfTrack_Trigger_CategoryGalleryRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_CategoryGalleryRequestToLoad');
                    }

                    tracePerfTrack_Trigger_IssuesGalleryRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_IssuesGalleryRequestToLoad');
                    }

                    tracePerfTrack_Trigger_StandardGalleryRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_StandardGalleryRequestToLoad');
                    }

                    tracePerfTrack_Trigger_BookDetailsRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_BookDetailsRequestToLoad');
                    }

                    tracePerfTrack_Trigger_MagDetailsRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_MagDetailsRequestToLoad');
                    }

                    tracePerfTrack_Trigger_SearchLibraryRequestToQueryResults(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_SearchLibraryRequestToQueryResults');
                    }

                    tracePerfTrack_Trigger_SearchCatalogRequestToQueryResults(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_SearchCatalogRequestToQueryResults');
                    }

                    tracePerfTrack_Trigger_SearchAutoCompleteResultsReceived(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_SearchAutoCompleteResultsReceived');
                    }

                    tracePerfTrack_Trigger_BNDeviceRegistrationRequestSucceeded(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_BNDeviceRegistrationRequestSucceeded');
                    }

                    tracePerfTrack_Trigger_BNLoginRequestSucceeded(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_BNLoginRequestSucceeded');
                    }

                    tracePerfTrack_Trigger_AppLaunchToMoviesStore(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchToMoviesStore');
                    }

                    tracePerfTrack_Trigger_AppLaunchToTvStore(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchToTvStore');
                    }

                    tracePerfTrack_Trigger_AppLaunchToVideoCollection(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_AppLaunchToVideoCollection');
                    }

                    tracePerfTrack_Trigger_MoviesCollectionPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_MoviesCollectionPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_TvCollectionPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_TvCollectionPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_PersonalCollectionPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_PersonalCollectionPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_FeaturedMoviesPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_FeaturedMoviesPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_NewMoviesPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_NewMoviesPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_TopSellingMoviesPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_TopSellingMoviesPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_FeaturedTvPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_FeaturedTvPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_NewTvPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_NewTvPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_LastNightsTvPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_LastNightsTvPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_TopSellingTvPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_TopSellingTvPageRequestToLoad');
                    }

                    tracePerfTrack_Trigger_FlexHubPageRequestToLoad(durationMsec: number): void {
                        console.warn('shimmed function Shell.tracePerfTrack_Trigger_FlexHubPageRequestToLoad');
                    }

                }
                export class ShellTemplate implements IShellTemplate {
                    // constructor();
                    eventEnabled(eventIndex: number): number {
                        throw new Error('shimmed function ShellTemplate.eventEnabled');
                    }

                    traceTemplate_z(_MCGEN_EventIndex: number, moniker: string): void {
                        console.warn('shimmed function ShellTemplate.traceTemplate_z');
                    }

                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void {
                        console.warn('shimmed function ShellTemplate.traceTemplateEventDescriptor');
                    }

                    traceTemplate_zzz(_MCGEN_EventIndex: number, pageMoniker: string, hubMoniker: string, panelMoniker: string): void {
                        console.warn('shimmed function ShellTemplate.traceTemplate_zzz');
                    }

                    traceTemplate_tz(_MCGEN_EventIndex: number, result: Boolean, message: string): void {
                        console.warn('shimmed function ShellTemplate.traceTemplate_tz');
                    }

                    traceTemplate_dz(_MCGEN_EventIndex: number, id: number, message: string): void {
                        console.warn('shimmed function ShellTemplate.traceTemplate_dz');
                    }

                    traceTemplate_zz(_MCGEN_EventIndex: number, value: string, source: string): void {
                        console.warn('shimmed function ShellTemplate.traceTemplate_zz');
                    }

                    traceTemplate_q(_MCGEN_EventIndex: number, durationMsec: number): void {
                        console.warn('shimmed function ShellTemplate.traceTemplate_q');
                    }

                    traceTemplate_zq(_MCGEN_EventIndex: number, name: string, durationMsec: number): void {
                        console.warn('shimmed function ShellTemplate.traceTemplate_zq');
                    }

                }
                export class Social implements ISocial {
                    // constructor();
                    isAvatarRendererFrameEndEnabled: Boolean = false;
                    isAvatarRendererFrameStartEnabled: Boolean = false;
                    isAvatarRendererShutdownEnabled: Boolean = false;

                    traceAvatarRendererFrameStart(id: string): void {
                        console.warn('shimmed function Social.traceAvatarRendererFrameStart');
                    }

                    traceAvatarRendererFrameEnd(id: string, duration: number): void {
                        console.warn('shimmed function Social.traceAvatarRendererFrameEnd');
                    }

                    traceAvatarRendererShutdown(id: string): void {
                        console.warn('shimmed function Social.traceAvatarRendererShutdown');
                    }

                }
                export class SocialTemplate implements ISocialTemplate {
                    // constructor();
                    eventEnabled(eventIndex: number): number {
                        throw new Error('shimmed function SocialTemplate.eventEnabled');
                    }

                    traceTemplate_z(_MCGEN_EventIndex: number, id: string): void {
                        console.warn('shimmed function SocialTemplate.traceTemplate_z');
                    }

                    traceTemplate_zf(_MCGEN_EventIndex: number, id: string, duration: number): void {
                        console.warn('shimmed function SocialTemplate.traceTemplate_zf');
                    }

                }
                export class SyncEventProvider implements ISyncEventProvider {
                    // constructor();
                    isCloudSync_CloudProvider_ApplyBatch_StartEnabled: Boolean = false;
                    isCloudSync_CloudProvider_ApplyBatch_StopEnabled: Boolean = false;
                    isCloudSync_CloudProvider_ApplyItem_ErrorEnabled: Boolean = false;
                    isCloudSync_CloudProvider_ApplyItem_SkippedEnabled: Boolean = false;
                    isCloudSync_CloudProvider_ContentChangedEnabled: Boolean = false;
                    isCloudSync_CloudProvider_FindChangesEnabled: Boolean = false;
                    isCloudSync_CloudProvider_FoundChangeEnabled: Boolean = false;
                    isCloudSync_CloudProvider_IsAvailableEnabled: Boolean = false;
                    isCloudSync_CloudProvider_IsDirtyEnabled: Boolean = false;
                    isCloudSync_CloudProvider_LoadItem_ErrorEnabled: Boolean = false;
                    isCloudSync_CloudProvider_TakeDownEnabled: Boolean = false;
                    isCloudSync_CloudProvider_UpdateMetadata_StartEnabled: Boolean = false;
                    isCloudSync_CloudProvider_UpdateMetadata_StopEnabled: Boolean = false;
                    isCloudSync_Engine_BlockSync_StartEnabled: Boolean = false;
                    isCloudSync_Engine_BlockSync_StopEnabled: Boolean = false;
                    isCloudSync_Engine_CancelSyncEnabled: Boolean = false;
                    isCloudSync_Engine_NotificationEnabled: Boolean = false;
                    isCloudSync_Engine_RequestSyncEnabled: Boolean = false;
                    isCloudSync_Engine_ScheduleSyncEnabled: Boolean = false;
                    isCloudSync_Engine_SyncEndEnabled: Boolean = false;
                    isCloudSync_Engine_SyncErrorEnabled: Boolean = false;
                    isCloudSync_Engine_Sync_StartEnabled: Boolean = false;
                    isCloudSync_Engine_Sync_StopEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_AddItemEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_ContentChangedEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_DeleteItemEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_DeletedItemsEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_DirtyItemsEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_InvalidItemsEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_IsAvailableEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_IsDirtyEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_LoadItemEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_UpdateItemEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_UpdateMetadata_StartEnabled: Boolean = false;
                    isCloudSync_LibraryProvider_UpdateMetadata_StopEnabled: Boolean = false;

                    traceCloudSync_Engine_Sync_Start(requestSyncOption: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_Engine_Sync_Start');
                    }

                    traceCloudSync_Engine_Sync_Stop(hresult: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_Engine_Sync_Stop');
                    }

                    traceCloudSync_Engine_BlockSync_Start(): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_Engine_BlockSync_Start');
                    }

                    traceCloudSync_Engine_BlockSync_Stop(): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_Engine_BlockSync_Stop');
                    }

                    traceCloudSync_Engine_RequestSync(requestSyncOption: number, cookieNextCompleteSync: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_Engine_RequestSync');
                    }

                    traceCloudSync_Engine_SyncError(hresult: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_Engine_SyncError');
                    }

                    traceCloudSync_Engine_SyncEnd(hresult: number, changes: Boolean, cookieCompleteSync: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_Engine_SyncEnd');
                    }

                    traceCloudSync_Engine_ScheduleSync(delayTimeMS: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_Engine_ScheduleSync');
                    }

                    traceCloudSync_Engine_CancelSync(hresult: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_Engine_CancelSync');
                    }

                    traceCloudSync_Engine_Notification(syncPointId: string): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_Engine_Notification');
                    }

                    traceCloudSync_LibraryProvider_LoadItem(syncType: number, mediaId: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_LoadItem');
                    }

                    traceCloudSync_LibraryProvider_AddItem(syncType: number, mediaId: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_AddItem');
                    }

                    traceCloudSync_LibraryProvider_UpdateItem(syncType: number, mediaIdIn: number, mediaIdOut: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_UpdateItem');
                    }

                    traceCloudSync_LibraryProvider_DeleteItem(syncType: number, mediaId: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_DeleteItem');
                    }

                    traceCloudSync_LibraryProvider_DirtyItems(syncType: number, dirtyItems: string): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_DirtyItems');
                    }

                    traceCloudSync_LibraryProvider_DeletedItems(syncType: number, deletedItems: string): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_DeletedItems');
                    }

                    traceCloudSync_LibraryProvider_InvalidItems(syncType: number, invalidItems: string): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_InvalidItems');
                    }

                    traceCloudSync_LibraryProvider_IsDirty(isDirty: Boolean): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_IsDirty');
                    }

                    traceCloudSync_LibraryProvider_IsAvailable(isAvailable: Boolean): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_IsAvailable');
                    }

                    traceCloudSync_LibraryProvider_ContentChanged(notifyDelayMS: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_ContentChanged');
                    }

                    traceCloudSync_LibraryProvider_UpdateMetadata_Start(): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_UpdateMetadata_Start');
                    }

                    traceCloudSync_LibraryProvider_UpdateMetadata_Stop(): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_LibraryProvider_UpdateMetadata_Stop');
                    }

                    traceCloudSync_CloudProvider_ApplyItem_Error(syncType: number, cloudId: string, hresult: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_ApplyItem_Error');
                    }

                    traceCloudSync_CloudProvider_ApplyItem_Skipped(syncType: number, cloudId: string): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_ApplyItem_Skipped');
                    }

                    traceCloudSync_CloudProvider_LoadItem_Error(syncType: number, cloudId: string, hresult: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_LoadItem_Error');
                    }

                    traceCloudSync_CloudProvider_IsDirty(isDirty: Boolean, dirtyReason: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_IsDirty');
                    }

                    traceCloudSync_CloudProvider_IsAvailable(availability: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_IsAvailable');
                    }

                    traceCloudSync_CloudProvider_ContentChanged(): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_ContentChanged');
                    }

                    traceCloudSync_CloudProvider_FindChanges(anchor: string, requestedBatchSize: number, hasMoreData: Boolean): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_FindChanges');
                    }

                    traceCloudSync_CloudProvider_FoundChange(syncType: number, cloudId: string, changeType: number): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_FoundChange');
                    }

                    traceCloudSync_CloudProvider_TakeDown(cloudId: string): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_TakeDown');
                    }

                    traceCloudSync_CloudProvider_UpdateMetadata_Start(): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_UpdateMetadata_Start');
                    }

                    traceCloudSync_CloudProvider_UpdateMetadata_Stop(): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_UpdateMetadata_Stop');
                    }

                    traceCloudSync_CloudProvider_ApplyBatch_Start(): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_ApplyBatch_Start');
                    }

                    traceCloudSync_CloudProvider_ApplyBatch_Stop(): void {
                        console.warn('shimmed function SyncEventProvider.traceCloudSync_CloudProvider_ApplyBatch_Stop');
                    }

                }
                export class SyncEventProviderTemplate implements ISyncEventProviderTemplate {
                    // constructor();
                    eventEnabled(eventIndex: number): number {
                        throw new Error('shimmed function SyncEventProviderTemplate.eventEnabled');
                    }

                    traceTemplate_q(_MCGEN_EventIndex: number, requestSyncOption: number): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_q');
                    }

                    traceTemplate_d(_MCGEN_EventIndex: number, hresult: number): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_d');
                    }

                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplateEventDescriptor');
                    }

                    traceTemplate_qq(_MCGEN_EventIndex: number, requestSyncOption: number, cookieNextCompleteSync: number): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_qq');
                    }

                    traceTemplate_dtq(_MCGEN_EventIndex: number, hresult: number, changes: Boolean, cookieCompleteSync: number): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_dtq');
                    }

                    traceTemplate_z(_MCGEN_EventIndex: number, syncPointId: string): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_z');
                    }

                    traceTemplate_qd(_MCGEN_EventIndex: number, syncType: number, mediaId: number): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_qd');
                    }

                    traceTemplate_qdd(_MCGEN_EventIndex: number, syncType: number, mediaIdIn: number, mediaIdOut: number): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_qdd');
                    }

                    traceTemplate_qz(_MCGEN_EventIndex: number, syncType: number, dirtyItems: string): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_qz');
                    }

                    traceTemplate_t(_MCGEN_EventIndex: number, isDirty: Boolean): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_t');
                    }

                    traceTemplate_qzd(_MCGEN_EventIndex: number, syncType: number, cloudId: string, hresult: number): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_qzd');
                    }

                    traceTemplate_tq(_MCGEN_EventIndex: number, isDirty: Boolean, dirtyReason: number): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_tq');
                    }

                    traceTemplate_zqt(_MCGEN_EventIndex: number, anchor: string, requestedBatchSize: number, hasMoreData: Boolean): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_zqt');
                    }

                    traceTemplate_qzq(_MCGEN_EventIndex: number, syncType: number, cloudId: string, changeType: number): void {
                        console.warn('shimmed function SyncEventProviderTemplate.traceTemplate_qzq');
                    }

                }
                export class Xbox implements IXbox {
                    // constructor();
                    isXboxAcquireExclusiveModeBeginEnabled: Boolean = false;
                    isXboxAcquireExclusiveModeDoneEnabled: Boolean = false;
                    isXboxAcquireExclusiveModeErrorEnabled: Boolean = false;
                    isXboxBogusMediaStateMessageIgnoredEnabled: Boolean = false;
                    isXboxControlCommandErrorEnabled: Boolean = false;
                    isXboxControlCommandSentEnabled: Boolean = false;
                    isXboxControlSeekCommandErrorEnabled: Boolean = false;
                    isXboxControlSeekCommandSentEnabled: Boolean = false;
                    isXboxDisconnectSessionBeginEnabled: Boolean = false;
                    isXboxDisconnectSessionDoneEnabled: Boolean = false;
                    isXboxDisconnectSessionErrorEnabled: Boolean = false;
                    isXboxEstablishTitleChannelBeginEnabled: Boolean = false;
                    isXboxEstablishTitleChannelDoneEnabled: Boolean = false;
                    isXboxEstablishTitleChannelErrorEnabled: Boolean = false;
                    isXboxGetActiveTitleInformationBeginEnabled: Boolean = false;
                    isXboxGetActiveTitleInformationDoneEnabled: Boolean = false;
                    isXboxGetActiveTitleInformationErrorEnabled: Boolean = false;
                    isXboxGetKeyboardBeginEnabled: Boolean = false;
                    isXboxGetKeyboardDoneEnabled: Boolean = false;
                    isXboxGetKeyboardErrorEnabled: Boolean = false;
                    isXboxGetKeyboardStateBeginEnabled: Boolean = false;
                    isXboxGetKeyboardStateDoneEnabled: Boolean = false;
                    isXboxGetKeyboardStateErrorEnabled: Boolean = false;
                    isXboxGetKeyboardTextBeginEnabled: Boolean = false;
                    isXboxGetKeyboardTextDoneEnabled: Boolean = false;
                    isXboxGetKeyboardTextErrorEnabled: Boolean = false;
                    isXboxGetMediaStateErrorEnabled: Boolean = false;
                    isXboxHeartBeatPingErrorEnabled: Boolean = false;
                    isXboxHideXboxControlsEnabled: Boolean = false;
                    isXboxLaunchTitleCallEnabled: Boolean = false;
                    isXboxLocalTransportStateChangedEnabled: Boolean = false;
                    isXboxNewSessionObjectAssignedEnabled: Boolean = false;
                    isXboxOnlinePresenceBeginEnabled: Boolean = false;
                    isXboxOnlinePresenceErrorEnabled: Boolean = false;
                    isXboxOnlinePresenceReceivedEnabled: Boolean = false;
                    isXboxReleaseExclusiveModeBeginEnabled: Boolean = false;
                    isXboxReleaseExclusiveModeDoneEnabled: Boolean = false;
                    isXboxReleaseExclusiveModeErrorEnabled: Boolean = false;
                    isXboxSendTitleMessageBeginEnabled: Boolean = false;
                    isXboxSendTitleMessageDoneEnabled: Boolean = false;
                    isXboxSendTitleMessageErrorEnabled: Boolean = false;
                    isXboxSendTouchPointsBeginEnabled: Boolean = false;
                    isXboxSendTouchPointsDoneEnabled: Boolean = false;
                    isXboxSendTouchPointsErrorEnabled: Boolean = false;
                    isXboxSessionConnectCallEnabled: Boolean = false;
                    isXboxSessionObjectReassignedEnabled: Boolean = false;
                    isXboxSessionObjectResetToNullEnabled: Boolean = false;
                    isXboxSessionStateChangeEnabled: Boolean = false;
                    isXboxSessionStatusChangedEnabled: Boolean = false;
                    isXboxSetKeyboardTextAndSelectionBeginEnabled: Boolean = false;
                    isXboxSetKeyboardTextAndSelectionDoneEnabled: Boolean = false;
                    isXboxSetKeyboardTextAndSelectionErrorEnabled: Boolean = false;
                    isXboxSetKeyboardTextBeginEnabled: Boolean = false;
                    isXboxSetKeyboardTextDoneEnabled: Boolean = false;
                    isXboxSetKeyboardTextErrorEnabled: Boolean = false;
                    isXboxShowXboxControlsEnabled: Boolean = false;
                    isXboxShowXboxControlsSetVisibleEnabled: Boolean = false;
                    isXboxSigninJoinSessionEnabled: Boolean = false;
                    isXboxSigninNoUserSessionsEnabled: Boolean = false;
                    isXboxSigninTMFServiceSigninEnabled: Boolean = false;
                    isXboxSigninX8AppSigninEnabled: Boolean = false;
                    isXboxStreamingModeChangedEnabled: Boolean = false;
                    isXboxTitleChangedEnabled: Boolean = false;
                    isXboxTitleChannelStatusChangedEnabled: Boolean = false;
                    isXboxTitleMessagingConfigChangedEnabled: Boolean = false;
                    isXboxTransportControlsLRCStateChangeEnabled: Boolean = false;

                    traceXboxSessionStateChange(newState: string, oldState: string): void {
                        console.warn('shimmed function Xbox.traceXboxSessionStateChange');
                    }

                    traceXboxTransportControlsLRCStateChange(newState: string, oldState: string): void {
                        console.warn('shimmed function Xbox.traceXboxTransportControlsLRCStateChange');
                    }

                    traceXboxSigninTMFServiceSignin(tag: string, hresult: number, errorText: string): void {
                        console.warn('shimmed function Xbox.traceXboxSigninTMFServiceSignin');
                    }

                    traceXboxSigninJoinSession(tag: string, hresult: number, errorText: string): void {
                        console.warn('shimmed function Xbox.traceXboxSigninJoinSession');
                    }

                    traceXboxSigninX8AppSignin(tag: string, hresult: number, errorText: string): void {
                        console.warn('shimmed function Xbox.traceXboxSigninX8AppSignin');
                    }

                    traceXboxSigninNoUserSessions(tag: string, hresult: number, errorText: string): void {
                        console.warn('shimmed function Xbox.traceXboxSigninNoUserSessions');
                    }

                    traceXboxControlCommandSent(controlKey: number, executionTimeMilliseconds: number): void {
                        console.warn('shimmed function Xbox.traceXboxControlCommandSent');
                    }

                    traceXboxControlCommandError(controlKey: number, executionTimeMilliseconds: number, responseCode: number): void {
                        console.warn('shimmed function Xbox.traceXboxControlCommandError');
                    }

                    traceXboxControlSeekCommandSent(seekPosition: number, executionTimeMilliseconds: number): void {
                        console.warn('shimmed function Xbox.traceXboxControlSeekCommandSent');
                    }

                    traceXboxControlSeekCommandError(seekPosition: number, executionTimeMilliseconds: number, responseCode: number): void {
                        console.warn('shimmed function Xbox.traceXboxControlSeekCommandError');
                    }

                    traceXboxBogusMediaStateMessageIgnored(position: number, transportState: number, positionBeforeLastSeek: number, lastSeekPosition: number): void {
                        console.warn('shimmed function Xbox.traceXboxBogusMediaStateMessageIgnored');
                    }

                    traceXboxGetMediaStateError(executionTimeMilliseconds: number, responseCode: number): void {
                        console.warn('shimmed function Xbox.traceXboxGetMediaStateError');
                    }

                    traceXboxShowXboxControls(): void {
                        console.warn('shimmed function Xbox.traceXboxShowXboxControls');
                    }

                    traceXboxShowXboxControlsSetVisible(): void {
                        console.warn('shimmed function Xbox.traceXboxShowXboxControlsSetVisible');
                    }

                    traceXboxHideXboxControls(): void {
                        console.warn('shimmed function Xbox.traceXboxHideXboxControls');
                    }

                    traceXboxOnlinePresenceBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxOnlinePresenceBegin');
                    }

                    traceXboxOnlinePresenceReceived(titleId: number, mediaAssetId: string): void {
                        console.warn('shimmed function Xbox.traceXboxOnlinePresenceReceived');
                    }

                    traceXboxOnlinePresenceError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxOnlinePresenceError');
                    }

                    traceXboxGetActiveTitleInformationBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxGetActiveTitleInformationBegin');
                    }

                    traceXboxGetActiveTitleInformationDone(): void {
                        console.warn('shimmed function Xbox.traceXboxGetActiveTitleInformationDone');
                    }

                    traceXboxGetActiveTitleInformationError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxGetActiveTitleInformationError');
                    }

                    traceXboxEstablishTitleChannelBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxEstablishTitleChannelBegin');
                    }

                    traceXboxEstablishTitleChannelDone(): void {
                        console.warn('shimmed function Xbox.traceXboxEstablishTitleChannelDone');
                    }

                    traceXboxEstablishTitleChannelError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxEstablishTitleChannelError');
                    }

                    traceXboxSendTouchPointsBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxSendTouchPointsBegin');
                    }

                    traceXboxSendTouchPointsDone(): void {
                        console.warn('shimmed function Xbox.traceXboxSendTouchPointsDone');
                    }

                    traceXboxSendTouchPointsError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxSendTouchPointsError');
                    }

                    traceXboxGetKeyboardBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxGetKeyboardBegin');
                    }

                    traceXboxGetKeyboardDone(): void {
                        console.warn('shimmed function Xbox.traceXboxGetKeyboardDone');
                    }

                    traceXboxGetKeyboardError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxGetKeyboardError');
                    }

                    traceXboxGetKeyboardStateBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxGetKeyboardStateBegin');
                    }

                    traceXboxGetKeyboardStateDone(): void {
                        console.warn('shimmed function Xbox.traceXboxGetKeyboardStateDone');
                    }

                    traceXboxGetKeyboardStateError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxGetKeyboardStateError');
                    }

                    traceXboxGetKeyboardTextBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxGetKeyboardTextBegin');
                    }

                    traceXboxGetKeyboardTextDone(): void {
                        console.warn('shimmed function Xbox.traceXboxGetKeyboardTextDone');
                    }

                    traceXboxGetKeyboardTextError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxGetKeyboardTextError');
                    }

                    traceXboxSetKeyboardTextBegin(text: string): void {
                        console.warn('shimmed function Xbox.traceXboxSetKeyboardTextBegin');
                    }

                    traceXboxSetKeyboardTextDone(): void {
                        console.warn('shimmed function Xbox.traceXboxSetKeyboardTextDone');
                    }

                    traceXboxSetKeyboardTextError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxSetKeyboardTextError');
                    }

                    traceXboxSetKeyboardTextAndSelectionBegin(text: string, selectionStart: number, selectionLength: number): void {
                        console.warn('shimmed function Xbox.traceXboxSetKeyboardTextAndSelectionBegin');
                    }

                    traceXboxSetKeyboardTextAndSelectionDone(): void {
                        console.warn('shimmed function Xbox.traceXboxSetKeyboardTextAndSelectionDone');
                    }

                    traceXboxSetKeyboardTextAndSelectionError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxSetKeyboardTextAndSelectionError');
                    }

                    traceXboxSendTitleMessageBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxSendTitleMessageBegin');
                    }

                    traceXboxSendTitleMessageDone(): void {
                        console.warn('shimmed function Xbox.traceXboxSendTitleMessageDone');
                    }

                    traceXboxSendTitleMessageError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxSendTitleMessageError');
                    }

                    traceXboxDisconnectSessionBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxDisconnectSessionBegin');
                    }

                    traceXboxDisconnectSessionDone(): void {
                        console.warn('shimmed function Xbox.traceXboxDisconnectSessionDone');
                    }

                    traceXboxDisconnectSessionError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxDisconnectSessionError');
                    }

                    traceXboxNewSessionObjectAssigned(): void {
                        console.warn('shimmed function Xbox.traceXboxNewSessionObjectAssigned');
                    }

                    traceXboxSessionObjectReassigned(): void {
                        console.warn('shimmed function Xbox.traceXboxSessionObjectReassigned');
                    }

                    traceXboxSessionObjectResetToNull(): void {
                        console.warn('shimmed function Xbox.traceXboxSessionObjectResetToNull');
                    }

                    traceXboxTitleChanged(titleId: number): void {
                        console.warn('shimmed function Xbox.traceXboxTitleChanged');
                    }

                    traceXboxTitleMessagingConfigChanged(titleId: number, titlePort: number, enabled: Boolean): void {
                        console.warn('shimmed function Xbox.traceXboxTitleMessagingConfigChanged');
                    }

                    traceXboxTitleChannelStatusChanged(status: number, titleId: number, titlePort: number, hresult: number): void {
                        console.warn('shimmed function Xbox.traceXboxTitleChannelStatusChanged');
                    }

                    traceXboxStreamingModeChanged(clientExclusiveModeStatus: number, consoleExclusiveModeStatus: number): void {
                        console.warn('shimmed function Xbox.traceXboxStreamingModeChanged');
                    }

                    traceXboxLocalTransportStateChanged(localTransportConnected: Boolean): void {
                        console.warn('shimmed function Xbox.traceXboxLocalTransportStateChanged');
                    }

                    traceXboxSessionStatusChanged(sessionState: number): void {
                        console.warn('shimmed function Xbox.traceXboxSessionStatusChanged');
                    }

                    traceXboxAcquireExclusiveModeBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxAcquireExclusiveModeBegin');
                    }

                    traceXboxAcquireExclusiveModeDone(): void {
                        console.warn('shimmed function Xbox.traceXboxAcquireExclusiveModeDone');
                    }

                    traceXboxAcquireExclusiveModeError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxAcquireExclusiveModeError');
                    }

                    traceXboxHeartBeatPingError(hresult: number, errorMessage: string, sessionState: string, isCurrentWinRTSessionReassigned: Boolean, isCurrentWinRTSessionNull: Boolean): void {
                        console.warn('shimmed function Xbox.traceXboxHeartBeatPingError');
                    }

                    traceXboxSessionConnectCall(sessionState: string, isRetry: Boolean): void {
                        console.warn('shimmed function Xbox.traceXboxSessionConnectCall');
                    }

                    traceXboxLaunchTitleCall(titleId: number, startTimeMilliseconds: number, firstAction: string): void {
                        console.warn('shimmed function Xbox.traceXboxLaunchTitleCall');
                    }

                    traceXboxReleaseExclusiveModeBegin(): void {
                        console.warn('shimmed function Xbox.traceXboxReleaseExclusiveModeBegin');
                    }

                    traceXboxReleaseExclusiveModeDone(): void {
                        console.warn('shimmed function Xbox.traceXboxReleaseExclusiveModeDone');
                    }

                    traceXboxReleaseExclusiveModeError(hresult: number, errorMessage: string): void {
                        console.warn('shimmed function Xbox.traceXboxReleaseExclusiveModeError');
                    }

                }
                export class XboxTemplate implements IXboxTemplate {
                    // constructor();
                    eventEnabled(eventIndex: number): number {
                        throw new Error('shimmed function XboxTemplate.eventEnabled');
                    }

                    traceTemplate_zz(_MCGEN_EventIndex: number, newState: string, oldState: string): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_zz');
                    }

                    traceTemplate_zdz(_MCGEN_EventIndex: number, tag: string, hresult: number, errorText: string): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_zdz');
                    }

                    traceTemplate_qf(_MCGEN_EventIndex: number, controlKey: number, executionTimeMilliseconds: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_qf');
                    }

                    traceTemplate_qfq(_MCGEN_EventIndex: number, controlKey: number, executionTimeMilliseconds: number, responseCode: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_qfq');
                    }

                    traceTemplate_xf(_MCGEN_EventIndex: number, seekPosition: number, executionTimeMilliseconds: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_xf');
                    }

                    traceTemplate_xfq(_MCGEN_EventIndex: number, seekPosition: number, executionTimeMilliseconds: number, responseCode: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_xfq');
                    }

                    traceTemplate_xqxx(_MCGEN_EventIndex: number, position: number, transportState: number, positionBeforeLastSeek: number, lastSeekPosition: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_xqxx');
                    }

                    traceTemplate_fq(_MCGEN_EventIndex: number, executionTimeMilliseconds: number, responseCode: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_fq');
                    }

                    traceTemplateEventDescriptor(_MCGEN_EventIndex: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplateEventDescriptor');
                    }

                    traceTemplate_qz(_MCGEN_EventIndex: number, titleId: number, mediaAssetId: string): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_qz');
                    }

                    traceTemplate_dz(_MCGEN_EventIndex: number, hresult: number, errorMessage: string): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_dz');
                    }

                    traceTemplate_z(_MCGEN_EventIndex: number, text: string): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_z');
                    }

                    traceTemplate_zqq(_MCGEN_EventIndex: number, text: string, selectionStart: number, selectionLength: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_zqq');
                    }

                    traceTemplate_q(_MCGEN_EventIndex: number, titleId: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_q');
                    }

                    traceTemplate_qqt(_MCGEN_EventIndex: number, titleId: number, titlePort: number, enabled: Boolean): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_qqt');
                    }

                    traceTemplate_qqqd(_MCGEN_EventIndex: number, status: number, titleId: number, titlePort: number, hresult: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_qqqd');
                    }

                    traceTemplate_qq(_MCGEN_EventIndex: number, clientExclusiveModeStatus: number, consoleExclusiveModeStatus: number): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_qq');
                    }

                    traceTemplate_t(_MCGEN_EventIndex: number, localTransportConnected: Boolean): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_t');
                    }

                    traceTemplate_dzztt(_MCGEN_EventIndex: number, hresult: number, errorMessage: string, sessionState: string, isCurrentWinRTSessionReassigned: Boolean, isCurrentWinRTSessionNull: Boolean): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_dzztt');
                    }

                    traceTemplate_zt(_MCGEN_EventIndex: number, sessionState: string, isRetry: Boolean): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_zt');
                    }

                    traceTemplate_qfz(_MCGEN_EventIndex: number, titleId: number, startTimeMilliseconds: number, firstAction: string): void {
                        console.warn('shimmed function XboxTemplate.traceTemplate_qfz');
                    }

                }
            }
        }
        export namespace Interop { 
            export class CallbackInvoker implements ICallbackInvoker {
                invoke(context: number): void {
                    console.warn('shimmed function CallbackInvoker.invoke');
                }

            }
            export interface ICallbackInvoker {
                invoke(context: number): void;
            }
        }
        export namespace Limits { 
            export interface IMusicLimitsManager {
                freeIndividualTrackAllowance: number;
                isFreeTrialCompleted: Boolean;
                isMonthlyFreeLimitExceeded: Boolean;
                monthlyFreeMinutesAllowance: number;
                nextMonthlyFreeLimitResetDate: string;
                totalUnauthenticatedTrackAllowance: number;
                totalUnauthenticatedTracksUsed: number;
                getLimitsAsync(): Windows.Foundation.IAsyncOperation<string>;
            }
            export class MusicLimitsManager {
                static freeIndividualTrackAllowance: number = -1;
                static isFreeTrialCompleted: Boolean = false;
                static isMonthlyFreeLimitExceeded: Boolean = false;
                static monthlyFreeMinutesAllowance: number = -1;
                static nextMonthlyFreeLimitResetDate: string = '';
                static totalUnauthenticatedTrackAllowance: number = -1;
                static totalUnauthenticatedTracksUsed: number = -1;

                static getLimitsAsync(): Windows.Foundation.IAsyncOperation<string> {
                    throw new Error('shimmed function MusicLimitsManager.getLimitsAsync');
                }

                static addEventListener(name: string, handler: Function) {
                    console.warn(`MusicLimitsManager::addEventListener: ${name}`);
                    switch (name) {
                        case "freetrialcompleted": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "freetrialstarted": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "monthlyfreelimitexceeded": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "monthlyfreelimitreset": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "trackfreelimitexceeded": // /* System.EventHandler`1[[System.Guid, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "trackfreelimitsreset": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                            break;
                    }

                }
            }
        }
        export namespace Marketplace { 
            export enum ContentType {
                unknownContentType = -1,
                track,
                video,
            }
            export class DownloadResult implements IDownloadResult {
                assetDetails: string;
                hresults: number[];
                taskIds: number[];

            }
            export enum DownloadStyle {
                unknownDownloadStyle = -1,
                immediate,
                persistedAbort,
                none,
            }
            export class GrovelPastPurchasedMusicResult implements IGrovelPastPurchasedMusicResult {
                hasFailures: Boolean;
                nextHistoryToken: string;

            }
            export interface IDownloadResult {
                assetDetails: string;
                hresults: number[];
                taskIds: number[];
            }
            export interface IGrovelPastPurchasedMusicResult {
                hasFailures: Boolean;
                nextHistoryToken: string;
            }
            export interface IMarketplace {
                addMedia(serviceMediaIds: string[], mediaTypes: number[], filterToOfferIds: string[], mediaPropertyMap: any, addToCollection: Boolean): Windows.Foundation.IAsyncOperation<string>;
                tryAddMedia(serviceMediaIds: string[], mediaTypes: number[], filterToOfferIds: string[], mediaPropertyMap: any, addToCollection: Boolean): Windows.Foundation.IAsyncOperation<string>;
                download(ticket: string, mediaIds: number[], mediaTypes: number[], contextMediaId: number, contextMediaTypeId: number, fPreferStandardDef: number): Windows.Foundation.IAsyncOperation<IDownloadResult>;
                getAssetLocationsAsync(ticket: string, serviceMediaIds: string[], mediaInstanceIds: string[], mediaInstanceLicenseRights: number[], fulfillmentTickets: string[], contexts: string[], autoActivateMachine: Boolean): Windows.Foundation.IAsyncOperation<string>;
                getMediaEntitlementsAsync(serviceMediaIds: string[]): Windows.Foundation.IAsyncOperation<string>;
                grovelPastPurchasedMusic(historyToken: string, aggressiveGrovel: Boolean): Windows.Foundation.IAsyncOperation<IGrovelPastPurchasedMusicResult>;
                sendPlaybackDurationAsync(trackingId: string, duration: number): Windows.Foundation.IAsyncAction;
                purchaseFreeOfferAsync(hbiPassportTicket: string, offerId: string, currencyCode: string): Windows.Foundation.IAsyncAction;
                getAlbumsSuggestAsync(albumLibraryId: number): Windows.Foundation.IAsyncOperation<string>;
                getLatestSeasonMetadataAsync(): Windows.Foundation.IAsyncAction;
                generateGuid(): string;
            }
            export class Marketplace {
                static addMedia(serviceMediaIds: string[], mediaTypes: number[], filterToOfferIds: string[], mediaPropertyMap: any, addToCollection: Boolean): Windows.Foundation.IAsyncOperation<string> {
                    throw new Error('shimmed function Marketplace.addMedia');
                }

                static tryAddMedia(serviceMediaIds: string[], mediaTypes: number[], filterToOfferIds: string[], mediaPropertyMap: any, addToCollection: Boolean): Windows.Foundation.IAsyncOperation<string> {
                    throw new Error('shimmed function Marketplace.tryAddMedia');
                }

                static download(ticket: string, mediaIds: number[], mediaTypes: number[], contextMediaId: number, contextMediaTypeId: number, fPreferStandardDef: number): Windows.Foundation.IAsyncOperation<IDownloadResult> {
                    throw new Error('shimmed function Marketplace.download');
                }

                static getAssetLocationsAsync(ticket: string, serviceMediaIds: string[], mediaInstanceIds: string[], mediaInstanceLicenseRights: number[], fulfillmentTickets: string[], contexts: string[], autoActivateMachine: Boolean): Windows.Foundation.IAsyncOperation<string> {
                    throw new Error('shimmed function Marketplace.getAssetLocationsAsync');
                }

                static getMediaEntitlementsAsync(serviceMediaIds: string[]): Windows.Foundation.IAsyncOperation<string> {
                    throw new Error('shimmed function Marketplace.getMediaEntitlementsAsync');
                }

                static grovelPastPurchasedMusic(historyToken: string, aggressiveGrovel: Boolean): Windows.Foundation.IAsyncOperation<IGrovelPastPurchasedMusicResult> {
                    throw new Error('shimmed function Marketplace.grovelPastPurchasedMusic');
                }

                static sendPlaybackDurationAsync(trackingId: string, duration: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function Marketplace.sendPlaybackDurationAsync');
                }

                static purchaseFreeOfferAsync(hbiPassportTicket: string, offerId: string, currencyCode: string): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function Marketplace.purchaseFreeOfferAsync');
                }

                static getAlbumsSuggestAsync(albumLibraryId: number): Windows.Foundation.IAsyncOperation<string> {
                    throw new Error('shimmed function Marketplace.getAlbumsSuggestAsync');
                }

                static getLatestSeasonMetadataAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function Marketplace.getLatestSeasonMetadataAsync');
                }

                static generateGuid(): string {
                    throw new Error('shimmed function Marketplace.generateGuid');
                }

                static addEventListener(name: string, handler: Function) {
                    console.warn(`Marketplace::addEventListener: ${name}`);
                    switch (name) {
                        case "mediarightchanged": // /* System.EventHandler`1[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                            break;
                    }

                }
            }
            export enum MarketplaceMediaFormat {
                unknownMediaFormat = -1,
                mp3,
                wma,
                wmvHD,
                wmvSD,
                wmvXD,
                app,
            }
            export enum MarketplaceMediaRights {
                unknownMediaRight = -1,
                preview,
                subscriptionStream,
                subscriptionDownload,
                purchase,
                albumPurchase,
                subscriptionFreePurchase,
                sync,
                rental,
                purchaseStream,
                rentalStream,
                previewStream,
                trialPurchase,
                seasonPurchase,
                seasonPurchaseStream,
                freeStream,
                download,
            }
            export enum VideoEncoding {
                unknown = -1,
                vc1,
                h264,
            }
        }
        export namespace MediaInfo { 
            export interface IMediaDetail {
                audioSubtype: string;
                mimeType: string;
                sourceCharacter: string;
                videoSubtype: string;
            }
            export interface IMediaInfo {
                getMediaDetail(mediaStream: Windows.Storage.Streams.IRandomAccessStream): Windows.Foundation.IAsyncOperation<IMediaDetail>;
            }
            export class MediaDetail implements IMediaDetail {
                audioSubtype: string;
                mimeType: string;
                sourceCharacter: string;
                videoSubtype: string;

            }
            export class MediaInfo implements IMediaInfo {
                // constructor();
                getMediaDetail(mediaStream: Windows.Storage.Streams.IRandomAccessStream): Windows.Foundation.IAsyncOperation<IMediaDetail> {
                    throw new Error('shimmed function MediaInfo.getMediaDetail');
                }

            }
        }
        export enum NetworkUsage {
            undefinedNetworkUsage,
            normal,
            noNetworkRequestsAllowed,
        }
        export namespace Platform { 
            export enum AcquisitionContext {
                collection = 1500,
                store,
                smartDJ,
                explorerFile,
                playTo,
            }
            export enum AcquisitionContextType {
                album = 1400,
                playlist,
                artist,
                track,
                playAll,
                genre,
                musicVideo,
                video,
                tvseries,
            }
            export class AlbumMetadata implements IAlbumMetadata {
                // constructor();
                volume: string = '';
                uniqueFileId: string = '';
                trackMetadata: ITrackMetadata[] = null;
                trackCount: number = 0;
                title: string = '';
                sortTitle: string = '';
                sortArtist: string = '';
                requestId: string = '';
                releaseDate: string = '';
                publisherRating: string = '';
                providerStyle: string = '';
                needsIDs: string = '';
                moreInfoParams: string = '';
                label: string = '';
                imageUrl: string = '';
                genre: string = '';
                editedFields: number = 0;
                dataProviderParams: string = '';
                dataProviderLogo: string = '';
                dataProvider: string = '';
                canSmartVJ: SmartVJState = SmartVJState.unknown;
                canSmartDJ: SmartDJState = SmartDJState.unknown;
                buyParams: string = '';
                artistMediaId: string = '';
                artistImageUrl: string = '';
                artistBingId: string = '';
                artist: string = '';
                albumMediaId: string = '';
                albumBingId: string = '';

            }
            export class AlbumProvider implements IAlbumProvider {
                getPlayabilityByLibraryIdAsync(nLibraryId: number, availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncOperation<IPlayableMediaData[]> {
                    throw new Error('shimmed function AlbumProvider.getPlayabilityByLibraryIdAsync');
                }

                getLibraryIdFromMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue> {
                    throw new Error('shimmed function AlbumProvider.getLibraryIdFromMediaIdAsync');
                }

                updateAlbumMetadataAsync(pIAlbumMetadata: IAlbumMetadata, requestType: RequestType, iAlbumId: number): Windows.Foundation.IAsyncOperation<UpdateAlbumMetadataReturnValue> {
                    throw new Error('shimmed function AlbumProvider.updateAlbumMetadataAsync');
                }

                setPlayedStatusAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function AlbumProvider.setPlayedStatusAsync');
                }

            }
            export class AppDatabaseManager implements IAppDatabaseManager {
                // constructor();
                openDatabaseForReadOnly(): { returnValue: Boolean, pJetInstanceId: number, pbstrDatabasePath: string } {
                    throw new Error('shimmed function AppDatabaseManager.openDatabaseForReadOnly');
                }

            }
            export class ArtistProvider implements IArtistProvider {
                getLibraryIdFromMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue> {
                    throw new Error('shimmed function ArtistProvider.getLibraryIdFromMediaIdAsync');
                }

                getPlayabilityByLibraryIdAsync(nLibraryId: number, availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncOperation<IPlayableMediaData[]> {
                    throw new Error('shimmed function ArtistProvider.getPlayabilityByLibraryIdAsync');
                }

                hasLocalMediaAsync(libraryId: number): Windows.Foundation.IAsyncOperation<HasMediaReturnValue> {
                    throw new Error('shimmed function ArtistProvider.hasLocalMediaAsync');
                }

                hasRemoteMediaAsync(libraryId: number): Windows.Foundation.IAsyncOperation<HasMediaReturnValue> {
                    throw new Error('shimmed function ArtistProvider.hasRemoteMediaAsync');
                }

            }
            export interface CanAddToWatchlistReturnValue {
                canAddToWatchlist: Boolean;
            }
            export class CollectionBuildEndEventHandlerArgs implements ICollectionBuildEndEventHandlerArgs {
                error: number;
                itemsCollected: number;
                itemsTotal: number;
                source: number;

            }
            export enum CollectionBuildingError {
                errorNone,
                errorMissingMetadata,
                errorSyncError,
            }
            export class CollectionBuildingManager implements ICollectionBuildingManager {
                // constructor();
                addEventListener(name: string, handler: Function) {
                    console.warn(`CollectionBuildingManager::addEventListener: ${name}`);
                    switch (name) {
                        case "collectionbuildbeginevent": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "collectionbuildcloudcollectionv2firsttrackaddedevent": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "collectionbuilddeduplicationstrategyrequiredevent": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "collectionbuildendevent": // Windows.Foundation.TypedEventHandler<ICollectionBuildingManager,CollectionBuildEndEventHandlerArgs>
                        case "collectionbuildmdlcprogressevent": // Windows.Foundation.TypedEventHandler<ICollectionBuildingManager,CollectionBuildMDLCProgressEventHandlerArgs>
                        case "collectionbuildmediasyncedevent": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "collectionbuildprefetchcompleteevent": // /* System.EventHandler`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                        case "collectionbuildprogressevent": // Windows.Foundation.TypedEventHandler<ICollectionBuildingManager,CollectionBuildProgressEventHandlerArgs>
                        case "collectionbuildupsyncprogressevent": // Windows.Foundation.TypedEventHandler<ICollectionBuildingManager,CollectionBuildProgressEventHandlerArgs>
                            break;
                    }

                }
            }
            export enum CollectionBuildingSource {
                local,
                cloud,
            }
            export class CollectionBuildMDLCProgressEventHandlerArgs implements ICollectionBuildMDLCProgressEventHandlerArgs {
                isCompleted: number;
                itemsProcessed: number;
                itemsTotal: number;

            }
            export class CollectionBuildProgressEventHandlerArgs implements ICollectionBuildProgressEventHandlerArgs {
                isCompleted: number;
                itemsCompleted: number;

            }
            export interface CreatePlaylistReturnValue {
                playlistId: number;
            }
            export enum FieldMask {
                empty_BIT_MASK,
                artist_BIT_MASK,
                sort_ARTIST_BIT_MASK,
                title_BIT_MASK = 4,
                sort_TITLE_BIT_MASK = 8,
                genre_BIT_MASK = 16,
                release_DATE_BIT_MASK = 32,
                track_NUMBER_BIT_MASK = 64,
                disc_NUMBER_BIT_MASK = 128,
                actionable_MEDIAID_BIT_MASK = 256,
                track_MEDIAID_BIT_MASK = 512,
                track_BINGID_BIT_MASK = 1024,
                album_MEDIAID_BIT_MASK = 2048,
                album_BINGID_BIT_MASK = 4096,
                artist_MEDIAID_BIT_MASK = 8192,
                artist_BINGID_BIT_MASK = 16384,
                unique_FILEID_BIT_MASK = 32768,
                unblock_FROM_CLOUD_BIT_MASK = 65536,
                image_URL_BIT_MASK = 131072,
                track_COUNT_BIT_MASK = 524288,
                can_SMARTDJ_BIT_MASK = 1048576,
                label_BIT_MASK = 2097152,
                tracks_BIT_MASK = 4194304,
                artist_IMAGE_URL_BIT_MASK = 8388608,
                can_SMARTVJ_BIT_MASK = 16777216,
            }
            export enum FileUrlType {
                none,
                localFileUrl,
                serviceFileUrl,
                marketPlaceFileUrl,
                remoteMachineFileUrl,
            }
            export interface GetBookmarkReturnValue {
                value: number;
            }
            export interface GetDetailReturnValue {
                value: string;
            }
            export interface GetFileCountsReturnValue {
                localFilesCount: number;
            }
            export interface GetLastWatchedEpisodeForSeriesReturnValue {
                tvEpisodeId: number;
                tvEpisodeMediaId: string;
                tvEpisodeBingId: string;
                tvEpisodeBookmark: number;
                tvEpisodeDuration: number;
                tvEpisodeNumber: number;
                tvSeasonId: number;
                tvSeasonBingId: string;
                tvSeasonNumber: number;
                hasPlayed: Boolean;
            }
            export interface GetLibraryIdFromMediaIdReturnValue {
                libraryId: number;
            }
            export interface GetPlaycountReturnValue {
                value: number;
            }
            export interface GetPlayedStatusReturnValue {
                value: number;
            }
            export interface GetPlaylistCountsReturnValue {
                totalItemsCount: number;
                localItemsCount: number;
                remoteItemsCount: number;
            }
            export interface GetRatingReturnValue {
                rating: Rating;
            }
            export interface GetTrackCountsReturnValue {
                localOnlyTracksCount: number;
                remoteOnlyTracksCount: number;
                localRemoteTracksCount: number;
            }
            export interface HasMediaReturnValue {
                hasMedia: Boolean;
            }
            export interface HasPlaylistBeenSyncedReturnValue {
                hasBeenSynced: Boolean;
                itemId: string;
            }
            export interface IAlbumMetadata {
                albumBingId: string;
                albumMediaId: string;
                artist: string;
                artistBingId: string;
                artistImageUrl: string;
                artistMediaId: string;
                buyParams: string;
                canSmartDJ: SmartDJState;
                canSmartVJ: SmartVJState;
                dataProvider: string;
                dataProviderLogo: string;
                dataProviderParams: string;
                editedFields: number;
                genre: string;
                imageUrl: string;
                label: string;
                moreInfoParams: string;
                needsIDs: string;
                providerStyle: string;
                publisherRating: string;
                releaseDate: string;
                requestId: string;
                sortArtist: string;
                sortTitle: string;
                title: string;
                trackCount: number;
                trackMetadata: ITrackMetadata[];
                uniqueFileId: string;
                volume: string;
            }
            export interface IAlbumProvider {
                getPlayabilityByLibraryIdAsync(nLibraryId: number, availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncOperation<IPlayableMediaData[]>;
                getLibraryIdFromMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue>;
                updateAlbumMetadataAsync(pIAlbumMetadata: IAlbumMetadata, requestType: RequestType, iAlbumId: number): Windows.Foundation.IAsyncOperation<UpdateAlbumMetadataReturnValue>;
                setPlayedStatusAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction;
            }
            export interface IAppDatabaseManager {
                openDatabaseForReadOnly(): { returnValue: Boolean, pJetInstanceId: number, pbstrDatabasePath: string };
            }
            export interface IArtistProvider {
                getLibraryIdFromMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue>;
                getPlayabilityByLibraryIdAsync(nLibraryId: number, availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncOperation<IPlayableMediaData[]>;
                hasLocalMediaAsync(libraryId: number): Windows.Foundation.IAsyncOperation<HasMediaReturnValue>;
                hasRemoteMediaAsync(libraryId: number): Windows.Foundation.IAsyncOperation<HasMediaReturnValue>;
            }
            export interface ICollectionBuildEndEventHandlerArgs {
                error: number;
                itemsCollected: number;
                itemsTotal: number;
                source: number;
            }
            export interface ICollectionBuildingManager {
            }
            export interface ICollectionBuildMDLCProgressEventHandlerArgs {
                isCompleted: number;
                itemsProcessed: number;
                itemsTotal: number;
            }
            export interface ICollectionBuildProgressEventHandlerArgs {
                isCompleted: number;
                itemsCompleted: number;
            }
            export interface IMediaProvider {
                deleteMediaAsync(libraryType: number, piLibraryIds: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction;
                copyMediaAsync(from: MediaStorageLocation, to: MediaStorageLocation, libraryType: number, piLibraryIds: number[]): Windows.Foundation.IAsyncAction;
                addMediaToCloudAsync(libraryType: number, piLibraryIds: number[]): Windows.Foundation.IAsyncAction;
                destroyDatabase(): void;
                deleteFilesForMediaAsync(libraryType: number, piLibraryIds: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction;
            }
            export interface IMediaStore {
                albumProvider: IAlbumProvider;
                artistProvider: IArtistProvider;
                databaseNeedsUpgrade: Boolean;
                mediaProvider: IMediaProvider;
                offlineDetailProvider: IOfflineDetailProvider;
                playlistProvider: IPlaylistProvider;
                ratingProvider: IRatingProvider;
                seriesProvider: ISeriesProvider;
                sharingProvider: ISharingProvider;
                trackProvider: ITrackProvider;
                videoProvider: IVideoProvider;
                watchlistProvider: IWatchlistProvider;
                prepareDatabaseForSuspend(prepareForSuspend: Boolean): void;
                closeDatabase(): void;
                ensureDatabaseOpenedAsync(): Windows.Foundation.IAsyncAction;
                getMemoryUsageStats(): string;
                clearMemoryUsageStats(): void;
            }
            export interface ImportPlaylistCountsReturnValue {
                importPlaylistsCount: number;
            }
            export interface IOfflineDetailProvider {
                addWithMediaAsync(libraryId: number, libraryTypeId: number, expirationDays: number, detailBuffer: string, detailSize: number): Windows.Foundation.IAsyncAction;
                addWithKeyAsync(key: string, expirationDays: number, detailBuffer: string, detailSize: number): Windows.Foundation.IAsyncAction;
                removeWithMediaAsync(libraryId: number, libraryTypeId: number): Windows.Foundation.IAsyncAction;
                removeWithKeyAsync(key: string): Windows.Foundation.IAsyncAction;
                getDetailWithMediaAsync(libraryId: number, libraryTypeId: number): Windows.Foundation.IAsyncOperation<GetDetailReturnValue>;
                getDetailWithKeyAsync(key: string): Windows.Foundation.IAsyncOperation<GetDetailReturnValue>;
                setIfMatchValueWithKeyAsync(key: string, ifMatchValue: string): Windows.Foundation.IAsyncAction;
            }
            export interface IPlayableMediaData {
                cloudStreamable: Boolean;
                isDownloading: Boolean;
                libraryId: number;
                locallyPlayable: Boolean;
                mediaId: string;
                mediaType: number;
            }
            export interface IPlaylistProvider {
                createPlaylistAsync(type: PlaylistType, title: string, overwriteExisting: Boolean): Windows.Foundation.IAsyncOperation<CreatePlaylistReturnValue>;
                appendPlaylistItemsAsync(playlistId: number, libraryIds: number[], serviceMediaIds: string[], libraryTypeIds: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction;
                appendPlaylistItemsAsync_1(playlistId: number, libraryIds: number[], serviceMediaIds: string[], libraryTypeIds: number[], availabilityFilter: MediaAvailability, acquisitionContextTypes: number[], acquisitionContexts: number[], acquisitionContextIds: string[], acquisitionAdditionalContexts: string[]): Windows.Foundation.IAsyncAction;
                appendMarketplaceTrackPlaylistItemAsync(playlistId: number, libraryIds: number[], albumTitles: string[], albumArtists: string[], trackTitles: string[], trackArtists: string[], genres: string[], durations: number[], albumArtistSmids: string[], trackArtistSmids: string[], serviceMediaIds: string[], libraryTypeId: number): Windows.Foundation.IAsyncAction;
                appendMarketplaceTrackPlaylistItemAsync_1(playlistId: number, libraryIds: number[], albumTitles: string[], albumArtists: string[], trackTitles: string[], trackArtists: string[], genres: string[], durations: number[], albumArtistSmids: string[], trackArtistSmids: string[], serviceMediaIds: string[], libraryTypeId: number, acquisitionContextTypes: number[], acquisitionContexts: number[], acquisitionContextIds: string[], acquisitionAdditionalContexts: string[]): Windows.Foundation.IAsyncAction;
                appendMarketplaceVideoPlaylistItemAsync(playlistId: number, libraryIds: number[], titles: string[], imageUrls: string[], genres: string[], durations: number[], serviceMediaIds: string[], libraryTypeId: number): Windows.Foundation.IAsyncAction;
                appendMarketplaceVideoPlaylistItemAsync_1(playlistId: number, libraryIds: number[], titles: string[], imageUrls: string[], genres: string[], durations: number[], serviceMediaIds: string[], libraryTypeId: number, acquisitionContextTypes: number[], acquisitionContexts: number[], acquisitionContextIds: string[], acquisitionAdditionalContexts: string[]): Windows.Foundation.IAsyncAction;
                deletePlaylistAsync(piPlaylistIds: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction;
                renamePlaylistAsync(nPlaylistId: number, bstrNewTitle: string): Windows.Foundation.IAsyncAction;
                setPlayedStatusAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction;
                removePlaylistItemsAsync(nPlaylistId: number, piIndexes: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction;
                reorderPlaylistItemsAsync(nPlaylistId: number, piIndexes: number[], nIndexToInsertBefore: number, availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction;
                savePlaylistAsync(nPlaylistId: number, fullpathFilename: string): Windows.Foundation.IAsyncAction;
                importPlaylistsAsync(): Windows.Foundation.IAsyncOperation<ImportPlaylistCountsReturnValue>;
                resumeImportPlaylistsAsync(): Windows.Foundation.IAsyncOperation<ImportPlaylistCountsReturnValue>;
                getPlayabilityByLibraryIdAsync(nLibraryId: number, availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncOperation<IPlayableMediaData[]>;
                setPlaylistDateEditedToNowAsync(nPlaylistId: number): Windows.Foundation.IAsyncAction;
                setPlaylistKeepOfflineAsync(nPlaylistId: number, fKeepOffline: Boolean): Windows.Foundation.IAsyncAction;
                savePlaylistRadioSeedAsync(nPlaylistId: number, smartDjSeed: string): Windows.Foundation.IAsyncAction;
                savePlaylistCurrentItemIndexAsync(nPlaylistId: number, currentItemIndex: number): Windows.Foundation.IAsyncAction;
                saveNowPlayingPlaylistAsync(playlistName: string): Windows.Foundation.IAsyncAction;
                getPlaylistItemCountsAsync(nPlaylistId: number): Windows.Foundation.IAsyncOperation<GetPlaylistCountsReturnValue>;
                hasPlaylistBeenSyncedAsync(nPlaylistId: number): Windows.Foundation.IAsyncOperation<HasPlaylistBeenSyncedReturnValue>;
            }
            export interface IRatingProvider {
                setCollectionItemsRatingAsync(libraryIds: number[], libraryType: number, ratingType: RatingType, rating: Rating): Windows.Foundation.IAsyncAction;
                setMarketplaceItemsRatingAsync(bingIds: string[], ratingType: RatingType, rating: Rating): Windows.Foundation.IAsyncAction;
                getRatingForMarketplaceItemAsync(bingId: string, ratingType: RatingType): Windows.Foundation.IAsyncOperation<GetRatingReturnValue>;
            }
            export interface ISeriesProvider {
                getLibraryIdFromMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue>;
                getSeasonLibraryIdFromMediaIdAsync(mediaId: string, nSeasonNumber: number): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue>;
                getPlayabilityByLibraryIdAsync(nLibraryId: number): Windows.Foundation.IAsyncOperation<IPlayableMediaData[]>;
                getPlayabilityBySeasonLibraryIdAsync(nLibraryId: number): Windows.Foundation.IAsyncOperation<IPlayableMediaData[]>;
                hasLocalMediaAsync(libraryId: number): Windows.Foundation.IAsyncOperation<HasMediaReturnValue>;
                hasLocalMediaInSeasonAsync(seriesLibraryId: number, seasonId: number): Windows.Foundation.IAsyncOperation<HasMediaReturnValue>;
                hasRemoteMediaAsync(libraryId: number): Windows.Foundation.IAsyncOperation<HasMediaReturnValue>;
            }
            export interface IShareableContent {
                mediaDescription: string;
                storageFiles: any[];
            }
            export interface ISharingProvider {
                getShareableContentForMediaAsync(piLibraryIds: number[], piLibraryTypes: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncOperation<IShareableContent>;
            }
            export interface IsInWatchlistReturnValue {
                isInWatchlist: Boolean;
            }
            export interface ITrackMetadata {
                actionableMediaId: string;
                artist: string;
                artistBingId: string;
                artistImageUrl: string;
                artistMediaId: string;
                canSmartDJ: SmartDJState;
                canSmartVJ: SmartVJState;
                contentId: string;
                discNumber: number;
                editedFields: number;
                explicitLyrics: string;
                genre: string;
                period: string;
                releaseDate: string;
                requestId: string;
                sortArtist: string;
                sortTitle: string;
                title: string;
                trackBingId: string;
                trackMediaId: string;
                trackNumber: number;
                unblockFromCloud: Boolean;
                uniqueFileId: string;
            }
            export interface ITrackProvider {
                getBookmarkAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetBookmarkReturnValue>;
                setBookmarkAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction;
                getPlaycountAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetPlaycountReturnValue>;
                setPlaycountAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction;
                getPlayedStatusAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetPlayedStatusReturnValue>;
                setPlayedStatusAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction;
                getPreferredFileUrlAsync(libraryId: number): Windows.Foundation.IAsyncOperation<PreferredFileUrlReturnValue>;
                getPlayabilityByLibraryIdAsync(nLibraryId: number): Windows.Foundation.IAsyncOperation<IPlayableMediaData>;
                getFileCountsByLibraryIdAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetFileCountsReturnValue>;
                getFileCountsByMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetFileCountsReturnValue>;
                getLibraryIdFromMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue>;
                getLibraryTrackInfoAsync(guidServiceMediaId: string): Windows.Foundation.IAsyncOperation<string>;
                getMatchedCountsAsync(): Windows.Foundation.IAsyncOperation<MatchedCountsReturnValue>;
                updateTracksMetadataAsync(pIAlbumMetadata: IAlbumMetadata, requestType: RequestType): Windows.Foundation.IAsyncAction;
                setBlockMusicVideoAsync(libraryId: number, fBlockMusicVideo: Boolean): Windows.Foundation.IAsyncAction;
                uploadAsync(libraryId: number): Windows.Foundation.IAsyncAction;
            }
            export interface IVideoProvider {
                getBookmarkAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetBookmarkReturnValue>;
                setBookmarkAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction;
                getPlaycountAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetPlaycountReturnValue>;
                setPlaycountAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction;
                getPlayedStatusAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetPlayedStatusReturnValue>;
                setPlayedStatusAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction;
                getPreferredFileUrlAsync(libraryId: number): Windows.Foundation.IAsyncOperation<PreferredFileUrlReturnValue>;
                getPlayabilityByLibraryIdAsync(nLibraryId: number): Windows.Foundation.IAsyncOperation<IPlayableMediaData>;
                getFileCountsByLibraryIdAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetFileCountsReturnValue>;
                getFileCountsByMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetFileCountsReturnValue>;
                getLibraryIdFromMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue>;
                getLastWatchedEpisodeForSeriesAsync(tvSeriesMediaId: string): Windows.Foundation.IAsyncOperation<GetLastWatchedEpisodeForSeriesReturnValue>;
            }
            export interface IWatchlistProvider {
                addToWatchlistAsync(watchlistId: number, serviceMediaId: string, itemType: WatchlistItemType): Windows.Foundation.IAsyncAction;
                removeFromWatchlistAsync(watchlistId: number, serviceMediaId: string, itemType: WatchlistItemType): Windows.Foundation.IAsyncAction;
                isInWatchlistAsync(watchlistId: number, serviceMediaId: string): Windows.Foundation.IAsyncOperation<IsInWatchlistReturnValue>;
                canAddToWatchlistAsync(watchlistId: number, serviceMediaId: string): Windows.Foundation.IAsyncOperation<CanAddToWatchlistReturnValue>;
                trimWatchlistAsync(watchlistId: number): Windows.Foundation.IAsyncAction;
            }
            export namespace Logging { 
                export interface ComputedProperties {
                    sessionTimestamp: string;
                    machineId: string;
                    visitorId: string;
                    isUserLive: string;
                    hardwareInfo: string;
                    oemid: string;
                    clientVersion: string;
                    buildBranchInfo: string;
                    computerArchitecture: string;
                    marketplaceLocation: string;
                    timeZone: string;
                    userLanguage: string;
                    isTest: string;
                    userAge: string;
                    userGender: string;
                    userEnvironment: string;
                    oslanguage: string;
                    sessionGuid: string;
                    previousSessionGuid: string;
                }
                export class DataPoint implements IDataPoint, ILogElement {
                    // constructor();
                    // constructor(level: LoggingLevel);
                    // constructor(level: LoggingLevel, authMethod: TelemetryAuthMethod);
                    constructor(level: LoggingLevel, authMethod: TelemetryAuthMethod) {}

                    level: LoggingLevel;
                    authMethod: TelemetryAuthMethod;
                    static properties: ComputedProperties = null;

                    write(): void {
                        console.warn('shimmed function DataPoint.write');
                    }

                    appendTarget(value: string): void {
                        console.warn('shimmed function DataPoint.appendTarget');
                    }

                    appendGroupBegin(value: string): void {
                        console.warn('shimmed function DataPoint.appendGroupBegin');
                    }

                    appendGroupEnd(): void {
                        console.warn('shimmed function DataPoint.appendGroupEnd');
                    }

                    appendArea(value: string): void {
                        console.warn('shimmed function DataPoint.appendArea');
                    }

                    appendUIPath(value: string): void {
                        console.warn('shimmed function DataPoint.appendUIPath');
                    }

                    appendComponent(value: string): void {
                        console.warn('shimmed function DataPoint.appendComponent');
                    }

                    appendEventName(value: string): void {
                        console.warn('shimmed function DataPoint.appendEventName');
                    }

                    appendParameter(name: string, value: string): void {
                        console.warn('shimmed function DataPoint.appendParameter');
                    }

                    appendDestination(listener: TelemetryListener): void {
                        console.warn('shimmed function DataPoint.appendDestination');
                    }

                }
                export interface IArea {
                    name: string;
                }
                export interface IComponent {
                    name: string;
                }
                export interface IDataPoint extends ILogElement {
                    authMethod: TelemetryAuthMethod;
                    level: LoggingLevel;
                    write(): void;
                }
                export interface IDataPointFactory {
                    createObject(level: LoggingLevel): DataPoint;
                    createObject2(level: LoggingLevel, authMethod: TelemetryAuthMethod): DataPoint;
                }
                export interface IDataPointStatics {
                    properties: ComputedProperties;
                }
                export interface IEventName {
                    name: string;
                }
                export interface IGroupBegin {
                    name: string;
                }
                export interface IGroupEnd {
                }
                export interface ILogElement {
                    appendTarget(value: string): void;
                    appendGroupBegin(value: string): void;
                    appendGroupEnd(): void;
                    appendArea(value: string): void;
                    appendUIPath(value: string): void;
                    appendComponent(value: string): void;
                    appendEventName(value: string): void;
                    appendParameter(name: string, value: string): void;
                    appendDestination(listener: TelemetryListener): void;
                }
                export interface IParameter {
                    name: string;
                    value: string;
                }
                export interface ITarget {
                    name: string;
                }
                export interface IUIPath {
                    name: string;
                }
                export enum LoggingLevel {
                    error,
                    shipAssert,
                    assert,
                    telemetryClick,
                    telemetryImpression,
                    telemetry,
                    exception,
                    warning,
                    info,
                    bugHunting,
                }
                export enum TelemetryAuthMethod {
                    dontCare,
                    unauthenticated,
                }
                export enum TelemetryListener {
                    etw,
                    cosmos,
                    mediaUsage,
                    keystone,
                }
            }
            export interface MatchedCountsReturnValue {
                localAndCloudValidRightsTrackCount: number;
                localTrackCount: number;
            }
            export enum MediaAvailability {
                undefined = 800,
                available,
                availableOffline,
                availableFromCloud,
                availableFromCloudDriveOnly,
                availableFromCloudOnly,
                availableOnRemovableDrive,
                availableOnInternalDrive,
                thisDeviceOnly,
                oneDrive,
                musicPass,
                purchased,
            }
            export class MediaProvider implements IMediaProvider {
                deleteMediaAsync(libraryType: number, piLibraryIds: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function MediaProvider.deleteMediaAsync');
                }

                copyMediaAsync(from: MediaStorageLocation, to: MediaStorageLocation, libraryType: number, piLibraryIds: number[]): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function MediaProvider.copyMediaAsync');
                }

                addMediaToCloudAsync(libraryType: number, piLibraryIds: number[]): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function MediaProvider.addMediaToCloudAsync');
                }

                destroyDatabase(): void {
                    console.warn('shimmed function MediaProvider.destroyDatabase');
                }

                deleteFilesForMediaAsync(libraryType: number, piLibraryIds: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function MediaProvider.deleteFilesForMediaAsync');
                }

            }
            export enum MediaStorageLocation {
                internalDrive = 1600,
                removableDrive,
            }
            export class MediaStore implements IMediaStore {
                // constructor();
                albumProvider: IAlbumProvider = null;
                artistProvider: IArtistProvider = null;
                databaseNeedsUpgrade: Boolean = false;
                mediaProvider: IMediaProvider = null;
                offlineDetailProvider: IOfflineDetailProvider = null;
                playlistProvider: IPlaylistProvider = null;
                ratingProvider: IRatingProvider = null;
                seriesProvider: ISeriesProvider = null;
                sharingProvider: ISharingProvider = null;
                trackProvider: ITrackProvider = null;
                videoProvider: IVideoProvider = null;
                watchlistProvider: IWatchlistProvider = null;

                prepareDatabaseForSuspend(prepareForSuspend: Boolean): void {
                    console.warn('shimmed function MediaStore.prepareDatabaseForSuspend');
                }

                closeDatabase(): void {
                    console.warn('shimmed function MediaStore.closeDatabase');
                }

                ensureDatabaseOpenedAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function MediaStore.ensureDatabaseOpenedAsync');
                }

                getMemoryUsageStats(): string {
                    throw new Error('shimmed function MediaStore.getMemoryUsageStats');
                }

                clearMemoryUsageStats(): void {
                    console.warn('shimmed function MediaStore.clearMemoryUsageStats');
                }

            }
            export class OfflineDetailProvider implements IOfflineDetailProvider {
                addWithMediaAsync(libraryId: number, libraryTypeId: number, expirationDays: number, detailBuffer: string, detailSize: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function OfflineDetailProvider.addWithMediaAsync');
                }

                addWithKeyAsync(key: string, expirationDays: number, detailBuffer: string, detailSize: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function OfflineDetailProvider.addWithKeyAsync');
                }

                removeWithMediaAsync(libraryId: number, libraryTypeId: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function OfflineDetailProvider.removeWithMediaAsync');
                }

                removeWithKeyAsync(key: string): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function OfflineDetailProvider.removeWithKeyAsync');
                }

                getDetailWithMediaAsync(libraryId: number, libraryTypeId: number): Windows.Foundation.IAsyncOperation<GetDetailReturnValue> {
                    throw new Error('shimmed function OfflineDetailProvider.getDetailWithMediaAsync');
                }

                getDetailWithKeyAsync(key: string): Windows.Foundation.IAsyncOperation<GetDetailReturnValue> {
                    throw new Error('shimmed function OfflineDetailProvider.getDetailWithKeyAsync');
                }

                setIfMatchValueWithKeyAsync(key: string, ifMatchValue: string): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function OfflineDetailProvider.setIfMatchValueWithKeyAsync');
                }

            }
            export class PlayableMediaData implements IPlayableMediaData {
                cloudStreamable: Boolean;
                isDownloading: Boolean;
                libraryId: number;
                locallyPlayable: Boolean;
                mediaId: string;
                mediaType: number;

            }
            export namespace Playback { 
                export interface IMBRBandwidthTest {
                    start(uri: string): Windows.Foundation.IAsyncOperationWithProgress<number,number>;
                }
                export interface ISmoothStreamingPlaybackReporter {
                    chunkHistorySize: number;
                    setMainAttribute(name: string, value: any): void;
                    setSubAttribute(name: string, value: any): void;
                    appendSubAttribute(name: string, value: any): void;
                    subreportEnd(): void;
                    sendLogAsync(action: string, fatal: Boolean): void;
                    forceFpsUpdate(): void;
                    reportRates(frameRate: number, actualFramesPerSecond: number, droppedFramesPerSecond: number): void;
                    shutdown(): void;
                    addDownloadData(startedTicks: number, openedTicks: number, completedTicks: number, sizeInBytes: number, hnsStarttime: number, qualityLevel: number): void;
                    addChunkInfo(bitrateIndex: number, bitrate: number, width: number, height: number): void;
                    addChunkHistory(chunkID: number, bitrate: number, bitrateIndex: number, hnsBuffer: number, avgBandwidth: number, lastBandwidth: number): void;
                    addChunkIP(chunkTimestampHns: number, chunkIP: number): void;
                    removeAllChunkIPs(): void;
                    reportBuffering(): void;
                    reportExcessiveBuffering(startingPositionMs: number, nAttempts: number, fExiting: Boolean): void;
                    reportBadUrl(hr: number, description: string): void;
                    reportBadManifest(hr: number, description: string): void;
                }
                export class MBRBandwidthTest implements IMBRBandwidthTest {
                    // constructor();
                    start(uri: string): Windows.Foundation.IAsyncOperationWithProgress<number,number> {
                        throw new Error('shimmed function MBRBandwidthTest.start');
                    }

                }
                export class SmoothStreamingPlaybackReporter implements ISmoothStreamingPlaybackReporter {
                    // constructor();
                    chunkHistorySize: number = 0;

                    setMainAttribute(name: string, value: any): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.setMainAttribute');
                    }

                    setSubAttribute(name: string, value: any): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.setSubAttribute');
                    }

                    appendSubAttribute(name: string, value: any): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.appendSubAttribute');
                    }

                    subreportEnd(): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.subreportEnd');
                    }

                    sendLogAsync(action: string, fatal: Boolean): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.sendLogAsync');
                    }

                    forceFpsUpdate(): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.forceFpsUpdate');
                    }

                    reportRates(frameRate: number, actualFramesPerSecond: number, droppedFramesPerSecond: number): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.reportRates');
                    }

                    shutdown(): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.shutdown');
                    }

                    addDownloadData(startedTicks: number, openedTicks: number, completedTicks: number, sizeInBytes: number, hnsStarttime: number, qualityLevel: number): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.addDownloadData');
                    }

                    addChunkInfo(bitrateIndex: number, bitrate: number, width: number, height: number): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.addChunkInfo');
                    }

                    addChunkHistory(chunkID: number, bitrate: number, bitrateIndex: number, hnsBuffer: number, avgBandwidth: number, lastBandwidth: number): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.addChunkHistory');
                    }

                    addChunkIP(chunkTimestampHns: number, chunkIP: number): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.addChunkIP');
                    }

                    removeAllChunkIPs(): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.removeAllChunkIPs');
                    }

                    reportBuffering(): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.reportBuffering');
                    }

                    reportExcessiveBuffering(startingPositionMs: number, nAttempts: number, fExiting: Boolean): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.reportExcessiveBuffering');
                    }

                    reportBadUrl(hr: number, description: string): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.reportBadUrl');
                    }

                    reportBadManifest(hr: number, description: string): void {
                        console.warn('shimmed function SmoothStreamingPlaybackReporter.reportBadManifest');
                    }

                }
            }
            export class PlaylistProvider implements IPlaylistProvider {
                createPlaylistAsync(type: PlaylistType, title: string, overwriteExisting: Boolean): Windows.Foundation.IAsyncOperation<CreatePlaylistReturnValue> {
                    throw new Error('shimmed function PlaylistProvider.createPlaylistAsync');
                }

                appendPlaylistItemsAsync(playlistId: number, libraryIds: number[], serviceMediaIds: string[], libraryTypeIds: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.appendPlaylistItemsAsync');
                }

                appendPlaylistItemsAsync_1(playlistId: number, libraryIds: number[], serviceMediaIds: string[], libraryTypeIds: number[], availabilityFilter: MediaAvailability, acquisitionContextTypes: number[], acquisitionContexts: number[], acquisitionContextIds: string[], acquisitionAdditionalContexts: string[]): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.appendPlaylistItemsAsync_1');
                }

                appendMarketplaceTrackPlaylistItemAsync(playlistId: number, libraryIds: number[], albumTitles: string[], albumArtists: string[], trackTitles: string[], trackArtists: string[], genres: string[], durations: number[], albumArtistSmids: string[], trackArtistSmids: string[], serviceMediaIds: string[], libraryTypeId: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.appendMarketplaceTrackPlaylistItemAsync');
                }

                appendMarketplaceTrackPlaylistItemAsync_1(playlistId: number, libraryIds: number[], albumTitles: string[], albumArtists: string[], trackTitles: string[], trackArtists: string[], genres: string[], durations: number[], albumArtistSmids: string[], trackArtistSmids: string[], serviceMediaIds: string[], libraryTypeId: number, acquisitionContextTypes: number[], acquisitionContexts: number[], acquisitionContextIds: string[], acquisitionAdditionalContexts: string[]): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.appendMarketplaceTrackPlaylistItemAsync_1');
                }

                appendMarketplaceVideoPlaylistItemAsync(playlistId: number, libraryIds: number[], titles: string[], imageUrls: string[], genres: string[], durations: number[], serviceMediaIds: string[], libraryTypeId: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.appendMarketplaceVideoPlaylistItemAsync');
                }

                appendMarketplaceVideoPlaylistItemAsync_1(playlistId: number, libraryIds: number[], titles: string[], imageUrls: string[], genres: string[], durations: number[], serviceMediaIds: string[], libraryTypeId: number, acquisitionContextTypes: number[], acquisitionContexts: number[], acquisitionContextIds: string[], acquisitionAdditionalContexts: string[]): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.appendMarketplaceVideoPlaylistItemAsync_1');
                }

                deletePlaylistAsync(piPlaylistIds: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.deletePlaylistAsync');
                }

                renamePlaylistAsync(nPlaylistId: number, bstrNewTitle: string): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.renamePlaylistAsync');
                }

                setPlayedStatusAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.setPlayedStatusAsync');
                }

                removePlaylistItemsAsync(nPlaylistId: number, piIndexes: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.removePlaylistItemsAsync');
                }

                reorderPlaylistItemsAsync(nPlaylistId: number, piIndexes: number[], nIndexToInsertBefore: number, availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.reorderPlaylistItemsAsync');
                }

                savePlaylistAsync(nPlaylistId: number, fullpathFilename: string): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.savePlaylistAsync');
                }

                importPlaylistsAsync(): Windows.Foundation.IAsyncOperation<ImportPlaylistCountsReturnValue> {
                    throw new Error('shimmed function PlaylistProvider.importPlaylistsAsync');
                }

                resumeImportPlaylistsAsync(): Windows.Foundation.IAsyncOperation<ImportPlaylistCountsReturnValue> {
                    throw new Error('shimmed function PlaylistProvider.resumeImportPlaylistsAsync');
                }

                getPlayabilityByLibraryIdAsync(nLibraryId: number, availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncOperation<IPlayableMediaData[]> {
                    throw new Error('shimmed function PlaylistProvider.getPlayabilityByLibraryIdAsync');
                }

                setPlaylistDateEditedToNowAsync(nPlaylistId: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.setPlaylistDateEditedToNowAsync');
                }

                setPlaylistKeepOfflineAsync(nPlaylistId: number, fKeepOffline: Boolean): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.setPlaylistKeepOfflineAsync');
                }

                savePlaylistRadioSeedAsync(nPlaylistId: number, smartDjSeed: string): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.savePlaylistRadioSeedAsync');
                }

                savePlaylistCurrentItemIndexAsync(nPlaylistId: number, currentItemIndex: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.savePlaylistCurrentItemIndexAsync');
                }

                saveNowPlayingPlaylistAsync(playlistName: string): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistProvider.saveNowPlayingPlaylistAsync');
                }

                getPlaylistItemCountsAsync(nPlaylistId: number): Windows.Foundation.IAsyncOperation<GetPlaylistCountsReturnValue> {
                    throw new Error('shimmed function PlaylistProvider.getPlaylistItemCountsAsync');
                }

                hasPlaylistBeenSyncedAsync(nPlaylistId: number): Windows.Foundation.IAsyncOperation<HasPlaylistBeenSyncedReturnValue> {
                    throw new Error('shimmed function PlaylistProvider.hasPlaylistBeenSyncedAsync');
                }

            }
            export enum PlaylistType {
                static,
                nowPlaying = 7,
                watchlist = 10,
                notCloudSynced,
            }
            export interface PreferredFileUrlReturnValue {
                url: string;
                type: FileUrlType;
                protection: ProtectionState;
                mediaInstanceId: string;
            }
            export enum ProtectionState {
                unknown = 100,
                unprotected,
                protected,
            }
            export enum Rating {
                clear,
                oneStar,
                twoStars,
                threeStars,
                fourStars,
                fiveStars,
                like,
                dislike,
            }
            export class RatingProvider implements IRatingProvider {
                setCollectionItemsRatingAsync(libraryIds: number[], libraryType: number, ratingType: RatingType, rating: Rating): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function RatingProvider.setCollectionItemsRatingAsync');
                }

                setMarketplaceItemsRatingAsync(bingIds: string[], ratingType: RatingType, rating: Rating): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function RatingProvider.setMarketplaceItemsRatingAsync');
                }

                getRatingForMarketplaceItemAsync(bingId: string, ratingType: RatingType): Windows.Foundation.IAsyncOperation<GetRatingReturnValue> {
                    throw new Error('shimmed function RatingProvider.getRatingForMarketplaceItemAsync');
                }

            }
            export enum RatingType {
                tvepisode,
                tvseries,
                movie,
            }
            export enum RequestType {
                tocrequest = 1,
                wmidrequest,
                etmrequest,
                singleTrackETMRequest,
                wmisalbumIDRequest,
                submitFeedbackRequest,
                userEditRequest,
            }
            export class SeriesProvider implements ISeriesProvider {
                getLibraryIdFromMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue> {
                    throw new Error('shimmed function SeriesProvider.getLibraryIdFromMediaIdAsync');
                }

                getSeasonLibraryIdFromMediaIdAsync(mediaId: string, nSeasonNumber: number): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue> {
                    throw new Error('shimmed function SeriesProvider.getSeasonLibraryIdFromMediaIdAsync');
                }

                getPlayabilityByLibraryIdAsync(nLibraryId: number): Windows.Foundation.IAsyncOperation<IPlayableMediaData[]> {
                    throw new Error('shimmed function SeriesProvider.getPlayabilityByLibraryIdAsync');
                }

                getPlayabilityBySeasonLibraryIdAsync(nLibraryId: number): Windows.Foundation.IAsyncOperation<IPlayableMediaData[]> {
                    throw new Error('shimmed function SeriesProvider.getPlayabilityBySeasonLibraryIdAsync');
                }

                hasLocalMediaAsync(libraryId: number): Windows.Foundation.IAsyncOperation<HasMediaReturnValue> {
                    throw new Error('shimmed function SeriesProvider.hasLocalMediaAsync');
                }

                hasLocalMediaInSeasonAsync(seriesLibraryId: number, seasonId: number): Windows.Foundation.IAsyncOperation<HasMediaReturnValue> {
                    throw new Error('shimmed function SeriesProvider.hasLocalMediaInSeasonAsync');
                }

                hasRemoteMediaAsync(libraryId: number): Windows.Foundation.IAsyncOperation<HasMediaReturnValue> {
                    throw new Error('shimmed function SeriesProvider.hasRemoteMediaAsync');
                }

            }
            export class ShareableContent implements IShareableContent {
                mediaDescription: string;
                storageFiles: any[];

            }
            export class SharingProvider implements ISharingProvider {
                getShareableContentForMediaAsync(piLibraryIds: number[], piLibraryTypes: number[], availabilityFilter: MediaAvailability): Windows.Foundation.IAsyncOperation<IShareableContent> {
                    throw new Error('shimmed function SharingProvider.getShareableContentForMediaAsync');
                }

            }
            export enum SmartDJState {
                unknown,
                canSmartDJ,
                cannotSmartDJ,
            }
            export enum SmartVJState {
                unknown,
                canSmartVJ,
                cannotSmartVJ,
            }
            export namespace Telemetry { 
                export enum AppLaunchType {
                    unknown,
                    userLaunched,
                    appContract,
                    tombstone,
                }
                export enum Behavior {
                    undefined,
                    unknown,
                    other,
                }
                export class Events {
                    static shipAssert(text: string, hResult: number): IShipAssertEvent {
                        throw new Error('shimmed function Events.shipAssert');
                    }

                    static exception(text: string, hResult: number): IExceptionEvent {
                        throw new Error('shimmed function Events.exception');
                    }

                    static appLaunch(type: AppLaunchType): IAppLaunchEvent {
                        throw new Error('shimmed function Events.appLaunch');
                    }

                    static pageView(pageName: string): IPageViewEvent {
                        throw new Error('shimmed function Events.pageView');
                    }

                    static pageAction(pageName: string): IPageActionEvent {
                        throw new Error('shimmed function Events.pageAction');
                    }

                    static share(): IShareEvent {
                        throw new Error('shimmed function Events.share');
                    }

                }
                export interface IAppLaunchEvent {
                    setLaunchSource(value: string): IAppLaunchEvent;
                    send(): void;
                }
                export interface IExceptionEvent {
                    setCallStack(value: string): IExceptionEvent;
                    setFileTag(value: number): IExceptionEvent;
                    setLine(value: number): IExceptionEvent;
                    setFunction(value: string): IExceptionEvent;
                    setFile(value: string): IExceptionEvent;
                    setCatchSiteFileTag(value: number): IExceptionEvent;
                    setCatchSiteLine(value: number): IExceptionEvent;
                    setCatchSiteFunction(value: string): IExceptionEvent;
                    setCatchSiteFile(value: string): IExceptionEvent;
                    send(): void;
                }
                export enum InputMethod {
                    undefined,
                    unknown,
                    other,
                    keyboard,
                    mouse,
                    touchpad,
                    touchscreen,
                    pen,
                    gameController,
                    voice,
                    userMotion,
                    nearFieldCommunication,
                    deviceSensor,
                    bluetooth,
                }
                export interface IPageActionEvent {
                    setUri(value: string): IPageActionEvent;
                    setDestUri(value: string): IPageActionEvent;
                    setPageType(value: string): IPageActionEvent;
                    setPageTags(value: string): IPageActionEvent;
                    setProduct(value: string): IPageActionEvent;
                    setScreenState(value: ScreenState): IPageActionEvent;
                    setCustomSessionGuid(value: string): IPageActionEvent;
                    setImpressionGuid(value: string): IPageActionEvent;
                    setActionInputMethod(value: InputMethod): IPageActionEvent;
                    setBehavior(value: Behavior): IPageActionEvent;
                    setContentJsonVer(value: number): IPageActionEvent;
                    setExtraContent(value: string): IPageActionEvent;
                    send(): void;
                }
                export interface IPageViewEvent {
                    setUri(value: string): IPageViewEvent;
                    setReferrerUri(value: string): IPageViewEvent;
                    setPageType(value: string): IPageViewEvent;
                    setPageTags(value: string): IPageViewEvent;
                    setProduct(value: string): IPageViewEvent;
                    setScreenState(value: ScreenState): IPageViewEvent;
                    setCustomSessionGuid(value: string): IPageViewEvent;
                    setImpressionGuid(value: string): IPageViewEvent;
                    setContentJsonVer(value: number): IPageViewEvent;
                    setExtraContent(value: string): IPageViewEvent;
                    send(): void;
                }
                export interface IShareEvent {
                    setMediaName(value: string): IShareEvent;
                    setMediaType(value: string): IShareEvent;
                    setFromAppId(value: string): IShareEvent;
                    setToAppId(value: string): IShareEvent;
                    setPage(value: string): IShareEvent;
                    send(): void;
                }
                export interface IShipAssertEvent {
                    setCallStack(value: string): IShipAssertEvent;
                    setFileTag(value: number): IShipAssertEvent;
                    setLine(value: number): IShipAssertEvent;
                    setFunction(value: string): IShipAssertEvent;
                    setFile(value: string): IShipAssertEvent;
                    setUniqueId(value: string): IShipAssertEvent;
                    setId(value: number): IShipAssertEvent;
                    send(): void;
                }
                export interface ITelemetryFactoryStatics {
                    shipAssert(text: string, hResult: number): IShipAssertEvent;
                    exception(text: string, hResult: number): IExceptionEvent;
                    appLaunch(type: AppLaunchType): IAppLaunchEvent;
                    pageView(pageName: string): IPageViewEvent;
                    pageAction(pageName: string): IPageActionEvent;
                    share(): IShareEvent;
                }
                export interface ITelemetryStatics {
                    correlationId: string;
                    registerTelemetry(correlationId: string): void;
                    unregisterTelemetry(): void;
                    changeCorrelationId(correlationId: string): void;
                }
                export enum ScreenState {
                    undefined,
                    unknown,
                    other,
                    full,
                    windowed,
                    minimized,
                    snappedOneHalf,
                    snappedOneThird,
                    snappedTwoThird,
                    snappedOneFourth,
                    snappedThreeFourth,
                    snappedOther,
                }
                export class System {
                    static correlationId: string;

                    static registerTelemetry(correlationId: string): void {
                        console.warn('shimmed function System.registerTelemetry');
                    }

                    static unregisterTelemetry(): void {
                        console.warn('shimmed function System.unregisterTelemetry');
                    }

                    static changeCorrelationId(correlationId: string): void {
                        console.warn('shimmed function System.changeCorrelationId');
                    }

                }
            }
            export class TrackMetadata implements ITrackMetadata {
                // constructor();
                uniqueFileId: string = '';
                unblockFromCloud: Boolean = false;
                trackNumber: number = 0;
                trackMediaId: string = '';
                trackBingId: string = '';
                title: string = '';
                sortTitle: string = '';
                sortArtist: string = '';
                requestId: string = '';
                releaseDate: string = '';
                period: string = '';
                genre: string = '';
                explicitLyrics: string = '';
                editedFields: number = 0;
                discNumber: number = 0;
                contentId: string = '';
                canSmartVJ: SmartVJState = SmartVJState.unknown;
                canSmartDJ: SmartDJState = SmartDJState.unknown;
                artistMediaId: string = '';
                artistImageUrl: string = '';
                artistBingId: string = '';
                artist: string = '';
                actionableMediaId: string = '';

            }
            export class TrackProvider implements ITrackProvider {
                getBookmarkAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetBookmarkReturnValue> {
                    throw new Error('shimmed function TrackProvider.getBookmarkAsync');
                }

                setBookmarkAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TrackProvider.setBookmarkAsync');
                }

                getPlaycountAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetPlaycountReturnValue> {
                    throw new Error('shimmed function TrackProvider.getPlaycountAsync');
                }

                setPlaycountAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TrackProvider.setPlaycountAsync');
                }

                getPlayedStatusAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetPlayedStatusReturnValue> {
                    throw new Error('shimmed function TrackProvider.getPlayedStatusAsync');
                }

                setPlayedStatusAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TrackProvider.setPlayedStatusAsync');
                }

                getPreferredFileUrlAsync(libraryId: number): Windows.Foundation.IAsyncOperation<PreferredFileUrlReturnValue> {
                    throw new Error('shimmed function TrackProvider.getPreferredFileUrlAsync');
                }

                getPlayabilityByLibraryIdAsync(nLibraryId: number): Windows.Foundation.IAsyncOperation<IPlayableMediaData> {
                    throw new Error('shimmed function TrackProvider.getPlayabilityByLibraryIdAsync');
                }

                getFileCountsByLibraryIdAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetFileCountsReturnValue> {
                    throw new Error('shimmed function TrackProvider.getFileCountsByLibraryIdAsync');
                }

                getFileCountsByMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetFileCountsReturnValue> {
                    throw new Error('shimmed function TrackProvider.getFileCountsByMediaIdAsync');
                }

                getLibraryIdFromMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue> {
                    throw new Error('shimmed function TrackProvider.getLibraryIdFromMediaIdAsync');
                }

                getLibraryTrackInfoAsync(guidServiceMediaId: string): Windows.Foundation.IAsyncOperation<string> {
                    throw new Error('shimmed function TrackProvider.getLibraryTrackInfoAsync');
                }

                getMatchedCountsAsync(): Windows.Foundation.IAsyncOperation<MatchedCountsReturnValue> {
                    throw new Error('shimmed function TrackProvider.getMatchedCountsAsync');
                }

                updateTracksMetadataAsync(pIAlbumMetadata: IAlbumMetadata, requestType: RequestType): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TrackProvider.updateTracksMetadataAsync');
                }

                setBlockMusicVideoAsync(libraryId: number, fBlockMusicVideo: Boolean): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TrackProvider.setBlockMusicVideoAsync');
                }

                uploadAsync(libraryId: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TrackProvider.uploadAsync');
                }

            }
            export interface UpdateAlbumMetadataReturnValue {
                libraryId: number;
            }
            export class VideoProvider implements IVideoProvider {
                getBookmarkAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetBookmarkReturnValue> {
                    throw new Error('shimmed function VideoProvider.getBookmarkAsync');
                }

                setBookmarkAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function VideoProvider.setBookmarkAsync');
                }

                getPlaycountAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetPlaycountReturnValue> {
                    throw new Error('shimmed function VideoProvider.getPlaycountAsync');
                }

                setPlaycountAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function VideoProvider.setPlaycountAsync');
                }

                getPlayedStatusAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetPlayedStatusReturnValue> {
                    throw new Error('shimmed function VideoProvider.getPlayedStatusAsync');
                }

                setPlayedStatusAsync(libraryId: number, value: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function VideoProvider.setPlayedStatusAsync');
                }

                getPreferredFileUrlAsync(libraryId: number): Windows.Foundation.IAsyncOperation<PreferredFileUrlReturnValue> {
                    throw new Error('shimmed function VideoProvider.getPreferredFileUrlAsync');
                }

                getPlayabilityByLibraryIdAsync(nLibraryId: number): Windows.Foundation.IAsyncOperation<IPlayableMediaData> {
                    throw new Error('shimmed function VideoProvider.getPlayabilityByLibraryIdAsync');
                }

                getFileCountsByLibraryIdAsync(libraryId: number): Windows.Foundation.IAsyncOperation<GetFileCountsReturnValue> {
                    throw new Error('shimmed function VideoProvider.getFileCountsByLibraryIdAsync');
                }

                getFileCountsByMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetFileCountsReturnValue> {
                    throw new Error('shimmed function VideoProvider.getFileCountsByMediaIdAsync');
                }

                getLibraryIdFromMediaIdAsync(mediaId: string): Windows.Foundation.IAsyncOperation<GetLibraryIdFromMediaIdReturnValue> {
                    throw new Error('shimmed function VideoProvider.getLibraryIdFromMediaIdAsync');
                }

                getLastWatchedEpisodeForSeriesAsync(tvSeriesMediaId: string): Windows.Foundation.IAsyncOperation<GetLastWatchedEpisodeForSeriesReturnValue> {
                    throw new Error('shimmed function VideoProvider.getLastWatchedEpisodeForSeriesAsync');
                }

            }
            export enum WatchlistItemType {
                movie,
                tvseason,
                bundle,
            }
            export class WatchlistProvider implements IWatchlistProvider {
                addToWatchlistAsync(watchlistId: number, serviceMediaId: string, itemType: WatchlistItemType): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function WatchlistProvider.addToWatchlistAsync');
                }

                removeFromWatchlistAsync(watchlistId: number, serviceMediaId: string, itemType: WatchlistItemType): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function WatchlistProvider.removeFromWatchlistAsync');
                }

                isInWatchlistAsync(watchlistId: number, serviceMediaId: string): Windows.Foundation.IAsyncOperation<IsInWatchlistReturnValue> {
                    throw new Error('shimmed function WatchlistProvider.isInWatchlistAsync');
                }

                canAddToWatchlistAsync(watchlistId: number, serviceMediaId: string): Windows.Foundation.IAsyncOperation<CanAddToWatchlistReturnValue> {
                    throw new Error('shimmed function WatchlistProvider.canAddToWatchlistAsync');
                }

                trimWatchlistAsync(watchlistId: number): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function WatchlistProvider.trimWatchlistAsync');
                }

            }
        }
        export namespace Queries { 
            export class AlbumDataItem implements IAlbumDataItem {
                // constructor();
            }
            export class AlbumDataset implements IAlbumDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class AlbumsQuery implements IAlbumsQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;
                watchAll: number = 0;
                primarySortBy: AlbumsSortBy;
                playlistId: number;
                pageSize: number = 100;
                mediaAvailability: Platform.MediaAvailability;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                groupsEnabled: number;
                genreId: number;
                complexFieldsEnabled: number;
                artistId: number;
                albumIds: Windows.Foundation.Collections.IIterable<number>;
                albumId: number;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function AlbumsQuery.executeAsync');
                }

                getCountAsync(): AlbumsQueryCountOperation {
                    throw new Error('shimmed function AlbumsQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function AlbumsQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function AlbumsQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function AlbumsQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function AlbumsQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function AlbumsQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function AlbumsQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function AlbumsQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function AlbumsQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`AlbumsQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class AlbumsQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function AlbumsQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function AlbumsQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function AlbumsQueryCountOperation.close');
                }

            }
            export class AlbumsQueryGroupsOperation implements IAlbumsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                query: IAlbumsQuery;
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): AlbumDataset {
                    throw new Error('shimmed function AlbumsQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function AlbumsQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function AlbumsQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function AlbumsQueryGroupsOperation.close');
                }

            }
            export class AlbumsQueryOperation implements IAlbumsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                query: IAlbumsQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;

                wait(): AlbumDataset {
                    throw new Error('shimmed function AlbumsQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function AlbumsQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function AlbumsQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function AlbumsQueryOperation.close');
                }

            }
            export enum AlbumsSortBy {
                none = 10100,
                dateAddedAscending,
                dateAddedDescending,
                titleAscending,
                titleDescending,
                releaseYearAscendingTitleAscending,
                releaseYearDescendingTitleAscending,
                artistAscending,
                artistDescending,
                artistAscendingReleaseYearDescending,
                artistDescendingReleaseYearDescending,
                genreNameTitleAscending,
                genreNameTitleDescending,
                recentlyPlayedDescending,
            }
            export enum ArtistOf {
                undefined = 700,
                track,
                video,
                album,
            }
            export class FileDataItem implements IFileDataItem {
                // constructor();
            }
            export class FileDataset implements IFileDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class FilesQuery implements IFilesQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                watchAll: number = 0;
                trackId: number;
                pageSize: number = 100;
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function FilesQuery.executeAsync');
                }

                getCountAsync(): FilesQueryCountOperation {
                    throw new Error('shimmed function FilesQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function FilesQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function FilesQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function FilesQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function FilesQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function FilesQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function FilesQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function FilesQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function FilesQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`FilesQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class FilesQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;

                getResults(): number {
                    throw new Error('shimmed function FilesQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function FilesQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function FilesQueryCountOperation.close');
                }

            }
            export class FilesQueryGroupsOperation implements IFilesQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                query: IFilesQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;

                wait(): FileDataset {
                    throw new Error('shimmed function FilesQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function FilesQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function FilesQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function FilesQueryGroupsOperation.close');
                }

            }
            export class FilesQueryOperation implements IFilesQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IFilesQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): FileDataset {
                    throw new Error('shimmed function FilesQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function FilesQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function FilesQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function FilesQueryOperation.close');
                }

            }
            export class FolderDataItem implements IFolderDataItem {
                // constructor();
            }
            export class FolderDataset implements IFolderDataset, IQueryResult {
                // constructor();
                json: string = '';

            }
            export class FoldersQuery implements IFoldersQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;
                watchAll: number = 0;
                videoType: VideoType;
                primarySortBy: FoldersSortBy;
                parentFolderId: number;
                pageSize: number = 100;
                folderId: number;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function FoldersQuery.executeAsync');
                }

                getCountAsync(): FoldersQueryCountOperation {
                    throw new Error('shimmed function FoldersQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function FoldersQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function FoldersQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function FoldersQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function FoldersQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function FoldersQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function FoldersQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function FoldersQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function FoldersQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`FoldersQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class FoldersQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function FoldersQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function FoldersQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function FoldersQueryCountOperation.close');
                }

            }
            export class FoldersQueryGroupsOperation implements IFoldersQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                query: IFoldersQuery;

                wait(): FolderDataset {
                    throw new Error('shimmed function FoldersQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function FoldersQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function FoldersQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function FoldersQueryGroupsOperation.close');
                }

            }
            export class FoldersQueryOperation implements IFoldersQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                query: IFoldersQuery;

                wait(): FolderDataset {
                    throw new Error('shimmed function FoldersQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function FoldersQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function FoldersQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function FoldersQueryOperation.close');
                }

            }
            export enum FoldersSortBy {
                none = 11100,
                dateAddedDescending,
                titleAscending,
                dateModifiedDescending,
            }
            export enum GameTitleType {
                system,
                standard,
                demo,
                arcade,
                application = 5,
            }
            export enum GameType {
                console,
                windows,
            }
            export class GenreDataItem implements IGenreDataItem {
                // constructor();
            }
            export class GenreDataset implements IGenreDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class GenresQuery implements IGenresQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                watchAll: number = 0;
                videoType: VideoType;
                primarySortBy: GenresSortBy;
                pageSize: number = 100;
                mediaType: GenresQueryMediaType;
                mediaAvailability: Platform.MediaAvailability;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function GenresQuery.executeAsync');
                }

                getCountAsync(): GenresQueryCountOperation {
                    throw new Error('shimmed function GenresQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function GenresQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function GenresQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function GenresQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function GenresQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function GenresQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function GenresQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function GenresQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function GenresQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`GenresQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class GenresQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;

                getResults(): number {
                    throw new Error('shimmed function GenresQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function GenresQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function GenresQueryCountOperation.close');
                }

            }
            export class GenresQueryGroupsOperation implements IGenresQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                query: IGenresQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;

                wait(): GenreDataset {
                    throw new Error('shimmed function GenresQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function GenresQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function GenresQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function GenresQueryGroupsOperation.close');
                }

            }
            export enum GenresQueryMediaType {
                undefined = 600,
                album,
                track,
                video,
                playlist,
            }
            export class GenresQueryOperation implements IGenresQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                query: IGenresQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;

                wait(): GenreDataset {
                    throw new Error('shimmed function GenresQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function GenresQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function GenresQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function GenresQueryOperation.close');
                }

            }
            export enum GenresSortBy {
                none = 10500,
                nameAscending,
                nameDescending,
            }
            export interface IAlbumDataItem {
            }
            export interface IAlbumDataset extends IQueryResult {
            }
            export interface IAlbumsQuery {
                albumId: number;
                albumIds: Windows.Foundation.Collections.IIterable<number>;
                artistId: number;
                complexFieldsEnabled: number;
                genreId: number;
                groupsEnabled: number;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                mediaAvailability: Platform.MediaAvailability;
                pageSize: number;
                playlistId: number;
                primarySortBy: AlbumsSortBy;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): AlbumsQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IAlbumsQueryOperation {
                query: IAlbumsQuery;
                wait(): AlbumDataset;
            }
            export interface IFileDataItem {
            }
            export interface IFileDataset extends IQueryResult {
            }
            export interface IFilesQuery {
                pageSize: number;
                trackId: number;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): FilesQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IFilesQueryOperation {
                query: IFilesQuery;
                wait(): FileDataset;
            }
            export interface IFolderDataItem {
            }
            export interface IFolderDataset extends IQueryResult {
            }
            export interface IFoldersQuery {
                folderId: number;
                pageSize: number;
                parentFolderId: number;
                primarySortBy: FoldersSortBy;
                videoType: VideoType;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): FoldersQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IFoldersQueryOperation {
                query: IFoldersQuery;
                wait(): FolderDataset;
            }
            export interface IGenreDataItem {
            }
            export interface IGenreDataset extends IQueryResult {
            }
            export interface IGenresQuery {
                keyword: Windows.Foundation.Collections.IIterable<string>;
                mediaAvailability: Platform.MediaAvailability;
                mediaType: GenresQueryMediaType;
                pageSize: number;
                primarySortBy: GenresSortBy;
                videoType: VideoType;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): GenresQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IGenresQueryOperation {
                query: IGenresQuery;
                wait(): GenreDataset;
            }
            export interface IMediaDataItem {
            }
            export interface IMediaDataset extends IQueryResult {
            }
            export interface IPeopleQuery {
                artistOf: ArtistOf;
                complexFieldsEnabled: number;
                getMediaEntitlements: number;
                groupsEnabled: number;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                mediaAvailability: Platform.MediaAvailability;
                pageSize: number;
                personId: number;
                personIds: Windows.Foundation.Collections.IIterable<number>;
                playlistId: number;
                primarySortBy: PeopleSortBy;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): PeopleQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IPeopleQueryOperation {
                query: IPeopleQuery;
                wait(): PersonDataset;
            }
            export interface IPersonDataItem {
            }
            export interface IPersonDataset extends IQueryResult {
            }
            export interface IPlaylistContentDataItem {
            }
            export interface IPlaylistContentDataset extends IQueryResult {
            }
            export interface IPlaylistDataItem {
            }
            export interface IPlaylistDataset extends IQueryResult {
            }
            export interface IPlaylistItemsQuery {
                mediaAvailability: Platform.MediaAvailability;
                pageSize: number;
                playlistId: number;
                primarySortBy: PlaylistItemsSortBy;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): PlaylistItemsQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IPlaylistItemsQueryOperation {
                query: IPlaylistItemsQuery;
                wait(): PlaylistContentDataset;
            }
            export interface IPlaylistMediaItemsQuery {
                mediaAvailability: Platform.MediaAvailability;
                mediaItemObjectType: ObjectType;
                pageSize: number;
                playlistId: number;
                primarySortBy: PlaylistItemsSortBy;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): PlaylistMediaItemsQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IPlaylistMediaItemsQueryOperation {
                query: IPlaylistMediaItemsQuery;
                wait(): MediaDataset;
            }
            export interface IPlaylistsQuery {
                cloudSyncItemId: string;
                groupsEnabled: number;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                mediaAvailability: Platform.MediaAvailability;
                pageSize: number;
                playlistId: number;
                playlistType: Platform.PlaylistType;
                primarySortBy: PlaylistsSortBy;
                title: string;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): PlaylistsQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IPlaylistsQueryOperation {
                query: IPlaylistsQuery;
                wait(): PlaylistDataset;
            }
            export interface IQuery extends Windows.Foundation.IClosable {
                currentPage: IQueryPage;
                nextPage: IQueryPage;
                previousPage: IQueryPage;
                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                pauseAsync(): Windows.Foundation.IAsyncAction;
                resumeAsync(): Windows.Foundation.IAsyncAction;
            }
            export interface IQueryChangedEventArgs {
                json: string;
            }
            export interface IQueryPage {
            }
            export interface IQueryResult {
                json: string;
            }
            export interface IServiceXMLQuery {
                expirationDate: Date;
                forceLowercaseJsonProperties: number;
                pluralizationRules: string[];
                requestType: RequestType;
                serviceType: ServiceType;
                uri: string;
                useCache: number;
                useIfMatchCache: number;
                addParameter(key: string, value: string): void;
                removeParameter(key: string): void;
                addHeader(key: string, value: string): void;
                removeHeader(key: string): void;
                setPostData(contentType: string, postData: string): void;
                clearCachedItemsContainingUrlAsync(): Windows.Foundation.IAsyncAction;
                testHook_SetXML(value: string): void;
                testHook_SetDelay(value: number): void;
            }
            export enum ItemCollectionState {
                notInCollection = 1300,
                notInCollectionNoRights,
                notInCollectionTakenDown,
                notInCollectionValidRights,
                cloudOnlyNoRights,
                cloudOnlyTakenDown,
                cloudOnlyValidRights,
                oneDriveOnly,
                cloudOnlyPendingSync,
                cloudAndLocalNoRights,
                cloudAndLocalTakenDown,
                cloudAndLocalValidRights,
                oneDriveAndLocal,
                localOnly,
                localOnlyNoCatalogId,
                localOnlyPendingSync,
            }
            export interface ITrackDataItem {
            }
            export interface ITrackDataset extends IQueryResult {
            }
            export interface ITracksQuery {
                albumId: number;
                artistId: number;
                genreId: number;
                groupsEnabled: number;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                maxAlbumsCount: number;
                mediaAvailability: Platform.MediaAvailability;
                pageSize: number;
                primarySortBy: TracksSortBy;
                trackId: number;
                trackIds: Windows.Foundation.Collections.IIterable<number>;
                trackUrl: string;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): TracksQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface ITracksQueryOperation {
                query: ITracksQuery;
                wait(): TrackDataset;
            }
            export interface ITVSeasonDataItem {
            }
            export interface ITVSeasonDataset extends IQueryResult {
            }
            export interface ITVSeasonsQuery {
                groupsEnabled: number;
                mediaAvailability: Platform.MediaAvailability;
                pageSize: number;
                primarySortBy: TVSeasonsSortBy;
                tvseasonId: number;
                tvseriesId: number;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): TVSeasonsQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface ITVSeasonsQueryOperation {
                query: ITVSeasonsQuery;
                wait(): TVSeasonDataset;
            }
            export interface ITVSeriesDataItem {
            }
            export interface ITVSeriesDataset extends IQueryResult {
            }
            export interface ITVSeriesQuery {
                groupsEnabled: number;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                mediaAvailability: Platform.MediaAvailability;
                pageSize: number;
                primarySortBy: TVSeriesSortBy;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): TVSeriesQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface ITVSeriesQueryOperation {
                query: ITVSeriesQuery;
                wait(): TVSeriesDataset;
            }
            export interface IVideoDataItem {
            }
            export interface IVideoDataset extends IQueryResult {
            }
            export interface IVideosQuery {
                category: VideoType;
                folderId: number;
                genreId: number;
                groupsEnabled: number;
                isNotExpiredRental: number;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                mediaAvailability: Platform.MediaAvailability;
                objectIds: Windows.Foundation.Collections.IIterable<number>;
                pageSize: number;
                playlistId: number;
                primarySortBy: VideosSortBy;
                seasonId: number;
                seriesId: number;
                studio: string;
                videoUrl: string;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): VideosQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IVideosQueryOperation {
                query: IVideosQuery;
                wait(): VideoDataset;
            }
            export interface IVideoStudioDataItem {
            }
            export interface IVideoStudioDataset extends IQueryResult {
            }
            export interface IVideoStudiosQuery {
                pageSize: number;
                watchAll: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): VideoStudiosQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IVideoStudiosQueryOperation {
                query: IVideoStudiosQuery;
                wait(): VideoStudioDataset;
            }
            export interface IWatchlistContentDataItem {
            }
            export interface IWatchlistContentDataset extends IQueryResult {
            }
            export interface IWatchlistDataItem {
            }
            export interface IWatchlistDataset extends IQueryResult {
            }
            export interface IWatchlistItemsQuery {
                mediaItemObjectType: ObjectType;
                pageSize: number;
                primarySortBy: WatchlistItemsSortBy;
                watchAll: number;
                watchlistId: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): WatchlistItemsQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IWatchlistItemsQueryOperation {
                query: IWatchlistItemsQuery;
                wait(): WatchlistContentDataset;
            }
            export interface IWatchlistsQuery {
                groupsEnabled: number;
                isDefaultWatchlist: number;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                pageSize: number;
                primarySortBy: WatchlistsSortBy;
                title: string;
                watchAll: number;
                watchlistId: number;
                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                getCountAsync(): WatchlistsQueryCountOperation;
                setCursorPosition(index: number): void;
                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>;
                refreshAsync(): Windows.Foundation.IAsyncAction;
                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number>;
            }
            export interface IWatchlistsQueryOperation {
                query: IWatchlistsQuery;
                wait(): WatchlistDataset;
            }
            export class MediaDataItem implements IMediaDataItem {
                // constructor();
            }
            export class MediaDataset implements IMediaDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export enum ObjectType {
                video = 100,
                tvseries,
                tvseason,
                track,
                album,
                person,
                genre,
                playlist,
                review,
                bio,
                editorial,
                game,
                smartDJ,
                closedCaption,
                folder,
                smartVJ,
                bundle,
            }
            export class PageIndexToken implements IQueryPage {
                // constructor();
            }
            export class PeopleQuery implements IPeopleQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;
                watchAll: number = 0;
                primarySortBy: PeopleSortBy;
                playlistId: number;
                personIds: Windows.Foundation.Collections.IIterable<number>;
                personId: number;
                pageSize: number = 100;
                mediaAvailability: Platform.MediaAvailability;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                groupsEnabled: number;
                getMediaEntitlements: number;
                complexFieldsEnabled: number;
                artistOf: ArtistOf;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PeopleQuery.executeAsync');
                }

                getCountAsync(): PeopleQueryCountOperation {
                    throw new Error('shimmed function PeopleQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function PeopleQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PeopleQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PeopleQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function PeopleQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PeopleQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PeopleQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PeopleQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function PeopleQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`PeopleQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class PeopleQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function PeopleQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PeopleQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PeopleQueryCountOperation.close');
                }

            }
            export class PeopleQueryGroupsOperation implements IPeopleQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IPeopleQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): PersonDataset {
                    throw new Error('shimmed function PeopleQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function PeopleQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PeopleQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PeopleQueryGroupsOperation.close');
                }

            }
            export class PeopleQueryOperation implements IPeopleQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                query: IPeopleQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;

                wait(): PersonDataset {
                    throw new Error('shimmed function PeopleQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function PeopleQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PeopleQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PeopleQueryOperation.close');
                }

            }
            export enum PeopleSortBy {
                none = 10400,
                nameAscending,
                nameDescending,
            }
            export class PersonDataItem implements IPersonDataItem {
                // constructor();
            }
            export class PersonDataset implements IPersonDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export enum PersonType {
                actor = 300,
                artist,
                primaryArtist,
                director,
                writer,
                creator,
                producer,
                influencer,
            }
            export class PlaylistContentDataItem implements IPlaylistContentDataItem {
                // constructor();
            }
            export class PlaylistContentDataset implements IPlaylistContentDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class PlaylistDataItem implements IPlaylistDataItem {
                // constructor();
            }
            export class PlaylistDataset implements IPlaylistDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class PlaylistItemsQuery implements IPlaylistItemsQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                watchAll: number;
                primarySortBy: PlaylistItemsSortBy;
                playlistId: number;
                pageSize: number;
                mediaAvailability: Platform.MediaAvailability;
                currentPage: IQueryPage;
                nextPage: IQueryPage;
                previousPage: IQueryPage;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PlaylistItemsQuery.executeAsync');
                }

                getCountAsync(): PlaylistItemsQueryCountOperation {
                    throw new Error('shimmed function PlaylistItemsQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function PlaylistItemsQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PlaylistItemsQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistItemsQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function PlaylistItemsQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PlaylistItemsQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistItemsQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistItemsQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function PlaylistItemsQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`PlaylistItemsQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class PlaylistItemsQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function PlaylistItemsQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PlaylistItemsQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PlaylistItemsQueryCountOperation.close');
                }

            }
            export class PlaylistItemsQueryGroupsOperation implements IPlaylistItemsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                query: IPlaylistItemsQuery;

                wait(): PlaylistContentDataset {
                    throw new Error('shimmed function PlaylistItemsQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function PlaylistItemsQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PlaylistItemsQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PlaylistItemsQueryGroupsOperation.close');
                }

            }
            export class PlaylistItemsQueryOperation implements IPlaylistItemsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IPlaylistItemsQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): PlaylistContentDataset {
                    throw new Error('shimmed function PlaylistItemsQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function PlaylistItemsQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PlaylistItemsQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PlaylistItemsQueryOperation.close');
                }

            }
            export enum PlaylistItemsSortBy {
                none = 10900,
                ordinalAscending,
                ordinalDescending,
            }
            export class PlaylistMediaItemsQuery implements IPlaylistMediaItemsQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;
                watchAll: number = 0;
                primarySortBy: PlaylistItemsSortBy;
                playlistId: number;
                pageSize: number = 100;
                mediaItemObjectType: ObjectType;
                mediaAvailability: Platform.MediaAvailability;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PlaylistMediaItemsQuery.executeAsync');
                }

                getCountAsync(): PlaylistMediaItemsQueryCountOperation {
                    throw new Error('shimmed function PlaylistMediaItemsQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function PlaylistMediaItemsQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PlaylistMediaItemsQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistMediaItemsQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function PlaylistMediaItemsQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PlaylistMediaItemsQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistMediaItemsQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistMediaItemsQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function PlaylistMediaItemsQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`PlaylistMediaItemsQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class PlaylistMediaItemsQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function PlaylistMediaItemsQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PlaylistMediaItemsQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PlaylistMediaItemsQueryCountOperation.close');
                }

            }
            export class PlaylistMediaItemsQueryGroupsOperation implements IPlaylistMediaItemsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IPlaylistMediaItemsQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): MediaDataset {
                    throw new Error('shimmed function PlaylistMediaItemsQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function PlaylistMediaItemsQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PlaylistMediaItemsQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PlaylistMediaItemsQueryGroupsOperation.close');
                }

            }
            export class PlaylistMediaItemsQueryOperation implements IPlaylistMediaItemsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                query: IPlaylistMediaItemsQuery;

                wait(): MediaDataset {
                    throw new Error('shimmed function PlaylistMediaItemsQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function PlaylistMediaItemsQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PlaylistMediaItemsQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PlaylistMediaItemsQueryOperation.close');
                }

            }
            export class PlaylistsQuery implements IPlaylistsQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                watchAll: number = 0;
                title: string = '';
                primarySortBy: PlaylistsSortBy;
                playlistType: Platform.PlaylistType;
                playlistId: number;
                pageSize: number = 100;
                mediaAvailability: Platform.MediaAvailability;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                groupsEnabled: number;
                cloudSyncItemId: string;
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PlaylistsQuery.executeAsync');
                }

                getCountAsync(): PlaylistsQueryCountOperation {
                    throw new Error('shimmed function PlaylistsQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function PlaylistsQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PlaylistsQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistsQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function PlaylistsQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function PlaylistsQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistsQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function PlaylistsQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function PlaylistsQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`PlaylistsQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class PlaylistsQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function PlaylistsQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PlaylistsQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PlaylistsQueryCountOperation.close');
                }

            }
            export class PlaylistsQueryGroupsOperation implements IPlaylistsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IPlaylistsQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): PlaylistDataset {
                    throw new Error('shimmed function PlaylistsQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function PlaylistsQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PlaylistsQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PlaylistsQueryGroupsOperation.close');
                }

            }
            export class PlaylistsQueryOperation implements IPlaylistsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                query: IPlaylistsQuery;

                wait(): PlaylistDataset {
                    throw new Error('shimmed function PlaylistsQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function PlaylistsQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function PlaylistsQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function PlaylistsQueryOperation.close');
                }

            }
            export enum PlaylistsSortBy {
                none = 10300,
                dateAddedAscending,
                dateAddedDescending,
                dateEditedAscending,
                dateEditedDescending,
                nameAscending,
                nameDescending,
                recentlyPlayedDescending,
            }
            export class QueryChangedEventArgs implements IQueryChangedEventArgs {
                json: string;

            }
            export enum RequestType {
                first,
                head,
                get,
                post,
                put,
                delete,
                count,
            }
            export enum ReviewType {
                album = 500,
                movie,
                tvepisode,
            }
            export enum ServiceType {
                xmlService,
                jsonEDS,
                count,
            }
            export class ServiceXMLQuery implements IServiceXMLQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                currentPage: IQueryPage;
                nextPage: IQueryPage;
                previousPage: IQueryPage;
                useIfMatchCache: number = 0;
                useCache: number = 1;
                uri: string;
                serviceType: ServiceType = ServiceType.xmlService;
                requestType: RequestType = RequestType.get;
                pluralizationRules: string[];
                forceLowercaseJsonProperties: number = 0;
                expirationDate: Date = new Date(-2209161600000);

                addParameter(key: string, value: string): void {
                    console.warn('shimmed function ServiceXMLQuery.addParameter');
                }

                removeParameter(key: string): void {
                    console.warn('shimmed function ServiceXMLQuery.removeParameter');
                }

                addHeader(key: string, value: string): void {
                    console.warn('shimmed function ServiceXMLQuery.addHeader');
                }

                removeHeader(key: string): void {
                    console.warn('shimmed function ServiceXMLQuery.removeHeader');
                }

                setPostData(contentType: string, postData: string): void {
                    console.warn('shimmed function ServiceXMLQuery.setPostData');
                }

                clearCachedItemsContainingUrlAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function ServiceXMLQuery.clearCachedItemsContainingUrlAsync');
                }

                testHook_SetXML(value: string): void {
                    console.warn('shimmed function ServiceXMLQuery.testHook_SetXML');
                }

                testHook_SetDelay(value: number): void {
                    console.warn('shimmed function ServiceXMLQuery.testHook_SetDelay');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function ServiceXMLQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function ServiceXMLQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function ServiceXMLQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function ServiceXMLQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`ServiceXMLQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class ServiceXMLQueryPage implements IQueryPage {
            }
            export class ServiceXMLQueryResult implements IQueryResult {
                json: string;

            }
            export enum ServiceXMLQueryStatus {
                processingData,
                count,
            }
            export enum SmartDJObjectTypes {
                person = 10800,
                track,
                album,
            }
            export class TrackDataItem implements ITrackDataItem {
                // constructor();
            }
            export class TrackDataset implements ITrackDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class TracksQuery implements ITracksQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                watchAll: number = 0;
                trackUrl: string = '';
                trackIds: Windows.Foundation.Collections.IIterable<number>;
                trackId: number;
                primarySortBy: TracksSortBy;
                pageSize: number = 100;
                mediaAvailability: Platform.MediaAvailability;
                maxAlbumsCount: number;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                groupsEnabled: number;
                genreId: number;
                artistId: number;
                albumId: number;
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function TracksQuery.executeAsync');
                }

                getCountAsync(): TracksQueryCountOperation {
                    throw new Error('shimmed function TracksQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function TracksQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function TracksQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TracksQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function TracksQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function TracksQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TracksQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TracksQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function TracksQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`TracksQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class TracksQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;

                getResults(): number {
                    throw new Error('shimmed function TracksQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function TracksQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function TracksQueryCountOperation.close');
                }

            }
            export class TracksQueryGroupsOperation implements ITracksQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                query: ITracksQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;

                wait(): TrackDataset {
                    throw new Error('shimmed function TracksQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function TracksQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function TracksQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function TracksQueryGroupsOperation.close');
                }

            }
            export class TracksQueryOperation implements ITracksQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                query: ITracksQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;

                wait(): TrackDataset {
                    throw new Error('shimmed function TracksQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function TracksQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function TracksQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function TracksQueryOperation.close');
                }

            }
            export enum TracksSortBy {
                none = 10200,
                dateAddedAscending,
                dateAddedDescending,
                titleAscending,
                titleDescending,
                numberAscending,
                numberDescending,
                artistAscendingAlbumReleaseYearAscendingNumberAscending,
                artistAscendingAlbumReleaseYearDescendingNumberAscending,
                albumArtistAscendingAlbumReleaseYearAscendingNumberAscending,
                albumArtistAscendingAlbumReleaseYearDescendingNumberAscending,
                albumReleaseYearAscendingNumberAscending,
                albumReleaseYearDescendingNumberAscending,
                genreAscendingTitleAscending,
                genreDescendingTitleDescending,
                albumTitleDiscNumberNumberAscending,
                albumTitleDiscNumberNumberDescending,
                shuffle,
                recentlyPlayedDescending,
                albumDateAddedAscending,
                albumDateAddedDescending,
                albumTitleAscending,
                albumTitleDescending,
                albumReleaseYearAscendingTitleAscending,
                albumReleaseYearDescendingTitleAscending,
                albumArtistAscendingReleaseYearDescending,
                albumArtistDescendingReleaseYearDescending,
                albumGenreNameTitleAscending,
                albumGenreNameTitleDescending,
            }
            export class TVSeasonDataItem implements ITVSeasonDataItem {
                // constructor();
            }
            export class TVSeasonDataset implements ITVSeasonDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class TVSeasonsQuery implements ITVSeasonsQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                watchAll: number = 0;
                tvseriesId: number;
                tvseasonId: number;
                primarySortBy: TVSeasonsSortBy;
                pageSize: number = 100;
                mediaAvailability: Platform.MediaAvailability;
                groupsEnabled: number;
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function TVSeasonsQuery.executeAsync');
                }

                getCountAsync(): TVSeasonsQueryCountOperation {
                    throw new Error('shimmed function TVSeasonsQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function TVSeasonsQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function TVSeasonsQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TVSeasonsQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function TVSeasonsQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function TVSeasonsQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TVSeasonsQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TVSeasonsQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function TVSeasonsQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`TVSeasonsQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class TVSeasonsQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function TVSeasonsQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function TVSeasonsQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function TVSeasonsQueryCountOperation.close');
                }

            }
            export class TVSeasonsQueryGroupsOperation implements ITVSeasonsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: ITVSeasonsQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): TVSeasonDataset {
                    throw new Error('shimmed function TVSeasonsQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function TVSeasonsQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function TVSeasonsQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function TVSeasonsQueryGroupsOperation.close');
                }

            }
            export class TVSeasonsQueryOperation implements ITVSeasonsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: ITVSeasonsQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): TVSeasonDataset {
                    throw new Error('shimmed function TVSeasonsQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function TVSeasonsQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function TVSeasonsQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function TVSeasonsQueryOperation.close');
                }

            }
            export enum TVSeasonsSortBy {
                none = 10600,
                titleAscending,
                titleDescending,
                dateAddedAscending,
                dateAddedDescending,
                numberAscending,
                numberDescending,
                dateAddedOfMostRecentEpisode,
                seriesTitleAndNumber,
            }
            export class TVSeriesDataItem implements ITVSeriesDataItem {
                // constructor();
            }
            export class TVSeriesDataset implements ITVSeriesDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class TVSeriesQuery implements ITVSeriesQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;
                watchAll: number = 0;
                primarySortBy: TVSeriesSortBy;
                pageSize: number = 100;
                mediaAvailability: Platform.MediaAvailability;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                groupsEnabled: number;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function TVSeriesQuery.executeAsync');
                }

                getCountAsync(): TVSeriesQueryCountOperation {
                    throw new Error('shimmed function TVSeriesQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function TVSeriesQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function TVSeriesQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TVSeriesQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function TVSeriesQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function TVSeriesQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TVSeriesQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function TVSeriesQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function TVSeriesQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`TVSeriesQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class TVSeriesQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function TVSeriesQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function TVSeriesQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function TVSeriesQueryCountOperation.close');
                }

            }
            export class TVSeriesQueryGroupsOperation implements ITVSeriesQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                query: ITVSeriesQuery;

                wait(): TVSeriesDataset {
                    throw new Error('shimmed function TVSeriesQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function TVSeriesQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function TVSeriesQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function TVSeriesQueryGroupsOperation.close');
                }

            }
            export class TVSeriesQueryOperation implements ITVSeriesQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                query: ITVSeriesQuery;

                wait(): TVSeriesDataset {
                    throw new Error('shimmed function TVSeriesQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function TVSeriesQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function TVSeriesQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function TVSeriesQueryOperation.close');
                }

            }
            export enum TVSeriesSortBy {
                none = 10700,
                titleAscending,
                titleDescending,
                dateLastEpisodeAddedAscending,
                dateLastEpisodeAddedDescending,
                dateLastEpisodePlayingOrAddedAscending,
                dateLastEpisodePlayingOrAddedDescending,
                latestActivityAscending,
                latestActivityDescending,
            }
            export class VideoDataItem implements IVideoDataItem {
                // constructor();
            }
            export class VideoDataset implements IVideoDataset, IQueryResult {
                // constructor();
                json: string = '';

            }
            export class VideosQuery implements IVideosQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                watchAll: number = 0;
                videoUrl: string = '';
                studio: string = '';
                seriesId: number;
                seasonId: number;
                primarySortBy: VideosSortBy;
                playlistId: number;
                pageSize: number = 100;
                objectIds: Windows.Foundation.Collections.IIterable<number>;
                mediaAvailability: Platform.MediaAvailability;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                isNotExpiredRental: number;
                groupsEnabled: number;
                genreId: number;
                folderId: number;
                category: VideoType;
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function VideosQuery.executeAsync');
                }

                getCountAsync(): VideosQueryCountOperation {
                    throw new Error('shimmed function VideosQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function VideosQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function VideosQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function VideosQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function VideosQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function VideosQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function VideosQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function VideosQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function VideosQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`VideosQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class VideosQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function VideosQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function VideosQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function VideosQueryCountOperation.close');
                }

            }
            export class VideosQueryGroupsOperation implements IVideosQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IVideosQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): VideoDataset {
                    throw new Error('shimmed function VideosQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function VideosQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function VideosQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function VideosQueryGroupsOperation.close');
                }

            }
            export class VideosQueryOperation implements IVideosQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IVideosQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): VideoDataset {
                    throw new Error('shimmed function VideosQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function VideosQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function VideosQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function VideosQueryOperation.close');
                }

            }
            export enum VideosSortBy {
                none = 10000,
                dateAddedAscending,
                dateAddedDescending,
                durationAscending,
                durationDescending,
                titleAscending,
                titleDescending,
                releaseYearAscendingTitleAscending,
                releaseYearDescendingTitleAscending,
                artistAscending,
                artistDescending,
                studioAscending,
                studioDescending,
                seriesTitleSeasonNumberEpisodeNumber,
                dateAddedOrLastPlayingAscending,
                dateAddedOrLastPlayingDescending,
            }
            export class VideoStudioDataItem implements IVideoStudioDataItem {
                // constructor();
            }
            export class VideoStudioDataset implements IVideoStudioDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class VideoStudiosQuery implements IVideoStudiosQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                currentPage: IQueryPage = null;
                nextPage: IQueryPage = null;
                previousPage: IQueryPage;
                watchAll: number = 0;
                pageSize: number = 100;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function VideoStudiosQuery.executeAsync');
                }

                getCountAsync(): VideoStudiosQueryCountOperation {
                    throw new Error('shimmed function VideoStudiosQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function VideoStudiosQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function VideoStudiosQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function VideoStudiosQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function VideoStudiosQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function VideoStudiosQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function VideoStudiosQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function VideoStudiosQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function VideoStudiosQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`VideoStudiosQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class VideoStudiosQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function VideoStudiosQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function VideoStudiosQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function VideoStudiosQueryCountOperation.close');
                }

            }
            export class VideoStudiosQueryGroupsOperation implements IVideoStudiosQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IVideoStudiosQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): VideoStudioDataset {
                    throw new Error('shimmed function VideoStudiosQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function VideoStudiosQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function VideoStudiosQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function VideoStudiosQueryGroupsOperation.close');
                }

            }
            export class VideoStudiosQueryOperation implements IVideoStudiosQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;
                query: IVideoStudiosQuery;

                wait(): VideoStudioDataset {
                    throw new Error('shimmed function VideoStudiosQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function VideoStudiosQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function VideoStudiosQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function VideoStudiosQueryOperation.close');
                }

            }
            export enum VideoType {
                tvepisode = 200,
                musicVideo,
                movie,
                other,
            }
            export class WatchlistContentDataItem implements IWatchlistContentDataItem {
                // constructor();
            }
            export class WatchlistContentDataset implements IWatchlistContentDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class WatchlistDataItem implements IWatchlistDataItem {
                // constructor();
            }
            export class WatchlistDataset implements IWatchlistDataset, IQueryResult {
                // constructor();
                json: string;

            }
            export class WatchlistItemsQuery implements IWatchlistItemsQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                watchlistId: number;
                watchAll: number;
                primarySortBy: WatchlistItemsSortBy;
                pageSize: number;
                mediaItemObjectType: ObjectType;
                currentPage: IQueryPage;
                nextPage: IQueryPage;
                previousPage: IQueryPage;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function WatchlistItemsQuery.executeAsync');
                }

                getCountAsync(): WatchlistItemsQueryCountOperation {
                    throw new Error('shimmed function WatchlistItemsQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function WatchlistItemsQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function WatchlistItemsQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function WatchlistItemsQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function WatchlistItemsQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function WatchlistItemsQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function WatchlistItemsQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function WatchlistItemsQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function WatchlistItemsQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`WatchlistItemsQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class WatchlistItemsQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function WatchlistItemsQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function WatchlistItemsQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function WatchlistItemsQueryCountOperation.close');
                }

            }
            export class WatchlistItemsQueryGroupsOperation implements IWatchlistItemsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IWatchlistItemsQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): WatchlistContentDataset {
                    throw new Error('shimmed function WatchlistItemsQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function WatchlistItemsQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function WatchlistItemsQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function WatchlistItemsQueryGroupsOperation.close');
                }

            }
            export class WatchlistItemsQueryOperation implements IWatchlistItemsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IWatchlistItemsQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): WatchlistContentDataset {
                    throw new Error('shimmed function WatchlistItemsQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function WatchlistItemsQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function WatchlistItemsQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function WatchlistItemsQueryOperation.close');
                }

            }
            export enum WatchlistItemsSortBy {
                none = 11300,
                nameAscending,
                nameDescending,
                dateCreatedAscending,
                dateCreatedDescending,
            }
            export class WatchlistsQuery implements IWatchlistsQuery, IQuery, Windows.Foundation.IClosable {
                // constructor();
                watchlistId: number;
                watchAll: number;
                title: string;
                primarySortBy: WatchlistsSortBy;
                pageSize: number;
                keyword: Windows.Foundation.Collections.IIterable<string>;
                isDefaultWatchlist: number;
                groupsEnabled: number;
                currentPage: IQueryPage;
                nextPage: IQueryPage;
                previousPage: IQueryPage;

                executeAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function WatchlistsQuery.executeAsync');
                }

                getCountAsync(): WatchlistsQueryCountOperation {
                    throw new Error('shimmed function WatchlistsQuery.getCountAsync');
                }

                setCursorPosition(index: number): void {
                    console.warn('shimmed function WatchlistsQuery.setCursorPosition');
                }

                getGroupsAsync(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function WatchlistsQuery.getGroupsAsync');
                }

                refreshAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function WatchlistsQuery.refreshAsync');
                }

                getItemIndexAsync(objectId: number): Windows.Foundation.IAsyncOperation<number> {
                    throw new Error('shimmed function WatchlistsQuery.getItemIndexAsync');
                }

                execute(): Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number> {
                    throw new Error('shimmed function WatchlistsQuery.execute');
                }

                pauseAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function WatchlistsQuery.pauseAsync');
                }

                resumeAsync(): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function WatchlistsQuery.resumeAsync');
                }

                close(): void {
                    console.warn('shimmed function WatchlistsQuery.close');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`WatchlistsQuery::addEventListener: ${name}`);
                    switch (name) {
                        case "querychanged": // /* System.EventHandler`1[[Microsoft.Entertainment.Queries.IQueryChangedEventArgs, Microsoft.Entertainment, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]] */ any
                            break;
                    }

                }
            }
            export class WatchlistsQueryCountOperation implements Windows.Foundation.IAsyncOperation<number>, Windows.Foundation.IAsyncInfo {
                completed: Windows.Foundation.AsyncOperationCompletedHandler<number>;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                getResults(): number {
                    throw new Error('shimmed function WatchlistsQueryCountOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function WatchlistsQueryCountOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function WatchlistsQueryCountOperation.close');
                }

            }
            export class WatchlistsQueryGroupsOperation implements IWatchlistsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IWatchlistsQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): WatchlistDataset {
                    throw new Error('shimmed function WatchlistsQueryGroupsOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function WatchlistsQueryGroupsOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function WatchlistsQueryGroupsOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function WatchlistsQueryGroupsOperation.close');
                }

            }
            export class WatchlistsQueryOperation implements IWatchlistsQueryOperation, Windows.Foundation.IAsyncOperationWithProgress<IQueryResult,number>, Windows.Foundation.IAsyncInfo {
                progress: Windows.Foundation.AsyncOperationProgressHandler<IQueryResult,number>;
                completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<IQueryResult,number>;
                query: IWatchlistsQuery;
                errorCode: number;
                id: number;
                status: Windows.Foundation.AsyncStatus;

                wait(): WatchlistDataset {
                    throw new Error('shimmed function WatchlistsQueryOperation.wait');
                }

                getResults(): IQueryResult {
                    throw new Error('shimmed function WatchlistsQueryOperation.getResults');
                }

                cancel(): void {
                    console.warn('shimmed function WatchlistsQueryOperation.cancel');
                }

                close(): void {
                    console.warn('shimmed function WatchlistsQueryOperation.close');
                }

            }
            export enum WatchlistsSortBy {
                none = 11200,
                nameAscending,
                nameDescending,
                dateCreatedAscending,
                dateCreatedDescending,
            }
        }
        export enum RequestedImageType {
            undefinedRequestedImage,
            primaryImage,
            backgroundImage,
            xboxBackgroundImage,
            albumImage,
        }
        export enum ResolutionFallback {
            none,
            betterQuality,
            anyQuality,
        }
        export namespace Share { 
            export interface IRequestShareEventHandlerArgs {
                package: ISharingPackage;
            }
            export interface ISharingManager {
                share(): void;
                invokeShareEvent(): void;
                setEmptyMessage(value: string): void;
                encodeComplete(): void;
            }
            export interface ISharingMessage {
                package: ISharingPackage;
                recipients: string;
                text: string;
                send(): Windows.Foundation.IAsyncOperation<ISharingStatus>;
            }
            export interface ISharingPackage {
                description: string;
                hasData: Boolean;
                html: string;
                libraryIds: number[];
                libraryTypes: number[];
                mediaAvailabilityFilter: number;
                mediaDescription: string;
                mediaId: string;
                mediaTitle: string;
                mediaType: string;
                shouldShareFiles: Boolean;
                text: string;
                title: string;
                uri: string;
            }
            export interface ISharingStatus {
                errorCode: number;
                success: Boolean;
            }
            export class RequestShareEventHandlerArgs implements IRequestShareEventHandlerArgs {
                package: ISharingPackage;

            }
            export class SharingManager implements ISharingManager {
                // constructor();
                share(): void {
                    console.warn('shimmed function SharingManager.share');
                }

                invokeShareEvent(): void {
                    console.warn('shimmed function SharingManager.invokeShareEvent');
                }

                setEmptyMessage(value: string): void {
                    console.warn('shimmed function SharingManager.setEmptyMessage');
                }

                encodeComplete(): void {
                    console.warn('shimmed function SharingManager.encodeComplete');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`SharingManager::addEventListener: ${name}`);
                    switch (name) {
                        case "requestshareevent": // Windows.Foundation.TypedEventHandler<ISharingManager,RequestShareEventHandlerArgs>
                            break;
                    }

                }
            }
            export class SharingMessage implements ISharingMessage {
                // constructor();
                text: string;
                recipients: string;
                package: ISharingPackage;

                send(): Windows.Foundation.IAsyncOperation<ISharingStatus> {
                    throw new Error('shimmed function SharingMessage.send');
                }

            }
            export class SharingPackage implements ISharingPackage {
                // constructor();
                uri: string;
                title: string;
                text: string;
                shouldShareFiles: Boolean;
                mediaType: string;
                mediaTitle: string;
                mediaId: string;
                mediaDescription: string;
                mediaAvailabilityFilter: number;
                libraryTypes: number[];
                libraryIds: number[];
                html: string;
                description: string;
                hasData: Boolean;

            }
            export class SharingStatus implements ISharingStatus {
                success: Boolean;
                errorCode: number;

            }
        }
        export namespace Sync { 
            export class BlockSyncOperation implements IBlockSyncOperation {
                // constructor();
                cancel(): void {
                    console.warn('shimmed function BlockSyncOperation.cancel');
                }

            }
            export enum CollectionSyncError {
                maxPlaylistsReached = -1056898736,
                collectionFull,
                accountMerged = -1056898688,
                syncError = -1056898672,
            }
            export interface IBlockSyncOperation {
                cancel(): void;
            }
            export interface ISyncManager {
                requestSync(requestSyncOption: RequestSyncOption): void;
                syncAsync(requestSyncOption: RequestSyncOption): Windows.Foundation.IAsyncAction;
                blockSyncAsync(): Windows.Foundation.IAsyncOperation<IBlockSyncOperation>;
                requestOfflineStoreUpdate(): void;
            }
            export enum RequestSyncOption {
                checkIfDirty,
                syncOnlyIfAlreadyDirty,
                forceSync,
            }
            export class SyncManager implements ISyncManager {
                // constructor();
                requestSync(requestSyncOption: RequestSyncOption): void {
                    console.warn('shimmed function SyncManager.requestSync');
                }

                syncAsync(requestSyncOption: RequestSyncOption): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function SyncManager.syncAsync');
                }

                blockSyncAsync(): Windows.Foundation.IAsyncOperation<IBlockSyncOperation> {
                    throw new Error('shimmed function SyncManager.blockSyncAsync');
                }

                requestOfflineStoreUpdate(): void {
                    console.warn('shimmed function SyncManager.requestOfflineStoreUpdate');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`SyncManager::addEventListener: ${name}`);
                    switch (name) {
                        case "collectionsyncend": // /* System.EventHandler`1[[System.Collections.Generic.IReadOnlyList`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] */ any
                            break;
                    }

                }
            }
        }
        export namespace Util { 
            export class ConcurrentStreamingRestriction implements IConcurrentStreamingRestriction {
                // constructor();
                initializeAsync(leaseUrl: string, guidServiceMediaId: string, guidLicenseKeyId: string, guidProductId: string): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function ConcurrentStreamingRestriction.initializeAsync');
                }

                reportStreamingAction(type: EStreamingActionType): void {
                    console.warn('shimmed function ConcurrentStreamingRestriction.reportStreamingAction');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`ConcurrentStreamingRestriction::addEventListener: ${name}`);
                    switch (name) {
                        case "blockstreaming": // Windows.Foundation.TypedEventHandler<IConcurrentStreamingRestriction,number>
                            break;
                    }

                }
            }
            export class Debug implements IDebug {
                // constructor();
                outputDebugString(text: string): void {
                    console.warn('shimmed function Debug.outputDebugString');
                }

            }
            export class EndpointManager implements IEndpointManager {
                // constructor();
                getEndpointCulture(): string {
                    throw new Error('shimmed function EndpointManager.getEndpointCulture');
                }

                getEndpointUri(eEndpointId: number): string {
                    throw new Error('shimmed function EndpointManager.getEndpointUri');
                }

            }
            export namespace Endpoints { 
                export enum EndpointId {
                    seid_AccountsAuth = 1,
                    seid_AccountsTroubleshooter,
                    seid_AccountsTroubleshooterRelyingParty,
                    seid_AuthTransfer,
                    seid_BigCat,
                    seid_BingAutoSuggest,
                    seid_CTPAuth,
                    seid_CTPPassport,
                    seid_CdfXboxLiveDotCom,
                    seid_CloudCollection,
                    seid_CloudCollectionPlaylist,
                    seid_CloudCollectionRelyingParty,
                    seid_CloudCollectionV2,
                    seid_Commerce,
                    seid_CommerceBase,
                    seid_CommerceBillingHistory,
                    seid_CommerceContactInfo,
                    seid_CommerceContactPreferences,
                    seid_CommercePaymentOptions,
                    seid_CommercePrivacy,
                    seid_CommercePurchase,
                    seid_CommercePurchaseRelyingParty,
                    seid_CommerceV2,
                    seid_CommerceV3,
                    seid_CommerceXdlcInventory,
                    seid_CommerceXdlcInventoryRelyingParty,
                    seid_CommerceXdlcLicensing,
                    seid_CommerceXdlcLicensingRelyingParty,
                    seid_EDSRelyingParty,
                    seid_EDSSearch,
                    seid_EDSServiceAnon,
                    seid_EDSServiceAnonNoCulture,
                    seid_EDSServiceAuth,
                    seid_EDSServiceAuthNoCulture,
                    seid_ESListService,
                    seid_ESRelyingParty,
                    seid_EchoNestDeveloperApi,
                    seid_EntitlementsCollections,
                    seid_Feedback,
                    seid_FlightAssignment,
                    seid_GetAlbumDetailsByAlbumId,
                    seid_GraceNote,
                    seid_ImageCatalog,
                    seid_LiveTile,
                    seid_MarketplaceLicensing,
                    seid_MediaDeliveryV1RelyingParty,
                    seid_MediaDeliveryV2,
                    seid_MediaDeliveryV2RelyingParty,
                    seid_MediaDiscovery,
                    seid_MediaUsage,
                    seid_MediaUsageRelyingParty,
                    seid_MicrosoftBilling,
                    seid_ModernPurchase,
                    seid_MusicAssetRequests,
                    seid_MusicAuth,
                    seid_MusicImageService,
                    seid_MusicMatchRelyingParty,
                    seid_MusicMatchRequests,
                    seid_MusicPassSignupPage,
                    seid_NookGpb,
                    seid_NookProxy,
                    seid_NookStore,
                    seid_PCMarketplace,
                    seid_Passport,
                    seid_PassportTicket,
                    seid_PostrollCredits,
                    seid_PurchaseFlow,
                    seid_Ratings,
                    seid_RatingsRelyingParty,
                    seid_ReadAccountMerge,
                    seid_ReadBuyerUX,
                    seid_ReadBuyerUXTOU,
                    seid_ReadCommerceService,
                    seid_ReadPurchase,
                    seid_RichPresence,
                    seid_RootCatalog,
                    seid_StoreChannels,
                    seid_SubmitAddFeedback,
                    seid_Tuners,
                    seid_UXServicesRelyingParty,
                    seid_UserEngagementService,
                    seid_UserProfile,
                    seid_UserTokenAuthRequest,
                    seid_UserTokenTarget,
                    seid_VideoDelivery,
                    seid_VideoDeliveryRelyingParty,
                    seid_WMISEndpoints,
                    seid_WMISImage,
                    seid_WMISRedir,
                    seid_WinPhoneXboxDotCom,
                    seid_XBLAuth,
                    seid_XBox,
                    seid_XBoxLive,
                    seid_XBoxLiveSSL,
                    seid_XSTSAuth,
                    seid_XSTSAuthPassport,
                    seid_XTokenAuthRequest,
                    seid_XTokenTarget,
                    seid_XblRelyingParty,
                    seid_XboxLiveData,
                    seid_XboxLiveDataRelyingParty,
                    seid_XboxMusic,
                    seid_XboxSupport,
                }
            }
            export class ErrorMapper implements IErrorMapper {
                // constructor();
                getMappedError(hrError: number): MappedError {
                    throw new Error('shimmed function ErrorMapper.getMappedError');
                }

            }
            export enum EStreamingActionType {
                eStreamingActionTypeStart,
                eStreamingActionTypeStop,
                eStreamingActionTypePause,
                eStreamingActionTypeResume,
                eStreamingActionTypeKeepAlive,
            }
            export class GlobalizationManager implements IGlobalizationManager {
                // constructor();
                getRegion(): string {
                    throw new Error('shimmed function GlobalizationManager.getRegion');
                }

                getLanguageNameFromLcid(languageLcid: number): string {
                    throw new Error('shimmed function GlobalizationManager.getLanguageNameFromLcid');
                }

            }
            export class Header implements IHeader {
                key: string;
                value: string;

            }
            export interface IConcurrentStreamingRestriction {
                initializeAsync(leaseUrl: string, guidServiceMediaId: string, guidLicenseKeyId: string, guidProductId: string): Windows.Foundation.IAsyncAction;
                reportStreamingAction(type: EStreamingActionType): void;
            }
            export interface IDebug {
                outputDebugString(text: string): void;
            }
            export interface IEndpointManager {
                getEndpointCulture(): string;
                getEndpointUri(eEndpointId: number): string;
            }
            export interface IErrorMapper {
                getMappedError(hrError: number): MappedError;
            }
            export interface IGlobalizationManager {
                getRegion(): string;
                getLanguageNameFromLcid(languageLcid: number): string;
            }
            export interface IHeader {
                key: string;
                value: string;
            }
            export interface IIdentityInfo {
                explicitPrivilege: Boolean;
                gamerTag: string;
                isSubscription: Boolean;
                isTunerActivatable: Boolean;
                isTunerActivated: Boolean;
                locale: string;
                meteringCertificate: string;
                name: string;
                parentallyControlled: Boolean;
                usageCollectionAllowed: Boolean;
                xuid: string;
            }
            export interface IPlayReadyHandler {
                beginServiceRequest(pRequest: any): Windows.Foundation.IAsyncActionWithProgress<string>;
            }
            export interface IPlayReadyHandlerFactory {
                createPlayReadyHandlerForRoot(hstrTicket: string): PlayReadyHandler;
                createPlayReadyHandler(hstrTicket: string, hstrRight: string, fLogToDownloadHistory: Boolean, guidOfferId: string, guidServiceMediaInstanceId: string): PlayReadyHandler;
                createPlayReadyHandlerForMetering(hstrTicket: string, hstrMeteringCertificate: string): PlayReadyHandler;
            }
            export interface IPlayReadyStaticHelpers {
                acquireRootLicense(hstrTicket: string): Windows.Foundation.IAsyncActionWithProgress<string>;
                reportMetering(hstrTicket: string, hstrMeteringCertificate: string): Windows.Foundation.IAsyncActionWithProgress<string>;
                createForVideoServiceMediaId(serviceMediaId: string, isStreaming: Boolean): PlayReadyHandler;
                createForVideoLicensePolicyTicket(hstrSignedLicensePolicyTicket: string, isStreaming: Boolean): PlayReadyHandler;
            }
            export interface IProvisioningResult {
                result: number;
            }
            export interface ISignIn {
                canSignOut: Boolean;
                cid: string;
                firstName: string;
                id: string;
                isSignInSupported: Boolean;
                lastName: string;
                membershipLevel: string;
                signInName: string;
                startTime: Date;
                subscriptionOfferID: string;
                userXuid: string;
                signInUser(ticket: string): Windows.Foundation.IAsyncOperation<ISignIn>;
                authenticateUser(ticket: string): Windows.Foundation.IAsyncOperation<ISignIn>;
                signOut(persistUserDB: Boolean): Windows.Foundation.IAsyncOperation<ISignIn>;
                forgetUserInformation(): Windows.Foundation.IAsyncOperation<ISignIn>;
                getTicket(passportPolicy: string, targetService: string, ignoreSignInState: Boolean, promptType: SignInPromptType): Windows.Foundation.IAsyncOperation<ITicket>;
                getDeviceTicket(passportPolicy: string, targetService: string): Windows.Foundation.IAsyncOperation<ITicket>;
                getAuthHeader(): Windows.Foundation.IAsyncOperation<IHeader>;
                getAuthHeaderForEndpoint(iEndpointId: number, ignoreSignInState: Boolean): Windows.Foundation.IAsyncOperation<IHeader>;
                getXTokenAsyncOp(iEndpointId: number): Windows.Foundation.IAsyncOperation<IXToken>;
                getXTokenByRelyingPartyAsyncOp(relyingParty: string): Windows.Foundation.IAsyncOperation<IXToken>;
                isSignedIn(): Boolean;
                provisionUserAccount(): Windows.Foundation.IAsyncOperation<IProvisioningResult>;
                updatePartnerToken(partnerToken: string): Windows.Foundation.IAsyncAction;
                clearTokenMap(): void;
                setUserProperties(cid: string, signInName: string, firstName: string, lastName: string, id: string): void;
                getV3TokenFromMap(endpoint: string): { returnValue: Date, token: string };
                removeV3TokenEntry(endpoint: string): void;
                setV3Token(endpoint: string, token: string, dateExpires: Date): void;
                getTokenFromMap(iEndpointId: number): string;
                setToken(iEndpointId: number, token: string): void;
                setSignInState(pIdentityInfo: any): void;
                raiseSignInCompleted(signInResult: number): void;
                raiseSignOutCompleted(signOutResult: number): void;
                clearSignInState(): void;
            }
            export interface ISignInChangedEventArgs {
                isSubscription: Boolean;
                xuid: number;
            }
            export interface ISignInCompletedEventArgs {
                signInResult: number;
            }
            export interface ISignOutCompletedEventArgs {
                signOutResult: number;
            }
            export interface ITicket {
                passportTicket: string;
            }
            export interface IXToken {
                signature: string;
                token: string;
            }
            export interface MappedError {
                error: number;
                description: string;
                webUrl: string;
            }
            export class PlayReadyHandler implements IPlayReadyHandler {
                // constructor(hstrTicket: string);
                // constructor(hstrTicket: string, hstrRight: string, fLogToDownloadHistory: Boolean, guidOfferId: string, guidServiceMediaInstanceId: string);
                // constructor(hstrTicket: string, hstrMeteringCertificate: string);
                constructor(hstrTicket: string, hstrRight: string, fLogToDownloadHistory: Boolean, guidOfferId: string, guidServiceMediaInstanceId: string, hstrMeteringCertificate: string) {}

                beginServiceRequest(pRequest: any): Windows.Foundation.IAsyncActionWithProgress<string> {
                    throw new Error('shimmed function PlayReadyHandler.beginServiceRequest');
                }

                static acquireRootLicense(hstrTicket: string): Windows.Foundation.IAsyncActionWithProgress<string> {
                    throw new Error('shimmed function PlayReadyHandler.acquireRootLicense');
                }

                static reportMetering(hstrTicket: string, hstrMeteringCertificate: string): Windows.Foundation.IAsyncActionWithProgress<string> {
                    throw new Error('shimmed function PlayReadyHandler.reportMetering');
                }

                static createForVideoServiceMediaId(serviceMediaId: string, isStreaming: Boolean): PlayReadyHandler {
                    throw new Error('shimmed function PlayReadyHandler.createForVideoServiceMediaId');
                }

                static createForVideoLicensePolicyTicket(hstrSignedLicensePolicyTicket: string, isStreaming: Boolean): PlayReadyHandler {
                    throw new Error('shimmed function PlayReadyHandler.createForVideoLicensePolicyTicket');
                }

            }
            export class PlayReadyHandlerFactory implements IPlayReadyHandlerFactory {
                // constructor();
                createPlayReadyHandlerForRoot(hstrTicket: string): PlayReadyHandler {
                    throw new Error('shimmed function PlayReadyHandlerFactory.createPlayReadyHandlerForRoot');
                }

                createPlayReadyHandler(hstrTicket: string, hstrRight: string, fLogToDownloadHistory: Boolean, guidOfferId: string, guidServiceMediaInstanceId: string): PlayReadyHandler {
                    throw new Error('shimmed function PlayReadyHandlerFactory.createPlayReadyHandler');
                }

                createPlayReadyHandlerForMetering(hstrTicket: string, hstrMeteringCertificate: string): PlayReadyHandler {
                    throw new Error('shimmed function PlayReadyHandlerFactory.createPlayReadyHandlerForMetering');
                }

            }
            export class ProvisioningResult implements IProvisioningResult {
                result: number;

            }
            export class SignIn implements ISignIn, IIdentityInfo {
                // constructor();
                startTime: Date = new Date(-2209161600000);
                isSignInSupported: Boolean = false;
                canSignOut: Boolean = false;
                cid: string = '';
                firstName: string = '';
                id: string = '';
                lastName: string = '';
                membershipLevel: string = '';
                signInName: string = '';
                subscriptionOfferID: string = '';
                userXuid: string = '';
                explicitPrivilege: Boolean = false;
                gamerTag: string = '';
                isSubscription: Boolean = false;
                isTunerActivatable: Boolean = false;
                isTunerActivated: Boolean = false;
                locale: string = '';
                meteringCertificate: string = '';
                name: string = '';
                parentallyControlled: Boolean = false;
                usageCollectionAllowed: Boolean = false;
                xuid: string = '';

                signInUser(ticket: string): Windows.Foundation.IAsyncOperation<ISignIn> {
                    throw new Error('shimmed function SignIn.signInUser');
                }

                authenticateUser(ticket: string): Windows.Foundation.IAsyncOperation<ISignIn> {
                    throw new Error('shimmed function SignIn.authenticateUser');
                }

                signOut(persistUserDB: Boolean): Windows.Foundation.IAsyncOperation<ISignIn> {
                    throw new Error('shimmed function SignIn.signOut');
                }

                forgetUserInformation(): Windows.Foundation.IAsyncOperation<ISignIn> {
                    throw new Error('shimmed function SignIn.forgetUserInformation');
                }

                getTicket(passportPolicy: string, targetService: string, ignoreSignInState: Boolean, promptType: SignInPromptType): Windows.Foundation.IAsyncOperation<ITicket> {
                    throw new Error('shimmed function SignIn.getTicket');
                }

                getDeviceTicket(passportPolicy: string, targetService: string): Windows.Foundation.IAsyncOperation<ITicket> {
                    throw new Error('shimmed function SignIn.getDeviceTicket');
                }

                getAuthHeader(): Windows.Foundation.IAsyncOperation<IHeader> {
                    throw new Error('shimmed function SignIn.getAuthHeader');
                }

                getAuthHeaderForEndpoint(iEndpointId: number, ignoreSignInState: Boolean): Windows.Foundation.IAsyncOperation<IHeader> {
                    throw new Error('shimmed function SignIn.getAuthHeaderForEndpoint');
                }

                getXTokenAsyncOp(iEndpointId: number): Windows.Foundation.IAsyncOperation<IXToken> {
                    throw new Error('shimmed function SignIn.getXTokenAsyncOp');
                }

                getXTokenByRelyingPartyAsyncOp(relyingParty: string): Windows.Foundation.IAsyncOperation<IXToken> {
                    throw new Error('shimmed function SignIn.getXTokenByRelyingPartyAsyncOp');
                }

                isSignedIn(): Boolean {
                    throw new Error('shimmed function SignIn.isSignedIn');
                }

                provisionUserAccount(): Windows.Foundation.IAsyncOperation<IProvisioningResult> {
                    throw new Error('shimmed function SignIn.provisionUserAccount');
                }

                updatePartnerToken(partnerToken: string): Windows.Foundation.IAsyncAction {
                    throw new Error('shimmed function SignIn.updatePartnerToken');
                }

                clearTokenMap(): void {
                    console.warn('shimmed function SignIn.clearTokenMap');
                }

                setUserProperties(cid: string, signInName: string, firstName: string, lastName: string, id: string): void {
                    console.warn('shimmed function SignIn.setUserProperties');
                }

                getV3TokenFromMap(endpoint: string): { returnValue: Date, token: string } {
                    throw new Error('shimmed function SignIn.getV3TokenFromMap');
                }

                removeV3TokenEntry(endpoint: string): void {
                    console.warn('shimmed function SignIn.removeV3TokenEntry');
                }

                setV3Token(endpoint: string, token: string, dateExpires: Date): void {
                    console.warn('shimmed function SignIn.setV3Token');
                }

                getTokenFromMap(iEndpointId: number): string {
                    throw new Error('shimmed function SignIn.getTokenFromMap');
                }

                setToken(iEndpointId: number, token: string): void {
                    console.warn('shimmed function SignIn.setToken');
                }

                setSignInState(pIdentityInfo: any): void {
                    console.warn('shimmed function SignIn.setSignInState');
                }

                raiseSignInCompleted(signInResult: number): void {
                    console.warn('shimmed function SignIn.raiseSignInCompleted');
                }

                raiseSignOutCompleted(signOutResult: number): void {
                    console.warn('shimmed function SignIn.raiseSignOutCompleted');
                }

                clearSignInState(): void {
                    console.warn('shimmed function SignIn.clearSignInState');
                }

                addEventListener(name: string, handler: Function) {
                    console.warn(`SignIn::addEventListener: ${name}`);
                    switch (name) {
                        case "signinchanged": // Windows.Foundation.TypedEventHandler<ISignIn,SignInChangedEventArgs>
                        case "signincompleted": // Windows.Foundation.TypedEventHandler<ISignIn,SignInCompletedEventArgs>
                        case "signinstarted": // Windows.Foundation.TypedEventHandler<ISignIn,any>
                        case "signoutcompleted": // Windows.Foundation.TypedEventHandler<ISignIn,SignOutCompletedEventArgs>
                        case "signoutstarted": // Windows.Foundation.TypedEventHandler<ISignIn,any>
                            break;
                    }

                }
            }
            export class SignInChangedEventArgs implements ISignInChangedEventArgs {
                isSubscription: Boolean;
                xuid: number;

            }
            export class SignInCompletedEventArgs implements ISignInCompletedEventArgs {
                signInResult: number;

            }
            export enum SignInPromptType {
                promptIfNeeded,
                retypeCredentials,
                doNotPrompt,
            }
            export class SignOutCompletedEventArgs implements ISignOutCompletedEventArgs {
                signOutResult: number;

            }
            export class Ticket implements ITicket {
                passportTicket: string;

            }
            export class XToken implements IXToken {
                signature: string;
                token: string;

            }
        }
    }
}
